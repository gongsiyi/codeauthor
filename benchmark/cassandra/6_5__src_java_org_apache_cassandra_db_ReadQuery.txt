1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
2:a991b64: 
1:a991b64: import org.apache.cassandra.db.filter.DataLimits;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:a991b64: import org.apache.cassandra.exceptions.RequestExecutionException;
1:a991b64: import org.apache.cassandra.service.ClientState;
1:a991b64: import org.apache.cassandra.service.pager.QueryPager;
1:a991b64: import org.apache.cassandra.service.pager.PagingState;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Generic abstraction for read queries.
1:a991b64:  * <p>
1:a991b64:  * The main implementation of this is {@link ReadCommand} but we have this interface because
1:a991b64:  * {@link SinglePartitionReadCommand.Group} is also consider as a "read query" but is not a
1:a991b64:  * {@code ReadCommand}.
1:a991b64:  */
1:a991b64: public interface ReadQuery
2:a991b64: {
1:5a4253b:     ReadQuery EMPTY = new ReadQuery()
1:a991b64:     {
1:557bbbc:         public ReadExecutionController executionController()
1:a991b64:         {
1:557bbbc:             return ReadExecutionController.empty();
2:a991b64:         }
1:a991b64: 
1:aa83c94:         public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestExecutionException
1:a991b64:         {
1:6094974:             return EmptyIterators.partition();
1:a991b64:         }
1:a991b64: 
1:557bbbc:         public PartitionIterator executeInternal(ReadExecutionController controller)
1:a991b64:         {
1:6094974:             return EmptyIterators.partition();
1:a991b64:         }
1:a991b64: 
1:f2d5cd0:         public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController)
1:f2d5cd0:         {
1:f2d5cd0:             return EmptyIterators.unfilteredPartition(executionController.metaData(), false);
1:f2d5cd0:         }
1:f2d5cd0: 
1:a991b64:         public DataLimits limits()
1:a991b64:         {
1:a991b64:             // What we return here doesn't matter much in practice. However, returning DataLimits.NONE means
1:a991b64:             // "no particular limit", which makes SelectStatement.execute() take the slightly more complex "paging"
1:a991b64:             // path. Not a big deal but it's easy enough to return a limit of 0 rows which avoids this.
1:a991b64:             return DataLimits.cqlLimits(0);
1:a991b64:         }
1:a991b64: 
1:e0adc16:         public QueryPager getPager(PagingState state, ProtocolVersion protocolVersion)
1:a991b64:         {
2:a991b64:             return QueryPager.EMPTY;
1:a991b64:         }
1:5a4253b: 
1:5a4253b:         public boolean selectsKey(DecoratedKey key)
1:5a4253b:         {
1:5a4253b:             return false;
1:5a4253b:         }
1:5a4253b: 
1:5a4253b:         public boolean selectsClustering(DecoratedKey key, Clustering clustering)
1:5a4253b:         {
1:5a4253b:             return false;
1:5a4253b:         }
1:a991b64:     };
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Starts a new read operation.
1:a991b64:      * <p>
1:a991b64:      * This must be called before {@link executeInternal} and passed to it to protect the read.
1:a991b64:      * The returned object <b>must</b> be closed on all path and it is thus strongly advised to
1:a991b64:      * use it in a try-with-ressource construction.
1:a991b64:      *
1:557bbbc:      * @return a newly started execution controller for this {@code ReadQuery}.
1:a991b64:      */
1:557bbbc:     public ReadExecutionController executionController();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Executes the query at the provided consistency level.
1:a991b64:      *
1:a991b64:      * @param consistency the consistency level to achieve for the query.
1:a991b64:      * @param clientState the {@code ClientState} for the query. In practice, this can be null unless
1:a991b64:      * {@code consistency} is a serial consistency.
1:a991b64:      *
1:a991b64:      * @return the result of the query.
1:a991b64:      */
1:aa83c94:     public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestExecutionException;
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Execute the query for internal queries (that is, it basically executes the query locally).
1:a991b64:      *
1:557bbbc:      * @param controller the {@code ReadExecutionController} protecting the read.
1:a991b64:      * @return the result of the query.
1:a991b64:      */
1:557bbbc:     public PartitionIterator executeInternal(ReadExecutionController controller);
1:a991b64: 
1:a991b64:     /**
1:f2d5cd0:      * Execute the query locally. This is similar to {@link ReadQuery#executeInternal(ReadExecutionController)}
1:f2d5cd0:      * but it returns an unfiltered partition iterator that can be merged later on.
1:f2d5cd0:      *
1:f2d5cd0:      * @param controller the {@code ReadExecutionController} protecting the read.
1:f2d5cd0:      * @return the result of the read query.
1:f2d5cd0:      */
1:f2d5cd0:     public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController);
1:f2d5cd0: 
1:f2d5cd0:     /**
1:a991b64:      * Returns a pager for the query.
1:a991b64:      *
1:a991b64:      * @param pagingState the {@code PagingState} to start from if this is a paging continuation. This can be
1:a991b64:      * {@code null} if this is the start of paging.
1:b99c863:      * @param protocolVersion the protocol version to use for the paging state of that pager.
1:a991b64:      *
1:a991b64:      * @return a pager for the query.
1:a991b64:      */
1:e0adc16:     public QueryPager getPager(PagingState pagingState, ProtocolVersion protocolVersion);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The limits for the query.
1:a991b64:      *
1:a991b64:      * @return The limits for the query.
1:a991b64:      */
1:a991b64:     public DataLimits limits();
1:5a4253b: 
1:5a4253b:     /**
1:5a4253b:      * @return true if the read query would select the given key, including checks against the row filter, if
1:5a4253b:      * checkRowFilter is true
1:5a4253b:      */
1:5a4253b:     public boolean selectsKey(DecoratedKey key);
1:5a4253b: 
1:5a4253b:     /**
1:5a4253b:      * @return true if the read query would select the given clustering, including checks against the row filter, if
1:5a4253b:      * checkRowFilter is true
1:5a4253b:      */
1:5a4253b:     public boolean selectsClustering(DecoratedKey key, Clustering clustering);
1:a991b64: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         public QueryPager getPager(PagingState state, ProtocolVersion protocolVersion)
/////////////////////////////////////////////////////////////////////////
1:     public QueryPager getPager(PagingState pagingState, ProtocolVersion protocolVersion);
commit:f2d5cd0
/////////////////////////////////////////////////////////////////////////
1:         public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController)
1:         {
1:             return EmptyIterators.unfilteredPartition(executionController.metaData(), false);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Execute the query locally. This is similar to {@link ReadQuery#executeInternal(ReadExecutionController)}
1:      * but it returns an unfiltered partition iterator that can be merged later on.
1:      *
1:      * @param controller the {@code ReadExecutionController} protecting the read.
1:      * @return the result of the read query.
1:      */
1:     public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController);
1: 
1:     /**
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1:         public ReadExecutionController executionController()
1:             return ReadExecutionController.empty();
/////////////////////////////////////////////////////////////////////////
1:         public PartitionIterator executeInternal(ReadExecutionController controller)
/////////////////////////////////////////////////////////////////////////
1:      * @return a newly started execution controller for this {@code ReadQuery}.
1:     public ReadExecutionController executionController();
/////////////////////////////////////////////////////////////////////////
1:      * @param controller the {@code ReadExecutionController} protecting the read.
1:     public PartitionIterator executeInternal(ReadExecutionController controller);
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:         public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestExecutionException
/////////////////////////////////////////////////////////////////////////
1:     public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestExecutionException;
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:928e4c2
commit:6094974
/////////////////////////////////////////////////////////////////////////
1:             return EmptyIterators.partition();
1:             return EmptyIterators.partition();
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1:     ReadQuery EMPTY = new ReadQuery()
/////////////////////////////////////////////////////////////////////////
1: 
1:         public boolean selectsKey(DecoratedKey key)
1:         {
1:             return false;
1:         }
1: 
1:         public boolean selectsClustering(DecoratedKey key, Clustering clustering)
1:         {
1:             return false;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return true if the read query would select the given key, including checks against the row filter, if
1:      * checkRowFilter is true
1:      */
1:     public boolean selectsKey(DecoratedKey key);
1: 
1:     /**
1:      * @return true if the read query would select the given clustering, including checks against the row filter, if
1:      * checkRowFilter is true
1:      */
1:     public boolean selectsClustering(DecoratedKey key, Clustering clustering);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:b99c863
/////////////////////////////////////////////////////////////////////////
0:         public QueryPager getPager(PagingState state, int protocolVersion)
/////////////////////////////////////////////////////////////////////////
1:      * @param protocolVersion the protocol version to use for the paging state of that pager.
0:     public QueryPager getPager(PagingState pagingState, int protocolVersion);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import org.apache.cassandra.db.filter.DataLimits;
1: import org.apache.cassandra.db.partitions.*;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.pager.QueryPager;
1: import org.apache.cassandra.service.pager.PagingState;
1: 
1: /**
1:  * Generic abstraction for read queries.
1:  * <p>
1:  * The main implementation of this is {@link ReadCommand} but we have this interface because
1:  * {@link SinglePartitionReadCommand.Group} is also consider as a "read query" but is not a
1:  * {@code ReadCommand}.
1:  */
1: public interface ReadQuery
1: {
0:     public static final ReadQuery EMPTY = new ReadQuery()
1:     {
0:         public ReadOrderGroup startOrderGroup()
1:         {
0:             return ReadOrderGroup.emptyGroup();
1:         }
1: 
0:         public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState) throws RequestExecutionException
1:         {
0:             return PartitionIterators.EMPTY;
1:         }
1: 
0:         public PartitionIterator executeInternal(ReadOrderGroup orderGroup)
1:         {
0:             return PartitionIterators.EMPTY;
1:         }
1: 
1:         public DataLimits limits()
1:         {
1:             // What we return here doesn't matter much in practice. However, returning DataLimits.NONE means
1:             // "no particular limit", which makes SelectStatement.execute() take the slightly more complex "paging"
1:             // path. Not a big deal but it's easy enough to return a limit of 0 rows which avoids this.
1:             return DataLimits.cqlLimits(0);
1:         }
1: 
0:         public QueryPager getPager(PagingState state)
1:         {
1:             return QueryPager.EMPTY;
1:         }
1: 
0:         public QueryPager getLocalPager()
1:         {
1:             return QueryPager.EMPTY;
1:         }
1:     };
1: 
1:     /**
1:      * Starts a new read operation.
1:      * <p>
1:      * This must be called before {@link executeInternal} and passed to it to protect the read.
1:      * The returned object <b>must</b> be closed on all path and it is thus strongly advised to
1:      * use it in a try-with-ressource construction.
1:      *
0:      * @return a newly started order group for this {@code ReadQuery}.
1:      */
0:     public ReadOrderGroup startOrderGroup();
1: 
1:     /**
1:      * Executes the query at the provided consistency level.
1:      *
1:      * @param consistency the consistency level to achieve for the query.
1:      * @param clientState the {@code ClientState} for the query. In practice, this can be null unless
1:      * {@code consistency} is a serial consistency.
1:      *
1:      * @return the result of the query.
1:      */
0:     public PartitionIterator execute(ConsistencyLevel consistency, ClientState clientState) throws RequestExecutionException;
1: 
1:     /**
1:      * Execute the query for internal queries (that is, it basically executes the query locally).
1:      *
0:      * @param orderGroup the {@code ReadOrderGroup} protecting the read.
1:      * @return the result of the query.
1:      */
0:     public PartitionIterator executeInternal(ReadOrderGroup orderGroup);
1: 
1:     /**
1:      * Returns a pager for the query.
1:      *
1:      * @param pagingState the {@code PagingState} to start from if this is a paging continuation. This can be
1:      * {@code null} if this is the start of paging.
1:      *
1:      * @return a pager for the query.
1:      */
0:     public QueryPager getPager(PagingState pagingState);
1: 
1:     /**
1:      * The limits for the query.
1:      *
1:      * @return The limits for the query.
1:      */
1:     public DataLimits limits();
1: }
============================================================================