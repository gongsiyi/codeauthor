1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3.statements;
1:655ccc3: 
1:655ccc3: import org.apache.cassandra.cql3.CFName;
1:655ccc3: import org.apache.cassandra.service.ClientState;
1:3a2faf9: import org.apache.cassandra.exceptions.InvalidRequestException;
1:655ccc3: 
1:655ccc3: /**
1:655ccc3:  * Abstract class for statements that apply on a given column family.
1:655ccc3:  */
1:e10eb19: public abstract class CFStatement extends ParsedStatement
1:655ccc3: {
1:655ccc3:     protected final CFName cfName;
1:655ccc3: 
1:655ccc3:     protected CFStatement(CFName cfName)
1:655ccc3:     {
1:655ccc3:         this.cfName = cfName;
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:655ccc3:     {
1:655ccc3:         if (!cfName.hasKeyspace())
1:655ccc3:         {
1:d63d07b:             // XXX: We explicitely only want to call state.getKeyspace() in this case, as we don't want to throw
1:d63d07b:             // if not logged in any keyspace but a keyspace is explicitely set on the statement. So don't move
1:d63d07b:             // the call outside the 'if' or replace the method by 'prepareKeyspace(state.getKeyspace())'
1:655ccc3:             cfName.setKeyspace(state.getKeyspace(), true);
1:655ccc3:         }
1:655ccc3:     }
1:655ccc3: 
1:d63d07b:     // Only for internal calls, use the version with ClientState for user queries
1:d63d07b:     public void prepareKeyspace(String keyspace)
1:d63d07b:     {
1:d63d07b:         if (!cfName.hasKeyspace())
1:d63d07b:             cfName.setKeyspace(keyspace, true);
1:d63d07b:     }
1:d63d07b: 
1:655ccc3:     public String keyspace()
1:655ccc3:     {
1:655ccc3:         assert cfName.hasKeyspace() : "The statement hasn't be prepared correctly";
1:655ccc3:         return cfName.getKeyspace();
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     public String columnFamily()
1:655ccc3:     {
1:655ccc3:         return cfName.getColumnFamily();
1:655ccc3:     }
1:655ccc3: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:             // XXX: We explicitely only want to call state.getKeyspace() in this case, as we don't want to throw
1:             // if not logged in any keyspace but a keyspace is explicitely set on the statement. So don't move
1:             // the call outside the 'if' or replace the method by 'prepareKeyspace(state.getKeyspace())'
1:     // Only for internal calls, use the version with ClientState for user queries
1:     public void prepareKeyspace(String keyspace)
1:     {
1:         if (!cfName.hasKeyspace())
1:             cfName.setKeyspace(keyspace, true);
1:     }
1: 
commit:c74a871
/////////////////////////////////////////////////////////////////////////
0:             // XXX: We explicitely only want to call state.getKeyspace() in this case, don't move it outside the if.
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.InvalidRequestException;
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:e10eb19
/////////////////////////////////////////////////////////////////////////
1: public abstract class CFStatement extends ParsedStatement
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.cql3.CFName;
0: import org.apache.cassandra.cql3.CQLStatement;
1: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.thrift.InvalidRequestException;
1: 
1: /**
1:  * Abstract class for statements that apply on a given column family.
1:  */
0: public abstract class CFStatement extends CQLStatement
1: {
1:     protected final CFName cfName;
1: 
1:     protected CFStatement(CFName cfName)
1:     {
1:         this.cfName = cfName;
1:     }
1: 
1:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:     {
1:         if (!cfName.hasKeyspace())
1:         {
1:             cfName.setKeyspace(state.getKeyspace(), true);
1:         }
1:     }
1: 
1:     public String keyspace()
1:     {
1:         assert cfName.hasKeyspace() : "The statement hasn't be prepared correctly";
1:         return cfName.getKeyspace();
1:     }
1: 
1:     public String columnFamily()
1:     {
1:         return cfName.getColumnFamily();
1:     }
1: }
============================================================================