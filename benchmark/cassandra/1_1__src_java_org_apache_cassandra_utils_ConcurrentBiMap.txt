1:bfd03f1: /*
1:bfd03f1:  * Licensed to the Apache Software Foundation (ASF) under one
1:bfd03f1:  * or more contributor license agreements.  See the NOTICE file
1:bfd03f1:  * distributed with this work for additional information
1:bfd03f1:  * regarding copyright ownership.  The ASF licenses this file
1:bfd03f1:  * to you under the Apache License, Version 2.0 (the
1:bfd03f1:  * "License"); you may not use this file except in compliance
1:bfd03f1:  * with the License.  You may obtain a copy of the License at
1:bfd03f1:  *
1:bfd03f1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bfd03f1:  *
1:bfd03f1:  * Unless required by applicable law or agreed to in writing, software
1:bfd03f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bfd03f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bfd03f1:  * See the License for the specific language governing permissions and
1:bfd03f1:  * limitations under the License.
1:bfd03f1:  */
1:bfd03f1: package org.apache.cassandra.utils;
1:bfd03f1: 
1:bfd03f1: import java.util.Collection;
1:bfd03f1: import java.util.Collections;
1:bfd03f1: import java.util.Map;
1:bfd03f1: import java.util.Objects;
1:bfd03f1: import java.util.Set;
1:bfd03f1: import java.util.concurrent.ConcurrentHashMap;
1:bfd03f1: 
1:bfd03f1: /**
1:bfd03f1:  *
1:bfd03f1:  * A variant of BiMap that permits concurrent access, and expects uniqueness of values in both domain and range.
1:bfd03f1:  * We synchronize on _modifications only_, and use ConcurrentHashMap so that readers can lookup safely. This does mean there
1:bfd03f1:  * could be races to lookup the inverse, but we aren't too worried about that.
1:bfd03f1:  *
1:bfd03f1:  * @param <K>
1:bfd03f1:  * @param <V>
1:bfd03f1:  */
1:bfd03f1: public class ConcurrentBiMap<K, V> implements Map<K, V>
1:bfd03f1: {
1:bfd03f1:     protected final Map<K, V> forwardMap;
1:bfd03f1:     protected final Map<V, K> reverseMap;
1:bfd03f1: 
1:bfd03f1:     public ConcurrentBiMap()
1:bfd03f1:     {
1:bfd03f1:         this(new ConcurrentHashMap<K, V>(16, 0.5f, 1), new ConcurrentHashMap<V, K>(16, 0.5f, 1));
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     protected ConcurrentBiMap(Map<K, V> forwardMap, Map<V, K> reverseMap)
1:bfd03f1:     {
1:bfd03f1:         this.forwardMap = forwardMap;
1:bfd03f1:         this.reverseMap = reverseMap;
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public Map<V, K> inverse()
1:bfd03f1:     {
1:bfd03f1:         return Collections.unmodifiableMap(reverseMap);
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public void clear()
1:bfd03f1:     {
1:bfd03f1:         forwardMap.clear();
1:bfd03f1:         reverseMap.clear();
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public boolean containsKey(Object key)
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.containsKey(key);
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public boolean containsValue(Object value)
1:bfd03f1:     {
1:bfd03f1:         return reverseMap.containsKey(value);
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public Set<Entry<K, V>> entrySet()
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.entrySet();
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public V get(Object key)
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.get(key);
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public boolean isEmpty()
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.isEmpty();
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public Set<K> keySet()
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.keySet();
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public synchronized V put(K key, V value)
1:bfd03f1:     {
1:bfd03f1:         K oldKey = reverseMap.get(value);
1:bfd03f1:         if (oldKey != null && !key.equals(oldKey))
1:bfd03f1:             throw new IllegalArgumentException(value + " is already bound in reverseMap to " + oldKey);
1:bfd03f1:         V oldVal = forwardMap.put(key, value);
1:bfd03f1:         if (oldVal != null && !Objects.equals(reverseMap.remove(oldVal), key))
1:bfd03f1:             throw new IllegalStateException(); // for the prior mapping to be correct, we MUST get back the key from the reverseMap
1:bfd03f1:         reverseMap.put(value, key);
1:bfd03f1:         return oldVal;
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public synchronized void putAll(Map<? extends K, ? extends V> m)
1:bfd03f1:     {
1:bfd03f1:         for (Entry<? extends K, ? extends V> entry : m.entrySet())
1:bfd03f1:             put(entry.getKey(), entry.getValue());
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public synchronized V remove(Object key)
1:bfd03f1:     {
1:bfd03f1:         V oldVal = forwardMap.remove(key);
1:bfd03f1:         if (oldVal == null)
1:bfd03f1:             return null;
1:bfd03f1:         Object oldKey = reverseMap.remove(oldVal);
1:bfd03f1:         if (oldKey == null || !oldKey.equals(key))
1:bfd03f1:             throw new IllegalStateException(); // for the prior mapping to be correct, we MUST get back the key from the reverseMap
1:bfd03f1:         return oldVal;
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public int size()
1:bfd03f1:     {
1:bfd03f1:         return forwardMap.size();
1:bfd03f1:     }
1:bfd03f1: 
1:bfd03f1:     public Collection<V> values()
1:bfd03f1:     {
1:bfd03f1:         return reverseMap.keySet();
1:bfd03f1:     }
1:bfd03f1: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:bfd03f1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Map;
1: import java.util.Objects;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  *
1:  * A variant of BiMap that permits concurrent access, and expects uniqueness of values in both domain and range.
1:  * We synchronize on _modifications only_, and use ConcurrentHashMap so that readers can lookup safely. This does mean there
1:  * could be races to lookup the inverse, but we aren't too worried about that.
1:  *
1:  * @param <K>
1:  * @param <V>
1:  */
1: public class ConcurrentBiMap<K, V> implements Map<K, V>
1: {
1:     protected final Map<K, V> forwardMap;
1:     protected final Map<V, K> reverseMap;
1: 
1:     public ConcurrentBiMap()
1:     {
1:         this(new ConcurrentHashMap<K, V>(16, 0.5f, 1), new ConcurrentHashMap<V, K>(16, 0.5f, 1));
1:     }
1: 
1:     protected ConcurrentBiMap(Map<K, V> forwardMap, Map<V, K> reverseMap)
1:     {
1:         this.forwardMap = forwardMap;
1:         this.reverseMap = reverseMap;
1:     }
1: 
1:     public Map<V, K> inverse()
1:     {
1:         return Collections.unmodifiableMap(reverseMap);
1:     }
1: 
1:     public void clear()
1:     {
1:         forwardMap.clear();
1:         reverseMap.clear();
1:     }
1: 
1:     public boolean containsKey(Object key)
1:     {
1:         return forwardMap.containsKey(key);
1:     }
1: 
1:     public boolean containsValue(Object value)
1:     {
1:         return reverseMap.containsKey(value);
1:     }
1: 
1:     public Set<Entry<K, V>> entrySet()
1:     {
1:         return forwardMap.entrySet();
1:     }
1: 
1:     public V get(Object key)
1:     {
1:         return forwardMap.get(key);
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return forwardMap.isEmpty();
1:     }
1: 
1:     public Set<K> keySet()
1:     {
1:         return forwardMap.keySet();
1:     }
1: 
1:     public synchronized V put(K key, V value)
1:     {
1:         K oldKey = reverseMap.get(value);
1:         if (oldKey != null && !key.equals(oldKey))
1:             throw new IllegalArgumentException(value + " is already bound in reverseMap to " + oldKey);
1:         V oldVal = forwardMap.put(key, value);
1:         if (oldVal != null && !Objects.equals(reverseMap.remove(oldVal), key))
1:             throw new IllegalStateException(); // for the prior mapping to be correct, we MUST get back the key from the reverseMap
1:         reverseMap.put(value, key);
1:         return oldVal;
1:     }
1: 
1:     public synchronized void putAll(Map<? extends K, ? extends V> m)
1:     {
1:         for (Entry<? extends K, ? extends V> entry : m.entrySet())
1:             put(entry.getKey(), entry.getValue());
1:     }
1: 
1:     public synchronized V remove(Object key)
1:     {
1:         V oldVal = forwardMap.remove(key);
1:         if (oldVal == null)
1:             return null;
1:         Object oldKey = reverseMap.remove(oldVal);
1:         if (oldKey == null || !oldKey.equals(key))
1:             throw new IllegalStateException(); // for the prior mapping to be correct, we MUST get back the key from the reverseMap
1:         return oldVal;
1:     }
1: 
1:     public int size()
1:     {
1:         return forwardMap.size();
1:     }
1: 
1:     public Collection<V> values()
1:     {
1:         return reverseMap.keySet();
1:     }
1: }
============================================================================