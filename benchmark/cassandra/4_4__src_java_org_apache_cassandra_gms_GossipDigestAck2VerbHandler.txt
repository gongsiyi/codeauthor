1:5ab5e1b: /*
1:5ab5e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ab5e1b:  * or more contributor license agreements.  See the NOTICE file
1:5ab5e1b:  * distributed with this work for additional information
1:5ab5e1b:  * regarding copyright ownership.  The ASF licenses this file
1:5ab5e1b:  * to you under the Apache License, Version 2.0 (the
1:5ab5e1b:  * "License"); you may not use this file except in compliance
1:5ab5e1b:  * with the License.  You may obtain a copy of the License at
3:5ab5e1b:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5ab5e1b:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:5ab5e1b:  */
1:07cf56f: package org.apache.cassandra.gms;
1:5ab5e1b: 
1:1e616a1: import java.net.InetAddress;
1:1e616a1: import java.util.Map;
5:1e616a1: 
1:e98eb1c: import org.slf4j.Logger;
1:e98eb1c: import org.slf4j.LoggerFactory;
1:e98eb1c: 
1:e98eb1c: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:e98eb1c: 
1:9471e8d: public class GossipDigestAck2VerbHandler implements IVerbHandler<GossipDigestAck2>
1:2b87bfe: {
1:5a6e2b0:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestAck2VerbHandler.class);
1:62b1ee4: 
1:1936648:     public void doVerb(MessageIn<GossipDigestAck2> message, int id)
1:4669c40:     {
1:910b663:         if (logger.isTraceEnabled())
4:1e616a1:         {
1:a06be23:             InetAddress from = message.from;
1:910b663:             logger.trace("Received a GossipDigestAck2Message from {}", from);
1:4669c40:         }
1:62b1ee4:         if (!Gossiper.instance.isEnabled())
1:62b1ee4:         {
1:62b1ee4:             if (logger.isTraceEnabled())
1:62b1ee4:                 logger.trace("Ignoring GossipDigestAck2Message because gossip is disabled");
1:62b1ee4:             return;
1:62b1ee4:         }
1:a06be23:         Map<InetAddress, EndpointState> remoteEpStateMap = message.payload.getEndpointStateMap();
1:1e616a1:         /* Notify the Failure Detector */
1:1e616a1:         Gossiper.instance.notifyFailureDetector(remoteEpStateMap);
1:1e616a1:         Gossiper.instance.applyStateLocally(remoteEpStateMap);
1:2b87bfe:     }
4:1e616a1: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn<GossipDigestAck2> message, int id)
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
1: public class GossipDigestAck2VerbHandler implements IVerbHandler<GossipDigestAck2>
0:     public void doVerb(MessageIn<GossipDigestAck2> message, String id)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class GossipDigestAck2VerbHandler implements IVerbHandler<GossipDigestAck2Message>
0:     public void doVerb(MessageIn<GossipDigestAck2Message> message, String id)
1:             InetAddress from = message.from;
1:         Map<InetAddress, EndpointState> remoteEpStateMap = message.payload.getEndpointStateMap();
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
0:     public void doVerb(MessageIn message, String id)
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: 
commit:5ab5e1b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:62b1ee4
/////////////////////////////////////////////////////////////////////////
1:         if (!Gossiper.instance.isEnabled())
1:         {
1:             if (logger.isTraceEnabled())
1:                 logger.trace("Ignoring GossipDigestAck2Message because gossip is disabled");
1:             return;
1:         }
1: 
commit:268e5b1
commit:2b87bfe
/////////////////////////////////////////////////////////////////////////
0:         if (!Gossiper.instance.isEnabled())
1:         {
0:             if (logger_.isTraceEnabled())
0:                 logger_.trace("Ignoring GossipDigestAck2Message because gossip is disabled");
0:             return;
1:         }
commit:01883da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream dis = new DataInputStream( new FastByteArrayInputStream(bytes) );
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestAck2VerbHandler.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.gms;
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger = LoggerFactory.getLogger(GossipDigestAck2VerbHandler.class);
1:         if (logger.isTraceEnabled())
1:             logger.trace("Received a GossipDigestAck2Message from {}", from);
commit:4669c40
/////////////////////////////////////////////////////////////////////////
1:         {
0:             InetAddress from = message.getFrom();
1:         }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             gDigestAck2Message = GossipDigestAck2Message.serializer().deserialize(dis, message.getVersion());
commit:1e616a1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
1: 
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.Map;
1: 
0: public class GossipDigestAck2VerbHandler implements IVerbHandler
1: {
0:     private static Logger logger_ = LoggerFactory.getLogger(GossipDigestAck2VerbHandler.class);
1: 
0:     public void doVerb(Message message)
1:     {
0:         InetAddress from = message.getFrom();
0:         if (logger_.isTraceEnabled())
0:             logger_.trace("Received a GossipDigestAck2Message from {}", from);
1: 
0:         byte[] bytes = message.getMessageBody();
0:         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
0:         GossipDigestAck2Message gDigestAck2Message;
0:         try
1:         {
0:             gDigestAck2Message = GossipDigestAck2Message.serializer().deserialize(dis);
1:         }
0:         catch (IOException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
0:         Map<InetAddress, EndpointState> remoteEpStateMap = gDigestAck2Message.getEndpointStateMap();
1:         /* Notify the Failure Detector */
1:         Gossiper.instance.notifyFailureDetector(remoteEpStateMap);
1:         Gossiper.instance.applyStateLocally(remoteEpStateMap);
1:     }
1: }
============================================================================