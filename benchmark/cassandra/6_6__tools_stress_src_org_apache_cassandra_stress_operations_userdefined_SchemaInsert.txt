1:7536429: package org.apache.cassandra.stress.operations.userdefined;
1:0bc9841: /*
1:0bc9841:  * 
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  * 
1:0bc9841:  */
12:7536429: 
1:7536429: 
1:7536429: import java.io.IOException;
1:7536429: import java.util.ArrayList;
1:7536429: import java.util.List;
1:47d3b7e: import java.util.stream.Collectors;
1:47d3b7e: 
1:7536429: import com.datastax.driver.core.BatchStatement;
1:7536429: import com.datastax.driver.core.BoundStatement;
1:7536429: import com.datastax.driver.core.PreparedStatement;
1:7536429: import com.datastax.driver.core.Statement;
1:47d3b7e: import org.apache.cassandra.db.ColumnFamilyStore;
1:7536429: import org.apache.cassandra.db.ConsistencyLevel;
1:0026e4e: import org.apache.cassandra.io.sstable.StressCQLSSTableWriter;
1:47d3b7e: import org.apache.cassandra.stress.WorkManager;
1:6c579a0: import org.apache.cassandra.stress.generate.*;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:7536429: import org.apache.cassandra.stress.settings.StressSettings;
1:7536429: import org.apache.cassandra.stress.util.JavaDriverClient;
1:7536429: import org.apache.cassandra.stress.util.ThriftClient;
1:7536429: 
1:7536429: public class SchemaInsert extends SchemaStatement
5:7536429: {
1:7536429: 
1:47d3b7e:     private final String tableSchema;
1:47d3b7e:     private final String insertStatement;
1:7536429:     private final BatchStatement.Type batchType;
1:7536429: 
1:6d29ed0:     public SchemaInsert(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Distribution batchSize, RatioDistribution useRatio, RatioDistribution rowPopulation, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, BatchStatement.Type batchType)
1:7536429:     {
1:47d3b7e:         super(timer, settings, new DataSpec(generator, seedManager, batchSize, useRatio, rowPopulation), statement, statement.getVariables().asList().stream().map(d -> d.getName()).collect(Collectors.toList()), thriftId, cl);
1:7536429:         this.batchType = batchType;
1:47d3b7e:         this.insertStatement = null;
1:47d3b7e:         this.tableSchema = null;
1:47d3b7e:     }
1:47d3b7e: 
1:47d3b7e:     /**
1:47d3b7e:      * Special constructor for offline use
1:47d3b7e:      */
1:47d3b7e:     public SchemaInsert(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, RatioDistribution useRatio, RatioDistribution rowPopulation, Integer thriftId, String statement, String tableSchema)
1:47d3b7e:     {
1:47d3b7e:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), useRatio, rowPopulation), null, generator.getColumnNames(), thriftId, ConsistencyLevel.ONE);
1:47d3b7e:         this.batchType = BatchStatement.Type.UNLOGGED;
1:47d3b7e:         this.insertStatement = statement;
1:47d3b7e:         this.tableSchema = tableSchema;
1:6c579a0:     }
1:6c579a0: 
1:7536429:     private class JavaDriverRun extends Runner
1:47d3b7e:     {
1:7536429:         final JavaDriverClient client;
1:7536429: 
1:7536429:         private JavaDriverRun(JavaDriverClient client)
1:6c579a0:         {
1:7536429:             this.client = client;
1:0580fb2:         }
1:7536429: 
1:7536429:         public boolean run() throws Exception
1:7536429:         {
1:7536429:             List<BoundStatement> stmts = new ArrayList<>();
2:7536429:             partitionCount = partitions.size();
1:0580fb2: 
1:6c579a0:             for (PartitionIterator iterator : partitions)
1:6c579a0:                 while (iterator.hasNext())
1:6c579a0:                     stmts.add(bindRow(iterator.next()));
1:7536429: 
1:0580fb2:             rowCount += stmts.size();
1:7536429: 
1:0580fb2:             // 65535 is max number of stmts per batch, so if we have more, we need to manually batch them
1:0580fb2:             for (int j = 0 ; j < stmts.size() ; j += 65535)
1:0580fb2:             {
1:a8052d7:                 List<BoundStatement> substmts = stmts.subList(j, Math.min(j + stmts.size(), j + 65535));
1:7536429:                 Statement stmt;
1:7536429:                 if (stmts.size() == 1)
1:7536429:                 {
1:0580fb2:                     stmt = substmts.get(0);
5:7536429:                 }
1:7536429:                 else
1:7536429:                 {
1:7536429:                     BatchStatement batch = new BatchStatement(batchType);
1:7536429:                     batch.setConsistencyLevel(JavaDriverClient.from(cl));
1:0580fb2:                     batch.addAll(substmts);
1:7536429:                     stmt = batch;
1:0580fb2:                 }
1:0580fb2: 
1:3bee990:                 client.getSession().execute(stmt);
1:7536429:             }
1:7536429:             return true;
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     private class ThriftRun extends Runner
1:7536429:     {
1:7536429:         final ThriftClient client;
1:7536429: 
1:7536429:         private ThriftRun(ThriftClient client)
1:7536429:         {
1:7536429:             this.client = client;
1:7536429:         }
1:7536429: 
1:7536429:         public boolean run() throws Exception
1:7536429:         {
1:6c579a0:             for (PartitionIterator iterator : partitions)
1:7536429:             {
1:6c579a0:                 while (iterator.hasNext())
1:7536429:                 {
1:3bee990:                     client.execute_prepared_cql3_query(thriftId, iterator.getToken(), thriftRowArgs(iterator.next()), settings.command.consistencyLevel);
1:0580fb2:                     rowCount += 1;
1:0580fb2:                 }
1:7536429:             }
1:7536429:             return true;
1:7536429:         }
1:7536429:     }
1:0580fb2: 
1:47d3b7e:     private class OfflineRun extends Runner
1:47d3b7e:     {
1:0026e4e:         final StressCQLSSTableWriter writer;
1:47d3b7e: 
1:0026e4e:         OfflineRun(StressCQLSSTableWriter writer)
1:47d3b7e:         {
1:47d3b7e:             this.writer = writer;
1:47d3b7e:         }
1:47d3b7e: 
1:47d3b7e:         public boolean run() throws Exception
1:47d3b7e:         {
1:47d3b7e:             for (PartitionIterator iterator : partitions)
1:47d3b7e:             {
1:47d3b7e:                 while (iterator.hasNext())
1:7536429:                 {
1:47d3b7e:                     Row row = iterator.next();
1:47d3b7e:                     writer.rawAddRow(thriftRowArgs(row));
1:47d3b7e:                     rowCount += 1;
1:47d3b7e:                 }
1:47d3b7e:             }
1:47d3b7e: 
1:47d3b7e:             return true;
1:47d3b7e:         }
1:47d3b7e:     }
1:47d3b7e: 
1:7536429:     @Override
1:7536429:     public void run(JavaDriverClient client) throws IOException
1:7536429:     {
1:7536429:         timeWithRetry(new JavaDriverRun(client));
1:7536429:     }
1:7536429: 
1:0580fb2:     public boolean isWrite()
1:0580fb2:     {
1:0580fb2:         return true;
1:0580fb2:     }
1:0580fb2: 
1:7536429:     @Override
1:7536429:     public void run(ThriftClient client) throws IOException
1:7536429:     {
1:7536429:         timeWithRetry(new ThriftRun(client));
1:7536429:     }
1:7536429: 
1:0026e4e:     public StressCQLSSTableWriter createWriter(ColumnFamilyStore cfs, int bufferSize, boolean makeRangeAware)
1:47d3b7e:     {
1:0026e4e:         return StressCQLSSTableWriter.builder()
1:47d3b7e:                                .withCfs(cfs)
1:47d3b7e:                                .withBufferSizeInMB(bufferSize)
1:47d3b7e:                                .forTable(tableSchema)
1:47d3b7e:                                .using(insertStatement)
1:47d3b7e:                                .rangeAware(makeRangeAware)
1:47d3b7e:                                .build();
1:47d3b7e:     }
1:47d3b7e: 
1:0026e4e:     public void runOffline(StressCQLSSTableWriter writer, WorkManager workManager) throws Exception
1:47d3b7e:     {
1:47d3b7e:         OfflineRun offline = new OfflineRun(writer);
1:47d3b7e: 
1:47d3b7e:         while (true)
1:47d3b7e:         {
1:47d3b7e:             if (ready(workManager) == 0)
1:47d3b7e:                 break;
1:47d3b7e: 
1:47d3b7e:             offline.run();
1:47d3b7e:         }
1:47d3b7e:     }
1:7536429: }
============================================================================
author:Jeremiah D Jordan
-------------------------------------------------------------------------------
commit:0026e4e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.StressCQLSSTableWriter;
/////////////////////////////////////////////////////////////////////////
1:         final StressCQLSSTableWriter writer;
1:         OfflineRun(StressCQLSSTableWriter writer)
/////////////////////////////////////////////////////////////////////////
1:     public StressCQLSSTableWriter createWriter(ColumnFamilyStore cfs, int bufferSize, boolean makeRangeAware)
1:         return StressCQLSSTableWriter.builder()
/////////////////////////////////////////////////////////////////////////
1:     public void runOffline(StressCQLSSTableWriter writer, WorkManager workManager) throws Exception
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.util.Collection;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: import java.util.stream.Collectors;
1: 
0: import com.google.common.util.concurrent.Uninterruptibles;
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.io.sstable.CQLSSTableWriter;
1: import org.apache.cassandra.stress.WorkManager;
/////////////////////////////////////////////////////////////////////////
1:     private final String tableSchema;
1:     private final String insertStatement;
1:         super(timer, settings, new DataSpec(generator, seedManager, batchSize, useRatio, rowPopulation), statement, statement.getVariables().asList().stream().map(d -> d.getName()).collect(Collectors.toList()), thriftId, cl);
1:         this.insertStatement = null;
1:         this.tableSchema = null;
1:     }
1: 
1:     /**
1:      * Special constructor for offline use
1:      */
1:     public SchemaInsert(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, RatioDistribution useRatio, RatioDistribution rowPopulation, Integer thriftId, String statement, String tableSchema)
1:     {
1:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), useRatio, rowPopulation), null, generator.getColumnNames(), thriftId, ConsistencyLevel.ONE);
1:         this.batchType = BatchStatement.Type.UNLOGGED;
1:         this.insertStatement = statement;
1:         this.tableSchema = tableSchema;
/////////////////////////////////////////////////////////////////////////
1:     private class OfflineRun extends Runner
1:     {
0:         final CQLSSTableWriter writer;
1: 
0:         OfflineRun(CQLSSTableWriter writer)
1:         {
1:             this.writer = writer;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
1:             for (PartitionIterator iterator : partitions)
1:             {
1:                 while (iterator.hasNext())
1:                 {
1:                     Row row = iterator.next();
1:                     writer.rawAddRow(thriftRowArgs(row));
1:                     rowCount += 1;
1:                 }
1:             }
1: 
1:             return true;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public CQLSSTableWriter createWriter(ColumnFamilyStore cfs, int bufferSize, boolean makeRangeAware)
1:     {
0:         return CQLSSTableWriter.builder()
1:                                .withCfs(cfs)
1:                                .withBufferSizeInMB(bufferSize)
1:                                .forTable(tableSchema)
1:                                .using(insertStatement)
1:                                .rangeAware(makeRangeAware)
1:                                .build();
1:     }
1: 
0:     public void runOffline(CQLSSTableWriter writer, WorkManager workManager) throws Exception
1:     {
1:         OfflineRun offline = new OfflineRun(writer);
1: 
1:         while (true)
1:         {
1:             if (ready(workManager) == 0)
1:                 break;
1: 
1:             offline.run();
1:         }
1:     }
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
1:     public SchemaInsert(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Distribution batchSize, RatioDistribution useRatio, RatioDistribution rowPopulation, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, BatchStatement.Type batchType)
0:         super(timer, settings, new DataSpec(generator, seedManager, batchSize, useRatio, rowPopulation), statement, thriftId, cl);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super(timer, settings, new DataSpec(generator, seedManager, batchSize, useRatio), statement, thriftId, cl);
/////////////////////////////////////////////////////////////////////////
1:                 client.getSession().execute(stmt);
/////////////////////////////////////////////////////////////////////////
1:                     client.execute_prepared_cql3_query(thriftId, iterator.getToken(), thriftRowArgs(iterator.next()), settings.command.consistencyLevel);
commit:f852401
/////////////////////////////////////////////////////////////////////////
0:         super(timer, settings, new DataSpec(generator, seedManager, batchSize, useRatio), statement, thriftId, cl, ValidationType.NOT_FAIL);
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.*;
/////////////////////////////////////////////////////////////////////////
0:     public SchemaInsert(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Distribution batchSize, RatioDistribution useRatio, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, BatchStatement.Type batchType)
0:         super(timer, settings, spec(generator, seedManager, batchSize, useRatio), statement, thriftId, cl, ValidationType.NOT_FAIL);
1:     }
1: 
0:     private static DataSpec spec(PartitionGenerator generator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio)
1:     {
0:         return new DataSpec(generator, seedManager, partitionCount, useRatio);
/////////////////////////////////////////////////////////////////////////
1:             for (PartitionIterator iterator : partitions)
1:                 while (iterator.hasNext())
1:                     stmts.add(bindRow(iterator.next()));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             for (PartitionIterator iterator : partitions)
1:                 while (iterator.hasNext())
0:                     validate(client.execute_prepared_cql3_query(thriftId, iterator.getToken(), thriftRowArgs(iterator.next()), settings.command.consistencyLevel));
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0:     private final RatioDistribution selectChance;
0:     public SchemaInsert(Timer timer, PartitionGenerator generator, StressSettings settings, Distribution batchSize, RatioDistribution selectChance, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, BatchStatement.Type batchType)
0:         super(timer, generator, settings, batchSize, statement, thriftId, cl, ValidationType.NOT_FAIL);
0:         this.selectChance = selectChance;
/////////////////////////////////////////////////////////////////////////
0:                 iterators[i] = partitions.get(i).iterator(selectChance.next(), true);
0:             for (Partition.RowIterator iterator : iterators)
0:                 if (iterator.done())
0:                     continue;
0:                 for (Row row : iterator.next())
0:                     stmts.add(bindRow(row));
1:             }
1:             rowCount += stmts.size();
1:             // 65535 is max number of stmts per batch, so if we have more, we need to manually batch them
1:             for (int j = 0 ; j < stmts.size() ; j += 65535)
1:             {
0:                 List<BoundStatement> substmts = stmts.subList(j, Math.min(stmts.size(), j + 65535));
1:                     stmt = substmts.get(0);
1:                     batch.addAll(substmts);
0:                 validate(client.getSession().execute(stmt));
1:             }
1: 
0:             for (Partition.RowIterator iterator : iterators)
0:                 iterator.markWriteFinished();
/////////////////////////////////////////////////////////////////////////
0:                 iterators[i] = partitions.get(i).iterator(selectChance.next(), true);
0:             for (Partition.RowIterator iterator : iterators)
0:                 if (iterator.done())
0:                     continue;
1: 
0:                 for (Row row : iterator.next())
0:                     validate(client.execute_prepared_cql3_query(thriftId, iterator.partition().getToken(), thriftRowArgs(row), settings.command.consistencyLevel));
1:                     rowCount += 1;
1:             }
1: 
0:             for (Partition.RowIterator iterator : iterators)
0:                 iterator.markWriteFinished();
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWrite()
1:     {
1:         return true;
1:     }
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.operations.userdefined;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import com.datastax.driver.core.BatchStatement;
1: import com.datastax.driver.core.BoundStatement;
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.Statement;
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.Partition;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
0: import org.apache.cassandra.stress.generate.RatioDistribution;
0: import org.apache.cassandra.stress.generate.Row;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.settings.ValidationType;
1: import org.apache.cassandra.stress.util.JavaDriverClient;
1: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
1: 
1: public class SchemaInsert extends SchemaStatement
1: {
1: 
1:     private final BatchStatement.Type batchType;
0:     private final RatioDistribution perVisit;
0:     private final RatioDistribution perBatch;
1: 
0:     public SchemaInsert(Timer timer, PartitionGenerator generator, StressSettings settings, Distribution partitionCount, RatioDistribution perVisit, RatioDistribution perBatch, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, BatchStatement.Type batchType)
1:     {
0:         super(timer, generator, settings, partitionCount, statement, thriftId, cl, ValidationType.NOT_FAIL);
1:         this.batchType = batchType;
0:         this.perVisit = perVisit;
0:         this.perBatch = perBatch;
1:     }
1: 
1:     private class JavaDriverRun extends Runner
1:     {
1:         final JavaDriverClient client;
1: 
1:         private JavaDriverRun(JavaDriverClient client)
1:         {
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
0:             Partition.RowIterator[] iterators = new Partition.RowIterator[partitions.size()];
0:             for (int i = 0 ; i < iterators.length ; i++)
0:                 iterators[i] = partitions.get(i).iterator(perVisit.next());
1:             List<BoundStatement> stmts = new ArrayList<>();
1:             partitionCount = partitions.size();
1: 
0:             boolean done;
0:             do
1:             {
0:                 done = true;
0:                 stmts.clear();
0:                 for (Partition.RowIterator iterator : iterators)
1:                 {
0:                     if (iterator.done())
0:                         continue;
1: 
0:                     for (Row row : iterator.batch(perBatch.next()))
0:                         stmts.add(bindRow(row));
1: 
0:                     done &= iterator.done();
1:                 }
1: 
0:                 rowCount += stmts.size();
1: 
1:                 Statement stmt;
1:                 if (stmts.size() == 1)
1:                 {
0:                     stmt = stmts.get(0);
1:                 }
1:                 else
1:                 {
1:                     BatchStatement batch = new BatchStatement(batchType);
1:                     batch.setConsistencyLevel(JavaDriverClient.from(cl));
0:                     batch.addAll(stmts);
1:                     stmt = batch;
1:                 }
0:                 validate(client.getSession().execute(stmt));
1: 
0:             } while (!done);
1: 
1:             return true;
1:         }
1:     }
1: 
1:     private class ThriftRun extends Runner
1:     {
1:         final ThriftClient client;
1: 
1:         private ThriftRun(ThriftClient client)
1:         {
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
0:             Partition.RowIterator[] iterators = new Partition.RowIterator[partitions.size()];
0:             for (int i = 0 ; i < iterators.length ; i++)
0:                 iterators[i] = partitions.get(i).iterator(perVisit.next());
1:             partitionCount = partitions.size();
1: 
0:             boolean done;
0:             do
1:             {
0:                 done = true;
0:                 for (Partition.RowIterator iterator : iterators)
1:                 {
0:                     if (iterator.done())
0:                         continue;
1: 
0:                     for (Row row : iterator.batch(perBatch.next()))
1:                     {
0:                         validate(client.execute_prepared_cql3_query(thriftId, iterator.partition().getToken(), thriftRowArgs(row), settings.command.consistencyLevel));
0:                         rowCount += 1;
1:                     }
1: 
0:                     done &= iterator.done();
1:                 }
0:             } while (!done);
1: 
1:             return true;
1:         }
1:     }
1: 
1:     @Override
1:     public void run(JavaDriverClient client) throws IOException
1:     {
1:         timeWithRetry(new JavaDriverRun(client));
1:     }
1: 
1:     @Override
1:     public void run(ThriftClient client) throws IOException
1:     {
1:         timeWithRetry(new ThriftRun(client));
1:     }
1: 
1: }
author:Jake Luciani
-------------------------------------------------------------------------------
commit:a8052d7
/////////////////////////////////////////////////////////////////////////
1:                 List<BoundStatement> substmts = stmts.subList(j, Math.min(j + stmts.size(), j + 65535));
/////////////////////////////////////////////////////////////////////////
0:                 try
0:                 {
0:                     validate(client.getSession().execute(stmt));
0:                 }
0:                 catch (ClassCastException e)
0:                 {
0:                     e.printStackTrace();
0:                 }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
0: 
============================================================================