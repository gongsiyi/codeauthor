1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf.view;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.*;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.SSTableIndex;
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.marshal.AsciiType;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.io.sstable.Descriptor;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:72790dc: import org.apache.cassandra.utils.Interval;
1:72790dc: import org.apache.cassandra.utils.IntervalTree;
1:72790dc: 
1:72790dc: import com.google.common.collect.Iterables;
1:72790dc: 
1:72790dc: public class View implements Iterable<SSTableIndex>
1:72790dc: {
1:72790dc:     private final Map<Descriptor, SSTableIndex> view;
1:72790dc: 
1:72790dc:     private final TermTree termTree;
1:3928665:     private final AbstractType<?> keyValidator;
1:3928665:     private final IntervalTree<Key, SSTableIndex, Interval<Key, SSTableIndex>> keyIntervalTree;
1:72790dc: 
1:72790dc:     public View(ColumnIndex index, Set<SSTableIndex> indexes)
1:72790dc:     {
1:72790dc:         this(index, Collections.<SSTableIndex>emptyList(), Collections.<SSTableReader>emptyList(), indexes);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public View(ColumnIndex index,
1:72790dc:                 Collection<SSTableIndex> currentView,
1:72790dc:                 Collection<SSTableReader> oldSSTables,
1:72790dc:                 Set<SSTableIndex> newIndexes)
1:72790dc:     {
1:72790dc:         Map<Descriptor, SSTableIndex> newView = new HashMap<>();
1:72790dc: 
1:72790dc:         AbstractType<?> validator = index.getValidator();
1:72790dc:         TermTree.Builder termTreeBuilder = (validator instanceof AsciiType || validator instanceof UTF8Type)
1:72790dc:                                             ? new PrefixTermTree.Builder(index.getMode().mode, validator)
1:72790dc:                                             : new RangeTermTree.Builder(index.getMode().mode, validator);
1:72790dc: 
1:3928665:         List<Interval<Key, SSTableIndex>> keyIntervals = new ArrayList<>();
1:72790dc:         for (SSTableIndex sstableIndex : Iterables.concat(currentView, newIndexes))
1:72790dc:         {
1:72790dc:             SSTableReader sstable = sstableIndex.getSSTable();
1:72790dc:             if (oldSSTables.contains(sstable) || sstable.isMarkedCompacted() || newView.containsKey(sstable.descriptor))
1:72790dc:             {
1:72790dc:                 sstableIndex.release();
1:72790dc:                 continue;
1:72790dc:             }
1:72790dc: 
1:72790dc:             newView.put(sstable.descriptor, sstableIndex);
1:72790dc: 
1:72790dc:             termTreeBuilder.add(sstableIndex);
1:3928665:             keyIntervals.add(Interval.create(new Key(sstableIndex.minKey(), index.keyValidator()),
1:3928665:                                              new Key(sstableIndex.maxKey(), index.keyValidator()),
1:3928665:                                              sstableIndex));
1:72790dc:         }
1:72790dc: 
1:72790dc:         this.view = newView;
1:72790dc:         this.termTree = termTreeBuilder.build();
1:3928665:         this.keyValidator = index.keyValidator();
1:72790dc:         this.keyIntervalTree = IntervalTree.build(keyIntervals);
1:72790dc: 
1:72790dc:         if (keyIntervalTree.intervalCount() != termTree.intervalCount())
1:72790dc:             throw new IllegalStateException(String.format("mismatched sizes for intervals tree for keys vs terms: %d != %d", keyIntervalTree.intervalCount(), termTree.intervalCount()));
1:72790dc:     }
1:72790dc: 
1:48815d4:     public Set<SSTableIndex> match(Expression expression)
1:72790dc:     {
1:48815d4:         return termTree.search(expression);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public List<SSTableIndex> match(ByteBuffer minKey, ByteBuffer maxKey)
1:72790dc:     {
1:3928665:         return keyIntervalTree.search(Interval.create(new Key(minKey, keyValidator), new Key(maxKey, keyValidator), (SSTableIndex) null));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Iterator<SSTableIndex> iterator()
1:72790dc:     {
1:72790dc:         return view.values().iterator();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Collection<SSTableIndex> getIndexes()
1:72790dc:     {
1:72790dc:         return view.values();
1:72790dc:     }
1:3928665: 
1:3928665:     /**
1:3928665:      * This is required since IntervalTree doesn't support custom Comparator
1:3928665:      * implementations and relied on items to be comparable which "raw" keys are not.
1:3928665:      */
1:3928665:     private static class Key implements Comparable<Key>
1:3928665:     {
1:3928665:         private final ByteBuffer key;
1:3928665:         private final AbstractType<?> comparator;
1:3928665: 
1:3928665:         public Key(ByteBuffer key, AbstractType<?> comparator)
1:3928665:         {
1:3928665:             this.key = key;
1:3928665:             this.comparator = comparator;
1:3928665:         }
1:3928665: 
1:3928665:         public int compareTo(Key o)
1:3928665:         {
1:3928665:             return comparator.compare(key, o.key);
1:3928665:         }
1:3928665:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:48815d4
/////////////////////////////////////////////////////////////////////////
1:     public Set<SSTableIndex> match(Expression expression)
1:         return termTree.search(expression);
commit:3928665
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.marshal.UUIDType;
/////////////////////////////////////////////////////////////////////////
1:     private final AbstractType<?> keyValidator;
1:     private final IntervalTree<Key, SSTableIndex, Interval<Key, SSTableIndex>> keyIntervalTree;
/////////////////////////////////////////////////////////////////////////
1:         List<Interval<Key, SSTableIndex>> keyIntervals = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:             keyIntervals.add(Interval.create(new Key(sstableIndex.minKey(), index.keyValidator()),
1:                                              new Key(sstableIndex.maxKey(), index.keyValidator()),
1:                                              sstableIndex));
1:         this.keyValidator = index.keyValidator();
/////////////////////////////////////////////////////////////////////////
1:         return keyIntervalTree.search(Interval.create(new Key(minKey, keyValidator), new Key(maxKey, keyValidator), (SSTableIndex) null));
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * This is required since IntervalTree doesn't support custom Comparator
1:      * implementations and relied on items to be comparable which "raw" keys are not.
1:      */
1:     private static class Key implements Comparable<Key>
1:     {
1:         private final ByteBuffer key;
1:         private final AbstractType<?> comparator;
1: 
1:         public Key(ByteBuffer key, AbstractType<?> comparator)
1:         {
1:             this.key = key;
1:             this.comparator = comparator;
1:         }
1: 
1:         public int compareTo(Key o)
1:         {
1:             return comparator.compare(key, o.key);
1:         }
1:     }
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf.view;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.index.sasi.SSTableIndex;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.Interval;
1: import org.apache.cassandra.utils.IntervalTree;
1: 
1: import com.google.common.collect.Iterables;
0: import com.google.common.collect.Sets;
1: 
1: public class View implements Iterable<SSTableIndex>
1: {
1:     private final Map<Descriptor, SSTableIndex> view;
1: 
1:     private final TermTree termTree;
0:     private final IntervalTree<ByteBuffer, SSTableIndex, Interval<ByteBuffer, SSTableIndex>> keyIntervalTree;
1: 
1:     public View(ColumnIndex index, Set<SSTableIndex> indexes)
1:     {
1:         this(index, Collections.<SSTableIndex>emptyList(), Collections.<SSTableReader>emptyList(), indexes);
1:     }
1: 
1:     public View(ColumnIndex index,
1:                 Collection<SSTableIndex> currentView,
1:                 Collection<SSTableReader> oldSSTables,
1:                 Set<SSTableIndex> newIndexes)
1:     {
1:         Map<Descriptor, SSTableIndex> newView = new HashMap<>();
1: 
1:         AbstractType<?> validator = index.getValidator();
1:         TermTree.Builder termTreeBuilder = (validator instanceof AsciiType || validator instanceof UTF8Type)
1:                                             ? new PrefixTermTree.Builder(index.getMode().mode, validator)
1:                                             : new RangeTermTree.Builder(index.getMode().mode, validator);
1: 
0:         List<Interval<ByteBuffer, SSTableIndex>> keyIntervals = new ArrayList<>();
1:         for (SSTableIndex sstableIndex : Iterables.concat(currentView, newIndexes))
1:         {
1:             SSTableReader sstable = sstableIndex.getSSTable();
1:             if (oldSSTables.contains(sstable) || sstable.isMarkedCompacted() || newView.containsKey(sstable.descriptor))
1:             {
1:                 sstableIndex.release();
1:                 continue;
1:             }
1: 
1:             newView.put(sstable.descriptor, sstableIndex);
1: 
1:             termTreeBuilder.add(sstableIndex);
0:             keyIntervals.add(Interval.create(sstableIndex.minKey(), sstableIndex.maxKey(), sstableIndex));
1:         }
1: 
1:         this.view = newView;
1:         this.termTree = termTreeBuilder.build();
1:         this.keyIntervalTree = IntervalTree.build(keyIntervals);
1: 
1:         if (keyIntervalTree.intervalCount() != termTree.intervalCount())
1:             throw new IllegalStateException(String.format("mismatched sizes for intervals tree for keys vs terms: %d != %d", keyIntervalTree.intervalCount(), termTree.intervalCount()));
1:     }
1: 
0:     public Set<SSTableIndex> match(final Set<SSTableReader> scope, Expression expression)
1:     {
0:         return Sets.filter(termTree.search(expression), index -> scope.contains(index.getSSTable()));
1:     }
1: 
1:     public List<SSTableIndex> match(ByteBuffer minKey, ByteBuffer maxKey)
1:     {
0:         return keyIntervalTree.search(Interval.create(minKey, maxKey, (SSTableIndex) null));
1:     }
1: 
1:     public Iterator<SSTableIndex> iterator()
1:     {
1:         return view.values().iterator();
1:     }
1: 
1:     public Collection<SSTableIndex> getIndexes()
1:     {
1:         return view.values();
1:     }
1: }
============================================================================