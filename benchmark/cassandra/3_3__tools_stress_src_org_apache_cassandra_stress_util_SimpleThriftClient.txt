1:2e1e98a: package org.apache.cassandra.stress.util;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:2e1e98a: import java.nio.ByteBuffer;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:2e1e98a: 
1:2e1e98a: import org.apache.cassandra.thrift.*;
1:2e1e98a: import org.apache.cassandra.utils.ByteBufferUtil;
1:2e1e98a: import org.apache.thrift.TException;
1:2e1e98a: 
1:2e1e98a: public class SimpleThriftClient implements ThriftClient
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     final Cassandra.Client client;
1:2e1e98a:     public SimpleThriftClient(Cassandra.Client client)
1:2e1e98a:     {
1:2e1e98a:         this.client = client;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>> record, ConsistencyLevel consistencyLevel) throws TException
1:2e1e98a:     {
1:2e1e98a:         client.batch_mutate(record, consistencyLevel);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.get_slice(key, column_parent, predicate, consistency_level);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.get_indexed_slices(column_parent, index_clause, column_predicate, consistency_level);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.get_range_slices(column_parent, predicate, range, consistency_level);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.multiget_slice(keys, column_parent, predicate, consistency_level);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         client.insert(key, column_parent, column, consistency_level);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public Integer prepare_cql3_query(String query, Compression compression) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.prepare_cql3_query(ByteBufferUtil.bytes(query), compression).itemId;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_prepared_cql_query(int itemId, ByteBuffer key, List<ByteBuffer> values) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.execute_prepared_cql_query(itemId, values);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public Integer prepare_cql_query(String query, Compression compression) throws InvalidRequestException, TException
1:2e1e98a:     {
1:2e1e98a:         return client.prepare_cql_query(ByteBufferUtil.bytes(query), compression).itemId;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.execute_cql3_query(ByteBufferUtil.bytes(query), compression, consistency);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_prepared_cql3_query(int itemId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.execute_prepared_cql3_query(itemId, values, consistency);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws TException
1:2e1e98a:     {
1:2e1e98a:         return client.execute_cql_query(ByteBufferUtil.bytes(query), compression);
1:2e1e98a:     }
1:2e1e98a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e994805
/////////////////////////////////////////////////////////////////////////
1:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws TException
1:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws TException
1:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws TException
1:     public Integer prepare_cql3_query(String query, Compression compression) throws TException
1:     public CqlResult execute_prepared_cql_query(int itemId, ByteBuffer key, List<ByteBuffer> values) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws TException
1:     public CqlResult execute_prepared_cql3_query(int itemId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws TException
1:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws TException
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.util;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.thrift.*;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.thrift.TException;
1: 
1: public class SimpleThriftClient implements ThriftClient
1: {
1: 
1:     final Cassandra.Client client;
1:     public SimpleThriftClient(Cassandra.Client client)
1:     {
1:         this.client = client;
1:     }
1: 
1:     public void batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>> record, ConsistencyLevel consistencyLevel) throws TException
1:     {
1:         client.batch_mutate(record, consistencyLevel);
1:     }
1: 
1:     @Override
0:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         return client.get_slice(key, column_parent, predicate, consistency_level);
1:     }
1: 
1:     @Override
0:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         return client.get_indexed_slices(column_parent, index_clause, column_predicate, consistency_level);
1:     }
1: 
1:     @Override
0:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         return client.get_range_slices(column_parent, predicate, range, consistency_level);
1:     }
1: 
1:     @Override
0:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         return client.multiget_slice(keys, column_parent, predicate, consistency_level);
1:     }
1: 
1:     @Override
0:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         client.insert(key, column_parent, column, consistency_level);
1:     }
1: 
1:     @Override
0:     public Integer prepare_cql3_query(String query, Compression compression) throws InvalidRequestException, TException
1:     {
1:         return client.prepare_cql3_query(ByteBufferUtil.bytes(query), compression).itemId;
1:     }
1: 
1:     @Override
0:     public CqlResult execute_prepared_cql_query(int itemId, ByteBuffer key, List<ByteBuffer> values) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         return client.execute_prepared_cql_query(itemId, values);
1:     }
1: 
1:     @Override
1:     public Integer prepare_cql_query(String query, Compression compression) throws InvalidRequestException, TException
1:     {
1:         return client.prepare_cql_query(ByteBufferUtil.bytes(query), compression).itemId;
1:     }
1: 
1:     @Override
0:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         return client.execute_cql3_query(ByteBufferUtil.bytes(query), compression, consistency);
1:     }
1: 
1:     @Override
0:     public CqlResult execute_prepared_cql3_query(int itemId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         return client.execute_prepared_cql3_query(itemId, values, consistency);
1:     }
1: 
1:     @Override
0:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         return client.execute_cql_query(ByteBufferUtil.bytes(query), compression);
1:     }
1: }
============================================================================