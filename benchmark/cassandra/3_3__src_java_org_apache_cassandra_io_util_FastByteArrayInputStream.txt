1:01883da: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:2fd3268:  *
1:01883da:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2fd3268:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:01883da:  */
1:01883da: package org.apache.cassandra.io.util;
2:01883da: 
1:01883da: import java.io.ByteArrayInputStream;
1:01883da: import java.io.IOException;
1:01883da: import java.io.InputStream;
1:01883da: 
1:01883da: /*
1:01883da:  * This file has been modified from Apache Harmony's ByteArrayInputStream
1:01883da:  * implementation. The synchronized methods of the original have been
1:01883da:  * replaced by non-synchronized methods. This makes this certain operations
1:01883da:  * FASTer, but also *not thread-safe*.
1:07cdfd0:  *
1:01883da:  * This file remains formatted the same as the Apache Harmony original to
1:01883da:  * make patching easier if any bug fixes are made to the Harmony version.
1:01883da:  */
1:01883da: 
1:01883da: /**
1:01883da:  * A specialized {@link InputStream } for reading the contents of a byte array.
1:07cdfd0:  *
1:01883da:  * @see ByteArrayInputStream
1:01883da:  */
1:68d2526: public class FastByteArrayInputStream extends InputStream
1:68d2526: {
1:01883da:     /**
1:01883da:      * The {@code byte} array containing the bytes to stream over.
1:01883da:      */
1:01883da:     protected byte[] buf;
1:01883da: 
1:01883da:     /**
1:01883da:      * The current position within the byte array.
1:01883da:      */
1:01883da:     protected int pos;
1:01883da: 
1:01883da:     /**
1:01883da:      * The current mark position. Initially set to 0 or the <code>offset</code>
1:01883da:      * parameter within the constructor.
1:01883da:      */
1:01883da:     protected int mark;
1:01883da: 
1:01883da:     /**
1:01883da:      * The total number of bytes initially available in the byte array
1:01883da:      * {@code buf}.
1:01883da:      */
1:01883da:     protected int count;
1:01883da: 
1:01883da:     /**
1:01883da:      * Constructs a new {@code ByteArrayInputStream} on the byte array
1:01883da:      * {@code buf}.
1:07cdfd0:      *
1:01883da:      * @param buf
1:01883da:      *            the byte array to stream over.
1:01883da:      */
1:68d2526:     public FastByteArrayInputStream(byte buf[])
1:68d2526:     {
1:01883da:         this.mark = 0;
1:01883da:         this.buf = buf;
1:01883da:         this.count = buf.length;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Constructs a new {@code ByteArrayInputStream} on the byte array
1:01883da:      * {@code buf} with the initial position set to {@code offset} and the
1:01883da:      * number of bytes available set to {@code offset} + {@code length}.
1:07cdfd0:      *
1:01883da:      * @param buf
1:01883da:      *            the byte array to stream over.
1:01883da:      * @param offset
1:01883da:      *            the initial position in {@code buf} to start streaming from.
1:01883da:      * @param length
1:01883da:      *            the number of bytes available for streaming.
1:01883da:      */
1:68d2526:     public FastByteArrayInputStream(byte buf[], int offset, int length)
1:68d2526:     {
1:01883da:         this.buf = buf;
1:01883da:         pos = offset;
1:01883da:         mark = offset;
1:01883da:         count = offset + length > buf.length ? buf.length : offset + length;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Returns the number of bytes that are available before this stream will
1:01883da:      * block. This method returns the number of bytes yet to be read from the
1:01883da:      * source byte array.
1:07cdfd0:      *
1:01883da:      * @return the number of bytes available before blocking.
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public int available()
1:68d2526:     {
1:01883da:         return count - pos;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Closes this stream and frees resources associated with this stream.
1:07cdfd0:      *
1:01883da:      * @throws IOException
1:01883da:      *             if an I/O error occurs while closing this stream.
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public void close() throws IOException
1:68d2526:     {
1:01883da:         // Do nothing on close, this matches JDK behaviour.
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Sets a mark position in this ByteArrayInputStream. The parameter
1:01883da:      * {@code readlimit} is ignored. Sending {@code reset()} will reposition the
1:01883da:      * stream back to the marked position.
1:07cdfd0:      *
1:01883da:      * @param readlimit
1:01883da:      *            ignored.
1:01883da:      * @see #markSupported()
1:01883da:      * @see #reset()
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public void mark(int readlimit)
1:68d2526:     {
1:01883da:         mark = pos;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Indicates whether this stream supports the {@code mark()} and
1:01883da:      * {@code reset()} methods. Returns {@code true} since this class supports
1:01883da:      * these methods.
1:07cdfd0:      *
1:01883da:      * @return always {@code true}.
1:01883da:      * @see #mark(int)
1:01883da:      * @see #reset()
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public boolean markSupported()
1:68d2526:     {
1:01883da:         return true;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Reads a single byte from the source byte array and returns it as an
1:01883da:      * integer in the range from 0 to 255. Returns -1 if the end of the source
1:01883da:      * array has been reached.
1:07cdfd0:      *
1:01883da:      * @return the byte read or -1 if the end of this stream has been reached.
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public int read()
1:68d2526:     {
1:01883da:         return pos < count ? buf[pos++] & 0xFF : -1;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Reads at most {@code len} bytes from this stream and stores
1:01883da:      * them in byte array {@code b} starting at {@code offset}. This
1:01883da:      * implementation reads bytes from the source byte array.
1:07cdfd0:      *
1:01883da:      * @param b
1:01883da:      *            the byte array in which to store the bytes read.
1:01883da:      * @param offset
1:01883da:      *            the initial position in {@code b} to store the bytes read from
1:01883da:      *            this stream.
1:01883da:      * @param length
1:01883da:      *            the maximum number of bytes to store in {@code b}.
1:01883da:      * @return the number of bytes actually read or -1 if no bytes were read and
1:01883da:      *         the end of the stream was encountered.
1:01883da:      * @throws IndexOutOfBoundsException
1:01883da:      *             if {@code offset < 0} or {@code length < 0}, or if
1:01883da:      *             {@code offset + length} is greater than the size of
1:01883da:      *             {@code b}.
1:01883da:      * @throws NullPointerException
1:01883da:      *             if {@code b} is {@code null}.
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public int read(byte b[], int offset, int length)
1:68d2526:     {
1:01883da:         if (b == null) {
1:01883da:             throw new NullPointerException();
1:01883da:         }
1:01883da:         // avoid int overflow
1:01883da:         if (offset < 0 || offset > b.length || length < 0
1:68d2526:                 || length > b.length - offset)
1:68d2526:         {
1:01883da:             throw new IndexOutOfBoundsException();
1:01883da:         }
1:01883da:         // Are there any bytes available?
1:68d2526:         if (this.pos >= this.count)
1:68d2526:         {
1:01883da:             return -1;
1:01883da:         }
1:68d2526:         if (length == 0)
1:68d2526:         {
1:01883da:             return 0;
1:01883da:         }
1:01883da: 
1:01883da:         int copylen = this.count - pos < length ? this.count - pos : length;
1:01883da:         System.arraycopy(buf, pos, b, offset, copylen);
1:01883da:         pos += copylen;
1:01883da:         return copylen;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Resets this stream to the last marked location. This implementation
1:01883da:      * resets the position to either the marked position, the start position
1:01883da:      * supplied in the constructor or 0 if neither has been provided.
1:2fd3268:      *
1:01883da:      * @see #mark(int)
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public void reset()
1:68d2526:     {
1:01883da:         pos = mark;
1:01883da:     }
1:01883da: 
1:01883da:     /**
1:01883da:      * Skips {@code count} number of bytes in this InputStream. Subsequent
1:01883da:      * {@code read()}s will not return these bytes unless {@code reset()} is
1:01883da:      * used. This implementation skips {@code count} number of bytes in the
1:01883da:      * target stream. It does nothing and returns 0 if {@code n} is negative.
1:07cdfd0:      *
1:01883da:      * @param n
1:01883da:      *            the number of bytes to skip.
1:01883da:      * @return the number of bytes actually skipped.
1:01883da:      */
1:01883da:     @Override
1:68d2526:     public long skip(long n)
1:68d2526:     {
1:68d2526:         if (n <= 0)
1:68d2526:         {
1:01883da:             return 0;
1:01883da:         }
1:01883da:         int temp = pos;
1:01883da:         pos = this.count - pos < n ? this.count : (int) (pos + n);
1:01883da:         return pos - temp;
1:01883da:     }
1:01883da: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public class FastByteArrayInputStream extends InputStream
1: {
/////////////////////////////////////////////////////////////////////////
1:     public FastByteArrayInputStream(byte buf[])
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public FastByteArrayInputStream(byte buf[], int offset, int length)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public int available()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public void close() throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public void mark(int readlimit)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public boolean markSupported()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public int read()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public int read(byte b[], int offset, int length)
1:     {
1:                 || length > b.length - offset)
1:         {
1:         if (this.pos >= this.count)
1:         {
1:         if (length == 0)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     public void reset()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public long skip(long n)
1:     {
1:         if (n <= 0)
1:         {
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
1: /*
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /*
1:  * This file has been modified from Apache Harmony's ByteArrayInputStream
1:  * implementation. The synchronized methods of the original have been
1:  * replaced by non-synchronized methods. This makes this certain operations
1:  * FASTer, but also *not thread-safe*.
0:  * 
1:  * This file remains formatted the same as the Apache Harmony original to
1:  * make patching easier if any bug fixes are made to the Harmony version.
1:  */
1: 
1: /**
1:  * A specialized {@link InputStream } for reading the contents of a byte array.
0:  * 
1:  * @see ByteArrayInputStream
1:  */
0: public class FastByteArrayInputStream extends InputStream {
1:     /**
1:      * The {@code byte} array containing the bytes to stream over.
1:      */
1:     protected byte[] buf;
1: 
1:     /**
1:      * The current position within the byte array.
1:      */
1:     protected int pos;
1: 
1:     /**
1:      * The current mark position. Initially set to 0 or the <code>offset</code>
1:      * parameter within the constructor.
1:      */
1:     protected int mark;
1: 
1:     /**
1:      * The total number of bytes initially available in the byte array
1:      * {@code buf}.
1:      */
1:     protected int count;
1: 
1:     /**
1:      * Constructs a new {@code ByteArrayInputStream} on the byte array
1:      * {@code buf}.
0:      * 
1:      * @param buf
1:      *            the byte array to stream over.
1:      */
0:     public FastByteArrayInputStream(byte buf[]) {
1:         this.mark = 0;
1:         this.buf = buf;
1:         this.count = buf.length;
1:     }
1: 
1:     /**
1:      * Constructs a new {@code ByteArrayInputStream} on the byte array
1:      * {@code buf} with the initial position set to {@code offset} and the
1:      * number of bytes available set to {@code offset} + {@code length}.
0:      * 
1:      * @param buf
1:      *            the byte array to stream over.
1:      * @param offset
1:      *            the initial position in {@code buf} to start streaming from.
1:      * @param length
1:      *            the number of bytes available for streaming.
1:      */
0:     public FastByteArrayInputStream(byte buf[], int offset, int length) {
1:         this.buf = buf;
1:         pos = offset;
1:         mark = offset;
1:         count = offset + length > buf.length ? buf.length : offset + length;
1:     }
1: 
1:     /**
1:      * Returns the number of bytes that are available before this stream will
1:      * block. This method returns the number of bytes yet to be read from the
1:      * source byte array.
0:      * 
1:      * @return the number of bytes available before blocking.
1:      */
1:     @Override
0:     public int available() {
1:         return count - pos;
1:     }
1: 
1:     /**
1:      * Closes this stream and frees resources associated with this stream.
0:      * 
1:      * @throws IOException
1:      *             if an I/O error occurs while closing this stream.
1:      */
1:     @Override
0:     public void close() throws IOException {
1:         // Do nothing on close, this matches JDK behaviour.
1:     }
1: 
1:     /**
1:      * Sets a mark position in this ByteArrayInputStream. The parameter
1:      * {@code readlimit} is ignored. Sending {@code reset()} will reposition the
1:      * stream back to the marked position.
0:      * 
1:      * @param readlimit
1:      *            ignored.
1:      * @see #markSupported()
1:      * @see #reset()
1:      */
1:     @Override
0:     public void mark(int readlimit) {
1:         mark = pos;
1:     }
1: 
1:     /**
1:      * Indicates whether this stream supports the {@code mark()} and
1:      * {@code reset()} methods. Returns {@code true} since this class supports
1:      * these methods.
0:      * 
1:      * @return always {@code true}.
1:      * @see #mark(int)
1:      * @see #reset()
1:      */
1:     @Override
0:     public boolean markSupported() {
1:         return true;
1:     }
1: 
1:     /**
1:      * Reads a single byte from the source byte array and returns it as an
1:      * integer in the range from 0 to 255. Returns -1 if the end of the source
1:      * array has been reached.
0:      * 
1:      * @return the byte read or -1 if the end of this stream has been reached.
1:      */
1:     @Override
0:     public int read() {
1:         return pos < count ? buf[pos++] & 0xFF : -1;
1:     }
1: 
1:     /**
1:      * Reads at most {@code len} bytes from this stream and stores
1:      * them in byte array {@code b} starting at {@code offset}. This
1:      * implementation reads bytes from the source byte array.
0:      * 
1:      * @param b
1:      *            the byte array in which to store the bytes read.
1:      * @param offset
1:      *            the initial position in {@code b} to store the bytes read from
1:      *            this stream.
1:      * @param length
1:      *            the maximum number of bytes to store in {@code b}.
1:      * @return the number of bytes actually read or -1 if no bytes were read and
1:      *         the end of the stream was encountered.
1:      * @throws IndexOutOfBoundsException
1:      *             if {@code offset < 0} or {@code length < 0}, or if
1:      *             {@code offset + length} is greater than the size of
1:      *             {@code b}.
1:      * @throws NullPointerException
1:      *             if {@code b} is {@code null}.
1:      */
1:     @Override
0:     public int read(byte b[], int offset, int length) {
1:         if (b == null) {
1:             throw new NullPointerException();
1:         }
1:         // avoid int overflow
1:         if (offset < 0 || offset > b.length || length < 0
0:                 || length > b.length - offset) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         // Are there any bytes available?
0:         if (this.pos >= this.count) {
1:             return -1;
1:         }
0:         if (length == 0) {
1:             return 0;
1:         }
1: 
1:         int copylen = this.count - pos < length ? this.count - pos : length;
1:         System.arraycopy(buf, pos, b, offset, copylen);
1:         pos += copylen;
1:         return copylen;
1:     }
1: 
1:     /**
1:      * Resets this stream to the last marked location. This implementation
1:      * resets the position to either the marked position, the start position
1:      * supplied in the constructor or 0 if neither has been provided.
0:      *
1:      * @see #mark(int)
1:      */
1:     @Override
0:     public void reset() {
1:         pos = mark;
1:     }
1: 
1:     /**
1:      * Skips {@code count} number of bytes in this InputStream. Subsequent
1:      * {@code read()}s will not return these bytes unless {@code reset()} is
1:      * used. This implementation skips {@code count} number of bytes in the
1:      * target stream. It does nothing and returns 0 if {@code n} is negative.
0:      * 
1:      * @param n
1:      *            the number of bytes to skip.
1:      * @return the number of bytes actually skipped.
1:      */
1:     @Override
0:     public long skip(long n) {
0:         if (n <= 0) {
1:             return 0;
1:         }
1:         int temp = pos;
1:         pos = this.count - pos < n ? this.count : (int) (pos + n);
1:         return pos - temp;
1:     }
1: }
============================================================================