1:dfe4937: /**
1:dfe4937:  * Licensed to the Apache Software Foundation (ASF) under one
1:dfe4937:  * or more contributor license agreements.  See the NOTICE file
1:dfe4937:  * distributed with this work for additional information
1:dfe4937:  * regarding copyright ownership.  The ASF licenses this file
1:dfe4937:  * to you under the Apache License, Version 2.0 (the
1:dfe4937:  * "License"); you may not use this file except in compliance
1:dfe4937:  * with the License.  You may obtain a copy of the License at
1:dfe4937:  *
1:dfe4937:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dfe4937:  *
1:dfe4937:  * Unless required by applicable law or agreed to in writing, software
1:dfe4937:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dfe4937:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfe4937:  * See the License for the specific language governing permissions and
1:dfe4937:  * limitations under the License.
1:dfe4937:  */
1:dfe4937: package org.apache.cassandra.metrics;
4:dfe4937: 
1:8896a70: import com.codahale.metrics.Gauge;
1:8896a70: import com.codahale.metrics.Meter;
1:17dd4cc: import org.apache.cassandra.utils.memory.BufferPool;
1:dfe4937: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:17dd4cc: public class BufferPoolMetrics
4:dfe4937: {
1:17dd4cc:     private static final MetricNameFactory factory = new DefaultNameFactory("BufferPool");
1:8896a70: 
1:17dd4cc:     /** Total number of misses */
1:17dd4cc:     public final Meter misses;
1:17dd4cc: 
1:17dd4cc:     /** Total size of buffer pools, in bytes */
1:dfe4937:     public final Gauge<Long> size;
1:6d8be12: 
1:17dd4cc:     public BufferPoolMetrics()
1:dfe4937:     {
1:17dd4cc:         misses = Metrics.meter(factory.createMetricName("Misses"));
1:17dd4cc: 
1:8896a70:         size = Metrics.register(factory.createMetricName("Size"), new Gauge<Long>()
1:dfe4937:         {
1:8896a70:             public Long getValue()
1:dfe4937:             {
1:17dd4cc:                 return BufferPool.sizeInBytes();
3:dfe4937:             }
2:dfe4937:         });
1:dfe4937:     }
1:dfe4937: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.memory.BufferPool;
1: public class BufferPoolMetrics
1:     private static final MetricNameFactory factory = new DefaultNameFactory("BufferPool");
1:     /** Total number of misses */
1:     public final Meter misses;
1: 
1:     /** Total size of buffer pools, in bytes */
1:     public BufferPoolMetrics()
1:         misses = Metrics.meter(factory.createMetricName("Misses"));
1: 
1:                 return BufferPool.sizeInBytes();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.Meter;
0: import com.codahale.metrics.RatioGauge;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         hits = Metrics.meter(factory.createMetricName("Hits"));
0:         requests = Metrics.meter(factory.createMetricName("Requests"));
0:         hitRate = Metrics.register(factory.createMetricName("HitRate"), new RatioGauge()
0:             @Override
0:             public Ratio getRatio()
0:                 return Ratio.of(hits.getCount(), requests.getCount());
1:         size = Metrics.register(factory.createMetricName("Size"), new Gauge<Long>()
1:             public Long getValue()
author:Brandon Williams
-------------------------------------------------------------------------------
commit:6d8be12
/////////////////////////////////////////////////////////////////////////
0:     private static final MetricNameFactory factory = new DefaultNameFactory("FileCache");
1: 
/////////////////////////////////////////////////////////////////////////
0:         hits = Metrics.newMeter(factory.createMetricName("Hits"), "hits", TimeUnit.SECONDS);
0:         requests = Metrics.newMeter(factory.createMetricName("Requests"), "requests", TimeUnit.SECONDS);
0:         hitRate = Metrics.newGauge(factory.createMetricName("HitRate"), new RatioGauge()
/////////////////////////////////////////////////////////////////////////
0:         size = Metrics.newGauge(factory.createMetricName("Size"), new Gauge<Long>()
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:dfe4937
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
0: import com.yammer.metrics.util.RatioGauge;
0: import org.apache.cassandra.service.FileCacheService;
1: 
0: public class FileCacheMetrics
1: {
0:     /** Total number of hits */
0:     public final Meter hits;
0:     /** Total number of requests */
0:     public final Meter requests;
0:     /** hit rate */
0:     public final Gauge<Double> hitRate;
0:     /** Total size of file cache, in bytes */
1:     public final Gauge<Long> size;
1: 
0:     public FileCacheMetrics()
1:     {
0:         hits = Metrics.newMeter(new MetricName(FileCacheService.class, "Hits"), "hits", TimeUnit.SECONDS);
0:         requests = Metrics.newMeter(new MetricName(FileCacheService.class, "Requests"), "requests", TimeUnit.SECONDS);
0:         hitRate = Metrics.newGauge(new MetricName(FileCacheService.class, "HitRate"), new RatioGauge()
1:         {
0:             protected double getNumerator()
1:             {
0:                 return hits.count();
1:             }
1: 
0:             protected double getDenominator()
1:             {
0:                 return requests.count();
1:             }
1:         });
0:         size = Metrics.newGauge(new MetricName(FileCacheService.class, "Size"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return FileCacheService.instance.sizeInBytes();
1:             }
1:         });
1:     }
1: }
============================================================================