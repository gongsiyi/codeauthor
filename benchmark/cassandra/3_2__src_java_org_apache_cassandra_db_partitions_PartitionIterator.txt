1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.partitions;
2:a991b64: 
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * An iterator over a number of (filtered) partition.
1:a991b64:  *
1:a991b64:  * PartitionIterator is to RowIterator what UnfilteredPartitionIterator is to UnfilteredRowIterator
1:a991b64:  * though unlike UnfilteredPartitionIterator, it is not guaranteed that the RowIterator
1:a991b64:  * returned are in partitioner order.
1:a991b64:  *
1:a991b64:  * The object returned by a call to next() is only guaranteed to be
1:a991b64:  * valid until the next call to hasNext() or next(). If a consumer wants to keep a
1:a991b64:  * reference on the returned objects for longer than the iteration, it must
1:a991b64:  * make a copy of it explicitely.
1:a991b64:  */
1:6094974: public interface PartitionIterator extends BasePartitionIterator<RowIterator>
1:a991b64: {
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: public interface PartitionIterator extends BasePartitionIterator<RowIterator>
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.cassandra.db.rows.*;
1: 
1: /**
1:  * An iterator over a number of (filtered) partition.
1:  *
1:  * PartitionIterator is to RowIterator what UnfilteredPartitionIterator is to UnfilteredRowIterator
1:  * though unlike UnfilteredPartitionIterator, it is not guaranteed that the RowIterator
1:  * returned are in partitioner order.
1:  *
1:  * The object returned by a call to next() is only guaranteed to be
1:  * valid until the next call to hasNext() or next(). If a consumer wants to keep a
1:  * reference on the returned objects for longer than the iteration, it must
1:  * make a copy of it explicitely.
1:  */
0: public interface PartitionIterator extends Iterator<RowIterator>, AutoCloseable
1: {
0:     public void close();
1: }
============================================================================