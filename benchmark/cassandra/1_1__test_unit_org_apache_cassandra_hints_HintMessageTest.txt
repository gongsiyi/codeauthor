1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.util.UUID;
1:96d41f0: 
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.SchemaLoader;
1:96d41f0: import org.apache.cassandra.config.CFMetaData;
1:96d41f0: import org.apache.cassandra.config.Schema;
1:96d41f0: import org.apache.cassandra.db.Mutation;
1:96d41f0: import org.apache.cassandra.db.RowUpdateBuilder;
1:96d41f0: import org.apache.cassandra.io.util.DataInputBuffer;
1:96d41f0: import org.apache.cassandra.io.util.DataInputPlus;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBuffer;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: import org.apache.cassandra.schema.KeyspaceParams;
1:96d41f0: import org.apache.cassandra.utils.FBUtilities;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.assertEquals;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.hints.HintsTestUtil.assertHintsEqual;
1:96d41f0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:96d41f0: 
1:96d41f0: public class HintMessageTest
1:96d41f0: {
1:96d41f0:     private static final String KEYSPACE = "hint_message_test";
1:96d41f0:     private static final String TABLE = "table";
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testSerializer() throws IOException
1:96d41f0:     {
1:96d41f0:         SchemaLoader.prepareServer();
1:96d41f0:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:96d41f0: 
1:96d41f0:         UUID hostId = UUID.randomUUID();
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0: 
1:96d41f0:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:96d41f0:         Mutation mutation =
1:96d41f0:             new RowUpdateBuilder(table, now, bytes("key"))
1:96d41f0:                 .clustering("column")
1:96d41f0:                 .add("val", "val" + 1234)
1:96d41f0:                 .build();
1:96d41f0:         Hint hint = Hint.create(mutation, now / 1000);
1:96d41f0:         HintMessage message = new HintMessage(hostId, hint);
1:96d41f0: 
1:96d41f0:         // serialize
1:96d41f0:         int serializedSize = (int) HintMessage.serializer.serializedSize(message, MessagingService.current_version);
1:96d41f0:         DataOutputBuffer dob = new DataOutputBuffer();
1:96d41f0:         HintMessage.serializer.serialize(message, dob, MessagingService.current_version);
1:96d41f0:         assertEquals(serializedSize, dob.getLength());
1:96d41f0: 
1:96d41f0:         // deserialize
1:96d41f0:         DataInputPlus di = new DataInputBuffer(dob.buffer(), true);
1:96d41f0:         HintMessage deserializedMessage = HintMessage.serializer.deserialize(di, MessagingService.current_version);
1:96d41f0: 
1:96d41f0:         // compare before/after
1:96d41f0:         assertEquals(hostId, deserializedMessage.hostId);
1:96d41f0:         assertHintsEqual(message.hint, deserializedMessage.hint);
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.util.UUID;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static junit.framework.Assert.assertEquals;
1: 
1: import static org.apache.cassandra.hints.HintsTestUtil.assertHintsEqual;
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: public class HintMessageTest
1: {
1:     private static final String KEYSPACE = "hint_message_test";
1:     private static final String TABLE = "table";
1: 
1:     @Test
1:     public void testSerializer() throws IOException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1: 
1:         UUID hostId = UUID.randomUUID();
1:         long now = FBUtilities.timestampMicros();
1: 
1:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:         Mutation mutation =
1:             new RowUpdateBuilder(table, now, bytes("key"))
1:                 .clustering("column")
1:                 .add("val", "val" + 1234)
1:                 .build();
1:         Hint hint = Hint.create(mutation, now / 1000);
1:         HintMessage message = new HintMessage(hostId, hint);
1: 
1:         // serialize
1:         int serializedSize = (int) HintMessage.serializer.serializedSize(message, MessagingService.current_version);
1:         DataOutputBuffer dob = new DataOutputBuffer();
1:         HintMessage.serializer.serialize(message, dob, MessagingService.current_version);
1:         assertEquals(serializedSize, dob.getLength());
1: 
1:         // deserialize
1:         DataInputPlus di = new DataInputBuffer(dob.buffer(), true);
1:         HintMessage deserializedMessage = HintMessage.serializer.deserialize(di, MessagingService.current_version);
1: 
1:         // compare before/after
1:         assertEquals(hostId, deserializedMessage.hostId);
1:         assertHintsEqual(message.hint, deserializedMessage.hint);
1:     }
1: }
============================================================================