1:07cf56f: /*
1:522d0dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:522d0dd:  * or more contributor license agreements.  See the NOTICE file
1:522d0dd:  * distributed with this work for additional information
1:522d0dd:  * regarding copyright ownership.  The ASF licenses this file
1:522d0dd:  * to you under the Apache License, Version 2.0 (the
1:522d0dd:  * "License"); you may not use this file except in compliance
1:522d0dd:  * with the License.  You may obtain a copy of the License at
1:522d0dd:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:522d0dd:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:522d0dd:  */
1:522d0dd: package org.apache.cassandra.db.marshal;
9:522d0dd: 
1:522d0dd: import java.nio.ByteBuffer;
1:522d0dd: import java.util.HashMap;
1:522d0dd: import java.util.Map;
1:259f06e: import java.util.List;
1:259f06e: 
1:b72af48: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:3a2faf9: import org.apache.cassandra.exceptions.SyntaxException;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:522d0dd: 
1:522d0dd: public class ReversedType<T> extends AbstractType<T>
1:259f06e: {
1:522d0dd:     // interning instances
1:2bc0d4d:     private static final Map<AbstractType<?>, ReversedType> instances = new HashMap<AbstractType<?>, ReversedType>();
1:522d0dd: 
1:0e0213b:     public final AbstractType<T> baseType;
1:522d0dd: 
1:3a2faf9:     public static <T> ReversedType<T> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
1:2e3975c:     {
1:2bc0d4d:         List<AbstractType<?>> types = parser.getTypeParameters();
1:259f06e:         if (types.size() != 1)
1:259f06e:             throw new ConfigurationException("ReversedType takes exactly one argument, " + types.size() + " given");
1:2bc0d4d:         return getInstance((AbstractType<T>) types.get(0));
1:2e3975c:     }
1:2e3975c: 
1:522d0dd:     public static synchronized <T> ReversedType<T> getInstance(AbstractType<T> baseType)
1:2e3975c:     {
1:2bc0d4d:         ReversedType<T> type = instances.get(baseType);
1:522d0dd:         if (type == null)
11:522d0dd:         {
1:2bc0d4d:             type = new ReversedType<T>(baseType);
1:522d0dd:             instances.put(baseType, type);
1:2e3975c:         }
1:02fb218:         return type;
1:259f06e:     }
1:259f06e: 
1:522d0dd:     private ReversedType(AbstractType<T> baseType)
1:522d0dd:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:522d0dd:         this.baseType = baseType;
11:522d0dd:     }
1:522d0dd: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return baseType.isEmptyValueMeaningless();
1:4df4f79:     }
1:4df4f79: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:522d0dd:     {
1:6ea00a3:         return baseType.compare(o2, o1);
1:522d0dd:     }
1:522d0dd: 
1:a991b64:     @Override
1:a991b64:     public int compareForCQL(ByteBuffer v1, ByteBuffer v2)
1:a991b64:     {
1:a991b64:         return baseType.compare(v1, v2);
1:a991b64:     }
1:a991b64: 
1:522d0dd:     public String getString(ByteBuffer bytes)
1:e9c6742:     {
1:522d0dd:         return baseType.getString(bytes);
1:e9c6742:     }
1:e9c6742: 
1:522d0dd:     public ByteBuffer fromString(String source)
1:522d0dd:     {
1:522d0dd:         return baseType.fromString(source);
1:522d0dd:     }
1:522d0dd: 
1:e9c6742:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:522d0dd:     {
1:c7b02d1:         return baseType.fromJSONObject(parsed);
1:522d0dd:     }
1:522d0dd: 
1:522d0dd:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:522d0dd:     {
1:c7b02d1:         return baseType.toJSONString(buffer, protocolVersion);
1:522d0dd:     }
1:522d0dd: 
1:c7b02d1:     @Override
1:a4e108c:     public boolean isCompatibleWith(AbstractType<?> otherType)
1:522d0dd:     {
1:a4e108c:         if (!(otherType instanceof ReversedType))
1:a4e108c:             return false;
1:522d0dd: 
1:a4e108c:         return this.baseType.isCompatibleWith(((ReversedType) otherType).baseType);
1:522d0dd:     }
1:522d0dd: 
1:c7b02d1:     @Override
1:9da742d:     public boolean isValueCompatibleWith(AbstractType<?> otherType)
1:522d0dd:     {
1:9da742d:         return this.baseType.isValueCompatibleWith(otherType);
1:522d0dd:     }
1:522d0dd: 
1:a4e108c:     @Override
1:b72af48:     public CQL3Type asCQL3Type()
1:b72af48:     {
1:b72af48:         return baseType.asCQL3Type();
1:b72af48:     }
1:b72af48: 
1:fc8b76f:     public TypeSerializer<T> getSerializer()
1:522d0dd:     {
1:fc8b76f:         return baseType.getSerializer();
1:98c4a7c:     }
1:98c4a7c: 
1:7a3c3ab:     public boolean referencesUserType(String userTypeName)
1:98c4a7c:     {
1:7a3c3ab:         return baseType.referencesUserType(userTypeName);
1:522d0dd:     }
1:522d0dd: 
1:b72af48:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return baseType.valueLengthIfFixed();
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:c12abfb:     public boolean isReversed()
1:c12abfb:     {
1:c12abfb:         return true;
1:c12abfb:     }
1:c12abfb: 
1:c12abfb:     @Override
1:522d0dd:     public String toString()
1:522d0dd:     {
1:522d0dd:         return getClass().getName() + "(" + baseType + ")";
1:522d0dd:     }
1:522d0dd: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:bb56193
commit:9583b6b
commit:527d189
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:7a3c3ab
/////////////////////////////////////////////////////////////////////////
1:     public boolean referencesUserType(String userTypeName)
1:         return baseType.referencesUserType(userTypeName);
commit:e6f23e6
commit:1de63e9
commit:98c4a7c
/////////////////////////////////////////////////////////////////////////
0:     public boolean references(AbstractType<?> check)
1:     {
0:         return super.references(check) || baseType.references(check);
1:     }
1: 
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return baseType.isEmptyValueMeaningless();
1:     }
1: 
author:blerer
-------------------------------------------------------------------------------
commit:d332c7e
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:c12abfb
/////////////////////////////////////////////////////////////////////////
1:     public boolean isReversed()
1:     {
1:         return true;
1:     }
1: 
1:     @Override
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public int compareForCQL(ByteBuffer v1, ByteBuffer v2)
1:     {
1:         return baseType.compare(v1, v2);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected int valueLengthIfFixed()
1:     {
1:         return baseType.valueLengthIfFixed();
1:     }
1: 
1:     @Override
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<T> getSerializer()
1:         return baseType.getSerializer();
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractSerializer<T> asComposer()
1:     {
0:         return baseType.asComposer();
1:     }
1: 
1:     @Override
commit:b72af48
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.CQL3Type;
/////////////////////////////////////////////////////////////////////////
1:     public CQL3Type asCQL3Type()
1:     {
1:         return baseType.asCQL3Type();
1:     }
1: 
1:     @Override
commit:fe57553
commit:0e0213b
/////////////////////////////////////////////////////////////////////////
1:     public final AbstractType<T> baseType;
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     public static <T> ReversedType<T> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:6ea00a3
/////////////////////////////////////////////////////////////////////////
1:         return baseType.compare(o2, o1);
commit:2e3975c
/////////////////////////////////////////////////////////////////////////
0:         // An empty byte buffer is always smaller
0:         if (o1.remaining() == 0)
1:         {
0:             return o2.remaining() == 0 ? 0 : -1;
1:         }
0:         if (o2.remaining() == 0)
1:         {
0:             return 1;
1:         }
1: 
commit:259f06e
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0:     public static <T> ReversedType<T> getInstance(TypeParser parser) throws ConfigurationException
1:     {
0:         List<AbstractType> types = parser.getTypeParameters();
1:         if (types.size() != 1)
1:             throw new ConfigurationException("ReversedType takes exactly one argument, " + types.size() + " given");
0:         return getInstance(types.get(0));
1:     }
1: 
commit:522d0dd
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class ReversedType<T> extends AbstractType<T>
1: {
1:     // interning instances
0:     private static final Map<AbstractType, ReversedType> instances = new HashMap<AbstractType, ReversedType>();
1: 
0:     // package protected for unit tests sake
0:     final AbstractType<T> baseType;
1: 
1:     public static synchronized <T> ReversedType<T> getInstance(AbstractType<T> baseType)
1:     {
0:         ReversedType type = instances.get(baseType);
1:         if (type == null)
1:         {
0:             type = new ReversedType(baseType);
1:             instances.put(baseType, type);
1:         }
0:         return (ReversedType<T>) type;
1:     }
1: 
1:     private ReversedType(AbstractType<T> baseType)
1:     {
1:         this.baseType = baseType;
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
0:         return -baseType.compare(o1, o2);
1:     }
1: 
1:     public String getString(ByteBuffer bytes)
1:     {
1:         return baseType.getString(bytes);
1:     }
1: 
1:     public ByteBuffer fromString(String source)
1:     {
1:         return baseType.fromString(source);
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         baseType.validate(bytes);
1:     }
1: 
0:     public T compose(ByteBuffer bytes)
1:     {
0:         return baseType.compose(bytes);
1:     }
1: 
0:     public ByteBuffer decompose(T value)
1:     {
0:         return baseType.decompose(value);
1:     }
1: 
0:     public Class<T> getType()
1:     {
0:         return baseType.getType();
1:     }
1: 
0:     public String toString(T t)
1:     {
0:         return baseType.toString(t);
1:     }
1: 
0:     public boolean isSigned()
1:     {
0:         return baseType.isSigned();
1:     }
1: 
0:     public boolean isCaseSensitive()
1:     {
0:         return baseType.isCaseSensitive();
1:     }
1: 
0:     public boolean isCurrency()
1:     {
0:         return baseType.isCurrency();
1:     }
1: 
0:     public int getPrecision(T obj)
1:     {
0:         return baseType.getPrecision(obj);
1:     }
1: 
0:     public int getScale(T obj)
1:     {
0:         return baseType.getScale(obj);
1:     }
1: 
0:     public int getJdbcType()
1:     {
0:         return baseType.getJdbcType();
1:     }
1: 
0:     public boolean needsQuotes()
1:     {
0:         return baseType.needsQuotes();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return getClass().getName() + "(" + baseType + ")";
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Term;
0: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
0:     {
1:         return baseType.fromJSONObject(parsed);
0:     }
0: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
0:     {
1:         return baseType.toJSONString(buffer, protocolVersion);
0:     }
0: 
1:     @Override
commit:d345057
commit:a4e108c
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCompatibleWith(AbstractType<?> otherType)
0:     {
1:         if (!(otherType instanceof ReversedType))
1:             return false;
0: 
1:         return this.baseType.isCompatibleWith(((ReversedType) otherType).baseType);
0:     }
0: 
1:     @Override
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValueCompatibleWith(AbstractType<?> otherType)
0:     {
1:         return this.baseType.isValueCompatibleWith(otherType);
0:     }
0: 
0:     @Override
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
1:         return type;
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:2bc0d4d
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<AbstractType<?>, ReversedType> instances = new HashMap<AbstractType<?>, ReversedType>();
1:         List<AbstractType<?>> types = parser.getTypeParameters();
1:         return getInstance((AbstractType<T>) types.get(0));
1:         ReversedType<T> type = instances.get(baseType);
1:             type = new ReversedType<T>(baseType);
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
============================================================================