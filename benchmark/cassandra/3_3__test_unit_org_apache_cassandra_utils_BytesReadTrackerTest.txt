1:ad04bf7: /*
1:ad04bf7:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad04bf7:  * or more contributor license agreements.  See the NOTICE file
1:ad04bf7:  * distributed with this work for additional information
1:ad04bf7:  * regarding copyright ownership.  The ASF licenses this file
1:ad04bf7:  * to you under the Apache License, Version 2.0 (the
1:ad04bf7:  * "License"); you may not use this file except in compliance
1:ad04bf7:  * with the License.  You may obtain a copy of the License at
1:ad04bf7:  *
1:ad04bf7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:ad04bf7:  *
1:ad04bf7:  * Unless required by applicable law or agreed to in writing,
1:ad04bf7:  * software distributed under the License is distributed on an
1:ad04bf7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ad04bf7:  * KIND, either express or implied.  See the License for the
1:ad04bf7:  * specific language governing permissions and limitations
1:ad04bf7:  * under the License.
1:ad04bf7:  */
1:ad04bf7: package org.apache.cassandra.utils;
2:ad04bf7: 
1:e8651b6: import static org.junit.Assert.assertEquals;
1:e8651b6: import static org.junit.Assert.assertTrue;
1:e8651b6: import static org.junit.Assert.fail;
1:e8651b6: 
1:ad04bf7: import java.io.ByteArrayInputStream;
1:ad04bf7: import java.io.ByteArrayOutputStream;
1:ad04bf7: import java.io.DataInputStream;
1:ad04bf7: import java.io.DataOutputStream;
1:ad04bf7: 
1:ad04bf7: import org.junit.Test;
1:a991b64: 
1:e8651b6: import org.apache.cassandra.io.util.BytesReadTracker;
1:e8651b6: import org.apache.cassandra.io.util.DataInputPlus;
1:e8651b6: import org.apache.cassandra.io.util.TrackedDataInputPlus;
1:e8651b6: import org.apache.cassandra.io.util.TrackedInputStream;
1:ad04bf7: 
1:ad04bf7: public class BytesReadTrackerTest
1:ad04bf7: {
1:ad04bf7: 
3:ad04bf7:     @Test
1:ad04bf7:     public void testBytesRead() throws Exception
1:ad04bf7:     {
1:e8651b6:         internalTestBytesRead(true);
1:e8651b6:         internalTestBytesRead(false);
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     @Test
1:e8651b6:     public void testUnsignedRead() throws Exception
1:e8651b6:     {
1:e8651b6:         internalTestUnsignedRead(true);
1:e8651b6:         internalTestUnsignedRead(false);
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     @Test
1:e8651b6:     public void testSkipBytesAndReadFully() throws Exception
1:e8651b6:     {
1:e8651b6:         internalTestSkipBytesAndReadFully(true);
1:e8651b6:         internalTestSkipBytesAndReadFully(false);
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     @Test
1:e8651b6:     public void testReadLine() throws Exception
1:e8651b6:     {
1:e8651b6:         internalTestReadLine(true);
1:e8651b6:         internalTestReadLine(false);
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public void internalTestBytesRead(boolean inputStream) throws Exception
1:e8651b6:     {
1:ad04bf7:         byte[] testData;
1:ad04bf7: 
1:ad04bf7:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:60d9c7f:         DataOutputStream out = new DataOutputStream(baos);
1:ad04bf7:         try
1:ad04bf7:         {
1:ad04bf7:             // boolean
1:60d9c7f:             out.writeBoolean(true);
1:ad04bf7:             // byte
1:60d9c7f:             out.writeByte(0x1);
1:ad04bf7:             // char
1:60d9c7f:             out.writeChar('a');
1:ad04bf7:             // short
1:60d9c7f:             out.writeShort(1);
1:ad04bf7:             // int
1:60d9c7f:             out.writeInt(1);
1:ad04bf7:             // long
1:60d9c7f:             out.writeLong(1L);
1:ad04bf7:             // float
1:60d9c7f:             out.writeFloat(1.0f);
1:ad04bf7:             // double
1:60d9c7f:             out.writeDouble(1.0d);
1:ad04bf7: 
1:ad04bf7:             // String
1:60d9c7f:             out.writeUTF("abc");
1:ad04bf7:             testData = baos.toByteArray();
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             out.close();
1:ad04bf7:         }
1:ad04bf7: 
1:e8651b6:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:e8651b6:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:e8651b6:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:ad04bf7: 
1:ad04bf7:         try
1:ad04bf7:         {
1:ad04bf7:             // boolean = 1byte
1:e8651b6:             boolean bool = reader.readBoolean();
1:ad04bf7:             assertTrue(bool);
1:ad04bf7:             assertEquals(1, tracker.getBytesRead());
1:ad04bf7:             // byte = 1byte
1:e8651b6:             byte b = reader.readByte();
1:ad04bf7:             assertEquals(b, 0x1);
1:ad04bf7:             assertEquals(2, tracker.getBytesRead());
1:c024da4:             // char = 2byte
1:e8651b6:             char c = reader.readChar();
1:ad04bf7:             assertEquals('a', c);
1:c024da4:             assertEquals(4, tracker.getBytesRead());
1:ad04bf7:             // short = 2bytes
1:e8651b6:             short s = reader.readShort();
1:ad04bf7:             assertEquals(1, s);
1:c024da4:             assertEquals((short) 6, tracker.getBytesRead());
1:ad04bf7:             // int = 4bytes
1:e8651b6:             int i = reader.readInt();
1:ad04bf7:             assertEquals(1, i);
1:c024da4:             assertEquals(10, tracker.getBytesRead());
1:ad04bf7:             // long = 8bytes
1:e8651b6:             long l = reader.readLong();
1:ad04bf7:             assertEquals(1L, l);
1:c024da4:             assertEquals(18, tracker.getBytesRead());
1:ad04bf7:             // float = 4bytes
1:e8651b6:             float f = reader.readFloat();
1:ad04bf7:             assertEquals(1.0f, f, 0);
1:c024da4:             assertEquals(22, tracker.getBytesRead());
1:ad04bf7:             // double = 8bytes
1:e8651b6:             double d = reader.readDouble();
1:ad04bf7:             assertEquals(1.0d, d, 0);
1:c024da4:             assertEquals(30, tracker.getBytesRead());
1:ad04bf7:             // String("abc") = 2(string size) + 3 = 5 bytes
1:e8651b6:             String str = reader.readUTF();
1:ad04bf7:             assertEquals("abc", str);
1:c024da4:             assertEquals(35, tracker.getBytesRead());
1:c024da4: 
1:c024da4:             assertEquals(testData.length, tracker.getBytesRead());
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             in.close();
1:ad04bf7:         }
1:ad04bf7: 
1:0fe7942:         tracker.reset(0);
1:ad04bf7:         assertEquals(0, tracker.getBytesRead());
1:ad04bf7:     }
1:ad04bf7: 
1:e8651b6:     public void internalTestUnsignedRead(boolean inputStream) throws Exception
1:ad04bf7:     {
1:ad04bf7:         byte[] testData;
1:ad04bf7: 
1:ad04bf7:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:60d9c7f:         DataOutputStream out = new DataOutputStream(baos);
1:ad04bf7:         try
1:ad04bf7:         {
1:ad04bf7:             // byte
1:60d9c7f:             out.writeByte(0x1);
1:ad04bf7:             // short
1:60d9c7f:             out.writeShort(1);
1:ad04bf7:             testData = baos.toByteArray();
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             out.close();
1:ad04bf7:         }
1:ad04bf7: 
1:e8651b6:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:e8651b6:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:e8651b6:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:ad04bf7: 
1:ad04bf7:         try
1:ad04bf7:         {
1:ad04bf7:             // byte = 1byte
1:e8651b6:             int b = reader.readUnsignedByte();
1:ad04bf7:             assertEquals(b, 1);
1:ad04bf7:             assertEquals(1, tracker.getBytesRead());
1:ad04bf7:             // short = 2bytes
1:e8651b6:             int s = reader.readUnsignedShort();
1:ad04bf7:             assertEquals(1, s);
2:ad04bf7:             assertEquals(3, tracker.getBytesRead());
1:0fe7942: 
1:0fe7942:             assertEquals(testData.length, tracker.getBytesRead());
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             in.close();
1:ad04bf7:         }
1:ad04bf7:     }
1:ad04bf7: 
1:e8651b6:     public void internalTestSkipBytesAndReadFully(boolean inputStream) throws Exception
1:ad04bf7:     {
1:ad04bf7:         String testStr = "1234567890";
1:ad04bf7:         byte[] testData = testStr.getBytes();
1:ad04bf7: 
1:e8651b6:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:e8651b6:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:e8651b6:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:ad04bf7: 
1:ad04bf7:         try
1:ad04bf7:         {
1:ad04bf7:             // read first 5 bytes
1:ad04bf7:             byte[] out = new byte[5];
1:e8651b6:             reader.readFully(out, 0, 5);
1:ad04bf7:             assertEquals("12345", new String(out));
1:ad04bf7:             assertEquals(5, tracker.getBytesRead());
1:ad04bf7: 
1:ad04bf7:             // then skip 2 bytes
1:e8651b6:             reader.skipBytes(2);
1:ad04bf7:             assertEquals(7, tracker.getBytesRead());
1:ad04bf7: 
1:ad04bf7:             // and read the rest
1:ad04bf7:             out = new byte[3];
1:e8651b6:             reader.readFully(out);
1:ad04bf7:             assertEquals("890", new String(out));
1:ad04bf7:             assertEquals(10, tracker.getBytesRead());
1:0fe7942: 
1:0fe7942:             assertEquals(testData.length, tracker.getBytesRead());
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             in.close();
1:ad04bf7:         }
1:ad04bf7:     }
1:ad04bf7: 
1:e8651b6:     public void internalTestReadLine(boolean inputStream) throws Exception
1:ad04bf7:     {
1:60d9c7f:         DataInputStream in = new DataInputStream(new ByteArrayInputStream("1".getBytes()));
1:e8651b6:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:e8651b6:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:ad04bf7: 
1:ad04bf7:         try
1:ad04bf7:         {
1:e8651b6:             String line = reader.readLine();
1:e8651b6:             if (inputStream)
1:e8651b6:                 assertEquals(line, "1");
1:e8651b6:             else
1:e8651b6:                 fail("Should have thrown UnsupportedOperationException");
1:e8651b6:         }
1:e8651b6:         catch (UnsupportedOperationException e)
1:e8651b6:         {
1:e8651b6:             if (inputStream)
1:e8651b6:                 fail("Should have not thrown UnsupportedOperationException");
1:ad04bf7:         }
1:ad04bf7:         finally
1:ad04bf7:         {
1:60d9c7f:             in.close();
1:ad04bf7:         }
1:ad04bf7:     }
1:ad04bf7: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.BytesReadTracker;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.TrackedDataInputPlus;
1: import org.apache.cassandra.io.util.TrackedInputStream;
/////////////////////////////////////////////////////////////////////////
1:         internalTestBytesRead(true);
1:         internalTestBytesRead(false);
1:     }
1: 
1:     @Test
1:     public void testUnsignedRead() throws Exception
1:     {
1:         internalTestUnsignedRead(true);
1:         internalTestUnsignedRead(false);
1:     }
1: 
1:     @Test
1:     public void testSkipBytesAndReadFully() throws Exception
1:     {
1:         internalTestSkipBytesAndReadFully(true);
1:         internalTestSkipBytesAndReadFully(false);
1:     }
1: 
1:     @Test
1:     public void testReadLine() throws Exception
1:     {
1:         internalTestReadLine(true);
1:         internalTestReadLine(false);
1:     }
1: 
1:     public void internalTestBytesRead(boolean inputStream) throws Exception
1:     {
/////////////////////////////////////////////////////////////////////////
1:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:             boolean bool = reader.readBoolean();
1:             byte b = reader.readByte();
1:             char c = reader.readChar();
1:             short s = reader.readShort();
1:             int i = reader.readInt();
1:             long l = reader.readLong();
1:             float f = reader.readFloat();
1:             double d = reader.readDouble();
1:             String str = reader.readUTF();
/////////////////////////////////////////////////////////////////////////
1:     public void internalTestUnsignedRead(boolean inputStream) throws Exception
/////////////////////////////////////////////////////////////////////////
1:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:             int b = reader.readUnsignedByte();
1:             int s = reader.readUnsignedShort();
/////////////////////////////////////////////////////////////////////////
1:     public void internalTestSkipBytesAndReadFully(boolean inputStream) throws Exception
1:         DataInputPlus.DataInputStreamPlus in = new DataInputPlus.DataInputStreamPlus(new ByteArrayInputStream(testData));
1:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:             reader.readFully(out, 0, 5);
1:             reader.skipBytes(2);
1:             reader.readFully(out);
/////////////////////////////////////////////////////////////////////////
1:     public void internalTestReadLine(boolean inputStream) throws Exception
1:         BytesReadTracker tracker = inputStream? new TrackedInputStream(in) : new TrackedDataInputPlus(in);
1:         DataInputPlus reader = inputStream? new DataInputPlus.DataInputStreamPlus((TrackedInputStream)tracker) : (DataInputPlus) tracker;
1:             String line = reader.readLine();
1:             if (inputStream)
1:                 assertEquals(line, "1");
1:             else
1:                 fail("Should have thrown UnsupportedOperationException");
1:         }
1:         catch (UnsupportedOperationException e)
1:         {
1:             if (inputStream)
1:                 fail("Should have not thrown UnsupportedOperationException");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
1:         DataOutputStream out = new DataOutputStream(baos);
1:             out.writeBoolean(true);
1:             out.writeByte(0x1);
1:             out.writeChar('a');
1:             out.writeShort(1);
1:             out.writeInt(1);
1:             out.writeLong(1L);
1:             out.writeFloat(1.0f);
1:             out.writeDouble(1.0d);
1:             out.writeUTF("abc");
1:             out.close();
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(in);
/////////////////////////////////////////////////////////////////////////
1:             in.close();
/////////////////////////////////////////////////////////////////////////
1:         DataOutputStream out = new DataOutputStream(baos);
1:             out.writeByte(0x1);
1:             out.writeShort(1);
1:             out.close();
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(in);
/////////////////////////////////////////////////////////////////////////
1:             in.close();
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(in);
/////////////////////////////////////////////////////////////////////////
1:             in.close();
1:         DataInputStream in = new DataInputStream(new ByteArrayInputStream("1".getBytes()));
0:         BytesReadTracker tracker = new BytesReadTracker(in);
/////////////////////////////////////////////////////////////////////////
1:             in.close();
commit:0fe7942
/////////////////////////////////////////////////////////////////////////
1:         tracker.reset(0);
/////////////////////////////////////////////////////////////////////////
1: 
1:             assertEquals(testData.length, tracker.getBytesRead());
/////////////////////////////////////////////////////////////////////////
1: 
1:             assertEquals(testData.length, tracker.getBytesRead());
commit:c024da4
/////////////////////////////////////////////////////////////////////////
1:             // char = 2byte
1:             assertEquals(4, tracker.getBytesRead());
1:             assertEquals((short) 6, tracker.getBytesRead());
1:             assertEquals(10, tracker.getBytesRead());
1:             assertEquals(18, tracker.getBytesRead());
1:             assertEquals(22, tracker.getBytesRead());
1:             assertEquals(30, tracker.getBytesRead());
1:             assertEquals(35, tracker.getBytesRead());
1: 
1:             assertEquals(testData.length, tracker.getBytesRead());
commit:ad04bf7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: 
1: import org.junit.Test;
1: 
1: public class BytesReadTrackerTest
1: {
1: 
1:     @Test
1:     public void testBytesRead() throws Exception
1:     {
1:         byte[] testData;
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream(baos);
1:         try
1:         {
1:             // boolean
0:             dos.writeBoolean(true);
1:             // byte
0:             dos.writeByte(0x1);
1:             // char
0:             dos.writeChar('a');
1:             // short
0:             dos.writeShort(1);
1:             // int
0:             dos.writeInt(1);
1:             // long
0:             dos.writeLong(1L);
1:             // float
0:             dos.writeFloat(1.0f);
1:             // double
0:             dos.writeDouble(1.0d);
1: 
1:             // String
0:             dos.writeUTF("abc");
1:             testData = baos.toByteArray();
1:         }
1:         finally
1:         {
0:             dos.close();
1:         }
1: 
0:         DataInputStream dis = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(dis);
1: 
1:         try
1:         {
1:             // boolean = 1byte
0:             boolean bool = tracker.readBoolean();
1:             assertTrue(bool);
1:             assertEquals(1, tracker.getBytesRead());
1:             // byte = 1byte
0:             byte b = tracker.readByte();
1:             assertEquals(b, 0x1);
1:             assertEquals(2, tracker.getBytesRead());
0:             // char = 1byte
0:             char c = tracker.readChar();
1:             assertEquals('a', c);
1:             assertEquals(3, tracker.getBytesRead());
1:             // short = 2bytes
0:             short s = tracker.readShort();
1:             assertEquals(1, s);
0:             assertEquals((short) 5, tracker.getBytesRead());
1:             // int = 4bytes
0:             int i = tracker.readInt();
1:             assertEquals(1, i);
0:             assertEquals(9, tracker.getBytesRead());
1:             // long = 8bytes
0:             long l = tracker.readLong();
1:             assertEquals(1L, l);
0:             assertEquals(17, tracker.getBytesRead());
1:             // float = 4bytes
0:             float f = tracker.readFloat();
1:             assertEquals(1.0f, f, 0);
0:             assertEquals(21, tracker.getBytesRead());
1:             // double = 8bytes
0:             double d = tracker.readDouble();
1:             assertEquals(1.0d, d, 0);
0:             assertEquals(29, tracker.getBytesRead());
1:             // String("abc") = 2(string size) + 3 = 5 bytes
0:             String str = tracker.readUTF();
1:             assertEquals("abc", str);
0:             assertEquals(34, tracker.getBytesRead());
1:         }
1:         finally
1:         {
0:             dis.close();
1:         }
1: 
0:         tracker.reset();
1:         assertEquals(0, tracker.getBytesRead());
1:     }
1: 
1:     @Test
0:     public void testUnsignedRead() throws Exception
1:     {
1:         byte[] testData;
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream(baos);
1:         try
1:         {
1:             // byte
0:             dos.writeByte(0x1);
1:             // short
0:             dos.writeShort(1);
1:             testData = baos.toByteArray();
1:         }
1:         finally
1:         {
0:             dos.close();
1:         }
1: 
0:         DataInputStream dis = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(dis);
1: 
1:         try
1:         {
1:             // byte = 1byte
0:             int b = tracker.readUnsignedByte();
1:             assertEquals(b, 1);
1:             assertEquals(1, tracker.getBytesRead());
1:             // short = 2bytes
0:             int s = tracker.readUnsignedShort();
1:             assertEquals(1, s);
1:             assertEquals(3, tracker.getBytesRead());
1:         }
1:         finally
1:         {
0:             dis.close();
1:         }
1:     }
1: 
1:     @Test
0:     public void testSkipBytesAndReadFully() throws Exception
1:     {
1:         String testStr = "1234567890";
1:         byte[] testData = testStr.getBytes();
1: 
0:         DataInputStream dis = new DataInputStream(new ByteArrayInputStream(testData));
0:         BytesReadTracker tracker = new BytesReadTracker(dis);
1: 
1:         try
1:         {
1:             // read first 5 bytes
1:             byte[] out = new byte[5];
0:             tracker.readFully(out, 0, 5);
1:             assertEquals("12345", new String(out));
1:             assertEquals(5, tracker.getBytesRead());
1: 
1:             // then skip 2 bytes
0:             tracker.skipBytes(2);
1:             assertEquals(7, tracker.getBytesRead());
1: 
1:             // and read the rest
1:             out = new byte[3];
0:             tracker.readFully(out);
1:             assertEquals("890", new String(out));
1:             assertEquals(10, tracker.getBytesRead());
1:         }
1:         finally
1:         {
0:             dis.close();
1:         }
1:     }
1: 
0:     @Test(expected = UnsupportedOperationException.class)
0:     public void testReadLine() throws Exception
1:     {
0:         DataInputStream dis = new DataInputStream(new ByteArrayInputStream("1".getBytes()));
0:         BytesReadTracker tracker = new BytesReadTracker(dis);
1: 
1:         try
1:         {
0:             // throws UnsupportedOperationException
0:             tracker.readLine();
1:         }
1:         finally
1:         {
0:             dis.close();
1:         }
1:     }
1: }
============================================================================