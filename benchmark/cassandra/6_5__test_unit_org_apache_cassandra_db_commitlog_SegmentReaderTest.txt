1:7374e9b: /*
1:7374e9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:7374e9b:  * or more contributor license agreements.  See the NOTICE file
1:7374e9b:  * distributed with this work for additional information
1:7374e9b:  * regarding copyright ownership.  The ASF licenses this file
1:7374e9b:  * to you under the Apache License, Version 2.0 (the
1:7374e9b:  * "License"); you may not use this file except in compliance
1:7374e9b:  * with the License.  You may obtain a copy of the License at
1:7374e9b:  *
1:7374e9b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7374e9b:  *
1:7374e9b:  * Unless required by applicable law or agreed to in writing, software
1:7374e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7374e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7374e9b:  * See the License for the specific language governing permissions and
1:7374e9b:  * limitations under the License.
1:7374e9b:  */
1:7374e9b: package org.apache.cassandra.db.commitlog;
1:7374e9b: 
1:7374e9b: import java.io.File;
1:7374e9b: import java.io.FileOutputStream;
1:7374e9b: import java.io.IOException;
1:7374e9b: import java.io.RandomAccessFile;
1:7374e9b: import java.nio.ByteBuffer;
1:7374e9b: import java.nio.channels.FileChannel;
1:e06d411: import java.util.Collections;
1:7374e9b: import java.util.Random;
1:9343bd4: import java.util.function.BiFunction;
1:9343bd4: 
1:7374e9b: import javax.crypto.Cipher;
1:7374e9b: 
1:7374e9b: import org.junit.Assert;
1:9797511: import org.junit.BeforeClass;
1:7374e9b: import org.junit.Test;
1:7374e9b: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:e31e216: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.CompressedSegmenter;
1:e31e216: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.EncryptedSegmenter;
1:e31e216: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.SyncSegment;
1:7374e9b: import org.apache.cassandra.io.compress.DeflateCompressor;
1:7374e9b: import org.apache.cassandra.io.compress.ICompressor;
1:7374e9b: import org.apache.cassandra.io.compress.LZ4Compressor;
1:7374e9b: import org.apache.cassandra.io.compress.SnappyCompressor;
1:7374e9b: import org.apache.cassandra.io.util.FileDataInput;
1:7374e9b: import org.apache.cassandra.io.util.RandomAccessReader;
1:7374e9b: import org.apache.cassandra.security.CipherFactory;
1:7374e9b: import org.apache.cassandra.security.EncryptionUtils;
1:7374e9b: import org.apache.cassandra.security.EncryptionContext;
1:7374e9b: import org.apache.cassandra.security.EncryptionContextGenerator;
1:7374e9b: import org.apache.cassandra.utils.ByteBufferUtil;
1:7374e9b: 
1:7374e9b: public class SegmentReaderTest
1:7374e9b: {
1:7374e9b:     static final Random random = new Random();
1:7374e9b: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:7374e9b:     @Test
1:7374e9b:     public void compressedSegmenter_LZ4() throws IOException
1:7374e9b:     {
1:e06d411:         compressedSegmenter(LZ4Compressor.create(Collections.emptyMap()));
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void compressedSegmenter_Snappy() throws IOException
1:7374e9b:     {
1:7374e9b:         compressedSegmenter(SnappyCompressor.create(null));
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void compressedSegmenter_Deflate() throws IOException
1:7374e9b:     {
1:7374e9b:         compressedSegmenter(DeflateCompressor.create(null));
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     private void compressedSegmenter(ICompressor compressor) throws IOException
1:7374e9b:     {
1:7374e9b:         int rawSize = (1 << 15) - 137;
1:7374e9b:         ByteBuffer plainTextBuffer = compressor.preferredBufferType().allocate(rawSize);
1:7374e9b:         byte[] b = new byte[rawSize];
1:7374e9b:         random.nextBytes(b);
1:7374e9b:         plainTextBuffer.put(b);
1:7374e9b:         plainTextBuffer.flip();
1:7374e9b: 
1:7374e9b:         int uncompressedHeaderSize = 4;  // need to add in the plain text size to the block we write out
1:7374e9b:         int length = compressor.initialCompressedBufferLength(rawSize);
1:7374e9b:         ByteBuffer compBuffer = ByteBufferUtil.ensureCapacity(null, length + uncompressedHeaderSize, true, compressor.preferredBufferType());
1:7374e9b:         compBuffer.putInt(rawSize);
1:7374e9b:         compressor.compress(plainTextBuffer, compBuffer);
1:7374e9b:         compBuffer.flip();
1:7374e9b: 
1:7374e9b:         File compressedFile = File.createTempFile("compressed-segment-", ".log");
1:7374e9b:         compressedFile.deleteOnExit();
1:7374e9b:         FileOutputStream fos = new FileOutputStream(compressedFile);
1:7374e9b:         fos.getChannel().write(compBuffer);
1:7374e9b:         fos.close();
1:7374e9b: 
1:7374e9b:         try (RandomAccessReader reader = RandomAccessReader.open(compressedFile))
1:7374e9b:         {
1:7374e9b:             CompressedSegmenter segmenter = new CompressedSegmenter(compressor, reader);
1:7374e9b:             int fileLength = (int) compressedFile.length();
1:7374e9b:             SyncSegment syncSegment = segmenter.nextSegment(0, fileLength);
1:7374e9b:             FileDataInput fileDataInput = syncSegment.input;
1:7374e9b:             ByteBuffer fileBuffer = readBytes(fileDataInput, rawSize);
1:7374e9b: 
1:7374e9b:             plainTextBuffer.flip();
1:7374e9b:             Assert.assertEquals(plainTextBuffer, fileBuffer);
1:7374e9b: 
1:7374e9b:             // CompressedSegmenter includes the Sync header length in the syncSegment.endPosition (value)
1:7374e9b:             Assert.assertEquals(rawSize, syncSegment.endPosition - CommitLogSegment.SYNC_MARKER_SIZE);
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:9343bd4:     private ByteBuffer readBytes(FileDataInput input, int len)
1:7374e9b:     {
1:7374e9b:         byte[] buf = new byte[len];
1:9343bd4:         try
1:9343bd4:         {
1:9343bd4:             input.readFully(buf);
1:9343bd4:         }
1:9343bd4:         catch (IOException e)
1:9343bd4:         {
1:9343bd4:             throw new RuntimeException(e);
1:9343bd4:         }
1:9343bd4:         return ByteBuffer.wrap(buf);
1:9343bd4:     }
1:9343bd4: 
1:9343bd4:     private ByteBuffer readBytesSeek(FileDataInput input, int len)
1:9343bd4:     {
1:9343bd4:         byte[] buf = new byte[len];
1:9343bd4: 
1:9343bd4:         /// divide output buffer into 5
1:9343bd4:         int[] offsets = new int[] { 0, len / 5, 2 * len / 5, 3 * len / 5, 4 * len / 5, len };
1:9343bd4:         
1:9343bd4:         //seek offset
1:9343bd4:         long inputStart = input.getFilePointer();
1:9343bd4: 
1:9343bd4:         for (int i = 0; i < offsets.length - 1; i++)
1:9343bd4:         {
1:9343bd4:             try
1:9343bd4:             {
1:9343bd4:                 // seek to beginning of offet
1:9343bd4:                 input.seek(inputStart + offsets[i]);
1:9343bd4:                 //read this segment
1:9343bd4:                 input.readFully(buf, offsets[i], offsets[i + 1] - offsets[i]);
1:9343bd4:             }
1:9343bd4:             catch (IOException e)
1:9343bd4:             {
1:9343bd4:                 throw new RuntimeException(e);
1:9343bd4:             }
1:9343bd4:         }
1:7374e9b:         return ByteBuffer.wrap(buf);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:9343bd4:     public void encryptedSegmenterRead() throws IOException
1:9343bd4:     {
1:9343bd4:         underlyingEncryptedSegmenterTest((s, t) -> readBytes(s, t));
1:9343bd4:     }
1:9343bd4: 
1:9343bd4:     @Test
1:9343bd4:     public void encryptedSegmenterSeek() throws IOException
1:9343bd4:     {
1:9343bd4:         underlyingEncryptedSegmenterTest((s, t) -> readBytesSeek(s, t));
1:9343bd4:     }
1:9343bd4: 
1:9343bd4:     public void underlyingEncryptedSegmenterTest(BiFunction<FileDataInput, Integer, ByteBuffer> readFun)
1:9343bd4:             throws IOException
1:7374e9b:     {
1:7374e9b:         EncryptionContext context = EncryptionContextGenerator.createContext(true);
1:7374e9b:         CipherFactory cipherFactory = new CipherFactory(context.getTransparentDataEncryptionOptions());
1:7374e9b: 
1:7374e9b:         int plainTextLength = (1 << 13) - 137;
1:7374e9b:         ByteBuffer plainTextBuffer = ByteBuffer.allocate(plainTextLength);
1:7374e9b:         random.nextBytes(plainTextBuffer.array());
1:7374e9b: 
1:7374e9b:         ByteBuffer compressedBuffer = EncryptionUtils.compress(plainTextBuffer, null, true, context.getCompressor());
1:7374e9b:         Cipher cipher = cipherFactory.getEncryptor(context.getTransparentDataEncryptionOptions().cipher, context.getTransparentDataEncryptionOptions().key_alias);
1:7374e9b:         File encryptedFile = File.createTempFile("encrypted-segment-", ".log");
1:7374e9b:         encryptedFile.deleteOnExit();
1:7374e9b:         FileChannel channel = new RandomAccessFile(encryptedFile, "rw").getChannel();
1:7374e9b:         channel.write(ByteBufferUtil.bytes(plainTextLength));
1:7374e9b:         EncryptionUtils.encryptAndWrite(compressedBuffer, channel, true, cipher);
1:7374e9b:         channel.close();
1:7374e9b: 
1:7374e9b:         try (RandomAccessReader reader = RandomAccessReader.open(encryptedFile))
1:7374e9b:         {
1:7374e9b:             context = EncryptionContextGenerator.createContext(cipher.getIV(), true);
1:7374e9b:             EncryptedSegmenter segmenter = new EncryptedSegmenter(reader, context);
1:7374e9b:             SyncSegment syncSegment = segmenter.nextSegment(0, (int) reader.length());
1:7374e9b: 
1:7374e9b:             // EncryptedSegmenter includes the Sync header length in the syncSegment.endPosition (value)
1:7374e9b:             Assert.assertEquals(plainTextLength, syncSegment.endPosition - CommitLogSegment.SYNC_MARKER_SIZE);
1:9343bd4:             ByteBuffer fileBuffer = readFun.apply(syncSegment.input, plainTextLength);
1:7374e9b:             plainTextBuffer.position(0);
1:7374e9b:             Assert.assertEquals(plainTextBuffer, fileBuffer);
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Imran Chaudhry
-------------------------------------------------------------------------------
commit:9343bd4
/////////////////////////////////////////////////////////////////////////
1: import java.util.function.BiFunction;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private ByteBuffer readBytes(FileDataInput input, int len)
1:         try
1:         {
1:             input.readFully(buf);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         return ByteBuffer.wrap(buf);
1:     }
1: 
1:     private ByteBuffer readBytesSeek(FileDataInput input, int len)
1:     {
1:         byte[] buf = new byte[len];
1: 
1:         /// divide output buffer into 5
1:         int[] offsets = new int[] { 0, len / 5, 2 * len / 5, 3 * len / 5, 4 * len / 5, len };
1:         
1:         //seek offset
1:         long inputStart = input.getFilePointer();
1: 
1:         for (int i = 0; i < offsets.length - 1; i++)
1:         {
1:             try
1:             {
1:                 // seek to beginning of offet
1:                 input.seek(inputStart + offsets[i]);
1:                 //read this segment
1:                 input.readFully(buf, offsets[i], offsets[i + 1] - offsets[i]);
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     public void encryptedSegmenterRead() throws IOException
1:     {
1:         underlyingEncryptedSegmenterTest((s, t) -> readBytes(s, t));
1:     }
1: 
1:     @Test
1:     public void encryptedSegmenterSeek() throws IOException
1:     {
1:         underlyingEncryptedSegmenterTest((s, t) -> readBytesSeek(s, t));
1:     }
1: 
1:     public void underlyingEncryptedSegmenterTest(BiFunction<FileDataInput, Integer, ByteBuffer> readFun)
1:             throws IOException
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer fileBuffer = readFun.apply(syncSegment.input, plainTextLength);
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.CompressedSegmenter;
1: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.EncryptedSegmenter;
1: import org.apache.cassandra.db.commitlog.CommitLogSegmentReader.SyncSegment;
author:Michael Kjellman
-------------------------------------------------------------------------------
commit:e06d411
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:         compressedSegmenter(LZ4Compressor.create(Collections.emptyMap()));
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
0: import java.io.DataInput;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.Random;
1: import javax.crypto.Cipher;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.db.commitlog.SegmentReader.CompressedSegmenter;
0: import org.apache.cassandra.db.commitlog.SegmentReader.EncryptedSegmenter;
0: import org.apache.cassandra.db.commitlog.SegmentReader.SyncSegment;
1: import org.apache.cassandra.io.compress.DeflateCompressor;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.compress.LZ4Compressor;
1: import org.apache.cassandra.io.compress.SnappyCompressor;
1: import org.apache.cassandra.io.util.FileDataInput;
1: import org.apache.cassandra.io.util.RandomAccessReader;
1: import org.apache.cassandra.security.CipherFactory;
1: import org.apache.cassandra.security.EncryptionUtils;
1: import org.apache.cassandra.security.EncryptionContext;
1: import org.apache.cassandra.security.EncryptionContextGenerator;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class SegmentReaderTest
1: {
1:     static final Random random = new Random();
1: 
1:     @Test
1:     public void compressedSegmenter_LZ4() throws IOException
1:     {
0:         compressedSegmenter(LZ4Compressor.create(null));
1:     }
1: 
1:     @Test
1:     public void compressedSegmenter_Snappy() throws IOException
1:     {
1:         compressedSegmenter(SnappyCompressor.create(null));
1:     }
1: 
1:     @Test
1:     public void compressedSegmenter_Deflate() throws IOException
1:     {
1:         compressedSegmenter(DeflateCompressor.create(null));
1:     }
1: 
1:     private void compressedSegmenter(ICompressor compressor) throws IOException
1:     {
1:         int rawSize = (1 << 15) - 137;
1:         ByteBuffer plainTextBuffer = compressor.preferredBufferType().allocate(rawSize);
1:         byte[] b = new byte[rawSize];
1:         random.nextBytes(b);
1:         plainTextBuffer.put(b);
1:         plainTextBuffer.flip();
1: 
1:         int uncompressedHeaderSize = 4;  // need to add in the plain text size to the block we write out
1:         int length = compressor.initialCompressedBufferLength(rawSize);
1:         ByteBuffer compBuffer = ByteBufferUtil.ensureCapacity(null, length + uncompressedHeaderSize, true, compressor.preferredBufferType());
1:         compBuffer.putInt(rawSize);
1:         compressor.compress(plainTextBuffer, compBuffer);
1:         compBuffer.flip();
1: 
1:         File compressedFile = File.createTempFile("compressed-segment-", ".log");
1:         compressedFile.deleteOnExit();
1:         FileOutputStream fos = new FileOutputStream(compressedFile);
1:         fos.getChannel().write(compBuffer);
1:         fos.close();
1: 
1:         try (RandomAccessReader reader = RandomAccessReader.open(compressedFile))
1:         {
1:             CompressedSegmenter segmenter = new CompressedSegmenter(compressor, reader);
1:             int fileLength = (int) compressedFile.length();
1:             SyncSegment syncSegment = segmenter.nextSegment(0, fileLength);
1:             FileDataInput fileDataInput = syncSegment.input;
1:             ByteBuffer fileBuffer = readBytes(fileDataInput, rawSize);
1: 
1:             plainTextBuffer.flip();
1:             Assert.assertEquals(plainTextBuffer, fileBuffer);
1: 
1:             // CompressedSegmenter includes the Sync header length in the syncSegment.endPosition (value)
1:             Assert.assertEquals(rawSize, syncSegment.endPosition - CommitLogSegment.SYNC_MARKER_SIZE);
1:         }
1:     }
1: 
0:     private ByteBuffer readBytes(DataInput input, int len) throws IOException
1:     {
1:         byte[] buf = new byte[len];
0:         input.readFully(buf);
1:         return ByteBuffer.wrap(buf);
1:     }
1: 
1:     @Test
0:     public void encryptedSegmenter() throws IOException
1:     {
1:         EncryptionContext context = EncryptionContextGenerator.createContext(true);
1:         CipherFactory cipherFactory = new CipherFactory(context.getTransparentDataEncryptionOptions());
1: 
1:         int plainTextLength = (1 << 13) - 137;
1:         ByteBuffer plainTextBuffer = ByteBuffer.allocate(plainTextLength);
1:         random.nextBytes(plainTextBuffer.array());
1: 
1:         ByteBuffer compressedBuffer = EncryptionUtils.compress(plainTextBuffer, null, true, context.getCompressor());
1:         Cipher cipher = cipherFactory.getEncryptor(context.getTransparentDataEncryptionOptions().cipher, context.getTransparentDataEncryptionOptions().key_alias);
1:         File encryptedFile = File.createTempFile("encrypted-segment-", ".log");
1:         encryptedFile.deleteOnExit();
1:         FileChannel channel = new RandomAccessFile(encryptedFile, "rw").getChannel();
1:         channel.write(ByteBufferUtil.bytes(plainTextLength));
1:         EncryptionUtils.encryptAndWrite(compressedBuffer, channel, true, cipher);
1:         channel.close();
1: 
1:         try (RandomAccessReader reader = RandomAccessReader.open(encryptedFile))
1:         {
1:             context = EncryptionContextGenerator.createContext(cipher.getIV(), true);
1:             EncryptedSegmenter segmenter = new EncryptedSegmenter(reader, context);
1:             SyncSegment syncSegment = segmenter.nextSegment(0, (int) reader.length());
1: 
1:             // EncryptedSegmenter includes the Sync header length in the syncSegment.endPosition (value)
1:             Assert.assertEquals(plainTextLength, syncSegment.endPosition - CommitLogSegment.SYNC_MARKER_SIZE);
0:             ByteBuffer fileBuffer = readBytes(syncSegment.input, plainTextLength);
1:             plainTextBuffer.position(0);
1:             Assert.assertEquals(plainTextBuffer, fileBuffer);
1:         }
1:     }
1: }
============================================================================