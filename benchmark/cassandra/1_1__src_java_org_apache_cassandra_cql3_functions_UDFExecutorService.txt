1:269f078: /*
1:269f078:  * Licensed to the Apache Software Foundation (ASF) under one
1:269f078:  * or more contributor license agreements.  See the NOTICE file
1:269f078:  * distributed with this work for additional information
1:269f078:  * regarding copyright ownership.  The ASF licenses this file
1:269f078:  * to you under the Apache License, Version 2.0 (the
1:269f078:  * "License"); you may not use this file except in compliance
1:269f078:  * with the License.  You may obtain a copy of the License at
1:269f078:  *
1:269f078:  *     http://www.apache.org/licenses/LICENSE-2.0
1:269f078:  *
1:269f078:  * Unless required by applicable law or agreed to in writing, software
1:269f078:  * distributed under the License is distributed on an "AS IS" BASIS,
1:269f078:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:269f078:  * See the License for the specific language governing permissions and
1:269f078:  * limitations under the License.
1:269f078:  */
1:269f078: package org.apache.cassandra.cql3.functions;
1:269f078: 
1:269f078: import java.util.concurrent.LinkedBlockingQueue;
1:269f078: import java.util.concurrent.TimeUnit;
1:269f078: 
1:269f078: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
1:269f078: import org.apache.cassandra.concurrent.NamedThreadFactory;
1:269f078: import org.apache.cassandra.utils.FBUtilities;
1:269f078: 
1:269f078: /**
1:269f078:  * Executor service which exposes stats via JMX, but which doesn't reference
1:269f078:  * internal classes in its beforeExecute & afterExecute methods as these are
1:269f078:  * forbidden by the UDF execution sandbox
1:269f078:  */
1:269f078: final class UDFExecutorService extends JMXEnabledThreadPoolExecutor
1:269f078: {
1:269f078:     private static int KEEPALIVE = Integer.getInteger("cassandra.udf_executor_thread_keepalive_ms", 30000);
1:269f078: 
1:269f078:     UDFExecutorService(NamedThreadFactory threadFactory, String jmxPath)
1:269f078:     {
1:269f078:         super(FBUtilities.getAvailableProcessors(),
1:269f078:               KEEPALIVE,
1:269f078:               TimeUnit.MILLISECONDS,
1:269f078:               new LinkedBlockingQueue<>(),
1:269f078:               threadFactory,
1:269f078:               jmxPath);
1:269f078:     }
1:269f078: 
1:269f078:     protected void afterExecute(Runnable r, Throwable t)
1:269f078:     {
1:269f078:     }
1:269f078: 
1:269f078:     protected void beforeExecute(Thread t, Runnable r)
1:269f078:     {
1:269f078:     }
1:269f078: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:269f078
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
1: import org.apache.cassandra.concurrent.NamedThreadFactory;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * Executor service which exposes stats via JMX, but which doesn't reference
1:  * internal classes in its beforeExecute & afterExecute methods as these are
1:  * forbidden by the UDF execution sandbox
1:  */
1: final class UDFExecutorService extends JMXEnabledThreadPoolExecutor
1: {
1:     private static int KEEPALIVE = Integer.getInteger("cassandra.udf_executor_thread_keepalive_ms", 30000);
1: 
1:     UDFExecutorService(NamedThreadFactory threadFactory, String jmxPath)
1:     {
1:         super(FBUtilities.getAvailableProcessors(),
1:               KEEPALIVE,
1:               TimeUnit.MILLISECONDS,
1:               new LinkedBlockingQueue<>(),
1:               threadFactory,
1:               jmxPath);
1:     }
1: 
1:     protected void afterExecute(Runnable r, Throwable t)
1:     {
1:     }
1: 
1:     protected void beforeExecute(Thread t, Runnable r)
1:     {
1:     }
1: }
============================================================================