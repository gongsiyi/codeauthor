1:9a3fa88: /*
1:9a3fa88:  * Licensed to the Apache Software Foundation (ASF) under one
1:9a3fa88:  * or more contributor license agreements.  See the NOTICE file
1:9a3fa88:  * distributed with this work for additional information
1:9a3fa88:  * regarding copyright ownership.  The ASF licenses this file
1:9a3fa88:  * to you under the Apache License, Version 2.0 (the
1:9a3fa88:  * "License"); you may not use this file except in compliance
1:9a3fa88:  * with the License.  You may obtain a copy of the License at
1:9a3fa88:  *
1:9a3fa88:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9a3fa88:  *
1:9a3fa88:  * Unless required by applicable law or agreed to in writing, software
1:9a3fa88:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a3fa88:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a3fa88:  * See the License for the specific language governing permissions and
1:9a3fa88:  * limitations under the License.
1:9a3fa88:  */
1:9a3fa88: package org.apache.cassandra.dht.tokenallocator;
1:9a3fa88: 
1:9a3fa88: import java.net.InetAddress;
1:9a3fa88: import java.util.Collection;
1:9a3fa88: import java.util.Iterator;
1:9a3fa88: import java.util.List;
1:9a3fa88: import java.util.Map;
1:9a3fa88: import java.util.NavigableMap;
1:9a3fa88: import java.util.TreeMap;
1:9a3fa88: 
1:9a3fa88: import com.google.common.collect.Lists;
1:9a3fa88: import com.google.common.collect.Maps;
1:9a3fa88: 
1:d97695b: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
1:9a3fa88: 
1:9a3fa88: import org.slf4j.Logger;
1:9a3fa88: import org.slf4j.LoggerFactory;
1:9a3fa88: 
1:9a3fa88: import org.apache.cassandra.dht.Token;
1:9a3fa88: import org.apache.cassandra.exceptions.ConfigurationException;
1:9a3fa88: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1:9a3fa88: import org.apache.cassandra.locator.IEndpointSnitch;
1:9a3fa88: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1:9a3fa88: import org.apache.cassandra.locator.SimpleStrategy;
1:9a3fa88: import org.apache.cassandra.locator.TokenMetadata;
1:9a3fa88: import org.apache.cassandra.locator.TokenMetadata.Topology;
1:9a3fa88: 
1:9a3fa88: public class TokenAllocation
1:9a3fa88: {
1:9a3fa88:     private static final Logger logger = LoggerFactory.getLogger(TokenAllocation.class);
1:9a3fa88: 
1:9a3fa88:     public static Collection<Token> allocateTokens(final TokenMetadata tokenMetadata,
1:9a3fa88:                                                    final AbstractReplicationStrategy rs,
1:9a3fa88:                                                    final InetAddress endpoint,
1:9a3fa88:                                                    int numTokens)
1:9a3fa88:     {
1:85ac06c:         TokenMetadata tokenMetadataCopy = tokenMetadata.cloneOnlyTokenMap();
1:85ac06c:         StrategyAdapter strategy = getStrategy(tokenMetadataCopy, rs, endpoint);
1:0a08525:         Collection<Token> tokens = create(tokenMetadata, strategy).addUnit(endpoint, numTokens);
1:9a3fa88:         tokens = adjustForCrossDatacenterClashes(tokenMetadata, strategy, tokens);
1:9a3fa88: 
1:9a3fa88:         if (logger.isWarnEnabled())
1:9a3fa88:         {
1:9a3fa88:             logger.warn("Selected tokens {}", tokens);
1:85ac06c:             SummaryStatistics os = replicatedOwnershipStats(tokenMetadataCopy, rs, endpoint);
1:9a3fa88:             tokenMetadataCopy.updateNormalTokens(tokens, endpoint);
1:9a3fa88:             SummaryStatistics ns = replicatedOwnershipStats(tokenMetadataCopy, rs, endpoint);
1:f147ca9:             logger.warn("Replicated node load in datacentre before allocation {}", statToString(os));
1:f147ca9:             logger.warn("Replicated node load in datacentre after allocation {}", statToString(ns));
1:9a3fa88: 
1:9a3fa88:             // TODO: Is it worth doing the replicated ownership calculation always to be able to raise this alarm?
1:9a3fa88:             if (ns.getStandardDeviation() > os.getStandardDeviation())
1:9a3fa88:                 logger.warn("Unexpected growth in standard deviation after allocation.");
1:9a3fa88:         }
1:9a3fa88:         return tokens;
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     private static Collection<Token> adjustForCrossDatacenterClashes(final TokenMetadata tokenMetadata,
1:9a3fa88:                                                                      StrategyAdapter strategy, Collection<Token> tokens)
1:9a3fa88:     {
1:9a3fa88:         List<Token> filtered = Lists.newArrayListWithCapacity(tokens.size());
1:9a3fa88: 
1:9a3fa88:         for (Token t : tokens)
1:9a3fa88:         {
1:9a3fa88:             while (tokenMetadata.getEndpoint(t) != null)
1:9a3fa88:             {
1:9a3fa88:                 InetAddress other = tokenMetadata.getEndpoint(t);
1:9a3fa88:                 if (strategy.inAllocationRing(other))
1:9a3fa88:                     throw new ConfigurationException(String.format("Allocated token %s already assigned to node %s. Is another node also allocating tokens?", t, other));
1:9a3fa88:                 t = t.increaseSlightly();
1:9a3fa88:             }
1:9a3fa88:             filtered.add(t);
1:9a3fa88:         }
1:9a3fa88:         return filtered;
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     // return the ratio of ownership for each endpoint
1:9a3fa88:     public static Map<InetAddress, Double> evaluateReplicatedOwnership(TokenMetadata tokenMetadata, AbstractReplicationStrategy rs)
1:9a3fa88:     {
1:9a3fa88:         Map<InetAddress, Double> ownership = Maps.newHashMap();
1:9a3fa88:         List<Token> sortedTokens = tokenMetadata.sortedTokens();
1:9a3fa88:         Iterator<Token> it = sortedTokens.iterator();
1:9a3fa88:         Token current = it.next();
1:9a3fa88:         while (it.hasNext())
1:9a3fa88:         {
1:9a3fa88:             Token next = it.next();
1:9a3fa88:             addOwnership(tokenMetadata, rs, current, next, ownership);
1:9a3fa88:             current = next;
1:9a3fa88:         }
1:9a3fa88:         addOwnership(tokenMetadata, rs, current, sortedTokens.get(0), ownership);
1:9a3fa88: 
1:9a3fa88:         return ownership;
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     static void addOwnership(final TokenMetadata tokenMetadata, final AbstractReplicationStrategy rs, Token current, Token next, Map<InetAddress, Double> ownership)
1:9a3fa88:     {
1:9a3fa88:         double size = current.size(next);
1:9a3fa88:         Token representative = current.getPartitioner().midpoint(current, next);
1:9a3fa88:         for (InetAddress n : rs.calculateNaturalEndpoints(representative, tokenMetadata))
1:9a3fa88:         {
1:9a3fa88:             Double v = ownership.get(n);
1:9a3fa88:             ownership.put(n, v != null ? v + size : size);
1:9a3fa88:         }
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     public static String statToString(SummaryStatistics stat)
1:9a3fa88:     {
1:9a3fa88:         return String.format("max %.2f min %.2f stddev %.4f", stat.getMax() / stat.getMean(), stat.getMin() / stat.getMean(), stat.getStandardDeviation());
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     public static SummaryStatistics replicatedOwnershipStats(TokenMetadata tokenMetadata,
1:9a3fa88:                                                              AbstractReplicationStrategy rs, InetAddress endpoint)
1:9a3fa88:     {
1:9a3fa88:         SummaryStatistics stat = new SummaryStatistics();
2:9a3fa88:         StrategyAdapter strategy = getStrategy(tokenMetadata, rs, endpoint);
1:9a3fa88:         for (Map.Entry<InetAddress, Double> en : evaluateReplicatedOwnership(tokenMetadata, rs).entrySet())
1:9a3fa88:         {
1:9a3fa88:             // Filter only in the same datacentre.
1:9a3fa88:             if (strategy.inAllocationRing(en.getKey()))
1:9a3fa88:                 stat.addValue(en.getValue() / tokenMetadata.getTokens(en.getKey()).size());
1:9a3fa88:         }
1:9a3fa88:         return stat;
1:9a3fa88:     }
1:9a3fa88: 
1:0a08525:     static TokenAllocator<InetAddress> create(TokenMetadata tokenMetadata, StrategyAdapter strategy)
1:9a3fa88:     {
1:9a3fa88:         NavigableMap<Token, InetAddress> sortedTokens = new TreeMap<>();
1:9a3fa88:         for (Map.Entry<Token, InetAddress> en : tokenMetadata.getNormalAndBootstrappingTokenToEndpointMap().entrySet())
1:9a3fa88:         {
1:9a3fa88:             if (strategy.inAllocationRing(en.getValue()))
1:9a3fa88:                 sortedTokens.put(en.getKey(), en.getValue());
1:9a3fa88:         }
1:e2a0d75:         return TokenAllocatorFactory.createTokenAllocator(sortedTokens, strategy, tokenMetadata.partitioner);
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     interface StrategyAdapter extends ReplicationStrategy<InetAddress>
1:9a3fa88:     {
1:9a3fa88:         // return true iff the provided endpoint occurs in the same virtual token-ring we are allocating for
1:9a3fa88:         // i.e. the set of the nodes that share ownership with the node we are allocating
1:9a3fa88:         // alternatively: return false if the endpoint's ownership is independent of the node we are allocating tokens for
1:9a3fa88:         boolean inAllocationRing(InetAddress other);
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final AbstractReplicationStrategy rs, final InetAddress endpoint)
1:9a3fa88:     {
1:9a3fa88:         if (rs instanceof NetworkTopologyStrategy)
1:9a3fa88:             return getStrategy(tokenMetadata, (NetworkTopologyStrategy) rs, rs.snitch, endpoint);
1:9a3fa88:         if (rs instanceof SimpleStrategy)
1:9a3fa88:             return getStrategy(tokenMetadata, (SimpleStrategy) rs, endpoint);
1:9a3fa88:         throw new ConfigurationException("Token allocation does not support replication strategy " + rs.getClass().getSimpleName());
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final SimpleStrategy rs, final InetAddress endpoint)
1:9a3fa88:     {
1:9a3fa88:         final int replicas = rs.getReplicationFactor();
1:9a3fa88: 
1:9a3fa88:         return new StrategyAdapter()
1:9a3fa88:         {
1:9a3fa88:             @Override
1:9a3fa88:             public int replicas()
1:9a3fa88:             {
1:9a3fa88:                 return replicas;
1:9a3fa88:             }
1:9a3fa88: 
1:9a3fa88:             @Override
1:9a3fa88:             public Object getGroup(InetAddress unit)
1:9a3fa88:             {
1:9a3fa88:                 return unit;
1:9a3fa88:             }
1:9a3fa88: 
1:9a3fa88:             @Override
1:9a3fa88:             public boolean inAllocationRing(InetAddress other)
1:9a3fa88:             {
1:9a3fa88:                 return true;
1:9a3fa88:             }
1:9a3fa88:         };
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final NetworkTopologyStrategy rs, final IEndpointSnitch snitch, final InetAddress endpoint)
1:9a3fa88:     {
1:9a3fa88:         final String dc = snitch.getDatacenter(endpoint);
1:9a3fa88:         final int replicas = rs.getReplicationFactor(dc);
1:9a3fa88: 
1:9a3fa88:         Topology topology = tokenMetadata.getTopology();
1:9b0adf2:         int racks = topology.getDatacenterRacks().get(dc).asMap().size();
1:9a3fa88: 
1:9b0adf2:         if (racks >= replicas)
1:9a3fa88:         {
1:9a3fa88:             return new StrategyAdapter()
1:9a3fa88:             {
1:9a3fa88:                 @Override
1:9a3fa88:                 public int replicas()
1:9a3fa88:                 {
1:9a3fa88:                     return replicas;
1:9a3fa88:                 }
1:9a3fa88: 
1:9a3fa88:                 @Override
1:9a3fa88:                 public Object getGroup(InetAddress unit)
1:9a3fa88:                 {
1:9a3fa88:                     return snitch.getRack(unit);
1:9a3fa88:                 }
1:9a3fa88: 
1:9a3fa88:                 @Override
1:9a3fa88:                 public boolean inAllocationRing(InetAddress other)
1:9a3fa88:                 {
1:9a3fa88:                     return dc.equals(snitch.getDatacenter(other));
1:9a3fa88:                 }
1:9a3fa88:             };
1:9a3fa88:         }
1:9a3fa88:         else if (racks == 1)
1:9a3fa88:         {
1:9a3fa88:             // One rack, each node treated as separate.
1:9a3fa88:             return new StrategyAdapter()
1:9a3fa88:             {
1:9a3fa88:                 @Override
1:9a3fa88:                 public int replicas()
1:9a3fa88:                 {
1:9a3fa88:                     return replicas;
1:9a3fa88:                 }
1:9a3fa88: 
1:9a3fa88:                 @Override
1:9a3fa88:                 public Object getGroup(InetAddress unit)
1:9a3fa88:                 {
1:9a3fa88:                     return unit;
1:9a3fa88:                 }
1:9a3fa88: 
1:9a3fa88:                 @Override
1:9a3fa88:                 public boolean inAllocationRing(InetAddress other)
1:9a3fa88:                 {
1:9a3fa88:                     return dc.equals(snitch.getDatacenter(other));
1:9a3fa88:                 }
1:9a3fa88:             };
1:9a3fa88:         }
1:9a3fa88:         else
1:9a3fa88:             throw new ConfigurationException(
1:ee6fb19:                     String.format("Token allocation failed: the number of racks %d in datacenter %s is lower than its replication factor %d.",
1:ee6fb19:                                   racks, dc, replicas));
1:9a3fa88:     }
1:9a3fa88: }
1:9a3fa88: 
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:         return TokenAllocatorFactory.createTokenAllocator(sortedTokens, strategy, tokenMetadata.partitioner);
commit:85ac06c
/////////////////////////////////////////////////////////////////////////
1:         TokenMetadata tokenMetadataCopy = tokenMetadata.cloneOnlyTokenMap();
1:         StrategyAdapter strategy = getStrategy(tokenMetadataCopy, rs, endpoint);
1:             SummaryStatistics os = replicatedOwnershipStats(tokenMetadataCopy, rs, endpoint);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:af60ca9
commit:0a08525
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Collection<Token> tokens = create(tokenMetadata, strategy).addUnit(endpoint, numTokens);
/////////////////////////////////////////////////////////////////////////
1:     static TokenAllocator<InetAddress> create(TokenMetadata tokenMetadata, StrategyAdapter strategy)
/////////////////////////////////////////////////////////////////////////
0:         return new ReplicationAwareTokenAllocator<>(sortedTokens, strategy, tokenMetadata.partitioner);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f147ca9
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Replicated node load in datacentre before allocation {}", statToString(os));
1:             logger.warn("Replicated node load in datacentre after allocation {}", statToString(ns));
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:9b0adf2
/////////////////////////////////////////////////////////////////////////
1:         int racks = topology.getDatacenterRacks().get(dc).asMap().size();
1:         if (racks >= replicas)
commit:2954b18
/////////////////////////////////////////////////////////////////////////
0:         int racks = topology.getDatacenterRacks().get(dc).asMap().size();
0:         if (racks >= replicas)
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Collection<Token> tokens = create(tokenMetadata, strategy).addUnit(endpoint, numTokens);
/////////////////////////////////////////////////////////////////////////
0:     static TokenAllocator<InetAddress> create(TokenMetadata tokenMetadata, StrategyAdapter strategy)
/////////////////////////////////////////////////////////////////////////
0:         return new ReplicationAwareTokenAllocator<>(sortedTokens, strategy, tokenMetadata.partitioner);
commit:ee6fb19
/////////////////////////////////////////////////////////////////////////
1:                     String.format("Token allocation failed: the number of racks %d in datacenter %s is lower than its replication factor %d.",
1:                                   racks, dc, replicas));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.IPartitioner;
/////////////////////////////////////////////////////////////////////////
0:                                                    final IPartitioner partitioner,
0:         Collection<Token> tokens = create(tokenMetadata, strategy, partitioner).addUnit(endpoint, numTokens);
/////////////////////////////////////////////////////////////////////////
0:     static TokenAllocator<InetAddress> create(TokenMetadata tokenMetadata, StrategyAdapter strategy, IPartitioner partitioner)
/////////////////////////////////////////////////////////////////////////
0:         return new ReplicationAwareTokenAllocator<>(sortedTokens, strategy, partitioner);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d97695b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht.tokenallocator;
1: 
1: import java.net.InetAddress;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.NavigableMap;
1: import java.util.TreeMap;
1: 
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Maps;
1: 
0: import org.apache.commons.math.stat.descriptive.SummaryStatistics;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1: import org.apache.cassandra.locator.IEndpointSnitch;
1: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.locator.TokenMetadata.Topology;
1: 
1: public class TokenAllocation
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TokenAllocation.class);
1: 
1:     public static Collection<Token> allocateTokens(final TokenMetadata tokenMetadata,
1:                                                    final AbstractReplicationStrategy rs,
0:                                                    final IPartitioner partitioner,
1:                                                    final InetAddress endpoint,
1:                                                    int numTokens)
1:     {
1:         StrategyAdapter strategy = getStrategy(tokenMetadata, rs, endpoint);
0:         Collection<Token> tokens = create(tokenMetadata, strategy, partitioner).addUnit(endpoint, numTokens);
1:         tokens = adjustForCrossDatacenterClashes(tokenMetadata, strategy, tokens);
1: 
1:         if (logger.isWarnEnabled())
1:         {
1:             logger.warn("Selected tokens {}", tokens);
0:             SummaryStatistics os = replicatedOwnershipStats(tokenMetadata, rs, endpoint);
0:             TokenMetadata tokenMetadataCopy = tokenMetadata.cloneOnlyTokenMap();
1:             tokenMetadataCopy.updateNormalTokens(tokens, endpoint);
1:             SummaryStatistics ns = replicatedOwnershipStats(tokenMetadataCopy, rs, endpoint);
0:             logger.warn("Replicated node load in datacentre before allocation " + statToString(os));
0:             logger.warn("Replicated node load in datacentre after allocation " + statToString(ns));
1: 
1:             // TODO: Is it worth doing the replicated ownership calculation always to be able to raise this alarm?
1:             if (ns.getStandardDeviation() > os.getStandardDeviation())
1:                 logger.warn("Unexpected growth in standard deviation after allocation.");
1:         }
1:         return tokens;
1:     }
1: 
1:     private static Collection<Token> adjustForCrossDatacenterClashes(final TokenMetadata tokenMetadata,
1:                                                                      StrategyAdapter strategy, Collection<Token> tokens)
1:     {
1:         List<Token> filtered = Lists.newArrayListWithCapacity(tokens.size());
1: 
1:         for (Token t : tokens)
1:         {
1:             while (tokenMetadata.getEndpoint(t) != null)
1:             {
1:                 InetAddress other = tokenMetadata.getEndpoint(t);
1:                 if (strategy.inAllocationRing(other))
1:                     throw new ConfigurationException(String.format("Allocated token %s already assigned to node %s. Is another node also allocating tokens?", t, other));
1:                 t = t.increaseSlightly();
1:             }
1:             filtered.add(t);
1:         }
1:         return filtered;
1:     }
1: 
1:     // return the ratio of ownership for each endpoint
1:     public static Map<InetAddress, Double> evaluateReplicatedOwnership(TokenMetadata tokenMetadata, AbstractReplicationStrategy rs)
1:     {
1:         Map<InetAddress, Double> ownership = Maps.newHashMap();
1:         List<Token> sortedTokens = tokenMetadata.sortedTokens();
1:         Iterator<Token> it = sortedTokens.iterator();
1:         Token current = it.next();
1:         while (it.hasNext())
1:         {
1:             Token next = it.next();
1:             addOwnership(tokenMetadata, rs, current, next, ownership);
1:             current = next;
1:         }
1:         addOwnership(tokenMetadata, rs, current, sortedTokens.get(0), ownership);
1: 
1:         return ownership;
1:     }
1: 
1:     static void addOwnership(final TokenMetadata tokenMetadata, final AbstractReplicationStrategy rs, Token current, Token next, Map<InetAddress, Double> ownership)
1:     {
1:         double size = current.size(next);
1:         Token representative = current.getPartitioner().midpoint(current, next);
1:         for (InetAddress n : rs.calculateNaturalEndpoints(representative, tokenMetadata))
1:         {
1:             Double v = ownership.get(n);
1:             ownership.put(n, v != null ? v + size : size);
1:         }
1:     }
1: 
1:     public static String statToString(SummaryStatistics stat)
1:     {
1:         return String.format("max %.2f min %.2f stddev %.4f", stat.getMax() / stat.getMean(), stat.getMin() / stat.getMean(), stat.getStandardDeviation());
1:     }
1: 
1:     public static SummaryStatistics replicatedOwnershipStats(TokenMetadata tokenMetadata,
1:                                                              AbstractReplicationStrategy rs, InetAddress endpoint)
1:     {
1:         SummaryStatistics stat = new SummaryStatistics();
1:         StrategyAdapter strategy = getStrategy(tokenMetadata, rs, endpoint);
1:         for (Map.Entry<InetAddress, Double> en : evaluateReplicatedOwnership(tokenMetadata, rs).entrySet())
1:         {
1:             // Filter only in the same datacentre.
1:             if (strategy.inAllocationRing(en.getKey()))
1:                 stat.addValue(en.getValue() / tokenMetadata.getTokens(en.getKey()).size());
1:         }
1:         return stat;
1:     }
1: 
0:     static TokenAllocator<InetAddress> create(TokenMetadata tokenMetadata, StrategyAdapter strategy, IPartitioner partitioner)
1:     {
1:         NavigableMap<Token, InetAddress> sortedTokens = new TreeMap<>();
1:         for (Map.Entry<Token, InetAddress> en : tokenMetadata.getNormalAndBootstrappingTokenToEndpointMap().entrySet())
1:         {
1:             if (strategy.inAllocationRing(en.getValue()))
1:                 sortedTokens.put(en.getKey(), en.getValue());
1:         }
0:         return new ReplicationAwareTokenAllocator<>(sortedTokens, strategy, partitioner);
1:     }
1: 
1:     interface StrategyAdapter extends ReplicationStrategy<InetAddress>
1:     {
1:         // return true iff the provided endpoint occurs in the same virtual token-ring we are allocating for
1:         // i.e. the set of the nodes that share ownership with the node we are allocating
1:         // alternatively: return false if the endpoint's ownership is independent of the node we are allocating tokens for
1:         boolean inAllocationRing(InetAddress other);
1:     }
1: 
1:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final AbstractReplicationStrategy rs, final InetAddress endpoint)
1:     {
1:         if (rs instanceof NetworkTopologyStrategy)
1:             return getStrategy(tokenMetadata, (NetworkTopologyStrategy) rs, rs.snitch, endpoint);
1:         if (rs instanceof SimpleStrategy)
1:             return getStrategy(tokenMetadata, (SimpleStrategy) rs, endpoint);
1:         throw new ConfigurationException("Token allocation does not support replication strategy " + rs.getClass().getSimpleName());
1:     }
1: 
1:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final SimpleStrategy rs, final InetAddress endpoint)
1:     {
1:         final int replicas = rs.getReplicationFactor();
1: 
1:         return new StrategyAdapter()
1:         {
1:             @Override
1:             public int replicas()
1:             {
1:                 return replicas;
1:             }
1: 
1:             @Override
1:             public Object getGroup(InetAddress unit)
1:             {
1:                 return unit;
1:             }
1: 
1:             @Override
1:             public boolean inAllocationRing(InetAddress other)
1:             {
1:                 return true;
1:             }
1:         };
1:     }
1: 
1:     static StrategyAdapter getStrategy(final TokenMetadata tokenMetadata, final NetworkTopologyStrategy rs, final IEndpointSnitch snitch, final InetAddress endpoint)
1:     {
1:         final String dc = snitch.getDatacenter(endpoint);
1:         final int replicas = rs.getReplicationFactor(dc);
1: 
1:         Topology topology = tokenMetadata.getTopology();
0:         int racks = topology.getDatacenterRacks().get(dc).size();
1: 
0:         if (replicas >= racks)
1:         {
1:             return new StrategyAdapter()
1:             {
1:                 @Override
1:                 public int replicas()
1:                 {
1:                     return replicas;
1:                 }
1: 
1:                 @Override
1:                 public Object getGroup(InetAddress unit)
1:                 {
1:                     return snitch.getRack(unit);
1:                 }
1: 
1:                 @Override
1:                 public boolean inAllocationRing(InetAddress other)
1:                 {
1:                     return dc.equals(snitch.getDatacenter(other));
1:                 }
1:             };
1:         }
1:         else if (racks == 1)
1:         {
1:             // One rack, each node treated as separate.
1:             return new StrategyAdapter()
1:             {
1:                 @Override
1:                 public int replicas()
1:                 {
1:                     return replicas;
1:                 }
1: 
1:                 @Override
1:                 public Object getGroup(InetAddress unit)
1:                 {
1:                     return unit;
1:                 }
1: 
1:                 @Override
1:                 public boolean inAllocationRing(InetAddress other)
1:                 {
1:                     return dc.equals(snitch.getDatacenter(other));
1:                 }
1:             };
1:         }
1:         else
1:             throw new ConfigurationException(
0:                                             String.format("Token allocation failed: the number of racks %d in datacentre %s is lower than its replication factor %d.",
0:                                                           replicas, dc, racks));
1:     }
1: }
1: 
============================================================================