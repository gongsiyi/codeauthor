1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair.messages;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.db.TypeSizes;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:eb4fa4a: import org.apache.cassandra.repair.RepairJobDesc;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * ValidationRequest
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public class ValidationRequest extends RepairMessage
1:eb4fa4a: {
1:eb4fa4a:     public static MessageSerializer serializer = new ValidationRequestSerializer();
1:eb4fa4a: 
1:eb4fa4a:     public final int gcBefore;
1:eb4fa4a: 
1:eb4fa4a:     public ValidationRequest(RepairJobDesc desc, int gcBefore)
1:eb4fa4a:     {
1:eb4fa4a:         super(Type.VALIDATION_REQUEST, desc);
1:eb4fa4a:         this.gcBefore = gcBefore;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:e60a06c:     public String toString()
1:e60a06c:     {
1:e60a06c:         return "ValidationRequest{" +
1:e60a06c:                 "gcBefore=" + gcBefore +
1:e60a06c:                 "} " + super.toString();
1:e60a06c:     }
1:e60a06c: 
1:e60a06c:     @Override
1:eb4fa4a:     public boolean equals(Object o)
1:eb4fa4a:     {
1:eb4fa4a:         if (this == o) return true;
1:eb4fa4a:         if (o == null || getClass() != o.getClass()) return false;
1:eb4fa4a: 
1:eb4fa4a:         ValidationRequest that = (ValidationRequest) o;
1:eb4fa4a:         return gcBefore == that.gcBefore;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public int hashCode()
1:eb4fa4a:     {
1:eb4fa4a:         return gcBefore;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public static class ValidationRequestSerializer implements MessageSerializer<ValidationRequest>
1:eb4fa4a:     {
1:75508ec:         public void serialize(ValidationRequest message, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc.serializer.serialize(message.desc, out, version);
1:eb4fa4a:             out.writeInt(message.gcBefore);
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public ValidationRequest deserialize(DataInputPlus dis, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(dis, version);
1:eb4fa4a:             return new ValidationRequest(desc, dis.readInt());
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(ValidationRequest message, int version)
1:eb4fa4a:         {
1:eb4fa4a:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
1:03f72ac:             size += TypeSizes.sizeof(message.gcBefore);
1:eb4fa4a:             return size;
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public ValidationRequest deserialize(DataInputPlus dis, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeof(message.gcBefore);
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e60a06c
/////////////////////////////////////////////////////////////////////////
1:     public String toString()
1:     {
1:         return "ValidationRequest{" +
1:                 "gcBefore=" + gcBefore +
1:                 "} " + super.toString();
1:     }
1: 
1:     @Override
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(ValidationRequest message, DataOutputPlus out, int version) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:66f3014
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.TypeSizes;
0: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.repair.RepairJobDesc;
1: 
1: /**
1:  * ValidationRequest
1:  *
1:  * @since 2.0
1:  */
1: public class ValidationRequest extends RepairMessage
1: {
1:     public static MessageSerializer serializer = new ValidationRequestSerializer();
1: 
1:     public final int gcBefore;
1: 
1:     public ValidationRequest(RepairJobDesc desc, int gcBefore)
1:     {
1:         super(Type.VALIDATION_REQUEST, desc);
1:         this.gcBefore = gcBefore;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         ValidationRequest that = (ValidationRequest) o;
1:         return gcBefore == that.gcBefore;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return gcBefore;
1:     }
1: 
1:     public static class ValidationRequestSerializer implements MessageSerializer<ValidationRequest>
1:     {
0:         public void serialize(ValidationRequest message, DataOutput out, int version) throws IOException
1:         {
1:             RepairJobDesc.serializer.serialize(message.desc, out, version);
1:             out.writeInt(message.gcBefore);
1:         }
1: 
0:         public ValidationRequest deserialize(DataInput dis, int version) throws IOException
1:         {
1:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(dis, version);
1:             return new ValidationRequest(desc, dis.readInt());
1:         }
1: 
1:         public long serializedSize(ValidationRequest message, int version)
1:         {
1:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
0:             size += TypeSizes.NATIVE.sizeof(message.gcBefore);
1:             return size;
1:         }
1:     }
1: }
============================================================================