1:0a08525: /*
1:0a08525:  * Licensed to the Apache Software Foundation (ASF) under one
1:0a08525:  * or more contributor license agreements.  See the NOTICE file
1:0a08525:  * distributed with this work for additional information
1:0a08525:  * regarding copyright ownership.  The ASF licenses this file
1:0a08525:  * to you under the Apache License, Version 2.0 (the
1:0a08525:  * "License"); you may not use this file except in compliance
1:0a08525:  * with the License.  You may obtain a copy of the License at
1:0a08525:  *
1:0a08525:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0a08525:  *
1:0a08525:  * Unless required by applicable law or agreed to in writing, software
1:0a08525:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a08525:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a08525:  * See the License for the specific language governing permissions and
1:0a08525:  * limitations under the License.
1:0a08525:  */
1:0a08525: package org.apache.cassandra.dht;
1:0a08525: 
1:0a08525: import java.math.BigInteger;
1:0a08525: import java.nio.ByteBuffer;
1:0a08525: import java.util.*;
1:47d3b7e: import java.util.concurrent.ThreadLocalRandom;
1:0a08525: 
1:0a08525: import org.apache.cassandra.config.CFMetaData;
1:0a08525: import org.apache.cassandra.config.Schema;
1:0a08525: import org.apache.cassandra.db.BufferDecoratedKey;
1:0a08525: import org.apache.cassandra.db.DecoratedKey;
1:0a08525: import org.apache.cassandra.db.marshal.AbstractType;
1:0a08525: import org.apache.cassandra.db.marshal.IntegerType;
1:0a08525: import org.apache.cassandra.db.marshal.PartitionerDefinedOrder;
1:0a08525: import org.apache.cassandra.dht.KeyCollisionTest.BigIntegerToken;
1:0a08525: import org.apache.cassandra.service.StorageService;
1:0a08525: import org.apache.cassandra.utils.ByteBufferUtil;
1:0a08525: import org.apache.cassandra.utils.FBUtilities;
1:0a08525: import org.apache.cassandra.utils.Pair;
1:0a08525: 
1:0a08525: public class LengthPartitioner implements IPartitioner
1:0a08525: {
1:0a08525:     public static final BigInteger ZERO = new BigInteger("0");
1:0a08525:     public static final BigIntegerToken MINIMUM = new BigIntegerToken("-1");
1:0a08525: 
1:0a08525:     public static LengthPartitioner instance = new LengthPartitioner();
1:0a08525: 
1:0a08525:     public DecoratedKey decorateKey(ByteBuffer key)
1:0a08525:     {
1:0a08525:         return new BufferDecoratedKey(getToken(key), key);
1:0a08525:     }
1:0a08525: 
1:0a08525:     public BigIntegerToken midpoint(Token ltoken, Token rtoken)
1:0a08525:     {
1:0a08525:         // the symbolic MINIMUM token should act as ZERO: the empty bit array
1:0a08525:         BigInteger left = ltoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)ltoken).token;
1:0a08525:         BigInteger right = rtoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)rtoken).token;
1:0a08525:         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(left, right, 127);
1:0a08525:         // discard the remainder
1:0a08525:         return new BigIntegerToken(midpair.left);
1:0a08525:     }
1:0a08525: 
1:e2a0d75:     public Token split(Token left, Token right, double ratioToLeft)
1:e2a0d75:     {
1:e2a0d75:         throw new UnsupportedOperationException();
1:e2a0d75:     }
1:e2a0d75: 
1:0a08525:     public BigIntegerToken getMinimumToken()
1:0a08525:     {
1:0a08525:         return MINIMUM;
1:0a08525:     }
1:0a08525: 
1:e2c6341:     @Override
1:e2c6341:     public Token getMaximumToken()
1:e2c6341:     {
1:e2c6341:         return null;
1:e2c6341:     }
1:e2c6341: 
1:0a08525:     public BigIntegerToken getRandomToken()
1:0a08525:     {
1:47d3b7e:         return getRandomToken(ThreadLocalRandom.current());
1:47d3b7e:     }
1:47d3b7e: 
1:47d3b7e:     public BigIntegerToken getRandomToken(Random random)
1:47d3b7e:     {
1:47d3b7e:         return new BigIntegerToken(BigInteger.valueOf(random.nextInt(15)));
1:0a08525:     }
1:0a08525: 
1:0a08525:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() {
1:0a08525:         public ByteBuffer toByteArray(Token token)
1:0a08525:         {
1:0a08525:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
1:0a08525:             return ByteBuffer.wrap(bigIntegerToken.token.toByteArray());
1:0a08525:         }
1:0a08525: 
1:0a08525:         public Token fromByteArray(ByteBuffer bytes)
1:0a08525:         {
1:0a08525:             return new BigIntegerToken(new BigInteger(ByteBufferUtil.getArray(bytes)));
1:0a08525:         }
1:0a08525: 
1:0a08525:         public String toString(Token token)
1:0a08525:         {
1:0a08525:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
1:0a08525:             return bigIntegerToken.token.toString();
1:0a08525:         }
1:0a08525: 
1:0a08525:         public Token fromString(String string)
1:0a08525:         {
1:0a08525:             return new BigIntegerToken(new BigInteger(string));
1:0a08525:         }
1:0a08525: 
1:0a08525:         public void validate(String token) {}
1:0a08525:     };
1:0a08525: 
1:0a08525:     public Token.TokenFactory getTokenFactory()
1:0a08525:     {
1:0a08525:         return tokenFactory;
1:0a08525:     }
1:0a08525: 
1:0a08525:     public boolean preservesOrder()
1:0a08525:     {
1:0a08525:         return false;
1:0a08525:     }
1:0a08525: 
1:0a08525:     public BigIntegerToken getToken(ByteBuffer key)
1:0a08525:     {
1:0a08525:         if (key.remaining() == 0)
1:0a08525:             return MINIMUM;
1:0a08525:         return new BigIntegerToken(BigInteger.valueOf(key.remaining()));
1:0a08525:     }
1:0a08525: 
1:0a08525:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
1:0a08525:     {
1:0a08525:         // allTokens will contain the count and be returned, sorted_ranges is shorthand for token<->token math.
1:0a08525:         Map<Token, Float> allTokens = new HashMap<Token, Float>();
1:0a08525:         List<Range<Token>> sortedRanges = new ArrayList<Range<Token>>();
1:0a08525: 
1:0a08525:         // this initializes the counts to 0 and calcs the ranges in order.
1:0a08525:         Token lastToken = sortedTokens.get(sortedTokens.size() - 1);
1:0a08525:         for (Token node : sortedTokens)
1:0a08525:         {
1:0a08525:             allTokens.put(node, new Float(0.0));
1:0a08525:             sortedRanges.add(new Range<Token>(lastToken, node));
1:0a08525:             lastToken = node;
1:0a08525:         }
1:0a08525: 
1:0a08525:         for (String ks : Schema.instance.getKeyspaces())
1:0a08525:         {
1:a3a8dbc:             for (CFMetaData cfmd : Schema.instance.getTablesAndViews(ks))
1:0a08525:             {
1:0a08525:                 for (Range<Token> r : sortedRanges)
1:0a08525:                 {
1:0a08525:                     // Looping over every KS:CF:Range, get the splits size and add it to the count
1:0a08525:                     allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
1:0a08525:                 }
1:0a08525:             }
1:0a08525:         }
1:0a08525: 
1:0a08525:         // Sum every count up and divide count/total for the fractional ownership.
1:0a08525:         Float total = new Float(0.0);
1:0a08525:         for (Float f : allTokens.values())
1:0a08525:             total += f;
1:0a08525:         for (Map.Entry<Token, Float> row : allTokens.entrySet())
1:0a08525:             allTokens.put(row.getKey(), row.getValue() / total);
1:0a08525: 
1:0a08525:         return allTokens;
1:0a08525:     }
1:0a08525: 
1:0a08525:     public AbstractType<?> getTokenValidator()
1:0a08525:     {
1:0a08525:         return IntegerType.instance;
1:0a08525:     }
1:0a08525: 
1:0a08525:     public AbstractType<?> partitionOrdering()
1:0a08525:     {
1:0a08525:         return new PartitionerDefinedOrder(this);
1:0a08525:     }
1:0a08525: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:     public Token split(Token left, Token right, double ratioToLeft)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadLocalRandom;
/////////////////////////////////////////////////////////////////////////
1:         return getRandomToken(ThreadLocalRandom.current());
1:     }
1: 
1:     public BigIntegerToken getRandomToken(Random random)
1:     {
1:         return new BigIntegerToken(BigInteger.valueOf(random.nextInt(15)));
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Token getMaximumToken()
1:     {
1:         return null;
1:     }
1: 
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1:             for (CFMetaData cfmd : Schema.instance.getTablesAndViews(ks))
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.math.BigInteger;
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.BufferDecoratedKey;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.IntegerType;
1: import org.apache.cassandra.db.marshal.PartitionerDefinedOrder;
1: import org.apache.cassandra.dht.KeyCollisionTest.BigIntegerToken;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class LengthPartitioner implements IPartitioner
1: {
1:     public static final BigInteger ZERO = new BigInteger("0");
1:     public static final BigIntegerToken MINIMUM = new BigIntegerToken("-1");
1: 
1:     public static LengthPartitioner instance = new LengthPartitioner();
1: 
1:     public DecoratedKey decorateKey(ByteBuffer key)
1:     {
1:         return new BufferDecoratedKey(getToken(key), key);
1:     }
1: 
1:     public BigIntegerToken midpoint(Token ltoken, Token rtoken)
1:     {
1:         // the symbolic MINIMUM token should act as ZERO: the empty bit array
1:         BigInteger left = ltoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)ltoken).token;
1:         BigInteger right = rtoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)rtoken).token;
1:         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(left, right, 127);
1:         // discard the remainder
1:         return new BigIntegerToken(midpair.left);
1:     }
1: 
1:     public BigIntegerToken getMinimumToken()
1:     {
1:         return MINIMUM;
1:     }
1: 
1:     public BigIntegerToken getRandomToken()
1:     {
0:         return new BigIntegerToken(BigInteger.valueOf(new Random().nextInt(15)));
1:     }
1: 
1:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() {
1:         public ByteBuffer toByteArray(Token token)
1:         {
1:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
1:             return ByteBuffer.wrap(bigIntegerToken.token.toByteArray());
1:         }
1: 
1:         public Token fromByteArray(ByteBuffer bytes)
1:         {
1:             return new BigIntegerToken(new BigInteger(ByteBufferUtil.getArray(bytes)));
1:         }
1: 
1:         public String toString(Token token)
1:         {
1:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
1:             return bigIntegerToken.token.toString();
1:         }
1: 
1:         public Token fromString(String string)
1:         {
1:             return new BigIntegerToken(new BigInteger(string));
1:         }
1: 
1:         public void validate(String token) {}
1:     };
1: 
1:     public Token.TokenFactory getTokenFactory()
1:     {
1:         return tokenFactory;
1:     }
1: 
1:     public boolean preservesOrder()
1:     {
1:         return false;
1:     }
1: 
1:     public BigIntegerToken getToken(ByteBuffer key)
1:     {
1:         if (key.remaining() == 0)
1:             return MINIMUM;
1:         return new BigIntegerToken(BigInteger.valueOf(key.remaining()));
1:     }
1: 
1:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
1:     {
1:         // allTokens will contain the count and be returned, sorted_ranges is shorthand for token<->token math.
1:         Map<Token, Float> allTokens = new HashMap<Token, Float>();
1:         List<Range<Token>> sortedRanges = new ArrayList<Range<Token>>();
1: 
1:         // this initializes the counts to 0 and calcs the ranges in order.
1:         Token lastToken = sortedTokens.get(sortedTokens.size() - 1);
1:         for (Token node : sortedTokens)
1:         {
1:             allTokens.put(node, new Float(0.0));
1:             sortedRanges.add(new Range<Token>(lastToken, node));
1:             lastToken = node;
1:         }
1: 
1:         for (String ks : Schema.instance.getKeyspaces())
1:         {
0:             for (CFMetaData cfmd : Schema.instance.getTables(ks))
1:             {
1:                 for (Range<Token> r : sortedRanges)
1:                 {
1:                     // Looping over every KS:CF:Range, get the splits size and add it to the count
1:                     allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
1:                 }
1:             }
1:         }
1: 
1:         // Sum every count up and divide count/total for the fractional ownership.
1:         Float total = new Float(0.0);
1:         for (Float f : allTokens.values())
1:             total += f;
1:         for (Map.Entry<Token, Float> row : allTokens.entrySet())
1:             allTokens.put(row.getKey(), row.getValue() / total);
1: 
1:         return allTokens;
1:     }
1: 
1:     public AbstractType<?> getTokenValidator()
1:     {
1:         return IntegerType.instance;
1:     }
1: 
1:     public AbstractType<?> partitionOrdering()
1:     {
1:         return new PartitionerDefinedOrder(this);
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.dht;
0: 
0: import java.math.BigInteger;
0: import java.nio.ByteBuffer;
0: import java.util.*;
0: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.BufferDecoratedKey;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.db.marshal.IntegerType;
0: import org.apache.cassandra.db.marshal.PartitionerDefinedOrder;
0: import org.apache.cassandra.dht.KeyCollisionTest.BigIntegerToken;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.Pair;
0: 
0: public class LengthPartitioner implements IPartitioner
0: {
0:     public static final BigInteger ZERO = new BigInteger("0");
0:     public static final BigIntegerToken MINIMUM = new BigIntegerToken("-1");
0: 
0:     public static LengthPartitioner instance = new LengthPartitioner();
0: 
0:     public DecoratedKey decorateKey(ByteBuffer key)
0:     {
0:         return new BufferDecoratedKey(getToken(key), key);
0:     }
0: 
0:     public BigIntegerToken midpoint(Token ltoken, Token rtoken)
0:     {
0:         // the symbolic MINIMUM token should act as ZERO: the empty bit array
0:         BigInteger left = ltoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)ltoken).token;
0:         BigInteger right = rtoken.equals(MINIMUM) ? ZERO : ((BigIntegerToken)rtoken).token;
0:         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(left, right, 127);
0:         // discard the remainder
0:         return new BigIntegerToken(midpair.left);
0:     }
0: 
0:     public BigIntegerToken getMinimumToken()
0:     {
0:         return MINIMUM;
0:     }
0: 
0:     public BigIntegerToken getRandomToken()
0:     {
0:         return new BigIntegerToken(BigInteger.valueOf(new Random().nextInt(15)));
0:     }
0: 
0:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() {
0:         public ByteBuffer toByteArray(Token token)
0:         {
0:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
0:             return ByteBuffer.wrap(bigIntegerToken.token.toByteArray());
0:         }
0: 
0:         public Token fromByteArray(ByteBuffer bytes)
0:         {
0:             return new BigIntegerToken(new BigInteger(ByteBufferUtil.getArray(bytes)));
0:         }
0: 
0:         public String toString(Token token)
0:         {
0:             BigIntegerToken bigIntegerToken = (BigIntegerToken) token;
0:             return bigIntegerToken.token.toString();
0:         }
0: 
0:         public Token fromString(String string)
0:         {
0:             return new BigIntegerToken(new BigInteger(string));
0:         }
0: 
0:         public void validate(String token) {}
0:     };
0: 
0:     public Token.TokenFactory getTokenFactory()
0:     {
0:         return tokenFactory;
0:     }
0: 
0:     public boolean preservesOrder()
0:     {
0:         return false;
0:     }
0: 
0:     public BigIntegerToken getToken(ByteBuffer key)
0:     {
0:         if (key.remaining() == 0)
0:             return MINIMUM;
0:         return new BigIntegerToken(BigInteger.valueOf(key.remaining()));
0:     }
0: 
0:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
0:     {
0:         // allTokens will contain the count and be returned, sorted_ranges is shorthand for token<->token math.
0:         Map<Token, Float> allTokens = new HashMap<Token, Float>();
0:         List<Range<Token>> sortedRanges = new ArrayList<Range<Token>>();
0: 
0:         // this initializes the counts to 0 and calcs the ranges in order.
0:         Token lastToken = sortedTokens.get(sortedTokens.size() - 1);
0:         for (Token node : sortedTokens)
0:         {
0:             allTokens.put(node, new Float(0.0));
0:             sortedRanges.add(new Range<Token>(lastToken, node));
0:             lastToken = node;
0:         }
0: 
0:         for (String ks : Schema.instance.getKeyspaces())
0:         {
0:             for (CFMetaData cfmd : Schema.instance.getTables(ks))
0:             {
0:                 for (Range<Token> r : sortedRanges)
0:                 {
0:                     // Looping over every KS:CF:Range, get the splits size and add it to the count
0:                     allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
0:                 }
0:             }
0:         }
0: 
0:         // Sum every count up and divide count/total for the fractional ownership.
0:         Float total = new Float(0.0);
0:         for (Float f : allTokens.values())
0:             total += f;
0:         for (Map.Entry<Token, Float> row : allTokens.entrySet())
0:             allTokens.put(row.getKey(), row.getValue() / total);
0: 
0:         return allTokens;
0:     }
0: 
0:     public AbstractType<?> getTokenValidator()
0:     {
0:         return IntegerType.instance;
0:     }
0: 
0:     public AbstractType<?> partitionOrdering()
0:     {
0:         return new PartitionerDefinedOrder(this);
0:     }
0: }
============================================================================