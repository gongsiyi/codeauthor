1:ccca5f1: /*
1:ccca5f1:  * Licensed to the Apache Software Foundation (ASF) under one
1:ccca5f1:  * or more contributor license agreements.  See the NOTICE file
1:ccca5f1:  * distributed with this work for additional information
1:ccca5f1:  * regarding copyright ownership.  The ASF licenses this file
1:ccca5f1:  * to you under the Apache License, Version 2.0 (the
1:ccca5f1:  * "License"); you may not use this file except in compliance
1:ccca5f1:  * with the License.  You may obtain a copy of the License at
1:ccca5f1:  *
1:ccca5f1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ccca5f1:  *
1:ccca5f1:  * Unless required by applicable law or agreed to in writing, software
1:ccca5f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ccca5f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ccca5f1:  * See the License for the specific language governing permissions and
1:ccca5f1:  * limitations under the License.
1:ccca5f1:  */
1:ccca5f1: package org.apache.cassandra.utils;
1:ccca5f1: 
1:997cb66: import java.nio.ByteBuffer;
1:5fe7097: import java.nio.charset.StandardCharsets;
1:ccca5f1: import java.util.Arrays;
1:5fe7097: 
1:ccca5f1: 
1:ccca5f1: /**
1:ccca5f1:  * The result of the computation of an MD5 digest.
1:ccca5f1:  *
1:ccca5f1:  * A MD5 is really just a byte[] but arrays are a no go as map keys. We could
1:ccca5f1:  * wrap it in a ByteBuffer but:
1:ccca5f1:  *   1. MD5Digest is a more explicit name than ByteBuffer to represent a md5.
1:ccca5f1:  *   2. Using our own class allows to use our FastByteComparison for equals.
1:ccca5f1:  */
1:ccca5f1: public class MD5Digest
3:ccca5f1: {
1:ccca5f1:     public final byte[] bytes;
1:33279dd:     private final int hashCode;
1:ccca5f1: 
1:ccca5f1:     private MD5Digest(byte[] bytes)
1:ccca5f1:     {
1:ccca5f1:         this.bytes = bytes;
1:33279dd:         hashCode = Arrays.hashCode(bytes);
3:ccca5f1:     }
1:ccca5f1: 
1:ccca5f1:     public static MD5Digest wrap(byte[] digest)
1:ccca5f1:     {
1:ccca5f1:         return new MD5Digest(digest);
1:ccca5f1:     }
1:ccca5f1: 
1:ccca5f1:     public static MD5Digest compute(byte[] toHash)
1:ccca5f1:     {
1:ccca5f1:         return new MD5Digest(FBUtilities.threadLocalMD5Digest().digest(toHash));
1:ccca5f1:     }
1:ccca5f1: 
1:ccca5f1:     public static MD5Digest compute(String toHash)
1:4901af6:     {
1:5fe7097:         return compute(toHash.getBytes(StandardCharsets.UTF_8));
1:4901af6:     }
1:ccca5f1: 
1:997cb66:     public ByteBuffer byteBuffer()
1:997cb66:     {
1:997cb66:         return ByteBuffer.wrap(bytes);
1:997cb66:     }
1:997cb66: 
1:ccca5f1:     @Override
1:ccca5f1:     public final int hashCode()
1:4901af6:     {
1:33279dd:         return hashCode;
1:4901af6:     }
1:ccca5f1: 
1:ccca5f1:     @Override
1:ccca5f1:     public final boolean equals(Object o)
1:ccca5f1:     {
1:ccca5f1:         if(!(o instanceof MD5Digest))
1:ccca5f1:             return false;
1:ccca5f1:         MD5Digest that = (MD5Digest)o;
1:ccca5f1:         // handles nulls properly
1:ccca5f1:         return FBUtilities.compareUnsigned(this.bytes, that.bytes, 0, 0, this.bytes.length, that.bytes.length) == 0;
1:ccca5f1:     }
1:ccca5f1: 
1:ccca5f1:     @Override
1:ccca5f1:     public String toString()
1:ccca5f1:     {
1:ccca5f1:         return Hex.bytesToHex(bytes);
1:ccca5f1:     }
1:ccca5f1: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:997cb66
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer byteBuffer()
1:     {
1:         return ByteBuffer.wrap(bytes);
1:     }
1: 
commit:33279dd
/////////////////////////////////////////////////////////////////////////
1:     private final int hashCode;
1:         hashCode = Arrays.hashCode(bytes);
/////////////////////////////////////////////////////////////////////////
1:         return hashCode;
commit:7310c05
/////////////////////////////////////////////////////////////////////////
0:     private final int hashCode;
0:         hashCode = Arrays.hashCode(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return hashCode;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:5fe7097
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return compute(toHash.getBytes(StandardCharsets.UTF_8));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4901af6
/////////////////////////////////////////////////////////////////////////
0: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
0:         try
1:         {
0:             return compute(toHash.getBytes("UTF-8"));
1:         }
0:         catch (UnsupportedEncodingException e)
1:         {
0:             throw new RuntimeException(e.getMessage());
1:         }
commit:ccca5f1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Arrays;
1: 
1: /**
1:  * The result of the computation of an MD5 digest.
1:  *
1:  * A MD5 is really just a byte[] but arrays are a no go as map keys. We could
1:  * wrap it in a ByteBuffer but:
1:  *   1. MD5Digest is a more explicit name than ByteBuffer to represent a md5.
1:  *   2. Using our own class allows to use our FastByteComparison for equals.
1:  */
1: public class MD5Digest
1: {
1:     public final byte[] bytes;
1: 
1:     private MD5Digest(byte[] bytes)
1:     {
1:         this.bytes = bytes;
1:     }
1: 
1:     public static MD5Digest wrap(byte[] digest)
1:     {
1:         return new MD5Digest(digest);
1:     }
1: 
1:     public static MD5Digest compute(byte[] toHash)
1:     {
1:         return new MD5Digest(FBUtilities.threadLocalMD5Digest().digest(toHash));
1:     }
1: 
1:     public static MD5Digest compute(String toHash)
1:     {
0:         return compute(toHash.getBytes());
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
0:         return Arrays.hashCode(bytes);
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof MD5Digest))
1:             return false;
1:         MD5Digest that = (MD5Digest)o;
1:         // handles nulls properly
1:         return FBUtilities.compareUnsigned(this.bytes, that.bytes, 0, 0, this.bytes.length, that.bytes.length) == 0;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return Hex.bytesToHex(bytes);
1:     }
1: }
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:b5b9f71
/////////////////////////////////////////////////////////////////////////
0: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
0:         try
0:         {
0:             return compute(toHash.getBytes("UTF-8"));
0:         }
0:         catch (UnsupportedEncodingException e)
0:         {
0:             throw new RuntimeException(e.getMessage());
0:         }
============================================================================