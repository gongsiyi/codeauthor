1:7f16166: /*
1:7f16166: * Licensed to the Apache Software Foundation (ASF) under one
1:7f16166: * or more contributor license agreements.  See the NOTICE file
1:7f16166: * distributed with this work for additional information
1:7f16166: * regarding copyright ownership.  The ASF licenses this file
1:7f16166: * to you under the Apache License, Version 2.0 (the
1:7f16166: * "License"); you may not use this file except in compliance
1:7f16166: * with the License.  You may obtain a copy of the License at
1:7f16166: *
1:7f16166: *    http://www.apache.org/licenses/LICENSE-2.0
1:7f16166: *
1:7f16166: * Unless required by applicable law or agreed to in writing,
1:7f16166: * software distributed under the License is distributed on an
1:7f16166: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7f16166: * KIND, either express or implied.  See the License for the
1:7f16166: * specific language governing permissions and limitations
1:7f16166: * under the License.
1:7f16166: */
6:c645b11: 
1:d12d2d4: package org.apache.cassandra.db.commitlog;
1:c645b11: 
1:7f16166: import org.junit.Assert;
1:7f16166: import org.junit.BeforeClass;
1:7f16166: import org.junit.Test;
1:7f16166: import org.apache.cassandra.SchemaLoader;
1:7f16166: import org.apache.cassandra.config.Config;
1:7f16166: import org.apache.cassandra.config.DatabaseDescriptor;
1:7f16166: import org.apache.cassandra.db.commitlog.CommitLog;
1:7f16166: import org.apache.cassandra.exceptions.ConfigurationException;
1:7f16166: import org.apache.cassandra.gms.Gossiper;
1:c645b11: import org.apache.cassandra.service.CassandraDaemon;
1:7f16166: import org.apache.cassandra.service.StorageService;
1:7f16166: import org.apache.cassandra.utils.JVMStabilityInspector;
1:7f16166: import org.apache.cassandra.utils.KillerForTests;
1:c645b11: 
1:7f16166: public class CommitLogFailurePolicyTest
4:7f16166: {
1:7f16166:     @BeforeClass
1:7f16166:     public static void defineSchema() throws ConfigurationException
1:7f16166:     {
1:7f16166:         SchemaLoader.prepareServer();
1:7f16166:         System.setProperty("cassandra.commitlog.stop_on_errors", "true");
4:7f16166:     }
1:c645b11: 
1:c645b11:     @Test
1:7f16166:     public void testCommitFailurePolicy_stop() throws ConfigurationException
1:c645b11:     {
1:c645b11:         CassandraDaemon daemon = new CassandraDaemon();
1:c645b11:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:c645b11:         StorageService.instance.registerDaemon(daemon);
1:c645b11: 
1:7f16166:         // Need storage service active so stop policy can shutdown gossip
1:7f16166:         StorageService.instance.initServer();
1:7f16166:         Assert.assertTrue(Gossiper.instance.isEnabled());
1:c645b11: 
2:7f16166:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
2:7f16166:         try
1:7f16166:         {
1:7f16166:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.stop);
1:7f16166:             CommitLog.handleCommitError("Test stop error", new Throwable());
1:7f16166:             Assert.assertFalse(Gossiper.instance.isEnabled());
1:7f16166:         }
2:7f16166:         finally
1:7f16166:         {
2:7f16166:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:7f16166:         }
1:7f16166:     }
1:c645b11: 
2:7f16166:     @Test
1:7f16166:     public void testCommitFailurePolicy_die()
1:7f16166:     {
1:c645b11:         CassandraDaemon daemon = new CassandraDaemon();
1:c645b11:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:c645b11:         StorageService.instance.registerDaemon(daemon);
1:c645b11: 
1:c645b11:         KillerForTests killerForTests = new KillerForTests();
1:c645b11:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:c645b11:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:c645b11:         try
1:c645b11:         {
1:7f16166:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.die);
1:c645b11:             CommitLog.handleCommitError("Testing die policy", new Throwable());
1:c645b11:             Assert.assertTrue(killerForTests.wasKilled());
1:c645b11:             Assert.assertFalse(killerForTests.wasKilledQuietly()); //only killed quietly on startup failure
1:c645b11:         }
1:c645b11:         finally
1:c645b11:         {
1:c645b11:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:c645b11:             JVMStabilityInspector.replaceKiller(originalKiller);
1:c645b11:         }
1:c645b11:     }
1:c645b11: 
1:c645b11:     @Test
1:d2da760:     public void testCommitFailurePolicy_ignore_beforeStartup()
1:c645b11:     {
3:c645b11:         //startup was not completed successfuly (since method completeSetup() was not called)
2:c645b11:         CassandraDaemon daemon = new CassandraDaemon();
2:c645b11:         StorageService.instance.registerDaemon(daemon);
1:c645b11: 
1:c645b11:         KillerForTests killerForTests = new KillerForTests();
1:c645b11:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:c645b11:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:c645b11:         try
1:c645b11:         {
1:d2da760:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:d2da760:             CommitLog.handleCommitError("Testing ignore policy", new Throwable());
1:c645b11:             //even though policy is ignore, JVM must die because Daemon has not finished initializing
1:c645b11:             Assert.assertTrue(killerForTests.wasKilled());
2:c645b11:             Assert.assertTrue(killerForTests.wasKilledQuietly()); //killed quietly due to startup failure
1:c645b11:         }
1:c645b11:         finally
1:c645b11:         {
1:c645b11:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:c645b11:             JVMStabilityInspector.replaceKiller(originalKiller);
1:c645b11:         }
1:c645b11:     }
1:c645b11: 
1:c645b11:     @Test
1:d2da760:     public void testCommitFailurePolicy_ignore_afterStartup() throws Exception
1:c645b11:     {
1:c645b11:         CassandraDaemon daemon = new CassandraDaemon();
1:c645b11:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:c645b11:         StorageService.instance.registerDaemon(daemon);
1:c645b11: 
1:c645b11:         KillerForTests killerForTests = new KillerForTests();
1:c645b11:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:c645b11:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:c645b11:         try
1:c645b11:         {
3:c645b11:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:d2da760:             CommitLog.handleCommitError("Testing ignore policy", new Throwable());
1:c645b11:             //error policy is set to IGNORE, so JVM must not be killed if error ocurs after startup
1:c645b11:             Assert.assertFalse(killerForTests.wasKilled());
1:c645b11:         }
1:c645b11:         finally
1:c645b11:         {
1:c645b11:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:c645b11:             JVMStabilityInspector.replaceKiller(originalKiller);
1:c645b11:         }
1:c645b11:     }
1:7f16166: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d12d2d4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.commitlog;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:d2da760
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testCommitFailurePolicy_ignore_beforeStartup()
/////////////////////////////////////////////////////////////////////////
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:             CommitLog.handleCommitError("Testing ignore policy", new Throwable());
/////////////////////////////////////////////////////////////////////////
1:     public void testCommitFailurePolicy_ignore_afterStartup() throws Exception
1:             CommitLog.handleCommitError("Testing ignore policy", new Throwable());
/////////////////////////////////////////////////////////////////////////
author:Paulo Motta
-------------------------------------------------------------------------------
commit:c645b11
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.commitlog.CommitLogSegmentManager;
1: import org.apache.cassandra.service.CassandraDaemon;
/////////////////////////////////////////////////////////////////////////
1:         CassandraDaemon daemon = new CassandraDaemon();
1:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:         StorageService.instance.registerDaemon(daemon);
1: 
/////////////////////////////////////////////////////////////////////////
1:         CassandraDaemon daemon = new CassandraDaemon();
1:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:         StorageService.instance.registerDaemon(daemon);
1: 
/////////////////////////////////////////////////////////////////////////
1:             Assert.assertFalse(killerForTests.wasKilledQuietly()); //only killed quietly on startup failure
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void testCommitFailurePolicy_mustDieIfNotStartedUp()
1:     {
1:         //startup was not completed successfuly (since method completeSetup() was not called)
1:         CassandraDaemon daemon = new CassandraDaemon();
1:         StorageService.instance.registerDaemon(daemon);
1: 
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             //even though policy is ignore, JVM must die because Daemon has not finished initializing
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:             CommitLog.handleCommitError("Testing die policy", new Throwable());
1:             Assert.assertTrue(killerForTests.wasKilled());
1:             Assert.assertTrue(killerForTests.wasKilledQuietly()); //killed quietly due to startup failure
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:             JVMStabilityInspector.replaceKiller(originalKiller);
1:         }
1:     }
1: 
1:     @Test
0:     public void testCommitLogFailureBeforeInitialization_mustKillJVM() throws Exception
1:     {
1:         //startup was not completed successfuly (since method completeSetup() was not called)
1:         CassandraDaemon daemon = new CassandraDaemon();
1:         StorageService.instance.registerDaemon(daemon);
1: 
0:         //let's make the commit log directory non-writable
0:         File commitLogDir = new File(DatabaseDescriptor.getCommitLogLocation());
0:         commitLogDir.setWritable(false);
1: 
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1: 
0:             //now let's create a commit log segment manager and wait for it to fail
0:             new CommitLogSegmentManager(CommitLog.instance);
1: 
0:             //busy wait since commitlogsegmentmanager spawns another thread
0:             int retries = 0;
0:             while (!killerForTests.wasKilled() && retries++ < 5)
0:                 Thread.sleep(10);
1: 
0:             //since failure was before CassandraDaemon startup, the JVM must be killed
1:             Assert.assertTrue(killerForTests.wasKilled());
1:             Assert.assertTrue(killerForTests.wasKilledQuietly()); //killed quietly due to startup failure
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:             JVMStabilityInspector.replaceKiller(originalKiller);
0:             commitLogDir.setWritable(true);
1:         }
1:     }
1: 
1:     @Test
0:     public void testCommitLogFailureAfterInitialization_mustRespectFailurePolicy() throws Exception
1:     {
1:         //startup was not completed successfuly (since method completeSetup() was not called)
1:         CassandraDaemon daemon = new CassandraDaemon();
1:         daemon.completeSetup(); //startup must be completed, otherwise commit log failure must kill JVM regardless of failure policy
1:         StorageService.instance.registerDaemon(daemon);
1: 
0:         //let's make the commit log directory non-writable
0:         File commitLogDir = new File(DatabaseDescriptor.getCommitLogLocation());
0:         commitLogDir.setWritable(false);
1: 
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1: 
0:             //now let's create a commit log segment manager and wait for it to fail
0:             new CommitLogSegmentManager(CommitLog.instance);
1: 
0:             //wait commit log segment manager thread to execute
0:             Thread.sleep(50);
1: 
1:             //error policy is set to IGNORE, so JVM must not be killed if error ocurs after startup
1:             Assert.assertFalse(killerForTests.wasKilled());
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:             JVMStabilityInspector.replaceKiller(originalKiller);
0:             commitLogDir.setWritable(true);
1:         }
1:     }
author:blambov
-------------------------------------------------------------------------------
commit:7f16166
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
0: 
0: package org.apache.cassandra.db;
0: 
1: import org.junit.Assert;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.commitlog.CommitLog;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: import org.apache.cassandra.utils.KillerForTests;
0: 
1: public class CommitLogFailurePolicyTest
1: {
0: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         System.setProperty("cassandra.commitlog.stop_on_errors", "true");
1:     }
0: 
1:     @Test
1:     public void testCommitFailurePolicy_stop() throws ConfigurationException
1:     {
1:         // Need storage service active so stop policy can shutdown gossip
1:         StorageService.instance.initServer();
1:         Assert.assertTrue(Gossiper.instance.isEnabled());
0: 
1:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.stop);
1:             CommitLog.handleCommitError("Test stop error", new Throwable());
1:             Assert.assertFalse(Gossiper.instance.isEnabled());
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
1:         }
1:     }
0: 
1:     @Test
1:     public void testCommitFailurePolicy_die()
1:     {
0:         KillerForTests killerForTests = new KillerForTests();
0:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:         Config.CommitFailurePolicy oldPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.die);
0:             CommitLog.handleCommitError("Testing die policy", new Throwable());
0:             Assert.assertTrue(killerForTests.wasKilled());
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setCommitFailurePolicy(oldPolicy);
0:             JVMStabilityInspector.replaceKiller(originalKiller);
1:         }
1:     }
1: }
============================================================================