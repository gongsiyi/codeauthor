1:22e18f5: package org.apache.cassandra.concurrent;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
4:22e18f5: 
1:e1bb792: import org.apache.cassandra.Util;
1:4b54b8a: import org.apache.cassandra.utils.concurrent.WaitQueue;
1:22e18f5: import org.junit.*;
1:22e18f5: 
1:e1bb792: import java.util.concurrent.ThreadLocalRandom;
1:22e18f5: import java.util.concurrent.atomic.AtomicBoolean;
1:e1bb792: import java.util.concurrent.atomic.AtomicInteger;
1:22e18f5: 
1:22e18f5: import static org.junit.Assert.*;
1:22e18f5: 
1:22e18f5: public class WaitQueueTest
10:22e18f5: {
1:22e18f5: 
2:22e18f5:     @Test
1:22e18f5:     public void testSerial() throws InterruptedException
1:22e18f5:     {
1:22e18f5:         testSerial(new WaitQueue());
7:22e18f5:     }
1:22e18f5:     public void testSerial(final WaitQueue queue) throws InterruptedException
1:22e18f5:     {
1:e1bb792:         final AtomicInteger ready = new AtomicInteger();
1:22e18f5:         Thread[] ts = new Thread[4];
3:22e18f5:         for (int i = 0 ; i < ts.length ; i++)
1:22e18f5:             ts[i] = new Thread(new Runnable()
1:22e18f5:         {
2:22e18f5:             @Override
2:22e18f5:             public void run()
1:22e18f5:             {
2:22e18f5:                 WaitQueue.Signal wait = queue.register();
1:e1bb792:                 ready.incrementAndGet();
3:22e18f5:                 try
1:22e18f5:                 {
2:22e18f5:                     wait.await();
3:22e18f5:                 } catch (InterruptedException e)
1:22e18f5:                 {
3:22e18f5:                     e.printStackTrace();
1:22e18f5:                 }
1:22e18f5:             }
2:22e18f5:         });
1:e1bb792:         for (Thread t : ts)
1:e1bb792:             t.start();
1:e1bb792:         final ThreadLocalRandom random = ThreadLocalRandom.current();
1:e1bb792:         while (ready.get() < ts.length)
1:e1bb792:             random.nextLong();
1:e1bb792:         for (Thread t : ts)
1:e1bb792:             queue.signal();
1:e1bb792:         for (Thread t : ts)
1:22e18f5:         {
1:e1bb792:             Util.joinThread(t);
1:e1bb792:             assertFalse(queue.getClass().getName(), t.isAlive());
1:22e18f5:         }
1:22e18f5:     }
1:22e18f5: 
1:22e18f5:     @Test
1:e1bb792:     public void testCondition() throws InterruptedException
1:22e18f5:     {
1:e1bb792:         testCondition(new WaitQueue());
1:22e18f5:     }
1:e1bb792:     public void testCondition(final WaitQueue queue) throws InterruptedException
1:22e18f5:     {
1:e1bb792:         final AtomicBoolean ready = new AtomicBoolean(false);
1:22e18f5:         final AtomicBoolean condition = new AtomicBoolean(false);
2:22e18f5:         final AtomicBoolean fail = new AtomicBoolean(false);
1:22e18f5:         Thread t = new Thread(new Runnable()
1:22e18f5:         {
1:22e18f5:             @Override
1:22e18f5:             public void run()
1:22e18f5:             {
1:22e18f5:                 WaitQueue.Signal wait = queue.register();
1:22e18f5:                 if (condition.get())
1:22e18f5:                 {
1:22e18f5:                     System.err.println("");
2:22e18f5:                     fail.set(true);
1:e1bb792:                     ready.set(true);
1:e1bb792:                     return;
1:22e18f5:                 }
1:22e18f5: 
1:e1bb792:                 ready.set(true);
1:e1bb792:                 wait.awaitUninterruptibly();
1:22e18f5:                 if (!condition.get())
1:22e18f5:                 {
1:22e18f5:                     System.err.println("Woke up when condition not met");
1:22e18f5:                     fail.set(true);
1:22e18f5:                 }
1:22e18f5:             }
1:22e18f5:         });
1:22e18f5:         t.start();
1:e1bb792:         final ThreadLocalRandom random = ThreadLocalRandom.current();
1:e1bb792:         while (!ready.get())
1:e1bb792:             random.nextLong();
1:22e18f5:         condition.set(true);
6:22e18f5:         queue.signal();
1:e1bb792:         Util.joinThread(t);
1:22e18f5:         assertFalse(queue.getClass().getName(), t.isAlive());
2:22e18f5:         assertFalse(fail.get());
1:22e18f5:     }
1:22e18f5: 
1:22e18f5: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e1bb792
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.Util;
1: import java.util.concurrent.ThreadLocalRandom;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:         final AtomicInteger ready = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:                 ready.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1:         for (Thread t : ts)
1:             t.start();
1:         final ThreadLocalRandom random = ThreadLocalRandom.current();
1:         while (ready.get() < ts.length)
1:             random.nextLong();
1:         for (Thread t : ts)
1:             queue.signal();
1:         for (Thread t : ts)
1:             Util.joinThread(t);
1:             assertFalse(queue.getClass().getName(), t.isAlive());
1:     public void testCondition() throws InterruptedException
1:         testCondition(new WaitQueue());
1:     public void testCondition(final WaitQueue queue) throws InterruptedException
1:         final AtomicBoolean ready = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:                     ready.set(true);
1:                     return;
1:                 ready.set(true);
1:                 wait.awaitUninterruptibly();
/////////////////////////////////////////////////////////////////////////
1:         final ThreadLocalRandom random = ThreadLocalRandom.current();
1:         while (!ready.get())
1:             random.nextLong();
1:         Util.joinThread(t);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.concurrent.WaitQueue;
commit:22e18f5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
1: 
0: import org.apache.cassandra.utils.WaitQueue;
1: import org.junit.*;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class WaitQueueTest
1: {
1: 
1:     @Test
1:     public void testSerial() throws InterruptedException
1:     {
1:         testSerial(new WaitQueue());
1:     }
1:     public void testSerial(final WaitQueue queue) throws InterruptedException
1:     {
1:         Thread[] ts = new Thread[4];
1:         for (int i = 0 ; i < ts.length ; i++)
1:             ts[i] = new Thread(new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 WaitQueue.Signal wait = queue.register();
1:                 try
1:                 {
1:                     wait.await();
1:                 } catch (InterruptedException e)
1:                 {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         for (int i = 0 ; i < ts.length ; i++)
0:             ts[i].start();
0:         Thread.sleep(100);
1:         queue.signal();
1:         queue.signal();
1:         queue.signal();
1:         queue.signal();
1:         for (int i = 0 ; i < ts.length ; i++)
1:         {
0:             ts[i].join(100);
0:             assertFalse(queue.getClass().getName(), ts[i].isAlive());
1:         }
1:     }
1: 
1: 
1:     @Test
0:     public void testCondition1() throws InterruptedException
1:     {
0:         testCondition1(new WaitQueue());
1:     }
1: 
0:     public void testCondition1(final WaitQueue queue) throws InterruptedException
1:     {
0:         final AtomicBoolean cond1 = new AtomicBoolean(false);
1:         final AtomicBoolean fail = new AtomicBoolean(false);
0:         Thread t1 = new Thread(new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 try
1:                 {
0:                     Thread.sleep(200);
1:                 } catch (InterruptedException e)
1:                 {
1:                     e.printStackTrace();
1:                 }
1:                 WaitQueue.Signal wait = queue.register();
0:                 if (!cond1.get())
1:                 {
0:                     System.err.println("Condition should have already been met");
1:                     fail.set(true);
1:                 }
1:             }
1:         });
0:         t1.start();
0:         Thread.sleep(50);
0:         cond1.set(true);
0:         Thread.sleep(300);
1:         queue.signal();
0:         t1.join(300);
0:         assertFalse(queue.getClass().getName(), t1.isAlive());
1:         assertFalse(fail.get());
1:     }
1: 
1:     @Test
0:     public void testCondition2() throws InterruptedException
1:     {
0:         testCondition2(new WaitQueue());
1:     }
0:     public void testCondition2(final WaitQueue queue) throws InterruptedException
1:     {
1:         final AtomicBoolean condition = new AtomicBoolean(false);
1:         final AtomicBoolean fail = new AtomicBoolean(false);
1:         Thread t = new Thread(new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 WaitQueue.Signal wait = queue.register();
1:                 if (condition.get())
1:                 {
1:                     System.err.println("");
1:                     fail.set(true);
1:                 }
1: 
1:                 try
1:                 {
0:                     Thread.sleep(200);
1:                     wait.await();
1:                 } catch (InterruptedException e)
1:                 {
1:                     e.printStackTrace();
1:                 }
1:                 if (!condition.get())
1:                 {
1:                     System.err.println("Woke up when condition not met");
1:                     fail.set(true);
1:                 }
1:             }
1:         });
1:         t.start();
0:         Thread.sleep(50);
1:         condition.set(true);
1:         queue.signal();
0:         t.join(300);
1:         assertFalse(queue.getClass().getName(), t.isAlive());
1:         assertFalse(fail.get());
1:     }
1: 
1: }
============================================================================