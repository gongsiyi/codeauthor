1:b09e60f: /**
1:b09e60f:  * Licensed to the Apache Software Foundation (ASF) under one
1:b09e60f:  * or more contributor license agreements.  See the NOTICE file
1:b09e60f:  * distributed with this work for additional information
1:b09e60f:  * regarding copyright ownership.  The ASF licenses this file
1:b09e60f:  * to you under the Apache License, Version 2.0 (the
1:b09e60f:  * "License"); you may not use this file except in compliance
1:b09e60f:  * with the License.  You may obtain a copy of the License at
1:b09e60f:  *
1:b09e60f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b09e60f:  *
1:b09e60f:  * Unless required by applicable law or agreed to in writing,
1:b09e60f:  * software distributed under the License is distributed on an
1:b09e60f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b09e60f:  * KIND, either express or implied.  See the License for the
1:b09e60f:  * specific language governing permissions and limitations
1:b09e60f:  * under the License.
1:b09e60f:  */
1:b09e60f: package org.apache.cassandra.tools;
4:b09e60f: 
1:b09e60f: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:b09e60f: import org.apache.cassandra.config.Schema;
1:7eb4647: import org.apache.cassandra.db.ColumnFamilyStore;
1:b09e60f: import org.apache.cassandra.db.Directories;
1:b09e60f: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:b09e60f: import org.apache.cassandra.utils.OutputHandler;
1:b09e60f: import org.apache.commons.cli.*;
1:b09e60f: 
1:b09e60f: import java.io.File;
1:5726625: import java.io.IOException;
1:5726625: import java.util.function.BiFunction;
1:b09e60f: 
1:b09e60f: import static org.apache.cassandra.tools.BulkLoader.CmdLineOptions;
1:b09e60f: 
1:5726625: public class StandaloneSSTableUtil
2:b09e60f: {
1:5726625:     private static final String TOOL_NAME = "sstableutil";
1:b09e60f:     private static final String TYPE_OPTION  = "type";
1:b09e60f:     private static final String OP_LOG_OPTION  = "oplog";
1:b09e60f:     private static final String VERBOSE_OPTION  = "verbose";
1:b09e60f:     private static final String DEBUG_OPTION  = "debug";
1:b09e60f:     private static final String HELP_OPTION  = "help";
1:5726625:     private static final String CLEANUP_OPTION = "cleanup";
1:b09e60f: 
1:b09e60f:     public static void main(String args[])
1:b09e60f:     {
1:b09e60f:         Options options = Options.parseArgs(args);
1:b09e60f:         try
1:b09e60f:         {
1:b09e60f:             // load keyspace descriptions.
1:9797511:             Util.initDatabaseDescriptor();
1:b09e60f:             Schema.instance.loadFromDisk(false);
1:b09e60f: 
1:b09e60f:             CFMetaData metadata = Schema.instance.getCFMetaData(options.keyspaceName, options.cfName);
1:b09e60f:             if (metadata == null)
1:b09e60f:                 throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
1:b09e60f:                                                                  options.keyspaceName,
1:b09e60f:                                                                  options.cfName));
1:b09e60f: 
1:b09e60f:             OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
1:b09e60f: 
1:5726625:             if (options.cleanup)
1:b09e60f:             {
1:5726625:                 handler.output("Cleanuping up...");
1:5726625:                 LifecycleTransaction.removeUnfinishedLeftovers(metadata);
1:5726625:             }
1:5726625:             else
1:5726625:             {
1:5726625:                 handler.output("Listing files...");
1:5726625:                 listFiles(options, metadata, handler);
2:b09e60f:             }
1:b09e60f: 
1:b09e60f:             System.exit(0);
1:b09e60f:         }
1:b09e60f:         catch (Exception e)
1:b09e60f:         {
1:b09e60f:             System.err.println(e.getMessage());
1:b09e60f:             if (options.debug)
1:b09e60f:                 e.printStackTrace(System.err);
1:b09e60f:             System.exit(1);
1:b09e60f:         }
1:b09e60f:     }
1:b09e60f: 
1:5726625:     private static void listFiles(Options options, CFMetaData metadata, OutputHandler handler) throws IOException
1:5726625:     {
1:7eb4647:         Directories directories = new Directories(metadata, ColumnFamilyStore.getInitialDirectories());
1:5726625: 
1:5726625:         for (File dir : directories.getCFDirectories())
1:5726625:         {
1:5726625:             for (File file : LifecycleTransaction.getFiles(dir.toPath(), getFilter(options), Directories.OnTxnErr.THROW))
1:5726625:                 handler.output(file.getCanonicalPath());
1:5726625:         }
1:5726625:     }
1:5726625: 
1:5726625:     private static BiFunction<File, Directories.FileType, Boolean> getFilter(Options options)
1:5726625:     {
1:5726625:         return (file, type) ->
1:5726625:         {
1:5726625:             switch(type)
1:5726625:             {
1:5726625:                 case FINAL:
1:5726625:                     return options.type != Options.FileType.TMP;
1:5726625:                 case TEMPORARY:
1:5726625:                     return options.type != Options.FileType.FINAL;
1:5726625:                 case TXN_LOG:
1:5726625:                     return options.oplogs;
1:5726625:                 default:
1:5726625:                     throw new AssertionError();
1:5726625:             }
1:5726625:         };
1:5726625:     }
1:5726625: 
1:b09e60f:     private static class Options
1:b09e60f:     {
1:b09e60f:         public enum FileType
1:b09e60f:         {
1:b09e60f:             ALL("all", "list all files, final or temporary"),
1:b09e60f:             TMP("tmp", "list temporary files only"),
1:b09e60f:             FINAL("final", "list final files only");
1:b09e60f: 
1:b09e60f:             public String option;
1:b09e60f:             public String descr;
1:b09e60f:             FileType(String option, String descr)
1:b09e60f:             {
1:b09e60f:                 this.option = option;
1:b09e60f:                 this.descr = descr;
1:b09e60f:             }
1:b09e60f: 
1:b09e60f:             static FileType fromOption(String option)
1:b09e60f:             {
1:b09e60f:                 for (FileType fileType : FileType.values())
1:b09e60f:                 {
1:b09e60f:                     if (fileType.option.equals(option))
1:b09e60f:                         return fileType;
1:b09e60f:                 }
1:b09e60f: 
1:b09e60f:                 return FileType.ALL;
1:b09e60f:             }
1:b09e60f: 
1:b09e60f:             static String descr()
1:b09e60f:             {
1:b09e60f:                 StringBuilder str = new StringBuilder();
1:b09e60f:                 for (FileType fileType : FileType.values())
1:b09e60f:                 {
1:b09e60f:                     str.append(fileType.option);
1:b09e60f:                     str.append(" (");
1:b09e60f:                     str.append(fileType.descr);
1:b09e60f:                     str.append("), ");
1:b09e60f:                 }
1:b09e60f:                 return str.toString();
1:b09e60f:             }
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         public final String keyspaceName;
1:b09e60f:         public final String cfName;
1:b09e60f: 
1:b09e60f:         public boolean debug;
1:b09e60f:         public boolean verbose;
1:b09e60f:         public boolean oplogs;
1:5726625:         public boolean cleanup;
1:b09e60f:         public FileType type;
1:b09e60f: 
1:b09e60f:         private Options(String keyspaceName, String cfName)
1:b09e60f:         {
1:b09e60f:             this.keyspaceName = keyspaceName;
1:b09e60f:             this.cfName = cfName;
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         public static Options parseArgs(String cmdArgs[])
1:b09e60f:         {
1:b09e60f:             CommandLineParser parser = new GnuParser();
1:b09e60f:             CmdLineOptions options = getCmdLineOptions();
1:b09e60f:             try
1:b09e60f:             {
1:b09e60f:                 CommandLine cmd = parser.parse(options, cmdArgs, false);
1:b09e60f: 
1:b09e60f:                 if (cmd.hasOption(HELP_OPTION))
1:b09e60f:                 {
1:b09e60f:                     printUsage(options);
1:b09e60f:                     System.exit(0);
1:b09e60f:                 }
1:b09e60f: 
1:b09e60f:                 String[] args = cmd.getArgs();
1:b09e60f:                 if (args.length != 2)
1:b09e60f:                 {
1:b09e60f:                     String msg = args.length < 2 ? "Missing arguments" : "Too many arguments";
1:b09e60f:                     System.err.println(msg);
1:b09e60f:                     printUsage(options);
1:b09e60f:                     System.exit(1);
1:b09e60f:                 }
1:b09e60f: 
1:b09e60f:                 String keyspaceName = args[0];
1:b09e60f:                 String cfName = args[1];
1:b09e60f: 
1:b09e60f:                 Options opts = new Options(keyspaceName, cfName);
1:b09e60f: 
1:b09e60f:                 opts.debug = cmd.hasOption(DEBUG_OPTION);
1:b09e60f:                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);
1:b09e60f:                 opts.type = FileType.fromOption(cmd.getOptionValue(TYPE_OPTION));
1:b09e60f:                 opts.oplogs = cmd.hasOption(OP_LOG_OPTION);
1:5726625:                 opts.cleanup = cmd.hasOption(CLEANUP_OPTION);
1:b09e60f: 
1:b09e60f:                 return opts;
1:b09e60f:             }
1:b09e60f:             catch (ParseException e)
1:b09e60f:             {
1:b09e60f:                 errorMsg(e.getMessage(), options);
1:b09e60f:                 return null;
1:b09e60f:             }
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         private static void errorMsg(String msg, CmdLineOptions options)
1:b09e60f:         {
1:b09e60f:             System.err.println(msg);
1:b09e60f:             printUsage(options);
1:b09e60f:             System.exit(1);
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         private static CmdLineOptions getCmdLineOptions()
1:b09e60f:         {
1:b09e60f:             CmdLineOptions options = new CmdLineOptions();
1:5726625:             options.addOption("c", CLEANUP_OPTION, "clean-up any outstanding transactions");
1:b09e60f:             options.addOption("d", DEBUG_OPTION, "display stack traces");
1:b09e60f:             options.addOption("h", HELP_OPTION, "display this help message");
1:b09e60f:             options.addOption("o", OP_LOG_OPTION, "include operation logs");
1:b09e60f:             options.addOption("t", TYPE_OPTION, true, FileType.descr());
1:b09e60f:             options.addOption("v", VERBOSE_OPTION, "verbose output");
1:b09e60f: 
1:b09e60f:             return options;
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         public static void printUsage(CmdLineOptions options)
1:b09e60f:         {
1:b09e60f:             String usage = String.format("%s [options] <keyspace> <column_family>", TOOL_NAME);
1:b09e60f:             StringBuilder header = new StringBuilder();
1:b09e60f:             header.append("--\n");
1:b09e60f:             header.append("List sstable files for the provided table." );
1:b09e60f:             header.append("\n--\n");
1:b09e60f:             header.append("Options are:");
1:b09e60f:             new HelpFormatter().printHelp(usage, header.toString(), options, "");
1:b09e60f:         }
1:b09e60f:     }
1:b09e60f: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:             Util.initDatabaseDescriptor();
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:7eb4647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ColumnFamilyStore;
/////////////////////////////////////////////////////////////////////////
1:         Directories directories = new Directories(metadata, ColumnFamilyStore.getInitialDirectories());
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:5726625
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.function.BiFunction;
1: public class StandaloneSSTableUtil
1:     private static final String TOOL_NAME = "sstableutil";
1:     private static final String CLEANUP_OPTION = "cleanup";
/////////////////////////////////////////////////////////////////////////
1:             if (options.cleanup)
1:                 handler.output("Cleanuping up...");
1:                 LifecycleTransaction.removeUnfinishedLeftovers(metadata);
1:             }
1:             else
1:             {
1:                 handler.output("Listing files...");
1:                 listFiles(options, metadata, handler);
/////////////////////////////////////////////////////////////////////////
1:     private static void listFiles(Options options, CFMetaData metadata, OutputHandler handler) throws IOException
1:     {
0:         Directories directories = new Directories(metadata);
1: 
1:         for (File dir : directories.getCFDirectories())
1:         {
1:             for (File file : LifecycleTransaction.getFiles(dir.toPath(), getFilter(options), Directories.OnTxnErr.THROW))
1:                 handler.output(file.getCanonicalPath());
1:         }
1:     }
1: 
1:     private static BiFunction<File, Directories.FileType, Boolean> getFilter(Options options)
1:     {
1:         return (file, type) ->
1:         {
1:             switch(type)
1:             {
1:                 case FINAL:
1:                     return options.type != Options.FileType.TMP;
1:                 case TEMPORARY:
1:                     return options.type != Options.FileType.FINAL;
1:                 case TXN_LOG:
1:                     return options.oplogs;
1:                 default:
1:                     throw new AssertionError();
1:             }
1:         };
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         public boolean cleanup;
/////////////////////////////////////////////////////////////////////////
1:                 opts.cleanup = cmd.hasOption(CLEANUP_OPTION);
/////////////////////////////////////////////////////////////////////////
1:             options.addOption("c", CLEANUP_OPTION, "clean-up any outstanding transactions");
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Directories;
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1: import org.apache.cassandra.utils.OutputHandler;
1: import org.apache.commons.cli.*;
1: 
1: import java.io.File;
1: 
1: import static org.apache.cassandra.tools.BulkLoader.CmdLineOptions;
1: 
0: public class StandaloneLister
1: {
0:     private static final String TOOL_NAME = "sstablelister";
1:     private static final String TYPE_OPTION  = "type";
1:     private static final String OP_LOG_OPTION  = "oplog";
1:     private static final String VERBOSE_OPTION  = "verbose";
1:     private static final String DEBUG_OPTION  = "debug";
1:     private static final String HELP_OPTION  = "help";
1: 
1:     public static void main(String args[])
1:     {
1:         Options options = Options.parseArgs(args);
1:         try
1:         {
1:             // load keyspace descriptions.
1:             Schema.instance.loadFromDisk(false);
1: 
1:             CFMetaData metadata = Schema.instance.getCFMetaData(options.keyspaceName, options.cfName);
1:             if (metadata == null)
1:                 throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
1:                                                                  options.keyspaceName,
1:                                                                  options.cfName));
1: 
1:             OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
1: 
0:             Directories directories = new Directories(metadata);
0:             Directories.SSTableLister lister = directories.sstableLister();
1: 
0:             if (options.type == Options.FileType.FINAL)
0:                 lister.skipTemporary(true);
0:             else if (options.type == Options.FileType.TMP)
0:                 lister.onlyTemporary(true);
1: 
0:             for (File file : lister.listFiles())
0:                handler.output(file.getCanonicalPath());
1: 
0:             if (options.oplogs)
1:             {
0:                 for (File file : LifecycleTransaction.getLogFiles(metadata))
1:                 {
0:                     handler.output(file.getCanonicalPath());
1:                 }
1:             }
1: 
1:             System.exit(0);
1:         }
1:         catch (Exception e)
1:         {
1:             System.err.println(e.getMessage());
1:             if (options.debug)
1:                 e.printStackTrace(System.err);
1:             System.exit(1);
1:         }
1:     }
1: 
1:     private static class Options
1:     {
1:         public enum FileType
1:         {
1:             ALL("all", "list all files, final or temporary"),
1:             TMP("tmp", "list temporary files only"),
1:             FINAL("final", "list final files only");
1: 
1:             public String option;
1:             public String descr;
1:             FileType(String option, String descr)
1:             {
1:                 this.option = option;
1:                 this.descr = descr;
1:             }
1: 
1:             static FileType fromOption(String option)
1:             {
1:                 for (FileType fileType : FileType.values())
1:                 {
1:                     if (fileType.option.equals(option))
1:                         return fileType;
1:                 }
1: 
1:                 return FileType.ALL;
1:             }
1: 
1:             static String descr()
1:             {
1:                 StringBuilder str = new StringBuilder();
1:                 for (FileType fileType : FileType.values())
1:                 {
1:                     str.append(fileType.option);
1:                     str.append(" (");
1:                     str.append(fileType.descr);
1:                     str.append("), ");
1:                 }
1:                 return str.toString();
1:             }
1:         }
1: 
1:         public final String keyspaceName;
1:         public final String cfName;
1: 
1:         public boolean debug;
1:         public boolean verbose;
1:         public boolean oplogs;
1:         public FileType type;
1: 
1:         private Options(String keyspaceName, String cfName)
1:         {
1:             this.keyspaceName = keyspaceName;
1:             this.cfName = cfName;
1:         }
1: 
1:         public static Options parseArgs(String cmdArgs[])
1:         {
1:             CommandLineParser parser = new GnuParser();
1:             CmdLineOptions options = getCmdLineOptions();
1:             try
1:             {
1:                 CommandLine cmd = parser.parse(options, cmdArgs, false);
1: 
1:                 if (cmd.hasOption(HELP_OPTION))
1:                 {
1:                     printUsage(options);
1:                     System.exit(0);
1:                 }
1: 
1:                 String[] args = cmd.getArgs();
1:                 if (args.length != 2)
1:                 {
1:                     String msg = args.length < 2 ? "Missing arguments" : "Too many arguments";
1:                     System.err.println(msg);
1:                     printUsage(options);
1:                     System.exit(1);
1:                 }
1: 
1:                 String keyspaceName = args[0];
1:                 String cfName = args[1];
1: 
1:                 Options opts = new Options(keyspaceName, cfName);
1: 
1:                 opts.debug = cmd.hasOption(DEBUG_OPTION);
1:                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);
1:                 opts.type = FileType.fromOption(cmd.getOptionValue(TYPE_OPTION));
1:                 opts.oplogs = cmd.hasOption(OP_LOG_OPTION);
1: 
1:                 return opts;
1:             }
1:             catch (ParseException e)
1:             {
1:                 errorMsg(e.getMessage(), options);
1:                 return null;
1:             }
1:         }
1: 
1:         private static void errorMsg(String msg, CmdLineOptions options)
1:         {
1:             System.err.println(msg);
1:             printUsage(options);
1:             System.exit(1);
1:         }
1: 
1:         private static CmdLineOptions getCmdLineOptions()
1:         {
1:             CmdLineOptions options = new CmdLineOptions();
1:             options.addOption("d", DEBUG_OPTION, "display stack traces");
1:             options.addOption("h", HELP_OPTION, "display this help message");
1:             options.addOption("o", OP_LOG_OPTION, "include operation logs");
1:             options.addOption("t", TYPE_OPTION, true, FileType.descr());
1:             options.addOption("v", VERBOSE_OPTION, "verbose output");
1: 
1:             return options;
1:         }
1: 
1:         public static void printUsage(CmdLineOptions options)
1:         {
1:             String usage = String.format("%s [options] <keyspace> <column_family>", TOOL_NAME);
1:             StringBuilder header = new StringBuilder();
1:             header.append("--\n");
1:             header.append("List sstable files for the provided table." );
1:             header.append("\n--\n");
1:             header.append("Options are:");
1:             new HelpFormatter().printHelp(usage, header.toString(), options, "");
1:         }
1:     }
1: }
============================================================================