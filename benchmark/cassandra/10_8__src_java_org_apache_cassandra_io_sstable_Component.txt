1:b324537: /*
1:b324537:  * Licensed to the Apache Software Foundation (ASF) under one
1:b324537:  * or more contributor license agreements.  See the NOTICE file
1:b324537:  * distributed with this work for additional information
1:b324537:  * regarding copyright ownership.  The ASF licenses this file
1:b324537:  * to you under the Apache License, Version 2.0 (the
1:b324537:  * "License"); you may not use this file except in compliance
1:b324537:  * with the License.  You may obtain a copy of the License at
3:b324537:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b324537:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:b324537:  */
1:b324537: package org.apache.cassandra.io.sstable;
3:b324537: 
1:b324537: import java.io.File;
1:b324537: import java.util.EnumSet;
1:72790dc: import java.util.regex.Pattern;
1:b324537: 
1:b324537: import com.google.common.base.Objects;
1:b324537: 
1:0600d7d: import org.apache.cassandra.utils.ChecksumType;
1:b324537: import org.apache.cassandra.utils.Pair;
1:b324537: 
1:b324537: /**
1:b324537:  * SSTables are made up of multiple components in separate files. Components are
1:b324537:  * identified by a type and an id, but required unique components (such as the Data
1:b324537:  * and Index files) may have implicit ids assigned to them.
1:b324537:  */
1:b324537: public class Component
3:b324537: {
1:db2d62c:     public static final char separator = '-';
1:db2d62c: 
1:b324537:     final static EnumSet<Type> TYPES = EnumSet.allOf(Type.class);
1:0600d7d: 
1:312ca13:     public enum Type
1:b324537:     {
1:b324537:         // the base data for an sstable: the remaining components can be regenerated
1:b324537:         // based on the data component
1:b324537:         DATA("Data.db"),
1:b324537:         // index of the row keys with pointers to their positions in the data file
1:b324537:         PRIMARY_INDEX("Index.db"),
1:b324537:         // serialized bloom filter for the row keys in the sstable
1:b324537:         FILTER("Filter.db"),
1:1ecabe6:         // file to hold information about uncompressed data length, chunk offsets etc.
1:1ecabe6:         COMPRESSION_INFO("CompressionInfo.db"),
1:b324537:         // statistical metadata about the content of the sstable
1:b324537:         STATS("Statistics.db"),
1:2d7909d:         // holds adler32 checksum of the data file
1:0600d7d:         DIGEST("Digest.crc32", "Digest.adler32", "Digest.sha1"),
1:639b314:         // holds the CRC32 for chunks in an a uncompressed file.
1:639b314:         CRC("CRC.db"),
1:dc24122:         // holds SSTable Index Summary (sampling of Index component)
1:312ca13:         SUMMARY("Summary.db"),
1:312ca13:         // table of contents, stores the list of all components for the sstable
1:312ca13:         TOC("TOC.txt"),
1:72790dc:         // built-in secondary index (may be multiple per sstable)
1:72790dc:         SECONDARY_INDEX("SI_.*.db"),
1:312ca13:         // custom component, used by e.g. custom compaction strategy
1:5baf28d:         CUSTOM(new String[] { null });
1:0600d7d:         
1:5baf28d:         final String[] repr;
1:b324537:         Type(String repr)
1:b324537:         {
1:5baf28d:             this(new String[] { repr });
1:5baf28d:         }
1:5baf28d: 
1:0600d7d:         Type(String... repr)
1:5baf28d:         {
1:b324537:             this.repr = repr;
3:b324537:         }
1:b324537: 
1:b324537:         static Type fromRepresentation(String repr)
1:b324537:         {
1:b324537:             for (Type type : TYPES)
1:72790dc:             {
1:72790dc:                 if (type.repr == null || type.repr.length == 0 || type.repr[0] == null)
1:72790dc:                     continue;
1:72790dc:                 if (Pattern.matches(type.repr[0], repr))
1:72790dc:                     return type;
1:72790dc:             }
1:312ca13:             return CUSTOM;
1:b324537:         }
1:b324537:     }
1:b324537: 
1:b324537:     // singleton components for types that don't need ids
1:312ca13:     public final static Component DATA = new Component(Type.DATA);
1:312ca13:     public final static Component PRIMARY_INDEX = new Component(Type.PRIMARY_INDEX);
1:312ca13:     public final static Component FILTER = new Component(Type.FILTER);
1:312ca13:     public final static Component COMPRESSION_INFO = new Component(Type.COMPRESSION_INFO);
1:312ca13:     public final static Component STATS = new Component(Type.STATS);
1:0600d7d:     private static final String digestCrc32 = "Digest.crc32";
1:0600d7d:     private static final String digestAdler32 = "Digest.adler32";
1:0600d7d:     private static final String digestSha1 = "Digest.sha1";
1:0600d7d:     public final static Component DIGEST_CRC32 = new Component(Type.DIGEST, digestCrc32);
1:0600d7d:     public final static Component DIGEST_ADLER32 = new Component(Type.DIGEST, digestAdler32);
1:0600d7d:     public final static Component DIGEST_SHA1 = new Component(Type.DIGEST, digestSha1);
1:639b314:     public final static Component CRC = new Component(Type.CRC);
1:312ca13:     public final static Component SUMMARY = new Component(Type.SUMMARY);
1:312ca13:     public final static Component TOC = new Component(Type.TOC);
1:b324537: 
1:0600d7d:     public static Component digestFor(ChecksumType checksumType)
1:0600d7d:     {
1:0600d7d:         switch (checksumType)
1:0600d7d:         {
1:0600d7d:             case Adler32:
1:0600d7d:                 return DIGEST_ADLER32;
1:0600d7d:             case CRC32:
1:0600d7d:                 return DIGEST_CRC32;
1:0600d7d:         }
1:0600d7d:         throw new AssertionError();
1:0600d7d:     }
1:0600d7d: 
1:b324537:     public final Type type;
1:312ca13:     public final String name;
1:b324537:     public final int hashCode;
1:b324537: 
1:b324537:     public Component(Type type)
1:b324537:     {
1:5baf28d:         this(type, type.repr[0]);
1:0600d7d:         assert type.repr.length == 1;
1:312ca13:         assert type != Type.CUSTOM;
1:b324537:     }
1:b324537: 
1:312ca13:     public Component(Type type, String name)
1:b324537:     {
1:312ca13:         assert name != null : "Component name cannot be null";
1:b324537:         this.type = type;
1:312ca13:         this.name = name;
1:312ca13:         this.hashCode = Objects.hashCode(type, name);
1:b324537:     }
1:b324537: 
1:b324537:     /**
1:b324537:      * @return The unique (within an sstable) name for this component.
1:b324537:      */
1:b324537:     public String name()
1:b324537:     {
1:312ca13:         return name;
1:b324537:     }
1:b324537: 
1:b324537:     /**
1:222ea95:      * {@code
1:b324537:      * Filename of the form "<ksname>/<cfname>-[tmp-][<version>-]<gen>-<component>",
1:222ea95:      * }
1:b324537:      * @return A Descriptor for the SSTable, and a Component for this particular file.
1:b324537:      * TODO move descriptor into Component field
1:b324537:      */
1:b324537:     public static Pair<Descriptor,Component> fromFilename(File directory, String name)
1:b324537:     {
1:b324537:         Pair<Descriptor,String> path = Descriptor.fromFilename(directory, name);
1:b324537: 
1:b324537:         // parse the component suffix
1:eaca534:         Type type = Type.fromRepresentation(path.right);
1:b324537:         // build (or retrieve singleton for) the component object
1:b324537:         Component component;
2:b324537:         switch(type)
1:b324537:         {
1:312ca13:             case DATA:              component = Component.DATA;                         break;
1:312ca13:             case PRIMARY_INDEX:     component = Component.PRIMARY_INDEX;                break;
1:312ca13:             case FILTER:            component = Component.FILTER;                       break;
1:312ca13:             case COMPRESSION_INFO:  component = Component.COMPRESSION_INFO;             break;
1:312ca13:             case STATS:             component = Component.STATS;                        break;
1:0600d7d:             case DIGEST:            switch (path.right)
1:0600d7d:                                     {
1:0600d7d:                                         case digestCrc32:   component = Component.DIGEST_CRC32;     break;
1:0600d7d:                                         case digestAdler32: component = Component.DIGEST_ADLER32;   break;
1:0600d7d:                                         case digestSha1:    component = Component.DIGEST_SHA1;      break;
1:0600d7d:                                         default:            throw new IllegalArgumentException("Invalid digest component " + path.right);
1:0600d7d:                                     }
1:0600d7d:                                     break;
1:639b314:             case CRC:               component = Component.CRC;                          break;
1:639b314:             case SUMMARY:           component = Component.SUMMARY;                      break;
1:312ca13:             case TOC:               component = Component.TOC;                          break;
1:72790dc:             case SECONDARY_INDEX:   component = new Component(Type.SECONDARY_INDEX, path.right); break;
1:312ca13:             case CUSTOM:            component = new Component(Type.CUSTOM, path.right); break;
1:b324537:             default:
2:b324537:                  throw new IllegalStateException();
1:b324537:         }
1:b324537: 
1:7af7eb3:         return Pair.create(path.left, component);
1:b324537:     }
1:b324537: 
1:b324537:     @Override
1:b324537:     public String toString()
1:b324537:     {
1:b324537:         return this.name();
1:b324537:     }
1:b324537: 
1:b324537:     @Override
1:b324537:     public boolean equals(Object o)
1:b324537:     {
1:b324537:         if (o == this)
1:b324537:             return true;
1:b324537:         if (!(o instanceof Component))
1:b324537:             return false;
1:b324537:         Component that = (Component)o;
1:312ca13:         return this.type == that.type && this.name.equals(that.name);
1:b324537:     }
1:b324537: 
1:b324537:     @Override
1:b324537:     public int hashCode()
1:b324537:     {
1:b324537:         return hashCode;
1:b324537:     }
1:b324537: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:         // built-in secondary index (may be multiple per sstable)
1:         SECONDARY_INDEX("SI_.*.db"),
/////////////////////////////////////////////////////////////////////////
1:             {
1:                 if (type.repr == null || type.repr.length == 0 || type.repr[0] == null)
1:                     continue;
1:                 if (Pattern.matches(type.repr[0], repr))
1:                     return type;
1:             }
/////////////////////////////////////////////////////////////////////////
1:             case SECONDARY_INDEX:   component = new Component(Type.SECONDARY_INDEX, path.right); break;
commit:0487418
/////////////////////////////////////////////////////////////////////////
0:         DIGEST("Digest.sha1"),
0:         // holds SSTable Index Summary and Boundaries
0:         SUMMARY("Summary.db");
/////////////////////////////////////////////////////////////////////////
0:     public final static Component SUMMARY = new Component(Type.SUMMARY, -1);
/////////////////////////////////////////////////////////////////////////
0:             case SUMMARY:           component = Component.SUMMARY;          break;
commit:db2d62c
/////////////////////////////////////////////////////////////////////////
1:     public static final char separator = '-';
1: 
/////////////////////////////////////////////////////////////////////////
0:                 return String.format("%d%c%s", id, separator, type.repr);
/////////////////////////////////////////////////////////////////////////
0:         int separatorPos = repr.indexOf(separator);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0600d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ChecksumType;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         DIGEST("Digest.crc32", "Digest.adler32", "Digest.sha1"),
/////////////////////////////////////////////////////////////////////////
1:         
1:         Type(String... repr)
/////////////////////////////////////////////////////////////////////////
1:     private static final String digestCrc32 = "Digest.crc32";
1:     private static final String digestAdler32 = "Digest.adler32";
1:     private static final String digestSha1 = "Digest.sha1";
1:     public final static Component DIGEST_CRC32 = new Component(Type.DIGEST, digestCrc32);
1:     public final static Component DIGEST_ADLER32 = new Component(Type.DIGEST, digestAdler32);
1:     public final static Component DIGEST_SHA1 = new Component(Type.DIGEST, digestSha1);
1:     public static Component digestFor(ChecksumType checksumType)
1:     {
1:         switch (checksumType)
1:         {
1:             case Adler32:
1:                 return DIGEST_ADLER32;
1:             case CRC32:
1:                 return DIGEST_CRC32;
1:         }
1:         throw new AssertionError();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         assert type.repr.length == 1;
/////////////////////////////////////////////////////////////////////////
1:             case DIGEST:            switch (path.right)
1:                                     {
1:                                         case digestCrc32:   component = Component.DIGEST_CRC32;     break;
1:                                         case digestAdler32: component = Component.DIGEST_ADLER32;   break;
1:                                         case digestSha1:    component = Component.DIGEST_SHA1;      break;
1:                                         default:            throw new IllegalArgumentException("Invalid digest component " + path.right);
1:                                     }
1:                                     break;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
0:         DIGEST(new String[] { "Digest.crc32", "Digest.adler32" }),
/////////////////////////////////////////////////////////////////////////
1:         CUSTOM(new String[] { null });
1:         final String[] repr;
1:             this(new String[] { repr });
1:         }
1: 
0:         Type(String[] repr)
1:         {
0:                 for (String representation : type.repr)
0:                     if (repr.equals(representation))
0:                         return type;
/////////////////////////////////////////////////////////////////////////
1:         this(type, type.repr[0]);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:2d7909d
/////////////////////////////////////////////////////////////////////////
1:         // holds adler32 checksum of the data file
0:         DIGEST("Digest.adler32"),
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b25adc7
/////////////////////////////////////////////////////////////////////////
0:         // holds sha1 sum of the data file (to be checked by sha1sum)
0:         DIGEST("Digest.sha1"),
commit:e9a6783
commit:dc24122
/////////////////////////////////////////////////////////////////////////
1:         // holds SSTable Index Summary (sampling of Index component)
commit:312ca13
/////////////////////////////////////////////////////////////////////////
1:     public enum Type
/////////////////////////////////////////////////////////////////////////
1:         SUMMARY("Summary.db"),
1:         // table of contents, stores the list of all components for the sstable
1:         TOC("TOC.txt"),
1:         // custom component, used by e.g. custom compaction strategy
0:         CUSTOM(null);
/////////////////////////////////////////////////////////////////////////
1:             return CUSTOM;
1:     public final static Component DATA = new Component(Type.DATA);
1:     public final static Component PRIMARY_INDEX = new Component(Type.PRIMARY_INDEX);
1:     public final static Component FILTER = new Component(Type.FILTER);
0:     public final static Component COMPACTED_MARKER = new Component(Type.COMPACTED_MARKER);
1:     public final static Component COMPRESSION_INFO = new Component(Type.COMPRESSION_INFO);
1:     public final static Component STATS = new Component(Type.STATS);
0:     public final static Component DIGEST = new Component(Type.DIGEST);
1:     public final static Component SUMMARY = new Component(Type.SUMMARY);
1:     public final static Component TOC = new Component(Type.TOC);
1:     public final String name;
0:         this(type, type.repr);
1:         assert type != Type.CUSTOM;
1:     public Component(Type type, String name)
1:         assert name != null : "Component name cannot be null";
1:         this.name = name;
1:         this.hashCode = Objects.hashCode(type, name);
/////////////////////////////////////////////////////////////////////////
1:         return name;
/////////////////////////////////////////////////////////////////////////
1:             case DATA:              component = Component.DATA;                         break;
1:             case PRIMARY_INDEX:     component = Component.PRIMARY_INDEX;                break;
1:             case FILTER:            component = Component.FILTER;                       break;
0:             case COMPACTED_MARKER:  component = Component.COMPACTED_MARKER;             break;
1:             case COMPRESSION_INFO:  component = Component.COMPRESSION_INFO;             break;
1:             case STATS:             component = Component.STATS;                        break;
0:             case DIGEST:            component = Component.DIGEST;                       break;
1:             case TOC:               component = Component.TOC;                          break;
1:             case CUSTOM:            component = new Component(Type.CUSTOM, path.right); break;
/////////////////////////////////////////////////////////////////////////
1:         return this.type == that.type && this.name.equals(that.name);
commit:880334b
/////////////////////////////////////////////////////////////////////////
0:     enum Type
/////////////////////////////////////////////////////////////////////////
0:         SUMMARY("Summary.db");
/////////////////////////////////////////////////////////////////////////
0:             throw new RuntimeException("Invalid SSTable component: '" + repr + "'");
0:     public final static Component DATA = new Component(Type.DATA, -1);
0:     public final static Component PRIMARY_INDEX = new Component(Type.PRIMARY_INDEX, -1);
0:     public final static Component FILTER = new Component(Type.FILTER, -1);
0:     public final static Component COMPACTED_MARKER = new Component(Type.COMPACTED_MARKER, -1);
0:     public final static Component COMPRESSION_INFO = new Component(Type.COMPRESSION_INFO, -1);
0:     public final static Component STATS = new Component(Type.STATS, -1);
0:     public final static Component DIGEST = new Component(Type.DIGEST, -1);
0:     public final static Component SUMMARY = new Component(Type.SUMMARY, -1);
0:     public final int id;
0:         this(type, -1);
0:     public Component(Type type, int id)
0:         this.id = id;
0:         this.hashCode = Objects.hashCode(type, id);
/////////////////////////////////////////////////////////////////////////
0:         return type.repr;
/////////////////////////////////////////////////////////////////////////
0:             case DATA:              component = Component.DATA;             break;
0:             case PRIMARY_INDEX:     component = Component.PRIMARY_INDEX;    break;
0:             case FILTER:            component = Component.FILTER;           break;
0:             case COMPACTED_MARKER:  component = Component.COMPACTED_MARKER; break;
0:             case COMPRESSION_INFO:  component = Component.COMPRESSION_INFO; break;
0:             case STATS:             component = Component.STATS;            break;
0:             case DIGEST:            component = Component.DIGEST;           break;
/////////////////////////////////////////////////////////////////////////
0:         return this.type == that.type && this.id == that.id;
commit:5eb9e1c
/////////////////////////////////////////////////////////////////////////
0:     public enum Type
/////////////////////////////////////////////////////////////////////////
0:         SUMMARY("Summary.db"),
0:         // table of contents, stores the list of all components for the sstable
0:         TOC("TOC.txt"),
0:         // custom component, used by e.g. custom compaction strategy
0:         CUSTOM(null);
/////////////////////////////////////////////////////////////////////////
0:             return CUSTOM;
0:     public final static Component DATA = new Component(Type.DATA);
0:     public final static Component PRIMARY_INDEX = new Component(Type.PRIMARY_INDEX);
0:     public final static Component FILTER = new Component(Type.FILTER);
0:     public final static Component COMPACTED_MARKER = new Component(Type.COMPACTED_MARKER);
0:     public final static Component COMPRESSION_INFO = new Component(Type.COMPRESSION_INFO);
0:     public final static Component STATS = new Component(Type.STATS);
0:     public final static Component DIGEST = new Component(Type.DIGEST);
0:     public final static Component SUMMARY = new Component(Type.SUMMARY);
0:     public final static Component TOC = new Component(Type.TOC);
0:     public final String name;
0:         this(type, type.repr);
0:         assert type != Type.CUSTOM;
0:     public Component(Type type, String name)
0:         assert name != null : "Component name cannot be null";
0:         this.name = name;
0:         this.hashCode = Objects.hashCode(type, name);
/////////////////////////////////////////////////////////////////////////
0:         return name;
/////////////////////////////////////////////////////////////////////////
0:             case DATA:              component = Component.DATA;                         break;
0:             case PRIMARY_INDEX:     component = Component.PRIMARY_INDEX;                break;
0:             case FILTER:            component = Component.FILTER;                       break;
0:             case COMPACTED_MARKER:  component = Component.COMPACTED_MARKER;             break;
0:             case COMPRESSION_INFO:  component = Component.COMPRESSION_INFO;             break;
0:             case STATS:             component = Component.STATS;                        break;
0:             case DIGEST:            component = Component.DIGEST;                       break;
0:             case TOC:               component = Component.TOC;                          break;
0:             case CUSTOM:            component = new Component(Type.CUSTOM, path.right); break;
/////////////////////////////////////////////////////////////////////////
0:         return this.type == that.type && this.name.equals(that.name);
commit:7af7eb3
/////////////////////////////////////////////////////////////////////////
1:         return Pair.create(path.left, component);
commit:eaca534
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return type.repr;
/////////////////////////////////////////////////////////////////////////
1:         Type type = Type.fromRepresentation(path.right);
/////////////////////////////////////////////////////////////////////////
commit:b324537
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.io.File;
1: import java.util.EnumSet;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.utils.Pair;
1: 
1: /**
1:  * SSTables are made up of multiple components in separate files. Components are
1:  * identified by a type and an id, but required unique components (such as the Data
1:  * and Index files) may have implicit ids assigned to them.
1:  */
1: public class Component
1: {
1:     final static EnumSet<Type> TYPES = EnumSet.allOf(Type.class);
0:     enum Type
1:     {
1:         // the base data for an sstable: the remaining components can be regenerated
1:         // based on the data component
1:         DATA("Data.db"),
1:         // index of the row keys with pointers to their positions in the data file
1:         PRIMARY_INDEX("Index.db"),
1:         // serialized bloom filter for the row keys in the sstable
1:         FILTER("Filter.db"),
0:         // 0-length file that is created when an sstable is ready to be deleted
0:         COMPACTED_MARKER("Compacted"),
1:         // statistical metadata about the content of the sstable
1:         STATS("Statistics.db"),
0:         // a bitmap secondary index: many of these may exist per sstable
0:         BITMAP_INDEX("Bitidx.db");
1: 
0:         final String repr;
1:         Type(String repr)
1:         {
1:             this.repr = repr;
1:         }
1:         
1:         static Type fromRepresentation(String repr)
1:         {
1:             for (Type type : TYPES)
0:                 if (repr.equals(type.repr))
0:                     return type;
0:             throw new RuntimeException("Invalid SSTable component: '" + repr + "'");
1:         }
1:     }
1: 
1:     // singleton components for types that don't need ids
0:     public final static Component DATA = new Component(Type.DATA, -1);
0:     public final static Component PRIMARY_INDEX = new Component(Type.PRIMARY_INDEX, -1);
0:     public final static Component FILTER = new Component(Type.FILTER, -1);
0:     public final static Component COMPACTED_MARKER = new Component(Type.COMPACTED_MARKER, -1);
0:     public final static Component STATS = new Component(Type.STATS, -1);
1: 
1:     public final Type type;
0:     public final int id;
1:     public final int hashCode;
1: 
1:     public Component(Type type)
1:     {
0:         this(type, -1);
1:     }
1: 
0:     public Component(Type type, int id)
1:     {
1:         this.type = type;
0:         this.id = id;
0:         this.hashCode = Objects.hashCode(type, id);
1:     }
1: 
1:     /**
1:      * @return The unique (within an sstable) name for this component.
1:      */
1:     public String name()
1:     {
1:         switch(type)
1:         {
0:             case DATA:
0:             case PRIMARY_INDEX:
0:             case FILTER:
0:             case COMPACTED_MARKER:
0:             case STATS:
0:                 return type.repr;
0:             case BITMAP_INDEX:
0:                 return String.format("%d-%s", id, type.repr);
1:         }
1:         throw new IllegalStateException();
1:     }
1: 
1:     /**
1:      * Filename of the form "<ksname>/<cfname>-[tmp-][<version>-]<gen>-<component>",
0:      * where <component> is of the form "[<id>-]<component>".
1:      * @return A Descriptor for the SSTable, and a Component for this particular file.
1:      * TODO move descriptor into Component field
1:      */
1:     public static Pair<Descriptor,Component> fromFilename(File directory, String name)
1:     {
1:         Pair<Descriptor,String> path = Descriptor.fromFilename(directory, name);
1: 
1:         // parse the component suffix
0:         String repr = path.right;
0:         int id = -1;
0:         int separatorPos = repr.indexOf('-');
0:         if (separatorPos != -1)
1:         {
0:             id = Integer.parseInt(repr.substring(0, separatorPos));
0:             repr = repr.substring(separatorPos+1, repr.length());
1:         }
0:         Type type = Type.fromRepresentation(repr);
1:         // build (or retrieve singleton for) the component object
1:         Component component;
1:         switch(type)
1:         {
0:             case DATA:              component = Component.DATA;             break;
0:             case PRIMARY_INDEX:     component = Component.PRIMARY_INDEX;    break;
0:             case FILTER:            component = Component.FILTER;           break;
0:             case COMPACTED_MARKER:  component = Component.COMPACTED_MARKER; break;
0:             case STATS:             component = Component.STATS;            break;
0:             case BITMAP_INDEX:
0:                  component = new Component(type, id);
0:                  break;
1:             default:
1:                  throw new IllegalStateException();
1:         }
1: 
0:         return new Pair<Descriptor,Component>(path.left, component);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return this.name();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (o == this)
1:             return true;
1:         if (!(o instanceof Component))
1:             return false;
1:         Component that = (Component)o;
0:         return this.type == that.type && this.id == that.id;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return hashCode;
1:     }
1: }
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:21bdf87
/////////////////////////////////////////////////////////////////////////
0:         // holds adler32 checksum of the data file
0:         DIGEST("Digest.adler32"),
author:Dave Brosius
-------------------------------------------------------------------------------
commit:222ea95
/////////////////////////////////////////////////////////////////////////
1:      * {@code
1:      * }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f388c9d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:639b314
/////////////////////////////////////////////////////////////////////////
1:         // holds the CRC32 for chunks in an a uncompressed file.
1:         CRC("CRC.db"),
/////////////////////////////////////////////////////////////////////////
1:     public final static Component CRC = new Component(Type.CRC);
/////////////////////////////////////////////////////////////////////////
1:             case CRC:               component = Component.CRC;                          break;
1:             case SUMMARY:           component = Component.SUMMARY;                      break;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:111f6c9
commit:6a6b7ec
/////////////////////////////////////////////////////////////////////////
0:         // @deprecated: deletion of compacted file is based on the lineag information stored in the compacted sstabl
0:         // metadata. This ensure we can guarantee never using a sstable and some of its parents, even in case of failure.
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:b47233b
/////////////////////////////////////////////////////////////////////////
0:         BITMAP_INDEX("Bitidx.db"),
0:         // holds sha1 sum of the data file (to be checked by sha1sum)
0:         DIGEST("Digest.sha1");
/////////////////////////////////////////////////////////////////////////
0:     public final static Component DIGEST = new Component(Type.DIGEST, -1);
/////////////////////////////////////////////////////////////////////////
0:             case DIGEST:
/////////////////////////////////////////////////////////////////////////
0:             case DIGEST:            component = Component.DIGEST;           break;
commit:1ecabe6
/////////////////////////////////////////////////////////////////////////
1:         // file to hold information about uncompressed data length, chunk offsets etc.
1:         COMPRESSION_INFO("CompressionInfo.db"),
/////////////////////////////////////////////////////////////////////////
0:     public final static Component COMPRESSION_INFO = new Component(Type.COMPRESSION_INFO, -1);
/////////////////////////////////////////////////////////////////////////
0:             case COMPRESSION_INFO:
/////////////////////////////////////////////////////////////////////////
0:             case COMPRESSION_INFO:  component = Component.COMPRESSION_INFO; break;
============================================================================