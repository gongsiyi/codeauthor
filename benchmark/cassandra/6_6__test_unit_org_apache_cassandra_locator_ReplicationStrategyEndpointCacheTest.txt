1:34e241a: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:34e241a: package org.apache.cassandra.locator;
1:34e241a: 
1:34e241a: import java.net.InetAddress;
1:a991b64: import java.util.ArrayList;
1:a991b64: import java.util.HashMap;
1:a991b64: import java.util.List;
1:a991b64: import java.util.Map;
1:6af5726: 
1:bffd9ea: import org.apache.commons.lang3.StringUtils;
1:d2a3827: import org.junit.BeforeClass;
1:34e241a: import org.junit.Test;
1:34e241a: 
1:34e241a: import org.apache.cassandra.SchemaLoader;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:07893d7: import org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken;
1:34e241a: import org.apache.cassandra.dht.Token;
1:a991b64: import org.apache.cassandra.exceptions.ConfigurationException;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:34e241a: 
1:d2a3827: public class ReplicationStrategyEndpointCacheTest
1:34e241a: {
1:34e241a:     private TokenMetadata tmd;
1:34e241a:     private Token searchToken;
1:34e241a:     private AbstractReplicationStrategy strategy;
1:d2a3827:     public static final String KEYSPACE = "ReplicationStrategyEndpointCacheTest";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws Exception
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE,
1:31e3f61:                                     KeyspaceParams.simple(5));
1:d2a3827:     }
1:34e241a: 
1:df8a933:     public void setup(Class stratClass, Map<String, String> strategyOptions) throws Exception
1:34e241a:     {
1:34e241a:         tmd = new TokenMetadata();
1:34e241a:         searchToken = new BigIntegerToken(String.valueOf(15));
1:34e241a: 
1:d2a3827:         strategy = getStrategyWithNewTokenMetadata(Keyspace.open(KEYSPACE).getReplicationStrategy(), tmd);
1:34e241a: 
1:34e241a:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(10)), InetAddress.getByName("127.0.0.1"));
1:34e241a:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(20)), InetAddress.getByName("127.0.0.2"));
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(30)), InetAddress.getByName("127.0.0.3"));
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(40)), InetAddress.getByName("127.0.0.4"));
1:0789a58:         //tmd.updateNormalToken(new BigIntegerToken(String.valueOf(50)), InetAddress.getByName("127.0.0.5"));
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(60)), InetAddress.getByName("127.0.0.6"));
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(70)), InetAddress.getByName("127.0.0.7"));
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(80)), InetAddress.getByName("127.0.0.8"));
1:34e241a:     }
1:34e241a: 
1:34e241a:     @Test
1:34e241a:     public void testEndpointsWereCached() throws Exception
1:34e241a:     {
1:916c810:         runEndpointsWereCachedTest(FakeSimpleStrategy.class, null);
1:916c810:         runEndpointsWereCachedTest(FakeOldNetworkTopologyStrategy.class, null);
1:916c810:         runEndpointsWereCachedTest(FakeNetworkTopologyStrategy.class, new HashMap<String, String>());
1:34e241a:     }
1:34e241a: 
1:df8a933:     public void runEndpointsWereCachedTest(Class stratClass, Map<String, String> configOptions) throws Exception
1:34e241a:     {
1:df8a933:         setup(stratClass, configOptions);
1:df8a933:         assert strategy.getNaturalEndpoints(searchToken).equals(strategy.getNaturalEndpoints(searchToken));
1:34e241a:     }
1:34e241a: 
1:34e241a:     @Test
1:34e241a:     public void testCacheRespectsTokenChanges() throws Exception
1:34e241a:     {
1:916c810:         runCacheRespectsTokenChangesTest(SimpleStrategy.class, null);
1:916c810:         runCacheRespectsTokenChangesTest(OldNetworkTopologyStrategy.class, null);
1:916c810:         runCacheRespectsTokenChangesTest(NetworkTopologyStrategy.class, new HashMap<String, String>());
1:34e241a:     }
1:34e241a: 
1:df8a933:     public void runCacheRespectsTokenChangesTest(Class stratClass, Map<String, String> configOptions) throws Exception
1:34e241a:     {
1:df8a933:         setup(stratClass, configOptions);
1:0789a58:         ArrayList<InetAddress> initial;
1:34e241a:         ArrayList<InetAddress> endpoints;
1:34e241a: 
1:df8a933:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:34e241a: 
1:0789a58:         // test token addition, in DC2 before existing token
1:df8a933:         initial = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(35)), InetAddress.getByName("127.0.0.5"));
1:df8a933:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:0789a58:         assert !endpoints.equals(initial);
1:34e241a: 
1:0789a58:         // test token removal, newly created token
1:df8a933:         initial = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         tmd.removeEndpoint(InetAddress.getByName("127.0.0.5"));
1:df8a933:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:0789a58:         assert !endpoints.contains(InetAddress.getByName("127.0.0.5"));
1:0789a58:         assert !endpoints.equals(initial);
1:34e241a: 
1:34e241a:         // test token change
1:df8a933:         initial = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         //move .8 after search token but before other DC3
1:0789a58:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(25)), InetAddress.getByName("127.0.0.8"));
1:df8a933:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:0789a58:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:0789a58:         assert !endpoints.equals(initial);
1:34e241a:     }
1:34e241a: 
1:916c810:     protected static class FakeSimpleStrategy extends SimpleStrategy
1:34e241a:     {
1:34e241a:         private boolean called = false;
1:34e241a: 
1:0e96e58:         public FakeSimpleStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:34e241a:         {
1:0e96e58:             super(keyspaceName, tokenMetadata, snitch, configOptions);
1:34e241a:         }
1:34e241a: 
1:bf0087f:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:34e241a:         {
1:34e241a:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:34e241a:             called = true;
1:df8a933:             return super.calculateNaturalEndpoints(token, metadata);
1:34e241a:         }
1:34e241a:     }
1:34e241a: 
1:916c810:     protected static class FakeOldNetworkTopologyStrategy extends OldNetworkTopologyStrategy
1:34e241a:     {
1:34e241a:         private boolean called = false;
1:34e241a: 
1:0e96e58:         public FakeOldNetworkTopologyStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:34e241a:         {
1:0e96e58:             super(keyspaceName, tokenMetadata, snitch, configOptions);
1:34e241a:         }
1:34e241a: 
1:bf0087f:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:34e241a:         {
1:34e241a:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:34e241a:             called = true;
1:df8a933:             return super.calculateNaturalEndpoints(token, metadata);
1:34e241a:         }
1:34e241a:     }
1:34e241a: 
1:916c810:     protected static class FakeNetworkTopologyStrategy extends NetworkTopologyStrategy
1:34e241a:     {
1:34e241a:         private boolean called = false;
1:34e241a: 
1:0e96e58:         public FakeNetworkTopologyStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions) throws ConfigurationException
1:34e241a:         {
1:0e96e58:             super(keyspaceName, tokenMetadata, snitch, configOptions);
1:34e241a:         }
1:34e241a: 
1:bf0087f:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:34e241a:         {
1:34e241a:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:34e241a:             called = true;
1:df8a933:             return super.calculateNaturalEndpoints(token, metadata);
1:34e241a:         }
1:34e241a:     }
1:34e241a: 
1:df8a933:     private AbstractReplicationStrategy getStrategyWithNewTokenMetadata(AbstractReplicationStrategy strategy, TokenMetadata newTmd) throws ConfigurationException
1:df8a933:     {
1:df8a933:         return AbstractReplicationStrategy.createReplicationStrategy(
1:0e96e58:                                                                     strategy.keyspaceName,
1:a991b64:                                                                     AbstractReplicationStrategy.getClass(strategy.getClass().getName()),
1:a991b64:                                                                     newTmd,
1:a991b64:                                                                     strategy.snitch,
1:a991b64:                                                                     strategy.configOptions);
1:34e241a:     }
1:df8a933: 
1:df8a933: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(5));
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
0:         strategy = getStrategyWithNewTokenMetadata(Keyspace.open("Keyspace3").getReplicationStrategy(), tmd);
/////////////////////////////////////////////////////////////////////////
1:         public FakeSimpleStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:             super(keyspaceName, tokenMetadata, snitch, configOptions);
/////////////////////////////////////////////////////////////////////////
1:         public FakeOldNetworkTopologyStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:             super(keyspaceName, tokenMetadata, snitch, configOptions);
/////////////////////////////////////////////////////////////////////////
1:         public FakeNetworkTopologyStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions) throws ConfigurationException
1:             super(keyspaceName, tokenMetadata, snitch, configOptions);
/////////////////////////////////////////////////////////////////////////
1:                 strategy.keyspaceName,
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0:                                                                     strategy.keyspaceName,
1:                                                                     AbstractReplicationStrategy.getClass(strategy.getClass().getName()),
1:                                                                     newTmd,
1:                                                                     strategy.snitch,
1:                                                                     strategy.configOptions);
commit:c315745
/////////////////////////////////////////////////////////////////////////
0:                 AbstractReplicationStrategy.getClass(strategy.getClass().getName()),
commit:5267112
/////////////////////////////////////////////////////////////////////////
0:                 strategy.tableName,
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.ConfigurationException;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken;
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.Keyspace;
1: public class ReplicationStrategyEndpointCacheTest
1:     public static final String KEYSPACE = "ReplicationStrategyEndpointCacheTest";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws Exception
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(5));
1:     }
1:         strategy = getStrategyWithNewTokenMetadata(Keyspace.open(KEYSPACE).getReplicationStrategy(), tmd);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ac4d016
/////////////////////////////////////////////////////////////////////////
0:         strategy = getStrategyWithNewTokenMetadata(Table.open("Keyspace3").getReplicationStrategy(), tmd);
commit:6af5726
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
1: 
/////////////////////////////////////////////////////////////////////////
0:         strategy = getStrategyWithNewTokenMetadata(Table.open("Keyspace3").replicationStrategy, tmd);
commit:bf0087f
/////////////////////////////////////////////////////////////////////////
1:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
/////////////////////////////////////////////////////////////////////////
1:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
/////////////////////////////////////////////////////////////////////////
1:         public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
commit:916c810
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         runEndpointsWereCachedTest(FakeSimpleStrategy.class, null);
1:         runEndpointsWereCachedTest(FakeOldNetworkTopologyStrategy.class, null);
1:         runEndpointsWereCachedTest(FakeNetworkTopologyStrategy.class, new HashMap<String, String>());
/////////////////////////////////////////////////////////////////////////
1:         runCacheRespectsTokenChangesTest(SimpleStrategy.class, null);
1:         runCacheRespectsTokenChangesTest(OldNetworkTopologyStrategy.class, null);
1:         runCacheRespectsTokenChangesTest(NetworkTopologyStrategy.class, new HashMap<String, String>());
/////////////////////////////////////////////////////////////////////////
1:     protected static class FakeSimpleStrategy extends SimpleStrategy
0:         public FakeSimpleStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
/////////////////////////////////////////////////////////////////////////
1:     protected static class FakeOldNetworkTopologyStrategy extends OldNetworkTopologyStrategy
0:         public FakeOldNetworkTopologyStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
/////////////////////////////////////////////////////////////////////////
1:     protected static class FakeNetworkTopologyStrategy extends NetworkTopologyStrategy
0:         public FakeNetworkTopologyStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions) throws ConfigurationException
commit:0789a58
/////////////////////////////////////////////////////////////////////////
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(30)), InetAddress.getByName("127.0.0.3"));
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(40)), InetAddress.getByName("127.0.0.4"));
1:         //tmd.updateNormalToken(new BigIntegerToken(String.valueOf(50)), InetAddress.getByName("127.0.0.5"));
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(60)), InetAddress.getByName("127.0.0.6"));
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(70)), InetAddress.getByName("127.0.0.7"));
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(80)), InetAddress.getByName("127.0.0.8"));
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<InetAddress> initial;
1:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:         // test token addition, in DC2 before existing token
0:         initial = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(35)), InetAddress.getByName("127.0.0.5"));
1:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:         assert !endpoints.equals(initial);
1:         // test token removal, newly created token
0:         initial = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
1:         tmd.removeEndpoint(InetAddress.getByName("127.0.0.5"));
1:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:         assert !endpoints.contains(InetAddress.getByName("127.0.0.5"));
1:         assert !endpoints.equals(initial);
0:         initial = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
1:         //move .8 after search token but before other DC3
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(25)), InetAddress.getByName("127.0.0.8"));
1:         assert endpoints.size() == 5 : StringUtils.join(endpoints, ",");
1:         assert !endpoints.equals(initial);        
commit:34e241a
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: 
1: package org.apache.cassandra.locator;
1: 
0: import java.lang.reflect.Constructor;
1: import java.net.InetAddress;
0: import java.util.ArrayList;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
0: import org.apache.commons.lang.StringUtils;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.dht.BigIntegerToken;
1: import org.apache.cassandra.dht.Token;
1: 
0: public class ReplicationStrategyEndpointCacheTest extends SchemaLoader
1: {
1:     private TokenMetadata tmd;
1:     private Token searchToken;
1:     private AbstractReplicationStrategy strategy;
1: 
0:     public void setup(Class stratClass) throws Exception
1:     {
1:         tmd = new TokenMetadata();
1:         searchToken = new BigIntegerToken(String.valueOf(15));
0:         Constructor constructor = stratClass.getConstructor(TokenMetadata.class, IEndpointSnitch.class);
0:         strategy = (AbstractReplicationStrategy) constructor.newInstance(tmd, new PropertyFileSnitch());
1: 
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(10)), InetAddress.getByName("127.0.0.1"));
1:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(20)), InetAddress.getByName("127.0.0.2"));
1:     }
1: 
1:     @Test
1:     public void testEndpointsWereCached() throws Exception
1:     {
0:         runEndpointsWereCachedTest(FakeRackUnawareStrategy.class);
0:         runEndpointsWereCachedTest(FakeRackAwareStrategy.class);
0:         runEndpointsWereCachedTest(FakeDatacenterShardStrategy.class);
1:     }
1: 
0:     public void runEndpointsWereCachedTest(Class stratClass) throws Exception
1:     {
0:         setup(stratClass);
0:         assert strategy.getNaturalEndpoints(searchToken, "Keyspace3").equals(strategy.getNaturalEndpoints(searchToken, "Keyspace3"));
1:     }
1: 
1:     @Test
1:     public void testCacheRespectsTokenChanges() throws Exception
1:     {
0:         runCacheRespectsTokenChangesTest(RackUnawareStrategy.class);
0:         runCacheRespectsTokenChangesTest(RackAwareStrategy.class);
0:         runCacheRespectsTokenChangesTest(DatacenterShardStrategy.class);
1:     }
1: 
0:     public void runCacheRespectsTokenChangesTest(Class stratClass) throws Exception
1:     {
0:         // TODO DSS is asked to provide a total of 6 replicas, but we never give it 6 endpoints.
0:         // thus we are testing undefined behavior, at best.
0:         setup(stratClass);
1:         ArrayList<InetAddress> endpoints;
1: 
0:         endpoints = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
0:         assert endpoints.size() == 2 : StringUtils.join(endpoints, ",");
1: 
0:         // test token addition
0:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(30)), InetAddress.getByName("127.0.0.3"));
0:         endpoints = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
0:         assert endpoints.size() == 3 : StringUtils.join(endpoints, ",");
1: 
0:         // test token removal
0:         tmd.removeEndpoint(InetAddress.getByName("127.0.0.2"));
0:         endpoints = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
0:         assert endpoints.size() == 2 : StringUtils.join(endpoints, ",");
1: 
1:         // test token change
0:         tmd.updateNormalToken(new BigIntegerToken(String.valueOf(30)), InetAddress.getByName("127.0.0.5"));
0:         endpoints = strategy.getNaturalEndpoints(searchToken, "Keyspace3");
0:         assert endpoints.size() == 2 : StringUtils.join(endpoints, ",");
0:         assert endpoints.contains(InetAddress.getByName("127.0.0.5"));
0:         assert !endpoints.contains(InetAddress.getByName("127.0.0.3"));
1:     }
1: 
0:     protected static class FakeRackUnawareStrategy extends RackUnawareStrategy
1:     {
1:         private boolean called = false;
1: 
0:         public FakeRackUnawareStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snitch)
1:         {
0:             super(tokenMetadata, snitch);
1:         }
1: 
0:         @Override
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata, String table)
1:         {
1:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:             called = true;
0:             return super.calculateNaturalEndpoints(token, metadata, table);
1:         }
1:     }
1: 
0:     protected static class FakeRackAwareStrategy extends RackAwareStrategy
1:     {
1:         private boolean called = false;
1: 
0:         public FakeRackAwareStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snitch)
1:         {
0:             super(tokenMetadata, snitch);
1:         }
1: 
0:         @Override
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata, String table)
1:         {
1:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:             called = true;
0:             return super.calculateNaturalEndpoints(token, metadata, table);
1:         }
1:     }
1: 
0:     protected static class FakeDatacenterShardStrategy extends DatacenterShardStrategy
1:     {
1:         private boolean called = false;
1: 
0:         public FakeDatacenterShardStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snitch) throws ConfigurationException
1:         {
0:             super(tokenMetadata, snitch);
1:         }
1: 
0:         @Override
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata, String table)
1:         {
1:             assert !called : "calculateNaturalEndpoints was already called, result should have been cached";
1:             called = true;
0:             return super.calculateNaturalEndpoints(token, metadata, table);
1:         }
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:df8a933
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:     public void setup(Class stratClass, Map<String, String> strategyOptions) throws Exception
1: 
0:         strategy = getStrategyWithNewTokenMetadata(StorageService.instance.getReplicationStrategy("Keyspace3"), tmd);
/////////////////////////////////////////////////////////////////////////
0:         runEndpointsWereCachedTest(FakeRackUnawareStrategy.class, null);
0:         runEndpointsWereCachedTest(FakeRackAwareStrategy.class, null);
0:         runEndpointsWereCachedTest(FakeDatacenterShardStrategy.class, new HashMap<String, String>());
1:     public void runEndpointsWereCachedTest(Class stratClass, Map<String, String> configOptions) throws Exception
1:         setup(stratClass, configOptions);
1:         assert strategy.getNaturalEndpoints(searchToken).equals(strategy.getNaturalEndpoints(searchToken));
0:         runCacheRespectsTokenChangesTest(RackUnawareStrategy.class, null);
0:         runCacheRespectsTokenChangesTest(RackAwareStrategy.class, null);
0:         runCacheRespectsTokenChangesTest(DatacenterShardStrategy.class, new HashMap<String, String>());
1:     public void runCacheRespectsTokenChangesTest(Class stratClass, Map<String, String> configOptions) throws Exception
1:         setup(stratClass, configOptions);
1:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:         initial = strategy.getNaturalEndpoints(searchToken);
1:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:         initial = strategy.getNaturalEndpoints(searchToken);
1:         endpoints = strategy.getNaturalEndpoints(searchToken);
1:         initial = strategy.getNaturalEndpoints(searchToken);
1:         endpoints = strategy.getNaturalEndpoints(searchToken);
0:         assert !endpoints.equals(initial);
0:         public FakeRackUnawareStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
0:             super(table, tokenMetadata, snitch, configOptions);
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:             return super.calculateNaturalEndpoints(token, metadata);
/////////////////////////////////////////////////////////////////////////
0:         public FakeRackAwareStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
0:             super(table, tokenMetadata, snitch, configOptions);
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:             return super.calculateNaturalEndpoints(token, metadata);
/////////////////////////////////////////////////////////////////////////
0:         public FakeDatacenterShardStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions) throws ConfigurationException
0:             super(table, tokenMetadata, snitch, configOptions);
0:         public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:             return super.calculateNaturalEndpoints(token, metadata);
0: 
1:     private AbstractReplicationStrategy getStrategyWithNewTokenMetadata(AbstractReplicationStrategy strategy, TokenMetadata newTmd) throws ConfigurationException
1:     {
1:         return AbstractReplicationStrategy.createReplicationStrategy(
0:                 strategy.table,
0:                 strategy.getClass().getName(),
0:                 newTmd,
0:                 strategy.snitch,
0:                 strategy.configOptions);
1:     }
0: 
============================================================================