1:7536429: package org.apache.cassandra.stress.settings;
1:0bc9841: /*
1:0bc9841:  * 
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  * 
1:0bc9841:  */
1:7536429: 
1:0bc9841: 
1:7536429: import java.util.ArrayList;
1:6c579a0: import java.util.HashMap;
1:7536429: import java.util.List;
1:24f6f03: import java.util.Map;
1:7536429: 
1:7536429: 
1:7536429: public final class OptionEnumProbabilities<T> extends OptionMulti
1:7536429: {
1:7536429:     final List<OptMatcher<T>> options;
1:7536429: 
1:7536429:     public static class Opt<T>
1:7536429:     {
1:7536429:         final T option;
1:7536429:         final String defaultValue;
1:7536429: 
1:7536429:         public Opt(T option, String defaultValue)
1:7536429:         {
1:7536429:             this.option = option;
1:7536429:             this.defaultValue = defaultValue;
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     private static final class OptMatcher<T> extends OptionSimple
1:7536429:     {
1:7536429:         final T opt;
1:7536429:         OptMatcher(T opt, String defaultValue)
1:7536429:         {
1:7536429:             super(opt.toString().toLowerCase() + "=", "[0-9]+(\\.[0-9]+)?", defaultValue, "Performs this many " + opt + " operations out of total", false);
1:7536429:             this.opt = opt;
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     public OptionEnumProbabilities(List<Opt<T>> universe, String name, String description)
1:7536429:     {
1:7536429:         super(name, description, false);
1:7536429:         List<OptMatcher<T>> options = new ArrayList<>();
1:7536429:         for (Opt<T> option : universe)
1:7536429:             options.add(new OptMatcher<T>(option.option, option.defaultValue));
1:7536429:         this.options = options;
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public List<? extends Option> options()
1:7536429:     {
1:7536429:         return options;
1:7536429:     }
1:7536429: 
1:24f6f03:     Map<T, Double> ratios()
1:7536429:     {
1:7536429:         List<? extends Option> ratiosIn = setByUser() ? optionsSetByUser() : defaultOptions();
1:24f6f03:         Map<T, Double> ratiosOut = new HashMap<>();
1:7536429:         for (Option opt : ratiosIn)
1:7536429:         {
1:7536429:             OptMatcher<T> optMatcher = (OptMatcher<T>) opt;
1:7536429:             double d = Double.parseDouble(optMatcher.value());
1:24f6f03:             ratiosOut.put(optMatcher.opt, d);
1:7536429:         }
1:7536429:         return ratiosOut;
1:7536429:     }
1:7536429: }
1:7536429: 
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
commit:24f6f03
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:     Map<T, Double> ratios()
1:         Map<T, Double> ratiosOut = new HashMap<>();
1:             ratiosOut.put(optMatcher.opt, d);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.commons.math3.util.Pair;
1: 
1: public final class OptionEnumProbabilities<T> extends OptionMulti
1: {
1:     final List<OptMatcher<T>> options;
1: 
1:     public static class Opt<T>
1:     {
1:         final T option;
1:         final String defaultValue;
1: 
1:         public Opt(T option, String defaultValue)
1:         {
1:             this.option = option;
1:             this.defaultValue = defaultValue;
1:         }
1:     }
1: 
1:     private static final class OptMatcher<T> extends OptionSimple
1:     {
1:         final T opt;
1:         OptMatcher(T opt, String defaultValue)
1:         {
1:             super(opt.toString().toLowerCase() + "=", "[0-9]+(\\.[0-9]+)?", defaultValue, "Performs this many " + opt + " operations out of total", false);
1:             this.opt = opt;
1:         }
1:     }
1: 
1:     public OptionEnumProbabilities(List<Opt<T>> universe, String name, String description)
1:     {
1:         super(name, description, false);
1:         List<OptMatcher<T>> options = new ArrayList<>();
1:         for (Opt<T> option : universe)
1:             options.add(new OptMatcher<T>(option.option, option.defaultValue));
1:         this.options = options;
1:     }
1: 
1:     @Override
1:     public List<? extends Option> options()
1:     {
1:         return options;
1:     }
1: 
0:     List<Pair<T, Double>> ratios()
1:     {
1:         List<? extends Option> ratiosIn = setByUser() ? optionsSetByUser() : defaultOptions();
0:         List<Pair<T, Double>> ratiosOut = new ArrayList<>();
1:         for (Option opt : ratiosIn)
1:         {
1:             OptMatcher<T> optMatcher = (OptMatcher<T>) opt;
1:             double d = Double.parseDouble(optMatcher.value());
0:             ratiosOut.add(new Pair<>(optMatcher.opt, d));
1:         }
1:         return ratiosOut;
1:     }
1: }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
============================================================================