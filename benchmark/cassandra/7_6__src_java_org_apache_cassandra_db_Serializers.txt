1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
3:f009272: 
1:a991b64: import java.io.*;
1:f009272: import java.nio.ByteBuffer;
1:f009272: import java.util.List;
1:ef5bbed: import java.util.Map;
1:ef5bbed: import java.util.concurrent.ConcurrentHashMap;
1:f009272: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:ef5bbed: import org.apache.cassandra.db.marshal.AbstractType;
1:f009272: import org.apache.cassandra.db.marshal.CompositeType;
1:a991b64: import org.apache.cassandra.io.ISerializer;
1:ef5bbed: import org.apache.cassandra.io.sstable.IndexInfo;
1:ef5bbed: import org.apache.cassandra.io.sstable.format.big.BigFormat;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: import org.apache.cassandra.io.sstable.format.Version;
1:f009272: import org.apache.cassandra.utils.ByteBufferUtil;
1:f009272: 
1:a991b64: /**
1:a991b64:  * Holds references on serializers that depend on the table definition.
1:a991b64:  */
1:a991b64: public class Serializers
3:f009272: {
1:a991b64:     private final CFMetaData metadata;
1:f009272: 
1:ef5bbed:     private Map<Version, IndexInfo.Serializer> otherVersionClusteringSerializers;
1:ef5bbed: 
1:ef5bbed:     private final IndexInfo.Serializer latestVersionIndexSerializer;
1:ef5bbed: 
1:a991b64:     public Serializers(CFMetaData metadata)
1:f009272:     {
1:a991b64:         this.metadata = metadata;
1:ef5bbed:         this.latestVersionIndexSerializer = new IndexInfo.Serializer(BigFormat.latestVersion,
1:ef5bbed:                                                                      indexEntryClusteringPrefixSerializer(BigFormat.latestVersion, SerializationHeader.makeWithoutStats(metadata)));
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     IndexInfo.Serializer indexInfoSerializer(Version version, SerializationHeader header)
1:ef5bbed:     {
1:ef5bbed:         // null header indicates streaming from pre-3.0 sstables
1:ef5bbed:         if (version.equals(BigFormat.latestVersion) && header != null)
1:ef5bbed:             return latestVersionIndexSerializer;
1:ef5bbed: 
1:ef5bbed:         if (otherVersionClusteringSerializers == null)
1:ef5bbed:             otherVersionClusteringSerializers = new ConcurrentHashMap<>();
1:ef5bbed:         IndexInfo.Serializer serializer = otherVersionClusteringSerializers.get(version);
1:ef5bbed:         if (serializer == null)
1:ef5bbed:         {
1:ef5bbed:             serializer = new IndexInfo.Serializer(version,
1:ef5bbed:                                                   indexEntryClusteringPrefixSerializer(version, header));
1:ef5bbed:             otherVersionClusteringSerializers.put(version, serializer);
1:ef5bbed:         }
1:ef5bbed:         return serializer;
4:f009272:     }
1:f009272: 
1:f009272:     // TODO: Once we drop support for old (pre-3.0) sstables, we can drop this method and inline the calls to
1:ef5bbed:     // ClusteringPrefix.serializer directly. At which point this whole class probably becomes
1:f009272:     // unecessary (since IndexInfo.Serializer won't depend on the metadata either).
1:ef5bbed:     private ISerializer<ClusteringPrefix> indexEntryClusteringPrefixSerializer(Version version, SerializationHeader header)
1:f009272:     {
1:e8651b6:         if (!version.storeRows() || header ==  null) //null header indicates streaming from pre-3.0 sstables
1:f009272:         {
1:e8651b6:             return oldFormatSerializer(version);
1:e8651b6:         }
1:e8651b6: 
1:ef5bbed:         return new NewFormatSerializer(version, header.clusteringTypes());
1:f009272:     }
1:f009272: 
1:ef5bbed:     private ISerializer<ClusteringPrefix> oldFormatSerializer(Version version)
1:e8651b6:     {
1:f009272:         return new ISerializer<ClusteringPrefix>()
1:f009272:         {
1:ef5bbed:             List<AbstractType<?>> clusteringTypes = SerializationHeader.makeWithoutStats(metadata).clusteringTypes();
1:e8651b6: 
1:e8651b6:             public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
1:e8651b6:             {
1:e8651b6:                 //we deserialize in the old format and serialize in the new format
1:e8651b6:                 ClusteringPrefix.serializer.serialize(clustering, out,
1:e8651b6:                                                       version.correspondingMessagingVersion(),
1:ef5bbed:                                                       clusteringTypes);
1:ef5bbed:             }
1:ef5bbed: 
1:ef5bbed:             @Override
1:ef5bbed:             public void skip(DataInputPlus in) throws IOException
1:ef5bbed:             {
1:ef5bbed:                 ByteBufferUtil.skipShortLength(in);
1:e8651b6:             }
1:e8651b6: 
1:e8651b6:             public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
1:e8651b6:             {
1:e8651b6:                 // We're reading the old cellname/composite
1:e8651b6:                 ByteBuffer bb = ByteBufferUtil.readWithShortLength(in);
1:e8651b6:                 assert bb.hasRemaining(); // empty cellnames were invalid
1:e8651b6: 
1:e8651b6:                 int clusteringSize = metadata.clusteringColumns().size();
1:e8651b6:                 // If the table has no clustering column, then the cellname will just be the "column" name, which we ignore here.
1:e8651b6:                 if (clusteringSize == 0)
1:e8651b6:                     return Clustering.EMPTY;
1:e8651b6: 
1:e8651b6:                 if (!metadata.isCompound())
1:2f41243:                     return Clustering.make(bb);
1:e8651b6: 
1:e8651b6:                 List<ByteBuffer> components = CompositeType.splitName(bb);
1:e8651b6:                 byte eoc = CompositeType.lastEOC(bb);
1:e8651b6: 
1:e8651b6:                 if (eoc == 0 || components.size() >= clusteringSize)
1:e8651b6:                 {
1:e8651b6:                     // That's a clustering.
1:e8651b6:                     if (components.size() > clusteringSize)
1:e8651b6:                         components = components.subList(0, clusteringSize);
1:e8651b6: 
1:2f41243:                     return Clustering.make(components.toArray(new ByteBuffer[clusteringSize]));
1:e8651b6:                 }
1:e8651b6:                 else
1:e8651b6:                 {
1:e8651b6:                     // It's a range tombstone bound. It is a start since that's the only part we've ever included
1:e8651b6:                     // in the index entries.
1:2cc26eb:                     ClusteringPrefix.Kind boundKind = eoc > 0
1:2cc26eb:                                                  ? ClusteringPrefix.Kind.EXCL_START_BOUND
1:2cc26eb:                                                  : ClusteringPrefix.Kind.INCL_START_BOUND;
1:e8651b6: 
1:2cc26eb:                     return ClusteringBound.create(boundKind, components.toArray(new ByteBuffer[components.size()]));
1:e8651b6:                 }
1:e8651b6:             }
1:e8651b6: 
1:e8651b6:             public long serializedSize(ClusteringPrefix clustering)
1:e8651b6:             {
1:e8651b6:                 return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(),
1:ef5bbed:                                                                   clusteringTypes);
1:e8651b6:             }
1:e8651b6:         };
1:e8651b6:     }
1:e8651b6: 
1:ef5bbed:     private static class NewFormatSerializer implements ISerializer<ClusteringPrefix>
1:e8651b6:     {
1:ef5bbed:         private final Version version;
1:ef5bbed:         private final List<AbstractType<?>> clusteringTypes;
1:ef5bbed: 
1:ef5bbed:         NewFormatSerializer(Version version, List<AbstractType<?>> clusteringTypes)
1:e8651b6:         {
1:ef5bbed:             this.version = version;
1:ef5bbed:             this.clusteringTypes = clusteringTypes;
1:ef5bbed:         }
1:e8651b6: 
1:ef5bbed:         public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
1:ef5bbed:         {
1:ef5bbed:             ClusteringPrefix.serializer.serialize(clustering, out, version.correspondingMessagingVersion(), clusteringTypes);
1:ef5bbed:         }
1:e8651b6: 
1:ef5bbed:         @Override
1:ef5bbed:         public void skip(DataInputPlus in) throws IOException
1:ef5bbed:         {
1:ef5bbed:             ClusteringPrefix.serializer.skip(in, version.correspondingMessagingVersion(), clusteringTypes);
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
1:ef5bbed:         {
1:ef5bbed:             return ClusteringPrefix.serializer.deserialize(in, version.correspondingMessagingVersion(), clusteringTypes);
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public long serializedSize(ClusteringPrefix clustering)
1:ef5bbed:         {
1:ef5bbed:             return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(), clusteringTypes);
1:ef5bbed:         }
1:ef5bbed:     }
1:f009272: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
1:                     ClusteringPrefix.Kind boundKind = eoc > 0
1:                                                  ? ClusteringPrefix.Kind.EXCL_START_BOUND
1:                                                  : ClusteringPrefix.Kind.INCL_START_BOUND;
1:                     return ClusteringBound.create(boundKind, components.toArray(new ByteBuffer[components.size()]));
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.io.sstable.IndexInfo;
1: import org.apache.cassandra.io.sstable.format.big.BigFormat;
/////////////////////////////////////////////////////////////////////////
1:     private Map<Version, IndexInfo.Serializer> otherVersionClusteringSerializers;
1: 
1:     private final IndexInfo.Serializer latestVersionIndexSerializer;
1: 
1:         this.latestVersionIndexSerializer = new IndexInfo.Serializer(BigFormat.latestVersion,
1:                                                                      indexEntryClusteringPrefixSerializer(BigFormat.latestVersion, SerializationHeader.makeWithoutStats(metadata)));
1:     }
1: 
1:     IndexInfo.Serializer indexInfoSerializer(Version version, SerializationHeader header)
1:     {
1:         // null header indicates streaming from pre-3.0 sstables
1:         if (version.equals(BigFormat.latestVersion) && header != null)
1:             return latestVersionIndexSerializer;
1: 
1:         if (otherVersionClusteringSerializers == null)
1:             otherVersionClusteringSerializers = new ConcurrentHashMap<>();
1:         IndexInfo.Serializer serializer = otherVersionClusteringSerializers.get(version);
1:         if (serializer == null)
1:         {
1:             serializer = new IndexInfo.Serializer(version,
1:                                                   indexEntryClusteringPrefixSerializer(version, header));
1:             otherVersionClusteringSerializers.put(version, serializer);
1:         }
1:         return serializer;
1:     // ClusteringPrefix.serializer directly. At which point this whole class probably becomes
1:     private ISerializer<ClusteringPrefix> indexEntryClusteringPrefixSerializer(Version version, SerializationHeader header)
1:         return new NewFormatSerializer(version, header.clusteringTypes());
1:     private ISerializer<ClusteringPrefix> oldFormatSerializer(Version version)
1:             List<AbstractType<?>> clusteringTypes = SerializationHeader.makeWithoutStats(metadata).clusteringTypes();
1:                                                       clusteringTypes);
1:             }
1: 
1:             @Override
1:             public void skip(DataInputPlus in) throws IOException
1:             {
1:                 ByteBufferUtil.skipShortLength(in);
/////////////////////////////////////////////////////////////////////////
1:                                                                   clusteringTypes);
1:     private static class NewFormatSerializer implements ISerializer<ClusteringPrefix>
1:         private final Version version;
1:         private final List<AbstractType<?>> clusteringTypes;
1: 
1:         NewFormatSerializer(Version version, List<AbstractType<?>> clusteringTypes)
1:             this.version = version;
1:             this.clusteringTypes = clusteringTypes;
1:         }
1:         public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
1:         {
1:             ClusteringPrefix.serializer.serialize(clustering, out, version.correspondingMessagingVersion(), clusteringTypes);
1:         }
1:         @Override
1:         public void skip(DataInputPlus in) throws IOException
1:         {
1:             ClusteringPrefix.serializer.skip(in, version.correspondingMessagingVersion(), clusteringTypes);
1:         }
1: 
1:         public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
1:         {
1:             return ClusteringPrefix.serializer.deserialize(in, version.correspondingMessagingVersion(), clusteringTypes);
1:         }
1: 
1:         public long serializedSize(ClusteringPrefix clustering)
1:         {
1:             return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(), clusteringTypes);
1:         }
1: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587773f
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!version.storeRows() || header ==  null) //null header indicates streaming from pre-3.0 sstables
1:             return oldFormatSerializer(version);
0:         return newFormatSerializer(version, header);
1:     }
1: 
0:     private ISerializer<ClusteringPrefix> oldFormatSerializer(final Version version)
1:     {
0:             SerializationHeader newHeader = SerializationHeader.makeWithoutStats(metadata);
1: 
1:             public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
1:             {
1:                 //we deserialize in the old format and serialize in the new format
1:                 ClusteringPrefix.serializer.serialize(clustering, out,
1:                                                       version.correspondingMessagingVersion(),
0:                                                       newHeader.clusteringTypes());
1:             }
1: 
1:             public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
1:             {
1:                 // We're reading the old cellname/composite
1:                 ByteBuffer bb = ByteBufferUtil.readWithShortLength(in);
1:                 assert bb.hasRemaining(); // empty cellnames were invalid
1: 
1:                 int clusteringSize = metadata.clusteringColumns().size();
1:                 // If the table has no clustering column, then the cellname will just be the "column" name, which we ignore here.
1:                 if (clusteringSize == 0)
1:                     return Clustering.EMPTY;
1: 
1:                 if (!metadata.isCompound())
0:                     return new Clustering(bb);
1: 
1:                 List<ByteBuffer> components = CompositeType.splitName(bb);
1:                 byte eoc = CompositeType.lastEOC(bb);
1: 
1:                 if (eoc == 0 || components.size() >= clusteringSize)
1:                 {
1:                     // That's a clustering.
1:                     if (components.size() > clusteringSize)
1:                         components = components.subList(0, clusteringSize);
1: 
0:                     return new Clustering(components.toArray(new ByteBuffer[clusteringSize]));
1:                 }
1:                 else
1:                 {
1:                     // It's a range tombstone bound. It is a start since that's the only part we've ever included
1:                     // in the index entries.
0:                     Slice.Bound.Kind boundKind = eoc > 0
0:                                                  ? Slice.Bound.Kind.EXCL_START_BOUND
0:                                                  : Slice.Bound.Kind.INCL_START_BOUND;
1: 
0:                     return Slice.Bound.create(boundKind, components.toArray(new ByteBuffer[components.size()]));
1:                 }
1:             }
1: 
1:             public long serializedSize(ClusteringPrefix clustering)
1:             {
1:                 return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(),
0:                                                                   newHeader.clusteringTypes());
1:             }
1:         };
1:     }
1: 
1: 
0:     private ISerializer<ClusteringPrefix> newFormatSerializer(final Version version, final SerializationHeader header)
1:     {
0:         return new ISerializer<ClusteringPrefix>() //Reading and writing from/to the new sstable format
1:         {
/////////////////////////////////////////////////////////////////////////
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         return Clustering.make(bb);
/////////////////////////////////////////////////////////////////////////
1:                         return Clustering.make(components.toArray(new ByteBuffer[clusteringSize]));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:60e45c0
/////////////////////////////////////////////////////////////////////////
commit:f009272
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: import org.apache.cassandra.db.marshal.CompositeType;
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:     // TODO: Once we drop support for old (pre-3.0) sstables, we can drop this method and inline the calls to
0:     // ClusteringPrefix.serializer in IndexHelper directly. At which point this whole class probably becomes
1:     // unecessary (since IndexInfo.Serializer won't depend on the metadata either).
0:     public ISerializer<ClusteringPrefix> indexEntryClusteringPrefixSerializer(final Version version, final SerializationHeader header)
1:         {
1:             return new ISerializer<ClusteringPrefix>()
1:             {
0:                 public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
1:                 {
0:                     // We should only use this for reading old sstable, never write new ones.
0:                     throw new UnsupportedOperationException();
1:                 }
1: 
0:                 public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
1:                 {
0:                     // We're reading the old cellname/composite
0:                     ByteBuffer bb = ByteBufferUtil.readWithShortLength(in);
0:                     assert bb.hasRemaining(); // empty cellnames were invalid
1: 
0:                     int clusteringSize = metadata.clusteringColumns().size();
0:                     // If the table has no clustering column, then the cellname will just be the "column" name, which we ignore here.
0:                     if (clusteringSize == 0)
0:                         return Clustering.EMPTY;
1: 
0:                     if (!metadata.isCompound())
0:                         return new Clustering(bb);
1: 
0:                     List<ByteBuffer> components = CompositeType.splitName(bb);
0:                     byte eoc = CompositeType.lastEOC(bb);
1: 
0:                     if (eoc == 0 || components.size() >= clusteringSize)
1:                     {
0:                         // That's a clustering.
0:                         if (components.size() > clusteringSize)
0:                             components = components.subList(0, clusteringSize);
1: 
0:                         return new Clustering(components.toArray(new ByteBuffer[clusteringSize]));
1:                     }
0:                     else
1:                     {
0:                         // It's a range tombstone bound. It is a start since that's the only part we've ever included
0:                         // in the index entries.
0:                         Slice.Bound.Kind boundKind = eoc > 0
0:                                                    ? Slice.Bound.Kind.EXCL_START_BOUND
0:                                                    : Slice.Bound.Kind.INCL_START_BOUND;
1: 
0:                         return Slice.Bound.create(boundKind, components.toArray(new ByteBuffer[components.size()]));
1:                     }
1:                 }
1: 
0:                 public long serializedSize(ClusteringPrefix clustering)
1:                 {
0:                     // We should only use this for reading old sstable, never write new ones.
0:                     throw new UnsupportedOperationException();
1:                 }
0:             };
1:         }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
0: 
1: import java.io.*;
0: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.io.ISerializer;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.io.sstable.format.Version;
0: 
0: import static org.apache.cassandra.io.sstable.IndexHelper.IndexInfo;
0: 
1: /**
1:  * Holds references on serializers that depend on the table definition.
1:  */
1: public class Serializers
0: {
1:     private final CFMetaData metadata;
0: 
1:     public Serializers(CFMetaData metadata)
0:     {
1:         this.metadata = metadata;
0:     }
0: 
0:     public IndexInfo.Serializer indexSerializer(Version version)
0:     {
0:         return new IndexInfo.Serializer(metadata, version);
0:     }
0: 
0:     // Note that for the old layout, this will actually discard the cellname parts that are not strictly 
0:     // part of the clustering prefix. Don't use this if that's not what you want.
0:     public ISerializer<ClusteringPrefix> clusteringPrefixSerializer(final Version version, final SerializationHeader header)
0:     {
0:         if (!version.storeRows())
0:             throw new UnsupportedOperationException();
0: 
0:         return new ISerializer<ClusteringPrefix>()
0:         {
0:             public void serialize(ClusteringPrefix clustering, DataOutputPlus out) throws IOException
0:             {
0:                 ClusteringPrefix.serializer.serialize(clustering, out, version.correspondingMessagingVersion(), header.clusteringTypes());
0:             }
0: 
0:             public ClusteringPrefix deserialize(DataInput in) throws IOException
0:             {
0:                 return ClusteringPrefix.serializer.deserialize(in, version.correspondingMessagingVersion(), header.clusteringTypes());
0:             }
0: 
0:             public long serializedSize(ClusteringPrefix clustering, TypeSizes sizes)
0:             {
0:                 return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(), header.clusteringTypes(), sizes);
0:             }
0:         };
0:     }
0: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
0:     // Note that for the old layout, this will actually discard the cellname parts that are not strictly
/////////////////////////////////////////////////////////////////////////
0:             public ClusteringPrefix deserialize(DataInputPlus in) throws IOException
0:             public long serializedSize(ClusteringPrefix clustering)
0:                 return ClusteringPrefix.serializer.serializedSize(clustering, version.correspondingMessagingVersion(), header.clusteringTypes());
============================================================================