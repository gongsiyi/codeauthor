1:da93a1c: package org.apache.cassandra.utils;
1:60f09f0: /*
1:68d2526:  *
1:60f09f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:60f09f0:  * or more contributor license agreements.  See the NOTICE file
1:60f09f0:  * distributed with this work for additional information
1:60f09f0:  * regarding copyright ownership.  The ASF licenses this file
1:60f09f0:  * to you under the Apache License, Version 2.0 (the
1:60f09f0:  * "License"); you may not use this file except in compliance
1:60f09f0:  * with the License.  You may obtain a copy of the License at
1:68d2526:  *
1:60f09f0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:68d2526:  *
1:60f09f0:  * Unless required by applicable law or agreed to in writing,
1:60f09f0:  * software distributed under the License is distributed on an
1:60f09f0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60f09f0:  * KIND, either express or implied.  See the License for the
1:60f09f0:  * specific language governing permissions and limitations
1:60f09f0:  * under the License.
1:68d2526:  *
1:fe10ba7:  */
1:60f09f0: 
26:da93a1c: 
1:da93a1c: import java.nio.ByteBuffer;
1:2457599: 
1:4b54b8a: import org.github.jamm.MemoryLayoutSpecification;
1:da93a1c: import org.github.jamm.MemoryMeter;
1:da93a1c: 
2:fe10ba7: /**
1:4b54b8a:  * A convenience class for wrapping access to MemoryMeter
1:fe10ba7:  */
1:da93a1c: public class ObjectSizes
29:da93a1c: {
1:4b54b8a:     private static final MemoryMeter meter = new MemoryMeter()
1:4b54b8a:                                              .omitSharedBufferOverhead()
1:4f863be:                                              .withGuessing(MemoryMeter.Guess.FALLBACK_UNSAFE)
1:4f863be:                                              .ignoreKnownSingletons();
1:da93a1c: 
1:4b54b8a:     private static final long BUFFER_EMPTY_SIZE = measure(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:4b54b8a:     private static final long STRING_EMPTY_SIZE = measure("");
1:da93a1c: 
1:fe10ba7:     /**
1:fe10ba7:      * Memory a byte array consumes
1:fe10ba7:      * @param bytes byte array to get memory size
1:4b54b8a:      * @return heap-size of the array
1:fe10ba7:      */
1:4b54b8a:     public static long sizeOfArray(byte[] bytes)
1:da93a1c:     {
1:4b54b8a:         return sizeOfArray(bytes.length, 1);
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * Memory a long array consumes
1:4b54b8a:      * @param longs byte array to get memory size
1:4b54b8a:      * @return heap-size of the array
1:4b54b8a:      */
1:4b54b8a:     public static long sizeOfArray(long[] longs)
1:4b54b8a:     {
1:4b54b8a:         return sizeOfArray(longs.length, 8);
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * Memory an int array consumes
1:4b54b8a:      * @param ints byte array to get memory size
1:4b54b8a:      * @return heap-size of the array
1:4b54b8a:      */
1:4b54b8a:     public static long sizeOfArray(int[] ints)
1:4b54b8a:     {
1:4b54b8a:         return sizeOfArray(ints.length, 4);
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * Memory a reference array consumes
1:4b54b8a:      * @param length the length of the reference array
1:4b54b8a:      * @return heap-size of the array
1:4b54b8a:      */
1:4b54b8a:     public static long sizeOfReferenceArray(int length)
1:4b54b8a:     {
1:4b54b8a:         return sizeOfArray(length, MemoryLayoutSpecification.SPEC.getReferenceSize());
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * Memory a reference array consumes itself only
1:4b54b8a:      * @param objects the array to size
1:4b54b8a:      * @return heap-size of the array (excluding memory retained by referenced objects)
1:4b54b8a:      */
1:4b54b8a:     public static long sizeOfArray(Object[] objects)
1:4b54b8a:     {
1:4b54b8a:         return sizeOfReferenceArray(objects.length);
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     private static long sizeOfArray(int length, long elementSize)
1:4b54b8a:     {
1:4b54b8a:         return MemoryLayoutSpecification.sizeOfArray(length, elementSize);
27:da93a1c:     }
1:da93a1c: 
1:fe10ba7:     /**
1:362cc05:      * Memory a ByteBuffer array consumes.
1:362cc05:      */
1:4b54b8a:     public static long sizeOnHeapOf(ByteBuffer[] array)
1:362cc05:     {
1:362cc05:         long allElementsSize = 0;
1:362cc05:         for (int i = 0; i < array.length; i++)
1:362cc05:             if (array[i] != null)
1:4b54b8a:                 allElementsSize += sizeOnHeapOf(array[i]);
1:362cc05: 
1:4b54b8a:         return allElementsSize + sizeOfArray(array);
1:362cc05:     }
1:362cc05: 
1:4b54b8a:     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
1:4b54b8a:     {
1:4b54b8a:         return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
1:4b54b8a:     }
1:2457599: 
1:362cc05:     /**
1:fe10ba7:      * Memory a byte buffer consumes
1:fe10ba7:      * @param buffer ByteBuffer to calculate in memory size
1:fe10ba7:      * @return Total in-memory size of the byte buffer
1:fe10ba7:      */
1:4b54b8a:     public static long sizeOnHeapOf(ByteBuffer buffer)
1:da93a1c:     {
1:4b54b8a:         if (buffer.isDirect())
1:4b54b8a:             return BUFFER_EMPTY_SIZE;
1:4b54b8a:         // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
1:4b54b8a:         // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
1:4b54b8a:         if (buffer.capacity() > buffer.remaining())
1:4b54b8a:             return buffer.remaining();
1:4b54b8a:         return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
1:da93a1c:     }
1:da93a1c: 
1:4b54b8a:     public static long sizeOnHeapExcludingData(ByteBuffer buffer)
1:da93a1c:     {
1:4b54b8a:         return BUFFER_EMPTY_SIZE;
1:da93a1c:     }
1:da93a1c: 
1:fe10ba7:     /**
1:4b54b8a:      * Memory a String consumes
1:4b54b8a:      * @param str String to calculate memory size of
1:4b54b8a:      * @return Total in-memory size of the String
1:fe10ba7:      */
1:4b54b8a:     public static long sizeOf(String str)
1:da93a1c:     {
1:4b54b8a:         return STRING_EMPTY_SIZE + sizeOfArray(str.length(), 2);
1:da93a1c:     }
1:da93a1c: 
1:4b54b8a:     /**
1:4b54b8a:      * @param pojo the object to measure
1:4b54b8a:      * @return the size on the heap of the instance and all retained heap referenced by it, excluding portions of
1:4b54b8a:      * ByteBuffer that are not directly referenced by it but including any other referenced that may also be retained
1:4b54b8a:      * by other objects.
1:4b54b8a:      */
1:da93a1c:     public static long measureDeep(Object pojo)
1:da93a1c:     {
1:da93a1c:         return meter.measureDeep(pojo);
1:60f09f0:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * @param pojo the object to measure
1:4b54b8a:      * @return the size on the heap of the instance only, excluding any referenced objects
1:4b54b8a:      */
1:4b54b8a:     public static long measure(Object pojo)
1:4b54b8a:     {
1:4b54b8a:         return meter.measure(pojo);
1:4b54b8a:     }
1:da93a1c: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:362cc05
/////////////////////////////////////////////////////////////////////////
1:      * Memory a ByteBuffer array consumes.
1:      */
0:     public static long getArraySize(ByteBuffer[] array)
1:     {
1:         long allElementsSize = 0;
1:         for (int i = 0; i < array.length; i++)
1:             if (array[i] != null)
0:                 allElementsSize += getSize(array[i]);
1: 
0:         return allElementsSize + getArraySize(array.length, getReferenceSize());
1:     }
1: 
1:     /**
author:Jake Luciani
-------------------------------------------------------------------------------
commit:4f863be
/////////////////////////////////////////////////////////////////////////
1:                                              .withGuessing(MemoryMeter.Guess.FALLBACK_UNSAFE)
1:                                              .ignoreKnownSingletons();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: import org.github.jamm.MemoryLayoutSpecification;
1:  * A convenience class for wrapping access to MemoryMeter
1:     private static final MemoryMeter meter = new MemoryMeter()
1:                                              .omitSharedBufferOverhead()
0:                                              .withGuessing(MemoryMeter.Guess.FALLBACK_UNSAFE);
1:     private static final long BUFFER_EMPTY_SIZE = measure(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:     private static final long STRING_EMPTY_SIZE = measure("");
1:      * @return heap-size of the array
1:     public static long sizeOfArray(byte[] bytes)
1:         return sizeOfArray(bytes.length, 1);
1:     }
1: 
1:     /**
1:      * Memory a long array consumes
1:      * @param longs byte array to get memory size
1:      * @return heap-size of the array
1:      */
1:     public static long sizeOfArray(long[] longs)
1:     {
1:         return sizeOfArray(longs.length, 8);
1:     }
1: 
1:     /**
1:      * Memory an int array consumes
1:      * @param ints byte array to get memory size
1:      * @return heap-size of the array
1:      */
1:     public static long sizeOfArray(int[] ints)
1:     {
1:         return sizeOfArray(ints.length, 4);
1:     }
1: 
1:     /**
1:      * Memory a reference array consumes
1:      * @param length the length of the reference array
1:      * @return heap-size of the array
1:      */
1:     public static long sizeOfReferenceArray(int length)
1:     {
1:         return sizeOfArray(length, MemoryLayoutSpecification.SPEC.getReferenceSize());
1:     }
1: 
1:     /**
1:      * Memory a reference array consumes itself only
1:      * @param objects the array to size
1:      * @return heap-size of the array (excluding memory retained by referenced objects)
1:      */
1:     public static long sizeOfArray(Object[] objects)
1:     {
1:         return sizeOfReferenceArray(objects.length);
1:     }
1: 
1:     private static long sizeOfArray(int length, long elementSize)
1:     {
1:         return MemoryLayoutSpecification.sizeOfArray(length, elementSize);
1:     public static long sizeOnHeapOf(ByteBuffer[] array)
1:                 allElementsSize += sizeOnHeapOf(array[i]);
1:         return allElementsSize + sizeOfArray(array);
1:     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
1:     {
1:         return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
1:     }
1:     public static long sizeOnHeapOf(ByteBuffer buffer)
1:         if (buffer.isDirect())
1:             return BUFFER_EMPTY_SIZE;
1:         // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
1:         // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
1:         if (buffer.capacity() > buffer.remaining())
1:             return buffer.remaining();
1:         return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
1:     public static long sizeOnHeapExcludingData(ByteBuffer buffer)
1:         return BUFFER_EMPTY_SIZE;
1:      * Memory a String consumes
1:      * @param str String to calculate memory size of
1:      * @return Total in-memory size of the String
1:     public static long sizeOf(String str)
1:         return STRING_EMPTY_SIZE + sizeOfArray(str.length(), 2);
1:     /**
1:      * @param pojo the object to measure
1:      * @return the size on the heap of the instance and all retained heap referenced by it, excluding portions of
1:      * ByteBuffer that are not directly referenced by it but including any other referenced that may also be retained
1:      * by other objects.
1:      */
1: 
1:     /**
1:      * @param pojo the object to measure
1:      * @return the size on the heap of the instance only, excluding any referenced objects
1:      */
1:     public static long measure(Object pojo)
1:     {
1:         return meter.measure(pojo);
1:     }
commit:fe10ba7
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Memory a class consumes, including the object header and the size of the fields.
0:      * @param fieldsSize Total size of the primitive fields of a class
0:      * @return Total in-memory size of the class
1:      */
1:     /**
0:      * Memory a super class consumes, given the primitive field sizes
0:      * @param fieldsSize Total size of the primitive fields of the super class
0:      * @return Total additional in-memory that the super class takes up
1:      */
1:     /**
0:      * Memory an array will consume
0:      * @param length Number of elements in the array
0:      * @param elementSize In-memory size of each element's primitive stored
0:      * @return In-memory size of the array
1:      */
1:     /**
1:      * Memory a byte array consumes
1:      * @param bytes byte array to get memory size
0:      * @return In-memory size of the array
1:      */
0:     public static long getArraySize(byte[] bytes)
0:         return getArraySize(bytes.length, 1);
1:     /**
1:      * Memory a byte buffer consumes
1:      * @param buffer ByteBuffer to calculate in memory size
1:      * @return Total in-memory size of the byte buffer
1:      */
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return Memory a reference consumes on the current architecture.
0:      */
commit:60f09f0
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
0:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import java.lang.management.ManagementFactory;
0: import java.lang.management.MemoryPoolMXBean;
1: import java.nio.ByteBuffer;
1: 
1: import org.github.jamm.MemoryMeter;
1: 
0: /**
0:  * Modified version of the code from.
0:  * https://github.com/twitter/commons/blob/master
0:  * /src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java
0:  *
0:  * Difference is that we don't use reflection.
0:  */
1: public class ObjectSizes
1: {
0:     public static final MemoryLayoutSpecification SPEC = getEffectiveMemoryLayoutSpecification();
0:     private static final MemoryMeter meter = new MemoryMeter().omitSharedBufferOverhead();
1: 
0:     /**
0:      * Describes constant memory overheads for various constructs in a JVM
0:      * implementation.
0:      */
0:     public interface MemoryLayoutSpecification
1:     {
0:         int getArrayHeaderSize();
1: 
0:         int getObjectHeaderSize();
1: 
0:         int getObjectPadding();
1: 
0:         int getReferenceSize();
1: 
0:         int getSuperclassFieldPadding();
1:     }
1: 
0:     public static long getFieldSize(long fieldsSize)
1:     {
0:         return roundTo(SPEC.getObjectHeaderSize() + fieldsSize, SPEC.getObjectPadding());
1:     }
1: 
0:     public static long getSuperClassFieldSize(long fieldsSize)
1:     {
0:         return roundTo(fieldsSize, SPEC.getSuperclassFieldPadding());
1:     }
1: 
0:     public static long getArraySize(int length, long elementSize)
1:     {
0:         return roundTo(SPEC.getArrayHeaderSize() + length * elementSize, SPEC.getObjectPadding());
1:     }
1: 
0:     public static long getSizeWithRef(byte[] bytes)
1:     {
0:         return SPEC.getReferenceSize() + getArraySize(bytes.length, 1);
1:     }
1: 
0:     public static long getSize(ByteBuffer buffer)
1:     {
0:         long size = 0;
0:         /* BB Class */
0:         // final byte[] hb;
0:         // final int offset;
0:         // boolean isReadOnly;
0:         size += ObjectSizes.getFieldSize(1L + 4 + ObjectSizes.getReferenceSize() + ObjectSizes.getArraySize(buffer.capacity(), 1));
0:         /* Super Class */
0:         // private int mark;
0:         // private int position;
0:         // private int limit;
0:         // private int capacity;
0:         size += ObjectSizes.getSuperClassFieldSize(4L + 4 + 4 + 4 + 8);
0:         return size;
1:     }
1: 
0:     public static long getSizeWithRef(ByteBuffer buffer)
1:     {
0:         return SPEC.getReferenceSize() + getSize(buffer);
1:     }
1: 
0:     public static long roundTo(long x, int multiple)
1:     {
0:         return ((x + multiple - 1) / multiple) * multiple;
1:     }
1: 
0:     public static int getReferenceSize()
1:     {
0:         return SPEC.getReferenceSize();
1:     }
1: 
0:     private static MemoryLayoutSpecification getEffectiveMemoryLayoutSpecification()
1:     {
0:         final String dataModel = System.getProperty("sun.arch.data.model");
0:         if ("32".equals(dataModel))
1:         {
0:             // Running with 32-bit data model
0:             return new MemoryLayoutSpecification()
1:             {
0:                 public int getArrayHeaderSize()
1:                 {
0:                     return 12;
1:                 }
1: 
0:                 public int getObjectHeaderSize()
1:                 {
0:                     return 8;
1:                 }
1: 
0:                 public int getObjectPadding()
1:                 {
0:                     return 8;
1:                 }
1: 
0:                 public int getReferenceSize()
1:                 {
0:                     return 4;
1:                 }
1: 
0:                 public int getSuperclassFieldPadding()
1:                 {
0:                     return 4;
1:                 }
0:             };
1:         }
1: 
0:         final String strVmVersion = System.getProperty("java.vm.version");
0:         final int vmVersion = Integer.parseInt(strVmVersion.substring(0, strVmVersion.indexOf('.')));
0:         if (vmVersion >= 17)
1:         {
0:             long maxMemory = 0;
0:             for (MemoryPoolMXBean mp : ManagementFactory.getMemoryPoolMXBeans())
1:             {
0:                 maxMemory += mp.getUsage().getMax();
1:             }
0:             if (maxMemory < 30L * 1024 * 1024 * 1024)
1:             {
0:                 // HotSpot 17.0 and above use compressed OOPs below 30GB of RAM
0:                 // total for all memory pools (yes, including code cache).
0:                 return new MemoryLayoutSpecification()
1:                 {
0:                     public int getArrayHeaderSize()
1:                     {
0:                         return 16;
1:                     }
1: 
0:                     public int getObjectHeaderSize()
1:                     {
0:                         return 12;
1:                     }
1: 
0:                     public int getObjectPadding()
1:                     {
0:                         return 8;
1:                     }
1: 
0:                     public int getReferenceSize()
1:                     {
0:                         return 4;
1:                     }
1: 
0:                     public int getSuperclassFieldPadding()
1:                     {
0:                         return 4;
1:                     }
0:                 };
1:             }
1:         }
1: 
0:         /* Worst case we over count. */
1: 
0:         // In other cases, it's a 64-bit uncompressed OOPs object model
0:         return new MemoryLayoutSpecification()
1:         {
0:             public int getArrayHeaderSize()
1:             {
0:                 return 24;
1:             }
1: 
0:             public int getObjectHeaderSize()
1:             {
0:                 return 16;
1:             }
1: 
0:             public int getObjectPadding()
1:             {
0:                 return 8;
1:             }
1: 
0:             public int getReferenceSize()
1:             {
0:                 return 8;
1:             }
1: 
0:             public int getSuperclassFieldPadding()
1:             {
0:                 return 8;
1:             }
0:         };
1:     }
1: 
1:     public static long measureDeep(Object pojo)
1:     {
1:         return meter.measureDeep(pojo);
1:     }
1: }
============================================================================