1:407a76f: /*
1:407a76f:  * Licensed to the Apache Software Foundation (ASF) under one
1:407a76f:  * or more contributor license agreements.  See the NOTICE file
1:407a76f:  * distributed with this work for additional information
1:407a76f:  * regarding copyright ownership.  The ASF licenses this file
1:407a76f:  * to you under the Apache License, Version 2.0 (the
1:407a76f:  * "License"); you may not use this file except in compliance
1:407a76f:  * with the License.  You may obtain a copy of the License at
3:407a76f:  *
1:407a76f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:407a76f:  *
1:407a76f:  * Unless required by applicable law or agreed to in writing,
1:407a76f:  * software distributed under the License is distributed on an
1:407a76f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:407a76f:  * KIND, either express or implied.  See the License for the
1:407a76f:  * specific language governing permissions and limitations
1:407a76f:  * under the License.
1:407a76f:  */
1:f81cc74: package org.apache.cassandra.gms;
1:407a76f: 
1:434636a: import org.apache.cassandra.AbstractSerializationsTester;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:0a08525: import org.apache.cassandra.dht.IPartitioner;
1:66b96ee: import org.apache.cassandra.dht.Token;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
1:16499ca: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1:434636a: import org.apache.cassandra.service.StorageService;
1:434636a: import org.apache.cassandra.utils.FBUtilities;
1:0a08525: 
1:9797511: import org.junit.BeforeClass;
1:434636a: import org.junit.Test;
1:69f77cb: 
1:434636a: import java.io.IOException;
1:434636a: import java.net.InetAddress;
1:434636a: import java.util.ArrayList;
1:66b96ee: import java.util.Collections;
1:434636a: import java.util.HashMap;
1:434636a: import java.util.List;
1:434636a: import java.util.Map;
1:07cdfd0: 
1:434636a: public class SerializationsTest extends AbstractSerializationsTester
1:434636a: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:07cdfd0:     private void testEndpointStateWrite() throws IOException
1:434636a:     {
1:16499ca:         DataOutputStreamPlus out = getOutput("gms.EndpointState.bin");
1:587cb58:         HeartBeatState.serializer.serialize(Statics.HeartbeatSt, out, getVersion());
1:587cb58:         EndpointState.serializer.serialize(Statics.EndpointSt, out, getVersion());
1:1ecdd7f:         VersionedValue.serializer.serialize(Statics.vv0, out, getVersion());
1:1ecdd7f:         VersionedValue.serializer.serialize(Statics.vv1, out, getVersion());
1:434636a:         out.close();
1:f81cc74: 
1:f81cc74:         // test serializedSize
1:587cb58:         testSerializedSize(Statics.HeartbeatSt, HeartBeatState.serializer);
1:587cb58:         testSerializedSize(Statics.EndpointSt, EndpointState.serializer);
1:f81cc74:         testSerializedSize(Statics.vv0, VersionedValue.serializer);
1:f81cc74:         testSerializedSize(Statics.vv1, VersionedValue.serializer);
1:434636a:     }
1:f81cc74: 
1:434636a:     @Test
1:434636a:     public void testEndpointStateRead() throws IOException
1:434636a:     {
1:434636a:         if (EXECUTE_WRITES)
1:434636a:             testEndpointStateWrite();
1:07cdfd0: 
1:03f72ac:         DataInputStreamPlus in = getInput("gms.EndpointState.bin");
1:587cb58:         assert HeartBeatState.serializer.deserialize(in, getVersion()) != null;
1:587cb58:         assert EndpointState.serializer.deserialize(in, getVersion()) != null;
1:1ecdd7f:         assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
1:1ecdd7f:         assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
1:434636a:         in.close();
1:434636a:     }
1:07cdfd0: 
1:434636a:     private void testGossipDigestWrite() throws IOException
1:434636a:     {
1:434636a:         Map<InetAddress, EndpointState> states = new HashMap<InetAddress, EndpointState>();
1:434636a:         states.put(InetAddress.getByName("127.0.0.1"), Statics.EndpointSt);
1:434636a:         states.put(InetAddress.getByName("127.0.0.2"), Statics.EndpointSt);
1:9471e8d:         GossipDigestAck ack = new GossipDigestAck(Statics.Digests, states);
1:9471e8d:         GossipDigestAck2 ack2 = new GossipDigestAck2(states);
1:0a08525:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name",
1:0a08525:                                                   StorageService.instance.getTokenMetadata().partitioner.getClass().getCanonicalName(),
1:0a08525:                                                   Statics.Digests);
1:07cdfd0: 
1:16499ca:         DataOutputStreamPlus out = getOutput("gms.Gossip.bin");
1:f81cc74:         for (GossipDigest gd : Statics.Digests)
1:587cb58:             GossipDigest.serializer.serialize(gd, out, getVersion());
1:587cb58:         GossipDigestAck.serializer.serialize(ack, out, getVersion());
1:587cb58:         GossipDigestAck2.serializer.serialize(ack2, out, getVersion());
1:587cb58:         GossipDigestSyn.serializer.serialize(syn, out, getVersion());
1:434636a:         out.close();
1:07cdfd0: 
1:f81cc74:         // test serializedSize
1:434636a:         for (GossipDigest gd : Statics.Digests)
1:587cb58:             testSerializedSize(gd, GossipDigest.serializer);
1:587cb58:         testSerializedSize(ack, GossipDigestAck.serializer);
1:587cb58:         testSerializedSize(ack2, GossipDigestAck2.serializer);
1:587cb58:         testSerializedSize(syn, GossipDigestSyn.serializer);
1:434636a:     }
1:07cdfd0: 
1:434636a:     @Test
1:434636a:     public void testGossipDigestRead() throws IOException
1:434636a:     {
1:434636a:         if (EXECUTE_WRITES)
1:434636a:             testGossipDigestWrite();
1:07cdfd0: 
1:434636a:         int count = 0;
1:03f72ac:         DataInputStreamPlus in = getInput("gms.Gossip.bin");
1:434636a:         while (count < Statics.Digests.size())
1:587cb58:             assert GossipDigestAck2.serializer.deserialize(in, getVersion()) != null;
1:587cb58:         assert GossipDigestAck.serializer.deserialize(in, getVersion()) != null;
1:587cb58:         assert GossipDigestAck2.serializer.deserialize(in, getVersion()) != null;
1:587cb58:         assert GossipDigestSyn.serializer.deserialize(in, getVersion()) != null;
1:434636a:         in.close();
1:434636a:     }
2:2fd3268: 
1:434636a:     private static class Statics
1:434636a:     {
1:434636a:         private static HeartBeatState HeartbeatSt = new HeartBeatState(101, 201);
1:434636a:         private static EndpointState EndpointSt = new EndpointState(HeartbeatSt);
1:0a08525:         private static IPartitioner partitioner = StorageService.instance.getTokenMetadata().partitioner;
1:0a08525:         private static VersionedValue.VersionedValueFactory vvFact = new VersionedValue.VersionedValueFactory(partitioner);
1:434636a:         private static VersionedValue vv0 = vvFact.load(23d);
1:0a08525:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(partitioner.getRandomToken()));
1:434636a:         private static List<GossipDigest> Digests = new ArrayList<GossipDigest>();
1:07cdfd0: 
1:434636a:         {
1:434636a:             HeartbeatSt.updateHeartBeat();
1:434636a:             EndpointSt.addApplicationState(ApplicationState.LOAD, vv0);
1:434636a:             EndpointSt.addApplicationState(ApplicationState.STATUS, vv1);
1:434636a:             for (int i = 0; i < 100; i++)
1:127c028:                 Digests.add(new GossipDigest(FBUtilities.getBroadcastAddress(), 100 + i, 1000 + 2 * i));
1:434636a:         }
1:434636a:     }
1:434636a: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.dht.IPartitioner;
1: 
/////////////////////////////////////////////////////////////////////////
1:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name",
1:                                                   StorageService.instance.getTokenMetadata().partitioner.getClass().getCanonicalName(),
1:                                                   Statics.Digests);
/////////////////////////////////////////////////////////////////////////
1:         private static IPartitioner partitioner = StorageService.instance.getTokenMetadata().partitioner;
1:         private static VersionedValue.VersionedValueFactory vvFact = new VersionedValue.VersionedValueFactory(partitioner);
1:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(partitioner.getRandomToken()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name", StorageService.getPartitioner().getClass().getCanonicalName(), Statics.Digests);
/////////////////////////////////////////////////////////////////////////
0:         private static VersionedValue.VersionedValueFactory vvFact = new VersionedValue.VersionedValueFactory(StorageService.getPartitioner());
0:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(StorageService.getPartitioner().getRandomToken()));
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
1:         GossipDigestAck ack = new GossipDigestAck(Statics.Digests, states);
1:         GossipDigestAck2 ack2 = new GossipDigestAck2(states);
0:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name", Statics.Digests);
0:         GossipDigestAck.serializer().serialize(ack, out, getVersion());
0:         GossipDigestAck2.serializer().serialize(ack2, out, getVersion());
0:         GossipDigestSyn.serializer().serialize(syn, out, getVersion());
/////////////////////////////////////////////////////////////////////////
0:             assert GossipDigestAck2.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestAck.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestAck2.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestSyn.serializer().deserialize(in, getVersion()) != null;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.dht.IPartitioner;
1: 
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name",
0:                                                   StorageService.instance.getTokenMetadata().partitioner.getClass().getCanonicalName(),
0:                                                   Statics.Digests);
/////////////////////////////////////////////////////////////////////////
0:         private static IPartitioner partitioner = StorageService.instance.getTokenMetadata().partitioner;
0:         private static VersionedValue.VersionedValueFactory vvFact = new VersionedValue.VersionedValueFactory(partitioner);
0:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(partitioner.getRandomToken()));
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:         DataInputStreamPlus in = getInput("gms.EndpointState.bin");
/////////////////////////////////////////////////////////////////////////
1:         DataInputStreamPlus in = getInput("gms.Gossip.bin");
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:         DataOutputStreamPlus out = getOutput("gms.EndpointState.bin");
/////////////////////////////////////////////////////////////////////////
1:         DataOutputStreamPlus out = getOutput("gms.Gossip.bin");
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputStreamAndChannel;
/////////////////////////////////////////////////////////////////////////
0:         DataOutputStreamAndChannel out = getOutput("gms.EndpointState.bin");
/////////////////////////////////////////////////////////////////////////
0:         DataOutputStreamAndChannel out = getOutput("gms.Gossip.bin");
author:Brandon Williams
-------------------------------------------------------------------------------
commit:b475bc6
/////////////////////////////////////////////////////////////////////////
0:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(StorageService.getPartitioner().getRandomToken()));
commit:127c028
/////////////////////////////////////////////////////////////////////////
1:                 Digests.add(new GossipDigest(FBUtilities.getBroadcastAddress(), 100 + i, 1000 + 2 * i));
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:0525ae2
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSyn syn = new GossipDigestSyn("Not a real cluster name", StorageService.getPartitioner().getClass().getCanonicalName(), Statics.Digests);
author:Eric Evans
-------------------------------------------------------------------------------
commit:66b96ee
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.dht.Token;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0:         private static VersionedValue vv1 = vvFact.bootstrapping(Collections.<Token>singleton(StorageService.getPartitioner().getRandomToken()),
0:                                                                  UUID.randomUUID());
commit:ad685c4
/////////////////////////////////////////////////////////////////////////
0: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
0:         private static VersionedValue vv1 = vvFact.bootstrapping(StorageService.getPartitioner().getRandomToken(), UUID.randomUUID());
commit:407a76f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:         HeartBeatState.serializer.serialize(Statics.HeartbeatSt, out, getVersion());
1:         EndpointState.serializer.serialize(Statics.EndpointSt, out, getVersion());
1:         testSerializedSize(Statics.HeartbeatSt, HeartBeatState.serializer);
1:         testSerializedSize(Statics.EndpointSt, EndpointState.serializer);
/////////////////////////////////////////////////////////////////////////
1:         assert HeartBeatState.serializer.deserialize(in, getVersion()) != null;
1:         assert EndpointState.serializer.deserialize(in, getVersion()) != null;
/////////////////////////////////////////////////////////////////////////
1:             GossipDigest.serializer.serialize(gd, out, getVersion());
1:         GossipDigestAck.serializer.serialize(ack, out, getVersion());
1:         GossipDigestAck2.serializer.serialize(ack2, out, getVersion());
1:         GossipDigestSyn.serializer.serialize(syn, out, getVersion());
1:             testSerializedSize(gd, GossipDigest.serializer);
1:         testSerializedSize(ack, GossipDigestAck.serializer);
1:         testSerializedSize(ack2, GossipDigestAck2.serializer);
1:         testSerializedSize(syn, GossipDigestSyn.serializer);
/////////////////////////////////////////////////////////////////////////
1:             assert GossipDigestAck2.serializer.deserialize(in, getVersion()) != null;
1:         assert GossipDigestAck.serializer.deserialize(in, getVersion()) != null;
1:         assert GossipDigestAck2.serializer.deserialize(in, getVersion()) != null;
1:         assert GossipDigestSyn.serializer.deserialize(in, getVersion()) != null;
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.gms;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // test serializedSize
0:         testSerializedSize(Statics.HeartbeatSt, HeartBeatState.serializer());
0:         testSerializedSize(Statics.EndpointSt, EndpointState.serializer());
1:         testSerializedSize(Statics.vv0, VersionedValue.serializer);
1:         testSerializedSize(Statics.vv1, VersionedValue.serializer);
/////////////////////////////////////////////////////////////////////////
1: 
1:         // test serializedSize
1:         for (GossipDigest gd : Statics.Digests)
0:             testSerializedSize(gd, GossipDigest.serializer());
0:         testSerializedSize(ack, GossipDigestAck.serializer());
0:         testSerializedSize(ack2, GossipDigestAck2.serializer());
0:         testSerializedSize(syn, GossipDigestSyn.serializer());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:     private void testEndpointStateWrite() throws IOException
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:     private void testEndpointStateWrite() throws IOException
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:         HeartBeatState.serializer().serialize(Statics.HeartbeatSt, out, getVersion());
0:         EndpointState.serializer().serialize(Statics.EndpointSt, out, getVersion());
1:         VersionedValue.serializer.serialize(Statics.vv0, out, getVersion());
1:         VersionedValue.serializer.serialize(Statics.vv1, out, getVersion());
/////////////////////////////////////////////////////////////////////////
0:         assert HeartBeatState.serializer().deserialize(in, getVersion()) != null;
0:         assert EndpointState.serializer().deserialize(in, getVersion()) != null;
1:         assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
1:         assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
/////////////////////////////////////////////////////////////////////////
0:             GossipDigest.serializer().serialize(gd, out, getVersion());
0:         GossipDigestAckMessage.serializer().serialize(ack, out, getVersion());
0:         GossipDigestAck2Message.serializer().serialize(ack2, out, getVersion());
0:         GossipDigestSynMessage.serializer().serialize(syn, out, getVersion());
/////////////////////////////////////////////////////////////////////////
0:             assert GossipDigestAck2Message.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestAckMessage.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestAck2Message.serializer().deserialize(in, getVersion()) != null;
0:         assert GossipDigestSynMessage.serializer().deserialize(in, getVersion()) != null;
commit:434636a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
0: 
1: import org.apache.cassandra.AbstractSerializationsTester;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.junit.Test;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
0: 
1: public class SerializationsTest extends AbstractSerializationsTester
1: {
0:     private void testEndpointStateWrite() throws IOException 
1:     {
0:         DataOutputStream out = getOutput("gms.EndpointState.bin");
0:         HeartBeatState.serializer().serialize(Statics.HeartbeatSt, out);
0:         EndpointState.serializer().serialize(Statics.EndpointSt, out);
0:         VersionedValue.serializer.serialize(Statics.vv0, out);
0:         VersionedValue.serializer.serialize(Statics.vv1, out);
1:         out.close();
1:     }
0:     
1:     @Test
1:     public void testEndpointStateRead() throws IOException
1:     {
1:         if (EXECUTE_WRITES)
1:             testEndpointStateWrite();
0:         
0:         DataInputStream in = getInput("gms.EndpointState.bin");
0:         assert HeartBeatState.serializer().deserialize(in) != null;
0:         assert EndpointState.serializer().deserialize(in) != null;
0:         assert VersionedValue.serializer.deserialize(in) != null;
0:         assert VersionedValue.serializer.deserialize(in) != null;
1:         in.close();
1:     }
0:      
1:     private void testGossipDigestWrite() throws IOException
1:     {
1:         Map<InetAddress, EndpointState> states = new HashMap<InetAddress, EndpointState>();
1:         states.put(InetAddress.getByName("127.0.0.1"), Statics.EndpointSt);
1:         states.put(InetAddress.getByName("127.0.0.2"), Statics.EndpointSt);
0:         GossipDigestAckMessage ack = new GossipDigestAckMessage(Statics.Digests, states);
0:         GossipDigestAck2Message ack2 = new GossipDigestAck2Message(states);
0:         GossipDigestSynMessage syn = new GossipDigestSynMessage("Not a real cluster name", Statics.Digests);
0:         
0:         DataOutputStream out = getOutput("gms.Gossip.bin");
1:         for (GossipDigest gd : Statics.Digests)
0:             GossipDigest.serializer().serialize(gd, out);
0:         GossipDigestAckMessage.serializer().serialize(ack, out);
0:         GossipDigestAck2Message.serializer().serialize(ack2, out);
0:         GossipDigestSynMessage.serializer().serialize(syn, out);
1:         out.close();
1:     }
0:     
1:     @Test
1:     public void testGossipDigestRead() throws IOException
1:     {
1:         if (EXECUTE_WRITES)
1:             testGossipDigestWrite();
0:         
1:         int count = 0;
0:         DataInputStream in = getInput("gms.Gossip.bin");
1:         while (count < Statics.Digests.size())
0:             assert GossipDigestAck2Message.serializer().deserialize(in) != null;
0:         assert GossipDigestAckMessage.serializer().deserialize(in) != null;
0:         assert GossipDigestAck2Message.serializer().deserialize(in) != null;
0:         assert GossipDigestSynMessage.serializer().deserialize(in) != null;
1:         in.close();
1:     }
0:     
1:     private static class Statics
1:     {
1:         private static HeartBeatState HeartbeatSt = new HeartBeatState(101, 201);
1:         private static EndpointState EndpointSt = new EndpointState(HeartbeatSt);
0:         private static VersionedValue.VersionedValueFactory vvFact = new VersionedValue.VersionedValueFactory(StorageService.getPartitioner());
1:         private static VersionedValue vv0 = vvFact.load(23d);
0:         private static VersionedValue vv1 = vvFact.bootstrapping(StorageService.getPartitioner().getRandomToken());
1:         private static List<GossipDigest> Digests = new ArrayList<GossipDigest>();
0:         
1:         {
1:             HeartbeatSt.updateHeartBeat();
1:             EndpointSt.addApplicationState(ApplicationState.LOAD, vv0);
1:             EndpointSt.addApplicationState(ApplicationState.STATUS, vv1);
1:             for (int i = 0; i < 100; i++)
0:                 Digests.add(new GossipDigest(FBUtilities.getLocalAddress(), 100 + i, 1000 + 2 * i));
1:         }
1:     }
1: }
============================================================================