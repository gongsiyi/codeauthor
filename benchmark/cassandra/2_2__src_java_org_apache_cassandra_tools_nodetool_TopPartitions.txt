1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import static com.google.common.base.Preconditions.checkArgument;
1:c5a8190: import static org.apache.commons.lang3.StringUtils.join;
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import java.util.ArrayList;
1:c5a8190: import java.util.Collections;
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:c5a8190: import java.util.Map.Entry;
1:c5a8190: 
1:c5a8190: import javax.management.openmbean.CompositeData;
1:c5a8190: import javax.management.openmbean.OpenDataException;
1:c5a8190: import javax.management.openmbean.TabularDataSupport;
1:c5a8190: 
1:0bd5170: import org.apache.cassandra.metrics.TableMetrics;
1:0bd5170: import org.apache.cassandra.metrics.TableMetrics.Sampler;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:c5a8190: import com.google.common.collect.Lists;
1:c5a8190: import com.google.common.collect.Ordering;
1:c5a8190: 
1:c5a8190: @Command(name = "toppartitions", description = "Sample and print the most active partitions for a given column family")
1:c5a8190: public class TopPartitions extends NodeToolCmd
1:c5a8190: {
1:c5a8190:     @Arguments(usage = "<keyspace> <cfname> <duration>", description = "The keyspace, column family name, and duration in milliseconds")
1:c5a8190:     private List<String> args = new ArrayList<>();
1:c5a8190:     @Option(name = "-s", description = "Capacity of stream summary, closer to the actual cardinality of partitions will yield more accurate results (Default: 256)")
1:c5a8190:     private int size = 256;
1:c5a8190:     @Option(name = "-k", description = "Number of the top partitions to list (Default: 10)")
1:c5a8190:     private int topCount = 10;
1:c5a8190:     @Option(name = "-a", description = "Comma separated list of samplers to use (Default: all)")
1:0bd5170:     private String samplers = join(TableMetrics.Sampler.values(), ',');
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:c5a8190:         checkArgument(args.size() == 3, "toppartitions requires keyspace, column family name, and duration");
1:c5a8190:         checkArgument(topCount < size, "TopK count (-k) option must be smaller then the summary capacity (-s)");
1:c5a8190:         String keyspace = args.get(0);
1:c5a8190:         String cfname = args.get(1);
1:7dccb31:         Integer duration = Integer.valueOf(args.get(2));
1:c5a8190:         // generate the list of samplers
1:c5a8190:         List<Sampler> targets = Lists.newArrayList();
1:c5a8190:         for (String s : samplers.split(","))
1:c5a8190:         {
1:c5a8190:             try
1:c5a8190:             {
1:c5a8190:                 targets.add(Sampler.valueOf(s.toUpperCase()));
1:c5a8190:             } catch (Exception e)
1:c5a8190:             {
1:c5a8190:                 throw new IllegalArgumentException(s + " is not a valid sampler, choose one of: " + join(Sampler.values(), ", "));
1:c5a8190:             }
1:c5a8190:         }
1:c5a8190: 
1:c5a8190:         Map<Sampler, CompositeData> results;
1:c5a8190:         try
1:c5a8190:         {
1:c5a8190:             results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets);
1:c5a8190:         } catch (OpenDataException e)
1:c5a8190:         {
1:c5a8190:             throw new RuntimeException(e);
1:c5a8190:         }
1:c5a8190:         boolean first = true;
1:c5a8190:         for(Entry<Sampler, CompositeData> result : results.entrySet())
1:c5a8190:         {
1:c5a8190:             CompositeData sampling = result.getValue();
1:c5a8190:             // weird casting for http://bugs.sun.com/view_bug.do?bug_id=6548436
1:c5a8190:             List<CompositeData> topk = (List<CompositeData>) (Object) Lists.newArrayList(((TabularDataSupport) sampling.get("partitions")).values());
1:c5a8190:             Collections.sort(topk, new Ordering<CompositeData>()
1:c5a8190:             {
1:c5a8190:                 public int compare(CompositeData left, CompositeData right)
1:c5a8190:                 {
1:c5a8190:                     return Long.compare((long) right.get("count"), (long) left.get("count"));
1:c5a8190:                 }
1:c5a8190:             });
1:c5a8190:             if(!first)
1:c5a8190:                 System.out.println();
1:c5a8190:             System.out.println(result.getKey().toString()+ " Sampler:");
1:7dccb31:             System.out.printf("  Cardinality: ~%d (%d capacity)%n", sampling.get("cardinality"), size);
1:c5a8190:             System.out.printf("  Top %d partitions:%n", topCount);
1:c5a8190:             if (topk.size() == 0)
1:c5a8190:             {
1:c5a8190:                 System.out.println("\tNothing recorded during sampling period...");
1:c5a8190:             } else
1:c5a8190:             {
1:c5a8190:                 int offset = 0;
1:c5a8190:                 for (CompositeData entry : topk)
1:c5a8190:                     offset = Math.max(offset, entry.get("string").toString().length());
1:c5a8190:                 System.out.printf("\t%-" + offset + "s%10s%10s%n", "Partition", "Count", "+/-");
1:c5a8190:                 for (CompositeData entry : topk)
1:c5a8190:                     System.out.printf("\t%-" + offset + "s%10d%10d%n", entry.get("string").toString(), entry.get("count"), entry.get("error"));
1:c5a8190:             }
1:c5a8190:             first = false;
1:c5a8190:         }
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7dccb31
/////////////////////////////////////////////////////////////////////////
1:         Integer duration = Integer.valueOf(args.get(2));
/////////////////////////////////////////////////////////////////////////
1:             System.out.printf("  Cardinality: ~%d (%d capacity)%n", sampling.get("cardinality"), size);
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import static com.google.common.base.Preconditions.checkArgument;
1: import static org.apache.commons.lang3.StringUtils.join;
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularDataSupport;
1: 
0: import org.apache.cassandra.metrics.ColumnFamilyMetrics;
0: import org.apache.cassandra.metrics.ColumnFamilyMetrics.Sampler;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Ordering;
1: 
1: @Command(name = "toppartitions", description = "Sample and print the most active partitions for a given column family")
1: public class TopPartitions extends NodeToolCmd
1: {
1:     @Arguments(usage = "<keyspace> <cfname> <duration>", description = "The keyspace, column family name, and duration in milliseconds")
1:     private List<String> args = new ArrayList<>();
1:     @Option(name = "-s", description = "Capacity of stream summary, closer to the actual cardinality of partitions will yield more accurate results (Default: 256)")
1:     private int size = 256;
1:     @Option(name = "-k", description = "Number of the top partitions to list (Default: 10)")
1:     private int topCount = 10;
1:     @Option(name = "-a", description = "Comma separated list of samplers to use (Default: all)")
0:     private String samplers = join(ColumnFamilyMetrics.Sampler.values(), ',');
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         checkArgument(args.size() == 3, "toppartitions requires keyspace, column family name, and duration");
1:         checkArgument(topCount < size, "TopK count (-k) option must be smaller then the summary capacity (-s)");
1:         String keyspace = args.get(0);
1:         String cfname = args.get(1);
0:         Integer duration = Integer.parseInt(args.get(2));
1:         // generate the list of samplers
1:         List<Sampler> targets = Lists.newArrayList();
1:         for (String s : samplers.split(","))
1:         {
1:             try
1:             {
1:                 targets.add(Sampler.valueOf(s.toUpperCase()));
1:             } catch (Exception e)
1:             {
1:                 throw new IllegalArgumentException(s + " is not a valid sampler, choose one of: " + join(Sampler.values(), ", "));
1:             }
1:         }
1: 
1:         Map<Sampler, CompositeData> results;
1:         try
1:         {
1:             results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets);
1:         } catch (OpenDataException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         boolean first = true;
1:         for(Entry<Sampler, CompositeData> result : results.entrySet())
1:         {
1:             CompositeData sampling = result.getValue();
1:             // weird casting for http://bugs.sun.com/view_bug.do?bug_id=6548436
1:             List<CompositeData> topk = (List<CompositeData>) (Object) Lists.newArrayList(((TabularDataSupport) sampling.get("partitions")).values());
1:             Collections.sort(topk, new Ordering<CompositeData>()
1:             {
1:                 public int compare(CompositeData left, CompositeData right)
1:                 {
1:                     return Long.compare((long) right.get("count"), (long) left.get("count"));
1:                 }
1:             });
1:             if(!first)
1:                 System.out.println();
1:             System.out.println(result.getKey().toString()+ " Sampler:");
0:             System.out.printf("  Cardinality: ~%d (%d capacity)%n", (long) sampling.get("cardinality"), size);
1:             System.out.printf("  Top %d partitions:%n", topCount);
1:             if (topk.size() == 0)
1:             {
1:                 System.out.println("\tNothing recorded during sampling period...");
1:             } else
1:             {
1:                 int offset = 0;
1:                 for (CompositeData entry : topk)
1:                     offset = Math.max(offset, entry.get("string").toString().length());
1:                 System.out.printf("\t%-" + offset + "s%10s%10s%n", "Partition", "Count", "+/-");
1:                 for (CompositeData entry : topk)
1:                     System.out.printf("\t%-" + offset + "s%10d%10d%n", entry.get("string").toString(), entry.get("count"), entry.get("error"));
1:             }
1:             first = false;
1:         }
1:     }
1: }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.metrics.TableMetrics;
1: import org.apache.cassandra.metrics.TableMetrics.Sampler;
/////////////////////////////////////////////////////////////////////////
1:     private String samplers = join(TableMetrics.Sampler.values(), ',');
============================================================================