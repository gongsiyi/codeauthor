1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: 
1:7b0c716: package org.apache.cassandra.auth;
1:7b0c716: 
1:7b0c716: import java.util.*;
1:7b0c716: import java.util.stream.Collectors;
1:7b0c716: 
1:7b0c716: import org.apache.cassandra.exceptions.ConfigurationException;
1:7b0c716: import org.apache.cassandra.exceptions.RequestExecutionException;
1:7b0c716: import org.apache.cassandra.exceptions.RequestValidationException;
1:7b0c716: import org.apache.cassandra.utils.Pair;
1:7b0c716: 
1:7b0c716: public class StubAuthorizer implements IAuthorizer
1:7b0c716: {
1:7b0c716:     Map<Pair<String, IResource>, Set<Permission>> userPermissions = new HashMap<>();
1:7b0c716: 
1:7b0c716:     public void clear()
1:7b0c716:     {
1:7b0c716:         userPermissions.clear();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public Set<Permission> authorize(AuthenticatedUser user, IResource resource)
1:7b0c716:     {
1:7b0c716:         Pair<String, IResource> key = Pair.create(user.getName(), resource);
1:7b0c716:         Set<Permission> perms = userPermissions.get(key);
1:7b0c716:         return perms != null ? perms : Collections.emptySet();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void grant(AuthenticatedUser performer,
1:7b0c716:                       Set<Permission> permissions,
1:7b0c716:                       IResource resource,
1:7b0c716:                       RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:7b0c716:     {
1:7b0c716:         Pair<String, IResource> key = Pair.create(grantee.getRoleName(), resource);
1:7b0c716:         Set<Permission> perms = userPermissions.get(key);
1:7b0c716:         if (null == perms)
1:7b0c716:         {
1:7b0c716:             perms = new HashSet<>();
1:7b0c716:             userPermissions.put(key, perms);
1:7b0c716:         }
1:7b0c716:         perms.addAll(permissions);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void revoke(AuthenticatedUser performer,
1:7b0c716:                        Set<Permission> permissions,
1:7b0c716:                        IResource resource,
1:7b0c716:                        RoleResource revokee) throws RequestValidationException, RequestExecutionException
1:7b0c716:     {
1:7b0c716:         Pair<String, IResource> key = Pair.create(revokee.getRoleName(), resource);
1:7b0c716:         Set<Permission> perms = userPermissions.get(key);
1:7b0c716:         if (null != perms)
1:7b0c716:         {
1:7b0c716:             perms.removeAll(permissions);
1:7b0c716:             if (perms.isEmpty())
1:7b0c716:                 userPermissions.remove(key);
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public Set<PermissionDetails> list(AuthenticatedUser performer,
1:7b0c716:                                        Set<Permission> permissions,
1:7b0c716:                                        IResource resource,
1:7b0c716:                                        RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:7b0c716:     {
1:7b0c716:         return userPermissions.entrySet()
1:7b0c716:                               .stream()
1:7b0c716:                               .filter(entry -> entry.getKey().left.equals(grantee.getRoleName())
1:7b0c716:                                                && (resource == null || entry.getKey().right.equals(resource)))
1:7b0c716:                               .flatMap(entry -> entry.getValue()
1:7b0c716:                                                      .stream()
1:7b0c716:                                                      .filter(permissions::contains)
1:7b0c716:                                                      .map(p -> new PermissionDetails(entry.getKey().left,
1:7b0c716:                                                                                      entry.getKey().right,
1:7b0c716:                                                                                      p)))
1:7b0c716:                               .collect(Collectors.toSet());
1:7b0c716: 
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void revokeAllFrom(RoleResource revokee)
1:7b0c716:     {
1:7b0c716:         for (Pair<String, IResource> key : userPermissions.keySet())
1:7b0c716:             if (key.left.equals(revokee.getRoleName()))
1:7b0c716:                 userPermissions.remove(key);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void revokeAllOn(IResource droppedResource)
1:7b0c716:     {
1:7b0c716:         for (Pair<String, IResource> key : userPermissions.keySet())
1:7b0c716:             if (key.right.equals(droppedResource))
1:7b0c716:                 userPermissions.remove(key);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public Set<? extends IResource> protectedResources()
1:7b0c716:     {
1:7b0c716:         return Collections.emptySet();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void validateConfiguration() throws ConfigurationException
1:7b0c716:     {
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public void setup()
1:7b0c716:     {
1:7b0c716:     }
1:7b0c716: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.auth;
1: 
1: import java.util.*;
1: import java.util.stream.Collectors;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class StubAuthorizer implements IAuthorizer
1: {
1:     Map<Pair<String, IResource>, Set<Permission>> userPermissions = new HashMap<>();
1: 
1:     public void clear()
1:     {
1:         userPermissions.clear();
1:     }
1: 
1:     public Set<Permission> authorize(AuthenticatedUser user, IResource resource)
1:     {
1:         Pair<String, IResource> key = Pair.create(user.getName(), resource);
1:         Set<Permission> perms = userPermissions.get(key);
1:         return perms != null ? perms : Collections.emptySet();
1:     }
1: 
1:     public void grant(AuthenticatedUser performer,
1:                       Set<Permission> permissions,
1:                       IResource resource,
1:                       RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:     {
1:         Pair<String, IResource> key = Pair.create(grantee.getRoleName(), resource);
1:         Set<Permission> perms = userPermissions.get(key);
1:         if (null == perms)
1:         {
1:             perms = new HashSet<>();
1:             userPermissions.put(key, perms);
1:         }
1:         perms.addAll(permissions);
1:     }
1: 
1:     public void revoke(AuthenticatedUser performer,
1:                        Set<Permission> permissions,
1:                        IResource resource,
1:                        RoleResource revokee) throws RequestValidationException, RequestExecutionException
1:     {
1:         Pair<String, IResource> key = Pair.create(revokee.getRoleName(), resource);
1:         Set<Permission> perms = userPermissions.get(key);
1:         if (null != perms)
1:         {
1:             perms.removeAll(permissions);
1:             if (perms.isEmpty())
1:                 userPermissions.remove(key);
1:         }
1:     }
1: 
1:     public Set<PermissionDetails> list(AuthenticatedUser performer,
1:                                        Set<Permission> permissions,
1:                                        IResource resource,
1:                                        RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:     {
1:         return userPermissions.entrySet()
1:                               .stream()
1:                               .filter(entry -> entry.getKey().left.equals(grantee.getRoleName())
1:                                                && (resource == null || entry.getKey().right.equals(resource)))
1:                               .flatMap(entry -> entry.getValue()
1:                                                      .stream()
1:                                                      .filter(permissions::contains)
1:                                                      .map(p -> new PermissionDetails(entry.getKey().left,
1:                                                                                      entry.getKey().right,
1:                                                                                      p)))
1:                               .collect(Collectors.toSet());
1: 
1:     }
1: 
1:     public void revokeAllFrom(RoleResource revokee)
1:     {
1:         for (Pair<String, IResource> key : userPermissions.keySet())
1:             if (key.left.equals(revokee.getRoleName()))
1:                 userPermissions.remove(key);
1:     }
1: 
1:     public void revokeAllOn(IResource droppedResource)
1:     {
1:         for (Pair<String, IResource> key : userPermissions.keySet())
1:             if (key.right.equals(droppedResource))
1:                 userPermissions.remove(key);
1:     }
1: 
1:     public Set<? extends IResource> protectedResources()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
1:     public void validateConfiguration() throws ConfigurationException
1:     {
1:     }
1: 
1:     public void setup()
1:     {
1:     }
1: }
============================================================================