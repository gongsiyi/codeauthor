1:5a4253b: /*
1:5a4253b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a4253b:  * or more contributor license agreements.  See the NOTICE file
1:5a4253b:  * distributed with this work for additional information
1:5a4253b:  * regarding copyright ownership.  The ASF licenses this file
1:5a4253b:  * to you under the Apache License, Version 2.0 (the
1:5a4253b:  * "License"); you may not use this file except in compliance
1:5a4253b:  * with the License.  You may obtain a copy of the License at
1:5a4253b:  *
1:5a4253b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a4253b:  *
1:5a4253b:  * Unless required by applicable law or agreed to in writing, software
1:5a4253b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4253b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4253b:  * See the License for the specific language governing permissions and
1:5a4253b:  * limitations under the License.
1:5a4253b:  */
2:5a4253b: 
1:5a4253b: package org.apache.cassandra.cql3;
1:5a4253b: 
1:5a4253b: import java.util.*;
1:5a4253b: 
1:5a4253b: import org.junit.After;
1:5a4253b: import org.junit.Before;
1:5a4253b: import org.junit.BeforeClass;
1:5a4253b: import org.junit.Test;
1:5a4253b: 
1:5a4253b: import com.datastax.driver.core.exceptions.InvalidQueryException;
1:5a4253b: import junit.framework.Assert;
1:5a4253b: 
1:5051c0f: import org.apache.cassandra.concurrent.SEPExecutor;
1:5051c0f: import org.apache.cassandra.concurrent.Stage;
1:5051c0f: import org.apache.cassandra.concurrent.StageManager;
1:5051c0f: import org.apache.cassandra.config.CFMetaData;
1:5051c0f: import org.apache.cassandra.config.ColumnDefinition;
1:5051c0f: import org.apache.cassandra.db.ColumnFamilyStore;
1:5051c0f: import org.apache.cassandra.db.Keyspace;
1:5a4253b: import org.apache.cassandra.db.SystemKeyspace;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:5051c0f: import org.apache.cassandra.utils.FBUtilities;
1:5a4253b: 
1:5a4253b: public class ViewFilteringTest extends CQLTester
2:5a4253b: {
1:e0adc16:     ProtocolVersion protocolVersion = ProtocolVersion.V4;
1:5a4253b:     private final List<String> views = new ArrayList<>();
1:5a4253b: 
1:5a4253b:     @BeforeClass
1:5a4253b:     public static void startup()
1:5a4253b:     {
1:5a4253b:         requireNetwork();
2:5a4253b:     }
1:5a4253b:     @Before
1:5a4253b:     public void begin()
1:5a4253b:     {
1:5a4253b:         views.clear();
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @After
1:5a4253b:     public void end() throws Throwable
1:5a4253b:     {
1:5a4253b:         for (String viewName : views)
1:5a4253b:             executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + viewName);
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     private void createView(String name, String query) throws Throwable
1:5a4253b:     {
1:5a4253b:         executeNet(protocolVersion, String.format(query, name));
1:5a4253b:         // If exception is thrown, the view will not be added to the list; since it shouldn't have been created, this is
1:5a4253b:         // the desired behavior
1:5a4253b:         views.add(name);
1:5a4253b:     }
1:5a4253b: 
1:5051c0f:     private void updateView(String query, Object... params) throws Throwable
1:5051c0f:     {
1:5051c0f:         executeNet(protocolVersion, query, params);
1:5051c0f:         while (!(((SEPExecutor) StageManager.getStage(Stage.VIEW_MUTATION)).getPendingTasks() == 0
1:5051c0f:             && ((SEPExecutor) StageManager.getStage(Stage.VIEW_MUTATION)).getActiveCount() == 0))
1:5051c0f:         {
1:5051c0f:             Thread.sleep(1);
1:5051c0f:         }
1:5051c0f:     }
1:5051c0f: 
1:5a4253b:     private void dropView(String name) throws Throwable
1:5a4253b:     {
1:5a4253b:         executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + name);
1:5a4253b:         views.remove(name);
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testMVCreationSelectRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY((a, b), c, d))");
1:5a4253b: 
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:         // IS NOT NULL is required on all PK statements that are not otherwise restricted
1:5a4253b:         List<String> badStatements = Arrays.asList(
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE b IS NOT NULL AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = ? AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = blobAsInt(?) AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s PRIMARY KEY (a, b, c, d)"
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         for (String badStatement : badStatements)
1:5a4253b:         {
2:5a4253b:             try
1:5a4253b:             {
1:5a4253b:                 createView("mv1_test", badStatement);
1:5a4253b:                 Assert.fail("Create MV statement should have failed due to missing IS NOT NULL restriction: " + badStatement);
1:5a4253b:             }
2:5a4253b:             catch (InvalidQueryException exc) {}
1:5a4253b:         }
1:5a4253b: 
1:5a4253b:         List<String> goodStatements = Arrays.asList(
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 AND d IS NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c > 1 AND d IS NOT NULL PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c = 1 AND d IN (1, 2, 3) PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) = (1, 1) PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) > (1, 1) PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) IN ((1, 1), (2, 2)) PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = (int) 1 AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = blobAsInt(intAsBlob(1)) AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)"
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         for (int i = 0; i < goodStatements.size(); i++)
1:5a4253b:         {
1:5a4253b:             try
1:5a4253b:             {
1:5a4253b:                 createView("mv" + i + "_test", goodStatements.get(i));
1:5a4253b:             }
1:5a4253b:             catch (Exception e)
1:5a4253b:             {
1:5a4253b:                 throw new RuntimeException("MV creation failed: " + goodStatements.get(i), e);
1:5a4253b:             }
1:5a4253b: 
1:5a4253b:             try
1:5a4253b:             {
1:5a4253b:                 executeNet(protocolVersion, "ALTER MATERIALIZED VIEW mv" + i + "_test WITH compaction = { 'class' : 'LeveledCompactionStrategy' }");
1:5a4253b:             }
1:5a4253b:             catch (Exception e)
1:5a4253b:             {
1:5a4253b:                 throw new RuntimeException("MV alter failed: " + goodStatements.get(i), e);
1:5a4253b:             }
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testCaseSensitivity() throws Throwable
1:5a4253b:     {
1:5a4253b:         createTable("CREATE TABLE %s (\"theKey\" int, \"theClustering\" int, \"the\"\"Value\" int, PRIMARY KEY (\"theKey\", \"theClustering\"))");
1:5a4253b: 
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 0, 1, 0);
1:5a4253b:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 1, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 1, 1, 0);
1:5a4253b: 
1:5a4253b:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:5a4253b:                 "WHERE \"theKey\" = 1 AND \"theClustering\" = 1 AND \"the\"\"Value\" IS NOT NULL " +
1:5a4253b:                 "PRIMARY KEY (\"theKey\", \"theClustering\")");
1:5a4253b: 
1:5a4253b:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:5a4253b:             Thread.sleep(10);
1:5a4253b:         createView("mv_test2", "CREATE MATERIALIZED VIEW %s AS SELECT \"theKey\", \"theClustering\", \"the\"\"Value\" FROM %%s " +
1:5a4253b:                 "WHERE \"theKey\" = 1 AND \"theClustering\" = 1 AND \"the\"\"Value\" IS NOT NULL " +
1:5a4253b:                 "PRIMARY KEY (\"theKey\", \"theClustering\")");
1:5a4253b:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test2"))
1:5a4253b:             Thread.sleep(10);
1:5a4253b: 
1:5a4253b:         for (String mvname : Arrays.asList("mv_test", "mv_test2"))
1:5a4253b:         {
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT \"theKey\", \"theClustering\", \"the\"\"Value\" FROM " + mvname),
1:5a4253b:                     row(1, 1, 0)
1:5a4253b:             );
1:5a4253b:         }
1:5a4253b: 
1:5a4253b:         executeNet(protocolVersion, "ALTER TABLE %s RENAME \"theClustering\" TO \"Col\"");
1:5a4253b: 
1:5a4253b:         for (String mvname : Arrays.asList("mv_test", "mv_test2"))
1:5a4253b:         {
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT \"theKey\", \"Col\", \"the\"\"Value\" FROM " + mvname),
1:5a4253b:                     row(1, 1, 0)
1:5a4253b:             );
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testFilterWithFunction() throws Throwable
1:5a4253b:     {
1:5a4253b:         createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1:5a4253b: 
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 1, 1);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 0, 2);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 1, 3);
1:5a4253b: 
1:5a4253b:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:5a4253b:                 "WHERE a = blobAsInt(intAsBlob(1)) AND b IS NOT NULL " +
1:5a4253b:                 "PRIMARY KEY (a, b)");
1:5a4253b: 
1:5a4253b:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:5a4253b:             Thread.sleep(10);
1:5a4253b: 
1:5a4253b:         assertRows(execute("SELECT a, b, c FROM mv_test"),
1:5a4253b:                 row(1, 0, 2),
1:5a4253b:                 row(1, 1, 3)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         executeNet(protocolVersion, "ALTER TABLE %s RENAME a TO foo");
1:5a4253b: 
1:5a4253b:         assertRows(execute("SELECT foo, b, c FROM mv_test"),
1:5a4253b:                 row(1, 0, 2),
1:5a4253b:                 row(1, 1, 3)
1:5a4253b:         );
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testFilterWithTypecast() throws Throwable
1:5a4253b:     {
1:5a4253b:         createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1:5a4253b: 
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 1, 1);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 0, 2);
1:5a4253b:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 1, 3);
1:5a4253b: 
1:5a4253b:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:5a4253b:                 "WHERE a = (int) 1 AND b IS NOT NULL " +
1:5a4253b:                 "PRIMARY KEY (a, b)");
1:5a4253b: 
1:5a4253b:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:5a4253b:             Thread.sleep(10);
1:5a4253b: 
1:5a4253b:         assertRows(execute("SELECT a, b, c FROM mv_test"),
1:5a4253b:                 row(1, 0, 2),
1:5a4253b:                 row(1, 1, 3)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         executeNet(protocolVersion, "ALTER TABLE %s RENAME a TO foo");
1:5a4253b: 
1:5a4253b:         assertRows(execute("SELECT foo, b, c FROM mv_test"),
1:5a4253b:                 row(1, 0, 2),
1:5a4253b:                 row(1, 1, 3)
1:5a4253b:         );
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:3f49c32:     public void testPartitionKeyFilteringUnrestrictedPart() throws Throwable
1:3f49c32:     {
1:3f49c32:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:3f49c32:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:3f49c32:         {
1:3f49c32:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:3f49c32: 
1:3f49c32:             execute("USE " + keyspace());
1:3f49c32:             executeNet(protocolVersion, "USE " + keyspace());
1:3f49c32: 
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:3f49c32: 
1:3f49c32:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:3f49c32: 
1:3f49c32:             // only accept rows where a = 1
1:3f49c32:             String viewName= "mv_test" + i;
1:3f49c32:             createView(viewName, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:3f49c32: 
1:3f49c32:             waitForView(keyspace(), viewName);
1:3f49c32: 
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 0),
1:3f49c32:                                     row(1, 1, 1, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // insert new rows that do not match the filter
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 0),
1:3f49c32:                                     row(1, 1, 1, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // insert new row that does match the filter
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 0),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // update rows that don't match the filter
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 0),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // update a row that does match the filter
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 1),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete rows that don't match the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 0, 1),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete a row that does match the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 0, 0, 0),
1:3f49c32:                                     row(1, 0, 1, 0),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete a partition that matches the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 1, 1, 0),
1:3f49c32:                                     row(1, 1, 2, 0));
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:3f49c32:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:3f49c32:         }
1:3f49c32:     }
1:3f49c32: 
1:3f49c32:     @Test
1:3f49c32:     public void testPartitionKeyFilteringWithSlice() throws Throwable
1:3f49c32:     {
1:3f49c32:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:3f49c32:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:3f49c32:         {
1:3f49c32:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:3f49c32: 
1:3f49c32:             execute("USE " + keyspace());
1:3f49c32:             executeNet(protocolVersion, "USE " + keyspace());
1:3f49c32: 
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0,  1, 1);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 10, 1, 2);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0,  2, 1);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 10, 2, 2);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1,  3, 1);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 10, 3, 2);
1:3f49c32: 
1:3f49c32:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:3f49c32: 
1:3f49c32:             // only accept rows where a = 1
1:3f49c32:             String viewName= "mv_test" + i;
1:3f49c32:             createView(viewName, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a > 0 AND b > 5 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:3f49c32: 
1:3f49c32:             waitForView(keyspace(), viewName);
1:3f49c32: 
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // insert new rows that do not match the filter
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // insert new row that does match the filter
1:3f49c32:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 3, 10, 4, 2);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 2)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // update rows that don't match the filter
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 2)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // update a row that does match the filter
1:3f49c32:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 100, 3, 10, 4);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 100)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete rows that don't match the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 100)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete a row that does match the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(1, 10, 2, 2),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 100)
1:3f49c32:             );
1:3f49c32: 
1:3f49c32:             // delete a partition that matches the filter
1:3f49c32:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 10);
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:3f49c32:                                     row(2, 10, 3, 2),
1:3f49c32:                                     row(3, 10, 4, 100));
1:3f49c32:         }
1:3f49c32:     }
1:3f49c32: 
1:3f49c32: 
1:3f49c32: 
1:3f49c32: 
1:3f49c32:     private static void waitForView(String keyspace, String view) throws InterruptedException
1:3f49c32:     {
1:3f49c32:         while (!SystemKeyspace.isViewBuilt(keyspace, view))
1:3f49c32:             Thread.sleep(10);
1:3f49c32:     }
1:3f49c32: 
1:3f49c32:     @Test
1:5a4253b:     public void testPartitionKeyRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where a = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 0, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testCompoundPartitionKeyRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where a = 1 and b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 0, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:5a4253b:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testCompoundPartitionKeyRestrictionsNotIncludeAll() throws Throwable
1:5a4253b:     {
1:5a4253b:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:         // only accept rows where a = 1 and b = 1, don't include column d in the selection
1:5a4253b:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT a, b, c FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL PRIMARY KEY ((a, b), c)");
1:5a4253b: 
1:5a4253b:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:5a4253b:             Thread.sleep(10);
1:5a4253b: 
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:             row(1, 1, 0),
1:5a4253b:             row(1, 1, 1)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // insert new rows that do not match the filter
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 0, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 0),
1:5a4253b:                 row(1, 1, 1)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // insert new row that does match the filter
1:5a4253b:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 0),
1:5a4253b:                 row(1, 1, 1),
1:5a4253b:                 row(1, 1, 2)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // update rows that don't match the filter
1:5a4253b:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:5a4253b:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 0, 0);
1:5a4253b:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 0),
1:5a4253b:                 row(1, 1, 1),
1:5a4253b:                 row(1, 1, 2)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // update a row that does match the filter
1:5a4253b:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 0),
1:5a4253b:                 row(1, 1, 1),
1:5a4253b:                 row(1, 1, 2)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // delete rows that don't match the filter
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 0, 0);
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 0),
1:5a4253b:                 row(1, 1, 1),
1:5a4253b:                 row(1, 1, 2)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // delete a row that does match the filter
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:         assertRows(execute("SELECT * FROM mv_test"),
1:5a4253b:                 row(1, 1, 1),
1:5a4253b:                 row(1, 1, 2)
1:5a4253b:         );
1:5a4253b: 
1:5a4253b:         // delete a partition that matches the filter
1:5a4253b:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:5a4253b:         assertEmpty(execute("SELECT * FROM mv_test"));
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testClusteringKeyEQRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b = 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 2, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                 row(0, 1, 0, 0),
1:5a4253b:                 row(0, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testClusteringKeySliceRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b >= 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testClusteringKeyINRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IN (1, 2) AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testClusteringKeyMultiColumnRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND (b, c) >= (1, 0) PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, -1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 0, 1),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 1, 2, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 1, 0, 0),
1:5a4253b:                     row(0, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testClusteringKeyFilteringRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, -1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5051c0f:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 2, 1, 1, 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 2),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, -1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 2),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(0, 0, 1, 0),
1:5a4253b:                     row(0, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:2998bb3:             // insert a partition with one matching and one non-matching row using a batch (CASSANDRA-10614)
1:2998bb3:             String tableName = KEYSPACE + "." + currentTable();
1:2998bb3:             execute("BEGIN BATCH " +
1:2998bb3:                     "INSERT INTO " + tableName + " (a, b, c, d) VALUES (?, ?, ?, ?); " +
1:2998bb3:                     "INSERT INTO " + tableName + " (a, b, c, d) VALUES (?, ?, ?, ?); " +
1:2998bb3:                     "APPLY BATCH",
1:2998bb3:                     4, 4, 0, 0,
1:2998bb3:                     4, 4, 1, 1);
1:2998bb3:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:2998bb3:                     row(0, 0, 1, 0),
1:2998bb3:                     row(0, 1, 1, 0),
1:2998bb3:                     row(4, 4, 1, 1)
1:2998bb3:             );
1:2998bb3: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testPartitionKeyAndClusteringKeyFilteringRestrictions() throws Throwable
1:5a4253b:     {
1:5a4253b:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:5a4253b:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:5a4253b:         {
1:5a4253b:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:5a4253b: 
1:5a4253b:             execute("USE " + keyspace());
1:5a4253b:             executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5a4253b: 
1:5a4253b:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             // only accept rows where b = 1
1:5a4253b:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c = 1 PRIMARY KEY " + mvPrimaryKeys.get(i));
1:5a4253b: 
1:5a4253b:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:5a4253b:                 Thread.sleep(10);
1:5a4253b: 
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new rows that do not match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // insert new row that does match the filter
1:5a4253b:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update rows that don't match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 0, 1, 1, 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // update a row that does match the filter
1:5a4253b:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 2, 1, 1, 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 2),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete rows that don't match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 1);
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 0);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 1, 1, 2),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a row that does match the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 1);
1:5a4253b:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:5a4253b:                     row(1, 0, 1, 0),
1:5a4253b:                     row(1, 2, 1, 0)
1:5a4253b:             );
1:5a4253b: 
1:5a4253b:             // delete a partition that matches the filter
1:5a4253b:             execute("DELETE FROM %s WHERE a = ?", 1);
1:5a4253b:             assertEmpty(execute("SELECT a, b, c, d FROM mv_test" + i));
1:5a4253b: 
1:5a4253b:             dropView("mv_test" + i);
1:5a4253b:             dropTable("DROP TABLE %s");
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Test
1:5a4253b:     public void testAllTypes() throws Throwable
1:5a4253b:     {
1:5a4253b:         String myType = createType("CREATE TYPE %s (a int, b uuid, c set<text>)");
1:5a4253b:         String columnNames = "asciival, " +
1:5a4253b:                              "bigintval, " +
1:5a4253b:                              "blobval, " +
1:5a4253b:                              "booleanval, " +
1:5a4253b:                              "dateval, " +
1:5a4253b:                              "decimalval, " +
1:5a4253b:                              "doubleval, " +
1:5a4253b:                              "floatval, " +
1:5a4253b:                              "inetval, " +
1:5a4253b:                              "intval, " +
1:5a4253b:                              "textval, " +
1:5a4253b:                              "timeval, " +
1:5a4253b:                              "timestampval, " +
1:5a4253b:                              "timeuuidval, " +
1:5a4253b:                              "uuidval," +
1:5a4253b:                              "varcharval, " +
1:5a4253b:                              "varintval, " +
1:5a4253b:                              "frozenlistval, " +
1:5a4253b:                              "frozensetval, " +
1:5a4253b:                              "frozenmapval, " +
1:5a4253b:                              "tupleval, " +
1:5a4253b:                              "udtval";
1:5a4253b: 
1:5a4253b:         createTable(
1:5a4253b:                 "CREATE TABLE %s (" +
1:5a4253b:                         "asciival ascii, " +
1:5a4253b:                         "bigintval bigint, " +
1:5a4253b:                         "blobval blob, " +
1:5a4253b:                         "booleanval boolean, " +
1:5a4253b:                         "dateval date, " +
1:5a4253b:                         "decimalval decimal, " +
1:5a4253b:                         "doubleval double, " +
1:5a4253b:                         "floatval float, " +
1:5a4253b:                         "inetval inet, " +
1:5a4253b:                         "intval int, " +
1:5a4253b:                         "textval text, " +
1:5a4253b:                         "timeval time, " +
1:5a4253b:                         "timestampval timestamp, " +
1:5a4253b:                         "timeuuidval timeuuid, " +
1:5a4253b:                         "uuidval uuid," +
1:5a4253b:                         "varcharval varchar, " +
1:5a4253b:                         "varintval varint, " +
1:5a4253b:                         "frozenlistval frozen<list<int>>, " +
1:5a4253b:                         "frozensetval frozen<set<uuid>>, " +
1:5a4253b:                         "frozenmapval frozen<map<ascii, int>>," +
1:5a4253b:                         "tupleval frozen<tuple<int, ascii, uuid>>," +
1:5a4253b:                         "udtval frozen<" + myType + ">, " +
1:5a4253b:                         "PRIMARY KEY (" + columnNames + "))");
1:5a4253b: 
1:5a4253b:         execute("USE " + keyspace());
1:5a4253b:         executeNet(protocolVersion, "USE " + keyspace());
1:5a4253b: 
1:5a4253b: 
1:5a4253b:         createView(
1:5a4253b:                 "mv_test",
1:5a4253b:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " +
1:5a4253b:                         "asciival = 'abc' AND " +
1:5a4253b:                         "bigintval = 123 AND " +
1:5a4253b:                         "blobval = 0xfeed AND " +
1:5a4253b:                         "booleanval = true AND " +
1:5a4253b:                         "dateval = '1987-03-23' AND " +
1:5a4253b:                         "decimalval = 123.123 AND " +
1:5a4253b:                         "doubleval = 123.123 AND " +
1:5a4253b:                         "floatval = 123.123 AND " +
1:5a4253b:                         "inetval = '127.0.0.1' AND " +
1:5a4253b:                         "intval = 123 AND " +
1:5a4253b:                         "textval = 'abc' AND " +
1:5a4253b:                         "timeval = '07:35:07.000111222' AND " +
1:5a4253b:                         "timestampval = 123123123 AND " +
1:5a4253b:                         "timeuuidval = 6BDDC89A-5644-11E4-97FC-56847AFE9799 AND " +
1:5a4253b:                         "uuidval = 6BDDC89A-5644-11E4-97FC-56847AFE9799 AND " +
1:5a4253b:                         "varcharval = 'abc' AND " +
1:5a4253b:                         "varintval = 123123123 AND " +
1:5a4253b:                         "frozenlistval = [1, 2, 3] AND " +
1:5a4253b:                         "frozensetval = {6BDDC89A-5644-11E4-97FC-56847AFE9799} AND " +
1:5a4253b:                         "frozenmapval = {'a': 1, 'b': 2} AND " +
1:5a4253b:                         "tupleval = (1, 'foobar', 6BDDC89A-5644-11E4-97FC-56847AFE9799) AND " +
1:5a4253b:                         "udtval = {a: 1, b: 6BDDC89A-5644-11E4-97FC-56847AFE9799, c: {'foo', 'bar'}} " +
1:5a4253b:                         "PRIMARY KEY (" + columnNames + ")");
1:5a4253b: 
1:5a4253b:         execute("INSERT INTO %s (" + columnNames + ") VALUES (" +
1:5a4253b:                 "'abc'," +
1:5a4253b:                 "123," +
1:5a4253b:                 "0xfeed," +
1:5a4253b:                 "true," +
1:5a4253b:                 "'1987-03-23'," +
1:5a4253b:                 "123.123," +
1:5a4253b:                 "123.123," +
1:5a4253b:                 "123.123," +
1:5a4253b:                 "'127.0.0.1'," +
1:5a4253b:                 "123," +
1:5a4253b:                 "'abc'," +
1:5a4253b:                 "'07:35:07.000111222'," +
1:5a4253b:                 "123123123," +
1:5a4253b:                 "6BDDC89A-5644-11E4-97FC-56847AFE9799," +
1:5a4253b:                 "6BDDC89A-5644-11E4-97FC-56847AFE9799," +
1:5a4253b:                 "'abc'," +
1:5a4253b:                 "123123123," +
1:5a4253b:                 "[1, 2, 3]," +
1:5a4253b:                 "{6BDDC89A-5644-11E4-97FC-56847AFE9799}," +
1:5a4253b:                 "{'a': 1, 'b': 2}," +
1:5a4253b:                 "(1, 'foobar', 6BDDC89A-5644-11E4-97FC-56847AFE9799)," +
1:5a4253b:                 "{a: 1, b: 6BDDC89A-5644-11E4-97FC-56847AFE9799, c: {'foo', 'bar'}})");
1:5a4253b: 
1:5a4253b:         assert !execute("SELECT * FROM mv_test").isEmpty();
1:5051c0f: 
1:5a4253b:         executeNet(protocolVersion, "ALTER TABLE %s RENAME inetval TO foo");
1:5a4253b:         assert !execute("SELECT * FROM mv_test").isEmpty();
1:5a4253b:     }
1:5051c0f: 
1:5051c0f:     @Test
1:5051c0f:     public void testMVCreationWithNonPrimaryRestrictions() throws Throwable
1:5051c0f:     {
1:5051c0f:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b))");
1:5051c0f: 
1:5051c0f:         execute("USE " + keyspace());
1:5051c0f:         executeNet(protocolVersion, "USE " + keyspace());
1:5051c0f: 
1:5051c0f:         try {
1:5051c0f:             createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE b IS NOT NULL AND c IS NOT NULL AND d = 1 PRIMARY KEY (a, b, c)");
1:5051c0f:             dropView("mv_test");
1:5051c0f:         } catch(Exception e) {
1:5051c0f:             throw new RuntimeException("MV creation with non primary column restrictions failed.", e);
1:5051c0f:         }
1:5051c0f: 
1:5051c0f:         dropTable("DROP TABLE %s");
1:5051c0f:     }
1:5051c0f: 
1:5051c0f:     @Test
1:5051c0f:     public void testNonPrimaryRestrictions() throws Throwable
1:5051c0f:     {
1:5051c0f:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b))");
1:5051c0f: 
1:5051c0f:         execute("USE " + keyspace());
1:5051c0f:         executeNet(protocolVersion, "USE " + keyspace());
1:5051c0f: 
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:5051c0f: 
1:5051c0f:         // only accept rows where c = 1
1:5051c0f:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (a, b, c)");
1:5051c0f: 
1:5051c0f:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:5051c0f:             Thread.sleep(10);
1:5051c0f: 
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 0),
1:5051c0f:             row(1, 1, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // insert new rows that do not match the filter
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 2, 0);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 0),
1:5051c0f:             row(1, 1, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // insert new row that does match the filter
1:5051c0f:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 0),
1:5051c0f:             row(1, 1, 1, 0),
1:5051c0f:             row(1, 2, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // update rows that don't match the filter
1:5051c0f:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 2, 2, 0);
1:5051c0f:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 1, 2, 1);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 0),
1:5051c0f:             row(1, 1, 1, 0),
1:5051c0f:             row(1, 2, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // update a row that does match the filter
1:5051c0f:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 1, 1, 0);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 1),
1:5051c0f:             row(1, 1, 1, 0),
1:5051c0f:             row(1, 2, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // delete rows that don't match the filter
1:5051c0f:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 2, 0);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 1),
1:5051c0f:             row(1, 1, 1, 0),
1:5051c0f:             row(1, 2, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // delete a row that does match the filter
1:5051c0f:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 2);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5051c0f:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 1),
1:5051c0f:             row(1, 1, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         // delete a partition that matches the filter
1:5051c0f:         execute("DELETE FROM %s WHERE a = ?", 1);
1:5051c0f:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:5a4253b:             row(0, 0, 1, 0),
1:5051c0f:             row(0, 1, 1, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         dropView("mv_test");
1:5051c0f:         dropTable("DROP TABLE %s");
1:5051c0f:     }
1:5a4253b: 
1:5051c0f:     @Test
1:5051c0f:     public void complexRestrictedTimestampUpdateTestWithFlush() throws Throwable
1:5051c0f:     {
1:5051c0f:         complexRestrictedTimestampUpdateTest(true);
1:5051c0f:     }
1:5051c0f: 
1:5051c0f:     @Test
1:5051c0f:     public void complexRestrictedTimestampUpdateTestWithoutFlush() throws Throwable
1:5051c0f:     {
1:5051c0f:         complexRestrictedTimestampUpdateTest(false);
1:5051c0f:     }
1:5051c0f: 
1:5051c0f:     public void complexRestrictedTimestampUpdateTest(boolean flush) throws Throwable
1:5051c0f:     {
1:5051c0f:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY (a, b))");
1:5051c0f: 
1:5051c0f:         execute("USE " + keyspace());
1:5051c0f:         executeNet(protocolVersion, "USE " + keyspace());
1:5051c0f:         Keyspace ks = Keyspace.open(keyspace());
1:5051c0f: 
1:5051c0f:         createView("mv", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (c, a, b)");
1:5051c0f:         ks.getColumnFamilyStore("mv").disableAutoCompaction();
1:5051c0f: 
1:5051c0f:         //Set initial values TS=0, matching the restriction and verify view
1:5051c0f:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, d) VALUES (0, 0, 1, 0) USING TIMESTAMP 0");
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0));
1:5051c0f: 
1:5051c0f:         if (flush)
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f: 
1:5051c0f:         //update c's timestamp TS=2
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET c = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0));
1:5051c0f: 
1:5051c0f:         if (flush)
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f: 
1:5051c0f:         //change c's value and TS=3, tombstones c=1 and adds c=0 record
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE a = ? and b = ? ", 0, 0, 0);
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 0, 0, 0));
1:5051c0f: 
1:5051c0f:         if(flush)
1:5051c0f:         {
1:5051c0f:             ks.getColumnFamilyStore("mv").forceMajorCompaction();
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f:         }
1:5051c0f: 
1:5051c0f:         //change c's value back to 1 with TS=4, check we can see d
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 4 SET c = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:5051c0f:         if (flush)
1:5051c0f:         {
1:5051c0f:             ks.getColumnFamilyStore("mv").forceMajorCompaction();
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f:         }
1:5051c0f: 
1:5051c0f:         assertRows(execute("SELECT d, e from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0, null));
1:5051c0f: 
1:5051c0f: 
1:5051c0f:         //Add e value @ TS=1
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 1 SET e = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:5051c0f:         assertRows(execute("SELECT d, e from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0, 1));
1:5051c0f: 
1:5051c0f:         if (flush)
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f: 
1:5051c0f: 
1:5051c0f:         //Change d value @ TS=2
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET d = ? WHERE a = ? and b = ? ", 2, 0, 0);
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(2));
1:5051c0f: 
1:5051c0f:         if (flush)
1:5051c0f:             FBUtilities.waitOnFutures(ks.flush());
1:5051c0f: 
1:5051c0f: 
1:5051c0f:         //Change d value @ TS=3
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET d = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(1));
1:5051c0f: 
1:5051c0f: 
1:5051c0f:         //Tombstone c
1:5051c0f:         executeNet(protocolVersion, "DELETE FROM %s WHERE a = ? and b = ?", 0, 0);
1:5051c0f:         assertRows(execute("SELECT d from mv"));
1:5051c0f: 
1:5051c0f:         //Add back without D
1:5051c0f:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (0, 0, 1)");
1:5051c0f: 
1:5051c0f:         //Make sure D doesn't pop back in.
1:5051c0f:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row((Object) null));
1:5051c0f: 
1:5051c0f: 
1:5051c0f:         //New partition
1:5051c0f:         // insert a row with timestamp 0
1:5051c0f:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, d, e) VALUES (?, ?, ?, ?, ?) USING TIMESTAMP 0", 1, 0, 1, 0, 0);
1:5051c0f: 
1:5051c0f:         // overwrite pk and e with timestamp 1, but don't overwrite d
1:5051c0f:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, e) VALUES (?, ?, ?, ?) USING TIMESTAMP 1", 1, 0, 1, 0);
1:5051c0f: 
1:5051c0f:         // delete with timestamp 0 (which should only delete d)
1:5051c0f:         executeNet(protocolVersion, "DELETE FROM %s USING TIMESTAMP 0 WHERE a = ? AND b = ?", 1, 0);
1:5051c0f:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:5051c0f:             row(1, 0, 1, null, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET c = ? WHERE a = ? AND b = ?", 1, 1, 1);
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE a = ? AND b = ?", 1, 1, 0);
1:5051c0f:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:5051c0f:             row(1, 0, 1, null, 0)
1:5051c0f:         );
1:5051c0f: 
1:5051c0f:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET d = ? WHERE a = ? AND b = ?", 0, 1, 0);
1:5051c0f:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:5051c0f:             row(1, 0, 1, 0, 0)
1:5051c0f:         );
1:5051c0f:     }
1:5051c0f: 
1:5051c0f:     @Test
1:5051c0f:     public void testRestrictedRegularColumnTimestampUpdates() throws Throwable
1:5051c0f:     {
1:5051c0f:         // Regression test for CASSANDRA-10910
1:5051c0f: 
1:5051c0f:         createTable("CREATE TABLE %s (" +
1:5051c0f:             "k int PRIMARY KEY, " +
1:5051c0f:             "c int, " +
1:5051c0f:             "val int)");
1:5051c0f: 
1:5051c0f:         execute("USE " + keyspace());
1:5051c0f:         executeNet(protocolVersion, "USE " + keyspace());
1:5051c0f: 
1:5051c0f:         createView("mv_rctstest", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE k IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (k,c)");
1:5051c0f: 
1:5051c0f:         updateView("UPDATE %s SET c = ?, val = ? WHERE k = ?", 0, 0, 0);
1:5051c0f:         updateView("UPDATE %s SET val = ? WHERE k = ?", 1, 0);
1:5051c0f:         updateView("UPDATE %s SET c = ? WHERE k = ?", 1, 0);
1:5051c0f:         assertRows(execute("SELECT c, k, val FROM mv_rctstest"), row(1, 0, 1));
1:5051c0f: 
1:5051c0f:         updateView("TRUNCATE %s");
1:5051c0f: 
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 1 SET c = ?, val = ? WHERE k = ?", 0, 0, 0);
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE k = ?", 1, 0);
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 2 SET val = ? WHERE k = ?", 1, 0);
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 4 SET c = ? WHERE k = ?", 1, 0);
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 3 SET val = ? WHERE k = ?", 2, 0);
1:5051c0f:         assertRows(execute("SELECT c, k, val FROM mv_rctstest"), row(1, 0, 2));
1:5051c0f:     }
1:5051c0f: 
1:5051c0f:     @Test
1:5051c0f:     public void testOldTimestampsWithRestrictions() throws Throwable
1:5051c0f:     {
1:5051c0f:         createTable("CREATE TABLE %s (" +
1:5051c0f:             "k int, " +
1:5051c0f:             "c int, " +
1:5051c0f:             "val text, " + "" +
1:5051c0f:             "PRIMARY KEY(k, c))");
1:5051c0f: 
1:5051c0f:         execute("USE " + keyspace());
1:5051c0f:         executeNet(protocolVersion, "USE " + keyspace());
1:5051c0f: 
1:5051c0f:         createView("mv_tstest", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE val IS NOT NULL AND k IS NOT NULL AND c IS NOT NULL AND val = 'baz' PRIMARY KEY (val,k,c)");
1:5051c0f: 
1:5051c0f:         for (int i = 0; i < 100; i++)
1:5051c0f:             updateView("INSERT into %s (k,c,val)VALUES(?,?,?)", 0, i % 2, "baz");
1:5051c0f: 
1:5051c0f:         Keyspace.open(keyspace()).getColumnFamilyStore(currentTable()).forceBlockingFlush();
1:5051c0f: 
1:5051c0f:         Assert.assertEquals(2, execute("select * from %s").size());
1:5051c0f:         Assert.assertEquals(2, execute("select * from mv_tstest").size());
1:5051c0f: 
1:5051c0f:         assertRows(execute("SELECT val from %s where k = 0 and c = 0"), row("baz"));
1:5051c0f:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0), row(1));
1:5051c0f: 
1:5051c0f:         //Make sure an old TS does nothing
1:5051c0f:         updateView("UPDATE %s USING TIMESTAMP 100 SET val = ? where k = ? AND c = ?", "bar", 0, 1);
1:5051c0f:         assertRows(execute("SELECT val from %s where k = 0 and c = 1"), row("baz"));
1:5051c0f:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0), row(1));
1:5051c0f:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "bar"));
1:5051c0f: 
1:5051c0f:         //Latest TS
1:5051c0f:         updateView("UPDATE %s SET val = ? where k = ? AND c = ?", "bar", 0, 1);
1:5051c0f:         assertRows(execute("SELECT val from %s where k = 0 and c = 1"), row("bar"));
1:5051c0f:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "bar"));
1:5051c0f:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0));
1:5051c0f:     }
1:5a4253b: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
1:     ProtocolVersion protocolVersion = ProtocolVersion.V4;
author:ZhaoYang
-------------------------------------------------------------------------------
commit:3f49c32
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testPartitionKeyFilteringUnrestrictedPart() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where a = 1
1:             String viewName= "mv_test" + i;
1:             createView(viewName, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             waitForView(keyspace(), viewName);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 0),
1:                                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 0),
1:                                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 0),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 0),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 1),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 0, 1),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 0, 0, 0),
1:                                     row(1, 0, 1, 0),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 1, 1, 0),
1:                                     row(1, 1, 2, 0));
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:         }
1:     }
1: 
1:     @Test
1:     public void testPartitionKeyFilteringWithSlice() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0,  1, 1);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 10, 1, 2);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0,  2, 1);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 10, 2, 2);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1,  3, 1);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 10, 3, 2);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where a = 1
1:             String viewName= "mv_test" + i;
1:             createView(viewName, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a > 0 AND b > 5 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             waitForView(keyspace(), viewName);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 3, 10, 4, 2);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 2)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 2)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 100, 3, 10, 4);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 100)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 100)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(1, 10, 2, 2),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 100)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 10);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                                     row(2, 10, 3, 2),
1:                                     row(3, 10, 4, 100));
1:         }
1:     }
1: 
1: 
1: 
1: 
1:     private static void waitForView(String keyspace, String view) throws InterruptedException
1:     {
1:         while (!SystemKeyspace.isViewBuilt(keyspace, view))
1:             Thread.sleep(10);
1:     }
1: 
1:     @Test
author:Jochen Niebuhr
-------------------------------------------------------------------------------
commit:5051c0f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.SEPExecutor;
1: import org.apache.cassandra.concurrent.Stage;
1: import org.apache.cassandra.concurrent.StageManager;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     private void updateView(String query, Object... params) throws Throwable
1:     {
1:         executeNet(protocolVersion, query, params);
1:         while (!(((SEPExecutor) StageManager.getStage(Stage.VIEW_MUTATION)).getPendingTasks() == 0
1:             && ((SEPExecutor) StageManager.getStage(Stage.VIEW_MUTATION)).getActiveCount() == 0))
1:         {
1:             Thread.sleep(1);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testMVCreationWithNonPrimaryRestrictions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         try {
1:             createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE b IS NOT NULL AND c IS NOT NULL AND d = 1 PRIMARY KEY (a, b, c)");
1:             dropView("mv_test");
1:         } catch(Exception e) {
1:             throw new RuntimeException("MV creation with non primary column restrictions failed.", e);
1:         }
1: 
1:         dropTable("DROP TABLE %s");
1:     }
1: 
1:     @Test
1:     public void testNonPrimaryRestrictions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:         // only accept rows where c = 1
1:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (a, b, c)");
1: 
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:             Thread.sleep(10);
1: 
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 0),
1:             row(1, 1, 1, 0)
1:         );
1: 
1:         // insert new rows that do not match the filter
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 2, 0);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 0),
1:             row(1, 1, 1, 0)
1:         );
1: 
1:         // insert new row that does match the filter
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 0),
1:             row(1, 1, 1, 0),
1:             row(1, 2, 1, 0)
1:         );
1: 
1:         // update rows that don't match the filter
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 2, 2, 0);
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 1, 2, 1);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 0),
1:             row(1, 1, 1, 0),
1:             row(1, 2, 1, 0)
1:         );
1: 
1:         // update a row that does match the filter
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ?", 1, 1, 0);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 1),
1:             row(1, 1, 1, 0),
1:             row(1, 2, 1, 0)
1:         );
1: 
1:         // delete rows that don't match the filter
1:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 2, 0);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 1),
1:             row(1, 1, 1, 0),
1:             row(1, 2, 1, 0)
1:         );
1: 
1:         // delete a row that does match the filter
1:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 2);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0),
1:             row(1, 0, 1, 1),
1:             row(1, 1, 1, 0)
1:         );
1: 
1:         // delete a partition that matches the filter
1:         execute("DELETE FROM %s WHERE a = ?", 1);
1:         assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test"),
1:             row(0, 0, 1, 0),
1:             row(0, 1, 1, 0)
1:         );
1: 
1:         dropView("mv_test");
1:         dropTable("DROP TABLE %s");
1:     }
1: 
1:     @Test
1:     public void complexRestrictedTimestampUpdateTestWithFlush() throws Throwable
1:     {
1:         complexRestrictedTimestampUpdateTest(true);
1:     }
1: 
1:     @Test
1:     public void complexRestrictedTimestampUpdateTestWithoutFlush() throws Throwable
1:     {
1:         complexRestrictedTimestampUpdateTest(false);
1:     }
1: 
1:     public void complexRestrictedTimestampUpdateTest(boolean flush) throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY (a, b))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1:         Keyspace ks = Keyspace.open(keyspace());
1: 
1:         createView("mv", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (c, a, b)");
1:         ks.getColumnFamilyStore("mv").disableAutoCompaction();
1: 
1:         //Set initial values TS=0, matching the restriction and verify view
1:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, d) VALUES (0, 0, 1, 0) USING TIMESTAMP 0");
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0));
1: 
1:         if (flush)
1:             FBUtilities.waitOnFutures(ks.flush());
1: 
1:         //update c's timestamp TS=2
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET c = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0));
1: 
1:         if (flush)
1:             FBUtilities.waitOnFutures(ks.flush());
1: 
1:         //change c's value and TS=3, tombstones c=1 and adds c=0 record
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE a = ? and b = ? ", 0, 0, 0);
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 0, 0, 0));
1: 
1:         if(flush)
1:         {
1:             ks.getColumnFamilyStore("mv").forceMajorCompaction();
1:             FBUtilities.waitOnFutures(ks.flush());
1:         }
1: 
1:         //change c's value back to 1 with TS=4, check we can see d
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 4 SET c = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:         if (flush)
1:         {
1:             ks.getColumnFamilyStore("mv").forceMajorCompaction();
1:             FBUtilities.waitOnFutures(ks.flush());
1:         }
1: 
1:         assertRows(execute("SELECT d, e from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0, null));
1: 
1: 
1:         //Add e value @ TS=1
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 1 SET e = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:         assertRows(execute("SELECT d, e from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(0, 1));
1: 
1:         if (flush)
1:             FBUtilities.waitOnFutures(ks.flush());
1: 
1: 
1:         //Change d value @ TS=2
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET d = ? WHERE a = ? and b = ? ", 2, 0, 0);
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(2));
1: 
1:         if (flush)
1:             FBUtilities.waitOnFutures(ks.flush());
1: 
1: 
1:         //Change d value @ TS=3
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET d = ? WHERE a = ? and b = ? ", 1, 0, 0);
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row(1));
1: 
1: 
1:         //Tombstone c
1:         executeNet(protocolVersion, "DELETE FROM %s WHERE a = ? and b = ?", 0, 0);
1:         assertRows(execute("SELECT d from mv"));
1: 
1:         //Add back without D
1:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (0, 0, 1)");
1: 
1:         //Make sure D doesn't pop back in.
1:         assertRows(execute("SELECT d from mv WHERE c = ? and a = ? and b = ?", 1, 0, 0), row((Object) null));
1: 
1: 
1:         //New partition
1:         // insert a row with timestamp 0
1:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, d, e) VALUES (?, ?, ?, ?, ?) USING TIMESTAMP 0", 1, 0, 1, 0, 0);
1: 
1:         // overwrite pk and e with timestamp 1, but don't overwrite d
1:         executeNet(protocolVersion, "INSERT INTO %s (a, b, c, e) VALUES (?, ?, ?, ?) USING TIMESTAMP 1", 1, 0, 1, 0);
1: 
1:         // delete with timestamp 0 (which should only delete d)
1:         executeNet(protocolVersion, "DELETE FROM %s USING TIMESTAMP 0 WHERE a = ? AND b = ?", 1, 0);
1:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:             row(1, 0, 1, null, 0)
1:         );
1: 
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 2 SET c = ? WHERE a = ? AND b = ?", 1, 1, 1);
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE a = ? AND b = ?", 1, 1, 0);
1:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:             row(1, 0, 1, null, 0)
1:         );
1: 
1:         executeNet(protocolVersion, "UPDATE %s USING TIMESTAMP 3 SET d = ? WHERE a = ? AND b = ?", 0, 1, 0);
1:         assertRows(execute("SELECT a, b, c, d, e from mv WHERE c = ? and a = ? and b = ?", 1, 1, 0),
1:             row(1, 0, 1, 0, 0)
1:         );
1:     }
1: 
1:     @Test
1:     public void testRestrictedRegularColumnTimestampUpdates() throws Throwable
1:     {
1:         // Regression test for CASSANDRA-10910
1: 
1:         createTable("CREATE TABLE %s (" +
1:             "k int PRIMARY KEY, " +
1:             "c int, " +
1:             "val int)");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         createView("mv_rctstest", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE k IS NOT NULL AND c IS NOT NULL AND c = 1 PRIMARY KEY (k,c)");
1: 
1:         updateView("UPDATE %s SET c = ?, val = ? WHERE k = ?", 0, 0, 0);
1:         updateView("UPDATE %s SET val = ? WHERE k = ?", 1, 0);
1:         updateView("UPDATE %s SET c = ? WHERE k = ?", 1, 0);
1:         assertRows(execute("SELECT c, k, val FROM mv_rctstest"), row(1, 0, 1));
1: 
1:         updateView("TRUNCATE %s");
1: 
1:         updateView("UPDATE %s USING TIMESTAMP 1 SET c = ?, val = ? WHERE k = ?", 0, 0, 0);
1:         updateView("UPDATE %s USING TIMESTAMP 3 SET c = ? WHERE k = ?", 1, 0);
1:         updateView("UPDATE %s USING TIMESTAMP 2 SET val = ? WHERE k = ?", 1, 0);
1:         updateView("UPDATE %s USING TIMESTAMP 4 SET c = ? WHERE k = ?", 1, 0);
1:         updateView("UPDATE %s USING TIMESTAMP 3 SET val = ? WHERE k = ?", 2, 0);
1:         assertRows(execute("SELECT c, k, val FROM mv_rctstest"), row(1, 0, 2));
1:     }
1: 
1:     @Test
1:     public void testOldTimestampsWithRestrictions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (" +
1:             "k int, " +
1:             "c int, " +
1:             "val text, " + "" +
1:             "PRIMARY KEY(k, c))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         createView("mv_tstest", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE val IS NOT NULL AND k IS NOT NULL AND c IS NOT NULL AND val = 'baz' PRIMARY KEY (val,k,c)");
1: 
1:         for (int i = 0; i < 100; i++)
1:             updateView("INSERT into %s (k,c,val)VALUES(?,?,?)", 0, i % 2, "baz");
1: 
1:         Keyspace.open(keyspace()).getColumnFamilyStore(currentTable()).forceBlockingFlush();
1: 
1:         Assert.assertEquals(2, execute("select * from %s").size());
1:         Assert.assertEquals(2, execute("select * from mv_tstest").size());
1: 
1:         assertRows(execute("SELECT val from %s where k = 0 and c = 0"), row("baz"));
1:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0), row(1));
1: 
1:         //Make sure an old TS does nothing
1:         updateView("UPDATE %s USING TIMESTAMP 100 SET val = ? where k = ? AND c = ?", "bar", 0, 1);
1:         assertRows(execute("SELECT val from %s where k = 0 and c = 1"), row("baz"));
1:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0), row(1));
1:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "bar"));
1: 
1:         //Latest TS
1:         updateView("UPDATE %s SET val = ? where k = ? AND c = ?", "bar", 0, 1);
1:         assertRows(execute("SELECT val from %s where k = 0 and c = 1"), row("bar"));
1:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "bar"));
1:         assertRows(execute("SELECT c from mv_tstest where k = 0 and val = ?", "baz"), row(0));
1:     }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:2998bb3
/////////////////////////////////////////////////////////////////////////
1:             // insert a partition with one matching and one non-matching row using a batch (CASSANDRA-10614)
1:             String tableName = KEYSPACE + "." + currentTable();
1:             execute("BEGIN BATCH " +
1:                     "INSERT INTO " + tableName + " (a, b, c, d) VALUES (?, ?, ?, ?); " +
1:                     "INSERT INTO " + tableName + " (a, b, c, d) VALUES (?, ?, ?, ?); " +
1:                     "APPLY BATCH",
1:                     4, 4, 0, 0,
1:                     4, 4, 1, 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(4, 4, 1, 1)
1:             );
1: 
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.*;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.exceptions.InvalidQueryException;
1: import junit.framework.Assert;
1: 
1: import org.apache.cassandra.db.SystemKeyspace;
1: 
1: public class ViewFilteringTest extends CQLTester
1: {
0:     int protocolVersion = 4;
1:     private final List<String> views = new ArrayList<>();
1: 
1:     @BeforeClass
1:     public static void startup()
1:     {
1:         requireNetwork();
1:     }
1:     @Before
1:     public void begin()
1:     {
1:         views.clear();
1:     }
1: 
1:     @After
1:     public void end() throws Throwable
1:     {
1:         for (String viewName : views)
1:             executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + viewName);
1:     }
1: 
1:     private void createView(String name, String query) throws Throwable
1:     {
1:         executeNet(protocolVersion, String.format(query, name));
1:         // If exception is thrown, the view will not be added to the list; since it shouldn't have been created, this is
1:         // the desired behavior
1:         views.add(name);
1:     }
1: 
1:     private void dropView(String name) throws Throwable
1:     {
1:         executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + name);
1:         views.remove(name);
1:     }
1: 
1:     @Test
1:     public void testMVCreationSelectRestrictions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY((a, b), c, d))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         // IS NOT NULL is required on all PK statements that are not otherwise restricted
1:         List<String> badStatements = Arrays.asList(
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE b IS NOT NULL AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = ? AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = blobAsInt(?) AND b IS NOT NULL AND c is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s PRIMARY KEY (a, b, c, d)"
1:         );
1: 
1:         for (String badStatement : badStatements)
1:         {
1:             try
1:             {
1:                 createView("mv1_test", badStatement);
1:                 Assert.fail("Create MV statement should have failed due to missing IS NOT NULL restriction: " + badStatement);
1:             }
1:             catch (InvalidQueryException exc) {}
1:         }
1: 
1:         List<String> goodStatements = Arrays.asList(
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 AND d IS NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c > 1 AND d IS NOT NULL PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c = 1 AND d IN (1, 2, 3) PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) = (1, 1) PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) > (1, 1) PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND (c, d) IN ((1, 1), (2, 2)) PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = (int) 1 AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = blobAsInt(intAsBlob(1)) AND b = 1 AND c = 1 AND d = 1 PRIMARY KEY ((a, b), c, d)"
1:         );
1: 
1:         for (int i = 0; i < goodStatements.size(); i++)
1:         {
1:             try
1:             {
1:                 createView("mv" + i + "_test", goodStatements.get(i));
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException("MV creation failed: " + goodStatements.get(i), e);
1:             }
1: 
1:             try
1:             {
1:                 executeNet(protocolVersion, "ALTER MATERIALIZED VIEW mv" + i + "_test WITH compaction = { 'class' : 'LeveledCompactionStrategy' }");
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException("MV alter failed: " + goodStatements.get(i), e);
1:             }
1:         }
1: 
1:         try
1:         {
0:             createView("mv_foo", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL AND d is NOT NULL PRIMARY KEY ((a, b), c, d)");
0:             Assert.fail("Partial partition key restriction should not be allowed");
1:         }
1:         catch (InvalidQueryException exc) {}
1:     }
1: 
1:     @Test
1:     public void testCaseSensitivity() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (\"theKey\" int, \"theClustering\" int, \"the\"\"Value\" int, PRIMARY KEY (\"theKey\", \"theClustering\"))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 0, 0, 0);
1:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 0, 1, 0);
1:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 1, 0, 0);
1:         execute("INSERT INTO %s (\"theKey\", \"theClustering\", \"the\"\"Value\") VALUES (?, ?, ?)", 1, 1, 0);
1: 
1:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:                 "WHERE \"theKey\" = 1 AND \"theClustering\" = 1 AND \"the\"\"Value\" IS NOT NULL " +
1:                 "PRIMARY KEY (\"theKey\", \"theClustering\")");
1: 
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:             Thread.sleep(10);
1:         createView("mv_test2", "CREATE MATERIALIZED VIEW %s AS SELECT \"theKey\", \"theClustering\", \"the\"\"Value\" FROM %%s " +
1:                 "WHERE \"theKey\" = 1 AND \"theClustering\" = 1 AND \"the\"\"Value\" IS NOT NULL " +
1:                 "PRIMARY KEY (\"theKey\", \"theClustering\")");
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test2"))
1:             Thread.sleep(10);
1: 
1:         for (String mvname : Arrays.asList("mv_test", "mv_test2"))
1:         {
1:             assertRowsIgnoringOrder(execute("SELECT \"theKey\", \"theClustering\", \"the\"\"Value\" FROM " + mvname),
1:                     row(1, 1, 0)
1:             );
1:         }
1: 
1:         executeNet(protocolVersion, "ALTER TABLE %s RENAME \"theClustering\" TO \"Col\"");
1: 
1:         for (String mvname : Arrays.asList("mv_test", "mv_test2"))
1:         {
1:             assertRowsIgnoringOrder(execute("SELECT \"theKey\", \"Col\", \"the\"\"Value\" FROM " + mvname),
1:                     row(1, 1, 0)
1:             );
1:         }
1:     }
1: 
1:     @Test
1:     public void testFilterWithFunction() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 1, 1);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 0, 2);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 1, 3);
1: 
1:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:                 "WHERE a = blobAsInt(intAsBlob(1)) AND b IS NOT NULL " +
1:                 "PRIMARY KEY (a, b)");
1: 
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:             Thread.sleep(10);
1: 
1:         assertRows(execute("SELECT a, b, c FROM mv_test"),
1:                 row(1, 0, 2),
1:                 row(1, 1, 3)
1:         );
1: 
1:         executeNet(protocolVersion, "ALTER TABLE %s RENAME a TO foo");
1: 
1:         assertRows(execute("SELECT foo, b, c FROM mv_test"),
1:                 row(1, 0, 2),
1:                 row(1, 1, 3)
1:         );
1:     }
1: 
1:     @Test
1:     public void testFilterWithTypecast() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, 1, 1);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 0, 2);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, 1, 3);
1: 
1:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s " +
1:                 "WHERE a = (int) 1 AND b IS NOT NULL " +
1:                 "PRIMARY KEY (a, b)");
1: 
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:             Thread.sleep(10);
1: 
1:         assertRows(execute("SELECT a, b, c FROM mv_test"),
1:                 row(1, 0, 2),
1:                 row(1, 1, 3)
1:         );
1: 
1:         executeNet(protocolVersion, "ALTER TABLE %s RENAME a TO foo");
1: 
1:         assertRows(execute("SELECT foo, b, c FROM mv_test"),
1:                 row(1, 0, 2),
1:                 row(1, 1, 3)
1:         );
1:     }
1: 
1:     @Test
1:     public void testPartitionKeyRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where a = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 0, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:         }
1:     }
1: 
1:     @Test
1:     public void testCompoundPartitionKeyRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where a = 1 and b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:             assertEmpty(execute("SELECT * FROM mv_test" + i));
1:         }
1:     }
1: 
1:     @Test
1:     public void testCompoundPartitionKeyRestrictionsNotIncludeAll() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:         // only accept rows where a = 1 and b = 1, don't include column d in the selection
1:         createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT a, b, c FROM %%s WHERE a = 1 AND b = 1 AND c IS NOT NULL PRIMARY KEY ((a, b), c)");
1: 
1:         while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test"))
1:             Thread.sleep(10);
1: 
1:         assertRows(execute("SELECT * FROM mv_test"),
1:             row(1, 1, 0),
1:             row(1, 1, 1)
1:         );
1: 
1:         // insert new rows that do not match the filter
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 0, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 0),
1:                 row(1, 1, 1)
1:         );
1: 
1:         // insert new row that does match the filter
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 0),
1:                 row(1, 1, 1),
1:                 row(1, 1, 2)
1:         );
1: 
1:         // update rows that don't match the filter
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0);
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 0, 0);
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 0),
1:                 row(1, 1, 1),
1:                 row(1, 1, 2)
1:         );
1: 
1:         // update a row that does match the filter
1:         execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 0),
1:                 row(1, 1, 1),
1:                 row(1, 1, 2)
1:         );
1: 
1:         // delete rows that don't match the filter
1:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0);
1:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 0, 0);
1:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0);
1:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 0),
1:                 row(1, 1, 1),
1:                 row(1, 1, 2)
1:         );
1: 
1:         // delete a row that does match the filter
1:         execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:         assertRows(execute("SELECT * FROM mv_test"),
1:                 row(1, 1, 1),
1:                 row(1, 1, 2)
1:         );
1: 
1:         // delete a partition that matches the filter
1:         execute("DELETE FROM %s WHERE a = ? AND b = ?", 1, 1);
1:         assertEmpty(execute("SELECT * FROM mv_test"));
1:     }
1: 
1:     @Test
1:     public void testClusteringKeyEQRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b = 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 2, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                 row(0, 1, 0, 0),
1:                 row(0, 1, 1, 0)
1:             );
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testClusteringKeySliceRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b >= 1 AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0)
1:             );
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testClusteringKeyINRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IN (1, 2) AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0)
1:             );
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testClusteringKeyMultiColumnRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND (b, c) >= (1, 0) PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, -1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, -1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 0, 1),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 1, 2, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 1, 0, 0),
1:                     row(0, 1, 1, 0)
1:             );
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testClusteringKeyFilteringRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c = 1 PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, -1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 2, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 2, 1, 1, 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 2),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, -1, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 0);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, -1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 2),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0),
1:                     row(1, 0, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(0, 0, 1, 0),
1:                     row(0, 1, 1, 0)
1:             );
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testPartitionKeyAndClusteringKeyFilteringRestrictions() throws Throwable
1:     {
1:         List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)");
1:         for (int i = 0; i < mvPrimaryKeys.size(); i++)
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1: 
1:             execute("USE " + keyspace());
1:             executeNet(protocolVersion, "USE " + keyspace());
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, -1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0);
1: 
1:             logger.info("Testing MV primary key: {}", mvPrimaryKeys.get(i));
1: 
1:             // only accept rows where b = 1
1:             createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c = 1 PRIMARY KEY " + mvPrimaryKeys.get(i));
1: 
1:             while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i))
1:                 Thread.sleep(10);
1: 
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new rows that do not match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 1, 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0)
1:             );
1: 
1:             // insert new row that does match the filter
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 2, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update rows that don't match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, -1, 0);
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 0, 1, 1, 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // update a row that does match the filter
1:             execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 2, 1, 1, 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 2),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete rows that don't match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, -1);
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 2, 0, 1);
1:             execute("DELETE FROM %s WHERE a = ?", 0);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 1, 1, 2),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a row that does match the filter
1:             execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 1);
1:             assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),
1:                     row(1, 0, 1, 0),
1:                     row(1, 2, 1, 0)
1:             );
1: 
1:             // delete a partition that matches the filter
1:             execute("DELETE FROM %s WHERE a = ?", 1);
1:             assertEmpty(execute("SELECT a, b, c, d FROM mv_test" + i));
1: 
1:             dropView("mv_test" + i);
1:             dropTable("DROP TABLE %s");
1:         }
1:     }
1: 
1:     @Test
1:     public void testAllTypes() throws Throwable
1:     {
1:         String myType = createType("CREATE TYPE %s (a int, b uuid, c set<text>)");
1:         String columnNames = "asciival, " +
1:                              "bigintval, " +
1:                              "blobval, " +
1:                              "booleanval, " +
1:                              "dateval, " +
1:                              "decimalval, " +
1:                              "doubleval, " +
1:                              "floatval, " +
1:                              "inetval, " +
1:                              "intval, " +
1:                              "textval, " +
1:                              "timeval, " +
1:                              "timestampval, " +
1:                              "timeuuidval, " +
1:                              "uuidval," +
1:                              "varcharval, " +
1:                              "varintval, " +
1:                              "frozenlistval, " +
1:                              "frozensetval, " +
1:                              "frozenmapval, " +
1:                              "tupleval, " +
1:                              "udtval";
1: 
1:         createTable(
1:                 "CREATE TABLE %s (" +
1:                         "asciival ascii, " +
1:                         "bigintval bigint, " +
1:                         "blobval blob, " +
1:                         "booleanval boolean, " +
1:                         "dateval date, " +
1:                         "decimalval decimal, " +
1:                         "doubleval double, " +
1:                         "floatval float, " +
1:                         "inetval inet, " +
1:                         "intval int, " +
1:                         "textval text, " +
1:                         "timeval time, " +
1:                         "timestampval timestamp, " +
1:                         "timeuuidval timeuuid, " +
1:                         "uuidval uuid," +
1:                         "varcharval varchar, " +
1:                         "varintval varint, " +
1:                         "frozenlistval frozen<list<int>>, " +
1:                         "frozensetval frozen<set<uuid>>, " +
1:                         "frozenmapval frozen<map<ascii, int>>," +
1:                         "tupleval frozen<tuple<int, ascii, uuid>>," +
1:                         "udtval frozen<" + myType + ">, " +
1:                         "PRIMARY KEY (" + columnNames + "))");
1: 
1:         execute("USE " + keyspace());
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1: 
1:         createView(
1:                 "mv_test",
1:                 "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " +
1:                         "asciival = 'abc' AND " +
1:                         "bigintval = 123 AND " +
1:                         "blobval = 0xfeed AND " +
1:                         "booleanval = true AND " +
1:                         "dateval = '1987-03-23' AND " +
1:                         "decimalval = 123.123 AND " +
1:                         "doubleval = 123.123 AND " +
1:                         "floatval = 123.123 AND " +
1:                         "inetval = '127.0.0.1' AND " +
1:                         "intval = 123 AND " +
1:                         "textval = 'abc' AND " +
1:                         "timeval = '07:35:07.000111222' AND " +
1:                         "timestampval = 123123123 AND " +
1:                         "timeuuidval = 6BDDC89A-5644-11E4-97FC-56847AFE9799 AND " +
1:                         "uuidval = 6BDDC89A-5644-11E4-97FC-56847AFE9799 AND " +
1:                         "varcharval = 'abc' AND " +
1:                         "varintval = 123123123 AND " +
1:                         "frozenlistval = [1, 2, 3] AND " +
1:                         "frozensetval = {6BDDC89A-5644-11E4-97FC-56847AFE9799} AND " +
1:                         "frozenmapval = {'a': 1, 'b': 2} AND " +
1:                         "tupleval = (1, 'foobar', 6BDDC89A-5644-11E4-97FC-56847AFE9799) AND " +
1:                         "udtval = {a: 1, b: 6BDDC89A-5644-11E4-97FC-56847AFE9799, c: {'foo', 'bar'}} " +
1:                         "PRIMARY KEY (" + columnNames + ")");
1: 
1:         execute("INSERT INTO %s (" + columnNames + ") VALUES (" +
1:                 "'abc'," +
1:                 "123," +
1:                 "0xfeed," +
1:                 "true," +
1:                 "'1987-03-23'," +
1:                 "123.123," +
1:                 "123.123," +
1:                 "123.123," +
1:                 "'127.0.0.1'," +
1:                 "123," +
1:                 "'abc'," +
1:                 "'07:35:07.000111222'," +
1:                 "123123123," +
1:                 "6BDDC89A-5644-11E4-97FC-56847AFE9799," +
1:                 "6BDDC89A-5644-11E4-97FC-56847AFE9799," +
1:                 "'abc'," +
1:                 "123123123," +
1:                 "[1, 2, 3]," +
1:                 "{6BDDC89A-5644-11E4-97FC-56847AFE9799}," +
1:                 "{'a': 1, 'b': 2}," +
1:                 "(1, 'foobar', 6BDDC89A-5644-11E4-97FC-56847AFE9799)," +
1:                 "{a: 1, b: 6BDDC89A-5644-11E4-97FC-56847AFE9799, c: {'foo', 'bar'}})");
1: 
1:         assert !execute("SELECT * FROM mv_test").isEmpty();
1: 
1:         executeNet(protocolVersion, "ALTER TABLE %s RENAME inetval TO foo");
1:         assert !execute("SELECT * FROM mv_test").isEmpty();
1:     }
1: }
============================================================================