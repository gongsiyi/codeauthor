1:5ab5e1b: /*
1:5ab5e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ab5e1b:  * or more contributor license agreements.  See the NOTICE file
1:5ab5e1b:  * distributed with this work for additional information
1:5ab5e1b:  * regarding copyright ownership.  The ASF licenses this file
1:5ab5e1b:  * to you under the Apache License, Version 2.0 (the
1:5ab5e1b:  * "License"); you may not use this file except in compliance
1:5ab5e1b:  * with the License.  You may obtain a copy of the License at
3:5ab5e1b:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5ab5e1b:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:5ab5e1b:  */
1:07cf56f: package org.apache.cassandra.gms;
1:5ab5e1b: 
1:1e616a1: import java.net.InetAddress;
1:1e616a1: import java.util.HashMap;
1:1e616a1: import java.util.List;
1:1e616a1: import java.util.Map;
6:1e616a1: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:ef25537: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:ef25537: import org.apache.cassandra.net.MessagingService;
1:ef25537: 
1:9471e8d: public class GossipDigestAckVerbHandler implements IVerbHandler<GossipDigestAck>
1:07fb48e: {
1:5a6e2b0:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestAckVerbHandler.class);
1:1e616a1: 
1:1936648:     public void doVerb(MessageIn<GossipDigestAck> message, int id)
3:1e616a1:     {
1:a06be23:         InetAddress from = message.from;
1:910b663:         if (logger.isTraceEnabled())
1:910b663:             logger.trace("Received a GossipDigestAckMessage from {}", from);
1:351d43e:         if (!Gossiper.instance.isEnabled() && !Gossiper.instance.isInShadowRound())
1:1e616a1:         {
1:910b663:             if (logger.isTraceEnabled())
1:910b663:                 logger.trace("Ignoring GossipDigestAckMessage because gossip is disabled");
1:07fb48e:             return;
1:07fb48e:         }
1:1e616a1: 
1:9471e8d:         GossipDigestAck gDigestAckMessage = message.payload;
1:a06be23:         List<GossipDigest> gDigestList = gDigestAckMessage.getGossipDigestList();
1:a06be23:         Map<InetAddress, EndpointState> epStateMap = gDigestAckMessage.getEndpointStateMap();
1:351d43e:         logger.trace("Received ack with {} digests and {} states", gDigestList.size(), epStateMap.size());
1:1e616a1: 
1:b207956:         if (epStateMap.size() > 0)
1:1e616a1:         {
1:a06be23:             /* Notify the Failure Detector */
1:a06be23:             Gossiper.instance.notifyFailureDetector(epStateMap);
1:a06be23:             Gossiper.instance.applyStateLocally(epStateMap);
3:1e616a1:         }
1:76ad645: 
1:351d43e:         if (Gossiper.instance.isInShadowRound())
1:351d43e:         {
1:351d43e:             if (logger.isDebugEnabled())
1:2bc5f0c:                 logger.debug("Received an ack from {}, which may trigger exit from shadow round", from);
1:2bc5f0c:             // if the ack is completely empty, then we can infer that the respondent is also in a shadow round
1:2bc5f0c:             Gossiper.instance.maybeFinishShadowRound(from, gDigestList.isEmpty() && epStateMap.isEmpty());
1:351d43e:             return; // don't bother doing anything else, we have what we came for
1:351d43e:         }
1:a06be23: 
1:a06be23:         /* Get the state required to send to this gossipee - construct GossipDigestAck2Message */
1:a06be23:         Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
1:b207956:         for (GossipDigest gDigest : gDigestList)
1:1e616a1:         {
1:a06be23:             InetAddress addr = gDigest.getEndpoint();
1:a06be23:             EndpointState localEpStatePtr = Gossiper.instance.getStateForVersionBiggerThan(addr, gDigest.getMaxVersion());
1:b207956:             if (localEpStatePtr != null)
1:a06be23:                 deltaEpStateMap.put(addr, localEpStatePtr);
1:1e616a1:         }
1:a06be23: 
1:9471e8d:         MessageOut<GossipDigestAck2> gDigestAck2Message = new MessageOut<GossipDigestAck2>(MessagingService.Verb.GOSSIP_DIGEST_ACK2,
1:b207956:                                                                                            new GossipDigestAck2(deltaEpStateMap),
1:b207956:                                                                                            GossipDigestAck2.serializer);
1:a06be23:         if (logger.isTraceEnabled())
1:a06be23:             logger.trace("Sending a GossipDigestAck2Message to {}", from);
1:a06be23:         MessagingService.instance().sendOneWay(gDigestAck2Message, from);
1:1e616a1:     }
1:1e616a1: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2bc5f0c
/////////////////////////////////////////////////////////////////////////
1:                 logger.debug("Received an ack from {}, which may trigger exit from shadow round", from);
1:             // if the ack is completely empty, then we can infer that the respondent is also in a shadow round
1:             Gossiper.instance.maybeFinishShadowRound(from, gDigestList.isEmpty() && epStateMap.isEmpty());
author:Brandon Williams
-------------------------------------------------------------------------------
commit:0c3424e
commit:47edb3c
/////////////////////////////////////////////////////////////////////////
commit:f084119
commit:351d43e
/////////////////////////////////////////////////////////////////////////
1:         if (!Gossiper.instance.isEnabled() && !Gossiper.instance.isInShadowRound())
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Received ack with {} digests and {} states", gDigestList.size(), epStateMap.size());
/////////////////////////////////////////////////////////////////////////
1:         if (Gossiper.instance.isInShadowRound())
1:         {
1:             if (logger.isDebugEnabled())
0:                 logger.debug("Finishing shadow round with {}", from);
0:             Gossiper.instance.finishShadowRound();
1:             return; // don't bother doing anything else, we have what we came for
1:         }
commit:ee85c8e
commit:76ad645
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.checkSeedContact(from);
1: 
commit:01883da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream dis = new DataInputStream( new FastByteArrayInputStream(bytes) );
commit:07fb48e
/////////////////////////////////////////////////////////////////////////
0:         if (!Gossiper.instance.isEnabled())
1:         {
0:             if (logger_.isTraceEnabled())
0:                 logger_.trace("Ignoring GossipDigestAckMessage because gossip is disabled");
1:             return;
1:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn<GossipDigestAck> message, int id)
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:         if (epStateMap.size() > 0)
/////////////////////////////////////////////////////////////////////////
1:         for (GossipDigest gDigest : gDigestList)
1:             if (localEpStatePtr != null)
1:                                                                                            new GossipDigestAck2(deltaEpStateMap),
1:                                                                                            GossipDigestAck2.serializer);
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class GossipDigestAckVerbHandler implements IVerbHandler<GossipDigestAck>
0:     public void doVerb(MessageIn<GossipDigestAck> message, String id)
/////////////////////////////////////////////////////////////////////////
1:         GossipDigestAck gDigestAckMessage = message.payload;
/////////////////////////////////////////////////////////////////////////
1:         MessageOut<GossipDigestAck2> gDigestAck2Message = new MessageOut<GossipDigestAck2>(MessagingService.Verb.GOSSIP_DIGEST_ACK2,
0:                                                                                                          new GossipDigestAck2(deltaEpStateMap),
0:                                                                                                          GossipDigestAck2.serializer());
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class GossipDigestAckVerbHandler implements IVerbHandler<GossipDigestAckMessage>
0:     public void doVerb(MessageIn<GossipDigestAckMessage> message, String id)
1:         InetAddress from = message.from;
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestAckMessage gDigestAckMessage = message.payload;
1:         List<GossipDigest> gDigestList = gDigestAckMessage.getGossipDigestList();
1:         Map<InetAddress, EndpointState> epStateMap = gDigestAckMessage.getEndpointStateMap();
0:         if ( epStateMap.size() > 0 )
1:             /* Notify the Failure Detector */
1:             Gossiper.instance.notifyFailureDetector(epStateMap);
1:             Gossiper.instance.applyStateLocally(epStateMap);
1: 
1:         /* Get the state required to send to this gossipee - construct GossipDigestAck2Message */
1:         Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
0:         for( GossipDigest gDigest : gDigestList )
1:             InetAddress addr = gDigest.getEndpoint();
1:             EndpointState localEpStatePtr = Gossiper.instance.getStateForVersionBiggerThan(addr, gDigest.getMaxVersion());
0:             if ( localEpStatePtr != null )
1:                 deltaEpStateMap.put(addr, localEpStatePtr);
1: 
0:         MessageOut<GossipDigestAck2Message> gDigestAck2Message = new MessageOut<GossipDigestAck2Message>(MessagingService.Verb.GOSSIP_DIGEST_ACK2,
0:                                                                                                          new GossipDigestAck2Message(deltaEpStateMap),
0:                                                                                                          GossipDigestAck2Message.serializer());
1:         if (logger.isTraceEnabled())
1:             logger.trace("Sending a GossipDigestAck2Message to {}", from);
1:         MessagingService.instance().sendOneWay(gDigestAck2Message, from);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             MessageOut<GossipDigestAck2Message> gDigestAck2Message = new MessageOut<GossipDigestAck2Message>(MessagingService.Verb.GOSSIP_DIGEST_ACK2,
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:             MessageOut<GossipDigestAck2Message> gDigestAck2Message = new MessageOut<GossipDigestAck2Message>(StorageService.Verb.GOSSIP_DIGEST_ACK2,
0:                                                                                                              new GossipDigestAck2Message(deltaEpStateMap), 
0:                                                                                                              GossipDigestAck2Message.serializer());
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendOneWay(gDigestAck2Message, from);
commit:ef25537
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
1: 
commit:5ab5e1b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
0:                                                                                                          GossipDigestAck2.serializer);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestAckVerbHandler.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.gms;
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger = LoggerFactory.getLogger(GossipDigestAckVerbHandler.class);
1:         if (logger.isTraceEnabled())
1:             logger.trace("Received a GossipDigestAckMessage from {}", from);
1:             if (logger.isTraceEnabled())
1:                 logger.trace("Ignoring GossipDigestAckMessage because gossip is disabled");
/////////////////////////////////////////////////////////////////////////
0:             if (logger.isTraceEnabled())
0:                 logger.trace("Sending a GossipDigestAck2Message to {}", from);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             GossipDigestAckMessage gDigestAckMessage = GossipDigestAckMessage.serializer().deserialize(dis, message.getVersion());
commit:5d02c51
/////////////////////////////////////////////////////////////////////////
0:             Message gDigestAck2Message = Gossiper.instance.makeGossipDigestAck2Message(gDigestAck2, message.getVersion());
commit:1e616a1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
1: 
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
0: public class GossipDigestAckVerbHandler implements IVerbHandler
1: {
0:     private static Logger logger_ = LoggerFactory.getLogger(GossipDigestAckVerbHandler.class);
1: 
0:     public void doVerb(Message message)
1:     {
0:         InetAddress from = message.getFrom();
0:         if (logger_.isTraceEnabled())
0:             logger_.trace("Received a GossipDigestAckMessage from {}", from);
1: 
0:         byte[] bytes = message.getMessageBody();
0:         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
1: 
0:         try
1:         {
0:             GossipDigestAckMessage gDigestAckMessage = GossipDigestAckMessage.serializer().deserialize(dis);
0:             List<GossipDigest> gDigestList = gDigestAckMessage.getGossipDigestList();
0:             Map<InetAddress, EndpointState> epStateMap = gDigestAckMessage.getEndpointStateMap();
1: 
0:             if ( epStateMap.size() > 0 )
1:             {
0:                 /* Notify the Failure Detector */
0:                 Gossiper.instance.notifyFailureDetector(epStateMap);
0:                 Gossiper.instance.applyStateLocally(epStateMap);
1:             }
1: 
0:             /* Get the state required to send to this gossipee - construct GossipDigestAck2Message */
0:             Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
0:             for( GossipDigest gDigest : gDigestList )
1:             {
0:                 InetAddress addr = gDigest.getEndpoint();
0:                 EndpointState localEpStatePtr = Gossiper.instance.getStateForVersionBiggerThan(addr, gDigest.getMaxVersion());
0:                 if ( localEpStatePtr != null )
0:                     deltaEpStateMap.put(addr, localEpStatePtr);
1:             }
1: 
0:             GossipDigestAck2Message gDigestAck2 = new GossipDigestAck2Message(deltaEpStateMap);
0:             Message gDigestAck2Message = Gossiper.instance.makeGossipDigestAck2Message(gDigestAck2);
0:             if (logger_.isTraceEnabled())
0:                 logger_.trace("Sending a GossipDigestAck2Message to {}", from);
0:             MessagingService.instance.sendOneWay(gDigestAck2Message, from);
1:         }
0:         catch ( IOException e )
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================