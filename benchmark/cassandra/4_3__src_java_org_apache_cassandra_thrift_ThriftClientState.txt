1:45b4fd8: /*
1:45b4fd8:  * Licensed to the Apache Software Foundation (ASF) under one
1:45b4fd8:  * or more contributor license agreements.  See the NOTICE file
1:45b4fd8:  * distributed with this work for additional information
1:45b4fd8:  * regarding copyright ownership.  The ASF licenses this file
1:45b4fd8:  * to you under the Apache License, Version 2.0 (the
1:45b4fd8:  * "License"); you may not use this file except in compliance
1:45b4fd8:  * with the License.  You may obtain a copy of the License at
1:45b4fd8:  *
1:45b4fd8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:45b4fd8:  *
1:45b4fd8:  * Unless required by applicable law or agreed to in writing, software
1:45b4fd8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:45b4fd8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:45b4fd8:  * See the License for the specific language governing permissions and
1:45b4fd8:  * limitations under the License.
1:45b4fd8:  */
1:45b4fd8: package org.apache.cassandra.thrift;
4:45b4fd8: 
1:814bd32: import java.net.InetSocketAddress;
1:45b4fd8: 
1:45b4fd8: import org.apache.cassandra.config.DatabaseDescriptor;
1:45b4fd8: import org.apache.cassandra.service.ClientState;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:45b4fd8: 
1:45b4fd8: /**
1:45b4fd8:  * ClientState used by thrift that also provide a QueryState.
1:45b4fd8:  *
1:45b4fd8:  * Thrift is intrinsically synchronous so there could be only one query per
1:45b4fd8:  * client at a given time. So ClientState and QueryState can be merge into the
1:45b4fd8:  * same object.
1:45b4fd8:  */
1:45b4fd8: public class ThriftClientState extends ClientState
1:326d545: {
1:45b4fd8:     private final QueryState queryState;
1:45b4fd8: 
1:814bd32:     public ThriftClientState(InetSocketAddress remoteAddress)
1:326d545:     {
1:326d545:         super(remoteAddress);
1:45b4fd8:         this.queryState = new QueryState(this);
3:45b4fd8:     }
1:45b4fd8: 
1:45b4fd8:     public QueryState getQueryState()
4:45b4fd8:     {
1:45b4fd8:         return queryState;
1:45b4fd8:     }
1:45b4fd8: 
1:45b4fd8:     public String getSchedulingValue()
1:45b4fd8:     {
1:45b4fd8:         switch(DatabaseDescriptor.getRequestSchedulerId())
1:45b4fd8:         {
1:45b4fd8:             case keyspace: return getRawKeyspace();
1:45b4fd8:         }
1:45b4fd8:         return "default";
1:45b4fd8:     }
1:45b4fd8: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:814bd32
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
1:     public ThriftClientState(InetSocketAddress remoteAddress)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:2621707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:326d545
/////////////////////////////////////////////////////////////////////////
0: import java.net.SocketAddress;
/////////////////////////////////////////////////////////////////////////
0:     private final Map<Integer, CQLStatement> prepared = new LinkedHashMap<Integer, CQLStatement>(16, 0.75f, true)
1:     {
0:         protected boolean removeEldestEntry(Map.Entry<Integer, CQLStatement> eldest)
1:         {
0:     public ThriftClientState(SocketAddress remoteAddress)
1:         super(remoteAddress);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d7ff10d
/////////////////////////////////////////////////////////////////////////
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.thrift;
1: 
0: import java.util.*;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.cql.CQLStatement;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.tracing.Tracing;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * ClientState used by thrift that also provide a QueryState.
1:  *
1:  * Thrift is intrinsically synchronous so there could be only one query per
1:  * client at a given time. So ClientState and QueryState can be merge into the
1:  * same object.
1:  */
1: public class ThriftClientState extends ClientState
1: {
0:     private static final int MAX_CACHE_PREPARED = 10000;    // Enough to keep buggy clients from OOM'ing us
1: 
1:     private final QueryState queryState;
1: 
0:     // An LRU map of prepared statements
0:     private final Map<Integer, CQLStatement> prepared = new LinkedHashMap<Integer, CQLStatement>(16, 0.75f, true) {
0:         protected boolean removeEldestEntry(Map.Entry<Integer, CQLStatement> eldest) {
0:             return size() > MAX_CACHE_PREPARED;
1:         }
0:     };
1: 
0:     public ThriftClientState()
1:     {
0:         super();
1:         this.queryState = new QueryState(this);
1:     }
1: 
1:     public QueryState getQueryState()
1:     {
1:         return queryState;
1:     }
1: 
0:     public Map<Integer, CQLStatement> getPrepared()
1:     {
0:         return prepared;
1:     }
1: 
1:     public String getSchedulingValue()
1:     {
1:         switch(DatabaseDescriptor.getRequestSchedulerId())
1:         {
1:             case keyspace: return getRawKeyspace();
1:         }
1:         return "default";
1:     }
1: }
============================================================================