1:cb5897f: /*
1:cb5897f:  * Licensed to the Apache Software Foundation (ASF) under one
1:cb5897f:  * or more contributor license agreements.  See the NOTICE file
1:cb5897f:  * distributed with this work for additional information
1:cb5897f:  * regarding copyright ownership.  The ASF licenses this file
1:cb5897f:  * to you under the Apache License, Version 2.0 (the
1:cb5897f:  * "License"); you may not use this file except in compliance
1:cb5897f:  * with the License.  You may obtain a copy of the License at
1:cb5897f:  *
1:cb5897f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cb5897f:  *
1:cb5897f:  * Unless required by applicable law or agreed to in writing, software
1:cb5897f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cb5897f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb5897f:  * See the License for the specific language governing permissions and
1:cb5897f:  * limitations under the License.
1:cb5897f:  */
1:cb5897f: package org.apache.cassandra.auth;
1:cb5897f: 
1:cb5897f: import java.util.ArrayList;
1:cb5897f: import java.util.List;
1:3566843: import java.util.Optional;
1:cb5897f: import java.util.Set;
1:cb5897f: 
1:cb5897f: import com.google.common.base.Joiner;
1:cb5897f: import com.google.common.base.Objects;
1:cb5897f: import com.google.common.base.Splitter;
1:cb5897f: import com.google.common.collect.Sets;
1:cb5897f: import org.apache.commons.lang3.StringUtils;
1:cb5897f: 
1:cb5897f: import org.apache.cassandra.config.Schema;
1:cb5897f: import org.apache.cassandra.cql3.CQL3Type;
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:cb5897f: import org.apache.cassandra.cql3.functions.FunctionName;
1:cb5897f: import org.apache.cassandra.db.marshal.AbstractType;
1:cb5897f: import org.apache.cassandra.db.marshal.TypeParser;
1:cb5897f: 
1:cb5897f: /**
1:cb5897f:  * IResource implementation representing functions.
1:cb5897f:  *
1:cb5897f:  * The root level "functions" resource represents the collection of all Functions.
1:cb5897f:  * "functions"                          - root level resource representing all functions defined across every keyspace
1:cb5897f:  * "functions/keyspace"                 - keyspace level resource to apply permissions to all functions within a keyspace
1:cb5897f:  * "functions/keyspace/function"        - a specific function, scoped to a given keyspace
1:cb5897f:  */
1:cb5897f: public class FunctionResource implements IResource
1:cb5897f: {
1:cb5897f:     enum Level
1:cb5897f:     {
1:cb5897f:         ROOT, KEYSPACE, FUNCTION
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     // permissions which may be granted on either a resource representing some collection of functions
1:cb5897f:     // i.e. the root resource (all functions) or a keyspace level resource (all functions in a given keyspace)
1:cb5897f:     private static final Set<Permission> COLLECTION_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:cb5897f:                                                                                               Permission.ALTER,
1:cb5897f:                                                                                               Permission.DROP,
1:cb5897f:                                                                                               Permission.AUTHORIZE,
1:cb5897f:                                                                                               Permission.EXECUTE);
1:cb5897f:     // permissions which may be granted on resources representing a specific function
1:cb5897f:     private static final Set<Permission> SCALAR_FUNCTION_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:cb5897f:                                                                                              Permission.DROP,
1:cb5897f:                                                                                              Permission.AUTHORIZE,
1:cb5897f:                                                                                              Permission.EXECUTE);
1:cb5897f: 
1:cb5897f:     private static final Set<Permission> AGGREGATE_FUNCTION_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:cb5897f:                                                                                                 Permission.DROP,
1:cb5897f:                                                                                                 Permission.AUTHORIZE,
1:cb5897f:                                                                                                 Permission.EXECUTE);
1:cb5897f: 
1:cb5897f:     private static final String ROOT_NAME = "functions";
1:cb5897f:     private static final FunctionResource ROOT_RESOURCE = new FunctionResource();
1:cb5897f: 
1:cb5897f:     private final Level level;
1:cb5897f:     private final String keyspace;
1:cb5897f:     private final String name;
1:cb5897f:     private final List<AbstractType<?>> argTypes;
1:cb5897f: 
1:cb5897f:     private FunctionResource()
1:cb5897f:     {
1:cb5897f:         level = Level.ROOT;
1:cb5897f:         keyspace = null;
1:cb5897f:         name = null;
1:cb5897f:         argTypes = null;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     private FunctionResource(String keyspace)
1:cb5897f:     {
1:cb5897f:         level = Level.KEYSPACE;
1:cb5897f:         this.keyspace = keyspace;
1:cb5897f:         name = null;
1:cb5897f:         argTypes = null;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     private FunctionResource(String keyspace, String name, List<AbstractType<?>> argTypes)
1:cb5897f:     {
1:cb5897f:         level = Level.FUNCTION;
1:cb5897f:         this.keyspace = keyspace;
1:cb5897f:         this.name = name;
1:cb5897f:         this.argTypes = argTypes;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * @return the root-level resource.
1:cb5897f:      */
1:cb5897f:     public static FunctionResource root()
1:cb5897f:     {
1:cb5897f:         return ROOT_RESOURCE;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * Creates a FunctionResource representing the collection of functions scoped
1:cb5897f:      * to a specific keyspace.
1:cb5897f:      *
1:cb5897f:      * @param keyspace name of the keyspace
1:cb5897f:      * @return FunctionResource instance representing all of the keyspace's functions
1:cb5897f:      */
1:cb5897f:     public static FunctionResource keyspace(String keyspace)
1:cb5897f:     {
1:cb5897f:         return new FunctionResource(keyspace);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * Creates a FunctionResource representing a specific, keyspace-scoped function.
1:cb5897f:      *
1:cb5897f:      * @param keyspace the keyspace in which the function is scoped
1:cb5897f:      * @param name     name of the function.
1:cb5897f:      * @param argTypes the types of the arguments to the function
1:cb5897f:      * @return FunctionResource instance reresenting the function.
1:cb5897f:      */
1:cb5897f:     public static FunctionResource function(String keyspace, String name, List<AbstractType<?>> argTypes)
1:cb5897f:     {
1:cb5897f:         return new FunctionResource(keyspace, name, argTypes);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * Creates a FunctionResource representing a specific, keyspace-scoped function.
1:cb5897f:      * This variant is used to create an instance during parsing of a CQL statement.
1:cb5897f:      * It includes transposition of the arg types from CQL types to AbstractType
1:cb5897f:      * implementations
1:cb5897f:      *
1:cb5897f:      * @param keyspace the keyspace in which the function is scoped
1:cb5897f:      * @param name     name of the function.
1:cb5897f:      * @param argTypes the types of the function arguments in raw CQL form
1:cb5897f:      * @return FunctionResource instance reresenting the function.
1:cb5897f:      */
1:cb5897f:     public static FunctionResource functionFromCql(String keyspace, String name, List<CQL3Type.Raw> argTypes)
1:cb5897f:     {
1:cb5897f:         List<AbstractType<?>> abstractTypes = new ArrayList<>();
1:cb5897f:         for (CQL3Type.Raw cqlType : argTypes)
1:cb5897f:             abstractTypes.add(cqlType.prepare(keyspace).getType());
1:cb5897f: 
1:cb5897f:         return new FunctionResource(keyspace, name, abstractTypes);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * Parses a resource name into a FunctionResource instance.
1:cb5897f:      *
1:cb5897f:      * @param name Name of the function resource.
1:cb5897f:      * @return FunctionResource instance matching the name.
1:cb5897f:      */
1:cb5897f:     public static FunctionResource fromName(String name)
1:cb5897f:     {
1:cb5897f:         String[] parts = StringUtils.split(name, '/');
1:cb5897f: 
1:cb5897f:         if (!parts[0].equals(ROOT_NAME) || parts.length > 3)
1:cb5897f:             throw new IllegalArgumentException(String.format("%s is not a valid function resource name", name));
1:cb5897f: 
1:cb5897f:         if (parts.length == 1)
1:cb5897f:             return root();
1:cb5897f: 
1:cb5897f:         if (parts.length == 2)
1:cb5897f:             return keyspace(parts[1]);
1:cb5897f: 
1:cb5897f:         String[] nameAndArgs = StringUtils.split(parts[2], "[|]");
1:cb5897f:         return function(parts[1], nameAndArgs[0], argsListFromString(nameAndArgs[1]));
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * @return Printable name of the resource.
1:cb5897f:      */
1:cb5897f:     public String getName()
1:cb5897f:     {
1:cb5897f:         switch (level)
1:cb5897f:         {
1:cb5897f:             case ROOT:
1:cb5897f:                 return ROOT_NAME;
1:cb5897f:             case KEYSPACE:
1:cb5897f:                 return String.format("%s/%s", ROOT_NAME, keyspace);
1:cb5897f:             case FUNCTION:
1:cb5897f:                 return String.format("%s/%s/%s[%s]", ROOT_NAME, keyspace, name, argListAsString());
1:cb5897f:         }
1:cb5897f:         throw new AssertionError();
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * Get the name of the keyspace this resource relates to. In the case of the
1:cb5897f:      * global root resource, return null
1:cb5897f:      *
1:cb5897f:      * @return the keyspace name of this resource, or null for the root resource
1:cb5897f:      */
1:cb5897f:     public String getKeyspace()
1:cb5897f:     {
1:cb5897f:         return keyspace;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * @return a qualified FunctionName instance for a function-level resource.
1:cb5897f:      * Throws IllegalStateException if called on the resource which doens't represent a single function.
1:cb5897f:      */
1:cb5897f:     public FunctionName getFunctionName()
1:cb5897f:     {
1:cb5897f:         if (level != Level.FUNCTION)
1:cb5897f:             throw new IllegalStateException(String.format("%s function resource has no function name", level));
1:cb5897f:         return new FunctionName(keyspace, name);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     /**
1:cb5897f:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:cb5897f:      */
1:cb5897f:     public IResource getParent()
1:cb5897f:     {
1:cb5897f:         switch (level)
1:cb5897f:         {
1:cb5897f:             case KEYSPACE:
1:cb5897f:                 return root();
1:cb5897f:             case FUNCTION:
1:cb5897f:                 return keyspace(keyspace);
1:cb5897f:         }
1:cb5897f:         throw new IllegalStateException("Root-level resource can't have a parent");
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     public boolean hasParent()
1:cb5897f:     {
1:cb5897f:         return level != Level.ROOT;
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     public boolean exists()
1:cb5897f:     {
1:cb5897f:         switch (level)
1:cb5897f:         {
1:cb5897f:             case ROOT:
1:cb5897f:                 return true;
1:cb5897f:             case KEYSPACE:
1:cb5897f:                 return Schema.instance.getKeyspaces().contains(keyspace);
1:cb5897f:             case FUNCTION:
1:3566843:                 return Schema.instance.findFunction(getFunctionName(), argTypes).isPresent();
1:cb5897f:         }
1:cb5897f:         throw new AssertionError();
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     public Set<Permission> applicablePermissions()
1:cb5897f:     {
1:cb5897f:         switch (level)
1:cb5897f:         {
1:cb5897f:             case ROOT:
1:cb5897f:             case KEYSPACE:
1:cb5897f:                 return COLLECTION_LEVEL_PERMISSIONS;
1:cb5897f:             case FUNCTION:
1:cb5897f:             {
1:3566843:                 Optional<Function> function = Schema.instance.findFunction(getFunctionName(), argTypes);
1:3566843:                 assert function.isPresent() : "Unable to find function object for resource " + toString();
1:3566843:                 return function.get().isAggregate() ? AGGREGATE_FUNCTION_PERMISSIONS : SCALAR_FUNCTION_PERMISSIONS;
1:cb5897f:             }
1:cb5897f:         }
1:cb5897f:         throw new AssertionError();
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     public int compareTo(FunctionResource o)
1:cb5897f:     {
1:cb5897f:         return this.name.compareTo(o.name);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     @Override
1:cb5897f:     public String toString()
1:cb5897f:     {
1:cb5897f:         switch (level)
1:cb5897f:         {
1:cb5897f:             case ROOT:
1:cb5897f:                 return "<all functions>";
1:cb5897f:             case KEYSPACE:
1:cb5897f:                 return String.format("<all functions in %s>", keyspace);
1:cb5897f:             case FUNCTION:
1:cb5897f:                 return String.format("<function %s.%s(%s)>",
1:cb5897f:                                      keyspace,
1:cb5897f:                                      name,
1:cb5897f:                                      Joiner.on(", ").join(AbstractType.asCQLTypeStringList(argTypes)));
1:cb5897f:         }
1:cb5897f:         throw new AssertionError();
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     @Override
1:cb5897f:     public boolean equals(Object o)
1:cb5897f:     {
1:cb5897f:         if (this == o)
1:cb5897f:             return true;
1:cb5897f: 
1:cb5897f:         if (!(o instanceof FunctionResource))
1:cb5897f:             return false;
1:cb5897f: 
1:cb5897f:         FunctionResource f = (FunctionResource) o;
1:cb5897f: 
1:cb5897f:         return Objects.equal(level, f.level)
1:cb5897f:                && Objects.equal(keyspace, f.keyspace)
1:cb5897f:                && Objects.equal(name, f.name)
1:cb5897f:                && Objects.equal(argTypes, f.argTypes);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     @Override
1:cb5897f:     public int hashCode()
1:cb5897f:     {
1:cb5897f:         return Objects.hashCode(level, keyspace, name, argTypes);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     private String argListAsString()
1:cb5897f:     {
1:cb5897f:         return Joiner.on("^").join(argTypes);
1:cb5897f:     }
1:cb5897f: 
1:cb5897f:     private static List<AbstractType<?>> argsListFromString(String s)
1:cb5897f:     {
1:cb5897f:         List<AbstractType<?>> argTypes = new ArrayList<>();
1:cb5897f:         for(String type : Splitter.on("^").omitEmptyStrings().trimResults().split(s))
1:cb5897f:             argTypes.add(TypeParser.parse(type));
1:cb5897f:         return argTypes;
1:cb5897f:     }
1:cb5897f: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1: import java.util.Optional;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 return Schema.instance.findFunction(getFunctionName(), argTypes).isPresent();
/////////////////////////////////////////////////////////////////////////
1:                 Optional<Function> function = Schema.instance.findFunction(getFunctionName(), argTypes);
1:                 assert function.isPresent() : "Unable to find function object for resource " + toString();
1:                 return function.get().isAggregate() ? AGGREGATE_FUNCTION_PERMISSIONS : SCALAR_FUNCTION_PERMISSIONS;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import com.google.common.base.Joiner;
1: import com.google.common.base.Objects;
1: import com.google.common.base.Splitter;
1: import com.google.common.collect.Sets;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.functions.Function;
1: import org.apache.cassandra.cql3.functions.FunctionName;
0: import org.apache.cassandra.cql3.functions.Functions;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.TypeParser;
1: 
1: /**
1:  * IResource implementation representing functions.
1:  *
1:  * The root level "functions" resource represents the collection of all Functions.
1:  * "functions"                          - root level resource representing all functions defined across every keyspace
1:  * "functions/keyspace"                 - keyspace level resource to apply permissions to all functions within a keyspace
1:  * "functions/keyspace/function"        - a specific function, scoped to a given keyspace
1:  */
1: public class FunctionResource implements IResource
1: {
1:     enum Level
1:     {
1:         ROOT, KEYSPACE, FUNCTION
1:     }
1: 
1:     // permissions which may be granted on either a resource representing some collection of functions
1:     // i.e. the root resource (all functions) or a keyspace level resource (all functions in a given keyspace)
1:     private static final Set<Permission> COLLECTION_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:                                                                                               Permission.ALTER,
1:                                                                                               Permission.DROP,
1:                                                                                               Permission.AUTHORIZE,
1:                                                                                               Permission.EXECUTE);
1:     // permissions which may be granted on resources representing a specific function
1:     private static final Set<Permission> SCALAR_FUNCTION_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:                                                                                              Permission.DROP,
1:                                                                                              Permission.AUTHORIZE,
1:                                                                                              Permission.EXECUTE);
1: 
1:     private static final Set<Permission> AGGREGATE_FUNCTION_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:                                                                                                 Permission.DROP,
1:                                                                                                 Permission.AUTHORIZE,
1:                                                                                                 Permission.EXECUTE);
1: 
1:     private static final String ROOT_NAME = "functions";
1:     private static final FunctionResource ROOT_RESOURCE = new FunctionResource();
1: 
1:     private final Level level;
1:     private final String keyspace;
1:     private final String name;
1:     private final List<AbstractType<?>> argTypes;
1: 
1:     private FunctionResource()
1:     {
1:         level = Level.ROOT;
1:         keyspace = null;
1:         name = null;
1:         argTypes = null;
1:     }
1: 
1:     private FunctionResource(String keyspace)
1:     {
1:         level = Level.KEYSPACE;
1:         this.keyspace = keyspace;
1:         name = null;
1:         argTypes = null;
1:     }
1: 
1:     private FunctionResource(String keyspace, String name, List<AbstractType<?>> argTypes)
1:     {
1:         level = Level.FUNCTION;
1:         this.keyspace = keyspace;
1:         this.name = name;
1:         this.argTypes = argTypes;
1:     }
1: 
1:     /**
1:      * @return the root-level resource.
1:      */
1:     public static FunctionResource root()
1:     {
1:         return ROOT_RESOURCE;
1:     }
1: 
1:     /**
1:      * Creates a FunctionResource representing the collection of functions scoped
1:      * to a specific keyspace.
1:      *
1:      * @param keyspace name of the keyspace
1:      * @return FunctionResource instance representing all of the keyspace's functions
1:      */
1:     public static FunctionResource keyspace(String keyspace)
1:     {
1:         return new FunctionResource(keyspace);
1:     }
1: 
1:     /**
1:      * Creates a FunctionResource representing a specific, keyspace-scoped function.
1:      *
1:      * @param keyspace the keyspace in which the function is scoped
1:      * @param name     name of the function.
1:      * @param argTypes the types of the arguments to the function
1:      * @return FunctionResource instance reresenting the function.
1:      */
1:     public static FunctionResource function(String keyspace, String name, List<AbstractType<?>> argTypes)
1:     {
1:         return new FunctionResource(keyspace, name, argTypes);
1:     }
1: 
1:     /**
1:      * Creates a FunctionResource representing a specific, keyspace-scoped function.
1:      * This variant is used to create an instance during parsing of a CQL statement.
1:      * It includes transposition of the arg types from CQL types to AbstractType
1:      * implementations
1:      *
1:      * @param keyspace the keyspace in which the function is scoped
1:      * @param name     name of the function.
1:      * @param argTypes the types of the function arguments in raw CQL form
1:      * @return FunctionResource instance reresenting the function.
1:      */
1:     public static FunctionResource functionFromCql(String keyspace, String name, List<CQL3Type.Raw> argTypes)
1:     {
1:         List<AbstractType<?>> abstractTypes = new ArrayList<>();
1:         for (CQL3Type.Raw cqlType : argTypes)
1:             abstractTypes.add(cqlType.prepare(keyspace).getType());
1: 
1:         return new FunctionResource(keyspace, name, abstractTypes);
1:     }
1: 
1:     /**
1:      * Parses a resource name into a FunctionResource instance.
1:      *
1:      * @param name Name of the function resource.
1:      * @return FunctionResource instance matching the name.
1:      */
1:     public static FunctionResource fromName(String name)
1:     {
1:         String[] parts = StringUtils.split(name, '/');
1: 
1:         if (!parts[0].equals(ROOT_NAME) || parts.length > 3)
1:             throw new IllegalArgumentException(String.format("%s is not a valid function resource name", name));
1: 
1:         if (parts.length == 1)
1:             return root();
1: 
1:         if (parts.length == 2)
1:             return keyspace(parts[1]);
1: 
1:         String[] nameAndArgs = StringUtils.split(parts[2], "[|]");
1:         return function(parts[1], nameAndArgs[0], argsListFromString(nameAndArgs[1]));
1:     }
1: 
1:     /**
1:      * @return Printable name of the resource.
1:      */
1:     public String getName()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return ROOT_NAME;
1:             case KEYSPACE:
1:                 return String.format("%s/%s", ROOT_NAME, keyspace);
1:             case FUNCTION:
1:                 return String.format("%s/%s/%s[%s]", ROOT_NAME, keyspace, name, argListAsString());
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     /**
1:      * Get the name of the keyspace this resource relates to. In the case of the
1:      * global root resource, return null
1:      *
1:      * @return the keyspace name of this resource, or null for the root resource
1:      */
1:     public String getKeyspace()
1:     {
1:         return keyspace;
1:     }
1: 
1:     /**
1:      * @return a qualified FunctionName instance for a function-level resource.
1:      * Throws IllegalStateException if called on the resource which doens't represent a single function.
1:      */
1:     public FunctionName getFunctionName()
1:     {
1:         if (level != Level.FUNCTION)
1:             throw new IllegalStateException(String.format("%s function resource has no function name", level));
1:         return new FunctionName(keyspace, name);
1:     }
1: 
1:     /**
1:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:      */
1:     public IResource getParent()
1:     {
1:         switch (level)
1:         {
1:             case KEYSPACE:
1:                 return root();
1:             case FUNCTION:
1:                 return keyspace(keyspace);
1:         }
1:         throw new IllegalStateException("Root-level resource can't have a parent");
1:     }
1: 
1:     public boolean hasParent()
1:     {
1:         return level != Level.ROOT;
1:     }
1: 
1:     public boolean exists()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return true;
1:             case KEYSPACE:
1:                 return Schema.instance.getKeyspaces().contains(keyspace);
1:             case FUNCTION:
0:                 return Functions.find(getFunctionName(), argTypes) != null;
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     public Set<Permission> applicablePermissions()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:             case KEYSPACE:
1:                 return COLLECTION_LEVEL_PERMISSIONS;
1:             case FUNCTION:
1:             {
0:                 Function function = Functions.find(getFunctionName(), argTypes);
0:                 assert function != null : "Unable to find function object for resource " + toString();
0:                 return function.isAggregate() ? AGGREGATE_FUNCTION_PERMISSIONS : SCALAR_FUNCTION_PERMISSIONS;
1:             }
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     public int compareTo(FunctionResource o)
1:     {
1:         return this.name.compareTo(o.name);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return "<all functions>";
1:             case KEYSPACE:
1:                 return String.format("<all functions in %s>", keyspace);
1:             case FUNCTION:
1:                 return String.format("<function %s.%s(%s)>",
1:                                      keyspace,
1:                                      name,
1:                                      Joiner.on(", ").join(AbstractType.asCQLTypeStringList(argTypes)));
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof FunctionResource))
1:             return false;
1: 
1:         FunctionResource f = (FunctionResource) o;
1: 
1:         return Objects.equal(level, f.level)
1:                && Objects.equal(keyspace, f.keyspace)
1:                && Objects.equal(name, f.name)
1:                && Objects.equal(argTypes, f.argTypes);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(level, keyspace, name, argTypes);
1:     }
1: 
1:     private String argListAsString()
1:     {
1:         return Joiner.on("^").join(argTypes);
1:     }
1: 
1:     private static List<AbstractType<?>> argsListFromString(String s)
1:     {
1:         List<AbstractType<?>> argTypes = new ArrayList<>();
1:         for(String type : Splitter.on("^").omitEmptyStrings().trimResults().split(s))
1:             argTypes.add(TypeParser.parse(type));
1:         return argTypes;
1:     }
1: }
============================================================================