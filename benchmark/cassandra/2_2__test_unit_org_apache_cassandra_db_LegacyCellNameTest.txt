1:2c99761: /*
1:2c99761:  * Licensed to the Apache Software Foundation (ASF) under one
1:2c99761:  * or more contributor license agreements.  See the NOTICE file
1:2c99761:  * distributed with this work for additional information
1:2c99761:  * regarding copyright ownership.  The ASF licenses this file
1:2c99761:  * to you under the Apache License, Version 2.0 (the
1:2c99761:  * "License"); you may not use this file except in compliance
1:2c99761:  * with the License.  You may obtain a copy of the License at
1:2c99761:  *
1:2c99761:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2c99761:  *
1:2c99761:  * Unless required by applicable law or agreed to in writing, software
1:2c99761:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2c99761:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2c99761:  * See the License for the specific language governing permissions and
1:2c99761:  * limitations under the License.
1:2c99761:  */
1:2c99761: package org.apache.cassandra.db;
1:2c99761: 
1:9797511: import org.junit.BeforeClass;
1:2c99761: import org.junit.Test;
1:2c99761: 
1:2c99761: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:2c99761: 
1:2c99761: import static junit.framework.Assert.assertTrue;
1:2c99761: 
1:2c99761: public class LegacyCellNameTest
1:2c99761: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:2c99761:     @Test
1:2c99761:     public void testColumnSameNameAsPartitionKeyCompactStorage() throws Exception
1:2c99761:     {
1:2c99761:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:2c99761:                                             "k int PRIMARY KEY, v int)" +
1:2c99761:                                             " WITH COMPACT STORAGE", "ks");
1:2c99761: 
1:2c99761:         LegacyLayout.LegacyCellName cellName 
1:2c99761:             = LegacyLayout.decodeCellName(cfm, 
1:2c99761:                                           LegacyLayout.makeLegacyComparator(cfm)
1:2c99761:                                                       .fromString("k"));
1:2c99761: 
1:2c99761:         assertTrue(cellName.column.isRegular());
1:2c99761:     }
1:2c99761: 
1:2c99761:     @Test
1:2c99761:     public void testColumnSameNameAsClusteringKeyCompactStorage() throws Exception
1:2c99761:     {
1:2c99761:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:2c99761:                                             "k int PRIMARY KEY, v int)" +
1:2c99761:                                             " WITH COMPACT STORAGE", "ks");
1:2c99761: 
1:2c99761:         LegacyLayout.LegacyCellName cellName 
1:2c99761:             = LegacyLayout.decodeCellName(cfm, 
1:2c99761:                                           LegacyLayout.makeLegacyComparator(cfm)
1:2c99761:                                                       .fromString("column1"));
1:2c99761: 
1:2c99761:         assertTrue(cellName.column.isRegular());
1:2c99761:     }
1:2c99761: 
1:2c99761:     @Test(expected=IllegalArgumentException.class)
1:2c99761:     public void testColumnSameNameAsPartitionKeyCql3() throws Exception
1:2c99761:     {
1:2c99761:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:2c99761:                                             "k int PRIMARY KEY, v int)", "ks");
1:2c99761: 
1:2c99761:         LegacyLayout.LegacyCellName cellName 
1:2c99761:             = LegacyLayout.decodeCellName(cfm, 
1:2c99761:                                           LegacyLayout.makeLegacyComparator(cfm)
1:2c99761:                                                       .fromString("k"));
1:2c99761:     }
1:2c99761: 
1:2c99761:     @Test(expected=IllegalArgumentException.class)
1:2c99761:     public void testColumnSameNameAsClusteringKeyCql3() throws Exception
1:2c99761:     {
1:2c99761:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:2c99761:                                             "k int, c text, v int, PRIMARY KEY(k, c))", "ks");
1:2c99761: 
1:2c99761:         LegacyLayout.LegacyCellName cellName 
1:2c99761:             = LegacyLayout.decodeCellName(cfm, 
1:2c99761:                                           LegacyLayout.makeLegacyComparator(cfm)
1:2c99761:                                                       .fromString("c"));
1:2c99761:     }
1:2c99761: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Mike Adamson
-------------------------------------------------------------------------------
commit:2c99761
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: 
1: import static junit.framework.Assert.assertTrue;
1: 
1: public class LegacyCellNameTest
1: {
1:     @Test
1:     public void testColumnSameNameAsPartitionKeyCompactStorage() throws Exception
1:     {
1:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:                                             "k int PRIMARY KEY, v int)" +
1:                                             " WITH COMPACT STORAGE", "ks");
1: 
1:         LegacyLayout.LegacyCellName cellName 
1:             = LegacyLayout.decodeCellName(cfm, 
1:                                           LegacyLayout.makeLegacyComparator(cfm)
1:                                                       .fromString("k"));
1: 
1:         assertTrue(cellName.column.isRegular());
1:     }
1: 
1:     @Test
1:     public void testColumnSameNameAsClusteringKeyCompactStorage() throws Exception
1:     {
1:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:                                             "k int PRIMARY KEY, v int)" +
1:                                             " WITH COMPACT STORAGE", "ks");
1: 
1:         LegacyLayout.LegacyCellName cellName 
1:             = LegacyLayout.decodeCellName(cfm, 
1:                                           LegacyLayout.makeLegacyComparator(cfm)
1:                                                       .fromString("column1"));
1: 
1:         assertTrue(cellName.column.isRegular());
1:     }
1: 
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testColumnSameNameAsPartitionKeyCql3() throws Exception
1:     {
1:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:                                             "k int PRIMARY KEY, v int)", "ks");
1: 
1:         LegacyLayout.LegacyCellName cellName 
1:             = LegacyLayout.decodeCellName(cfm, 
1:                                           LegacyLayout.makeLegacyComparator(cfm)
1:                                                       .fromString("k"));
1:     }
1: 
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testColumnSameNameAsClusteringKeyCql3() throws Exception
1:     {
1:         CFMetaData cfm = CFMetaData.compile("CREATE TABLE cs (" +
1:                                             "k int, c text, v int, PRIMARY KEY(k, c))", "ks");
1: 
1:         LegacyLayout.LegacyCellName cellName 
1:             = LegacyLayout.decodeCellName(cfm, 
1:                                           LegacyLayout.makeLegacyComparator(cfm)
1:                                                       .fromString("c"));
1:     }
1: }
============================================================================