1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
2:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
5:96d41f0: 
1:ce63ccc: import java.io.File;
1:96d41f0: import java.io.IOException;
1:ce63ccc: import java.nio.ByteBuffer;
1:96d41f0: import java.util.zip.CRC32;
1:96d41f0: 
1:30bb255: import com.google.common.base.Preconditions;
1:30bb255: 
1:30bb255: import org.apache.cassandra.io.compress.BufferType;
1:30bb255: import org.apache.cassandra.io.util.*;
1:cee22ad: import org.apache.cassandra.utils.CLibrary;
1:30bb255: import org.apache.cassandra.utils.memory.BufferPool;
1:96d41f0: 
1:30bb255: /**
1:cee22ad:  * A {@link RandomAccessReader} wrapper that calculates the CRC in place.
1:96d41f0:  *
1:96d41f0:  * Useful for {@link org.apache.cassandra.hints.HintsReader}, for example, where we must verify the CRC, yet don't want
1:ce63ccc:  * to allocate an extra byte array just that purpose. The CRC can be embedded in the input stream and checked via checkCrc().
1:96d41f0:  *
1:cee22ad:  * In addition to calculating the CRC, it allows to enforce a maximum known size. This is needed
1:96d41f0:  * so that {@link org.apache.cassandra.db.Mutation.MutationSerializer} doesn't blow up the heap when deserializing a
1:96d41f0:  * corrupted sequence by reading a huge corrupted length of bytes via
1:cee22ad:  * {@link org.apache.cassandra.utils.ByteBufferUtil#readWithLength(java.io.DataInput)}.
1:30bb255:  */
1:30bb255: public class ChecksummedDataInput extends RebufferingInputStream
7:96d41f0: {
1:96d41f0:     private final CRC32 crc;
1:ce63ccc:     private int crcPosition;
1:ce63ccc:     private boolean crcUpdateDisabled;
1:96d41f0: 
1:ce63ccc:     private long limit;
1:30bb255:     private long limitMark;
1:ce63ccc: 
1:30bb255:     protected long bufferOffset;
1:30bb255:     protected final ChannelProxy channel;
1:30bb255: 
1:30bb255:     ChecksummedDataInput(ChannelProxy channel, BufferType bufferType)
1:96d41f0:     {
1:30bb255:         super(BufferPool.get(RandomAccessReader.DEFAULT_BUFFER_SIZE, bufferType));
1:96d41f0: 
1:96d41f0:         crc = new CRC32();
1:ce63ccc:         crcPosition = 0;
1:ce63ccc:         crcUpdateDisabled = false;
1:30bb255:         this.channel = channel;
1:30bb255:         bufferOffset = 0;
1:30bb255:         buffer.limit(0);
1:ce63ccc: 
1:ce63ccc:         resetLimit();
7:96d41f0:     }
1:c20566f: 
1:30bb255:     ChecksummedDataInput(ChannelProxy channel)
1:c20566f:     {
1:30bb255:         this(channel, BufferType.OFF_HEAP);
1:c20566f:     }
1:96d41f0: 
1:30bb255:     @SuppressWarnings("resource")
1:30bb255:     public static ChecksummedDataInput open(File file)
1:96d41f0:     {
1:30bb255:         return new ChecksummedDataInput(new ChannelProxy(file));
1:30bb255:     }
1:30bb255: 
1:30bb255:     public boolean isEOF()
1:30bb255:     {
1:30bb255:         return getPosition() == channel.size();
1:30bb255:     }
1:30bb255: 
1:cee22ad:     static class Position implements InputPosition
1:96d41f0:     {
1:cee22ad:         final long sourcePosition;
1:cee22ad: 
1:cee22ad:         public Position(long sourcePosition)
1:cee22ad:         {
1:cee22ad:             super();
1:cee22ad:             this.sourcePosition = sourcePosition;
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         @Override
1:cee22ad:         public long subtract(InputPosition other)
1:cee22ad:         {
1:cee22ad:             return sourcePosition - ((Position)other).sourcePosition;
1:cee22ad:         }
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     /**
1:cee22ad:      * Return a seekable representation of the current position. For compressed files this is chunk position
1:cee22ad:      * in file and offset within chunk.
1:cee22ad:      */
1:cee22ad:     public InputPosition getSeekPosition()
1:cee22ad:     {
1:cee22ad:         return new Position(getPosition());
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     public void seek(InputPosition pos)
1:cee22ad:     {
1:cee22ad:         updateCrc();
1:cee22ad:         bufferOffset = ((Position) pos).sourcePosition;
1:cee22ad:         buffer.position(0).limit(0);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public void resetCrc()
1:96d41f0:     {
1:96d41f0:         crc.reset();
1:ce63ccc:         crcPosition = buffer.position();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public void limit(long newLimit)
1:ce63ccc:     {
1:30bb255:         limitMark = getPosition();
1:30bb255:         limit = limitMark + newLimit;
1:30bb255:     }
1:30bb255: 
1:30bb255:     /**
1:30bb255:      * Returns the exact position in the uncompressed view of the file.
1:30bb255:      */
1:30bb255:     protected long getPosition()
1:30bb255:     {
1:30bb255:         return bufferOffset + buffer.position();
1:96d41f0:     }
1:96d41f0: 
1:cee22ad:     /**
1:cee22ad:      * Returns the position in the source file, which is different for getPosition() for compressed/encrypted files
1:cee22ad:      * and may be imprecise.
1:cee22ad:      */
1:cee22ad:     protected long getSourcePosition()
1:cee22ad:     {
1:cee22ad:         return bufferOffset;
1:cee22ad:     }
1:cee22ad: 
1:96d41f0:     public void resetLimit()
1:30bb255:     {
1:ce63ccc:         limit = Long.MAX_VALUE;
1:30bb255:         limitMark = -1;
1:96d41f0:     }
1:ce63ccc: 
1:ce63ccc:     public void checkLimit(int length) throws IOException
1:96d41f0:     {
1:30bb255:         if (getPosition() + length > limit)
1:ce63ccc:             throw new IOException("Digest mismatch exception");
1:96d41f0:     }
1:96d41f0: 
1:ce63ccc:     public long bytesPastLimit()
1:96d41f0:     {
1:30bb255:         assert limitMark != -1;
1:30bb255:         return getPosition() - limitMark;
1:96d41f0:     }
1:96d41f0: 
1:ce63ccc:     public boolean checkCrc() throws IOException
1:ce63ccc:     {
1:ce63ccc:         try
1:ce63ccc:         {
1:ce63ccc:             updateCrc();
1:96d41f0: 
1:ce63ccc:             // we must diable crc updates in case we rebuffer
1:ce63ccc:             // when called source.readInt()
1:ce63ccc:             crcUpdateDisabled = true;
1:ce63ccc:             return ((int) crc.getValue()) == readInt();
1:ce63ccc:         }
1:ce63ccc:         finally
1:ce63ccc:         {
1:ce63ccc:             crcPosition = buffer.position();
1:ce63ccc:             crcUpdateDisabled = false;
1:ce63ccc:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Override
1:ce63ccc:     public void readFully(byte[] b) throws IOException
1:ce63ccc:     {
1:ce63ccc:         checkLimit(b.length);
1:ce63ccc:         super.readFully(b);
1:ce63ccc:     }
1:96d41f0: 
1:ce63ccc:     @Override
1:ce63ccc:     public int read(byte[] b, int off, int len) throws IOException
1:ce63ccc:     {
1:ce63ccc:         checkLimit(len);
1:ce63ccc:         return super.read(b, off, len);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:30bb255:     protected void reBuffer()
1:ce63ccc:     {
1:30bb255:         Preconditions.checkState(buffer.remaining() == 0);
1:ce63ccc:         updateCrc();
1:30bb255:         bufferOffset += buffer.limit();
1:30bb255: 
1:30bb255:         readBuffer();
1:30bb255: 
1:ce63ccc:         crcPosition = buffer.position();
1:ce63ccc:     }
1:ce63ccc: 
1:30bb255:     protected void readBuffer()
1:30bb255:     {
1:30bb255:         buffer.clear();
1:30bb255:         while ((channel.read(buffer, bufferOffset)) == 0) {}
1:30bb255:         buffer.flip();
1:30bb255:     }
1:30bb255: 
1:cee22ad:     public void tryUncacheRead()
1:cee22ad:     {
1:cee22ad:         CLibrary.trySkipCache(getChannel().getFileDescriptor(), 0, getSourcePosition(), getPath());
1:cee22ad:     }
1:cee22ad: 
1:ce63ccc:     private void updateCrc()
1:ce63ccc:     {
1:967a2cf:         if (crcPosition == buffer.position() || crcUpdateDisabled)
2:ce63ccc:             return;
1:ce63ccc: 
1:ce63ccc:         assert crcPosition >= 0 && crcPosition < buffer.position();
1:ce63ccc: 
1:ce63ccc:         ByteBuffer unprocessed = buffer.duplicate();
1:ce63ccc:         unprocessed.position(crcPosition)
1:ce63ccc:                    .limit(buffer.position());
1:ce63ccc: 
1:ce63ccc:         crc.update(unprocessed);
1:ce63ccc:     }
1:ce63ccc: 
1:30bb255:     @Override
1:30bb255:     public void close()
1:ce63ccc:     {
1:30bb255:         BufferPool.put(buffer);
1:30bb255:         channel.close();
1:30bb255:     }
1:ce63ccc: 
1:30bb255:     protected String getPath()
1:30bb255:     {
1:30bb255:         return channel.filePath();
1:30bb255:     }
1:30bb255: 
1:30bb255:     public ChannelProxy getChannel()
1:30bb255:     {
1:30bb255:         return channel;
1:ce63ccc:     }
1:ce63ccc: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.CLibrary;
1:  * A {@link RandomAccessReader} wrapper that calculates the CRC in place.
1:  * In addition to calculating the CRC, it allows to enforce a maximum known size. This is needed
1:  * {@link org.apache.cassandra.utils.ByteBufferUtil#readWithLength(java.io.DataInput)}.
/////////////////////////////////////////////////////////////////////////
1:     static class Position implements InputPosition
1:         final long sourcePosition;
1: 
1:         public Position(long sourcePosition)
1:         {
1:             super();
1:             this.sourcePosition = sourcePosition;
1:         }
1: 
1:         @Override
1:         public long subtract(InputPosition other)
1:         {
1:             return sourcePosition - ((Position)other).sourcePosition;
1:         }
1:     }
1: 
1:     /**
1:      * Return a seekable representation of the current position. For compressed files this is chunk position
1:      * in file and offset within chunk.
1:      */
1:     public InputPosition getSeekPosition()
1:     {
1:         return new Position(getPosition());
1:     }
1: 
1:     public void seek(InputPosition pos)
1:     {
1:         updateCrc();
1:         bufferOffset = ((Position) pos).sourcePosition;
1:         buffer.position(0).limit(0);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the position in the source file, which is different for getPosition() for compressed/encrypted files
1:      * and may be imprecise.
1:      */
1:     protected long getSourcePosition()
1:     {
1:         return bufferOffset;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void tryUncacheRead()
1:     {
1:         CLibrary.trySkipCache(getChannel().getFileDescriptor(), 0, getSourcePosition(), getPath());
1:     }
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
1: import org.apache.cassandra.io.compress.BufferType;
1: import org.apache.cassandra.io.util.*;
1: import org.apache.cassandra.utils.memory.BufferPool;
/////////////////////////////////////////////////////////////////////////
1: public class ChecksummedDataInput extends RebufferingInputStream
1:     private long limitMark;
1:     protected long bufferOffset;
1:     protected final ChannelProxy channel;
1: 
1:     ChecksummedDataInput(ChannelProxy channel, BufferType bufferType)
1:         super(BufferPool.get(RandomAccessReader.DEFAULT_BUFFER_SIZE, bufferType));
1:         this.channel = channel;
1:         bufferOffset = 0;
1:         buffer.limit(0);
1:     ChecksummedDataInput(ChannelProxy channel)
1:         this(channel, BufferType.OFF_HEAP);
1:     @SuppressWarnings("resource")
1:     public static ChecksummedDataInput open(File file)
1:         return new ChecksummedDataInput(new ChannelProxy(file));
1:     }
1: 
1:     public boolean isEOF()
1:     {
1:         return getPosition() == channel.size();
1:     }
1: 
1:     /**
0:      * Returns the position in the source file, which is different for getPosition() for compressed/encrypted files
0:      * and may be imprecise.
1:      */
0:     public long getSourcePosition()
1:     {
0:         return getPosition();
/////////////////////////////////////////////////////////////////////////
1:         limitMark = getPosition();
1:         limit = limitMark + newLimit;
1:     }
1: 
1:     /**
1:      * Returns the exact position in the uncompressed view of the file.
1:      */
1:     protected long getPosition()
1:     {
1:         return bufferOffset + buffer.position();
1:         limitMark = -1;
1:         if (getPosition() + length > limit)
1:         assert limitMark != -1;
1:         return getPosition() - limitMark;
/////////////////////////////////////////////////////////////////////////
1:     protected void reBuffer()
1:         Preconditions.checkState(buffer.remaining() == 0);
1:         bufferOffset += buffer.limit();
1: 
1:         readBuffer();
1: 
1:     protected void readBuffer()
1:     {
1:         buffer.clear();
1:         while ((channel.read(buffer, bufferOffset)) == 0) {}
1:         buffer.flip();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void close()
1:         BufferPool.put(buffer);
1:         channel.close();
1:     }
1:     protected String getPath()
1:     {
1:         return channel.filePath();
1:     }
1: 
1:     public ChannelProxy getChannel()
1:     {
1:         return channel;
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource")   // channel owned by RandomAccessReaderWithOwnChannel
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataPosition;
/////////////////////////////////////////////////////////////////////////
0:     private DataPosition limitMark;
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.FSError;
0: import org.apache.cassandra.io.FSReadError;
0: import org.apache.cassandra.io.compress.ICompressor;
0: import org.apache.cassandra.schema.CompressionParams;
/////////////////////////////////////////////////////////////////////////
0: public class ChecksummedDataInput extends RandomAccessReader.RandomAccessReaderWithOwnChannel
/////////////////////////////////////////////////////////////////////////
0:     protected ChecksummedDataInput(Builder builder)
/////////////////////////////////////////////////////////////////////////
0:     protected void releaseBuffer()
1:     {
0:         super.releaseBuffer();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public static class Builder extends RandomAccessReader.Builder
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:967a2cf
/////////////////////////////////////////////////////////////////////////
1:         if (crcPosition == buffer.position() || crcUpdateDisabled)
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.nio.ByteBuffer;
0: import org.apache.cassandra.io.util.ChannelProxy;
0: import org.apache.cassandra.io.util.FileMark;
0: import org.apache.cassandra.io.util.RandomAccessReader;
0:  * A {@link RandomAccessReader} wrapper that calctulates the CRC in place.
1:  * to allocate an extra byte array just that purpose. The CRC can be embedded in the input stream and checked via checkCrc().
0:  * In addition to calculating the CRC, it allows to enforce a maximim known size. This is needed
0: public final class ChecksummedDataInput extends RandomAccessReader.RandomAccessReaderWithOwnChannel
1:     private int crcPosition;
1:     private boolean crcUpdateDisabled;
1:     private long limit;
0:     private FileMark limitMark;
1: 
0:     private ChecksummedDataInput(Builder builder)
0:         super(builder);
1:         crcPosition = 0;
1:         crcUpdateDisabled = false;
1: 
1:         resetLimit();
0:     public static ChecksummedDataInput open(File file)
0:         return new Builder(new ChannelProxy(file)).build();
1:         crcPosition = buffer.position();
1:     }
1: 
1:     public void limit(long newLimit)
1:     {
0:         limit = newLimit;
0:         limitMark = mark();
1:         limit = Long.MAX_VALUE;
0:         limitMark = null;
1:     public void checkLimit(int length) throws IOException
0:         if (limitMark == null)
1:             return;
1: 
0:         if ((bytesPastLimit() + length) > limit)
1:             throw new IOException("Digest mismatch exception");
1:     public long bytesPastLimit()
0:         assert limitMark != null;
0:         return bytesPastMark(limitMark);
1:     public boolean checkCrc() throws IOException
1:         try
1:         {
1:             updateCrc();
1:             // we must diable crc updates in case we rebuffer
1:             // when called source.readInt()
1:             crcUpdateDisabled = true;
1:             return ((int) crc.getValue()) == readInt();
1:         }
1:         finally
1:         {
1:             crcPosition = buffer.position();
1:             crcUpdateDisabled = false;
1:         }
1:     public void readFully(byte[] b) throws IOException
1:         checkLimit(b.length);
1:         super.readFully(b);
1:     }
1:     @Override
1:     public int read(byte[] b, int off, int len) throws IOException
1:     {
1:         checkLimit(len);
1:         return super.read(b, off, len);
1:     }
1: 
1:     @Override
0:     public void reBuffer()
1:     {
1:         updateCrc();
0:         super.reBuffer();
1:         crcPosition = buffer.position();
1:     }
1: 
1:     private void updateCrc()
1:     {
0:         if (crcPosition == buffer.position() | crcUpdateDisabled)
1:             return;
1: 
1:         assert crcPosition >= 0 && crcPosition < buffer.position();
1: 
1:         ByteBuffer unprocessed = buffer.duplicate();
1:         unprocessed.position(crcPosition)
1:                    .limit(buffer.position());
1: 
1:         crc.update(unprocessed);
1:     }
1: 
0:     public final static class Builder extends RandomAccessReader.Builder
1:     {
0:         public Builder(ChannelProxy channel)
1:         {
0:             super(channel);
1:         }
1: 
0:         public ChecksummedDataInput build()
1:         {
0:             return new ChecksummedDataInput(this);
1:         }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.util.zip.CRC32;
1: 
0: import org.apache.cassandra.io.util.AbstractDataInput;
1: 
0: /**
0:  * An {@link AbstractDataInput} wrapper that calctulates the CRC in place.
1:  *
1:  * Useful for {@link org.apache.cassandra.hints.HintsReader}, for example, where we must verify the CRC, yet don't want
0:  * to allocate an extra byte array just that purpose.
1:  *
0:  * In addition to calculating the CRC, allows to enforce a maximim known size. This is needed
1:  * so that {@link org.apache.cassandra.db.Mutation.MutationSerializer} doesn't blow up the heap when deserializing a
1:  * corrupted sequence by reading a huge corrupted length of bytes via
0:  * via {@link org.apache.cassandra.utils.ByteBufferUtil#readWithLength(java.io.DataInput)}.
1:  */
0: public final class ChecksummedDataInput extends AbstractDataInput
1: {
1:     private final CRC32 crc;
0:     private final AbstractDataInput source;
0:     private int limit;
1: 
0:     private ChecksummedDataInput(AbstractDataInput source)
1:     {
0:         this.source = source;
1: 
1:         crc = new CRC32();
0:         limit = Integer.MAX_VALUE;
1:     }
1: 
0:     public static ChecksummedDataInput wrap(AbstractDataInput source)
1:     {
0:         return new ChecksummedDataInput(source);
1:     }
1: 
1:     public void resetCrc()
1:     {
1:         crc.reset();
1:     }
1: 
1:     public void resetLimit()
1:     {
0:         limit = Integer.MAX_VALUE;
1:     }
1: 
0:     public void limit(int newLimit)
1:     {
0:         limit = newLimit;
1:     }
1: 
0:     public int bytesRemaining()
1:     {
0:         return limit;
1:     }
1: 
0:     public int getCrc()
1:     {
0:         return (int) crc.getValue();
1:     }
1: 
0:     public void seek(long position) throws IOException
1:     {
0:         source.seek(position);
1:     }
1: 
0:     public long getPosition()
1:     {
0:         return source.getPosition();
1:     }
1: 
0:     public long getPositionLimit()
1:     {
0:         return source.getPositionLimit();
1:     }
1: 
0:     public int read() throws IOException
1:     {
0:         int b = source.read();
0:         crc.update(b);
0:         limit--;
0:         return b;
1:     }
1: 
1:     @Override
0:     public int read(byte[] buff, int offset, int length) throws IOException
1:     {
0:         if (length > limit)
0:             throw new IOException("Digest mismatch exception");
1: 
0:         int copied = source.read(buff, offset, length);
0:         crc.update(buff, offset, copied);
0:         limit -= copied;
0:         return copied;
1:     }
1: }
============================================================================