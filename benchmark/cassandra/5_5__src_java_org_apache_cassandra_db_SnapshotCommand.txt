1:7f4693d: /*
1:7f4693d:  * Licensed to the Apache Software Foundation (ASF) under one
1:7f4693d:  * or more contributor license agreements.  See the NOTICE file
1:7f4693d:  * distributed with this work for additional information
1:7f4693d:  * regarding copyright ownership.  The ASF licenses this file
1:7f4693d:  * to you under the Apache License, Version 2.0 (the
1:7f4693d:  * "License"); you may not use this file except in compliance
1:7f4693d:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:7f4693d:  */
1:07cf56f: package org.apache.cassandra.db;
1:7f4693d: 
1:8142a2f: import java.io.IOException;
4:8142a2f: 
1:8142a2f: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:021ec71: import org.apache.cassandra.net.MessagingService;
1:f81cc74: 
1:5a6f0b8: public class SnapshotCommand
2:8142a2f: {
1:f81cc74:     public static final SnapshotCommandSerializer serializer = new SnapshotCommandSerializer();
1:8142a2f: 
1:8142a2f:     public final String keyspace;
1:8142a2f:     public final String column_family;
1:8142a2f:     public final String snapshot_name;
1:8142a2f:     public final boolean clear_snapshot;
1:8142a2f: 
1:8142a2f:     public SnapshotCommand(String keyspace, String columnFamily, String snapshotName, boolean clearSnapshot)
1:8142a2f:     {
1:8142a2f:         this.keyspace = keyspace;
1:8142a2f:         this.column_family = columnFamily;
1:8142a2f:         this.snapshot_name = snapshotName;
1:8142a2f:         this.clear_snapshot = clearSnapshot;
2:8142a2f:     }
1:8142a2f: 
1:5a6f0b8:     public MessageOut createMessage()
1:8142a2f:     {
1:021ec71:         return new MessageOut<SnapshotCommand>(MessagingService.Verb.SNAPSHOT, this, serializer);
1:8142a2f:     }
1:8142a2f: 
1:8142a2f:     @Override
1:8142a2f:     public String toString()
1:8142a2f:     {
1:8142a2f:         return "SnapshotCommand{" + "keyspace='" + keyspace + '\'' +
1:8142a2f:                                   ", column_family='" + column_family + '\'' +
1:8142a2f:                                   ", snapshot_name=" + snapshot_name +
1:8142a2f:                                   ", clear_snapshot=" + clear_snapshot + '}';
1:8142a2f:     }
1:8142a2f: }
1:8142a2f: 
1:8142a2f: class SnapshotCommandSerializer implements IVersionedSerializer<SnapshotCommand>
1:8142a2f: {
1:75508ec:     public void serialize(SnapshotCommand snapshot_command, DataOutputPlus out, int version) throws IOException
1:8142a2f:     {
1:60d9c7f:         out.writeUTF(snapshot_command.keyspace);
1:60d9c7f:         out.writeUTF(snapshot_command.column_family);
1:60d9c7f:         out.writeUTF(snapshot_command.snapshot_name);
1:60d9c7f:         out.writeBoolean(snapshot_command.clear_snapshot);
1:8142a2f:     }
1:8142a2f: 
1:03f72ac:     public SnapshotCommand deserialize(DataInputPlus in, int version) throws IOException
1:8142a2f:     {
1:60d9c7f:         String keyspace = in.readUTF();
1:60d9c7f:         String column_family = in.readUTF();
1:60d9c7f:         String snapshot_name = in.readUTF();
1:60d9c7f:         boolean clear_snapshot = in.readBoolean();
1:8142a2f:         return new SnapshotCommand(keyspace, column_family, snapshot_name, clear_snapshot);
1:8142a2f:     }
1:8142a2f: 
1:f81cc74:     public long serializedSize(SnapshotCommand sc, int version)
1:8142a2f:     {
1:03f72ac:         return TypeSizes.sizeof(sc.keyspace)
1:03f72ac:              + TypeSizes.sizeof(sc.column_family)
1:03f72ac:              + TypeSizes.sizeof(sc.snapshot_name)
1:03f72ac:              + TypeSizes.sizeof(sc.clear_snapshot);
1:8142a2f:     }
1:8142a2f: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public SnapshotCommand deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         return TypeSizes.sizeof(sc.keyspace)
1:              + TypeSizes.sizeof(sc.column_family)
1:              + TypeSizes.sizeof(sc.snapshot_name)
1:              + TypeSizes.sizeof(sc.clear_snapshot);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(SnapshotCommand snapshot_command, DataOutputPlus out, int version) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(SnapshotCommand snapshot_command, DataOutput out, int version) throws IOException
1:         out.writeUTF(snapshot_command.keyspace);
1:         out.writeUTF(snapshot_command.column_family);
1:         out.writeUTF(snapshot_command.snapshot_name);
1:         out.writeBoolean(snapshot_command.clear_snapshot);
0:     public SnapshotCommand deserialize(DataInput in, int version) throws IOException
1:         String keyspace = in.readUTF();
1:         String column_family = in.readUTF();
1:         String snapshot_name = in.readUTF();
1:         boolean clear_snapshot = in.readBoolean();
commit:70554b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return TypeSizes.NATIVE.sizeof(sc.keyspace)
0:              + TypeSizes.NATIVE.sizeof(sc.column_family)
0:              + TypeSizes.NATIVE.sizeof(sc.snapshot_name)
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:              + TypeSizes.NATIVE.sizeof(sc.clear_snapshot);
commit:a06be23
/////////////////////////////////////////////////////////////////////////
commit:021ec71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:         return new MessageOut<SnapshotCommand>(MessagingService.Verb.SNAPSHOT, this, serializer);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public static SnapshotCommand read(MessageIn message) throws IOException
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
1: public class SnapshotCommand
/////////////////////////////////////////////////////////////////////////
1:     public MessageOut createMessage()
0:         return new MessageOut<SnapshotCommand>(StorageService.Verb.SNAPSHOT, this, serializer);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: import static org.apache.cassandra.utils.FBUtilities.serializedUTF8Size;
1:     public static final SnapshotCommandSerializer serializer = new SnapshotCommandSerializer();
/////////////////////////////////////////////////////////////////////////
1:     public long serializedSize(SnapshotCommand sc, int version)
0:         return serializedUTF8Size(sc.keyspace)
0:              + serializedUTF8Size(sc.column_family)
0:              + serializedUTF8Size(sc.snapshot_name)
0:              + DBTypeSizes.NATIVE.sizeof(sc.clear_snapshot);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db;
commit:7f4693d
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:8142a2f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db;
1: 
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.Arrays;
1: 
1: import org.apache.cassandra.io.IVersionedSerializer;
0: import org.apache.cassandra.io.util.DataOutputBuffer;
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessageProducer;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class SnapshotCommand implements MessageProducer
1: {
0:     private static final SnapshotCommandSerializer serializer = new SnapshotCommandSerializer();
1: 
1:     public final String keyspace;
1:     public final String column_family;
1:     public final String snapshot_name;
1:     public final boolean clear_snapshot;
1: 
1:     public SnapshotCommand(String keyspace, String columnFamily, String snapshotName, boolean clearSnapshot)
1:     {
1:         this.keyspace = keyspace;
1:         this.column_family = columnFamily;
1:         this.snapshot_name = snapshotName;
1:         this.clear_snapshot = clearSnapshot;
1:     }
1: 
0:     public Message getMessage(Integer version) throws IOException
1:     {
0:         DataOutputBuffer dob = new DataOutputBuffer();
0:         serializer.serialize(this, dob, version);
0:         return new Message(FBUtilities.getBroadcastAddress(), StorageService.Verb.SNAPSHOT, Arrays.copyOf(dob.getData(), dob.getLength()), version);
1:     }
1: 
0:     public static SnapshotCommand read(Message message) throws IOException
1:     {
0:         byte[] bytes = message.getMessageBody();
0:         FastByteArrayInputStream bis = new FastByteArrayInputStream(bytes);
0:         return serializer.deserialize(new DataInputStream(bis), message.getVersion());
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "SnapshotCommand{" + "keyspace='" + keyspace + '\'' +
1:                                   ", column_family='" + column_family + '\'' +
1:                                   ", snapshot_name=" + snapshot_name +
1:                                   ", clear_snapshot=" + clear_snapshot + '}';
1:     }
1: }
1: 
1: class SnapshotCommandSerializer implements IVersionedSerializer<SnapshotCommand>
1: {
0:     public void serialize(SnapshotCommand snapshot_command, DataOutput dos, int version) throws IOException
1:     {
0:         dos.writeUTF(snapshot_command.keyspace);
0:         dos.writeUTF(snapshot_command.column_family);
0:         dos.writeUTF(snapshot_command.snapshot_name);
0:         dos.writeBoolean(snapshot_command.clear_snapshot);
1:     }
1: 
0:     public SnapshotCommand deserialize(DataInput dis, int version) throws IOException
1:     {
0:         String keyspace = dis.readUTF();
0:         String column_family = dis.readUTF();
0:         String snapshot_name = dis.readUTF();
0:         boolean clear_snapshot = dis.readBoolean();
1:         return new SnapshotCommand(keyspace, column_family, snapshot_name, clear_snapshot);
1:     }
1: 
0:     public long serializedSize(SnapshotCommand snapshot_command, int version)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================