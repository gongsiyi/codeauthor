1:7374e9b: /*
1:7374e9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:7374e9b:  * or more contributor license agreements.  See the NOTICE file
1:7374e9b:  * distributed with this work for additional information
1:7374e9b:  * regarding copyright ownership.  The ASF licenses this file
1:7374e9b:  * to you under the Apache License, Version 2.0 (the
1:7374e9b:  * "License"); you may not use this file except in compliance
1:7374e9b:  * with the License.  You may obtain a copy of the License at
1:7374e9b:  *
1:7374e9b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7374e9b:  *
1:7374e9b:  * Unless required by applicable law or agreed to in writing, software
1:7374e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7374e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7374e9b:  * See the License for the specific language governing permissions and
1:7374e9b:  * limitations under the License.
1:7374e9b:  */
1:7374e9b: package org.apache.cassandra.security;
1:7374e9b: 
1:7374e9b: import java.io.File;
1:7374e9b: import java.io.IOException;
1:7374e9b: import java.io.RandomAccessFile;
1:7374e9b: import java.nio.ByteBuffer;
1:7374e9b: import java.nio.channels.FileChannel;
1:7374e9b: import java.util.HashMap;
1:7374e9b: import java.util.Random;
1:7374e9b: import javax.crypto.BadPaddingException;
1:7374e9b: import javax.crypto.Cipher;
1:7374e9b: import javax.crypto.IllegalBlockSizeException;
1:7374e9b: import javax.crypto.ShortBufferException;
1:7374e9b: 
1:7374e9b: import org.junit.Assert;
1:7374e9b: import org.junit.Before;
1:9797511: import org.junit.BeforeClass;
1:7374e9b: import org.junit.Test;
1:7374e9b: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:7374e9b: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1:7374e9b: import org.apache.cassandra.io.compress.ICompressor;
1:7374e9b: import org.apache.cassandra.io.compress.LZ4Compressor;
1:7374e9b: import org.apache.cassandra.io.util.RandomAccessReader;
1:7374e9b: 
1:7374e9b: public class EncryptionUtilsTest
1:7374e9b: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:7374e9b:     final Random random = new Random();
1:7374e9b:     ICompressor compressor;
1:7374e9b:     TransparentDataEncryptionOptions tdeOptions;
1:7374e9b: 
1:7374e9b:     @Before
1:7374e9b:     public void setup()
1:7374e9b:     {
1:7374e9b:         compressor = LZ4Compressor.create(new HashMap<>());
1:7374e9b:         tdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void compress() throws IOException
1:7374e9b:     {
1:7374e9b:         byte[] buf = new byte[(1 << 13) - 13];
1:7374e9b:         random.nextBytes(buf);
1:7374e9b:         ByteBuffer compressedBuffer = EncryptionUtils.compress(ByteBuffer.wrap(buf), ByteBuffer.allocate(0), true, compressor);
1:7374e9b:         ByteBuffer uncompressedBuffer = EncryptionUtils.uncompress(compressedBuffer, ByteBuffer.allocate(0), true, compressor);
1:7374e9b:         Assert.assertArrayEquals(buf, uncompressedBuffer.array());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void encrypt() throws BadPaddingException, ShortBufferException, IllegalBlockSizeException, IOException
1:7374e9b:     {
1:7374e9b:         byte[] buf = new byte[(1 << 12) - 7];
1:7374e9b:         random.nextBytes(buf);
1:7374e9b: 
1:7374e9b:         // encrypt
1:7374e9b:         CipherFactory cipherFactory = new CipherFactory(tdeOptions);
1:7374e9b:         Cipher encryptor = cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1:7374e9b: 
1:7374e9b:         File f = File.createTempFile("commitlog-enc-utils-", ".tmp");
1:7374e9b:         f.deleteOnExit();
1:7374e9b:         FileChannel channel = new RandomAccessFile(f, "rw").getChannel();
1:7374e9b:         EncryptionUtils.encryptAndWrite(ByteBuffer.wrap(buf), channel, true, encryptor);
1:7374e9b:         channel.close();
1:7374e9b: 
1:7374e9b:         // decrypt
1:7374e9b:         Cipher decryptor = cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, encryptor.getIV());
1:7374e9b:         ByteBuffer decryptedBuffer = EncryptionUtils.decrypt(RandomAccessReader.open(f), ByteBuffer.allocate(0), true, decryptor);
1:7374e9b: 
1:7374e9b:         // normally, we'd just call BB.array(), but that gives you the *entire* backing array, not with any of the offsets (position,limit) applied.
1:7374e9b:         // thus, just for this test, we copy the array and perform an array-level comparison with those offsets
1:7374e9b:         decryptedBuffer.limit(buf.length);
1:7374e9b:         byte[] b = new byte[buf.length];
1:7374e9b:         System.arraycopy(decryptedBuffer.array(), 0, b, 0, buf.length);
1:7374e9b:         Assert.assertArrayEquals(buf, b);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void fullRoundTrip() throws IOException, BadPaddingException, ShortBufferException, IllegalBlockSizeException
1:7374e9b:     {
1:7374e9b:         // compress
1:7374e9b:         byte[] buf = new byte[(1 << 12) - 7];
1:7374e9b:         random.nextBytes(buf);
1:7374e9b:         ByteBuffer compressedBuffer = EncryptionUtils.compress(ByteBuffer.wrap(buf), ByteBuffer.allocate(0), true, compressor);
1:7374e9b: 
1:7374e9b:         // encrypt
1:7374e9b:         CipherFactory cipherFactory = new CipherFactory(tdeOptions);
1:7374e9b:         Cipher encryptor = cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1:7374e9b:         File f = File.createTempFile("commitlog-enc-utils-", ".tmp");
1:7374e9b:         f.deleteOnExit();
1:7374e9b:         FileChannel channel = new RandomAccessFile(f, "rw").getChannel();
1:7374e9b:         EncryptionUtils.encryptAndWrite(compressedBuffer, channel, true, encryptor);
1:7374e9b: 
1:7374e9b:         // decrypt
1:7374e9b:         Cipher decryptor = cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, encryptor.getIV());
1:7374e9b:         ByteBuffer decryptedBuffer = EncryptionUtils.decrypt(RandomAccessReader.open(f), ByteBuffer.allocate(0), true, decryptor);
1:7374e9b: 
1:7374e9b:         // uncompress
1:7374e9b:         ByteBuffer uncompressedBuffer = EncryptionUtils.uncompress(decryptedBuffer, ByteBuffer.allocate(0), true, compressor);
1:7374e9b:         Assert.assertArrayEquals(buf, uncompressedBuffer.array());
1:7374e9b:     }
1:7374e9b: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.security;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.HashMap;
1: import java.util.Random;
1: import javax.crypto.BadPaddingException;
1: import javax.crypto.Cipher;
1: import javax.crypto.IllegalBlockSizeException;
1: import javax.crypto.ShortBufferException;
1: 
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.compress.LZ4Compressor;
1: import org.apache.cassandra.io.util.RandomAccessReader;
1: 
1: public class EncryptionUtilsTest
1: {
1:     final Random random = new Random();
1:     ICompressor compressor;
1:     TransparentDataEncryptionOptions tdeOptions;
1: 
1:     @Before
1:     public void setup()
1:     {
1:         compressor = LZ4Compressor.create(new HashMap<>());
1:         tdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:     }
1: 
1:     @Test
1:     public void compress() throws IOException
1:     {
1:         byte[] buf = new byte[(1 << 13) - 13];
1:         random.nextBytes(buf);
1:         ByteBuffer compressedBuffer = EncryptionUtils.compress(ByteBuffer.wrap(buf), ByteBuffer.allocate(0), true, compressor);
1:         ByteBuffer uncompressedBuffer = EncryptionUtils.uncompress(compressedBuffer, ByteBuffer.allocate(0), true, compressor);
1:         Assert.assertArrayEquals(buf, uncompressedBuffer.array());
1:     }
1: 
1:     @Test
1:     public void encrypt() throws BadPaddingException, ShortBufferException, IllegalBlockSizeException, IOException
1:     {
1:         byte[] buf = new byte[(1 << 12) - 7];
1:         random.nextBytes(buf);
1: 
1:         // encrypt
1:         CipherFactory cipherFactory = new CipherFactory(tdeOptions);
1:         Cipher encryptor = cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1: 
1:         File f = File.createTempFile("commitlog-enc-utils-", ".tmp");
1:         f.deleteOnExit();
1:         FileChannel channel = new RandomAccessFile(f, "rw").getChannel();
1:         EncryptionUtils.encryptAndWrite(ByteBuffer.wrap(buf), channel, true, encryptor);
1:         channel.close();
1: 
1:         // decrypt
1:         Cipher decryptor = cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, encryptor.getIV());
1:         ByteBuffer decryptedBuffer = EncryptionUtils.decrypt(RandomAccessReader.open(f), ByteBuffer.allocate(0), true, decryptor);
1: 
1:         // normally, we'd just call BB.array(), but that gives you the *entire* backing array, not with any of the offsets (position,limit) applied.
1:         // thus, just for this test, we copy the array and perform an array-level comparison with those offsets
1:         decryptedBuffer.limit(buf.length);
1:         byte[] b = new byte[buf.length];
1:         System.arraycopy(decryptedBuffer.array(), 0, b, 0, buf.length);
1:         Assert.assertArrayEquals(buf, b);
1:     }
1: 
1:     @Test
1:     public void fullRoundTrip() throws IOException, BadPaddingException, ShortBufferException, IllegalBlockSizeException
1:     {
1:         // compress
1:         byte[] buf = new byte[(1 << 12) - 7];
1:         random.nextBytes(buf);
1:         ByteBuffer compressedBuffer = EncryptionUtils.compress(ByteBuffer.wrap(buf), ByteBuffer.allocate(0), true, compressor);
1: 
1:         // encrypt
1:         CipherFactory cipherFactory = new CipherFactory(tdeOptions);
1:         Cipher encryptor = cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1:         File f = File.createTempFile("commitlog-enc-utils-", ".tmp");
1:         f.deleteOnExit();
1:         FileChannel channel = new RandomAccessFile(f, "rw").getChannel();
1:         EncryptionUtils.encryptAndWrite(compressedBuffer, channel, true, encryptor);
1: 
1:         // decrypt
1:         Cipher decryptor = cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, encryptor.getIV());
1:         ByteBuffer decryptedBuffer = EncryptionUtils.decrypt(RandomAccessReader.open(f), ByteBuffer.allocate(0), true, decryptor);
1: 
1:         // uncompress
1:         ByteBuffer uncompressedBuffer = EncryptionUtils.uncompress(decryptedBuffer, ByteBuffer.allocate(0), true, compressor);
1:         Assert.assertArrayEquals(buf, uncompressedBuffer.array());
1:     }
1: }
============================================================================