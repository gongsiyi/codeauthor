1:f35a6b5: /*
1:f35a6b5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f35a6b5:  * or more contributor license agreements.  See the NOTICE file
1:f35a6b5:  * distributed with this work for additional information
1:f35a6b5:  * regarding copyright ownership.  The ASF licenses this file
1:f35a6b5:  * to you under the Apache License, Version 2.0 (the
1:f35a6b5:  * "License"); you may not use this file except in compliance
1:f35a6b5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:f35a6b5:  */
1:fc8b76f: package org.apache.cassandra.serializers;
1:e9c6742: 
1:f35a6b5: import java.nio.ByteBuffer;
1:f35a6b5: import java.util.UUID;
1:e9c6742: 
1:daff1fc: import org.apache.cassandra.utils.ByteBufferUtil;
1:daff1fc: import org.apache.cassandra.utils.UUIDGen;
1:daff1fc: 
1:fc8b76f: public class UUIDSerializer implements TypeSerializer<UUID>
5:f35a6b5: {
1:e9c6742:     public static final UUIDSerializer instance = new UUIDSerializer();
1:07cdfd0: 
1:daff1fc:     public UUID deserialize(ByteBuffer bytes)
1:e9c6742:     {
1:daff1fc:         return bytes.remaining() == 0 ? null : UUIDGen.getUUID(bytes);
1:e9c6742:     }
1:e9c6742: 
1:daff1fc:     public ByteBuffer serialize(UUID value)
1:e9c6742:     {
1:2d991a7:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : UUIDGen.toByteBuffer(value);
1:e9c6742:     }
1:07cdfd0: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e9c6742:     {
1:e9c6742:         if (bytes.remaining() != 16 && bytes.remaining() != 0)
1:e9c6742:             throw new MarshalException(String.format("UUID should be 16 or 0 bytes (%d)", bytes.remaining()));
1:e9c6742:         // not sure what the version should be for this.
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public String toString(UUID value)
1:b226cf9:     {
1:d6f32e4:         return value == null ? "" : value.toString();
1:b226cf9:     }
2:2fd3268: 
1:e9c6742:     public Class<UUID> getType()
1:f35a6b5:     {
1:e9c6742:         return UUID.class;
5:f35a6b5:     }
1:f35a6b5: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2d991a7
/////////////////////////////////////////////////////////////////////////
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : UUIDGen.toByteBuffer(value);
commit:d6f32e4
/////////////////////////////////////////////////////////////////////////
1:         return value == null ? "" : value.toString();
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1:     public UUID deserialize(ByteBuffer bytes)
1:         return bytes.remaining() == 0 ? null : UUIDGen.getUUID(bytes);
1:     public ByteBuffer serialize(UUID value)
0:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBuffer.wrap(UUIDGen.decompose(value));
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public class UUIDSerializer implements TypeSerializer<UUID>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: 
0: package org.apache.cassandra.type;
1: 
0: import org.apache.cassandra.utils.UUIDGen;
0: public class UUIDSerializer extends AbstractSerializer<UUID>
1:     public static final UUIDSerializer instance = new UUIDSerializer();
0:     @Override
0:     public UUID serialize(ByteBuffer bytes)
1:     {
0:         return UUIDGen.getUUID(bytes);
1:     }
0:     @Override
0:     public ByteBuffer deserialize(UUID value)
1:     {
0:         return ByteBuffer.wrap(UUIDGen.decompose(value));
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 16 && bytes.remaining() != 0)
1:             throw new MarshalException(String.format("UUID should be 16 or 0 bytes (%d)", bytes.remaining()));
1:         // not sure what the version should be for this.
1:     }
1: 
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     public String toString(UUID value)
0:         return value.toString();
0:     @Override
1:     public Class<UUID> getType()
1:         return UUID.class;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cql.jdbc;
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0: 
0:     public ByteBuffer decompose(UUID value)
1:     {
0:         return ByteBuffer.wrap(UUIDGen.decompose(value));
1:     }
commit:f35a6b5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.term;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
0: 
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
0: 
0: import org.apache.cassandra.utils.UUIDGen;
0: 
0: public class TimeUUIDTerm extends AbstractUUIDTerm
1: {
0:     public static final TimeUUIDTerm instance = new TimeUUIDTerm();
0:     
0:     TimeUUIDTerm() {}
0:     
0:     public String getString(ByteBuffer bytes)
1:     {
0:         if (bytes.remaining() == 0)
1:         {
0:             return "";
1:         }
0:         if (bytes.remaining() != 16)
1:         {
0:             throw new MarshalException("UUIDs must be exactly 16 bytes");
1:         }
0:         UUID uuid = UUIDGen.getUUID(bytes);
0:         if (uuid.version() != 1)
1:         {
0:             throw new MarshalException("TimeUUID only makes sense with version 1 UUIDs");
1:         }
0:         return uuid.toString();
1:     }
0: 
0:     public UUID compose(ByteBuffer bytes)
1:     {
0:         return UUIDGen.getUUID(bytes);
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0: public class JdbcTimeUUID extends AbstractJdbcUUID
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.jdbc;
/////////////////////////////////////////////////////////////////////////
0: public class JdbcTimeUUID extends JdbcLong
0:     public static final JdbcTimeUUID instance = new JdbcTimeUUID();
0:     JdbcTimeUUID() {}
============================================================================