1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.util.*;
1:72790dc: import java.util.concurrent.ThreadLocalRandom;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: 
1:72790dc: import org.junit.Assert;
1:72790dc: import org.junit.Test;
1:72790dc: 
1:72790dc: import static org.apache.cassandra.index.sasi.utils.LongIterator.convert;
1:72790dc: 
1:72790dc: public class RangeUnionIteratorTest
1:72790dc: {
1:72790dc:     @Test
1:7d857b4:     public void mergingOfEqualTokensTest()
1:7d857b4:     {
1:7d857b4:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:7d857b4: 
1:7d857b4:         int size = 1000000;
1:7d857b4:         final long[] arr = new long[size];
1:7d857b4:         for (int i = 0; i < size; i++)
1:7d857b4:             arr[i] = i;
1:7d857b4: 
1:7d857b4:         builder.add(new LongIterator(arr));
1:7d857b4:         builder.add(new LongIterator(arr));
1:7d857b4: 
1:7d857b4:         Assert.assertEquals(convert(arr), convert(builder.build()));
1:7d857b4:     }
1:7d857b4: 
1:7d857b4: 
1:7d857b4:     @Test
1:72790dc:     public void testNoOverlappingValues()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 7L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 8L, 9L, 10L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSingleIterator()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 4L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 4L, 9L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testOverlappingValues()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 6L, 8L, 9L, 10L }));
1:72790dc: 
1:72790dc:         List<Long> values = convert(builder.build());
1:72790dc: 
1:72790dc:         Assert.assertEquals(values.toString(), convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), values);
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testNoOverlappingRanges()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testTwoIteratorsWithSingleValues()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 1L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testDifferentSizeIterators()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L, 12L, 13L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 7L, 14L, 15 }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 8L, 9L, 10L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 12L, 13L, 14L, 15L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testRandomSequences()
1:72790dc:     {
1:72790dc:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:72790dc: 
1:72790dc:         long[][] values = new long[random.nextInt(1, 20)][];
1:72790dc:         int numTests = random.nextInt(10, 20);
1:72790dc: 
1:72790dc:         for (int tests = 0; tests < numTests; tests++)
1:72790dc:         {
1:72790dc:             RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc:             int totalCount = 0;
1:72790dc: 
1:72790dc:             for (int i = 0; i < values.length; i++)
1:72790dc:             {
1:72790dc:                 long[] part = new long[random.nextInt(1, 500)];
1:72790dc:                 for (int j = 0; j < part.length; j++)
1:72790dc:                     part[j] = random.nextLong();
1:72790dc: 
1:72790dc:                 // all of the parts have to be sorted to mimic SSTable
1:72790dc:                 Arrays.sort(part);
1:72790dc: 
1:72790dc:                 values[i] = part;
1:72790dc:                 builder.add(new LongIterator(part));
1:72790dc:                 totalCount += part.length;
1:72790dc:             }
1:72790dc: 
1:72790dc:             long[] totalOrdering = new long[totalCount];
1:72790dc:             int index = 0;
1:72790dc: 
1:72790dc:             for (long[] part : values)
1:72790dc:             {
1:72790dc:                 for (long value : part)
1:72790dc:                     totalOrdering[index++] = value;
1:72790dc:             }
1:72790dc: 
1:72790dc:             Arrays.sort(totalOrdering);
1:72790dc: 
1:72790dc:             int count = 0;
1:72790dc:             RangeIterator<Long, Token> tokens = builder.build();
1:72790dc: 
1:72790dc:             Assert.assertNotNull(tokens);
1:72790dc:             while (tokens.hasNext())
1:72790dc:                 Assert.assertEquals(totalOrdering[count++], (long) tokens.next().get());
1:72790dc: 
1:72790dc:             Assert.assertEquals(totalCount, count);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testMinMaxAndCount()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:72790dc:         Assert.assertEquals(9L, builder.getTokenCount());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> tokens = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(tokens);
1:72790dc:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:72790dc:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:72790dc:         Assert.assertEquals(9L, tokens.getCount());
1:72790dc: 
1:72790dc:         for (long i = 1; i < 10; i++)
1:72790dc:         {
1:72790dc:             Assert.assertTrue(tokens.hasNext());
1:72790dc:             Assert.assertEquals(i, (long) tokens.next().get());
1:72790dc:         }
1:72790dc: 
1:72790dc:         Assert.assertFalse(tokens.hasNext());
1:72790dc:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testBuilder()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         Assert.assertNull(builder.getMinimum());
1:72790dc:         Assert.assertNull(builder.getMaximum());
1:72790dc:         Assert.assertEquals(0L, builder.getTokenCount());
1:72790dc:         Assert.assertEquals(0L, builder.rangeCount());
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(1L, (long) builder.getMinimum());
1:72790dc:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:72790dc:         Assert.assertEquals(9L, builder.getTokenCount());
1:72790dc:         Assert.assertEquals(3L, builder.rangeCount());
1:72790dc:         Assert.assertFalse(builder.statistics.isDisjoint());
1:72790dc: 
1:72790dc:         Assert.assertEquals(1L, (long) builder.ranges.poll().getMinimum());
1:72790dc:         Assert.assertEquals(4L, (long) builder.ranges.poll().getMinimum());
1:72790dc:         Assert.assertEquals(7L, (long) builder.ranges.poll().getMinimum());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> tokens = RangeUnionIterator.build(new ArrayList<RangeIterator<Long, Token>>()
1:72790dc:         {{
1:72790dc:             add(new LongIterator(new long[]{1L, 2L, 4L}));
1:72790dc:             add(new LongIterator(new long[]{3L, 5L, 6L}));
1:72790dc:         }});
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L), convert(tokens));
1:72790dc: 
1:72790dc:         FileUtils.closeQuietly(tokens);
1:72790dc: 
1:72790dc:         RangeIterator emptyTokens = RangeUnionIterator.builder().build();
1:72790dc:         Assert.assertNull(emptyTokens);
1:72790dc: 
1:72790dc:         builder = RangeUnionIterator.builder();
1:72790dc:         Assert.assertEquals(0L, builder.add((RangeIterator<Long, Token>) null).rangeCount());
1:72790dc:         Assert.assertEquals(0L, builder.add((List<RangeIterator<Long, Token>>) null).getTokenCount());
1:72790dc:         Assert.assertEquals(0L, builder.add(new LongIterator(new long[] {})).rangeCount());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> single = new LongIterator(new long[] { 1L, 2L, 3L });
1:72790dc:         RangeIterator<Long, Token> range = RangeIntersectionIterator.<Long, Token>builder().add(single).build();
1:72790dc: 
1:72790dc:         // because build should return first element if it's only one instead of building yet another iterator
1:72790dc:         Assert.assertEquals(range, single);
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSkipTo()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[]{1L, 2L, 3L}));
1:72790dc:         builder.add(new LongIterator(new long[]{4L, 5L, 6L}));
1:72790dc:         builder.add(new LongIterator(new long[]{7L, 8L, 9L}));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> tokens = builder.build();
1:72790dc:         Assert.assertNotNull(tokens);
1:72790dc: 
1:72790dc:         tokens.skipTo(5L);
1:72790dc:         Assert.assertTrue(tokens.hasNext());
1:72790dc:         Assert.assertEquals(5L, (long) tokens.next().get());
1:72790dc: 
1:72790dc:         tokens.skipTo(7L);
1:72790dc:         Assert.assertTrue(tokens.hasNext());
1:72790dc:         Assert.assertEquals(7L, (long) tokens.next().get());
1:72790dc: 
1:72790dc:         tokens.skipTo(10L);
1:72790dc:         Assert.assertFalse(tokens.hasNext());
1:72790dc:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:72790dc:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testMergingMultipleIterators()
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builderA = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builderA.add(new LongIterator(new long[] { 1L, 3L, 5L }));
1:72790dc:         builderA.add(new LongIterator(new long[] { 8L, 10L, 12L }));
1:72790dc: 
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builderB = RangeUnionIterator.builder();
1:72790dc: 
1:72790dc:         builderB.add(new LongIterator(new long[] { 7L, 9L, 11L }));
1:72790dc:         builderB.add(new LongIterator(new long[] { 2L, 4L, 6L }));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> union = RangeUnionIterator.build(Arrays.asList(builderA.build(), builderB.build()));
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L), convert(union));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testRangeIterator()
1:72790dc:     {
1:72790dc:         LongIterator tokens = new LongIterator(new long[] { 0L, 1L, 2L, 3L });
1:72790dc: 
1:72790dc:         Assert.assertEquals(0L, (long) tokens.getMinimum());
1:72790dc:         Assert.assertEquals(3L, (long) tokens.getMaximum());
1:72790dc: 
1:72790dc:         for (int i = 0; i <= 3; i++)
1:72790dc:         {
1:72790dc:             Assert.assertTrue(tokens.hasNext());
1:72790dc:             Assert.assertEquals(i, (long) tokens.getCurrent());
1:72790dc:             Assert.assertEquals(i, (long) tokens.next().get());
1:72790dc:         }
1:72790dc: 
1:72790dc:         tokens = new LongIterator(new long[] { 0L, 1L, 3L, 5L });
1:72790dc: 
1:72790dc:         Assert.assertEquals(3L, (long) tokens.skipTo(2L).get());
1:72790dc:         Assert.assertTrue(tokens.hasNext());
1:72790dc:         Assert.assertEquals(3L, (long) tokens.getCurrent());
1:72790dc:         Assert.assertEquals(3L, (long) tokens.next().get());
1:72790dc: 
1:72790dc:         Assert.assertEquals(5L, (long) tokens.skipTo(5L).get());
1:72790dc:         Assert.assertTrue(tokens.hasNext());
1:72790dc:         Assert.assertEquals(5L, (long) tokens.getCurrent());
1:72790dc:         Assert.assertEquals(5L, (long) tokens.next().get());
1:72790dc: 
1:72790dc:         LongIterator empty = new LongIterator(new long[0]);
1:72790dc: 
1:72790dc:         Assert.assertNull(empty.skipTo(3L));
1:72790dc:         Assert.assertFalse(empty.hasNext());
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1:     public void mergingOfEqualTokensTest()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         int size = 1000000;
1:         final long[] arr = new long[size];
1:         for (int i = 0; i < size; i++)
1:             arr[i] = i;
1: 
1:         builder.add(new LongIterator(arr));
1:         builder.add(new LongIterator(arr));
1: 
1:         Assert.assertEquals(convert(arr), convert(builder.build()));
1:     }
1: 
1: 
1:     @Test
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.util.*;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import static org.apache.cassandra.index.sasi.utils.LongIterator.convert;
1: 
1: public class RangeUnionIteratorTest
1: {
1:     @Test
1:     public void testNoOverlappingValues()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 1L, 7L }));
1:         builder.add(new LongIterator(new long[] { 4L, 8L, 9L, 10L }));
1: 
1:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testSingleIterator()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 4L, 9L }));
1: 
1:         Assert.assertEquals(convert(1L, 2L, 4L, 9L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testOverlappingValues()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L }));
1:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 4L, 6L, 8L, 9L, 10L }));
1: 
1:         List<Long> values = convert(builder.build());
1: 
1:         Assert.assertEquals(values.toString(), convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), values);
1:     }
1: 
1:     @Test
1:     public void testNoOverlappingRanges()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1: 
1:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testTwoIteratorsWithSingleValues()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L }));
1:         builder.add(new LongIterator(new long[] { 1L }));
1: 
1:         Assert.assertEquals(convert(1L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testDifferentSizeIterators()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L, 12L, 13L }));
1:         builder.add(new LongIterator(new long[] { 1L, 7L, 14L, 15 }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 8L, 9L, 10L }));
1: 
1:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 12L, 13L, 14L, 15L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testRandomSequences()
1:     {
1:         ThreadLocalRandom random = ThreadLocalRandom.current();
1: 
1:         long[][] values = new long[random.nextInt(1, 20)][];
1:         int numTests = random.nextInt(10, 20);
1: 
1:         for (int tests = 0; tests < numTests; tests++)
1:         {
1:             RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:             int totalCount = 0;
1: 
1:             for (int i = 0; i < values.length; i++)
1:             {
1:                 long[] part = new long[random.nextInt(1, 500)];
1:                 for (int j = 0; j < part.length; j++)
1:                     part[j] = random.nextLong();
1: 
1:                 // all of the parts have to be sorted to mimic SSTable
1:                 Arrays.sort(part);
1: 
1:                 values[i] = part;
1:                 builder.add(new LongIterator(part));
1:                 totalCount += part.length;
1:             }
1: 
1:             long[] totalOrdering = new long[totalCount];
1:             int index = 0;
1: 
1:             for (long[] part : values)
1:             {
1:                 for (long value : part)
1:                     totalOrdering[index++] = value;
1:             }
1: 
1:             Arrays.sort(totalOrdering);
1: 
1:             int count = 0;
1:             RangeIterator<Long, Token> tokens = builder.build();
1: 
1:             Assert.assertNotNull(tokens);
1:             while (tokens.hasNext())
1:                 Assert.assertEquals(totalOrdering[count++], (long) tokens.next().get());
1: 
1:             Assert.assertEquals(totalCount, count);
1:         }
1:     }
1: 
1:     @Test
1:     public void testMinMaxAndCount()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1: 
1:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:         Assert.assertEquals(9L, builder.getTokenCount());
1: 
1:         RangeIterator<Long, Token> tokens = builder.build();
1: 
1:         Assert.assertNotNull(tokens);
1:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:         Assert.assertEquals(9L, tokens.getCount());
1: 
1:         for (long i = 1; i < 10; i++)
1:         {
1:             Assert.assertTrue(tokens.hasNext());
1:             Assert.assertEquals(i, (long) tokens.next().get());
1:         }
1: 
1:         Assert.assertFalse(tokens.hasNext());
1:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:     }
1: 
1:     @Test
1:     public void testBuilder()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         Assert.assertNull(builder.getMinimum());
1:         Assert.assertNull(builder.getMaximum());
1:         Assert.assertEquals(0L, builder.getTokenCount());
1:         Assert.assertEquals(0L, builder.rangeCount());
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 7L, 8L, 9L }));
1: 
1:         Assert.assertEquals(1L, (long) builder.getMinimum());
1:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:         Assert.assertEquals(9L, builder.getTokenCount());
1:         Assert.assertEquals(3L, builder.rangeCount());
1:         Assert.assertFalse(builder.statistics.isDisjoint());
1: 
1:         Assert.assertEquals(1L, (long) builder.ranges.poll().getMinimum());
1:         Assert.assertEquals(4L, (long) builder.ranges.poll().getMinimum());
1:         Assert.assertEquals(7L, (long) builder.ranges.poll().getMinimum());
1: 
1:         RangeIterator<Long, Token> tokens = RangeUnionIterator.build(new ArrayList<RangeIterator<Long, Token>>()
1:         {{
1:             add(new LongIterator(new long[]{1L, 2L, 4L}));
1:             add(new LongIterator(new long[]{3L, 5L, 6L}));
1:         }});
1: 
1:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L), convert(tokens));
1: 
1:         FileUtils.closeQuietly(tokens);
1: 
1:         RangeIterator emptyTokens = RangeUnionIterator.builder().build();
1:         Assert.assertNull(emptyTokens);
1: 
1:         builder = RangeUnionIterator.builder();
1:         Assert.assertEquals(0L, builder.add((RangeIterator<Long, Token>) null).rangeCount());
1:         Assert.assertEquals(0L, builder.add((List<RangeIterator<Long, Token>>) null).getTokenCount());
1:         Assert.assertEquals(0L, builder.add(new LongIterator(new long[] {})).rangeCount());
1: 
1:         RangeIterator<Long, Token> single = new LongIterator(new long[] { 1L, 2L, 3L });
1:         RangeIterator<Long, Token> range = RangeIntersectionIterator.<Long, Token>builder().add(single).build();
1: 
1:         // because build should return first element if it's only one instead of building yet another iterator
1:         Assert.assertEquals(range, single);
1:     }
1: 
1:     @Test
1:     public void testSkipTo()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[]{1L, 2L, 3L}));
1:         builder.add(new LongIterator(new long[]{4L, 5L, 6L}));
1:         builder.add(new LongIterator(new long[]{7L, 8L, 9L}));
1: 
1:         RangeIterator<Long, Token> tokens = builder.build();
1:         Assert.assertNotNull(tokens);
1: 
1:         tokens.skipTo(5L);
1:         Assert.assertTrue(tokens.hasNext());
1:         Assert.assertEquals(5L, (long) tokens.next().get());
1: 
1:         tokens.skipTo(7L);
1:         Assert.assertTrue(tokens.hasNext());
1:         Assert.assertEquals(7L, (long) tokens.next().get());
1: 
1:         tokens.skipTo(10L);
1:         Assert.assertFalse(tokens.hasNext());
1:         Assert.assertEquals(1L, (long) tokens.getMinimum());
1:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:     }
1: 
1:     @Test
1:     public void testMergingMultipleIterators()
1:     {
1:         RangeUnionIterator.Builder<Long, Token> builderA = RangeUnionIterator.builder();
1: 
1:         builderA.add(new LongIterator(new long[] { 1L, 3L, 5L }));
1:         builderA.add(new LongIterator(new long[] { 8L, 10L, 12L }));
1: 
1:         RangeUnionIterator.Builder<Long, Token> builderB = RangeUnionIterator.builder();
1: 
1:         builderB.add(new LongIterator(new long[] { 7L, 9L, 11L }));
1:         builderB.add(new LongIterator(new long[] { 2L, 4L, 6L }));
1: 
1:         RangeIterator<Long, Token> union = RangeUnionIterator.build(Arrays.asList(builderA.build(), builderB.build()));
1:         Assert.assertEquals(convert(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L), convert(union));
1:     }
1: 
1:     @Test
1:     public void testRangeIterator()
1:     {
1:         LongIterator tokens = new LongIterator(new long[] { 0L, 1L, 2L, 3L });
1: 
1:         Assert.assertEquals(0L, (long) tokens.getMinimum());
1:         Assert.assertEquals(3L, (long) tokens.getMaximum());
1: 
1:         for (int i = 0; i <= 3; i++)
1:         {
1:             Assert.assertTrue(tokens.hasNext());
1:             Assert.assertEquals(i, (long) tokens.getCurrent());
1:             Assert.assertEquals(i, (long) tokens.next().get());
1:         }
1: 
1:         tokens = new LongIterator(new long[] { 0L, 1L, 3L, 5L });
1: 
1:         Assert.assertEquals(3L, (long) tokens.skipTo(2L).get());
1:         Assert.assertTrue(tokens.hasNext());
1:         Assert.assertEquals(3L, (long) tokens.getCurrent());
1:         Assert.assertEquals(3L, (long) tokens.next().get());
1: 
1:         Assert.assertEquals(5L, (long) tokens.skipTo(5L).get());
1:         Assert.assertTrue(tokens.hasNext());
1:         Assert.assertEquals(5L, (long) tokens.getCurrent());
1:         Assert.assertEquals(5L, (long) tokens.next().get());
1: 
1:         LongIterator empty = new LongIterator(new long[0]);
1: 
1:         Assert.assertNull(empty.skipTo(3L));
1:         Assert.assertFalse(empty.hasNext());
1:     }
1: }
============================================================================