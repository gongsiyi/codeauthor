1:615bf37: /*
1:615bf37:  *
1:615bf37:  * Licensed to the Apache Software Foundation (ASF) under one
1:615bf37:  * or more contributor license agreements.  See the NOTICE file
1:615bf37:  * distributed with this work for additional information
1:615bf37:  * regarding copyright ownership.  The ASF licenses this file
1:615bf37:  * to you under the Apache License, Version 2.0 (the
1:615bf37:  * "License"); you may not use this file except in compliance
1:615bf37:  * with the License.  You may obtain a copy of the License at
1:615bf37:  *
1:615bf37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:615bf37:  *
1:615bf37:  * Unless required by applicable law or agreed to in writing,
1:615bf37:  * software distributed under the License is distributed on an
1:615bf37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:615bf37:  * KIND, either express or implied.  See the License for the
1:615bf37:  * specific language governing permissions and limitations
1:615bf37:  * under the License.
1:615bf37:  *
1:615bf37:  */
1:c75ee41: package org.apache.cassandra.utils.concurrent;
1:c75ee41: 
1:c75ee41: import java.util.*;
1:c75ee41: 
1:3c3fefa: import javax.annotation.Nullable;
1:3c3fefa: 
1:3c3fefa: import com.google.common.base.Function;
1:3c3fefa: import com.google.common.collect.Iterables;
1:c75ee41: import com.google.common.collect.Iterators;
1:c75ee41: 
1:8704006: import static org.apache.cassandra.utils.Throwables.maybeFail;
1:3c3fefa: import static org.apache.cassandra.utils.Throwables.merge;
1:3c3fefa: 
1:c75ee41: /**
1:c75ee41:  * A collection of managed Ref references to RefCounted objects, and the objects they are referencing.
1:c75ee41:  * Care MUST be taken when using this collection, as if a permanent reference to it leaks we will not
1:c75ee41:  * be alerted to a lack of reference release.
1:c75ee41:  *
1:c75ee41:  * All of the java.util.Collection operations that modify the collection are unsupported.
1:c75ee41:  */
1:61384c5: public final class Refs<T extends RefCounted<T>> extends AbstractCollection<T> implements AutoCloseable
1:c75ee41: {
1:61384c5:     private final Map<T, Ref<T>> references;
1:c75ee41: 
1:c75ee41:     public Refs()
1:c75ee41:     {
1:c75ee41:         this.references = new HashMap<>();
1:c75ee41:     }
1:c75ee41: 
1:61384c5:     public Refs(Map<T, Ref<T>> references)
1:c75ee41:     {
1:c75ee41:         this.references = new HashMap<>(references);
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * Release ALL of the references held by this Refs collection
1:c75ee41:      */
1:c75ee41:     public void release()
1:c75ee41:     {
1:c75ee41:         try
1:c75ee41:         {
1:c75ee41:             release(references.values());
1:c75ee41:         }
1:c75ee41:         finally
1:c75ee41:         {
1:c75ee41:             references.clear();
1:c75ee41:         }
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * See {@link Refs#release()}
1:c75ee41:      */
1:c75ee41:     public void close()
1:c75ee41:     {
1:c75ee41:         release();
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * @param referenced the object we have a Ref to
1:c75ee41:      * @return the Ref to said object
1:c75ee41:      */
1:9f7ab09:     public Ref<T> get(T referenced)
1:c75ee41:     {
1:c75ee41:         return references.get(referenced);
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * @param referenced the object we have a Ref to
1:c75ee41:      */
1:c75ee41:     public void release(T referenced)
1:c75ee41:     {
1:c75ee41:         Ref ref = references.remove(referenced);
1:c75ee41:         if (ref == null)
1:c75ee41:             throw new IllegalStateException("This Refs collection does not hold a reference to " + referenced);
1:c75ee41:         ref.release();
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * Release the retained Ref to the provided object, if held, return false otherwise
1:c75ee41:      * @param referenced the object we retain a Ref to
1:c75ee41:      * @return return true if we held a reference to the object, and false otherwise
1:c75ee41:      */
1:c75ee41:     public boolean releaseIfHolds(T referenced)
1:c75ee41:     {
1:c75ee41:         Ref ref = references.remove(referenced);
1:c75ee41:         if (ref != null)
1:c75ee41:             ref.release();
1:c75ee41:         return ref != null;
1:c75ee41:     }
1:c75ee41: 
1:7aafe05:     public void relaseAllExcept(Collection<T> keep)
1:7aafe05:     {
1:7aafe05:         Collection<T> release = new ArrayList<>(references.keySet());
1:7aafe05:         release.retainAll(keep);
1:7aafe05:         release(release);
1:7aafe05:     }
1:c75ee41:     /**
1:c75ee41:      * Release a retained Ref to all of the provided objects; if any is not held, an exception will be thrown
1:c75ee41:      * @param release
1:c75ee41:      */
1:c75ee41:     public void release(Collection<T> release)
1:c75ee41:     {
1:61384c5:         List<Ref<T>> refs = new ArrayList<>();
1:c75ee41:         List<T> notPresent = null;
1:c75ee41:         for (T obj : release)
1:c75ee41:         {
1:61384c5:             Ref<T> ref = references.remove(obj);
1:c75ee41:             if (ref == null)
1:c75ee41:             {
1:c75ee41:                 if (notPresent == null)
1:c75ee41:                     notPresent = new ArrayList<>();
1:c75ee41:                 notPresent.add(obj);
1:c75ee41:             }
2:c75ee41:             else
1:c75ee41:             {
1:c75ee41:                 refs.add(ref);
1:c75ee41:             }
1:c75ee41:         }
1:c75ee41: 
1:c75ee41:         IllegalStateException notPresentFail = null;
1:c75ee41:         if (notPresent != null)
1:c75ee41:         {
1:c75ee41:             notPresentFail = new IllegalStateException("Could not release references to " + notPresent
1:c75ee41:                                                        + " as references to these objects were not held");
1:c75ee41:             notPresentFail.fillInStackTrace();
1:c75ee41:         }
1:c75ee41:         try
1:c75ee41:         {
1:c75ee41:             release(refs);
1:c75ee41:         }
1:c75ee41:         catch (Throwable t)
1:c75ee41:         {
1:c75ee41:             if (notPresentFail != null)
1:c75ee41:                 t.addSuppressed(notPresentFail);
1:c75ee41:         }
1:c75ee41:         if (notPresentFail != null)
1:c75ee41:             throw notPresentFail;
1:c75ee41:     }
1:3c3fefa: 
1:c75ee41:     /**
1:c75ee41:      * Attempt to take a reference to the provided object; if it has already been released, null will be returned
1:c75ee41:      * @param t object to acquire a reference to
1:c75ee41:      * @return true iff success
1:c75ee41:      */
1:c75ee41:     public boolean tryRef(T t)
1:c75ee41:     {
1:61384c5:         Ref<T> ref = t.tryRef();
1:c75ee41:         if (ref == null)
1:c75ee41:             return false;
1:c75ee41:         ref = references.put(t, ref);
1:c75ee41:         if (ref != null)
1:c75ee41:             ref.release(); // release dup
1:c75ee41:         return true;
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     public Iterator<T> iterator()
1:c75ee41:     {
1:c75ee41:         return Iterators.unmodifiableIterator(references.keySet().iterator());
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     public int size()
1:c75ee41:     {
1:c75ee41:         return references.size();
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * Merge two sets of references, ensuring only one reference is retained between the two sets
1:c75ee41:      */
1:c75ee41:     public Refs<T> addAll(Refs<T> add)
1:c75ee41:     {
1:61384c5:         List<Ref<T>> overlap = new ArrayList<>();
1:61384c5:         for (Map.Entry<T, Ref<T>> e : add.references.entrySet())
1:c75ee41:         {
1:c75ee41:             if (this.references.containsKey(e.getKey()))
1:c75ee41:                 overlap.add(e.getValue());
1:c75ee41:             else
1:c75ee41:                 this.references.put(e.getKey(), e.getValue());
1:c75ee41:         }
1:c75ee41:         add.references.clear();
1:c75ee41:         release(overlap);
1:c75ee41:         return this;
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     /**
1:c75ee41:      * Acquire a reference to all of the provided objects, or none
1:c75ee41:      */
1:61384c5:     public static <T extends RefCounted<T>> Refs<T> tryRef(Iterable<T> reference)
1:c75ee41:     {
1:61384c5:         HashMap<T, Ref<T>> refs = new HashMap<>();
1:c75ee41:         for (T rc : reference)
1:c75ee41:         {
1:61384c5:             Ref<T> ref = rc.tryRef();
1:c75ee41:             if (ref == null)
1:c75ee41:             {
1:c75ee41:                 release(refs.values());
1:c75ee41:                 return null;
1:c75ee41:             }
1:c75ee41:             refs.put(rc, ref);
1:c75ee41:         }
1:c75ee41:         return new Refs<T>(refs);
1:c75ee41:     }
1:c75ee41: 
1:61384c5:     public static <T extends RefCounted<T>> Refs<T> ref(Iterable<T> reference)
1:c75ee41:     {
1:c75ee41:         Refs<T> refs = tryRef(reference);
1:c75ee41:         if (refs != null)
1:c75ee41:             return refs;
1:c75ee41:         throw new IllegalStateException();
1:c75ee41:     }
1:c75ee41: 
1:3c3fefa:     public static void release(Iterable<? extends Ref<?>> refs)
1:c75ee41:     {
1:8704006:         maybeFail(release(refs, null));
1:8704006:     }
1:8704006:     public static Throwable release(Iterable<? extends Ref<?>> refs, Throwable accumulate)
1:8704006:     {
1:c75ee41:         for (Ref ref : refs)
1:c75ee41:         {
1:c75ee41:             try
1:c75ee41:             {
1:c75ee41:                 ref.release();
1:c75ee41:             }
1:c75ee41:             catch (Throwable t)
1:c75ee41:             {
1:8704006:                 accumulate = merge(accumulate, t);
1:c75ee41:             }
1:c75ee41:         }
1:8704006:         return accumulate;
1:c75ee41:     }
1:c75ee41: 
1:3c3fefa:     public static <T extends SelfRefCounted<T>> Iterable<Ref<T>> selfRefs(Iterable<T> refs)
1:3c3fefa:     {
1:3c3fefa:         return Iterables.transform(refs, new Function<T, Ref<T>>()
1:3c3fefa:         {
1:3c3fefa:             @Nullable
1:3c3fefa:             public Ref<T> apply(T t)
1:3c3fefa:             {
1:3c3fefa:                 return t.selfRef();
1:3c3fefa:             }
1:3c3fefa:         });
1:3c3fefa:     }
1:c75ee41: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbefa85
commit:615bf37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     public void relaseAllExcept(Collection<T> keep)
1:     {
1:         Collection<T> release = new ArrayList<>(references.keySet());
1:         release.retainAll(keep);
1:         release(release);
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.cassandra.utils.Throwables.maybeFail;
/////////////////////////////////////////////////////////////////////////
1:         maybeFail(release(refs, null));
1:     }
1:     public static Throwable release(Iterable<? extends Ref<?>> refs, Throwable accumulate)
1:     {
/////////////////////////////////////////////////////////////////////////
1:                 accumulate = merge(accumulate, t);
1:         return accumulate;
commit:3c3fefa
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.Nullable;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.collect.Iterables;
1: import static org.apache.cassandra.utils.Throwables.merge;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static void release(Iterable<? extends Ref<?>> refs)
/////////////////////////////////////////////////////////////////////////
0:                 fail = merge(fail, t);
1: 
1:     public static <T extends SelfRefCounted<T>> Iterable<Ref<T>> selfRefs(Iterable<T> refs)
1:     {
1:         return Iterables.transform(refs, new Function<T, Ref<T>>()
1:         {
1:             @Nullable
1:             public Ref<T> apply(T t)
1:             {
1:                 return t.selfRef();
1:             }
1:         });
1:     }
commit:61384c5
/////////////////////////////////////////////////////////////////////////
1: public final class Refs<T extends RefCounted<T>> extends AbstractCollection<T> implements AutoCloseable
1:     private final Map<T, Ref<T>> references;
1:     public Refs(Map<T, Ref<T>> references)
/////////////////////////////////////////////////////////////////////////
1:         List<Ref<T>> refs = new ArrayList<>();
1:             Ref<T> ref = references.remove(obj);
/////////////////////////////////////////////////////////////////////////
1:         Ref<T> ref = t.tryRef();
/////////////////////////////////////////////////////////////////////////
1:         List<Ref<T>> overlap = new ArrayList<>();
1:         for (Map.Entry<T, Ref<T>> e : add.references.entrySet())
/////////////////////////////////////////////////////////////////////////
1:     public static <T extends RefCounted<T>> Refs<T> tryRef(Iterable<T> reference)
1:         HashMap<T, Ref<T>> refs = new HashMap<>();
1:             Ref<T> ref = rc.tryRef();
/////////////////////////////////////////////////////////////////////////
1:     public static <T extends RefCounted<T>> Refs<T> ref(Iterable<T> reference)
/////////////////////////////////////////////////////////////////////////
0:     private static void release(Iterable<? extends Ref<?>> refs)
commit:c75ee41
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.*;
1: 
0: import com.google.common.base.Throwables;
1: import com.google.common.collect.Iterators;
1: 
1: /**
1:  * A collection of managed Ref references to RefCounted objects, and the objects they are referencing.
1:  * Care MUST be taken when using this collection, as if a permanent reference to it leaks we will not
1:  * be alerted to a lack of reference release.
1:  *
1:  * All of the java.util.Collection operations that modify the collection are unsupported.
1:  */
0: public final class Refs<T extends RefCounted> extends AbstractCollection<T> implements AutoCloseable
1: {
0:     private final Map<T, Ref> references;
1: 
1:     public Refs()
1:     {
1:         this.references = new HashMap<>();
1:     }
1: 
0:     public Refs(Map<T, Ref> references)
1:     {
1:         this.references = new HashMap<>(references);
1:     }
1: 
1:     /**
1:      * Release ALL of the references held by this Refs collection
1:      */
1:     public void release()
1:     {
1:         try
1:         {
1:             release(references.values());
1:         }
1:         finally
1:         {
1:             references.clear();
1:         }
1:     }
1: 
1:     /**
1:      * See {@link Refs#release()}
1:      */
1:     public void close()
1:     {
1:         release();
1:     }
1: 
1:     /**
1:      * @param referenced the object we have a Ref to
1:      * @return the Ref to said object
1:      */
0:     public Ref get(T referenced)
1:     {
1:         return references.get(referenced);
1:     }
1: 
1:     /**
1:      * @param referenced the object we have a Ref to
1:      */
1:     public void release(T referenced)
1:     {
1:         Ref ref = references.remove(referenced);
1:         if (ref == null)
1:             throw new IllegalStateException("This Refs collection does not hold a reference to " + referenced);
1:         ref.release();
1:     }
1: 
1:     /**
1:      * Release the retained Ref to the provided object, if held, return false otherwise
1:      * @param referenced the object we retain a Ref to
1:      * @return return true if we held a reference to the object, and false otherwise
1:      */
1:     public boolean releaseIfHolds(T referenced)
1:     {
1:         Ref ref = references.remove(referenced);
1:         if (ref != null)
1:             ref.release();
1:         return ref != null;
1:     }
1: 
1:     /**
1:      * Release a retained Ref to all of the provided objects; if any is not held, an exception will be thrown
1:      * @param release
1:      */
1:     public void release(Collection<T> release)
1:     {
0:         List<Ref> refs = new ArrayList<>();
1:         List<T> notPresent = null;
1:         for (T obj : release)
1:         {
0:             Ref ref = references.remove(obj);
1:             if (ref == null)
1:             {
1:                 if (notPresent == null)
1:                     notPresent = new ArrayList<>();
1:                 notPresent.add(obj);
1:             }
1:             else
1:             {
1:                 refs.add(ref);
1:             }
1:         }
1: 
1:         IllegalStateException notPresentFail = null;
1:         if (notPresent != null)
1:         {
1:             notPresentFail = new IllegalStateException("Could not release references to " + notPresent
1:                                                        + " as references to these objects were not held");
1:             notPresentFail.fillInStackTrace();
1:         }
1:         try
1:         {
1:             release(refs);
1:         }
1:         catch (Throwable t)
1:         {
1:             if (notPresentFail != null)
1:                 t.addSuppressed(notPresentFail);
1:         }
1:         if (notPresentFail != null)
1:             throw notPresentFail;
1:     }
1: 
1:     /**
1:      * Attempt to take a reference to the provided object; if it has already been released, null will be returned
1:      * @param t object to acquire a reference to
1:      * @return true iff success
1:      */
1:     public boolean tryRef(T t)
1:     {
0:         Ref ref = t.tryRef();
1:         if (ref == null)
1:             return false;
1:         ref = references.put(t, ref);
1:         if (ref != null)
1:             ref.release(); // release dup
1:         return true;
1:     }
1: 
1:     public Iterator<T> iterator()
1:     {
1:         return Iterators.unmodifiableIterator(references.keySet().iterator());
1:     }
1: 
1:     public int size()
1:     {
1:         return references.size();
1:     }
1: 
1:     /**
1:      * Merge two sets of references, ensuring only one reference is retained between the two sets
1:      */
1:     public Refs<T> addAll(Refs<T> add)
1:     {
0:         List<Ref> overlap = new ArrayList<>();
0:         for (Map.Entry<T, Ref> e : add.references.entrySet())
1:         {
1:             if (this.references.containsKey(e.getKey()))
1:                 overlap.add(e.getValue());
1:             else
1:                 this.references.put(e.getKey(), e.getValue());
1:         }
1:         add.references.clear();
1:         release(overlap);
1:         return this;
1:     }
1: 
1:     /**
1:      * Acquire a reference to all of the provided objects, or none
1:      */
0:     public static <T extends RefCounted> Refs<T> tryRef(Iterable<T> reference)
1:     {
0:         HashMap<T, Ref> refs = new HashMap<>();
1:         for (T rc : reference)
1:         {
0:             Ref ref = rc.tryRef();
1:             if (ref == null)
1:             {
1:                 release(refs.values());
1:                 return null;
1:             }
1:             refs.put(rc, ref);
1:         }
1:         return new Refs<T>(refs);
1:     }
1: 
0:     public static <T extends RefCounted> Refs<T> ref(Iterable<T> reference)
1:     {
1:         Refs<T> refs = tryRef(reference);
1:         if (refs != null)
1:             return refs;
1:         throw new IllegalStateException();
1:     }
1: 
0:     private static void release(Iterable<Ref> refs)
1:     {
0:         Throwable fail = null;
1:         for (Ref ref : refs)
1:         {
1:             try
1:             {
1:                 ref.release();
1:             }
1:             catch (Throwable t)
1:             {
0:                 if (fail == null)
0:                     fail = t;
1:                 else
0:                     fail.addSuppressed(t);
1:             }
1:         }
0:         if (fail != null)
0:             throw Throwables.propagate(fail);
1:     }
1: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:9f7ab09
/////////////////////////////////////////////////////////////////////////
1:     public Ref<T> get(T referenced)
============================================================================