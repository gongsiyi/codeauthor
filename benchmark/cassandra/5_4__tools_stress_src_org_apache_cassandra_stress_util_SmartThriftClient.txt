1:2e1e98a: package org.apache.cassandra.stress.util;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:eea042b: import java.net.InetAddress;
1:2e1e98a: import java.nio.ByteBuffer;
1:2e1e98a: import java.util.*;
1:2e1e98a: import java.util.concurrent.ConcurrentHashMap;
1:2e1e98a: import java.util.concurrent.ConcurrentLinkedQueue;
1:eea042b: import java.util.concurrent.ThreadLocalRandom;
1:2e1e98a: import java.util.concurrent.atomic.AtomicInteger;
1:2e1e98a: 
1:6c579a0: import com.google.common.collect.Iterators;
1:6c579a0: 
1:2e1e98a: import com.datastax.driver.core.Host;
1:2e1e98a: import com.datastax.driver.core.Metadata;
1:2e1e98a: import org.apache.cassandra.stress.settings.StressSettings;
1:2e1e98a: import org.apache.cassandra.thrift.*;
1:2e1e98a: import org.apache.cassandra.utils.ByteBufferUtil;
1:2e1e98a: import org.apache.thrift.TException;
1:2e1e98a: 
1:2e1e98a: public class SmartThriftClient implements ThriftClient
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     final String keyspace;
1:2e1e98a:     final Metadata metadata;
1:2e1e98a:     final StressSettings settings;
1:eea042b:     final ConcurrentHashMap<InetAddress, ConcurrentLinkedQueue<Client>> cache = new ConcurrentHashMap<>();
1:2e1e98a: 
1:2e1e98a:     final AtomicInteger queryIdCounter = new AtomicInteger();
1:2e1e98a:     final ConcurrentHashMap<Integer, String> queryStrings = new ConcurrentHashMap<>();
1:2e1e98a:     final ConcurrentHashMap<String, Integer> queryIds = new ConcurrentHashMap<>();
1:eea042b:     final Set<InetAddress> whiteset;
1:eea042b:     final List<InetAddress> whitelist;
1:2e1e98a: 
1:2e1e98a:     public SmartThriftClient(StressSettings settings, String keyspace, Metadata metadata)
1:2e1e98a:     {
1:2e1e98a:         this.metadata = metadata;
1:2e1e98a:         this.keyspace = keyspace;
1:2e1e98a:         this.settings = settings;
1:eea042b:         if (!settings.node.isWhiteList)
1:eea042b:         {
1:eea042b:             whiteset = null;
1:eea042b:             whitelist = null;
1:eea042b:         }
1:eea042b:         else
1:eea042b:         {
1:4efb6dc:             whiteset = settings.node.resolveAllSpecified();
1:eea042b:             whitelist = Arrays.asList(whiteset.toArray(new InetAddress[0]));
1:eea042b:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private final AtomicInteger roundrobin = new AtomicInteger();
1:2e1e98a: 
1:2e1e98a:     private Integer getId(String query)
1:2e1e98a:     {
1:2e1e98a:         Integer r;
1:2e1e98a:         if ((r = queryIds.get(query)) != null)
1:2e1e98a:             return r;
1:2e1e98a:         r = queryIdCounter.incrementAndGet();
1:2e1e98a:         if (queryIds.putIfAbsent(query, r) == null)
1:7536429:         {
1:7536429:             queryStrings.put(r, query);
1:2e1e98a:             return r;
1:7536429:         }
1:2e1e98a:         return queryIds.get(query);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     final class Client
1:2e1e98a:     {
1:2e1e98a:         final Cassandra.Client client;
1:eea042b:         final InetAddress server;
1:2e1e98a:         final Map<Integer, Integer> queryMap = new HashMap<>();
1:2e1e98a: 
1:eea042b:         Client(Cassandra.Client client, InetAddress server)
1:2e1e98a:         {
1:2e1e98a:             this.client = client;
1:eea042b:             this.server = server;
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:         Integer get(Integer id, boolean cql3) throws TException
1:2e1e98a:         {
1:2e1e98a:             Integer serverId = queryMap.get(id);
1:2e1e98a:             if (serverId != null)
1:2e1e98a:                 return serverId;
1:2e1e98a:             prepare(id, cql3);
1:2e1e98a:             return queryMap.get(id);
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:        void prepare(Integer id, boolean cql3) throws TException
1:2e1e98a:        {
1:2e1e98a:            String query;
1:2e1e98a:            while ( null == (query = queryStrings.get(id)) ) ;
1:2e1e98a:            if (cql3)
1:2e1e98a:            {
1:2e1e98a:                Integer serverId = client.prepare_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE).itemId;
1:2e1e98a:                queryMap.put(id, serverId);
1:2e1e98a:            }
1:2e1e98a:            else
1:2e1e98a:            {
1:2e1e98a:                Integer serverId = client.prepare_cql_query(ByteBufferUtil.bytes(query), Compression.NONE).itemId;
1:2e1e98a:                queryMap.put(id, serverId);
1:2e1e98a:            }
1:2e1e98a:        }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private Client get(ByteBuffer pk)
1:2e1e98a:     {
1:ce94010:         Set<Host> hosts = metadata.getReplicas(metadata.quote(keyspace), pk);
1:eea042b:         InetAddress address = null;
1:eea042b:         if (hosts.size() > 0)
1:eea042b:         {
1:eea042b:             int pos = roundrobin.incrementAndGet() % hosts.size();
1:eea042b:             for (int i = 0 ; address == null && i < hosts.size() ; i++)
1:eea042b:             {
1:eea042b:                 if (pos < 0)
1:eea042b:                     pos = -pos;
1:eea042b:                 Host host = Iterators.get(hosts.iterator(), (pos + i) % hosts.size());
1:eea042b:                 if (whiteset == null || whiteset.contains(host.getAddress()))
1:eea042b:                     address = host.getAddress();
1:eea042b:             }
1:eea042b:         }
1:eea042b:         if (address == null)
1:eea042b:             address = whitelist.get(ThreadLocalRandom.current().nextInt(whitelist.size()));
1:eea042b:         ConcurrentLinkedQueue<Client> q = cache.get(address);
1:2e1e98a:         if (q == null)
1:2e1e98a:         {
1:2e1e98a:             ConcurrentLinkedQueue<Client> newQ = new ConcurrentLinkedQueue<Client>();
1:eea042b:             q = cache.putIfAbsent(address, newQ);
1:2e1e98a:             if (q == null)
1:2e1e98a:                 q = newQ;
1:2e1e98a:         }
1:2e1e98a:         Client tclient = q.poll();
1:2e1e98a:         if (tclient != null)
1:2e1e98a:             return tclient;
1:eea042b:         return new Client(settings.getRawThriftClient(address.getHostAddress()), address);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public void batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>> record, ConsistencyLevel consistencyLevel) throws TException
1:2e1e98a:     {
1:2e1e98a:         for (Map.Entry<ByteBuffer, Map<String, List<Mutation>>> e : record.entrySet())
1:2e1e98a:         {
1:2e1e98a:             Client client = get(e.getKey());
1:2e1e98a:             try
1:2e1e98a:             {
1:2e1e98a:                 client.client.batch_mutate(Collections.singletonMap(e.getKey(), e.getValue()), consistencyLevel);
1:2e1e98a:             } finally
1:2e1e98a:             {
1:eea042b:                 cache.get(client.server).add(client);
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent parent, SlicePredicate predicate, ConsistencyLevel consistencyLevel) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             return client.client.get_slice(key, parent, predicate, consistencyLevel);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             client.client.insert(key, column_parent, column, consistency_level);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             return client.client.execute_cql_query(ByteBufferUtil.bytes(query), compression);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             return client.client.execute_cql3_query(ByteBufferUtil.bytes(query), compression, consistency);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public Integer prepare_cql3_query(String query, Compression compression) throws TException
1:2e1e98a:     {
1:2e1e98a:         return getId(query);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_prepared_cql3_query(int queryId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             return client.client.execute_prepared_cql3_query(client.get(queryId, true), values, consistency);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public Integer prepare_cql_query(String query, Compression compression) throws TException
1:2e1e98a:     {
1:2e1e98a:         return getId(query);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public CqlResult execute_prepared_cql_query(int queryId, ByteBuffer key, List<ByteBuffer> values) throws TException
1:2e1e98a:     {
1:2e1e98a:         Client client = get(key);
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             return client.client.execute_prepared_cql_query(client.get(queryId, true), values);
1:2e1e98a:         } finally
1:2e1e98a:         {
1:eea042b:             cache.get(client.server).add(client);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         throw new UnsupportedOperationException();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         throw new UnsupportedOperationException();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:e994805:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws TException
1:2e1e98a:     {
1:2e1e98a:         throw new UnsupportedOperationException();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e994805
/////////////////////////////////////////////////////////////////////////
1:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent parent, SlicePredicate predicate, ConsistencyLevel consistencyLevel) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public Integer prepare_cql3_query(String query, Compression compression) throws TException
1:     public CqlResult execute_prepared_cql3_query(int queryId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public Integer prepare_cql_query(String query, Compression compression) throws TException
1:     public CqlResult execute_prepared_cql_query(int queryId, ByteBuffer key, List<ByteBuffer> values) throws TException
/////////////////////////////////////////////////////////////////////////
1:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
1:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws TException
1:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws TException
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Iterators;
1: 
commit:4efb6dc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             whiteset = settings.node.resolveAllSpecified();
commit:eea042b
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
1: import java.util.concurrent.ThreadLocalRandom;
/////////////////////////////////////////////////////////////////////////
1:     final ConcurrentHashMap<InetAddress, ConcurrentLinkedQueue<Client>> cache = new ConcurrentHashMap<>();
1:     final Set<InetAddress> whiteset;
1:     final List<InetAddress> whitelist;
1:         if (!settings.node.isWhiteList)
1:         {
1:             whiteset = null;
1:             whitelist = null;
1:         }
1:         else
1:         {
0:             whiteset = settings.node.resolveAll();
1:             whitelist = Arrays.asList(whiteset.toArray(new InetAddress[0]));
1:         }
/////////////////////////////////////////////////////////////////////////
1:         final InetAddress server;
1:         Client(Cassandra.Client client, InetAddress server)
1:             this.server = server;
/////////////////////////////////////////////////////////////////////////
1:         InetAddress address = null;
1:         if (hosts.size() > 0)
1:         {
1:             int pos = roundrobin.incrementAndGet() % hosts.size();
1:             for (int i = 0 ; address == null && i < hosts.size() ; i++)
1:             {
1:                 if (pos < 0)
1:                     pos = -pos;
1:                 Host host = Iterators.get(hosts.iterator(), (pos + i) % hosts.size());
1:                 if (whiteset == null || whiteset.contains(host.getAddress()))
1:                     address = host.getAddress();
1:             }
1:         }
1:         if (address == null)
1:             address = whitelist.get(ThreadLocalRandom.current().nextInt(whitelist.size()));
1:         ConcurrentLinkedQueue<Client> q = cache.get(address);
1:             q = cache.putIfAbsent(address, newQ);
1:         return new Client(settings.getRawThriftClient(address.getHostAddress()), address);
/////////////////////////////////////////////////////////////////////////
1:                 cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
/////////////////////////////////////////////////////////////////////////
1:             cache.get(client.server).add(client);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1:         {
1:             queryStrings.put(r, query);
1:         }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:df43d4e
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Iterators;
/////////////////////////////////////////////////////////////////////////
0:         int pos = roundrobin.incrementAndGet() % hosts.size();
0:         if (pos < 0)
0:             pos = -pos;
0:         Host host = Iterators.get(hosts.iterator(), pos);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:ce94010
/////////////////////////////////////////////////////////////////////////
1:         Set<Host> hosts = metadata.getReplicas(metadata.quote(keyspace), pk);
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.util;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import com.datastax.driver.core.Host;
1: import com.datastax.driver.core.Metadata;
1: import org.apache.cassandra.stress.settings.StressSettings;
1: import org.apache.cassandra.thrift.*;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.thrift.TException;
1: 
1: public class SmartThriftClient implements ThriftClient
1: {
1: 
1:     final String keyspace;
1:     final Metadata metadata;
1:     final StressSettings settings;
0:     final ConcurrentHashMap<Host, ConcurrentLinkedQueue<Client>> cache = new ConcurrentHashMap<>();
1: 
1:     final AtomicInteger queryIdCounter = new AtomicInteger();
1:     final ConcurrentHashMap<Integer, String> queryStrings = new ConcurrentHashMap<>();
1:     final ConcurrentHashMap<String, Integer> queryIds = new ConcurrentHashMap<>();
1: 
1:     public SmartThriftClient(StressSettings settings, String keyspace, Metadata metadata)
1:     {
1:         this.metadata = metadata;
1:         this.keyspace = keyspace;
1:         this.settings = settings;
1:     }
1: 
1:     private final AtomicInteger roundrobin = new AtomicInteger();
1: 
1:     private Integer getId(String query)
1:     {
1:         Integer r;
1:         if ((r = queryIds.get(query)) != null)
1:             return r;
1:         r = queryIdCounter.incrementAndGet();
1:         if (queryIds.putIfAbsent(query, r) == null)
1:             return r;
0:         queryStrings.put(r, query);
1:         return queryIds.get(query);
1:     }
1: 
1:     final class Client
1:     {
1:         final Cassandra.Client client;
0:         final Host host;
1:         final Map<Integer, Integer> queryMap = new HashMap<>();
1: 
0:         Client(Cassandra.Client client, Host host)
1:         {
1:             this.client = client;
0:             this.host = host;
1:         }
1: 
1:         Integer get(Integer id, boolean cql3) throws TException
1:         {
1:             Integer serverId = queryMap.get(id);
1:             if (serverId != null)
1:                 return serverId;
1:             prepare(id, cql3);
1:             return queryMap.get(id);
1:         }
1: 
1:        void prepare(Integer id, boolean cql3) throws TException
1:        {
1:            String query;
1:            while ( null == (query = queryStrings.get(id)) ) ;
1:            if (cql3)
1:            {
1:                Integer serverId = client.prepare_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE).itemId;
1:                queryMap.put(id, serverId);
1:            }
1:            else
1:            {
1:                Integer serverId = client.prepare_cql_query(ByteBufferUtil.bytes(query), Compression.NONE).itemId;
1:                queryMap.put(id, serverId);
1:            }
1:        }
1:     }
1: 
1:     private Client get(ByteBuffer pk)
1:     {
0:         Set<Host> hosts = metadata.getReplicas(keyspace, pk);
0:         int count = roundrobin.incrementAndGet() % hosts.size();
0:         if (count < 0)
0:             count = -count;
0:         Iterator<Host> iter = hosts.iterator();
0:         while (count > 0 && iter.hasNext())
0:             iter.next();
0:         Host host = iter.next();
0:         ConcurrentLinkedQueue<Client> q = cache.get(host);
1:         if (q == null)
1:         {
1:             ConcurrentLinkedQueue<Client> newQ = new ConcurrentLinkedQueue<Client>();
0:             q = cache.putIfAbsent(host, newQ);
1:             if (q == null)
1:                 q = newQ;
1:         }
1:         Client tclient = q.poll();
1:         if (tclient != null)
1:             return tclient;
0:         return new Client(settings.getRawThriftClient(host.getAddress().getHostAddress()), host);
1:     }
1: 
1:     @Override
1:     public void batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>> record, ConsistencyLevel consistencyLevel) throws TException
1:     {
1:         for (Map.Entry<ByteBuffer, Map<String, List<Mutation>>> e : record.entrySet())
1:         {
1:             Client client = get(e.getKey());
1:             try
1:             {
1:                 client.client.batch_mutate(Collections.singletonMap(e.getKey(), e.getValue()), consistencyLevel);
1:             } finally
1:             {
0:                 cache.get(client.host).add(client);
1:             }
1:         }
1:     }
1: 
1:     @Override
0:     public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent parent, SlicePredicate predicate, ConsistencyLevel consistencyLevel) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             return client.client.get_slice(key, parent, predicate, consistencyLevel);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             client.client.insert(key, column_parent, column, consistency_level);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public CqlResult execute_cql_query(String query, ByteBuffer key, Compression compression) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             return client.client.execute_cql_query(ByteBufferUtil.bytes(query), compression);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public CqlResult execute_cql3_query(String query, ByteBuffer key, Compression compression, ConsistencyLevel consistency) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             return client.client.execute_cql3_query(ByteBufferUtil.bytes(query), compression, consistency);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public Integer prepare_cql3_query(String query, Compression compression) throws InvalidRequestException, TException
1:     {
1:         return getId(query);
1:     }
1: 
1:     @Override
0:     public CqlResult execute_prepared_cql3_query(int queryId, ByteBuffer key, List<ByteBuffer> values, ConsistencyLevel consistency) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             return client.client.execute_prepared_cql3_query(client.get(queryId, true), values, consistency);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public Integer prepare_cql_query(String query, Compression compression) throws InvalidRequestException, TException
1:     {
1:         return getId(query);
1:     }
1: 
1:     @Override
0:     public CqlResult execute_prepared_cql_query(int queryId, ByteBuffer key, List<ByteBuffer> values) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
1:     {
1:         Client client = get(key);
1:         try
1:         {
1:             return client.client.execute_prepared_cql_query(client.get(queryId, true), values);
1:         } finally
1:         {
0:             cache.get(client.host).add(client);
1:         }
1:     }
1: 
1:     @Override
0:     public Map<ByteBuffer, List<ColumnOrSuperColumn>> multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
0:     public List<KeySlice> get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
0:     public List<KeySlice> get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1: }
============================================================================