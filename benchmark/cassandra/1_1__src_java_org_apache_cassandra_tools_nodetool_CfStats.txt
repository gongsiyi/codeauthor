1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
2:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
39:c5a8190: 
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: 
1:bf51f24: /**
1:bf51f24:  * @deprecated use TableStats
1:bf51f24:  */
1:bf51f24: @Command(name = "cfstats", hidden = true, description = "Print statistics on tables")
1:bf51f24: @Deprecated
1:bf51f24: public class CfStats extends TableStats
24:c5a8190: {
23:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:bf51f24
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * @deprecated use TableStats
1:  */
1: @Command(name = "cfstats", hidden = true, description = "Print statistics on tables")
1: @Deprecated
1: public class CfStats extends TableStats
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
0: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
0: import io.airlift.command.Option;
1: 
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
1: 
0: import javax.management.InstanceNotFoundException;
1: 
0: import org.apache.cassandra.db.ColumnFamilyStoreMBean;
0: import org.apache.cassandra.io.util.FileUtils;
0: import org.apache.cassandra.metrics.CassandraMetricsRegistry;
0: import org.apache.cassandra.tools.NodeProbe;
0: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
0: @Command(name = "cfstats", description = "Print statistics on tables")
0: public class CfStats extends NodeToolCmd
1: {
0:     @Arguments(usage = "[<keyspace.table>...]", description = "List of tables (or keyspace) names")
0:     private List<String> cfnames = new ArrayList<>();
1: 
0:     @Option(name = "-i", description = "Ignore the list of tables and display the remaining cfs")
0:     private boolean ignore = false;
1: 
0:     @Option(title = "human_readable",
0:             name = {"-H", "--human-readable"},
0:             description = "Display bytes in human readable form, i.e. KB, MB, GB, TB")
0:     private boolean humanReadable = false;
1: 
0:     @Override
0:     public void execute(NodeProbe probe)
1:     {
0:         CfStats.OptionFilter filter = new OptionFilter(ignore, cfnames);
0:         Map<String, List<ColumnFamilyStoreMBean>> cfstoreMap = new HashMap<>();
1: 
0:         // get a list of column family stores
0:         Iterator<Map.Entry<String, ColumnFamilyStoreMBean>> cfamilies = probe.getColumnFamilyStoreMBeanProxies();
1: 
0:         while (cfamilies.hasNext())
1:         {
0:             Map.Entry<String, ColumnFamilyStoreMBean> entry = cfamilies.next();
0:             String keyspaceName = entry.getKey();
0:             ColumnFamilyStoreMBean cfsProxy = entry.getValue();
1: 
0:             if (!cfstoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), cfsProxy.getColumnFamilyName()))
1:             {
0:                 List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList<>();
0:                 columnFamilies.add(cfsProxy);
0:                 cfstoreMap.put(keyspaceName, columnFamilies);
0:             } else if (filter.isColumnFamilyIncluded(entry.getKey(), cfsProxy.getColumnFamilyName()))
1:             {
0:                 cfstoreMap.get(keyspaceName).add(cfsProxy);
1:             }
1:         }
1: 
0:         // make sure all specified kss and cfs exist
0:         filter.verifyKeyspaces(probe.getKeyspaces());
0:         filter.verifyColumnFamilies();
1: 
0:         // print out the table statistics
0:         for (Map.Entry<String, List<ColumnFamilyStoreMBean>> entry : cfstoreMap.entrySet())
1:         {
0:             String keyspaceName = entry.getKey();
0:             List<ColumnFamilyStoreMBean> columnFamilies = entry.getValue();
0:             long keyspaceReadCount = 0;
0:             long keyspaceWriteCount = 0;
0:             int keyspacePendingFlushes = 0;
0:             double keyspaceTotalReadTime = 0.0f;
0:             double keyspaceTotalWriteTime = 0.0f;
1: 
0:             System.out.println("Keyspace: " + keyspaceName);
0:             for (ColumnFamilyStoreMBean cfstore : columnFamilies)
1:             {
0:                 String cfName = cfstore.getColumnFamilyName();
0:                 long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "WriteLatency")).getCount();
0:                 long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "ReadLatency")).getCount();
1: 
0:                 if (readCount > 0)
1:                 {
0:                     keyspaceReadCount += readCount;
0:                     keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, cfName, "ReadTotalLatency");
1:                 }
0:                 if (writeCount > 0)
1:                 {
0:                     keyspaceWriteCount += writeCount;
0:                     keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, cfName, "WriteTotalLatency");
1:                 }
0:                 keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, cfName, "PendingFlushes");
1:             }
1: 
0:             double keyspaceReadLatency = keyspaceReadCount > 0
0:                                          ? keyspaceTotalReadTime / keyspaceReadCount / 1000
0:                                          : Double.NaN;
0:             double keyspaceWriteLatency = keyspaceWriteCount > 0
0:                                           ? keyspaceTotalWriteTime / keyspaceWriteCount / 1000
0:                                           : Double.NaN;
1: 
0:             System.out.println("\tRead Count: " + keyspaceReadCount);
0:             System.out.println("\tRead Latency: " + String.format("%s", keyspaceReadLatency) + " ms.");
0:             System.out.println("\tWrite Count: " + keyspaceWriteCount);
0:             System.out.println("\tWrite Latency: " + String.format("%s", keyspaceWriteLatency) + " ms.");
0:             System.out.println("\tPending Flushes: " + keyspacePendingFlushes);
1: 
0:             // print out column family statistics for this keyspace
0:             for (ColumnFamilyStoreMBean cfstore : columnFamilies)
1:             {
0:                 String cfName = cfstore.getColumnFamilyName();
0:                 if (cfName.contains("."))
0:                     System.out.println("\t\tTable (index): " + cfName);
0:                 else
0:                     System.out.println("\t\tTable: " + cfName);
1: 
0:                 System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "LiveSSTableCount"));
1: 
0:                 int[] leveledSStables = cfstore.getSSTableCountPerLevel();
0:                 if (leveledSStables != null)
1:                 {
0:                     System.out.print("\t\tSSTables in each level: [");
0:                     for (int level = 0; level < leveledSStables.length; level++)
1:                     {
0:                         int count = leveledSStables[level];
0:                         System.out.print(count);
0:                         long maxCount = 4L; // for L0
0:                         if (level > 0)
0:                             maxCount = (long) Math.pow(10, level);
0:                         //  show max threshold for level when exceeded
0:                         if (count > maxCount)
0:                             System.out.print("/" + maxCount);
1: 
0:                         if (level < leveledSStables.length - 1)
0:                             System.out.print(", ");
0:                         else
0:                             System.out.println("]");
1:                     }
1:                 }
1: 
0:                 Long memtableOffHeapSize = null;
0:                 Long bloomFilterOffHeapSize = null;
0:                 Long indexSummaryOffHeapSize = null;
0:                 Long compressionMetadataOffHeapSize = null;
1: 
0:                 Long offHeapSize = null;
1: 
0:                 try
1:                 {
0:                     memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "MemtableOffHeapSize");
0:                     bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "BloomFilterOffHeapMemoryUsed");
0:                     indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "IndexSummaryOffHeapMemoryUsed");
0:                     compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "CompressionMetadataOffHeapMemoryUsed");
1: 
0:                     offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize;
1:                 }
0:                 catch (RuntimeException e)
1:                 {
0:                     // offheap-metrics introduced in 2.1.3 - older versions do not have the appropriate mbeans
0:                     if (!(e.getCause() instanceof InstanceNotFoundException))
0:                         throw e;
1:                 }
1: 
0:                 System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "LiveDiskSpaceUsed"), humanReadable));
0:                 System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "TotalDiskSpaceUsed"), humanReadable));
0:                 System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "SnapshotsSize"), humanReadable));
0:                 if (offHeapSize != null)
0:                     System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable));
0:                 System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "CompressionRatio"));
0:                 long numberOfKeys = 0;
0:                 for (long keys : (long[]) probe.getColumnFamilyMetric(keyspaceName, cfName, "EstimatedColumnCountHistogram"))
0:                     numberOfKeys += keys;
0:                 System.out.println("\t\tNumber of keys (estimate): " + numberOfKeys);
0:                 System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "MemtableColumnsCount"));
0:                 System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "MemtableLiveDataSize"), humanReadable));
0:                 if (memtableOffHeapSize != null)
0:                     System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable));
0:                 System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "MemtableSwitchCount"));
0:                 System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "ReadLatency")).getCount());
0:                 double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "ReadLatency")).getMean() / 1000;
0:                 double localRLatency = localReadLatency > 0 ? localReadLatency : Double.NaN;
0:                 System.out.printf("\t\tLocal read latency: %01.3f ms%n", localRLatency);
0:                 System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "WriteLatency")).getCount());
0:                 double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "WriteLatency")).getMean() / 1000;
0:                 double localWLatency = localWriteLatency > 0 ? localWriteLatency : Double.NaN;
0:                 System.out.printf("\t\tLocal write latency: %01.3f ms%n", localWLatency);
0:                 System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "PendingFlushes"));
0:                 System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, cfName, "BloomFilterFalsePositives"));
0:                 System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, cfName, "RecentBloomFilterFalseRatio")));
0:                 System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "BloomFilterDiskSpaceUsed"), humanReadable));
0:                 if (bloomFilterOffHeapSize != null)
0:                     System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable));
0:                 if (indexSummaryOffHeapSize != null)
0:                     System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable));
0:                 if (compressionMetadataOffHeapSize != null)
0:                     System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable));
1: 
0:                 System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "MinRowSize"), humanReadable));
0:                 System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "MaxRowSize"), humanReadable));
0:                 System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, cfName, "MeanRowSize"), humanReadable));
0:                 CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "LiveScannedHistogram");
0:                 System.out.println("\t\tAverage live cells per slice (last five minutes): " + histogram.getMean());
0:                 System.out.println("\t\tMaximum live cells per slice (last five minutes): " + histogram.getMax());
0:                 histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, cfName, "TombstoneScannedHistogram");
0:                 System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean());
0:                 System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax());
1: 
0:                 System.out.println("");
1:             }
0:             System.out.println("----------------");
1:         }
1:     }
1: 
0:     private String format(long bytes, boolean humanReadable) {
0:         return humanReadable ? FileUtils.stringifyFileSize(bytes) : Long.toString(bytes);
1:     }
1: 
0:     /**
0:      * Used for filtering keyspaces and columnfamilies to be displayed using the cfstats command.
1:      */
0:     private static class OptionFilter
1:     {
0:         private Map<String, List<String>> filter = new HashMap<>();
0:         private Map<String, List<String>> verifier = new HashMap<>();
0:         private List<String> filterList = new ArrayList<>();
0:         private boolean ignoreMode;
1: 
0:         public OptionFilter(boolean ignoreMode, List<String> filterList)
1:         {
0:             this.filterList.addAll(filterList);
0:             this.ignoreMode = ignoreMode;
1: 
0:             for (String s : filterList)
1:             {
0:                 String[] keyValues = s.split("\\.", 2);
1: 
0:                 // build the map that stores the ks' and cfs to use
0:                 if (!filter.containsKey(keyValues[0]))
1:                 {
0:                     filter.put(keyValues[0], new ArrayList<String>());
0:                     verifier.put(keyValues[0], new ArrayList<String>());
1: 
0:                     if (keyValues.length == 2)
1:                     {
0:                         filter.get(keyValues[0]).add(keyValues[1]);
0:                         verifier.get(keyValues[0]).add(keyValues[1]);
1:                     }
0:                 } else
1:                 {
0:                     if (keyValues.length == 2)
1:                     {
0:                         filter.get(keyValues[0]).add(keyValues[1]);
0:                         verifier.get(keyValues[0]).add(keyValues[1]);
1:                     }
1:                 }
1:             }
1:         }
1: 
0:         public boolean isColumnFamilyIncluded(String keyspace, String columnFamily)
1:         {
0:             // supplying empty params list is treated as wanting to display all kss & cfs
0:             if (filterList.isEmpty())
0:                 return !ignoreMode;
1: 
0:             List<String> cfs = filter.get(keyspace);
1: 
0:             // no such keyspace is in the map
0:             if (cfs == null)
0:                 return ignoreMode;
0:                 // only a keyspace with no cfs was supplied
0:                 // so ignore or include (based on the flag) every column family in specified keyspace
0:             else if (cfs.size() == 0)
0:                 return !ignoreMode;
1: 
0:             // keyspace exists, and it contains specific cfs
0:             verifier.get(keyspace).remove(columnFamily);
0:             return ignoreMode ^ cfs.contains(columnFamily);
1:         }
1: 
0:         public void verifyKeyspaces(List<String> keyspaces)
1:         {
0:             for (String ks : verifier.keySet())
0:                 if (!keyspaces.contains(ks))
0:                     throw new IllegalArgumentException("Unknown keyspace: " + ks);
1:         }
1: 
0:         public void verifyColumnFamilies()
1:         {
0:             for (String ks : filter.keySet())
0:                 if (verifier.get(ks).size() > 0)
0:                     throw new IllegalArgumentException("Unknown tables: " + verifier.get(ks) + " in keyspace: " + ks);
1:         }
1:     }
1: }
============================================================================