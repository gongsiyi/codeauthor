1:bddfa9e: /*
1:bddfa9e:  * Licensed to the Apache Software Foundation (ASF) under one
1:bddfa9e:  * or more contributor license agreements.  See the NOTICE file
1:bddfa9e:  * distributed with this work for additional information
1:bddfa9e:  * regarding copyright ownership.  The ASF licenses this file
1:bddfa9e:  * to you under the Apache License, Version 2.0 (the
1:bddfa9e:  * "License"); you may not use this file except in compliance
1:bddfa9e:  * with the License.  You may obtain a copy of the License at
1:bddfa9e:  *
1:bddfa9e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bddfa9e:  *
1:bddfa9e:  * Unless required by applicable law or agreed to in writing, software
1:bddfa9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bddfa9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bddfa9e:  * See the License for the specific language governing permissions and
1:bddfa9e:  * limitations under the License.
1:bddfa9e:  */
1:bddfa9e: package org.apache.cassandra.cql3.statements;
1:217721a: 
1:217721a: import org.apache.cassandra.auth.Permission;
1:217721a: import org.apache.cassandra.auth.RoleResource;
1:bddfa9e: import org.apache.cassandra.cql3.CQLStatement;
1:bfd73be: import org.apache.cassandra.cql3.QueryOptions;
1:217721a: import org.apache.cassandra.exceptions.RequestExecutionException;
1:217721a: import org.apache.cassandra.exceptions.RequestValidationException;
1:217721a: import org.apache.cassandra.exceptions.UnauthorizedException;
1:bddfa9e: import org.apache.cassandra.service.ClientState;
1:bddfa9e: import org.apache.cassandra.service.QueryState;
1:bddfa9e: import org.apache.cassandra.transport.messages.ResultMessage;
5:bddfa9e: 
1:bddfa9e: public abstract class AuthenticationStatement extends ParsedStatement implements CQLStatement
4:bddfa9e: {
1:bddfa9e:     @Override
1:bddfa9e:     public Prepared prepare()
1:bddfa9e:     {
1:bddfa9e:         return new Prepared(this);
4:bddfa9e:     }
1:217721a: 
1:b97c523:     public int getBoundTerms()
1:217721a:     {
1:bddfa9e:         return 0;
1:217721a:     }
1:bddfa9e: 
1:aa83c94:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime)
1:bddfa9e:     throws RequestExecutionException, RequestValidationException
1:217721a:     {
1:bddfa9e:         return execute(state.getClientState());
1:bddfa9e:     }
1:bddfa9e: 
1:bddfa9e:     public abstract ResultMessage execute(ClientState state) throws RequestExecutionException, RequestValidationException;
1:bddfa9e: 
1:1147ee3:     public ResultMessage executeInternal(QueryState state, QueryOptions options)
1:217721a:     {
1:bddfa9e:         // executeInternal is for local query only, thus altering users doesn't make sense and is not supported
1:bddfa9e:         throw new UnsupportedOperationException();
1:217721a:     }
1:217721a: 
1:217721a:     public void checkPermission(ClientState state, Permission required, RoleResource resource) throws UnauthorizedException
1:217721a:     {
2:217721a:         try
1:217721a:         {
1:217721a:             state.ensureHasPermission(required, resource);
1:217721a:         }
1:217721a:         catch (UnauthorizedException e)
1:217721a:         {
1:217721a:             // Catch and rethrow with a more friendly message
1:217721a:             throw new UnauthorizedException(String.format("User %s does not have sufficient privileges " +
1:217721a:                                                           "to perform the requested operation",
1:217721a:                                                           state.getUser().getName()));
1:217721a:         }
1:217721a:     }
1:217721a: }
1:217721a: 
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime)
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.cassandra.auth.IRoleManager;
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.auth.RoleResource;
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void checkPermission(ClientState state, Permission required, RoleResource resource) throws UnauthorizedException
1:     {
1:         try
1:         {
1:             state.ensureHasPermission(required, resource);
1:         }
1:         catch (UnauthorizedException e)
1:         {
1:             // Catch and rethrow with a more friendly message
1:             throw new UnauthorizedException(String.format("User %s does not have sufficient privileges " +
1:                                                           "to perform the requested operation",
1:                                                           state.getUser().getName()));
1:         }
1:     }
1: 
0:     protected boolean hasSuperuserStatus(RoleResource role)
1:     {
0:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
1:         try
1:         {
0:             for (RoleResource r : roleManager.getRoles(role, true))
0:                 if (roleManager.isSuper(r))
0:                     return true;
0:             return false;
1:         }
0:         catch(RequestValidationException | RequestExecutionException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1147ee3
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage executeInternal(QueryState state, QueryOptions options)
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.QueryOptions;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(QueryState state, QueryOptions options)
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.pager.PagingState;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize, PagingState pagingState)
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b1435ff
commit:b97c523
/////////////////////////////////////////////////////////////////////////
1:     public int getBoundTerms()
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
1: import org.apache.cassandra.cql3.CQLStatement;
0: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public abstract class AuthenticationStatement extends ParsedStatement implements CQLStatement
1: {
1:     @Override
1:     public Prepared prepare()
1:     {
1:         return new Prepared(this);
1:     }
1: 
0:     public int getBoundsTerms()
1:     {
1:         return 0;
1:     }
1: 
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables)
1:     throws RequestExecutionException, RequestValidationException
1:     {
1:         return execute(state.getClientState());
1:     }
1: 
1:     public abstract ResultMessage execute(ClientState state) throws RequestExecutionException, RequestValidationException;
1: 
0:     public ResultMessage executeInternal(QueryState state)
1:     {
1:         // executeInternal is for local query only, thus altering users doesn't make sense and is not supported
1:         throw new UnsupportedOperationException();
1:     }
1: }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
============================================================================