1:c108ce5: /*
1:c108ce5:  * Licensed to the Apache Software Foundation (ASF) under one
1:c108ce5:  * or more contributor license agreements.  See the NOTICE file
1:c108ce5:  * distributed with this work for additional information
1:c108ce5:  * regarding copyright ownership.  The ASF licenses this file
1:c108ce5:  * to you under the Apache License, Version 2.0 (the
1:c108ce5:  * "License"); you may not use this file except in compliance
1:c108ce5:  * with the License.  You may obtain a copy of the License at
1:c108ce5:  *
1:c108ce5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c108ce5:  *
1:c108ce5:  * Unless required by applicable law or agreed to in writing, software
1:c108ce5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c108ce5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c108ce5:  * See the License for the specific language governing permissions and
1:c108ce5:  * limitations under the License.
1:c108ce5:  */
1:5420b7a: package org.apache.cassandra.concurrent;
4:5420b7a: 
1:5420b7a: import java.util.ArrayList;
1:5420b7a: import java.util.List;
1:5420b7a: import java.util.concurrent.ConcurrentLinkedQueue;
1:5420b7a: import java.util.concurrent.TimeUnit;
1:5420b7a: import java.util.concurrent.atomic.AtomicLong;
1:5420b7a: 
1:8896a70: import org.apache.cassandra.metrics.SEPMetrics;
1:5420b7a: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1:5420b7a: import org.apache.cassandra.utils.concurrent.WaitQueue;
1:5420b7a: 
1:5420b7a: import static org.apache.cassandra.concurrent.SEPWorker.Work;
1:5420b7a: 
1:dbf6e62: public class SEPExecutor extends AbstractLocalAwareExecutorService
4:5420b7a: {
1:5420b7a:     private final SharedExecutorPool pool;
1:5420b7a: 
1:a6c6d0f:     public final int maxWorkers;
1:7ede582:     public final String name;
1:5420b7a:     private final int maxTasksQueued;
1:8896a70:     private final SEPMetrics metrics;
1:5420b7a: 
1:5420b7a:     // stores both a set of work permits and task permits:
1:5420b7a:     //  bottom 32 bits are number of queued tasks, in the range [0..maxTasksQueued]   (initially 0)
1:5420b7a:     //  top 32 bits are number of work permits available in the range [0..maxWorkers]   (initially maxWorkers)
1:5420b7a:     private final AtomicLong permits = new AtomicLong();
1:5420b7a: 
1:5420b7a:     // producers wait on this when there is no room on the queue
1:5420b7a:     private final WaitQueue hasRoom = new WaitQueue();
1:5420b7a:     private final AtomicLong completedTasks = new AtomicLong();
1:5420b7a: 
1:5420b7a:     volatile boolean shuttingDown = false;
1:5420b7a:     final SimpleCondition shutdown = new SimpleCondition();
1:5420b7a: 
1:5420b7a:     // TODO: see if other queue implementations might improve throughput
1:5420b7a:     protected final ConcurrentLinkedQueue<FutureTask<?>> tasks = new ConcurrentLinkedQueue<>();
1:5420b7a: 
1:8896a70:     SEPExecutor(SharedExecutorPool pool, int maxWorkers, int maxTasksQueued, String jmxPath, String name)
1:5420b7a:     {
1:5420b7a:         this.pool = pool;
1:7ede582:         this.name = name;
1:5420b7a:         this.maxWorkers = maxWorkers;
1:5420b7a:         this.maxTasksQueued = maxTasksQueued;
1:5420b7a:         this.permits.set(combine(0, maxWorkers));
1:8896a70:         this.metrics = new SEPMetrics(this, jmxPath, name);
4:5420b7a:     }
1:5420b7a: 
1:5420b7a:     protected void onCompletion()
1:5420b7a:     {
1:5420b7a:         completedTasks.incrementAndGet();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     // schedules another worker for this pool if there is work outstanding and there are no spinning threads that
1:5420b7a:     // will self-assign to it in the immediate future
1:5420b7a:     boolean maybeSchedule()
1:5420b7a:     {
1:5420b7a:         if (pool.spinningCount.get() > 0 || !takeWorkPermit(true))
1:5420b7a:             return false;
1:5420b7a: 
1:5420b7a:         pool.schedule(new Work(this));
1:5420b7a:         return true;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     protected void addTask(FutureTask<?> task)
1:5420b7a:     {
1:5420b7a:         // we add to the queue first, so that when a worker takes a task permit it can be certain there is a task available
1:5420b7a:         // this permits us to schedule threads non-spuriously; it also means work is serviced fairly
1:5420b7a:         tasks.add(task);
1:5420b7a:         int taskPermits;
1:5420b7a:         while (true)
1:5420b7a:         {
1:5420b7a:             long current = permits.get();
1:5420b7a:             taskPermits = taskPermits(current);
1:5420b7a:             // because there is no difference in practical terms between the work permit being added or not (the work is already in existence)
1:5420b7a:             // we always add our permit, but block after the fact if we breached the queue limit
1:5420b7a:             if (permits.compareAndSet(current, updateTaskPermits(current, taskPermits + 1)))
1:5420b7a:                 break;
1:5420b7a:         }
1:5420b7a: 
1:5420b7a:         if (taskPermits == 0)
1:5420b7a:         {
1:5420b7a:             // we only need to schedule a thread if there are no tasks already waiting to be processed, as
1:5420b7a:             // the original enqueue will have started a thread to service its work which will have itself
1:5420b7a:             // spawned helper workers that would have either exhausted the available tasks or are still being spawned.
1:5420b7a:             // to avoid incurring any unnecessary signalling penalties we also do not take any work to hand to the new
1:5420b7a:             // worker, we simply start a worker in a spinning state
1:5420b7a:             pool.maybeStartSpinningWorker();
1:5420b7a:         }
1:5420b7a:         else if (taskPermits >= maxTasksQueued)
1:5420b7a:         {
1:5420b7a:             // register to receive a signal once a task is processed bringing the queue below its threshold
1:5420b7a:             WaitQueue.Signal s = hasRoom.register();
1:5420b7a: 
1:5420b7a:             // we will only be signalled once the queue drops below full, so this creates equivalent external behaviour
1:5420b7a:             // however the advantage is that we never wake-up spuriously;
1:5420b7a:             // we choose to always sleep, even if in the intervening time the queue has dropped below limit,
1:5420b7a:             // so long as we _will_ eventually receive a signal
1:5420b7a:             if (taskPermits(permits.get()) > maxTasksQueued)
1:5420b7a:             {
1:5420b7a:                 // if we're blocking, we might as well directly schedule a worker if we aren't already at max
1:5420b7a:                 if (takeWorkPermit(true))
1:5420b7a:                     pool.schedule(new Work(this));
1:8896a70: 
1:8896a70:                 metrics.totalBlocked.inc();
1:8896a70:                 metrics.currentBlocked.inc();
1:5420b7a:                 s.awaitUninterruptibly();
1:8896a70:                 metrics.currentBlocked.dec();
1:5420b7a:             }
1:5420b7a:             else // don't propagate our signal when we cancel, just cancel
1:5420b7a:                 s.cancel();
1:5420b7a:         }
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     // takes permission to perform a task, if any are available; once taken it is guaranteed
1:5420b7a:     // that a proceeding call to tasks.poll() will return some work
1:5420b7a:     boolean takeTaskPermit()
1:5420b7a:     {
1:5420b7a:         while (true)
1:5420b7a:         {
1:5420b7a:             long current = permits.get();
1:5420b7a:             int taskPermits = taskPermits(current);
1:5420b7a:             if (taskPermits == 0)
1:5420b7a:                 return false;
1:5420b7a:             if (permits.compareAndSet(current, updateTaskPermits(current, taskPermits - 1)))
1:5420b7a:             {
1:5420b7a:                 if (taskPermits == maxTasksQueued && hasRoom.hasWaiters())
1:5420b7a:                     hasRoom.signalAll();
1:5420b7a:                 return true;
1:5420b7a:             }
1:5420b7a:         }
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     // takes a worker permit and (optionally) a task permit simultaneously; if one of the two is unavailable, returns false
1:5420b7a:     boolean takeWorkPermit(boolean takeTaskPermit)
1:5420b7a:     {
1:5420b7a:         int taskDelta = takeTaskPermit ? 1 : 0;
1:5420b7a:         while (true)
1:5420b7a:         {
1:5420b7a:             long current = permits.get();
1:5420b7a:             int workPermits = workPermits(current);
1:5420b7a:             int taskPermits = taskPermits(current);
1:5420b7a:             if (workPermits == 0 || taskPermits == 0)
1:5420b7a:                 return false;
1:5420b7a:             if (permits.compareAndSet(current, combine(taskPermits - taskDelta, workPermits - 1)))
1:5420b7a:             {
1:5420b7a:                 if (takeTaskPermit && taskPermits == maxTasksQueued && hasRoom.hasWaiters())
1:5420b7a:                     hasRoom.signalAll();
1:5420b7a:                 return true;
1:5420b7a:             }
1:5420b7a:         }
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     // gives up a work permit
1:5420b7a:     void returnWorkPermit()
1:5420b7a:     {
1:5420b7a:         while (true)
1:5420b7a:         {
1:5420b7a:             long current = permits.get();
1:5420b7a:             int workPermits = workPermits(current);
1:5420b7a:             if (permits.compareAndSet(current, updateWorkPermits(current, workPermits + 1)))
1:5420b7a:                 return;
1:5420b7a:         }
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public void maybeExecuteImmediately(Runnable command)
1:5420b7a:     {
1:5420b7a:         FutureTask<?> ft = newTaskFor(command, null);
1:5420b7a:         if (!takeWorkPermit(false))
1:5420b7a:         {
1:5420b7a:             addTask(ft);
1:5420b7a:         }
1:5420b7a:         else
1:5420b7a:         {
1:5420b7a:             try
1:5420b7a:             {
1:5420b7a:                 ft.run();
1:5420b7a:             }
1:5420b7a:             finally
1:5420b7a:             {
1:5420b7a:                 returnWorkPermit();
1:5420b7a:                 // we have to maintain our invariant of always scheduling after any work is performed
1:5420b7a:                 // in this case in particular we are not processing the rest of the queue anyway, and so
1:5420b7a:                 // the work permit may go wasted if we don't immediately attempt to spawn another worker
1:5420b7a:                 maybeSchedule();
1:5420b7a:             }
1:5420b7a:         }
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public synchronized void shutdown()
1:5420b7a:     {
1:5420b7a:         shuttingDown = true;
1:5420b7a:         pool.executors.remove(this);
1:5420b7a:         if (getActiveCount() == 0)
1:5420b7a:             shutdown.signalAll();
1:8896a70: 
1:8896a70:         // release metrics
1:8896a70:         metrics.release();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public synchronized List<Runnable> shutdownNow()
1:5420b7a:     {
1:5420b7a:         shutdown();
1:5420b7a:         List<Runnable> aborted = new ArrayList<>();
1:5420b7a:         while (takeTaskPermit())
1:5420b7a:             aborted.add(tasks.poll());
1:5420b7a:         return aborted;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean isShutdown()
1:5420b7a:     {
1:5420b7a:         return shuttingDown;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean isTerminated()
1:5420b7a:     {
1:5420b7a:         return shuttingDown && shutdown.isSignaled();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:5420b7a:     {
1:5420b7a:         shutdown.await(timeout, unit);
1:5420b7a:         return isTerminated();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public long getPendingTasks()
1:5420b7a:     {
1:5420b7a:         return taskPermits(permits.get());
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public long getCompletedTasks()
1:5420b7a:     {
1:5420b7a:         return completedTasks.get();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public int getActiveCount()
1:5420b7a:     {
1:5420b7a:         return maxWorkers - workPermits(permits.get());
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     private static int taskPermits(long both)
1:5420b7a:     {
1:5420b7a:         return (int) both;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     private static int workPermits(long both)
1:5420b7a:     {
1:5420b7a:         return (int) (both >>> 32);
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     private static long updateTaskPermits(long prev, int taskPermits)
1:5420b7a:     {
1:5420b7a:         return (prev & (-1L << 32)) | taskPermits;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     private static long updateWorkPermits(long prev, int workPermits)
1:5420b7a:     {
1:5420b7a:         return (((long) workPermits) << 32) | (prev & (-1L >>> 32));
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     private static long combine(int taskPermits, int workPermits)
1:5420b7a:     {
1:5420b7a:         return (((long) workPermits) << 32) | taskPermits;
1:5420b7a:     }
1:5420b7a: }
============================================================================
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:7ede582
/////////////////////////////////////////////////////////////////////////
1:     public final String name;
/////////////////////////////////////////////////////////////////////////
1:         this.name = name;
commit:a6c6d0f
/////////////////////////////////////////////////////////////////////////
1:     public final int maxWorkers;
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbf6e62
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class SEPExecutor extends AbstractLocalAwareExecutorService
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.metrics.SEPMetrics;
/////////////////////////////////////////////////////////////////////////
1:     private final SEPMetrics metrics;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     SEPExecutor(SharedExecutorPool pool, int maxWorkers, int maxTasksQueued, String jmxPath, String name)
1:         this.metrics = new SEPMetrics(this, jmxPath, name);
/////////////////////////////////////////////////////////////////////////
1: 
1:                 metrics.totalBlocked.inc();
1:                 metrics.currentBlocked.inc();
1:                 metrics.currentBlocked.dec();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // release metrics
1:         metrics.release();
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c108ce5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1: import org.apache.cassandra.utils.concurrent.WaitQueue;
1: 
1: import static org.apache.cassandra.concurrent.SEPWorker.Work;
1: 
0: public class SEPExecutor extends AbstractTracingAwareExecutorService
1: {
1:     private final SharedExecutorPool pool;
1: 
0:     private final int maxWorkers;
1:     private final int maxTasksQueued;
1: 
1:     // stores both a set of work permits and task permits:
1:     //  bottom 32 bits are number of queued tasks, in the range [0..maxTasksQueued]   (initially 0)
1:     //  top 32 bits are number of work permits available in the range [0..maxWorkers]   (initially maxWorkers)
1:     private final AtomicLong permits = new AtomicLong();
1: 
1:     // producers wait on this when there is no room on the queue
1:     private final WaitQueue hasRoom = new WaitQueue();
0:     private final AtomicLong totalBlocked = new AtomicLong();
0:     private final AtomicInteger currentlyBlocked = new AtomicInteger();
1:     private final AtomicLong completedTasks = new AtomicLong();
1: 
1:     volatile boolean shuttingDown = false;
1:     final SimpleCondition shutdown = new SimpleCondition();
1: 
1:     // TODO: see if other queue implementations might improve throughput
1:     protected final ConcurrentLinkedQueue<FutureTask<?>> tasks = new ConcurrentLinkedQueue<>();
1: 
0:     SEPExecutor(SharedExecutorPool pool, int maxWorkers, int maxTasksQueued)
1:     {
1:         this.pool = pool;
1:         this.maxWorkers = maxWorkers;
1:         this.maxTasksQueued = maxTasksQueued;
1:         this.permits.set(combine(0, maxWorkers));
1:     }
1: 
1:     protected void onCompletion()
1:     {
1:         completedTasks.incrementAndGet();
1:     }
1: 
1:     // schedules another worker for this pool if there is work outstanding and there are no spinning threads that
1:     // will self-assign to it in the immediate future
1:     boolean maybeSchedule()
1:     {
1:         if (pool.spinningCount.get() > 0 || !takeWorkPermit(true))
1:             return false;
1: 
1:         pool.schedule(new Work(this));
1:         return true;
1:     }
1: 
1:     protected void addTask(FutureTask<?> task)
1:     {
1:         // we add to the queue first, so that when a worker takes a task permit it can be certain there is a task available
1:         // this permits us to schedule threads non-spuriously; it also means work is serviced fairly
1:         tasks.add(task);
1:         int taskPermits;
1:         while (true)
1:         {
1:             long current = permits.get();
1:             taskPermits = taskPermits(current);
1:             // because there is no difference in practical terms between the work permit being added or not (the work is already in existence)
1:             // we always add our permit, but block after the fact if we breached the queue limit
1:             if (permits.compareAndSet(current, updateTaskPermits(current, taskPermits + 1)))
1:                 break;
1:         }
1: 
1:         if (taskPermits == 0)
1:         {
1:             // we only need to schedule a thread if there are no tasks already waiting to be processed, as
1:             // the original enqueue will have started a thread to service its work which will have itself
1:             // spawned helper workers that would have either exhausted the available tasks or are still being spawned.
1:             // to avoid incurring any unnecessary signalling penalties we also do not take any work to hand to the new
1:             // worker, we simply start a worker in a spinning state
1:             pool.maybeStartSpinningWorker();
1:         }
1:         else if (taskPermits >= maxTasksQueued)
1:         {
1:             // register to receive a signal once a task is processed bringing the queue below its threshold
1:             WaitQueue.Signal s = hasRoom.register();
1: 
1:             // we will only be signalled once the queue drops below full, so this creates equivalent external behaviour
1:             // however the advantage is that we never wake-up spuriously;
1:             // we choose to always sleep, even if in the intervening time the queue has dropped below limit,
1:             // so long as we _will_ eventually receive a signal
1:             if (taskPermits(permits.get()) > maxTasksQueued)
1:             {
1:                 // if we're blocking, we might as well directly schedule a worker if we aren't already at max
1:                 if (takeWorkPermit(true))
1:                     pool.schedule(new Work(this));
0:                 totalBlocked.incrementAndGet();
0:                 currentlyBlocked.incrementAndGet();
1:                 s.awaitUninterruptibly();
0:                 currentlyBlocked.decrementAndGet();
1:             }
1:             else // don't propagate our signal when we cancel, just cancel
1:                 s.cancel();
1:         }
1:     }
1: 
1:     // takes permission to perform a task, if any are available; once taken it is guaranteed
1:     // that a proceeding call to tasks.poll() will return some work
1:     boolean takeTaskPermit()
1:     {
1:         while (true)
1:         {
1:             long current = permits.get();
1:             int taskPermits = taskPermits(current);
1:             if (taskPermits == 0)
1:                 return false;
1:             if (permits.compareAndSet(current, updateTaskPermits(current, taskPermits - 1)))
1:             {
1:                 if (taskPermits == maxTasksQueued && hasRoom.hasWaiters())
1:                     hasRoom.signalAll();
1:                 return true;
1:             }
1:         }
1:     }
1: 
1:     // takes a worker permit and (optionally) a task permit simultaneously; if one of the two is unavailable, returns false
1:     boolean takeWorkPermit(boolean takeTaskPermit)
1:     {
1:         int taskDelta = takeTaskPermit ? 1 : 0;
1:         while (true)
1:         {
1:             long current = permits.get();
1:             int workPermits = workPermits(current);
1:             int taskPermits = taskPermits(current);
1:             if (workPermits == 0 || taskPermits == 0)
1:                 return false;
1:             if (permits.compareAndSet(current, combine(taskPermits - taskDelta, workPermits - 1)))
1:             {
1:                 if (takeTaskPermit && taskPermits == maxTasksQueued && hasRoom.hasWaiters())
1:                     hasRoom.signalAll();
1:                 return true;
1:             }
1:         }
1:     }
1: 
1:     // gives up a work permit
1:     void returnWorkPermit()
1:     {
1:         while (true)
1:         {
1:             long current = permits.get();
1:             int workPermits = workPermits(current);
1:             if (permits.compareAndSet(current, updateWorkPermits(current, workPermits + 1)))
1:                 return;
1:         }
1:     }
1: 
1:     public void maybeExecuteImmediately(Runnable command)
1:     {
1:         FutureTask<?> ft = newTaskFor(command, null);
1:         if (!takeWorkPermit(false))
1:         {
1:             addTask(ft);
1:         }
1:         else
1:         {
1:             try
1:             {
1:                 ft.run();
1:             }
1:             finally
1:             {
1:                 returnWorkPermit();
1:                 // we have to maintain our invariant of always scheduling after any work is performed
1:                 // in this case in particular we are not processing the rest of the queue anyway, and so
1:                 // the work permit may go wasted if we don't immediately attempt to spawn another worker
1:                 maybeSchedule();
1:             }
1:         }
1:     }
1: 
1:     public synchronized void shutdown()
1:     {
1:         shuttingDown = true;
1:         pool.executors.remove(this);
1:         if (getActiveCount() == 0)
1:             shutdown.signalAll();
1:     }
1: 
1:     public synchronized List<Runnable> shutdownNow()
1:     {
1:         shutdown();
1:         List<Runnable> aborted = new ArrayList<>();
1:         while (takeTaskPermit())
1:             aborted.add(tasks.poll());
1:         return aborted;
1:     }
1: 
1:     public boolean isShutdown()
1:     {
1:         return shuttingDown;
1:     }
1: 
1:     public boolean isTerminated()
1:     {
1:         return shuttingDown && shutdown.isSignaled();
1:     }
1: 
1:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:     {
1:         shutdown.await(timeout, unit);
1:         return isTerminated();
1:     }
1: 
1:     public long getPendingTasks()
1:     {
1:         return taskPermits(permits.get());
1:     }
1: 
1:     public long getCompletedTasks()
1:     {
1:         return completedTasks.get();
1:     }
1: 
1:     public int getActiveCount()
1:     {
1:         return maxWorkers - workPermits(permits.get());
1:     }
1: 
0:     public int getTotalBlockedTasks()
1:     {
0:         return (int) totalBlocked.get();
1:     }
1: 
0:     public int getMaximumThreads()
1:     {
0:         return maxWorkers;
1:     }
1: 
0:     public int getCurrentlyBlockedTasks()
1:     {
0:         return currentlyBlocked.get();
1:     }
1: 
1:     private static int taskPermits(long both)
1:     {
1:         return (int) both;
1:     }
1: 
1:     private static int workPermits(long both)
1:     {
1:         return (int) (both >>> 32);
1:     }
1: 
1:     private static long updateTaskPermits(long prev, int taskPermits)
1:     {
1:         return (prev & (-1L << 32)) | taskPermits;
1:     }
1: 
1:     private static long updateWorkPermits(long prev, int workPermits)
1:     {
1:         return (((long) workPermits) << 32) | (prev & (-1L >>> 32));
1:     }
1: 
1:     private static long combine(int taskPermits, int workPermits)
1:     {
1:         return (((long) workPermits) << 32) | taskPermits;
1:     }
1: }
============================================================================