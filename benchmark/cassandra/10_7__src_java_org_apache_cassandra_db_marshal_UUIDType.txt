1:32f85c5: /*
1:32f85c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:32f85c5:  * or more contributor license agreements.  See the NOTICE file
1:32f85c5:  * distributed with this work for additional information
1:32f85c5:  * regarding copyright ownership.  The ASF licenses this file
1:32f85c5:  * to you under the Apache License, Version 2.0 (the
1:32f85c5:  * "License"); you may not use this file except in compliance
1:32f85c5:  * with the License.  You may obtain a copy of the License at
2:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:32f85c5:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
1:07cf56f: 
1:32f85c5: import java.nio.ByteBuffer;
1:32f85c5: import java.util.UUID;
1:d76adf5: import java.util.regex.Pattern;
1:de2ae8f: 
1:6d26625: import com.google.common.primitives.UnsignedLongs;
1:6d26625: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:a67f779: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.UUIDSerializer;
1:de2ae8f: import org.apache.cassandra.utils.ByteBufferUtil;
1:de2ae8f: import org.apache.cassandra.utils.UUIDGen;
1:2395fb3: 
1:32f85c5: /**
1:32f85c5:  * Compares UUIDs using the following criteria:<br>
1:32f85c5:  * - if count of supplied bytes is less than 16, compare counts<br>
1:32f85c5:  * - compare UUID version fields<br>
1:32f85c5:  * - nil UUID is always lesser<br>
1:32f85c5:  * - compare timestamps if both are time-based<br>
1:32f85c5:  * - compare lexically, unsigned msb-to-lsb comparison<br>
1:07cdfd0:  *
1:32f85c5:  * @see "com.fasterxml.uuid.UUIDComparator"
1:32f85c5:  */
1:a0d45f7: public class UUIDType extends AbstractType<UUID>
8:de2ae8f: {
1:32f85c5:     public static final UUIDType instance = new UUIDType();
1:a67f779: 
1:32f85c5:     UUIDType()
1:de2ae8f:     {
1:07594ee:         super(ComparisonType.CUSTOM);
8:de2ae8f:     }
1:a67f779: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:a67f779:     {
1:4df4f79:         return true;
1:a67f779:     }
1:a67f779: 
1:07594ee:     public int compareCustom(ByteBuffer b1, ByteBuffer b2)
1:4df4f79:     {
1:32f85c5:         // Compare for length
1:6d26625:         int s1 = b1.position(), s2 = b2.position();
1:6d26625:         int l1 = b1.limit(), l2 = b2.limit();
1:4df4f79: 
1:6d26625:         // should we assert exactly 16 bytes (or 0)? seems prudent
1:6d26625:         boolean p1 = l1 - s1 == 16, p2 = l2 - s2 == 16;
1:6d26625:         if (!(p1 & p2))
1:9da742d:         {
1:6d26625:             assert p1 | (l1 == s1);
1:6d26625:             assert p2 | (l2 == s2);
1:6d26625:             return p1 ? 1 : p2 ? -1 : 0;
1:4df4f79:         }
1:2d95cb4: 
1:32f85c5:         // Compare versions
1:6d26625:         long msb1 = b1.getLong(s1);
1:6d26625:         long msb2 = b2.getLong(s2);
1:de2ae8f: 
1:6d26625:         int version1 = (int) ((msb1 >>> 12) & 0xf);
1:6d26625:         int version2 = (int) ((msb2 >>> 12) & 0xf);
1:6d26625:         if (version1 != version2)
1:6d26625:             return version1 - version2;
1:de2ae8f: 
1:6d26625:         // bytes: version is top 4 bits of byte 6
1:6d26625:         // then: [6.5-8), [4-6), [0-4)
1:6d26625:         if (version1 == 1)
1:2d95cb4:         {
1:6d26625:             long reorder1 = TimeUUIDType.reorderTimestampBytes(msb1);
1:6d26625:             long reorder2 = TimeUUIDType.reorderTimestampBytes(msb2);
1:6d26625:             // we know this is >= 0, since the top 3 bits will be 0
1:6d26625:             int c = Long.compare(reorder1, reorder2);
1:32f85c5:             if (c != 0)
1:32f85c5:                 return c;
1:2d95cb4:         }
1:6d26625:         else
1:de2ae8f:         {
1:6d26625:             int c = UnsignedLongs.compare(msb1, msb2);
1:32f85c5:             if (c != 0)
1:32f85c5:                 return c;
1:de2ae8f:         }
1:de2ae8f: 
1:6d26625:         return UnsignedLongs.compare(b1.getLong(s1 + 8), b2.getLong(s2 + 8));
1:de2ae8f:     }
26:32f85c5: 
1:e9c6742:     @Override
1:d76adf5:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:c7b02d1:     {
1:d76adf5:         return otherType instanceof UUIDType || otherType instanceof TimeUUIDType;
1:c7b02d1:     }
1:9da742d: 
1:9da742d:     @Override
1:d76adf5:     public ByteBuffer fromString(String source) throws MarshalException
1:c7b02d1:     {
1:d76adf5:         // Return an empty ByteBuffer for an empty string.
1:d76adf5:         ByteBuffer parsed = parse(source);
1:d76adf5:         if (parsed != null)
1:d76adf5:             return parsed;
1:d76adf5: 
1:c7b02d1:         throw new MarshalException(String.format("Unable to make UUID from '%s'", source));
1:9da742d:     }
1:de2ae8f: 
1:d76adf5:     @Override
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.UUID;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<UUID> getSerializer()
1:e9c6742:     {
1:e9c6742:         return UUIDSerializer.instance;
1:e9c6742:     }
1:acf1b18: 
1:d76adf5:     static final Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
1:d76adf5: 
1:d76adf5:     static ByteBuffer parse(String source)
1:d76adf5:     {
1:d76adf5:         if (source.isEmpty())
1:d76adf5:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:d76adf5: 
1:d76adf5:         if (regexPattern.matcher(source).matches())
1:d76adf5:         {
1:d76adf5:             try
1:d76adf5:             {
1:2d991a7:                 return UUIDGen.toByteBuffer(UUID.fromString(source));
1:d76adf5:             }
1:d76adf5:             catch (IllegalArgumentException e)
1:2635632:             {
1:c7b02d1:                 throw new MarshalException(String.format("Unable to make UUID from '%s'", source), e);
1:2635632:             }
1:2635632:         }
1:c7b02d1: 
1:d76adf5:         return null;
1:d76adf5:     }
1:d76adf5: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:2635632:     {
1:2635632:         try
1:d76adf5:         {
1:c7b02d1:             return new Constants.Value(fromString((String) parsed));
1:d76adf5:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a string representation of a uuid, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:d76adf5:         }
1:c7b02d1:     }
1:c7b02d1: 
1:d76adf5:     static int version(ByteBuffer uuid)
1:d76adf5:     {
1:d76adf5:         return (uuid.get(6) & 0xf0) >> 4;
1:d76adf5:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 16;
1:a991b64:     }
1:c7b02d1: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2d991a7
/////////////////////////////////////////////////////////////////////////
1:                 return UUIDGen.toByteBuffer(UUID.fromString(source));
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 16;
1:     }
commit:e024a1c
commit:2635632
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.serializers.TimestampSerializer;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 return ByteBuffer.wrap(UUIDGen.decompose(uuid));
1:         try
1:         {
0:             return ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(TimestampSerializer.dateStringToTimestamp(source)));
1:         }
0:         catch (MarshalException e)
1:         {
0:             throw new MarshalException(String.format("unable to make version 1 UUID from '%s'", source), e);
1:         }
commit:64e4628
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.UUIDSerializer;
0: import static org.apache.cassandra.serializers.TimestampSerializer.iso8601Patterns;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<UUID> getSerializer()
commit:9ec7b80
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.type.TimestampSerializer.iso8601Patterns;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
0: import org.apache.cassandra.type.UUIDSerializer;
0: import static org.apache.cassandra.type.DateSerializer.iso8601Patterns;
/////////////////////////////////////////////////////////////////////////
0:         return UUIDSerializer.instance.serialize(bytes);
0:         UUIDSerializer.instance.validate(bytes);
0:         return UUIDSerializer.instance.getString(bytes);
0:         return UUIDSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         } else if (source.toLowerCase().equals("now"))
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public AbstractSerializer<UUID> asComposer()
1:     {
1:         return UUIDSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.UUID);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.UUID;
1:     }
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
0:             idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:  *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer b1, ByteBuffer b2)
commit:d76adf5
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:         return otherType instanceof UUIDType || otherType instanceof TimeUUIDType;
1:     public ByteBuffer fromString(String source) throws MarshalException
1:         // Return an empty ByteBuffer for an empty string.
1:         ByteBuffer parsed = parse(source);
1:         if (parsed != null)
1:             return parsed;
1: 
0:         throw new MarshalException(String.format("unable to coerce '%s' to UUID", source));
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     static final Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
1: 
1:     static ByteBuffer parse(String source)
1:     {
1:         if (source.isEmpty())
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         if (regexPattern.matcher(source).matches())
1:         {
1:             try
1:             {
0:                 return ByteBuffer.wrap(UUIDGen.decompose(UUID.fromString(source)));
1:             }
1:             catch (IllegalArgumentException e)
1:             {
0:                 throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     static int version(ByteBuffer uuid)
1:     {
1:         return (uuid.get(6) & 0xf0) >> 4;
1:     }
commit:6d26625
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.primitives.UnsignedLongs;
1: 
/////////////////////////////////////////////////////////////////////////
1:         int s1 = b1.position(), s2 = b2.position();
1:         int l1 = b1.limit(), l2 = b2.limit();
1:         // should we assert exactly 16 bytes (or 0)? seems prudent
1:         boolean p1 = l1 - s1 == 16, p2 = l2 - s2 == 16;
1:         if (!(p1 & p2))
1:             assert p1 | (l1 == s1);
1:             assert p2 | (l2 == s2);
1:             return p1 ? 1 : p2 ? -1 : 0;
1:         long msb1 = b1.getLong(s1);
1:         long msb2 = b2.getLong(s2);
1:         int version1 = (int) ((msb1 >>> 12) & 0xf);
1:         int version2 = (int) ((msb2 >>> 12) & 0xf);
1:         if (version1 != version2)
1:             return version1 - version2;
1:         // bytes: version is top 4 bits of byte 6
1:         // then: [6.5-8), [4-6), [0-4)
1:         if (version1 == 1)
1:             long reorder1 = TimeUUIDType.reorderTimestampBytes(msb1);
1:             long reorder2 = TimeUUIDType.reorderTimestampBytes(msb2);
1:             // we know this is >= 0, since the top 3 bits will be 0
1:             int c = Long.compare(reorder1, reorder2);
1:         else
1:             int c = UnsignedLongs.compare(msb1, msb2);
1:         return UnsignedLongs.compare(b1.getLong(s1 + 8), b2.getLong(s2 + 8));
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:         throw new MarshalException(String.format("Unable to make UUID from '%s'", source));
/////////////////////////////////////////////////////////////////////////
1:                 throw new MarshalException(String.format("Unable to make UUID from '%s'", source), e);
1: 
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
0:         try
1:         {
1:             return new Constants.Value(fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a string representation of a uuid, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
commit:5101687
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:     {
0:         return this == otherType || otherType == TimeUUIDType.instance;
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:2621707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 return ByteBuffer.wrap(UUIDGen.decompose(UUID.fromString(source)));
0:         throw new MarshalException(String.format("unable to coerce '%s' to version 1 UUID", source));
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang3.time.DateUtils;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcUUID.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.UUIDTerm;
0: import static org.apache.cassandra.cql.term.DateTerm.iso8601Patterns;
1: 
/////////////////////////////////////////////////////////////////////////
0:         return UUIDTerm.instance.compose(bytes);
0:         return UUIDTerm.instance.toString(uuid);
/////////////////////////////////////////////////////////////////////////
0:         try
0:             return UUIDTerm.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.term.MarshalException e)
0:             throw new MarshalException(e.getMessage());
/////////////////////////////////////////////////////////////////////////
0:                 long timestamp = DateUtils.parseDate(source, iso8601Patterns).getTime();
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
1: public class UUIDType extends AbstractType<UUID>
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcUUID;
0: import static org.apache.cassandra.cql.jdbc.JdbcDate.iso8601Patterns;
/////////////////////////////////////////////////////////////////////////
0:         return JdbcUUID.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:             return JdbcUUID.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:70c0ed8
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: public class UUIDType extends AbstractUUIDType
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(UUID value)
1:     {
0:         return ByteBuffer.wrap(UUIDGen.decompose(value));
1:     }
1: 
commit:de2ae8f
/////////////////////////////////////////////////////////////////////////
0: import java.text.ParseException;
0: import org.apache.commons.lang.time.DateUtils;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
/////////////////////////////////////////////////////////////////////////
0:         // Return an empty ByteBuffer for an empty string.
0:         if (source.isEmpty())
0:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
0:         ByteBuffer idBytes = null;
1: 
0:         // ffffffff-ffff-ffff-ffff-ffffffffff
0:         if (TimeUUIDType.regexPattern.matcher(source).matches())
1:         {
0:             UUID uuid;
0:             try
1:             {
0:                 uuid = UUID.fromString(source);
0:                 idBytes = ByteBuffer.wrap(UUIDGen.decompose(uuid));
1:             }
0:             catch (IllegalArgumentException e)
1:             {
0:                 throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
1:             }
1:         }
0:         else if (source.toLowerCase().equals("now"))
1:         {
0:             idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress())));
1:         }
0:         // Milliseconds since epoch?
0:         else if (source.matches("^\\d+$"))
1:         {
0:             try
1:             {
0:                 idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(Long.parseLong(source)));
1:             }
0:             catch (NumberFormatException e)
1:             {
0:                 throw new MarshalException(String.format("unable to make version 1 UUID from '%s'", source), e);
1:             }
1:         }
0:         // Last chance, attempt to parse as date-time string
0:         else
1:         {
0:             try
1:             {
0:                 long timestamp = DateUtils.parseDate(source, TimeUUIDType.iso8601Patterns).getTime();
0:                 idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timestamp));
1:             }
0:             catch (ParseException e1)
1:             {
0:                 throw new MarshalException(String.format("unable to coerce '%s' to version 1 UUID", source), e1);
1:             }
1:         }
1: 
0:         return idBytes;
commit:32f85c5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
1: 
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
1: 
1: /**
1:  * Compares UUIDs using the following criteria:<br>
1:  * - if count of supplied bytes is less than 16, compare counts<br>
1:  * - compare UUID version fields<br>
1:  * - nil UUID is always lesser<br>
1:  * - compare timestamps if both are time-based<br>
1:  * - compare lexically, unsigned msb-to-lsb comparison<br>
0:  * 
0:  * @author edanuff
1:  * @see "com.fasterxml.uuid.UUIDComparator"
0:  * 
1:  */
0: public class UUIDType extends AbstractType<UUID>
0: {
1:     public static final UUIDType instance = new UUIDType();
1: 
1:     UUIDType()
0:     {
0:     }
1: 
0:     public int compare(ByteBuffer b1, ByteBuffer b2)
0:     {
1: 
1:         // Compare for length
1: 
0:         if ((b1 == null) || (b1.remaining() < 16))
0:         {
0:             return ((b2 == null) || (b2.remaining() < 16)) ? 0 : -1;
0:         }
0:         if ((b2 == null) || (b2.remaining() < 16))
0:         {
0:             return 1;
0:         }
1: 
0:         int s1 = b1.arrayOffset() + b1.position();
0:         byte[] o1 = b1.array();
1: 
0:         int s2 = b2.arrayOffset() + b2.position();
0:         byte[] o2 = b2.array();
1: 
0:         if (o1.length == s1)
0:         {
0:             return o2.length == s2 ? 0 : -1;
0:         }
0:         if (o2.length == s2)
0:         {
0:             return 1;
0:         }
1: 
1:         // Compare versions
1: 
0:         int v1 = (o1[s1 + 6] >> 4) & 0x0f;
0:         int v2 = (o2[s2 + 6] >> 4) & 0x0f;
1: 
0:         if (v1 != v2)
0:         {
0:             return v1 - v2;
0:         }
1: 
0:         // Compare timestamps for version 1
1: 
0:         if (v1 == 1)
0:         {
0:             // if both time-based, compare as timestamps
0:             int c = compareTimestampBytes(s1, o1, s2, o2);
1:             if (c != 0)
0:             {
1:                 return c;
0:             }
0:         }
1: 
0:         // Compare the two byte arrays starting from the first
0:         // byte in the sequence until an inequality is
0:         // found. This should provide equivalent results
0:         // to the comparison performed by the RFC 4122
0:         // Appendix A - Sample Implementation.
0:         // Note: java.util.UUID.compareTo is not a lexical
0:         // comparison
1: 
0:         for (int i = 0; i < 16; i++)
0:         {
0:             int c = ((o1[s1 + i]) & 0xFF) - ((o2[s2 + i]) & 0xFF);
1:             if (c != 0)
0:             {
1:                 return c;
0:             }
0:         }
1: 
0:         return 0;
0:     }
1: 
0:     private static int compareTimestampBytes(int s1, byte[] o1, int s2,
0:             byte[] o2)
0:     {
0:         int d = (o1[s1 + 6] & 0xF) - (o2[s2 + 6] & 0xF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 7] & 0xFF) - (o2[s2 + 7] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 4] & 0xFF) - (o2[s2 + 4] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 5] & 0xFF) - (o2[s2 + 5] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 0] & 0xFF) - (o2[s2 + 0] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 1] & 0xFF) - (o2[s2 + 1] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         d = (o1[s1 + 2] & 0xFF) - (o2[s2 + 2] & 0xFF);
0:         if (d != 0)
0:         {
0:             return d;
0:         }
0:         return (o1[s1 + 3] & 0xFF) - (o2[s2 + 3] & 0xFF);
0:     }
1: 
0:     public UUID compose(ByteBuffer bytes)
0:     {
1: 
0:         bytes = bytes.slice();
0:         if (bytes.remaining() < 16)
0:             return new UUID(0, 0);
0:         return new UUID(bytes.getLong(), bytes.getLong());
0:     }
1: 
0:     public String toString(UUID uuid)
0:     {
0:         return uuid.toString();
0:     }
1: 
0:     public Class<UUID> getType()
0:     {
0:         return UUID.class;
0:     }
1: 
0:     public void validate(ByteBuffer bytes)
0:     {
0:         if ((bytes.remaining() != 0) && (bytes.remaining() != 16))
0:         {
0:             throw new MarshalException("UUIDs must be exactly 16 bytes");
0:         }
0:     }
1: 
0:     public String getString(ByteBuffer bytes)
0:     {
0:         if (bytes.remaining() == 0)
0:         {
0:             return "";
0:         }
0:         if (bytes.remaining() != 16)
0:         {
0:             throw new MarshalException("UUIDs must be exactly 16 bytes");
0:         }
0:         UUID uuid = compose(bytes);
0:         return uuid.toString();
0:     }
1: 
0:     @Override
0:     public ByteBuffer fromString(String source) throws MarshalException
0:     {
0:         return LexicalUUIDType.instance.fromString(source);
0:     }
0: }
commit:7bd9590
commit:e3aef8e
/////////////////////////////////////////////////////////////////////////
0:             return 1;
commit:e425474
/////////////////////////////////////////////////////////////////////////
0:         // TODO rm hack to support the "i'm going to pretend [] is an index entry if I didn't actually index anything" hack
0:         if (o1.length == 0)
0:         {
0:             return o2.length == 0 ? 0 : -1;
0:         }
0:         if (o2.length == 0)
0:         {
0:             return -1;
0:         }
0: 
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
0: import java.util.UUID;
0: import java.nio.ByteBuffer;
0: 
0: public class UUIDType extends AbstractType
0: {
0:     private UUID getUUID(byte[] bytes)
0:     {
0:         ByteBuffer bb = ByteBuffer.wrap(bytes);
0:         return new UUID(bb.getLong(), bb.getLong());
0:     }
0: 
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         return getUUID(o1).compareTo(getUUID(o2));
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         return getUUID(bytes).toString();
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:             idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress())));
============================================================================