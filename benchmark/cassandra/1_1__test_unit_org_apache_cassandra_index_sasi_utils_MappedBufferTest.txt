1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.*;
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.ArrayList;
1:72790dc: import java.util.List;
1:72790dc: import java.util.concurrent.ThreadLocalRandom;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.LongType;
1:72790dc: import org.apache.cassandra.io.util.ChannelProxy;
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: 
1:72790dc: import org.junit.Assert;
1:72790dc: import org.junit.Test;
1:72790dc: 
1:72790dc: public class MappedBufferTest
1:72790dc: {
1:72790dc:     @Test
1:72790dc:     public void testBasicWriteThenRead() throws Exception
1:72790dc:     {
1:72790dc:         long numLongs = 10000;
1:72790dc:         final MappedBuffer buffer = createTestFile(numLongs);
1:72790dc: 
1:72790dc:         Assert.assertEquals(0, buffer.position());
1:72790dc:         for (long i = 0; i < numLongs; i++)
1:72790dc:         {
1:72790dc:             Assert.assertEquals(i * 8, buffer.position());
1:72790dc:             Assert.assertEquals(i, buffer.getLong());
1:72790dc:         }
1:72790dc: 
1:72790dc:         buffer.position(0);
1:72790dc:         for (long i = 0; i < numLongs; i++)
1:72790dc:         {
1:72790dc:             Assert.assertEquals(i, buffer.getLong(i * 8));
1:72790dc:             Assert.assertEquals(0, buffer.position());
1:72790dc:         }
1:72790dc: 
1:72790dc:         // read all the numbers as shorts (all numbers fit into four bytes)
1:72790dc:         for (long i = 0; i < Math.min(Integer.MAX_VALUE, numLongs); i++)
1:72790dc:             Assert.assertEquals(i, buffer.getInt((i * 8) + 4));
1:72790dc: 
1:72790dc:         // read all the numbers as shorts (all numbers fit into two bytes)
1:72790dc:         for (long i = 0; i < Math.min(Short.MAX_VALUE, numLongs); i++) {
1:72790dc:             Assert.assertEquals(i, buffer.getShort((i * 8) + 6));
1:72790dc:         }
1:72790dc: 
1:72790dc:         // read all the numbers that can be represented as a single byte
1:72790dc:         for (long i = 0; i < 128; i++)
1:72790dc:             Assert.assertEquals(i, buffer.get((i * 8) + 7));
1:72790dc: 
1:72790dc:         buffer.close();
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testDuplicate() throws Exception
1:72790dc:     {
1:72790dc:         long numLongs = 10;
1:72790dc:         final MappedBuffer buffer1 = createTestFile(numLongs);
1:72790dc: 
1:72790dc:         Assert.assertEquals(0, buffer1.getLong());
1:72790dc:         Assert.assertEquals(1, buffer1.getLong());
1:72790dc: 
1:72790dc:         final MappedBuffer buffer2 = buffer1.duplicate();
1:72790dc: 
1:72790dc:         Assert.assertEquals(2, buffer1.getLong());
1:72790dc:         Assert.assertEquals(2, buffer2.getLong());
1:72790dc: 
1:72790dc:         buffer2.position(0);
1:72790dc:         Assert.assertEquals(3, buffer1.getLong());
1:72790dc:         Assert.assertEquals(0, buffer2.getLong());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testLimit() throws Exception
1:72790dc:     {
1:72790dc:         long numLongs =  10;
1:72790dc:         final MappedBuffer buffer1 = createTestFile(numLongs);
1:72790dc: 
1:72790dc:         MappedBuffer buffer2 = buffer1.duplicate().position(16).limit(32);
1:72790dc:         buffer1.position(0).limit(16);
1:72790dc:         List<Long> longs = new ArrayList<>(4);
1:72790dc: 
1:72790dc:         while (buffer1.hasRemaining())
1:72790dc:             longs.add(buffer1.getLong());
1:72790dc: 
1:72790dc:         while (buffer2.hasRemaining())
1:72790dc:             longs.add(buffer2.getLong());
1:72790dc: 
1:72790dc:         Assert.assertArrayEquals(new Long[]{0L, 1L, 2L, 3L}, longs.toArray());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IllegalArgumentException.class)
1:72790dc:     public void testPositionGreaterThanLimit() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.limit(4);
1:72790dc: 
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.position(buffer.limit() + 1);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IllegalArgumentException.class)
1:72790dc:     public void testNegativePosition() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.position(-1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IllegalArgumentException.class)
1:72790dc:     public void testLimitGreaterThanCapacity() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.limit(buffer.capacity() + 1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IllegalArgumentException.class)
1:72790dc:     public void testLimitLessThanPosition() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.position(1);
1:72790dc: 
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.limit(0);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetRelativeUnderflow() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.position(buffer.limit());
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.get();
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc: 
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetAbsoluteGreaterThanCapacity() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.get(buffer.limit());
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetAbsoluteNegativePosition() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.get(-1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetShortRelativeUnderflow() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.position(buffer.capacity() - 1);
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getShort();
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc: 
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetShortAbsoluteGreaterThanCapacity() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         Assert.assertEquals(8, buffer.capacity());
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getShort(buffer.capacity() - 1);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetShortAbsoluteNegativePosition() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.getShort(-1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetIntRelativeUnderflow() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.position(buffer.capacity() - 3);
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getInt();
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetIntAbsoluteGreaterThanCapacity() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         Assert.assertEquals(8, buffer.capacity());
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getInt(buffer.capacity() - 3);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetIntAbsoluteNegativePosition() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.getInt(-1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetLongRelativeUnderflow() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         buffer.position(buffer.capacity() - 7);
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getLong();
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc: 
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetLongAbsoluteGreaterThanCapacity() throws Exception
1:72790dc:     {
1:72790dc:         final MappedBuffer buffer = createTestFile(1);
1:72790dc: 
1:72790dc:         Assert.assertEquals(8, buffer.capacity());
1:72790dc:         try
1:72790dc:         {
1:72790dc:             buffer.getLong(buffer.capacity() - 7);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             buffer.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IndexOutOfBoundsException.class)
1:72790dc:     public void testGetLongAbsoluteNegativePosition() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(1))
1:72790dc:         {
1:72790dc:             buffer.getLong(-1);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testGetPageRegion() throws Exception
1:72790dc:     {
1:72790dc:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:72790dc: 
1:72790dc:         int numLongs = 1000;
1:72790dc:         int byteSize = 8;
1:72790dc:         int capacity = numLongs * byteSize;
1:72790dc:         try (MappedBuffer buffer = createTestFile(numLongs))
1:72790dc:         {
1:72790dc:             for (int i = 0; i < 1000; i++)
1:72790dc:             {
1:72790dc:                 // offset, length are always aligned on sizeof(long)
1:72790dc:                 int offset = random.nextInt(0, 1000 * byteSize - byteSize) & ~(byteSize - 1);
1:72790dc:                 int length = Math.min(capacity, random.nextInt(byteSize, capacity - offset) & ~(byteSize - 1));
1:72790dc: 
1:72790dc:                 ByteBuffer region = buffer.getPageRegion(offset, length);
1:72790dc:                 for (int j = offset; j < (offset + length); j += 8)
1:72790dc:                     Assert.assertEquals(j / 8, region.getLong(j));
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test (expected = IllegalArgumentException.class)
1:72790dc:     public void testMisalignedRegionAccess() throws Exception
1:72790dc:     {
1:72790dc:         try (MappedBuffer buffer = createTestFile(100, 8, 4, 0))
1:72790dc:         {
1:72790dc:             buffer.getPageRegion(13, 27);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSequentialIterationWithPadding() throws Exception
1:72790dc:     {
1:72790dc:         long numValues = 1000;
1:72790dc:         int maxPageBits = 6; // 64 bytes page
1:72790dc:         int[] paddings = new int[] { 0, 3, 5, 7, 9, 11, 13 };
1:72790dc: 
1:72790dc:         // test different page sizes, with different padding and types
1:72790dc:         for (int numPageBits = 3; numPageBits <= maxPageBits; numPageBits++)
1:72790dc:         {
1:72790dc:             for (int typeSize = 2; typeSize <= 8; typeSize *= 2)
1:72790dc:             {
1:72790dc:                 for (int padding : paddings)
1:72790dc:                 {
1:72790dc:                     try (MappedBuffer buffer = createTestFile(numValues, typeSize, numPageBits, padding))
1:72790dc:                     {
1:72790dc:                         long offset = 0;
1:72790dc:                         for (long j = 0; j < numValues; j++)
1:72790dc:                         {
1:72790dc:                             switch (typeSize)
1:72790dc:                             {
1:72790dc:                                 case 2:
1:72790dc:                                     Assert.assertEquals(j, buffer.getShort(offset));
1:72790dc:                                     break;
1:72790dc: 
1:72790dc:                                 case 4:
1:72790dc:                                     Assert.assertEquals(j, buffer.getInt(offset));
1:72790dc:                                     break;
1:72790dc: 
1:72790dc:                                 case 8:
1:72790dc:                                     Assert.assertEquals(j, buffer.getLong(offset));
1:72790dc:                                     break;
1:72790dc: 
1:72790dc:                                 default:
1:72790dc:                                     throw new AssertionError();
1:72790dc:                             }
1:72790dc: 
1:72790dc:                             offset += typeSize + padding;
1:72790dc:                         }
1:72790dc:                     }
1:72790dc:                 }
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSequentialIteration() throws IOException
1:72790dc:     {
1:72790dc:         long numValues = 1000;
1:72790dc:         for (int typeSize = 2; typeSize <= 8; typeSize *= 2)
1:72790dc:         {
1:72790dc:             try (MappedBuffer buffer = createTestFile(numValues, typeSize, 16, 0))
1:72790dc:             {
1:72790dc:                 for (int j = 0; j < numValues; j++)
1:72790dc:                 {
1:72790dc:                     Assert.assertEquals(j * typeSize, buffer.position());
1:72790dc: 
1:72790dc:                     switch (typeSize)
1:72790dc:                     {
1:72790dc:                         case 2:
1:72790dc:                             Assert.assertEquals(j, buffer.getShort());
1:72790dc:                             break;
1:72790dc: 
1:72790dc:                         case 4:
1:72790dc:                             Assert.assertEquals(j, buffer.getInt());
1:72790dc:                             break;
1:72790dc: 
1:72790dc:                         case 8:
1:72790dc:                             Assert.assertEquals(j, buffer.getLong());
1:72790dc:                             break;
1:72790dc: 
1:72790dc:                         default:
1:72790dc:                             throw new AssertionError();
1:72790dc:                     }
1:72790dc:                 }
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testCompareToPage() throws IOException
1:72790dc:     {
1:72790dc:         long numValues = 100;
1:72790dc:         int typeSize = 8;
1:72790dc: 
1:72790dc:         try (MappedBuffer buffer = createTestFile(numValues))
1:72790dc:         {
1:72790dc:             for (long i = 0; i < numValues * typeSize; i += typeSize)
1:72790dc:             {
1:72790dc:                 long value = i / typeSize;
1:72790dc:                 Assert.assertEquals(0, buffer.comparePageTo(i, typeSize, LongType.instance, LongType.instance.decompose(value)));
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testOpenWithoutPageBits() throws IOException
1:72790dc:     {
1:72790dc:         File tmp = File.createTempFile("mapped-buffer", "tmp");
1:72790dc:         tmp.deleteOnExit();
1:72790dc: 
1:72790dc:         RandomAccessFile file = new RandomAccessFile(tmp, "rw");
1:72790dc: 
1:72790dc:         long numValues = 1000;
1:72790dc:         for (long i = 0; i < numValues; i++)
1:72790dc:             file.writeLong(i);
1:72790dc: 
1:72790dc:         file.getFD().sync();
1:72790dc: 
1:72790dc:         try (MappedBuffer buffer = new MappedBuffer(new ChannelProxy(tmp.getAbsolutePath(), file.getChannel())))
1:72790dc:         {
1:72790dc:             Assert.assertEquals(numValues * 8, buffer.limit());
1:72790dc:             Assert.assertEquals(numValues * 8, buffer.capacity());
1:72790dc: 
1:72790dc:             for (long i = 0; i < numValues; i++)
1:72790dc:             {
1:72790dc:                 Assert.assertEquals(i * 8, buffer.position());
1:72790dc:                 Assert.assertEquals(i, buffer.getLong());
1:72790dc:             }
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             FileUtils.closeQuietly(file);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test(expected = IllegalArgumentException.class)
1:72790dc:     public void testIncorrectPageSize() throws Exception
1:72790dc:     {
1:72790dc:         new MappedBuffer(null, 33);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private MappedBuffer createTestFile(long numCount) throws IOException
1:72790dc:     {
1:72790dc:         return createTestFile(numCount, 8, 16, 0);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private MappedBuffer createTestFile(long numCount, int typeSize, int numPageBits, int padding) throws IOException
1:72790dc:     {
1:72790dc:         final File testFile = File.createTempFile("mapped-buffer-test", "db");
1:72790dc:         testFile.deleteOnExit();
1:72790dc: 
1:72790dc:         RandomAccessFile file = new RandomAccessFile(testFile, "rw");
1:72790dc: 
1:72790dc:         for (long i = 0; i < numCount; i++)
1:72790dc:         {
1:72790dc: 
1:72790dc:             switch (typeSize)
1:72790dc:             {
1:72790dc:                 case 1:
1:72790dc:                     file.write((byte) i);
1:72790dc:                     break;
1:72790dc: 
1:72790dc:                 case 2:
1:72790dc:                     file.writeShort((short) i);
1:72790dc:                     break;
1:72790dc: 
1:72790dc:                 case 4:
1:72790dc:                     file.writeInt((int) i);
1:72790dc:                     break;
1:72790dc: 
1:72790dc:                 case 8:
1:72790dc:                     // bunch of longs
1:72790dc:                     file.writeLong(i);
1:72790dc:                     break;
1:72790dc: 
1:72790dc:                 default:
1:72790dc:                     throw new IllegalArgumentException("unknown byte size: " + typeSize);
1:72790dc:             }
1:72790dc: 
1:72790dc:             for (int j = 0; j < padding; j++)
1:72790dc:                 file.write(0);
1:72790dc:         }
1:72790dc: 
1:72790dc:         file.getFD().sync();
1:72790dc: 
1:72790dc:         try
1:72790dc:         {
1:72790dc:             return new MappedBuffer(new ChannelProxy(testFile.getAbsolutePath(), file.getChannel()), numPageBits);
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             FileUtils.closeQuietly(file);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.*;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.apache.cassandra.db.marshal.LongType;
1: import org.apache.cassandra.io.util.ChannelProxy;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class MappedBufferTest
1: {
1:     @Test
1:     public void testBasicWriteThenRead() throws Exception
1:     {
1:         long numLongs = 10000;
1:         final MappedBuffer buffer = createTestFile(numLongs);
1: 
1:         Assert.assertEquals(0, buffer.position());
1:         for (long i = 0; i < numLongs; i++)
1:         {
1:             Assert.assertEquals(i * 8, buffer.position());
1:             Assert.assertEquals(i, buffer.getLong());
1:         }
1: 
1:         buffer.position(0);
1:         for (long i = 0; i < numLongs; i++)
1:         {
1:             Assert.assertEquals(i, buffer.getLong(i * 8));
1:             Assert.assertEquals(0, buffer.position());
1:         }
1: 
1:         // read all the numbers as shorts (all numbers fit into four bytes)
1:         for (long i = 0; i < Math.min(Integer.MAX_VALUE, numLongs); i++)
1:             Assert.assertEquals(i, buffer.getInt((i * 8) + 4));
1: 
1:         // read all the numbers as shorts (all numbers fit into two bytes)
1:         for (long i = 0; i < Math.min(Short.MAX_VALUE, numLongs); i++) {
1:             Assert.assertEquals(i, buffer.getShort((i * 8) + 6));
1:         }
1: 
1:         // read all the numbers that can be represented as a single byte
1:         for (long i = 0; i < 128; i++)
1:             Assert.assertEquals(i, buffer.get((i * 8) + 7));
1: 
1:         buffer.close();
1:     }
1: 
1:     @Test
1:     public void testDuplicate() throws Exception
1:     {
1:         long numLongs = 10;
1:         final MappedBuffer buffer1 = createTestFile(numLongs);
1: 
1:         Assert.assertEquals(0, buffer1.getLong());
1:         Assert.assertEquals(1, buffer1.getLong());
1: 
1:         final MappedBuffer buffer2 = buffer1.duplicate();
1: 
1:         Assert.assertEquals(2, buffer1.getLong());
1:         Assert.assertEquals(2, buffer2.getLong());
1: 
1:         buffer2.position(0);
1:         Assert.assertEquals(3, buffer1.getLong());
1:         Assert.assertEquals(0, buffer2.getLong());
1:     }
1: 
1:     @Test
1:     public void testLimit() throws Exception
1:     {
1:         long numLongs =  10;
1:         final MappedBuffer buffer1 = createTestFile(numLongs);
1: 
1:         MappedBuffer buffer2 = buffer1.duplicate().position(16).limit(32);
1:         buffer1.position(0).limit(16);
1:         List<Long> longs = new ArrayList<>(4);
1: 
1:         while (buffer1.hasRemaining())
1:             longs.add(buffer1.getLong());
1: 
1:         while (buffer2.hasRemaining())
1:             longs.add(buffer2.getLong());
1: 
1:         Assert.assertArrayEquals(new Long[]{0L, 1L, 2L, 3L}, longs.toArray());
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testPositionGreaterThanLimit() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.limit(4);
1: 
1:         try
1:         {
1:             buffer.position(buffer.limit() + 1);
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testNegativePosition() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.position(-1);
1:         }
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testLimitGreaterThanCapacity() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.limit(buffer.capacity() + 1);
1:         }
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testLimitLessThanPosition() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.position(1);
1: 
1:         try
1:         {
1:             buffer.limit(0);
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetRelativeUnderflow() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.position(buffer.limit());
1:         try
1:         {
1:             buffer.get();
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1: 
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetAbsoluteGreaterThanCapacity() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.get(buffer.limit());
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetAbsoluteNegativePosition() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.get(-1);
1:         }
1:     }
1: 
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetShortRelativeUnderflow() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.position(buffer.capacity() - 1);
1:         try
1:         {
1:             buffer.getShort();
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1: 
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetShortAbsoluteGreaterThanCapacity() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         Assert.assertEquals(8, buffer.capacity());
1:         try
1:         {
1:             buffer.getShort(buffer.capacity() - 1);
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetShortAbsoluteNegativePosition() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.getShort(-1);
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetIntRelativeUnderflow() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.position(buffer.capacity() - 3);
1:         try
1:         {
1:             buffer.getInt();
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetIntAbsoluteGreaterThanCapacity() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         Assert.assertEquals(8, buffer.capacity());
1:         try
1:         {
1:             buffer.getInt(buffer.capacity() - 3);
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetIntAbsoluteNegativePosition() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.getInt(-1);
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetLongRelativeUnderflow() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         buffer.position(buffer.capacity() - 7);
1:         try
1:         {
1:             buffer.getLong();
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1: 
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetLongAbsoluteGreaterThanCapacity() throws Exception
1:     {
1:         final MappedBuffer buffer = createTestFile(1);
1: 
1:         Assert.assertEquals(8, buffer.capacity());
1:         try
1:         {
1:             buffer.getLong(buffer.capacity() - 7);
1:         }
1:         finally
1:         {
1:             buffer.close();
1:         }
1:     }
1: 
1:     @Test(expected = IndexOutOfBoundsException.class)
1:     public void testGetLongAbsoluteNegativePosition() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(1))
1:         {
1:             buffer.getLong(-1);
1:         }
1:     }
1: 
1:     @Test
1:     public void testGetPageRegion() throws Exception
1:     {
1:         ThreadLocalRandom random = ThreadLocalRandom.current();
1: 
1:         int numLongs = 1000;
1:         int byteSize = 8;
1:         int capacity = numLongs * byteSize;
1:         try (MappedBuffer buffer = createTestFile(numLongs))
1:         {
1:             for (int i = 0; i < 1000; i++)
1:             {
1:                 // offset, length are always aligned on sizeof(long)
1:                 int offset = random.nextInt(0, 1000 * byteSize - byteSize) & ~(byteSize - 1);
1:                 int length = Math.min(capacity, random.nextInt(byteSize, capacity - offset) & ~(byteSize - 1));
1: 
1:                 ByteBuffer region = buffer.getPageRegion(offset, length);
1:                 for (int j = offset; j < (offset + length); j += 8)
1:                     Assert.assertEquals(j / 8, region.getLong(j));
1:             }
1:         }
1:     }
1: 
1:     @Test (expected = IllegalArgumentException.class)
1:     public void testMisalignedRegionAccess() throws Exception
1:     {
1:         try (MappedBuffer buffer = createTestFile(100, 8, 4, 0))
1:         {
1:             buffer.getPageRegion(13, 27);
1:         }
1:     }
1: 
1:     @Test
1:     public void testSequentialIterationWithPadding() throws Exception
1:     {
1:         long numValues = 1000;
1:         int maxPageBits = 6; // 64 bytes page
1:         int[] paddings = new int[] { 0, 3, 5, 7, 9, 11, 13 };
1: 
1:         // test different page sizes, with different padding and types
1:         for (int numPageBits = 3; numPageBits <= maxPageBits; numPageBits++)
1:         {
1:             for (int typeSize = 2; typeSize <= 8; typeSize *= 2)
1:             {
1:                 for (int padding : paddings)
1:                 {
1:                     try (MappedBuffer buffer = createTestFile(numValues, typeSize, numPageBits, padding))
1:                     {
1:                         long offset = 0;
1:                         for (long j = 0; j < numValues; j++)
1:                         {
1:                             switch (typeSize)
1:                             {
1:                                 case 2:
1:                                     Assert.assertEquals(j, buffer.getShort(offset));
1:                                     break;
1: 
1:                                 case 4:
1:                                     Assert.assertEquals(j, buffer.getInt(offset));
1:                                     break;
1: 
1:                                 case 8:
1:                                     Assert.assertEquals(j, buffer.getLong(offset));
1:                                     break;
1: 
1:                                 default:
1:                                     throw new AssertionError();
1:                             }
1: 
1:                             offset += typeSize + padding;
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testSequentialIteration() throws IOException
1:     {
1:         long numValues = 1000;
1:         for (int typeSize = 2; typeSize <= 8; typeSize *= 2)
1:         {
1:             try (MappedBuffer buffer = createTestFile(numValues, typeSize, 16, 0))
1:             {
1:                 for (int j = 0; j < numValues; j++)
1:                 {
1:                     Assert.assertEquals(j * typeSize, buffer.position());
1: 
1:                     switch (typeSize)
1:                     {
1:                         case 2:
1:                             Assert.assertEquals(j, buffer.getShort());
1:                             break;
1: 
1:                         case 4:
1:                             Assert.assertEquals(j, buffer.getInt());
1:                             break;
1: 
1:                         case 8:
1:                             Assert.assertEquals(j, buffer.getLong());
1:                             break;
1: 
1:                         default:
1:                             throw new AssertionError();
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testCompareToPage() throws IOException
1:     {
1:         long numValues = 100;
1:         int typeSize = 8;
1: 
1:         try (MappedBuffer buffer = createTestFile(numValues))
1:         {
1:             for (long i = 0; i < numValues * typeSize; i += typeSize)
1:             {
1:                 long value = i / typeSize;
1:                 Assert.assertEquals(0, buffer.comparePageTo(i, typeSize, LongType.instance, LongType.instance.decompose(value)));
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testOpenWithoutPageBits() throws IOException
1:     {
1:         File tmp = File.createTempFile("mapped-buffer", "tmp");
1:         tmp.deleteOnExit();
1: 
1:         RandomAccessFile file = new RandomAccessFile(tmp, "rw");
1: 
1:         long numValues = 1000;
1:         for (long i = 0; i < numValues; i++)
1:             file.writeLong(i);
1: 
1:         file.getFD().sync();
1: 
1:         try (MappedBuffer buffer = new MappedBuffer(new ChannelProxy(tmp.getAbsolutePath(), file.getChannel())))
1:         {
1:             Assert.assertEquals(numValues * 8, buffer.limit());
1:             Assert.assertEquals(numValues * 8, buffer.capacity());
1: 
1:             for (long i = 0; i < numValues; i++)
1:             {
1:                 Assert.assertEquals(i * 8, buffer.position());
1:                 Assert.assertEquals(i, buffer.getLong());
1:             }
1:         }
1:         finally
1:         {
1:             FileUtils.closeQuietly(file);
1:         }
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testIncorrectPageSize() throws Exception
1:     {
1:         new MappedBuffer(null, 33);
1:     }
1: 
1:     private MappedBuffer createTestFile(long numCount) throws IOException
1:     {
1:         return createTestFile(numCount, 8, 16, 0);
1:     }
1: 
1:     private MappedBuffer createTestFile(long numCount, int typeSize, int numPageBits, int padding) throws IOException
1:     {
1:         final File testFile = File.createTempFile("mapped-buffer-test", "db");
1:         testFile.deleteOnExit();
1: 
1:         RandomAccessFile file = new RandomAccessFile(testFile, "rw");
1: 
1:         for (long i = 0; i < numCount; i++)
1:         {
1: 
1:             switch (typeSize)
1:             {
1:                 case 1:
1:                     file.write((byte) i);
1:                     break;
1: 
1:                 case 2:
1:                     file.writeShort((short) i);
1:                     break;
1: 
1:                 case 4:
1:                     file.writeInt((int) i);
1:                     break;
1: 
1:                 case 8:
1:                     // bunch of longs
1:                     file.writeLong(i);
1:                     break;
1: 
1:                 default:
1:                     throw new IllegalArgumentException("unknown byte size: " + typeSize);
1:             }
1: 
1:             for (int j = 0; j < padding; j++)
1:                 file.write(0);
1:         }
1: 
1:         file.getFD().sync();
1: 
1:         try
1:         {
1:             return new MappedBuffer(new ChannelProxy(testFile.getAbsolutePath(), file.getChannel()), numPageBits);
1:         }
1:         finally
1:         {
1:             FileUtils.closeQuietly(file);
1:         }
1:     }
1: 
1: }
============================================================================