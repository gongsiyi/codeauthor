1:2e1e98a: /**
1:2e1e98a:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1e98a:  * or more contributor license agreements.  See the NOTICE file
1:2e1e98a:  * distributed with this work for additional information
1:2e1e98a:  * regarding copyright ownership.  The ASF licenses this file
1:2e1e98a:  * to you under the Apache License, Version 2.0 (the
1:2e1e98a:  * "License"); you may not use this file except in compliance
1:2e1e98a:  * with the License.  You may obtain a copy of the License at
1:2e1e98a:  *
1:2e1e98a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1e98a:  *
1:2e1e98a:  * Unless required by applicable law or agreed to in writing, software
1:2e1e98a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1e98a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1e98a:  * See the License for the specific language governing permissions and
1:2e1e98a:  * limitations under the License.
1:2e1e98a:  */
1:2e1e98a: package org.apache.cassandra.stress.settings;
2:2e1e98a: 
1:2e1e98a: import java.io.Serializable;
1:2e1e98a: import java.util.*;
1:2e1e98a: 
1:2e1e98a: import org.apache.commons.cli.*;
1:2e1e98a: import org.apache.commons.cli.Option;
1:2e1e98a: 
1:2e1e98a: public class Legacy implements Serializable
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     // command line options
1:2e1e98a:     public static final Options availableOptions = new Options();
1:2e1e98a: 
1:2e1e98a:     private static final String SSL_TRUSTSTORE = "truststore";
1:2e1e98a:     private static final String SSL_TRUSTSTORE_PW = "truststore-password";
1:2e1e98a:     private static final String SSL_PROTOCOL = "ssl-protocol";
1:2e1e98a:     private static final String SSL_ALGORITHM = "ssl-alg";
1:2e1e98a:     private static final String SSL_STORE_TYPE = "store-type";
1:2e1e98a:     private static final String SSL_CIPHER_SUITES = "ssl-ciphers";
1:2e1e98a: 
1:2e1e98a:     static
1:2e1e98a:     {
1:2e1e98a:         availableOptions.addOption("h",  "help",                 false,  "Show this help message and exit");
1:2e1e98a:         availableOptions.addOption("n",  "num-keys",             true,   "Number of keys, default:1000000");
1:2e1e98a:         availableOptions.addOption("F",  "num-different-keys",   true,   "Number of different keys (if < NUM-KEYS, the same key will re-used multiple times), default:NUM-KEYS");
1:2e1e98a:         availableOptions.addOption("t",  "threadCount",              true,   "Number of threadCount to use, default:50");
1:2e1e98a:         availableOptions.addOption("c",  "columns",              true,   "Number of columns per key, default:5");
1:2e1e98a:         availableOptions.addOption("S",  "column-size",          true,   "Size of column values in bytes, default:34");
1:2e1e98a:         availableOptions.addOption("C",  "unique columns",       true,   "Max number of unique columns per key, default:50");
1:2e1e98a:         availableOptions.addOption("RC", "unique rows",          true,   "Max number of unique rows, default:50");
1:2e1e98a:         availableOptions.addOption("d",  "nodes",                true,   "Host nodes (comma separated), default:locahost");
1:2e1e98a:         availableOptions.addOption("D",  "nodesfile",            true,   "File containing host nodes (one per line)");
1:2e1e98a:         availableOptions.addOption("s",  "stdev",                true,   "Standard Deviation for gaussian read key generation, default:0.1");
1:2e1e98a:         availableOptions.addOption("r",  "random",               false,  "Use random key generator for read key generation (STDEV will have no effect), default:false");
1:2e1e98a:         availableOptions.addOption("f",  "file",                 true,   "Write output to given file");
1:2e1e98a:         availableOptions.addOption("p",  "port",                 true,   "Thrift port, default:9160");
1:2e1e98a:         availableOptions.addOption("o",  "operation",            true,   "Operation to perform (WRITE, READ, READWRITE, RANGE_SLICE, INDEXED_RANGE_SLICE, MULTI_GET, COUNTERWRITE, COUNTER_GET), default:WRITE");
1:2e1e98a:         availableOptions.addOption("u",  "supercolumns",         true,   "Number of super columns per key, default:1");
1:2e1e98a:         availableOptions.addOption("y",  "family-type",          true,   "Column Family Type (Super, Standard), default:Standard");
1:2e1e98a:         availableOptions.addOption("K",  "keep-trying",          true,   "Retry on-going operation N times (in case of failure). positive integer, default:10");
1:2e1e98a:         availableOptions.addOption("k",  "keep-going",           false,  "Ignore errors inserting or reading (when set, --keep-trying has no effect), default:false");
1:2e1e98a:         availableOptions.addOption("i",  "progress-interval",    true,   "Progress Report Interval (seconds), default:10");
1:2e1e98a:         availableOptions.addOption("g",  "keys-per-call",        true,   "Number of keys to get_range_slices or multiget per call, default:1000");
1:2e1e98a:         availableOptions.addOption("l",  "replication-factor",   true,   "Replication Factor to use when creating needed column families, default:1");
1:2e1e98a:         availableOptions.addOption("L3", "enable-cql3",          false,  "Perform queries using CQL3 (Cassandra Query Language v 3.0.0)");
1:2e1e98a:         availableOptions.addOption("b",  "enable-native-protocol",  false,  "Use the binary native protocol (only work along with -L3)");
1:2e1e98a:         availableOptions.addOption("P",  "use-prepared-statements", false, "Perform queries using prepared statements (only applicable to CQL).");
1:2e1e98a:         availableOptions.addOption("e",  "consistency-level",    true,   "Consistency Level to use (ONE, QUORUM, LOCAL_QUORUM, EACH_QUORUM, ALL, ANY), default:ONE");
1:2e1e98a:         availableOptions.addOption("x",  "create-index",         true,   "Type of index to create on needed column families (KEYS)");
1:2e1e98a:         availableOptions.addOption("R",  "replication-strategy", true,   "Replication strategy to use (only on insert if keyspace does not exist), default:org.apache.cassandra.locator.SimpleStrategy");
1:2e1e98a:         availableOptions.addOption("O",  "strategy-properties",  true,   "Replication strategy properties in the following format <dc_name>:<num>,<dc_name>:<num>,...");
1:2e1e98a:         availableOptions.addOption("V",  "average-size-values",  false,  "Generate column values of average rather than specific size");
1:2e1e98a:         availableOptions.addOption("T",  "send-to",              true,   "Send this as a request to the stress daemon at specified address.");
1:2e1e98a:         availableOptions.addOption("I",  "compression",          true,   "Specify the compression to use for sstable, default:no compression");
1:2e1e98a:         availableOptions.addOption("Q",  "query-names",          true,   "Comma-separated list of column names to retrieve from each row.");
1:2e1e98a:         availableOptions.addOption("Z",  "compaction-strategy",  true,   "CompactionStrategy to use.");
1:2e1e98a:         availableOptions.addOption("U",  "comparator",           true,   "Column Comparator to use. Currently supported types are: TimeUUIDType, AsciiType, UTF8Type.");
1:2e1e98a:         availableOptions.addOption("tf", "transport-factory",    true,   "Fully-qualified TTransportFactory class name for creating a connection. Note: For Thrift over SSL, use org.apache.cassandra.stress.SSLTransportFactory.");
1:2e1e98a:         availableOptions.addOption("ns", "no-statistics",        false,  "Turn off the aggegate statistics that is normally output after completion.");
1:2e1e98a:         availableOptions.addOption("ts", SSL_TRUSTSTORE,         true, "SSL: full path to truststore");
1:2e1e98a:         availableOptions.addOption("tspw", SSL_TRUSTSTORE_PW,    true, "SSL: full path to truststore");
1:2e1e98a:         availableOptions.addOption("prtcl", SSL_PROTOCOL,        true, "SSL: connections protocol to use (default: TLS)");
1:2e1e98a:         availableOptions.addOption("alg", SSL_ALGORITHM,         true, "SSL: algorithm (default: SunX509)");
1:2e1e98a:         availableOptions.addOption("st", SSL_STORE_TYPE,         true, "SSL: type of store");
1:2e1e98a:         availableOptions.addOption("ciphers", SSL_CIPHER_SUITES, true, "SSL: comma-separated list of encryption suites to use");
1:2e1e98a:         availableOptions.addOption("th",  "throttle",            true,   "Throttle the total number of operations per second to a maximum amount.");
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static StressSettings build(String[] arguments)
1:2e1e98a:     {
1:2e1e98a:         CommandLineParser parser = new PosixParser();
1:2e1e98a: 
1:2e1e98a:         final Converter r = new Converter();
1:2e1e98a:         try
1:2e1e98a:         {
1:2e1e98a:             CommandLine cmd = parser.parse(availableOptions, arguments);
1:2e1e98a: 
1:2e1e98a:             if (cmd.getArgs().length > 0)
1:2e1e98a:             {
1:2e1e98a:                 System.err.println("Application does not allow arbitrary arguments: " + Arrays.asList(cmd.getArgList()));
1:2e1e98a:                 System.exit(1);
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("h"))
1:2e1e98a:                 printHelpMessage();
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("C"))
1:2e1e98a:                 System.out.println("Ignoring deprecated option -C");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("o"))
1:2e1e98a:                 r.setCommand(cmd.getOptionValue("o").toLowerCase());
1:2e1e98a:             else
1:2e1e98a:                 r.setCommand("insert");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("K"))
1:2e1e98a:                 r.add("command", "tries=" + cmd.getOptionValue("K"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("k"))
1:2e1e98a:             {
1:2e1e98a:                 if (!cmd.hasOption("K"))
1:2e1e98a:                     r.add("command", "retry=1");
1:2e1e98a:                 r.add("command", "ignore_errors");
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("g"))
1:2e1e98a:                 r.add("command", "at-once=" + cmd.getOptionValue("g"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("e"))
1:2e1e98a:                 r.add("command", "cl=" + cmd.getOptionValue("e"));
1:2e1e98a: 
1:2e1e98a:             String numKeys;
1:2e1e98a:             if (cmd.hasOption("n"))
1:2e1e98a:                 numKeys = cmd.getOptionValue("n");
1:2e1e98a:             else
1:2e1e98a:                 numKeys = "1000000";
1:2e1e98a:             r.add("command", "n=" + numKeys);
1:2e1e98a: 
1:2e1e98a:             String uniqueKeys;
1:2e1e98a:             if (cmd.hasOption("F"))
1:2e1e98a:                 uniqueKeys = cmd.getOptionValue("F");
1:2e1e98a:             else
1:2e1e98a:                 uniqueKeys = numKeys;
1:2e1e98a: 
1:2e1e98a:             if (r.opts.containsKey("write") || r.opts.containsKey("counterwrite"))
1:2e1e98a:             {
1:2e1e98a:                 if (!uniqueKeys.equals(numKeys))
1:2e1e98a:                     r.add("-key", "populate=1.." + uniqueKeys);
1:2e1e98a:             }
1:2e1e98a:             else if (cmd.hasOption("r"))
1:2e1e98a:             {
1:2e1e98a:                 r.add("-key", "dist=uniform(1.." + uniqueKeys + ")");
1:2e1e98a:             }
1:2e1e98a:             else
1:2e1e98a:             {
1:2e1e98a:                 if (!cmd.hasOption("s"))
1:2e1e98a:                     r.add("-key", "dist=gauss(1.." + uniqueKeys + ",5)");
1:2e1e98a:                 else
1:2e1e98a:                     r.add("-key", String.format("dist=gauss(1..%s,%.2f)", uniqueKeys,
1:2e1e98a:                             0.5 / Float.parseFloat(cmd.getOptionValue("s"))));
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:             String colCount;
1:2e1e98a:             if (cmd.hasOption("c"))
1:2e1e98a:                 colCount = cmd.getOptionValue("c");
1:2e1e98a:             else
1:2e1e98a:                 colCount = "5";
1:2e1e98a: 
1:2e1e98a:             String colSize;
1:2e1e98a:             if (cmd.hasOption("S"))
1:2e1e98a:                 colSize = cmd.getOptionValue("S");
1:2e1e98a:             else
1:2e1e98a:                 colSize = "34";
1:2e1e98a: 
1:2e1e98a:             r.add("-col", "n=fixed(" + colCount + ")");
1:2e1e98a:             if (cmd.hasOption("V"))
1:2e1e98a:             {
1:2e1e98a:                 r.add("-col", "size=uniform(1.." + Integer.parseInt(colSize) * 2 + ")");
1:2e1e98a:                 r.add("-col", "data=rand()");
1:2e1e98a:             }
1:2e1e98a:             else
1:2e1e98a:             {
1:2e1e98a:                 r.add("-col", "size=fixed(" + colSize + ")");
1:2e1e98a:                 r.add("-col", "data=repeat(1)");
1:2e1e98a:             }
1:2e1e98a:             if (cmd.hasOption("Q"))
1:2e1e98a:                 r.add("-col", "names=" + cmd.getOptionValue("Q"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("U"))
1:2e1e98a:                 r.add("-col", "comparator=" + cmd.getOptionValue("U"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("y") && cmd.getOptionValue("y").equals("Super"))
1:2e1e98a:                 r.add("-col", "super=" + (cmd.hasOption("u") ? cmd.getOptionValue("u") : "1"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("t"))
1:2e1e98a:                 r.add("-rate", "threads=" + cmd.getOptionValue("t"));
1:2e1e98a:             else
1:2e1e98a:                 r.add("-rate", "threads=50");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("th"))
1:2e1e98a:                 r.add("-rate", "limit=" + cmd.getOptionValue("th") + "/s");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("f"))
1:2e1e98a:                 r.add("-log", "file=" + cmd.getOptionValue("f"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("p"))
1:2e1e98a:                 r.add("-port", cmd.getOptionValue("p"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("i"))
1:2e1e98a:                 r.add("-log", "interval=" + cmd.getOptionValue("i"));
1:2e1e98a:             else
1:2e1e98a:                 r.add("-log", "interval=10");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("x"))
1:2e1e98a:                 r.add("-schema", "index=" + cmd.getOptionValue("x"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("R") || cmd.hasOption("l") || cmd.hasOption("O"))
1:2e1e98a:             {
1:2e1e98a:                 StringBuilder rep = new StringBuilder();
1:2e1e98a:                 if (cmd.hasOption("R"))
1:43f19eb:                     rep.append("strategy=").append(cmd.getOptionValue("R"));
1:2e1e98a:                 if (cmd.hasOption("l"))
1:2e1e98a:                 {
1:2e1e98a:                     if (rep.length() > 0)
1:2e1e98a:                         rep.append(",");
1:43f19eb:                     rep.append("factor=").append(cmd.getOptionValue("l"));
1:2e1e98a:                 }
1:2e1e98a:                 if (cmd.hasOption("O"))
1:2e1e98a:                 {
1:2e1e98a:                     if (rep.length() > 0)
1:2e1e98a:                         rep.append(",");
1:2e1e98a:                     rep.append(cmd.getOptionValue("O").replace(':','='));
1:2e1e98a:                 }
1:2e1e98a:                 r.add("-schema", "replication(" + rep + ")");
1:2e1e98a:             }
1:2e1e98a: 
1:2621707:             if (cmd.hasOption("L3"))
1:2e1e98a:                 r.add("-mode", (cmd.hasOption("P") ? "prepared" : "") + (cmd.hasOption("b") ? "native" : "") +  "cql3");
1:2e1e98a:             else
1:2e1e98a:                 r.add("-mode", "thrift");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("I"))
1:2e1e98a:                 r.add("-schema", "compression=" + cmd.getOptionValue("I"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("d"))
1:2e1e98a:                 r.add("-node", cmd.getOptionValue("d"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("D"))
1:2e1e98a:                 r.add("-node", "file=" + cmd.getOptionValue("D"));
1:2e1e98a: 
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("send-to"))
1:2e1e98a:                 r.add("-send-to", cmd.getOptionValue("send-to"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("Z"))
1:2e1e98a:                 r.add("-schema", "compaction=" + cmd.getOptionValue("Z"));
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("ns"))
1:2e1e98a:                 r.add("-log", "no-summary");
1:2e1e98a: 
1:2e1e98a:             if (cmd.hasOption("tf"))
1:2e1e98a:                 r.add("-transport", "factory=" + cmd.getOptionValue("tf"));
1:2e1e98a: 
1:016a2b0:             if(cmd.hasOption(SSL_TRUSTSTORE))
1:016a2b0:                 r.add("-transport", "truststore=" + cmd.getOptionValue(SSL_TRUSTSTORE));
1:016a2b0: 
1:016a2b0:             if(cmd.hasOption(SSL_TRUSTSTORE_PW))
1:016a2b0:                 r.add("-transport", "truststore-password=" + cmd.getOptionValue(SSL_TRUSTSTORE_PW));
1:016a2b0: 
1:016a2b0:             if(cmd.hasOption(SSL_PROTOCOL))
1:016a2b0:                 r.add("-transport", "ssl-protocol=" + cmd.getOptionValue(SSL_PROTOCOL));
1:016a2b0: 
1:016a2b0:             if(cmd.hasOption(SSL_ALGORITHM))
1:016a2b0:                 r.add("-transport", "ssl-alg=" +  cmd.getOptionValue(SSL_ALGORITHM));
1:016a2b0: 
1:016a2b0:             if(cmd.hasOption(SSL_STORE_TYPE))
1:016a2b0:                 r.add("-transport", "store-type=" +  cmd.getOptionValue(SSL_STORE_TYPE));
1:016a2b0: 
1:016a2b0:             if(cmd.hasOption(SSL_CIPHER_SUITES))
1:016a2b0:                 r.add("-transport", "ssl-ciphers=" +  cmd.getOptionValue(SSL_CIPHER_SUITES));
1:2e1e98a: 
1:2e1e98a:         }
1:2e1e98a:         catch (ParseException e)
1:2e1e98a:         {
1:2e1e98a:             printHelpMessage();
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:         r.printNewCommand();
1:2e1e98a:         return r.get();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private static final class Converter
1:2e1e98a:     {
1:2e1e98a:         private Map<String, List<String>> opts = new LinkedHashMap<>();
1:2e1e98a:         List<String> command;
1:2e1e98a:         public void add(String option, String suboption)
1:2e1e98a:         {
1:2e1e98a:             if (option.equals("command"))
1:2e1e98a:             {
1:2e1e98a:                 command.add(suboption);
1:2e1e98a:                 return;
1:2e1e98a:             }
1:2e1e98a:             List<String> params = opts.get(option);
1:2e1e98a:             if (params == null)
1:2e1e98a:                 opts.put(option, params = new ArrayList());
1:2e1e98a:             params.add(suboption);
1:2e1e98a:         }
1:2e1e98a:         StressSettings get(){
1:2e1e98a:             Map<String, String[]> clArgs = new HashMap<>();
1:2e1e98a:             for (Map.Entry<String, List<String>> e : opts.entrySet())
1:2e1e98a:                 clArgs .put(e.getKey(), e.getValue().toArray(new String[0]));
1:2e1e98a:             return StressSettings.get(clArgs);
1:2e1e98a:         }
1:2e1e98a:         void setCommand(String command)
1:2e1e98a:         {
1:2e1e98a:             command = Command.get(command).toString().toLowerCase();
1:2e1e98a:             opts.put(command, this.command = new ArrayList<>());
1:2e1e98a:         }
1:2e1e98a:         void printNewCommand()
1:2e1e98a:         {
1:2e1e98a:             StringBuilder sb = new StringBuilder("stress");
1:2e1e98a:             for (Map.Entry<String, List<String>> e : opts.entrySet())
1:2e1e98a:             {
1:2e1e98a:                 sb.append(" ");
1:2e1e98a:                 sb.append(e.getKey());
1:2e1e98a:                 for (String opt : e.getValue())
1:2e1e98a:                 {
1:2e1e98a:                     sb.append(" ");
1:2e1e98a:                     sb.append(opt);
1:2e1e98a:                 }
1:2e1e98a:             }
1:2e1e98a:             System.out.println("Running in legacy support mode. Translating command to: ");
1:2e1e98a:             System.out.println(sb.toString());
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelpMessage()
1:2e1e98a:     {
1:2e1e98a:         System.out.println("Usage: ./bin/cassandra-stress legacy [options]\n\nOptions:");
1:2e1e98a:         System.out.println("THIS IS A LEGACY SUPPORT MODE");
1:2e1e98a: 
1:2e1e98a:         for(Object o : availableOptions.getOptions())
1:2e1e98a:         {
1:2e1e98a:             Option option = (Option) o;
1:2e1e98a:             String upperCaseName = option.getLongOpt().toUpperCase();
1:2e1e98a:             System.out.println(String.format("-%s%s, --%s%s%n\t\t%s%n", option.getOpt(), (option.hasArg()) ? " "+upperCaseName : "",
1:2e1e98a:                     option.getLongOpt(), (option.hasArg()) ? "="+upperCaseName : "", option.getDescription()));
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Runnable helpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 printHelpMessage();
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:f20b097
commit:92cb551
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2621707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (cmd.hasOption("L3"))
commit:016a2b0
/////////////////////////////////////////////////////////////////////////
1:             if(cmd.hasOption(SSL_TRUSTSTORE))
1:                 r.add("-transport", "truststore=" + cmd.getOptionValue(SSL_TRUSTSTORE));
1: 
1:             if(cmd.hasOption(SSL_TRUSTSTORE_PW))
1:                 r.add("-transport", "truststore-password=" + cmd.getOptionValue(SSL_TRUSTSTORE_PW));
1: 
1:             if(cmd.hasOption(SSL_PROTOCOL))
1:                 r.add("-transport", "ssl-protocol=" + cmd.getOptionValue(SSL_PROTOCOL));
1: 
1:             if(cmd.hasOption(SSL_ALGORITHM))
1:                 r.add("-transport", "ssl-alg=" +  cmd.getOptionValue(SSL_ALGORITHM));
1: 
1:             if(cmd.hasOption(SSL_STORE_TYPE))
1:                 r.add("-transport", "store-type=" +  cmd.getOptionValue(SSL_STORE_TYPE));
1: 
1:             if(cmd.hasOption(SSL_CIPHER_SUITES))
1:                 r.add("-transport", "ssl-ciphers=" +  cmd.getOptionValue(SSL_CIPHER_SUITES));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:43f19eb
/////////////////////////////////////////////////////////////////////////
1:                     rep.append("strategy=").append(cmd.getOptionValue("R"));
1:                     rep.append("factor=").append(cmd.getOptionValue("l"));
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.Serializable;
1: import java.util.*;
1: 
1: import org.apache.commons.cli.*;
1: import org.apache.commons.cli.Option;
1: 
1: public class Legacy implements Serializable
1: {
1: 
1:     // command line options
1:     public static final Options availableOptions = new Options();
1: 
1:     private static final String SSL_TRUSTSTORE = "truststore";
1:     private static final String SSL_TRUSTSTORE_PW = "truststore-password";
1:     private static final String SSL_PROTOCOL = "ssl-protocol";
1:     private static final String SSL_ALGORITHM = "ssl-alg";
1:     private static final String SSL_STORE_TYPE = "store-type";
1:     private static final String SSL_CIPHER_SUITES = "ssl-ciphers";
1: 
1:     static
1:     {
1:         availableOptions.addOption("h",  "help",                 false,  "Show this help message and exit");
1:         availableOptions.addOption("n",  "num-keys",             true,   "Number of keys, default:1000000");
1:         availableOptions.addOption("F",  "num-different-keys",   true,   "Number of different keys (if < NUM-KEYS, the same key will re-used multiple times), default:NUM-KEYS");
1:         availableOptions.addOption("t",  "threadCount",              true,   "Number of threadCount to use, default:50");
1:         availableOptions.addOption("c",  "columns",              true,   "Number of columns per key, default:5");
1:         availableOptions.addOption("S",  "column-size",          true,   "Size of column values in bytes, default:34");
1:         availableOptions.addOption("C",  "unique columns",       true,   "Max number of unique columns per key, default:50");
1:         availableOptions.addOption("RC", "unique rows",          true,   "Max number of unique rows, default:50");
1:         availableOptions.addOption("d",  "nodes",                true,   "Host nodes (comma separated), default:locahost");
1:         availableOptions.addOption("D",  "nodesfile",            true,   "File containing host nodes (one per line)");
1:         availableOptions.addOption("s",  "stdev",                true,   "Standard Deviation for gaussian read key generation, default:0.1");
1:         availableOptions.addOption("r",  "random",               false,  "Use random key generator for read key generation (STDEV will have no effect), default:false");
1:         availableOptions.addOption("f",  "file",                 true,   "Write output to given file");
1:         availableOptions.addOption("p",  "port",                 true,   "Thrift port, default:9160");
1:         availableOptions.addOption("o",  "operation",            true,   "Operation to perform (WRITE, READ, READWRITE, RANGE_SLICE, INDEXED_RANGE_SLICE, MULTI_GET, COUNTERWRITE, COUNTER_GET), default:WRITE");
1:         availableOptions.addOption("u",  "supercolumns",         true,   "Number of super columns per key, default:1");
1:         availableOptions.addOption("y",  "family-type",          true,   "Column Family Type (Super, Standard), default:Standard");
1:         availableOptions.addOption("K",  "keep-trying",          true,   "Retry on-going operation N times (in case of failure). positive integer, default:10");
1:         availableOptions.addOption("k",  "keep-going",           false,  "Ignore errors inserting or reading (when set, --keep-trying has no effect), default:false");
1:         availableOptions.addOption("i",  "progress-interval",    true,   "Progress Report Interval (seconds), default:10");
1:         availableOptions.addOption("g",  "keys-per-call",        true,   "Number of keys to get_range_slices or multiget per call, default:1000");
1:         availableOptions.addOption("l",  "replication-factor",   true,   "Replication Factor to use when creating needed column families, default:1");
0:         availableOptions.addOption("L",  "enable-cql",           false,  "Perform queries using CQL2 (Cassandra Query Language v 2.0.0)");
1:         availableOptions.addOption("L3", "enable-cql3",          false,  "Perform queries using CQL3 (Cassandra Query Language v 3.0.0)");
1:         availableOptions.addOption("b",  "enable-native-protocol",  false,  "Use the binary native protocol (only work along with -L3)");
1:         availableOptions.addOption("P",  "use-prepared-statements", false, "Perform queries using prepared statements (only applicable to CQL).");
1:         availableOptions.addOption("e",  "consistency-level",    true,   "Consistency Level to use (ONE, QUORUM, LOCAL_QUORUM, EACH_QUORUM, ALL, ANY), default:ONE");
1:         availableOptions.addOption("x",  "create-index",         true,   "Type of index to create on needed column families (KEYS)");
1:         availableOptions.addOption("R",  "replication-strategy", true,   "Replication strategy to use (only on insert if keyspace does not exist), default:org.apache.cassandra.locator.SimpleStrategy");
1:         availableOptions.addOption("O",  "strategy-properties",  true,   "Replication strategy properties in the following format <dc_name>:<num>,<dc_name>:<num>,...");
0:         availableOptions.addOption("W",  "no-replicate-on-write",false,  "Set replicate_on_write to false for counters. Only counter add with CL=ONE will work");
1:         availableOptions.addOption("V",  "average-size-values",  false,  "Generate column values of average rather than specific size");
1:         availableOptions.addOption("T",  "send-to",              true,   "Send this as a request to the stress daemon at specified address.");
1:         availableOptions.addOption("I",  "compression",          true,   "Specify the compression to use for sstable, default:no compression");
1:         availableOptions.addOption("Q",  "query-names",          true,   "Comma-separated list of column names to retrieve from each row.");
1:         availableOptions.addOption("Z",  "compaction-strategy",  true,   "CompactionStrategy to use.");
1:         availableOptions.addOption("U",  "comparator",           true,   "Column Comparator to use. Currently supported types are: TimeUUIDType, AsciiType, UTF8Type.");
1:         availableOptions.addOption("tf", "transport-factory",    true,   "Fully-qualified TTransportFactory class name for creating a connection. Note: For Thrift over SSL, use org.apache.cassandra.stress.SSLTransportFactory.");
1:         availableOptions.addOption("ns", "no-statistics",        false,  "Turn off the aggegate statistics that is normally output after completion.");
1:         availableOptions.addOption("ts", SSL_TRUSTSTORE,         true, "SSL: full path to truststore");
1:         availableOptions.addOption("tspw", SSL_TRUSTSTORE_PW,    true, "SSL: full path to truststore");
1:         availableOptions.addOption("prtcl", SSL_PROTOCOL,        true, "SSL: connections protocol to use (default: TLS)");
1:         availableOptions.addOption("alg", SSL_ALGORITHM,         true, "SSL: algorithm (default: SunX509)");
1:         availableOptions.addOption("st", SSL_STORE_TYPE,         true, "SSL: type of store");
1:         availableOptions.addOption("ciphers", SSL_CIPHER_SUITES, true, "SSL: comma-separated list of encryption suites to use");
1:         availableOptions.addOption("th",  "throttle",            true,   "Throttle the total number of operations per second to a maximum amount.");
1:     }
1: 
1:     public static StressSettings build(String[] arguments)
1:     {
1:         CommandLineParser parser = new PosixParser();
1: 
1:         final Converter r = new Converter();
1:         try
1:         {
1:             CommandLine cmd = parser.parse(availableOptions, arguments);
1: 
1:             if (cmd.getArgs().length > 0)
1:             {
1:                 System.err.println("Application does not allow arbitrary arguments: " + Arrays.asList(cmd.getArgList()));
1:                 System.exit(1);
1:             }
1: 
1:             if (cmd.hasOption("h"))
1:                 printHelpMessage();
1: 
1:             if (cmd.hasOption("C"))
1:                 System.out.println("Ignoring deprecated option -C");
1: 
1:             if (cmd.hasOption("o"))
1:                 r.setCommand(cmd.getOptionValue("o").toLowerCase());
1:             else
1:                 r.setCommand("insert");
1: 
1:             if (cmd.hasOption("K"))
1:                 r.add("command", "tries=" + cmd.getOptionValue("K"));
1: 
1:             if (cmd.hasOption("k"))
1:             {
1:                 if (!cmd.hasOption("K"))
1:                     r.add("command", "retry=1");
1:                 r.add("command", "ignore_errors");
1:             }
1: 
1:             if (cmd.hasOption("g"))
1:                 r.add("command", "at-once=" + cmd.getOptionValue("g"));
1: 
1:             if (cmd.hasOption("e"))
1:                 r.add("command", "cl=" + cmd.getOptionValue("e"));
1: 
1:             String numKeys;
1:             if (cmd.hasOption("n"))
1:                 numKeys = cmd.getOptionValue("n");
1:             else
1:                 numKeys = "1000000";
1:             r.add("command", "n=" + numKeys);
1: 
1:             String uniqueKeys;
1:             if (cmd.hasOption("F"))
1:                 uniqueKeys = cmd.getOptionValue("F");
1:             else
1:                 uniqueKeys = numKeys;
1: 
1:             if (r.opts.containsKey("write") || r.opts.containsKey("counterwrite"))
1:             {
1:                 if (!uniqueKeys.equals(numKeys))
1:                     r.add("-key", "populate=1.." + uniqueKeys);
1:             }
1:             else if (cmd.hasOption("r"))
1:             {
1:                 r.add("-key", "dist=uniform(1.." + uniqueKeys + ")");
1:             }
1:             else
1:             {
1:                 if (!cmd.hasOption("s"))
1:                     r.add("-key", "dist=gauss(1.." + uniqueKeys + ",5)");
1:                 else
1:                     r.add("-key", String.format("dist=gauss(1..%s,%.2f)", uniqueKeys,
1:                             0.5 / Float.parseFloat(cmd.getOptionValue("s"))));
1:             }
1: 
1:             String colCount;
1:             if (cmd.hasOption("c"))
1:                 colCount = cmd.getOptionValue("c");
1:             else
1:                 colCount = "5";
1: 
1:             String colSize;
1:             if (cmd.hasOption("S"))
1:                 colSize = cmd.getOptionValue("S");
1:             else
1:                 colSize = "34";
1: 
1:             r.add("-col", "n=fixed(" + colCount + ")");
1:             if (cmd.hasOption("V"))
1:             {
1:                 r.add("-col", "size=uniform(1.." + Integer.parseInt(colSize) * 2 + ")");
1:                 r.add("-col", "data=rand()");
1:             }
1:             else
1:             {
1:                 r.add("-col", "size=fixed(" + colSize + ")");
1:                 r.add("-col", "data=repeat(1)");
1:             }
1:             if (cmd.hasOption("Q"))
1:                 r.add("-col", "names=" + cmd.getOptionValue("Q"));
1: 
1:             if (cmd.hasOption("U"))
1:                 r.add("-col", "comparator=" + cmd.getOptionValue("U"));
1: 
1:             if (cmd.hasOption("y") && cmd.getOptionValue("y").equals("Super"))
1:                 r.add("-col", "super=" + (cmd.hasOption("u") ? cmd.getOptionValue("u") : "1"));
1: 
1:             if (cmd.hasOption("t"))
1:                 r.add("-rate", "threads=" + cmd.getOptionValue("t"));
1:             else
1:                 r.add("-rate", "threads=50");
1: 
1:             if (cmd.hasOption("th"))
1:                 r.add("-rate", "limit=" + cmd.getOptionValue("th") + "/s");
1: 
1:             if (cmd.hasOption("f"))
1:                 r.add("-log", "file=" + cmd.getOptionValue("f"));
1: 
1:             if (cmd.hasOption("p"))
1:                 r.add("-port", cmd.getOptionValue("p"));
1: 
1:             if (cmd.hasOption("i"))
1:                 r.add("-log", "interval=" + cmd.getOptionValue("i"));
1:             else
1:                 r.add("-log", "interval=10");
1: 
1:             if (cmd.hasOption("x"))
1:                 r.add("-schema", "index=" + cmd.getOptionValue("x"));
1: 
1:             if (cmd.hasOption("R") || cmd.hasOption("l") || cmd.hasOption("O"))
1:             {
1:                 StringBuilder rep = new StringBuilder();
1:                 if (cmd.hasOption("R"))
0:                     rep.append("strategy=" + cmd.getOptionValue("R"));
1:                 if (cmd.hasOption("l"))
1:                 {
1:                     if (rep.length() > 0)
1:                         rep.append(",");
0:                     rep.append("factor=" + cmd.getOptionValue("l"));
1:                 }
1:                 if (cmd.hasOption("O"))
1:                 {
1:                     if (rep.length() > 0)
1:                         rep.append(",");
1:                     rep.append(cmd.getOptionValue("O").replace(':','='));
1:                 }
1:                 r.add("-schema", "replication(" + rep + ")");
1:             }
1: 
0:             if (cmd.hasOption("L"))
0:                 r.add("-mode", cmd.hasOption("P") ? "prepared cql2" : "cql2");
0:             else if (cmd.hasOption("L3"))
1:                 r.add("-mode", (cmd.hasOption("P") ? "prepared" : "") + (cmd.hasOption("b") ? "native" : "") +  "cql3");
1:             else
1:                 r.add("-mode", "thrift");
1: 
0:             if (cmd.hasOption("W"))
0:                 r.add("-schema", "no-replicate-on-write");
1: 
1:             if (cmd.hasOption("I"))
1:                 r.add("-schema", "compression=" + cmd.getOptionValue("I"));
1: 
1:             if (cmd.hasOption("d"))
1:                 r.add("-node", cmd.getOptionValue("d"));
1: 
1:             if (cmd.hasOption("D"))
1:                 r.add("-node", "file=" + cmd.getOptionValue("D"));
1: 
1: 
1:             if (cmd.hasOption("send-to"))
1:                 r.add("-send-to", cmd.getOptionValue("send-to"));
1: 
1:             if (cmd.hasOption("Z"))
1:                 r.add("-schema", "compaction=" + cmd.getOptionValue("Z"));
1: 
1:             if (cmd.hasOption("ns"))
1:                 r.add("-log", "no-summary");
1: 
1:             if (cmd.hasOption("tf"))
1:                 r.add("-transport", "factory=" + cmd.getOptionValue("tf"));
1: 
0:             // THESE DON'T SEEM TO AFFECT PROGRAM BEHAVIOUR
0: //            if(cmd.hasOption(SSL_TRUSTSTORE))
0: //                encOptions.truststore = cmd.getOptionValue(SSL_TRUSTSTORE);
0: //
0: //            if(cmd.hasOption(SSL_TRUSTSTORE_PW))
0: //                encOptions.truststore_password = cmd.getOptionValue(SSL_TRUSTSTORE_PW);
0: //
0: //            if(cmd.hasOption(SSL_PROTOCOL))
0: //                encOptions.protocol = cmd.getOptionValue(SSL_PROTOCOL);
0: //
0: //            if(cmd.hasOption(SSL_ALGORITHM))
0: //                encOptions.algorithm = cmd.getOptionValue(SSL_ALGORITHM);
0: //
0: //            if(cmd.hasOption(SSL_STORE_TYPE))
0: //                encOptions.store_type = cmd.getOptionValue(SSL_STORE_TYPE);
0: //
0: //            if(cmd.hasOption(SSL_CIPHER_SUITES))
0: //                encOptions.cipher_suites = cmd.getOptionValue(SSL_CIPHER_SUITES).split(",");
1: 
1:         }
1:         catch (ParseException e)
1:         {
1:             printHelpMessage();
1:             System.exit(1);
1:         }
1: 
1:         r.printNewCommand();
1:         return r.get();
1:     }
1: 
1:     private static final class Converter
1:     {
1:         private Map<String, List<String>> opts = new LinkedHashMap<>();
1:         List<String> command;
1:         public void add(String option, String suboption)
1:         {
1:             if (option.equals("command"))
1:             {
1:                 command.add(suboption);
1:                 return;
1:             }
1:             List<String> params = opts.get(option);
1:             if (params == null)
1:                 opts.put(option, params = new ArrayList());
1:             params.add(suboption);
1:         }
1:         StressSettings get(){
1:             Map<String, String[]> clArgs = new HashMap<>();
1:             for (Map.Entry<String, List<String>> e : opts.entrySet())
1:                 clArgs .put(e.getKey(), e.getValue().toArray(new String[0]));
1:             return StressSettings.get(clArgs);
1:         }
1:         void setCommand(String command)
1:         {
1:             command = Command.get(command).toString().toLowerCase();
1:             opts.put(command, this.command = new ArrayList<>());
1:         }
1:         void printNewCommand()
1:         {
1:             StringBuilder sb = new StringBuilder("stress");
1:             for (Map.Entry<String, List<String>> e : opts.entrySet())
1:             {
1:                 sb.append(" ");
1:                 sb.append(e.getKey());
1:                 for (String opt : e.getValue())
1:                 {
1:                     sb.append(" ");
1:                     sb.append(opt);
1:                 }
1:             }
1:             System.out.println("Running in legacy support mode. Translating command to: ");
1:             System.out.println(sb.toString());
1:         }
1:     }
1: 
1:     public static void printHelpMessage()
1:     {
1:         System.out.println("Usage: ./bin/cassandra-stress legacy [options]\n\nOptions:");
1:         System.out.println("THIS IS A LEGACY SUPPORT MODE");
1: 
1:         for(Object o : availableOptions.getOptions())
1:         {
1:             Option option = (Option) o;
1:             String upperCaseName = option.getLongOpt().toUpperCase();
1:             System.out.println(String.format("-%s%s, --%s%s%n\t\t%s%n", option.getOpt(), (option.hasArg()) ? " "+upperCaseName : "",
1:                     option.getLongOpt(), (option.hasArg()) ? "="+upperCaseName : "", option.getDescription()));
1:         }
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelpMessage();
1:             }
1:         };
1:     }
1: 
1: }
============================================================================