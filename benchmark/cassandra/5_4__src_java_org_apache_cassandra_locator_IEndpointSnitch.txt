1:07cf56f: /*
1:2e1b1a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1b1a5:  * or more contributor license agreements.  See the NOTICE file
1:2e1b1a5:  * distributed with this work for additional information
1:2e1b1a5:  * regarding copyright ownership.  The ASF licenses this file
1:2e1b1a5:  * to you under the Apache License, Version 2.0 (the
1:2e1b1a5:  * "License"); you may not use this file except in compliance
1:2e1b1a5:  * with the License.  You may obtain a copy of the License at
2:2e1b1a5:  *
1:2e1b1a5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1b1a5:  *
1:2e1b1a5:  * Unless required by applicable law or agreed to in writing, software
1:2e1b1a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1b1a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1b1a5:  * See the License for the specific language governing permissions and
1:2e1b1a5:  * limitations under the License.
2:2e1b1a5:  */
1:2e1b1a5: package org.apache.cassandra.locator;
1:67c5720: 
1:2e1b1a5: import java.net.InetAddress;
1:2e1b1a5: import java.util.Collection;
1:34e241a: import java.util.List;
5:2e1b1a5: 
1:67c5720: /**
1:138f7b5:  * This interface helps determine location of node in the datacenter relative to another node.
1:2e1b1a5:  * Give a node A and another node B it can tell if A and B are on the same rack or in the same
1:138f7b5:  * datacenter.
1:2e1b1a5:  */
1:2e1b1a5: 
1:2e1b1a5: public interface IEndpointSnitch
1:2e1b1a5: {
3:2e1b1a5:     /**
1:138f7b5:      * returns a String representing the rack this endpoint belongs to
1:67c5720:      */
1:67c5720:     public String getRack(InetAddress endpoint);
1:67c5720: 
1:67c5720:     /**
1:67c5720:      * returns a String representing the datacenter this endpoint belongs to
1:67c5720:      */
1:67c5720:     public String getDatacenter(InetAddress endpoint);
1:67c5720: 
1:67c5720:     /**
1:cb1ef76:      * returns a new <tt>List</tt> sorted by proximity to the given endpoint
1:2e1b1a5:      */
1:2e1b1a5:     public List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
1:2e1b1a5: 
1:2e1b1a5:     /**
1:cb1ef76:      * This method will sort the <tt>List</tt> by proximity to the given address.
1:34e241a:      */
1:7aac793:     public void sortByProximity(InetAddress address, List<InetAddress> addresses);
1:2e1b1a5: 
1:34e241a:     /**
1:67c5720:      * compares two endpoints in relation to the target endpoint, returning as Comparator.compare would
1:67c5720:      */
1:67c5720:     public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2);
1:f6f5e0e: 
1:f6f5e0e:     /**
1:f6f5e0e:      * called after Gossiper instance exists immediately before it starts gossiping
1:f6f5e0e:      */
1:f6f5e0e:     public void gossiperStarting();
1:5267112: 
1:5267112:     /**
1:5267112:      * Returns whether for a range query doing a query against merged is likely
1:5267112:      * to be faster than 2 sequential queries, one against l1 followed by one against l2.
1:5267112:      */
1:5267112:     public boolean isWorthMergingForRangeQuery(List<InetAddress> merged, List<InetAddress> l1, List<InetAddress> l2);
1:5267112: }
============================================================================
author:Mick Semb Wever
-------------------------------------------------------------------------------
commit:138f7b5
/////////////////////////////////////////////////////////////////////////
1:  * This interface helps determine location of node in the datacenter relative to another node.
1:  * datacenter.
1:      * returns a String representing the rack this endpoint belongs to
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5267112
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns whether for a range query doing a query against merged is likely
1:      * to be faster than 2 sequential queries, one against l1 followed by one against l2.
1:      */
1:     public boolean isWorthMergingForRangeQuery(List<InetAddress> merged, List<InetAddress> l1, List<InetAddress> l2);
1: }
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:f6f5e0e
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * called after Gossiper instance exists immediately before it starts gossiping
1:      */
1:     public void gossiperStarting();
commit:67c5720
/////////////////////////////////////////////////////////////////////////
0:      * returns a String repesenting the rack this endpoint belongs to
1:      */
1:     public String getRack(InetAddress endpoint);
1: 
1:     /**
1:      * returns a String representing the datacenter this endpoint belongs to
1:      */
1:     public String getDatacenter(InetAddress endpoint);
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * compares two endpoints in relation to the target endpoint, returning as Comparator.compare would
1:      */
1:     public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ef25537
/////////////////////////////////////////////////////////////////////////
commit:00554e9
/////////////////////////////////////////////////////////////////////////
0: }
commit:7aac793
/////////////////////////////////////////////////////////////////////////
1:     public void sortByProximity(InetAddress address, List<InetAddress> addresses);
commit:34e241a
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * register to receive notification when the endpoint snitch has changed the answers it was providing.
0:      * @param subscriber the subscriber to notify
1:      */
0:     public void register(AbstractReplicationStrategy subscriber);
0: }
commit:cb1ef76
/////////////////////////////////////////////////////////////////////////
1:      * returns a new <tt>List</tt> sorted by proximity to the given endpoint
1:      * This method will sort the <tt>List</tt> by proximity to the given address.
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.locator;
1: 
0: import java.net.UnknownHostException;
1: 
1: import java.net.InetAddress;
0: import java.util.Set;
0: import java.util.List;
1: import java.util.Collection;
1: 
1: 
1: /**
0:  * This interface helps determine location of node in the data center relative to another node.
1:  * Give a node A and another node B it can tell if A and B are on the same rack or in the same
0:  * data center.
1:  *
0:  * Not all methods will be germate to all implementations.  Throw UnsupportedOperation as necessary.
1:  */
1: 
1: public interface IEndpointSnitch
1: {
1:     /**
0:      * returns a new List<InetAddress> sorted by proximity to the given endpoint
1:      */
1:     public List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
1: 
1:     /**
0:      * This method will sort the List<InetAddress> according to the proximity of the given address.
1:      */
0:     public List<InetAddress> sortByProximity(InetAddress address, List<InetAddress> addresses);
0: }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:c8f6619
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.Token;
0: 
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * returns a list of cached endpoints for a given token.
0:      */
0:     public ArrayList<InetAddress> getCachedEndpoints(Token t);
0: 
0:     /**
0:      * puts an address in the cache for a given token.
0:      */
0:     public void cacheEndpoint(Token t, ArrayList<InetAddress> addr);
0: 
0:     /**
0:      * clears all cache values.
0:      */
0:     public void clearEndpointCache();
============================================================================