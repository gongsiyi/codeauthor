1:2683806: /*
1:2683806:  * Licensed to the Apache Software Foundation (ASF) under one
1:2683806:  * or more contributor license agreements.  See the NOTICE file
1:2683806:  * distributed with this work for additional information
1:2683806:  * regarding copyright ownership.  The ASF licenses this file
1:2683806:  * to you under the Apache License, Version 2.0 (the
1:2683806:  * "License"); you may not use this file except in compliance
1:2683806:  * with the License.  You may obtain a copy of the License at
1:2683806:  *
1:2683806:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2683806:  *
1:2683806:  * Unless required by applicable law or agreed to in writing, software
1:2683806:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2683806:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2683806:  * See the License for the specific language governing permissions and
1:2683806:  * limitations under the License.
1:2683806:  */
1:2683806: package org.apache.cassandra.db;
1:2683806: 
1:2683806: import java.nio.ByteBuffer;
1:2683806: import java.util.*;
1:2683806: 
1:2683806: import org.apache.cassandra.cql3.ColumnIdentifier;
1:2683806: import org.apache.cassandra.config.CFMetaData;
1:2683806: import org.apache.cassandra.config.ColumnDefinition;
1:2683806: import org.apache.cassandra.db.marshal.SetType;
1:2683806: import org.apache.cassandra.db.rows.*;
1:2683806: import org.apache.cassandra.db.context.CounterContext;
1:2683806: import org.apache.cassandra.db.partitions.*;
1:2683806: import org.apache.cassandra.db.marshal.AbstractType;
1:2683806: import org.apache.cassandra.db.marshal.ListType;
1:2683806: import org.apache.cassandra.db.marshal.MapType;
1:2683806: import org.apache.cassandra.utils.*;
1:2683806: 
1:2683806: /**
1:2683806:  * Convenience object to create single row updates for tests.
1:2683806:  *
1:2683806:  * This is a thin wrapper over the builders in SimpleBuilders for historical reasons.
1:2683806:  * We could modify all the tests using this class to use the simple builders directly
1:2683806:  * instead, but there is a fair amount of use so the value of such effort is unclear.
1:2683806:  */
1:2683806: public class RowUpdateBuilder
1:2683806: {
1:2683806:     private final PartitionUpdate.SimpleBuilder updateBuilder;
1:2683806:     private Row.SimpleBuilder rowBuilder;
1:2683806:     private boolean noRowMarker;
1:2683806: 
1:2683806:     private List<RangeTombstone> rts = new ArrayList<>();
1:2683806: 
1:2683806:     private RowUpdateBuilder(PartitionUpdate.SimpleBuilder updateBuilder)
1:2683806:     {
1:2683806:         this.updateBuilder = updateBuilder;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder(CFMetaData metadata, long timestamp, Object partitionKey)
1:2683806:     {
1:2683806:         this(metadata, FBUtilities.nowInSeconds(), timestamp, partitionKey);
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, Object partitionKey)
1:2683806:     {
1:2683806:         this(metadata, localDeletionTime, timestamp, metadata.params.defaultTimeToLive, partitionKey);
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Object partitionKey)
1:2683806:     {
1:2683806:         this(metadata, FBUtilities.nowInSeconds(), timestamp, ttl, partitionKey);
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, int ttl, Object partitionKey)
1:2683806:     {
1:2683806:         this(PartitionUpdate.simpleBuilder(metadata, partitionKey));
1:2683806: 
1:2683806:         this.updateBuilder.timestamp(timestamp);
1:2683806:         this.updateBuilder.ttl(ttl);
1:2683806:         this.updateBuilder.nowInSec(localDeletionTime);
1:2683806:     }
1:2683806: 
1:2683806:     private Row.SimpleBuilder rowBuilder()
1:2683806:     {
1:2683806:         // Normally, rowBuilder is created by the call to clustering(), but we allow skipping that call for an empty
1:2683806:         // clustering.
1:2683806:         if (rowBuilder == null)
1:2683806:         {
1:2683806:             rowBuilder = updateBuilder.row();
1:2683806:             if (noRowMarker)
1:2683806:                 rowBuilder.noPrimaryKeyLivenessInfo();
1:2683806:         }
1:2683806: 
1:2683806:         return rowBuilder;
1:2683806:     }
1:2683806: 
1:2683806:     // This must be called before any addition or deletion if used.
1:2683806:     public RowUpdateBuilder noRowMarker()
1:2683806:     {
1:2683806:         this.noRowMarker = true;
1:2683806:         if (rowBuilder != null)
1:2683806:             rowBuilder.noPrimaryKeyLivenessInfo();
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder clustering(Object... clusteringValues)
1:2683806:     {
1:2683806:         assert rowBuilder == null;
1:2683806:         rowBuilder = updateBuilder.row(clusteringValues);
1:2683806:         if (noRowMarker)
1:2683806:             rowBuilder.noPrimaryKeyLivenessInfo();
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public Mutation build()
1:2683806:     {
1:2683806:         return new Mutation(buildUpdate());
1:2683806:     }
1:2683806: 
1:2683806:     public PartitionUpdate buildUpdate()
1:2683806:     {
1:2683806:         PartitionUpdate update = updateBuilder.build();
1:2683806:         for (RangeTombstone rt : rts)
1:2683806:             update.add(rt);
1:2683806:         return update;
1:2683806:     }
1:2683806: 
1:2683806:     private static void deleteRow(PartitionUpdate update, long timestamp, int localDeletionTime, Object... clusteringValues)
1:2683806:     {
1:2683806:         assert clusteringValues.length == update.metadata().comparator.size() || (clusteringValues.length == 0 && !update.columns().statics.isEmpty());
1:2683806: 
1:2683806:         boolean isStatic = clusteringValues.length != update.metadata().comparator.size();
1:2683806:         Row.Builder builder = BTreeRow.sortedBuilder();
1:2683806: 
1:2683806:         if (isStatic)
1:2683806:             builder.newRow(Clustering.STATIC_CLUSTERING);
1:2683806:         else
1:2683806:             builder.newRow(clusteringValues.length == 0 ? Clustering.EMPTY : update.metadata().comparator.make(clusteringValues));
1:2683806:         builder.addRowDeletion(Row.Deletion.regular(new DeletionTime(timestamp, localDeletionTime)));
1:2683806: 
1:2683806:         update.add(builder.build());
1:2683806:     }
1:2683806: 
1:2683806:     public static Mutation deleteRow(CFMetaData metadata, long timestamp, Object key, Object... clusteringValues)
1:2683806:     {
1:2683806:         return deleteRowAt(metadata, timestamp, FBUtilities.nowInSeconds(), key, clusteringValues);
1:2683806:     }
1:2683806: 
1:2683806:     public static Mutation deleteRowAt(CFMetaData metadata, long timestamp, int localDeletionTime, Object key, Object... clusteringValues)
1:2683806:     {
1:2683806:         PartitionUpdate update = new PartitionUpdate(metadata, makeKey(metadata, key), metadata.partitionColumns(), 0);
1:2683806:         deleteRow(update, timestamp, localDeletionTime, clusteringValues);
1:2683806:         // note that the created mutation may get further update later on, so we don't use the ctor that create a singletonMap
1:2683806:         // underneath (this class if for convenience, not performance)
1:2683806:         return new Mutation(update.metadata().ksName, update.partitionKey()).add(update);
1:2683806:     }
1:2683806: 
1:2683806:     private static DecoratedKey makeKey(CFMetaData metadata, Object... partitionKey)
1:2683806:     {
1:2683806:         if (partitionKey.length == 1 && partitionKey[0] instanceof DecoratedKey)
1:2683806:             return (DecoratedKey)partitionKey[0];
1:2683806: 
1:2683806:         ByteBuffer key = CFMetaData.serializePartitionKey(metadata.getKeyValidatorAsClusteringComparator().make(partitionKey));
1:2683806:         return metadata.decorateKey(key);
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder addRangeTombstone(RangeTombstone rt)
1:2683806:     {
1:2683806:         rts.add(rt);
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder addRangeTombstone(Object start, Object end)
1:2683806:     {
1:2683806:         updateBuilder.addRangeTombstone().start(start).end(end);
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder add(String columnName, Object value)
1:2683806:     {
1:2683806:         rowBuilder().add(columnName, value);
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder add(ColumnDefinition columnDefinition, Object value)
1:2683806:     {
1:2683806:         return add(columnDefinition.name.toString(), value);
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder delete(String columnName)
1:2683806:     {
1:2683806:         rowBuilder().delete(columnName);
1:2683806:         return this;
1:2683806:     }
1:2683806: 
1:2683806:     public RowUpdateBuilder delete(ColumnDefinition columnDefinition)
1:2683806:     {
1:2683806:         return delete(columnDefinition.name.toString());
1:2683806:     }
1:2683806: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.marshal.SetType;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.context.CounterContext;
1: import org.apache.cassandra.db.partitions.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.ListType;
1: import org.apache.cassandra.db.marshal.MapType;
1: import org.apache.cassandra.utils.*;
1: 
1: /**
1:  * Convenience object to create single row updates for tests.
1:  *
1:  * This is a thin wrapper over the builders in SimpleBuilders for historical reasons.
1:  * We could modify all the tests using this class to use the simple builders directly
1:  * instead, but there is a fair amount of use so the value of such effort is unclear.
1:  */
1: public class RowUpdateBuilder
1: {
1:     private final PartitionUpdate.SimpleBuilder updateBuilder;
1:     private Row.SimpleBuilder rowBuilder;
1:     private boolean noRowMarker;
1: 
1:     private List<RangeTombstone> rts = new ArrayList<>();
1: 
1:     private RowUpdateBuilder(PartitionUpdate.SimpleBuilder updateBuilder)
1:     {
1:         this.updateBuilder = updateBuilder;
1:     }
1: 
1:     public RowUpdateBuilder(CFMetaData metadata, long timestamp, Object partitionKey)
1:     {
1:         this(metadata, FBUtilities.nowInSeconds(), timestamp, partitionKey);
1:     }
1: 
1:     public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, Object partitionKey)
1:     {
1:         this(metadata, localDeletionTime, timestamp, metadata.params.defaultTimeToLive, partitionKey);
1:     }
1: 
1:     public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Object partitionKey)
1:     {
1:         this(metadata, FBUtilities.nowInSeconds(), timestamp, ttl, partitionKey);
1:     }
1: 
1:     public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, int ttl, Object partitionKey)
1:     {
1:         this(PartitionUpdate.simpleBuilder(metadata, partitionKey));
1: 
1:         this.updateBuilder.timestamp(timestamp);
1:         this.updateBuilder.ttl(ttl);
1:         this.updateBuilder.nowInSec(localDeletionTime);
1:     }
1: 
1:     private Row.SimpleBuilder rowBuilder()
1:     {
1:         // Normally, rowBuilder is created by the call to clustering(), but we allow skipping that call for an empty
1:         // clustering.
1:         if (rowBuilder == null)
1:         {
1:             rowBuilder = updateBuilder.row();
1:             if (noRowMarker)
1:                 rowBuilder.noPrimaryKeyLivenessInfo();
1:         }
1: 
1:         return rowBuilder;
1:     }
1: 
1:     // This must be called before any addition or deletion if used.
1:     public RowUpdateBuilder noRowMarker()
1:     {
1:         this.noRowMarker = true;
1:         if (rowBuilder != null)
1:             rowBuilder.noPrimaryKeyLivenessInfo();
1:         return this;
1:     }
1: 
1:     public RowUpdateBuilder clustering(Object... clusteringValues)
1:     {
1:         assert rowBuilder == null;
1:         rowBuilder = updateBuilder.row(clusteringValues);
1:         if (noRowMarker)
1:             rowBuilder.noPrimaryKeyLivenessInfo();
1:         return this;
1:     }
1: 
1:     public Mutation build()
1:     {
1:         return new Mutation(buildUpdate());
1:     }
1: 
1:     public PartitionUpdate buildUpdate()
1:     {
1:         PartitionUpdate update = updateBuilder.build();
1:         for (RangeTombstone rt : rts)
1:             update.add(rt);
1:         return update;
1:     }
1: 
1:     private static void deleteRow(PartitionUpdate update, long timestamp, int localDeletionTime, Object... clusteringValues)
1:     {
1:         assert clusteringValues.length == update.metadata().comparator.size() || (clusteringValues.length == 0 && !update.columns().statics.isEmpty());
1: 
1:         boolean isStatic = clusteringValues.length != update.metadata().comparator.size();
1:         Row.Builder builder = BTreeRow.sortedBuilder();
1: 
1:         if (isStatic)
1:             builder.newRow(Clustering.STATIC_CLUSTERING);
1:         else
1:             builder.newRow(clusteringValues.length == 0 ? Clustering.EMPTY : update.metadata().comparator.make(clusteringValues));
1:         builder.addRowDeletion(Row.Deletion.regular(new DeletionTime(timestamp, localDeletionTime)));
1: 
1:         update.add(builder.build());
1:     }
1: 
1:     public static Mutation deleteRow(CFMetaData metadata, long timestamp, Object key, Object... clusteringValues)
1:     {
1:         return deleteRowAt(metadata, timestamp, FBUtilities.nowInSeconds(), key, clusteringValues);
1:     }
1: 
1:     public static Mutation deleteRowAt(CFMetaData metadata, long timestamp, int localDeletionTime, Object key, Object... clusteringValues)
1:     {
1:         PartitionUpdate update = new PartitionUpdate(metadata, makeKey(metadata, key), metadata.partitionColumns(), 0);
1:         deleteRow(update, timestamp, localDeletionTime, clusteringValues);
1:         // note that the created mutation may get further update later on, so we don't use the ctor that create a singletonMap
1:         // underneath (this class if for convenience, not performance)
1:         return new Mutation(update.metadata().ksName, update.partitionKey()).add(update);
1:     }
1: 
1:     private static DecoratedKey makeKey(CFMetaData metadata, Object... partitionKey)
1:     {
1:         if (partitionKey.length == 1 && partitionKey[0] instanceof DecoratedKey)
1:             return (DecoratedKey)partitionKey[0];
1: 
1:         ByteBuffer key = CFMetaData.serializePartitionKey(metadata.getKeyValidatorAsClusteringComparator().make(partitionKey));
1:         return metadata.decorateKey(key);
1:     }
1: 
1:     public RowUpdateBuilder addRangeTombstone(RangeTombstone rt)
1:     {
1:         rts.add(rt);
1:         return this;
1:     }
1: 
1:     public RowUpdateBuilder addRangeTombstone(Object start, Object end)
1:     {
1:         updateBuilder.addRangeTombstone().start(start).end(end);
1:         return this;
1:     }
1: 
1:     public RowUpdateBuilder add(String columnName, Object value)
1:     {
1:         rowBuilder().add(columnName, value);
1:         return this;
1:     }
1: 
1:     public RowUpdateBuilder add(ColumnDefinition columnDefinition, Object value)
1:     {
1:         return add(columnDefinition.name.toString(), value);
1:     }
1: 
1:     public RowUpdateBuilder delete(String columnName)
1:     {
1:         rowBuilder().delete(columnName);
1:         return this;
1:     }
1: 
1:     public RowUpdateBuilder delete(ColumnDefinition columnDefinition)
1:     {
1:         return delete(columnDefinition.name.toString());
1:     }
1: }
============================================================================