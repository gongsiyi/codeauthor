1:904cb5d: package org.apache.cassandra.utils;
1:904cb5d: 
1:904cb5d: import static org.junit.Assert.*;
1:904cb5d: 
1:904cb5d: import java.util.ArrayList;
1:904cb5d: import java.util.List;
1:904cb5d: import java.util.Random;
1:904cb5d: import java.util.concurrent.Callable;
1:904cb5d: import java.util.concurrent.Executors;
1:904cb5d: import java.util.concurrent.Future;
1:904cb5d: 
1:904cb5d: import com.google.common.collect.ImmutableList;
1:904cb5d: import com.google.common.util.concurrent.Futures;
1:904cb5d: 
1:904cb5d: import org.junit.Test;
1:904cb5d: 
1:904cb5d: import org.apache.cassandra.utils.IntegerInterval.Set;
1:904cb5d: 
1:904cb5d: public class IntegerIntervalsTest
1:904cb5d: {
1:904cb5d:     int[] values = new int[] { Integer.MIN_VALUE, -2, -1, 0, 5, 9, 13, Integer.MAX_VALUE };
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testMake()
1:904cb5d:     {
1:904cb5d:         IntegerInterval iv;
1:904cb5d:         for (int i = 0; i < values.length; ++i)
1:904cb5d:         {
1:904cb5d:             for (int j = i; j < values.length; ++j)
1:904cb5d:             {
1:904cb5d:                 iv = new IntegerInterval(values[i], values[j]);
1:904cb5d:                 assertEquals(values[i], iv.lower());
1:904cb5d:                 assertEquals(values[j], iv.upper());
1:904cb5d:             }
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         for (int i = 0; i < values.length; ++i)
1:904cb5d:         {
1:904cb5d:             for (int j = 0; j < i; ++j)
1:904cb5d:             {
1:904cb5d:                 try
1:904cb5d:                 {
1:904cb5d:                     iv = new IntegerInterval(values[i], values[j]);
1:904cb5d:                     fail("Assertion not thrown: " + values[i] + ", " + values[j]);
1:904cb5d:                 }
1:904cb5d:                 catch (AssertionError e)
1:904cb5d:                 {
1:904cb5d:                     // expected
1:904cb5d:                 }
1:904cb5d:             }
1:904cb5d:         }
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testExpandToCoverSingleThread()
1:904cb5d:     {
1:904cb5d:         IntegerInterval iv;
1:904cb5d:         for (int i = 0; i < values.length; ++i)
1:904cb5d:         {
1:904cb5d:             for (int j = i; j < values.length; ++j)
1:904cb5d:             {
1:904cb5d:                 iv = new IntegerInterval(values[i], values[j]);
1:904cb5d:                 int k = 0;
1:904cb5d:                 for (; k < i; ++k)
1:904cb5d:                 {
1:904cb5d:                     IntegerInterval v = new IntegerInterval(iv);
1:904cb5d:                     v.expandToCover(values[k]);
1:904cb5d:                     assertEquals(values[k], v.lower());
1:904cb5d:                     assertEquals(values[j], v.upper());
1:904cb5d:                 }
1:904cb5d:                 for (; k < j; ++k)
1:904cb5d:                 {
1:904cb5d:                     IntegerInterval v = new IntegerInterval(iv);
1:904cb5d:                     v.expandToCover(values[k]);
1:904cb5d:                     assertEquals(values[i], v.lower());
1:904cb5d:                     assertEquals(values[j], v.upper());
1:904cb5d:                 }
1:904cb5d:                 for (; k < values.length; ++k)
1:904cb5d:                 {
1:904cb5d:                     IntegerInterval v = new IntegerInterval(iv);
1:904cb5d:                     v.expandToCover(values[k]);
1:904cb5d:                     assertEquals(values[i], v.lower());
1:904cb5d:                     assertEquals(values[k], v.upper());
1:904cb5d:                 }
1:904cb5d:             }
1:904cb5d:         }
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testExpandToCoverMultiThread() throws InterruptedException
1:904cb5d:     {
1:904cb5d:         Random r = new Random();
1:904cb5d:         int threads = 16;
1:904cb5d:         int streamSize = 1000000;
1:904cb5d:         List<Callable<Void>> tasks = new ArrayList<>(threads);
1:904cb5d:         final IntegerInterval interval = new IntegerInterval(0, 0);
1:904cb5d:         int min = 0;
1:904cb5d:         int max = 0;
1:904cb5d:         for (int i = 0; i < threads; ++i)
1:904cb5d:         {
1:904cb5d:             final int seed = r.nextInt();
1:904cb5d:             tasks.add(() -> {
1:904cb5d:                 new Random(seed).ints(streamSize).forEach(v -> interval.expandToCover(v));
1:904cb5d:                 return null;
1:904cb5d:             });
1:904cb5d:             min = Math.min(min, new Random(seed).ints(streamSize).min().getAsInt());
1:904cb5d:             max = Math.max(max, new Random(seed).ints(streamSize).max().getAsInt());
1:904cb5d:         }
1:904cb5d:         for (Future<?> f : Executors.newFixedThreadPool(threads).invokeAll(tasks))
1:904cb5d:             Futures.getUnchecked(f);
1:904cb5d:         assertEquals(min, interval.lower());
1:904cb5d:         assertEquals(max, interval.upper());
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     void testSetAdd(int l, int r, Integer... expected)
1:904cb5d:     {
1:904cb5d:         Set s = new Set();
1:904cb5d:         s.add(-3, -1);
1:904cb5d:         s.add(1, 3);
1:904cb5d:         s.add(l, r);
1:904cb5d:         assertArrayEquals(expected, s
1:904cb5d:                                     .intervals()
1:904cb5d:                                     .stream()
1:904cb5d:                                     .flatMap(x -> ImmutableList.of(x.lower(), x.upper()).stream())
1:904cb5d:                                     .toArray());
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     void testSetAdd(int l, int r, String expected)
1:904cb5d:     {
1:904cb5d:         Set s = new Set();
1:904cb5d:         s.add(-3, -1);
1:904cb5d:         s.add(1, 3);
1:904cb5d:         s.add(l, r);
1:904cb5d:         assertEquals(expected, s.toString());
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testSetAdd()
1:904cb5d:     {
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, -4, Integer.MIN_VALUE, -4, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, -3, Integer.MIN_VALUE, -1, 1, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, -2, Integer.MIN_VALUE, -1, 1, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, -1, Integer.MIN_VALUE, -1, 1, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, 0, Integer.MIN_VALUE, 0, 1, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, 1, Integer.MIN_VALUE, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, 2, Integer.MIN_VALUE, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, 3, Integer.MIN_VALUE, 3);
1:904cb5d:         testSetAdd(Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(-5, -4, "[[-5,-4], [-3,-1], [1,3]]");
1:904cb5d:         testSetAdd(-5, -3, -5, -1, 1, 3);
1:904cb5d:         testSetAdd(-5, -2, -5, -1, 1, 3);
1:904cb5d:         testSetAdd(-5, -1, -5, -1, 1, 3);
1:904cb5d:         testSetAdd(-5, 0, -5, 0, 1, 3);
1:904cb5d:         testSetAdd(-5, 1, -5, 3);
1:904cb5d:         testSetAdd(-5, 2, -5, 3);
1:904cb5d:         testSetAdd(-5, 3, -5, 3);
1:904cb5d:         testSetAdd(-5, 4, -5, 4);
1:904cb5d:         testSetAdd(-5, Integer.MAX_VALUE, -5, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(-3, -3, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-3, -2, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-3, -1, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-3, 0, -3, 0, 1, 3);
1:904cb5d:         testSetAdd(-3, 1, "[[-3,3]]");
1:904cb5d:         testSetAdd(-3, 2, -3, 3);
1:904cb5d:         testSetAdd(-3, 3, -3, 3);
1:904cb5d:         testSetAdd(-3, 4, -3, 4);
1:904cb5d:         testSetAdd(-3, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(-2, -2, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-2, -1, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-2, 0, "[[-3,0], [1,3]]");
1:904cb5d:         testSetAdd(-2, 1, -3, 3);
1:904cb5d:         testSetAdd(-2, 2, -3, 3);
1:904cb5d:         testSetAdd(-2, 3, -3, 3);
1:904cb5d:         testSetAdd(-2, 4, -3, 4);
1:904cb5d:         testSetAdd(-2, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(-1, -1, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(-1, 0, -3, 0, 1, 3);
1:904cb5d:         testSetAdd(-1, 1, -3, 3);
1:904cb5d:         testSetAdd(-1, 2, -3, 3);
1:904cb5d:         testSetAdd(-1, 3, -3, 3);
1:904cb5d:         testSetAdd(-1, 4, -3, 4);
1:904cb5d:         testSetAdd(-1, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(0, 0, -3, -1, 0, 0, 1, 3);
1:904cb5d:         testSetAdd(0, 1, -3, -1, 0, 3);
1:904cb5d:         testSetAdd(0, 2, -3, -1, 0, 3);
1:904cb5d:         testSetAdd(0, 3, -3, -1, 0, 3);
1:904cb5d:         testSetAdd(0, 4, -3, -1, 0, 4);
1:904cb5d:         testSetAdd(0, Integer.MAX_VALUE, -3, -1, 0, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(1, 1, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(1, 2, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(1, 3, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(1, 4, -3, -1, 1, 4);
1:904cb5d:         testSetAdd(1, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(2, 2, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(2, 3, -3, -1, 1, 3);
1:904cb5d:         testSetAdd(2, 4, -3, -1, 1, 4);
1:904cb5d:         testSetAdd(2, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(3, 3, "[[-3,-1], [1,3]]");
1:904cb5d:         testSetAdd(3, 4, -3, -1, 1, 4);
1:904cb5d:         testSetAdd(3, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1:904cb5d: 
1:904cb5d:         testSetAdd(4, 5, -3, -1, 1, 3, 4, 5);
1:904cb5d:         testSetAdd(4, Integer.MAX_VALUE, -3, -1, 1, 3, 4, Integer.MAX_VALUE);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testSetAddMultiThread() throws InterruptedException
1:904cb5d:     {
1:904cb5d:         Random r = new Random();
1:904cb5d:         int threads = 16;
1:904cb5d:         int streamSize = 10000;
1:904cb5d:         List<Callable<Void>> tasks = new ArrayList<>(threads);
1:904cb5d:         final IntegerInterval.Set st = new IntegerInterval.Set();
1:904cb5d:         final IntegerInterval.Set mt = new IntegerInterval.Set();
1:904cb5d:         for (int i = 0; i < threads; ++i)
1:904cb5d:         {
1:904cb5d:             final int seed = r.nextInt();
1:904cb5d:             tasks.add(() -> {
1:904cb5d:                 new Random(seed)
1:904cb5d:                     .ints(streamSize)
1:904cb5d:                     .forEach(v -> mt.add(v, v + 5));
1:904cb5d:                 return null;
1:904cb5d:             });
1:904cb5d:             new Random(seed)
1:904cb5d:                 .ints(streamSize)
1:904cb5d:                 .forEach(v -> st.add(v, v + 5));
1:904cb5d:         }
1:904cb5d:         for (Future<?> f : Executors.newFixedThreadPool(threads).invokeAll(tasks))
1:904cb5d:             Futures.getUnchecked(f);
1:904cb5d:         assertEquals(st, mt);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     void testSetCovers(int l, int r, boolean expected)
1:904cb5d:     {
1:904cb5d:         Set s = new Set();
1:904cb5d:         s.add(-3, -1);
1:904cb5d:         s.add(1, 3);
1:904cb5d:         assertEquals(expected, s.covers(new IntegerInterval(l, r)));
1:904cb5d:     }
1:904cb5d: 
1:904cb5d: 
1:904cb5d:     @Test
1:904cb5d:     public void testSetCovers()
1:904cb5d:     {
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, -4, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, -3, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, -2, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, -1, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, 0, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, 1, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, 2, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, 3, false);
1:904cb5d:         testSetCovers(Integer.MIN_VALUE, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(-5, -4, false);
1:904cb5d:         testSetCovers(-5, -3, false);
1:904cb5d:         testSetCovers(-5, -2, false);
1:904cb5d:         testSetCovers(-5, -1, false);
1:904cb5d:         testSetCovers(-5, 0, false);
1:904cb5d:         testSetCovers(-5, 1, false);
1:904cb5d:         testSetCovers(-5, 2, false);
1:904cb5d:         testSetCovers(-5, 3, false);
1:904cb5d:         testSetCovers(-5, 4, false);
1:904cb5d:         testSetCovers(-5, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(-3, -3, true);
1:904cb5d:         testSetCovers(-3, -2, true);
1:904cb5d:         testSetCovers(-3, -1, true);
1:904cb5d:         testSetCovers(-3, 0, false);
1:904cb5d:         testSetCovers(-3, 1, false);
1:904cb5d:         testSetCovers(-3, 2, false);
1:904cb5d:         testSetCovers(-3, 3, false);
1:904cb5d:         testSetCovers(-3, 4, false);
1:904cb5d:         testSetCovers(-3, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(-2, -2, true);
1:904cb5d:         testSetCovers(-2, -1, true);
1:904cb5d:         testSetCovers(-2, 0, false);
1:904cb5d:         testSetCovers(-2, 1, false);
1:904cb5d:         testSetCovers(-2, 2, false);
1:904cb5d:         testSetCovers(-2, 3, false);
1:904cb5d:         testSetCovers(-2, 4, false);
1:904cb5d:         testSetCovers(-2, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(-1, -1, true);
1:904cb5d:         testSetCovers(-1, 0, false);
1:904cb5d:         testSetCovers(-1, 1, false);
1:904cb5d:         testSetCovers(-1, 2, false);
1:904cb5d:         testSetCovers(-1, 3, false);
1:904cb5d:         testSetCovers(-1, 4, false);
1:904cb5d:         testSetCovers(-1, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(0, 0, false);
1:904cb5d:         testSetCovers(0, 1, false);
1:904cb5d:         testSetCovers(0, 2, false);
1:904cb5d:         testSetCovers(0, 3, false);
1:904cb5d:         testSetCovers(0, 4, false);
1:904cb5d:         testSetCovers(0, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(1, 1, true);
1:904cb5d:         testSetCovers(1, 2, true);
1:904cb5d:         testSetCovers(1, 3, true);
1:904cb5d:         testSetCovers(1, 4, false);
1:904cb5d:         testSetCovers(1, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(2, 2, true);
1:904cb5d:         testSetCovers(2, 3, true);
1:904cb5d:         testSetCovers(2, 4, false);
1:904cb5d:         testSetCovers(2, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(3, 3, true);
1:904cb5d:         testSetCovers(3, 4, false);
1:904cb5d:         testSetCovers(3, Integer.MAX_VALUE, false);
1:904cb5d: 
1:904cb5d:         testSetCovers(4, 5, false);
1:904cb5d:         testSetCovers(4, Integer.MAX_VALUE, false);
1:904cb5d:     }
1:904cb5d: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
1: import com.google.common.collect.ImmutableList;
1: import com.google.common.util.concurrent.Futures;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.utils.IntegerInterval.Set;
1: 
1: public class IntegerIntervalsTest
1: {
1:     int[] values = new int[] { Integer.MIN_VALUE, -2, -1, 0, 5, 9, 13, Integer.MAX_VALUE };
1: 
1:     @Test
1:     public void testMake()
1:     {
1:         IntegerInterval iv;
1:         for (int i = 0; i < values.length; ++i)
1:         {
1:             for (int j = i; j < values.length; ++j)
1:             {
1:                 iv = new IntegerInterval(values[i], values[j]);
1:                 assertEquals(values[i], iv.lower());
1:                 assertEquals(values[j], iv.upper());
1:             }
1:         }
1: 
1:         for (int i = 0; i < values.length; ++i)
1:         {
1:             for (int j = 0; j < i; ++j)
1:             {
1:                 try
1:                 {
1:                     iv = new IntegerInterval(values[i], values[j]);
1:                     fail("Assertion not thrown: " + values[i] + ", " + values[j]);
1:                 }
1:                 catch (AssertionError e)
1:                 {
1:                     // expected
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testExpandToCoverSingleThread()
1:     {
1:         IntegerInterval iv;
1:         for (int i = 0; i < values.length; ++i)
1:         {
1:             for (int j = i; j < values.length; ++j)
1:             {
1:                 iv = new IntegerInterval(values[i], values[j]);
1:                 int k = 0;
1:                 for (; k < i; ++k)
1:                 {
1:                     IntegerInterval v = new IntegerInterval(iv);
1:                     v.expandToCover(values[k]);
1:                     assertEquals(values[k], v.lower());
1:                     assertEquals(values[j], v.upper());
1:                 }
1:                 for (; k < j; ++k)
1:                 {
1:                     IntegerInterval v = new IntegerInterval(iv);
1:                     v.expandToCover(values[k]);
1:                     assertEquals(values[i], v.lower());
1:                     assertEquals(values[j], v.upper());
1:                 }
1:                 for (; k < values.length; ++k)
1:                 {
1:                     IntegerInterval v = new IntegerInterval(iv);
1:                     v.expandToCover(values[k]);
1:                     assertEquals(values[i], v.lower());
1:                     assertEquals(values[k], v.upper());
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testExpandToCoverMultiThread() throws InterruptedException
1:     {
1:         Random r = new Random();
1:         int threads = 16;
1:         int streamSize = 1000000;
1:         List<Callable<Void>> tasks = new ArrayList<>(threads);
1:         final IntegerInterval interval = new IntegerInterval(0, 0);
1:         int min = 0;
1:         int max = 0;
1:         for (int i = 0; i < threads; ++i)
1:         {
1:             final int seed = r.nextInt();
1:             tasks.add(() -> {
1:                 new Random(seed).ints(streamSize).forEach(v -> interval.expandToCover(v));
1:                 return null;
1:             });
1:             min = Math.min(min, new Random(seed).ints(streamSize).min().getAsInt());
1:             max = Math.max(max, new Random(seed).ints(streamSize).max().getAsInt());
1:         }
1:         for (Future<?> f : Executors.newFixedThreadPool(threads).invokeAll(tasks))
1:             Futures.getUnchecked(f);
1:         assertEquals(min, interval.lower());
1:         assertEquals(max, interval.upper());
1:     }
1: 
1:     void testSetAdd(int l, int r, Integer... expected)
1:     {
1:         Set s = new Set();
1:         s.add(-3, -1);
1:         s.add(1, 3);
1:         s.add(l, r);
1:         assertArrayEquals(expected, s
1:                                     .intervals()
1:                                     .stream()
1:                                     .flatMap(x -> ImmutableList.of(x.lower(), x.upper()).stream())
1:                                     .toArray());
1:     }
1: 
1:     void testSetAdd(int l, int r, String expected)
1:     {
1:         Set s = new Set();
1:         s.add(-3, -1);
1:         s.add(1, 3);
1:         s.add(l, r);
1:         assertEquals(expected, s.toString());
1:     }
1: 
1:     @Test
1:     public void testSetAdd()
1:     {
1:         testSetAdd(Integer.MIN_VALUE, -4, Integer.MIN_VALUE, -4, -3, -1, 1, 3);
1:         testSetAdd(Integer.MIN_VALUE, -3, Integer.MIN_VALUE, -1, 1, 3);
1:         testSetAdd(Integer.MIN_VALUE, -2, Integer.MIN_VALUE, -1, 1, 3);
1:         testSetAdd(Integer.MIN_VALUE, -1, Integer.MIN_VALUE, -1, 1, 3);
1:         testSetAdd(Integer.MIN_VALUE, 0, Integer.MIN_VALUE, 0, 1, 3);
1:         testSetAdd(Integer.MIN_VALUE, 1, Integer.MIN_VALUE, 3);
1:         testSetAdd(Integer.MIN_VALUE, 2, Integer.MIN_VALUE, 3);
1:         testSetAdd(Integer.MIN_VALUE, 3, Integer.MIN_VALUE, 3);
1:         testSetAdd(Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE);
1: 
1:         testSetAdd(-5, -4, "[[-5,-4], [-3,-1], [1,3]]");
1:         testSetAdd(-5, -3, -5, -1, 1, 3);
1:         testSetAdd(-5, -2, -5, -1, 1, 3);
1:         testSetAdd(-5, -1, -5, -1, 1, 3);
1:         testSetAdd(-5, 0, -5, 0, 1, 3);
1:         testSetAdd(-5, 1, -5, 3);
1:         testSetAdd(-5, 2, -5, 3);
1:         testSetAdd(-5, 3, -5, 3);
1:         testSetAdd(-5, 4, -5, 4);
1:         testSetAdd(-5, Integer.MAX_VALUE, -5, Integer.MAX_VALUE);
1: 
1:         testSetAdd(-3, -3, -3, -1, 1, 3);
1:         testSetAdd(-3, -2, -3, -1, 1, 3);
1:         testSetAdd(-3, -1, -3, -1, 1, 3);
1:         testSetAdd(-3, 0, -3, 0, 1, 3);
1:         testSetAdd(-3, 1, "[[-3,3]]");
1:         testSetAdd(-3, 2, -3, 3);
1:         testSetAdd(-3, 3, -3, 3);
1:         testSetAdd(-3, 4, -3, 4);
1:         testSetAdd(-3, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1: 
1:         testSetAdd(-2, -2, -3, -1, 1, 3);
1:         testSetAdd(-2, -1, -3, -1, 1, 3);
1:         testSetAdd(-2, 0, "[[-3,0], [1,3]]");
1:         testSetAdd(-2, 1, -3, 3);
1:         testSetAdd(-2, 2, -3, 3);
1:         testSetAdd(-2, 3, -3, 3);
1:         testSetAdd(-2, 4, -3, 4);
1:         testSetAdd(-2, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1: 
1:         testSetAdd(-1, -1, -3, -1, 1, 3);
1:         testSetAdd(-1, 0, -3, 0, 1, 3);
1:         testSetAdd(-1, 1, -3, 3);
1:         testSetAdd(-1, 2, -3, 3);
1:         testSetAdd(-1, 3, -3, 3);
1:         testSetAdd(-1, 4, -3, 4);
1:         testSetAdd(-1, Integer.MAX_VALUE, -3, Integer.MAX_VALUE);
1: 
1:         testSetAdd(0, 0, -3, -1, 0, 0, 1, 3);
1:         testSetAdd(0, 1, -3, -1, 0, 3);
1:         testSetAdd(0, 2, -3, -1, 0, 3);
1:         testSetAdd(0, 3, -3, -1, 0, 3);
1:         testSetAdd(0, 4, -3, -1, 0, 4);
1:         testSetAdd(0, Integer.MAX_VALUE, -3, -1, 0, Integer.MAX_VALUE);
1: 
1:         testSetAdd(1, 1, -3, -1, 1, 3);
1:         testSetAdd(1, 2, -3, -1, 1, 3);
1:         testSetAdd(1, 3, -3, -1, 1, 3);
1:         testSetAdd(1, 4, -3, -1, 1, 4);
1:         testSetAdd(1, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1: 
1:         testSetAdd(2, 2, -3, -1, 1, 3);
1:         testSetAdd(2, 3, -3, -1, 1, 3);
1:         testSetAdd(2, 4, -3, -1, 1, 4);
1:         testSetAdd(2, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1: 
1:         testSetAdd(3, 3, "[[-3,-1], [1,3]]");
1:         testSetAdd(3, 4, -3, -1, 1, 4);
1:         testSetAdd(3, Integer.MAX_VALUE, -3, -1, 1, Integer.MAX_VALUE);
1: 
1:         testSetAdd(4, 5, -3, -1, 1, 3, 4, 5);
1:         testSetAdd(4, Integer.MAX_VALUE, -3, -1, 1, 3, 4, Integer.MAX_VALUE);
1:     }
1: 
1:     @Test
1:     public void testSetAddMultiThread() throws InterruptedException
1:     {
1:         Random r = new Random();
1:         int threads = 16;
1:         int streamSize = 10000;
1:         List<Callable<Void>> tasks = new ArrayList<>(threads);
1:         final IntegerInterval.Set st = new IntegerInterval.Set();
1:         final IntegerInterval.Set mt = new IntegerInterval.Set();
1:         for (int i = 0; i < threads; ++i)
1:         {
1:             final int seed = r.nextInt();
1:             tasks.add(() -> {
1:                 new Random(seed)
1:                     .ints(streamSize)
1:                     .forEach(v -> mt.add(v, v + 5));
1:                 return null;
1:             });
1:             new Random(seed)
1:                 .ints(streamSize)
1:                 .forEach(v -> st.add(v, v + 5));
1:         }
1:         for (Future<?> f : Executors.newFixedThreadPool(threads).invokeAll(tasks))
1:             Futures.getUnchecked(f);
1:         assertEquals(st, mt);
1:     }
1: 
1:     void testSetCovers(int l, int r, boolean expected)
1:     {
1:         Set s = new Set();
1:         s.add(-3, -1);
1:         s.add(1, 3);
1:         assertEquals(expected, s.covers(new IntegerInterval(l, r)));
1:     }
1: 
1: 
1:     @Test
1:     public void testSetCovers()
1:     {
1:         testSetCovers(Integer.MIN_VALUE, -4, false);
1:         testSetCovers(Integer.MIN_VALUE, -3, false);
1:         testSetCovers(Integer.MIN_VALUE, -2, false);
1:         testSetCovers(Integer.MIN_VALUE, -1, false);
1:         testSetCovers(Integer.MIN_VALUE, 0, false);
1:         testSetCovers(Integer.MIN_VALUE, 1, false);
1:         testSetCovers(Integer.MIN_VALUE, 2, false);
1:         testSetCovers(Integer.MIN_VALUE, 3, false);
1:         testSetCovers(Integer.MIN_VALUE, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(-5, -4, false);
1:         testSetCovers(-5, -3, false);
1:         testSetCovers(-5, -2, false);
1:         testSetCovers(-5, -1, false);
1:         testSetCovers(-5, 0, false);
1:         testSetCovers(-5, 1, false);
1:         testSetCovers(-5, 2, false);
1:         testSetCovers(-5, 3, false);
1:         testSetCovers(-5, 4, false);
1:         testSetCovers(-5, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(-3, -3, true);
1:         testSetCovers(-3, -2, true);
1:         testSetCovers(-3, -1, true);
1:         testSetCovers(-3, 0, false);
1:         testSetCovers(-3, 1, false);
1:         testSetCovers(-3, 2, false);
1:         testSetCovers(-3, 3, false);
1:         testSetCovers(-3, 4, false);
1:         testSetCovers(-3, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(-2, -2, true);
1:         testSetCovers(-2, -1, true);
1:         testSetCovers(-2, 0, false);
1:         testSetCovers(-2, 1, false);
1:         testSetCovers(-2, 2, false);
1:         testSetCovers(-2, 3, false);
1:         testSetCovers(-2, 4, false);
1:         testSetCovers(-2, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(-1, -1, true);
1:         testSetCovers(-1, 0, false);
1:         testSetCovers(-1, 1, false);
1:         testSetCovers(-1, 2, false);
1:         testSetCovers(-1, 3, false);
1:         testSetCovers(-1, 4, false);
1:         testSetCovers(-1, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(0, 0, false);
1:         testSetCovers(0, 1, false);
1:         testSetCovers(0, 2, false);
1:         testSetCovers(0, 3, false);
1:         testSetCovers(0, 4, false);
1:         testSetCovers(0, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(1, 1, true);
1:         testSetCovers(1, 2, true);
1:         testSetCovers(1, 3, true);
1:         testSetCovers(1, 4, false);
1:         testSetCovers(1, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(2, 2, true);
1:         testSetCovers(2, 3, true);
1:         testSetCovers(2, 4, false);
1:         testSetCovers(2, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(3, 3, true);
1:         testSetCovers(3, 4, false);
1:         testSetCovers(3, Integer.MAX_VALUE, false);
1: 
1:         testSetCovers(4, 5, false);
1:         testSetCovers(4, Integer.MAX_VALUE, false);
1:     }
1: }
============================================================================