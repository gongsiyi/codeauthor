1:2c4ac98: /*
1:2c4ac98:  * Licensed to the Apache Software Foundation (ASF) under one
1:2c4ac98:  * or more contributor license agreements.  See the NOTICE file
1:2c4ac98:  * distributed with this work for additional information
1:2c4ac98:  * regarding copyright ownership.  The ASF licenses this file
1:2c4ac98:  * to you under the Apache License, Version 2.0 (the
1:2c4ac98:  * "License"); you may not use this file except in compliance
1:2c4ac98:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
4:2c4ac98:  */
1:2c4ac98: package org.apache.cassandra.db.marshal;
15:2c4ac98: 
1:2c4ac98: import java.nio.ByteBuffer;
1:7364c09: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:a67f779: import org.apache.cassandra.cql3.Term;
1:c8a0a3a: import org.apache.cassandra.db.context.CounterContext;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.CounterSerializer;
1:a991b64: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:2c4ac98: import org.apache.cassandra.utils.ByteBufferUtil;
1:725bfa9: 
1:c8a0a3a: public class CounterColumnType extends AbstractType<Long>
1:c8a0a3a: {
1:2c4ac98:     public static final CounterColumnType instance = new CounterColumnType();
1:a67f779: 
1:07594ee:     CounterColumnType() {super(ComparisonType.NOT_COMPARABLE);} // singleton
1:c8a0a3a: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:a67f779: 
1:c8a0a3a:     public boolean isCounter()
1:a67f779:     {
1:c8a0a3a:         return true;
1:a67f779:     }
1:a67f779: 
1:c8a0a3a:     @Override
1:c8a0a3a:     public Long compose(ByteBuffer bytes)
1:acf1b18:     {
1:c8a0a3a:         return CounterContext.instance().total(bytes);
1:acf1b18:     }
1:4df4f79: 
1:c8a0a3a:     @Override
1:c8a0a3a:     public ByteBuffer decompose(Long value)
1:c8a0a3a:     {
1:c8a0a3a:         return ByteBufferUtil.bytes(value);
1:c8a0a3a:     }
1:acf1b18: 
1:a991b64:     @Override
1:a991b64:     public void validateCellValue(ByteBuffer cellValue) throws MarshalException
1:a991b64:     {
1:a991b64:         CounterContext.instance().validateContext(cellValue);
1:a991b64:     }
1:a991b64: 
1:2c4ac98:     public String getString(ByteBuffer bytes)
1:c8a0a3a:     {
1:7364c09:         return ByteBufferUtil.bytesToHex(bytes);
1:c8a0a3a:     }
1:c8a0a3a: 
1:7364c09:     public ByteBuffer fromString(String source)
1:7364c09:     {
1:7364c09:         return ByteBufferUtil.hexToBytes(source);
1:c8a0a3a:     }
1:c8a0a3a: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed)
1:c7b02d1:     {
1:c7b02d1:         throw new UnsupportedOperationException();
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return CounterSerializer.instance.deserialize(buffer).toString();
1:c7b02d1:     }
1:c7b02d1: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.COUNTER;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<Long> getSerializer()
1:e9c6742:     {
1:e9c6742:         return CounterSerializer.instance;
1:e9c6742:     }
1:7364c09: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     CounterColumnType() {super(ComparisonType.NOT_COMPARABLE);} // singleton
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void validateCellValue(ByteBuffer cellValue) throws MarshalException
1:     {
1:         CounterContext.instance().validateContext(cellValue);
1:     }
1: 
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0:     public Cell createColumn(CellName name, ByteBuffer value, long timestamp)
0:         return new CounterUpdateCell(name, value, timestamp);
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.composites.CellName;
/////////////////////////////////////////////////////////////////////////
0:     public Column createColumn(CellName name, ByteBuffer value, long timestamp)
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.CounterSerializer;
0: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<Long> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.CounterSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public AbstractSerializer<Long> asComposer()
1:     {
1:         return CounterSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.Constants;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.INTEGER);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.COUNTER;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return CounterSerializer.instance.deserialize(buffer).toString();
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
0:     public boolean isByteOrderComparable()
1:     {
0:         throw new AssertionError();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:c8a0a3a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.context.CounterContext;
1: public class CounterColumnType extends AbstractType<Long>
1:     public boolean isCounter()
1:     {
1:         return true;
1:     }
1: 
1:     @Override
1:     public Long compose(ByteBuffer bytes)
1:     {
1:         return CounterContext.instance().total(bytes);
1:     }
1: 
1:     @Override
1:     public ByteBuffer decompose(Long value)
1:     {
1:         return ByteBufferUtil.bytes(value);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d7468ea
/////////////////////////////////////////////////////////////////////////
0:             return o2 == null ?  0 : -1;
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:b95a49c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.HeapAllocator;
commit:7364c09
/////////////////////////////////////////////////////////////////////////
0:         if (o1 == null)
0:             return null == o2 ?  0 : -1;
1:         return ByteBufferUtil.bytesToHex(bytes);
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromString(String source)
1:     {
1:         return ByteBufferUtil.hexToBytes(source);
1:     }
1: 
commit:778d33d
/////////////////////////////////////////////////////////////////////////
0:             if (!(column instanceof CounterColumn)) // DeletedColumn
0:                 continue;
commit:f3630a6
/////////////////////////////////////////////////////////////////////////
0:         return String.valueOf(bytes.getLong(bytes.position()));
/////////////////////////////////////////////////////////////////////////
0:         return new CounterUpdateColumn(name, value, timestamp);
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.*;
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(Long l)
0:     {
0:         return l.toString();
0:     }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:ab5a8c7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
0: import java.net.InetAddress;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.CounterColumn;
0: import org.apache.cassandra.db.Column;
0: import org.apache.cassandra.db.DeletedColumn;
0: import org.apache.cassandra.db.IColumn;
0: import org.apache.cassandra.db.IColumnContainer;
0: import org.apache.cassandra.db.SuperColumn;
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class CounterColumnType extends AbstractCommutativeType
0: {
1:     public static final CounterColumnType instance = new CounterColumnType();
1: 
0:     CounterColumnType() {} // singleton
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:     {
0:         if (o1.remaining() == 0)
0:         {
0:             return o2.remaining() == 0 ? 0 : -1;
0:         }
0:         if (o2.remaining() == 0)
0:         {
0:             return 1;
0:         }
1: 
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
0:     }
1: 
1:     public String getString(ByteBuffer bytes)
0:     {
0:         if (bytes.remaining() == 0)
0:         {
0:             return "";
0:         }
0:         if (bytes.remaining() != 8)
0:         {
0:             throw new MarshalException("A long is exactly 8 bytes");
0:         }
0:         return String.valueOf(bytes.getLong(bytes.position()+bytes.arrayOffset()));
0:     }
1: 
0:     /**
0:      * create commutative column
1:      */
0:     public Column createColumn(ByteBuffer name, ByteBuffer value, long timestamp)
0:     {
0:         return new CounterColumn(name, value, timestamp);
0:     }
1: 
0:     /**
0:      * update commutative columns for target node
1:      */
0:     public void update(IColumnContainer cc, InetAddress node)
0:     {
0:         for (IColumn column : cc.getSortedColumns())
0:         {
0:             if (column instanceof SuperColumn)
0:             {
0:                 update((IColumnContainer)column, node);
0:                 continue;
0:             }
1:             
0:             if (column instanceof DeletedColumn)
0:                 continue;
1:             
0:             ((CounterColumn)column).update(node);
0:         }
0:     }
1: 
0:     /**
0:      * remove target node from commutative columns
1:      */
0:     public void cleanContext(IColumnContainer cc, InetAddress node)
0:     {
0:         if ((cc instanceof ColumnFamily) && ((ColumnFamily)cc).isSuper())
0:         {
0:             for (IColumn column : cc.getSortedColumns())
0:             {
0:                 SuperColumn supercol = (SuperColumn)column;
0:                 cleanContext(supercol, node);
0:                 if (0 == supercol.getSubColumns().size())
0:                     cc.remove(supercol.name());
0:             }
0:             return;
0:         }
1: 
0:         for (IColumn column : cc.getSortedColumns())
0:         {
0:             CounterColumn counterColumn = (CounterColumn)column;
0:             CounterColumn cleanedColumn = counterColumn.cleanNodeCounts(node);
0:             if (cleanedColumn == counterColumn)
0:                 continue;
0:             cc.remove(counterColumn.name());
0:             //XXX: on "clean," must copy-and-replace
0:             if (null != cleanedColumn)
0:                 cc.addColumn(cleanedColumn);
0:         }
0:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
0:             throw new MarshalException(String.format("Expected 8 or 0 byte long (%d)", bytes.remaining()));
0:     }
0: }
1: 
============================================================================