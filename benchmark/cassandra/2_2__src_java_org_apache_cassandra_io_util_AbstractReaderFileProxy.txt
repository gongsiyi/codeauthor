1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
1:30bb255:  */
1:30bb255: 
1:30bb255: package org.apache.cassandra.io.util;
1:30bb255: 
1:30bb255: public abstract class AbstractReaderFileProxy implements ReaderFileProxy
1:30bb255: {
1:30bb255:     protected final ChannelProxy channel;
1:30bb255:     protected final long fileLength;
1:30bb255: 
1:b4133f3:     protected AbstractReaderFileProxy(ChannelProxy channel, long fileLength)
1:30bb255:     {
1:30bb255:         this.channel = channel;
1:30bb255:         this.fileLength = fileLength >= 0 ? fileLength : channel.size();
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public ChannelProxy channel()
1:30bb255:     {
1:30bb255:         return channel;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public long fileLength()
1:30bb255:     {
1:30bb255:         return fileLength;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public String toString()
1:30bb255:     {
1:30bb255:         return getClass().getSimpleName() + "(filePath='" + channel + "')";
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public void close()
1:30bb255:     {
1:30bb255:         // nothing in base class
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public double getCrcCheckChance()
1:30bb255:     {
1:30bb255:         return 0; // Only valid for compressed files.
1:30bb255:     }
1:30bb255: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1:     protected AbstractReaderFileProxy(ChannelProxy channel, long fileLength)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: public abstract class AbstractReaderFileProxy implements ReaderFileProxy
1: {
1:     protected final ChannelProxy channel;
1:     protected final long fileLength;
1: 
0:     public AbstractReaderFileProxy(ChannelProxy channel, long fileLength)
1:     {
1:         this.channel = channel;
1:         this.fileLength = fileLength >= 0 ? fileLength : channel.size();
1:     }
1: 
1:     @Override
1:     public ChannelProxy channel()
1:     {
1:         return channel;
1:     }
1: 
1:     @Override
1:     public long fileLength()
1:     {
1:         return fileLength;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return getClass().getSimpleName() + "(filePath='" + channel + "')";
1:     }
1: 
1:     @Override
1:     public void close()
1:     {
1:         // nothing in base class
1:     }
1: 
1:     @Override
1:     public double getCrcCheckChance()
1:     {
1:         return 0; // Only valid for compressed files.
1:     }
1: }
============================================================================