1:94cc9a4: /*
1:94cc9a4:  * Licensed to the Apache Software Foundation (ASF) under one
1:94cc9a4:  * or more contributor license agreements.  See the NOTICE file
1:94cc9a4:  * distributed with this work for additional information
1:94cc9a4:  * regarding copyright ownership.  The ASF licenses this file
1:94cc9a4:  * to you under the Apache License, Version 2.0 (the
1:94cc9a4:  * "License"); you may not use this file except in compliance
1:94cc9a4:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:94cc9a4:  */
1:5a45534: package org.apache.cassandra.service;
1:5a45534: 
1:5a45534: import java.net.InetAddress;
1:5a45534: import java.util.Collection;
1:39df31a: import java.util.Map;
1:39df31a: import java.util.concurrent.ConcurrentHashMap;
1:5a45534: import java.util.concurrent.TimeUnit;
1:c059a56: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:ef25537: 
1:5267112: import com.google.common.collect.Iterables;
1:d43b9ce: 
1:c059a56: import org.slf4j.Logger;
1:c059a56: import org.slf4j.LoggerFactory;
1:5a45534: 
1:5a45534: import org.apache.cassandra.config.DatabaseDescriptor;
1:5267112: import org.apache.cassandra.db.ConsistencyLevel;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:5267112: import org.apache.cassandra.db.WriteType;
1:ee5aafe: import org.apache.cassandra.exceptions.*;
1:c059a56: import org.apache.cassandra.net.IAsyncCallbackWithFailure;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5420b7a: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1:5a45534: 
1:c059a56: public abstract class AbstractWriteResponseHandler<T> implements IAsyncCallbackWithFailure<T>
1:dc97a8f: {
1:c059a56:     protected static final Logger logger = LoggerFactory.getLogger( AbstractWriteResponseHandler.class );
1:e6610e4: 
1:7371e10:     private final SimpleCondition condition = new SimpleCondition();
1:0e96e58:     protected final Keyspace keyspace;
1:dc97a8f:     protected final Collection<InetAddress> naturalEndpoints;
1:111c74e:     public final ConsistencyLevel consistencyLevel;
1:7371e10:     protected final Runnable callback;
1:dc97a8f:     protected final Collection<InetAddress> pendingEndpoints;
1:3c43775:     protected final WriteType writeType;
1:c059a56:     private static final AtomicIntegerFieldUpdater<AbstractWriteResponseHandler> failuresUpdater
1:c059a56:         = AtomicIntegerFieldUpdater.newUpdater(AbstractWriteResponseHandler.class, "failures");
1:c059a56:     private volatile int failures = 0;
1:39df31a:     private final Map<InetAddress, RequestFailureReason> failureReasonByEndpoint;
1:aa83c94:     private final long queryStartNanoTime;
1:d43b9ce:     private volatile boolean supportsBackPressure = true;
1:5a45534: 
2:c059a56:     /**
1:7371e10:      * @param callback A callback to be called when the write is successful.
1:aa83c94:      * @param queryStartNanoTime
1:7371e10:      */
1:0e96e58:     protected AbstractWriteResponseHandler(Keyspace keyspace,
1:5267112:                                            Collection<InetAddress> naturalEndpoints,
1:ee5aafe:                                            Collection<InetAddress> pendingEndpoints,
1:ee5aafe:                                            ConsistencyLevel consistencyLevel,
1:ee5aafe:                                            Runnable callback,
1:aa83c94:                                            WriteType writeType,
1:aa83c94:                                            long queryStartNanoTime)
1:5a45534:     {
1:0e96e58:         this.keyspace = keyspace;
1:dc97a8f:         this.pendingEndpoints = pendingEndpoints;
1:5a45534:         this.consistencyLevel = consistencyLevel;
1:dc97a8f:         this.naturalEndpoints = naturalEndpoints;
1:7371e10:         this.callback = callback;
1:ee5aafe:         this.writeType = writeType;
1:39df31a:         this.failureReasonByEndpoint = new ConcurrentHashMap<>();
1:aa83c94:         this.queryStartNanoTime = queryStartNanoTime;
1:dc97a8f:     }
1:3893f24: 
1:c059a56:     public void get() throws WriteTimeoutException, WriteFailureException
1:3893f24:     {
1:d43b9ce:         long timeout = currentTimeout();
1:3893f24: 
1:5a45534:         boolean success;
1:3893f24:         try
1:3893f24:         {
1:1d2c122:             success = condition.await(timeout, TimeUnit.NANOSECONDS);
1:3893f24:         }
1:5a45534:         catch (InterruptedException ex)
1:3893f24:         {
1:5a45534:             throw new AssertionError(ex);
1:3893f24:         }
1:3893f24: 
1:5a45534:         if (!success)
1:3893f24:         {
1:b73178d:             int blockedFor = totalBlockFor();
1:c059a56:             int acks = ackCount();
1:b73178d:             // It's pretty unlikely, but we can race between exiting await above and here, so
1:b73178d:             // that we could now have enough acks. In that case, we "lie" on the acks count to
1:1949212:             // avoid sending confusing info to the user (see CASSANDRA-6491).
1:b73178d:             if (acks >= blockedFor)
1:b73178d:                 acks = blockedFor - 1;
1:b73178d:             throw new WriteTimeoutException(writeType, consistencyLevel, acks, blockedFor);
1:3893f24:         }
1:c9a13c3: 
1:c059a56:         if (totalBlockFor() + failures > totalEndpoints())
1:4ac23ca:         {
1:39df31a:             throw new WriteFailureException(consistencyLevel, ackCount(), totalBlockFor(), writeType, failureReasonByEndpoint);
1:3893f24:         }
1:4ac23ca:     }
1:4ac23ca: 
1:d43b9ce:     public final long currentTimeout()
1:d43b9ce:     {
1:d43b9ce:         long requestTimeout = writeType == WriteType.COUNTER
1:d43b9ce:                               ? DatabaseDescriptor.getCounterWriteRpcTimeout()
1:d43b9ce:                               : DatabaseDescriptor.getWriteRpcTimeout();
1:d43b9ce:         return TimeUnit.MILLISECONDS.toNanos(requestTimeout) - (System.nanoTime() - queryStartNanoTime);
1:d43b9ce:     }
1:d43b9ce: 
1:68d2526:     /**
1:68d2526:      * @return the minimum number of endpoints that must reply.
1:c059a56:      */
1:6577bae:     protected int totalBlockFor()
1:5a45534:     {
1:6577bae:         // During bootstrap, we have to include the pending endpoints or we may fail the consistency level
1:6577bae:         // guarantees (see #833)
1:0e96e58:         return consistencyLevel.blockFor(keyspace) + pendingEndpoints.size();
1:5a45534:     }
1:5a45534: 
1:68d2526:     /**
1:68d2526:      * @return the total number of endpoints the request has been sent to.
1:c059a56:      */
1:c059a56:     protected int totalEndpoints()
1:5a45534:     {
1:c059a56:         return naturalEndpoints.size() + pendingEndpoints.size();
1:5a45534:     }
1:5a45534: 
1:c059a56:     /**
1:c059a56:      * @return true if the message counts towards the totalBlockFor() threshold
1:c059a56:      */
1:c059a56:     protected boolean waitingFor(InetAddress from)
1:5a45534:     {
1:c059a56:         return true;
1:5a45534:     }
1:5a45534: 
1:c059a56:     /**
1:c059a56:      * @return number of responses received
1:c059a56:      */
1:c9a13c3:     protected abstract int ackCount();
1:dc97a8f: 
1:5a45534:     /** null message means "response from local write" */
1:c059a56:     public abstract void response(MessageIn<T> msg);
1:5a45534: 
1:5267112:     public void assureSufficientLiveNodes() throws UnavailableException
1:5a45534:     {
1:0e96e58:         consistencyLevel.assureSufficientLiveNodes(keyspace, Iterables.filter(Iterables.concat(naturalEndpoints, pendingEndpoints), isAlive));
1:5a45534:     }
1:c059a56: 
1:7371e10:     protected void signal()
1:5a45534:     {
1:3ec4ff5:         condition.signalAll();
1:7371e10:         if (callback != null)
1:7371e10:             callback.run();
1:5a45534:     }
1:c059a56: 
1:c059a56:     @Override
1:39df31a:     public void onFailure(InetAddress from, RequestFailureReason failureReason)
1:c059a56:     {
1:c059a56:         logger.trace("Got failure from {}", from);
1:c059a56: 
1:c059a56:         int n = waitingFor(from)
1:c059a56:               ? failuresUpdater.incrementAndGet(this)
1:c059a56:               : failures;
1:c059a56: 
1:39df31a:         failureReasonByEndpoint.put(from, failureReason);
1:39df31a: 
1:c059a56:         if (totalBlockFor() + n > totalEndpoints())
1:c059a56:             signal();
1:5a45534:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public boolean supportsBackPressure()
1:d43b9ce:     {
1:d43b9ce:         return supportsBackPressure;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     public void setSupportsBackPressure(boolean supportsBackPressure)
1:d43b9ce:     {
1:d43b9ce:         this.supportsBackPressure = supportsBackPressure;
1:d43b9ce:     }
1:c059a56: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private volatile boolean supportsBackPressure = true;
/////////////////////////////////////////////////////////////////////////
1:         long timeout = currentTimeout();
/////////////////////////////////////////////////////////////////////////
1:     public final long currentTimeout()
1:     {
1:         long requestTimeout = writeType == WriteType.COUNTER
1:                               ? DatabaseDescriptor.getCounterWriteRpcTimeout()
1:                               : DatabaseDescriptor.getWriteRpcTimeout();
1:         return TimeUnit.MILLISECONDS.toNanos(requestTimeout) - (System.nanoTime() - queryStartNanoTime);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean supportsBackPressure()
1:     {
1:         return supportsBackPressure;
1:     }
1: 
1:     public void setSupportsBackPressure(boolean supportsBackPressure)
1:     {
1:         this.supportsBackPressure = supportsBackPressure;
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the minimum number of endpoints that must reply.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the total number of endpoints the request has been sent to.
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<InetAddress, RequestFailureReason> failureReasonByEndpoint;
/////////////////////////////////////////////////////////////////////////
1:         this.failureReasonByEndpoint = new ConcurrentHashMap<>();
/////////////////////////////////////////////////////////////////////////
1:             throw new WriteFailureException(consistencyLevel, ackCount(), totalBlockFor(), writeType, failureReasonByEndpoint);
/////////////////////////////////////////////////////////////////////////
1:     public void onFailure(InetAddress from, RequestFailureReason failureReason)
/////////////////////////////////////////////////////////////////////////
1:         failureReasonByEndpoint.put(from, failureReason);
1: 
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final long queryStartNanoTime;
1:      * @param queryStartNanoTime
1:                                            WriteType writeType,
1:                                            long queryStartNanoTime)
1:         this.queryStartNanoTime = queryStartNanoTime;
/////////////////////////////////////////////////////////////////////////
0:         long timeout = TimeUnit.MILLISECONDS.toNanos(requestTimeout) - (System.nanoTime() - queryStartNanoTime);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
1:     protected final WriteType writeType;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
0:     private final WriteType writeType;
commit:1949212
/////////////////////////////////////////////////////////////////////////
1:             // avoid sending confusing info to the user (see CASSANDRA-6491).
commit:111c74e
/////////////////////////////////////////////////////////////////////////
1:     public final ConsistencyLevel consistencyLevel;
commit:3ec4ff5
/////////////////////////////////////////////////////////////////////////
1:         condition.signalAll();
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
0:     protected final long start;
/////////////////////////////////////////////////////////////////////////
0:         this.start = System.nanoTime();
/////////////////////////////////////////////////////////////////////////
0:         long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getWriteRpcTimeout()) - (System.nanoTime() - start);
1:             success = condition.await(timeout, TimeUnit.NANOSECONDS);
commit:8b0e186
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:dc97a8f
/////////////////////////////////////////////////////////////////////////
1:     protected final Collection<InetAddress> naturalEndpoints;
1:     protected final Collection<InetAddress> pendingEndpoints;
0:      * @param pendingEndpoints
0:     protected AbstractWriteResponseHandler(Collection<InetAddress> naturalEndpoints, Collection<InetAddress> pendingEndpoints, ConsistencyLevel consistencyLevel, Runnable callback)
1:         this.pendingEndpoints = pendingEndpoints;
1:         this.naturalEndpoints = naturalEndpoints;
/////////////////////////////////////////////////////////////////////////
0:     protected int blockFor()
1:     {
0:         return blockForCL() + pendingEndpoints.size();
1:     }
1: 
0:     protected abstract int blockForCL();
commit:84c0657
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.IAsyncCallback;
0: public abstract class AbstractWriteResponseHandler implements IAsyncCallback
commit:b38ca28
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(consistencyLevel, ackCount(), blockFor(), false);
commit:c9a13c3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.TimedOutException;
/////////////////////////////////////////////////////////////////////////
0:     public void get() throws TimedOutException
/////////////////////////////////////////////////////////////////////////
0:             throw new TimedOutException().setAcknowledged_by(ackCount());
1:     protected abstract int ackCount();
1: 
commit:e6610e4
/////////////////////////////////////////////////////////////////////////
0:         long timeout = DatabaseDescriptor.getWriteRpcTimeout() - (System.currentTimeMillis() - startTime);
1: 
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public abstract void response(MessageIn msg);
commit:3893f24
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.concurrent.ExecutionException;
0: import org.apache.cassandra.concurrent.CreationTimeAwareFuture;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:     protected List<CreationTimeAwareFuture<?>> hintFutures;
0:     protected AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel)
0:         if (hintFutures != null)
0:             waitForHints(hintFutures);
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void addFutureForHint(CreationTimeAwareFuture<?> hintFuture)
1:     {
0:         if (hintFutures == null)
0:             hintFutures = new ArrayList<CreationTimeAwareFuture<?>>(writeEndpoints.size());
0:         hintFutures.add(hintFuture);
1:     }
1: 
0:     protected static void waitForHints(List<CreationTimeAwareFuture<?>> hintFutures) throws TimeoutException
1:     {
0:         // Wait for hints
1:         try
1:         {
0:             FBUtilities.waitOnFutures(hintFutures, DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
1:         } 
0:         catch (RuntimeException e)
1:         {
0:             // ExecutionEx needs a special treatment. We need to inform the client to back off because this node is overwhelmed.
0:             if (e.getCause() != null && e.getCause() instanceof ExecutionException)
0:                 throw new TimeoutException();
0:             throw e;
1:         }
1:     }
1: 
commit:745fb44
/////////////////////////////////////////////////////////////////////////
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().addCallback(this, hintedMessage.getMessageId());
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: 
commit:4ac23ca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessagingService;
0: public abstract class AbstractWriteResponseHandler implements IWriteResponseHandler
/////////////////////////////////////////////////////////////////////////
0:     protected AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel)
/////////////////////////////////////////////////////////////////////////
0:     public void addHintCallback(Message hintedMessage, InetAddress destination)
1:     {
0:         // (non-destination hints are part of the callback and count towards consistency only under CL.ANY)
0:         if (writeEndpoints.contains(destination) || consistencyLevel == ConsistencyLevel.ANY)
0:             MessagingService.instance.addCallback(this, hintedMessage.getMessageId());
1:     }
1: 
commit:5a45534
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.service;
1: 
1: import java.net.InetAddress;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
1: 
0: import com.google.common.collect.Multimap;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.net.IAsyncCallback;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
0: import org.apache.cassandra.utils.SimpleCondition;
1: 
0: public abstract class AbstractWriteResponseHandler implements IAsyncCallback
1: {
0:     protected final SimpleCondition condition = new SimpleCondition();
0:     protected final long startTime;
0:     protected final Collection<InetAddress> writeEndpoints;
0:     protected final Multimap<InetAddress, InetAddress> hintedEndpoints;
0:     protected final ConsistencyLevel consistencyLevel;
1: 
0:     public AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel)
1:     {
0:         startTime = System.currentTimeMillis();
1:         this.consistencyLevel = consistencyLevel;
0:         this.hintedEndpoints = hintedEndpoints;
0:         this.writeEndpoints = writeEndpoints;
1:     }
1: 
0:     public void get() throws TimeoutException
1:     {
0:         long timeout = DatabaseDescriptor.getRpcTimeout() - (System.currentTimeMillis() - startTime);
1:         boolean success;
0:         try
1:         {
0:             success = condition.await(timeout, TimeUnit.MILLISECONDS);
1:         }
1:         catch (InterruptedException ex)
1:         {
1:             throw new AssertionError(ex);
1:         }
1: 
1:         if (!success)
1:         {
0:             throw new TimeoutException();
1:         }
1:     }
1: 
1:     /** null message means "response from local write" */
0:     public abstract void response(Message msg);
1: 
0:     public abstract void assureSufficientLiveNodes() throws UnavailableException;
1: }
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
0:     protected final WriteType writeType;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c059a56
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.IAsyncCallbackWithFailure;
1: public abstract class AbstractWriteResponseHandler<T> implements IAsyncCallbackWithFailure<T>
1:     protected static final Logger logger = LoggerFactory.getLogger( AbstractWriteResponseHandler.class );
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final AtomicIntegerFieldUpdater<AbstractWriteResponseHandler> failuresUpdater
1:         = AtomicIntegerFieldUpdater.newUpdater(AbstractWriteResponseHandler.class, "failures");
1:     private volatile int failures = 0;
/////////////////////////////////////////////////////////////////////////
1:     public void get() throws WriteTimeoutException, WriteFailureException
/////////////////////////////////////////////////////////////////////////
1:             int acks = ackCount();
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (totalBlockFor() + failures > totalEndpoints())
1:         {
0:             throw new WriteFailureException(consistencyLevel, ackCount(), failures, totalBlockFor(), writeType);
1:         }
1:     /** 
0:      * @return the minimum number of endpoints that must reply. 
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /** 
0:      * @return the total number of endpoints the request has been sent to. 
1:      */
1:     protected int totalEndpoints()
0:     {
1:         return naturalEndpoints.size() + pendingEndpoints.size();
0:     }
1: 
1:     /**
1:      * @return true if the message counts towards the totalBlockFor() threshold
1:      */
1:     protected boolean waitingFor(InetAddress from)
0:     {
1:         return true;
0:     }
1: 
1:     /**
1:      * @return number of responses received
1:      */
1:     public abstract void response(MessageIn<T> msg);
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
0:     public void onFailure(InetAddress from)
0:     {
1:         logger.trace("Got failure from {}", from);
0: 
1:         int n = waitingFor(from)
1:               ? failuresUpdater.incrementAndGet(this)
1:               : failures;
0: 
1:         if (totalBlockFor() + n > totalEndpoints())
1:             signal();
0:     }
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.concurrent.SimpleCondition;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:714c423
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         long requestTimeout = writeType == WriteType.COUNTER
0:                             ? DatabaseDescriptor.getCounterWriteRpcTimeout()
0:                             : DatabaseDescriptor.getWriteRpcTimeout();
0: 
0:         long timeout = TimeUnit.MILLISECONDS.toNanos(requestTimeout) - (System.nanoTime() - start);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
1:     protected final Keyspace keyspace;
/////////////////////////////////////////////////////////////////////////
1:     protected AbstractWriteResponseHandler(Keyspace keyspace,
1:         this.keyspace = keyspace;
/////////////////////////////////////////////////////////////////////////
1:         return consistencyLevel.blockFor(keyspace) + pendingEndpoints.size();
/////////////////////////////////////////////////////////////////////////
1:         consistencyLevel.assureSufficientLiveNodes(keyspace, Iterables.filter(Iterables.concat(naturalEndpoints, pendingEndpoints), isAlive));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1727ea7
commit:b73178d
/////////////////////////////////////////////////////////////////////////
0:         {
0:             int acks = ackCount();
1:             int blockedFor = totalBlockFor();
1:             // It's pretty unlikely, but we can race between exiting await above and here, so
1:             // that we could now have enough acks. In that case, we "lie" on the acks count to
0:             // avoid sending confusing info to the user (see CASSANDRA-).
1:             if (acks >= blockedFor)
1:                 acks = blockedFor - 1;
1:             throw new WriteTimeoutException(writeType, consistencyLevel, acks, blockedFor);
0:         }
commit:6577bae
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(writeType, consistencyLevel, ackCount(), totalBlockFor());
0:     }
0: 
1:     protected int totalBlockFor()
0:     {
1:         // During bootstrap, we have to include the pending endpoints or we may fail the consistency level
1:         // guarantees (see #833)
0:         return consistencyLevel.blockFor(table) + pendingEndpoints.size();
commit:4d29c70
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(writeType, consistencyLevel, ackCount(), totalBlockFor());
0:     }
0: 
0:     protected int totalBlockFor()
0:     {
0:         // During bootstrap, we have to include the pending endpoints or we may fail the consistency level
0:         // guarantees (see #833)
0:         return consistencyLevel.blockFor(table) + pendingEndpoints.size();
commit:5267112
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Predicate;
1: import com.google.common.collect.Iterables;
0: 
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.db.Table;
1: import org.apache.cassandra.db.WriteType;
0: import org.apache.cassandra.gms.FailureDetector;
0:     private static Predicate<InetAddress> isAlive = new Predicate<InetAddress>()
0:     {
0:         public boolean apply(InetAddress endpoint)
0:         {
0:             return FailureDetector.instance.isAlive(endpoint);
0:         }
0:     };
0: 
0:     protected final Table table;
/////////////////////////////////////////////////////////////////////////
0:     protected AbstractWriteResponseHandler(Table table,
1:                                            Collection<InetAddress> naturalEndpoints,
0:         this.table = table;
0:         this.startTime = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(writeType, consistencyLevel, ackCount(), consistencyLevel.blockFor(table) + pendingEndpoints.size());
1:     public void assureSufficientLiveNodes() throws UnavailableException
0:     {
0:         consistencyLevel.assureSufficientLiveNodes(table, Iterables.filter(Iterables.concat(naturalEndpoints, pendingEndpoints), isAlive));
0:     }
commit:ee5aafe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.*;
0: import org.apache.cassandra.db.WriteType;
/////////////////////////////////////////////////////////////////////////
0:     private final WriteType writeType;
0:     protected AbstractWriteResponseHandler(Collection<InetAddress> naturalEndpoints,
1:                                            Collection<InetAddress> pendingEndpoints,
1:                                            ConsistencyLevel consistencyLevel,
1:                                            Runnable callback,
0:                                            WriteType writeType)
1:         this.writeType = writeType;
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(writeType, consistencyLevel, ackCount(), blockFor());
commit:d5fc193
commit:7371e10
/////////////////////////////////////////////////////////////////////////
1:     private final SimpleCondition condition = new SimpleCondition();
1:     protected final Runnable callback;
0:     /**
1:      * @param callback A callback to be called when the write is successful.
0:      * Note that this callback will *not* be called in case of an exception (timeout or unavailable).
1:      */
0:     protected AbstractWriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, Runnable callback)
1:         this.callback = callback;
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void signal()
0:     {
0:         condition.signal();
1:         if (callback != null)
1:             callback.run();
0:     }
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.UnavailableException;
0: import org.apache.cassandra.exceptions.WriteTimeoutException;
0: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:     public void get() throws WriteTimeoutException
/////////////////////////////////////////////////////////////////////////
0:             throw new WriteTimeoutException(consistencyLevel, ackCount(), blockFor());
0:     protected abstract int blockFor();
0: 
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.service;
commit:f943a6e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:94cc9a4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================