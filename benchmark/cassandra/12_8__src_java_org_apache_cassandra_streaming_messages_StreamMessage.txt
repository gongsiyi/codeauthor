1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming.messages;
1:5151169: 
1:5151169: import java.io.IOException;
1:2267d79: import java.net.SocketException;
1:5151169: import java.nio.ByteBuffer;
1:5151169: import java.nio.channels.ReadableByteChannel;
1:5151169: 
1:16499ca: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1:5151169: import org.apache.cassandra.streaming.StreamSession;
1:5151169: 
1:5151169: /**
1:5151169:  * StreamMessage is an abstract base class that every messages in streaming protocol inherit.
1:5151169:  *
1:5151169:  * Every message carries message type({@link Type}) and streaming protocol version byte.
1:5151169:  */
1:5151169: public abstract class StreamMessage
1:5151169: {
1:5151169:     /** Streaming protocol version */
1:0368e97:     public static final int VERSION_20 = 2;
1:79e1e80:     public static final int VERSION_22 = 3;
1:a991b64:     public static final int VERSION_30 = 4;
1:a991b64:     public static final int CURRENT_VERSION = VERSION_30;
1:5151169: 
1:8af61ac:     private transient volatile boolean sent = false;
1:8af61ac: 
1:16499ca:     public static void serialize(StreamMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
1:5151169:     {
1:5151169:         ByteBuffer buff = ByteBuffer.allocate(1);
1:5151169:         // message type
1:5151169:         buff.put(message.type.type);
2:5151169:         buff.flip();
1:41ffca1:         out.write(buff);
1:36af409:         message.type.outSerializer.serialize(message, out, version, session);
1:5151169:     }
1:5151169: 
1:5151169:     public static StreamMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:22bf2c4:     {
1:5151169:         ByteBuffer buff = ByteBuffer.allocate(1);
1:2267d79:         int readBytes = in.read(buff);
1:2267d79:         if (readBytes > 0)
1:5151169:         {
1:22bf2c4:             buff.flip();
1:22bf2c4:             Type type = Type.get(buff.get());
1:36af409:             return type.inSerializer.deserialize(in, version, session);
1:22bf2c4:         }
1:2267d79:         else if (readBytes == 0)
1:22bf2c4:         {
1:2267d79:             // input socket buffer was not filled yet
1:22bf2c4:             return null;
1:5151169:         }
1:22bf2c4:         else
1:2267d79:         {
1:2267d79:             // possibly socket gets closed
1:2267d79:             throw new SocketException("End-of-stream reached");
1:22bf2c4:         }
1:2267d79:     }
1:5151169: 
1:8af61ac:     public void sent()
1:8af61ac:     {
1:8af61ac:         sent = true;
1:8af61ac:     }
1:8af61ac: 
1:8af61ac:     public boolean wasSent()
1:8af61ac:     {
1:8af61ac:         return sent;
1:8af61ac:     }
1:8af61ac: 
1:5151169:     /** StreamMessage serializer */
1:5151169:     public static interface Serializer<V extends StreamMessage>
1:5151169:     {
1:5151169:         V deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException;
1:16499ca:         void serialize(V message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException;
1:5151169:     }
1:5151169: 
1:5151169:     /** StreamMessage types */
1:5151169:     public static enum Type
1:5151169:     {
1:5151169:         PREPARE(1, 5, PrepareMessage.serializer),
1:36af409:         FILE(2, 0, IncomingFileMessage.serializer, OutgoingFileMessage.serializer),
1:931be48:         RECEIVED(3, 4, ReceivedMessage.serializer),
1:931be48:         RETRY(4, 4, RetryMessage.serializer),
1:931be48:         COMPLETE(5, 1, CompleteMessage.serializer),
1:8af61ac:         SESSION_FAILED(6, 5, SessionFailedMessage.serializer),
1:8af61ac:         KEEP_ALIVE(7, 5, KeepAliveMessage.serializer);
1:5151169: 
1:5151169:         public static Type get(byte type)
1:5151169:         {
1:5151169:             for (Type t : Type.values())
1:5151169:             {
1:5151169:                 if (t.type == type)
1:5151169:                     return t;
1:5151169:             }
1:5151169:             throw new IllegalArgumentException("Unknown type " + type);
1:5151169:         }
1:5151169: 
1:5151169:         private final byte type;
1:5151169:         public final int priority;
1:36af409:         public final Serializer<StreamMessage> inSerializer;
1:36af409:         public final Serializer<StreamMessage> outSerializer;
1:5151169: 
1:5151169:         @SuppressWarnings("unchecked")
1:5151169:         private Type(int type, int priority, Serializer serializer)
1:5151169:         {
1:36af409:             this(type, priority, serializer, serializer);
1:36af409:         }
1:36af409: 
1:36af409:         @SuppressWarnings("unchecked")
1:36af409:         private Type(int type, int priority, Serializer inSerializer, Serializer outSerializer)
1:36af409:         {
1:5151169:             this.type = (byte) type;
1:5151169:             this.priority = priority;
1:36af409:             this.inSerializer = inSerializer;
1:36af409:             this.outSerializer = outSerializer;
1:5151169:         }
1:5151169:     }
1:5151169: 
1:5151169:     public final Type type;
1:5151169: 
1:5151169:     protected StreamMessage(Type type)
1:5151169:     {
1:5151169:         this.type = type;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return priority of this message. higher value, higher priority.
1:5151169:      */
1:5151169:     public int getPriority()
1:5151169:     {
1:5151169:         return type.priority;
1:5151169:     }
1:5151169: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:8af61ac
/////////////////////////////////////////////////////////////////////////
1:     private transient volatile boolean sent = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void sent()
1:     {
1:         sent = true;
1:     }
1: 
1:     public boolean wasSent()
1:     {
1:         return sent;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         SESSION_FAILED(6, 5, SessionFailedMessage.serializer),
1:         KEEP_ALIVE(7, 5, KeepAliveMessage.serializer);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:ae669b0
commit:02e5478
commit:41ffca1
/////////////////////////////////////////////////////////////////////////
0:         while (buff.hasRemaining())
1:             out.write(buff);
commit:22bf2c4
/////////////////////////////////////////////////////////////////////////
0:         if (in.read(buff) > 0)
1:         {
1:             buff.flip();
1:             Type type = Type.get(buff.get());
0:             return type.serializer.deserialize(in, version, session);
1:         }
1:         else
1:         {
0:             // when socket gets closed, there is a chance that buff is empty
0:             // in that case, just return null
1:             return null;
1:         }
commit:931be48
/////////////////////////////////////////////////////////////////////////
1:         RECEIVED(3, 4, ReceivedMessage.serializer),
1:         RETRY(4, 4, RetryMessage.serializer),
1:         COMPLETE(5, 1, CompleteMessage.serializer),
commit:dfc9faf
/////////////////////////////////////////////////////////////////////////
0:         RECEIVED(3, 1, ReceivedMessage.serializer),
0:         RETRY(4, 1, RetryMessage.serializer),
0:         COMPLETE(5, 4, CompleteMessage.serializer),
0:         SESSION_FAILED(6, 5, SessionFailedMessage.serializer);
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.messages;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.ReadableByteChannel;
0: import java.nio.channels.WritableByteChannel;
1: 
1: import org.apache.cassandra.streaming.StreamSession;
1: 
1: /**
1:  * StreamMessage is an abstract base class that every messages in streaming protocol inherit.
1:  *
1:  * Every message carries message type({@link Type}) and streaming protocol version byte.
1:  */
1: public abstract class StreamMessage
1: {
1:     /** Streaming protocol version */
0:     public static final int CURRENT_VERSION = 1;
1: 
0:     public static void serialize(StreamMessage message, WritableByteChannel out, int version, StreamSession session) throws IOException
1:     {
1:         ByteBuffer buff = ByteBuffer.allocate(1);
1:         // message type
1:         buff.put(message.type.type);
1:         buff.flip();
0:         out.write(buff);
0:         message.type.serializer.serialize(message, out, version, session);
1:     }
1: 
1:     public static StreamMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:     {
1:         ByteBuffer buff = ByteBuffer.allocate(1);
0:         in.read(buff);
1:         buff.flip();
0:         Type type = Type.get(buff.get());
0:         return type.serializer.deserialize(in, version, session);
1:     }
1: 
1:     /** StreamMessage serializer */
1:     public static interface Serializer<V extends StreamMessage>
1:     {
1:         V deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException;
0:         void serialize(V message, WritableByteChannel out, int version, StreamSession session) throws IOException;
1:     }
1: 
1:     /** StreamMessage types */
1:     public static enum Type
1:     {
1:         PREPARE(1, 5, PrepareMessage.serializer),
0:         FILE(2, 0, FileMessage.serializer),
0:         RETRY(3, 1, RetryMessage.serializer),
0:         COMPLETE(4, 4, CompleteMessage.serializer),
0:         SESSION_FAILED(5, 5, SessionFailedMessage.serializer);
1: 
1:         public static Type get(byte type)
1:         {
1:             for (Type t : Type.values())
1:             {
1:                 if (t.type == type)
1:                     return t;
1:             }
1:             throw new IllegalArgumentException("Unknown type " + type);
1:         }
1: 
1:         private final byte type;
1:         public final int priority;
0:         public final Serializer<StreamMessage> serializer;
1: 
1:         @SuppressWarnings("unchecked")
1:         private Type(int type, int priority, Serializer serializer)
1:         {
1:             this.type = (byte) type;
1:             this.priority = priority;
0:             this.serializer = serializer;
1:         }
1:     }
1: 
1:     public final Type type;
1: 
1:     protected StreamMessage(Type type)
1:     {
1:         this.type = type;
1:     }
1: 
1:     /**
1:      * @return priority of this message. higher value, higher priority.
1:      */
1:     public int getPriority()
1:     {
1:         return type.priority;
1:     }
1: }
author:Alexey Burylov
-------------------------------------------------------------------------------
commit:2267d79
/////////////////////////////////////////////////////////////////////////
1: import java.net.SocketException;
/////////////////////////////////////////////////////////////////////////
1:         int readBytes = in.read(buff);
1:         if (readBytes > 0)
1:         else if (readBytes == 0)
1:         {
1:             // input socket buffer was not filled yet
0:             return null;
1:         }
1:             // possibly socket gets closed
1:             throw new SocketException("End-of-stream reached");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_30 = 4;
1:     public static final int CURRENT_VERSION = VERSION_30;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:79e1e80
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_22 = 3;
0:     public static final int CURRENT_VERSION = VERSION_22;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:     public static void serialize(StreamMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         void serialize(V message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException;
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_20 = 2;
0:     public static final int VERSION_30 = 3;
0:     public static final int CURRENT_VERSION = VERSION_30;
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:0de0b8c
/////////////////////////////////////////////////////////////////////////
0:     public static final int CURRENT_VERSION = 3;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
0:     public static final int CURRENT_VERSION = 2;
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputStreamAndChannel;
/////////////////////////////////////////////////////////////////////////
0:     public static void serialize(StreamMessage message, DataOutputStreamAndChannel out, int version, StreamSession session) throws IOException
0:         out.write(buff);
/////////////////////////////////////////////////////////////////////////
0:         void serialize(V message, DataOutputStreamAndChannel out, int version, StreamSession session) throws IOException;
author:Jason Brown
-------------------------------------------------------------------------------
commit:36af409
/////////////////////////////////////////////////////////////////////////
1:         message.type.outSerializer.serialize(message, out, version, session);
/////////////////////////////////////////////////////////////////////////
1:             return type.inSerializer.deserialize(in, version, session);
/////////////////////////////////////////////////////////////////////////
1:         FILE(2, 0, IncomingFileMessage.serializer, OutgoingFileMessage.serializer),
/////////////////////////////////////////////////////////////////////////
1:         public final Serializer<StreamMessage> inSerializer;
1:         public final Serializer<StreamMessage> outSerializer;
1:             this(type, priority, serializer, serializer);
1:         }
1: 
1:         @SuppressWarnings("unchecked")
1:         private Type(int type, int priority, Serializer inSerializer, Serializer outSerializer)
1:         {
1:             this.inSerializer = inSerializer;
1:             this.outSerializer = outSerializer;
============================================================================