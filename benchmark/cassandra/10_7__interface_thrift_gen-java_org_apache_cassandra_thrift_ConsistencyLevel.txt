1:d76bbca: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:1aeca2b:  *
1:d76bbca:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:d76bbca:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:1aeca2b: 
1:acd50bd: 
1:d76bbca: import java.util.Map;
1:d76bbca: import java.util.HashMap;
1:04d5ec3: import org.apache.thrift.TEnum;
1:d76bbca: 
1:04d5ec3: /**
1:4dfe8ea:  * The ConsistencyLevel is an enum that controls both read and write
1:4dfe8ea:  * behavior based on the ReplicationFactor of the keyspace.  The
1:4dfe8ea:  * different consistency levels have different meanings, depending on
1:4dfe8ea:  * if you're doing a write or read operation.
1:1aeca2b:  * 
1:4dfe8ea:  * If W + R > ReplicationFactor, where W is the number of nodes to
1:4dfe8ea:  * block for on write, and R the number to block for on reads, you
1:4dfe8ea:  * will have strongly consistent behavior; that is, readers will
1:4dfe8ea:  * always see the most recent write. Of these, the most interesting is
1:4dfe8ea:  * to do QUORUM reads and writes, which gives you consistency while
1:4dfe8ea:  * still allowing availability in the face of node failures up to half
1:4dfe8ea:  * of <ReplicationFactor>. Of course if latency is more important than
1:4dfe8ea:  * consistency then you can use lower values for either or both.
1:1aeca2b:  * 
1:4dfe8ea:  * Some ConsistencyLevels (ONE, TWO, THREE) refer to a specific number
1:4dfe8ea:  * of replicas rather than a logical concept that adjusts
1:4dfe8ea:  * automatically with the replication factor.  Of these, only ONE is
1:4dfe8ea:  * commonly used; TWO and (even more rarely) THREE are only useful
1:4dfe8ea:  * when you care more about guaranteeing a certain level of
1:4dfe8ea:  * durability, than consistency.
1:1aeca2b:  * 
1:cba59a8:  * Write consistency levels make the following guarantees before reporting success to the client:
1:cba59a8:  *   ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
1:cba59a8:  *   ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
1:0d6db4a:  *   TWO          Ensure that the write has been written to at least 2 node's commit log and memory table
1:0d6db4a:  *   THREE        Ensure that the write has been written to at least 3 node's commit log and memory table
1:cba59a8:  *   QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
1:c9528f9:  *   LOCAL_ONE    Ensure that the write has been written to 1 node within the local datacenter (requires NetworkTopologyStrategy)
1:c75abc8:  *   LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
1:c75abc8:  *   EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
1:cba59a8:  *   ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
1:d76bbca:  * 
1:0d6db4a:  * Read consistency levels make the following guarantees before returning successful results to the client:
1:cba59a8:  *   ANY          Not supported. You probably want ONE instead.
1:0d6db4a:  *   ONE          Returns the record obtained from a single replica.
1:0d6db4a:  *   TWO          Returns the record with the most recent timestamp once two replicas have replied.
1:0d6db4a:  *   THREE        Returns the record with the most recent timestamp once three replicas have replied.
1:0d6db4a:  *   QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.
1:c9528f9:  *   LOCAL_ONE    Returns the record with the most recent timestamp once a single replica within the local datacenter have replied.
1:c75abc8:  *   LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
1:c75abc8:  *   EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
1:0d6db4a:  *   ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..
1:1aeca2b:  */
1:4ec9511: public enum ConsistencyLevel implements org.apache.thrift.TEnum {
1:04d5ec3:   ONE(1),
1:04d5ec3:   QUORUM(2),
1:c75abc8:   LOCAL_QUORUM(3),
1:c75abc8:   EACH_QUORUM(4),
1:0a06292:   ALL(5),
1:0d6db4a:   ANY(6),
1:0d6db4a:   TWO(7),
1:1227751:   THREE(8),
1:bfd73be:   SERIAL(9),
1:c9528f9:   LOCAL_SERIAL(10),
1:c9528f9:   LOCAL_ONE(11);
1:d76bbca: 
1:04d5ec3:   private final int value;
1:d76bbca: 
1:04d5ec3:   private ConsistencyLevel(int value) {
1:04d5ec3:     this.value = value;
1:d76bbca:   }
1:d76bbca: 
1:04d5ec3:   /**
1:04d5ec3:    * Get the integer value of this enum value, as defined in the Thrift IDL.
1:b43c785:    */
1:04d5ec3:   public int getValue() {
1:04d5ec3:     return value;
2:04d5ec3:   }
1:b43c785: 
1:04d5ec3:   /**
1:04d5ec3:    * Find a the enum type by its integer value, as defined in the Thrift IDL.
1:04d5ec3:    * @return null if the value is not found.
3:04d5ec3:    */
1:04d5ec3:   public static ConsistencyLevel findByValue(int value) { 
1:2b69c40:     switch (value) {
1:2b69c40:       case 1:
1:2b69c40:         return ONE;
1:2b69c40:       case 2:
1:2b69c40:         return QUORUM;
1:2b69c40:       case 3:
1:c75abc8:         return LOCAL_QUORUM;
1:2b69c40:       case 4:
1:c75abc8:         return EACH_QUORUM;
1:2b69c40:       case 5:
1:2b69c40:         return ALL;
1:2b69c40:       case 6:
1:2b69c40:         return ANY;
1:0d6db4a:       case 7:
1:0d6db4a:         return TWO;
1:0d6db4a:       case 8:
1:0d6db4a:         return THREE;
1:1227751:       case 9:
1:1227751:         return SERIAL;
1:bfd73be:       case 10:
1:bfd73be:         return LOCAL_SERIAL;
1:c9528f9:       case 11:
1:c9528f9:         return LOCAL_ONE;
1:2b69c40:       default:
1:2b69c40:         return null;
1:2b69c40:     }
1:04d5ec3:   }
1:04d5ec3: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:c9528f9
/////////////////////////////////////////////////////////////////////////
1:  *   LOCAL_ONE    Ensure that the write has been written to 1 node within the local datacenter (requires NetworkTopologyStrategy)
/////////////////////////////////////////////////////////////////////////
1:  *   LOCAL_ONE    Returns the record with the most recent timestamp once a single replica within the local datacenter have replied.
/////////////////////////////////////////////////////////////////////////
1:   LOCAL_SERIAL(10),
1:   LOCAL_ONE(11);
/////////////////////////////////////////////////////////////////////////
1:       case 11:
1:         return LOCAL_ONE;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
1:   SERIAL(9),
0:   LOCAL_SERIAL(10);
/////////////////////////////////////////////////////////////////////////
1:       case 10:
1:         return LOCAL_SERIAL;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1227751
/////////////////////////////////////////////////////////////////////////
1:   THREE(8),
0:   SERIAL(9);
/////////////////////////////////////////////////////////////////////////
1:       case 9:
1:         return SERIAL;
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:0d6db4a
/////////////////////////////////////////////////////////////////////////
0:  * The ConsistencyLevel is an enum that controls both read and write behavior based on the ReplicationFactor of the keyspace.
0:  * The different consistency levels have different meanings, depending on if you're doing a write or read
/////////////////////////////////////////////////////////////////////////
1:  *   TWO          Ensure that the write has been written to at least 2 node's commit log and memory table
1:  *   THREE        Ensure that the write has been written to at least 3 node's commit log and memory table
1:  * Read consistency levels make the following guarantees before returning successful results to the client:
1:  *   ONE          Returns the record obtained from a single replica.
1:  *   TWO          Returns the record with the most recent timestamp once two replicas have replied.
1:  *   THREE        Returns the record with the most recent timestamp once three replicas have replied.
1:  *   QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.
1:  *   ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..
/////////////////////////////////////////////////////////////////////////
1:   ANY(6),
1:   TWO(7),
0:   THREE(8);
/////////////////////////////////////////////////////////////////////////
1:       case 7:
1:         return TWO;
1:       case 8:
1:         return THREE;
commit:c75abc8
/////////////////////////////////////////////////////////////////////////
1:  *   LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
1:  *   EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
1:  *   LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
1:  *   EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
1:   LOCAL_QUORUM(3),
1:   EACH_QUORUM(4),
/////////////////////////////////////////////////////////////////////////
1:         return LOCAL_QUORUM;
1:         return EACH_QUORUM;
commit:916c810
/////////////////////////////////////////////////////////////////////////
0:  *   DCQUORUM     Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
0:  *   DCQUORUMSYNC Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:  * Write consistency levels make the following guarantees before reporting success to the client:
0:  *   ZERO         Ensure nothing. A write happens asynchronously in background
1:  *   ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
1:  *   ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
1:  *   QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
0:  *   DCQUORUM     Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires DatacenterShardStrategy)
0:  *   DCQUORUMSYNC Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires DatacenterShardStrategy)
1:  *   ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
0:  *   ZERO         Not supported, because it doesn't make sense.
1:  *   ANY          Not supported. You probably want ONE instead.
0:  *   ONE          Will return the record returned by the first node to respond. A consistency check is always done in a background thread to fix any consistency issues when ConsistencyLevel.ONE is used. This means subsequent calls will have correct data even if the initial read gets an older value. (This is called 'read repair'.)
0:  *   QUORUM       Will query all storage nodes and return the record with the most recent timestamp once it has at least a majority of replicas reported. Again, the remaining replicas will be checked in the background.
0:  *   DCQUORUM     Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
0:  *   DCQUORUMSYNC Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
0:  *   ALL          Queries all storage nodes and returns the record with the most recent timestamp.
commit:00bc8da
/////////////////////////////////////////////////////////////////////////
0:  *      ALL     Queries all storage nodes and returns the record with the most recent timestamp.
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     switch (value) {
0:       case 0:
0:         return ZERO;
1:       case 1:
1:         return ONE;
1:       case 2:
1:         return QUORUM;
1:       case 3:
0:         return DCQUORUM;
1:       case 4:
0:         return DCQUORUMSYNC;
1:       case 5:
1:         return ALL;
1:       case 6:
1:         return ANY;
1:       default:
1:         return null;
1:     }
commit:d2c2365
/////////////////////////////////////////////////////////////////////////
0:   public static final int DCQUORUM = 3;
0:   public static final int DCQUORUMSYNC = 4;
0:   public static final int ALL = 5;
0:     DCQUORUM, 
0:     DCQUORUMSYNC, 
0:     put(DCQUORUM, "DCQUORUM");
0:     put(DCQUORUMSYNC, "DCQUORUMSYNC");
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:572b5f8
/////////////////////////////////////////////////////////////////////////
0:   public static final IntRangeSet VALID_VALUES = new IntRangeSet(ZERO, ONE, QUORUM, ALL);
commit:acd50bd
/////////////////////////////////////////////////////////////////////////
0:   public static final IntRangeSet VALID_VALUES = new IntRangeSet(
0:     ZERO, 
0:     ONE, 
0:     QUORUM, 
0:     ALL );
1: 
commit:d76bbca
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
1: 
1: 
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.Collections;
0: import org.apache.thrift.IntRangeSet;
1: import java.util.Map;
1: import java.util.HashMap;
1: 
0: public class ConsistencyLevel {
0:   public static final int ZERO = 0;
0:   public static final int ONE = 1;
0:   public static final int QUORUM = 2;
0:   public static final int ALL = 3;
1: 
0:   public static final IntRangeSet VALID_VALUES = new IntRangeSet(ZERO, ONE, QUORUM, ALL);
0:   public static final Map<Integer, String> VALUES_TO_NAMES = new HashMap<Integer, String>() {{
0:     put(ZERO, "ZERO");
0:     put(ONE, "ONE");
0:     put(QUORUM, "QUORUM");
0:     put(ALL, "ALL");
0:   }};
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:21913c5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
1: public enum ConsistencyLevel implements org.apache.thrift.TEnum {
commit:0a06292
/////////////////////////////////////////////////////////////////////////
0:  *      ANY     Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
0:  *      ANY     Not supported. You probably want ONE instead.
/////////////////////////////////////////////////////////////////////////
1:   ALL(5),
0:   ANY(6);
author:Eric Evans
-------------------------------------------------------------------------------
commit:4dfe8ea
/////////////////////////////////////////////////////////////////////////
1:  * The ConsistencyLevel is an enum that controls both read and write
1:  * behavior based on the ReplicationFactor of the keyspace.  The
1:  * different consistency levels have different meanings, depending on
1:  * if you're doing a write or read operation.
0:  * 
1:  * If W + R > ReplicationFactor, where W is the number of nodes to
1:  * block for on write, and R the number to block for on reads, you
1:  * will have strongly consistent behavior; that is, readers will
1:  * always see the most recent write. Of these, the most interesting is
1:  * to do QUORUM reads and writes, which gives you consistency while
1:  * still allowing availability in the face of node failures up to half
1:  * of <ReplicationFactor>. Of course if latency is more important than
1:  * consistency then you can use lower values for either or both.
0:  * 
1:  * Some ConsistencyLevels (ONE, TWO, THREE) refer to a specific number
1:  * of replicas rather than a logical concept that adjusts
1:  * automatically with the replication factor.  Of these, only ONE is
1:  * commonly used; TWO and (even more rarely) THREE are only useful
1:  * when you care more about guaranteeing a certain level of
1:  * durability, than consistency.
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.TEnum;
1: /**
0:  * The ConsistencyLevel is an enum that controls both read and write behavior based on <ReplicationFactor> in your
0:  * storage-conf.xml. The different consistency levels have different meanings, depending on if you're doing a write or read
0:  * operation. Note that if W + R > ReplicationFactor, where W is the number of nodes to block for on write, and R
0:  * the number to block for on reads, you will have strongly consistent behavior; that is, readers will always see the most
0:  * recent write. Of these, the most interesting is to do QUORUM reads and writes, which gives you consistency while still
0:  * allowing availability in the face of node failures up to half of <ReplicationFactor>. Of course if latency is more
0:  * important than consistency then you can use lower values for either or both.
0:  * 
0:  * Write:
0:  *      ZERO    Ensure nothing. A write happens asynchronously in background
0:  *      ONE     Ensure that the write has been written to at least 1 node's commit log and memory table before responding to the client.
0:  *      QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes before responding to the client.
0:  *      ALL     Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
0:  * 
0:  * Read:
0:  *      ZERO    Not supported, because it doesn't make sense.
0:  *      ONE     Will return the record returned by the first node to respond. A consistency check is always done in a
0:  *              background thread to fix any consistency issues when ConsistencyLevel.ONE is used. This means subsequent
0:  *              calls will have correct data even if the initial read gets an older value. (This is called 'read repair'.)
0:  *      QUORUM  Will query all storage nodes and return the record with the most recent timestamp once it has at least a
0:  *              majority of replicas reported. Again, the remaining replicas will be checked in the background.
0:  *      ALL     Not yet supported, but we plan to eventually.
1:  */
0: public enum ConsistencyLevel implements TEnum {
0:   ZERO(0),
1:   ONE(1),
1:   QUORUM(2),
0:   DCQUORUM(3),
0:   DCQUORUMSYNC(4),
0:   ALL(5);
0:   private static final Map<Integer, ConsistencyLevel> BY_VALUE = new HashMap<Integer,ConsistencyLevel>() {{
0:     for(ConsistencyLevel val : ConsistencyLevel.values()) {
0:       put(val.getValue(), val);
1:     }
0: 
1:   private final int value;
0: 
1:   private ConsistencyLevel(int value) {
1:     this.value = value;
1:   }
0: 
1:   /**
1:    * Get the integer value of this enum value, as defined in the Thrift IDL.
1:    */
1:   public int getValue() {
1:     return value;
1:   }
0: 
1:   /**
1:    * Find a the enum type by its integer value, as defined in the Thrift IDL.
1:    * @return null if the value is not found.
1:    */
1:   public static ConsistencyLevel findByValue(int value) { 
0:     return BY_VALUE.get(value);
1:   }
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
0:   public static final IntRangeSet VALID_VALUES = new IntRangeSet(
0:     ZERO, 
0:     ONE, 
0:     QUORUM, 
0:     ALL );
0: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
============================================================================