1:0f5e780: /*
1:2e1e98a:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1e98a:  * or more contributor license agreements.  See the NOTICE file
1:2e1e98a:  * distributed with this work for additional information
1:2e1e98a:  * regarding copyright ownership.  The ASF licenses this file
1:2e1e98a:  * to you under the Apache License, Version 2.0 (the
1:2e1e98a:  * "License"); you may not use this file except in compliance
1:2e1e98a:  * with the License.  You may obtain a copy of the License at
1:2e1e98a:  *
1:2e1e98a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1e98a:  *
1:2e1e98a:  * Unless required by applicable law or agreed to in writing, software
1:2e1e98a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1e98a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1e98a:  * See the License for the specific language governing permissions and
1:2e1e98a:  * limitations under the License.
1:2e1e98a:  */
1:0f5e780: 
1:2e1e98a: package org.apache.cassandra.stress;
2:3e2c610: 
1:2e1e98a: import java.io.IOException;
1:6c579a0: 
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:6c579a0: import org.apache.cassandra.stress.settings.SettingsLog;
1:6c579a0: import org.apache.cassandra.stress.settings.StressSettings;
1:2e1e98a: import org.apache.cassandra.stress.util.JavaDriverClient;
1:2e1e98a: import org.apache.cassandra.stress.util.ThriftClient;
1:2e1e98a: import org.apache.cassandra.thrift.InvalidRequestException;
1:2e1e98a: import org.apache.cassandra.transport.SimpleClient;
1:7536429: 
1:2e1e98a: public abstract class Operation
1:3bee990: {
1:7536429:     public final StressSettings settings;
1:89f275c:     private final Timer timer;
1:6c579a0: 
1:f27ab29:     public Operation(Timer timer, StressSettings settings)
1:6c579a0:     {
1:7536429:         this.timer = timer;
1:7536429:         this.settings = settings;
1:6c579a0:     }
1:89f275c: 
1:2e1e98a:     public static interface RunOp
1:89f275c:     {
1:2e1e98a:         public boolean run() throws Exception;
1:7536429:         public int partitionCount();
1:7536429:         public int rowCount();
1:3bee990:     }
1:3bee990: 
1:89f275c:     public abstract int ready(WorkManager permits);
1:6c579a0: 
1:0580fb2:     public boolean isWrite()
1:6c579a0:     {
2:6c579a0:         return false;
1:6c579a0:     }
1:6c579a0: 
2:2e1e98a:     /**
1:2e1e98a:      * Run operation
1:2e1e98a:      * @param client Cassandra Thrift client connection
1:2e1e98a:      * @throws IOException on any I/O error.
1:2e1e98a:      */
1:2e1e98a:     public abstract void run(ThriftClient client) throws IOException;
1:6c579a0: 
1:0f5e780:     public void run(SimpleClient client) throws IOException
1:0f5e780:     {
1:2e1e98a:         throw new UnsupportedOperationException();
1:6c579a0:     }
1:0580fb2: 
1:0f5e780:     public void run(JavaDriverClient client) throws IOException
1:0f5e780:     {
1:2e1e98a:         throw new UnsupportedOperationException();
1:6c579a0:     }
1:7536429: 
1:89f275c:     public final void timeWithRetry(RunOp run) throws IOException
1:6c579a0:     {
1:7536429:         timer.start();
1:89338a1: 
1:2e1e98a:         boolean success = false;
1:2e1e98a:         String exceptionMessage = null;
1:89338a1: 
1:10b6173:         int tries = 0;
1:0580fb2:         for (; tries < settings.errors.tries; tries++)
1:6c579a0:         {
1:2e1e98a:             try
1:6c579a0:             {
1:2e1e98a:                 success = run.run();
1:6c579a0:                 break;
1:6c579a0:             }
1:2e1e98a:             catch (Exception e)
1:6c579a0:             {
1:7536429:                 switch (settings.log.level)
1:0580fb2:                 {
1:89338a1:                     case MINIMAL:
1:89338a1:                         break;
1:6c579a0: 
1:89338a1:                     case NORMAL:
1:89338a1:                         System.err.println(e);
1:89338a1:                         break;
1:6c579a0: 
1:89338a1:                     case VERBOSE:
1:89338a1:                         e.printStackTrace(System.err);
1:89338a1:                         break;
1:6c579a0: 
1:89338a1:                     default:
1:89338a1:                         throw new AssertionError();
1:6c579a0:                 }
1:2e1e98a:                 exceptionMessage = getExceptionMessage(e);
1:0580fb2:             }
1:7536429:         }
1:e73633c: 
1:6bbfb55:         timer.stop(run.partitionCount(), run.rowCount(), !success);
1:89338a1: 
1:2e1e98a:         if (!success)
1:7536429:         {
1:7536429:             error(String.format("Operation x%d on key(s) %s: %s%n",
1:10b6173:                     tries,
1:7536429:                     key(),
1:10b6173:                     (exceptionMessage == null)
1:10b6173:                         ? "Data returned was not validated"
1:10b6173:                         : "Error executing: " + exceptionMessage));
1:89338a1:         }
1:3e2c610: 
1:3e2c610:     }
1:3e2c610: 
1:f27ab29:     public abstract String key();
1:3e2c610: 
1:2e1e98a:     protected String getExceptionMessage(Exception e)
1:89338a1:     {
1:2e1e98a:         String className = e.getClass().getSimpleName();
1:2e1e98a:         String message = (e instanceof InvalidRequestException) ? ((InvalidRequestException) e).getWhy() : e.getMessage();
1:2e1e98a:         return (message == null) ? "(" + className + ")" : String.format("(%s): %s", className, message);
1:3e2c610:     }
1:3e2c610: 
1:2e1e98a:     protected void error(String message) throws IOException
2:3e2c610:     {
1:0580fb2:         if (!settings.errors.ignore)
1:2e1e98a:             throw new IOException(message);
1:7536429:         else if (settings.log.level.compareTo(SettingsLog.Level.MINIMAL) > 0)
1:2e1e98a:             System.err.println(message);
1:89f275c:     }
1:89f275c: 
1:89f275c:     public void intendedStartNs(long intendedTime)
1:89f275c:     {
1:89f275c:         timer.intendedTimeNs(intendedTime);
1:89f275c:     }
5:3e2c610: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:     private final Timer timer;
/////////////////////////////////////////////////////////////////////////
1:     public abstract int ready(WorkManager permits);
/////////////////////////////////////////////////////////////////////////
1:     public final void timeWithRetry(RunOp run) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
0:     public void close()
1:     {
0:         timer.close();
1:     }
1: 
1:     public void intendedStartNs(long intendedTime)
1:     {
1:         timer.intendedTimeNs(intendedTime);
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Operation(Timer timer, StressSettings settings)
/////////////////////////////////////////////////////////////////////////
0:     public abstract boolean ready(WorkManager permits, RateLimiter rateLimiter);
/////////////////////////////////////////////////////////////////////////
1:     public abstract String key();
commit:232e12b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public Operation(Timer timer, StressSettings settings)
/////////////////////////////////////////////////////////////////////////
0:     public abstract boolean ready(WorkManager permits, RateLimiter rateLimiter);
/////////////////////////////////////////////////////////////////////////
0:     public abstract String key();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void run(SimpleClient client) throws IOException
1:     {
1:     public void run(JavaDriverClient client) throws IOException
1:     {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.settings.OptionDistribution;
0: import org.apache.cassandra.stress.settings.OptionRatioDistribution;
/////////////////////////////////////////////////////////////////////////
0:     private final static RatioDistribution defaultRowPopulationRatio = OptionRatioDistribution.BUILDER.apply("fixed(1)/1").get();
/////////////////////////////////////////////////////////////////////////
0:         final RatioDistribution rowPopulationRatio;
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution rowPopulationRatio, Integer targetCount)
0:             this(partitionGenerator, seedManager, partitionCount, null, rowPopulationRatio, targetCount);
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio)
0:             this(partitionGenerator, seedManager, partitionCount, useRatio, rowPopulationRatio, null);
0:         private DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio, Integer targetCount)
0:             this.rowPopulationRatio = rowPopulationRatio == null ? defaultRowPopulationRatio : rowPopulationRatio;
/////////////////////////////////////////////////////////////////////////
0:             return iterator.reset(seed, spec.targetCount, spec.rowPopulationRatio.next(), isWrite());
0:             return iterator.reset(seed, spec.useRatio.next(), spec.rowPopulationRatio.next(), isWrite());
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
0:                 success = reset(seed, partitionCache.get(i));
/////////////////////////////////////////////////////////////////////////
0:     protected boolean reset(Seed seed, PartitionIterator iterator)
1:     {
0:         if (spec.useRatio == null)
0:             return iterator.reset(seed, spec.targetCount, isWrite());
0:         else
0:             return iterator.reset(seed, spec.useRatio.next(), isWrite());
1:     }
1: 
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1:         timer.stop(run.partitionCount(), run.rowCount(), !success);
commit:1435b9a
/////////////////////////////////////////////////////////////////////////
0:                     success = partitionCache.get(i).reset(seed, spec.targetCount, isWrite());
0:                     success = partitionCache.get(i).reset(seed, spec.useRatio.next(), isWrite());
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.util.concurrent.RateLimiter;
1: 
0: import org.apache.cassandra.stress.generate.*;
1: import org.apache.cassandra.stress.settings.SettingsLog;
1: import org.apache.cassandra.stress.settings.StressSettings;
/////////////////////////////////////////////////////////////////////////
0:     protected final DataSpec spec;
0:     private final List<PartitionIterator> partitionCache = new ArrayList<>();
0:     protected List<PartitionIterator> partitions;
0:     public static final class DataSpec
0:         public final PartitionGenerator partitionGenerator;
0:         final SeedManager seedManager;
0:         final Distribution partitionCount;
0:         final RatioDistribution useRatio;
0:         final Integer targetCount;
1: 
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, Integer targetCount)
1:         {
0:             this(partitionGenerator, seedManager, partitionCount, null, targetCount);
1:         }
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio)
1:         {
0:             this(partitionGenerator, seedManager, partitionCount, useRatio, null);
1:         }
0:         private DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, Integer targetCount)
1:         {
0:             this.partitionGenerator = partitionGenerator;
0:             this.seedManager = seedManager;
0:             this.partitionCount = partitionCount;
0:             this.useRatio = useRatio;
0:             this.targetCount = targetCount;
1:         }
1:     }
1: 
0:     public Operation(Timer timer, StressSettings settings, DataSpec spec)
1:     {
0:         this.spec = spec;
/////////////////////////////////////////////////////////////////////////
0:     boolean ready(WorkManager permits, RateLimiter rateLimiter)
0:         int partitionCount = (int) spec.partitionCount.next();
0:         if (partitionCount <= 0)
1:             return false;
0:         partitionCount = permits.takePermits(partitionCount);
0:         if (partitionCount <= 0)
1:             return false;
1: 
0:         int i = 0;
0:         boolean success = true;
0:         for (; i < partitionCount && success ; i++)
1:         {
0:             if (i >= partitionCache.size())
0:                 partitionCache.add(PartitionIterator.get(spec.partitionGenerator, spec.seedManager));
1: 
0:             success = false;
0:             while (!success)
1:             {
0:                 Seed seed = spec.seedManager.next(this);
0:                 if (seed == null)
1:                     break;
1: 
0:                 if (spec.useRatio == null)
0:                     success = partitionCache.get(i).reset(seed, spec.targetCount, this);
0:                 else
0:                     success = partitionCache.get(i).reset(seed, spec.useRatio.next(), this);
1:             }
1:         }
0:         partitionCount = i;
1: 
0:         if (rateLimiter != null)
0:             rateLimiter.acquire(partitionCount);
1: 
0:         partitions = partitionCache.subList(0, partitionCount);
0:         return !partitions.isEmpty();
/////////////////////////////////////////////////////////////////////////
0:         for (PartitionIterator partition : partitions)
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWrite()
1:     {
0:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (; tries < settings.errors.tries; tries++)
/////////////////////////////////////////////////////////////////////////
1:         if (!settings.errors.ignore)
commit:7536429
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.Partition;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:     public final StressSettings settings;
0:     public final Timer timer;
0:     public final PartitionGenerator generator;
0:     public final Distribution partitionCount;
0:     protected List<Partition> partitions;
1: 
0:     public Operation(Timer timer, PartitionGenerator generator, StressSettings settings, Distribution partitionCount)
0:         this.generator = generator;
1:         this.timer = timer;
1:         this.settings = settings;
0:         this.partitionCount = partitionCount;
1:         public int partitionCount();
1:         public int rowCount();
0:     protected void setPartitions(List<Partition> partitions)
0:         this.partitions = partitions;
/////////////////////////////////////////////////////////////////////////
1:         timer.start();
0:         for (; tries < settings.command.tries; tries++)
/////////////////////////////////////////////////////////////////////////
1:                 switch (settings.log.level)
/////////////////////////////////////////////////////////////////////////
0:         timer.stop(run.partitionCount(), run.rowCount());
1:             error(String.format("Operation x%d on key(s) %s: %s%n",
1:                     key(),
/////////////////////////////////////////////////////////////////////////
0:     private String key()
1:     {
0:         List<String> keys = new ArrayList<>();
0:         for (Partition partition : partitions)
0:             keys.add(partition.getKeyAsString());
0:         return keys.toString();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (!settings.command.ignoreErrors)
1:         else if (settings.log.level.compareTo(SettingsLog.Level.MINIMAL) > 0)
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:89338a1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.settings.*;
/////////////////////////////////////////////////////////////////////////
0:                 switch (state.settings.log.level)
1:                 {
1:                     case MINIMAL:
1:                         break;
1: 
1:                     case NORMAL:
1:                         System.err.println(e);
1:                         break;
1: 
1:                     case VERBOSE:
1:                         e.printStackTrace(System.err);
1:                         break;
1: 
1:                     default:
1:                         throw new AssertionError();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:         else if (state.settings.log.level.compareTo(SettingsLog.Level.MINIMAL) > 0)
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.concurrent.ThreadLocalRandom;
0: import org.apache.cassandra.stress.generatedata.Distribution;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.SlicePredicate;
0: import org.apache.cassandra.thrift.SliceRange;
/////////////////////////////////////////////////////////////////////////
0:         public final Distribution counteradd;
/////////////////////////////////////////////////////////////////////////
0:             counteradd = settings.command.add.get();
0:             this.columnParents = columnParents(type, settings);
/////////////////////////////////////////////////////////////////////////
0:             this.columnParents = columnParents(type, copy.settings);
0:             this.counteradd = copy.counteradd;
0:         private List<ColumnParent> columnParents(Command type, StressSettings settings)
1:         {
0:             if (!settings.columns.useSuperColumns)
0:                 return Collections.singletonList(new ColumnParent(type.table));
0:             else
1:             {
0:                 ColumnParent[] cp = new ColumnParent[settings.columns.superColumns];
0:                 for (int i = 0 ; i < cp.length ; i++)
0:                     cp[i] = new ColumnParent(type.supertable).setSuper_column(ByteBufferUtil.bytes("S" + i));
0:                 return Arrays.asList(cp);
1:             }
1:         }
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:     private int sliceStart(int count)
0:     {
0:         if (count == state.settings.columns.maxColumnsPerKey)
0:             return 0;
0:         return 1 + ThreadLocalRandom.current().nextInt(state.settings.columns.maxColumnsPerKey - count);
1:     }
1: 
0:     protected SlicePredicate slicePredicate()
0:     {
0:         final SlicePredicate predicate = new SlicePredicate();
0:         if (state.settings.columns.slice)
0:         {
0:             int count = state.rowGen.count(index);
0:             int start = sliceStart(count);
0:             predicate.setSlice_range(new SliceRange()
0:                                      .setStart(state.settings.columns.names.get(start))
0:                                      .setFinish(new byte[] {})
0:                                      .setReversed(false)
0:                                      .setCount(count)
0:             );
1:         }
0:         else
0:             predicate.setColumn_names(randomNames());
0:         return predicate;
1:     }
1: 
0:     protected List<ByteBuffer> randomNames()
0:     {
0:         int count = state.rowGen.count(index);
0:         List<ByteBuffer> src = state.settings.columns.names;
0:         if (count == src.size())
0:             return src;
0:         ThreadLocalRandom rnd = ThreadLocalRandom.current();
0:         List<ByteBuffer> r = new ArrayList<>();
0:         int c = 0, o = 0;
0:         while (c < count && count + o < src.size())
0:         {
0:             int leeway = src.size() - (count + o);
0:             int spreadover = count - c;
0:             o += Math.round(rnd.nextDouble() * (leeway / (double) spreadover));
0:             r.add(src.get(o + c++));
1:         }
0:         while (c < count)
0:             r.add(src.get(o + c++));
0:         return r;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             error(String.format("Operation [%d] x%d key %s (0x%s) %s%n",
0:                     ByteBufferUtil.bytesToHex(ByteBufferUtil.bytes(run.key())),
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:10b6173
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumMap;
0: import org.apache.cassandra.stress.operations.CqlCounterAdder;
0: import org.apache.cassandra.stress.operations.CqlCounterGetter;
0: import org.apache.cassandra.stress.operations.CqlIndexedRangeSlicer;
0: import org.apache.cassandra.stress.operations.CqlInserter;
0: import org.apache.cassandra.stress.operations.CqlMultiGetter;
0: import org.apache.cassandra.stress.operations.CqlRangeSlicer;
0: import org.apache.cassandra.stress.operations.CqlReader;
0: import org.apache.cassandra.stress.operations.ThriftCounterAdder;
0: import org.apache.cassandra.stress.operations.ThriftCounterGetter;
0: import org.apache.cassandra.stress.operations.ThriftIndexedRangeSlicer;
0: import org.apache.cassandra.stress.operations.ThriftInserter;
0: import org.apache.cassandra.stress.operations.ThriftMultiGetter;
0: import org.apache.cassandra.stress.operations.ThriftRangeSlicer;
0: import org.apache.cassandra.stress.operations.ThriftReader;
/////////////////////////////////////////////////////////////////////////
0:         public final SettingsCommandMixed.CommandSelector commandSelector;
0:         private final EnumMap<Command, State> substates;
/////////////////////////////////////////////////////////////////////////
0:             {
0:                 commandSelector = ((SettingsCommandMixed) settings.command).selector();
0:                 substates = new EnumMap<>(Command.class);
0:             }
0:             {
0:                 commandSelector = null;
0:                 substates = null;
0:             }
/////////////////////////////////////////////////////////////////////////
0: 
0:         private State(Command type, State copy)
0:         {
0:             this.type = type;
0:             this.timer = copy.timer;
0:             this.rowGen = copy.rowGen;
0:             this.keyGen = copy.keyGen;
0:             this.columnParents = copy.columnParents;
0:             this.metrics = copy.metrics;
0:             this.settings = copy.settings;
0:             this.substates = null;
0:             this.commandSelector = null;
0:         }
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:         public State substate(Command command)
0:         {
0:             assert type == Command.MIXED;
0:             State substate = substates.get(command);
0:             if (substate == null)
0:             {
0:                 substates.put(command, substate = new State(command, this));
0:             }
0:             return substate;
0:         }
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected List<ByteBuffer> generateColumnValues(ByteBuffer key)
0:         return state.rowGen.generate(index, key);
/////////////////////////////////////////////////////////////////////////
1:         int tries = 0;
0:         for (; tries < state.settings.command.tries; tries++)
0:                 break;
/////////////////////////////////////////////////////////////////////////
0:             error(String.format("Operation [%d] x%d key %s %s%n",
1:                     tries,
1:                     (exceptionMessage == null)
1:                         ? "Data returned was not validated"
1:                         : "Error executing: " + exceptionMessage));
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.stress;
0: 
1: import java.io.IOException;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.List;
0: 
0: import org.apache.cassandra.stress.generatedata.KeyGen;
0: import org.apache.cassandra.stress.generatedata.RowGen;
0: import org.apache.cassandra.stress.settings.Command;
0: import org.apache.cassandra.stress.settings.CqlVersion;
0: import org.apache.cassandra.stress.settings.SettingsCommandMixed;
0: import org.apache.cassandra.stress.settings.StressSettings;
1: import org.apache.cassandra.stress.util.JavaDriverClient;
1: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
0: import org.apache.cassandra.thrift.ColumnParent;
1: import org.apache.cassandra.thrift.InvalidRequestException;
1: import org.apache.cassandra.transport.SimpleClient;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
1: public abstract class Operation
0: {
0:     public final long index;
0:     protected final State state;
0: 
0:     public Operation(State state, long idx)
0:     {
0:         index = idx;
0:         this.state = state;
0:     }
0: 
1:     public static interface RunOp
0:     {
1:         public boolean run() throws Exception;
0:         public String key();
0:         public int keyCount();
0:     }
0: 
0:     // one per thread!
0:     public static final class State
0:     {
0: 
0:         public final StressSettings settings;
0:         public final Timer timer;
0:         public final Command type;
0:         public final KeyGen keyGen;
0:         public final RowGen rowGen;
0:         public final List<ColumnParent> columnParents;
0:         public final StressMetrics metrics;
0:         public final SettingsCommandMixed.CommandSelector readWriteSelector;
0:         private Object cqlCache;
0: 
0:         public State(Command type, StressSettings settings, StressMetrics metrics)
0:         {
0:             this.type = type;
0:             this.timer = metrics.getTiming().newTimer();
0:             if (type == Command.MIXED)
0:                 readWriteSelector = ((SettingsCommandMixed) settings.command).selector();
0:             else
0:                 readWriteSelector = null;
0:             this.settings = settings;
0:             this.keyGen = settings.keys.newKeyGen();
0:             this.rowGen = settings.columns.newRowGen();
0:             this.metrics = metrics;
0:             if (!settings.columns.useSuperColumns)
0:                 columnParents = Collections.singletonList(new ColumnParent(settings.schema.columnFamily));
0:             else
0:             {
0:                 ColumnParent[] cp = new ColumnParent[settings.columns.superColumns];
0:                 for (int i = 0 ; i < cp.length ; i++)
0:                     cp[i] = new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes("S" + i));
0:                 columnParents = Arrays.asList(cp);
0:             }
0:         }
0:         public boolean isCql3()
0:         {
0:             return settings.mode.cqlVersion == CqlVersion.CQL3;
0:         }
0:         public boolean isCql2()
0:         {
0:             return settings.mode.cqlVersion == CqlVersion.CQL2;
0:         }
0:         public Object getCqlCache()
0:         {
0:             return cqlCache;
0:         }
0:         public void storeCqlCache(Object val)
0:         {
0:             cqlCache = val;
0:         }
0:     }
0: 
0:     protected ByteBuffer getKey()
0:     {
0:         return state.keyGen.getKeys(1, index).get(0);
0:     }
0: 
0:     protected List<ByteBuffer> getKeys(int count)
0:     {
0:         return state.keyGen.getKeys(count, index);
0:     }
0: 
0:     protected List<ByteBuffer> generateColumnValues()
0:     {
0:         return state.rowGen.generate(index);
0:     }
0: 
1:     /**
1:      * Run operation
1:      * @param client Cassandra Thrift client connection
1:      * @throws IOException on any I/O error.
1:      */
1:     public abstract void run(ThriftClient client) throws IOException;
0: 
0:     public void run(SimpleClient client) throws IOException {
1:         throw new UnsupportedOperationException();
0:     }
0: 
0:     public void run(JavaDriverClient client) throws IOException {
1:         throw new UnsupportedOperationException();
0:     }
0: 
0:     public void timeWithRetry(RunOp run) throws IOException
0:     {
0:         state.timer.start();
0: 
1:         boolean success = false;
1:         String exceptionMessage = null;
0: 
0:         for (int t = 0; t < state.settings.command.tries; t++)
0:         {
0:             if (success)
0:                 break;
0: 
1:             try
0:             {
1:                 success = run.run();
0:             }
1:             catch (Exception e)
0:             {
0:                 System.err.println(e);
1:                 exceptionMessage = getExceptionMessage(e);
0:                 success = false;
0:             }
0:         }
0: 
0:         state.timer.stop(run.keyCount());
0: 
1:         if (!success)
0:         {
0:             error(String.format("Operation [%d] retried %d times - error executing for key %s %s%n",
0:                     index,
0:                     state.settings.command.tries,
0:                     run.key(),
0:                     (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
0:         }
0: 
0:     }
0: 
1:     protected String getExceptionMessage(Exception e)
0:     {
1:         String className = e.getClass().getSimpleName();
1:         String message = (e instanceof InvalidRequestException) ? ((InvalidRequestException) e).getWhy() : e.getMessage();
1:         return (message == null) ? "(" + className + ")" : String.format("(%s): %s", className, message);
0:     }
0: 
1:     protected void error(String message) throws IOException
0:     {
0:         if (!state.settings.command.ignoreErrors)
1:             throw new IOException(message);
0:         else
1:             System.err.println(message);
0:     }
0: 
0:     public static ByteBuffer getColumnNameBytes(int i)
0:     {
0:         return ByteBufferUtil.bytes("C" + i);
0:     }
0: 
0:     public static String getColumnName(int i)
0:     {
0:         return "C" + i;
0:     }
0: 
0: }
============================================================================