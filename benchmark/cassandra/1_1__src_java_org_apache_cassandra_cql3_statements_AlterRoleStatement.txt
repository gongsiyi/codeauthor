1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.cql3.statements;
1:879b694: 
1:2f3fd41: import org.apache.cassandra.auth.*;
1:879b694: import org.apache.cassandra.auth.IRoleManager.Option;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:879b694: import org.apache.cassandra.exceptions.*;
1:879b694: import org.apache.cassandra.service.ClientState;
1:879b694: import org.apache.cassandra.transport.messages.ResultMessage;
1:879b694: 
1:879b694: public class AlterRoleStatement extends AuthenticationStatement
1:879b694: {
1:217721a:     private final RoleResource role;
1:879b694:     private final RoleOptions opts;
1:879b694: 
1:879b694:     public AlterRoleStatement(RoleName name, RoleOptions opts)
1:879b694:     {
1:217721a:         this.role = RoleResource.role(name.getName());
1:879b694:         this.opts = opts;
1:879b694:     }
1:879b694: 
1:879b694:     public void validate(ClientState state) throws RequestValidationException
1:879b694:     {
1:879b694:         opts.validate();
1:879b694: 
1:879b694:         if (opts.isEmpty())
1:879b694:             throw new InvalidRequestException("ALTER [ROLE|USER] can't be empty");
1:879b694: 
1:879b694:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:879b694:         state.ensureNotAnonymous();
1:879b694:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:217721a:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
1:879b694:     }
1:879b694: 
1:879b694:     public void checkAccess(ClientState state) throws UnauthorizedException
1:879b694:     {
1:879b694:         AuthenticatedUser user = state.getUser();
1:879b694:         boolean isSuper = user.isSuper();
1:879b694: 
1:2f3fd41:         if (opts.getSuperuser().isPresent() && user.getRoles().contains(role))
1:879b694:             throw new UnauthorizedException("You aren't allowed to alter your own superuser " +
1:879b694:                                             "status or that of a role granted to you");
1:879b694: 
1:2f3fd41:         if (opts.getSuperuser().isPresent() && !isSuper)
1:879b694:             throw new UnauthorizedException("Only superusers are allowed to alter superuser status");
1:879b694: 
1:217721a:         // superusers can do whatever else they like
1:217721a:         if (isSuper)
1:217721a:             return;
1:879b694: 
1:217721a:         // a role may only modify the subset of its own attributes as determined by IRoleManager#alterableOptions
1:217721a:         if (user.getName().equals(role.getRoleName()))
1:879b694:         {
1:879b694:             for (Option option : opts.getOptions().keySet())
1:879b694:             {
1:879b694:                 if (!DatabaseDescriptor.getRoleManager().alterableOptions().contains(option))
1:879b694:                     throw new UnauthorizedException(String.format("You aren't allowed to alter %s", option));
1:879b694:             }
1:879b694:         }
1:217721a:         else
1:217721a:         {
1:217721a:             // if not attempting to alter another role, ensure we have ALTER permissions on it
1:217721a:             super.checkPermission(state, Permission.ALTER, role);
1:217721a:         }
1:879b694:     }
1:879b694: 
1:879b694:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:879b694:     {
1:879b694:         if (!opts.isEmpty())
1:2f3fd41:             DatabaseDescriptor.getRoleManager().alterRole(state.getUser(), role, opts);
1:879b694:         return null;
1:879b694:     }
1:879b694: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
1:         if (opts.getSuperuser().isPresent() && user.getRoles().contains(role))
1:         if (opts.getSuperuser().isPresent() && !isSuper)
/////////////////////////////////////////////////////////////////////////
1:             DatabaseDescriptor.getRoleManager().alterRole(state.getUser(), role, opts);
commit:217721a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1:     private final RoleResource role;
1:         this.role = RoleResource.role(name.getName());
/////////////////////////////////////////////////////////////////////////
1:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
/////////////////////////////////////////////////////////////////////////
1:         // superusers can do whatever else they like
1:         if (isSuper)
1:             return;
1:         // a role may only modify the subset of its own attributes as determined by IRoleManager#alterableOptions
1:         if (user.getName().equals(role.getRoleName()))
/////////////////////////////////////////////////////////////////////////
1:         else
1:         {
1:             // if not attempting to alter another role, ensure we have ALTER permissions on it
1:             super.checkPermission(state, Permission.ALTER, role);
1:         }
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.auth.AuthenticatedUser;
1: import org.apache.cassandra.auth.IRoleManager.Option;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.RoleName;
0: import org.apache.cassandra.cql3.RoleOptions;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public class AlterRoleStatement extends AuthenticationStatement
1: {
0:     private final String role;
1:     private final RoleOptions opts;
1: 
1:     public AlterRoleStatement(RoleName name, RoleOptions opts)
1:     {
0:         this.role = name.getName();
1:         this.opts = opts;
1:     }
1: 
1:     public void validate(ClientState state) throws RequestValidationException
1:     {
1:         opts.validate();
1: 
1:         if (opts.isEmpty())
1:             throw new InvalidRequestException("ALTER [ROLE|USER] can't be empty");
1: 
1:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:         state.ensureNotAnonymous();
1:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(role))
0:             throw new InvalidRequestException(String.format("%s doesn't exist", role));
1:     }
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
1:         AuthenticatedUser user = state.getUser();
1:         boolean isSuper = user.isSuper();
1: 
0:         if (opts.getOptions().containsKey(Option.SUPERUSER) && user.getRoles().contains(role))
1:             throw new UnauthorizedException("You aren't allowed to alter your own superuser " +
1:                                             "status or that of a role granted to you");
1: 
0:         if (opts.getOptions().containsKey(Option.SUPERUSER) && !isSuper)
1:             throw new UnauthorizedException("Only superusers are allowed to alter superuser status");
1: 
0:         if (!user.isSuper() && !user.getName().equals(role))
0:             throw new UnauthorizedException("You aren't allowed to alter this role");
1: 
0:         if (!isSuper)
1:         {
1:             for (Option option : opts.getOptions().keySet())
1:             {
1:                 if (!DatabaseDescriptor.getRoleManager().alterableOptions().contains(option))
1:                     throw new UnauthorizedException(String.format("You aren't allowed to alter %s", option));
1:             }
1:         }
1:     }
1: 
1:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:     {
1:         if (!opts.isEmpty())
0:             DatabaseDescriptor.getRoleManager().alterRole(state.getUser(), role, opts.getOptions());
1:         return null;
1:     }
1: }
============================================================================