1:351af4a: /*
1:351af4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:351af4a:  * or more contributor license agreements.  See the NOTICE file
1:351af4a:  * distributed with this work for additional information
1:351af4a:  * regarding copyright ownership.  The ASF licenses this file
1:351af4a:  * to you under the Apache License, Version 2.0 (the
1:351af4a:  * "License"); you may not use this file except in compliance
1:351af4a:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:351af4a:  */
1:52b6edc: package org.apache.cassandra.concurrent;
1:52b6edc: 
1:8896a70: import java.util.Arrays;
1:8896a70: 
1:8896a70: import com.google.common.base.Predicate;
1:8896a70: import com.google.common.collect.Iterables;
1:8896a70: 
1:52b6edc: public enum Stage
1:52b6edc: {
1:52b6edc:     READ,
1:52b6edc:     MUTATION,
1:714c423:     COUNTER_MUTATION,
1:a3a8dbc:     VIEW_MUTATION,
1:52b6edc:     GOSSIP,
1:365f20b:     REQUEST_RESPONSE,
1:77ede1e:     ANTI_ENTROPY,
1:52b6edc:     MIGRATION,
1:365f20b:     MISC,
1:5c94432:     TRACING,
1:dc9992a:     INTERNAL_RESPONSE,
1:dc9992a:     READ_REPAIR;
1:43eae6f: 
1:8896a70:     public static Iterable<Stage> jmxEnabledStages()
1:8896a70:     {
1:8896a70:         return Iterables.filter(Arrays.asList(values()), new Predicate<Stage>()
1:8896a70:         {
1:8896a70:             public boolean apply(Stage stage)
1:8896a70:             {
1:8896a70:                 return stage != TRACING;
1:8896a70:             }
1:8896a70:         });
1:8896a70:     }
1:8896a70: 
1:43eae6f:     public String getJmxType()
1:43eae6f:     {
1:43eae6f:         switch (this)
1:43eae6f:         {
1:77ede1e:             case ANTI_ENTROPY:
1:43eae6f:             case GOSSIP:
1:43eae6f:             case MIGRATION:
1:43eae6f:             case MISC:
1:5c94432:             case TRACING:
1:365f20b:             case INTERNAL_RESPONSE:
1:43eae6f:                 return "internal";
1:43eae6f:             case MUTATION:
1:714c423:             case COUNTER_MUTATION:
1:a3a8dbc:             case VIEW_MUTATION:
1:43eae6f:             case READ:
1:365f20b:             case REQUEST_RESPONSE:
1:dc9992a:             case READ_REPAIR:
1:43eae6f:                 return "request";
1:43eae6f:             default:
1:43eae6f:                 throw new AssertionError("Unknown stage " + this);
1:43eae6f:         }
1:43eae6f:     }
1:43eae6f: 
1:43eae6f:     public String getJmxName()
1:43eae6f:     {
1:77ede1e:         String name = "";
1:77ede1e:         for (String word : toString().split("_"))
1:77ede1e:         {
1:77ede1e:             name += word.substring(0, 1) + word.substring(1).toLowerCase();
1:77ede1e:         }
1:77ede1e:         return name + "Stage";
1:43eae6f:     }
1:52b6edc: }
============================================================================
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1:     VIEW_MUTATION,
/////////////////////////////////////////////////////////////////////////
1:             case VIEW_MUTATION:
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
0:     BATCHLOG_MUTATION,
0:     MATERIALIZED_VIEW_MUTATION,
/////////////////////////////////////////////////////////////////////////
0:             case BATCHLOG_MUTATION:
0:             case MATERIALIZED_VIEW_MUTATION:
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0:     BATCHLOG_MUTATION,
0:     MATERIALIZED_VIEW_MUTATION,
/////////////////////////////////////////////////////////////////////////
0:             case BATCHLOG_MUTATION:
0:             case MATERIALIZED_VIEW_MUTATION:
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
1: import com.google.common.base.Predicate;
1: import com.google.common.collect.Iterables;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static Iterable<Stage> jmxEnabledStages()
1:     {
1:         return Iterables.filter(Arrays.asList(values()), new Predicate<Stage>()
1:         {
1:             public boolean apply(Stage stage)
1:             {
1:                 return stage != TRACING;
1:             }
1:         });
1:     }
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fb15aa9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:796df64
/////////////////////////////////////////////////////////////////////////
0:     STREAM,
/////////////////////////////////////////////////////////////////////////
0:             case STREAM:
commit:69ad77d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5c94432
/////////////////////////////////////////////////////////////////////////
1:     TRACING,
/////////////////////////////////////////////////////////////////////////
1:             case TRACING:
commit:489cafe
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
1:     INTERNAL_RESPONSE,
1:     READ_REPAIR;
/////////////////////////////////////////////////////////////////////////
1:             case READ_REPAIR:
commit:77ede1e
/////////////////////////////////////////////////////////////////////////
1:     ANTI_ENTROPY,
/////////////////////////////////////////////////////////////////////////
1:             case ANTI_ENTROPY:
/////////////////////////////////////////////////////////////////////////
1:         String name = "";
1:         for (String word : toString().split("_"))
1:         {
1:             name += word.substring(0, 1) + word.substring(1).toLowerCase();
1:         }
1:         return name + "Stage";
commit:365f20b
/////////////////////////////////////////////////////////////////////////
1:     REQUEST_RESPONSE,
1:     MISC,
0:     INTERNAL_RESPONSE;
/////////////////////////////////////////////////////////////////////////
1:             case INTERNAL_RESPONSE:
1:             case REQUEST_RESPONSE:
commit:43eae6f
/////////////////////////////////////////////////////////////////////////
0:     ANTIENTROPY,
0:     MISC;
1: 
1:     public String getJmxType()
1:     {
1:         switch (this)
1:         {
0:             case ANTIENTROPY:
1:             case GOSSIP:
1:             case MIGRATION:
1:             case MISC:
0:             case STREAM:
1:                 return "internal";
1:             case MUTATION:
1:             case READ:
0:             case RESPONSE:
1:                 return "request";
1:             default:
1:                 throw new AssertionError("Unknown stage " + this);
1:         }
1:     }
1: 
1:     public String getJmxName()
1:     {
0:         return toString().substring(0, 1) + toString().substring(1).toLowerCase() + "Stage";
1:     }
commit:6eb55e1
/////////////////////////////////////////////////////////////////////////
commit:52b6edc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
1: 
1: public enum Stage
1: {
1:     READ,
1:     MUTATION,
0:     STREAM,
1:     GOSSIP,
0:     RESPONSE,
0:     AE_SERVICE,
0:     LOADBALANCE,
1:     MIGRATION,
0:     MISC,
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:714c423
/////////////////////////////////////////////////////////////////////////
1:     COUNTER_MUTATION,
/////////////////////////////////////////////////////////////////////////
0:     READ_REPAIR;
/////////////////////////////////////////////////////////////////////////
1:             case COUNTER_MUTATION:
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.concurrent;
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:     INTERNAL_RESPONSE,
0:     REPLICATE_ON_WRITE;
/////////////////////////////////////////////////////////////////////////
0:             case REPLICATE_ON_WRITE:
author:Eric Evans
-------------------------------------------------------------------------------
commit:351af4a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================