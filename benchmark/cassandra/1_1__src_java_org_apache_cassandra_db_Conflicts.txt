1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
1:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.db.context.CounterContext;
1:a991b64: 
1:a991b64: public abstract class Conflicts
1:a991b64: {
1:a991b64:     private Conflicts() {}
1:a991b64: 
1:a991b64:     public enum Resolution { LEFT_WINS, MERGE, RIGHT_WINS };
1:a991b64: 
1:a991b64:     public static Resolution resolveRegular(long leftTimestamp,
1:a991b64:                                             boolean leftLive,
1:a991b64:                                             int leftLocalDeletionTime,
1:a991b64:                                             ByteBuffer leftValue,
1:a991b64:                                             long rightTimestamp,
1:a991b64:                                             boolean rightLive,
1:a991b64:                                             int rightLocalDeletionTime,
1:a991b64:                                             ByteBuffer rightValue)
1:a991b64:     {
1:a991b64:         if (leftTimestamp != rightTimestamp)
1:a991b64:             return leftTimestamp < rightTimestamp ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1:a991b64: 
1:a991b64:         if (leftLive != rightLive)
1:a991b64:             return leftLive ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1:a991b64: 
1:a991b64:         int c = leftValue.compareTo(rightValue);
1:a991b64:         if (c < 0)
1:a991b64:             return Resolution.RIGHT_WINS;
1:a991b64:         else if (c > 0)
1:a991b64:             return Resolution.LEFT_WINS;
1:a991b64: 
1:a991b64:         // Prefer the longest ttl if relevant
1:a991b64:         return leftLocalDeletionTime < rightLocalDeletionTime ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static Resolution resolveCounter(long leftTimestamp,
1:a991b64:                                             boolean leftLive,
1:a991b64:                                             ByteBuffer leftValue,
1:a991b64:                                             long rightTimestamp,
1:a991b64:                                             boolean rightLive,
1:a991b64:                                             ByteBuffer rightValue)
1:a991b64:     {
1:a991b64:         // No matter what the counter cell's timestamp is, a tombstone always takes precedence. See CASSANDRA-7346.
1:a991b64:         if (!leftLive)
1:a991b64:             // left is a tombstone: it has precedence over right if either right is not a tombstone, or left has a greater timestamp
1:a991b64:             return rightLive || leftTimestamp > rightTimestamp ? Resolution.LEFT_WINS : Resolution.RIGHT_WINS;
1:a991b64: 
1:a991b64:         // If right is a tombstone, since left isn't one, it has precedence
1:a991b64:         if (!rightLive)
1:a991b64:             return Resolution.RIGHT_WINS;
1:a991b64: 
1:ee60941:         // Handle empty values. Counters can't truly have empty values, but we can have a counter cell that temporarily
1:ee60941:         // has one on read if the column for the cell is not queried by the user due to the optimization of #10657. We
1:ee60941:         // thus need to handle this (see #11726 too).
1:ee60941:         if (!leftValue.hasRemaining())
1:ee60941:             return rightValue.hasRemaining() || leftTimestamp > rightTimestamp ? Resolution.LEFT_WINS : Resolution.RIGHT_WINS;
1:ee60941: 
1:ee60941:         if (!rightValue.hasRemaining())
1:ee60941:             return Resolution.RIGHT_WINS;
1:ee60941: 
1:a991b64:         return Resolution.MERGE;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static ByteBuffer mergeCounterValues(ByteBuffer left, ByteBuffer right)
1:a991b64:     {
1:a991b64:         return CounterContext.instance().merge(left, right);
1:a991b64:     }
1:a991b64: 
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:ee60941
/////////////////////////////////////////////////////////////////////////
1:         // Handle empty values. Counters can't truly have empty values, but we can have a counter cell that temporarily
1:         // has one on read if the column for the cell is not queried by the user due to the optimization of #10657. We
1:         // thus need to handle this (see #11726 too).
1:         if (!leftValue.hasRemaining())
1:             return rightValue.hasRemaining() || leftTimestamp > rightTimestamp ? Resolution.LEFT_WINS : Resolution.RIGHT_WINS;
1: 
1:         if (!rightValue.hasRemaining())
1:             return Resolution.RIGHT_WINS;
1: 
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.context.CounterContext;
1: 
1: public abstract class Conflicts
1: {
1:     private Conflicts() {}
1: 
1:     public enum Resolution { LEFT_WINS, MERGE, RIGHT_WINS };
1: 
1:     public static Resolution resolveRegular(long leftTimestamp,
1:                                             boolean leftLive,
1:                                             int leftLocalDeletionTime,
1:                                             ByteBuffer leftValue,
1:                                             long rightTimestamp,
1:                                             boolean rightLive,
1:                                             int rightLocalDeletionTime,
1:                                             ByteBuffer rightValue)
1:     {
1:         if (leftTimestamp != rightTimestamp)
1:             return leftTimestamp < rightTimestamp ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1: 
1:         if (leftLive != rightLive)
1:             return leftLive ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1: 
1:         int c = leftValue.compareTo(rightValue);
1:         if (c < 0)
1:             return Resolution.RIGHT_WINS;
1:         else if (c > 0)
1:             return Resolution.LEFT_WINS;
1: 
1:         // Prefer the longest ttl if relevant
1:         return leftLocalDeletionTime < rightLocalDeletionTime ? Resolution.RIGHT_WINS : Resolution.LEFT_WINS;
1:     }
1: 
1:     public static Resolution resolveCounter(long leftTimestamp,
1:                                             boolean leftLive,
1:                                             ByteBuffer leftValue,
1:                                             long rightTimestamp,
1:                                             boolean rightLive,
1:                                             ByteBuffer rightValue)
1:     {
1:         // No matter what the counter cell's timestamp is, a tombstone always takes precedence. See CASSANDRA-7346.
1:         if (!leftLive)
1:             // left is a tombstone: it has precedence over right if either right is not a tombstone, or left has a greater timestamp
1:             return rightLive || leftTimestamp > rightTimestamp ? Resolution.LEFT_WINS : Resolution.RIGHT_WINS;
1: 
1:         // If right is a tombstone, since left isn't one, it has precedence
1:         if (!rightLive)
1:             return Resolution.RIGHT_WINS;
1: 
1:         return Resolution.MERGE;
1:     }
1: 
1:     public static ByteBuffer mergeCounterValues(ByteBuffer left, ByteBuffer right)
1:     {
1:         return CounterContext.instance().merge(left, right);
1:     }
1: 
1: }
============================================================================