1:a0d6ed1: /*
1:a0d6ed1:  * Licensed to the Apache Software Foundation (ASF) under one
1:a0d6ed1:  * or more contributor license agreements.  See the NOTICE file
1:a0d6ed1:  * distributed with this work for additional information
1:a0d6ed1:  * regarding copyright ownership.  The ASF licenses this file
1:a0d6ed1:  * to you under the Apache License, Version 2.0 (the
1:a0d6ed1:  * "License"); you may not use this file except in compliance
1:a0d6ed1:  * with the License.  You may obtain a copy of the License at
1:a0d6ed1:  *
1:a0d6ed1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a0d6ed1:  *
1:a0d6ed1:  * Unless required by applicable law or agreed to in writing, software
1:a0d6ed1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0d6ed1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0d6ed1:  * See the License for the specific language governing permissions and
1:a0d6ed1:  * limitations under the License.
1:a0d6ed1:  */
1:a0d6ed1: package org.apache.cassandra.streaming.management;
1:a0d6ed1: 
1:a0d6ed1: import java.util.*;
1:a0d6ed1: import javax.management.openmbean.*;
1:a0d6ed1: 
1:a0d6ed1: import com.google.common.base.Function;
1:a0d6ed1: import com.google.common.base.Throwables;
1:a0d6ed1: import com.google.common.collect.Iterables;
1:a0d6ed1: import com.google.common.collect.Lists;
1:a0d6ed1: import com.google.common.collect.Sets;
1:a0d6ed1: 
1:a0d6ed1: import org.apache.cassandra.streaming.SessionInfo;
1:a0d6ed1: import org.apache.cassandra.streaming.StreamState;
1:a0d6ed1: 
1:a0d6ed1: /**
1:a0d6ed1:  */
1:a0d6ed1: public class StreamStateCompositeData
1:a0d6ed1: {
1:cf1de31:     private static final String[] ITEM_NAMES = new String[]{"planId", "description", "sessions",
1:cf1de31:                                                             "currentRxBytes", "totalRxBytes", "rxPercentage",
1:cf1de31:                                                             "currentTxBytes", "totalTxBytes", "txPercentage"};
1:a0d6ed1:     private static final String[] ITEM_DESCS = new String[]{"Plan ID of this stream",
1:a0d6ed1:                                                             "Stream plan description",
1:cf1de31:                                                             "Active stream sessions",
1:cf1de31:                                                             "Number of bytes received across all streams",
1:cf1de31:                                                             "Total bytes available to receive across all streams",
1:cf1de31:                                                             "Percentage received across all streams",
1:cf1de31:                                                             "Number of bytes sent across all streams",
1:cf1de31:                                                             "Total bytes available to send across all streams",
1:cf1de31:                                                             "Percentage sent across all streams"};
1:a0d6ed1:     private static final OpenType<?>[] ITEM_TYPES;
1:a0d6ed1: 
1:a0d6ed1:     public static final CompositeType COMPOSITE_TYPE;
1:68d2526:     static
1:68d2526:     {
1:a0d6ed1:         try
1:a0d6ed1:         {
1:a0d6ed1:             ITEM_TYPES = new OpenType[]{SimpleType.STRING,
1:a0d6ed1:                                          SimpleType.STRING,
1:cf1de31:                                          ArrayType.getArrayType(SessionInfoCompositeData.COMPOSITE_TYPE),
1:cf1de31:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.DOUBLE,
1:cf1de31:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.DOUBLE};
1:a0d6ed1:             COMPOSITE_TYPE = new CompositeType(StreamState.class.getName(),
1:a0d6ed1:                                             "StreamState",
1:a0d6ed1:                                             ITEM_NAMES,
1:a0d6ed1:                                             ITEM_DESCS,
1:a0d6ed1:                                             ITEM_TYPES);
1:a0d6ed1:         }
1:a0d6ed1:         catch (OpenDataException e)
1:a0d6ed1:         {
1:a0d6ed1:             throw Throwables.propagate(e);
1:a0d6ed1:         }
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public static CompositeData toCompositeData(final StreamState streamState)
1:a0d6ed1:     {
1:a0d6ed1:         Map<String, Object> valueMap = new HashMap<>();
1:a0d6ed1:         valueMap.put(ITEM_NAMES[0], streamState.planId.toString());
1:a0d6ed1:         valueMap.put(ITEM_NAMES[1], streamState.description);
1:a0d6ed1: 
1:a0d6ed1:         CompositeData[] sessions = new CompositeData[streamState.sessions.size()];
1:a0d6ed1:         Lists.newArrayList(Iterables.transform(streamState.sessions, new Function<SessionInfo, CompositeData>()
1:a0d6ed1:         {
1:a0d6ed1:             public CompositeData apply(SessionInfo input)
1:a0d6ed1:             {
1:a0d6ed1:                 return SessionInfoCompositeData.toCompositeData(streamState.planId, input);
1:a0d6ed1:             }
1:a0d6ed1:         })).toArray(sessions);
1:a0d6ed1:         valueMap.put(ITEM_NAMES[2], sessions);
1:cf1de31: 
1:cf1de31:         long currentRxBytes = 0;
1:cf1de31:         long totalRxBytes = 0;
1:cf1de31:         long currentTxBytes = 0;
1:cf1de31:         long totalTxBytes = 0;
1:cf1de31:         for (SessionInfo sessInfo : streamState.sessions)
1:cf1de31:         {
1:cf1de31:             currentRxBytes += sessInfo.getTotalSizeReceived();
1:cf1de31:             totalRxBytes += sessInfo.getTotalSizeToReceive();
1:cf1de31:             currentTxBytes += sessInfo.getTotalSizeSent();
1:cf1de31:             totalTxBytes += sessInfo.getTotalSizeToSend();
1:cf1de31:         }
1:cf1de31:         double rxPercentage = (totalRxBytes == 0 ? 100L : currentRxBytes * 100L / totalRxBytes);
1:cf1de31:         double txPercentage = (totalTxBytes == 0 ? 100L : currentTxBytes * 100L / totalTxBytes);
1:cf1de31: 
1:cf1de31:         valueMap.put(ITEM_NAMES[3], currentRxBytes);
1:cf1de31:         valueMap.put(ITEM_NAMES[4], totalRxBytes);
1:cf1de31:         valueMap.put(ITEM_NAMES[5], rxPercentage);
1:cf1de31:         valueMap.put(ITEM_NAMES[6], currentTxBytes);
1:cf1de31:         valueMap.put(ITEM_NAMES[7], totalTxBytes);
1:cf1de31:         valueMap.put(ITEM_NAMES[8], txPercentage);
1:cf1de31: 
1:a0d6ed1:         try
1:a0d6ed1:         {
1:a0d6ed1:             return new CompositeDataSupport(COMPOSITE_TYPE, valueMap);
1:a0d6ed1:         }
1:a0d6ed1:         catch (OpenDataException e)
1:a0d6ed1:         {
1:a0d6ed1:             throw Throwables.propagate(e);
1:a0d6ed1:         }
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public static StreamState fromCompositeData(CompositeData cd)
1:a0d6ed1:     {
1:a0d6ed1:         assert cd.getCompositeType().equals(COMPOSITE_TYPE);
1:a0d6ed1:         Object[] values = cd.getAll(ITEM_NAMES);
1:a0d6ed1:         UUID planId = UUID.fromString((String) values[0]);
1:a0d6ed1:         String description = (String) values[1];
1:a0d6ed1:         Set<SessionInfo> sessions = Sets.newHashSet(Iterables.transform(Arrays.asList((CompositeData[]) values[2]),
1:a0d6ed1:                                                                         new Function<CompositeData, SessionInfo>()
1:a0d6ed1:                                                                         {
1:a0d6ed1:                                                                             public SessionInfo apply(CompositeData input)
1:a0d6ed1:                                                                             {
1:a0d6ed1:                                                                                 return SessionInfoCompositeData.fromCompositeData(input);
1:a0d6ed1:                                                                             }
1:a0d6ed1:                                                                         }));
1:a0d6ed1:         return new StreamState(planId, description, sessions);
1:a0d6ed1:     }
1:a0d6ed1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
author:Greg DeAngelis
-------------------------------------------------------------------------------
commit:cf1de31
/////////////////////////////////////////////////////////////////////////
1:     private static final String[] ITEM_NAMES = new String[]{"planId", "description", "sessions",
1:                                                             "currentRxBytes", "totalRxBytes", "rxPercentage",
1:                                                             "currentTxBytes", "totalTxBytes", "txPercentage"};
1:                                                             "Active stream sessions",
1:                                                             "Number of bytes received across all streams",
1:                                                             "Total bytes available to receive across all streams",
1:                                                             "Percentage received across all streams",
1:                                                             "Number of bytes sent across all streams",
1:                                                             "Total bytes available to send across all streams",
1:                                                             "Percentage sent across all streams"};
/////////////////////////////////////////////////////////////////////////
1:                                          ArrayType.getArrayType(SessionInfoCompositeData.COMPOSITE_TYPE),
1:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.DOUBLE,
1:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.DOUBLE};
/////////////////////////////////////////////////////////////////////////
1: 
1:         long currentRxBytes = 0;
1:         long totalRxBytes = 0;
1:         long currentTxBytes = 0;
1:         long totalTxBytes = 0;
1:         for (SessionInfo sessInfo : streamState.sessions)
1:         {
1:             currentRxBytes += sessInfo.getTotalSizeReceived();
1:             totalRxBytes += sessInfo.getTotalSizeToReceive();
1:             currentTxBytes += sessInfo.getTotalSizeSent();
1:             totalTxBytes += sessInfo.getTotalSizeToSend();
1:         }
1:         double rxPercentage = (totalRxBytes == 0 ? 100L : currentRxBytes * 100L / totalRxBytes);
1:         double txPercentage = (totalTxBytes == 0 ? 100L : currentTxBytes * 100L / totalTxBytes);
1: 
1:         valueMap.put(ITEM_NAMES[3], currentRxBytes);
1:         valueMap.put(ITEM_NAMES[4], totalRxBytes);
1:         valueMap.put(ITEM_NAMES[5], rxPercentage);
1:         valueMap.put(ITEM_NAMES[6], currentTxBytes);
1:         valueMap.put(ITEM_NAMES[7], totalTxBytes);
1:         valueMap.put(ITEM_NAMES[8], txPercentage);
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:a0d6ed1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.management;
1: 
1: import java.util.*;
1: import javax.management.openmbean.*;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.base.Throwables;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
1: 
1: import org.apache.cassandra.streaming.SessionInfo;
1: import org.apache.cassandra.streaming.StreamState;
1: 
1: /**
1:  */
1: public class StreamStateCompositeData
1: {
0:     private static final String[] ITEM_NAMES = new String[]{"planId", "description", "sessions"};
1:     private static final String[] ITEM_DESCS = new String[]{"Plan ID of this stream",
1:                                                             "Stream plan description",
0:                                                             "Active stream sessions"};
1:     private static final OpenType<?>[] ITEM_TYPES;
1: 
1:     public static final CompositeType COMPOSITE_TYPE;
0:     static  {
1:         try
1:         {
1:             ITEM_TYPES = new OpenType[]{SimpleType.STRING,
1:                                          SimpleType.STRING,
0:                                          ArrayType.getArrayType(SessionInfoCompositeData.COMPOSITE_TYPE)};
1:             COMPOSITE_TYPE = new CompositeType(StreamState.class.getName(),
1:                                             "StreamState",
1:                                             ITEM_NAMES,
1:                                             ITEM_DESCS,
1:                                             ITEM_TYPES);
1:         }
1:         catch (OpenDataException e)
1:         {
1:             throw Throwables.propagate(e);
1:         }
1:     }
1: 
1:     public static CompositeData toCompositeData(final StreamState streamState)
1:     {
1:         Map<String, Object> valueMap = new HashMap<>();
1:         valueMap.put(ITEM_NAMES[0], streamState.planId.toString());
1:         valueMap.put(ITEM_NAMES[1], streamState.description);
1: 
1:         CompositeData[] sessions = new CompositeData[streamState.sessions.size()];
1:         Lists.newArrayList(Iterables.transform(streamState.sessions, new Function<SessionInfo, CompositeData>()
1:         {
1:             public CompositeData apply(SessionInfo input)
1:             {
1:                 return SessionInfoCompositeData.toCompositeData(streamState.planId, input);
1:             }
1:         })).toArray(sessions);
1:         valueMap.put(ITEM_NAMES[2], sessions);
1:         try
1:         {
1:             return new CompositeDataSupport(COMPOSITE_TYPE, valueMap);
1:         }
1:         catch (OpenDataException e)
1:         {
1:             throw Throwables.propagate(e);
1:         }
1:     }
1: 
1:     public static StreamState fromCompositeData(CompositeData cd)
1:     {
1:         assert cd.getCompositeType().equals(COMPOSITE_TYPE);
1:         Object[] values = cd.getAll(ITEM_NAMES);
1:         UUID planId = UUID.fromString((String) values[0]);
1:         String description = (String) values[1];
1:         Set<SessionInfo> sessions = Sets.newHashSet(Iterables.transform(Arrays.asList((CompositeData[]) values[2]),
1:                                                                         new Function<CompositeData, SessionInfo>()
1:                                                                         {
1:                                                                             public SessionInfo apply(CompositeData input)
1:                                                                             {
1:                                                                                 return SessionInfoCompositeData.fromCompositeData(input);
1:                                                                             }
1:                                                                         }));
1:         return new StreamState(planId, description, sessions);
1:     }
1: }
============================================================================