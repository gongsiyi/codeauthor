1:4205011: /*
1:4205011:  * Licensed to the Apache Software Foundation (ASF) under one
1:4205011:  * or more contributor license agreements.  See the NOTICE file
1:4205011:  * distributed with this work for additional information
1:4205011:  * regarding copyright ownership.  The ASF licenses this file
1:4205011:  * to you under the Apache License, Version 2.0 (the
1:4205011:  * "License"); you may not use this file except in compliance
1:4205011:  * with the License.  You may obtain a copy of the License at
1:4205011:  *
1:4205011:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4205011:  *
1:4205011:  * Unless required by applicable law or agreed to in writing, software
1:4205011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4205011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4205011:  * See the License for the specific language governing permissions and
1:4205011:  * limitations under the License.
1:4205011:  */
1:4205011: package org.apache.cassandra.db.aggregation;
1:4205011: 
1:4205011: import java.nio.ByteBuffer;
1:4205011: 
1:9797511: import org.junit.BeforeClass;
1:4205011: import org.junit.Test;
1:4205011: 
1:4205011: import org.apache.cassandra.config.DatabaseDescriptor;
1:4205011: import org.apache.cassandra.db.Clustering;
1:4205011: import org.apache.cassandra.db.ClusteringComparator;
1:4205011: import org.apache.cassandra.db.DecoratedKey;
1:4205011: import org.apache.cassandra.db.marshal.AbstractType;
1:4205011: import org.apache.cassandra.db.marshal.Int32Type;
1:4205011: import org.apache.cassandra.db.marshal.ReversedType;
1:4205011: 
1:4205011: import static org.junit.Assert.assertFalse;
1:4205011: import static org.junit.Assert.assertTrue;
1:4205011: 
1:4205011: public class GroupMakerTest
1:4205011: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithClusteringColumns()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(false, false, false);
1:4205011:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithOneClusteringColumnsPrefix()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(false, false, false);
1:4205011:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 1);
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithReversedClusteringColumns()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(true, true, true);
1:4205011: 
1:4205011:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithOneReversedClusteringColumns()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(true, false, false);
1:4205011: 
1:4205011:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithStaticClusteringColumns()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(false, false, false);
1:4205011:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:4205011:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:4205011: 
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(2), Clustering.STATIC_CLUSTERING));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(3), Clustering.STATIC_CLUSTERING));
1:4205011:         assertTrue(groupMaker.isNewGroup(partitionKey(4), clustering(1, 1, 2)));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testIsNewGroupWithOnlyPartitionKeyComponents()
1:4205011:     {
1:4205011:         ClusteringComparator comparator = newComparator(false, false, false);
1:4205011:         GroupMaker goupMaker = GroupMaker.newInstance(comparator, 2);
1:4205011: 
1:4205011:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 1), clustering(1, 1, 1)));
1:4205011:         assertFalse(goupMaker.isNewGroup(partitionKey(1, 1), clustering(1, 1, 2)));
1:4205011: 
1:4205011:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 2), clustering(1, 1, 2)));
1:4205011:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 2), clustering(2, 2, 2)));
1:4205011: 
1:4205011:         assertTrue(goupMaker.isNewGroup(partitionKey(2, 2), clustering(1, 1, 2)));
1:4205011:     }
1:4205011: 
1:4205011:     private static DecoratedKey partitionKey(int... components)
1:4205011:     {
1:4205011:         ByteBuffer buffer = ByteBuffer.allocate(components.length * 4);
1:4205011:         for (int component : components)
1:4205011:         {
1:4205011:             buffer.putInt(component);
1:4205011:         }
1:4205011:         buffer.flip();
1:4205011:         return DatabaseDescriptor.getPartitioner().decorateKey(buffer);
1:4205011:     }
1:4205011: 
1:4205011:     private static Clustering clustering(int... components)
1:4205011:     {
1:4205011:         return Clustering.make(toByteBufferArray(components));
1:4205011:     }
1:4205011: 
1:4205011:     private static ByteBuffer[] toByteBufferArray(int[] values)
1:4205011:     {
1:4205011:         ByteBuffer[] buffers = new ByteBuffer[values.length];
1:4205011: 
1:4205011:         for (int i = 0; i < values.length; i++)
1:4205011:         {
1:4205011:             buffers[i] = Int32Type.instance.decompose(values[i]);
1:4205011:         }
1:4205011: 
1:4205011:         return buffers;
1:4205011:     }
1:4205011: 
1:4205011:     private static ClusteringComparator newComparator(boolean... reversed)
1:4205011:     {
1:4205011:         AbstractType<?>[] types = new AbstractType<?>[reversed.length];
1:4205011:         for (int i = 0, m = reversed.length; i < m; i++)
1:4205011:             types[i] = reversed[i] ? ReversedType.getInstance(Int32Type.instance) : Int32Type.instance;
1:4205011: 
1:4205011:         return new ClusteringComparator(types);
1:4205011:     }
1:4205011: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.aggregation;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.ClusteringComparator;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.ReversedType;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class GroupMakerTest
1: {
1:     @Test
1:     public void testIsNewGroupWithClusteringColumns()
1:     {
1:         ClusteringComparator comparator = newComparator(false, false, false);
1:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:     }
1: 
1:     @Test
1:     public void testIsNewGroupWithOneClusteringColumnsPrefix()
1:     {
1:         ClusteringComparator comparator = newComparator(false, false, false);
1:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 1);
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:     }
1: 
1:     @Test
1:     public void testIsNewGroupWithReversedClusteringColumns()
1:     {
1:         ClusteringComparator comparator = newComparator(true, true, true);
1: 
1:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:     }
1: 
1:     @Test
1:     public void testIsNewGroupWithOneReversedClusteringColumns()
1:     {
1:         ClusteringComparator comparator = newComparator(true, false, false);
1: 
1:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 3, 2)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 2, 1)));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 3)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(2, 1, 2)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(2), clustering(2, 2, 1)));
1:     }
1: 
1:     @Test
1:     public void testIsNewGroupWithStaticClusteringColumns()
1:     {
1:         ClusteringComparator comparator = newComparator(false, false, false);
1:         GroupMaker groupMaker = GroupMaker.newInstance(comparator, 2);
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 1)));
1:         assertFalse(groupMaker.isNewGroup(partitionKey(1), clustering(1, 1, 2)));
1: 
1:         assertTrue(groupMaker.isNewGroup(partitionKey(2), Clustering.STATIC_CLUSTERING));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(3), Clustering.STATIC_CLUSTERING));
1:         assertTrue(groupMaker.isNewGroup(partitionKey(4), clustering(1, 1, 2)));
1:     }
1: 
1:     @Test
1:     public void testIsNewGroupWithOnlyPartitionKeyComponents()
1:     {
1:         ClusteringComparator comparator = newComparator(false, false, false);
1:         GroupMaker goupMaker = GroupMaker.newInstance(comparator, 2);
1: 
1:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 1), clustering(1, 1, 1)));
1:         assertFalse(goupMaker.isNewGroup(partitionKey(1, 1), clustering(1, 1, 2)));
1: 
1:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 2), clustering(1, 1, 2)));
1:         assertTrue(goupMaker.isNewGroup(partitionKey(1, 2), clustering(2, 2, 2)));
1: 
1:         assertTrue(goupMaker.isNewGroup(partitionKey(2, 2), clustering(1, 1, 2)));
1:     }
1: 
1:     private static DecoratedKey partitionKey(int... components)
1:     {
1:         ByteBuffer buffer = ByteBuffer.allocate(components.length * 4);
1:         for (int component : components)
1:         {
1:             buffer.putInt(component);
1:         }
1:         buffer.flip();
1:         return DatabaseDescriptor.getPartitioner().decorateKey(buffer);
1:     }
1: 
1:     private static Clustering clustering(int... components)
1:     {
1:         return Clustering.make(toByteBufferArray(components));
1:     }
1: 
1:     private static ByteBuffer[] toByteBufferArray(int[] values)
1:     {
1:         ByteBuffer[] buffers = new ByteBuffer[values.length];
1: 
1:         for (int i = 0; i < values.length; i++)
1:         {
1:             buffers[i] = Int32Type.instance.decompose(values[i]);
1:         }
1: 
1:         return buffers;
1:     }
1: 
1:     private static ClusteringComparator newComparator(boolean... reversed)
1:     {
1:         AbstractType<?>[] types = new AbstractType<?>[reversed.length];
1:         for (int i = 0, m = reversed.length; i < m; i++)
1:             types[i] = reversed[i] ? ReversedType.getInstance(Int32Type.instance) : Int32Type.instance;
1: 
1:         return new ClusteringComparator(types);
1:     }
1: }
============================================================================