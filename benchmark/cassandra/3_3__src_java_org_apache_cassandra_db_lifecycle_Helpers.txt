1:e5a76bd: /*
1:e5a76bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:e5a76bd:  * or more contributor license agreements.  See the NOTICE file
1:e5a76bd:  * distributed with this work for additional information
1:e5a76bd:  * regarding copyright ownership.  The ASF licenses this file
1:e5a76bd:  * to you under the Apache License, Version 2.0 (the
1:e5a76bd:  * "License"); you may not use this file except in compliance
1:e5a76bd:  * with the License.  You may obtain a copy of the License at
1:e5a76bd:  *
1:e5a76bd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e5a76bd:  *
1:e5a76bd:  * Unless required by applicable law or agreed to in writing, software
1:e5a76bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5a76bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5a76bd:  * See the License for the specific language governing permissions and
1:e5a76bd:  * limitations under the License.
3:e5a76bd:  */
1:e5a76bd: package org.apache.cassandra.db.lifecycle;
2:e5a76bd: 
1:e5a76bd: import java.util.*;
1:e5a76bd: 
1:e5a76bd: import com.google.common.base.Predicate;
1:e5a76bd: import com.google.common.collect.*;
1:e5a76bd: 
1:e5a76bd: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:b09e60f: import org.apache.cassandra.utils.Throwables;
1:e5a76bd: 
1:e5a76bd: import static com.google.common.base.Predicates.*;
1:e5a76bd: import static com.google.common.collect.Iterables.any;
1:e5a76bd: import static com.google.common.collect.Iterables.concat;
1:e5a76bd: import static com.google.common.collect.Iterables.filter;
1:e5a76bd: import static com.google.common.collect.Iterables.getFirst;
1:e5a76bd: import static org.apache.cassandra.utils.Throwables.merge;
1:e5a76bd: 
1:e5a76bd: class Helpers
4:e5a76bd: {
3:e5a76bd:     /**
1:e5a76bd:      * update the contents of a set with the provided sets, ensuring that the items to remove are
1:e5a76bd:      * really present, and that the items to add are not (unless we're also removing them)
1:e5a76bd:      * @return a new set with the contents of the provided one modified
1:e5a76bd:      */
1:e5a76bd:     static <T> Set<T> replace(Set<T> original, Set<T> remove, Iterable<T> add)
1:e5a76bd:     {
1:e5a76bd:         return ImmutableSet.copyOf(replace(identityMap(original), remove, add).keySet());
4:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * update the contents of an "identity map" with the provided sets, ensuring that the items to remove are
1:e5a76bd:      * really present, and that the items to add are not (unless we're also removing them)
1:e5a76bd:      * @return a new identity map with the contents of the provided one modified
1:e5a76bd:      */
1:e5a76bd:     static <T> Map<T, T> replace(Map<T, T> original, Set<T> remove, Iterable<T> add)
1:e5a76bd:     {
1:e5a76bd:         // ensure the ones being removed are the exact same ones present
1:e5a76bd:         for (T reader : remove)
1:e5a76bd:             assert original.get(reader) == reader;
1:e5a76bd: 
1:e5a76bd:         // ensure we don't already contain any we're adding, that we aren't also removing
1:e5a76bd:         assert !any(add, and(not(in(remove)), in(original.keySet()))) : String.format("original:%s remove:%s add:%s", original.keySet(), remove, add);
1:e5a76bd: 
1:e5a76bd:         Map<T, T> result =
1:e5a76bd:             identityMap(concat(add, filter(original.keySet(), not(in(remove)))));
1:e5a76bd: 
1:e5a76bd:         assert result.size() == original.size() - remove.size() + Iterables.size(add) :
1:e5a76bd:         String.format("Expecting new size of %d, got %d while replacing %s by %s in %s",
1:e5a76bd:                       original.size() - remove.size() + Iterables.size(add), result.size(), remove, add, original.keySet());
1:e5a76bd:         return result;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
3:e5a76bd:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
3:e5a76bd:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:e5a76bd:      */
1:64e93a7:     static void setupOnline(Iterable<SSTableReader> readers)
1:b09e60f:     {
1:b09e60f:         for (SSTableReader reader : readers)
1:64e93a7:             reader.setupOnline();
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     /**
1:b09e60f:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
1:b09e60f:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:b09e60f:      */
1:e5a76bd:     static Throwable setReplaced(Iterable<SSTableReader> readers, Throwable accumulate)
1:e5a76bd:     {
2:e5a76bd:         for (SSTableReader reader : readers)
1:e5a76bd:         {
2:e5a76bd:             try
1:e5a76bd:             {
1:e5a76bd:                 reader.setReplaced();
1:e5a76bd:             }
2:e5a76bd:             catch (Throwable t)
1:e5a76bd:             {
2:e5a76bd:                 accumulate = merge(accumulate, t);
1:e5a76bd:             }
1:e5a76bd:         }
2:e5a76bd:         return accumulate;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * assert that none of these readers have been replaced
1:e5a76bd:      */
1:e5a76bd:     static void checkNotReplaced(Iterable<SSTableReader> readers)
1:e5a76bd:     {
1:e5a76bd:         for (SSTableReader reader : readers)
1:e5a76bd:             assert !reader.isReplaced();
1:e5a76bd:     }
1:e5a76bd: 
1:351c7ca:     static Throwable markObsolete(List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:b09e60f:     {
1:b09e60f:         if (obsoletions == null || obsoletions.isEmpty())
1:b09e60f:             return accumulate;
1:b09e60f: 
1:351c7ca:         for (LogTransaction.Obsoletion obsoletion : obsoletions)
1:b09e60f:         {
1:b09e60f:             try
1:b09e60f:             {
1:b09e60f:                 obsoletion.reader.markObsolete(obsoletion.tidier);
1:b09e60f:             }
1:b09e60f:             catch (Throwable t)
1:b09e60f:             {
1:b09e60f:                 accumulate = merge(accumulate, t);
1:b09e60f:             }
1:b09e60f:         }
1:b09e60f:         return accumulate;
1:b09e60f:     }
1:b09e60f: 
1:351c7ca:     static Throwable prepareForObsoletion(Iterable<SSTableReader> readers, LogTransaction txnLogs, List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:b09e60f:     {
1:e5a76bd:         for (SSTableReader reader : readers)
1:b09e60f:         {
1:e5a76bd:             try
1:e5a76bd:             {
1:351c7ca:                 obsoletions.add(new LogTransaction.Obsoletion(reader, txnLogs.obsoleted(reader)));
1:b09e60f:             }
1:b09e60f:             catch (Throwable t)
1:e5a76bd:             {
1:b09e60f:                 accumulate = Throwables.merge(accumulate, t);
1:b09e60f:             }
1:b09e60f:         }
1:b09e60f:         return accumulate;
1:b09e60f:     }
1:b09e60f: 
1:351c7ca:     static Throwable abortObsoletion(List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:b09e60f:     {
1:b09e60f:         if (obsoletions == null || obsoletions.isEmpty())
1:b09e60f:             return accumulate;
1:b09e60f: 
1:351c7ca:         for (LogTransaction.Obsoletion obsoletion : obsoletions)
1:b09e60f:         {
1:b09e60f:             try
1:e5a76bd:             {
1:b09e60f:                 obsoletion.tidier.abort();
1:e5a76bd:             }
1:e5a76bd:             catch (Throwable t)
1:e5a76bd:             {
1:e5a76bd:                 accumulate = merge(accumulate, t);
1:e5a76bd:             }
1:e5a76bd:         }
1:e5a76bd:         return accumulate;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * @return the identity function, as a Map, with domain of the provided values
1:e5a76bd:      */
1:e5a76bd:     static <T> Map<T, T> identityMap(Iterable<T> values)
1:e5a76bd:     {
1:e5a76bd:         ImmutableMap.Builder<T, T> builder = ImmutableMap.<T, T>builder();
1:e5a76bd:         for (T t : values)
1:e5a76bd:             builder.put(t, t);
1:e5a76bd:         return builder.build();
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * @return an Iterable of the union if the sets, with duplicates being represented by their first encountered instance
1:e5a76bd:      * (as defined by the order of set provision)
1:e5a76bd:      */
1:e5a76bd:     static <T> Iterable<T> concatUniq(Set<T>... sets)
1:e5a76bd:     {
1:e5a76bd:         List<Predicate<T>> notIn = new ArrayList<>(sets.length);
1:e5a76bd:         for (Set<T> set : sets)
1:e5a76bd:             notIn.add(not(in(set)));
1:e5a76bd:         List<Iterable<T>> results = new ArrayList<>(sets.length);
1:e5a76bd:         for (int i = 0 ; i < sets.length ; i++)
1:e5a76bd:             results.add(filter(sets[i], and(notIn.subList(0, i))));
1:e5a76bd:         return concat(results);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * @return a Predicate yielding true for an item present in NONE of the provided sets
1:e5a76bd:      */
1:e5a76bd:     static <T> Predicate<T> notIn(Set<T>... sets)
1:e5a76bd:     {
1:e5a76bd:         return not(orIn(sets));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * @return a Predicate yielding true for an item present in ANY of the provided sets
1:e5a76bd:      */
1:e5a76bd:     static <T> Predicate<T> orIn(Collection<T>... sets)
1:e5a76bd:     {
1:e5a76bd:         Predicate<T>[] orIn = new Predicate[sets.length];
1:e5a76bd:         for (int i = 0 ; i < orIn.length ; i++)
1:e5a76bd:             orIn[i] = in(sets[i]);
1:e5a76bd:         return or(orIn);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * filter out (i.e. remove) matching elements
1:e5a76bd:      * @return filter, filtered to only those elements that *are not* present in *any* of the provided sets (are present in none)
1:e5a76bd:      */
1:e5a76bd:     static <T> Iterable<T> filterOut(Iterable<T> filter, Set<T>... inNone)
1:e5a76bd:     {
1:e5a76bd:         return filter(filter, notIn(inNone));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     /**
1:e5a76bd:      * filter in (i.e. retain)
1:e5a76bd:      *
1:e5a76bd:      * @return filter, filtered to only those elements that *are* present in *any* of the provided sets
1:e5a76bd:      */
1:e5a76bd:     static <T> Iterable<T> filterIn(Iterable<T> filter, Set<T>... inAny)
1:e5a76bd:     {
1:e5a76bd:         return filter(filter, orIn(inAny));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     static Set<SSTableReader> emptySet()
1:e5a76bd:     {
1:e5a76bd:         return Collections.emptySet();
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     static <T> T select(T t, Collection<T> col)
1:e5a76bd:     {
1:e5a76bd:         if (col instanceof Set && !col.contains(t))
1:e5a76bd:             return null;
1:e5a76bd:         return getFirst(filter(col, equalTo(t)), null);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     static <T> T selectFirst(T t, Collection<T> ... sets)
1:e5a76bd:     {
1:e5a76bd:         for (Collection<T> set : sets)
1:e5a76bd:         {
1:e5a76bd:             T select = select(t, set);
1:e5a76bd:             if (select != null)
1:e5a76bd:                 return select;
1:e5a76bd:         }
1:e5a76bd:         return null;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     static <T> Predicate<T> idIn(Set<T> set)
1:e5a76bd:     {
1:e5a76bd:         return idIn(identityMap(set));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     static <T> Predicate<T> idIn(final Map<T, T> identityMap)
1:e5a76bd:     {
1:e5a76bd:         return new Predicate<T>()
1:e5a76bd:         {
1:e5a76bd:             public boolean apply(T t)
1:e5a76bd:             {
1:e5a76bd:                 return identityMap.get(t) == t;
1:e5a76bd:             }
1:e5a76bd:         };
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:351c7ca
/////////////////////////////////////////////////////////////////////////
1:     static Throwable markObsolete(List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:         for (LogTransaction.Obsoletion obsoletion : obsoletions)
/////////////////////////////////////////////////////////////////////////
1:     static Throwable prepareForObsoletion(Iterable<SSTableReader> readers, LogTransaction txnLogs, List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:                 obsoletions.add(new LogTransaction.Obsoletion(reader, txnLogs.obsoleted(reader)));
/////////////////////////////////////////////////////////////////////////
1:     static Throwable abortObsoletion(List<LogTransaction.Obsoletion> obsoletions, Throwable accumulate)
1:         for (LogTransaction.Obsoletion obsoletion : obsoletions)
commit:5726625
/////////////////////////////////////////////////////////////////////////
0:     static Throwable markObsolete(List<TransactionLog.Obsoletion> obsoletions, Throwable accumulate)
0:         for (TransactionLog.Obsoletion obsoletion : obsoletions)
/////////////////////////////////////////////////////////////////////////
0:     static Throwable prepareForObsoletion(Iterable<SSTableReader> readers, TransactionLog txnLogs, List<TransactionLog.Obsoletion> obsoletions, Throwable accumulate)
0:                 obsoletions.add(new TransactionLog.Obsoletion(reader, txnLogs.obsoleted(reader)));
/////////////////////////////////////////////////////////////////////////
0:     static Throwable abortObsoletion(List<TransactionLog.Obsoletion> obsoletions, Throwable accumulate)
0:         for (TransactionLog.Obsoletion obsoletion : obsoletions)
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Throwables;
/////////////////////////////////////////////////////////////////////////
0:     static void setupKeyCache(Iterable<SSTableReader> readers)
1:     {
1:         for (SSTableReader reader : readers)
0:             reader.setupKeyCache();
1:     }
1: 
1:     /**
1:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
1:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:      */
/////////////////////////////////////////////////////////////////////////
0:     static Throwable markObsolete(List<TransactionLogs.Obsoletion> obsoletions, Throwable accumulate)
1:     {
1:         if (obsoletions == null || obsoletions.isEmpty())
1:             return accumulate;
1: 
0:         for (TransactionLogs.Obsoletion obsoletion : obsoletions)
1:         {
1:             try
1:             {
1:                 obsoletion.reader.markObsolete(obsoletion.tidier);
1:             }
1:             catch (Throwable t)
1:             {
1:                 accumulate = merge(accumulate, t);
1:             }
1:         }
1:         return accumulate;
1:     }
1: 
0:     static Throwable prepareForObsoletion(Iterable<SSTableReader> readers, TransactionLogs txnLogs, List<TransactionLogs.Obsoletion> obsoletions, Throwable accumulate)
0:                 obsoletions.add(new TransactionLogs.Obsoletion(reader, txnLogs.obsoleted(reader)));
1:             }
1:             catch (Throwable t)
1:             {
1:                 accumulate = Throwables.merge(accumulate, t);
1:             }
1:         }
1:         return accumulate;
1:     }
1: 
0:     static Throwable abortObsoletion(List<TransactionLogs.Obsoletion> obsoletions, Throwable accumulate)
1:     {
1:         if (obsoletions == null || obsoletions.isEmpty())
1:             return accumulate;
1: 
0:         for (TransactionLogs.Obsoletion obsoletion : obsoletions)
1:         {
1:             try
1:             {
1:                 obsoletion.tidier.abort();
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:64e93a7
/////////////////////////////////////////////////////////////////////////
1:     static void setupOnline(Iterable<SSTableReader> readers)
1:             reader.setupOnline();
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:1f430c5
commit:2357589
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.lifecycle;
1: 
1: import java.util.*;
1: 
1: import com.google.common.base.Predicate;
1: import com.google.common.collect.*;
1: 
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: 
1: import static com.google.common.base.Predicates.*;
1: import static com.google.common.collect.Iterables.any;
1: import static com.google.common.collect.Iterables.concat;
1: import static com.google.common.collect.Iterables.filter;
1: import static com.google.common.collect.Iterables.getFirst;
1: import static org.apache.cassandra.utils.Throwables.merge;
1: 
1: class Helpers
1: {
1:     /**
1:      * update the contents of a set with the provided sets, ensuring that the items to remove are
1:      * really present, and that the items to add are not (unless we're also removing them)
1:      * @return a new set with the contents of the provided one modified
1:      */
1:     static <T> Set<T> replace(Set<T> original, Set<T> remove, Iterable<T> add)
1:     {
1:         return ImmutableSet.copyOf(replace(identityMap(original), remove, add).keySet());
1:     }
1: 
1:     /**
1:      * update the contents of an "identity map" with the provided sets, ensuring that the items to remove are
1:      * really present, and that the items to add are not (unless we're also removing them)
1:      * @return a new identity map with the contents of the provided one modified
1:      */
1:     static <T> Map<T, T> replace(Map<T, T> original, Set<T> remove, Iterable<T> add)
1:     {
1:         // ensure the ones being removed are the exact same ones present
1:         for (T reader : remove)
1:             assert original.get(reader) == reader;
1: 
1:         // ensure we don't already contain any we're adding, that we aren't also removing
1:         assert !any(add, and(not(in(remove)), in(original.keySet()))) : String.format("original:%s remove:%s add:%s", original.keySet(), remove, add);
1: 
1:         Map<T, T> result =
1:             identityMap(concat(add, filter(original.keySet(), not(in(remove)))));
1: 
1:         assert result.size() == original.size() - remove.size() + Iterables.size(add) :
1:         String.format("Expecting new size of %d, got %d while replacing %s by %s in %s",
1:                       original.size() - remove.size() + Iterables.size(add), result.size(), remove, add, original.keySet());
1:         return result;
1:     }
1: 
1:     /**
1:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
1:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:      */
0:     static Throwable setupDeleteNotification(Iterable<SSTableReader> readers, Tracker tracker, Throwable accumulate)
1:     {
1:         try
1:         {
1:             for (SSTableReader reader : readers)
0:                 reader.setupDeleteNotification(tracker);
1:         }
1:         catch (Throwable t)
1:         {
0:             // shouldn't be possible, but in case the contract changes in future and we miss it...
1:             accumulate = merge(accumulate, t);
1:         }
1:         return accumulate;
1:     }
1: 
1:     /**
1:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
1:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:      */
1:     static Throwable setReplaced(Iterable<SSTableReader> readers, Throwable accumulate)
1:     {
1:         for (SSTableReader reader : readers)
1:         {
1:             try
1:             {
1:                 reader.setReplaced();
1:             }
1:             catch (Throwable t)
1:             {
1:                 accumulate = merge(accumulate, t);
1:             }
1:         }
1:         return accumulate;
1:     }
1: 
1:     /**
1:      * assert that none of these readers have been replaced
1:      */
1:     static void checkNotReplaced(Iterable<SSTableReader> readers)
1:     {
1:         for (SSTableReader reader : readers)
1:             assert !reader.isReplaced();
1:     }
1: 
1:     /**
1:      * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety
1:      * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise
1:      */
0:     static Throwable markObsolete(Iterable<SSTableReader> readers, Throwable accumulate)
1:     {
1:         for (SSTableReader reader : readers)
1:         {
1:             try
1:             {
0:                 boolean firstToCompact = reader.markObsolete();
0:                 assert firstToCompact : reader + " was already marked compacted";
1:             }
1:             catch (Throwable t)
1:             {
1:                 accumulate = merge(accumulate, t);
1:             }
1:         }
1:         return accumulate;
1:     }
1: 
1:     /**
1:      * @return the identity function, as a Map, with domain of the provided values
1:      */
1:     static <T> Map<T, T> identityMap(Iterable<T> values)
1:     {
1:         ImmutableMap.Builder<T, T> builder = ImmutableMap.<T, T>builder();
1:         for (T t : values)
1:             builder.put(t, t);
1:         return builder.build();
1:     }
1: 
1:     /**
1:      * @return an Iterable of the union if the sets, with duplicates being represented by their first encountered instance
1:      * (as defined by the order of set provision)
1:      */
1:     static <T> Iterable<T> concatUniq(Set<T>... sets)
1:     {
1:         List<Predicate<T>> notIn = new ArrayList<>(sets.length);
1:         for (Set<T> set : sets)
1:             notIn.add(not(in(set)));
1:         List<Iterable<T>> results = new ArrayList<>(sets.length);
1:         for (int i = 0 ; i < sets.length ; i++)
1:             results.add(filter(sets[i], and(notIn.subList(0, i))));
1:         return concat(results);
1:     }
1: 
1:     /**
1:      * @return a Predicate yielding true for an item present in NONE of the provided sets
1:      */
1:     static <T> Predicate<T> notIn(Set<T>... sets)
1:     {
1:         return not(orIn(sets));
1:     }
1: 
1:     /**
1:      * @return a Predicate yielding true for an item present in ANY of the provided sets
1:      */
1:     static <T> Predicate<T> orIn(Collection<T>... sets)
1:     {
1:         Predicate<T>[] orIn = new Predicate[sets.length];
1:         for (int i = 0 ; i < orIn.length ; i++)
1:             orIn[i] = in(sets[i]);
1:         return or(orIn);
1:     }
1: 
1:     /**
1:      * filter out (i.e. remove) matching elements
1:      * @return filter, filtered to only those elements that *are not* present in *any* of the provided sets (are present in none)
1:      */
1:     static <T> Iterable<T> filterOut(Iterable<T> filter, Set<T>... inNone)
1:     {
1:         return filter(filter, notIn(inNone));
1:     }
1: 
1:     /**
1:      * filter in (i.e. retain)
1:      *
1:      * @return filter, filtered to only those elements that *are* present in *any* of the provided sets
1:      */
1:     static <T> Iterable<T> filterIn(Iterable<T> filter, Set<T>... inAny)
1:     {
1:         return filter(filter, orIn(inAny));
1:     }
1: 
1:     static Set<SSTableReader> emptySet()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
1:     static <T> T select(T t, Collection<T> col)
1:     {
1:         if (col instanceof Set && !col.contains(t))
1:             return null;
1:         return getFirst(filter(col, equalTo(t)), null);
1:     }
1: 
1:     static <T> T selectFirst(T t, Collection<T> ... sets)
1:     {
1:         for (Collection<T> set : sets)
1:         {
1:             T select = select(t, set);
1:             if (select != null)
1:                 return select;
1:         }
1:         return null;
1:     }
1: 
1:     static <T> Predicate<T> idIn(Set<T> set)
1:     {
1:         return idIn(identityMap(set));
1:     }
1: 
1:     static <T> Predicate<T> idIn(final Map<T, T> identityMap)
1:     {
1:         return new Predicate<T>()
1:         {
1:             public boolean apply(T t)
1:             {
1:                 return identityMap.get(t) == t;
1:             }
1:         };
1:     }
1: 
1: }
============================================================================