1:0580fb2: /*
1:0580fb2: * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2: * or more contributor license agreements.  See the NOTICE file
1:0580fb2: * distributed with this work for additional information
1:0580fb2: * regarding copyright ownership.  The ASF licenses this file
1:0580fb2: * to you under the Apache License, Version 2.0 (the
1:0580fb2: * "License"); you may not use this file except in compliance
1:0580fb2: * with the License.  You may obtain a copy of the License at
1:0580fb2: *
1:0580fb2: *    http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2: *
1:0580fb2: * Unless required by applicable law or agreed to in writing,
1:0580fb2: * software distributed under the License is distributed on an
1:0580fb2: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2: * KIND, either express or implied.  See the License for the
1:0580fb2: * specific language governing permissions and limitations
1:0580fb2: * under the License.
1:0580fb2: */
1:8c19fd6: package org.apache.cassandra.stress.generate;
1:0580fb2: 
1:0580fb2: import java.util.Random;
1:0580fb2: 
1:0580fb2: import org.apache.commons.math3.random.RandomGenerator;
1:0580fb2: 
1:0580fb2: // based on http://en.wikipedia.org/wiki/Xorshift, but periodically we reseed with our stronger random generator
1:0580fb2: // note it is also non-atomically updated, so expects to be used by a single thread
1:0580fb2: public class FasterRandom implements RandomGenerator
1:0580fb2: {
1:0580fb2:     final Random random = new Random();
1:0580fb2: 
1:0580fb2:     private long seed;
1:0580fb2:     private int reseed;
1:0580fb2: 
1:0580fb2:     public void setSeed(int seed)
1:0580fb2:     {
1:0580fb2:         setSeed((long) seed);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public void setSeed(int[] ints)
1:0580fb2:     {
1:0580fb2:         if (ints.length > 1)
1:0580fb2:             setSeed (((long) ints[0] << 32) | ints[1]);
1:0580fb2:         else
1:0580fb2:             setSeed(ints[0]);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public void setSeed(long seed)
1:0580fb2:     {
1:0580fb2:         this.seed = seed;
1:0580fb2:         rollover();
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private void rollover()
1:0580fb2:     {
1:0580fb2:         this.reseed = 0;
1:0580fb2:         random.setSeed(seed);
1:0580fb2:         seed = random.nextLong();
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public void nextBytes(byte[] bytes)
1:0580fb2:     {
1:0580fb2:         int i = 0;
1:0580fb2:         while (i < bytes.length)
1:0580fb2:         {
1:0580fb2:             long next = nextLong();
1:0580fb2:             while (i < bytes.length)
1:0580fb2:             {
1:0580fb2:                 bytes[i++] = (byte) (next & 0xFF);
1:0580fb2:                 next >>>= 8;
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public int nextInt()
1:0580fb2:     {
1:0580fb2:         return (int) nextLong();
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public int nextInt(int i)
1:0580fb2:     {
1:0580fb2:         return Math.abs((int) nextLong() % i);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public long nextLong()
1:0580fb2:     {
1:0580fb2:         if (++this.reseed == 32)
1:0580fb2:             rollover();
1:0580fb2: 
1:0580fb2:         long seed = this.seed;
1:0580fb2:         seed ^= seed >> 12;
1:0580fb2:         seed ^= seed << 25;
1:0580fb2:         seed ^= seed >> 27;
1:0580fb2:         this.seed = seed;
1:0580fb2:         return seed * 2685821657736338717L;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public boolean nextBoolean()
1:0580fb2:     {
1:0580fb2:         return ((int) nextLong() & 1) == 1;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public float nextFloat()
1:0580fb2:     {
1:0580fb2:         return Float.intBitsToFloat((int) nextLong());
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public double nextDouble()
1:0580fb2:     {
1:0580fb2:         return Double.longBitsToDouble(nextLong());
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public double nextGaussian()
1:0580fb2:     {
1:0580fb2:         return random.nextGaussian();
1:0580fb2:     }
1:0580fb2: }
============================================================================
author:Chris Burroughs
-------------------------------------------------------------------------------
commit:8c19fd6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.generate;
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
0: package org.apache.cassandra.stress.generate;
1: 
1: import java.util.Random;
1: 
1: import org.apache.commons.math3.random.RandomGenerator;
1: 
1: // based on http://en.wikipedia.org/wiki/Xorshift, but periodically we reseed with our stronger random generator
1: // note it is also non-atomically updated, so expects to be used by a single thread
1: public class FasterRandom implements RandomGenerator
1: {
1:     final Random random = new Random();
1: 
1:     private long seed;
1:     private int reseed;
1: 
1:     public void setSeed(int seed)
1:     {
1:         setSeed((long) seed);
1:     }
1: 
1:     public void setSeed(int[] ints)
1:     {
1:         if (ints.length > 1)
1:             setSeed (((long) ints[0] << 32) | ints[1]);
1:         else
1:             setSeed(ints[0]);
1:     }
1: 
1:     public void setSeed(long seed)
1:     {
1:         this.seed = seed;
1:         rollover();
1:     }
1: 
1:     private void rollover()
1:     {
1:         this.reseed = 0;
1:         random.setSeed(seed);
1:         seed = random.nextLong();
1:     }
1: 
1:     public void nextBytes(byte[] bytes)
1:     {
1:         int i = 0;
1:         while (i < bytes.length)
1:         {
1:             long next = nextLong();
1:             while (i < bytes.length)
1:             {
1:                 bytes[i++] = (byte) (next & 0xFF);
1:                 next >>>= 8;
1:             }
1:         }
1:     }
1: 
1:     public int nextInt()
1:     {
1:         return (int) nextLong();
1:     }
1: 
1:     public int nextInt(int i)
1:     {
1:         return Math.abs((int) nextLong() % i);
1:     }
1: 
1:     public long nextLong()
1:     {
1:         if (++this.reseed == 32)
1:             rollover();
1: 
1:         long seed = this.seed;
1:         seed ^= seed >> 12;
1:         seed ^= seed << 25;
1:         seed ^= seed >> 27;
1:         this.seed = seed;
1:         return seed * 2685821657736338717L;
1:     }
1: 
1:     public boolean nextBoolean()
1:     {
1:         return ((int) nextLong() & 1) == 1;
1:     }
1: 
1:     public float nextFloat()
1:     {
1:         return Float.intBitsToFloat((int) nextLong());
1:     }
1: 
1:     public double nextDouble()
1:     {
1:         return Double.longBitsToDouble(nextLong());
1:     }
1: 
1:     public double nextGaussian()
1:     {
1:         return random.nextGaussian();
1:     }
1: }
============================================================================