1:9797511: /*
1:2d7909d:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d7909d:  * or more contributor license agreements.  See the NOTICE file
1:2d7909d:  * distributed with this work for additional information
1:2d7909d:  * regarding copyright ownership.  The ASF licenses this file
1:2d7909d:  * to you under the Apache License, Version 2.0 (the
1:2d7909d:  * "License"); you may not use this file except in compliance
1:2d7909d:  * with the License.  You may obtain a copy of the License at
1:2d7909d:  *
1:2d7909d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2d7909d:  *
1:2d7909d:  * Unless required by applicable law or agreed to in writing,
1:2d7909d:  * software distributed under the License is distributed on an
1:2d7909d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2d7909d:  * KIND, either express or implied.  See the License for the
1:2d7909d:  * specific language governing permissions and limitations
1:2d7909d:  * under the License.
1:2d7909d:  */
1:2d7909d: package org.apache.cassandra.tools;
1:2d7909d: 
1:2d7909d: import org.apache.cassandra.config.Schema;
1:2d7909d: import org.apache.cassandra.db.ColumnFamilyStore;
1:2d7909d: import org.apache.cassandra.db.Directories;
1:2d7909d: import org.apache.cassandra.db.Keyspace;
1:2d7909d: import org.apache.cassandra.db.compaction.*;
1:2d7909d: import org.apache.cassandra.io.sstable.Component;
1:2d7909d: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1:2d7909d: import org.apache.cassandra.io.sstable.Descriptor;
1:2d7909d: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:2d7909d: import org.apache.cassandra.utils.JVMStabilityInspector;
1:2d7909d: import org.apache.cassandra.utils.OutputHandler;
1:2d7909d: import org.apache.commons.cli.*;
1:2d7909d: 
1:2d7909d: import java.util.*;
1:2d7909d: import java.util.concurrent.TimeUnit;
1:2d7909d: 
1:2d7909d: import static org.apache.cassandra.tools.BulkLoader.CmdLineOptions;
1:2d7909d: 
1:2d7909d: public class StandaloneVerifier
2:2d7909d: {
1:2d7909d:     private static final String TOOL_NAME = "sstableverify";
1:2d7909d:     private static final String VERBOSE_OPTION  = "verbose";
1:2d7909d:     private static final String EXTENDED_OPTION = "extended";
1:2d7909d:     private static final String DEBUG_OPTION  = "debug";
1:2d7909d:     private static final String HELP_OPTION  = "help";
1:2d7909d: 
1:2d7909d:     public static void main(String args[])
1:2d7909d:     {
1:2d7909d:         Options options = Options.parseArgs(args);
1:83b9740:         Util.initDatabaseDescriptor();
1:83b9740: 
2:2d7909d:         try
1:2d7909d:         {
1:2d7909d:             // load keyspace descriptions.
1:2d7909d:             Schema.instance.loadFromDisk(false);
1:7aafe05: 
1:2d7909d:             boolean hasFailed = false;
1:2d7909d: 
1:2d7909d:             if (Schema.instance.getCFMetaData(options.keyspaceName, options.cfName) == null)
1:2d7909d:                 throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
1:2d7909d:                                                                  options.keyspaceName,
1:2d7909d:                                                                  options.cfName));
1:2d7909d: 
1:2d7909d:             // Do not load sstables since they might be broken
1:2d7909d:             Keyspace keyspace = Keyspace.openWithoutSSTables(options.keyspaceName);
1:2d7909d:             ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(options.cfName);
1:2d7909d: 
1:2d7909d:             OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
1:9ed2727:             Directories.SSTableLister lister = cfs.getDirectories().sstableLister(Directories.OnTxnErr.THROW).skipTemporary(true);
1:2d7909d: 
1:2d7909d:             boolean extended = options.extended;
1:2d7909d: 
1:2d7909d:             List<SSTableReader> sstables = new ArrayList<>();
1:2d7909d: 
1:2d7909d:             // Verify sstables
1:2d7909d:             for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet())
1:2d7909d:             {
1:2d7909d:                 Set<Component> components = entry.getValue();
1:2d7909d:                 if (!components.contains(Component.DATA) || !components.contains(Component.PRIMARY_INDEX))
1:2d7909d:                     continue;
1:2d7909d: 
1:2d7909d:                 try
1:2d7909d:                 {
1:2d7909d:                     SSTableReader sstable = SSTableReader.openNoValidation(entry.getKey(), components, cfs);
1:2d7909d:                     sstables.add(sstable);
2:2d7909d:                 }
1:2d7909d:                 catch (Exception e)
1:2d7909d:                 {
1:2d7909d:                     JVMStabilityInspector.inspectThrowable(e);
1:2d7909d:                     System.err.println(String.format("Error Loading %s: %s", entry.getKey(), e.getMessage()));
1:2d7909d:                     if (options.debug)
1:2d7909d:                         e.printStackTrace(System.err);
1:2d7909d:                 }
1:2d7909d:             }
1:2d7909d: 
1:2d7909d:             for (SSTableReader sstable : sstables)
1:2d7909d:             {
1:2d7909d:                 try
1:2d7909d:                 {
1:2d7909d: 
1:7aafe05:                     try (Verifier verifier = new Verifier(cfs, sstable, handler, true))
1:2d7909d:                     {
1:2d7909d:                         verifier.verify(extended);
1:2d7909d:                     }
1:2d7909d:                     catch (CorruptSSTableException cs)
1:2d7909d:                     {
1:2d7909d:                         System.err.println(String.format("Error verifying %s: %s", sstable, cs.getMessage()));
1:2d7909d:                         hasFailed = true;
1:2d7909d:                     }
1:2d7909d:                 }
1:2d7909d:                 catch (Exception e)
1:2d7909d:                 {
1:2d7909d:                     System.err.println(String.format("Error verifying %s: %s", sstable, e.getMessage()));
1:2d7909d:                     e.printStackTrace(System.err);
1:2d7909d:                 }
1:2d7909d:             }
1:2d7909d: 
1:2d7909d:             CompactionManager.instance.finishCompactionsAndShutdown(5, TimeUnit.MINUTES);
1:2d7909d: 
1:2d7909d:             System.exit( hasFailed ? 1 : 0 ); // We need that to stop non daemonized threads
1:2d7909d:         }
1:2d7909d:         catch (Exception e)
1:2d7909d:         {
1:2d7909d:             System.err.println(e.getMessage());
1:2d7909d:             if (options.debug)
1:2d7909d:                 e.printStackTrace(System.err);
1:2d7909d:             System.exit(1);
1:2d7909d:         }
1:2d7909d:     }
1:2d7909d: 
1:2d7909d:     private static class Options
1:2d7909d:     {
1:2d7909d:         public final String keyspaceName;
1:2d7909d:         public final String cfName;
1:2d7909d: 
1:2d7909d:         public boolean debug;
1:2d7909d:         public boolean verbose;
1:2d7909d:         public boolean extended;
1:2d7909d: 
1:2d7909d:         private Options(String keyspaceName, String cfName)
1:2d7909d:         {
1:2d7909d:             this.keyspaceName = keyspaceName;
1:2d7909d:             this.cfName = cfName;
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         public static Options parseArgs(String cmdArgs[])
1:2d7909d:         {
1:2d7909d:             CommandLineParser parser = new GnuParser();
1:2d7909d:             CmdLineOptions options = getCmdLineOptions();
1:2d7909d:             try
1:2d7909d:             {
1:2d7909d:                 CommandLine cmd = parser.parse(options, cmdArgs, false);
1:2d7909d: 
1:2d7909d:                 if (cmd.hasOption(HELP_OPTION))
1:2d7909d:                 {
1:2d7909d:                     printUsage(options);
1:2d7909d:                     System.exit(0);
1:2d7909d:                 }
1:2d7909d: 
1:2d7909d:                 String[] args = cmd.getArgs();
1:2d7909d:                 if (args.length != 2)
1:2d7909d:                 {
1:2d7909d:                     String msg = args.length < 2 ? "Missing arguments" : "Too many arguments";
1:2d7909d:                     System.err.println(msg);
1:2d7909d:                     printUsage(options);
1:2d7909d:                     System.exit(1);
1:2d7909d:                 }
1:2d7909d: 
1:2d7909d:                 String keyspaceName = args[0];
1:2d7909d:                 String cfName = args[1];
1:2d7909d: 
1:2d7909d:                 Options opts = new Options(keyspaceName, cfName);
1:2d7909d: 
1:2d7909d:                 opts.debug = cmd.hasOption(DEBUG_OPTION);
1:2d7909d:                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);
1:2d7909d:                 opts.extended = cmd.hasOption(EXTENDED_OPTION);
1:2d7909d: 
1:2d7909d:                 return opts;
1:2d7909d:             }
1:2d7909d:             catch (ParseException e)
1:2d7909d:             {
1:2d7909d:                 errorMsg(e.getMessage(), options);
1:2d7909d:                 return null;
1:2d7909d:             }
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         private static void errorMsg(String msg, CmdLineOptions options)
1:2d7909d:         {
1:2d7909d:             System.err.println(msg);
1:2d7909d:             printUsage(options);
1:2d7909d:             System.exit(1);
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         private static CmdLineOptions getCmdLineOptions()
1:2d7909d:         {
1:2d7909d:             CmdLineOptions options = new CmdLineOptions();
1:2d7909d:             options.addOption(null, DEBUG_OPTION,          "display stack traces");
1:2d7909d:             options.addOption("e",  EXTENDED_OPTION,       "extended verification");
1:2d7909d:             options.addOption("v",  VERBOSE_OPTION,        "verbose output");
1:2d7909d:             options.addOption("h",  HELP_OPTION,           "display this help message");
1:2d7909d:             return options;
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         public static void printUsage(CmdLineOptions options)
1:2d7909d:         {
1:2d7909d:             String usage = String.format("%s [options] <keyspace> <column_family>", TOOL_NAME);
1:2d7909d:             StringBuilder header = new StringBuilder();
1:2d7909d:             header.append("--\n");
1:2d7909d:             header.append("Verify the sstable for the provided table." );
1:2d7909d:             header.append("\n--\n");
1:2d7909d:             header.append("Options are:");
1:2d7909d:             new HelpFormatter().printHelp(usage, header.toString(), options, "");
1:2d7909d:         }
1:2d7909d:     }
1:2d7909d: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: /*
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6f3d1e2
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:83b9740
/////////////////////////////////////////////////////////////////////////
1:         Util.initDatabaseDescriptor();
1: 
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Directories.SSTableLister lister = cfs.getDirectories().sstableLister(Directories.OnTxnErr.THROW).skipTemporary(true);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:5726625
/////////////////////////////////////////////////////////////////////////
0:             Directories.SSTableLister lister = cfs.directories.sstableLister(Directories.OnTxnErr.THROW).skipTemporary(true);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1: 
1:                     try (Verifier verifier = new Verifier(cfs, sstable, handler, true))
/////////////////////////////////////////////////////////////////////////
commit:2d7909d
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
0: import com.google.common.base.Predicate;
0: import com.google.common.base.Predicates;
0: import com.google.common.collect.Iterables;
0: import com.google.common.collect.Lists;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.Directories;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.compaction.*;
1: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: import org.apache.cassandra.utils.OutputHandler;
1: import org.apache.commons.cli.*;
1: 
0: import java.io.File;
1: import java.util.*;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.apache.cassandra.tools.BulkLoader.CmdLineOptions;
1: 
1: public class StandaloneVerifier
1: {
1:     private static final String TOOL_NAME = "sstableverify";
1:     private static final String VERBOSE_OPTION  = "verbose";
1:     private static final String EXTENDED_OPTION = "extended";
1:     private static final String DEBUG_OPTION  = "debug";
1:     private static final String HELP_OPTION  = "help";
1: 
1:     public static void main(String args[])
1:     {
1:         Options options = Options.parseArgs(args);
1:         try
1:         {
1:             // load keyspace descriptions.
1:             Schema.instance.loadFromDisk(false);
1: 
1:             boolean hasFailed = false;
1: 
1:             if (Schema.instance.getCFMetaData(options.keyspaceName, options.cfName) == null)
1:                 throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
1:                                                                  options.keyspaceName,
1:                                                                  options.cfName));
1: 
1:             // Do not load sstables since they might be broken
1:             Keyspace keyspace = Keyspace.openWithoutSSTables(options.keyspaceName);
1:             ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(options.cfName);
1: 
1:             OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
0:             Directories.SSTableLister lister = cfs.directories.sstableLister().skipTemporary(true);
1: 
1:             boolean extended = options.extended;
1: 
1:             List<SSTableReader> sstables = new ArrayList<>();
1: 
1:             // Verify sstables
1:             for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet())
1:             {
1:                 Set<Component> components = entry.getValue();
1:                 if (!components.contains(Component.DATA) || !components.contains(Component.PRIMARY_INDEX))
1:                     continue;
1: 
1:                 try
1:                 {
1:                     SSTableReader sstable = SSTableReader.openNoValidation(entry.getKey(), components, cfs);
1:                     sstables.add(sstable);
1:                 }
1:                 catch (Exception e)
1:                 {
1:                     JVMStabilityInspector.inspectThrowable(e);
1:                     System.err.println(String.format("Error Loading %s: %s", entry.getKey(), e.getMessage()));
1:                     if (options.debug)
1:                         e.printStackTrace(System.err);
1:                 }
1:             }
1: 
1:             for (SSTableReader sstable : sstables)
1:             {
1:                 try
1:                 {
0:                     Verifier verifier = new Verifier(cfs, sstable, handler, true);
1:                     try
1:                     {
1:                         verifier.verify(extended);
1:                     }
1:                     catch (CorruptSSTableException cs)
1:                     {
1:                         System.err.println(String.format("Error verifying %s: %s", sstable, cs.getMessage()));
1:                         hasFailed = true;
1:                     }
0:                     finally
1:                     {
0:                         verifier.close();
1:                     }
1:                 }
1:                 catch (Exception e)
1:                 {
1:                     System.err.println(String.format("Error verifying %s: %s", sstable, e.getMessage()));
1:                     e.printStackTrace(System.err);
1:                 }
1:             }
1: 
1:             CompactionManager.instance.finishCompactionsAndShutdown(5, TimeUnit.MINUTES);
1: 
1:             System.exit( hasFailed ? 1 : 0 ); // We need that to stop non daemonized threads
1:         }
1:         catch (Exception e)
1:         {
1:             System.err.println(e.getMessage());
1:             if (options.debug)
1:                 e.printStackTrace(System.err);
1:             System.exit(1);
1:         }
1:     }
1: 
1:     private static class Options
1:     {
1:         public final String keyspaceName;
1:         public final String cfName;
1: 
1:         public boolean debug;
1:         public boolean verbose;
1:         public boolean extended;
1: 
1:         private Options(String keyspaceName, String cfName)
1:         {
1:             this.keyspaceName = keyspaceName;
1:             this.cfName = cfName;
1:         }
1: 
1:         public static Options parseArgs(String cmdArgs[])
1:         {
1:             CommandLineParser parser = new GnuParser();
1:             CmdLineOptions options = getCmdLineOptions();
1:             try
1:             {
1:                 CommandLine cmd = parser.parse(options, cmdArgs, false);
1: 
1:                 if (cmd.hasOption(HELP_OPTION))
1:                 {
1:                     printUsage(options);
1:                     System.exit(0);
1:                 }
1: 
1:                 String[] args = cmd.getArgs();
1:                 if (args.length != 2)
1:                 {
1:                     String msg = args.length < 2 ? "Missing arguments" : "Too many arguments";
1:                     System.err.println(msg);
1:                     printUsage(options);
1:                     System.exit(1);
1:                 }
1: 
1:                 String keyspaceName = args[0];
1:                 String cfName = args[1];
1: 
1:                 Options opts = new Options(keyspaceName, cfName);
1: 
1:                 opts.debug = cmd.hasOption(DEBUG_OPTION);
1:                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);
1:                 opts.extended = cmd.hasOption(EXTENDED_OPTION);
1: 
1:                 return opts;
1:             }
1:             catch (ParseException e)
1:             {
1:                 errorMsg(e.getMessage(), options);
1:                 return null;
1:             }
1:         }
1: 
1:         private static void errorMsg(String msg, CmdLineOptions options)
1:         {
1:             System.err.println(msg);
1:             printUsage(options);
1:             System.exit(1);
1:         }
1: 
1:         private static CmdLineOptions getCmdLineOptions()
1:         {
1:             CmdLineOptions options = new CmdLineOptions();
1:             options.addOption(null, DEBUG_OPTION,          "display stack traces");
1:             options.addOption("e",  EXTENDED_OPTION,       "extended verification");
1:             options.addOption("v",  VERBOSE_OPTION,        "verbose output");
1:             options.addOption("h",  HELP_OPTION,           "display this help message");
1:             return options;
1:         }
1: 
1:         public static void printUsage(CmdLineOptions options)
1:         {
1:             String usage = String.format("%s [options] <keyspace> <column_family>", TOOL_NAME);
1:             StringBuilder header = new StringBuilder();
1:             header.append("--\n");
1:             header.append("Verify the sstable for the provided table." );
1:             header.append("\n--\n");
1:             header.append("Options are:");
1:             new HelpFormatter().printHelp(usage, header.toString(), options, "");
1:         }
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b25adc7
/////////////////////////////////////////////////////////////////////////
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:21bdf87
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.cassandra.tools;
0: 
0: import com.google.common.base.Predicate;
0: import com.google.common.base.Predicates;
0: import com.google.common.collect.Iterables;
0: import com.google.common.collect.Lists;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Directories;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.db.compaction.*;
0: import org.apache.cassandra.io.sstable.Component;
0: import org.apache.cassandra.io.sstable.CorruptSSTableException;
0: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.format.SSTableReader;
0: import org.apache.cassandra.utils.JVMStabilityInspector;
0: import org.apache.cassandra.utils.OutputHandler;
0: import org.apache.commons.cli.*;
0: 
0: import java.io.File;
0: import java.util.*;
0: import java.util.concurrent.TimeUnit;
0: 
0: import static org.apache.cassandra.tools.BulkLoader.CmdLineOptions;
0: 
0: public class StandaloneVerifier
0: {
0:     private static final String TOOL_NAME = "sstableverify";
0:     private static final String VERBOSE_OPTION  = "verbose";
0:     private static final String EXTENDED_OPTION = "extended";
0:     private static final String DEBUG_OPTION  = "debug";
0:     private static final String HELP_OPTION  = "help";
0: 
0:     public static void main(String args[])
0:     {
0:         Options options = Options.parseArgs(args);
0:         try
0:         {
0:             // load keyspace descriptions.
0:             Schema.instance.loadFromDisk(false);
0: 
0:             boolean hasFailed = false;
0: 
0:             if (Schema.instance.getCFMetaData(options.keyspaceName, options.cfName) == null)
0:                 throw new IllegalArgumentException(String.format("Unknown keyspace/table %s.%s",
0:                                                                  options.keyspaceName,
0:                                                                  options.cfName));
0: 
0:             // Do not load sstables since they might be broken
0:             Keyspace keyspace = Keyspace.openWithoutSSTables(options.keyspaceName);
0:             ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(options.cfName);
0: 
0:             OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
0:             Directories.SSTableLister lister = cfs.directories.sstableLister().skipTemporary(true);
0: 
0:             boolean extended = options.extended;
0: 
0:             List<SSTableReader> sstables = new ArrayList<>();
0: 
0:             // Verify sstables
0:             for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet())
0:             {
0:                 Set<Component> components = entry.getValue();
0:                 if (!components.contains(Component.DATA) || !components.contains(Component.PRIMARY_INDEX))
0:                     continue;
0: 
0:                 try
0:                 {
0:                     SSTableReader sstable = SSTableReader.openNoValidation(entry.getKey(), components, cfs.metadata);
0:                     sstables.add(sstable);
0:                 }
0:                 catch (Exception e)
0:                 {
0:                     JVMStabilityInspector.inspectThrowable(e);
0:                     System.err.println(String.format("Error Loading %s: %s", entry.getKey(), e.getMessage()));
0:                     if (options.debug)
0:                         e.printStackTrace(System.err);
0:                 }
0:             }
0: 
0:             for (SSTableReader sstable : sstables)
0:             {
0:                 try
0:                 {
0:                     Verifier verifier = new Verifier(cfs, sstable, handler, true);
0:                     try
0:                     {
0:                         verifier.verify(extended);
0:                     }
0:                     catch (CorruptSSTableException cs)
0:                     {
0:                         System.err.println(String.format("Error verifying %s: %s", sstable, cs.getMessage()));
0:                         hasFailed = true;
0:                     }
0:                     finally
0:                     {
0:                         verifier.close();
0:                     }
0:                 }
0:                 catch (Exception e)
0:                 {
0:                     System.err.println(String.format("Error verifying %s: %s", sstable, e.getMessage()));
0:                     e.printStackTrace(System.err);
0:                 }
0:             }
0: 
0:             CompactionManager.instance.finishCompactionsAndShutdown(5, TimeUnit.MINUTES);
0: 
0:             System.exit( hasFailed ? 1 : 0 ); // We need that to stop non daemonized threads
0:         }
0:         catch (Exception e)
0:         {
0:             System.err.println(e.getMessage());
0:             if (options.debug)
0:                 e.printStackTrace(System.err);
0:             System.exit(1);
0:         }
0:     }
0: 
0:     private static class Options
0:     {
0:         public final String keyspaceName;
0:         public final String cfName;
0: 
0:         public boolean debug;
0:         public boolean verbose;
0:         public boolean extended;
0: 
0:         private Options(String keyspaceName, String cfName)
0:         {
0:             this.keyspaceName = keyspaceName;
0:             this.cfName = cfName;
0:         }
0: 
0:         public static Options parseArgs(String cmdArgs[])
0:         {
0:             CommandLineParser parser = new GnuParser();
0:             CmdLineOptions options = getCmdLineOptions();
0:             try
0:             {
0:                 CommandLine cmd = parser.parse(options, cmdArgs, false);
0: 
0:                 if (cmd.hasOption(HELP_OPTION))
0:                 {
0:                     printUsage(options);
0:                     System.exit(0);
0:                 }
0: 
0:                 String[] args = cmd.getArgs();
0:                 if (args.length != 2)
0:                 {
0:                     String msg = args.length < 2 ? "Missing arguments" : "Too many arguments";
0:                     System.err.println(msg);
0:                     printUsage(options);
0:                     System.exit(1);
0:                 }
0: 
0:                 String keyspaceName = args[0];
0:                 String cfName = args[1];
0: 
0:                 Options opts = new Options(keyspaceName, cfName);
0: 
0:                 opts.debug = cmd.hasOption(DEBUG_OPTION);
0:                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);
0:                 opts.extended = cmd.hasOption(EXTENDED_OPTION);
0: 
0:                 return opts;
0:             }
0:             catch (ParseException e)
0:             {
0:                 errorMsg(e.getMessage(), options);
0:                 return null;
0:             }
0:         }
0: 
0:         private static void errorMsg(String msg, CmdLineOptions options)
0:         {
0:             System.err.println(msg);
0:             printUsage(options);
0:             System.exit(1);
0:         }
0: 
0:         private static CmdLineOptions getCmdLineOptions()
0:         {
0:             CmdLineOptions options = new CmdLineOptions();
0:             options.addOption(null, DEBUG_OPTION,          "display stack traces");
0:             options.addOption("e",  EXTENDED_OPTION,       "extended verification");
0:             options.addOption("v",  VERBOSE_OPTION,        "verbose output");
0:             options.addOption("h",  HELP_OPTION,           "display this help message");
0:             return options;
0:         }
0: 
0:         public static void printUsage(CmdLineOptions options)
0:         {
0:             String usage = String.format("%s [options] <keyspace> <column_family>", TOOL_NAME);
0:             StringBuilder header = new StringBuilder();
0:             header.append("--\n");
0:             header.append("Verify the sstable for the provided table." );
0:             header.append("\n--\n");
0:             header.append("Options are:");
0:             new HelpFormatter().printHelp(usage, header.toString(), options, "");
0:         }
0:     }
0: }
============================================================================