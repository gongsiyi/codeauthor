1:0e9d6bf: /*
1:074eef9:  * Licensed to the Apache Software Foundation (ASF) under one
1:074eef9:  * or more contributor license agreements.  See the NOTICE file
1:074eef9:  * distributed with this work for additional information
1:074eef9:  * regarding copyright ownership.  The ASF licenses this file
1:074eef9:  * to you under the Apache License, Version 2.0 (the
1:074eef9:  * "License"); you may not use this file except in compliance
1:074eef9:  * with the License.  You may obtain a copy of the License at
1:074eef9:  *
1:074eef9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:074eef9:  *
1:074eef9:  * Unless required by applicable law or agreed to in writing, software
1:074eef9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:074eef9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:074eef9:  * See the License for the specific language governing permissions and
1:074eef9:  * limitations under the License.
1:074eef9:  */
1:9c0ad81: 
1:074eef9: package org.apache.cassandra.utils;
1:cba59a8: 
1:9c0ad81: import java.io.IOException;
1:91f7387: import java.net.InetAddress;
1:e7a385a: import java.nio.ByteBuffer;
1:9c0ad81: import java.nio.charset.CharacterCodingException;
1:ce206e2: import java.nio.charset.StandardCharsets;
1:0e9d6bf: import java.util.Map;
1:0e9d6bf: import java.util.Optional;
1:0e9d6bf: import java.util.TreeMap;
1:a991b64: 
1:ea42969: import com.google.common.primitives.Ints;
1:0e9d6bf: 
1:0e9d6bf: import org.junit.Assert;
1:074eef9: import org.junit.Test;
1:588dc06: 
1:0e9d6bf: import org.apache.cassandra.db.marshal.*;
1:0e9d6bf: import org.apache.cassandra.dht.*;
1:a991b64: 
1:91f7387: import org.apache.cassandra.config.Config;
1:91f7387: import org.apache.cassandra.config.DatabaseDescriptor;
1:91f7387: 
1:588dc06: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.fail;
1:588dc06: 
1:07cdfd0: public class FBUtilitiesTest
1:074eef9: {
1:588dc06:     @Test
1:2c4ac98:     public void testCompareByteSubArrays()
1:40ed496:     {
1:f3630a6:         ByteBuffer bytes = ByteBuffer.allocate(16);
1:cba59a8: 
1:2c4ac98:         // handle null
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:2c4ac98:                 null, 0, null, 0, 0) == 0;
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                 null, 0, ByteBufferUtil.bytes(524255231), 0, 4) == -1;
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                 ByteBufferUtil.bytes(524255231), 0, null, 0, 4) == 1;
1:cba59a8: 
1:2c4ac98:         // handle comparisons
1:ea42969:         System.arraycopy(Ints.toByteArray(524255231), 0, bytes.array(), 3, 4);
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                 bytes, 3, ByteBufferUtil.bytes(524255231), 0, 4) == 0;
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                 bytes, 3, ByteBufferUtil.bytes(524255232), 0, 4) == -1;
1:f3630a6:         assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                 bytes, 3, ByteBufferUtil.bytes(524255230), 0, 4) == 1;
3:cba59a8: 
1:2c4ac98:         // check that incorrect length throws exception
1:2c4ac98:         try
1:b294cd5:         {
1:f3630a6:             assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                     bytes, 3, ByteBufferUtil.bytes(524255231), 0, 24) == 0;
1:2c4ac98:             fail("Should raise an AssertionError.");
1:2c4ac98:         } catch (AssertionError ae)
1:074eef9:         {
1:2fd3268:         }
1:2c4ac98:         try
1:cba59a8:         {
1:f3630a6:             assert ByteBufferUtil.compareSubArrays(
1:f3630a6:                     bytes, 3, ByteBufferUtil.bytes(524255231), 0, 12) == 0;
1:2c4ac98:             fail("Should raise an AssertionError.");
1:2c4ac98:         } catch (AssertionError ae)
1:b294cd5:         {
1:cba59a8:         }
1:40ed496:     }
1:0e9d6bf: 
1:0e9d6bf:     @Test
1:588dc06:     public void testToString()
1:588dc06:     {
1:588dc06:         // null turns to empty string
1:588dc06:         assertEquals("", FBUtilities.toString(null));
1:588dc06:         Map<String, String> map = new TreeMap<>();
1:588dc06:         // empty map turns to empty string
1:588dc06:         assertEquals("", FBUtilities.toString(map));
1:588dc06:         map.put("aaa", "bbb");
1:588dc06:         assertEquals("aaa:bbb", FBUtilities.toString(map));
1:588dc06:         map.put("ccc", "ddd");
1:588dc06:         assertEquals("aaa:bbb, ccc:ddd", FBUtilities.toString(map));
1:588dc06:     }
1:588dc06: 
1:9c0ad81:     @Test(expected=CharacterCodingException.class)
1:9c0ad81:     public void testDecode() throws IOException
1:9c0ad81:     {
1:e7a385a:         ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
1:ce206e2:         ByteBufferUtil.string(bytes, StandardCharsets.UTF_8);
1:07cdfd0:     }
1:91f7387: 
1:0e9d6bf:     private static void assertPartitioner(String name, Class expected)
1:0e9d6bf:     {
1:0e9d6bf:         Assert.assertTrue(String.format("%s != %s", name, expected.toString()),
1:0e9d6bf:                           expected.isInstance(FBUtilities.newPartitioner(name)));
1:0e9d6bf:     }
1:0e9d6bf: 
1:0e9d6bf:     /**
1:0e9d6bf:      * Check that given a name, the correct partitioner instance is created.
1:0e9d6bf:      *
1:0e9d6bf:      * If the assertions in this test start failing, it likely means the sstabledump/sstablemetadata tools will
1:0e9d6bf:      * also fail to read existing sstables.
1:0e9d6bf:      */
1:91f7387:     @Test
1:0e9d6bf:     public void testNewPartitionerNoArgConstructors()
1:0e9d6bf:     {
1:0e9d6bf:         assertPartitioner("ByteOrderedPartitioner", ByteOrderedPartitioner.class);
1:0e9d6bf:         assertPartitioner("LengthPartitioner", LengthPartitioner.class);
1:0e9d6bf:         assertPartitioner("Murmur3Partitioner", Murmur3Partitioner.class);
1:0e9d6bf:         assertPartitioner("OrderPreservingPartitioner", OrderPreservingPartitioner.class);
1:0e9d6bf:         assertPartitioner("RandomPartitioner", RandomPartitioner.class);
1:0e9d6bf:         assertPartitioner("org.apache.cassandra.dht.ByteOrderedPartitioner", ByteOrderedPartitioner.class);
1:0e9d6bf:         assertPartitioner("org.apache.cassandra.dht.LengthPartitioner", LengthPartitioner.class);
1:0e9d6bf:         assertPartitioner("org.apache.cassandra.dht.Murmur3Partitioner", Murmur3Partitioner.class);
1:0e9d6bf:         assertPartitioner("org.apache.cassandra.dht.OrderPreservingPartitioner", OrderPreservingPartitioner.class);
1:0e9d6bf:         assertPartitioner("org.apache.cassandra.dht.RandomPartitioner", RandomPartitioner.class);
1:0e9d6bf:     }
1:0e9d6bf: 
1:0e9d6bf:     /**
1:0e9d6bf:      * Check that we can instantiate local partitioner correctly and that we can pass the correct type
1:0e9d6bf:      * to it as a constructor argument.
1:0e9d6bf:      *
1:0e9d6bf:      * If the assertions in this test start failing, it likely means the sstabledump/sstablemetadata tools will
1:0e9d6bf:      * also fail to read existing sstables.
1:0e9d6bf:      */
1:0e9d6bf:     @Test
1:0e9d6bf:     public void testNewPartitionerLocalPartitioner()
1:0e9d6bf:     {
1:0e9d6bf:         for (String name : new String[] {"LocalPartitioner", "org.apache.cassandra.dht.LocalPartitioner"})
1:0e9d6bf:             for (AbstractType<?> type : new AbstractType<?>[] {UUIDType.instance, ListType.getInstance(Int32Type.instance, true)})
1:0e9d6bf:             {
1:0e9d6bf:                 IPartitioner partitioner = FBUtilities.newPartitioner(name, Optional.of(type));
1:0e9d6bf:                 Assert.assertTrue(String.format("%s != LocalPartitioner", partitioner.toString()),
1:0e9d6bf:                                   LocalPartitioner.class.isInstance(partitioner));
1:0e9d6bf:                 Assert.assertEquals(partitioner.partitionOrdering(), type);
1:0e9d6bf:             }
1:0e9d6bf:     }
1:cba59a8: 
1:cba59a8:     @Test
1:91f7387:     public void testGetBroadcastRpcAddress() throws Exception
1:91f7387:     {
1:91f7387:         //When both rpc_address and broadcast_rpc_address are null, it should return the local address (from DD.applyAddressConfig)
1:91f7387:         FBUtilities.reset();
1:91f7387:         Config testConfig = DatabaseDescriptor.loadConfig();
1:91f7387:         testConfig.rpc_address = null;
1:91f7387:         testConfig.broadcast_rpc_address = null;
1:91f7387:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:91f7387:         assertEquals(FBUtilities.getLocalAddress(), FBUtilities.getBroadcastRpcAddress());
1:91f7387: 
1:91f7387:         //When rpc_address is defined and broadcast_rpc_address is null, it should return the rpc_address
1:91f7387:         FBUtilities.reset();
1:91f7387:         testConfig.rpc_address = "127.0.0.2";
1:91f7387:         testConfig.broadcast_rpc_address = null;
1:91f7387:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:91f7387:         assertEquals(InetAddress.getByName("127.0.0.2"), FBUtilities.getBroadcastRpcAddress());
1:91f7387: 
1:91f7387:         //When both rpc_address and broadcast_rpc_address are defined, it should return broadcast_rpc_address
1:91f7387:         FBUtilities.reset();
1:91f7387:         testConfig.rpc_address = "127.0.0.2";
1:91f7387:         testConfig.broadcast_rpc_address = "127.0.0.3";
1:91f7387:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:91f7387:         assertEquals(InetAddress.getByName("127.0.0.3"), FBUtilities.getBroadcastRpcAddress());
1:91f7387: 
1:91f7387:         FBUtilities.reset();
1:91f7387:     }
1:9c0ad81: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:d597910
commit:5fdb90e
author:Paulo Motta
-------------------------------------------------------------------------------
commit:91f7387
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testGetBroadcastRpcAddress() throws Exception
1:     {
1:         //When both rpc_address and broadcast_rpc_address are null, it should return the local address (from DD.applyAddressConfig)
1:         FBUtilities.reset();
1:         Config testConfig = DatabaseDescriptor.loadConfig();
1:         testConfig.rpc_address = null;
1:         testConfig.broadcast_rpc_address = null;
1:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:         assertEquals(FBUtilities.getLocalAddress(), FBUtilities.getBroadcastRpcAddress());
1: 
1:         //When rpc_address is defined and broadcast_rpc_address is null, it should return the rpc_address
1:         FBUtilities.reset();
1:         testConfig.rpc_address = "127.0.0.2";
1:         testConfig.broadcast_rpc_address = null;
1:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:         assertEquals(InetAddress.getByName("127.0.0.2"), FBUtilities.getBroadcastRpcAddress());
1: 
1:         //When both rpc_address and broadcast_rpc_address are defined, it should return broadcast_rpc_address
1:         FBUtilities.reset();
1:         testConfig.rpc_address = "127.0.0.2";
1:         testConfig.broadcast_rpc_address = "127.0.0.3";
1:         DatabaseDescriptor.applyAddressConfig(testConfig);
1:         assertEquals(InetAddress.getByName("127.0.0.3"), FBUtilities.getBroadcastRpcAddress());
1: 
1:         FBUtilities.reset();
1:     }
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:0e9d6bf
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Optional;
1: import java.util.TreeMap;
1: 
1: import org.junit.Assert;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.dht.*;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static void assertPartitioner(String name, Class expected)
1:     {
1:         Assert.assertTrue(String.format("%s != %s", name, expected.toString()),
1:                           expected.isInstance(FBUtilities.newPartitioner(name)));
1:     }
1: 
1:     /**
1:      * Check that given a name, the correct partitioner instance is created.
1:      *
1:      * If the assertions in this test start failing, it likely means the sstabledump/sstablemetadata tools will
1:      * also fail to read existing sstables.
1:      */
1:     @Test
1:     public void testNewPartitionerNoArgConstructors()
1:     {
1:         assertPartitioner("ByteOrderedPartitioner", ByteOrderedPartitioner.class);
1:         assertPartitioner("LengthPartitioner", LengthPartitioner.class);
1:         assertPartitioner("Murmur3Partitioner", Murmur3Partitioner.class);
1:         assertPartitioner("OrderPreservingPartitioner", OrderPreservingPartitioner.class);
1:         assertPartitioner("RandomPartitioner", RandomPartitioner.class);
1:         assertPartitioner("org.apache.cassandra.dht.ByteOrderedPartitioner", ByteOrderedPartitioner.class);
1:         assertPartitioner("org.apache.cassandra.dht.LengthPartitioner", LengthPartitioner.class);
1:         assertPartitioner("org.apache.cassandra.dht.Murmur3Partitioner", Murmur3Partitioner.class);
1:         assertPartitioner("org.apache.cassandra.dht.OrderPreservingPartitioner", OrderPreservingPartitioner.class);
1:         assertPartitioner("org.apache.cassandra.dht.RandomPartitioner", RandomPartitioner.class);
1:     }
1: 
1:     /**
1:      * Check that we can instantiate local partitioner correctly and that we can pass the correct type
1:      * to it as a constructor argument.
1:      *
1:      * If the assertions in this test start failing, it likely means the sstabledump/sstablemetadata tools will
1:      * also fail to read existing sstables.
1:      */
1:     @Test
1:     public void testNewPartitionerLocalPartitioner()
1:     {
1:         for (String name : new String[] {"LocalPartitioner", "org.apache.cassandra.dht.LocalPartitioner"})
1:             for (AbstractType<?> type : new AbstractType<?>[] {UUIDType.instance, ListType.getInstance(Int32Type.instance, true)})
1:             {
1:                 IPartitioner partitioner = FBUtilities.newPartitioner(name, Optional.of(type));
1:                 Assert.assertTrue(String.format("%s != LocalPartitioner", partitioner.toString()),
1:                                   LocalPartitioner.class.isInstance(partitioner));
1:                 Assert.assertEquals(partitioner.partitionOrdering(), type);
1:             }
1:     }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f542a20
commit:588dc06
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import java.util.TreeMap;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testToString()
1:     {
1:         // null turns to empty string
1:         assertEquals("", FBUtilities.toString(null));
1:         Map<String, String> map = new TreeMap<>();
1:         // empty map turns to empty string
1:         assertEquals("", FBUtilities.toString(map));
1:         map.put("aaa", "bbb");
1:         assertEquals("aaa:bbb", FBUtilities.toString(map));
1:         map.put("ccc", "ddd");
1:         assertEquals("aaa:bbb, ccc:ddd", FBUtilities.toString(map));
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.junit.Assert.fail;
1: 
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: public class FBUtilitiesTest
/////////////////////////////////////////////////////////////////////////
1:     }
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: public class FBUtilitiesTest
/////////////////////////////////////////////////////////////////////////
1:     }
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ce206e2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:         ByteBufferUtil.string(bytes, StandardCharsets.UTF_8);
commit:ea42969
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
1: import com.google.common.primitives.Ints;
/////////////////////////////////////////////////////////////////////////
1:         System.arraycopy(Ints.toByteArray(524255231), 0, bytes.array(), 3, 4);
commit:46ea05f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:         ByteBufferUtil.string(bytes, Charsets.UTF_8);
commit:f3630a6
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer b = ByteBuffer.allocate(20);
0:         FBUtilities.copyIntoBytes(b.array(), 0, i);
0:         FBUtilities.copyIntoBytes(b.array(), 4, l);
0:         assertEquals(i, b.getInt(0));
0:         assertEquals(l, b.getLong(4));
1:         ByteBuffer bytes = ByteBuffer.allocate(16);
1:         assert ByteBufferUtil.compareSubArrays(
1:         assert ByteBufferUtil.compareSubArrays(
1:                 null, 0, ByteBufferUtil.bytes(524255231), 0, 4) == -1;
1:         assert ByteBufferUtil.compareSubArrays(
1:                 ByteBufferUtil.bytes(524255231), 0, null, 0, 4) == 1;
0:         FBUtilities.copyIntoBytes(bytes.array(), 3, 524255231);
1:         assert ByteBufferUtil.compareSubArrays(
1:                 bytes, 3, ByteBufferUtil.bytes(524255231), 0, 4) == 0;
1:         assert ByteBufferUtil.compareSubArrays(
1:                 bytes, 3, ByteBufferUtil.bytes(524255232), 0, 4) == -1;
1:         assert ByteBufferUtil.compareSubArrays(
1:                 bytes, 3, ByteBufferUtil.bytes(524255230), 0, 4) == 1;
1:             assert ByteBufferUtil.compareSubArrays(
1:                     bytes, 3, ByteBufferUtil.bytes(524255231), 0, 24) == 0;
1:             assert ByteBufferUtil.compareSubArrays(
1:                     bytes, 3, ByteBufferUtil.bytes(524255231), 0, 12) == 0;
commit:78c7a79
commit:154eec9
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer ba = ByteBufferUtil.bytes(i);
0:             int actual = ByteBufferUtil.toInt(ba);
commit:187761a
/////////////////////////////////////////////////////////////////////////
0:             String s = FBUtilities.bytesToHex(b);
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer ba = FBUtilities.toByteBuffer(i);
0:             int actual = FBUtilities.byteBufferToInt(ba);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:             String s = FBUtilities.bytesToHex(ByteBuffer.wrap(b));
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer ba = FBUtilities.toByteArray(i);
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
commit:9d32382
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9c0ad81
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.nio.charset.CharacterCodingException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(expected=CharacterCodingException.class)
1:     public void testDecode() throws IOException
1:     {
0:         byte[] bytes = new byte[]{(byte)0xff, (byte)0xfe};
0:         FBUtilities.decodeToUTF8(bytes);
1:     } 
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicReference;
1: 
0: import org.apache.cassandra.db.IClock;
0: import org.apache.cassandra.db.TimestampClock;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
0:     public void testAtomicSetMaxIClock()
1:     {
0:         AtomicReference<IClock> atomicClock = new AtomicReference<IClock>(null);
1:         
0:         // atomic < new
0:         atomicClock.set(TimestampClock.MIN_VALUE);
0:         FBUtilities.atomicSetMax(atomicClock, new TimestampClock(1L));
0:         assert ((TimestampClock)atomicClock.get()).timestamp() == 1L;
1:         
0:         // atomic == new
0:         atomicClock.set(new TimestampClock(3L));
0:         FBUtilities.atomicSetMax(atomicClock, new TimestampClock(3L));
0:         assert ((TimestampClock)atomicClock.get()).timestamp() == 3L;
1: 
0:         // atomic > new
0:         atomicClock.set(new TimestampClock(9L));
0:         FBUtilities.atomicSetMax(atomicClock, new TimestampClock(3L));
0:         assert ((TimestampClock)atomicClock.get()).timestamp() == 9L;
1:     } 
commit:40ed496
/////////////////////////////////////////////////////////////////////////
0:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++)
1:         {
0:             byte[] b = new byte[]{ (byte)i };
0:             String s = FBUtilities.bytesToHex(b);
0:             byte[] c = FBUtilities.hexToBytes(s);
0:             assertArrayEquals(b, c);
1:         }
author:Eric Evans
-------------------------------------------------------------------------------
commit:56492f5
/////////////////////////////////////////////////////////////////////////
commit:b294cd5
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Test
0:     public void testIntBytesConversions()
1:     {
0:         // positive, negative, 1 and 2 byte cases, including a few edges that would foul things up unless you're careful
0:         // about masking away sign extension.
0:         int[] ints = new int[]
1:         {
0:             -20, -127, -128, 0, 1, 127, 128, 65534, 65535, -65534, -65535
0:         };
0: 
0:         for (int i : ints) {
0:             byte[] ba = FBUtilities.toByteArray(i);
0:             int actual = FBUtilities.byteArrayToInt(ba);
0:             assertEquals(i, actual);
0:         }
0:     }
commit:074eef9
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.utils;
0: 
0: import static org.junit.Assert.assertArrayEquals;
0: 
1: import org.junit.Test;
0: 
0: 
0: public class FBUtilitiesTest 
1: {
0: 	@Test
0:     public void testHexBytesConversion()
1:     {
0:     	byte[] b = "1000".getBytes();
0:     	String s = FBUtilities.bytesToHex(b);
0:     	byte[] c = FBUtilities.hexToBytes(s);
0:     	assertArrayEquals(b, c);
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:b5a101b
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:     public void testCopyIntoBytes()
0:     {
0:         int i = 300;
0:         long l = 1000;
0:         byte[] b = new byte[20];
0:         FBUtilities.copyIntoBytes(b, 0, i);
0:         FBUtilities.copyIntoBytes(b, 4, l);
0:         assertEquals(i, FBUtilities.byteArrayToInt(b, 0));
0:         assertEquals(l, FBUtilities.byteArrayToLong(b, 4));
0:     }
0:     
0:     @Test
0:     public void testLongBytesConversions()
0:     {
0:         // positive, negative, 1 and 2 byte cases, including
0:         // a few edges that would foul things up unless you're careful
0:         // about masking away sign extension.
0:         long[] longs = new long[]
0:         {
0:             -20L, -127L, -128L, 0L, 1L, 127L, 128L, 65534L, 65535L, -65534L, -65535L,
0:             4294967294L, 4294967295L, -4294967294L, -4294967295L
0:         };
0: 
0:         for (long l : longs) {
0:             byte[] ba = FBUtilities.toByteArray(l);
0:             long actual = FBUtilities.byteArrayToLong(ba);
0:             assertEquals(l, actual);
0:         }
0:     }
0:   
0:     @Test
1:     public void testCompareByteSubArrays()
0:     {
0:         byte[] bytes = new byte[16];
0: 
1:         // handle null
0:         assert FBUtilities.compareByteSubArrays(
1:                 null, 0, null, 0, 0) == 0;
0:         assert FBUtilities.compareByteSubArrays(
0:                 null, 0, FBUtilities.toByteArray(524255231), 0, 4) == -1;
0:         assert FBUtilities.compareByteSubArrays(
0:                 FBUtilities.toByteArray(524255231), 0, null, 0, 4) == 1;
0: 
1:         // handle comparisons
0:         FBUtilities.copyIntoBytes(bytes, 3, 524255231);
0:         assert FBUtilities.compareByteSubArrays(
0:                 bytes, 3, FBUtilities.toByteArray(524255231), 0, 4) == 0;
0:         assert FBUtilities.compareByteSubArrays(
0:                 bytes, 3, FBUtilities.toByteArray(524255232), 0, 4) == -1;
0:         assert FBUtilities.compareByteSubArrays(
0:                 bytes, 3, FBUtilities.toByteArray(524255230), 0, 4) == 1;
0: 
1:         // check that incorrect length throws exception
1:         try
0:         {
0:             assert FBUtilities.compareByteSubArrays(
0:                     bytes, 3, FBUtilities.toByteArray(524255231), 0, 24) == 0;
1:             fail("Should raise an AssertionError.");
1:         } catch (AssertionError ae)
0:         {
0:         }
1:         try
0:         {
0:             assert FBUtilities.compareByteSubArrays(
0:                     bytes, 3, FBUtilities.toByteArray(524255231), 0, 12) == 0;
1:             fail("Should raise an AssertionError.");
1:         } catch (AssertionError ae)
0:         {
0:         }
0:     }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:af6e746
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:     
0:     @Test
0:     public void testHexToBytesStringConversion()
0:     {
0:         String[] values = new String[]
0:         {
0:             "0",
0:             "10",
0:             "100",
0:             "101",
0:             "f",
0:             "ff"
0:         };
0:         byte[][] expected = new byte[][]
0:         {
0:             new byte[] { 0x00 },
0:             new byte[] { 0x10 },
0:             new byte[] { 0x01, 0x00 },
0:             new byte[] { 0x01, 0x01 },
0:             new byte[] { 0x0f },
0:             new byte[] { (byte)0x000000ff }
0:         };
0:         
0:         for (int i = 0; i < values.length; i++)
0:             assert Arrays.equals(FBUtilities.hexToBytes(values[i]), expected[i]);
0:     }
============================================================================