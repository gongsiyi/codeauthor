1:a965977: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:a965977:  *
1:a965977:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:a965977:  *  @generated
1:a965977:  */
1:a965977: package org.apache.cassandra.thrift;
1:a965977: /*
1:a965977:  * 
1:a965977:  * Licensed to the Apache Software Foundation (ASF) under one
1:a965977:  * or more contributor license agreements.  See the NOTICE file
1:a965977:  * distributed with this work for additional information
1:a965977:  * regarding copyright ownership.  The ASF licenses this file
1:a965977:  * to you under the Apache License, Version 2.0 (the
1:a965977:  * "License"); you may not use this file except in compliance
1:a965977:  * with the License.  You may obtain a copy of the License at
1:a965977:  * 
1:a965977:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a965977:  * 
1:a965977:  * Unless required by applicable law or agreed to in writing,
1:a965977:  * software distributed under the License is distributed on an
1:a965977:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a965977:  * KIND, either express or implied.  See the License for the
1:a965977:  * specific language governing permissions and limitations
1:a965977:  * under the License.
1:a965977:  * 
1:a965977:  */
5:a965977: 
1:a965977: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:a965977: import org.apache.thrift.scheme.IScheme;
1:a965977: import org.apache.thrift.scheme.SchemeFactory;
1:a965977: import org.apache.thrift.scheme.StandardScheme;
1:a965977: 
1:a965977: import org.apache.thrift.scheme.TupleScheme;
1:a965977: import org.apache.thrift.protocol.TTupleProtocol;
1:a965977: import org.apache.thrift.protocol.TProtocolException;
1:a965977: import org.apache.thrift.EncodingUtils;
1:a965977: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:a965977: import java.util.List;
1:a965977: import java.util.ArrayList;
1:a965977: import java.util.Map;
1:a965977: import java.util.HashMap;
1:a965977: import java.util.EnumMap;
1:a965977: import java.util.Set;
1:a965977: import java.util.HashSet;
1:a965977: import java.util.EnumSet;
1:a965977: import java.util.Collections;
1:a965977: import java.util.BitSet;
1:a965977: import java.nio.ByteBuffer;
1:a965977: import java.util.Arrays;
1:a965977: import org.slf4j.Logger;
1:a965977: import org.slf4j.LoggerFactory;
1:a965977: 
1:a965977: /**
1:a965977:  * Describes a trigger.
1:a965977:  * `options` should include at least 'class' param.
1:a965977:  * Other options are not supported yet.
1:a965977:  */
1:bffd9ea: public class TriggerDef implements org.apache.thrift.TBase<TriggerDef, TriggerDef._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerDef> {
1:a965977:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerDef");
1:a965977: 
1:a965977:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:a965977:   private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)2);
1:a965977: 
1:a965977:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:a965977:   static {
1:a965977:     schemes.put(StandardScheme.class, new TriggerDefStandardSchemeFactory());
1:a965977:     schemes.put(TupleScheme.class, new TriggerDefTupleSchemeFactory());
2:a965977:   }
1:a965977: 
1:a965977:   public String name; // required
1:a965977:   public Map<String,String> options; // required
1:a965977: 
1:a965977:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:a965977:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:a965977:     NAME((short)1, "name"),
1:a965977:     OPTIONS((short)2, "options");
1:a965977: 
1:a965977:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:a965977: 
1:a965977:     static {
1:a965977:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:a965977:         byName.put(field.getFieldName(), field);
1:a965977:       }
1:a965977:     }
1:a965977: 
1:a965977:     /**
1:a965977:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:a965977:      */
1:a965977:     public static _Fields findByThriftId(int fieldId) {
1:a965977:       switch(fieldId) {
1:a965977:         case 1: // NAME
1:a965977:           return NAME;
1:a965977:         case 2: // OPTIONS
1:a965977:           return OPTIONS;
1:a965977:         default:
1:a965977:           return null;
1:a965977:       }
1:a965977:     }
1:a965977: 
1:a965977:     /**
1:a965977:      * Find the _Fields constant that matches fieldId, throwing an exception
1:a965977:      * if it is not found.
1:a965977:      */
1:a965977:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:a965977:       _Fields fields = findByThriftId(fieldId);
1:a965977:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:a965977:       return fields;
1:a965977:     }
1:a965977: 
1:a965977:     /**
1:a965977:      * Find the _Fields constant that matches name, or null if its not found.
1:a965977:      */
1:a965977:     public static _Fields findByName(String name) {
1:a965977:       return byName.get(name);
1:a965977:     }
1:a965977: 
1:a965977:     private final short _thriftId;
1:a965977:     private final String _fieldName;
1:a965977: 
1:a965977:     _Fields(short thriftId, String fieldName) {
1:a965977:       _thriftId = thriftId;
1:a965977:       _fieldName = fieldName;
1:a965977:     }
1:a965977: 
1:a965977:     public short getThriftFieldId() {
1:a965977:       return _thriftId;
1:a965977:     }
1:a965977: 
1:a965977:     public String getFieldName() {
1:a965977:       return _fieldName;
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   // isset id assignments
1:a965977:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:a965977:   static {
1:a965977:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:a965977:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:a965977:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:a965977:     tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:a965977:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:a965977:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:a965977:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:a965977:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:a965977:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerDef.class, metaDataMap);
1:a965977:   }
1:a965977: 
1:a965977:   public TriggerDef() {
1:a965977:   }
1:a965977: 
1:a965977:   public TriggerDef(
1:a965977:     String name,
1:a965977:     Map<String,String> options)
1:a965977:   {
1:a965977:     this();
1:a965977:     this.name = name;
1:a965977:     this.options = options;
1:a965977:   }
1:a965977: 
1:a965977:   /**
1:a965977:    * Performs a deep copy on <i>other</i>.
1:a965977:    */
1:a965977:   public TriggerDef(TriggerDef other) {
1:a965977:     if (other.isSetName()) {
1:a965977:       this.name = other.name;
1:a965977:     }
1:a965977:     if (other.isSetOptions()) {
1:bffd9ea:       Map<String,String> __this__options = new HashMap<String,String>(other.options);
1:a965977:       this.options = __this__options;
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   public TriggerDef deepCopy() {
1:a965977:     return new TriggerDef(this);
1:a965977:   }
1:a965977: 
1:a965977:   @Override
1:a965977:   public void clear() {
1:a965977:     this.name = null;
1:a965977:     this.options = null;
1:a965977:   }
1:a965977: 
1:a965977:   public String getName() {
1:a965977:     return this.name;
1:a965977:   }
1:a965977: 
1:a965977:   public TriggerDef setName(String name) {
1:a965977:     this.name = name;
1:a965977:     return this;
1:a965977:   }
1:a965977: 
1:a965977:   public void unsetName() {
1:a965977:     this.name = null;
1:a965977:   }
1:a965977: 
1:a965977:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:a965977:   public boolean isSetName() {
1:a965977:     return this.name != null;
1:a965977:   }
1:a965977: 
1:a965977:   public void setNameIsSet(boolean value) {
1:a965977:     if (!value) {
1:a965977:       this.name = null;
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   public int getOptionsSize() {
1:a965977:     return (this.options == null) ? 0 : this.options.size();
1:a965977:   }
1:a965977: 
1:a965977:   public void putToOptions(String key, String val) {
1:a965977:     if (this.options == null) {
1:a965977:       this.options = new HashMap<String,String>();
1:a965977:     }
1:a965977:     this.options.put(key, val);
1:a965977:   }
1:a965977: 
1:a965977:   public Map<String,String> getOptions() {
1:a965977:     return this.options;
1:a965977:   }
1:a965977: 
1:a965977:   public TriggerDef setOptions(Map<String,String> options) {
1:a965977:     this.options = options;
1:a965977:     return this;
1:a965977:   }
1:a965977: 
1:a965977:   public void unsetOptions() {
1:a965977:     this.options = null;
1:a965977:   }
1:a965977: 
1:a965977:   /** Returns true if field options is set (has been assigned a value) and false otherwise */
1:a965977:   public boolean isSetOptions() {
1:a965977:     return this.options != null;
1:a965977:   }
1:a965977: 
1:a965977:   public void setOptionsIsSet(boolean value) {
1:a965977:     if (!value) {
1:a965977:       this.options = null;
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   public void setFieldValue(_Fields field, Object value) {
1:a965977:     switch (field) {
1:a965977:     case NAME:
1:a965977:       if (value == null) {
1:a965977:         unsetName();
1:a965977:       } else {
1:a965977:         setName((String)value);
1:a965977:       }
1:a965977:       break;
1:a965977: 
1:a965977:     case OPTIONS:
1:a965977:       if (value == null) {
1:a965977:         unsetOptions();
1:a965977:       } else {
1:a965977:         setOptions((Map<String,String>)value);
1:a965977:       }
1:a965977:       break;
1:a965977: 
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   public Object getFieldValue(_Fields field) {
1:a965977:     switch (field) {
1:a965977:     case NAME:
1:a965977:       return getName();
1:a965977: 
1:a965977:     case OPTIONS:
1:a965977:       return getOptions();
1:a965977: 
1:a965977:     }
1:a965977:     throw new IllegalStateException();
1:a965977:   }
1:a965977: 
1:a965977:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:a965977:   public boolean isSet(_Fields field) {
1:a965977:     if (field == null) {
1:a965977:       throw new IllegalArgumentException();
1:a965977:     }
1:a965977: 
1:a965977:     switch (field) {
1:a965977:     case NAME:
1:a965977:       return isSetName();
1:a965977:     case OPTIONS:
1:a965977:       return isSetOptions();
1:a965977:     }
1:a965977:     throw new IllegalStateException();
1:a965977:   }
1:a965977: 
1:a965977:   @Override
1:a965977:   public boolean equals(Object that) {
1:a965977:     if (that == null)
1:a965977:       return false;
1:a965977:     if (that instanceof TriggerDef)
1:a965977:       return this.equals((TriggerDef)that);
1:a965977:     return false;
1:a965977:   }
1:a965977: 
1:a965977:   public boolean equals(TriggerDef that) {
1:a965977:     if (that == null)
1:a965977:       return false;
1:a965977: 
1:a965977:     boolean this_present_name = true && this.isSetName();
1:a965977:     boolean that_present_name = true && that.isSetName();
1:a965977:     if (this_present_name || that_present_name) {
1:a965977:       if (!(this_present_name && that_present_name))
1:a965977:         return false;
1:a965977:       if (!this.name.equals(that.name))
1:a965977:         return false;
1:a965977:     }
1:a965977: 
1:a965977:     boolean this_present_options = true && this.isSetOptions();
1:a965977:     boolean that_present_options = true && that.isSetOptions();
1:a965977:     if (this_present_options || that_present_options) {
1:a965977:       if (!(this_present_options && that_present_options))
1:a965977:         return false;
1:a965977:       if (!this.options.equals(that.options))
1:a965977:         return false;
1:a965977:     }
1:a965977: 
1:a965977:     return true;
1:a965977:   }
1:a965977: 
1:a965977:   @Override
1:a965977:   public int hashCode() {
1:a965977:     HashCodeBuilder builder = new HashCodeBuilder();
1:a965977: 
1:a965977:     boolean present_name = true && (isSetName());
1:a965977:     builder.append(present_name);
1:a965977:     if (present_name)
1:a965977:       builder.append(name);
1:a965977: 
1:a965977:     boolean present_options = true && (isSetOptions());
1:a965977:     builder.append(present_options);
1:a965977:     if (present_options)
1:a965977:       builder.append(options);
1:a965977: 
1:a965977:     return builder.toHashCode();
1:a965977:   }
1:a965977: 
1:bffd9ea:   @Override
1:a965977:   public int compareTo(TriggerDef other) {
1:a965977:     if (!getClass().equals(other.getClass())) {
1:a965977:       return getClass().getName().compareTo(other.getClass().getName());
1:a965977:     }
1:a965977: 
1:a965977:     int lastComparison = 0;
1:a965977: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:a965977:     if (lastComparison != 0) {
1:a965977:       return lastComparison;
1:a965977:     }
1:a965977:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:a965977:       if (lastComparison != 0) {
1:a965977:         return lastComparison;
1:a965977:       }
1:a965977:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
1:a965977:     if (lastComparison != 0) {
1:a965977:       return lastComparison;
1:a965977:     }
1:a965977:     if (isSetOptions()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
1:a965977:       if (lastComparison != 0) {
1:a965977:         return lastComparison;
1:a965977:       }
1:a965977:     }
1:a965977:     return 0;
1:a965977:   }
1:a965977: 
1:a965977:   public _Fields fieldForId(int fieldId) {
1:a965977:     return _Fields.findByThriftId(fieldId);
1:a965977:   }
1:a965977: 
1:a965977:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:a965977:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:a965977:   }
1:a965977: 
1:a965977:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:a965977:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:a965977:   }
1:a965977: 
1:a965977:   @Override
1:a965977:   public String toString() {
1:a965977:     StringBuilder sb = new StringBuilder("TriggerDef(");
1:a965977:     boolean first = true;
1:a965977: 
1:a965977:     sb.append("name:");
1:a965977:     if (this.name == null) {
1:a965977:       sb.append("null");
1:a965977:     } else {
1:a965977:       sb.append(this.name);
1:a965977:     }
1:a965977:     first = false;
1:a965977:     if (!first) sb.append(", ");
1:a965977:     sb.append("options:");
1:a965977:     if (this.options == null) {
1:a965977:       sb.append("null");
1:a965977:     } else {
1:a965977:       sb.append(this.options);
1:a965977:     }
1:a965977:     first = false;
1:a965977:     sb.append(")");
1:a965977:     return sb.toString();
1:a965977:   }
1:a965977: 
1:a965977:   public void validate() throws org.apache.thrift.TException {
1:a965977:     // check for required fields
1:a965977:     if (name == null) {
1:a965977:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:a965977:     }
1:a965977:     if (options == null) {
1:a965977:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'options' was not present! Struct: " + toString());
1:a965977:     }
1:a965977:     // check for sub-struct validity
1:a965977:   }
1:a965977: 
1:a965977:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:a965977:     try {
1:a965977:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:a965977:     } catch (org.apache.thrift.TException te) {
1:a965977:       throw new java.io.IOException(te);
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:a965977:     try {
1:a965977:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:a965977:     } catch (org.apache.thrift.TException te) {
1:a965977:       throw new java.io.IOException(te);
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   private static class TriggerDefStandardSchemeFactory implements SchemeFactory {
1:a965977:     public TriggerDefStandardScheme getScheme() {
1:a965977:       return new TriggerDefStandardScheme();
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   private static class TriggerDefStandardScheme extends StandardScheme<TriggerDef> {
1:a965977: 
1:a965977:     public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerDef struct) throws org.apache.thrift.TException {
1:a965977:       org.apache.thrift.protocol.TField schemeField;
1:a965977:       iprot.readStructBegin();
1:a965977:       while (true)
1:a965977:       {
1:a965977:         schemeField = iprot.readFieldBegin();
1:a965977:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:a965977:           break;
1:a965977:         }
1:a965977:         switch (schemeField.id) {
1:a965977:           case 1: // NAME
1:a965977:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:a965977:               struct.name = iprot.readString();
1:a965977:               struct.setNameIsSet(true);
1:a965977:             } else { 
1:a965977:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:a965977:             }
1:a965977:             break;
1:a965977:           case 2: // OPTIONS
1:a965977:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:a965977:               {
1:a965977:                 org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
1:a965977:                 struct.options = new HashMap<String,String>(2*_map100.size);
1:a965977:                 for (int _i101 = 0; _i101 < _map100.size; ++_i101)
1:a965977:                 {
1:bffd9ea:                   String _key102;
1:bffd9ea:                   String _val103;
1:a965977:                   _key102 = iprot.readString();
1:a965977:                   _val103 = iprot.readString();
1:a965977:                   struct.options.put(_key102, _val103);
1:a965977:                 }
1:a965977:                 iprot.readMapEnd();
1:a965977:               }
1:a965977:               struct.setOptionsIsSet(true);
1:a965977:             } else { 
1:a965977:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:a965977:             }
1:a965977:             break;
1:a965977:           default:
1:a965977:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:a965977:         }
1:a965977:         iprot.readFieldEnd();
1:a965977:       }
1:a965977:       iprot.readStructEnd();
1:a965977: 
1:a965977:       // check for required fields of primitive type, which can't be checked in the validate method
1:a965977:       struct.validate();
1:a965977:     }
1:a965977: 
1:a965977:     public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerDef struct) throws org.apache.thrift.TException {
1:a965977:       struct.validate();
1:a965977: 
1:a965977:       oprot.writeStructBegin(STRUCT_DESC);
1:a965977:       if (struct.name != null) {
1:a965977:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:a965977:         oprot.writeString(struct.name);
1:a965977:         oprot.writeFieldEnd();
1:a965977:       }
1:a965977:       if (struct.options != null) {
1:a965977:         oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
1:a965977:         {
1:a965977:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
1:a965977:           for (Map.Entry<String, String> _iter104 : struct.options.entrySet())
1:a965977:           {
1:a965977:             oprot.writeString(_iter104.getKey());
1:a965977:             oprot.writeString(_iter104.getValue());
1:a965977:           }
1:a965977:           oprot.writeMapEnd();
1:a965977:         }
1:a965977:         oprot.writeFieldEnd();
1:a965977:       }
1:a965977:       oprot.writeFieldStop();
1:a965977:       oprot.writeStructEnd();
1:a965977:     }
1:a965977: 
1:a965977:   }
1:a965977: 
1:a965977:   private static class TriggerDefTupleSchemeFactory implements SchemeFactory {
1:a965977:     public TriggerDefTupleScheme getScheme() {
1:a965977:       return new TriggerDefTupleScheme();
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977:   private static class TriggerDefTupleScheme extends TupleScheme<TriggerDef> {
1:a965977: 
1:a965977:     @Override
1:a965977:     public void write(org.apache.thrift.protocol.TProtocol prot, TriggerDef struct) throws org.apache.thrift.TException {
1:a965977:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:a965977:       oprot.writeString(struct.name);
1:a965977:       {
1:a965977:         oprot.writeI32(struct.options.size());
1:a965977:         for (Map.Entry<String, String> _iter105 : struct.options.entrySet())
1:a965977:         {
1:a965977:           oprot.writeString(_iter105.getKey());
1:a965977:           oprot.writeString(_iter105.getValue());
1:a965977:         }
1:a965977:       }
1:a965977:     }
1:a965977: 
1:a965977:     @Override
1:a965977:     public void read(org.apache.thrift.protocol.TProtocol prot, TriggerDef struct) throws org.apache.thrift.TException {
1:a965977:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:a965977:       struct.name = iprot.readString();
1:a965977:       struct.setNameIsSet(true);
1:a965977:       {
1:a965977:         org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:         struct.options = new HashMap<String,String>(2*_map106.size);
1:a965977:         for (int _i107 = 0; _i107 < _map106.size; ++_i107)
1:a965977:         {
1:bffd9ea:           String _key108;
1:bffd9ea:           String _val109;
1:a965977:           _key108 = iprot.readString();
1:a965977:           _val109 = iprot.readString();
1:a965977:           struct.options.put(_key108, _val109);
1:a965977:         }
1:a965977:       }
1:a965977:       struct.setOptionsIsSet(true);
1:a965977:     }
1:a965977:   }
1:a965977: 
1:a965977: }
1:a965977: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class TriggerDef implements org.apache.thrift.TBase<TriggerDef, TriggerDef._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerDef> {
/////////////////////////////////////////////////////////////////////////
1:       Map<String,String> __this__options = new HashMap<String,String>(other.options);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
/////////////////////////////////////////////////////////////////////////
1:                   String _key102;
1:                   String _val103;
/////////////////////////////////////////////////////////////////////////
1:           String _key108;
1:           String _val109;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  *  @generated
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Describes a trigger.
1:  * `options` should include at least 'class' param.
1:  * Other options are not supported yet.
1:  */
0: public class TriggerDef implements org.apache.thrift.TBase<TriggerDef, TriggerDef._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerDef");
1: 
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)2);
1: 
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new TriggerDefStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new TriggerDefTupleSchemeFactory());
1:   }
1: 
1:   public String name; // required
1:   public Map<String,String> options; // required
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     OPTIONS((short)2, "options");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // OPTIONS
1:           return OPTIONS;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerDef.class, metaDataMap);
1:   }
1: 
1:   public TriggerDef() {
1:   }
1: 
1:   public TriggerDef(
1:     String name,
1:     Map<String,String> options)
1:   {
1:     this();
1:     this.name = name;
1:     this.options = options;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public TriggerDef(TriggerDef other) {
1:     if (other.isSetName()) {
1:       this.name = other.name;
1:     }
1:     if (other.isSetOptions()) {
0:       Map<String,String> __this__options = new HashMap<String,String>();
0:       for (Map.Entry<String, String> other_element : other.options.entrySet()) {
1: 
0:         String other_element_key = other_element.getKey();
0:         String other_element_value = other_element.getValue();
1: 
0:         String __this__options_copy_key = other_element_key;
1: 
0:         String __this__options_copy_value = other_element_value;
1: 
0:         __this__options.put(__this__options_copy_key, __this__options_copy_value);
1:       }
1:       this.options = __this__options;
1:     }
1:   }
1: 
1:   public TriggerDef deepCopy() {
1:     return new TriggerDef(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     this.options = null;
1:   }
1: 
1:   public String getName() {
1:     return this.name;
1:   }
1: 
1:   public TriggerDef setName(String name) {
1:     this.name = name;
1:     return this;
1:   }
1: 
1:   public void unsetName() {
1:     this.name = null;
1:   }
1: 
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:   public boolean isSetName() {
1:     return this.name != null;
1:   }
1: 
1:   public void setNameIsSet(boolean value) {
1:     if (!value) {
1:       this.name = null;
1:     }
1:   }
1: 
1:   public int getOptionsSize() {
1:     return (this.options == null) ? 0 : this.options.size();
1:   }
1: 
1:   public void putToOptions(String key, String val) {
1:     if (this.options == null) {
1:       this.options = new HashMap<String,String>();
1:     }
1:     this.options.put(key, val);
1:   }
1: 
1:   public Map<String,String> getOptions() {
1:     return this.options;
1:   }
1: 
1:   public TriggerDef setOptions(Map<String,String> options) {
1:     this.options = options;
1:     return this;
1:   }
1: 
1:   public void unsetOptions() {
1:     this.options = null;
1:   }
1: 
1:   /** Returns true if field options is set (has been assigned a value) and false otherwise */
1:   public boolean isSetOptions() {
1:     return this.options != null;
1:   }
1: 
1:   public void setOptionsIsSet(boolean value) {
1:     if (!value) {
1:       this.options = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case NAME:
1:       if (value == null) {
1:         unsetName();
1:       } else {
1:         setName((String)value);
1:       }
1:       break;
1: 
1:     case OPTIONS:
1:       if (value == null) {
1:         unsetOptions();
1:       } else {
1:         setOptions((Map<String,String>)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return getName();
1: 
1:     case OPTIONS:
1:       return getOptions();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case NAME:
1:       return isSetName();
1:     case OPTIONS:
1:       return isSetOptions();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof TriggerDef)
1:       return this.equals((TriggerDef)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(TriggerDef that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
1:         return false;
1:       if (!this.name.equals(that.name))
1:         return false;
1:     }
1: 
1:     boolean this_present_options = true && this.isSetOptions();
1:     boolean that_present_options = true && that.isSetOptions();
1:     if (this_present_options || that_present_options) {
1:       if (!(this_present_options && that_present_options))
1:         return false;
1:       if (!this.options.equals(that.options))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_options = true && (isSetOptions());
1:     builder.append(present_options);
1:     if (present_options)
1:       builder.append(options);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(TriggerDef other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     TriggerDef typedOther = (TriggerDef)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetName()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetOptions()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("TriggerDef(");
1:     boolean first = true;
1: 
1:     sb.append("name:");
1:     if (this.name == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.name);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("options:");
1:     if (this.options == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.options);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     if (name == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (options == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'options' was not present! Struct: " + toString());
1:     }
1:     // check for sub-struct validity
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private static class TriggerDefStandardSchemeFactory implements SchemeFactory {
1:     public TriggerDefStandardScheme getScheme() {
1:       return new TriggerDefStandardScheme();
1:     }
1:   }
1: 
1:   private static class TriggerDefStandardScheme extends StandardScheme<TriggerDef> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerDef struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readString();
1:               struct.setNameIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // OPTIONS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:               {
1:                 org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
1:                 struct.options = new HashMap<String,String>(2*_map100.size);
1:                 for (int _i101 = 0; _i101 < _map100.size; ++_i101)
1:                 {
0:                   String _key102; // optional
0:                   String _val103; // required
1:                   _key102 = iprot.readString();
1:                   _val103 = iprot.readString();
1:                   struct.options.put(_key102, _val103);
1:                 }
1:                 iprot.readMapEnd();
1:               }
1:               struct.setOptionsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerDef struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
1:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeString(struct.name);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.options != null) {
1:         oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
1:         {
1:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
1:           for (Map.Entry<String, String> _iter104 : struct.options.entrySet())
1:           {
1:             oprot.writeString(_iter104.getKey());
1:             oprot.writeString(_iter104.getValue());
1:           }
1:           oprot.writeMapEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class TriggerDefTupleSchemeFactory implements SchemeFactory {
1:     public TriggerDefTupleScheme getScheme() {
1:       return new TriggerDefTupleScheme();
1:     }
1:   }
1: 
1:   private static class TriggerDefTupleScheme extends TupleScheme<TriggerDef> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, TriggerDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeString(struct.name);
1:       {
1:         oprot.writeI32(struct.options.size());
1:         for (Map.Entry<String, String> _iter105 : struct.options.entrySet())
1:         {
1:           oprot.writeString(_iter105.getKey());
1:           oprot.writeString(_iter105.getValue());
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, TriggerDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readString();
1:       struct.setNameIsSet(true);
1:       {
1:         org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:         struct.options = new HashMap<String,String>(2*_map106.size);
1:         for (int _i107 = 0; _i107 < _map106.size; ++_i107)
1:         {
0:           String _key108; // optional
0:           String _val109; // required
1:           _key108 = iprot.readString();
1:           _val109 = iprot.readString();
1:           struct.options.put(_key108, _val109);
1:         }
1:       }
1:       struct.setOptionsIsSet(true);
1:     }
1:   }
1: 
1: }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
0:                   String _key102; // required
/////////////////////////////////////////////////////////////////////////
0:           String _key108; // required
============================================================================