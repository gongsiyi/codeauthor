1:15354b4: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
2:1aeca2b:  *
1:15354b4:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:15354b4:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:1aeca2b: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:15354b4: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:15354b4: import java.util.Map;
1:15354b4: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:04d5ec3: import java.util.EnumSet;
1:15354b4: import java.util.Collections;
1:0f56a25: import java.util.BitSet;
1:15354b4: 
1:4e8691a: /**
1:4e8691a:  * Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
1:4e8691a:  * of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
1:4e8691a:  * instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
1:4e8691a:  * in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
1:4e8691a:  * single query methods that may return either a SuperColumn or Column.
1:1aeca2b:  * 
1:9a0bbc5:  * If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
1:9a0bbc5:  * counter_super_column (instead of a super_column)
1:1aeca2b:  * 
1:4e8691a:  * @param column. The Column returned by get() or get_slice().
1:4e8691a:  * @param super_column. The SuperColumn returned by get() or get_slice().
1:9a0bbc5:  * @param counter_column. The Counterolumn returned by get() or get_slice().
1:9a0bbc5:  * @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
1:1aeca2b:  */
1:bffd9ea: public class ColumnOrSuperColumn implements org.apache.thrift.TBase<ColumnOrSuperColumn, ColumnOrSuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnOrSuperColumn> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnOrSuperColumn");
1:15354b4: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column", org.apache.thrift.protocol.TType.STRUCT, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("super_column", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:9a0bbc5:   private static final org.apache.thrift.protocol.TField COUNTER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_column", org.apache.thrift.protocol.TType.STRUCT, (short)3);
1:9a0bbc5:   private static final org.apache.thrift.protocol.TField COUNTER_SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_super_column", org.apache.thrift.protocol.TType.STRUCT, (short)4);
1:15354b4: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new ColumnOrSuperColumnStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new ColumnOrSuperColumnTupleSchemeFactory());
1:15354b4:   }
1:15354b4: 
1:b153d45:   public Column column; // optional
1:b153d45:   public SuperColumn super_column; // optional
1:b153d45:   public CounterColumn counter_column; // optional
1:b153d45:   public CounterSuperColumn counter_super_column; // optional
1:15354b4: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     COLUMN((short)1, "column"),
1:9a0bbc5:     SUPER_COLUMN((short)2, "super_column"),
1:9a0bbc5:     COUNTER_COLUMN((short)3, "counter_column"),
1:9a0bbc5:     COUNTER_SUPER_COLUMN((short)4, "counter_super_column");
1:15354b4: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:15354b4: 
1:15354b4:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:15354b4:       }
1:15354b4:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // COLUMN
1:d849c69:           return COLUMN;
1:d849c69:         case 2: // SUPER_COLUMN
1:d849c69:           return SUPER_COLUMN;
1:9a0bbc5:         case 3: // COUNTER_COLUMN
1:9a0bbc5:           return COUNTER_COLUMN;
1:9a0bbc5:         case 4: // COUNTER_SUPER_COLUMN
1:9a0bbc5:           return COUNTER_SUPER_COLUMN;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
2:04d5ec3:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:c8afd76:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:c8afd76:     }
1:c8afd76: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:9a0bbc5: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:c8afd76:     }
1:9a0bbc5: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:9a0bbc5:     }
1:9a0bbc5: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
4:9a0bbc5:     }
1:9a0bbc5:   }
1:9a0bbc5: 
1:0f56a25:   // isset id assignments
1:b153d45:   private _Fields optionals[] = {_Fields.COLUMN,_Fields.SUPER_COLUMN,_Fields.COUNTER_COLUMN,_Fields.COUNTER_SUPER_COLUMN};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:04d5ec3:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.COLUMN, new org.apache.thrift.meta_data.FieldMetaData("column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class)));
1:4ec9511:     tmpMap.put(_Fields.SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuperColumn.class)));
1:9a0bbc5:     tmpMap.put(_Fields.COUNTER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("counter_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:9a0bbc5:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CounterColumn.class)));
1:9a0bbc5:     tmpMap.put(_Fields.COUNTER_SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("counter_super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:9a0bbc5:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CounterSuperColumn.class)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnOrSuperColumn.class, metaDataMap);
1:9a0bbc5:   }
2:4ec9511: 
1:15354b4:   public ColumnOrSuperColumn() {
1:15354b4:   }
1:15354b4: 
1:15354b4:   /**
1:15354b4:    * Performs a deep copy on <i>other</i>.
1:15354b4:    */
1:15354b4:   public ColumnOrSuperColumn(ColumnOrSuperColumn other) {
1:15354b4:     if (other.isSetColumn()) {
1:15354b4:       this.column = new Column(other.column);
1:15354b4:     }
1:15354b4:     if (other.isSetSuper_column()) {
1:15354b4:       this.super_column = new SuperColumn(other.super_column);
1:15354b4:     }
1:9a0bbc5:     if (other.isSetCounter_column()) {
1:9a0bbc5:       this.counter_column = new CounterColumn(other.counter_column);
1:15354b4:     }
1:9a0bbc5:     if (other.isSetCounter_super_column()) {
1:9a0bbc5:       this.counter_super_column = new CounterSuperColumn(other.counter_super_column);
1:9a0bbc5:     }
1:9a0bbc5:   }
1:15354b4: 
1:53895ad:   public ColumnOrSuperColumn deepCopy() {
1:53895ad:     return new ColumnOrSuperColumn(this);
1:53895ad:   }
1:53895ad: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.column = null;
1:e7a385a:     this.super_column = null;
1:9a0bbc5:     this.counter_column = null;
1:9a0bbc5:     this.counter_super_column = null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public Column getColumn() {
1:15354b4:     return this.column;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public ColumnOrSuperColumn setColumn(Column column) {
2:15354b4:     this.column = column;
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetColumn() {
1:15354b4:     this.column = null;
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field column is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetColumn() {
1:15354b4:     return this.column != null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setColumnIsSet(boolean value) {
1:15354b4:     if (!value) {
1:15354b4:       this.column = null;
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:15354b4:   public SuperColumn getSuper_column() {
1:15354b4:     return this.super_column;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public ColumnOrSuperColumn setSuper_column(SuperColumn super_column) {
2:15354b4:     this.super_column = super_column;
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetSuper_column() {
1:15354b4:     this.super_column = null;
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field super_column is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetSuper_column() {
1:15354b4:     return this.super_column != null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setSuper_columnIsSet(boolean value) {
1:15354b4:     if (!value) {
1:15354b4:       this.super_column = null;
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:9a0bbc5:   public CounterColumn getCounter_column() {
1:9a0bbc5:     return this.counter_column;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public ColumnOrSuperColumn setCounter_column(CounterColumn counter_column) {
1:9a0bbc5:     this.counter_column = counter_column;
1:9a0bbc5:     return this;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public void unsetCounter_column() {
1:9a0bbc5:     this.counter_column = null;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   /** Returns true if field counter_column is set (has been assigned a value) and false otherwise */
1:9a0bbc5:   public boolean isSetCounter_column() {
1:9a0bbc5:     return this.counter_column != null;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public void setCounter_columnIsSet(boolean value) {
1:9a0bbc5:     if (!value) {
1:9a0bbc5:       this.counter_column = null;
1:9a0bbc5:     }
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public CounterSuperColumn getCounter_super_column() {
1:9a0bbc5:     return this.counter_super_column;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public ColumnOrSuperColumn setCounter_super_column(CounterSuperColumn counter_super_column) {
1:9a0bbc5:     this.counter_super_column = counter_super_column;
1:9a0bbc5:     return this;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public void unsetCounter_super_column() {
1:9a0bbc5:     this.counter_super_column = null;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   /** Returns true if field counter_super_column is set (has been assigned a value) and false otherwise */
1:9a0bbc5:   public boolean isSetCounter_super_column() {
1:9a0bbc5:     return this.counter_super_column != null;
1:9a0bbc5:   }
1:9a0bbc5: 
1:9a0bbc5:   public void setCounter_super_columnIsSet(boolean value) {
1:9a0bbc5:     if (!value) {
1:9a0bbc5:       this.counter_super_column = null;
1:9a0bbc5:     }
1:9a0bbc5:   }
1:9a0bbc5: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
2:15354b4:     case COLUMN:
1:15354b4:       if (value == null) {
1:15354b4:         unsetColumn();
1:15354b4:       } else {
1:15354b4:         setColumn((Column)value);
1:15354b4:       }
1:15354b4:       break;
1:15354b4: 
2:15354b4:     case SUPER_COLUMN:
1:15354b4:       if (value == null) {
1:15354b4:         unsetSuper_column();
1:2b69c40:       } else {
1:15354b4:         setSuper_column((SuperColumn)value);
1:2b69c40:       }
1:2b69c40:       break;
1:15354b4: 
1:9a0bbc5:     case COUNTER_COLUMN:
1:9a0bbc5:       if (value == null) {
1:9a0bbc5:         unsetCounter_column();
1:2b69c40:       } else {
1:9a0bbc5:         setCounter_column((CounterColumn)value);
1:2b69c40:       }
1:2b69c40:       break;
1:15354b4: 
1:9a0bbc5:     case COUNTER_SUPER_COLUMN:
1:9a0bbc5:       if (value == null) {
1:9a0bbc5:         unsetCounter_super_column();
1:15354b4:       } else {
1:9a0bbc5:         setCounter_super_column((CounterSuperColumn)value);
1:15354b4:       }
1:15354b4:       break;
1:b153d45: 
1:15354b4:     }
1:15354b4:   }
1:b153d45: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:15354b4:     case COLUMN:
1:15354b4:       return getColumn();
1:15354b4: 
1:15354b4:     case SUPER_COLUMN:
1:15354b4:       return getSuper_column();
1:15354b4: 
1:9a0bbc5:     case COUNTER_COLUMN:
1:9a0bbc5:       return getCounter_column();
1:15354b4: 
1:9a0bbc5:     case COUNTER_SUPER_COLUMN:
1:9a0bbc5:       return getCounter_super_column();
1:15354b4: 
1:15354b4:     }
1:04d5ec3:     throw new IllegalStateException();
1:15354b4:   }
1:9a0bbc5: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:15354b4:     case COLUMN:
1:15354b4:       return isSetColumn();
1:15354b4:     case SUPER_COLUMN:
1:15354b4:       return isSetSuper_column();
1:9a0bbc5:     case COUNTER_COLUMN:
1:9a0bbc5:       return isSetCounter_column();
1:9a0bbc5:     case COUNTER_SUPER_COLUMN:
1:9a0bbc5:       return isSetCounter_super_column();
1:15354b4:     }
1:04d5ec3:     throw new IllegalStateException();
1:15354b4:   }
1:9a0bbc5: 
1:15354b4:   @Override
1:15354b4:   public boolean equals(Object that) {
1:15354b4:     if (that == null)
1:15354b4:       return false;
1:15354b4:     if (that instanceof ColumnOrSuperColumn)
1:15354b4:       return this.equals((ColumnOrSuperColumn)that);
1:15354b4:     return false;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public boolean equals(ColumnOrSuperColumn that) {
1:15354b4:     if (that == null)
1:15354b4:       return false;
1:15354b4: 
1:15354b4:     boolean this_present_column = true && this.isSetColumn();
1:15354b4:     boolean that_present_column = true && that.isSetColumn();
1:15354b4:     if (this_present_column || that_present_column) {
1:15354b4:       if (!(this_present_column && that_present_column))
1:15354b4:         return false;
1:15354b4:       if (!this.column.equals(that.column))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     boolean this_present_super_column = true && this.isSetSuper_column();
1:15354b4:     boolean that_present_super_column = true && that.isSetSuper_column();
1:15354b4:     if (this_present_super_column || that_present_super_column) {
1:15354b4:       if (!(this_present_super_column && that_present_super_column))
1:15354b4:         return false;
1:15354b4:       if (!this.super_column.equals(that.super_column))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:9a0bbc5:     boolean this_present_counter_column = true && this.isSetCounter_column();
1:9a0bbc5:     boolean that_present_counter_column = true && that.isSetCounter_column();
1:9a0bbc5:     if (this_present_counter_column || that_present_counter_column) {
1:9a0bbc5:       if (!(this_present_counter_column && that_present_counter_column))
1:9a0bbc5:         return false;
1:9a0bbc5:       if (!this.counter_column.equals(that.counter_column))
1:9a0bbc5:         return false;
1:15354b4:     }
1:15354b4: 
1:9a0bbc5:     boolean this_present_counter_super_column = true && this.isSetCounter_super_column();
1:9a0bbc5:     boolean that_present_counter_super_column = true && that.isSetCounter_super_column();
1:9a0bbc5:     if (this_present_counter_super_column || that_present_counter_super_column) {
1:9a0bbc5:       if (!(this_present_counter_super_column && that_present_counter_super_column))
1:9a0bbc5:         return false;
1:9a0bbc5:       if (!this.counter_super_column.equals(that.counter_super_column))
1:9a0bbc5:         return false;
1:15354b4:     }
1:9a0bbc5: 
1:15354b4:     return true;
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_column = true && (isSetColumn());
1:d966ed0:     builder.append(present_column);
1:d966ed0:     if (present_column)
1:d966ed0:       builder.append(column);
1:d966ed0: 
1:d966ed0:     boolean present_super_column = true && (isSetSuper_column());
1:d966ed0:     builder.append(present_super_column);
1:d966ed0:     if (present_super_column)
1:d966ed0:       builder.append(super_column);
1:d966ed0: 
1:9a0bbc5:     boolean present_counter_column = true && (isSetCounter_column());
1:9a0bbc5:     builder.append(present_counter_column);
1:9a0bbc5:     if (present_counter_column)
1:9a0bbc5:       builder.append(counter_column);
1:15354b4: 
1:9a0bbc5:     boolean present_counter_super_column = true && (isSetCounter_super_column());
1:9a0bbc5:     builder.append(present_counter_super_column);
1:9a0bbc5:     if (present_counter_super_column)
1:9a0bbc5:       builder.append(counter_super_column);
1:15354b4: 
1:d966ed0:     return builder.toHashCode();
1:15354b4:   }
1:15354b4: 
1:bffd9ea:   @Override
1:0f56a25:   public int compareTo(ColumnOrSuperColumn other) {
1:0f56a25:     if (!getClass().equals(other.getClass())) {
1:0f56a25:       return getClass().getName().compareTo(other.getClass().getName());
1:0f56a25:     }
1:0f56a25: 
1:0f56a25:     int lastComparison = 0;
1:0f56a25: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
1:0f56a25:     if (lastComparison != 0) {
1:0f56a25:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetColumn()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(other.isSetSuper_column());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:0f56a25:     }
1:e7a385a:     if (isSetSuper_column()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, other.super_column);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:0f56a25:       }
1:0f56a25:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCounter_column()).compareTo(other.isSetCounter_column());
1:0f56a25:     if (lastComparison != 0) {
1:0f56a25:       return lastComparison;
1:0f56a25:     }
1:9a0bbc5:     if (isSetCounter_column()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_column, other.counter_column);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:15354b4:       }
1:15354b4:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCounter_super_column()).compareTo(other.isSetCounter_super_column());
3:9a0bbc5:     if (lastComparison != 0) {
3:9a0bbc5:       return lastComparison;
1:15354b4:     }
1:9a0bbc5:     if (isSetCounter_super_column()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_super_column, other.counter_super_column);
1:9a0bbc5:       if (lastComparison != 0) {
1:9a0bbc5:         return lastComparison;
1:15354b4:       }
1:15354b4:     }
1:0f56a25:     return 0;
1:0f56a25:   }
1:0f56a25: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:15354b4:   }
1:15354b4: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public String toString() {
1:15354b4:     StringBuilder sb = new StringBuilder("ColumnOrSuperColumn(");
1:15354b4:     boolean first = true;
1:15354b4: 
1:15354b4:     if (isSetColumn()) {
1:15354b4:       sb.append("column:");
1:15354b4:       if (this.column == null) {
1:15354b4:         sb.append("null");
1:15354b4:       } else {
1:15354b4:         sb.append(this.column);
1:b153d45:       }
1:15354b4:       first = false;
1:b153d45:     }
1:15354b4:     if (isSetSuper_column()) {
1:15354b4:       if (!first) sb.append(", ");
1:15354b4:       sb.append("super_column:");
1:15354b4:       if (this.super_column == null) {
1:15354b4:         sb.append("null");
1:15354b4:       } else {
1:15354b4:         sb.append(this.super_column);
1:b153d45:       }
1:15354b4:       first = false;
1:b153d45:     }
1:9a0bbc5:     if (isSetCounter_column()) {
1:9a0bbc5:       if (!first) sb.append(", ");
1:9a0bbc5:       sb.append("counter_column:");
1:9a0bbc5:       if (this.counter_column == null) {
1:9a0bbc5:         sb.append("null");
1:15354b4:       } else {
1:9a0bbc5:         sb.append(this.counter_column);
1:b153d45:       }
1:9a0bbc5:       first = false;
1:b153d45:     }
1:9a0bbc5:     if (isSetCounter_super_column()) {
1:9a0bbc5:       if (!first) sb.append(", ");
1:9a0bbc5:       sb.append("counter_super_column:");
1:9a0bbc5:       if (this.counter_super_column == null) {
1:9a0bbc5:         sb.append("null");
1:15354b4:       } else {
1:9a0bbc5:         sb.append(this.counter_super_column);
1:9a0bbc5:       }
1:9a0bbc5:       first = false;
1:9a0bbc5:     }
1:15354b4:     sb.append(")");
1:15354b4:     return sb.toString();
1:9a0bbc5:   }
1:9a0bbc5: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:15354b4:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b153d45:     if (column != null) {
1:b153d45:       column.validate();
1:b153d45:     }
1:b153d45:     if (super_column != null) {
1:b153d45:       super_column.validate();
1:b153d45:     }
1:b153d45:     if (counter_column != null) {
1:b153d45:       counter_column.validate();
1:b153d45:     }
1:b153d45:     if (counter_super_column != null) {
1:b153d45:       counter_super_column.validate();
1:b153d45:     }
1:c8afd76:   }
1:c8afd76: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class ColumnOrSuperColumnStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnOrSuperColumnStandardScheme getScheme() {
1:b153d45:       return new ColumnOrSuperColumnStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class ColumnOrSuperColumnStandardScheme extends StandardScheme<ColumnOrSuperColumn> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:15354b4:       iprot.readStructBegin();
1:15354b4:       while (true)
3:15354b4:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:15354b4:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // COLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.column = new Column();
1:b153d45:               struct.column.read(iprot);
1:b153d45:               struct.setColumnIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:15354b4:             break;
1:2b69c40:           case 2: // SUPER_COLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.super_column = new SuperColumn();
1:b153d45:               struct.super_column.read(iprot);
1:b153d45:               struct.setSuper_columnIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:15354b4:             break;
1:b153d45:           case 3: // COUNTER_COLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.counter_column = new CounterColumn();
1:b153d45:               struct.counter_column.read(iprot);
1:b153d45:               struct.setCounter_columnIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:15354b4:             break;
1:b153d45:           case 4: // COUNTER_SUPER_COLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.counter_super_column = new CounterSuperColumn();
1:b153d45:               struct.counter_super_column.read(iprot);
1:b153d45:               struct.setCounter_super_columnIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
5:b153d45:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:15354b4:       iprot.readStructEnd();
1:b153d45: 
1:15354b4:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:15354b4:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.column != null) {
1:b153d45:         if (struct.isSetColumn()) {
1:15354b4:           oprot.writeFieldBegin(COLUMN_FIELD_DESC);
1:b153d45:           struct.column.write(oprot);
1:15354b4:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.super_column != null) {
1:b153d45:         if (struct.isSetSuper_column()) {
1:15354b4:           oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
1:b153d45:           struct.super_column.write(oprot);
1:15354b4:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.counter_column != null) {
1:b153d45:         if (struct.isSetCounter_column()) {
1:b153d45:           oprot.writeFieldBegin(COUNTER_COLUMN_FIELD_DESC);
1:b153d45:           struct.counter_column.write(oprot);
3:b153d45:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.counter_super_column != null) {
1:b153d45:         if (struct.isSetCounter_super_column()) {
1:b153d45:           oprot.writeFieldBegin(COUNTER_SUPER_COLUMN_FIELD_DESC);
1:b153d45:           struct.counter_super_column.write(oprot);
1:b153d45:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:15354b4:       oprot.writeFieldStop();
1:15354b4:       oprot.writeStructEnd();
1:15354b4:     }
1:15354b4: 
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class ColumnOrSuperColumnTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnOrSuperColumnTupleScheme getScheme() {
1:b153d45:       return new ColumnOrSuperColumnTupleScheme();
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class ColumnOrSuperColumnTupleScheme extends TupleScheme<ColumnOrSuperColumn> {
1:b153d45: 
1:15354b4:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetColumn()) {
1:b153d45:         optionals.set(0);
1:15354b4:       }
1:b153d45:       if (struct.isSetSuper_column()) {
1:b153d45:         optionals.set(1);
1:15354b4:       }
1:b153d45:       if (struct.isSetCounter_column()) {
1:b153d45:         optionals.set(2);
1:15354b4:       }
1:b153d45:       if (struct.isSetCounter_super_column()) {
1:b153d45:         optionals.set(3);
1:b153d45:       }
1:b153d45:       oprot.writeBitSet(optionals, 4);
1:b153d45:       if (struct.isSetColumn()) {
1:b153d45:         struct.column.write(oprot);
1:b153d45:       }
1:b153d45:       if (struct.isSetSuper_column()) {
1:b153d45:         struct.super_column.write(oprot);
1:b153d45:       }
1:b153d45:       if (struct.isSetCounter_column()) {
1:b153d45:         struct.counter_column.write(oprot);
1:b153d45:       }
1:b153d45:       if (struct.isSetCounter_super_column()) {
1:b153d45:         struct.counter_super_column.write(oprot);
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
2:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       BitSet incoming = iprot.readBitSet(4);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.column = new Column();
1:b153d45:         struct.column.read(iprot);
1:b153d45:         struct.setColumnIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.super_column = new SuperColumn();
1:b153d45:         struct.super_column.read(iprot);
1:b153d45:         struct.setSuper_columnIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.counter_column = new CounterColumn();
1:b153d45:         struct.counter_column.read(iprot);
1:b153d45:         struct.setCounter_columnIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(3)) {
1:b153d45:         struct.counter_super_column = new CounterSuperColumn();
1:b153d45:         struct.counter_super_column.read(iprot);
1:b153d45:         struct.setCounter_super_columnIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class ColumnOrSuperColumn implements org.apache.thrift.TBase<ColumnOrSuperColumn, ColumnOrSuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnOrSuperColumn> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
1:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(other.isSetSuper_column());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, other.super_column);
1:     lastComparison = Boolean.valueOf(isSetCounter_column()).compareTo(other.isSetCounter_column());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_column, other.counter_column);
1:     lastComparison = Boolean.valueOf(isSetCounter_super_column()).compareTo(other.isSetCounter_super_column());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_super_column, other.counter_super_column);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.column = null;
1:     this.super_column = null;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumn()) {
0:       lastComparison = TBaseHelper.compareTo(this.column, typedOther.column);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetSuper_column()) {
0:       lastComparison = TBaseHelper.compareTo(this.super_column, typedOther.super_column);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_column = true && (isSetColumn());
1:     builder.append(present_column);
1:     if (present_column)
1:       builder.append(column);
1: 
1:     boolean present_super_column = true && (isSetSuper_column());
1:     builder.append(present_super_column);
1:     if (present_super_column)
1:       builder.append(super_column);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class ColumnOrSuperColumn implements TBase<ColumnOrSuperColumn, ColumnOrSuperColumn._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // COLUMN
1:           return COLUMN;
1:         case 2: // SUPER_COLUMN
1:           return SUPER_COLUMN;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.COLUMN, new FieldMetaData("column", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, Column.class)));
0:     tmpMap.put(_Fields.SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, SuperColumn.class)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumn()) {      lastComparison = TBaseHelper.compareTo(this.column, typedOther.column);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(this.super_column, typedOther.super_column);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
0:     if (isSetColumn()) {      lastComparison = TBaseHelper.compareTo(column, typedOther.column);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
0:     if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // COLUMN
0:           if (field.type == TType.STRUCT) {
0:             this.column = new Column();
0:             this.column.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // SUPER_COLUMN
0:           if (field.type == TType.STRUCT) {
0:             this.super_column = new SuperColumn();
0:             this.super_column.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:53895ad
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   public static final int COLUMN = 1;
/////////////////////////////////////////////////////////////////////////
1:   public ColumnOrSuperColumn deepCopy() {
1:     return new ColumnOrSuperColumn(this);
1:   }
1: 
0:   @Deprecated
commit:0f56a25
/////////////////////////////////////////////////////////////////////////
1: import java.util.BitSet;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: public class ColumnOrSuperColumn implements TBase, java.io.Serializable, Cloneable, Comparable<ColumnOrSuperColumn> {
/////////////////////////////////////////////////////////////////////////
1:   // isset id assignments
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(ColumnOrSuperColumn other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     ColumnOrSuperColumn typedOther = (ColumnOrSuperColumn)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetColumn()).compareTo(isSetColumn());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(column, typedOther.column);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:15354b4
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
1: 
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
0: import java.util.Set;
0: import java.util.HashSet;
1: import java.util.Collections;
0: import org.apache.log4j.Logger;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class ColumnOrSuperColumn implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("ColumnOrSuperColumn");
0:   private static final TField COLUMN_FIELD_DESC = new TField("column", TType.STRUCT, (short)1);
0:   private static final TField SUPER_COLUMN_FIELD_DESC = new TField("super_column", TType.STRUCT, (short)2);
1: 
0:   public Column column;
0:   public static final int COLUMN = 1;
0:   public SuperColumn super_column;
0:   public static final int SUPER_COLUMN = 2;
1: 
0:   private final Isset __isset = new Isset();
0:   private static final class Isset implements java.io.Serializable {
1:   }
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(COLUMN, new FieldMetaData("column", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, Column.class)));
0:     put(SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, SuperColumn.class)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(ColumnOrSuperColumn.class, metaDataMap);
1:   }
1: 
1:   public ColumnOrSuperColumn() {
1:   }
1: 
0:   public ColumnOrSuperColumn(
0:     Column column,
0:     SuperColumn super_column)
1:   {
0:     this();
1:     this.column = column;
1:     this.super_column = super_column;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public ColumnOrSuperColumn(ColumnOrSuperColumn other) {
1:     if (other.isSetColumn()) {
1:       this.column = new Column(other.column);
1:     }
1:     if (other.isSetSuper_column()) {
1:       this.super_column = new SuperColumn(other.super_column);
1:     }
1:   }
1: 
1:   @Override
0:   public ColumnOrSuperColumn clone() {
0:     return new ColumnOrSuperColumn(this);
1:   }
1: 
1:   public Column getColumn() {
1:     return this.column;
1:   }
1: 
0:   public void setColumn(Column column) {
1:     this.column = column;
1:   }
1: 
1:   public void unsetColumn() {
1:     this.column = null;
1:   }
1: 
0:   // Returns true if field column is set (has been asigned a value) and false otherwise
1:   public boolean isSetColumn() {
1:     return this.column != null;
1:   }
1: 
1:   public void setColumnIsSet(boolean value) {
1:     if (!value) {
1:       this.column = null;
1:     }
1:   }
1: 
1:   public SuperColumn getSuper_column() {
1:     return this.super_column;
1:   }
1: 
0:   public void setSuper_column(SuperColumn super_column) {
1:     this.super_column = super_column;
1:   }
1: 
1:   public void unsetSuper_column() {
1:     this.super_column = null;
1:   }
1: 
0:   // Returns true if field super_column is set (has been asigned a value) and false otherwise
1:   public boolean isSetSuper_column() {
1:     return this.super_column != null;
1:   }
1: 
1:   public void setSuper_columnIsSet(boolean value) {
1:     if (!value) {
1:       this.super_column = null;
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case COLUMN:
1:       if (value == null) {
1:         unsetColumn();
1:       } else {
1:         setColumn((Column)value);
1:       }
1:       break;
1: 
1:     case SUPER_COLUMN:
1:       if (value == null) {
1:         unsetSuper_column();
1:       } else {
1:         setSuper_column((SuperColumn)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN:
1:       return getColumn();
1: 
1:     case SUPER_COLUMN:
1:       return getSuper_column();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN:
1:       return isSetColumn();
1:     case SUPER_COLUMN:
1:       return isSetSuper_column();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof ColumnOrSuperColumn)
1:       return this.equals((ColumnOrSuperColumn)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(ColumnOrSuperColumn that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_column = true && this.isSetColumn();
1:     boolean that_present_column = true && that.isSetColumn();
1:     if (this_present_column || that_present_column) {
1:       if (!(this_present_column && that_present_column))
1:         return false;
1:       if (!this.column.equals(that.column))
1:         return false;
1:     }
1: 
1:     boolean this_present_super_column = true && this.isSetSuper_column();
1:     boolean that_present_super_column = true && that.isSetSuper_column();
1:     if (this_present_super_column || that_present_super_column) {
1:       if (!(this_present_super_column && that_present_super_column))
1:         return false;
1:       if (!this.super_column.equals(that.super_column))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
1:         case COLUMN:
0:           if (field.type == TType.STRUCT) {
0:             this.column = new Column();
0:             this.column.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case SUPER_COLUMN:
0:           if (field.type == TType.STRUCT) {
0:             this.super_column = new SuperColumn();
0:             this.super_column.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.column != null) {
1:       oprot.writeFieldBegin(COLUMN_FIELD_DESC);
0:       this.column.write(oprot);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.super_column != null) {
1:       oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
0:       this.super_column.write(oprot);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("ColumnOrSuperColumn(");
1:     boolean first = true;
1: 
1:     if (isSetColumn()) {
1:       sb.append("column:");
1:       if (this.column == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.column);
1:       }
1:       first = false;
1:     }
1:     if (isSetSuper_column()) {
1:       if (!first) sb.append(", ");
1:       sb.append("super_column:");
1:       if (this.super_column == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.super_column);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new ColumnOrSuperColumnStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new ColumnOrSuperColumnTupleSchemeFactory());
1:   }
1: 
1:   public Column column; // optional
1:   public SuperColumn super_column; // optional
1:   public CounterColumn counter_column; // optional
1:   public CounterSuperColumn counter_super_column; // optional
/////////////////////////////////////////////////////////////////////////
1:   private _Fields optionals[] = {_Fields.COLUMN,_Fields.SUPER_COLUMN,_Fields.COUNTER_COLUMN,_Fields.COUNTER_SUPER_COLUMN};
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
1:     if (column != null) {
1:       column.validate();
1:     }
1:     if (super_column != null) {
1:       super_column.validate();
1:     }
1:     if (counter_column != null) {
1:       counter_column.validate();
1:     }
1:     if (counter_super_column != null) {
1:       counter_super_column.validate();
1:     }
/////////////////////////////////////////////////////////////////////////
1:   private static class ColumnOrSuperColumnStandardSchemeFactory implements SchemeFactory {
1:     public ColumnOrSuperColumnStandardScheme getScheme() {
1:       return new ColumnOrSuperColumnStandardScheme();
1:     }
1:   }
1: 
1:   private static class ColumnOrSuperColumnStandardScheme extends StandardScheme<ColumnOrSuperColumn> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // COLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.column = new Column();
1:               struct.column.read(iprot);
1:               struct.setColumnIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 2: // SUPER_COLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.super_column = new SuperColumn();
1:               struct.super_column.read(iprot);
1:               struct.setSuper_columnIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 3: // COUNTER_COLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.counter_column = new CounterColumn();
1:               struct.counter_column.read(iprot);
1:               struct.setCounter_columnIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 4: // COUNTER_SUPER_COLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.counter_super_column = new CounterSuperColumn();
1:               struct.counter_super_column.read(iprot);
1:               struct.setCounter_super_columnIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.column != null) {
1:         if (struct.isSetColumn()) {
0:           oprot.writeFieldBegin(COLUMN_FIELD_DESC);
1:           struct.column.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.super_column != null) {
1:         if (struct.isSetSuper_column()) {
0:           oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
1:           struct.super_column.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.counter_column != null) {
1:         if (struct.isSetCounter_column()) {
1:           oprot.writeFieldBegin(COUNTER_COLUMN_FIELD_DESC);
1:           struct.counter_column.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.counter_super_column != null) {
1:         if (struct.isSetCounter_super_column()) {
1:           oprot.writeFieldBegin(COUNTER_SUPER_COLUMN_FIELD_DESC);
1:           struct.counter_super_column.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class ColumnOrSuperColumnTupleSchemeFactory implements SchemeFactory {
1:     public ColumnOrSuperColumnTupleScheme getScheme() {
1:       return new ColumnOrSuperColumnTupleScheme();
1:     }
1:   }
1: 
1:   private static class ColumnOrSuperColumnTupleScheme extends TupleScheme<ColumnOrSuperColumn> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetColumn()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetSuper_column()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetCounter_column()) {
1:         optionals.set(2);
1:       }
1:       if (struct.isSetCounter_super_column()) {
1:         optionals.set(3);
1:       }
1:       oprot.writeBitSet(optionals, 4);
1:       if (struct.isSetColumn()) {
1:         struct.column.write(oprot);
1:       }
1:       if (struct.isSetSuper_column()) {
1:         struct.super_column.write(oprot);
1:       }
1:       if (struct.isSetCounter_column()) {
1:         struct.counter_column.write(oprot);
1:       }
1:       if (struct.isSetCounter_super_column()) {
1:         struct.counter_super_column.write(oprot);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnOrSuperColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(4);
1:       if (incoming.get(0)) {
1:         struct.column = new Column();
1:         struct.column.read(iprot);
1:         struct.setColumnIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.super_column = new SuperColumn();
1:         struct.super_column.read(iprot);
1:         struct.setSuper_columnIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.counter_column = new CounterColumn();
1:         struct.counter_column.read(iprot);
1:         struct.setCounter_columnIsSet(true);
1:       }
1:       if (incoming.get(3)) {
1:         struct.counter_super_column = new CounterSuperColumn();
1:         struct.counter_super_column.read(iprot);
1:         struct.setCounter_super_columnIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
0:   public Column column; // required
0:   public SuperColumn super_column; // required
0:   public CounterColumn counter_column; // required
0:   public CounterSuperColumn counter_super_column; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9a0bbc5
/////////////////////////////////////////////////////////////////////////
1:  * If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
1:  * counter_super_column (instead of a super_column)
0:  * 
1:  * @param counter_column. The Counterolumn returned by get() or get_slice().
1:  * @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
1:   private static final org.apache.thrift.protocol.TField COUNTER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_column", org.apache.thrift.protocol.TType.STRUCT, (short)3);
1:   private static final org.apache.thrift.protocol.TField COUNTER_SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_super_column", org.apache.thrift.protocol.TType.STRUCT, (short)4);
0:   public CounterColumn counter_column;
0:   public CounterSuperColumn counter_super_column;
1:     SUPER_COLUMN((short)2, "super_column"),
1:     COUNTER_COLUMN((short)3, "counter_column"),
1:     COUNTER_SUPER_COLUMN((short)4, "counter_super_column");
/////////////////////////////////////////////////////////////////////////
1:         case 3: // COUNTER_COLUMN
1:           return COUNTER_COLUMN;
1:         case 4: // COUNTER_SUPER_COLUMN
1:           return COUNTER_SUPER_COLUMN;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.COUNTER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("counter_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CounterColumn.class)));
1:     tmpMap.put(_Fields.COUNTER_SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("counter_super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CounterSuperColumn.class)));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetCounter_column()) {
1:       this.counter_column = new CounterColumn(other.counter_column);
1:     }
1:     if (other.isSetCounter_super_column()) {
1:       this.counter_super_column = new CounterSuperColumn(other.counter_super_column);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.counter_column = null;
1:     this.counter_super_column = null;
/////////////////////////////////////////////////////////////////////////
1:   public CounterColumn getCounter_column() {
1:     return this.counter_column;
1:   }
1: 
1:   public ColumnOrSuperColumn setCounter_column(CounterColumn counter_column) {
1:     this.counter_column = counter_column;
1:     return this;
1:   }
1: 
1:   public void unsetCounter_column() {
1:     this.counter_column = null;
1:   }
1: 
1:   /** Returns true if field counter_column is set (has been assigned a value) and false otherwise */
1:   public boolean isSetCounter_column() {
1:     return this.counter_column != null;
1:   }
1: 
1:   public void setCounter_columnIsSet(boolean value) {
1:     if (!value) {
1:       this.counter_column = null;
1:     }
1:   }
1: 
1:   public CounterSuperColumn getCounter_super_column() {
1:     return this.counter_super_column;
1:   }
1: 
1:   public ColumnOrSuperColumn setCounter_super_column(CounterSuperColumn counter_super_column) {
1:     this.counter_super_column = counter_super_column;
1:     return this;
1:   }
1: 
1:   public void unsetCounter_super_column() {
1:     this.counter_super_column = null;
1:   }
1: 
1:   /** Returns true if field counter_super_column is set (has been assigned a value) and false otherwise */
1:   public boolean isSetCounter_super_column() {
1:     return this.counter_super_column != null;
1:   }
1: 
1:   public void setCounter_super_columnIsSet(boolean value) {
1:     if (!value) {
1:       this.counter_super_column = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case COUNTER_COLUMN:
1:       if (value == null) {
1:         unsetCounter_column();
0:       } else {
1:         setCounter_column((CounterColumn)value);
1:       }
0:       break;
1: 
1:     case COUNTER_SUPER_COLUMN:
1:       if (value == null) {
1:         unsetCounter_super_column();
0:       } else {
1:         setCounter_super_column((CounterSuperColumn)value);
1:       }
0:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case COUNTER_COLUMN:
1:       return getCounter_column();
1: 
1:     case COUNTER_SUPER_COLUMN:
1:       return getCounter_super_column();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case COUNTER_COLUMN:
1:       return isSetCounter_column();
1:     case COUNTER_SUPER_COLUMN:
1:       return isSetCounter_super_column();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_counter_column = true && this.isSetCounter_column();
1:     boolean that_present_counter_column = true && that.isSetCounter_column();
1:     if (this_present_counter_column || that_present_counter_column) {
1:       if (!(this_present_counter_column && that_present_counter_column))
1:         return false;
1:       if (!this.counter_column.equals(that.counter_column))
1:         return false;
1:     }
1: 
1:     boolean this_present_counter_super_column = true && this.isSetCounter_super_column();
1:     boolean that_present_counter_super_column = true && that.isSetCounter_super_column();
1:     if (this_present_counter_super_column || that_present_counter_super_column) {
1:       if (!(this_present_counter_super_column && that_present_counter_super_column))
1:         return false;
1:       if (!this.counter_super_column.equals(that.counter_super_column))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_counter_column = true && (isSetCounter_column());
1:     builder.append(present_counter_column);
1:     if (present_counter_column)
1:       builder.append(counter_column);
1: 
1:     boolean present_counter_super_column = true && (isSetCounter_super_column());
1:     builder.append(present_counter_super_column);
1:     if (present_counter_super_column)
1:       builder.append(counter_super_column);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetCounter_column()).compareTo(typedOther.isSetCounter_column());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetCounter_column()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_column, typedOther.counter_column);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCounter_super_column()).compareTo(typedOther.isSetCounter_super_column());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetCounter_super_column()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_super_column, typedOther.counter_super_column);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         case 3: // COUNTER_COLUMN
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             this.counter_column = new CounterColumn();
0:             this.counter_column.read(iprot);
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         case 4: // COUNTER_SUPER_COLUMN
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             this.counter_super_column = new CounterSuperColumn();
0:             this.counter_super_column.read(iprot);
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.counter_column != null) {
1:       if (isSetCounter_column()) {
0:         oprot.writeFieldBegin(COUNTER_COLUMN_FIELD_DESC);
0:         this.counter_column.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
0:     }
0:     if (this.counter_super_column != null) {
1:       if (isSetCounter_super_column()) {
0:         oprot.writeFieldBegin(COUNTER_SUPER_COLUMN_FIELD_DESC);
0:         this.counter_super_column.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCounter_column()) {
1:       if (!first) sb.append(", ");
1:       sb.append("counter_column:");
1:       if (this.counter_column == null) {
1:         sb.append("null");
0:       } else {
1:         sb.append(this.counter_column);
0:       }
1:       first = false;
0:     }
0:     if (isSetCounter_super_column()) {
1:       if (!first) sb.append(", ");
1:       sb.append("counter_super_column:");
1:       if (this.counter_super_column == null) {
1:         sb.append("null");
0:       } else {
1:         sb.append(this.counter_super_column);
0:       }
1:       first = false;
0:     }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ColumnOrSuperColumn implements org.apache.thrift.TBase<ColumnOrSuperColumn, ColumnOrSuperColumn._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnOrSuperColumn");
1:   private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column", org.apache.thrift.protocol.TType.STRUCT, (short)1);
1:   private static final org.apache.thrift.protocol.TField SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("super_column", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.COLUMN, new org.apache.thrift.meta_data.FieldMetaData("column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class)));
1:     tmpMap.put(_Fields.SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuperColumn.class)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnOrSuperColumn.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field column is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field super_column is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, typedOther.super_column);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class ColumnOrSuperColumn implements TBase<ColumnOrSuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnOrSuperColumn> {
0: 
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     COLUMN((short)1, "column"),
0:     SUPER_COLUMN((short)2, "super_column");
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.COLUMN, new FieldMetaData("column", TFieldRequirementType.OPTIONAL, 
0:     put(_Fields.SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field column is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field super_column is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case COLUMN:
0:             if (field.type == TType.STRUCT) {
0:               this.column = new Column();
0:               this.column.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case SUPER_COLUMN:
0:             if (field.type == TType.STRUCT) {
0:               this.super_column = new SuperColumn();
0:               this.super_column.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
1:  * of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
1:  * instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
1:  * in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
1:  * single query methods that may return either a SuperColumn or Column.
0:  * 
1:  * @param column. The Column returned by get() or get_slice().
1:  * @param super_column. The SuperColumn returned by get() or get_slice().
0:  */
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
1:   public ColumnOrSuperColumn setColumn(Column column) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public ColumnOrSuperColumn setSuper_column(SuperColumn super_column) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
0:       if (isSetColumn()) {
0:         oprot.writeFieldBegin(COLUMN_FIELD_DESC);
0:         this.column.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
0:       if (isSetSuper_column()) {
0:         oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
0:         this.super_column.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
============================================================================