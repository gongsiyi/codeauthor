1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:4b54b8a: package org.apache.cassandra.utils.memory;
7:4b54b8a: 
1:8a2a0c3: import java.nio.ByteBuffer;
1:1a3b5db: 
1:8541cca: import org.apache.cassandra.utils.ByteBufferUtil;
1:4b54b8a: import org.apache.cassandra.utils.concurrent.OpOrder;
1:8a2a0c3: 
1:4b54b8a: /**
1:4b54b8a:  * Wraps calls to a PoolAllocator with the provided writeOp. Also doubles as a Function that clones Cells
1:4b54b8a:  * using itself
1:4b54b8a:  */
1:8541cca: public final class ContextAllocator extends AbstractAllocator
5:4b54b8a: {
1:4b54b8a:     private final OpOrder.Group opGroup;
1:8541cca:     private final MemtableBufferAllocator allocator;
1:4b54b8a: 
1:8541cca:     public ContextAllocator(OpOrder.Group opGroup, MemtableBufferAllocator allocator)
1:4b54b8a:     {
1:4b54b8a:         this.opGroup = opGroup;
1:4b54b8a:         this.allocator = allocator;
5:4b54b8a:     }
1:4b54b8a: 
3:4b54b8a:     @Override
1:4b54b8a:     public ByteBuffer clone(ByteBuffer buffer)
1:4b54b8a:     {
1:8541cca:         assert buffer != null;
1:8541cca:         if (buffer.remaining() == 0)
1:8541cca:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:8541cca:         ByteBuffer cloned = allocate(buffer.remaining());
1:8541cca: 
1:8541cca:         cloned.mark();
1:8541cca:         cloned.put(buffer.duplicate());
1:8541cca:         cloned.reset();
1:8541cca:         return cloned;
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     public ByteBuffer allocate(int size)
1:4b54b8a:     {
1:4b54b8a:         return allocator.allocate(size, opGroup);
1:4b54b8a:     }
1:4b54b8a: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: public final class ContextAllocator extends AbstractAllocator
1:     private final MemtableBufferAllocator allocator;
1:     public ContextAllocator(OpOrder.Group opGroup, MemtableBufferAllocator allocator)
/////////////////////////////////////////////////////////////////////////
1:         assert buffer != null;
1:         if (buffer.remaining() == 0)
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:         ByteBuffer cloned = allocate(buffer.remaining());
1: 
1:         cloned.mark();
1:         cloned.put(buffer.duplicate());
1:         cloned.reset();
1:         return cloned;
commit:1a3b5db
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Function;
1: 
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:8a2a0c3
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public ContextAllocator(OpOrder.Group opGroup, PoolAllocator allocator)
/////////////////////////////////////////////////////////////////////////
0:         return column.localCopy(this);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.memory;
1: 
0: import com.google.common.base.*;
0: import org.apache.cassandra.db.Cell;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
0: import org.apache.cassandra.db.ColumnFamilyStore;
1: 
0: import java.nio.ByteBuffer;
1: 
1: /**
1:  * Wraps calls to a PoolAllocator with the provided writeOp. Also doubles as a Function that clones Cells
1:  * using itself
1:  */
0: public final class ContextAllocator extends AbstractAllocator implements Function<Cell, Cell>
1: {
1:     private final OpOrder.Group opGroup;
0:     private final PoolAllocator allocator;
0:     private final ColumnFamilyStore cfs;
1: 
0:     public ContextAllocator(OpOrder.Group opGroup, PoolAllocator allocator, ColumnFamilyStore cfs)
1:     {
1:         this.opGroup = opGroup;
1:         this.allocator = allocator;
0:         this.cfs = cfs;
1:     }
1: 
1:     @Override
1:     public ByteBuffer clone(ByteBuffer buffer)
1:     {
0:         return allocator.clone(buffer, opGroup);
1:     }
1: 
1:     public ByteBuffer allocate(int size)
1:     {
1:         return allocator.allocate(size, opGroup);
1:     }
1: 
0:     public Cell apply(Cell column)
1:     {
0:         return column.localCopy(cfs, this);
1:     }
1: 
0:     public long owns()
1:     {
0:         return allocator.owns();
1:     }
1: 
1:     @Override
0:     public float ownershipRatio()
1:     {
0:         return allocator.ownershipRatio();
1:     }
1: 
1:     @Override
0:     public long reclaiming()
1:     {
0:         return allocator.reclaiming();
1:     }
1: }
============================================================================