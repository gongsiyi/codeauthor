1:07cf56f: /*
1:a5bd08f:  * Licensed to the Apache Software Foundation (ASF) under one
1:a5bd08f:  * or more contributor license agreements.  See the NOTICE file
1:a5bd08f:  * distributed with this work for additional information
1:a5bd08f:  * regarding copyright ownership.  The ASF licenses this file
1:a5bd08f:  * to you under the Apache License, Version 2.0 (the
1:a5bd08f:  * "License"); you may not use this file except in compliance
1:a5bd08f:  * with the License.  You may obtain a copy of the License at
1:a5bd08f:  *
1:a5bd08f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a5bd08f:  *
1:a5bd08f:  * Unless required by applicable law or agreed to in writing, software
1:a5bd08f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a5bd08f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5bd08f:  * See the License for the specific language governing permissions and
1:a5bd08f:  * limitations under the License.
1:a5bd08f:  */
1:a5bd08f: package org.apache.cassandra.service;
1:5a45534: 
1:5a45534: import java.net.InetAddress;
1:5a45534: import java.util.Arrays;
1:443d534: import java.util.Collection;
1:dc97a8f: import java.util.Collections;
1:7aa3364: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:5a45534: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:3a2faf9: import org.apache.cassandra.db.ConsistencyLevel;
1:ee5aafe: import org.apache.cassandra.db.WriteType;
1:5a45534: 
1:5a45534: /**
1:0d6db4a:  * Handles blocking writes for ONE, ANY, TWO, THREE, QUORUM, and ALL consistency levels.
1:5a45534:  */
1:c059a56: public class WriteResponseHandler<T> extends AbstractWriteResponseHandler<T>
1:4ac23ca: {
1:5a45534:     protected static final Logger logger = LoggerFactory.getLogger(WriteResponseHandler.class);
1:5a45534: 
1:7aa3364:     protected volatile int responses;
1:7aa3364:     private static final AtomicIntegerFieldUpdater<WriteResponseHandler> responsesUpdater
1:7aa3364:             = AtomicIntegerFieldUpdater.newUpdater(WriteResponseHandler.class, "responses");
1:5a45534: 
1:ee5aafe:     public WriteResponseHandler(Collection<InetAddress> writeEndpoints,
1:ee5aafe:                                 Collection<InetAddress> pendingEndpoints,
1:ee5aafe:                                 ConsistencyLevel consistencyLevel,
1:0e96e58:                                 Keyspace keyspace,
1:ee5aafe:                                 Runnable callback,
1:aa83c94:                                 WriteType writeType,
1:aa83c94:                                 long queryStartNanoTime)
1:4ac23ca:     {
1:aa83c94:         super(keyspace, writeEndpoints, pendingEndpoints, consistencyLevel, callback, writeType, queryStartNanoTime);
1:7aa3364:         responses = totalBlockFor();
1:4ac23ca:     }
1:4881221: 
1:aa83c94:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType, Runnable callback, long queryStartNanoTime)
1:4881221:     {
1:aa83c94:         this(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ONE, null, callback, writeType, queryStartNanoTime);
1:4881221:     }
1:dc9992a: 
1:aa83c94:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType, long queryStartNanoTime)
1:4ac23ca:     {
1:aa83c94:         this(endpoint, writeType, null, queryStartNanoTime);
1:4ac23ca:     }
1:4ac23ca: 
1:c059a56:     public void response(MessageIn<T> m)
1:4ac23ca:     {
1:7aa3364:         if (responsesUpdater.decrementAndGet(this) == 0)
1:7371e10:             signal();
1:4ac23ca:     }
1:4ac23ca: 
1:c9a13c3:     protected int ackCount()
1:c9a13c3:     {
1:7aa3364:         return totalBlockFor() - responses;
1:c9a13c3:     }
1:c9a13c3: 
1:dc9992a:     public boolean isLatencyForSnitch()
1:dc9992a:     {
1:dc9992a:         return false;
1:dc9992a:     }
1:4ac23ca: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:                                 WriteType writeType,
1:                                 long queryStartNanoTime)
1:         super(keyspace, writeEndpoints, pendingEndpoints, consistencyLevel, callback, writeType, queryStartNanoTime);
1:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType, Runnable callback, long queryStartNanoTime)
1:         this(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ONE, null, callback, writeType, queryStartNanoTime);
1:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType, long queryStartNanoTime)
1:         this(endpoint, writeType, null, queryStartNanoTime);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c059a56
/////////////////////////////////////////////////////////////////////////
1: public class WriteResponseHandler<T> extends AbstractWriteResponseHandler<T>
/////////////////////////////////////////////////////////////////////////
1:     public void response(MessageIn<T> m)
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:7aa3364
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
/////////////////////////////////////////////////////////////////////////
1:     protected volatile int responses;
1:     private static final AtomicIntegerFieldUpdater<WriteResponseHandler> responsesUpdater
1:             = AtomicIntegerFieldUpdater.newUpdater(WriteResponseHandler.class, "responses");
/////////////////////////////////////////////////////////////////////////
1:         responses = totalBlockFor();
/////////////////////////////////////////////////////////////////////////
1:         if (responsesUpdater.decrementAndGet(this) == 0)
1:         return totalBlockFor() - responses;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
1:                                 Keyspace keyspace,
0:         super(keyspace, writeEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4d29c70
/////////////////////////////////////////////////////////////////////////
0:         responses = new AtomicInteger(totalBlockFor());
/////////////////////////////////////////////////////////////////////////
0:         return totalBlockFor() - responses.get();
commit:5267112
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
/////////////////////////////////////////////////////////////////////////
0:                                 Table table,
0:         super(table, writeEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
0:         responses = new AtomicInteger(consistencyLevel.blockFor(table));
0:         this(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ONE, null, callback, writeType);
0:         this(endpoint, writeType, null);
/////////////////////////////////////////////////////////////////////////
0:         return consistencyLevel.blockFor(table) - responses.get();
commit:ee5aafe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.WriteType;
/////////////////////////////////////////////////////////////////////////
1:     public WriteResponseHandler(Collection<InetAddress> writeEndpoints,
1:                                 Collection<InetAddress> pendingEndpoints,
1:                                 ConsistencyLevel consistencyLevel,
0:                                 String table,
1:                                 Runnable callback,
0:                                 WriteType writeType)
0:         super(writeEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
0:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType)
0:         super(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ALL, null, writeType);
commit:d5fc193
commit:7371e10
/////////////////////////////////////////////////////////////////////////
0:     protected WriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         super(writeEndpoints, consistencyLevel, callback);
0:         super(Arrays.asList(endpoint), ConsistencyLevel.ALL, null);
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         return new WriteResponseHandler(writeEndpoints, consistencyLevel, table, callback);
/////////////////////////////////////////////////////////////////////////
1:             signal();
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.UnavailableException;
1: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:         blockFor = consistencyLevel.blockFor(table);
/////////////////////////////////////////////////////////////////////////
0:     protected int blockFor()
0:         return blockFor;
/////////////////////////////////////////////////////////////////////////
0:                 throw new UnavailableException(consistencyLevel, responses.get(), effectiveEndpoints);
/////////////////////////////////////////////////////////////////////////
0:             throw new UnavailableException(consistencyLevel, responses.get(), liveNodes);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4881221
/////////////////////////////////////////////////////////////////////////
0:     public WriteResponseHandler(InetAddress endpoint, WriteType writeType, Runnable callback)
1:     {
0:         super(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ALL, callback, writeType);
0:         blockFor = 1;
0:         responses = new AtomicInteger(1);
1:     }
1: 
commit:dc97a8f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
0: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
0:     protected WriteResponseHandler(Collection<InetAddress> writeEndpoints, Collection<InetAddress> pendingEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         super(writeEndpoints, pendingEndpoints, consistencyLevel, callback);
0:         super(Arrays.asList(endpoint), Collections.<InetAddress>emptyList(), ConsistencyLevel.ALL, null);
0:     public static AbstractWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Collection<InetAddress> pendingEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         return new WriteResponseHandler(writeEndpoints, pendingEndpoints, consistencyLevel, table, callback);
/////////////////////////////////////////////////////////////////////////
0:     protected int blockForCL()
/////////////////////////////////////////////////////////////////////////
0:             // local hint is acceptable, and local node is always live
0:         for (InetAddress destination : Iterables.concat(naturalEndpoints, pendingEndpoints))
0:         if (liveNodes < blockFor)
0:             throw new UnavailableException(consistencyLevel, blockFor, liveNodes);
commit:84c0657
/////////////////////////////////////////////////////////////////////////
0:     public static AbstractWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:     public static AbstractWriteResponseHandler create(InetAddress endpoint)
commit:c9a13c3
/////////////////////////////////////////////////////////////////////////
0:     private final int blockFor;
0:         blockFor = determineBlockFor(table);
0:         responses = new AtomicInteger(blockFor);
0:         blockFor = 1;
/////////////////////////////////////////////////////////////////////////
1:     protected int ackCount()
1:     {
0:         return blockFor - responses.get();
1:     }
1: 
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void response(MessageIn m)
commit:3893f24
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.gms.FailureDetector;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:     protected WriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table)
0:         super(writeEndpoints, consistencyLevel);
0:         super(Arrays.asList(endpoint), ConsistencyLevel.ALL);
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table)
0:         return new WriteResponseHandler(writeEndpoints, consistencyLevel, table);
/////////////////////////////////////////////////////////////////////////
0:             // Ensure there are blockFor distinct living nodes (hints (local) are ok).
0:             // Thus we include the local node (coordinator) as a valid replica if it is there already.
0:             int effectiveEndpoints = writeEndpoints.contains(FBUtilities.getBroadcastAddress()) ? writeEndpoints.size() : writeEndpoints.size() + 1;
0:             if (effectiveEndpoints < responses.get())
0:         for (InetAddress destination : writeEndpoints)
0:             if (FailureDetector.instance.isAlive(destination))
commit:b803c37
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:             return;
commit:15a0f2b
/////////////////////////////////////////////////////////////////////////
0:             return;
commit:f245882
/////////////////////////////////////////////////////////////////////////
0:                 return 1;
0:                 return 1;
0:                 return 2;
0:                 return 3;
0:                 return (writeEndpoints.size() / 2) + 1;
0:                 return writeEndpoints.size();
commit:0d6db4a
/////////////////////////////////////////////////////////////////////////
1:  * Handles blocking writes for ONE, ANY, TWO, THREE, QUORUM, and ALL consistency levels.
/////////////////////////////////////////////////////////////////////////
0:             case TWO:
0:                 blockFor = 2;
0:                 break;
0:             case THREE:
0:                 blockFor = 3;
0:                 break;
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return false;
1:     }
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
commit:2f5f0c2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
/////////////////////////////////////////////////////////////////////////
0:         assert 1 <= blockFor && blockFor <= 2 * Table.open(table).getReplicationStrategy().getReplicationFactor()
0:                             blockFor, Table.open(table).getReplicationStrategy().getReplicationFactor());
commit:946a63c
/////////////////////////////////////////////////////////////////////////
0:             : String.format("invalid response count %d for replication factor %d",
0:                             blockFor, DatabaseDescriptor.getReplicationFactor(table));
commit:4ac23ca
/////////////////////////////////////////////////////////////////////////
0:     protected final AtomicInteger responses;
0:     protected WriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
0:     protected WriteResponseHandler(InetAddress endpoint)
/////////////////////////////////////////////////////////////////////////
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
1:     {
0:         if (consistencyLevel == ConsistencyLevel.ZERO)
1:         {
0:             return NoConsistencyWriteResponseHandler.instance;
1:         }
0:         else
1:         {
0:             return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
1:         }
1:     }
1: 
0:     public static IWriteResponseHandler create(InetAddress endpoint)
1:     {
0:         return new WriteResponseHandler(endpoint);
1:     }
1: 
commit:5a45534
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.util.Arrays;
0: import com.google.common.collect.ImmutableMultimap;
0: import com.google.common.collect.Multimap;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
1: /**
0:  * Handles blocking writes for ONE, ANY, QUORUM, and ALL consistency levels.
1:  */
0: public class WriteResponseHandler extends AbstractWriteResponseHandler
1:     protected static final Logger logger = LoggerFactory.getLogger(WriteResponseHandler.class);
0:     protected AtomicInteger responses;
1: 
0:     public WriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
0:         super(writeEndpoints, hintedEndpoints, consistencyLevel);
0:         responses = new AtomicInteger(determineBlockFor(table));
0:     }
1: 
0:     public WriteResponseHandler(InetAddress endpoint)
0:     {
0:         super(Arrays.asList(endpoint),
0:               ImmutableMultimap.<InetAddress, InetAddress>builder().put(endpoint, endpoint).build(),
0:               ConsistencyLevel.ALL);
0:         responses = new AtomicInteger(1);
0:     }
1: 
0:     public void response(Message m)
0:     {
0:         if (responses.decrementAndGet() == 0)
0:             condition.signal();
0:     }
1: 
0:     protected int determineBlockFor(String table)
0:     {
0:         int blockFor = 0;
0:         switch (consistencyLevel)
0:         {
0:             case ONE:
0:                 blockFor = 1;
0:                 break;
0:             case ANY:
0:                 blockFor = 1;
0:                 break;
0:             case QUORUM:
0:                 blockFor = (writeEndpoints.size() / 2) + 1;
0:                 break;
0:             case ALL:
0:                 blockFor = writeEndpoints.size();
0:                 break;
0:             default:
0:                 throw new UnsupportedOperationException("invalid consistency level: " + consistencyLevel.toString());
0:         }
0:         assert 1 <= blockFor && blockFor <= 2 * DatabaseDescriptor.getReplicationFactor(table)
0:             : "invalid response count " + blockFor;
0:         return blockFor;
0:     public void assureSufficientLiveNodes() throws UnavailableException
0:         if (consistencyLevel == ConsistencyLevel.ANY)
0:             // ensure there are blockFor distinct living nodes (hints are ok).
0:             if (hintedEndpoints.keySet().size() < responses.get())
0:                 throw new UnavailableException();
1: 
0:         // count destinations that are part of the desired target set
0:         int liveNodes = 0;
0:         for (InetAddress destination : hintedEndpoints.keySet())
0:             if (writeEndpoints.contains(destination))
0:                 liveNodes++;
0:         if (liveNodes < responses.get())
0:             throw new UnavailableException();
commit:d55ed91
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.io.IOException;
0:     private final int responseCount;
0:     private final long startTime;
0:     public WriteResponseHandler(int responseCount, String table)
0:         // at most one node per range can bootstrap at a time, and these will be added to the write until
0:         // bootstrap finishes (at which point we no longer need to write to the old ones).
0:         assert 1 <= responseCount && responseCount <= 2 * DatabaseDescriptor.getReplicationFactor(table)
0:             : "invalid response count " + responseCount;
0: 
0:         this.responseCount = responseCount;
/////////////////////////////////////////////////////////////////////////
0: }
commit:ef1895b
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
0: import org.apache.cassandra.locator.AbstractRackAwareSnitch;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
0: import com.google.common.collect.Multimap;
0: 
0:     protected static final AbstractRackAwareSnitch endpointsnitch = (AbstractRackAwareSnitch) DatabaseDescriptor.getEndpointSnitch();
0:     protected final int responseCount;
0:     protected final long startTime;
0: 	protected final ConsistencyLevel consistencyLevel;
0: 	protected final String table;
0:     public WriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table) 
0:     throws UnavailableException
0:     	this.table = table;
0:     	this.consistencyLevel = consistencyLevel;
0:         this.responseCount = determineBlockFor(writeEndpoints);
0:         assureSufficientLiveNodes(writeEndpoints, hintedEndpoints);
/////////////////////////////////////////////////////////////////////////
0:     
0:     public int determineBlockFor(Collection<InetAddress> writeEndpoints)
0:     {
0:         int blockFor = 0;
0:         switch (consistencyLevel)
0:         {
0:             case ONE:
0:                 blockFor = 1;
0:                 break;
0:             case ANY:
0:                 blockFor = 1;
0:                 break;
0:             case QUORUM:
0:                 blockFor = (writeEndpoints.size() / 2) + 1;
0:                 break;
0:             case ALL:
0:                 blockFor = writeEndpoints.size();
0:                 break;
0:             default:
0:                 throw new UnsupportedOperationException("invalid consistency level: " + consistencyLevel.toString());
0:         }
0:         // at most one node per range can bootstrap at a time, and these will be added to the write until
0:         // bootstrap finishes (at which point we no longer need to write to the old ones).
0:         assert 1 <= blockFor && blockFor <= 2 * DatabaseDescriptor.getReplicationFactor(table)
0:             : "invalid response count " + responseCount;
0:         return blockFor;
0:     }
0:     
0:     public void assureSufficientLiveNodes(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints)
0:     throws UnavailableException
0:     {
0:         if (consistencyLevel == ConsistencyLevel.ANY)
0:         {
0:             // ensure there are blockFor distinct living nodes (hints are ok).
0:             if (hintedEndpoints.keySet().size() < responseCount)
0:                 throw new UnavailableException();
0:         }
0:         
0:         // count destinations that are part of the desired target set
0:         int liveNodes = 0;
0:         for (InetAddress destination : hintedEndpoints.keySet())
0:         {
0:             if (writeEndpoints.contains(destination))
0:                 liveNodes++;
0:         }
0:         if (liveNodes < responseCount)
0:         {
0:             throw new UnavailableException();
0:         }
0:     }
0: }
commit:9cc162d
/////////////////////////////////////////////////////////////////////////
0:         // at most one node per range can bootstrap at a time, and these will be added to the write until
0:         // bootstrap finishes (at which point we no longer need to write to the old ones).
0:         assert 1 <= responseCount && responseCount <= 2 * DatabaseDescriptor.getReplicationFactor()
commit:a5bd08f
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.service;
0: 
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
0: import java.io.IOException;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.net.IAsyncCallback;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.SimpleCondition;
0: 
0: import org.apache.log4j.Logger;
0: 
0: public class WriteResponseHandler implements IAsyncCallback
0: {
0:     protected static final Logger logger = Logger.getLogger( WriteResponseHandler.class );
0:     protected final SimpleCondition condition = new SimpleCondition();
0:     private final int responseCount;
0:     protected final List<Message> responses;
0:     protected int localResponses;
0:     private final long startTime;
0: 
0:     public WriteResponseHandler(int responseCount)
0:     {
0:         assert 1 <= responseCount && responseCount <= DatabaseDescriptor.getReplicationFactor()
0:             : "invalid response count " + responseCount;
0: 
0:         this.responseCount = responseCount;
0:         responses = new ArrayList<Message>(responseCount);
0:         startTime = System.currentTimeMillis();
0:     }
0: 
0:     public void get() throws TimeoutException
0:     {
0:         try
0:         {
0:             long timeout = System.currentTimeMillis() - startTime + DatabaseDescriptor.getRpcTimeout();
0:             boolean success;
0:             try
0:             {
0:                 success = condition.await(timeout, TimeUnit.MILLISECONDS);
0:             }
0:             catch (InterruptedException ex)
0:             {
0:                 throw new AssertionError(ex);
0:             }
0: 
0:             if (!success)
0:             {
0:                 throw new TimeoutException("Operation timed out - received only " + responses.size() + localResponses + " responses");
0:             }
0:         }
0:         finally
0:         {
0:             for (Message response : responses)
0:             {
0:                 MessagingService.removeRegisteredCallback(response.getMessageId());
0:             }
0:         }
0:     }
0: 
0:     public synchronized void response(Message message)
0:     {
0:         if (condition.isSignaled())
0:             return;
0:         responses.add(message);
0:         maybeSignal();
0:     }
0: 
0:     public synchronized void localResponse()
0:     {
0:         if (condition.isSignaled())
0:             return;
0:         localResponses++;
0:         maybeSignal();
0:     }
0: 
0:     private void maybeSignal()
0:     {
0:         if (responses.size() + localResponses >= responseCount)
0:         {
0:             condition.signal();
0:         }
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:21913c5
/////////////////////////////////////////////////////////////////////////
0:         return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
author:Chris Goffinet
-------------------------------------------------------------------------------
commit:afe2420
/////////////////////////////////////////////////////////////////////////
0:             long timeout = DatabaseDescriptor.getRpcTimeout() - (System.currentTimeMillis() - startTime);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     protected static final Logger logger = LoggerFactory.getLogger( WriteResponseHandler.class );
/////////////////////////////////////////////////////////////////////////
0: }
commit:443d534
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
0: import java.util.Iterator;
0: import java.util.concurrent.LinkedBlockingQueue;
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
0:     protected final Collection<Message> responses;
0:     protected AtomicInteger localResponses = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
0:         responses = new LinkedBlockingQueue<Message>();
/////////////////////////////////////////////////////////////////////////
0:     public void response(Message message)
0:     public void localResponse()
0:         localResponses.addAndGet(1);
0:         if (responses.size() + localResponses.get() >= responseCount)
commit:3577fd8
/////////////////////////////////////////////////////////////////////////
0:     public WriteResponseHandler(int responseCount, String table)
0:         assert 1 <= responseCount && responseCount <= 2 * DatabaseDescriptor.getReplicationFactor(table)
============================================================================