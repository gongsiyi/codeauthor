1:e5b5a91: /*
1:e5b5a91:  * Licensed to the Apache Software Foundation (ASF) under one
1:e5b5a91:  * or more contributor license agreements.  See the NOTICE file
1:e5b5a91:  * distributed with this work for additional information
1:e5b5a91:  * regarding copyright ownership.  The ASF licenses this file
1:e5b5a91:  * to you under the Apache License, Version 2.0 (the
1:e5b5a91:  * "License"); you may not use this file except in compliance
1:e5b5a91:  * with the License.  You may obtain a copy of the License at
1:e5b5a91:  *
1:e5b5a91:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e5b5a91:  *
1:e5b5a91:  * Unless required by applicable law or agreed to in writing, software
1:e5b5a91:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5b5a91:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5b5a91:  * See the License for the specific language governing permissions and
1:e5b5a91:  * limitations under the License.
1:e5b5a91:  */
1:e5b5a91: package org.apache.cassandra.utils.progress;
1:e5b5a91: 
1:e5b5a91: import java.util.List;
1:e5b5a91: import java.util.concurrent.CopyOnWriteArrayList;
1:e5b5a91: 
1:e5b5a91: /**
1:e5b5a91:  * Provides basic, thread safe ProgressEvent notification support
1:e5b5a91:  */
1:e5b5a91: public abstract class ProgressEventNotifierSupport implements ProgressEventNotifier
1:e5b5a91: {
1:e5b5a91:     private List<ProgressListener> listeners = new CopyOnWriteArrayList<>();
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void addProgressListener(ProgressListener listener)
1:e5b5a91:     {
1:e5b5a91:         listeners.add(listener);
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void removeProgressListener(ProgressListener listener)
1:e5b5a91:     {
1:e5b5a91:         listeners.remove(listener);
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     protected void fireProgressEvent(String tag, ProgressEvent event)
1:e5b5a91:     {
1:e5b5a91:         for (ProgressListener listener : listeners)
1:e5b5a91:         {
1:e5b5a91:             listener.progress(tag, event);
1:e5b5a91:         }
1:e5b5a91:     }
1:e5b5a91: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:e5b5a91
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.progress;
1: 
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: /**
1:  * Provides basic, thread safe ProgressEvent notification support
1:  */
1: public abstract class ProgressEventNotifierSupport implements ProgressEventNotifier
1: {
1:     private List<ProgressListener> listeners = new CopyOnWriteArrayList<>();
1: 
1:     @Override
1:     public void addProgressListener(ProgressListener listener)
1:     {
1:         listeners.add(listener);
1:     }
1: 
1:     @Override
1:     public void removeProgressListener(ProgressListener listener)
1:     {
1:         listeners.remove(listener);
1:     }
1: 
1:     protected void fireProgressEvent(String tag, ProgressEvent event)
1:     {
1:         for (ProgressListener listener : listeners)
1:         {
1:             listener.progress(tag, event);
1:         }
1:     }
1: }
============================================================================