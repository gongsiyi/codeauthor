1:107545b: /**
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing,
1:107545b:  * software distributed under the License is distributed on an
1:107545b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:107545b:  * KIND, either express or implied.  See the License for the
1:107545b:  * specific language governing permissions and limitations
1:107545b:  * under the License.
1:107545b:  */
1:107545b: package org.apache.cassandra.serializers;
1:107545b: 
1:107545b: import org.apache.cassandra.db.marshal.SimpleDateType;
1:107545b: import org.junit.Test;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: import java.sql.Timestamp;
1:107545b: import java.text.SimpleDateFormat;
1:107545b: import java.util.*;
1:107545b: 
1:107545b: public class SimpleDateSerializerTest
1:107545b: {
1:107545b:     private static final long millisPerDay = 1000 * 60 * 60 * 24;
1:107545b: 
1:107545b:     private String dates[] = new String[]
1:107545b:     {
1:107545b:             "1970-01-01",
1:107545b:             "1970-01-02",
1:107545b:             "1969-12-31",
1:107545b:             "-0001-01-02",
1:107545b:             "-5877521-01-02",
1:107545b:             "2014-01-01",
1:107545b:             "5881580-01-10",
1:107545b:             "1920-12-01",
1:107545b:             "1582-10-19"
1:107545b:     };
1:107545b: 
1:107545b:     private static GregorianCalendar testCalendar = new GregorianCalendar();
1:107545b:     private static SimpleDateFormat dateFormatUTC = new SimpleDateFormat("yyyy-MM-dd");
1:107545b: 
1:107545b:     {
1:107545b:         testCalendar.setGregorianChange(new Date(Long.MIN_VALUE));
1:107545b:         testCalendar.setTimeZone(TimeZone.getTimeZone("UTC"));
1:107545b:         dateFormatUTC.setCalendar(testCalendar);
1:107545b:         dateFormatUTC.setLenient(false);
1:107545b:     }
1:107545b: 
1:107545b:     @Test
1:107545b:     public void testDateStringToTimestamp()
1:107545b:     {
1:107545b:         List<String> unparsedDates = new ArrayList<>();
1:107545b:         List<String> badParseResults = new ArrayList<>();
1:107545b:         for (String date : dates)
1:107545b:         {
1:107545b:             try
1:107545b:             {
1:107545b:                 Integer days = SimpleDateSerializer.dateStringToDays(date);
1:107545b:                 ByteBuffer value = SimpleDateSerializer.instance.serialize(days);
1:107545b:                 Integer deserialized = SimpleDateSerializer.instance.deserialize(value);
1:107545b: 
1:107545b:                 String toStringValue = SimpleDateSerializer.instance.toString(deserialized);
1:107545b:                 if (!date.equals(toStringValue)) {
1:107545b:                     badParseResults.add(String.format("Failed to parse date correctly.  Expected %s, got %s\n", date, toStringValue));
1:107545b:                 }
1:107545b:             }
1:107545b:             catch (MarshalException e)
1:107545b:             {
1:107545b:                 System.err.println("Got an exception: " + e);
1:107545b:                 unparsedDates.add(date);
1:107545b:             }
1:107545b:         }
1:107545b:         assert unparsedDates.isEmpty() : "Unable to parse: " + unparsedDates;
1:107545b:         assert badParseResults.isEmpty() : "Incorrect parse results: " + badParseResults;
1:107545b:     }
1:107545b: 
1:107545b:     @Test
1:107545b:     public void testDaysStringToInt()
1:107545b:     {
1:107545b:         Integer value = SimpleDateSerializer.dateStringToDays("12345");
1:107545b:         assert value.compareTo(12345) == 0 : String.format("Failed to parse integer based date.  Expected %s, got %s",
1:107545b:                 12345,
1:107545b:                 value);
1:107545b:     }
1:107545b: 
1:107545b:     @Test
1:107545b:     public void testProlepticRange()
1:107545b:     {
1:107545b:         for (int i = 1; i < 31; ++i)
1:107545b:         {
1:107545b:             String date = "1582-10-";
1:107545b:             if (i < 10) date += "0";
1:107545b:             date += i;
1:107545b: 
1:107545b:             Integer days = SimpleDateSerializer.dateStringToDays(date);
1:107545b: 
1:107545b:             ByteBuffer value = SimpleDateType.instance.fromString(days.toString());
1:107545b:             Integer deserialized = SimpleDateSerializer.instance.deserialize(value);
1:107545b: 
1:107545b:             // Serialized values are unsigned int, unwrap bits w/overflow
1:107545b:             deserialized -= Integer.MIN_VALUE;
1:107545b: 
1:107545b:             Timestamp ts = new Timestamp(deserialized * millisPerDay);
1:107545b:             testCalendar.setTime(ts);
1:107545b: 
1:107545b:             Date newDate = testCalendar.getTime();
1:107545b:             assert (dateFormatUTC.format(newDate)).equals(date) :
1:107545b:                     String.format("Expected [%s], got [%s]", date, dateFormatUTC.format(newDate).toString());
1:107545b:         }
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testOutOfBoundsLow()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays(new Date(Integer.MIN_VALUE * millisPerDay - millisPerDay).toString());
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testOutOfBoundsHigh()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays(new Date(Integer.MAX_VALUE * millisPerDay + millisPerDay).toString());
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadInput()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays("12A-01-01");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadMonth()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays("1000-13-01");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadDay()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays("1000-12-32");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadDayToMonth()
1:107545b:     {
1:107545b:         Integer days = SimpleDateSerializer.dateStringToDays("1000-09-31");
1:107545b:     }
1:107545b: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.serializers;
1: 
1: import org.apache.cassandra.db.marshal.SimpleDateType;
0: import org.apache.cassandra.utils.Pair;
1: import org.junit.Test;
1: 
1: import java.nio.ByteBuffer;
1: import java.sql.Timestamp;
1: import java.text.SimpleDateFormat;
1: import java.util.*;
1: 
1: public class SimpleDateSerializerTest
1: {
1:     private static final long millisPerDay = 1000 * 60 * 60 * 24;
1: 
1:     private String dates[] = new String[]
1:     {
1:             "1970-01-01",
1:             "1970-01-02",
1:             "1969-12-31",
1:             "-0001-01-02",
1:             "-5877521-01-02",
1:             "2014-01-01",
1:             "5881580-01-10",
1:             "1920-12-01",
1:             "1582-10-19"
1:     };
1: 
1:     private static GregorianCalendar testCalendar = new GregorianCalendar();
1:     private static SimpleDateFormat dateFormatUTC = new SimpleDateFormat("yyyy-MM-dd");
1: 
1:     {
1:         testCalendar.setGregorianChange(new Date(Long.MIN_VALUE));
1:         testCalendar.setTimeZone(TimeZone.getTimeZone("UTC"));
1:         dateFormatUTC.setCalendar(testCalendar);
1:         dateFormatUTC.setLenient(false);
1:     }
1: 
1:     @Test
1:     public void testDateStringToTimestamp()
1:     {
1:         List<String> unparsedDates = new ArrayList<>();
1:         List<String> badParseResults = new ArrayList<>();
1:         for (String date : dates)
1:         {
1:             try
1:             {
1:                 Integer days = SimpleDateSerializer.dateStringToDays(date);
1:                 ByteBuffer value = SimpleDateSerializer.instance.serialize(days);
1:                 Integer deserialized = SimpleDateSerializer.instance.deserialize(value);
1: 
1:                 String toStringValue = SimpleDateSerializer.instance.toString(deserialized);
1:                 if (!date.equals(toStringValue)) {
1:                     badParseResults.add(String.format("Failed to parse date correctly.  Expected %s, got %s\n", date, toStringValue));
1:                 }
1:             }
1:             catch (MarshalException e)
1:             {
1:                 System.err.println("Got an exception: " + e);
1:                 unparsedDates.add(date);
1:             }
1:         }
1:         assert unparsedDates.isEmpty() : "Unable to parse: " + unparsedDates;
1:         assert badParseResults.isEmpty() : "Incorrect parse results: " + badParseResults;
1:     }
1: 
1:     @Test
1:     public void testDaysStringToInt()
1:     {
1:         Integer value = SimpleDateSerializer.dateStringToDays("12345");
1:         assert value.compareTo(12345) == 0 : String.format("Failed to parse integer based date.  Expected %s, got %s",
1:                 12345,
1:                 value);
1:     }
1: 
1:     @Test
1:     public void testProlepticRange()
1:     {
1:         for (int i = 1; i < 31; ++i)
1:         {
1:             String date = "1582-10-";
1:             if (i < 10) date += "0";
1:             date += i;
1: 
1:             Integer days = SimpleDateSerializer.dateStringToDays(date);
1: 
1:             ByteBuffer value = SimpleDateType.instance.fromString(days.toString());
1:             Integer deserialized = SimpleDateSerializer.instance.deserialize(value);
1: 
1:             // Serialized values are unsigned int, unwrap bits w/overflow
1:             deserialized -= Integer.MIN_VALUE;
1: 
1:             Timestamp ts = new Timestamp(deserialized * millisPerDay);
1:             testCalendar.setTime(ts);
1: 
1:             Date newDate = testCalendar.getTime();
1:             assert (dateFormatUTC.format(newDate)).equals(date) :
1:                     String.format("Expected [%s], got [%s]", date, dateFormatUTC.format(newDate).toString());
1:         }
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testOutOfBoundsLow()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays(new Date(Integer.MIN_VALUE * millisPerDay - millisPerDay).toString());
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testOutOfBoundsHigh()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays(new Date(Integer.MAX_VALUE * millisPerDay + millisPerDay).toString());
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadInput()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays("12A-01-01");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadMonth()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays("1000-13-01");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadDay()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays("1000-12-32");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadDayToMonth()
1:     {
1:         Integer days = SimpleDateSerializer.dateStringToDays("1000-09-31");
1:     }
1: }
============================================================================