1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.ConcurrentNavigableMap;
1:d43b9ce: import java.util.concurrent.ConcurrentSkipListMap;
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: import java.util.concurrent.atomic.AtomicInteger;
1:d43b9ce: import java.util.concurrent.atomic.AtomicLong;
1:d43b9ce: import java.util.concurrent.locks.ReadWriteLock;
1:d43b9ce: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:d43b9ce: 
1:d43b9ce: import com.google.common.annotations.VisibleForTesting;
1:d43b9ce: import com.google.common.base.Preconditions;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * Concurrent rate computation over a sliding time window.
1:d43b9ce:  */
1:d43b9ce: public class SlidingTimeRate
1:d43b9ce: {
1:d43b9ce:     private final ConcurrentSkipListMap<Long, AtomicInteger> counters = new ConcurrentSkipListMap<>();
1:d43b9ce:     private final AtomicLong lastCounterTimestamp = new AtomicLong(0);
1:d43b9ce:     private final ReadWriteLock pruneLock = new ReentrantReadWriteLock();
1:d43b9ce:     private final long sizeInMillis;
1:d43b9ce:     private final long precisionInMillis;
1:d43b9ce:     private final TimeSource timeSource;
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Creates a sliding rate whose time window is of the given size, with the given precision and time unit.
1:d43b9ce:      * <br/>
1:d43b9ce:      * The precision defines how accurate the rate computation is, as it will be computed over window size +/-
1:d43b9ce:      * precision.
1:d43b9ce:      */
1:d43b9ce:     public SlidingTimeRate(TimeSource timeSource, long size, long precision, TimeUnit unit)
1:d43b9ce:     {
1:d43b9ce:         Preconditions.checkArgument(size > precision, "Size should be greater than precision.");
1:d43b9ce:         Preconditions.checkArgument(TimeUnit.MILLISECONDS.convert(precision, unit) >= 1, "Precision must be greater than or equal to 1 millisecond.");
1:d43b9ce:         this.sizeInMillis = TimeUnit.MILLISECONDS.convert(size, unit);
1:d43b9ce:         this.precisionInMillis = TimeUnit.MILLISECONDS.convert(precision, unit);
1:d43b9ce:         this.timeSource = timeSource;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Updates the rate.
1:d43b9ce:      */
1:d43b9ce:     public void update(int delta)
1:d43b9ce:     {
1:d43b9ce:         pruneLock.readLock().lock();
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             while (true)
1:d43b9ce:             {
1:d43b9ce:                 long now = timeSource.currentTimeMillis();
1:d43b9ce:                 long lastTimestamp = lastCounterTimestamp.get();
1:d43b9ce:                 boolean isWithinPrecisionRange = (now - lastTimestamp) < precisionInMillis;
1:d43b9ce:                 AtomicInteger lastCounter = counters.get(lastTimestamp);
1:d43b9ce:                 // If there's a valid counter for the current last timestamp, and we're in the precision range,
1:d43b9ce:                 // update such counter:
1:d43b9ce:                 if (lastCounter != null && isWithinPrecisionRange)
1:d43b9ce:                 {
1:d43b9ce:                     lastCounter.addAndGet(delta);
1:d43b9ce: 
1:d43b9ce:                     break;
1:d43b9ce:                 }
1:d43b9ce:                 // Else if there's no counter or we're past the precision range, try to create a new counter,
1:d43b9ce:                 // but only the thread updating the last timestamp will create a new counter:
1:d43b9ce:                 else if (lastCounterTimestamp.compareAndSet(lastTimestamp, now))
1:d43b9ce:                 {
1:d43b9ce:                     AtomicInteger existing = counters.putIfAbsent(now, new AtomicInteger(delta));
1:d43b9ce:                     if (existing != null)
1:d43b9ce:                     {
1:d43b9ce:                         existing.addAndGet(delta);
1:d43b9ce:                     }
1:d43b9ce: 
1:d43b9ce:                     break;
1:d43b9ce:                 }
1:d43b9ce:             }
1:d43b9ce:         }
1:d43b9ce:         finally
1:d43b9ce:         {
1:d43b9ce:             pruneLock.readLock().unlock();
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Gets the current rate in the given time unit from the beginning of the time window to the
1:d43b9ce:      * provided point in time ago.
1:d43b9ce:      */
1:d43b9ce:     public double get(long toAgo, TimeUnit unit)
1:d43b9ce:     {
1:d43b9ce:         pruneLock.readLock().lock();
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             long toAgoInMillis = TimeUnit.MILLISECONDS.convert(toAgo, unit);
1:d43b9ce:             Preconditions.checkArgument(toAgoInMillis < sizeInMillis, "Cannot get rate in the past!");
1:d43b9ce: 
1:d43b9ce:             long now = timeSource.currentTimeMillis();
1:d43b9ce:             long sum = 0;
1:d43b9ce:             ConcurrentNavigableMap<Long, AtomicInteger> tailCounters = counters
1:d43b9ce:                     .tailMap(now - sizeInMillis, true)
1:d43b9ce:                     .headMap(now - toAgoInMillis, true);
1:d43b9ce:             for (AtomicInteger i : tailCounters.values())
1:d43b9ce:             {
1:d43b9ce:                 sum += i.get();
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             double rateInMillis = sum == 0
1:d43b9ce:                                   ? sum
1:d43b9ce:                                   : sum / (double) Math.max(1000, (now - toAgoInMillis) - tailCounters.firstKey());
1:d43b9ce:             double multiplier = TimeUnit.MILLISECONDS.convert(1, unit);
1:d43b9ce:             return rateInMillis * multiplier;
1:d43b9ce:         }
1:d43b9ce:         finally
1:d43b9ce:         {
1:d43b9ce:             pruneLock.readLock().unlock();
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Gets the current rate in the given time unit.
1:d43b9ce:      */
1:d43b9ce:     public double get(TimeUnit unit)
1:d43b9ce:     {
1:d43b9ce:         return get(0, unit);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Prunes the time window of old unused updates.
1:d43b9ce:      */
1:d43b9ce:     public void prune()
1:d43b9ce:     {
1:d43b9ce:         pruneLock.writeLock().lock();
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             long now = timeSource.currentTimeMillis();
1:d43b9ce:             counters.headMap(now - sizeInMillis, false).clear();
1:d43b9ce:         }
1:d43b9ce:         finally
1:d43b9ce:         {
1:d43b9ce:             pruneLock.writeLock().unlock();
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @VisibleForTesting
1:d43b9ce:     public int size()
1:d43b9ce:     {
1:d43b9ce:         return counters.values().stream().reduce(new AtomicInteger(), (v1, v2) -> {
1:d43b9ce:             v1.addAndGet(v2.get());
1:d43b9ce:             return v1;
1:d43b9ce:         }).get();
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.ConcurrentNavigableMap;
1: import java.util.concurrent.ConcurrentSkipListMap;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicLong;
1: import java.util.concurrent.locks.ReadWriteLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.base.Preconditions;
1: 
1: /**
1:  * Concurrent rate computation over a sliding time window.
1:  */
1: public class SlidingTimeRate
1: {
1:     private final ConcurrentSkipListMap<Long, AtomicInteger> counters = new ConcurrentSkipListMap<>();
1:     private final AtomicLong lastCounterTimestamp = new AtomicLong(0);
1:     private final ReadWriteLock pruneLock = new ReentrantReadWriteLock();
1:     private final long sizeInMillis;
1:     private final long precisionInMillis;
1:     private final TimeSource timeSource;
1: 
1:     /**
1:      * Creates a sliding rate whose time window is of the given size, with the given precision and time unit.
1:      * <br/>
1:      * The precision defines how accurate the rate computation is, as it will be computed over window size +/-
1:      * precision.
1:      */
1:     public SlidingTimeRate(TimeSource timeSource, long size, long precision, TimeUnit unit)
1:     {
1:         Preconditions.checkArgument(size > precision, "Size should be greater than precision.");
1:         Preconditions.checkArgument(TimeUnit.MILLISECONDS.convert(precision, unit) >= 1, "Precision must be greater than or equal to 1 millisecond.");
1:         this.sizeInMillis = TimeUnit.MILLISECONDS.convert(size, unit);
1:         this.precisionInMillis = TimeUnit.MILLISECONDS.convert(precision, unit);
1:         this.timeSource = timeSource;
1:     }
1: 
1:     /**
1:      * Updates the rate.
1:      */
1:     public void update(int delta)
1:     {
1:         pruneLock.readLock().lock();
1:         try
1:         {
1:             while (true)
1:             {
1:                 long now = timeSource.currentTimeMillis();
1:                 long lastTimestamp = lastCounterTimestamp.get();
1:                 boolean isWithinPrecisionRange = (now - lastTimestamp) < precisionInMillis;
1:                 AtomicInteger lastCounter = counters.get(lastTimestamp);
1:                 // If there's a valid counter for the current last timestamp, and we're in the precision range,
1:                 // update such counter:
1:                 if (lastCounter != null && isWithinPrecisionRange)
1:                 {
1:                     lastCounter.addAndGet(delta);
1: 
1:                     break;
1:                 }
1:                 // Else if there's no counter or we're past the precision range, try to create a new counter,
1:                 // but only the thread updating the last timestamp will create a new counter:
1:                 else if (lastCounterTimestamp.compareAndSet(lastTimestamp, now))
1:                 {
1:                     AtomicInteger existing = counters.putIfAbsent(now, new AtomicInteger(delta));
1:                     if (existing != null)
1:                     {
1:                         existing.addAndGet(delta);
1:                     }
1: 
1:                     break;
1:                 }
1:             }
1:         }
1:         finally
1:         {
1:             pruneLock.readLock().unlock();
1:         }
1:     }
1: 
1:     /**
1:      * Gets the current rate in the given time unit from the beginning of the time window to the
1:      * provided point in time ago.
1:      */
1:     public double get(long toAgo, TimeUnit unit)
1:     {
1:         pruneLock.readLock().lock();
1:         try
1:         {
1:             long toAgoInMillis = TimeUnit.MILLISECONDS.convert(toAgo, unit);
1:             Preconditions.checkArgument(toAgoInMillis < sizeInMillis, "Cannot get rate in the past!");
1: 
1:             long now = timeSource.currentTimeMillis();
1:             long sum = 0;
1:             ConcurrentNavigableMap<Long, AtomicInteger> tailCounters = counters
1:                     .tailMap(now - sizeInMillis, true)
1:                     .headMap(now - toAgoInMillis, true);
1:             for (AtomicInteger i : tailCounters.values())
1:             {
1:                 sum += i.get();
1:             }
1: 
1:             double rateInMillis = sum == 0
1:                                   ? sum
1:                                   : sum / (double) Math.max(1000, (now - toAgoInMillis) - tailCounters.firstKey());
1:             double multiplier = TimeUnit.MILLISECONDS.convert(1, unit);
1:             return rateInMillis * multiplier;
1:         }
1:         finally
1:         {
1:             pruneLock.readLock().unlock();
1:         }
1:     }
1: 
1:     /**
1:      * Gets the current rate in the given time unit.
1:      */
1:     public double get(TimeUnit unit)
1:     {
1:         return get(0, unit);
1:     }
1: 
1:     /**
1:      * Prunes the time window of old unused updates.
1:      */
1:     public void prune()
1:     {
1:         pruneLock.writeLock().lock();
1:         try
1:         {
1:             long now = timeSource.currentTimeMillis();
1:             counters.headMap(now - sizeInMillis, false).clear();
1:         }
1:         finally
1:         {
1:             pruneLock.writeLock().unlock();
1:         }
1:     }
1: 
1:     @VisibleForTesting
1:     public int size()
1:     {
1:         return counters.values().stream().reduce(new AtomicInteger(), (v1, v2) -> {
1:             v1.addAndGet(v2.get());
1:             return v1;
1:         }).get();
1:     }
1: }
============================================================================