1:88edbed: /*
1:88edbed:  * Licensed to the Apache Software Foundation (ASF) under one
1:88edbed:  * or more contributor license agreements.  See the NOTICE file
1:88edbed:  * distributed with this work for additional information
1:88edbed:  * regarding copyright ownership.  The ASF licenses this file
1:88edbed:  * to you under the Apache License, Version 2.0 (the
1:88edbed:  * "License"); you may not use this file except in compliance
1:88edbed:  * with the License.  You may obtain a copy of the License at
1:88edbed:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:88edbed:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:88edbed:  */
1:0c0c6e5: package org.apache.cassandra.utils;
1:986cee6: 
1:61384c5: import org.apache.cassandra.utils.concurrent.SharedCloseable;
1:61384c5: 
1:61384c5: public interface IFilter extends SharedCloseable
1:986cee6: {
1:23fd75f:     interface FilterKey
1:18d8f26:     {
1:18d8f26:         /** Places the murmur3 hash of the key in the given long array of size at least two. */
1:18d8f26:         void filterHash(long[] dest);
1:18d8f26:     }
1:f5c9b4a: 
1:18d8f26:     void add(FilterKey key);
1:18d8f26: 
1:18d8f26:     boolean isPresent(FilterKey key);
1:986cee6: 
1:f5c9b4a:     void clear();
1:5ebadc1: 
1:f5c9b4a:     long serializedSize();
1:7a14a77: 
1:5ebadc1:     void close();
1:986cee6: 
1:61384c5:     IFilter sharedCopy();
1:61384c5: 
1:7a14a77:     /**
1:7a14a77:      * Returns the amount of memory in bytes used off heap.
1:7a14a77:      * @return the amount of memory in bytes used off heap
1:7a14a77:      */
1:7a14a77:     long offHeapSize();
1:986cee6: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1:     interface FilterKey
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
0:     public interface FilterKey
1:     {
1:         /** Places the murmur3 hash of the key in the given long array of size at least two. */
1:         void filterHash(long[] dest);
1:     }
1:     void add(FilterKey key);
1: 
1:     boolean isPresent(FilterKey key);
commit:61384c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.concurrent.SharedCloseable;
1: 
1: public interface IFilter extends SharedCloseable
/////////////////////////////////////////////////////////////////////////
1:     IFilter sharedCopy();
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:9aaea24
author:blerer
-------------------------------------------------------------------------------
commit:7a14a77
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the amount of memory in bytes used off heap.
1:      * @return the amount of memory in bytes used off heap
1:      */
1:     long offHeapSize();
author:belliottsmith
-------------------------------------------------------------------------------
commit:5ebadc1
/////////////////////////////////////////////////////////////////////////
1: 
1:     void close();
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f5c9b4a
/////////////////////////////////////////////////////////////////////////
0:     void add(ByteBuffer key);
0:     boolean isPresent(ByteBuffer key);
1:     void clear();
1: 
1:     long serializedSize();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a15500e
/////////////////////////////////////////////////////////////////////////
0: public interface IFilter extends Closeable
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
0: import java.io.Closeable;
0: public abstract class Filter implements Closeable
commit:6cb811b
/////////////////////////////////////////////////////////////////////////
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public int[] getHashBuckets(ByteBuffer key)
0:     public abstract void add(ByteBuffer key);
0:     public abstract boolean isPresent(ByteBuffer key);
/////////////////////////////////////////////////////////////////////////
0:     static int[] getHashBuckets(ByteBuffer b, int hashCount, int max)
0:         int hash1 = hasher.hash(b.array(), b.position()+b.arrayOffset(), b.remaining(), 0);
0:         int hash2 = hasher.hash(b.array(), b.position()+b.arrayOffset(), b.remaining(), hash1);
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0:     public int[] getHashBuckets(byte[] key)
1:     {
0:         return Filter.getHashBuckets(key, hashCount, buckets());
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         return getHashBuckets(b, hashCount, max);
0:     }
1: 
0:     static int[] getHashBuckets(byte[] b, int hashCount, int max)
0:     {
commit:4e3a440
/////////////////////////////////////////////////////////////////////////
0:     // Murmur is faster than an SHA-based approach and provides as-good collision
0:     // resistance.  The combinatorial generation approach described in
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
1: */
commit:71739ef
commit:0c0c6e5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
0: 
0: import java.io.UnsupportedEncodingException;
0: import java.lang.reflect.Method;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: 
0: public abstract class Filter
0: {
0:     int hashCount;
0: 
0:     private static MurmurHash hasher = new MurmurHash();
0: 
0:     int getHashCount()
0:     {
0:         return hashCount;
0:     }
0: 
0:     public int[] getHashBuckets(String key)
0:     {
0:         return Filter.getHashBuckets(key, hashCount, buckets());
0:     }
0: 
0:     abstract int buckets();
0: 
0:     public abstract void add(String key);
0: 
0:     public abstract boolean isPresent(String key);
0: 
0:     // for testing
0:     abstract int emptyBuckets();
0: 
0:     ICompactSerializer<Filter> getSerializer()
0:     {
0:         Method method = null;
0:         try
0:         {
0:             method = getClass().getMethod("serializer");
0:             return (ICompactSerializer<Filter>) method.invoke(null);
0:         }
0:         catch (Exception e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: 
0:     // murmur is faster than a sha-based approach and provides as-good collision
0:     // resistance.  the combinatorial generation approach described in
0:     // http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf
0:     // does prove to work in actual tests, and is obviously faster
0:     // than performing further iterations of murmur.
0:     static int[] getHashBuckets(String key, int hashCount, int max)
0:     {
0:         byte[] b;
0:         try
0:         {
0:             b = key.getBytes("UTF-16");
0:         }
0:         catch (UnsupportedEncodingException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:         int[] result = new int[hashCount];
0:         int hash1 = hasher.hash(b, b.length, 0);
0:         int hash2 = hasher.hash(b, b.length, hash1);
0:         for (int i = 0; i < hashCount; i++)
0:         {
0:             result[i] = Math.abs((hash1 + i * hash2) % max);
0:         }
0:         return result;
0:     }
0: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
0: 
0:     public abstract void clear();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:790cca1
/////////////////////////////////////////////////////////////////////////
0:     public abstract void add(byte[] key);
0:     public abstract boolean isPresent(byte[] key);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================