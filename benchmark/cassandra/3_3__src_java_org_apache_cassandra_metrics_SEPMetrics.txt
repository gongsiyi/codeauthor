1:5420b7a: /*
1:5420b7a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5420b7a:  * or more contributor license agreements.  See the NOTICE file
1:5420b7a:  * distributed with this work for additional information
1:5420b7a:  * regarding copyright ownership.  The ASF licenses this file
1:5420b7a:  * to you under the Apache License, Version 2.0 (the
1:5420b7a:  * "License"); you may not use this file except in compliance
1:5420b7a:  * with the License.  You may obtain a copy of the License at
1:5420b7a:  *
1:5420b7a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5420b7a:  *
1:5420b7a:  * Unless required by applicable law or agreed to in writing, software
1:5420b7a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5420b7a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5420b7a:  * See the License for the specific language governing permissions and
1:5420b7a:  * limitations under the License.
1:5420b7a:  */
1:5420b7a: package org.apache.cassandra.metrics;
2:5420b7a: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: import com.codahale.metrics.Gauge;
1:a6c6d0f: 
1:5420b7a: import org.apache.cassandra.concurrent.SEPExecutor;
1:5420b7a: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:5420b7a: public class SEPMetrics
5:5420b7a: {
1:5420b7a:     /** Number of active tasks. */
1:5420b7a:     public final Gauge<Integer> activeTasks;
1:5420b7a:     /** Number of tasks that had blocked before being accepted (or rejected). */
1:8896a70:     public final Counter totalBlocked;
1:5420b7a:     /**
1:5420b7a:      * Number of tasks currently blocked, waiting to be accepted by
1:5420b7a:      * the executor (because all threads are busy and the backing queue is full).
1:5420b7a:      */
1:8896a70:     public final Counter currentBlocked;
1:5420b7a:     /** Number of completed tasks. */
1:5420b7a:     public final Gauge<Long> completedTasks;
1:5420b7a:     /** Number of tasks waiting to be executed. */
1:5420b7a:     public final Gauge<Long> pendingTasks;
1:a6c6d0f:     /** Maximum number of threads before it will start queuing tasks */
1:a6c6d0f:     public final Gauge<Integer> maxPoolSize;
1:5420b7a: 
1:5420b7a:     private MetricNameFactory factory;
1:5420b7a: 
1:5420b7a:     /**
1:5420b7a:      * Create metrics for the given LowSignalExecutor.
1:5420b7a:      *
1:5420b7a:      * @param executor Thread pool
1:5420b7a:      * @param path Type of thread pool
1:5420b7a:      * @param poolName Name of thread pool to identify metrics
1:5420b7a:      */
1:5420b7a:     public SEPMetrics(final SEPExecutor executor, String path, String poolName)
1:5420b7a:     {
1:5420b7a:         this.factory = new ThreadPoolMetricNameFactory("ThreadPools", path, poolName);
1:8896a70:         activeTasks = Metrics.register(factory.createMetricName("ActiveTasks"), new Gauge<Integer>()
1:5420b7a:         {
1:8896a70:             public Integer getValue()
1:5420b7a:             {
1:5420b7a:                 return executor.getActiveCount();
3:5420b7a:             }
3:5420b7a:         });
1:8896a70:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Long>()
1:5420b7a:         {
1:8896a70:             public Long getValue()
1:5420b7a:             {
1:5420b7a:                 return executor.getPendingTasks();
1:5420b7a:             }
1:5420b7a:         });
1:8896a70:         totalBlocked = Metrics.counter(factory.createMetricName("TotalBlockedTasks"));
1:8896a70:         currentBlocked = Metrics.counter(factory.createMetricName("CurrentlyBlockedTasks"));
1:8896a70: 
1:8896a70:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:5420b7a:         {
1:8896a70:             public Long getValue()
1:5420b7a:             {
1:5420b7a:                 return executor.getCompletedTasks();
1:5420b7a:             }
1:5420b7a:         });
1:8896a70:         maxPoolSize =  Metrics.register(factory.createMetricName("MaxPoolSize"), new Gauge<Integer>()
1:a6c6d0f:         {
1:8896a70:             public Integer getValue()
1:a6c6d0f:             {
1:a6c6d0f:                 return executor.maxWorkers;
1:a6c6d0f:             }
1:a6c6d0f:         });
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public void release()
1:5420b7a:     {
1:8896a70:         Metrics.remove(factory.createMetricName("ActiveTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("PendingTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("CompletedTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("TotalBlockedTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("CurrentlyBlockedTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("MaxPoolSize"));
1:5420b7a:     }
1:5420b7a: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Gauge;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
1:     public final Counter totalBlocked;
1:     public final Counter currentBlocked;
/////////////////////////////////////////////////////////////////////////
1:         activeTasks = Metrics.register(factory.createMetricName("ActiveTasks"), new Gauge<Integer>()
1:             public Integer getValue()
1:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Long>()
1:             public Long getValue()
1:         totalBlocked = Metrics.counter(factory.createMetricName("TotalBlockedTasks"));
1:         currentBlocked = Metrics.counter(factory.createMetricName("CurrentlyBlockedTasks"));
1: 
1:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:             public Long getValue()
1:         maxPoolSize =  Metrics.register(factory.createMetricName("MaxPoolSize"), new Gauge<Integer>()
1:             public Integer getValue()
/////////////////////////////////////////////////////////////////////////
1:         Metrics.remove(factory.createMetricName("ActiveTasks"));
1:         Metrics.remove(factory.createMetricName("PendingTasks"));
1:         Metrics.remove(factory.createMetricName("CompletedTasks"));
1:         Metrics.remove(factory.createMetricName("TotalBlockedTasks"));
1:         Metrics.remove(factory.createMetricName("CurrentlyBlockedTasks"));
1:         Metrics.remove(factory.createMetricName("MaxPoolSize"));
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:a6c6d0f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** Maximum number of threads before it will start queuing tasks */
1:     public final Gauge<Integer> maxPoolSize;
/////////////////////////////////////////////////////////////////////////
0:         maxPoolSize =  Metrics.newGauge(factory.createMetricName("MaxPoolSize"), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
1:                 return executor.maxWorkers;
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("MaxPoolSize"));
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Gauge;
1: import org.apache.cassandra.concurrent.SEPExecutor;
1: 
1: public class SEPMetrics
1: {
1:     /** Number of active tasks. */
1:     public final Gauge<Integer> activeTasks;
1:     /** Number of tasks that had blocked before being accepted (or rejected). */
0:     public final Gauge<Integer> totalBlocked;
1:     /**
1:      * Number of tasks currently blocked, waiting to be accepted by
1:      * the executor (because all threads are busy and the backing queue is full).
1:      */
0:     public final Gauge<Long> currentBlocked;
1:     /** Number of completed tasks. */
1:     public final Gauge<Long> completedTasks;
1: 
1:     /** Number of tasks waiting to be executed. */
1:     public final Gauge<Long> pendingTasks;
1: 
1:     private MetricNameFactory factory;
1: 
1:     /**
1:      * Create metrics for the given LowSignalExecutor.
1:      *
1:      * @param executor Thread pool
1:      * @param path Type of thread pool
1:      * @param poolName Name of thread pool to identify metrics
1:      */
1:     public SEPMetrics(final SEPExecutor executor, String path, String poolName)
1:     {
1:         this.factory = new ThreadPoolMetricNameFactory("ThreadPools", path, poolName);
0:         activeTasks = Metrics.newGauge(factory.createMetricName("ActiveTasks"), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
1:                 return executor.getActiveCount();
1:             }
1:         });
0:         pendingTasks = Metrics.newGauge(factory.createMetricName("PendingTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
1:                 return executor.getPendingTasks();
1:             }
1:         });
0:         totalBlocked = Metrics.newGauge(factory.createMetricName("TotalBlockedTasks"), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
0:                 return executor.getTotalBlockedTasks();
1:             }
1:         });
0:         currentBlocked = Metrics.newGauge(factory.createMetricName("CurrentlyBlockedTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return (long) executor.getCurrentlyBlockedTasks();
1:             }
1:         });
0:         completedTasks = Metrics.newGauge(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
1:                 return executor.getCompletedTasks();
1:             }
1:         });
1:     }
1: 
1:     public void release()
1:     {
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("ActiveTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("PendingTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("CompletedTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("TotalBlockedTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("CurrentlyBlockedTasks"));
1:     }
1: }
============================================================================