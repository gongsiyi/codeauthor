1:82840b6: package org.apache.cassandra.hadoop;
1:e44ca3e: /*
1:07cdfd0:  *
1:e44ca3e:  * Licensed to the Apache Software Foundation (ASF) under one
1:e44ca3e:  * or more contributor license agreements.  See the NOTICE file
1:e44ca3e:  * distributed with this work for additional information
1:e44ca3e:  * regarding copyright ownership.  The ASF licenses this file
1:e44ca3e:  * to you under the Apache License, Version 2.0 (the
1:e44ca3e:  * "License"); you may not use this file except in compliance
1:e44ca3e:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:e44ca3e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:e44ca3e:  * Unless required by applicable law or agreed to in writing,
1:e44ca3e:  * software distributed under the License is distributed on an
1:e44ca3e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e44ca3e:  * KIND, either express or implied.  See the License for the
1:e44ca3e:  * specific language governing permissions and limitations
1:e44ca3e:  * under the License.
1:07cdfd0:  *
1:e44ca3e:  */
1:e44ca3e: 
2:82840b6: 
1:e7a385a: import java.nio.ByteBuffer;
1:82840b6: import java.util.ArrayList;
1:82840b6: import java.util.List;
1:82840b6: 
1:82840b6: import org.apache.cassandra.thrift.SlicePredicate;
1:154eec9: import org.apache.cassandra.utils.ByteBufferUtil;
1:82840b6: import org.apache.hadoop.conf.Configuration;
1:32ed134: import org.junit.Test;
1:82840b6: 
1:82840b6: public class ColumnFamilyInputFormatTest
1:82840b6: {
1:82840b6:     @Test
1:82840b6:     public void testSlicePredicate()
1:82840b6:     {
1:82840b6:         long columnValue = 1271253600000l;
1:154eec9:         ByteBuffer columnBytes = ByteBufferUtil.bytes(columnValue);
1:82840b6: 
1:e7a385a:         List<ByteBuffer> columnNames = new ArrayList<ByteBuffer>();
1:82840b6:         columnNames.add(columnBytes);
1:82840b6:         SlicePredicate originalPredicate = new SlicePredicate().setColumn_names(columnNames);
1:82840b6: 
1:82840b6:         Configuration conf = new Configuration();
1:32ed134:         ConfigHelper.setInputSlicePredicate(conf, originalPredicate);
1:82840b6: 
1:32ed134:         SlicePredicate rtPredicate = ConfigHelper.getInputSlicePredicate(conf);
1:82840b6:         assert rtPredicate.column_names.size() == 1;
1:e7a385a:         assert originalPredicate.column_names.get(0).equals(rtPredicate.column_names.get(0));
1:82840b6:     }
1:82840b6: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:154eec9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer columnBytes = ByteBufferUtil.bytes(columnValue);
commit:187761a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer columnBytes = FBUtilities.toByteBuffer(columnValue);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer columnBytes = FBUtilities.toByteArray(columnValue);
1:         List<ByteBuffer> columnNames = new ArrayList<ByteBuffer>();
/////////////////////////////////////////////////////////////////////////
1:         assert originalPredicate.column_names.get(0).equals(rtPredicate.column_names.get(0));
commit:32ed134
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:         ConfigHelper.setInputSlicePredicate(conf, originalPredicate);
1:         SlicePredicate rtPredicate = ConfigHelper.getInputSlicePredicate(conf);
commit:e44ca3e
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
commit:82840b6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.hadoop;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
1: 
0: import org.junit.Test;
1: 
1: import org.apache.cassandra.thrift.SlicePredicate;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.hadoop.conf.Configuration;
1: 
1: public class ColumnFamilyInputFormatTest
1: {
1:     @Test
1:     public void testSlicePredicate()
1:     {
1:         long columnValue = 1271253600000l;
0:         byte[] columnBytes = FBUtilities.toByteArray(columnValue);
1: 
0:         List<byte[]> columnNames = new ArrayList<byte[]>();
1:         columnNames.add(columnBytes);
1:         SlicePredicate originalPredicate = new SlicePredicate().setColumn_names(columnNames);
1: 
1:         Configuration conf = new Configuration();
0:         ConfigHelper.setSlicePredicate(conf, originalPredicate);
1: 
0:         SlicePredicate rtPredicate = ConfigHelper.getSlicePredicate(conf);
1:         assert rtPredicate.column_names.size() == 1;
0:         assert Arrays.equals(originalPredicate.column_names.get(0), rtPredicate.column_names.get(0));
1:     }
1: }
============================================================================