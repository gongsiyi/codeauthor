1:07cf56f: /*
1:8ab7772:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ab7772:  * or more contributor license agreements.  See the NOTICE file
1:8ab7772:  * distributed with this work for additional information
1:8ab7772:  * regarding copyright ownership.  The ASF licenses this file
1:8ab7772:  * to you under the Apache License, Version 2.0 (the
1:8ab7772:  * "License"); you may not use this file except in compliance
1:8ab7772:  * with the License.  You may obtain a copy of the License at
1:8ab7772:  *
1:8ab7772:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8ab7772:  *
1:8ab7772:  * Unless required by applicable law or agreed to in writing, software
1:8ab7772:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8ab7772:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8ab7772:  * See the License for the specific language governing permissions and
1:8ab7772:  * limitations under the License.
2:8ab7772:  */
1:8ab7772: package org.apache.cassandra.db;
1:d6bdce6: 
1:e7a385a: import java.nio.ByteBuffer;
1:b4cae03: import java.util.Comparator;
1:9c05c6b: 
1:d6c2bb0: import org.apache.cassandra.dht.IPartitioner;
1:8ab7772: import org.apache.cassandra.dht.Token;
1:07893d7: import org.apache.cassandra.dht.Token.KeyBound;
1:6350c16: import org.apache.cassandra.utils.ByteBufferUtil;
1:18d8f26: import org.apache.cassandra.utils.MurmurHash;
1:18d8f26: import org.apache.cassandra.utils.IFilter.FilterKey;
1:9c05c6b: 
3:8ab7772: /**
1:8ab7772:  * Represents a decorated key, handy for certain operations
1:8ab7772:  * where just working with strings gets slow.
1:23aa01b:  *
1:23aa01b:  * We do a lot of sorting of DecoratedKeys, so for speed, we assume that tokens correspond one-to-one with keys.
1:23aa01b:  * This is not quite correct in the case of RandomPartitioner (which uses MD5 to hash keys to tokens);
1:23aa01b:  * if this matters, you can subclass RP to use a stronger hash, or use a non-lossy tokenization scheme (as in the
1:23aa01b:  * OrderPreservingPartitioner classes).
1:8ab7772:  */
1:a991b64: public abstract class DecoratedKey implements PartitionPosition, FilterKey
1:9c05c6b: {
1:b4cae03:     public static final Comparator<DecoratedKey> comparator = new Comparator<DecoratedKey>()
1:b4cae03:     {
1:b4cae03:         public int compare(DecoratedKey o1, DecoratedKey o2)
1:b4cae03:         {
1:b4cae03:             return o1.compareTo(o2);
1:b4cae03:         }
1:b4cae03:     };
1:554223b: 
1:8541cca:     private final Token token;
1:9c05c6b: 
1:8541cca:     public DecoratedKey(Token token)
1:554223b:     {
1:8541cca:         assert token != null;
1:8ab7772:         this.token = token;
1:d6bdce6:     }
1:9c05c6b: 
1:8ab7772:     @Override
1:8ab7772:     public int hashCode()
1:c33ccd9:     {
1:8541cca:         return getKey().hashCode(); // hash of key is enough
1:d6bdce6:     }
1:9c05c6b: 
1:8ab7772:     @Override
1:8ab7772:     public boolean equals(Object obj)
1:d6bdce6:     {
1:8ab7772:         if (this == obj)
1:9c05c6b:             return true;
1:8541cca:         if (obj == null || !(obj instanceof DecoratedKey))
1:07893d7:             return false;
1:9c05c6b: 
1:554223b:         DecoratedKey other = (DecoratedKey)obj;
1:8541cca:         return ByteBufferUtil.compareUnsigned(getKey(), other.getKey()) == 0; // we compare faster than BB.equals for array backed BB
1:9c05c6b:     }
1:554223b: 
1:a991b64:     public int compareTo(PartitionPosition pos)
1:9c05c6b:     {
1:554223b:         if (this == pos)
1:554223b:             return 0;
1:554223b: 
1:554223b:         // delegate to Token.KeyBound if needed
1:554223b:         if (!(pos instanceof DecoratedKey))
1:554223b:             return -pos.compareTo(this);
1:554223b: 
1:554223b:         DecoratedKey otherKey = (DecoratedKey) pos;
1:8541cca:         int cmp = getToken().compareTo(otherKey.getToken());
1:8541cca:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(getKey(), otherKey.getKey()) : cmp;
1:9c05c6b:     }
1:9c05c6b: 
1:a991b64:     public static int compareTo(IPartitioner partitioner, ByteBuffer key, PartitionPosition position)
1:d6bdce6:     {
1:c33ccd9:         // delegate to Token.KeyBound if needed
1:c33ccd9:         if (!(position instanceof DecoratedKey))
1:c33ccd9:             return -position.compareTo(partitioner.decorateKey(key));
1:c33ccd9: 
1:c33ccd9:         DecoratedKey otherKey = (DecoratedKey) position;
1:c33ccd9:         int cmp = partitioner.getToken(key).compareTo(otherKey.getToken());
1:8541cca:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(key, otherKey.getKey()) : cmp;
1:c33ccd9:     }
1:c33ccd9: 
1:07893d7:     public IPartitioner getPartitioner()
1:d6bdce6:     {
1:07893d7:         return getToken().getPartitioner();
1:07893d7:     }
1:07893d7: 
1:07893d7:     public KeyBound minValue()
1:07893d7:     {
1:07893d7:         return getPartitioner().getMinimumToken().minKeyBound();
1:d6bdce6:     }
1:9c05c6b: 
1:8541cca:     public boolean isMinimum()
1:8541cca:     {
1:554223b:         // A DecoratedKey can never be the minimum position on the ring
1:554223b:         return false;
1:554223b:     }
1:554223b: 
1:a991b64:     public PartitionPosition.Kind kind()
1:554223b:     {
1:a991b64:         return PartitionPosition.Kind.ROW_KEY;
1:8541cca:     }
1:8541cca: 
1:67ae1ee:     @Override
1:8ab7772:     public String toString()
1:23aa01b:     {
1:8541cca:         String keystring = getKey() == null ? "null" : ByteBufferUtil.bytesToHex(getKey());
1:8541cca:         return "DecoratedKey(" + getToken() + ", " + keystring + ")";
1:23aa01b:     }
1:9c05c6b: 
1:7e4ef1c:     public Token getToken()
1:23aa01b:     {
1:554223b:         return token;
1:554223b:     }
1:8541cca: 
1:8541cca:     public abstract ByteBuffer getKey();
1:18d8f26: 
1:18d8f26:     public void filterHash(long[] dest)
1:18d8f26:     {
1:18d8f26:         ByteBuffer key = getKey();
1:18d8f26:         MurmurHash.hash3_x64_128(key, key.position(), key.remaining(), 0, dest);
1:18d8f26:     }
1:23aa01b: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: public abstract class DecoratedKey implements PartitionPosition, FilterKey
/////////////////////////////////////////////////////////////////////////
1:     public int compareTo(PartitionPosition pos)
/////////////////////////////////////////////////////////////////////////
1:     public static int compareTo(IPartitioner partitioner, ByteBuffer key, PartitionPosition position)
/////////////////////////////////////////////////////////////////////////
1:     public PartitionPosition.Kind kind()
1:         return PartitionPosition.Kind.ROW_KEY;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.RingPosition;
/////////////////////////////////////////////////////////////////////////
0: public class DecoratedKey<T extends Token> extends RowPosition
0:     private static final IPartitioner partitioner = StorageService.getPartitioner();
/////////////////////////////////////////////////////////////////////////
0:         assert token != null && key != null && key.remaining() > 0;
/////////////////////////////////////////////////////////////////////////
0:         return key.hashCode(); // hash of key is enough
/////////////////////////////////////////////////////////////////////////
0:         if (obj == null || this.getClass() != obj.getClass())
1:         DecoratedKey other = (DecoratedKey)obj;
1: 
0:         return ByteBufferUtil.compareUnsigned(key, other.key) == 0; // we compare faster than BB.equals for array backed BB
0:     public int compareTo(RowPosition pos)
1:         if (this == pos)
1:             return 0;
1: 
1:         // delegate to Token.KeyBound if needed
1:         if (!(pos instanceof DecoratedKey))
1:             return -pos.compareTo(this);
1: 
1:         DecoratedKey otherKey = (DecoratedKey) pos;
0:         int cmp = token.compareTo(otherKey.getToken());
0:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(key, otherKey.key) : cmp;
0:     public boolean isMinimum(IPartitioner partitioner)
1:         // A DecoratedKey can never be the minimum position on the ring
1:         return false;
1:     }
1: 
0:     public RowPosition.Kind kind()
1:     {
0:         return RowPosition.Kind.ROW_KEY;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public T getToken()
1:     {
1:         return token;
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.MurmurHash;
1: import org.apache.cassandra.utils.IFilter.FilterKey;
/////////////////////////////////////////////////////////////////////////
0: public abstract class DecoratedKey implements RowPosition, FilterKey
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void filterHash(long[] dest)
1:     {
1:         ByteBuffer key = getKey();
1:         MurmurHash.hash3_x64_128(key, key.position(), key.remaining(), 0, dest);
1:     }
commit:e77ea12
/////////////////////////////////////////////////////////////////////////
0: import net.nicoulaj.compilecommand.annotations.Inline;
0: import org.apache.cassandra.utils.FastByteOperations;
0: import org.apache.cassandra.utils.memory.MemoryUtil;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.dht.Token.KeyBound;
/////////////////////////////////////////////////////////////////////////
1:     public IPartitioner getPartitioner()
1:         return getToken().getPartitioner();
1:     }
1: 
1:     public KeyBound minValue()
1:     {
1:         return getPartitioner().getMinimumToken().minKeyBound();
0:         // A DecoratedKey can never be the minimum position on the ring
1:         return false;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3ca9576
/////////////////////////////////////////////////////////////////////////
commit:5c5fe91
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0: public abstract class DecoratedKey implements RowPosition
/////////////////////////////////////////////////////////////////////////
1:     private final Token token;
1:     public DecoratedKey(Token token)
1:         assert token != null;
1:         return getKey().hashCode(); // hash of key is enough
/////////////////////////////////////////////////////////////////////////
1:         if (obj == null || !(obj instanceof DecoratedKey))
1:         return ByteBufferUtil.compareUnsigned(getKey(), other.getKey()) == 0; // we compare faster than BB.equals for array backed BB
/////////////////////////////////////////////////////////////////////////
1:         int cmp = getToken().compareTo(otherKey.getToken());
1:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(getKey(), otherKey.getKey()) : cmp;
/////////////////////////////////////////////////////////////////////////
1:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(key, otherKey.getKey()) : cmp;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isMinimum()
1:     {
0:         return isMinimum(StorageService.getPartitioner());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         String keystring = getKey() == null ? "null" : ByteBufferUtil.bytesToHex(getKey());
1:         return "DecoratedKey(" + getToken() + ", " + keystring + ")";
1: 
1:     public abstract ByteBuffer getKey();
commit:295aedb
/////////////////////////////////////////////////////////////////////////
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:c33ccd9
/////////////////////////////////////////////////////////////////////////
0:     public static int compareTo(IPartitioner partitioner, ByteBuffer key, RowPosition position)
1:     {
1:         // delegate to Token.KeyBound if needed
1:         if (!(position instanceof DecoratedKey))
1:             return -position.compareTo(partitioner.decorateKey(key));
1: 
1:         DecoratedKey otherKey = (DecoratedKey) position;
1:         int cmp = partitioner.getToken(key).compareTo(otherKey.getToken());
0:         return cmp == 0 ? ByteBufferUtil.compareUnsigned(key, otherKey.key) : cmp;
1:     }
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:908e0e2
commit:050e61a
/////////////////////////////////////////////////////////////////////////
0:         assert token != null && key != null;
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
0: public class DecoratedKey extends RowPosition
/////////////////////////////////////////////////////////////////////////
0:     public final Token token;
0:     public DecoratedKey(Token token, ByteBuffer key)
/////////////////////////////////////////////////////////////////////////
1:     public Token getToken()
commit:6350c16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:         String keystring = key == null ? "null" : ByteBufferUtil.bytesToHex(key);
commit:93a4192
/////////////////////////////////////////////////////////////////////////
0:         return token.hashCode();
/////////////////////////////////////////////////////////////////////////
0:         return token.equals(other.token);
0:         return token.compareTo(other.token);
commit:9c05c6b
/////////////////////////////////////////////////////////////////////////
0:         return token.hashCode() + (key == null ? 0 : key.hashCode());
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (token.equals(other.token))
1:         {
0:             if (key == null && other.key == null)
1:                 return true;
1: 
0:             if (key == null || other.key == null)
0:                 return false;
1: 
0:             return key.equals(other.key);
1:         }
1: 
0:         return false;
0:         int cmp = token.compareTo(other.token);
1: 
0:         if (cmp == 0)
1:         {
0:             if (key == null && other.key == null)
0:                 return 0;
1: 
0:             if (key == null)
0:                 return 1;
1: 
0:             if (other.key == null)
0:                 return -1;
1: 
0:             return key.compareTo(other.key);
1:         }
1: 
0:         return cmp;
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public final ByteBuffer key;
0:     public DecoratedKey(T token, ByteBuffer key)
commit:d6c2bb0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.dht.IPartitioner;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     private static IPartitioner partitioner = StorageService.getPartitioner();
/////////////////////////////////////////////////////////////////////////
0:         return token.hashCode();
/////////////////////////////////////////////////////////////////////////
0:         return token.equals(partitioner.getMinimumToken());
commit:6fc12be
/////////////////////////////////////////////////////////////////////////
commit:d6bdce6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputBuffer;
/////////////////////////////////////////////////////////////////////////
0:     /** not efficient.  call rarely. */
0:     public int serializedSize()
1:     {
0:         DataOutputBuffer dos = new DataOutputBuffer();
0:         try
1:         {
0:             serializer.serialize(this, dos);
1:         }
0:         catch (IOException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
0:         return dos.getLength();
1:     }
1: 
commit:b4cae03
/////////////////////////////////////////////////////////////////////////
1: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
1:     public static final Comparator<DecoratedKey> comparator = new Comparator<DecoratedKey>()
1:     {
1:         public int compare(DecoratedKey o1, DecoratedKey o2)
1:         {
1:             return o1.compareTo(o2);
1:         }
1:     };
0: 
commit:23aa01b
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataOutput;
0: import java.io.IOException;
0: import java.io.DataInput;
0: 
0: import org.apache.cassandra.io.ICompactSerializer2;
0: import org.apache.cassandra.utils.FBUtilities;
1:  *
1:  * We do a lot of sorting of DecoratedKeys, so for speed, we assume that tokens correspond one-to-one with keys.
1:  * This is not quite correct in the case of RandomPartitioner (which uses MD5 to hash keys to tokens);
1:  * if this matters, you can subclass RP to use a stronger hash, or use a non-lossy tokenization scheme (as in the
1:  * OrderPreservingPartitioner classes).
0:     private static DecoratedKeySerializer serializer = new DecoratedKeySerializer();
0: 
0:     public static DecoratedKeySerializer serializer()
1:     {
0:         return serializer;
1:     }
0: 
0:         assert token != null;
/////////////////////////////////////////////////////////////////////////
0:         return token.equals(other.token);
0:         return token.compareTo(other.token);
1:     }
0: 
0:     public boolean isEmpty()
1:     {
0:         return key != null && key.isEmpty();
/////////////////////////////////////////////////////////////////////////
0: 
0: class DecoratedKeySerializer implements ICompactSerializer2<DecoratedKey>
0: {
0:     public void serialize(DecoratedKey dk, DataOutput dos) throws IOException
0:     {
0:         Token.serializer().serialize(dk.token, dos);
0:         FBUtilities.writeNullableString(dk.key, dos);
0:     }
0: 
0:     public DecoratedKey deserialize(DataInput dis) throws IOException
0:     {
0:         return new DecoratedKey(Token.serializer().deserialize(dis), FBUtilities.readNullableString(dis));
0:     }
0: }
commit:103a13c
/////////////////////////////////////////////////////////////////////////
0: public class DecoratedKey<T extends Token> implements Comparable<DecoratedKey>
/////////////////////////////////////////////////////////////////////////
0:         assert key != null;
/////////////////////////////////////////////////////////////////////////
0: 
0:         // either both should be of a class where all tokens are null, or neither
0:         assert (token == null) == (other.token == null);
0:             return key.equals(other.key);
0:         return token.equals(other.token) && key.equals(other.key);
0:     }
0: 
0:     public int compareTo(DecoratedKey other)
0:     {
0:         assert (token == null) == (other.token == null);
0:         if (token == null)
0:             return key.compareTo(other.key);
0:         int i = token.compareTo(other.token);
0:         return i == 0 ? key.compareTo(other.key) : i;
commit:67ae1ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         return "DecoratedKey(" + token + ", " + key + ")";
commit:d50facf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.IPartitioner;
0: import org.apache.cassandra.dht.RandomPartitioner;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:         // TODO when we can break the disk format, we should use
0:         // token == null ? key : token.toString() + DELIMITER + key
0:         // until then we special case like this, which keeps COPP using just the key string
0:         return StorageService.getPartitioner() instanceof RandomPartitioner
0:                ? token.toString() + DELIMITER + key
0:                : key;
commit:a215c38
/////////////////////////////////////////////////////////////////////////
0:     public final T token;
0:     public final String key;
/////////////////////////////////////////////////////////////////////////
commit:8ab7772
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.db;
0: 
1: import org.apache.cassandra.dht.Token;
0: 
1: /**
1:  * Represents a decorated key, handy for certain operations
1:  * where just working with strings gets slow.
1:  */
0: public class DecoratedKey<T extends Token>
0: {
0:     public static final String DELIMITER = ":";
0: 
0:     private T token;
0:     private String key;
0: 
0:     public DecoratedKey(T token, String key)
0:     {
0:         super();
1:         this.token = token;
0:         this.key = key;
0:     }
0: 
0:     public T getToken()
0:     {
0:         return token;
0:     }
0: 
0:     public String getKey()
0:     {
0:         return key;
0:     }
0: 
1:     @Override
1:     public int hashCode()
0:     {
0:         final int prime = 31;
0:         int result = 1;
0:         result = prime * result + ((key == null) ? 0 : key.hashCode());
0:         result = prime * result + ((token == null) ? 0 : token.hashCode());
0:         return result;
0:     }
0: 
1:     @Override
1:     public boolean equals(Object obj)
0:     {
1:         if (this == obj)
0:             return true;
0:         if (obj == null)
0:             return false;
0:         if (getClass() != obj.getClass())
0:             return false;
0:         DecoratedKey other = (DecoratedKey) obj;
0:         if (key == null)
0:         {
0:             if (other.key != null)
0:                 return false;
0:         } else if (!key.equals(other.key))
0:             return false;
0:         if (token == null)
0:         {
0:             if (other.token != null)
0:                 return false;
0:         } else if (!token.equals(other.token))
0:             return false;
0:         return true;
0:     }
0: 
1:     /**
0:      * Return the on disk format of the decorated key.
1:      */
1:     public String toString()
0:     {
0:         return token.toString() + DELIMITER + key;
0:     }
0: 
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:a07e71c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c1d34fb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public final byte[] key;
0:     @Deprecated
0:         this.key = key == null ? null : key.getBytes(FBUtilities.UTF8);
0:     }
0: 
0:     public DecoratedKey(T token, byte[] key)
0:     {
0:         super();
0:         assert token != null;
0:         this.token = token;
/////////////////////////////////////////////////////////////////////////
0:         String keystring = key == null ? "null" : FBUtilities.bytesToHex(key);
0:         return "DecoratedKey(" + token + ", " + keystring + ")";
============================================================================