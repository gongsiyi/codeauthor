1:6b2ea26: /*
1:6b2ea26:  * Licensed to the Apache Software Foundation (ASF) under one
1:6b2ea26:  * or more contributor license agreements.  See the NOTICE file
1:6b2ea26:  * distributed with this work for additional information
1:6b2ea26:  * regarding copyright ownership.  The ASF licenses this file
1:6b2ea26:  * to you under the Apache License, Version 2.0 (the
1:6b2ea26:  * "License"); you may not use this file except in compliance
1:6b2ea26:  * with the License.  You may obtain a copy of the License at
1:6b2ea26:  *
1:6b2ea26:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6b2ea26:  *
1:6b2ea26:  * Unless required by applicable law or agreed to in writing, software
1:6b2ea26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b2ea26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b2ea26:  * See the License for the specific language governing permissions and
1:6b2ea26:  * limitations under the License.
1:6b2ea26:  */
1:6b2ea26: package org.apache.cassandra.utils;
3:6b2ea26: 
1:a991b64: import java.util.Iterator;
1:a991b64: import java.util.LinkedHashMap;
1:a991b64: import java.util.Map;
1:a991b64: 
1:a991b64: import org.junit.Test;
1:1e92ce4: 
1:c4c9eae: import org.apache.cassandra.io.util.DataInputBuffer;
1:75508ec: import org.apache.cassandra.io.util.DataOutputBuffer;
1:75508ec: 
1:83a43f1: import static org.junit.Assert.assertEquals;
1:6b2ea26: 
1:6b2ea26: public class StreamingHistogramTest
1:6b2ea26: {
1:6b2ea26:     @Test
1:6b2ea26:     public void testFunction() throws Exception
1:6b2ea26:     {
1:6b2ea26:         StreamingHistogram hist = new StreamingHistogram(5);
1:6b2ea26:         long[] samples = new long[]{23, 19, 10, 16, 36, 2, 9, 32, 30, 45};
1:6b2ea26: 
1:6b2ea26:         // add 7 points to histogram of 5 bins
1:6b2ea26:         for (int i = 0; i < 7; i++)
1:6b2ea26:         {
1:6b2ea26:             hist.update(samples[i]);
1:6b2ea26:         }
1:6b2ea26: 
1:6b2ea26:         // should end up (2,1),(9.5,2),(17.5,2),(23,1),(36,1)
1:6b2ea26:         Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5);
1:6b2ea26:         expected1.put(2.0, 1L);
1:6b2ea26:         expected1.put(9.5, 2L);
1:6b2ea26:         expected1.put(17.5, 2L);
1:6b2ea26:         expected1.put(23.0, 1L);
1:6b2ea26:         expected1.put(36.0, 1L);
1:6b2ea26: 
1:6b2ea26:         Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator();
1:1e92ce4:         for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
1:6b2ea26:         {
1:6b2ea26:             Map.Entry<Double, Long> entry = expectedItr.next();
1:1e92ce4:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:1e92ce4:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
1:6b2ea26:         }
1:6b2ea26: 
1:6b2ea26:         // merge test
1:6b2ea26:         StreamingHistogram hist2 = new StreamingHistogram(3);
1:6b2ea26:         for (int i = 7; i < samples.length; i++)
1:6b2ea26:         {
1:6b2ea26:             hist2.update(samples[i]);
1:6b2ea26:         }
1:6b2ea26:         hist.merge(hist2);
1:6b2ea26:         // should end up (2,1),(9.5,2),(19.33,3),(32.67,3),(45,1)
1:6b2ea26:         Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5);
1:6b2ea26:         expected2.put(2.0, 1L);
1:6b2ea26:         expected2.put(9.5, 2L);
1:6b2ea26:         expected2.put(19.33, 3L);
1:6b2ea26:         expected2.put(32.67, 3L);
1:6b2ea26:         expected2.put(45.0, 1L);
1:6b2ea26:         expectedItr = expected2.entrySet().iterator();
1:1e92ce4:         for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
1:6b2ea26:         {
1:6b2ea26:             Map.Entry<Double, Long> entry = expectedItr.next();
1:1e92ce4:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:1e92ce4:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
1:6b2ea26:         }
1:6b2ea26: 
1:6b2ea26:         // sum test
1:6b2ea26:         assertEquals(3.28, hist.sum(15), 0.01);
1:6b2ea26:         // sum test (b > max(hist))
1:6b2ea26:         assertEquals(10.0, hist.sum(50), 0.01);
1:6b2ea26:     }
1:6b2ea26: 
1:6b2ea26:     @Test
1:6b2ea26:     public void testSerDe() throws Exception
1:6b2ea26:     {
1:6b2ea26:         StreamingHistogram hist = new StreamingHistogram(5);
1:6b2ea26:         long[] samples = new long[]{23, 19, 10, 16, 36, 2, 9};
1:6b2ea26: 
1:6b2ea26:         // add 7 points to histogram of 5 bins
1:6b2ea26:         for (int i = 0; i < samples.length; i++)
1:6b2ea26:         {
1:6b2ea26:             hist.update(samples[i]);
1:6b2ea26:         }
1:6b2ea26: 
1:75508ec:         DataOutputBuffer out = new DataOutputBuffer();
1:75508ec:         StreamingHistogram.serializer.serialize(hist, out);
1:6b2ea26:         byte[] bytes = out.toByteArray();
1:6b2ea26: 
1:c4c9eae:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes));
1:6b2ea26: 
1:6b2ea26:         // deserialized histogram should have following values
1:6b2ea26:         Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5);
1:6b2ea26:         expected1.put(2.0, 1L);
1:6b2ea26:         expected1.put(9.5, 2L);
1:6b2ea26:         expected1.put(17.5, 2L);
1:6b2ea26:         expected1.put(23.0, 1L);
1:6b2ea26:         expected1.put(36.0, 1L);
1:6b2ea26: 
1:6b2ea26:         Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator();
1:1e92ce4:         for (Map.Entry<Number, long[]> actual : deserialized.getAsMap().entrySet())
1:6b2ea26:         {
1:6b2ea26:             Map.Entry<Double, Long> entry = expectedItr.next();
1:1e92ce4:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:1e92ce4:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
1:6b2ea26:         }
1:6b2ea26:     }
1:1e92ce4: 
1:1e92ce4: 
1:1e92ce4:     @Test
1:1e92ce4:     public void testNumericTypes() throws Exception
1:1e92ce4:     {
1:1e92ce4:         StreamingHistogram hist = new StreamingHistogram(5);
1:1e92ce4: 
1:1e92ce4:         hist.update(2);
1:1e92ce4:         hist.update(2.0);
1:1e92ce4:         hist.update(2L);
1:1e92ce4: 
1:1e92ce4:         Map<Number, long[]> asMap = hist.getAsMap();
1:1e92ce4: 
1:1e92ce4:         assertEquals(1, asMap.size());
1:1e92ce4:         assertEquals(3L, asMap.get(2)[0]);
1:1e92ce4: 
1:1e92ce4:         //Make sure it's working with Serde
1:1e92ce4:         DataOutputBuffer out = new DataOutputBuffer();
1:1e92ce4:         StreamingHistogram.serializer.serialize(hist, out);
1:1e92ce4:         byte[] bytes = out.toByteArray();
1:1e92ce4: 
1:1e92ce4:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes));
1:1e92ce4: 
1:1e92ce4:         deserialized.update(2L);
1:1e92ce4: 
1:1e92ce4:         asMap = deserialized.getAsMap();
1:1e92ce4:         assertEquals(1, asMap.size());
1:1e92ce4:         assertEquals(4L, asMap.get(2)[0]);
1:1e92ce4:     }
1:6b2ea26: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
1:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<Number, long[]> actual : hist.getAsMap().entrySet())
1:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<Number, long[]> actual : deserialized.getAsMap().entrySet())
1:             assertEquals(entry.getKey(), actual.getKey().doubleValue(), 0.01);
1:             assertEquals(entry.getValue().longValue(), actual.getValue()[0]);
1: 
1: 
1:     @Test
1:     public void testNumericTypes() throws Exception
1:     {
1:         StreamingHistogram hist = new StreamingHistogram(5);
1: 
1:         hist.update(2);
1:         hist.update(2.0);
1:         hist.update(2L);
1: 
1:         Map<Number, long[]> asMap = hist.getAsMap();
1: 
1:         assertEquals(1, asMap.size());
1:         assertEquals(3L, asMap.get(2)[0]);
1: 
1:         //Make sure it's working with Serde
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         StreamingHistogram.serializer.serialize(hist, out);
1:         byte[] bytes = out.toByteArray();
1: 
1:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes));
1: 
1:         deserialized.update(2L);
1: 
1:         asMap = deserialized.getAsMap();
1:         assertEquals(1, asMap.size());
1:         assertEquals(4L, asMap.get(2)[0]);
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes));
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.NIODataInputStream;
/////////////////////////////////////////////////////////////////////////
0:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new NIODataInputStream(bytes));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: 
1: import org.junit.Test;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         StreamingHistogram.serializer.serialize(hist, out);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6b2ea26
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
0: import com.google.common.io.ByteArrayDataOutput;
0: import org.junit.Test;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.util.*;
1: 
0: import static junit.framework.Assert.assertEquals;
1: 
1: public class StreamingHistogramTest
1: {
1:     @Test
1:     public void testFunction() throws Exception
1:     {
1:         StreamingHistogram hist = new StreamingHistogram(5);
1:         long[] samples = new long[]{23, 19, 10, 16, 36, 2, 9, 32, 30, 45};
1: 
1:         // add 7 points to histogram of 5 bins
1:         for (int i = 0; i < 7; i++)
1:         {
1:             hist.update(samples[i]);
1:         }
1: 
1:         // should end up (2,1),(9.5,2),(17.5,2),(23,1),(36,1)
1:         Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5);
1:         expected1.put(2.0, 1L);
1:         expected1.put(9.5, 2L);
1:         expected1.put(17.5, 2L);
1:         expected1.put(23.0, 1L);
1:         expected1.put(36.0, 1L);
1: 
1:         Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator();
0:         for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet())
1:         {
1:             Map.Entry<Double, Long> entry = expectedItr.next();
0:             assertEquals(entry.getKey(), actual.getKey(), 0.01);
0:             assertEquals(entry.getValue(), actual.getValue());
1:         }
1: 
1:         // merge test
1:         StreamingHistogram hist2 = new StreamingHistogram(3);
1:         for (int i = 7; i < samples.length; i++)
1:         {
1:             hist2.update(samples[i]);
1:         }
1:         hist.merge(hist2);
1:         // should end up (2,1),(9.5,2),(19.33,3),(32.67,3),(45,1)
1:         Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5);
1:         expected2.put(2.0, 1L);
1:         expected2.put(9.5, 2L);
1:         expected2.put(19.33, 3L);
1:         expected2.put(32.67, 3L);
1:         expected2.put(45.0, 1L);
1:         expectedItr = expected2.entrySet().iterator();
0:         for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet())
1:         {
1:             Map.Entry<Double, Long> entry = expectedItr.next();
0:             assertEquals(entry.getKey(), actual.getKey(), 0.01);
0:             assertEquals(entry.getValue(), actual.getValue());
1:         }
1: 
1:         // sum test
1:         assertEquals(3.28, hist.sum(15), 0.01);
1:         // sum test (b > max(hist))
1:         assertEquals(10.0, hist.sum(50), 0.01);
1:     }
1: 
1:     @Test
1:     public void testSerDe() throws Exception
1:     {
1:         StreamingHistogram hist = new StreamingHistogram(5);
1:         long[] samples = new long[]{23, 19, 10, 16, 36, 2, 9};
1: 
1:         // add 7 points to histogram of 5 bins
1:         for (int i = 0; i < samples.length; i++)
1:         {
1:             hist.update(samples[i]);
1:         }
1: 
0:         ByteArrayOutputStream out = new ByteArrayOutputStream();
0:         StreamingHistogram.serializer.serialize(hist, new DataOutputStream(out));
1:         byte[] bytes = out.toByteArray();
1: 
0:         StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputStream(new ByteArrayInputStream(bytes)));
1: 
1:         // deserialized histogram should have following values
1:         Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5);
1:         expected1.put(2.0, 1L);
1:         expected1.put(9.5, 2L);
1:         expected1.put(17.5, 2L);
1:         expected1.put(23.0, 1L);
1:         expected1.put(36.0, 1L);
1: 
1:         Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator();
0:         for (Map.Entry<Double, Long> actual : deserialized.getAsMap().entrySet())
1:         {
1:             Map.Entry<Double, Long> entry = expectedItr.next();
0:             assertEquals(entry.getKey(), actual.getKey(), 0.01);
0:             assertEquals(entry.getValue(), actual.getValue());
1:         }
1:     }
1: }
============================================================================