1:46a809e: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
5:46a809e:  *
1:46a809e:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:46a809e:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:46a809e: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:46a809e: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:46a809e: import java.util.List;
1:46a809e: import java.util.ArrayList;
1:46a809e: import java.util.Map;
1:46a809e: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:46a809e: import java.util.Set;
1:46a809e: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:46a809e: import java.util.Collections;
1:46a809e: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:46a809e: import java.util.Arrays;
1:46a809e: import org.slf4j.Logger;
1:46a809e: import org.slf4j.LoggerFactory;
1:46a809e: 
1:c9a13c3: /**
1:4e8691a:  * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
1:c9a13c3:  */
1:bffd9ea: public class TimedOutException extends TException implements org.apache.thrift.TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable, Comparable<TimedOutException> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimedOutException");
1:46a809e: 
1:c9a13c3:   private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by", org.apache.thrift.protocol.TType.I32, (short)1);
1:b38ca28:   private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by_batchlog", org.apache.thrift.protocol.TType.BOOL, (short)2);
1:bc3597d:   private static final org.apache.thrift.protocol.TField PAXOS_IN_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("paxos_in_progress", org.apache.thrift.protocol.TType.BOOL, (short)3);
1:46a809e: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:46a809e:   static {
1:b153d45:     schemes.put(StandardScheme.class, new TimedOutExceptionStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new TimedOutExceptionTupleSchemeFactory());
1:46a809e:   }
1:c9a13c3: 
1:b38ca28:   /**
1:b38ca28:    * if a write operation was acknowledged by some replicas but not by enough to
1:c9a13c3:    * satisfy the required ConsistencyLevel, the number of successful
1:b38ca28:    * replies will be given here. In case of atomic_batch_mutate method this field
1:b38ca28:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:b38ca28:    */
1:b153d45:   public int acknowledged_by; // optional
1:b38ca28:   /**
1:bc3597d:    * in case of atomic_batch_mutate method this field tells if the batch
1:bc3597d:    * was written to the batchlog.
1:b38ca28:    */
1:b153d45:   public boolean acknowledged_by_batchlog; // optional
1:bc3597d:   /**
1:bc3597d:    * for the CAS method, this field tells if we timed out during the paxos
1:bc3597d:    * protocol, as opposed to during the commit of our update
1:bc3597d:    */
1:bc3597d:   public boolean paxos_in_progress; // optional
1:46a809e: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:c9a13c3:     /**
1:b38ca28:      * if a write operation was acknowledged by some replicas but not by enough to
1:c9a13c3:      * satisfy the required ConsistencyLevel, the number of successful
1:b38ca28:      * replies will be given here. In case of atomic_batch_mutate method this field
1:b38ca28:      * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:c9a13c3:      */
1:b38ca28:     ACKNOWLEDGED_BY((short)1, "acknowledged_by"),
1:b38ca28:     /**
1:bc3597d:      * in case of atomic_batch_mutate method this field tells if the batch
1:bc3597d:      * was written to the batchlog.
1:b38ca28:      */
1:bc3597d:     ACKNOWLEDGED_BY_BATCHLOG((short)2, "acknowledged_by_batchlog"),
1:bc3597d:     /**
1:bc3597d:      * for the CAS method, this field tells if we timed out during the paxos
1:bc3597d:      * protocol, as opposed to during the commit of our update
1:bc3597d:      */
1:bc3597d:     PAXOS_IN_PROGRESS((short)3, "paxos_in_progress");
1:46a809e: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:b153d45: 
1:b153d45:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:46a809e:       }
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:46a809e:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:c9a13c3:         case 1: // ACKNOWLEDGED_BY
1:c9a13c3:           return ACKNOWLEDGED_BY;
1:b38ca28:         case 2: // ACKNOWLEDGED_BY_BATCHLOG
1:b38ca28:           return ACKNOWLEDGED_BY_BATCHLOG;
1:bc3597d:         case 3: // PAXOS_IN_PROGRESS
1:bc3597d:           return PAXOS_IN_PROGRESS;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:46a809e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
2:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:c8afd76: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:b153d45:     }
1:4ec9511: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
3:c8afd76:   }
1:c9a13c3: 
1:c9a13c3:   // isset id assignments
1:c9a13c3:   private static final int __ACKNOWLEDGED_BY_ISSET_ID = 0;
1:b38ca28:   private static final int __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID = 1;
1:bc3597d:   private static final int __PAXOS_IN_PROGRESS_ISSET_ID = 2;
1:b153d45:   private byte __isset_bitfield = 0;
1:bc3597d:   private _Fields optionals[] = {_Fields.ACKNOWLEDGED_BY,_Fields.ACKNOWLEDGED_BY_BATCHLOG,_Fields.PAXOS_IN_PROGRESS};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:04d5ec3:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:c9a13c3:     tmpMap.put(_Fields.ACKNOWLEDGED_BY, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:c9a13c3:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:b38ca28:     tmpMap.put(_Fields.ACKNOWLEDGED_BY_BATCHLOG, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by_batchlog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:b38ca28:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:bc3597d:     tmpMap.put(_Fields.PAXOS_IN_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("paxos_in_progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:bc3597d:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimedOutException.class, metaDataMap);
1:c8afd76:   }
1:4ec9511: 
1:46a809e:   public TimedOutException() {
1:46a809e:   }
1:46a809e: 
1:46a809e:   /**
1:46a809e:    * Performs a deep copy on <i>other</i>.
1:46a809e:    */
1:46a809e:   public TimedOutException(TimedOutException other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:c9a13c3:     this.acknowledged_by = other.acknowledged_by;
1:b38ca28:     this.acknowledged_by_batchlog = other.acknowledged_by_batchlog;
1:bc3597d:     this.paxos_in_progress = other.paxos_in_progress;
1:46a809e:   }
1:46a809e: 
1:46a809e:   public TimedOutException deepCopy() {
2:46a809e:     return new TimedOutException(this);
1:46a809e:   }
1:46a809e: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:c9a13c3:     setAcknowledged_byIsSet(false);
1:c9a13c3:     this.acknowledged_by = 0;
1:b38ca28:     setAcknowledged_by_batchlogIsSet(false);
1:b38ca28:     this.acknowledged_by_batchlog = false;
1:bc3597d:     setPaxos_in_progressIsSet(false);
1:bc3597d:     this.paxos_in_progress = false;
1:c9a13c3:   }
1:c9a13c3: 
1:c9a13c3:   /**
1:b38ca28:    * if a write operation was acknowledged by some replicas but not by enough to
1:c9a13c3:    * satisfy the required ConsistencyLevel, the number of successful
1:b38ca28:    * replies will be given here. In case of atomic_batch_mutate method this field
1:b38ca28:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:c9a13c3:    */
1:c9a13c3:   public int getAcknowledged_by() {
1:c9a13c3:     return this.acknowledged_by;
1:c9a13c3:   }
1:c9a13c3: 
1:c9a13c3:   /**
1:b38ca28:    * if a write operation was acknowledged by some replicas but not by enough to
1:c9a13c3:    * satisfy the required ConsistencyLevel, the number of successful
1:b38ca28:    * replies will be given here. In case of atomic_batch_mutate method this field
1:b38ca28:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:c9a13c3:    */
1:c9a13c3:   public TimedOutException setAcknowledged_by(int acknowledged_by) {
1:c9a13c3:     this.acknowledged_by = acknowledged_by;
1:c9a13c3:     setAcknowledged_byIsSet(true);
1:c9a13c3:     return this;
1:c9a13c3:   }
1:c9a13c3: 
1:c9a13c3:   public void unsetAcknowledged_by() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID);
1:c9a13c3:   }
1:c9a13c3: 
1:c9a13c3:   /** Returns true if field acknowledged_by is set (has been assigned a value) and false otherwise */
1:c9a13c3:   public boolean isSetAcknowledged_by() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID);
1:c9a13c3:   }
1:c9a13c3: 
1:c9a13c3:   public void setAcknowledged_byIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID, value);
1:46a809e:   }
1:46a809e: 
1:4e8691a:   /**
1:bc3597d:    * in case of atomic_batch_mutate method this field tells if the batch
1:bc3597d:    * was written to the batchlog.
1:04d5ec3:    */
1:b38ca28:   public boolean isAcknowledged_by_batchlog() {
1:b38ca28:     return this.acknowledged_by_batchlog;
1:b38ca28:   }
1:b38ca28: 
1:b38ca28:   /**
1:bc3597d:    * in case of atomic_batch_mutate method this field tells if the batch
1:bc3597d:    * was written to the batchlog.
1:b38ca28:    */
1:b38ca28:   public TimedOutException setAcknowledged_by_batchlog(boolean acknowledged_by_batchlog) {
1:b38ca28:     this.acknowledged_by_batchlog = acknowledged_by_batchlog;
1:b38ca28:     setAcknowledged_by_batchlogIsSet(true);
1:b38ca28:     return this;
1:b38ca28:   }
1:b38ca28: 
1:b38ca28:   public void unsetAcknowledged_by_batchlog() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:b38ca28:   }
1:b38ca28: 
1:b38ca28:   /** Returns true if field acknowledged_by_batchlog is set (has been assigned a value) and false otherwise */
1:b38ca28:   public boolean isSetAcknowledged_by_batchlog() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:b38ca28:   }
1:b38ca28: 
1:b38ca28:   public void setAcknowledged_by_batchlogIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID, value);
1:b38ca28:   }
1:b38ca28: 
1:bc3597d:   /**
1:bc3597d:    * for the CAS method, this field tells if we timed out during the paxos
1:bc3597d:    * protocol, as opposed to during the commit of our update
1:bc3597d:    */
1:bc3597d:   public boolean isPaxos_in_progress() {
1:bc3597d:     return this.paxos_in_progress;
1:bc3597d:   }
1:bc3597d: 
1:bc3597d:   /**
1:bc3597d:    * for the CAS method, this field tells if we timed out during the paxos
1:bc3597d:    * protocol, as opposed to during the commit of our update
1:bc3597d:    */
1:bc3597d:   public TimedOutException setPaxos_in_progress(boolean paxos_in_progress) {
1:bc3597d:     this.paxos_in_progress = paxos_in_progress;
1:bc3597d:     setPaxos_in_progressIsSet(true);
1:bc3597d:     return this;
1:bc3597d:   }
1:bc3597d: 
1:bc3597d:   public void unsetPaxos_in_progress() {
1:bc3597d:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID);
1:bc3597d:   }
1:bc3597d: 
1:bc3597d:   /** Returns true if field paxos_in_progress is set (has been assigned a value) and false otherwise */
1:bc3597d:   public boolean isSetPaxos_in_progress() {
1:bc3597d:     return EncodingUtils.testBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID);
1:bc3597d:   }
1:bc3597d: 
1:bc3597d:   public void setPaxos_in_progressIsSet(boolean value) {
1:bc3597d:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID, value);
1:bc3597d:   }
1:bc3597d: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
1:c9a13c3:     case ACKNOWLEDGED_BY:
1:c9a13c3:       if (value == null) {
1:c9a13c3:         unsetAcknowledged_by();
1:c9a13c3:       } else {
1:c9a13c3:         setAcknowledged_by((Integer)value);
1:c9a13c3:       }
1:c9a13c3:       break;
1:c9a13c3: 
1:b38ca28:     case ACKNOWLEDGED_BY_BATCHLOG:
1:b38ca28:       if (value == null) {
1:b38ca28:         unsetAcknowledged_by_batchlog();
1:b38ca28:       } else {
1:b38ca28:         setAcknowledged_by_batchlog((Boolean)value);
1:b38ca28:       }
1:b38ca28:       break;
1:b38ca28: 
1:bc3597d:     case PAXOS_IN_PROGRESS:
1:bc3597d:       if (value == null) {
1:bc3597d:         unsetPaxos_in_progress();
1:bc3597d:       } else {
1:bc3597d:         setPaxos_in_progress((Boolean)value);
1:bc3597d:       }
1:bc3597d:       break;
1:bc3597d: 
1:b38ca28:     }
1:c9a13c3:   }
1:46a809e: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:c9a13c3:     case ACKNOWLEDGED_BY:
1:c9a13c3:       return Integer.valueOf(getAcknowledged_by());
1:c9a13c3: 
1:b38ca28:     case ACKNOWLEDGED_BY_BATCHLOG:
1:b38ca28:       return Boolean.valueOf(isAcknowledged_by_batchlog());
1:b38ca28: 
1:bc3597d:     case PAXOS_IN_PROGRESS:
1:bc3597d:       return Boolean.valueOf(isPaxos_in_progress());
1:bc3597d: 
1:46a809e:     }
1:04d5ec3:     throw new IllegalStateException();
1:46a809e:   }
1:46a809e: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:c9a13c3:     case ACKNOWLEDGED_BY:
1:c9a13c3:       return isSetAcknowledged_by();
1:b38ca28:     case ACKNOWLEDGED_BY_BATCHLOG:
1:b38ca28:       return isSetAcknowledged_by_batchlog();
1:bc3597d:     case PAXOS_IN_PROGRESS:
1:bc3597d:       return isSetPaxos_in_progress();
1:46a809e:     }
1:04d5ec3:     throw new IllegalStateException();
1:46a809e:   }
1:46a809e: 
1:46a809e:   @Override
1:46a809e:   public boolean equals(Object that) {
1:46a809e:     if (that == null)
1:46a809e:       return false;
1:46a809e:     if (that instanceof TimedOutException)
1:46a809e:       return this.equals((TimedOutException)that);
1:46a809e:     return false;
1:46a809e:   }
1:46a809e: 
1:46a809e:   public boolean equals(TimedOutException that) {
1:46a809e:     if (that == null)
1:46a809e:       return false;
1:46a809e: 
1:c9a13c3:     boolean this_present_acknowledged_by = true && this.isSetAcknowledged_by();
1:c9a13c3:     boolean that_present_acknowledged_by = true && that.isSetAcknowledged_by();
1:c9a13c3:     if (this_present_acknowledged_by || that_present_acknowledged_by) {
1:c9a13c3:       if (!(this_present_acknowledged_by && that_present_acknowledged_by))
1:c9a13c3:         return false;
1:c9a13c3:       if (this.acknowledged_by != that.acknowledged_by)
1:c9a13c3:         return false;
1:c9a13c3:     }
1:c9a13c3: 
1:b38ca28:     boolean this_present_acknowledged_by_batchlog = true && this.isSetAcknowledged_by_batchlog();
1:b38ca28:     boolean that_present_acknowledged_by_batchlog = true && that.isSetAcknowledged_by_batchlog();
1:b38ca28:     if (this_present_acknowledged_by_batchlog || that_present_acknowledged_by_batchlog) {
1:b38ca28:       if (!(this_present_acknowledged_by_batchlog && that_present_acknowledged_by_batchlog))
1:b38ca28:         return false;
1:b38ca28:       if (this.acknowledged_by_batchlog != that.acknowledged_by_batchlog)
1:b38ca28:         return false;
1:b38ca28:     }
1:b38ca28: 
1:bc3597d:     boolean this_present_paxos_in_progress = true && this.isSetPaxos_in_progress();
1:bc3597d:     boolean that_present_paxos_in_progress = true && that.isSetPaxos_in_progress();
1:bc3597d:     if (this_present_paxos_in_progress || that_present_paxos_in_progress) {
1:bc3597d:       if (!(this_present_paxos_in_progress && that_present_paxos_in_progress))
1:bc3597d:         return false;
1:bc3597d:       if (this.paxos_in_progress != that.paxos_in_progress)
1:bc3597d:         return false;
1:bc3597d:     }
1:bc3597d: 
1:46a809e:     return true;
1:46a809e:   }
1:46a809e: 
1:46a809e:   @Override
1:46a809e:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:c9a13c3:     boolean present_acknowledged_by = true && (isSetAcknowledged_by());
1:c9a13c3:     builder.append(present_acknowledged_by);
1:c9a13c3:     if (present_acknowledged_by)
1:c9a13c3:       builder.append(acknowledged_by);
1:c9a13c3: 
1:b38ca28:     boolean present_acknowledged_by_batchlog = true && (isSetAcknowledged_by_batchlog());
1:b38ca28:     builder.append(present_acknowledged_by_batchlog);
1:b38ca28:     if (present_acknowledged_by_batchlog)
1:b38ca28:       builder.append(acknowledged_by_batchlog);
1:b38ca28: 
1:bc3597d:     boolean present_paxos_in_progress = true && (isSetPaxos_in_progress());
1:bc3597d:     builder.append(present_paxos_in_progress);
1:bc3597d:     if (present_paxos_in_progress)
1:bc3597d:       builder.append(paxos_in_progress);
1:bc3597d: 
1:d966ed0:     return builder.toHashCode();
1:46a809e:   }
1:46a809e: 
1:bffd9ea:   @Override
1:46a809e:   public int compareTo(TimedOutException other) {
1:46a809e:     if (!getClass().equals(other.getClass())) {
1:46a809e:       return getClass().getName().compareTo(other.getClass().getName());
1:46a809e:     }
1:46a809e: 
1:46a809e:     int lastComparison = 0;
1:46a809e: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetAcknowledged_by()).compareTo(other.isSetAcknowledged_by());
1:c9a13c3:     if (lastComparison != 0) {
1:c9a13c3:       return lastComparison;
1:bc3597d:     }
1:c9a13c3:     if (isSetAcknowledged_by()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by, other.acknowledged_by);
1:bc3597d:       if (lastComparison != 0) {
1:bc3597d:         return lastComparison;
1:b38ca28:       }
1:c9a13c3:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetAcknowledged_by_batchlog()).compareTo(other.isSetAcknowledged_by_batchlog());
1:b38ca28:     if (lastComparison != 0) {
1:b38ca28:       return lastComparison;
1:c9a13c3:     }
1:b38ca28:     if (isSetAcknowledged_by_batchlog()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by_batchlog, other.acknowledged_by_batchlog);
1:b38ca28:       if (lastComparison != 0) {
1:b38ca28:         return lastComparison;
1:b38ca28:       }
1:b38ca28:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetPaxos_in_progress()).compareTo(other.isSetPaxos_in_progress());
1:c9a13c3:     if (lastComparison != 0) {
1:c9a13c3:       return lastComparison;
1:c9a13c3:     }
1:bc3597d:     if (isSetPaxos_in_progress()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paxos_in_progress, other.paxos_in_progress);
1:bc3597d:       if (lastComparison != 0) {
1:bc3597d:         return lastComparison;
1:bc3597d:       }
1:bc3597d:     }
2:46a809e:     return 0;
1:46a809e:   }
1:46a809e: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:46a809e:   }
1:46a809e: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:46a809e:   }
1:46a809e: 
1:b153d45:   @Override
1:46a809e:   public String toString() {
1:46a809e:     StringBuilder sb = new StringBuilder("TimedOutException(");
1:46a809e:     boolean first = true;
1:b153d45: 
1:c9a13c3:     if (isSetAcknowledged_by()) {
1:c9a13c3:       sb.append("acknowledged_by:");
1:c9a13c3:       sb.append(this.acknowledged_by);
1:c9a13c3:       first = false;
1:c9a13c3:     }
1:b38ca28:     if (isSetAcknowledged_by_batchlog()) {
1:b38ca28:       if (!first) sb.append(", ");
1:b38ca28:       sb.append("acknowledged_by_batchlog:");
1:b38ca28:       sb.append(this.acknowledged_by_batchlog);
1:b38ca28:       first = false;
1:b38ca28:     }
1:bc3597d:     if (isSetPaxos_in_progress()) {
1:bc3597d:       if (!first) sb.append(", ");
1:bc3597d:       sb.append("paxos_in_progress:");
1:bc3597d:       sb.append(this.paxos_in_progress);
1:bc3597d:       first = false;
1:bc3597d:     }
1:46a809e:     sb.append(")");
1:46a809e:     return sb.toString();
1:b153d45:   }
1:b153d45: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:46a809e:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b153d45:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:81209f1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class TimedOutExceptionStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public TimedOutExceptionStandardScheme getScheme() {
1:b153d45:       return new TimedOutExceptionStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class TimedOutExceptionStandardScheme extends StandardScheme<TimedOutException> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, TimedOutException struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:46a809e:       iprot.readStructBegin();
1:46a809e:       while (true)
2:46a809e:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b38ca28:           break;
1:46a809e:         }
1:b153d45:         switch (schemeField.id) {
1:c9a13c3:           case 1: // ACKNOWLEDGED_BY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.acknowledged_by = iprot.readI32();
1:b153d45:               struct.setAcknowledged_byIsSet(true);
1:b38ca28:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:c9a13c3:             break;
1:b38ca28:           case 2: // ACKNOWLEDGED_BY_BATCHLOG
1:bc3597d:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:b153d45:               struct.acknowledged_by_batchlog = iprot.readBool();
1:b153d45:               struct.setAcknowledged_by_batchlogIsSet(true);
1:c9a13c3:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
2:46a809e:             break;
1:bc3597d:           case 3: // PAXOS_IN_PROGRESS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:bc3597d:               struct.paxos_in_progress = iprot.readBool();
1:bc3597d:               struct.setPaxos_in_progressIsSet(true);
1:bc3597d:             } else { 
1:bc3597d:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:bc3597d:             }
1:bc3597d:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:46a809e:       iprot.readStructEnd();
1:b153d45: 
1:46a809e:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:46a809e:     }
1:46a809e: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, TimedOutException struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:46a809e: 
1:46a809e:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.isSetAcknowledged_by()) {
1:c9a13c3:         oprot.writeFieldBegin(ACKNOWLEDGED_BY_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.acknowledged_by);
1:c9a13c3:         oprot.writeFieldEnd();
1:c9a13c3:       }
1:b153d45:       if (struct.isSetAcknowledged_by_batchlog()) {
1:b38ca28:         oprot.writeFieldBegin(ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC);
1:b153d45:         oprot.writeBool(struct.acknowledged_by_batchlog);
1:b38ca28:         oprot.writeFieldEnd();
1:b38ca28:       }
1:bc3597d:       if (struct.isSetPaxos_in_progress()) {
1:bc3597d:         oprot.writeFieldBegin(PAXOS_IN_PROGRESS_FIELD_DESC);
1:bc3597d:         oprot.writeBool(struct.paxos_in_progress);
1:bc3597d:         oprot.writeFieldEnd();
1:bc3597d:       }
1:46a809e:       oprot.writeFieldStop();
1:46a809e:       oprot.writeStructEnd();
1:46a809e:     }
1:46a809e: 
1:46a809e:   }
1:46a809e: 
1:b153d45:   private static class TimedOutExceptionTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public TimedOutExceptionTupleScheme getScheme() {
1:b153d45:       return new TimedOutExceptionTupleScheme();
1:46a809e:     }
1:46a809e:   }
1:46a809e: 
1:b153d45:   private static class TimedOutExceptionTupleScheme extends TupleScheme<TimedOutException> {
1:46a809e: 
1:46a809e:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, TimedOutException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetAcknowledged_by()) {
1:b153d45:         optionals.set(0);
1:b153d45:       }
1:b153d45:       if (struct.isSetAcknowledged_by_batchlog()) {
1:b153d45:         optionals.set(1);
1:b153d45:       }
1:bc3597d:       if (struct.isSetPaxos_in_progress()) {
1:bc3597d:         optionals.set(2);
1:bc3597d:       }
1:bc3597d:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetAcknowledged_by()) {
1:b153d45:         oprot.writeI32(struct.acknowledged_by);
1:bc3597d:       }
1:b153d45:       if (struct.isSetAcknowledged_by_batchlog()) {
1:b153d45:         oprot.writeBool(struct.acknowledged_by_batchlog);
1:b153d45:       }
1:bc3597d:       if (struct.isSetPaxos_in_progress()) {
1:bc3597d:         oprot.writeBool(struct.paxos_in_progress);
1:b153d45:       }
1:b153d45:     }
1:46a809e: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, TimedOutException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:bc3597d:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.acknowledged_by = iprot.readI32();
1:b153d45:         struct.setAcknowledged_byIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.acknowledged_by_batchlog = iprot.readBool();
1:b153d45:         struct.setAcknowledged_by_batchlogIsSet(true);
1:b153d45:       }
1:bc3597d:       if (incoming.get(2)) {
1:bc3597d:         struct.paxos_in_progress = iprot.readBool();
1:bc3597d:         struct.setPaxos_in_progressIsSet(true);
1:bc3597d:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class TimedOutException extends TException implements org.apache.thrift.TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable, Comparable<TimedOutException> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetAcknowledged_by()).compareTo(other.isSetAcknowledged_by());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by, other.acknowledged_by);
1:     lastComparison = Boolean.valueOf(isSetAcknowledged_by_batchlog()).compareTo(other.isSetAcknowledged_by_batchlog());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by_batchlog, other.acknowledged_by_batchlog);
1:     lastComparison = Boolean.valueOf(isSetPaxos_in_progress()).compareTo(other.isSetPaxos_in_progress());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paxos_in_progress, other.paxos_in_progress);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:bc3597d
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField PAXOS_IN_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("paxos_in_progress", org.apache.thrift.protocol.TType.BOOL, (short)3);
/////////////////////////////////////////////////////////////////////////
1:    * in case of atomic_batch_mutate method this field tells if the batch
1:    * was written to the batchlog.
1:   /**
1:    * for the CAS method, this field tells if we timed out during the paxos
1:    * protocol, as opposed to during the commit of our update
1:    */
1:   public boolean paxos_in_progress; // optional
/////////////////////////////////////////////////////////////////////////
1:      * in case of atomic_batch_mutate method this field tells if the batch
1:      * was written to the batchlog.
1:     ACKNOWLEDGED_BY_BATCHLOG((short)2, "acknowledged_by_batchlog"),
1:     /**
1:      * for the CAS method, this field tells if we timed out during the paxos
1:      * protocol, as opposed to during the commit of our update
1:      */
1:     PAXOS_IN_PROGRESS((short)3, "paxos_in_progress");
/////////////////////////////////////////////////////////////////////////
1:         case 3: // PAXOS_IN_PROGRESS
1:           return PAXOS_IN_PROGRESS;
/////////////////////////////////////////////////////////////////////////
1:   private static final int __PAXOS_IN_PROGRESS_ISSET_ID = 2;
1:   private _Fields optionals[] = {_Fields.ACKNOWLEDGED_BY,_Fields.ACKNOWLEDGED_BY_BATCHLOG,_Fields.PAXOS_IN_PROGRESS};
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.PAXOS_IN_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("paxos_in_progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
/////////////////////////////////////////////////////////////////////////
1:     this.paxos_in_progress = other.paxos_in_progress;
/////////////////////////////////////////////////////////////////////////
1:     setPaxos_in_progressIsSet(false);
1:     this.paxos_in_progress = false;
/////////////////////////////////////////////////////////////////////////
1:    * in case of atomic_batch_mutate method this field tells if the batch
1:    * was written to the batchlog.
1:    * in case of atomic_batch_mutate method this field tells if the batch
1:    * was written to the batchlog.
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * for the CAS method, this field tells if we timed out during the paxos
1:    * protocol, as opposed to during the commit of our update
1:    */
1:   public boolean isPaxos_in_progress() {
1:     return this.paxos_in_progress;
1:   }
1: 
1:   /**
1:    * for the CAS method, this field tells if we timed out during the paxos
1:    * protocol, as opposed to during the commit of our update
1:    */
1:   public TimedOutException setPaxos_in_progress(boolean paxos_in_progress) {
1:     this.paxos_in_progress = paxos_in_progress;
1:     setPaxos_in_progressIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetPaxos_in_progress() {
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field paxos_in_progress is set (has been assigned a value) and false otherwise */
1:   public boolean isSetPaxos_in_progress() {
1:     return EncodingUtils.testBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID);
1:   }
1: 
1:   public void setPaxos_in_progressIsSet(boolean value) {
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAXOS_IN_PROGRESS_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case PAXOS_IN_PROGRESS:
1:       if (value == null) {
1:         unsetPaxos_in_progress();
1:       } else {
1:         setPaxos_in_progress((Boolean)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case PAXOS_IN_PROGRESS:
1:       return Boolean.valueOf(isPaxos_in_progress());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case PAXOS_IN_PROGRESS:
1:       return isSetPaxos_in_progress();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_paxos_in_progress = true && this.isSetPaxos_in_progress();
1:     boolean that_present_paxos_in_progress = true && that.isSetPaxos_in_progress();
1:     if (this_present_paxos_in_progress || that_present_paxos_in_progress) {
1:       if (!(this_present_paxos_in_progress && that_present_paxos_in_progress))
1:         return false;
1:       if (this.paxos_in_progress != that.paxos_in_progress)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_paxos_in_progress = true && (isSetPaxos_in_progress());
1:     builder.append(present_paxos_in_progress);
1:     if (present_paxos_in_progress)
1:       builder.append(paxos_in_progress);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetPaxos_in_progress()).compareTo(typedOther.isSetPaxos_in_progress());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetPaxos_in_progress()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paxos_in_progress, typedOther.paxos_in_progress);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (isSetPaxos_in_progress()) {
1:       if (!first) sb.append(", ");
1:       sb.append("paxos_in_progress:");
1:       sb.append(this.paxos_in_progress);
1:       first = false;
1:     }
/////////////////////////////////////////////////////////////////////////
1:           case 3: // PAXOS_IN_PROGRESS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.paxos_in_progress = iprot.readBool();
1:               struct.setPaxos_in_progressIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
/////////////////////////////////////////////////////////////////////////
1:       if (struct.isSetPaxos_in_progress()) {
1:         oprot.writeFieldBegin(PAXOS_IN_PROGRESS_FIELD_DESC);
1:         oprot.writeBool(struct.paxos_in_progress);
1:         oprot.writeFieldEnd();
1:       }
/////////////////////////////////////////////////////////////////////////
1:       if (struct.isSetPaxos_in_progress()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetPaxos_in_progress()) {
1:         oprot.writeBool(struct.paxos_in_progress);
1:       }
1:       BitSet incoming = iprot.readBitSet(3);
/////////////////////////////////////////////////////////////////////////
1:       if (incoming.get(2)) {
1:         struct.paxos_in_progress = iprot.readBool();
1:         struct.setPaxos_in_progressIsSet(true);
1:       }
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:81209f1
/////////////////////////////////////////////////////////////////////////
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
commit:b38ca28
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by_batchlog", org.apache.thrift.protocol.TType.BOOL, (short)2);
1:    * if a write operation was acknowledged by some replicas but not by enough to
1:    * replies will be given here. In case of atomic_batch_mutate method this field
1:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:   /**
0:    * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
1:    */
0:   public boolean acknowledged_by_batchlog; // required
1:      * if a write operation was acknowledged by some replicas but not by enough to
1:      * replies will be given here. In case of atomic_batch_mutate method this field
1:      * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:     ACKNOWLEDGED_BY((short)1, "acknowledged_by"),
1:     /**
0:      * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
1:      */
0:     ACKNOWLEDGED_BY_BATCHLOG((short)2, "acknowledged_by_batchlog");
/////////////////////////////////////////////////////////////////////////
1:         case 2: // ACKNOWLEDGED_BY_BATCHLOG
1:           return ACKNOWLEDGED_BY_BATCHLOG;
/////////////////////////////////////////////////////////////////////////
1:   private static final int __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
1:     tmpMap.put(_Fields.ACKNOWLEDGED_BY_BATCHLOG, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by_batchlog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
/////////////////////////////////////////////////////////////////////////
1:     this.acknowledged_by_batchlog = other.acknowledged_by_batchlog;
/////////////////////////////////////////////////////////////////////////
1:     setAcknowledged_by_batchlogIsSet(false);
1:     this.acknowledged_by_batchlog = false;
1:    * if a write operation was acknowledged by some replicas but not by enough to
1:    * replies will be given here. In case of atomic_batch_mutate method this field
1:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
1:    * if a write operation was acknowledged by some replicas but not by enough to
1:    * replies will be given here. In case of atomic_batch_mutate method this field
1:    * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
1:    */
1:   public boolean isAcknowledged_by_batchlog() {
1:     return this.acknowledged_by_batchlog;
1:   }
1: 
1:   /**
0:    * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
1:    */
1:   public TimedOutException setAcknowledged_by_batchlog(boolean acknowledged_by_batchlog) {
1:     this.acknowledged_by_batchlog = acknowledged_by_batchlog;
1:     setAcknowledged_by_batchlogIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetAcknowledged_by_batchlog() {
0:     __isset_bit_vector.clear(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field acknowledged_by_batchlog is set (has been assigned a value) and false otherwise */
1:   public boolean isSetAcknowledged_by_batchlog() {
0:     return __isset_bit_vector.get(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:   }
1: 
1:   public void setAcknowledged_by_batchlogIsSet(boolean value) {
0:     __isset_bit_vector.set(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ACKNOWLEDGED_BY_BATCHLOG:
1:       if (value == null) {
1:         unsetAcknowledged_by_batchlog();
1:       } else {
1:         setAcknowledged_by_batchlog((Boolean)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ACKNOWLEDGED_BY_BATCHLOG:
1:       return Boolean.valueOf(isAcknowledged_by_batchlog());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ACKNOWLEDGED_BY_BATCHLOG:
1:       return isSetAcknowledged_by_batchlog();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_acknowledged_by_batchlog = true && this.isSetAcknowledged_by_batchlog();
1:     boolean that_present_acknowledged_by_batchlog = true && that.isSetAcknowledged_by_batchlog();
1:     if (this_present_acknowledged_by_batchlog || that_present_acknowledged_by_batchlog) {
1:       if (!(this_present_acknowledged_by_batchlog && that_present_acknowledged_by_batchlog))
1:         return false;
1:       if (this.acknowledged_by_batchlog != that.acknowledged_by_batchlog)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_acknowledged_by_batchlog = true && (isSetAcknowledged_by_batchlog());
1:     builder.append(present_acknowledged_by_batchlog);
1:     if (present_acknowledged_by_batchlog)
1:       builder.append(acknowledged_by_batchlog);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetAcknowledged_by_batchlog()).compareTo(typedOther.isSetAcknowledged_by_batchlog());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetAcknowledged_by_batchlog()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by_batchlog, typedOther.acknowledged_by_batchlog);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 2: // ACKNOWLEDGED_BY_BATCHLOG
0:           if (field.type == org.apache.thrift.protocol.TType.BOOL) {
0:             this.acknowledged_by_batchlog = iprot.readBool();
0:             setAcknowledged_by_batchlogIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
1:     if (isSetAcknowledged_by_batchlog()) {
1:       oprot.writeFieldBegin(ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC);
0:       oprot.writeBool(this.acknowledged_by_batchlog);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetAcknowledged_by_batchlog()) {
1:       if (!first) sb.append(", ");
1:       sb.append("acknowledged_by_batchlog:");
1:       sb.append(this.acknowledged_by_batchlog);
1:       first = false;
1:     }
commit:c9a13c3
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by", org.apache.thrift.protocol.TType.I32, (short)1);
1:   /**
0:    * if a write operation was acknowledged some replicas but not enough to
1:    * satisfy the required ConsistencyLevel, the number of successful
0:    * replies will be given here
1:    */
0:   public int acknowledged_by; // required
1:     /**
0:      * if a write operation was acknowledged some replicas but not enough to
1:      * satisfy the required ConsistencyLevel, the number of successful
0:      * replies will be given here
1:      */
0:     ACKNOWLEDGED_BY((short)1, "acknowledged_by");
/////////////////////////////////////////////////////////////////////////
1:         case 1: // ACKNOWLEDGED_BY
1:           return ACKNOWLEDGED_BY;
/////////////////////////////////////////////////////////////////////////
1: 
1:   // isset id assignments
1:   private static final int __ACKNOWLEDGED_BY_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
1:     tmpMap.put(_Fields.ACKNOWLEDGED_BY, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
/////////////////////////////////////////////////////////////////////////
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     this.acknowledged_by = other.acknowledged_by;
/////////////////////////////////////////////////////////////////////////
1:     setAcknowledged_byIsSet(false);
1:     this.acknowledged_by = 0;
1:   }
1: 
1:   /**
0:    * if a write operation was acknowledged some replicas but not enough to
1:    * satisfy the required ConsistencyLevel, the number of successful
0:    * replies will be given here
1:    */
1:   public int getAcknowledged_by() {
1:     return this.acknowledged_by;
1:   }
1: 
1:   /**
0:    * if a write operation was acknowledged some replicas but not enough to
1:    * satisfy the required ConsistencyLevel, the number of successful
0:    * replies will be given here
1:    */
1:   public TimedOutException setAcknowledged_by(int acknowledged_by) {
1:     this.acknowledged_by = acknowledged_by;
1:     setAcknowledged_byIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetAcknowledged_by() {
0:     __isset_bit_vector.clear(__ACKNOWLEDGED_BY_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field acknowledged_by is set (has been assigned a value) and false otherwise */
1:   public boolean isSetAcknowledged_by() {
0:     return __isset_bit_vector.get(__ACKNOWLEDGED_BY_ISSET_ID);
1:   }
1: 
1:   public void setAcknowledged_byIsSet(boolean value) {
0:     __isset_bit_vector.set(__ACKNOWLEDGED_BY_ISSET_ID, value);
1:     case ACKNOWLEDGED_BY:
1:       if (value == null) {
1:         unsetAcknowledged_by();
1:       } else {
1:         setAcknowledged_by((Integer)value);
1:       }
1:       break;
1: 
1:     case ACKNOWLEDGED_BY:
1:       return Integer.valueOf(getAcknowledged_by());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ACKNOWLEDGED_BY:
1:       return isSetAcknowledged_by();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_acknowledged_by = true && this.isSetAcknowledged_by();
1:     boolean that_present_acknowledged_by = true && that.isSetAcknowledged_by();
1:     if (this_present_acknowledged_by || that_present_acknowledged_by) {
1:       if (!(this_present_acknowledged_by && that_present_acknowledged_by))
1:         return false;
1:       if (this.acknowledged_by != that.acknowledged_by)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_acknowledged_by = true && (isSetAcknowledged_by());
1:     builder.append(present_acknowledged_by);
1:     if (present_acknowledged_by)
1:       builder.append(acknowledged_by);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetAcknowledged_by()).compareTo(typedOther.isSetAcknowledged_by());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetAcknowledged_by()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by, typedOther.acknowledged_by);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 1: // ACKNOWLEDGED_BY
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.acknowledged_by = iprot.readI32();
0:             setAcknowledged_byIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
1:     if (isSetAcknowledged_by()) {
1:       oprot.writeFieldBegin(ACKNOWLEDGED_BY_FIELD_DESC);
0:       oprot.writeI32(this.acknowledged_by);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetAcknowledged_by()) {
1:       sb.append("acknowledged_by:");
1:       sb.append(this.acknowledged_by);
1:       first = false;
1:     }
/////////////////////////////////////////////////////////////////////////
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class TimedOutException extends Exception implements TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:46a809e
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class TimedOutException extends Exception implements TBase, java.io.Serializable, Cloneable, Comparable<TimedOutException> {
0:   private static final TStruct STRUCT_DESC = new TStruct("TimedOutException");
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(TimedOutException.class, metaDataMap);
1:   }
1: 
1:   public TimedOutException() {
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public TimedOutException(TimedOutException other) {
1:   }
1: 
1:   public TimedOutException deepCopy() {
1:     return new TimedOutException(this);
1:   }
1: 
0:   @Deprecated
0:   public TimedOutException clone() {
1:     return new TimedOutException(this);
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof TimedOutException)
1:       return this.equals((TimedOutException)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(TimedOutException that) {
1:     if (that == null)
1:       return false;
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(TimedOutException other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     TimedOutException typedOther = (TimedOutException)other;
1: 
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("TimedOutException(");
1:     boolean first = true;
1: 
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
0: public class TimedOutException extends TException implements org.apache.thrift.TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable {
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new TimedOutExceptionStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new TimedOutExceptionTupleSchemeFactory());
1:   }
1: 
1:   public int acknowledged_by; // optional
1:   public boolean acknowledged_by_batchlog; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
0:   private _Fields optionals[] = {_Fields.ACKNOWLEDGED_BY,_Fields.ACKNOWLEDGED_BY_BATCHLOG};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACKNOWLEDGED_BY_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class TimedOutExceptionStandardSchemeFactory implements SchemeFactory {
1:     public TimedOutExceptionStandardScheme getScheme() {
1:       return new TimedOutExceptionStandardScheme();
1:     }
1:   }
1: 
1:   private static class TimedOutExceptionStandardScheme extends StandardScheme<TimedOutException> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, TimedOutException struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // ACKNOWLEDGED_BY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.acknowledged_by = iprot.readI32();
1:               struct.setAcknowledged_byIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // ACKNOWLEDGED_BY_BATCHLOG
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.acknowledged_by_batchlog = iprot.readBool();
1:               struct.setAcknowledged_by_batchlogIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, TimedOutException struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.isSetAcknowledged_by()) {
0:         oprot.writeFieldBegin(ACKNOWLEDGED_BY_FIELD_DESC);
1:         oprot.writeI32(struct.acknowledged_by);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.isSetAcknowledged_by_batchlog()) {
0:         oprot.writeFieldBegin(ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC);
1:         oprot.writeBool(struct.acknowledged_by_batchlog);
0:         oprot.writeFieldEnd();
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class TimedOutExceptionTupleSchemeFactory implements SchemeFactory {
1:     public TimedOutExceptionTupleScheme getScheme() {
1:       return new TimedOutExceptionTupleScheme();
1:     }
1:   }
1: 
1:   private static class TimedOutExceptionTupleScheme extends TupleScheme<TimedOutException> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, TimedOutException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetAcknowledged_by()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetAcknowledged_by_batchlog()) {
1:         optionals.set(1);
1:       }
0:       oprot.writeBitSet(optionals, 2);
1:       if (struct.isSetAcknowledged_by()) {
1:         oprot.writeI32(struct.acknowledged_by);
1:       }
1:       if (struct.isSetAcknowledged_by_batchlog()) {
1:         oprot.writeBool(struct.acknowledged_by_batchlog);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, TimedOutException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
0:       BitSet incoming = iprot.readBitSet(2);
1:       if (incoming.get(0)) {
1:         struct.acknowledged_by = iprot.readI32();
1:         struct.setAcknowledged_byIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.acknowledged_by_batchlog = iprot.readBool();
1:         struct.setAcknowledged_by_batchlogIsSet(true);
1:       }
1:     }
1:   }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:297f530
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class TimedOutException extends Exception implements org.apache.thrift.TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimedOutException");
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimedOutException.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class TimedOutException extends Exception implements TBase<TimedOutException._Fields>, java.io.Serializable, Cloneable, Comparable<TimedOutException> {
0: 
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
0: ;
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
0:     }
0:   }
0: 
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
0:     }
1:     throw new IllegalStateException();
0:   }
0: 
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
0:  */
============================================================================