1:31e3f61: /*
1:31e3f61:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e3f61:  * or more contributor license agreements.  See the NOTICE file
1:31e3f61:  * distributed with this work for additional information
1:31e3f61:  * regarding copyright ownership.  The ASF licenses this file
1:31e3f61:  * to you under the Apache License, Version 2.0 (the
1:31e3f61:  * "License"); you may not use this file except in compliance
1:31e3f61:  * with the License.  You may obtain a copy of the License at
1:31e3f61:  *
1:31e3f61:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e3f61:  *
1:31e3f61:  * Unless required by applicable law or agreed to in writing, software
1:31e3f61:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e3f61:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e3f61:  * See the License for the specific language governing permissions and
1:31e3f61:  * limitations under the License.
1:31e3f61:  */
1:31e3f61: package org.apache.cassandra.cql3.statements;
1:31e3f61: 
1:31e3f61: import java.util.*;
1:31e3f61: 
1:31e3f61: import com.google.common.collect.ImmutableSet;
1:31e3f61: 
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams.Option;
1:b31845c: import org.apache.cassandra.schema.ReplicationParams;
1:31e3f61: 
1:b31845c: public final class KeyspaceAttributes extends PropertyDefinitions
1:31e3f61: {
1:b31845c:     private static final Set<String> validKeywords;
1:b31845c:     private static final Set<String> obsoleteKeywords;
1:31e3f61: 
1:b31845c:     static
1:31e3f61:     {
1:b31845c:         ImmutableSet.Builder<String> validBuilder = ImmutableSet.builder();
1:b31845c:         for (Option option : Option.values())
1:b31845c:             validBuilder.add(option.toString());
1:b31845c:         validKeywords = validBuilder.build();
1:b31845c:         obsoleteKeywords = ImmutableSet.of();
1:b31845c:     }
1:b31845c: 
1:b31845c:     public void validate()
1:b31845c:     {
1:b31845c:         validate(validKeywords, obsoleteKeywords);
1:31e3f61:     }
1:31e3f61: 
1:31e3f61:     public String getReplicationStrategyClass()
1:31e3f61:     {
1:b31845c:         return getAllReplicationOptions().get(ReplicationParams.CLASS);
1:31e3f61:     }
1:31e3f61: 
1:b31845c:     public Map<String, String> getReplicationOptions()
1:31e3f61:     {
1:31e3f61:         Map<String, String> replication = new HashMap<>(getAllReplicationOptions());
1:b31845c:         replication.remove(ReplicationParams.CLASS);
1:31e3f61:         return replication;
1:31e3f61:     }
1:31e3f61: 
1:b31845c:     public Map<String, String> getAllReplicationOptions()
1:31e3f61:     {
1:31e3f61:         Map<String, String> replication = getMap(Option.REPLICATION.toString());
1:31e3f61:         return replication == null
1:31e3f61:              ? Collections.emptyMap()
1:31e3f61:              : replication;
1:31e3f61:     }
1:31e3f61: 
1:31e3f61:     public KeyspaceParams asNewKeyspaceParams()
1:31e3f61:     {
1:31e3f61:         boolean durableWrites = getBoolean(Option.DURABLE_WRITES.toString(), KeyspaceParams.DEFAULT_DURABLE_WRITES);
1:31e3f61:         return KeyspaceParams.create(durableWrites, getAllReplicationOptions());
1:31e3f61:     }
1:31e3f61: 
1:31e3f61:     public KeyspaceParams asAlteredKeyspaceParams(KeyspaceParams previous)
1:31e3f61:     {
1:31e3f61:         boolean durableWrites = getBoolean(Option.DURABLE_WRITES.toString(), previous.durableWrites);
1:b31845c:         ReplicationParams replication = getReplicationStrategyClass() == null
1:b31845c:                                       ? previous.replication
1:b31845c:                                       : ReplicationParams.fromMap(getAllReplicationOptions());
1:31e3f61:         return new KeyspaceParams(durableWrites, replication);
1:31e3f61:     }
1:31e3f61: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.ReplicationParams;
1: public final class KeyspaceAttributes extends PropertyDefinitions
1:     private static final Set<String> validKeywords;
1:     private static final Set<String> obsoleteKeywords;
1:     static
1:         ImmutableSet.Builder<String> validBuilder = ImmutableSet.builder();
1:         for (Option option : Option.values())
1:             validBuilder.add(option.toString());
1:         validKeywords = validBuilder.build();
1:         obsoleteKeywords = ImmutableSet.of();
1:     }
1: 
1:     public void validate()
1:     {
1:         validate(validKeywords, obsoleteKeywords);
1:         return getAllReplicationOptions().get(ReplicationParams.CLASS);
1:     public Map<String, String> getReplicationOptions()
1:         replication.remove(ReplicationParams.CLASS);
1:     public Map<String, String> getAllReplicationOptions()
/////////////////////////////////////////////////////////////////////////
1:         ReplicationParams replication = getReplicationStrategyClass() == null
1:                                       ? previous.replication
1:                                       : ReplicationParams.fromMap(getAllReplicationOptions());
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableSet;
1: 
0: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.schema.KeyspaceParams.Option;
0: import org.apache.cassandra.schema.KeyspaceParams.Replication;
1: 
0: public class KeyspaceAttributes extends PropertyDefinitions
1: {
0:     private static final Set<String> keywords = ImmutableSet.of(Option.DURABLE_WRITES.toString(), Option.REPLICATION.toString());
0:     private static final Set<String> obsoleteKeywords = ImmutableSet.of();
1: 
0:     public void validate() throws SyntaxException
1:     {
0:         validate(keywords, obsoleteKeywords);
1:     }
1: 
1:     public String getReplicationStrategyClass()
1:     {
0:         return getAllReplicationOptions().get(Replication.CLASS);
1:     }
1: 
0:     public Map<String, String> getReplicationOptions() throws SyntaxException
1:     {
1:         Map<String, String> replication = new HashMap<>(getAllReplicationOptions());
0:         replication.remove(Replication.CLASS);
1:         return replication;
1:     }
1: 
0:     public Map<String, String> getAllReplicationOptions() throws SyntaxException
1:     {
1:         Map<String, String> replication = getMap(Option.REPLICATION.toString());
1:         return replication == null
1:              ? Collections.emptyMap()
1:              : replication;
1:     }
1: 
1:     public KeyspaceParams asNewKeyspaceParams()
1:     {
1:         boolean durableWrites = getBoolean(Option.DURABLE_WRITES.toString(), KeyspaceParams.DEFAULT_DURABLE_WRITES);
1:         return KeyspaceParams.create(durableWrites, getAllReplicationOptions());
1:     }
1: 
1:     public KeyspaceParams asAlteredKeyspaceParams(KeyspaceParams previous)
1:     {
1:         boolean durableWrites = getBoolean(Option.DURABLE_WRITES.toString(), previous.durableWrites);
0:         Replication replication = getReplicationStrategyClass() == null
0:                                 ? previous.replication
0:                                 : Replication.fromMap(getAllReplicationOptions());
1:         return new KeyspaceParams(durableWrites, replication);
1:     }
1: }
============================================================================