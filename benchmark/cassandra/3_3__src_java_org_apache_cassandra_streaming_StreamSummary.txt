1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.io.IOException;
1:5151169: import java.io.Serializable;
1:5151169: import java.util.UUID;
1:5151169: 
1:5151169: import com.google.common.base.Objects;
1:5151169: 
1:5151169: import org.apache.cassandra.db.TypeSizes;
1:5151169: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5151169: import org.apache.cassandra.net.MessagingService;
1:5151169: import org.apache.cassandra.utils.UUIDSerializer;
1:5151169: 
1:5151169: /**
1:5151169:  * Summary of streaming.
1:5151169:  */
1:5151169: public class StreamSummary implements Serializable
1:5151169: {
1:5151169:     public static final IVersionedSerializer<StreamSummary> serializer = new StreamSummarySerializer();
1:5151169: 
1:5151169:     public final UUID cfId;
1:5151169: 
1:5151169:     /**
1:5151169:      * Number of files to transfer. Can be 0 if nothing to transfer for some streaming request.
1:5151169:      */
1:5151169:     public final int files;
1:5151169:     public final long totalSize;
1:5151169: 
1:5151169:     public StreamSummary(UUID cfId, int files, long totalSize)
1:5151169:     {
1:5151169:         this.cfId = cfId;
1:5151169:         this.files = files;
1:5151169:         this.totalSize = totalSize;
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public boolean equals(Object o)
1:5151169:     {
1:5151169:         if (this == o) return true;
1:5151169:         if (o == null || getClass() != o.getClass()) return false;
1:5151169:         StreamSummary summary = (StreamSummary) o;
1:5151169:         return files == summary.files && totalSize == summary.totalSize && cfId.equals(summary.cfId);
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public int hashCode()
1:5151169:     {
1:5151169:         return Objects.hashCode(cfId, files, totalSize);
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public String toString()
1:5151169:     {
1:5151169:         final StringBuilder sb = new StringBuilder("StreamSummary{");
1:5151169:         sb.append("path=").append(cfId);
1:5151169:         sb.append(", files=").append(files);
1:5151169:         sb.append(", totalSize=").append(totalSize);
1:5151169:         sb.append('}');
1:5151169:         return sb.toString();
1:5151169:     }
1:5151169: 
1:5151169:     public static class StreamSummarySerializer implements IVersionedSerializer<StreamSummary>
1:5151169:     {
1:5151169:         // arbitrary version is fine for UUIDSerializer for now...
1:75508ec:         public void serialize(StreamSummary summary, DataOutputPlus out, int version) throws IOException
1:5151169:         {
1:5151169:             UUIDSerializer.serializer.serialize(summary.cfId, out, MessagingService.current_version);
1:5151169:             out.writeInt(summary.files);
1:5151169:             out.writeLong(summary.totalSize);
1:5151169:         }
1:5151169: 
1:03f72ac:         public StreamSummary deserialize(DataInputPlus in, int version) throws IOException
1:5151169:         {
1:5151169:             UUID cfId = UUIDSerializer.serializer.deserialize(in, MessagingService.current_version);
1:5151169:             int files = in.readInt();
1:5151169:             long totalSize = in.readLong();
1:5151169:             return new StreamSummary(cfId, files, totalSize);
1:5151169:         }
1:5151169: 
1:5151169:         public long serializedSize(StreamSummary summary, int version)
1:5151169:         {
1:5151169:             long size = UUIDSerializer.serializer.serializedSize(summary.cfId, MessagingService.current_version);
1:03f72ac:             size += TypeSizes.sizeof(summary.files);
1:03f72ac:             size += TypeSizes.sizeof(summary.totalSize);
1:5151169:             return size;
1:5151169:         }
1:5151169:     }
1:5151169: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public StreamSummary deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeof(summary.files);
1:             size += TypeSizes.sizeof(summary.totalSize);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(StreamSummary summary, DataOutputPlus out, int version) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.util.UUID;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: /**
1:  * Summary of streaming.
1:  */
1: public class StreamSummary implements Serializable
1: {
1:     public static final IVersionedSerializer<StreamSummary> serializer = new StreamSummarySerializer();
1: 
1:     public final UUID cfId;
1: 
1:     /**
1:      * Number of files to transfer. Can be 0 if nothing to transfer for some streaming request.
1:      */
1:     public final int files;
1:     public final long totalSize;
1: 
1:     public StreamSummary(UUID cfId, int files, long totalSize)
1:     {
1:         this.cfId = cfId;
1:         this.files = files;
1:         this.totalSize = totalSize;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1:         StreamSummary summary = (StreamSummary) o;
1:         return files == summary.files && totalSize == summary.totalSize && cfId.equals(summary.cfId);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(cfId, files, totalSize);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         final StringBuilder sb = new StringBuilder("StreamSummary{");
1:         sb.append("path=").append(cfId);
1:         sb.append(", files=").append(files);
1:         sb.append(", totalSize=").append(totalSize);
1:         sb.append('}');
1:         return sb.toString();
1:     }
1: 
1:     public static class StreamSummarySerializer implements IVersionedSerializer<StreamSummary>
1:     {
1:         // arbitrary version is fine for UUIDSerializer for now...
0:         public void serialize(StreamSummary summary, DataOutput out, int version) throws IOException
1:         {
1:             UUIDSerializer.serializer.serialize(summary.cfId, out, MessagingService.current_version);
1:             out.writeInt(summary.files);
1:             out.writeLong(summary.totalSize);
1:         }
1: 
0:         public StreamSummary deserialize(DataInput in, int version) throws IOException
1:         {
1:             UUID cfId = UUIDSerializer.serializer.deserialize(in, MessagingService.current_version);
1:             int files = in.readInt();
1:             long totalSize = in.readLong();
1:             return new StreamSummary(cfId, files, totalSize);
1:         }
1: 
1:         public long serializedSize(StreamSummary summary, int version)
1:         {
1:             long size = UUIDSerializer.serializer.serializedSize(summary.cfId, MessagingService.current_version);
0:             size += TypeSizes.NATIVE.sizeof(summary.files);
0:             size += TypeSizes.NATIVE.sizeof(summary.totalSize);
1:             return size;
1:         }
1:     }
1: }
============================================================================