1:e0adc16: /*
1:e0adc16:  * Licensed to the Apache Software Foundation (ASF) under one
1:e0adc16:  * or more contributor license agreements.  See the NOTICE file
1:e0adc16:  * distributed with this work for additional information
1:e0adc16:  * regarding copyright ownership.  The ASF licenses this file
1:e0adc16:  * to you under the Apache License, Version 2.0 (the
1:e0adc16:  * "License"); you may not use this file except in compliance
1:e0adc16:  * with the License.  You may obtain a copy of the License at
1:e0adc16:  *
1:e0adc16:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e0adc16:  *
1:e0adc16:  * Unless required by applicable law or agreed to in writing, software
1:e0adc16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0adc16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0adc16:  * See the License for the specific language governing permissions and
1:e0adc16:  * limitations under the License.
1:e0adc16:  */
1:e0adc16: 
1:e0adc16: package org.apache.cassandra.transport;
1:e0adc16: 
1:e0adc16: import java.util.ArrayList;
1:e0adc16: import java.util.Arrays;
1:e0adc16: import java.util.EnumSet;
1:e0adc16: import java.util.List;
1:e0adc16: import java.util.Optional;
1:e0adc16: 
1:e0adc16: import org.apache.commons.lang3.ArrayUtils;
1:e0adc16: 
1:e0adc16: /**
1:e0adc16:  * The native (CQL binary) protocol version.
1:e0adc16:  *
1:e0adc16:  * Some versions may be in beta, which means that the client must
1:e0adc16:  * specify the beta flag in the frame for the version to be considered valid.
1:e0adc16:  * Beta versions must have the word "beta" in their description, this is mandated
1:e0adc16:  * by the specs.
1:e0adc16:  *
1:e0adc16:  */
1:e0adc16: public enum ProtocolVersion implements Comparable<ProtocolVersion>
1:e0adc16: {
1:e0adc16:     // The order is important as it defines the chronological history of versions, which is used
1:e0adc16:     // to determine if a feature is supported or some serdes formats
1:e0adc16:     V1(1, "v1", false), // no longer supported
1:e0adc16:     V2(2, "v2", false), // no longer supported
1:e0adc16:     V3(3, "v3", false),
1:e0adc16:     V4(4, "v4", false),
1:e0adc16:     V5(5, "v5-beta", true);
1:e0adc16: 
1:e0adc16:     /** The version number */
1:e0adc16:     private final int num;
1:e0adc16: 
1:e0adc16:     /** A description of the version, beta versions should have the word "-beta" */
1:e0adc16:     private final String descr;
1:e0adc16: 
1:e0adc16:     /** Set this to true for beta versions */
1:e0adc16:     private final boolean beta;
1:e0adc16: 
1:e0adc16:     ProtocolVersion(int num, String descr, boolean beta)
1:e0adc16:     {
1:e0adc16:         this.num = num;
1:e0adc16:         this.descr = descr;
1:e0adc16:         this.beta = beta;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     /** The supported versions stored as an array, these should be private and are required for fast decoding*/
1:e0adc16:     private final static ProtocolVersion[] SUPPORTED_VERSIONS = new ProtocolVersion[] { V3, V4, V5 };
1:e0adc16:     final static ProtocolVersion MIN_SUPPORTED_VERSION = SUPPORTED_VERSIONS[0];
1:e0adc16:     final static ProtocolVersion MAX_SUPPORTED_VERSION = SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];
1:e0adc16: 
1:e0adc16:     /** All supported versions, published as an enumset */
1:e0adc16:     public final static EnumSet<ProtocolVersion> SUPPORTED = EnumSet.copyOf(Arrays.asList((ProtocolVersion[]) ArrayUtils.addAll(SUPPORTED_VERSIONS)));
1:e0adc16: 
1:e0adc16:     /** Old unsupported versions, this is OK as long as we never add newer unsupported versions */
1:e0adc16:     public final static EnumSet<ProtocolVersion> UNSUPPORTED = EnumSet.complementOf(SUPPORTED);
1:e0adc16: 
1:e0adc16:     /** The preferred versions */
1:e0adc16:     public final static ProtocolVersion CURRENT = V4;
1:e0adc16:     public final static Optional<ProtocolVersion> BETA = Optional.of(V5);
1:e0adc16: 
1:e0adc16:     public static List<String> supportedVersions()
1:e0adc16:     {
1:e0adc16:         List<String> ret = new ArrayList<>(SUPPORTED.size());
1:e0adc16:         for (ProtocolVersion version : SUPPORTED)
1:e0adc16:             ret.add(version.toString());
1:e0adc16:         return ret;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public static ProtocolVersion decode(int versionNum)
1:e0adc16:     {
1:e0adc16:         ProtocolVersion ret = versionNum >= MIN_SUPPORTED_VERSION.num && versionNum <= MAX_SUPPORTED_VERSION.num
1:e0adc16:                               ? SUPPORTED_VERSIONS[versionNum - MIN_SUPPORTED_VERSION.num]
1:e0adc16:                               : null;
1:e0adc16: 
1:e0adc16:         if (ret == null)
1:e0adc16:         {
1:e0adc16:             // if this is not a supported version check the old versions
1:e0adc16:             for (ProtocolVersion version : UNSUPPORTED)
1:e0adc16:             {
1:e0adc16:                 // if it is an old version that is no longer supported this ensures that we reply
1:e0adc16:                 // with that same version
1:e0adc16:                 if (version.num == versionNum)
1:e0adc16:                     throw new ProtocolException(ProtocolVersion.invalidVersionMessage(versionNum), version);
1:e0adc16:             }
1:e0adc16: 
1:e0adc16:             // If the version is invalid reply with the highest version that we support
1:e0adc16:             throw new ProtocolException(invalidVersionMessage(versionNum), MAX_SUPPORTED_VERSION);
1:e0adc16:         }
1:e0adc16: 
1:e0adc16:         return ret;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public boolean isBeta()
1:e0adc16:     {
1:e0adc16:         return beta;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public static String invalidVersionMessage(int version)
1:e0adc16:     {
1:e0adc16:         return String.format("Invalid or unsupported protocol version (%d); supported versions are (%s)",
1:e0adc16:                              version, String.join(", ", ProtocolVersion.supportedVersions()));
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public int asInt()
1:e0adc16:     {
1:e0adc16:         return num;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     @Override
1:e0adc16:     public String toString()
1:e0adc16:     {
1:e0adc16:         // This format is mandated by the protocl specs for the SUPPORTED message, see OptionsMessage execute().
1:e0adc16:         return String.format("%d/%s", num, descr);
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public final boolean isGreaterThan(ProtocolVersion other)
1:e0adc16:     {
1:e0adc16:         return num > other.num;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public final boolean isGreaterOrEqualTo(ProtocolVersion other)
1:e0adc16:     {
1:e0adc16:         return num >= other.num;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public final boolean isSmallerThan(ProtocolVersion other)
1:e0adc16:     {
1:e0adc16:         return num < other.num;
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     public final boolean isSmallerOrEqualTo(ProtocolVersion other)
1:e0adc16:     {
1:e0adc16:         return num <= other.num;
1:e0adc16:     }
1:e0adc16: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.transport;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.EnumSet;
1: import java.util.List;
1: import java.util.Optional;
1: 
1: import org.apache.commons.lang3.ArrayUtils;
1: 
1: /**
1:  * The native (CQL binary) protocol version.
1:  *
1:  * Some versions may be in beta, which means that the client must
1:  * specify the beta flag in the frame for the version to be considered valid.
1:  * Beta versions must have the word "beta" in their description, this is mandated
1:  * by the specs.
1:  *
1:  */
1: public enum ProtocolVersion implements Comparable<ProtocolVersion>
1: {
1:     // The order is important as it defines the chronological history of versions, which is used
1:     // to determine if a feature is supported or some serdes formats
1:     V1(1, "v1", false), // no longer supported
1:     V2(2, "v2", false), // no longer supported
1:     V3(3, "v3", false),
1:     V4(4, "v4", false),
1:     V5(5, "v5-beta", true);
1: 
1:     /** The version number */
1:     private final int num;
1: 
1:     /** A description of the version, beta versions should have the word "-beta" */
1:     private final String descr;
1: 
1:     /** Set this to true for beta versions */
1:     private final boolean beta;
1: 
1:     ProtocolVersion(int num, String descr, boolean beta)
1:     {
1:         this.num = num;
1:         this.descr = descr;
1:         this.beta = beta;
1:     }
1: 
1:     /** The supported versions stored as an array, these should be private and are required for fast decoding*/
1:     private final static ProtocolVersion[] SUPPORTED_VERSIONS = new ProtocolVersion[] { V3, V4, V5 };
1:     final static ProtocolVersion MIN_SUPPORTED_VERSION = SUPPORTED_VERSIONS[0];
1:     final static ProtocolVersion MAX_SUPPORTED_VERSION = SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];
1: 
1:     /** All supported versions, published as an enumset */
1:     public final static EnumSet<ProtocolVersion> SUPPORTED = EnumSet.copyOf(Arrays.asList((ProtocolVersion[]) ArrayUtils.addAll(SUPPORTED_VERSIONS)));
1: 
1:     /** Old unsupported versions, this is OK as long as we never add newer unsupported versions */
1:     public final static EnumSet<ProtocolVersion> UNSUPPORTED = EnumSet.complementOf(SUPPORTED);
1: 
1:     /** The preferred versions */
1:     public final static ProtocolVersion CURRENT = V4;
1:     public final static Optional<ProtocolVersion> BETA = Optional.of(V5);
1: 
1:     public static List<String> supportedVersions()
1:     {
1:         List<String> ret = new ArrayList<>(SUPPORTED.size());
1:         for (ProtocolVersion version : SUPPORTED)
1:             ret.add(version.toString());
1:         return ret;
1:     }
1: 
1:     public static ProtocolVersion decode(int versionNum)
1:     {
1:         ProtocolVersion ret = versionNum >= MIN_SUPPORTED_VERSION.num && versionNum <= MAX_SUPPORTED_VERSION.num
1:                               ? SUPPORTED_VERSIONS[versionNum - MIN_SUPPORTED_VERSION.num]
1:                               : null;
1: 
1:         if (ret == null)
1:         {
1:             // if this is not a supported version check the old versions
1:             for (ProtocolVersion version : UNSUPPORTED)
1:             {
1:                 // if it is an old version that is no longer supported this ensures that we reply
1:                 // with that same version
1:                 if (version.num == versionNum)
1:                     throw new ProtocolException(ProtocolVersion.invalidVersionMessage(versionNum), version);
1:             }
1: 
1:             // If the version is invalid reply with the highest version that we support
1:             throw new ProtocolException(invalidVersionMessage(versionNum), MAX_SUPPORTED_VERSION);
1:         }
1: 
1:         return ret;
1:     }
1: 
1:     public boolean isBeta()
1:     {
1:         return beta;
1:     }
1: 
1:     public static String invalidVersionMessage(int version)
1:     {
1:         return String.format("Invalid or unsupported protocol version (%d); supported versions are (%s)",
1:                              version, String.join(", ", ProtocolVersion.supportedVersions()));
1:     }
1: 
1:     public int asInt()
1:     {
1:         return num;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         // This format is mandated by the protocl specs for the SUPPORTED message, see OptionsMessage execute().
1:         return String.format("%d/%s", num, descr);
1:     }
1: 
1:     public final boolean isGreaterThan(ProtocolVersion other)
1:     {
1:         return num > other.num;
1:     }
1: 
1:     public final boolean isGreaterOrEqualTo(ProtocolVersion other)
1:     {
1:         return num >= other.num;
1:     }
1: 
1:     public final boolean isSmallerThan(ProtocolVersion other)
1:     {
1:         return num < other.num;
1:     }
1: 
1:     public final boolean isSmallerOrEqualTo(ProtocolVersion other)
1:     {
1:         return num <= other.num;
1:     }
1: }
============================================================================