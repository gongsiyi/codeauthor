1:16806ab: /*
1:16806ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:16806ab:  * or more contributor license agreements.  See the NOTICE file
1:16806ab:  * distributed with this work for additional information
1:16806ab:  * regarding copyright ownership.  The ASF licenses this file
1:16806ab:  * to you under the Apache License, Version 2.0 (the
1:16806ab:  * "License"); you may not use this file except in compliance
1:16806ab:  * with the License.  You may obtain a copy of the License at
1:16806ab:  *
1:16806ab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:16806ab:  *
1:16806ab:  * Unless required by applicable law or agreed to in writing, software
1:16806ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16806ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16806ab:  * See the License for the specific language governing permissions and
1:16806ab:  * limitations under the License.
1:16806ab:  */
1:16806ab: package org.apache.cassandra.db.compaction;
6:16806ab: 
1:16806ab: import java.util.Map;
1:16806ab: 
1:16806ab: import org.apache.cassandra.exceptions.ConfigurationException;
1:16806ab: 
1:16806ab: public final class SizeTieredCompactionStrategyOptions
6:16806ab: {
1:16806ab:     protected static final long DEFAULT_MIN_SSTABLE_SIZE = 50L * 1024L * 1024L;
1:16806ab:     protected static final double DEFAULT_BUCKET_LOW = 0.5;
1:16806ab:     protected static final double DEFAULT_BUCKET_HIGH = 1.5;
1:16806ab:     protected static final String MIN_SSTABLE_SIZE_KEY = "min_sstable_size";
1:16806ab:     protected static final String BUCKET_LOW_KEY = "bucket_low";
1:16806ab:     protected static final String BUCKET_HIGH_KEY = "bucket_high";
1:16806ab: 
1:16806ab:     protected long minSSTableSize;
1:16806ab:     protected double bucketLow;
1:16806ab:     protected double bucketHigh;
1:16806ab: 
1:16806ab:     public SizeTieredCompactionStrategyOptions(Map<String, String> options)
1:16806ab:     {
1:16806ab:         String optionValue = options.get(MIN_SSTABLE_SIZE_KEY);
1:16806ab:         minSSTableSize = optionValue == null ? DEFAULT_MIN_SSTABLE_SIZE : Long.parseLong(optionValue);
2:16806ab:         optionValue = options.get(BUCKET_LOW_KEY);
2:16806ab:         bucketLow = optionValue == null ? DEFAULT_BUCKET_LOW : Double.parseDouble(optionValue);
2:16806ab:         optionValue = options.get(BUCKET_HIGH_KEY);
2:16806ab:         bucketHigh = optionValue == null ? DEFAULT_BUCKET_HIGH : Double.parseDouble(optionValue);
7:16806ab:     }
1:16806ab: 
1:16806ab:     public SizeTieredCompactionStrategyOptions()
1:16806ab:     {
1:16806ab:         minSSTableSize = DEFAULT_MIN_SSTABLE_SIZE;
1:16806ab:         bucketLow = DEFAULT_BUCKET_LOW;
1:16806ab:         bucketHigh = DEFAULT_BUCKET_HIGH;
1:786672e:     }
1:786672e: 
1:786672e:     private static double parseDouble(Map<String, String> options, String key, double defaultValue) throws ConfigurationException
1:786672e:     {
1:786672e:         String optionValue = options.get(key);
1:786672e:         try
1:786672e:         {
1:786672e:             return optionValue == null ? defaultValue : Double.parseDouble(optionValue);
1:786672e:         }
1:786672e:         catch (NumberFormatException e)
1:786672e:         {
1:786672e:             throw new ConfigurationException(String.format("%s is not a parsable float for %s", optionValue, key), e);
1:786672e:         }
1:16806ab:     }
1:16806ab: 
1:16806ab:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws ConfigurationException
1:16806ab:     {
1:16806ab:         String optionValue = options.get(MIN_SSTABLE_SIZE_KEY);
3:16806ab:         try
1:16806ab:         {
1:16806ab:             long minSSTableSize = optionValue == null ? DEFAULT_MIN_SSTABLE_SIZE : Long.parseLong(optionValue);
1:16806ab:             if (minSSTableSize < 0)
1:16806ab:             {
1:16806ab:                 throw new ConfigurationException(String.format("%s must be non negative: %d", MIN_SSTABLE_SIZE_KEY, minSSTableSize));
1:16806ab:             }
1:16806ab:         }
3:16806ab:         catch (NumberFormatException e)
1:16806ab:         {
1:16806ab:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MIN_SSTABLE_SIZE_KEY), e);
1:16806ab:         }
1:16806ab: 
1:786672e:         double bucketLow = parseDouble(options, BUCKET_LOW_KEY, DEFAULT_BUCKET_LOW);
1:786672e:         double bucketHigh = parseDouble(options, BUCKET_HIGH_KEY, DEFAULT_BUCKET_HIGH);
1:16806ab:         if (bucketHigh <= bucketLow)
1:786672e:         {
1:786672e:             throw new ConfigurationException(String.format("%s value (%s) is less than or equal to the %s value (%s)",
1:786672e:                                                            BUCKET_HIGH_KEY, bucketHigh, BUCKET_LOW_KEY, bucketLow));
1:786672e:         }
1:786672e: 
1:16806ab:         uncheckedOptions.remove(MIN_SSTABLE_SIZE_KEY);
1:16806ab:         uncheckedOptions.remove(BUCKET_LOW_KEY);
1:16806ab:         uncheckedOptions.remove(BUCKET_HIGH_KEY);
1:16806ab: 
1:16806ab:         return uncheckedOptions;
1:786672e:     }
1:16806ab: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:33a9ada
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9e2ccc1
/////////////////////////////////////////////////////////////////////////
0:     protected static final double DEFAULT_COLD_READS_TO_OMIT = 0.05;
commit:eb6e4d0
/////////////////////////////////////////////////////////////////////////
0:     protected static final String COLD_READS_TO_OMIT_KEY = "cold_reads_to_omit";
/////////////////////////////////////////////////////////////////////////
0:         optionValue = options.get(COLD_READS_TO_OMIT_KEY);
/////////////////////////////////////////////////////////////////////////
0:         double maxColdReadsRatio = parseDouble(options, COLD_READS_TO_OMIT_KEY, DEFAULT_COLD_READS_TO_OMIT);
0:                                                            COLD_READS_TO_OMIT_KEY, optionValue));
0:         uncheckedOptions.remove(COLD_READS_TO_OMIT_KEY);
commit:786672e
/////////////////////////////////////////////////////////////////////////
0:     protected static final double DEFAULT_COLD_READS_TO_OMIT = 0.0;
0:     protected static final String MAX_COLD_READS_RATIO_KEY = "max_cold_reads_ratio";
0:     protected double coldReadsToOmit;
0:         optionValue = options.get(MAX_COLD_READS_RATIO_KEY);
0:         coldReadsToOmit = optionValue == null ? DEFAULT_COLD_READS_TO_OMIT : Double.parseDouble(optionValue);
0:         coldReadsToOmit = DEFAULT_COLD_READS_TO_OMIT;
1:     }
1: 
1:     private static double parseDouble(Map<String, String> options, String key, double defaultValue) throws ConfigurationException
1:     {
1:         String optionValue = options.get(key);
1:         try
1:         {
1:             return optionValue == null ? defaultValue : Double.parseDouble(optionValue);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable float for %s", optionValue, key), e);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         double bucketLow = parseDouble(options, BUCKET_LOW_KEY, DEFAULT_BUCKET_LOW);
1:         double bucketHigh = parseDouble(options, BUCKET_HIGH_KEY, DEFAULT_BUCKET_HIGH);
1:             throw new ConfigurationException(String.format("%s value (%s) is less than or equal to the %s value (%s)",
1:                                                            BUCKET_HIGH_KEY, bucketHigh, BUCKET_LOW_KEY, bucketLow));
1:         }
1: 
0:         double maxColdReadsRatio = parseDouble(options, MAX_COLD_READS_RATIO_KEY, DEFAULT_COLD_READS_TO_OMIT);
0:         if (maxColdReadsRatio < 0.0 || maxColdReadsRatio > 1.0)
1:         {
0:             throw new ConfigurationException(String.format("%s value (%s) should be between between 0.0 and 1.0",
0:                                                            MAX_COLD_READS_RATIO_KEY, optionValue));
0:         uncheckedOptions.remove(MAX_COLD_READS_RATIO_KEY);
1: }
commit:16806ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
1: 
1: import java.util.Map;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: public final class SizeTieredCompactionStrategyOptions
1: {
1:     protected static final long DEFAULT_MIN_SSTABLE_SIZE = 50L * 1024L * 1024L;
1:     protected static final double DEFAULT_BUCKET_LOW = 0.5;
1:     protected static final double DEFAULT_BUCKET_HIGH = 1.5;
1:     protected static final String MIN_SSTABLE_SIZE_KEY = "min_sstable_size";
1:     protected static final String BUCKET_LOW_KEY = "bucket_low";
1:     protected static final String BUCKET_HIGH_KEY = "bucket_high";
1: 
1:     protected long minSSTableSize;
1:     protected double bucketLow;
1:     protected double bucketHigh;
1: 
1:     public SizeTieredCompactionStrategyOptions(Map<String, String> options)
1:     {
1: 
1:         String optionValue = options.get(MIN_SSTABLE_SIZE_KEY);
1:         minSSTableSize = optionValue == null ? DEFAULT_MIN_SSTABLE_SIZE : Long.parseLong(optionValue);
1:         optionValue = options.get(BUCKET_LOW_KEY);
1:         bucketLow = optionValue == null ? DEFAULT_BUCKET_LOW : Double.parseDouble(optionValue);
1:         optionValue = options.get(BUCKET_HIGH_KEY);
1:         bucketHigh = optionValue == null ? DEFAULT_BUCKET_HIGH : Double.parseDouble(optionValue);
1:     }
1: 
1:     public SizeTieredCompactionStrategyOptions()
1:     {
1: 
1:         minSSTableSize = DEFAULT_MIN_SSTABLE_SIZE;
1:         bucketLow = DEFAULT_BUCKET_LOW;
1:         bucketHigh = DEFAULT_BUCKET_HIGH;
1:     }
1: 
1:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws ConfigurationException
1:     {
1:         String optionValue = options.get(MIN_SSTABLE_SIZE_KEY);
1:         try
1:         {
1:             long minSSTableSize = optionValue == null ? DEFAULT_MIN_SSTABLE_SIZE : Long.parseLong(optionValue);
1:             if (minSSTableSize < 0)
1:             {
1:                 throw new ConfigurationException(String.format("%s must be non negative: %d", MIN_SSTABLE_SIZE_KEY, minSSTableSize));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MIN_SSTABLE_SIZE_KEY), e);
1:         }
1: 
0:         double bucketLow, bucketHigh;
1:         optionValue = options.get(BUCKET_LOW_KEY);
1:         try
1:         {
1:             bucketLow = optionValue == null ? DEFAULT_BUCKET_LOW : Double.parseDouble(optionValue);
1:         }
1:         catch (NumberFormatException e)
1:         {
0:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, DEFAULT_BUCKET_LOW), e);
1:         }
1: 
1:         optionValue = options.get(BUCKET_HIGH_KEY);
1:         try
1:         {
1:             bucketHigh = optionValue == null ? DEFAULT_BUCKET_HIGH : Double.parseDouble(optionValue);
1:         }
1:         catch (NumberFormatException e)
1:         {
0:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, DEFAULT_BUCKET_HIGH), e);
1:         }
1: 
1:         if (bucketHigh <= bucketLow)
1:         {
0:             throw new ConfigurationException(String.format("Bucket high value (%s) is less than or equal bucket low value (%s)", bucketHigh, bucketLow));
1:         }
1: 
1:         uncheckedOptions.remove(MIN_SSTABLE_SIZE_KEY);
1:         uncheckedOptions.remove(BUCKET_LOW_KEY);
1:         uncheckedOptions.remove(BUCKET_HIGH_KEY);
1: 
1:         return uncheckedOptions;
1:     }
1: }
============================================================================