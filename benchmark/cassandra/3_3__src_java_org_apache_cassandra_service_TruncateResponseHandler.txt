1:07cf56f: /*
1:8a3543a:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a3543a:  * or more contributor license agreements.  See the NOTICE file
1:8a3543a:  * distributed with this work for additional information
1:8a3543a:  * regarding copyright ownership.  The ASF licenses this file
1:8a3543a:  * to you under the Apache License, Version 2.0 (the
1:8a3543a:  * "License"); you may not use this file except in compliance
1:8a3543a:  * with the License.  You may obtain a copy of the License at
1:8a3543a:  *
1:8a3543a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a3543a:  *
1:8a3543a:  * Unless required by applicable law or agreed to in writing, software
1:8a3543a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a3543a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a3543a:  * See the License for the specific language governing permissions and
1:8a3543a:  * limitations under the License.
1:8a3543a:  */
1:8a3543a: package org.apache.cassandra.service;
5:8a3543a: 
1:8a3543a: import java.util.concurrent.TimeUnit;
1:8a3543a: import java.util.concurrent.TimeoutException;
1:8a3543a: import java.util.concurrent.atomic.AtomicInteger;
1:8a3543a: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:8a3543a: import org.apache.cassandra.config.DatabaseDescriptor;
1:8a3543a: import org.apache.cassandra.net.IAsyncCallback;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5420b7a: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1:8a3543a: 
1:8a3543a: public class TruncateResponseHandler implements IAsyncCallback
8:8a3543a: {
1:8a3543a:     protected static final Logger logger = LoggerFactory.getLogger(TruncateResponseHandler.class);
1:8a3543a:     protected final SimpleCondition condition = new SimpleCondition();
1:8a3543a:     private final int responseCount;
1:5a6e2b0:     protected final AtomicInteger responses = new AtomicInteger(0);
1:1d2c122:     private final long start;
1:8a3543a: 
1:5a45534:     public TruncateResponseHandler(int responseCount)
1:8a3543a:     {
1:8a3543a:         // at most one node per range can bootstrap at a time, and these will be added to the write until
1:8a3543a:         // bootstrap finishes (at which point we no longer need to write to the old ones).
1:8a3543a:         assert 1 <= responseCount: "invalid response count " + responseCount;
1:8a3543a: 
1:8a3543a:         this.responseCount = responseCount;
1:1d2c122:         start = System.nanoTime();
8:8a3543a:     }
1:8a3543a: 
1:8a3543a:     public void get() throws TimeoutException
1:8a3543a:     {
1:1d2c122:         long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getTruncateRpcTimeout()) - (System.nanoTime() - start);
1:5a45534:         boolean success;
2:8a3543a:         try
1:8a3543a:         {
1:1d2c122:             success = condition.await(timeout, TimeUnit.NANOSECONDS); // TODO truncate needs a much longer timeout
1:8a3543a:         }
1:5a45534:         catch (InterruptedException ex)
1:8a3543a:         {
1:5a45534:             throw new AssertionError(ex);
1:5a45534:         }
1:5a45534: 
1:5a45534:         if (!success)
1:5a45534:         {
1:5a45534:             throw new TimeoutException("Truncate timed out - received only " + responses.get() + " responses");
1:8a3543a:         }
1:8a3543a:     }
1:8a3543a: 
1:5d46a01:     public void response(MessageIn message)
1:8a3543a:     {
1:5a45534:         responses.incrementAndGet();
1:5a45534:         if (responses.get() >= responseCount)
1:3ec4ff5:             condition.signalAll();
1:8a3543a:     }
1:dc9992a: 
1:dc9992a:     public boolean isLatencyForSnitch()
1:dc9992a:     {
1:dc9992a:         return false;
1:dc9992a:     }
1:8a3543a: }
============================================================================
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.concurrent.SimpleCondition;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:3ec4ff5
/////////////////////////////////////////////////////////////////////////
1:             condition.signalAll();
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
1:     private final long start;
/////////////////////////////////////////////////////////////////////////
1:         start = System.nanoTime();
1:         long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getTruncateRpcTimeout()) - (System.nanoTime() - start);
1:             success = condition.await(timeout, TimeUnit.NANOSECONDS); // TODO truncate needs a much longer timeout
commit:e6610e4
/////////////////////////////////////////////////////////////////////////
0:         long timeout = DatabaseDescriptor.getTruncateRpcTimeout() - (System.currentTimeMillis() - startTime);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
1:     public void response(MessageIn message)
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return false;
1:     }
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
commit:5a45534
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected AtomicInteger responses = new AtomicInteger(0);
1:     public TruncateResponseHandler(int responseCount)
0:         long timeout = DatabaseDescriptor.getRpcTimeout() - (System.currentTimeMillis() - startTime);
1:         boolean success;
0:             success = condition.await(timeout, TimeUnit.MILLISECONDS); // TODO truncate needs a much longer timeout
1:         catch (InterruptedException ex)
1:             throw new AssertionError(ex);
1:         }
1: 
1:         if (!success)
1:         {
1:             throw new TimeoutException("Truncate timed out - received only " + responses.get() + " responses");
1:         responses.incrementAndGet();
1:         if (responses.get() >= responseCount)
commit:8a3543a
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.service;
1: 
0: import java.util.Collection;
0: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.net.IAsyncCallback;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.SimpleCondition;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class TruncateResponseHandler implements IAsyncCallback
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(TruncateResponseHandler.class);
1:     protected final SimpleCondition condition = new SimpleCondition();
1:     private final int responseCount;
0:     protected final Collection<Message> responses;
0:     protected AtomicInteger localResponses = new AtomicInteger(0);
0:     private final long startTime;
1: 
0:     public TruncateResponseHandler(int responseCount, String table)
1:     {
1:         // at most one node per range can bootstrap at a time, and these will be added to the write until
1:         // bootstrap finishes (at which point we no longer need to write to the old ones).
1:         assert 1 <= responseCount: "invalid response count " + responseCount;
1: 
1:         this.responseCount = responseCount;
0:         responses = new LinkedBlockingQueue<Message>();
0:         startTime = System.currentTimeMillis();
1:     }
1: 
1:     public void get() throws TimeoutException
1:     {
1:         try
1:         {
0:             long timeout = DatabaseDescriptor.getRpcTimeout() - (System.currentTimeMillis() - startTime);
0:             boolean success;
1:             try
1:             {
0:                 success = condition.await(timeout, TimeUnit.MILLISECONDS);
1:             }
0:             catch (InterruptedException ex)
1:             {
0:                 throw new AssertionError(ex);
1:             }
1: 
0:             if (!success)
1:             {
0:                 throw new TimeoutException("Operation timed out - received only " + responses.size() + localResponses + " responses");
1:             }
1:         }
0:         finally
1:         {
0:             for (Message response : responses)
1:             {
0:                 MessagingService.removeRegisteredCallback(response.getMessageId());
1:             }
1:         }
1:     }
1: 
0:     public void response(Message message)
1:     {
0:         responses.add(message);
0:         maybeSignal();
1:     }
1: 
0:     public void localResponse()
1:     {
0:         localResponses.addAndGet(1);
0:         maybeSignal();
1:     }
1: 
0:     private void maybeSignal()
1:     {
0:         if (responses.size() + localResponses.get() >= responseCount)
1:         {
0:             condition.signal();
1:         }
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     protected final AtomicInteger responses = new AtomicInteger(0);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
============================================================================