1:68be72f: /*
1:68be72f:  * Licensed to the Apache Software Foundation (ASF) under one
1:68be72f:  * or more contributor license agreements.  See the NOTICE file
1:68be72f:  * distributed with this work for additional information
1:68be72f:  * regarding copyright ownership.  The ASF licenses this file
1:68be72f:  * to you under the Apache License, Version 2.0 (the
1:68be72f:  * "License"); you may not use this file except in compliance
1:68be72f:  * with the License.  You may obtain a copy of the License at
1:68be72f:  *
1:68be72f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:68be72f:  *
1:68be72f:  * Unless required by applicable law or agreed to in writing, software
1:68be72f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:68be72f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:68be72f:  * See the License for the specific language governing permissions and
1:68be72f:  * limitations under the License.
1:68be72f:  */
1:68be72f: package org.apache.cassandra.cql3;
1:68be72f: 
1:68be72f: import java.util.Locale;
1:68be72f: 
1:68be72f: /**
1:68be72f:  * Base class for the names of the keyspace elements (e.g. table, index ...)
1:68be72f:  */
1:68be72f: abstract class KeyspaceElementName
1:68be72f: {
1:68be72f:     /**
1:68be72f:      * The keyspace name as stored internally.
1:68be72f:      */
1:68be72f:     private String ksName;
1:68be72f: 
1:68be72f:     /**
1:68be72f:      * Sets the keyspace.
1:68be72f:      *
1:68be72f:      * @param ks the keyspace name
1:68be72f:      * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.
1:68be72f:      */
1:68be72f:     public final void setKeyspace(String ks, boolean keepCase)
1:68be72f:     {
1:68be72f:         ksName = toInternalName(ks, keepCase);
1:68be72f:     }
1:68be72f: 
1:68be72f:     /**
1:68be72f:      * Checks if the keyspace is specified.
1:68be72f:      * @return <code>true</code> if the keyspace is specified, <code>false</code> otherwise.
1:68be72f:      */
1:68be72f:     public final boolean hasKeyspace()
1:68be72f:     {
1:68be72f:         return ksName != null;
1:68be72f:     }
1:68be72f: 
1:68be72f:     public final String getKeyspace()
1:68be72f:     {
1:68be72f:         return ksName;
1:68be72f:     }
1:68be72f: 
1:68be72f:     /**
1:68be72f:      * Converts the specified name into the name used internally.
1:68be72f:      *
1:68be72f:      * @param name the name
1:68be72f:      * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.
1:68be72f:      * @return the name used internally.
1:68be72f:      */
1:68be72f:     protected static String toInternalName(String name, boolean keepCase)
1:68be72f:     {
1:68be72f:         return keepCase ? name : name.toLowerCase(Locale.US);
1:68be72f:     }
1:68be72f: 
1:68be72f:     @Override
1:68be72f:     public String toString()
1:68be72f:     {
1:68be72f:         return hasKeyspace() ? (getKeyspace() + ".") : "";
1:68be72f:     }
1:68be72f: }
============================================================================
author:blerer
-------------------------------------------------------------------------------
commit:68be72f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Locale;
1: 
1: /**
1:  * Base class for the names of the keyspace elements (e.g. table, index ...)
1:  */
1: abstract class KeyspaceElementName
1: {
1:     /**
1:      * The keyspace name as stored internally.
1:      */
1:     private String ksName;
1: 
1:     /**
1:      * Sets the keyspace.
1:      *
1:      * @param ks the keyspace name
1:      * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.
1:      */
1:     public final void setKeyspace(String ks, boolean keepCase)
1:     {
1:         ksName = toInternalName(ks, keepCase);
1:     }
1: 
1:     /**
1:      * Checks if the keyspace is specified.
1:      * @return <code>true</code> if the keyspace is specified, <code>false</code> otherwise.
1:      */
1:     public final boolean hasKeyspace()
1:     {
1:         return ksName != null;
1:     }
1: 
1:     public final String getKeyspace()
1:     {
1:         return ksName;
1:     }
1: 
1:     /**
1:      * Converts the specified name into the name used internally.
1:      *
1:      * @param name the name
1:      * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.
1:      * @return the name used internally.
1:      */
1:     protected static String toInternalName(String name, boolean keepCase)
1:     {
1:         return keepCase ? name : name.toLowerCase(Locale.US);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return hasKeyspace() ? (getKeyspace() + ".") : "";
1:     }
1: }
============================================================================