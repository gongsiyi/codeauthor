1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.text.Normalizer;
1:72790dc: import java.util.Iterator;
1:72790dc: import java.util.Map;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public abstract class AbstractAnalyzer implements Iterator<ByteBuffer>
1:72790dc: {
1:72790dc:     protected ByteBuffer next = null;
1:72790dc: 
1:72790dc:     public ByteBuffer next()
1:72790dc:     {
1:72790dc:         return next;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void remove()
1:72790dc:     {
1:72790dc:         throw new UnsupportedOperationException();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public abstract void init(Map<String, String> options, AbstractType validator);
1:72790dc: 
1:72790dc:     public abstract void reset(ByteBuffer input);
1:72790dc: 
1:479e8af:     /**
1:479e8af:      * @return true if current analyzer provides text tokenization, false otherwise.
1:479e8af:      */
1:479e8af:     public boolean isTokenizing()
1:479e8af:     {
1:479e8af:         return false;
1:479e8af:     }
1:479e8af: 
1:72790dc:     public static String normalize(String original)
1:72790dc:     {
1:72790dc:         return Normalizer.isNormalized(original, Normalizer.Form.NFC)
1:72790dc:                 ? original
1:72790dc:                 : Normalizer.normalize(original, Normalizer.Form.NFC);
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:479e8af
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if current analyzer provides text tokenization, false otherwise.
1:      */
1:     public boolean isTokenizing()
1:     {
1:         return false;
1:     }
1: 
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.nio.ByteBuffer;
1: import java.text.Normalizer;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public abstract class AbstractAnalyzer implements Iterator<ByteBuffer>
1: {
1:     protected ByteBuffer next = null;
1: 
1:     public ByteBuffer next()
1:     {
1:         return next;
1:     }
1: 
1:     public void remove()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public abstract void init(Map<String, String> options, AbstractType validator);
1: 
1:     public abstract void reset(ByteBuffer input);
1: 
1:     public static String normalize(String original)
1:     {
1:         return Normalizer.isNormalized(original, Normalizer.Form.NFC)
1:                 ? original
1:                 : Normalizer.normalize(original, Normalizer.Form.NFC);
1:     }
1: }
============================================================================