1:07cf56f: /*
1:8a3543a:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a3543a:  * or more contributor license agreements.  See the NOTICE file
1:8a3543a:  * distributed with this work for additional information
1:8a3543a:  * regarding copyright ownership.  The ASF licenses this file
1:8a3543a:  * to you under the Apache License, Version 2.0 (the
1:8a3543a:  * "License"); you may not use this file except in compliance
1:8a3543a:  * with the License.  You may obtain a copy of the License at
3:8a3543a:  *
1:8a3543a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a3543a:  *
1:8a3543a:  * Unless required by applicable law or agreed to in writing, software
1:8a3543a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a3543a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a3543a:  * See the License for the specific language governing permissions and
1:8a3543a:  * limitations under the License.
2:8a3543a:  */
1:8a3543a: package org.apache.cassandra.db;
6:8a3543a: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:debb15e: import org.apache.cassandra.io.FSError;
1:8a3543a: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:8a3543a: import org.apache.cassandra.net.MessagingService;
1:d7ff10d: import org.apache.cassandra.tracing.Tracing;
1:8a3543a: 
1:a06be23: public class TruncateVerbHandler implements IVerbHandler<Truncation>
7:8a3543a: {
1:5a6e2b0:     private static final Logger logger = LoggerFactory.getLogger(TruncateVerbHandler.class);
1:8a3543a: 
1:1936648:     public void doVerb(MessageIn<Truncation> message, int id)
1:8a3543a:     {
1:debb15e:         Truncation t = message.payload;
1:d7ff10d:         Tracing.trace("Applying truncation of {}.{}", t.keyspace, t.columnFamily);
2:8a3543a:         try
1:8a3543a:         {
1:0e96e58:             ColumnFamilyStore cfs = Keyspace.open(t.keyspace).getColumnFamilyStore(t.columnFamily);
1:d72e938:             cfs.truncateBlocking();
7:8a3543a:         }
1:debb15e:         catch (Exception e)
1:8a3543a:         {
1:debb15e:             logger.error("Error in truncation", e);
1:debb15e:             respondError(t, message);
1:debb15e: 
1:debb15e:             if (FSError.findNested(e) != null)
1:debb15e:                 throw FSError.findNested(e);
1:8a3543a:         }
1:d7ff10d:         Tracing.trace("Enqueuing response to truncate operation to {}", message.from);
1:debb15e: 
1:debb15e:         TruncateResponse response = new TruncateResponse(t.keyspace, t.columnFamily, true);
1:d7ff10d:         logger.trace("{} applied.  Enqueuing response to {}@{} ", new Object[]{ t, id, message.from });
1:debb15e:         MessagingService.instance().sendReply(response.createMessage(), id, message.from);
1:8a3543a:     }
1:8a3543a: 
1:debb15e:     private static void respondError(Truncation t, MessageIn truncateRequestMessage)
1:8a3543a:     {
1:8a3543a:         TruncateResponse response = new TruncateResponse(t.keyspace, t.columnFamily, false);
1:a06be23:         MessagingService.instance().sendOneWay(response.createMessage(), truncateRequestMessage.from);
1:8a3543a:     }
1:8a3543a: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:             ColumnFamilyStore cfs = Keyspace.open(t.keyspace).getColumnFamilyStore(t.columnFamily);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d72e938
/////////////////////////////////////////////////////////////////////////
1:             cfs.truncateBlocking();
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn<Truncation> message, int id)
commit:6adf52c
/////////////////////////////////////////////////////////////////////////
0:         logger.debug("{} applied.  Enqueuing response to {}@{} ", new Object[]{ t, id, message.from });
commit:debb15e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.FSError;
/////////////////////////////////////////////////////////////////////////
1:         Truncation t = message.payload;
0:         logger.debug("Applying {}", t);
0:             ColumnFamilyStore cfs = Table.open(t.keyspace).getColumnFamilyStore(t.columnFamily);
0:             cfs.truncate().get();
1:         catch (Exception e)
1:             logger.error("Error in truncation", e);
1:             respondError(t, message);
1: 
1:             if (FSError.findNested(e) != null)
1:                 throw FSError.findNested(e);
0:         logger.debug("Truncate operation succeeded at this host");
1: 
1:         TruncateResponse response = new TruncateResponse(t.keyspace, t.columnFamily, true);
0:         logger.debug("{} applied.  Sending response to {}@{} ", new Object[]{ t, id, message.from });
1:         MessagingService.instance().sendReply(response.createMessage(), id, message.from);
1:     private static void respondError(Truncation t, MessageIn truncateRequestMessage)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1: public class TruncateVerbHandler implements IVerbHandler<Truncation>
0:     public void doVerb(MessageIn<Truncation> message, String id)
0:             Truncation t = message.payload;
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("{} applied.  Sending response to {}@{} ", new Object[]{ t, id, message.from });
0:             MessagingService.instance().sendReply(response.createMessage(), id, message.from);
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().sendOneWay(response.createMessage(), truncateRequestMessage.from);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
0:     public void doVerb(MessageIn message, String id)
/////////////////////////////////////////////////////////////////////////
0:     private static void respondError(Truncation t, MessageIn truncateRequestMessage) throws IOException
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream in = new DataInputStream(new FastByteArrayInputStream(message.getMessageBody()));
0:             Truncation t = Truncation.serializer().deserialize(in, message.getVersion());
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendReply(response.createMessage(), id, message.getFrom());
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().sendOneWay(response.createMessage(), truncateRequestMessage.getFrom());
commit:f5f96c1
commit:cd60613
/////////////////////////////////////////////////////////////////////////
0:                 ColumnFamilyStore cfs = Table.open(t.keyspace).getColumnFamilyStore(t.columnFamily);
0:                 cfs.truncate().get();
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("{} applied.  Sending response to {}@{} ", new Object[]{ t, id, message.getFrom()});
0:             MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
commit:7f4e3eb
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("{} applied.  Sending response to {}@{} ", new Object[]{ t, id, message.getFrom()});
0:             MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendOneWay(responseMessage, message.getFrom());
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().sendOneWay(responseMessage, truncateRequestMessage.getFrom());
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
commit:8a3543a
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.util.concurrent.ExecutionException;
1: 
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: /**
0:  * Handles the TRUNCATE verb
1:  *
0:  * @author rantav@gmail.com
1:  *
1:  */
0: public class TruncateVerbHandler implements IVerbHandler
1: {
0:     private static Logger logger = LoggerFactory.getLogger(TruncateVerbHandler.class);
1: 
0:     public void doVerb(Message message)
1:     {
0:         byte[] bytes = message.getMessageBody();
0:         ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
1: 
1:         try
1:         {
0:             Truncation t = Truncation.serializer().deserialize(new DataInputStream(buffer));
0:             logger.debug("Applying {}", t);
1: 
1:             try
1:             {
0:                 Table.open(t.keyspace).truncate(t.columnFamily);
1:             }
0:             catch (IOException e)
1:             {
0:                 logger.error("Error in truncation", e);
0:                 respondError(t, message);
0:                 throw e;
1:             }
0:             catch (InterruptedException e)
1:             {
0:                 logger.error("Error in truncation", e);
0:                 respondError(t, message);
0:                 throw e;
1:             }
0:             catch (ExecutionException e)
1:             {
0:                 logger.error("Error in truncation", e);
0:                 respondError(t, message);
0:                 throw e;
1:             }
0:             logger.debug("Truncate operation succeeded at this host");
1: 
0:             TruncateResponse response = new TruncateResponse(t.keyspace, t.columnFamily, true);
0:             Message responseMessage = TruncateResponse.makeTruncateResponseMessage(message, response);
0:             logger.debug("{} applied.  Sending response to {}@{} ",
0:                     new Object[]{t, message.getMessageId(), message.getFrom()});
0:             MessagingService.instance.sendOneWay(responseMessage, message.getFrom());
1:         }
0:         catch (IOException e)
1:         {
0:             logger.error("Error in truncation", e);
0:             throw new RuntimeException("Error in truncation", e);
1:         }
0:         catch (InterruptedException e)
1:         {
0:             logger.error("Error in truncation", e);
0:             throw new RuntimeException("Error in truncation", e);
1:         }
0:         catch (ExecutionException e)
1:         {
0:             logger.error("Error in truncation", e);
0:             throw new RuntimeException("Error in truncation", e);
1:         }
1:     }
1: 
0:     private static void respondError(Truncation t, Message truncateRequestMessage) throws IOException
1:     {
1:         TruncateResponse response = new TruncateResponse(t.keyspace, t.columnFamily, false);
0:         Message responseMessage = TruncateResponse.makeTruncateResponseMessage(truncateRequestMessage, response);
0:         MessagingService.instance.sendOneWay(responseMessage, truncateRequestMessage.getFrom());
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d7ff10d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.tracing.Tracing;
/////////////////////////////////////////////////////////////////////////
1:         Tracing.trace("Applying truncation of {}.{}", t.keyspace, t.columnFamily);
/////////////////////////////////////////////////////////////////////////
1:         Tracing.trace("Enqueuing response to truncate operation to {}", message.from);
1:         logger.trace("{} applied.  Enqueuing response to {}@{} ", new Object[]{ t, id, message.from });
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(TruncateVerbHandler.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         FastByteArrayInputStream buffer = new FastByteArrayInputStream(bytes);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:e970b03
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOError;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             catch (Exception e)
/////////////////////////////////////////////////////////////////////////
0:             throw new IOError(e);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             Truncation t = Truncation.serializer().deserialize(new DataInputStream(buffer), message.getVersion());
============================================================================