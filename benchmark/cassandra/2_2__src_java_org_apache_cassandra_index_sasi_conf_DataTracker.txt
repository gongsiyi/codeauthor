1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf;
1:72790dc: 
1:72790dc: import java.io.File;
1:72790dc: import java.util.Collection;
1:72790dc: import java.util.Collections;
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.Set;
1:72790dc: import java.util.concurrent.atomic.AtomicReference;
1:72790dc: import java.util.stream.Collectors;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.index.sasi.SSTableIndex;
1:72790dc: import org.apache.cassandra.index.sasi.conf.view.View;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:72790dc: 
1:72790dc: import com.google.common.collect.Sets;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: /** a pared-down version of DataTracker and DT.View. need one for each index of each column family */
1:72790dc: public class DataTracker
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(DataTracker.class);
1:72790dc: 
1:72790dc:     private final AbstractType<?> keyValidator;
1:72790dc:     private final ColumnIndex columnIndex;
1:72790dc:     private final AtomicReference<View> view = new AtomicReference<>();
1:72790dc: 
1:72790dc:     public DataTracker(AbstractType<?> keyValidator, ColumnIndex index)
1:72790dc:     {
1:72790dc:         this.keyValidator = keyValidator;
1:72790dc:         this.columnIndex = index;
1:72790dc:         this.view.set(new View(index, Collections.<SSTableIndex>emptySet()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public View getView()
1:72790dc:     {
1:72790dc:         return view.get();
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Replaces old SSTables with new by creating new immutable tracker.
1:72790dc:      *
1:72790dc:      * @param oldSSTables A set of SSTables to remove.
1:72790dc:      * @param newSSTables A set of SSTables to add to tracker.
1:72790dc:      *
1:72790dc:      * @return A collection of SSTables which don't have component attached for current index.
1:72790dc:      */
1:72790dc:     public Iterable<SSTableReader> update(Collection<SSTableReader> oldSSTables, Collection<SSTableReader> newSSTables)
1:72790dc:     {
1:72790dc:         final Set<SSTableIndex> newIndexes = getIndexes(newSSTables);
1:72790dc:         final Set<SSTableReader> indexedSSTables = getSSTables(newIndexes);
1:72790dc: 
1:72790dc:         View currentView, newView;
1:72790dc:         do
1:72790dc:         {
1:72790dc:             currentView = view.get();
1:72790dc:             newView = new View(columnIndex, currentView.getIndexes(), oldSSTables, newIndexes);
1:72790dc:         }
1:72790dc:         while (!view.compareAndSet(currentView, newView));
1:72790dc: 
1:72790dc:         return newSSTables.stream().filter(sstable -> !indexedSSTables.contains(sstable)).collect(Collectors.toList());
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasSSTable(SSTableReader sstable)
1:72790dc:     {
1:72790dc:         View currentView = view.get();
1:72790dc:         for (SSTableIndex index : currentView)
1:72790dc:         {
1:72790dc:             if (index.getSSTable().equals(sstable))
1:72790dc:                 return true;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return false;
1:72790dc:     }
1:72790dc: 
1:fa11316:     public void dropData(Collection<SSTableReader> sstablesToRebuild)
1:fa11316:     {
1:fa11316:         View currentView = view.get();
1:fa11316:         if (currentView == null)
1:fa11316:             return;
1:fa11316: 
1:fa11316:         Set<SSTableReader> toRemove = new HashSet<>(sstablesToRebuild);
1:fa11316:         for (SSTableIndex index : currentView)
1:fa11316:         {
1:fa11316:             SSTableReader sstable = index.getSSTable();
1:fa11316:             if (!sstablesToRebuild.contains(sstable))
1:fa11316:                 continue;
1:fa11316: 
1:fa11316:             index.markObsolete();
1:fa11316:         }
1:fa11316: 
1:fa11316:         update(toRemove, Collections.<SSTableReader>emptyList());
1:fa11316:     }
1:fa11316: 
1:72790dc:     public void dropData(long truncateUntil)
1:72790dc:     {
1:72790dc:         View currentView = view.get();
1:72790dc:         if (currentView == null)
1:72790dc:             return;
1:72790dc: 
1:72790dc:         Set<SSTableReader> toRemove = new HashSet<>();
1:72790dc:         for (SSTableIndex index : currentView)
1:72790dc:         {
1:72790dc:             SSTableReader sstable = index.getSSTable();
1:72790dc:             if (sstable.getMaxTimestamp() > truncateUntil)
1:72790dc:                 continue;
1:72790dc: 
1:72790dc:             index.markObsolete();
1:72790dc:             toRemove.add(sstable);
1:72790dc:         }
1:72790dc: 
1:72790dc:         update(toRemove, Collections.<SSTableReader>emptyList());
1:72790dc:     }
1:72790dc: 
1:72790dc:     private Set<SSTableIndex> getIndexes(Collection<SSTableReader> sstables)
1:72790dc:     {
1:72790dc:         Set<SSTableIndex> indexes = new HashSet<>(sstables.size());
1:72790dc:         for (SSTableReader sstable : sstables)
1:72790dc:         {
1:72790dc:             if (sstable.isMarkedCompacted())
1:72790dc:                 continue;
1:72790dc: 
1:72790dc:             File indexFile = new File(sstable.descriptor.filenameFor(columnIndex.getComponent()));
1:72790dc:             if (!indexFile.exists())
1:72790dc:                 continue;
1:72790dc: 
1:72790dc:             SSTableIndex index = null;
1:72790dc: 
1:72790dc:             try
1:72790dc:             {
1:72790dc:                 index = new SSTableIndex(columnIndex, indexFile, sstable);
1:72790dc: 
1:72790dc:                 logger.info("SSTableIndex.open(column: {}, minTerm: {}, maxTerm: {}, minKey: {}, maxKey: {}, sstable: {})",
1:72790dc:                             columnIndex.getColumnName(),
1:72790dc:                             columnIndex.getValidator().getString(index.minTerm()),
1:72790dc:                             columnIndex.getValidator().getString(index.maxTerm()),
1:72790dc:                             keyValidator.getString(index.minKey()),
1:72790dc:                             keyValidator.getString(index.maxKey()),
1:72790dc:                             index.getSSTable());
1:72790dc: 
1:72790dc:                 // Try to add new index to the set, if set already has such index, we'll simply release and move on.
1:72790dc:                 // This covers situation when sstable collection has the same sstable multiple
1:72790dc:                 // times because we don't know what kind of collection it actually is.
1:72790dc:                 if (!indexes.add(index))
1:72790dc:                     index.release();
1:72790dc:             }
1:72790dc:             catch (Throwable t)
1:72790dc:             {
1:72790dc:                 logger.error("Can't open index file at " + indexFile.getAbsolutePath() + ", skipping.", t);
1:72790dc:                 if (index != null)
1:72790dc:                     index.release();
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         return indexes;
1:72790dc:     }
1:72790dc: 
1:72790dc:     private Set<SSTableReader> getSSTables(Set<SSTableIndex> indexes)
1:72790dc:     {
1:72790dc:         return Sets.newHashSet(indexes.stream().map(SSTableIndex::getSSTable).collect(Collectors.toList()));
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:fa11316
/////////////////////////////////////////////////////////////////////////
1:     public void dropData(Collection<SSTableReader> sstablesToRebuild)
1:     {
1:         View currentView = view.get();
1:         if (currentView == null)
1:             return;
1: 
1:         Set<SSTableReader> toRemove = new HashSet<>(sstablesToRebuild);
1:         for (SSTableIndex index : currentView)
1:         {
1:             SSTableReader sstable = index.getSSTable();
1:             if (!sstablesToRebuild.contains(sstable))
1:                 continue;
1: 
1:             index.markObsolete();
1:         }
1: 
1:         update(toRemove, Collections.<SSTableReader>emptyList());
1:     }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf;
1: 
1: import java.io.File;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicReference;
1: import java.util.stream.Collectors;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.index.sasi.SSTableIndex;
1: import org.apache.cassandra.index.sasi.conf.view.View;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: 
1: import com.google.common.collect.Sets;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /** a pared-down version of DataTracker and DT.View. need one for each index of each column family */
1: public class DataTracker
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(DataTracker.class);
1: 
1:     private final AbstractType<?> keyValidator;
1:     private final ColumnIndex columnIndex;
1:     private final AtomicReference<View> view = new AtomicReference<>();
1: 
1:     public DataTracker(AbstractType<?> keyValidator, ColumnIndex index)
1:     {
1:         this.keyValidator = keyValidator;
1:         this.columnIndex = index;
1:         this.view.set(new View(index, Collections.<SSTableIndex>emptySet()));
1:     }
1: 
1:     public View getView()
1:     {
1:         return view.get();
1:     }
1: 
1:     /**
1:      * Replaces old SSTables with new by creating new immutable tracker.
1:      *
1:      * @param oldSSTables A set of SSTables to remove.
1:      * @param newSSTables A set of SSTables to add to tracker.
1:      *
1:      * @return A collection of SSTables which don't have component attached for current index.
1:      */
1:     public Iterable<SSTableReader> update(Collection<SSTableReader> oldSSTables, Collection<SSTableReader> newSSTables)
1:     {
1:         final Set<SSTableIndex> newIndexes = getIndexes(newSSTables);
1:         final Set<SSTableReader> indexedSSTables = getSSTables(newIndexes);
1: 
1:         View currentView, newView;
1:         do
1:         {
1:             currentView = view.get();
1:             newView = new View(columnIndex, currentView.getIndexes(), oldSSTables, newIndexes);
1:         }
1:         while (!view.compareAndSet(currentView, newView));
1: 
1:         return newSSTables.stream().filter(sstable -> !indexedSSTables.contains(sstable)).collect(Collectors.toList());
1:     }
1: 
1:     public boolean hasSSTable(SSTableReader sstable)
1:     {
1:         View currentView = view.get();
1:         for (SSTableIndex index : currentView)
1:         {
1:             if (index.getSSTable().equals(sstable))
1:                 return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public void dropData(long truncateUntil)
1:     {
1:         View currentView = view.get();
1:         if (currentView == null)
1:             return;
1: 
1:         Set<SSTableReader> toRemove = new HashSet<>();
1:         for (SSTableIndex index : currentView)
1:         {
1:             SSTableReader sstable = index.getSSTable();
1:             if (sstable.getMaxTimestamp() > truncateUntil)
1:                 continue;
1: 
1:             index.markObsolete();
1:             toRemove.add(sstable);
1:         }
1: 
1:         update(toRemove, Collections.<SSTableReader>emptyList());
1:     }
1: 
1:     private Set<SSTableIndex> getIndexes(Collection<SSTableReader> sstables)
1:     {
1:         Set<SSTableIndex> indexes = new HashSet<>(sstables.size());
1:         for (SSTableReader sstable : sstables)
1:         {
1:             if (sstable.isMarkedCompacted())
1:                 continue;
1: 
1:             File indexFile = new File(sstable.descriptor.filenameFor(columnIndex.getComponent()));
1:             if (!indexFile.exists())
1:                 continue;
1: 
1:             SSTableIndex index = null;
1: 
1:             try
1:             {
1:                 index = new SSTableIndex(columnIndex, indexFile, sstable);
1: 
1:                 logger.info("SSTableIndex.open(column: {}, minTerm: {}, maxTerm: {}, minKey: {}, maxKey: {}, sstable: {})",
1:                             columnIndex.getColumnName(),
1:                             columnIndex.getValidator().getString(index.minTerm()),
1:                             columnIndex.getValidator().getString(index.maxTerm()),
1:                             keyValidator.getString(index.minKey()),
1:                             keyValidator.getString(index.maxKey()),
1:                             index.getSSTable());
1: 
1:                 // Try to add new index to the set, if set already has such index, we'll simply release and move on.
1:                 // This covers situation when sstable collection has the same sstable multiple
1:                 // times because we don't know what kind of collection it actually is.
1:                 if (!indexes.add(index))
1:                     index.release();
1:             }
1:             catch (Throwable t)
1:             {
1:                 logger.error("Can't open index file at " + indexFile.getAbsolutePath() + ", skipping.", t);
1:                 if (index != null)
1:                     index.release();
1:             }
1:         }
1: 
1:         return indexes;
1:     }
1: 
1:     private Set<SSTableReader> getSSTables(Set<SSTableIndex> indexes)
1:     {
1:         return Sets.newHashSet(indexes.stream().map(SSTableIndex::getSSTable).collect(Collectors.toList()));
1:     }
1: }
============================================================================