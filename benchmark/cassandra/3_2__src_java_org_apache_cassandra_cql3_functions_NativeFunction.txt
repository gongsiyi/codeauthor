1:44fa12e: /*
1:44fa12e:  * Licensed to the Apache Software Foundation (ASF) under one
1:44fa12e:  * or more contributor license agreements.  See the NOTICE file
1:44fa12e:  * distributed with this work for additional information
1:44fa12e:  * regarding copyright ownership.  The ASF licenses this file
1:44fa12e:  * to you under the Apache License, Version 2.0 (the
1:44fa12e:  * "License"); you may not use this file except in compliance
1:44fa12e:  * with the License.  You may obtain a copy of the License at
1:44fa12e:  *
1:44fa12e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44fa12e:  *
1:44fa12e:  * Unless required by applicable law or agreed to in writing, software
1:44fa12e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44fa12e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44fa12e:  * See the License for the specific language governing permissions and
1:44fa12e:  * limitations under the License.
1:44fa12e:  */
1:44fa12e: package org.apache.cassandra.cql3.functions;
4:44fa12e: 
1:44fa12e: import java.util.Arrays;
1:44fa12e: 
1:44fa12e: import org.apache.cassandra.db.marshal.AbstractType;
1:44fa12e: 
1:44fa12e: /**
1:44fa12e:  * Base class for our native/hardcoded functions.
1:44fa12e:  */
1:44fa12e: public abstract class NativeFunction extends AbstractFunction
3:44fa12e: {
1:44fa12e:     protected NativeFunction(String name, AbstractType<?> returnType, AbstractType<?>... argTypes)
1:44fa12e:     {
1:b4d7f3b:         super(FunctionName.nativeFunction(name), Arrays.asList(argTypes), returnType);
3:44fa12e:     }
1:44fa12e: 
1:44fa12e:     public boolean isNative()
1:44fa12e:     {
2:44fa12e:         return true;
1:44fa12e:     }
1:44fa12e: }
============================================================================
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:b2abcb7
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
1:         super(FunctionName.nativeFunction(name), Arrays.asList(argTypes), returnType);
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: /**
1:  * Base class for our native/hardcoded functions.
1:  */
1: public abstract class NativeFunction extends AbstractFunction
1: {
1:     protected NativeFunction(String name, AbstractType<?> returnType, AbstractType<?>... argTypes)
1:     {
0:         this(new FunctionName(name), returnType, argTypes);
1:     }
1: 
0:     protected NativeFunction(FunctionName name, AbstractType<?> returnType, AbstractType<?>... argTypes)
1:     {
0:         super(name, Arrays.asList(argTypes), returnType);
1:     }
1: 
0:     // Most of our functions are pure, the other ones should override this
0:     public boolean isPure()
1:     {
1:         return true;
1:     }
1: 
1:     public boolean isNative()
1:     {
1:         return true;
1:     }
1: }
1: 
============================================================================