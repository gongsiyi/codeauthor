1:5420b7a: /*
1:5420b7a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5420b7a:  * or more contributor license agreements.  See the NOTICE file
1:5420b7a:  * distributed with this work for additional information
1:5420b7a:  * regarding copyright ownership.  The ASF licenses this file
1:5420b7a:  * to you under the Apache License, Version 2.0 (the
1:5420b7a:  * "License"); you may not use this file except in compliance
1:5420b7a:  * with the License.  You may obtain a copy of the License at
1:5420b7a:  *
1:5420b7a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5420b7a:  *
1:5420b7a:  * Unless required by applicable law or agreed to in writing, software
1:5420b7a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5420b7a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5420b7a:  * See the License for the specific language governing permissions and
1:5420b7a:  * limitations under the License.
1:5420b7a:  */
1:5420b7a: package org.apache.cassandra.utils.concurrent;
1:5420b7a: 
1:5420b7a: import java.util.Date;
1:5420b7a: import java.util.concurrent.TimeUnit;
1:5420b7a: import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
1:5420b7a: import java.util.concurrent.locks.Condition;
1:5420b7a: 
1:5420b7a: // fulfils the Condition interface without spurious wakeup problems
1:5420b7a: // (or lost notify problems either: that is, even if you call await()
1:5420b7a: // _after_ signal(), it will work as desired.)
1:5420b7a: public class SimpleCondition implements Condition
1:5420b7a: {
1:5420b7a:     private static final AtomicReferenceFieldUpdater<SimpleCondition, WaitQueue> waitingUpdater = AtomicReferenceFieldUpdater.newUpdater(SimpleCondition.class, WaitQueue.class, "waiting");
1:5420b7a: 
1:5420b7a:     private volatile WaitQueue waiting;
1:5420b7a:     private volatile boolean signaled = false;
1:5420b7a: 
1:5420b7a:     public void await() throws InterruptedException
1:5420b7a:     {
1:5420b7a:         if (isSignaled())
1:5420b7a:             return;
1:5420b7a:         if (waiting == null)
1:5420b7a:             waitingUpdater.compareAndSet(this, null, new WaitQueue());
1:5420b7a:         WaitQueue.Signal s = waiting.register();
1:5420b7a:         if (isSignaled())
1:5420b7a:             s.cancel();
1:5420b7a:         else
1:5420b7a:             s.await();
1:5420b7a:         assert isSignaled();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean await(long time, TimeUnit unit) throws InterruptedException
1:5420b7a:     {
1:5420b7a:         if (isSignaled())
1:5420b7a:             return true;
1:5420b7a:         long start = System.nanoTime();
1:5420b7a:         long until = start + unit.toNanos(time);
1:5420b7a:         if (waiting == null)
1:5420b7a:             waitingUpdater.compareAndSet(this, null, new WaitQueue());
1:5420b7a:         WaitQueue.Signal s = waiting.register();
1:5420b7a:         if (isSignaled())
1:5420b7a:         {
1:5420b7a:             s.cancel();
1:5420b7a:             return true;
1:5420b7a:         }
1:5420b7a:         return s.awaitUntil(until) || isSignaled();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public void signal()
1:5420b7a:     {
1:5420b7a:         throw new UnsupportedOperationException();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean isSignaled()
1:5420b7a:     {
1:5420b7a:         return signaled;
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public void signalAll()
1:5420b7a:     {
1:5420b7a:         signaled = true;
1:5420b7a:         if (waiting != null)
1:5420b7a:             waiting.signalAll();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public void awaitUninterruptibly()
1:5420b7a:     {
1:5420b7a:         throw new UnsupportedOperationException();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public long awaitNanos(long nanosTimeout) throws InterruptedException
1:5420b7a:     {
1:5420b7a:         throw new UnsupportedOperationException();
1:5420b7a:     }
1:5420b7a: 
1:5420b7a:     public boolean awaitUntil(Date deadline) throws InterruptedException
1:5420b7a:     {
1:5420b7a:         throw new UnsupportedOperationException();
1:5420b7a:     }
1:5420b7a: }
============================================================================
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.Date;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
1: import java.util.concurrent.locks.Condition;
1: 
1: // fulfils the Condition interface without spurious wakeup problems
1: // (or lost notify problems either: that is, even if you call await()
1: // _after_ signal(), it will work as desired.)
1: public class SimpleCondition implements Condition
1: {
1:     private static final AtomicReferenceFieldUpdater<SimpleCondition, WaitQueue> waitingUpdater = AtomicReferenceFieldUpdater.newUpdater(SimpleCondition.class, WaitQueue.class, "waiting");
1: 
1:     private volatile WaitQueue waiting;
1:     private volatile boolean signaled = false;
1: 
1:     public void await() throws InterruptedException
1:     {
1:         if (isSignaled())
1:             return;
1:         if (waiting == null)
1:             waitingUpdater.compareAndSet(this, null, new WaitQueue());
1:         WaitQueue.Signal s = waiting.register();
1:         if (isSignaled())
1:             s.cancel();
1:         else
1:             s.await();
1:         assert isSignaled();
1:     }
1: 
1:     public boolean await(long time, TimeUnit unit) throws InterruptedException
1:     {
1:         if (isSignaled())
1:             return true;
1:         long start = System.nanoTime();
1:         long until = start + unit.toNanos(time);
1:         if (waiting == null)
1:             waitingUpdater.compareAndSet(this, null, new WaitQueue());
1:         WaitQueue.Signal s = waiting.register();
1:         if (isSignaled())
1:         {
1:             s.cancel();
1:             return true;
1:         }
1:         return s.awaitUntil(until) || isSignaled();
1:     }
1: 
1:     public void signal()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public boolean isSignaled()
1:     {
1:         return signaled;
1:     }
1: 
1:     public void signalAll()
1:     {
1:         signaled = true;
1:         if (waiting != null)
1:             waiting.signalAll();
1:     }
1: 
1:     public void awaitUninterruptibly()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public long awaitNanos(long nanosTimeout) throws InterruptedException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public boolean awaitUntil(Date deadline) throws InterruptedException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================