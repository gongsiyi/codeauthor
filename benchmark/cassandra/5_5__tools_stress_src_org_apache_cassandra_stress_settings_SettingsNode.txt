1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
2:2e1e98a: 
1:2e1e98a: import java.io.*;
1:eea042b: import java.net.InetAddress;
1:eea042b: import java.net.InetSocketAddress;
1:eea042b: import java.net.UnknownHostException;
1:6c579a0: import java.util.*;
1:2e1e98a: 
1:4efb6dc: import com.datastax.driver.core.Host;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:4efb6dc: 
1:2e1e98a: public class SettingsNode implements Serializable
4:2e1e98a: {
1:2e1e98a:     public final List<String> nodes;
1:eea042b:     public final boolean isWhiteList;
1:ba926ff:     public final String datacenter;
1:2e1e98a: 
1:2e1e98a:     public SettingsNode(Options options)
1:2e1e98a:     {
1:2e1e98a:         if (options.file.setByUser())
1:2e1e98a:         {
2:2e1e98a:             try
1:2e1e98a:             {
1:2e1e98a:                 String node;
1:b73f581:                 List<String> tmpNodes = new ArrayList<>();
1:b73f581:                 try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(options.file.value()))))
1:2e1e98a:                 {
1:2e1e98a:                     while ((node = in.readLine()) != null)
1:2e1e98a:                     {
1:2e1e98a:                         if (node.length() > 0)
1:2e1e98a:                             tmpNodes.add(node);
3:2e1e98a:                     }
1:2e1e98a:                     nodes = Arrays.asList(tmpNodes.toArray(new String[tmpNodes.size()]));
1:2e1e98a:                 }
1:2e1e98a:             }
1:2e1e98a:             catch(IOException ioe)
1:2e1e98a:             {
1:2e1e98a:                 throw new RuntimeException(ioe);
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:         }
1:2e1e98a:         else
1:ba926ff:         {
1:2e1e98a:             nodes = Arrays.asList(options.list.value().split(","));
1:ba926ff:         }
1:ba926ff: 
1:eea042b:         isWhiteList = options.whitelist.setByUser();
1:ba926ff:         datacenter = options.datacenter.value();
1:eea042b:     }
1:eea042b: 
1:4efb6dc:     public Set<String> resolveAllPermitted(StressSettings settings)
1:4efb6dc:     {
1:4efb6dc:         Set<String> r = new HashSet<>();
1:4efb6dc:         switch (settings.mode.api)
1:4efb6dc:         {
1:4efb6dc:             case THRIFT_SMART:
1:4efb6dc:             case JAVA_DRIVER_NATIVE:
1:4efb6dc:                 if (!isWhiteList)
1:4efb6dc:                 {
1:4efb6dc:                     for (Host host : settings.getJavaDriverClient().getCluster().getMetadata().getAllHosts())
1:4efb6dc:                         r.add(host.getAddress().getHostName());
1:4efb6dc:                     break;
1:4efb6dc:                 }
1:4efb6dc:             case THRIFT:
1:4efb6dc:             case SIMPLE_NATIVE:
1:4efb6dc:                 for (InetAddress address : resolveAllSpecified())
1:4efb6dc:                     r.add(address.getHostName());
1:4efb6dc:         }
1:4efb6dc:         return r;
1:4efb6dc:     }
1:4efb6dc: 
1:4efb6dc:     public Set<InetAddress> resolveAllSpecified()
1:eea042b:     {
1:eea042b:         Set<InetAddress> r = new HashSet<>();
1:eea042b:         for (String node : nodes)
1:eea042b:         {
1:eea042b:             try
1:eea042b:             {
1:eea042b:                 r.add(InetAddress.getByName(node));
1:eea042b:             }
1:eea042b:             catch (UnknownHostException e)
1:eea042b:             {
1:eea042b:                 throw new RuntimeException(e);
1:eea042b:             }
1:eea042b:         }
1:eea042b:         return r;
1:eea042b:     }
1:eea042b: 
1:eea042b:     public Set<InetSocketAddress> resolveAll(int port)
1:eea042b:     {
1:eea042b:         Set<InetSocketAddress> r = new HashSet<>();
1:eea042b:         for (String node : nodes)
1:eea042b:         {
1:eea042b:             try
1:eea042b:             {
1:eea042b:                 r.add(new InetSocketAddress(InetAddress.getByName(node), port));
1:eea042b:             }
1:eea042b:             catch (UnknownHostException e)
1:eea042b:             {
1:eea042b:                 throw new RuntimeException(e);
1:eea042b:             }
1:eea042b:         }
1:eea042b:         return r;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public String randomNode()
1:2e1e98a:     {
1:2e1e98a:         int index = (int) (Math.random() * nodes.size());
1:2e1e98a:         if (index >= nodes.size())
1:2e1e98a:             index = nodes.size() - 1;
1:2e1e98a:         return nodes.get(index);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // Option Declarations
1:2e1e98a: 
1:2e1e98a:     public static final class Options extends GroupedOptions
1:2e1e98a:     {
1:ba926ff:         final OptionSimple datacenter = new OptionSimple("datacenter=", ".*", null, "Datacenter used for DCAwareRoundRobinLoadPolicy", false);
1:eea042b:         final OptionSimple whitelist = new OptionSimple("whitelist", "", null, "Limit communications to the provided nodes", false);
1:2e1e98a:         final OptionSimple file = new OptionSimple("file=", ".*", null, "Node file (one per line)", false);
1:eea042b:         final OptionSimple list = new OptionSimple("", "[^=,]+(,[^=,]+)*", "localhost", "comma delimited list of nodes", false);
1:2e1e98a: 
2:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:ba926ff:             return Arrays.asList(datacenter, whitelist, file, list);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.println("  Nodes: " + nodes);
1:938faa2:         out.println("  Is White List: " + isWhiteList);
1:938faa2:         out.println("  Datacenter: " + datacenter);
1:938faa2:     }
1:2e1e98a: 
1:2e1e98a:     public static SettingsNode get(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-node");
1:2e1e98a:         if (params == null)
1:2e1e98a:             return new SettingsNode(new Options());
1:2e1e98a: 
1:2e1e98a:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:2e1e98a:         if (options == null)
1:2e1e98a:         {
2:2e1e98a:             printHelp();
1:2e1e98a:             System.out.println("Invalid -node options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         return new SettingsNode((Options) options);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelp()
1:2e1e98a:     {
1:2e1e98a:         GroupedOptions.printOptions(System.out, "-node", new Options());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Runnable helpPrinter()
1:2e1e98a:     {
1:b73f581:         return SettingsNode::printHelp;
1:2e1e98a:     }
1:2e1e98a: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
commit:b73f581
/////////////////////////////////////////////////////////////////////////
1:                 List<String> tmpNodes = new ArrayList<>();
1:                 try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(options.file.value()))))
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return SettingsNode::printHelp;
commit:ba926ff
/////////////////////////////////////////////////////////////////////////
1:     public final String datacenter;
/////////////////////////////////////////////////////////////////////////
1:         {
1:         }
1: 
1:         datacenter = options.datacenter.value();
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple datacenter = new OptionSimple("datacenter=", ".*", null, "Datacenter used for DCAwareRoundRobinLoadPolicy", false);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(datacenter, whitelist, file, list);
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.println("  Nodes: " + nodes);
1:         out.println("  Is White List: " + isWhiteList);
1:         out.println("  Datacenter: " + datacenter);
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
commit:4efb6dc
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.Host;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Set<String> resolveAllPermitted(StressSettings settings)
1:     {
1:         Set<String> r = new HashSet<>();
1:         switch (settings.mode.api)
1:         {
1:             case THRIFT_SMART:
1:             case JAVA_DRIVER_NATIVE:
1:                 if (!isWhiteList)
1:                 {
1:                     for (Host host : settings.getJavaDriverClient().getCluster().getMetadata().getAllHosts())
1:                         r.add(host.getAddress().getHostName());
1:                     break;
1:                 }
1:             case THRIFT:
1:             case SIMPLE_NATIVE:
1:                 for (InetAddress address : resolveAllSpecified())
1:                     r.add(address.getHostName());
1:         }
1:         return r;
1:     }
1: 
1:     public Set<InetAddress> resolveAllSpecified()
commit:eea042b
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.UnknownHostException;
0: import java.util.HashSet;
0: import java.util.Set;
1:     public final boolean isWhiteList;
/////////////////////////////////////////////////////////////////////////
1:         isWhiteList = options.whitelist.setByUser();
1:     }
1: 
0:     public Set<InetAddress> resolveAll()
1:     {
1:         Set<InetAddress> r = new HashSet<>();
1:         for (String node : nodes)
1:         {
1:             try
1:             {
1:                 r.add(InetAddress.getByName(node));
1:             }
1:             catch (UnknownHostException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:         return r;
1:     }
1: 
1:     public Set<InetSocketAddress> resolveAll(int port)
1:     {
1:         Set<InetSocketAddress> r = new HashSet<>();
1:         for (String node : nodes)
1:         {
1:             try
1:             {
1:                 r.add(new InetSocketAddress(InetAddress.getByName(node), port));
1:             }
1:             catch (UnknownHostException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:         return r;
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple whitelist = new OptionSimple("whitelist", "", null, "Limit communications to the provided nodes", false);
1:         final OptionSimple list = new OptionSimple("", "[^=,]+(,[^=,]+)*", "localhost", "comma delimited list of nodes", false);
0:             return Arrays.asList(whitelist, file, list);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.*;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
0: import java.util.Map;
1: 
1: public class SettingsNode implements Serializable
1: {
1: 
1:     public final List<String> nodes;
1: 
1:     public SettingsNode(Options options)
1:     {
1:         if (options.file.setByUser())
1:         {
1:             try
1:             {
1:                 String node;
0:                 List<String> tmpNodes = new ArrayList<String>();
0:                 BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(options.file.value())));
1:                 try
1:                 {
1:                     while ((node = in.readLine()) != null)
1:                     {
1:                         if (node.length() > 0)
1:                             tmpNodes.add(node);
1:                     }
1:                     nodes = Arrays.asList(tmpNodes.toArray(new String[tmpNodes.size()]));
1:                 }
0:                 finally
1:                 {
0:                     in.close();
1:                 }
1:             }
1:             catch(IOException ioe)
1:             {
1:                 throw new RuntimeException(ioe);
1:             }
1: 
1:         }
1:         else
1:             nodes = Arrays.asList(options.list.value().split(","));
1:     }
1: 
1:     public String randomNode()
1:     {
1:         int index = (int) (Math.random() * nodes.size());
1:         if (index >= nodes.size())
1:             index = nodes.size() - 1;
1:         return nodes.get(index);
1:     }
1: 
1:     // Option Declarations
1: 
1:     public static final class Options extends GroupedOptions
1:     {
1:         final OptionSimple file = new OptionSimple("file=", ".*", null, "Node file (one per line)", false);
0:         final OptionSimple list = new OptionSimple("", "[^=,]+(,[^=,]+)*", "localhost", "comma delimited list of hosts", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(file, list);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsNode get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-node");
1:         if (params == null)
1:             return new SettingsNode(new Options());
1: 
1:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -node options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsNode((Options) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-node", new Options());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
0:         return new Runnable()
1:         {
1:             @Override
0:             public void run()
1:             {
1:                 printHelp();
1:             }
0:         };
1:     }
1: }
============================================================================