1:e06d411: /*
1:e06d411:  * Licensed to the Apache Software Foundation (ASF) under one
1:e06d411:  * or more contributor license agreements.  See the NOTICE file
1:e06d411:  * distributed with this work for additional information
1:e06d411:  * regarding copyright ownership.  The ASF licenses this file
1:e06d411:  * to you under the Apache License, Version 2.0 (the
1:e06d411:  * "License"); you may not use this file except in compliance
1:e06d411:  * with the License.  You may obtain a copy of the License at
1:e06d411:  *
1:e06d411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e06d411:  *
1:e06d411:  * Unless required by applicable law or agreed to in writing, software
1:e06d411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e06d411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e06d411:  * See the License for the specific language governing permissions and
1:e06d411:  * limitations under the License.
1:e06d411:  */
1:e06d411: 
1:e06d411: package org.apache.cassandra.io.compress;
1:e06d411: 
1:e06d411: import org.junit.Test;
1:e06d411: 
1:e06d411: import org.apache.cassandra.cql3.CQLTester;
1:e06d411: import org.apache.cassandra.exceptions.ConfigurationException;
1:e06d411: 
1:e06d411: import static org.junit.Assert.assertEquals;
1:e06d411: import static org.junit.Assert.assertTrue;
1:e06d411: 
1:e06d411: public class CQLCompressionTest extends CQLTester
1:e06d411: {
1:e06d411:     @Test
1:e06d411:     public void lz4ParamsTest()
1:e06d411:     {
1:e06d411:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_high_compressor_level':3}");
1:e06d411:         assertTrue(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType.equals(LZ4Compressor.LZ4_FAST_COMPRESSOR));
1:e06d411:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_compressor_type':'high', 'lz4_high_compressor_level':13}");
1:e06d411:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType, LZ4Compressor.LZ4_HIGH_COMPRESSOR);
1:e06d411:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressionLevel, (Integer)13);
1:e06d411:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor'}");
1:e06d411:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType, LZ4Compressor.LZ4_FAST_COMPRESSOR);
1:e06d411:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressionLevel, (Integer)9);
1:e06d411:     }
1:e06d411: 
1:e06d411:     @Test(expected = ConfigurationException.class)
1:e06d411:     public void lz4BadParamsTest() throws Throwable
1:e06d411:     {
1:e06d411:         try
1:e06d411:         {
1:e06d411:             createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_compressor_type':'high', 'lz4_high_compressor_level':113}");
1:e06d411:         }
1:e06d411:         catch (RuntimeException e)
1:e06d411:         {
1:e06d411:             throw e.getCause();
1:e06d411:         }
1:e06d411:     }
1:e06d411: }
============================================================================
author:Michael Kjellman
-------------------------------------------------------------------------------
commit:e06d411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.compress;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CQLCompressionTest extends CQLTester
1: {
1:     @Test
1:     public void lz4ParamsTest()
1:     {
1:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_high_compressor_level':3}");
1:         assertTrue(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType.equals(LZ4Compressor.LZ4_FAST_COMPRESSOR));
1:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_compressor_type':'high', 'lz4_high_compressor_level':13}");
1:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType, LZ4Compressor.LZ4_HIGH_COMPRESSOR);
1:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressionLevel, (Integer)13);
1:         createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor'}");
1:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressorType, LZ4Compressor.LZ4_FAST_COMPRESSOR);
1:         assertEquals(((LZ4Compressor)getCurrentColumnFamilyStore().metadata.params.compression.getSstableCompressor()).compressionLevel, (Integer)9);
1:     }
1: 
1:     @Test(expected = ConfigurationException.class)
1:     public void lz4BadParamsTest() throws Throwable
1:     {
1:         try
1:         {
1:             createTable("create table %s (id int primary key, uh text) with compression = {'class':'LZ4Compressor', 'lz4_compressor_type':'high', 'lz4_high_compressor_level':113}");
1:         }
1:         catch (RuntimeException e)
1:         {
1:             throw e.getCause();
1:         }
1:     }
1: }
============================================================================