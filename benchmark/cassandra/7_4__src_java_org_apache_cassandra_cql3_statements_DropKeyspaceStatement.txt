1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3.statements;
2:655ccc3: 
1:e31e216: import org.apache.cassandra.auth.Permission;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:bcec7a5: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3a2faf9: import org.apache.cassandra.exceptions.RequestValidationException;
1:804dd09: import org.apache.cassandra.exceptions.UnauthorizedException;
1:655ccc3: import org.apache.cassandra.service.ClientState;
1:438acfc: import org.apache.cassandra.service.MigrationManager;
1:655ccc3: import org.apache.cassandra.thrift.ThriftValidation;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:655ccc3: 
1:655ccc3: public class DropKeyspaceStatement extends SchemaAlteringStatement
1:655ccc3: {
1:655ccc3:     private final String keyspace;
1:b73f9d4:     private final boolean ifExists;
1:655ccc3: 
1:b73f9d4:     public DropKeyspaceStatement(String keyspace, boolean ifExists)
1:b73f9d4:     {
1:655ccc3:         super();
1:655ccc3:         this.keyspace = keyspace;
1:b73f9d4:         this.ifExists = ifExists;
1:b73f9d4:     }
1:11f7d72: 
1:804dd09:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:11f7d72:     {
1:bcec7a5:         state.hasKeyspaceAccess(keyspace, Permission.DROP);
1:11f7d72:     }
1:655ccc3: 
1:3a2faf9:     public void validate(ClientState state) throws RequestValidationException
1:11f7d72:     {
1:655ccc3:         ThriftValidation.validateKeyspaceNotSystem(keyspace);
1:655ccc3:     }
1:655ccc3: 
1:11f7d72:     @Override
1:11f7d72:     public String keyspace()
1:655ccc3:     {
1:11f7d72:         return keyspace;
1:11f7d72:     }
1:11f7d72: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws ConfigurationException
1:655ccc3:     {
1:b73f9d4:         try
1:655ccc3:         {
1:78e91c4:             MigrationManager.announceKeyspaceDrop(keyspace, isLocalOnly);
1:2cbd776:             return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, keyspace());
1:655ccc3:         }
1:b73f9d4:         catch(ConfigurationException e)
1:b73f9d4:         {
1:e4d5eda:             if (ifExists)
1:2cbd776:                 return null;
1:b73f9d4:             throw e;
1:b73f9d4:         }
1:655ccc3:     }
1:655ccc3: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.Permission;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws ConfigurationException
1:             return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, keyspace());
1:                 return null;
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
0:         return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, keyspace());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws ConfigurationException
1:             MigrationManager.announceKeyspaceDrop(keyspace, isLocalOnly);
commit:b73f9d4
/////////////////////////////////////////////////////////////////////////
1:     private final boolean ifExists;
1:     public DropKeyspaceStatement(String keyspace, boolean ifExists)
1:         this.ifExists = ifExists;
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
0:             MigrationManager.announceKeyspaceDrop(keyspace);
1:         }
1:         catch(ConfigurationException e)
1:         {
0:             if (!ifExists)
1:                 throw e;
1:         }
commit:11f7d72
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
1:     public String keyspace()
1:     {
1:         return keyspace;
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         return ResultMessage.SchemaChange.Change.DROPPED;
1:     }
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException
commit:15ae2f6
commit:438acfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.MigrationManager;
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration() throws ConfigurationException
0:         MigrationManager.announceKeyspaceDrop(keyspace);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.io.IOException;
1: 
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.db.migration.DropKeyspace;
0: import org.apache.cassandra.db.migration.Migration;
1: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.thrift.SchemaDisagreementException;
1: import org.apache.cassandra.thrift.ThriftValidation;
1: 
1: public class DropKeyspaceStatement extends SchemaAlteringStatement
1: {
1:     private final String keyspace;
1: 
0:     public DropKeyspaceStatement(String keyspace)
1:     {
1:         super();
1:         this.keyspace = keyspace;
1:     }
1: 
0:     @Override
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException
1:     {
0:         super.validate(state);
1:         ThriftValidation.validateKeyspaceNotSystem(keyspace);
1:     }
1: 
0:     public Migration getMigration() throws ConfigurationException, IOException
1:     {
0:         return new DropKeyspace(keyspace);
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:664efd4
commit:e4d5eda
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration() throws ConfigurationException
0:             return true;
1:             if (ifExists)
0:                 return false;
0:             throw e;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:663bdfb
/////////////////////////////////////////////////////////////////////////
0:     public void validate(ClientState state) throws RequestValidationException
0:     {
0:         ThriftValidation.validateKeyspaceNotSystem(keyspace);
0:     }
0: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f32110c
/////////////////////////////////////////////////////////////////////////
0:         state.hasKeyspaceAccess(keyspace, Permission.WRITE);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:804dd09
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.UnauthorizedException;
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
commit:bcec7a5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.auth.Permission;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {
1:         state.hasKeyspaceAccess(keyspace, Permission.DROP);
0:     }
0: 
commit:aba5a37
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {
0:         state.hasKeyspaceAccess(keyspace, Permission.DROP);
0:     }
0: 
commit:71f5d91
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void validate(ClientState state) throws InvalidRequestException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
============================================================================