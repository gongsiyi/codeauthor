1:bb2c187: /**
1:bb2c187:  * Licensed to the Apache Software Foundation (ASF) under one
1:bb2c187:  * or more contributor license agreements.  See the NOTICE file
1:bb2c187:  * distributed with this work for additional information
1:bb2c187:  * regarding copyright ownership.  The ASF licenses this file
1:bb2c187:  * to you under the Apache License, Version 2.0 (the
1:bb2c187:  * "License"); you may not use this file except in compliance
1:bb2c187:  * with the License.  You may obtain a copy of the License at
1:bb2c187:  *
1:bb2c187:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bb2c187:  *
1:bb2c187:  * Unless required by applicable law or agreed to in writing, software
1:bb2c187:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bb2c187:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb2c187:  * See the License for the specific language governing permissions and
1:bb2c187:  * limitations under the License.
1:bb2c187:  */
1:bb2c187: package org.apache.cassandra.client;
1:cb3455f: 
1:b767bf7: import java.net.InetAddress;
1:e7a385a: import java.nio.ByteBuffer;
1:2fb6311: import java.util.Collection;
1:924c7e5: 
1:b767bf7: import org.apache.cassandra.config.DatabaseDescriptor;
1:5fbb890: import org.apache.cassandra.hadoop.ConfigHelper;
1:e7a385a: import org.apache.cassandra.thrift.Cassandra;
1:e7a385a: import org.apache.cassandra.thrift.Column;
1:e7a385a: import org.apache.cassandra.thrift.ColumnParent;
1:e7a385a: import org.apache.cassandra.thrift.ColumnPath;
1:e7a385a: import org.apache.cassandra.thrift.ConsistencyLevel;
1:5fbb890: import org.apache.cassandra.utils.ByteBufferUtil;
1:bffd9ea: import org.apache.commons.lang3.StringUtils;
1:5fbb890: import org.apache.hadoop.conf.Configuration;
1:bb2c187: import org.apache.thrift.protocol.TBinaryProtocol;
1:0973793: import org.apache.thrift.transport.TFramedTransport;
1:bb2c187: import org.apache.thrift.transport.TSocket;
1:8358669: 
1:cb3455f: 
1:bb2c187: /**
1:bb2c187:  *  Sample code that uses RingCache in the client.
1:bb2c187:  */
1:bb2c187: public class TestRingCache
1:bb2c187: {
1:d411227:     private RingCache ringCache;
1:d411227:     private Cassandra.Client thriftClient;
1:5fbb890:     private Configuration conf;
1:d411227: 
1:bfa06db:     public TestRingCache(String keyspace)
1:bb2c187:     {
1:5fbb890:         ConfigHelper.setOutputColumnFamily(conf, keyspace, "Standard1");
1:5fbb890:     	ringCache = new RingCache(conf);
1:bb2c187:     }
1:07cdfd0: 
1:d411227:     private void setup(String server, int port) throws Exception
1:bb2c187:     {
1:bb2c187:         /* Establish a thrift connection to the cassandra instance */
1:bb2c187:         TSocket socket = new TSocket(server, port);
1:bb2c187:         System.out.println(" connected to " + server + ":" + port + ".");
1:0973793:         TBinaryProtocol binaryProtocol = new TBinaryProtocol(new TFramedTransport(socket));
1:bb2c187:         Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);
1:0973793:         socket.open();
1:bb2c187:         thriftClient = cassandraClient;
1:5fbb890:         String seed = DatabaseDescriptor.getSeeds().iterator().next().getHostAddress();
1:5fbb890:         conf = new Configuration();
1:9a11e42:         ConfigHelper.setOutputPartitioner(conf, DatabaseDescriptor.getPartitioner().getClass().getName());
1:9a11e42:         ConfigHelper.setOutputInitialAddress(conf, seed);
1:9a11e42:         ConfigHelper.setOutputRpcPort(conf, Integer.toString(DatabaseDescriptor.getRpcPort()));
1:2fd3268: 
1:bb2c187:     }
1:2fd3268: 
1:bb2c187:     /**
1:0438494:      * usage: java -cp <configpath> org.apache.cassandra.client.TestRingCache [keyspace row-id-prefix row-id-int]
1:3577fd8:      * to test a single keyspace/row, use the parameters. row-id-prefix and row-id-int are appended together to form a
1:3577fd8:      * single row id.  If you supply now parameters, 'Keyspace1' is assumed and will check 9 rows ('row1' through 'row9').
1:bb2c187:      * @param args
1:bb2c187:      * @throws Exception
1:bb2c187:      */
1:bb2c187:     public static void main(String[] args) throws Throwable
1:bb2c187:     {
1:3577fd8:         int minRow;
1:3577fd8:         int maxRow;
1:d411227:         String rowPrefix, keyspace = "Keyspace1";
1:07cdfd0: 
1:3577fd8:         if (args.length > 0)
1:bb2c187:         {
1:fe34d59:             keyspace = args[0];
1:3577fd8:             rowPrefix = args[1];
1:3577fd8:             minRow = Integer.parseInt(args[2]);
1:3577fd8:             maxRow = minRow + 1;
1:3577fd8:         }
1:3577fd8:         else
1:3577fd8:         {
1:3577fd8:             minRow = 1;
1:3577fd8:             maxRow = 10;
1:3577fd8:             rowPrefix = "row";
1:3577fd8:         }
1:07cdfd0: 
1:d411227:         TestRingCache tester = new TestRingCache(keyspace);
1:2fd3268: 
1:3577fd8:         for (int nRows = minRow; nRows < maxRow; nRows++)
1:3577fd8:         {
1:b62b0ae:             ByteBuffer row = ByteBufferUtil.bytes((rowPrefix + nRows));
1:e7a385a:             ColumnPath col = new ColumnPath("Standard1").setSuper_column((ByteBuffer)null).setColumn("col1".getBytes());
1:e7a385a:             ColumnParent parent = new ColumnParent("Standard1").setSuper_column((ByteBuffer)null);
1:5fbb890: 
1:2fb6311:             Collection<InetAddress> endpoints = tester.ringCache.getEndpoint(row);
1:2fb6311:             InetAddress firstEndpoint = endpoints.iterator().next();
1:2fb6311:             System.out.printf("hosts with key %s : %s; choose %s%n",
1:e7a385a:                               new String(row.array()), StringUtils.join(endpoints, ","), firstEndpoint);
1:d411227: 
1:bb2c187:             // now, read the row back directly from the host owning the row locally
1:2fb6311:             tester.setup(firstEndpoint.getHostAddress(), DatabaseDescriptor.getRpcPort());
1:e649d0f:             tester.thriftClient.set_keyspace(keyspace);
1:1adcd1c:             tester.thriftClient.insert(row, parent, new Column(ByteBufferUtil.bytes("col1")).setValue(ByteBufferUtil.bytes("val1")).setTimestamp(1), ConsistencyLevel.ONE);
1:cb3455f:             Column column = tester.thriftClient.get(row, col, ConsistencyLevel.ONE).column;
1:e7a385a:             System.out.println("read row " + new String(row.array()) + " " + new String(column.name.array()) + ":" + new String(column.value.array()) + ":" + column.timestamp);
1:bb2c187:         }
2:542bd79: 
1:bb2c187:         System.exit(1);
1:bb2c187:     }
1:bb2c187: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:bfa06db
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public TestRingCache(String keyspace)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer row = ByteBufferUtil.bytes((rowPrefix + nRows));
author:Brandon Williams
-------------------------------------------------------------------------------
commit:9a11e42
/////////////////////////////////////////////////////////////////////////
1:         ConfigHelper.setOutputPartitioner(conf, DatabaseDescriptor.getPartitioner().getClass().getName());
1:         ConfigHelper.setOutputInitialAddress(conf, seed);
1:         ConfigHelper.setOutputRpcPort(conf, Integer.toString(DatabaseDescriptor.getRpcPort()));
commit:bd00a23
/////////////////////////////////////////////////////////////////////////
0:         ConfigHelper.setPartitioner(conf, DatabaseDescriptor.getPartitioner().getClass().getName());
0:         ConfigHelper.setInitialAddress(conf, seed);
0:         ConfigHelper.setRpcPort(conf, Integer.toString(DatabaseDescriptor.getRpcPort()));
commit:b90462a
/////////////////////////////////////////////////////////////////////////
0:         ConfigHelper.setOutputPartitioner(conf, DatabaseDescriptor.getPartitioner().getClass().getName());
0:         ConfigHelper.setOutputInitialAddress(conf, seed);
0:         ConfigHelper.setOutputRpcPort(conf, Integer.toString(DatabaseDescriptor.getRpcPort()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5fbb890
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.hadoop.ConfigHelper;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:     private Configuration conf;
1:         ConfigHelper.setOutputColumnFamily(conf, keyspace, "Standard1");
1:     	ringCache = new RingCache(conf);
/////////////////////////////////////////////////////////////////////////
1:         String seed = DatabaseDescriptor.getSeeds().iterator().next().getHostAddress();
1:         conf = new Configuration();
0:         ConfigHelper.setPartitioner(conf, DatabaseDescriptor.getPartitioner().getClass().getName());
0:         ConfigHelper.setInitialAddress(conf, seed);
0:         ConfigHelper.setRpcPort(conf, Integer.toString(DatabaseDescriptor.getRpcPort()));
1: 
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1:             tester.thriftClient.insert(row, parent, new Column(ByteBufferUtil.bytes("col1")).setValue(ByteBufferUtil.bytes("val1")).setTimestamp(1), ConsistencyLevel.ONE);
commit:8358669
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
0:             tester.thriftClient.insert(row, parent, new Column(ByteBufferUtil.bytes("col1"), ByteBufferUtil.bytes("val1"), 1), ConsistencyLevel.ONE);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.thrift.Cassandra;
1: import org.apache.cassandra.thrift.Column;
1: import org.apache.cassandra.thrift.ColumnParent;
1: import org.apache.cassandra.thrift.ColumnPath;
1: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.commons.lang.StringUtils;
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer row = ByteBuffer.wrap((rowPrefix + nRows).getBytes());
1:             ColumnPath col = new ColumnPath("Standard1").setSuper_column((ByteBuffer)null).setColumn("col1".getBytes());
1:             ColumnParent parent = new ColumnParent("Standard1").setSuper_column((ByteBuffer)null);
1:                               new String(row.array()), StringUtils.join(endpoints, ","), firstEndpoint);
0:             tester.thriftClient.insert(row, parent, new Column(ByteBuffer.wrap("col1".getBytes()), ByteBuffer.wrap("val1".getBytes()), 1), ConsistencyLevel.ONE);
1:             System.out.println("read row " + new String(row.array()) + " " + new String(column.name.array()) + ":" + new String(column.value.array()) + ":" + column.timestamp);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0:             tester.thriftClient.insert(row, parent, new Column("col1".getBytes(), "val1".getBytes(), 1), ConsistencyLevel.ONE);
0:             System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
commit:0973793
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.transport.TFramedTransport;
/////////////////////////////////////////////////////////////////////////
1:         TBinaryProtocol binaryProtocol = new TBinaryProtocol(new TFramedTransport(socket));
1:         socket.open();
commit:2fb6311
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
0: import org.apache.commons.lang.StringUtils;
0: import org.apache.cassandra.thrift.*;
/////////////////////////////////////////////////////////////////////////
0:         String seed = DatabaseDescriptor.getSeeds().iterator().next().getHostAddress();
0:     	ringCache = new RingCache(keyspace, DatabaseDescriptor.getPartitioner(), seed, DatabaseDescriptor.getRpcPort());
/////////////////////////////////////////////////////////////////////////
1:             Collection<InetAddress> endpoints = tester.ringCache.getEndpoint(row);
1:             InetAddress firstEndpoint = endpoints.iterator().next();
1:             System.out.printf("hosts with key %s : %s; choose %s%n",
0:                               new String(row), StringUtils.join(endpoints, ","), firstEndpoint);
1:             tester.setup(firstEndpoint.getHostAddress(), DatabaseDescriptor.getRpcPort());
commit:c618c21
/////////////////////////////////////////////////////////////////////////
0:         TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.Clock;
/////////////////////////////////////////////////////////////////////////
0:             Clock clock = new Clock();
0:             clock.setTimestamp(1);
0:             tester.thriftClient.insert(row, parent, new Column("col1".getBytes(), "val1".getBytes(), clock), ConsistencyLevel.ONE);
0:             System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.clock.timestamp);
commit:0438494
/////////////////////////////////////////////////////////////////////////
1:      * usage: java -cp <configpath> org.apache.cassandra.client.TestRingCache [keyspace row-id-prefix row-id-int]
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
0:             List<InetAddress> endpoints = tester.ringCache.getEndpoint(row);
0:             for (int i = 0; i < endpoints.size(); i++)
0:                 hosts = hosts + ((i > 0) ? "," : "") + endpoints.get(i);
0:             System.out.println("hosts with key " + new String(row) + " : " + hosts + "; choose " + endpoints.get(0));
0:             tester.setup(endpoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
commit:16ba403
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.ColumnParent;
/////////////////////////////////////////////////////////////////////////
0:             ColumnParent parent = new ColumnParent("Standard1").setSuper_column(null);
/////////////////////////////////////////////////////////////////////////
0:             tester.thriftClient.insert(keyspace, row, parent, new Column("col1".getBytes(), "val1".getBytes(), 1), ConsistencyLevel.ONE);
commit:95ead06
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             ColumnPath col = new ColumnPath("Standard1").setSuper_column(null).setColumn("col1".getBytes());
commit:924c7e5
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
0:             List<InetAddress> endPoints = ringCache.getEndPoint(row);
0:             for (int i = 0; i < endPoints.size(); i++)
0:                 hosts = hosts + ((i > 0) ? "," : "") + endPoints.get(i);
0:             System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints.get(0));
0:             setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getThriftPort());
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:             InetAddress endPoints[] = ringCache.getEndPoint(row);
0:             setup(endPoints[0].getHostAddress(), DatabaseDescriptor.getThriftPort());
commit:694a611
/////////////////////////////////////////////////////////////////////////
0:                 hosts = hosts + ((i>0) ? "," : "") + endPoints[i];
0:             System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints[0]);
author:Eric Evans
-------------------------------------------------------------------------------
commit:e649d0f
/////////////////////////////////////////////////////////////////////////
1:             tester.thriftClient.set_keyspace(keyspace);
commit:cb3455f
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AuthenticationRequest;
1: 
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
0:             tester.thriftClient.login(keyspace, new AuthenticationRequest(new HashMap<String,String>()));
0:             tester.thriftClient.insert(row, parent, new Column("col1".getBytes(), "val1".getBytes(), 1), ConsistencyLevel.ONE);
1:             Column column = tester.thriftClient.get(row, col, ConsistencyLevel.ONE).column;
commit:d411227
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     private RingCache ringCache;
1:     private Cassandra.Client thriftClient;
0:     public TestRingCache(String keyspace) throws IOException
0:     	ringCache = new RingCache(keyspace);
1:     
1:     private void setup(String server, int port) throws Exception
/////////////////////////////////////////////////////////////////////////
1:         String rowPrefix, keyspace = "Keyspace1";
/////////////////////////////////////////////////////////////////////////
1:         
1:         TestRingCache tester = new TestRingCache(keyspace);
0:             List<InetAddress> endPoints = tester.ringCache.getEndPoint(row);
0:             tester.setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
0:             tester.thriftClient.insert(keyspace, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
0:             Column column = tester.thriftClient.get(keyspace, row, col, ConsistencyLevel.ONE).column;
commit:fe34d59
/////////////////////////////////////////////////////////////////////////
0:     private static String keyspace = "Keyspace1";
0:         ringCache = new RingCache(keyspace);
/////////////////////////////////////////////////////////////////////////
1:             keyspace = args[0];
/////////////////////////////////////////////////////////////////////////
0:             List<InetAddress> endPoints = ringCache.getEndPoint(row);
/////////////////////////////////////////////////////////////////////////
0:             thriftClient.insert(keyspace, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
0:             Column column=thriftClient.get(keyspace, row, col, ConsistencyLevel.ONE).column;
commit:5a5f9aa
/////////////////////////////////////////////////////////////////////////
0:             setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
commit:542bd79
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.Cassandra;
0: import org.apache.cassandra.thrift.Column;
0: import org.apache.cassandra.thrift.ColumnPath;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
1: 
0: import static org.apache.cassandra.thrift.ThriftGlue.createColumnPath;
1: 
commit:01c02cc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.ConsistencyLevel;
0: import static org.apache.cassandra.service.ThriftGlue.createColumnPath;
/////////////////////////////////////////////////////////////////////////
0:             ColumnPath col = createColumnPath("Standard1", null, "col1".getBytes());
/////////////////////////////////////////////////////////////////////////
0:             thriftClient.insert(table, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
0:             Column column=thriftClient.get(table, row, col, ConsistencyLevel.ONE).column;
commit:bb2c187
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.client;
0: 
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.service.Cassandra;
0: import org.apache.cassandra.service.Column;
0: import org.apache.cassandra.service.ColumnPath;
1: import org.apache.thrift.protocol.TBinaryProtocol;
1: import org.apache.thrift.transport.TSocket;
0: import org.apache.thrift.transport.TTransport;
0: 
1: /**
1:  *  Sample code that uses RingCache in the client.
1:  */
1: public class TestRingCache
1: {
0:     private static RingCache ringCache;
0:     private static Cassandra.Client thriftClient;
0: 
0:     static
1:     {
0:         ringCache = new RingCache();
1:     }
0: 
0:     private static void setup(String server, int port) throws Exception
1:     {
1:         /* Establish a thrift connection to the cassandra instance */
1:         TSocket socket = new TSocket(server, port);
0:         TTransport transport;
1:         System.out.println(" connected to " + server + ":" + port + ".");
0:         transport = socket;
0:         TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, false, false);
1:         Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);
0:         transport.open();
1:         thriftClient = cassandraClient;
1:     }
0: 
1:     /**
0:      * usage: java -Dstorage-config="confpath" org.apache.cassandra.client.TestRingCache
1:      * @param args
1:      * @throws Exception
1:      */
1:     public static void main(String[] args) throws Throwable
1:     {
0:         String table = "Keyspace1";
0:         for (int nRows=1; nRows<10; nRows++)
1:         {
0:             String row = "row" + nRows;
0:             ColumnPath col = new ColumnPath("Standard1", null, "col1".getBytes());
0: 
0:             EndPoint endPoints[] = ringCache.getEndPoint(row);
0:             String hosts="";
0:             for (int i=0; i<endPoints.length; i++)
0:                 hosts = hosts + ((i>0) ? "," : "") + endPoints[i].getHost();
0:             System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints[0].getHost());
0:         
1:             // now, read the row back directly from the host owning the row locally
0:             setup(endPoints[0].getHost(), endPoints[0].getPort());
0:             thriftClient.insert(table, row, col, "val1".getBytes(), 1, 1);
0:             Column column=thriftClient.get(table, row, col, 1).column;
0:             System.out.println("read row " + row + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
1:         }
1:         System.exit(1);
1:     }
1: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:f3a4e17
/////////////////////////////////////////////////////////////////////////
0:             byte[] row = (rowPrefix + nRows).getBytes();
0:             List<InetAddress> endPoints = tester.ringCache.getEndPoint(row);
0:             System.out.println("hosts with key " + new String(row) + " : " + hosts + "; choose " + endPoints.get(0));
0:             System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
commit:434564d
/////////////////////////////////////////////////////////////////////////
0:             List<InetAddress> endPoints = tester.ringCache.getEndPoint(row.getBytes());
commit:3577fd8
/////////////////////////////////////////////////////////////////////////
0:      * usage: java -Dstorage-config="confpath" org.apache.cassandra.client.TestRingCache [keyspace row-id-prefix row-id-int]
1:      * to test a single keyspace/row, use the parameters. row-id-prefix and row-id-int are appended together to form a
1:      * single row id.  If you supply now parameters, 'Keyspace1' is assumed and will check 9 rows ('row1' through 'row9').
0:         String table;
1:         int minRow;
1:         int maxRow;
0:         String rowPrefix;
1:         if (args.length > 0)
0:             table = args[0];
1:             rowPrefix = args[1];
1:             minRow = Integer.parseInt(args[2]);
1:             maxRow = minRow + 1;
1:         }
1:         else
1:         {
0:             table = "Keyspace1";
1:             minRow = 1;
1:             maxRow = 10;
1:             rowPrefix = "row";
1:         }
0: 
1:         for (int nRows = minRow; nRows < maxRow; nRows++)
1:         {
0:             String row = rowPrefix + nRows;
0:             List<InetAddress> endPoints = ringCache.getEndPoint(table, row);
0: 
0: 
author:Jun Rao
-------------------------------------------------------------------------------
commit:c4992f4
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.client;
0: 
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.service.Cassandra;
0: import org.apache.cassandra.service.Column;
0: import org.apache.cassandra.service.ColumnPath;
0: import org.apache.thrift.protocol.TBinaryProtocol;
0: import org.apache.thrift.transport.TSocket;
0: import org.apache.thrift.transport.TTransport;
0: 
0: /**
0:  *  Sample code that uses RingCache in the client.
0:  */
0: public class TestRingCache
0: {
0:     private static RingCache ringCache;
0:     private static Cassandra.Client thriftClient;
0: 
0:     static
0:     {
0:         ringCache = new RingCache();
0:     }
0: 
0:     private static void setup(String server, int port) throws Exception
0:     {
0:         /* Establish a thrift connection to the cassandra instance */
0:         TSocket socket = new TSocket(server, port);
0:         TTransport transport;
0:         System.out.println(" connected to " + server + ":" + port + ".");
0:         transport = socket;
0:         TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, false, false);
0:         Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);
0:         transport.open();
0:         thriftClient = cassandraClient;
0:     }
0: 
0:     /**
0:      * usage: java -Dstorage-config="confpath" org.apache.cassandra.client.TestRingCache
0:      * @param args
0:      * @throws Exception
0:      */
0:     public static void main(String[] args) throws Throwable
0:     {
0:         String table = "Keyspace1";
0:         for (int nRows=1; nRows<10; nRows++)
0:         {
0:             String row = "row" + nRows;
0:             ColumnPath col = new ColumnPath("Standard1", null, "col1".getBytes());
0: 
0:             EndPoint endPoints[] = ringCache.getEndPoint(row);
0:             String hosts="";
0:             for (int i=0; i<endPoints.length; i++)
0:                 hosts = hosts + ((i>0) ? "," : "") + endPoints[i].getHost();
0:             System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints[0].getHost());
0:         
0:             // now, read the row back directly from the host owning the row locally
0:             setup(endPoints[0].getHost(), endPoints[0].getPort());
0:             thriftClient.insert(table, row, col, "val1".getBytes(), 1, 1);
0:             Column column=thriftClient.get(table, row, col, 1).column;
0:             System.out.println("read row " + row + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
0:         }
0:         System.exit(1);
0:     }
0: }
============================================================================