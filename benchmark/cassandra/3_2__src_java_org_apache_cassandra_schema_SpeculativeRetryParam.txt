1:b31845c: /*
1:b31845c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b31845c:  * or more contributor license agreements.  See the NOTICE file
1:b31845c:  * distributed with this work for additional information
1:b31845c:  * regarding copyright ownership.  The ASF licenses this file
1:b31845c:  * to you under the Apache License, Version 2.0 (the
1:b31845c:  * "License"); you may not use this file except in compliance
1:b31845c:  * with the License.  You may obtain a copy of the License at
1:b31845c:  *
1:b31845c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b31845c:  *
1:b31845c:  * Unless required by applicable law or agreed to in writing, software
1:b31845c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b31845c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b31845c:  * See the License for the specific language governing permissions and
1:b31845c:  * limitations under the License.
1:b31845c:  */
1:b31845c: package org.apache.cassandra.schema;
1:b31845c: 
1:b31845c: import java.text.DecimalFormat;
1:b31845c: import java.util.concurrent.TimeUnit;
1:c9ca441: import java.util.Locale;
1:b31845c: 
1:b31845c: import com.google.common.base.Objects;
1:b31845c: 
1:b31845c: import org.apache.cassandra.exceptions.ConfigurationException;
1:b31845c: 
1:b31845c: import static java.lang.String.format;
1:b31845c: 
1:b31845c: public final class SpeculativeRetryParam
1:b31845c: {
1:b31845c:     public enum Kind
1:b31845c:     {
1:b31845c:         NONE, CUSTOM, PERCENTILE, ALWAYS
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static final SpeculativeRetryParam NONE = none();
1:b31845c:     public static final SpeculativeRetryParam ALWAYS = always();
1:b31845c:     public static final SpeculativeRetryParam DEFAULT = percentile(99);
1:b31845c: 
1:b31845c:     private final Kind kind;
1:b31845c:     private final double value;
1:b31845c: 
1:b31845c:     // pre-processed (divided by 100 for PERCENTILE), multiplied by 1M for CUSTOM (to nanos)
1:b31845c:     private final double threshold;
1:b31845c: 
1:b31845c:     private SpeculativeRetryParam(Kind kind, double value)
1:b31845c:     {
1:b31845c:         this.kind = kind;
1:b31845c:         this.value = value;
1:b31845c: 
1:b31845c:         if (kind == Kind.PERCENTILE)
1:b31845c:             threshold = value / 100;
1:b31845c:         else if (kind == Kind.CUSTOM)
1:b31845c:             threshold = TimeUnit.MILLISECONDS.toNanos((long) value);
1:b31845c:         else
1:b31845c:             threshold = value;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public Kind kind()
1:b31845c:     {
1:b31845c:         return kind;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public double threshold()
1:b31845c:     {
1:b31845c:         return threshold;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static SpeculativeRetryParam none()
1:b31845c:     {
1:b31845c:         return new SpeculativeRetryParam(Kind.NONE, 0);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static SpeculativeRetryParam always()
1:b31845c:     {
1:b31845c:         return new SpeculativeRetryParam(Kind.ALWAYS, 0);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static SpeculativeRetryParam custom(double value)
1:b31845c:     {
1:b31845c:         return new SpeculativeRetryParam(Kind.CUSTOM, value);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static SpeculativeRetryParam percentile(double value)
1:b31845c:     {
1:b31845c:         return new SpeculativeRetryParam(Kind.PERCENTILE, value);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static SpeculativeRetryParam fromString(String value)
1:b31845c:     {
1:c9ca441:         if (value.toLowerCase(Locale.ENGLISH).endsWith("ms"))
1:b31845c:         {
1:b31845c:             try
1:b31845c:             {
1:b31845c:                 return custom(Double.parseDouble(value.substring(0, value.length() - "ms".length())));
1:b31845c:             }
1:b31845c:             catch (IllegalArgumentException e)
1:b31845c:             {
1:b31845c:                 throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:b31845c:             }
1:b31845c:         }
1:b31845c: 
1:c9ca441:         if (value.toUpperCase(Locale.ENGLISH).endsWith(Kind.PERCENTILE.toString()))
1:b31845c:         {
1:b31845c:             double threshold;
1:b31845c:             try
1:b31845c:             {
1:b31845c:                 threshold = Double.parseDouble(value.substring(0, value.length() - Kind.PERCENTILE.toString().length()));
1:b31845c:             }
1:b31845c:             catch (IllegalArgumentException e)
1:b31845c:             {
1:b31845c:                 throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:b31845c:             }
1:b31845c: 
1:b31845c:             if (threshold >= 0.0 && threshold <= 100.0)
1:b31845c:                 return percentile(threshold);
1:b31845c: 
1:b31845c:             throw new ConfigurationException(format("Invalid value %s for PERCENTILE option '%s': must be between 0.0 and 100.0",
1:b31845c:                                                     value,
1:b31845c:                                                     TableParams.Option.SPECULATIVE_RETRY));
1:b31845c:         }
1:b31845c: 
1:b31845c:         if (value.equals(Kind.NONE.toString()))
1:b31845c:             return NONE;
1:b31845c: 
1:b31845c:         if (value.equals(Kind.ALWAYS.toString()))
1:b31845c:             return ALWAYS;
1:b31845c: 
1:b31845c:         throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public boolean equals(Object o)
1:b31845c:     {
1:b31845c:         if (!(o instanceof SpeculativeRetryParam))
1:b31845c:             return false;
1:b31845c:         SpeculativeRetryParam srp = (SpeculativeRetryParam) o;
1:b31845c:         return kind == srp.kind && threshold == srp.threshold;
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public int hashCode()
1:b31845c:     {
1:b31845c:         return Objects.hashCode(kind, threshold);
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public String toString()
1:b31845c:     {
1:b31845c:         switch (kind)
1:b31845c:         {
1:b31845c:             case CUSTOM:
1:b31845c:                 return format("%sms", value);
1:b31845c:             case PERCENTILE:
1:b31845c:                 return format("%sPERCENTILE", new DecimalFormat("#.#####").format(value));
1:b31845c:             default: // NONE and ALWAYS
1:b31845c:                 return kind.toString();
1:b31845c:         }
1:b31845c:     }
1:b31845c: }
============================================================================
author:Amit Deshpande
-------------------------------------------------------------------------------
commit:c9ca441
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:         if (value.toLowerCase(Locale.ENGLISH).endsWith("ms"))
/////////////////////////////////////////////////////////////////////////
1:         if (value.toUpperCase(Locale.ENGLISH).endsWith(Kind.PERCENTILE.toString()))
commit:9b35640
/////////////////////////////////////////////////////////////////////////
0: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
0:         if (value.toLowerCase(Locale.ENGLISH).endsWith("ms"))
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:e6e82a7
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.text.DecimalFormat;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: import static java.lang.String.format;
1: 
1: public final class SpeculativeRetryParam
1: {
1:     public enum Kind
1:     {
1:         NONE, CUSTOM, PERCENTILE, ALWAYS
1:     }
1: 
1:     public static final SpeculativeRetryParam NONE = none();
1:     public static final SpeculativeRetryParam ALWAYS = always();
1:     public static final SpeculativeRetryParam DEFAULT = percentile(99);
1: 
1:     private final Kind kind;
1:     private final double value;
1: 
1:     // pre-processed (divided by 100 for PERCENTILE), multiplied by 1M for CUSTOM (to nanos)
1:     private final double threshold;
1: 
1:     private SpeculativeRetryParam(Kind kind, double value)
1:     {
1:         this.kind = kind;
1:         this.value = value;
1: 
1:         if (kind == Kind.PERCENTILE)
1:             threshold = value / 100;
1:         else if (kind == Kind.CUSTOM)
1:             threshold = TimeUnit.MILLISECONDS.toNanos((long) value);
1:         else
1:             threshold = value;
1:     }
1: 
1:     public Kind kind()
1:     {
1:         return kind;
1:     }
1: 
1:     public double threshold()
1:     {
1:         return threshold;
1:     }
1: 
1:     public static SpeculativeRetryParam none()
1:     {
1:         return new SpeculativeRetryParam(Kind.NONE, 0);
1:     }
1: 
1:     public static SpeculativeRetryParam always()
1:     {
1:         return new SpeculativeRetryParam(Kind.ALWAYS, 0);
1:     }
1: 
1:     public static SpeculativeRetryParam custom(double value)
1:     {
1:         return new SpeculativeRetryParam(Kind.CUSTOM, value);
1:     }
1: 
1:     public static SpeculativeRetryParam percentile(double value)
1:     {
1:         return new SpeculativeRetryParam(Kind.PERCENTILE, value);
1:     }
1: 
1:     public static SpeculativeRetryParam fromString(String value)
1:     {
0:         if (value.toLowerCase().endsWith("ms"))
1:         {
1:             try
1:             {
1:                 return custom(Double.parseDouble(value.substring(0, value.length() - "ms".length())));
1:             }
1:             catch (IllegalArgumentException e)
1:             {
1:                 throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:             }
1:         }
1: 
0:         if (value.toUpperCase().endsWith(Kind.PERCENTILE.toString()))
1:         {
1:             double threshold;
1:             try
1:             {
1:                 threshold = Double.parseDouble(value.substring(0, value.length() - Kind.PERCENTILE.toString().length()));
1:             }
1:             catch (IllegalArgumentException e)
1:             {
1:                 throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:             }
1: 
1:             if (threshold >= 0.0 && threshold <= 100.0)
1:                 return percentile(threshold);
1: 
1:             throw new ConfigurationException(format("Invalid value %s for PERCENTILE option '%s': must be between 0.0 and 100.0",
1:                                                     value,
1:                                                     TableParams.Option.SPECULATIVE_RETRY));
1:         }
1: 
1:         if (value.equals(Kind.NONE.toString()))
1:             return NONE;
1: 
1:         if (value.equals(Kind.ALWAYS.toString()))
1:             return ALWAYS;
1: 
1:         throw new ConfigurationException(format("Invalid value %s for option '%s'", value, TableParams.Option.SPECULATIVE_RETRY));
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (!(o instanceof SpeculativeRetryParam))
1:             return false;
1:         SpeculativeRetryParam srp = (SpeculativeRetryParam) o;
1:         return kind == srp.kind && threshold == srp.threshold;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(kind, threshold);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         switch (kind)
1:         {
1:             case CUSTOM:
1:                 return format("%sms", value);
1:             case PERCENTILE:
1:                 return format("%sPERCENTILE", new DecimalFormat("#.#####").format(value));
1:             default: // NONE and ALWAYS
1:                 return kind.toString();
1:         }
1:     }
1: }
============================================================================