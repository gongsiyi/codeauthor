1:217721a: /*
1:217721a:  * Licensed to the Apache Software Foundation (ASF) under one
1:217721a:  * or more contributor license agreements.  See the NOTICE file
1:217721a:  * distributed with this work for additional information
1:217721a:  * regarding copyright ownership.  The ASF licenses this file
1:217721a:  * to you under the Apache License, Version 2.0 (the
1:217721a:  * "License"); you may not use this file except in compliance
1:217721a:  * with the License.  You may obtain a copy of the License at
1:217721a:  *
1:217721a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:217721a:  *
1:217721a:  * Unless required by applicable law or agreed to in writing, software
1:217721a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:217721a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:217721a:  * See the License for the specific language governing permissions and
1:217721a:  * limitations under the License.
1:217721a:  */
1:217721a: package org.apache.cassandra.auth;
1:217721a: 
1:217721a: import java.util.Set;
1:217721a: 
1:217721a: import com.google.common.base.Objects;
1:217721a: import com.google.common.collect.Sets;
1:217721a: import org.apache.commons.lang3.StringUtils;
1:217721a: 
1:217721a: import org.apache.cassandra.config.DatabaseDescriptor;
1:217721a: 
1:217721a: /**
1:217721a:  * IResource implementation representing database roles.
1:217721a:  *
1:217721a:  * The root level "roles" resource represents the collection of all Roles.
1:217721a:  * Individual roles are represented as members of the collection:
1:217721a:  * "roles"                    - the root level collection resource
1:217721a:  * "roles/role1"              - a specific database role
1:217721a:  */
1:217721a: public class RoleResource implements IResource, Comparable<RoleResource>
1:217721a: {
1:217721a:     enum Level
1:217721a:     {
1:217721a:         ROOT, ROLE
1:217721a:     }
1:217721a: 
1:217721a:     // permissions which may be granted on the root level resource
1:217721a:     private static final Set<Permission> ROOT_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:217721a:                                                                                         Permission.ALTER,
1:217721a:                                                                                         Permission.DROP,
1:217721a:                                                                                         Permission.AUTHORIZE,
1:217721a:                                                                                         Permission.DESCRIBE);
1:217721a:     // permissions which may be granted on role level resources
1:217721a:     private static final Set<Permission> ROLE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:217721a:                                                                                         Permission.DROP,
1:217721a:                                                                                         Permission.AUTHORIZE);
1:217721a: 
1:217721a:     private static final String ROOT_NAME = "roles";
1:217721a:     private static final RoleResource ROOT_RESOURCE = new RoleResource();
1:217721a: 
1:217721a:     private final Level level;
1:217721a:     private final String name;
1:217721a: 
1:217721a:     private RoleResource()
1:217721a:     {
1:217721a:         level = Level.ROOT;
1:217721a:         name = null;
1:217721a:     }
1:217721a: 
1:217721a:     private RoleResource(String name)
1:217721a:     {
1:217721a:         level = Level.ROLE;
1:217721a:         this.name = name;
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * @return the root-level resource.
1:217721a:      */
1:217721a:     public static RoleResource root()
1:217721a:     {
1:217721a:         return ROOT_RESOURCE;
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * Creates a RoleResource representing an individual Role.
1:217721a:      * @param name name of the Role.
1:217721a:      * @return RoleResource instance reresenting the Role.
1:217721a:      */
1:217721a:     public static RoleResource role(String name)
1:217721a:     {
1:217721a:         return new RoleResource(name);
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * Parses a role resource name into a RoleResource instance.
1:217721a:      *
1:217721a:      * @param name Name of the data resource.
1:217721a:      * @return RoleResource instance matching the name.
1:217721a:      */
1:217721a:     public static RoleResource fromName(String name)
1:217721a:     {
1:217721a:         String[] parts = StringUtils.split(name, '/');
1:217721a: 
1:217721a:         if (!parts[0].equals(ROOT_NAME) || parts.length > 2)
1:217721a:             throw new IllegalArgumentException(String.format("%s is not a valid role resource name", name));
1:217721a: 
1:217721a:         if (parts.length == 1)
1:217721a:             return root();
1:217721a: 
1:217721a:         return role(parts[1]);
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * @return Printable name of the resource.
1:217721a:      */
1:217721a:     public String getName()
1:217721a:     {
1:217721a:         return level == Level.ROOT ? ROOT_NAME : String.format("%s/%s", ROOT_NAME, name);
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * @return short form name of a role level resource. i.e. not the full "root/name" version returned by getName().
1:217721a:      * Throws IllegalStateException if called on the root-level resource.
1:217721a:      */
1:217721a:     public String getRoleName()
1:217721a:     {
1:217721a:         if (level == Level.ROOT)
1:217721a:             throw new IllegalStateException(String.format("%s role resource has no role name", level));
1:217721a:         return name;
1:217721a:     }
1:217721a: 
1:217721a:     /**
1:217721a:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:217721a:      */
1:217721a:     public IResource getParent()
1:217721a:     {
1:217721a:         if (level == Level.ROLE)
1:217721a:             return root();
1:217721a: 
1:217721a:         throw new IllegalStateException("Root-level resource can't have a parent");
1:217721a:     }
1:217721a: 
1:217721a:     public boolean hasParent()
1:217721a:     {
1:217721a:         return level != Level.ROOT;
1:217721a:     }
1:217721a: 
1:217721a:     public boolean exists()
1:217721a:     {
1:217721a:         return level == Level.ROOT || DatabaseDescriptor.getRoleManager().isExistingRole(this);
1:217721a:     }
1:217721a: 
1:217721a:     public Set<Permission> applicablePermissions()
1:217721a:     {
1:217721a:         return level == Level.ROOT ? ROOT_LEVEL_PERMISSIONS : ROLE_LEVEL_PERMISSIONS;
1:217721a:     }
1:217721a: 
1:217721a:     public int compareTo(RoleResource o)
1:217721a:     {
1:217721a:         return this.name.compareTo(o.name);
1:217721a:     }
1:217721a: 
1:217721a:     @Override
1:217721a:     public String toString()
1:217721a:     {
1:217721a:         return level == Level.ROOT ? "<all roles>" : String.format("<role %s>", name);
1:217721a:     }
1:217721a: 
1:217721a:     @Override
1:217721a:     public boolean equals(Object o)
1:217721a:     {
1:217721a:         if (this == o)
1:217721a:             return true;
1:217721a: 
1:217721a:         if (!(o instanceof RoleResource))
1:217721a:             return false;
1:217721a: 
1:217721a:         RoleResource rs = (RoleResource) o;
1:217721a: 
1:217721a:         return Objects.equal(level, rs.level) && Objects.equal(name, rs.name);
1:217721a:     }
1:217721a: 
1:217721a:     @Override
1:217721a:     public int hashCode()
1:217721a:     {
1:217721a:         return Objects.hashCode(level, name);
1:217721a:     }
1:217721a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Set;
1: 
1: import com.google.common.base.Objects;
0: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Sets;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
1: /**
1:  * IResource implementation representing database roles.
1:  *
1:  * The root level "roles" resource represents the collection of all Roles.
1:  * Individual roles are represented as members of the collection:
1:  * "roles"                    - the root level collection resource
1:  * "roles/role1"              - a specific database role
1:  */
1: public class RoleResource implements IResource, Comparable<RoleResource>
1: {
1:     enum Level
1:     {
1:         ROOT, ROLE
1:     }
1: 
1:     // permissions which may be granted on the root level resource
1:     private static final Set<Permission> ROOT_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:                                                                                         Permission.ALTER,
1:                                                                                         Permission.DROP,
1:                                                                                         Permission.AUTHORIZE,
1:                                                                                         Permission.DESCRIBE);
1:     // permissions which may be granted on role level resources
1:     private static final Set<Permission> ROLE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:                                                                                         Permission.DROP,
1:                                                                                         Permission.AUTHORIZE);
1: 
1:     private static final String ROOT_NAME = "roles";
1:     private static final RoleResource ROOT_RESOURCE = new RoleResource();
1: 
1:     private final Level level;
1:     private final String name;
1: 
1:     private RoleResource()
1:     {
1:         level = Level.ROOT;
1:         name = null;
1:     }
1: 
1:     private RoleResource(String name)
1:     {
1:         level = Level.ROLE;
1:         this.name = name;
1:     }
1: 
1:     /**
1:      * @return the root-level resource.
1:      */
1:     public static RoleResource root()
1:     {
1:         return ROOT_RESOURCE;
1:     }
1: 
1:     /**
1:      * Creates a RoleResource representing an individual Role.
1:      * @param name name of the Role.
1:      * @return RoleResource instance reresenting the Role.
1:      */
1:     public static RoleResource role(String name)
1:     {
1:         return new RoleResource(name);
1:     }
1: 
1:     /**
1:      * Parses a role resource name into a RoleResource instance.
1:      *
1:      * @param name Name of the data resource.
1:      * @return RoleResource instance matching the name.
1:      */
1:     public static RoleResource fromName(String name)
1:     {
1:         String[] parts = StringUtils.split(name, '/');
1: 
1:         if (!parts[0].equals(ROOT_NAME) || parts.length > 2)
1:             throw new IllegalArgumentException(String.format("%s is not a valid role resource name", name));
1: 
1:         if (parts.length == 1)
1:             return root();
1: 
1:         return role(parts[1]);
1:     }
1: 
1:     /**
1:      * @return Printable name of the resource.
1:      */
1:     public String getName()
1:     {
1:         return level == Level.ROOT ? ROOT_NAME : String.format("%s/%s", ROOT_NAME, name);
1:     }
1: 
1:     /**
1:      * @return short form name of a role level resource. i.e. not the full "root/name" version returned by getName().
1:      * Throws IllegalStateException if called on the root-level resource.
1:      */
1:     public String getRoleName()
1:     {
1:         if (level == Level.ROOT)
1:             throw new IllegalStateException(String.format("%s role resource has no role name", level));
1:         return name;
1:     }
1: 
1:     /**
1:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:      */
1:     public IResource getParent()
1:     {
1:         if (level == Level.ROLE)
1:             return root();
1: 
1:         throw new IllegalStateException("Root-level resource can't have a parent");
1:     }
1: 
1:     public boolean hasParent()
1:     {
1:         return level != Level.ROOT;
1:     }
1: 
1:     public boolean exists()
1:     {
1:         return level == Level.ROOT || DatabaseDescriptor.getRoleManager().isExistingRole(this);
1:     }
1: 
1:     public Set<Permission> applicablePermissions()
1:     {
1:         return level == Level.ROOT ? ROOT_LEVEL_PERMISSIONS : ROLE_LEVEL_PERMISSIONS;
1:     }
1: 
1:     public int compareTo(RoleResource o)
1:     {
1:         return this.name.compareTo(o.name);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return level == Level.ROOT ? "<all roles>" : String.format("<role %s>", name);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof RoleResource))
1:             return false;
1: 
1:         RoleResource rs = (RoleResource) o;
1: 
1:         return Objects.equal(level, rs.level) && Objects.equal(name, rs.name);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(level, name);
1:     }
1: }
============================================================================