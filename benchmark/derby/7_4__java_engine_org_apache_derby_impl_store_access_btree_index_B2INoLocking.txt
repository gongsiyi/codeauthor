1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2INoLocking
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:bbcc923: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTree;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: import org.apache.derby.impl.store.access.btree.ControlRow;
1:eac0369: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1:eac0369: import org.apache.derby.impl.store.access.btree.OpenBTree;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
1:d7e478a: 
5:eac0369: /**
1:eac0369: 
1:d7e478a: Secondary index locking policy that does no locking.
1:d7e478a: <p>
1:d7e478a: This is used when the caller knows that logical locks are already obtained 
1:d7e478a: so need not be requested again.  For instance when inserting a row into
1:d7e478a: an index, a X row lock has already been obtained when the row was inserted
1:d7e478a: into the base table, so there is no need to get another lock in the 
1:d7e478a: secondary index.
1:d7e478a: <p>
1:d7e478a: This class overrides all interfaces of BTreeLockingPolicy making them
1:d7e478a: no-ops.
1:d7e478a: 
4:eac0369: **/
1:eac0369: 
1:eac0369: public class B2INoLocking implements BTreeLockingPolicy
4:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public B2INoLocking(
1:eac0369:     Transaction             rawtran,
1:eac0369:     int                     lock_level,
1:eac0369:     LockingPolicy           locking_policy,
1:eac0369:     ConglomerateController  base_cc,
1:eac0369:     OpenBTree               open_btree)
1:eac0369:     {
4:eac0369:     }
1:eac0369: 
1:eac0369:     protected B2INoLocking()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockScan*() locking methods of BTree:
1:86e051f:      *     lockScanRow              - lock row
1:eac0369:      *     unlockScanRecordAfterRead- unlock the scan record
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a btree row to determine if it is a committed deleted row.
4:eac0369:      * <p>
1:eac0369:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
1:eac0369:      * Return true if the lock is granted, otherwise false.
1:eac0369:      * <p>
5:eac0369:      *
1:eac0369:      * @param open_btree        The conglomerate we are locking.
1:eac0369:      * @param leaf              The leaf page with the row to lock.
1:eac0369:      * @param template          A scratch area to use to read in RowLocation.
1:eac0369:      * @param slot_no           The slot of row on "current_leaf" 
1:eac0369:      *
3:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockScanCommittedDeletedRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     LeafControlRow          leaf,
1:eac0369:     DataValueDescriptor[]   template,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     int                     slot_no)
3:eac0369: 		throws StandardException
1:eac0369:     {
2:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a row as part of doing the scan.
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot (or the previous row if slot is 0).
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
1:06dbbcf:      * @param pos               The position of the row to lock.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockScanRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     boolean                 previous_key_lock,
2:eac0369:     boolean                 forUpdate,
2:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Release read lock on a row.
1:eac0369:      *
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void unlockScanRecordAfterRead(
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 forUpdate)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return;
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:eac0369:      *
1:eac0369:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:eac0369:      *     lockNonScanRow           - lock the input row
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the row previous to the input row.
1:eac0369:      * <p>
1:eac0369:      * See BTree.lockPreviousRow() for more info.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockNonScanPreviousRow(
2:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     int                     current_slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the in memory row.
1:eac0369:      * <p>
1:eac0369:      * See BTree.lockRow() for more info.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockNonScanRow(
4:eac0369:     BTree                   btree,
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     LeafControlRow          aux_leaf,
1:eac0369:     DataValueDescriptor[]   current_row,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public boolean lockNonScanRowOnPage(
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     int                     current_slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6fea40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:86e051f
/////////////////////////////////////////////////////////////////////////
1:      *     lockScanRow              - lock row
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bbcc923
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.RecordHandle;
/////////////////////////////////////////////////////////////////////////
0:     public void unlockScan(RecordHandle protectionHandle)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d7e478a
/////////////////////////////////////////////////////////////////////////
1: 
1: Secondary index locking policy that does no locking.
1: <p>
1: This is used when the caller knows that logical locks are already obtained 
1: so need not be requested again.  For instance when inserting a row into
1: an index, a X row lock has already been obtained when the row was inserted
1: into the base table, so there is no need to get another lock in the 
1: secondary index.
1: <p>
1: This class overrides all interfaces of BTreeLockingPolicy making them
1: no-ops.
1: 
commit:06dbbcf
/////////////////////////////////////////////////////////////////////////
1:      * @param pos               The position of the row to lock.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2INoLocking
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.impl.store.access.btree.BTree;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: import org.apache.derby.impl.store.access.btree.ControlRow;
1: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1: import org.apache.derby.impl.store.access.btree.OpenBTree;
1: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.WaitError;
1: 
1: /**
1: 
1: **/
1: 
1: public class B2INoLocking implements BTreeLockingPolicy
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public B2INoLocking(
1:     Transaction             rawtran,
1:     int                     lock_level,
1:     LockingPolicy           locking_policy,
1:     ConglomerateController  base_cc,
1:     OpenBTree               open_btree)
1:     {
1:     }
1: 
1:     protected B2INoLocking()
1:     {
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
1:      *     unlockScanRecordAfterRead- unlock the scan record
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**
0:      * Lock a control row page for scan.
1:      * <p>
0:      * See BTree.lockScan() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public boolean lockScan(
1:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: 
1:     /**
0:      * Lock a control row page for reclaiming deleted rows.
1:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
1:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
1: 		throws StandardException
1:     {
0:         // if doing no locking don't allow reclaiming space.
0:         return(false);
1:     }
1: 
1:     /**
1:      * Lock a btree row to determine if it is a committed deleted row.
1:      * <p>
1:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
1:      * Return true if the lock is granted, otherwise false.
1:      * <p>
1:      *
1:      * @param open_btree        The conglomerate we are locking.
1:      * @param leaf              The leaf page with the row to lock.
1:      * @param template          A scratch area to use to read in RowLocation.
1:      * @param slot_no           The slot of row on "current_leaf" 
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockScanCommittedDeletedRow(
1:     OpenBTree               open_btree,
1:     LeafControlRow          leaf,
1:     DataValueDescriptor[]   template,
1:     FetchDescriptor         lock_fetch_desc,
1:     int                     slot_no)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: 
1:     /**
1:      * Lock a row as part of doing the scan.
1:      * <p>
1:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockScanRow(
1:     OpenBTree               open_btree,
1:     BTree                   btree,
1:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     boolean                 previous_key_lock,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: 
1:     /**
1:      * Release read lock on a row.
1:      *
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void unlockScanRecordAfterRead(
1:     BTreeRowPosition        pos,
1:     boolean                 forUpdate)
1: 		throws StandardException
1:     {
1:         return;
1:     }
1: 
1: 
1:     /**
0:      * Unlock the lock gotten by lockScan().
1:      * <p>
0:      * See BTree.unlockScan() for more info.
1:      *
1:      **/
0:     public void unlockScan(
0:     long    page_number)
1:     {
1:     }
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:      *
1:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:      *     lockNonScanRow           - lock the input row
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Lock the row previous to the input row.
1:      * <p>
1:      * See BTree.lockPreviousRow() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockNonScanPreviousRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     OpenBTree               open_btree,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: 
1: 
1:     /**
1:      * Lock the in memory row.
1:      * <p>
1:      * See BTree.lockRow() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockNonScanRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     LeafControlRow          aux_leaf,
1:     DataValueDescriptor[]   current_row,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: 
1:     public boolean lockNonScanRowOnPage(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(true);
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.impl.store.access.btree.BTree;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
0: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.WaitError;
0: 
0: /**
0: 
0: **/
0: 
0: public class B2INoLocking implements BTreeLockingPolicy
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     public B2INoLocking(
0:     Transaction             rawtran,
0:     int                     lock_level,
0:     LockingPolicy           locking_policy,
0:     ConglomerateController  base_cc,
0:     OpenBTree               open_btree)
0:     {
0:     }
0: 
0:     protected B2INoLocking()
0:     {
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
0:      *     unlockScanRecordAfterRead- unlock the scan record
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**
0:      * Lock a control row page for scan.
0:      * <p>
0:      * See BTree.lockScan() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScan(
0:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: 
0:     /**
0:      * Lock a control row page for reclaiming deleted rows.
0:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
0:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
0: 		throws StandardException
0:     {
0:         // if doing no locking don't allow reclaiming space.
0:         return(false);
0:     }
0: 
0:     /**
0:      * Lock a btree row to determine if it is a committed deleted row.
0:      * <p>
0:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
0:      * Return true if the lock is granted, otherwise false.
0:      * <p>
0:      *
0:      * @param open_btree        The conglomerate we are locking.
0:      * @param leaf              The leaf page with the row to lock.
0:      * @param template          A scratch area to use to read in RowLocation.
0:      * @param slot_no           The slot of row on "current_leaf" 
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanCommittedDeletedRow(
0:     OpenBTree               open_btree,
0:     LeafControlRow          leaf,
0:     DataValueDescriptor[]   template,
0:     FetchDescriptor         lock_fetch_desc,
0:     int                     slot_no)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: 
0:     /**
0:      * Lock a row as part of doing the scan.
0:      * <p>
0:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanRow(
0:     OpenBTree               open_btree,
0:     BTree                   btree,
0:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     boolean                 previous_key_lock,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: 
0:     /**
0:      * Release read lock on a row.
0:      *
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void unlockScanRecordAfterRead(
0:     BTreeRowPosition        pos,
0:     boolean                 forUpdate)
0: 		throws StandardException
0:     {
0:         return;
0:     }
0: 
0: 
0:     /**
0:      * Unlock the lock gotten by lockScan().
0:      * <p>
0:      * See BTree.unlockScan() for more info.
0:      *
0:      **/
0:     public void unlockScan(
0:     long    page_number)
0:     {
0:     }
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockNonScan*() locking methods of BTree:
0:      *
0:      *     lockNonScanPreviousRow   - lock the row previous to the current
0:      *     lockNonScanRow           - lock the input row
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock the row previous to the input row.
0:      * <p>
0:      * See BTree.lockPreviousRow() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockNonScanPreviousRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     OpenBTree               open_btree,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: 
0: 
0:     /**
0:      * Lock the in memory row.
0:      * <p>
0:      * See BTree.lockRow() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockNonScanRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     LeafControlRow          aux_leaf,
0:     DataValueDescriptor[]   current_row,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: 
0:     public boolean lockNonScanRowOnPage(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(true);
0:     }
0: }
============================================================================