1:ec60014: /*
2:ec60014: 
1:ec60014:    Derby - Class org.apache.derby.iapi.jdbc.ExceptionFactory
1:ec60014: 
1:ec60014:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ec60014:    contributor license agreements.  See the NOTICE file distributed with
1:ec60014:    this work for additional information regarding copyright ownership.
1:ec60014:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ec60014:    (the "License"); you may not use this file except in compliance with
1:ec60014:    the License.  You may obtain a copy of the License at
1:ec60014: 
1:ec60014:       http://www.apache.org/licenses/LICENSE-2.0
1:ec60014: 
1:ec60014:    Unless required by applicable law or agreed to in writing, software
1:ec60014:    distributed under the License is distributed on an "AS IS" BASIS,
1:ec60014:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec60014:    See the License for the specific language governing permissions and
1:ec60014:    limitations under the License.
1:ec60014: 
1:ec60014:  */
1:ec60014: 
1:ec60014: package org.apache.derby.iapi.jdbc;
1:ec60014: 
1:ec60014: import java.sql.SQLException;
1:ec60014: 
1:ec60014: /**
1:ec60014:  * An exception factory is used to create SQLExceptions of the correct type.
1:ec60014:  */
1:aa5c5de: public abstract class ExceptionFactory {
1:aa5c5de: 
1:aa5c5de:     /** The singleton ExceptionFactory instance. */
1:aa5c5de:     private static final ExceptionFactory INSTANCE;
1:aa5c5de:     static {
1:aa5c5de:         // Initialize the singleton instance. Use reflection so that there
1:aa5c5de:         // is no compile-time dependency on implementation classes from iapi.
1:aa5c5de:         // Currently, there is only one implementation. There used to be two;
1:aa5c5de:         // one for JDBC 3.0 and lower, and one for JDBC 4.0 and higher. If
1:aa5c5de:         // the need for more than one implementation ever arises again, the
1:aa5c5de:         // code below should be changed to load the correct factory for the
1:aa5c5de:         // run-time platform.
1:aa5c5de:         String impl = "org.apache.derby.impl.jdbc.SQLExceptionFactory";
1:aa5c5de:         ExceptionFactory factory = null;
1:aa5c5de:         try {
1:02597f2:             Class<?> clazz = Class.forName(impl);
1:02597f2:             factory = (ExceptionFactory) clazz.getConstructor().newInstance();
1:aa5c5de:         } catch (Exception e) {
1:aa5c5de:             throw new ExceptionInInitializerError(e);
1:aa5c5de:         }
1:aa5c5de:         INSTANCE = factory;
1:aa5c5de:     }
1:ec60014: 
1:ec60014:     /**
1:aa5c5de:      * Get the singleton exception factory instance.
1:aa5c5de:      * @return an {@code ExceptionFactory} instance
1:ec60014:      */
1:aa5c5de:     public static ExceptionFactory getInstance() {
1:aa5c5de:         return INSTANCE;
1:aa5c5de:     }
1:ec60014: 
1:ec60014:     /**
1:ec60014:      * Construct an SQLException whose message and severity are specified
1:ec60014:      * explicitly.
2:ec60014:      *
1:ec60014:      * @param message the exception message
1:ec60014:      * @param messageId the message id
1:ec60014:      * @param next the next SQLException
1:ec60014:      * @param severity the severity of the exception
1:ec60014:      * @param cause the cause of the exception
1:ec60014:      * @param args the message arguments
1:ec60014:      * @return an SQLException
1:ec60014:      */
1:aa5c5de:     public abstract SQLException getSQLException(String message, String messageId,
1:aa5c5de:             SQLException next, int severity, Throwable cause, Object... args);
1:ec60014: 
1:ec60014:     /**
1:ec60014:      * Construct an SQLException whose message and severity are derived from
1:ec60014:      * the message id.
1:ec60014:      *
1:ec60014:      * @param messageId the message id
1:ec60014:      * @param next the next SQLException
1:ec60014:      * @param cause the cause of the exception
1:ec60014:      * @param args the message arguments
1:ec60014:      * @return an SQLException
1:ec60014:      */
1:aa5c5de:     public abstract SQLException getSQLException(String messageId,
1:aa5c5de:             SQLException next, Throwable cause, Object... args);
1:ec60014: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:02597f2
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(impl);
1:             factory = (ExceptionFactory) clazz.getConstructor().newInstance();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:aa5c5de
/////////////////////////////////////////////////////////////////////////
1: public abstract class ExceptionFactory {
1: 
1:     /** The singleton ExceptionFactory instance. */
1:     private static final ExceptionFactory INSTANCE;
1:     static {
1:         // Initialize the singleton instance. Use reflection so that there
1:         // is no compile-time dependency on implementation classes from iapi.
1:         // Currently, there is only one implementation. There used to be two;
1:         // one for JDBC 3.0 and lower, and one for JDBC 4.0 and higher. If
1:         // the need for more than one implementation ever arises again, the
1:         // code below should be changed to load the correct factory for the
1:         // run-time platform.
1:         String impl = "org.apache.derby.impl.jdbc.SQLExceptionFactory";
1:         ExceptionFactory factory = null;
1:         try {
0:             factory = (ExceptionFactory) Class.forName(impl).newInstance();
1:         } catch (Exception e) {
1:             throw new ExceptionInInitializerError(e);
1:         }
1:         INSTANCE = factory;
1:     }
1:      * Get the singleton exception factory instance.
1:      * @return an {@code ExceptionFactory} instance
1:     public static ExceptionFactory getInstance() {
1:         return INSTANCE;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public abstract SQLException getSQLException(String message, String messageId,
1:             SQLException next, int severity, Throwable cause, Object... args);
/////////////////////////////////////////////////////////////////////////
1:     public abstract SQLException getSQLException(String messageId,
1:             SQLException next, Throwable cause, Object... args);
commit:ec60014
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.jdbc.ExceptionFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.jdbc;
1: 
1: import java.sql.SQLException;
1: 
1: /**
1:  * An exception factory is used to create SQLExceptions of the correct type.
1:  */
0: public interface ExceptionFactory {
1: 
1:     /**
0:      * Unpack a SQL exception, looking for an EmbedSQLException which carries
0:      * the Derby messageID and args which we will serialize across DRDA so
0:      * that the client can reconstitute a SQLException with appropriate text.
0:      * If we are running JDBC 3, then we hope that the passed-in
0:      * exception is already an EmbedSQLException, which carries all the
0:      * information we need.
1:      *
0:      * @param se the exception to unpack
0:      * @return the argument ferry for the exception
1:      */
0:     SQLException getArgumentFerry(SQLException se);
1: 
1:     /**
1:      * Construct an SQLException whose message and severity are specified
1:      * explicitly.
1:      *
1:      * @param message the exception message
1:      * @param messageId the message id
1:      * @param next the next SQLException
1:      * @param severity the severity of the exception
1:      * @param cause the cause of the exception
1:      * @param args the message arguments
1:      * @return an SQLException
1:      */
0:     SQLException getSQLException(String message, String messageId,
0:             SQLException next, int severity, Throwable cause, Object[] args);
1: 
1:     /**
1:      * Construct an SQLException whose message and severity are derived from
1:      * the message id.
1:      *
1:      * @param messageId the message id
1:      * @param next the next SQLException
1:      * @param cause the cause of the exception
1:      * @param args the message arguments
1:      * @return an SQLException
1:      */
0:     SQLException getSQLException(String messageId, SQLException next,
0:             Throwable cause, Object[] args);
1: 
1: }
============================================================================