1:d36ca18: /**
1:d36ca18:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TriggerBeforeTrigTest
1:d36ca18:  *
1:d36ca18:  * Licensed to the Apache Software Foundation (ASF) under one
1:d36ca18:  * or more contributor license agreements.  See the NOTICE file
1:d36ca18:  * distributed with this work for additional information
1:d36ca18:  * regarding copyright ownership.  The ASF licenses this file
1:d36ca18:  * to you under the Apache License, Version 2.0 (the
1:d36ca18:  * "License"); you may not use this file except in compliance
1:d36ca18:  * with the License.  You may obtain a copy of the License at
1:d36ca18:  *
1:d36ca18:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d36ca18:  *
1:d36ca18:  * Unless required by applicable law or agreed to in writing,
1:d36ca18:  * software distributed under the License is distributed on an
1:d36ca18:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d36ca18:  * KIND, either express or implied.  See the License for the
1:d36ca18:  * specific language governing permissions and limitations
1:d36ca18:  * under the License.
1:d36ca18:  */
1:d36ca18: 
1:d36ca18: package org.apache.derbyTesting.functionTests.tests.lang;
1:d36ca18: 
1:d36ca18: import java.sql.ResultSet;
1:d36ca18: import java.sql.SQLException;
1:d36ca18: import java.sql.Statement;
1:d36ca18: import junit.framework.Test;
1:d36ca18: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:d36ca18: import org.apache.derbyTesting.junit.JDBC;
1:d36ca18: import org.apache.derbyTesting.junit.TestConfiguration;
1:d36ca18: 
1:d36ca18: /**
1:d36ca18:  * Consolidated BEFORE trigger tests from all trigger tests. 
1:d36ca18:  *  
1:d36ca18:  * The following tests moved from TriggerValidate.sql to
1:d36ca18:  * "here" (i.e. to the earlier the harness version
1:d36ca18:  * ("triggerBeforeTrig.sql) of this JUnit test.
1:d36ca18:  */
1:d36ca18:        
1:d36ca18: public final class TriggerBeforeTrigTest extends BaseJDBCTestCase {
1:d36ca18: 
1:d36ca18:     public static final String LANG_COL_NOT_FOUND = "42X04";
1:d36ca18:     public static final String LANG_TRIGGER_BAD_REF_MISMATCH = "42Y92";
1:d36ca18:     public static final String LANG_TRIGGER_BAD_REF_CLAUSE_DUPS = "42Y93";
1:d36ca18:     public static final String LANG_UNSUPPORTED_TRIGGER_STMT = "42Z9D";
1:d36ca18:     public static final String LANG_SYNTAX_ERROR = "42X01";
1:d36ca18:     
1:d36ca18:     /**
1:d36ca18:      * Public constructor required for running test as standalone JUnit.
1:d36ca18:      * @param name test name
1:d36ca18:      */
1:d36ca18:     public TriggerBeforeTrigTest(String name)
1:d36ca18:     {
1:d36ca18:         super(name);
1:d36ca18:     }
1:d36ca18: 
1:d36ca18:     public static Test suite()
1:d36ca18:     {
1:d36ca18:         return TestConfiguration.defaultSuite(TriggerBeforeTrigTest.class);
1:d36ca18:     }
1:d36ca18: 
1:d36ca18:     public void testBeforeTriggers() throws Exception
1:d36ca18:     {
1:d36ca18:         ResultSet rs;
1:d36ca18:         Statement st = createStatement();
1:d36ca18:         
1:d36ca18:         try {
1:d36ca18:         st.executeUpdate("create table x (x int, constraint ck check (x > 0))");
1:d36ca18:         
1:d36ca18:         st.executeUpdate("create table unrelated (x int, constraint "
1:d36ca18:             + "ckunrelated check (x > 0))");
1:d36ca18:         
1:d36ca18:         st.executeUpdate("create index x on x(x)");
1:d36ca18:         
1:d36ca18:         //---------------------------------- 
1:d36ca18:         // DDL
1:d36ca18:         //----------------------------------
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement drop table x");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement drop index x");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement alter table x add column y int");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement alter table x add constraint ck2 "
1:d36ca18:             + "check(x > 0)");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement alter table x drop constraint ck");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement create index x2 on x (x)");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement create index xunrelated on unrelated(x)");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement drop index xunrelated");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement drop trigger tbad");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement "
1:d36ca18:             + "	create trigger tbad2 NO CASCADE before insert on x "
1:d36ca18:             + "for each statement values 1");
1:d36ca18:         
1:d36ca18:         st.executeUpdate("create trigger tokv1 NO CASCADE before insert on x "
1:d36ca18:             + "for each statement values 1");
1:d36ca18:         
1:d36ca18:         st.executeUpdate("insert into x values 1");
1:d36ca18:         
1:d36ca18:         rs = st.executeQuery("select * from x");
1:d36ca18:         JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1:d36ca18:         
1:d36ca18:         st.executeUpdate("drop trigger tokv1");
1:d36ca18:         
1:d36ca18:         //---------------------------------- 
1:d36ca18:         // MISC
1:d36ca18:         //----------------------------------
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement set isolation to rr");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger tbad NO CASCADE before insert on x "
1:d36ca18:             + "for each statement lock table x in share mode");
1:d36ca18:         
1:d36ca18:         //---------------------------------- 
1:d36ca18:         // DML, cannot perform 
1:d36ca18:         // dml on same table for before trigger, of for 
1:d36ca18:         // after
1:d36ca18:         // ---------------------------------- 
1:d36ca18:         
1:d36ca18:         // before
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:d36ca18:             "create trigger tbadX NO CASCADE before insert on x "
1:d36ca18:             + "for each statement insert into x values 1");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:d36ca18:             "create trigger tbadX NO CASCADE before insert on x "
1:d36ca18:             + "for each statement delete from x");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:d36ca18:             "create trigger tbadX NO CASCADE before insert on x "
1:d36ca18:             + "for each statement update x set x = x");
1:d36ca18:         
1:d36ca18:         // Following tests moved here from triggerRefClause, since 
1:d36ca18:         // these use BEFORE triggers syntax
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing badtoken as oldtable for each row values 1");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old as oldrow new for each row values 1");
1:d36ca18:         
1:d36ca18:         // dup names
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_CLAUSE_DUPS, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old as oldrow new as newrow old as oldrow2 "
1:d36ca18:             + "	for each row values 1");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_CLAUSE_DUPS, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing new as newrow new as newrow2 old as oldrow2 "
1:d36ca18:             + "	for each row values 1");
1:d36ca18:         
1:d36ca18:         // mismatch: row->for each statement, table->for each row
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing new_table as newtab for each row values 1");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing new as newrow for each statement values 1");
1:d36ca18:         
1:d36ca18:         // same as above, but using old
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old_table as old for each row select * from old");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old_table as old for each statement values old.x");
1:d36ca18:         
1:d36ca18:         // old and new cannot be used once they have been redefined
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old_table as oldtable for each "
1:d36ca18:             + "statement select * from old");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_COL_NOT_FOUND, st,
1:d36ca18:             "create trigger t1 NO CASCADE before update on x "
1:d36ca18:             + "referencing old as oldtable for each row values old.x");
1:d36ca18:         
1:d36ca18:         // try some other likely uses
1:d36ca18:         
1:d36ca18:         st.executeUpdate("create table y (x int)");
1:d36ca18:         
1:d36ca18:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:d36ca18:             "create trigger t1 NO CASCADE before insert on x "
1:d36ca18:             + "referencing new_table as newrowtab for each "
1:d36ca18:             + "statement insert into y select x from newrowtab");
1:d36ca18:         
1:d36ca18:         } finally {
1:d36ca18:             // cleanup
1:d36ca18:             dontThrow(st, "drop table x");
1:d36ca18:             dontThrow(st, "drop table y");
1:d36ca18:             dontThrow(st, "drop table unrelated");
1:d36ca18:             commit();
1:d36ca18:         }
1:d36ca18:     }
1:d36ca18: 
1:d36ca18: 
1:d36ca18: 
1:d36ca18:     private void dontThrow(Statement st, String stm) {
1:d36ca18:         try {
1:d36ca18:             st.executeUpdate(stm);
1:d36ca18:         } catch (SQLException e) {
1:d36ca18:             // ignore, best effort here
1:d36ca18:             println("\"" + stm+ "\" failed");
1:d36ca18:         }
1:d36ca18:     }
1:d36ca18: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:d36ca18
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TriggerBeforeTrigTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Consolidated BEFORE trigger tests from all trigger tests. 
1:  *  
1:  * The following tests moved from TriggerValidate.sql to
1:  * "here" (i.e. to the earlier the harness version
1:  * ("triggerBeforeTrig.sql) of this JUnit test.
1:  */
1:        
1: public final class TriggerBeforeTrigTest extends BaseJDBCTestCase {
1: 
1:     public static final String LANG_COL_NOT_FOUND = "42X04";
1:     public static final String LANG_TRIGGER_BAD_REF_MISMATCH = "42Y92";
1:     public static final String LANG_TRIGGER_BAD_REF_CLAUSE_DUPS = "42Y93";
1:     public static final String LANG_UNSUPPORTED_TRIGGER_STMT = "42Z9D";
1:     public static final String LANG_SYNTAX_ERROR = "42X01";
1:     
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public TriggerBeforeTrigTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         return TestConfiguration.defaultSuite(TriggerBeforeTrigTest.class);
1:     }
1: 
1:     public void testBeforeTriggers() throws Exception
1:     {
1:         ResultSet rs;
1:         Statement st = createStatement();
1:         
1:         try {
1:         st.executeUpdate("create table x (x int, constraint ck check (x > 0))");
1:         
1:         st.executeUpdate("create table unrelated (x int, constraint "
1:             + "ckunrelated check (x > 0))");
1:         
1:         st.executeUpdate("create index x on x(x)");
1:         
1:         //---------------------------------- 
1:         // DDL
1:         //----------------------------------
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement drop table x");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement drop index x");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement alter table x add column y int");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement alter table x add constraint ck2 "
1:             + "check(x > 0)");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement alter table x drop constraint ck");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement create index x2 on x (x)");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement create index xunrelated on unrelated(x)");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement drop index xunrelated");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement drop trigger tbad");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement "
1:             + "	create trigger tbad2 NO CASCADE before insert on x "
1:             + "for each statement values 1");
1:         
1:         st.executeUpdate("create trigger tokv1 NO CASCADE before insert on x "
1:             + "for each statement values 1");
1:         
1:         st.executeUpdate("insert into x values 1");
1:         
1:         rs = st.executeQuery("select * from x");
1:         JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1:         
1:         st.executeUpdate("drop trigger tokv1");
1:         
1:         //---------------------------------- 
1:         // MISC
1:         //----------------------------------
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement set isolation to rr");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger tbad NO CASCADE before insert on x "
1:             + "for each statement lock table x in share mode");
1:         
1:         //---------------------------------- 
1:         // DML, cannot perform 
1:         // dml on same table for before trigger, of for 
1:         // after
1:         // ---------------------------------- 
1:         
1:         // before
1:         
1:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:             "create trigger tbadX NO CASCADE before insert on x "
1:             + "for each statement insert into x values 1");
1:         
1:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:             "create trigger tbadX NO CASCADE before insert on x "
1:             + "for each statement delete from x");
1:         
1:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:             "create trigger tbadX NO CASCADE before insert on x "
1:             + "for each statement update x set x = x");
1:         
1:         // Following tests moved here from triggerRefClause, since 
1:         // these use BEFORE triggers syntax
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing badtoken as oldtable for each row values 1");
1:         
1:         assertStatementError(LANG_SYNTAX_ERROR, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old as oldrow new for each row values 1");
1:         
1:         // dup names
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_CLAUSE_DUPS, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old as oldrow new as newrow old as oldrow2 "
1:             + "	for each row values 1");
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_CLAUSE_DUPS, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing new as newrow new as newrow2 old as oldrow2 "
1:             + "	for each row values 1");
1:         
1:         // mismatch: row->for each statement, table->for each row
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing new_table as newtab for each row values 1");
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing new as newrow for each statement values 1");
1:         
1:         // same as above, but using old
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old_table as old for each row select * from old");
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old_table as old for each statement values old.x");
1:         
1:         // old and new cannot be used once they have been redefined
1:         
1:         assertStatementError(LANG_TRIGGER_BAD_REF_MISMATCH, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old_table as oldtable for each "
1:             + "statement select * from old");
1:         
1:         assertStatementError(LANG_COL_NOT_FOUND, st,
1:             "create trigger t1 NO CASCADE before update on x "
1:             + "referencing old as oldtable for each row values old.x");
1:         
1:         // try some other likely uses
1:         
1:         st.executeUpdate("create table y (x int)");
1:         
1:         assertStatementError(LANG_UNSUPPORTED_TRIGGER_STMT, st,
1:             "create trigger t1 NO CASCADE before insert on x "
1:             + "referencing new_table as newrowtab for each "
1:             + "statement insert into y select x from newrowtab");
1:         
1:         } finally {
1:             // cleanup
1:             dontThrow(st, "drop table x");
1:             dontThrow(st, "drop table y");
1:             dontThrow(st, "drop table unrelated");
1:             commit();
1:         }
1:     }
1: 
1: 
1: 
1:     private void dontThrow(Statement st, String stm) {
1:         try {
1:             st.executeUpdate(stm);
1:         } catch (SQLException e) {
1:             // ignore, best effort here
1:             println("\"" + stm+ "\" failed");
1:         }
1:     }
1: }
============================================================================