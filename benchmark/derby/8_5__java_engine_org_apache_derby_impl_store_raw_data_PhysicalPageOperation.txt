1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.PhysicalPageOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An abstract class that is used for physical log operation.  A physical log
1:eac0369: 	operation is one where the undo of the operation must be applied to the
1:eac0369: 	same page as the original operation, and the undo operation must store the
1:eac0369: 	byte image of the row(s) changed to its before image.  (If a logical page
1:eac0369: 	operation happened to the page or if another transaction altered other rows
1:eac0369: 	on the page, the undo of this operation will only restore the before image
1:eac0369: 	of the row(s) affected).
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	no format id, an abstract class.
1:787ceb4: 	@derby.purpose	provide methods for physical undo
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PageBasicOperation	the super class
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: */
1:eac0369: 
1:3546404: abstract class PhysicalPageOperation extends PageBasicOperation
1:3546404:         implements Undoable
1:eac0369: {
1:3546404:     PhysicalPageOperation(BasePage page)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public PhysicalPageOperation() { super(); }
1:eac0369: 
1:eac0369: 	// no fields, therefore no writeExternal or readExternal
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undoable method
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	  Generate a Compensation (PageUndoOperation) that will rollback the
1:eac0369: 	  changes of this page operation. If this Page operation cannot or need not
1:eac0369: 	  be rolled back (redo only), overwrite this function to return null.
1:eac0369: 
1:eac0369: 	  <P><B>Note</B><BR> For operation that needs logical undo, use
1:eac0369: 	  LogicalUndoOperation instead</B>  This implementation just finds
1:eac0369: 	  the same page that the PageOperation was applied on - i.e., only works
1:eac0369: 	  for undo on the same page.  
1:eac0369: 
1:eac0369: 	  <P>During recovery redo, the logging system is page oriented and will use
1:eac0369: 	  the pageID stored in the PageUndoOperation to find the page.  The
1:eac0369: 	  page will be latched and released using the default findpage and
1:eac0369: 	  releaseResource - this.releaseResource() will still be called so it has
1:eac0369: 	  to know not to release any resource it did not acquire.
1:eac0369: 
1:eac0369: 	  @param xact	the transaction doing the compensating
1:eac0369: 	  @param in		optional input
1:eac0369: 
1:eac0369: 	  @return the compensation operation that will rollback this change 
1:eac0369: 
1:94f158a: 	  @exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 	  @see PageBasicOperation
1:eac0369: 	  @see Undoable#generateUndo
1:eac0369: 	  
1:eac0369:     */
1:eac0369: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		// findpage will have the page latched.
1:eac0369: 		// CompensationOperation.doMe must call this.releaseResource the page
1:eac0369: 		// when it is done 
1:eac0369: 		BasePage undoPage = findpage(xact);
1:eac0369: 
1:eac0369: 		// Needs to pre-dirty this page so that if a checkpoint is taken any
1:eac0369: 		// time after the CLR is sent to the log stream, it will wait for the
1:eac0369: 		// actual undo to happen on the page.  We need this to preserve the
1:eac0369: 		// integrity of the redoLWM.
1:eac0369: 		undoPage.preDirty();
1:eac0369: 
1:eac0369: 		return new PhysicalUndoOperation(undoPage, this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undo the change indicated by this log operation and optional data.
1:eac0369: 		The page the undo should apply to is the latched undoPage, the
1:eac0369: 		recordId is the same as the roll forward operation.  
1:eac0369: 		
1:eac0369: 		<BR><B>In this RawStore implementation, should only only be called via
1:eac0369: 		CompOp.doMe</B>.
1:eac0369: 
1:eac0369: 		<P> The available() method of in indicates how much data can be read, i.e.
1:eac0369: 		how much was originally written.
1:eac0369: 
1:eac0369: 		@param xact			the Transaction doing the rollback
1:eac0369: 		@param undoPage		the page to rollback changes on
1:eac0369: 		@param CLRinstant	the log instant of this (PageUndo) operation
1:eac0369: 		@param in			optional data for the rollback operation
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	*/
1:eac0369: 	abstract public void undoMe(Transaction xact, BasePage undoPage,
1:eac0369: 								   LogInstant CLRinstant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: abstract class PhysicalPageOperation extends PageBasicOperation
1:         implements Undoable
1:     PhysicalPageOperation(BasePage page)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	no format id, an abstract class.
1: 	@derby.purpose	provide methods for physical undo
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	  @exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.PhysicalPageOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
1: import org.apache.derby.iapi.store.raw.Compensation;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.io.InputStream;
0: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	An abstract class that is used for physical log operation.  A physical log
1: 	operation is one where the undo of the operation must be applied to the
1: 	same page as the original operation, and the undo operation must store the
1: 	byte image of the row(s) changed to its before image.  (If a logical page
1: 	operation happened to the page or if another transaction altered other rows
1: 	on the page, the undo of this operation will only restore the before image
1: 	of the row(s) affected).
1: 
1: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for physical undo
0: 	@upgrade
0: 	@disk_layout
1: 		PageBasicOperation	the super class
0: 	@end_format
1: 	</PRE>
1: */
1: 
0: public abstract class PhysicalPageOperation extends PageBasicOperation implements Undoable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected PhysicalPageOperation(BasePage page)
1: 	{
1: 		super(page);
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public PhysicalPageOperation() { super(); }
1: 
1: 	// no fields, therefore no writeExternal or readExternal
1: 
1: 	/**
1: 		Undoable method
1: 	*/
1: 
1: 	/** 
1: 	  Generate a Compensation (PageUndoOperation) that will rollback the
1: 	  changes of this page operation. If this Page operation cannot or need not
1: 	  be rolled back (redo only), overwrite this function to return null.
1: 
1: 	  <P><B>Note</B><BR> For operation that needs logical undo, use
1: 	  LogicalUndoOperation instead</B>  This implementation just finds
1: 	  the same page that the PageOperation was applied on - i.e., only works
1: 	  for undo on the same page.  
1: 
1: 	  <P>During recovery redo, the logging system is page oriented and will use
1: 	  the pageID stored in the PageUndoOperation to find the page.  The
1: 	  page will be latched and released using the default findpage and
1: 	  releaseResource - this.releaseResource() will still be called so it has
1: 	  to know not to release any resource it did not acquire.
1: 
1: 	  @param xact	the transaction doing the compensating
1: 	  @param in		optional input
0: 	  @param dataLength optional input length
1: 
1: 	  @return the compensation operation that will rollback this change 
1: 
0: 	  @exception StandardException Standard Cloudscape policy.
1: 
1: 	  @see PageBasicOperation
1: 	  @see Undoable#generateUndo
1: 	  
1:     */
1: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 		// findpage will have the page latched.
1: 		// CompensationOperation.doMe must call this.releaseResource the page
1: 		// when it is done 
1: 		BasePage undoPage = findpage(xact);
1: 
1: 		// Needs to pre-dirty this page so that if a checkpoint is taken any
1: 		// time after the CLR is sent to the log stream, it will wait for the
1: 		// actual undo to happen on the page.  We need this to preserve the
1: 		// integrity of the redoLWM.
1: 		undoPage.preDirty();
1: 
1: 		return new PhysicalUndoOperation(undoPage, this);
1: 	}
1: 
1: 
1: 	/**
1: 		Undo the change indicated by this log operation and optional data.
1: 		The page the undo should apply to is the latched undoPage, the
1: 		recordId is the same as the roll forward operation.  
1: 		
1: 		<BR><B>In this RawStore implementation, should only only be called via
1: 		CompOp.doMe</B>.
1: 
1: 		<P> The available() method of in indicates how much data can be read, i.e.
1: 		how much was originally written.
1: 
1: 		@param xact			the Transaction doing the rollback
1: 		@param undoPage		the page to rollback changes on
1: 		@param CLRinstant	the log instant of this (PageUndo) operation
1: 		@param in			optional data for the rollback operation
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	*/
1: 	abstract public void undoMe(Transaction xact, BasePage undoPage,
1: 								   LogInstant CLRinstant, LimitObjectInput in) 
1: 		 throws StandardException, IOException;
1: 
1: 
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.store.raw.Compensation;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.io.InputStream;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	An abstract class that is used for physical log operation.  A physical log
0: 	operation is one where the undo of the operation must be applied to the
0: 	same page as the original operation, and the undo operation must store the
0: 	byte image of the row(s) changed to its before image.  (If a logical page
0: 	operation happened to the page or if another transaction altered other rows
0: 	on the page, the undo of this operation will only restore the before image
0: 	of the row(s) affected).
0: 
0: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for physical undo
0: 	@upgrade
0: 	@disk_layout
0: 		PageBasicOperation	the super class
0: 	@end_format
0: 	</PRE>
0: */
0: 
0: public abstract class PhysicalPageOperation extends PageBasicOperation implements Undoable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected PhysicalPageOperation(BasePage page)
0: 	{
0: 		super(page);
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public PhysicalPageOperation() { super(); }
0: 
0: 	// no fields, therefore no writeExternal or readExternal
0: 
0: 	/**
0: 		Undoable method
0: 	*/
0: 
0: 	/** 
0: 	  Generate a Compensation (PageUndoOperation) that will rollback the
0: 	  changes of this page operation. If this Page operation cannot or need not
0: 	  be rolled back (redo only), overwrite this function to return null.
0: 
0: 	  <P><B>Note</B><BR> For operation that needs logical undo, use
0: 	  LogicalUndoOperation instead</B>  This implementation just finds
0: 	  the same page that the PageOperation was applied on - i.e., only works
0: 	  for undo on the same page.  
0: 
0: 	  <P>During recovery redo, the logging system is page oriented and will use
0: 	  the pageID stored in the PageUndoOperation to find the page.  The
0: 	  page will be latched and released using the default findpage and
0: 	  releaseResource - this.releaseResource() will still be called so it has
0: 	  to know not to release any resource it did not acquire.
0: 
0: 	  @param xact	the transaction doing the compensating
0: 	  @param in		optional input
0: 	  @param dataLength optional input length
0: 
0: 	  @return the compensation operation that will rollback this change 
0: 
0: 	  @exception StandardException Standard Cloudscape policy.
0: 
0: 	  @see PageBasicOperation
0: 	  @see Undoable#generateUndo
0: 	  
0:     */
0: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 		// findpage will have the page latched.
0: 		// CompensationOperation.doMe must call this.releaseResource the page
0: 		// when it is done 
0: 		BasePage undoPage = findpage(xact);
0: 
0: 		// Needs to pre-dirty this page so that if a checkpoint is taken any
0: 		// time after the CLR is sent to the log stream, it will wait for the
0: 		// actual undo to happen on the page.  We need this to preserve the
0: 		// integrity of the redoLWM.
0: 		undoPage.preDirty();
0: 
0: 		return new PhysicalUndoOperation(undoPage, this);
0: 	}
0: 
0: 
0: 	/**
0: 		Undo the change indicated by this log operation and optional data.
0: 		The page the undo should apply to is the latched undoPage, the
0: 		recordId is the same as the roll forward operation.  
0: 		
0: 		<BR><B>In this RawStore implementation, should only only be called via
0: 		CompOp.doMe</B>.
0: 
0: 		<P> The available() method of in indicates how much data can be read, i.e.
0: 		how much was originally written.
0: 
0: 		@param xact			the Transaction doing the rollback
0: 		@param undoPage		the page to rollback changes on
0: 		@param CLRinstant	the log instant of this (PageUndo) operation
0: 		@param in			optional data for the rollback operation
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	*/
0: 	abstract public void undoMe(Transaction xact, BasePage undoPage,
0: 								   LogInstant CLRinstant, LimitObjectInput in) 
0: 		 throws StandardException, IOException;
0: 
0: 
0: }
0: 
============================================================================