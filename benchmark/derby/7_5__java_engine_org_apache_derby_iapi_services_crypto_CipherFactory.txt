1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.crypto.CipherFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.crypto;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import java.security.SecureRandom;
1:eac0369: import java.util.Properties;
1:eac0369: import org.apache.derby.io.StorageFactory;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A CipherFactory can create new CipherProvider, which is a wrapper for a
1:eac0369: 	javax.crypto.Cipher
1:eac0369: 
1:eac0369: 	This service is only available when run on JDK1.2 or beyond.
1:eac0369: 	To use this service, either the SunJCE or an alternative clean room
1:eac0369:     implementation of the JCE must be installed.
1:eac0369: 
1:eac0369: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
1:eac0369: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
1:eac0369: 	2) A secret Key for the encryption/decryption
1:eac0369: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
1:eac0369: 		randomness in the encryption
1:eac0369: 
1:eac0369:     See $WS/docs/funcspec/mulan/configurableEncryption.html
1:eac0369: 
1:eac0369: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
1:eac0369: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
1:eac0369: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface CipherFactory
1:eac0369: {
1:eac0369: 
1:eac0369:     /** Minimum bootPassword length */
1:eac0369:     public static final int MIN_BOOTPASS_LENGTH = 8;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a CipherProvider that either Encrypts or Decrypts.
1:eac0369: 	 */
1:eac0369: 	public static final int ENCRYPT = 1;
1:eac0369: 	public static final int DECRYPT = 2;
1:eac0369: 
1:eac0369: 
1:eac0369: 	SecureRandom getSecureRandom();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns a CipherProvider which is the encryption or decryption engine.
1:eac0369: 		@param mode is either ENCRYPT or DECRYPT.  The CipherProvider can only
1:eac0369: 				do encryption or decryption but not both.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Error Policy
1:eac0369: 	 */
1:eac0369: 	CipherProvider createNewCipher(int mode)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	public String changeBootPassword(String changeString, Properties properties, CipherProvider verify)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:6b50965: 		Verify the external encryption key. Throws exception if unable to verify
1:6b50965: 		that the encryption key is the same as that
1:6b50965: 		used during database creation or if there are any problems when trying to do the
1:6b50965: 		verification process.
1:6b50965: 		
1:eac0369: 		@param	create	 true means database is being created, whereas false
1:eac0369: 					implies that the database has already been created
1:eac0369: 		@param	storageFactory storageFactory is used to access any stored data
1:eac0369: 					that might be needed for verification process of the encryption key
1:eac0369: 		@param	properties	properties at time of database connection as well as those in service.properties
1:eac0369: 	 */
1:eac0369: 	public void verifyKey(boolean create, StorageFactory storageFactory,Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:ae71c74:     public void saveProperties(Properties properties);
1:ae71c74: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1:     public void saveProperties(Properties properties);
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 		Verify the external encryption key. Throws exception if unable to verify
1: 		that the encryption key is the same as that
1: 		used during database creation or if there are any problems when trying to do the
1: 		verification process.
1: 		
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.crypto.CipherFactory
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.crypto
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.crypto;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import java.security.SecureRandom;
1: import java.util.Properties;
1: import org.apache.derby.io.StorageFactory;
1: 
1: /**
1: 	A CipherFactory can create new CipherProvider, which is a wrapper for a
1: 	javax.crypto.Cipher
1: 
1: 	This service is only available when run on JDK1.2 or beyond.
1: 	To use this service, either the SunJCE or an alternative clean room
1:     implementation of the JCE must be installed.
1: 
1: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
1: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
1: 	2) A secret Key for the encryption/decryption
1: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
1: 		randomness in the encryption
1: 
1:     See $WS/docs/funcspec/mulan/configurableEncryption.html
1: 
1: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
1: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
1: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
1:  */
1: 
1: public interface CipherFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /** Minimum bootPassword length */
1:     public static final int MIN_BOOTPASS_LENGTH = 8;
1: 
1: 	/**
1: 		Get a CipherProvider that either Encrypts or Decrypts.
1: 	 */
1: 	public static final int ENCRYPT = 1;
1: 	public static final int DECRYPT = 2;
1: 
1: 
1: 	SecureRandom getSecureRandom();
1: 
1: 	/**
1: 		Returns a CipherProvider which is the encryption or decryption engine.
1: 		@param mode is either ENCRYPT or DECRYPT.  The CipherProvider can only
1: 				do encryption or decryption but not both.
1: 
0: 		@exception StandardException Standard Cloudscape Error Policy
1: 	 */
1: 	CipherProvider createNewCipher(int mode)
1: 		 throws StandardException;
1: 
1: 	public String changeBootPassword(String changeString, Properties properties, CipherProvider verify)
1: 		throws StandardException;
1: 
1: 	/**
0: 		Verify the external encryption key
1: 		@param	create	 true means database is being created, whereas false
1: 					implies that the database has already been created
1: 		@param	storageFactory storageFactory is used to access any stored data
1: 					that might be needed for verification process of the encryption key
1: 		@param	properties	properties at time of database connection as well as those in service.properties
1: 
0: 		@return	throws exception if unable to verify that the encryption key is the same as that
0: 				used during database creation or if there are any problems when trying to do the
0: 				verification process
1: 	 */
1: 	public void verifyKey(boolean create, StorageFactory storageFactory,Properties properties)
1: 		throws StandardException;
1: 
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.crypto
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.crypto;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import java.security.SecureRandom;
0: import java.util.Properties;
0: import org.apache.derby.io.StorageFactory;
0: 
0: /**
0: 	A CipherFactory can create new CipherProvider, which is a wrapper for a
0: 	javax.crypto.Cipher
0: 
0: 	This service is only available when run on JDK1.2 or beyond.
0: 	To use this service, either the SunJCE or an alternative clean room
0:     implementation of the JCE must be installed.
0: 
0: 	To use a CipherProvider to encrypt or decrypt, it needs 3 things:
0: 	1) A CipherProvider that is initialized to ENCRYPT or DECRYPT
0: 	2) A secret Key for the encryption/decryption
0: 	3) An Initialization Vector (IvParameterSpec) that is used to create some
0: 		randomness in the encryption
0: 
0:     See $WS/docs/funcspec/mulan/configurableEncryption.html
0: 
0: 	See http://java.sun.com/products/JDK/1.1/docs/guide/security/CryptoSpec.html
0: 	See http://java.sun.com/products/JDK/1.2/docs/guide/security/CryptoSpec.html
0: 	See http://java.sun.com/products/jdk/1.2/jce/index.html
0:  */
0: 
0: public interface CipherFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /** Minimum bootPassword length */
0:     public static final int MIN_BOOTPASS_LENGTH = 8;
0: 
0: 	/**
0: 		Get a CipherProvider that either Encrypts or Decrypts.
0: 	 */
0: 	public static final int ENCRYPT = 1;
0: 	public static final int DECRYPT = 2;
0: 
0: 
0: 	SecureRandom getSecureRandom();
0: 
0: 	/**
0: 		Returns a CipherProvider which is the encryption or decryption engine.
0: 		@param mode is either ENCRYPT or DECRYPT.  The CipherProvider can only
0: 				do encryption or decryption but not both.
0: 
0: 		@exception StandardException Standard Cloudscape Error Policy
0: 	 */
0: 	CipherProvider createNewCipher(int mode)
0: 		 throws StandardException;
0: 
0: 	public String changeBootPassword(String changeString, Properties properties, CipherProvider verify)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Verify the external encryption key
0: 		@param	create	 true means database is being created, whereas false
0: 					implies that the database has already been created
0: 		@param	storageFactory storageFactory is used to access any stored data
0: 					that might be needed for verification process of the encryption key
0: 		@param	properties	properties at time of database connection as well as those in service.properties
0: 
0: 		@return	throws exception if unable to verify that the encryption key is the same as that
0: 				used during database creation or if there are any problems when trying to do the
0: 				verification process
0: 	 */
0: 	public void verifyKey(boolean create, StorageFactory storageFactory,Properties properties)
0: 		throws StandardException;
0: 
0: }
0: 
0: 
============================================================================