1:b0889fc: /**
1:b0889fc:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit
1:b0889fc:  *
1:b0889fc:  * Licensed to the Apache Software Foundation (ASF) under one
1:b0889fc:  * or more contributor license agreements.  See the NOTICE file
1:b0889fc:  * distributed with this work for additional information
1:b0889fc:  * regarding copyright ownership.  The ASF licenses this file
1:b0889fc:  * to you under the Apache License, Version 2.0 (the
1:b0889fc:  * "License"); you may not use this file except in compliance
1:b0889fc:  * with the License.  You may obtain a copy of the License at
1:b0889fc:  *
1:b0889fc:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b0889fc:  *
1:b0889fc:  * Unless required by applicable law or agreed to in writing,
1:b0889fc:  * software distributed under the License is distributed on an
1:b0889fc:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b0889fc:  * KIND, either express or implied.  See the License for the
1:b0889fc:  * specific language governing permissions and limitations
1:b0889fc:  * under the License.
1:b0889fc:  */
1:b0889fc: package org.apache.derbyTesting.functionTests.tests.memory;
1:b0889fc: 
1:b1a01b2: import java.io.Writer;
1:b0889fc: import java.sql.Connection;
1:b0889fc: import java.sql.DriverManager;
1:b0889fc: import java.sql.SQLException;
1:b0889fc: import junit.framework.Test;
1:b0889fc: import junit.framework.TestCase;
1:b0889fc: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b0889fc: import org.apache.derbyTesting.junit.JDBC;
1:b0889fc: 
1:b0889fc: /**
1:b0889fc:  *  This class tests Derby's ability to handle multiple connection attempts
1:b0889fc:  *  against one or more databases, which may or may not exist. Such repeated
1:b0889fc:  *  connection attempts have been known to cause OutOfMemoryErrors in the past,
1:b0889fc:  *  see for example DERBY-2480.
1:b0889fc:  */
1:b0889fc: public class ConnectionHandlingJunit extends BaseJDBCTestCase {
1:b0889fc: 
1:b1a01b2:     /**
1:b1a01b2:      * Returns a log writer that discards all the data written to it.
1:b1a01b2:      *
1:b1a01b2:      * @return Writer discarding the log.
1:b1a01b2:      */
1:b1a01b2:     public static Writer getLogDiscarder() {
1:b1a01b2:         // Writer discarding all data written to it.
1:b1a01b2:         return new Writer() {
1:b1a01b2:             public void write(char[] cbuf, int off, int len) {
1:b1a01b2:                 // Do nothing.
1:b1a01b2:             }
2:b1a01b2: 
1:b1a01b2:             public void flush() {
1:b1a01b2:                 // Do nothing.
1:b1a01b2:             }
1:b1a01b2: 
1:b1a01b2:             public void close() {
1:b1a01b2:                 // Do nothing.
1:b1a01b2:             }
1:b1a01b2:         };
1:b1a01b2:     }
1:b1a01b2: 
1:b0889fc:     /** Creates a new instance of this test class 
1:b0889fc:      *  @param name The name of this test instance; may determine which test
1:b0889fc:      *         fixture to run.
1:b0889fc:      */
1:b0889fc:     public ConnectionHandlingJunit(String name) {
1:b0889fc:         super(name);
1:b0889fc:     }
1:b0889fc:     
1:b0889fc:     /**
1:b0889fc:      * Creates a Test Suite to be run by a JUnit TestRunner. The elements of
1:b0889fc:      * the test suite may depend on the environment in which the TestRunner
1:b0889fc:      * is running (classpath, JVM, etc.).
1:b0889fc:      *
1:b0889fc:      * @return JUnit test suite containing appropriate tests from this class.
1:b0889fc:      */
1:b0889fc:     public static Test suite() {
1:b0889fc:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ConnectionHandlingJUnit");
1:b0889fc:         
1:b0889fc:         // Only support for java.sql.DriverManager has been implemented.
1:7a5b1d0:         if (JDBC.vmSupportsJDBC3()) {
1:b0889fc:             /* driverMgrTestConnectionsToNonexistentDb:
1:b0889fc:              * Only support for DriverManager (JDBC2 and above) for now, for
1:b0889fc:              * simplicity (connecting to DB and possibly also loading the driver
1:b0889fc:              * manually, to have control over url attributes (database 
1:b0889fc:              * creation)). This adheres to the following advice in 
1:b0889fc:              * ...derbyTesting.junit.Connector.java:
1:b0889fc:              * "Tests that need finer control over the connection handling
1:b0889fc:              * should use the JDBC classes directly, such as DriverManager
1:b0889fc:              * or DataSource."
1:b0889fc:              */
1:b0889fc: 
1:b0889fc:             TestCase nonExistentDbTest = new ConnectionHandlingJunit(
1:b0889fc:                     "driverMgrTestConnectionsToNonexistentDb");
1:b1a01b2:             TestCase nonExistentDbTestInMem = new ConnectionHandlingJunit(
1:b1a01b2:                     "driverMgrTestConnectionsToNonexistentDbInMemory");
1:b0889fc:             
1:b0889fc:             /* run "driverMgrTestConnectionsToNonexistentDb" in embedded mode only
1:b0889fc:              * by default, since it is not very useful to continue running in
1:b0889fc:              * client/server mode (server in the same JVM) if the JVM's memory 
1:b0889fc:              * resources are <i>almost</i> exhausted from the embedded test.
1:b0889fc:              */
1:b0889fc:             suite.addTest(nonExistentDbTest);
1:b1a01b2:             suite.addTest(nonExistentDbTestInMem);
1:b0889fc:             // to run the test in client/server mode, comment the above line,
1:b0889fc:             // uncomment the next and recompile.
1:b0889fc:             //suite.addTest(TestConfiguration.clientServerDecorator(nonExistentDbTest));
1:b0889fc:             
1:b0889fc:         }
1:b0889fc:         
1:b0889fc:         return suite;
1:b0889fc:     }    
1:b0889fc: 
1:b0889fc:     
1:b0889fc:     /**
1:b0889fc:      * <p>This fixture tries a number of times to connect to a non-existent
1:b0889fc:      * database, in order to test Derby's ability to handle this situation
1:b0889fc:      * without running out of resources (for example Java heap space (memory)).
1:b0889fc:      * See 
1:b0889fc:      * <a href="https://issues.apache.org/jira/browse/DERBY-2480">DERBY-2480</a>
1:b0889fc:      * for details.</p>
1:b0889fc:      * <p>This test fixture is currently not part of any large JUnit suite
1:b0889fc:      * because <b>1)</b> the default number of connection attempts is rather
1:b0889fc:      * large, and takes some time to complete (depending on hardware), and 
1:b0889fc:      * <b>2)</b> if the tested Derby version is still vulnerable to DERBY-2480
1:b0889fc:      * or similar issues the JVM will most likely run out of memory (depending
1:b0889fc:      * on heap settings), causing subsequent tests to fail, hang or not run at
1:b0889fc:      * all.</p>
1:b0889fc:      * <p>
1:b0889fc:      * <b>Note:</b> The JVM may slow down significantly (even appear to hang)
1:b0889fc:      * before an OOME is thrown. Depending on the avaliable resources, the error
1:b0889fc:      * may or may not be reported in the logs (derby.log, server console).</p>
1:b0889fc:      * <p>
1:b0889fc:      * This fixture requires java.sql.DriverManager. This is because simple
1:b0889fc:      * and easy control of the connection handling and database creation is 
1:b0889fc:      * desired (see implementation comments). However, the test logic itself 
1:b0889fc:      * should also work with other connection mechanisms.</p>
1:b0889fc:      *
1:b0889fc:      * @throws SQLException if an unexpected exception occurs that is not
1:b0889fc:      *         examined using assertions.
1:b0889fc:      */
1:b0889fc:     public void driverMgrTestConnectionsToNonexistentDb() throws SQLException {
1:b0889fc:         String url = getTestConfiguration().getJDBCUrl("nonexistentDatabase");
1:b1a01b2:         driverMgrConnectionInitiator(url, false);
1:b1a01b2:     }
1:b0889fc: 
1:b1a01b2:     public void driverMgrTestConnectionsToNonexistentDbInMemory()
1:b1a01b2:             throws SQLException {
1:b1a01b2:         driverMgrConnectionInitiator("jdbc:derby:memory:noDbHere", true);
1:b1a01b2:     }
1:b0889fc: 
1:b1a01b2:     private void driverMgrConnectionInitiator(String url, boolean appendId)
1:b1a01b2:             throws SQLException {
1:b0889fc:         Connection myInvalidConn = null;
1:b0889fc:         // Not using the regular helper methods in super class because
1:b0889fc:         // we don't want to actually create a database, or connect to an
1:b0889fc:         // existing one (current helper classes add ";create=true" if the DB
1:b0889fc:         // does not exist). Hence, the JDBC driver will not necessarily be 
1:b0889fc:         // loaded automatically.
1:b0889fc:         loadDriver(url);
1:b0889fc:         
1:b0889fc:         Runtime runtime = Runtime.getRuntime();
1:b0889fc:         double memTotalNow; // Total amount of heap memory committed to this JVM
1:b0889fc:         
1:b0889fc:         // ~110k attempts is enough for a 64 MB heap (prior to DERBY-2480 fix)
1:b0889fc:         int maxCount = 130000;  // max number of connection attempts to try
1:b0889fc:         int count = 0;  // number of connection attempts so far
1:b0889fc:         
1:b0889fc:         println("Trying " + maxCount + " connection attempts...");
1:b0889fc:         
1:b0889fc:         try {
1:b0889fc:             while (count < maxCount) {
1:b0889fc: 
1:b0889fc:                 try {
1:b0889fc:                     // We are expecting an exception here because we are trying to 
1:b0889fc:                     // connect to a DB that does not exist.
1:b1a01b2:                     myInvalidConn = DriverManager.getConnection(
1:b1a01b2:                             appendId ? url + count : url);
1:b0889fc:                     // The following may happen because of changes to helper methods
1:b0889fc:                     // such as TestConfiguration.getJDBCUrl(dbName).
1:b0889fc:                     fail("Got connection to a DB that should not exist");
1:b0889fc:                 } catch (SQLException e) {
1:b0889fc:                     // Expected SQLState for "database not found"...
1:b0889fc:                     // For the client driver the generic 08004 is returned.
1:b0889fc:                     String expectedState;
1:b0889fc:                     if (getTestConfiguration().getJDBCClient().isEmbedded()) {
1:b0889fc:                         // embedded driver
1:b0889fc:                         expectedState = "XJ004";
1:b0889fc:                         // in embedded mode, OOMEs are usually wrapped in 
1:b0889fc:                         // SQLExceptions with SQLState 08004
1:b0889fc:                         if (e.getSQLState().equals("08004") 
1:b0889fc:                                 && e.getMessage().matches(".*OutOfMemoryError.*")) {
1:b0889fc:                             alarm("OutOfMemoryError after " + count 
1:b0889fc:                                     + " connection attempts to a "
1:b0889fc:                                     + "non-existing database!");
1:b0889fc:                             // test should fail on next assertSQLState call,
1:b0889fc:                             // but may not have enough resources to get that far
1:b0889fc:                             printStackTrace(e);
1:b0889fc:                             //fail("OutOfMemoryError: " + e.getMessage());
1:b0889fc:                         }
1:b0889fc:                     } else {
1:b0889fc:                         // client driver
1:b0889fc:                         expectedState = "08004";
1:b0889fc:                         // with client driver, OOMEs are often wrapped in
1:b0889fc:                         // SQLExceptions with SQLState XJ001
1:b0889fc:                         if (e.getSQLState().equals("XJ001") 
1:b0889fc:                                 && e.getMessage().matches(".*OutOfMemoryError.*")) {
1:b0889fc:                             alarm("OutOfMemoryError after " + count 
1:b0889fc:                                     + " connection attempts to a "
1:b0889fc:                                     + "non-existing database!");
1:b0889fc:                             // test should fail on next assertSQLState call,
1:b0889fc:                             // but may not have enough resources to do so
1:b0889fc:                             printStackTrace(e);
1:b0889fc:                         }
1:b0889fc:                     }
1:b0889fc:                     assertSQLState("Wrong SQLState for non-existent database", 
1:b0889fc:                             expectedState, e);
1:b0889fc:                 }
1:b0889fc: 
1:b0889fc:                 count++;
1:b0889fc:                 // print informational messages (mem) if debug property is true
1:b0889fc:                 if (getTestConfiguration().isVerbose()) {
1:b0889fc:                     if (count % 1000 == 0) {
1:b0889fc:                         memTotalNow = runtime.totalMemory()/(double)(1024*1024);
1:b0889fc:                         println("Iteration: " + count + "\tTotal memory (MB): " 
1:b0889fc:                                 + memTotalNow);
1:b0889fc:                     }
1:b0889fc:                 }
1:b0889fc:             }
1:b0889fc:         } catch(OutOfMemoryError oome) {
1:b0889fc:             alarm("OutOfMemory after " + count + " connection attempts!");
1:b0889fc:             alarm(oome.getMessage());
1:b0889fc:             throw oome;
1:b0889fc:         }
1:b0889fc:     }
1:b0889fc:     
1:b0889fc:     /**
1:b0889fc:      * Will check if the JDBC driver has been loaded and load it if that is not 
1:b0889fc:      * the case.
1:b0889fc:      * Any other exception messages than "No suitable driver" on the first
1:b0889fc:      * attempt to get the JDBC driver will result in an assertion failure.
1:b0889fc:      * 
1:b0889fc:      * @param url a valid connection URL for the desired JDBC driver
1:b0889fc:      * @throws SQLException if an unexpected exception is thrown
1:b0889fc:      */
1:b0889fc:     private void loadDriver(String url) throws SQLException {
1:b1a01b2:         // Attempt to make Derby discard the log, as a log message will be
1:b1a01b2:         // written for every failed connection attempt.
1:b1a01b2:         // To take effect, the property must be set before the driver is
1:b1a01b2:         // loaded, which means this test should be run separately.
1:b1a01b2:         setSystemProperty("derby.stream.error.method",
1:b1a01b2:                 "org.apache.derbyTesting.functionTests.tests.memory." +
1:b1a01b2:                 "ConnectionHandlingJunit.getLogDiscarder");
1:b0889fc:         try {
1:b0889fc:             DriverManager.getDriver(url);
1:b0889fc:         } catch (SQLException e) {
1:b0889fc:             // getDriver() failed, JDBC driver probably not loaded.
1:b0889fc:             // Expecting SQLState 08001 and message "No suitable driver"...
1:b0889fc:             assertSQLState("Unexpected SQLState from getDriver().", "08001", e);
1:b0889fc:             assertEquals("Unexpected exception message from getDriver(), ",
1:b0889fc:                     "No suitable driver", e.getMessage());
1:b0889fc:             String driverClass = 
1:b0889fc:                     getTestConfiguration().getJDBCClient().getJDBCDriverName();
1:b0889fc:             println("Loading JDBC driver " + driverClass);
1:b0889fc:             // load the driver
1:b0889fc:             try {
1:4469400:                 Class<?> clazz = Class.forName(driverClass);
1:4469400:                 clazz.getConstructor().newInstance();
1:b0889fc:             } catch (ClassNotFoundException cnfe) {
1:b0889fc:                 throw new SQLException("Failed to load JDBC driver '" 
1:b0889fc:                         + driverClass + "', ClassNotFoundException: " 
1:b0889fc:                         + cnfe.getMessage());
1:b0889fc:             } catch (IllegalAccessException iae) {
1:b0889fc:                 throw new SQLException("Failed to load JDBC driver '" 
1:b0889fc:                         + driverClass + "', IllegalAccessException: " 
1:b0889fc:                         + iae.getMessage());
1:b0889fc:             } catch (InstantiationException ie) {
1:b0889fc:                 throw new SQLException("Failed to load JDBC driver '" 
1:b0889fc:                         + driverClass + "', InstantiationException: " 
1:b0889fc:                         + ie.getMessage());
1:4469400:             } catch (NoSuchMethodException ie) {
1:4469400:                 throw new SQLException("Missing constructor for JDBC driver '" 
1:4469400:                         + driverClass + "', NoSuchMethodException: " 
1:4469400:                         + ie.getMessage());
1:4469400:             } catch (java.lang.reflect.InvocationTargetException ie) {
1:4469400:                 throw new SQLException("Could not invoke the constructor for JDBC driver '" 
1:4469400:                         + driverClass + "', InvocationTargetException: " 
1:4469400:                         + ie.getMessage());
1:b0889fc:             }
1:b0889fc:         }
1:b0889fc:     }
1:b0889fc: 
1:b0889fc: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:                 Class<?> clazz = Class.forName(driverClass);
1:                 clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:             } catch (NoSuchMethodException ie) {
1:                 throw new SQLException("Missing constructor for JDBC driver '" 
1:                         + driverClass + "', NoSuchMethodException: " 
1:                         + ie.getMessage());
1:             } catch (java.lang.reflect.InvocationTargetException ie) {
1:                 throw new SQLException("Could not invoke the constructor for JDBC driver '" 
1:                         + driverClass + "', InvocationTargetException: " 
1:                         + ie.getMessage());
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ConnectionHandlingJUnit");
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7a5b1d0
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJDBC3()) {
commit:b0889fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import junit.framework.TestCase;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  *  This class tests Derby's ability to handle multiple connection attempts
1:  *  against one or more databases, which may or may not exist. Such repeated
1:  *  connection attempts have been known to cause OutOfMemoryErrors in the past,
1:  *  see for example DERBY-2480.
1:  */
1: public class ConnectionHandlingJunit extends BaseJDBCTestCase {
1:     
1:     /** Creates a new instance of this test class 
1:      *  @param name The name of this test instance; may determine which test
1:      *         fixture to run.
1:      */
1:     public ConnectionHandlingJunit(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Creates a Test Suite to be run by a JUnit TestRunner. The elements of
1:      * the test suite may depend on the environment in which the TestRunner
1:      * is running (classpath, JVM, etc.).
1:      *
1:      * @return JUnit test suite containing appropriate tests from this class.
1:      */
1:     public static Test suite() {
1:         
0:         TestSuite suite = new TestSuite("ConnectionHandlingJUnit");
1:         
1:         // Only support for java.sql.DriverManager has been implemented.
0:         if (JDBC.vmSupportsJDBC2()) {
1:             /* driverMgrTestConnectionsToNonexistentDb:
1:              * Only support for DriverManager (JDBC2 and above) for now, for
1:              * simplicity (connecting to DB and possibly also loading the driver
1:              * manually, to have control over url attributes (database 
1:              * creation)). This adheres to the following advice in 
1:              * ...derbyTesting.junit.Connector.java:
1:              * "Tests that need finer control over the connection handling
1:              * should use the JDBC classes directly, such as DriverManager
1:              * or DataSource."
1:              */
1: 
1:             TestCase nonExistentDbTest = new ConnectionHandlingJunit(
1:                     "driverMgrTestConnectionsToNonexistentDb");
1:             
1:             /* run "driverMgrTestConnectionsToNonexistentDb" in embedded mode only
1:              * by default, since it is not very useful to continue running in
1:              * client/server mode (server in the same JVM) if the JVM's memory 
1:              * resources are <i>almost</i> exhausted from the embedded test.
1:              */
1:             suite.addTest(nonExistentDbTest);
1:             // to run the test in client/server mode, comment the above line,
1:             // uncomment the next and recompile.
1:             //suite.addTest(TestConfiguration.clientServerDecorator(nonExistentDbTest));
1:             
1:         }
1:         
1:         return suite;
1:     }    
1: 
1:     
1:     /**
1:      * <p>This fixture tries a number of times to connect to a non-existent
1:      * database, in order to test Derby's ability to handle this situation
1:      * without running out of resources (for example Java heap space (memory)).
1:      * See 
1:      * <a href="https://issues.apache.org/jira/browse/DERBY-2480">DERBY-2480</a>
1:      * for details.</p>
1:      * <p>This test fixture is currently not part of any large JUnit suite
1:      * because <b>1)</b> the default number of connection attempts is rather
1:      * large, and takes some time to complete (depending on hardware), and 
1:      * <b>2)</b> if the tested Derby version is still vulnerable to DERBY-2480
1:      * or similar issues the JVM will most likely run out of memory (depending
1:      * on heap settings), causing subsequent tests to fail, hang or not run at
1:      * all.</p>
1:      * <p>
1:      * <b>Note:</b> The JVM may slow down significantly (even appear to hang)
1:      * before an OOME is thrown. Depending on the avaliable resources, the error
1:      * may or may not be reported in the logs (derby.log, server console).</p>
1:      * <p>
1:      * This fixture requires java.sql.DriverManager. This is because simple
1:      * and easy control of the connection handling and database creation is 
1:      * desired (see implementation comments). However, the test logic itself 
1:      * should also work with other connection mechanisms.</p>
1:      *
1:      * @throws SQLException if an unexpected exception occurs that is not
1:      *         examined using assertions.
1:      */
1:     public void driverMgrTestConnectionsToNonexistentDb() throws SQLException {
1: 
1:         Connection myInvalidConn = null;
1:         
1:         String url = getTestConfiguration().getJDBCUrl("nonexistentDatabase");
1:         // Not using the regular helper methods in super class because
1:         // we don't want to actually create a database, or connect to an
1:         // existing one (current helper classes add ";create=true" if the DB
1:         // does not exist). Hence, the JDBC driver will not necessarily be 
1:         // loaded automatically.
1:         loadDriver(url);
1:         
1:         Runtime runtime = Runtime.getRuntime();
1:         double memTotalNow; // Total amount of heap memory committed to this JVM
1:         
1:         // ~110k attempts is enough for a 64 MB heap (prior to DERBY-2480 fix)
1:         int maxCount = 130000;  // max number of connection attempts to try
1:         int count = 0;  // number of connection attempts so far
1:         
1:         println("Trying " + maxCount + " connection attempts...");
1:         
1:         try {
1:             while (count < maxCount) {
1: 
1:                 try {
1:                     // We are expecting an exception here because we are trying to 
1:                     // connect to a DB that does not exist.
0:                     myInvalidConn = DriverManager.getConnection(url);
1:                     // The following may happen because of changes to helper methods
1:                     // such as TestConfiguration.getJDBCUrl(dbName).
1:                     fail("Got connection to a DB that should not exist");
1:                 } catch (SQLException e) {
1:                     // Expected SQLState for "database not found"...
1:                     // For the client driver the generic 08004 is returned.
1:                     String expectedState;
1:                     if (getTestConfiguration().getJDBCClient().isEmbedded()) {
1:                         // embedded driver
1:                         expectedState = "XJ004";
1:                         // in embedded mode, OOMEs are usually wrapped in 
1:                         // SQLExceptions with SQLState 08004
1:                         if (e.getSQLState().equals("08004") 
1:                                 && e.getMessage().matches(".*OutOfMemoryError.*")) {
1:                             alarm("OutOfMemoryError after " + count 
1:                                     + " connection attempts to a "
1:                                     + "non-existing database!");
1:                             // test should fail on next assertSQLState call,
1:                             // but may not have enough resources to get that far
1:                             printStackTrace(e);
1:                             //fail("OutOfMemoryError: " + e.getMessage());
1:                         }
1:                     } else {
1:                         // client driver
1:                         expectedState = "08004";
1:                         // with client driver, OOMEs are often wrapped in
1:                         // SQLExceptions with SQLState XJ001
1:                         if (e.getSQLState().equals("XJ001") 
1:                                 && e.getMessage().matches(".*OutOfMemoryError.*")) {
1:                             alarm("OutOfMemoryError after " + count 
1:                                     + " connection attempts to a "
1:                                     + "non-existing database!");
1:                             // test should fail on next assertSQLState call,
1:                             // but may not have enough resources to do so
1:                             printStackTrace(e);
1:                         }
1:                     }
1:                     assertSQLState("Wrong SQLState for non-existent database", 
1:                             expectedState, e);
1:                 }
1: 
1:                 count++;
1:                 // print informational messages (mem) if debug property is true
1:                 if (getTestConfiguration().isVerbose()) {
1:                     if (count % 1000 == 0) {
1:                         memTotalNow = runtime.totalMemory()/(double)(1024*1024);
1:                         println("Iteration: " + count + "\tTotal memory (MB): " 
1:                                 + memTotalNow);
1:                     }
1:                 }
1:             }
1:         } catch(OutOfMemoryError oome) {
1:             alarm("OutOfMemory after " + count + " connection attempts!");
1:             alarm(oome.getMessage());
1:             throw oome;
1:         }
1:     }
1:     
1:     /**
1:      * Will check if the JDBC driver has been loaded and load it if that is not 
1:      * the case.
1:      * Any other exception messages than "No suitable driver" on the first
1:      * attempt to get the JDBC driver will result in an assertion failure.
1:      * 
1:      * @param url a valid connection URL for the desired JDBC driver
1:      * @throws SQLException if an unexpected exception is thrown
1:      */
1:     private void loadDriver(String url) throws SQLException {
1:         try {
1:             DriverManager.getDriver(url);
1:         } catch (SQLException e) {
1:             // getDriver() failed, JDBC driver probably not loaded.
1:             // Expecting SQLState 08001 and message "No suitable driver"...
1:             assertSQLState("Unexpected SQLState from getDriver().", "08001", e);
1:             assertEquals("Unexpected exception message from getDriver(), ",
1:                     "No suitable driver", e.getMessage());
1:             String driverClass = 
1:                     getTestConfiguration().getJDBCClient().getJDBCDriverName();
1:             println("Loading JDBC driver " + driverClass);
1:             // load the driver
1:             try {
0:                 Class.forName(driverClass).newInstance();
1:             } catch (ClassNotFoundException cnfe) {
1:                 throw new SQLException("Failed to load JDBC driver '" 
1:                         + driverClass + "', ClassNotFoundException: " 
1:                         + cnfe.getMessage());
1:             } catch (IllegalAccessException iae) {
1:                 throw new SQLException("Failed to load JDBC driver '" 
1:                         + driverClass + "', IllegalAccessException: " 
1:                         + iae.getMessage());
1:             } catch (InstantiationException ie) {
1:                 throw new SQLException("Failed to load JDBC driver '" 
1:                         + driverClass + "', InstantiationException: " 
1:                         + ie.getMessage());
1:             }
1:         }
1:     }
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b1a01b2
/////////////////////////////////////////////////////////////////////////
1: import java.io.Writer;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a log writer that discards all the data written to it.
1:      *
1:      * @return Writer discarding the log.
1:      */
1:     public static Writer getLogDiscarder() {
1:         // Writer discarding all data written to it.
1:         return new Writer() {
1:             public void write(char[] cbuf, int off, int len) {
1:                 // Do nothing.
1:             }
1: 
1:             public void flush() {
1:                 // Do nothing.
1:             }
1: 
1:             public void close() {
1:                 // Do nothing.
1:             }
1:         };
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             TestCase nonExistentDbTestInMem = new ConnectionHandlingJunit(
1:                     "driverMgrTestConnectionsToNonexistentDbInMemory");
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(nonExistentDbTestInMem);
/////////////////////////////////////////////////////////////////////////
1:         driverMgrConnectionInitiator(url, false);
1:     }
0: 
1:     public void driverMgrTestConnectionsToNonexistentDbInMemory()
1:             throws SQLException {
1:         driverMgrConnectionInitiator("jdbc:derby:memory:noDbHere", true);
1:     }
0: 
1:     private void driverMgrConnectionInitiator(String url, boolean appendId)
1:             throws SQLException {
0:         Connection myInvalidConn = null;
/////////////////////////////////////////////////////////////////////////
1:                     myInvalidConn = DriverManager.getConnection(
1:                             appendId ? url + count : url);
/////////////////////////////////////////////////////////////////////////
1:         // Attempt to make Derby discard the log, as a log message will be
1:         // written for every failed connection attempt.
1:         // To take effect, the property must be set before the driver is
1:         // loaded, which means this test should be run separately.
1:         setSystemProperty("derby.stream.error.method",
1:                 "org.apache.derbyTesting.functionTests.tests.memory." +
1:                 "ConnectionHandlingJunit.getLogDiscarder");
============================================================================