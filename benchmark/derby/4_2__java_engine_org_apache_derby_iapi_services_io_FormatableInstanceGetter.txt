1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatableInstanceGetter
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.InstanceGetter;
1:eac0369: 
1:cacb73f: /**
1:cacb73f:  * Class that loads Formattables (typically from disk)through
1:cacb73f:  * one level of indirection.
1:cacb73f:  * A concrete implementation of this class is registered as the
1:cacb73f:  * class to handle a number of format identifiers in RegisteredFormatIds.
1:cacb73f:  * When the in-memory representation of RegisteredFormatIds is set up
1:cacb73f:  * an instance of the concrete class will be created for each format
1:cacb73f:  * identifier the class is registered for, and each instances will
1:cacb73f:  * have its setFormatId() called once with the appropriate format identifier.
1:cacb73f:  * 
1:cacb73f:  * <BR>
1:cacb73f:  * When a Formattable object is read from disk and its registered class
1:cacb73f:  * is an instance of FormatableInstanceGetter the getNewInstance() method
1:cacb73f:  * will be called to create the object.
1:cacb73f:  * The implementation can use the fmtId field to determine the
1:cacb73f:  * class of the instance to be returned.
1:cacb73f:  * <BR>
1:cacb73f:  * Instances of FormatableInstanceGetter are system wide, that is there is
1:cacb73f:  * a single set of RegisteredFormatIds per system.
1:cacb73f:  * 
1:cacb73f:  * @see RegisteredFormatIds
1:cacb73f:  */
1:eac0369: public abstract class FormatableInstanceGetter implements InstanceGetter {
1:eac0369: 
1:cacb73f:     /**
1:cacb73f:      * Format identifier of the object 
1:cacb73f:      */
1:eac0369: 	protected int fmtId;
1:eac0369: 
1:cacb73f:     /**
1:cacb73f:      * Set the format identifier that this instance will be loading from disk.
1:cacb73f:     */
1:eac0369: 	public final void setFormatId(int fmtId) {
1:eac0369: 		this.fmtId = fmtId;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cacb73f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Class that loads Formattables (typically from disk)through
1:  * one level of indirection.
1:  * A concrete implementation of this class is registered as the
1:  * class to handle a number of format identifiers in RegisteredFormatIds.
1:  * When the in-memory representation of RegisteredFormatIds is set up
1:  * an instance of the concrete class will be created for each format
1:  * identifier the class is registered for, and each instances will
1:  * have its setFormatId() called once with the appropriate format identifier.
1:  * 
1:  * <BR>
1:  * When a Formattable object is read from disk and its registered class
1:  * is an instance of FormatableInstanceGetter the getNewInstance() method
1:  * will be called to create the object.
1:  * The implementation can use the fmtId field to determine the
1:  * class of the instance to be returned.
1:  * <BR>
1:  * Instances of FormatableInstanceGetter are system wide, that is there is
1:  * a single set of RegisteredFormatIds per system.
1:  * 
1:  * @see RegisteredFormatIds
1:  */
1:     /**
1:      * Format identifier of the object 
1:      */
1:     /**
1:      * Set the format identifier that this instance will be loading from disk.
1:     */
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatableInstanceGetter
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import org.apache.derby.iapi.services.loader.InstanceGetter;
1: 
1: public abstract class FormatableInstanceGetter implements InstanceGetter {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	protected int fmtId;
1: 
1: 	public final void setFormatId(int fmtId) {
1: 		this.fmtId = fmtId;
1: 	}
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.loader.InstanceGetter;
0: 
0: public abstract class FormatableInstanceGetter implements InstanceGetter {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	protected int fmtId;
0: 
0: 	public final void setFormatId(int fmtId) {
0: 		this.fmtId = fmtId;
0: 	}
0: }
============================================================================