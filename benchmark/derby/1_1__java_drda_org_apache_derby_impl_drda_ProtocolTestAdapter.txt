1:fdaf2b5: /*
1:fdaf2b5: 
1:fdaf2b5:    Derby - Class org.apache.derby.impl.drda.ProtocolTestAdapter
1:fdaf2b5: 
1:fdaf2b5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fdaf2b5:    contributor license agreements.  See the NOTICE file distributed with
1:fdaf2b5:    this work for additional information regarding copyright ownership.
1:fdaf2b5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:fdaf2b5:    (the "License"); you may not use this file except in compliance with
1:fdaf2b5:    the License.  You may obtain a copy of the License at
1:fdaf2b5: 
1:fdaf2b5:       http://www.apache.org/licenses/LICENSE-2.0
1:fdaf2b5: 
1:fdaf2b5:    Unless required by applicable law or agreed to in writing, software
1:fdaf2b5:    distributed under the License is distributed on an "AS IS" BASIS,
1:fdaf2b5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdaf2b5:    See the License for the specific language governing permissions and
1:fdaf2b5:    limitations under the License.
1:fdaf2b5: 
1:fdaf2b5:  */
1:fdaf2b5: package org.apache.derby.impl.drda;
1:fdaf2b5: 
1:fdaf2b5: import java.io.IOException;
1:fdaf2b5: import java.io.OutputStream;
1:fdaf2b5: import java.net.Socket;
1:fdaf2b5: import java.util.Iterator;
1:fdaf2b5: import java.util.Map;
1:fdaf2b5: 
1:fdaf2b5: /**
1:fdaf2b5:  * Adapter written to allow for protocol testing from the test package.
1:fdaf2b5:  * <p>
1:fdaf2b5:  * The only purpose of this class is to make certain constants and methods
1:fdaf2b5:  * that are package private available outside of this package for testing
1:fdaf2b5:  * purposes. See DERBY-2031.
1:fdaf2b5:  */
1:fdaf2b5: public class ProtocolTestAdapter {
1:fdaf2b5: 
1:fdaf2b5:     public static final byte SPACE = new EbcdicCcsidManager().space;
1:fdaf2b5:     /* Various constants we need to export. */
1:fdaf2b5:     public static final int CP_SQLCARD = CodePoint.SQLCARD;
1:fdaf2b5:     public static final int CP_SVRCOD = CodePoint.SVRCOD;
1:fdaf2b5:     public static final int CP_CODPNT = CodePoint.CODPNT;
1:fdaf2b5:     public static final int CP_PRCCNVCD = CodePoint.PRCCNVCD;
1:fdaf2b5:     public static final int CP_SYNERRCD = CodePoint.SYNERRCD;
1:fdaf2b5:     public static final int CP_MGRLVLLS = CodePoint.MGRLVLLS;
1:fdaf2b5:     public static final int CP_PRCCNVRM = CodePoint.PRCCNVRM;
1:fdaf2b5:     public static final int CP_SYNTAXRM = CodePoint.SYNTAXRM;
1:fdaf2b5:     public static final int CP_MGRLVLRM = CodePoint.MGRLVLRM;
1:fdaf2b5:     public static final int CP_SECMEC = CodePoint.SECMEC;
1:fdaf2b5:     public static final int CP_SECCHKCD = CodePoint.SECCHKCD;
1:fdaf2b5: 
1:fdaf2b5:     /** Shared code point name table (write once, then only reads/lookups). */
1:fdaf2b5:     private static final CodePointNameTable CP_NAMES = new CodePointNameTable();
1:fdaf2b5: 
1:fdaf2b5:     private final CcsidManager ccsidManager = new EbcdicCcsidManager();
1:fdaf2b5:     private final DDMWriter writer = new DDMWriter(null, null);
1:fdaf2b5:     private final Socket socket;
1:fdaf2b5:     private final DDMReader reader;
1:fdaf2b5:     private final OutputStream out;
1:fdaf2b5: 
1:fdaf2b5:     /** Initializes the adapter for use with the given socket. */
1:fdaf2b5:     public ProtocolTestAdapter(Socket socket)
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         this.socket = socket;
1:fdaf2b5:         this.reader = new DDMReader(socket.getInputStream());
1:fdaf2b5:         this.out = socket.getOutputStream();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /** Closes the resources associated with the adapter. */
1:fdaf2b5:     public void close()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         // According to the JavaDoc this will also close the associated streams.
1:fdaf2b5:         socket.close();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /**
1:fdaf2b5:      * Returns the name of the given code point.
1:fdaf2b5:      *
1:fdaf2b5:      * @param codePoint code point to look up
1:fdaf2b5:      * @return Code point name, or {@code null} if code point is unknown.
1:fdaf2b5:      */
1:fdaf2b5:     public String lookupCodePoint(int codePoint) {
1:fdaf2b5:         return CP_NAMES.lookup(codePoint);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /**
1:fdaf2b5:      * Returns the code point id for the given code point name.
1:fdaf2b5:      *
1:fdaf2b5:      * @param codePointName the name of the code point to look up
1:fdaf2b5:      * @return The code point identifier, or {@code null} if the code point
1:fdaf2b5:      *      name is unknown.
1:fdaf2b5:      */
1:fdaf2b5:     public Integer decodeCodePoint(String codePointName) {
1:fdaf2b5:         // Just do this the expensive way, assuming it's infrequently used.
1:fdaf2b5:         Iterator entryIter = CP_NAMES.entrySet().iterator();
1:fdaf2b5:         while (entryIter.hasNext()) {
1:fdaf2b5:             Map.Entry entry = (Map.Entry)entryIter.next();
1:fdaf2b5:             if (codePointName.equals((String)entry.getValue())) {
1:fdaf2b5:                 return (Integer)entry.getKey();
1:fdaf2b5:             }
1:fdaf2b5:         }
1:fdaf2b5:         return null;
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /** Converts a string to a byte array according to the CCSID manager. */
1:fdaf2b5:     public byte[] convertFromJavaString(String str) {
1:fdaf2b5:         return ccsidManager.convertFromJavaString(str);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /** Instructs the {@code DDMReader} and {@code DDMWriter} to use UTF-8. */
1:fdaf2b5:     public void setUtf8Ccsid() {
1:fdaf2b5:         writer.setUtf8Ccsid();
1:fdaf2b5:         reader.setUtf8Ccsid();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /* DDMWriter forwarding methods */
1:fdaf2b5: 
1:fdaf2b5:     public void wCreateDssRequest() {
1:fdaf2b5:         writer.createDssRequest();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wCreateDssObject() {
1:fdaf2b5:         writer.createDssObject();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wCreateDssReply() {
1:fdaf2b5:         writer.createDssReply();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wEndDss() {
1:fdaf2b5:         writer.endDss();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wEndDss(byte b) {
1:fdaf2b5:         writer.endDss(b);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wEndDdm() {
1:fdaf2b5:         writer.endDdm();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wEndDdmAndDss() {
1:fdaf2b5:         writer.endDdmAndDss();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wStartDdm(int cp) {
1:fdaf2b5:         writer.startDdm(cp);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteScalarString(int cp, String str) {
1:fdaf2b5:         writer.writeScalarString(cp, str);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteScalar2Bytes(int cp, int value) {
1:fdaf2b5:         writer.writeScalar2Bytes(cp, value);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteScalar1Byte(int cp, int value) {
1:fdaf2b5:         writer.writeScalar1Byte(cp, value);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteScalarBytes(int cp, byte[] buf) {
1:fdaf2b5:         writer.writeScalarBytes(cp, buf);
1:fdaf2b5:     }
1:fdaf2b5:     public void wWriteScalarPaddedBytes(int cp, byte[] buf,
1:fdaf2b5:                                         int length, byte ch) {
1:fdaf2b5:         writer.writeScalarPaddedBytes(cp, buf, length, ch);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteByte(int b) {
1:fdaf2b5:         writer.writeByte(b);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteBytes(byte[] buf) {
1:fdaf2b5:         writer.writeBytes(buf);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteShort(int v) {
1:fdaf2b5:         writer.writeShort(v);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteInt(int v) {
1:fdaf2b5:         writer.writeInt(v);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wWriteCodePoint4Bytes(int cp, int v) {
1:fdaf2b5:         writer.writeCodePoint4Bytes(cp, v);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wPadBytes(byte ch, int len) {
1:fdaf2b5:         writer.padBytes(ch, len);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void wFlush()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             writer.finalizeChain(reader.getCurrChainState(), out);
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:         writer.reset(null);
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /* DDMReader forwarding methods */
1:fdaf2b5: 
1:fdaf2b5:     public void rReadReplyDss()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             reader.readReplyDss();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void rSkipDss()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             reader.readReplyDss();
1:fdaf2b5:             reader.skipDss();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void rSkipDdm()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             reader.readLengthAndCodePoint(false);
1:fdaf2b5:             reader.skipBytes();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public void rSkipBytes()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             reader.skipBytes();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public boolean rMoreData() {
1:fdaf2b5:         return reader.moreData();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public boolean rMoreDssData() {
1:fdaf2b5:         return reader.moreDssData();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public boolean rMoreDdmData() {
1:fdaf2b5:         return reader.moreDssData();
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public int rReadNetworkShort()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readNetworkShort();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public byte rReadByte()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readByte();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public byte[] rReadBytes()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readBytes();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public int rReadLengthAndCodePoint(boolean f)
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readLengthAndCodePoint(f);
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public int rReadNetworkInt()
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readNetworkInt();
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     public String rReadString(int length, String enc)
1:fdaf2b5:             throws IOException {
1:fdaf2b5:         try {
1:fdaf2b5:             return reader.readString(length, enc);
1:fdaf2b5:         } catch (DRDAProtocolException dpe) {
1:fdaf2b5:             throw wrap(dpe);
1:fdaf2b5:         }
1:fdaf2b5:     }
1:fdaf2b5: 
1:fdaf2b5:     /* Utility methods */
1:fdaf2b5: 
1:fdaf2b5:     /**
1:fdaf2b5:      * Wraps a protocol exception in a generic I/O exception, since
1:fdaf2b5:      * {@code DRDAProtocolException} is package private.
1:fdaf2b5:      */
1:fdaf2b5:     private static IOException wrap(DRDAProtocolException dpe) {
1:fdaf2b5:         IOException ioe = new IOException(dpe.getMessage());
1:fdaf2b5:         ioe.initCause(dpe);
1:fdaf2b5:         return ioe;
1:fdaf2b5:     }
1:fdaf2b5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fdaf2b5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.ProtocolTestAdapter
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.drda;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.net.Socket;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: /**
1:  * Adapter written to allow for protocol testing from the test package.
1:  * <p>
1:  * The only purpose of this class is to make certain constants and methods
1:  * that are package private available outside of this package for testing
1:  * purposes. See DERBY-2031.
1:  */
1: public class ProtocolTestAdapter {
1: 
1:     public static final byte SPACE = new EbcdicCcsidManager().space;
1:     /* Various constants we need to export. */
1:     public static final int CP_SQLCARD = CodePoint.SQLCARD;
1:     public static final int CP_SVRCOD = CodePoint.SVRCOD;
1:     public static final int CP_CODPNT = CodePoint.CODPNT;
1:     public static final int CP_PRCCNVCD = CodePoint.PRCCNVCD;
1:     public static final int CP_SYNERRCD = CodePoint.SYNERRCD;
1:     public static final int CP_MGRLVLLS = CodePoint.MGRLVLLS;
1:     public static final int CP_PRCCNVRM = CodePoint.PRCCNVRM;
1:     public static final int CP_SYNTAXRM = CodePoint.SYNTAXRM;
1:     public static final int CP_MGRLVLRM = CodePoint.MGRLVLRM;
1:     public static final int CP_SECMEC = CodePoint.SECMEC;
1:     public static final int CP_SECCHKCD = CodePoint.SECCHKCD;
1: 
1:     /** Shared code point name table (write once, then only reads/lookups). */
1:     private static final CodePointNameTable CP_NAMES = new CodePointNameTable();
1: 
1:     private final CcsidManager ccsidManager = new EbcdicCcsidManager();
1:     private final DDMWriter writer = new DDMWriter(null, null);
1:     private final Socket socket;
1:     private final DDMReader reader;
1:     private final OutputStream out;
1: 
1:     /** Initializes the adapter for use with the given socket. */
1:     public ProtocolTestAdapter(Socket socket)
1:             throws IOException {
1:         this.socket = socket;
1:         this.reader = new DDMReader(socket.getInputStream());
1:         this.out = socket.getOutputStream();
1:     }
1: 
1:     /** Closes the resources associated with the adapter. */
1:     public void close()
1:             throws IOException {
1:         // According to the JavaDoc this will also close the associated streams.
1:         socket.close();
1:     }
1: 
1:     /**
1:      * Returns the name of the given code point.
1:      *
1:      * @param codePoint code point to look up
1:      * @return Code point name, or {@code null} if code point is unknown.
1:      */
1:     public String lookupCodePoint(int codePoint) {
1:         return CP_NAMES.lookup(codePoint);
1:     }
1: 
1:     /**
1:      * Returns the code point id for the given code point name.
1:      *
1:      * @param codePointName the name of the code point to look up
1:      * @return The code point identifier, or {@code null} if the code point
1:      *      name is unknown.
1:      */
1:     public Integer decodeCodePoint(String codePointName) {
1:         // Just do this the expensive way, assuming it's infrequently used.
1:         Iterator entryIter = CP_NAMES.entrySet().iterator();
1:         while (entryIter.hasNext()) {
1:             Map.Entry entry = (Map.Entry)entryIter.next();
1:             if (codePointName.equals((String)entry.getValue())) {
1:                 return (Integer)entry.getKey();
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /** Converts a string to a byte array according to the CCSID manager. */
1:     public byte[] convertFromJavaString(String str) {
1:         return ccsidManager.convertFromJavaString(str);
1:     }
1: 
1:     /** Instructs the {@code DDMReader} and {@code DDMWriter} to use UTF-8. */
1:     public void setUtf8Ccsid() {
1:         writer.setUtf8Ccsid();
1:         reader.setUtf8Ccsid();
1:     }
1: 
1:     /* DDMWriter forwarding methods */
1: 
1:     public void wCreateDssRequest() {
1:         writer.createDssRequest();
1:     }
1: 
1:     public void wCreateDssObject() {
1:         writer.createDssObject();
1:     }
1: 
1:     public void wCreateDssReply() {
1:         writer.createDssReply();
1:     }
1: 
1:     public void wEndDss() {
1:         writer.endDss();
1:     }
1: 
1:     public void wEndDss(byte b) {
1:         writer.endDss(b);
1:     }
1: 
1:     public void wEndDdm() {
1:         writer.endDdm();
1:     }
1: 
1:     public void wEndDdmAndDss() {
1:         writer.endDdmAndDss();
1:     }
1: 
1:     public void wStartDdm(int cp) {
1:         writer.startDdm(cp);
1:     }
1: 
1:     public void wWriteScalarString(int cp, String str) {
1:         writer.writeScalarString(cp, str);
1:     }
1: 
1:     public void wWriteScalar2Bytes(int cp, int value) {
1:         writer.writeScalar2Bytes(cp, value);
1:     }
1: 
1:     public void wWriteScalar1Byte(int cp, int value) {
1:         writer.writeScalar1Byte(cp, value);
1:     }
1: 
1:     public void wWriteScalarBytes(int cp, byte[] buf) {
1:         writer.writeScalarBytes(cp, buf);
1:     }
1:     public void wWriteScalarPaddedBytes(int cp, byte[] buf,
1:                                         int length, byte ch) {
1:         writer.writeScalarPaddedBytes(cp, buf, length, ch);
1:     }
1: 
1:     public void wWriteByte(int b) {
1:         writer.writeByte(b);
1:     }
1: 
1:     public void wWriteBytes(byte[] buf) {
1:         writer.writeBytes(buf);
1:     }
1: 
1:     public void wWriteShort(int v) {
1:         writer.writeShort(v);
1:     }
1: 
1:     public void wWriteInt(int v) {
1:         writer.writeInt(v);
1:     }
1: 
1:     public void wWriteCodePoint4Bytes(int cp, int v) {
1:         writer.writeCodePoint4Bytes(cp, v);
1:     }
1: 
1:     public void wPadBytes(byte ch, int len) {
1:         writer.padBytes(ch, len);
1:     }
1: 
1:     public void wFlush()
1:             throws IOException {
1:         try {
1:             writer.finalizeChain(reader.getCurrChainState(), out);
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:         writer.reset(null);
1:     }
1: 
1:     /* DDMReader forwarding methods */
1: 
1:     public void rReadReplyDss()
1:             throws IOException {
1:         try {
1:             reader.readReplyDss();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public void rSkipDss()
1:             throws IOException {
1:         try {
1:             reader.readReplyDss();
1:             reader.skipDss();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public void rSkipDdm()
1:             throws IOException {
1:         try {
1:             reader.readLengthAndCodePoint(false);
1:             reader.skipBytes();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public void rSkipBytes()
1:             throws IOException {
1:         try {
1:             reader.skipBytes();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public boolean rMoreData() {
1:         return reader.moreData();
1:     }
1: 
1:     public boolean rMoreDssData() {
1:         return reader.moreDssData();
1:     }
1: 
1:     public boolean rMoreDdmData() {
1:         return reader.moreDssData();
1:     }
1: 
1:     public int rReadNetworkShort()
1:             throws IOException {
1:         try {
1:             return reader.readNetworkShort();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public byte rReadByte()
1:             throws IOException {
1:         try {
1:             return reader.readByte();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public byte[] rReadBytes()
1:             throws IOException {
1:         try {
1:             return reader.readBytes();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public int rReadLengthAndCodePoint(boolean f)
1:             throws IOException {
1:         try {
1:             return reader.readLengthAndCodePoint(f);
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public int rReadNetworkInt()
1:             throws IOException {
1:         try {
1:             return reader.readNetworkInt();
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     public String rReadString(int length, String enc)
1:             throws IOException {
1:         try {
1:             return reader.readString(length, enc);
1:         } catch (DRDAProtocolException dpe) {
1:             throw wrap(dpe);
1:         }
1:     }
1: 
1:     /* Utility methods */
1: 
1:     /**
1:      * Wraps a protocol exception in a generic I/O exception, since
1:      * {@code DRDAProtocolException} is package private.
1:      */
1:     private static IOException wrap(DRDAProtocolException dpe) {
1:         IOException ioe = new IOException(dpe.getMessage());
1:         ioe.initCause(dpe);
1:         return ioe;
1:     }
1: }
============================================================================