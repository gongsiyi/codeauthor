1:ebad814: /*
1:ebad814: 
1:ebad814:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Roles
1:ebad814: 
1:ebad814:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ebad814:    contributor license agreements.  See the NOTICE file distributed with
1:ebad814:    this work for additional information regarding copyright ownership.
1:ebad814:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ebad814:    (the "License"); you may not use this file except in compliance with
1:ebad814:    the License.  You may obtain a copy of the License at
1:ebad814: 
1:ebad814:       http://www.apache.org/licenses/LICENSE-2.0
1:ebad814: 
1:ebad814:    Unless required by applicable law or agreed to in writing, software
1:ebad814:    distributed under the License is distributed on an "AS IS" BASIS,
1:ebad814:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ebad814:    See the License for the specific language governing permissions and
1:ebad814:    limitations under the License.
1:ebad814: 
1:ebad814:  */
1:ebad814: 
1:ebad814: package org.apache.derby.impl.tools.dblook;
1:ebad814: 
1:ebad814: import java.sql.Connection;
1:ebad814: import java.sql.Statement;
1:ebad814: import java.sql.ResultSet;
1:ebad814: import java.sql.SQLException;
1:ebad814: 
1:ebad814: import java.util.StringTokenizer;
1:ebad814: 
1:ebad814: import org.apache.derby.tools.dblook;
1:ebad814: 
1:ebad814: public class DB_Roles {
1:ebad814: 
1:ebad814:     /**
1:ebad814:      * Generate role definition statements and role grant statements. Note that
1:ebad814:      * privileges granted to roles are handled by DB_GrantRevoke, similar to
1:ebad814:      * privileges granted to users.
1:ebad814:      *
1:ebad814:      * @param conn Connection to use
1:ebad814:      */
1:ebad814:     public static void doRoles(Connection conn)
1:ebad814:         throws SQLException {
1:ebad814: 
1:ebad814:         // First generate role definition statements
1:ebad814:         Statement stmt = conn.createStatement();
1:ebad814:         ResultSet rs = stmt.executeQuery
1:ebad814:             ("SELECT ROLEID, GRANTEE, GRANTOR, " +
1:ebad814:              "WITHADMINOPTION FROM SYS.SYSROLES WHERE ISDEF = 'Y'");
1:ebad814:         generateRoleDefinitions(rs);
1:ebad814:         rs.close();
1:ebad814: 
1:ebad814:         // Generate role grant statements
1:ebad814:         rs = stmt.executeQuery
1:ebad814:             ("SELECT ROLEID, GRANTEE, GRANTOR, WITHADMINOPTION" +
1:ebad814:              " FROM SYS.SYSROLES WHERE ISDEF = 'N'");
1:ebad814:         generateRoleGrants(rs);
1:ebad814: 
1:ebad814:         rs.close();
1:ebad814:         stmt.close();
1:ebad814:         return;
1:ebad814: 
1:ebad814:     }
1:ebad814: 
1:ebad814:     /**
1:ebad814:      * Generate role definition statements
1:ebad814:      *
1:ebad814:      * @param rs Result set holding required information
1:ebad814:      */
1:ebad814:     private static void generateRoleDefinitions(ResultSet rs)
1:ebad814:         throws SQLException
1:ebad814:     {
1:ebad814:         boolean firstTime = true;
1:ebad814:         while (rs.next()) {
1:ebad814: 
1:ebad814:             if (firstTime) {
1:ebad814:                 Logs.reportString
1:ebad814:                     ("----------------------------------------------");
1:ebad814:                 Logs.reportMessage( "DBLOOK_Role_definitions_header");
1:ebad814:                 Logs.reportString
1:ebad814:                     ("----------------------------------------------\n");
1:ebad814:             }
1:ebad814: 
1:ebad814:             String roleName = dblook.addQuotes
1:ebad814:                 (dblook.expandDoubleQuotes(rs.getString(1)));
1:ebad814:             // String grantee = dblook.addQuotes
1:ebad814:             //     (dblook.expandDoubleQuotes(rs.getString(2))); // always DBO
1:ebad814:             // String grantor = dblook.addQuotes
1:ebad814:             //   (dblook.expandDoubleQuotes(rs.getString(3))); // always _SYSTEM
1:ebad814:             // boolean isWithAdminOption = rs.getString
1:ebad814:             //   (4).equals("Y") ? true : false; // always true for a definition
1:ebad814: 
1:ebad814:             Logs.writeToNewDDL(roleDefinitionStatement(rs, roleName));
1:ebad814:             Logs.writeStmtEndToNewDDL();
1:ebad814:             Logs.writeNewlineToNewDDL();
1:ebad814:             firstTime = false;
1:ebad814:         }
1:ebad814:     }
1:ebad814: 
1:ebad814:     /**
1:ebad814:      * Generate a role definition statement for the current row
1:ebad814:      *
1:ebad814:      * @param rs        @{code ResultSet} holding role definition information
1:ebad814:      * @param roleName  The role defined, already quoted
1:ebad814:      */
1:ebad814:     private static String roleDefinitionStatement(ResultSet rs, String roleName)
1:ebad814:         throws SQLException
1:ebad814:     {
1:ebad814:         StringBuffer createStmt = new StringBuffer("CREATE ROLE ");
1:ebad814: 
1:ebad814:         createStmt.append(roleName);
1:ebad814:         return createStmt.toString();
1:ebad814:     }
1:ebad814: 
1:ebad814:     private static void generateRoleGrants(ResultSet rs)
1:ebad814:         throws SQLException
1:ebad814:     {
1:ebad814:         boolean firstTime = true;
1:ebad814:         while (rs.next()) {
1:ebad814: 
1:ebad814:             if (firstTime) {
1:ebad814:                 firstTime = false;
1:ebad814: 
1:ebad814:                 Logs.reportString
1:ebad814:                     ("----------------------------------------------");
1:ebad814:                 Logs.reportMessage( "DBLOOK_Role_grants_header");
1:ebad814:                 Logs.reportString
1:ebad814:                     ("----------------------------------------------\n");
1:ebad814:             }
1:ebad814: 
1:ebad814:             String roleName = dblook.addQuotes
1:ebad814:                 (dblook.expandDoubleQuotes(rs.getString(1)));
1:ebad814:             String grantee = dblook.addQuotes
1:ebad814:                 (dblook.expandDoubleQuotes(rs.getString(2)));
1:ebad814:             String grantor = dblook.addQuotes
1:ebad814:                 (dblook.expandDoubleQuotes(rs.getString(3))); // always DBO
1:ebad814:             boolean isWithAdminOption =
1:ebad814:                 rs.getString(4).equals("Y") ? true : false;
1:ebad814: 
1:ebad814:             Logs.writeToNewDDL
1:ebad814:                 (roleGrantStatement(rs, roleName, grantee, isWithAdminOption));
1:ebad814:             Logs.writeStmtEndToNewDDL();
1:ebad814:             Logs.writeNewlineToNewDDL();
1:ebad814:         }
1:ebad814:     }
1:ebad814: 
1:ebad814:     /**
1:ebad814:      * Generate role grant statement for the current row
1:ebad814:      *
1:ebad814:      * @param rs        @{ResultSet} holding role grant information
1:ebad814:      * @param roleName  The role granted, already quoted
1:40e9089:      * @param grantee   The authorization id to whom the role is granted (a role
1:ebad814:      *                  or a user), already quoted
1:ebad814:      * @param isWithAdminOption @{code true} if ADMIN OPTION was used for the
1:ebad814:      *         grant
1:ebad814:      */
1:ebad814:     private static String roleGrantStatement(ResultSet rs,
1:ebad814:                                              String roleName,
1:ebad814:                                              String grantee,
1:ebad814:                                              boolean isWithAdminOption)
1:ebad814:         throws SQLException
1:ebad814:     {
1:ebad814:         StringBuffer createStmt = new StringBuffer("GRANT ");
1:ebad814: 
1:ebad814:         createStmt.append(roleName);
1:ebad814:         createStmt.append(" TO ");
1:ebad814:         createStmt.append(grantee);
1:ebad814: 
1:ebad814:         if (isWithAdminOption) {
1:ebad814:             createStmt.append(" WITH ADMIN OPTION");
1:ebad814:         }
1:ebad814: 
1:ebad814:         return createStmt.toString();
1:ebad814:     }
1:ebad814: 
1:ebad814: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:40e9089
/////////////////////////////////////////////////////////////////////////
1:      * @param grantee   The authorization id to whom the role is granted (a role
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ebad814
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Roles
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.dblook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import java.util.StringTokenizer;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: public class DB_Roles {
1: 
1:     /**
1:      * Generate role definition statements and role grant statements. Note that
1:      * privileges granted to roles are handled by DB_GrantRevoke, similar to
1:      * privileges granted to users.
1:      *
1:      * @param conn Connection to use
1:      */
1:     public static void doRoles(Connection conn)
1:         throws SQLException {
1: 
1:         // First generate role definition statements
1:         Statement stmt = conn.createStatement();
1:         ResultSet rs = stmt.executeQuery
1:             ("SELECT ROLEID, GRANTEE, GRANTOR, " +
1:              "WITHADMINOPTION FROM SYS.SYSROLES WHERE ISDEF = 'Y'");
1:         generateRoleDefinitions(rs);
1:         rs.close();
1: 
1:         // Generate role grant statements
1:         rs = stmt.executeQuery
1:             ("SELECT ROLEID, GRANTEE, GRANTOR, WITHADMINOPTION" +
1:              " FROM SYS.SYSROLES WHERE ISDEF = 'N'");
1:         generateRoleGrants(rs);
1: 
1:         rs.close();
1:         stmt.close();
1:         return;
1: 
1:     }
1: 
1:     /**
1:      * Generate role definition statements
1:      *
1:      * @param rs Result set holding required information
1:      */
1:     private static void generateRoleDefinitions(ResultSet rs)
1:         throws SQLException
1:     {
1:         boolean firstTime = true;
1:         while (rs.next()) {
1: 
1:             if (firstTime) {
1:                 Logs.reportString
1:                     ("----------------------------------------------");
1:                 Logs.reportMessage( "DBLOOK_Role_definitions_header");
1:                 Logs.reportString
1:                     ("----------------------------------------------\n");
1:             }
1: 
1:             String roleName = dblook.addQuotes
1:                 (dblook.expandDoubleQuotes(rs.getString(1)));
1:             // String grantee = dblook.addQuotes
1:             //     (dblook.expandDoubleQuotes(rs.getString(2))); // always DBO
1:             // String grantor = dblook.addQuotes
1:             //   (dblook.expandDoubleQuotes(rs.getString(3))); // always _SYSTEM
1:             // boolean isWithAdminOption = rs.getString
1:             //   (4).equals("Y") ? true : false; // always true for a definition
1: 
1:             Logs.writeToNewDDL(roleDefinitionStatement(rs, roleName));
1:             Logs.writeStmtEndToNewDDL();
1:             Logs.writeNewlineToNewDDL();
1:             firstTime = false;
1:         }
1:     }
1: 
1:     /**
1:      * Generate a role definition statement for the current row
1:      *
1:      * @param rs        @{code ResultSet} holding role definition information
1:      * @param roleName  The role defined, already quoted
1:      */
1:     private static String roleDefinitionStatement(ResultSet rs, String roleName)
1:         throws SQLException
1:     {
1:         StringBuffer createStmt = new StringBuffer("CREATE ROLE ");
1: 
1:         createStmt.append(roleName);
1:         return createStmt.toString();
1:     }
1: 
1:     private static void generateRoleGrants(ResultSet rs)
1:         throws SQLException
1:     {
1:         boolean firstTime = true;
1:         while (rs.next()) {
1: 
1:             if (firstTime) {
1:                 firstTime = false;
1: 
1:                 Logs.reportString
1:                     ("----------------------------------------------");
1:                 Logs.reportMessage( "DBLOOK_Role_grants_header");
1:                 Logs.reportString
1:                     ("----------------------------------------------\n");
1:             }
1: 
1:             String roleName = dblook.addQuotes
1:                 (dblook.expandDoubleQuotes(rs.getString(1)));
1:             String grantee = dblook.addQuotes
1:                 (dblook.expandDoubleQuotes(rs.getString(2)));
1:             String grantor = dblook.addQuotes
1:                 (dblook.expandDoubleQuotes(rs.getString(3))); // always DBO
1:             boolean isWithAdminOption =
1:                 rs.getString(4).equals("Y") ? true : false;
1: 
1:             Logs.writeToNewDDL
1:                 (roleGrantStatement(rs, roleName, grantee, isWithAdminOption));
1:             Logs.writeStmtEndToNewDDL();
1:             Logs.writeNewlineToNewDDL();
1:         }
1:     }
1: 
1:     /**
1:      * Generate role grant statement for the current row
1:      *
1:      * @param rs        @{ResultSet} holding role grant information
1:      * @param roleName  The role granted, already quoted
0:      * @param graentee The authorization id to whom the role is granted (a role
1:      *                  or a user), already quoted
1:      * @param isWithAdminOption @{code true} if ADMIN OPTION was used for the
1:      *         grant
1:      */
1:     private static String roleGrantStatement(ResultSet rs,
1:                                              String roleName,
1:                                              String grantee,
1:                                              boolean isWithAdminOption)
1:         throws SQLException
1:     {
1:         StringBuffer createStmt = new StringBuffer("GRANT ");
1: 
1:         createStmt.append(roleName);
1:         createStmt.append(" TO ");
1:         createStmt.append(grantee);
1: 
1:         if (isWithAdminOption) {
1:             createStmt.append(" WITH ADMIN OPTION");
1:         }
1: 
1:         return createStmt.toString();
1:     }
1: 
1: }
============================================================================