1:ff22a62: /*
1:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.proc.Functions
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.proc;
1:ff22a62: 
1:ff22a62: import java.sql.*;
1:ff22a62: import java.text.*;
1:ff22a62: import java.util.*;
1:ff22a62: 
1:1695a5d: import org.apache.commons.math3.stat.descriptive.rank.Median;
1:ff22a62: 
1:ff22a62: import org.apache.derbyDemo.scores.util.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Functions used by the Scores application.
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public class Functions
1:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     public  static  final   long    MILLISECONDS_IN_YEAR =
1:ff22a62:         1000L * 60L * 60L * 24L * 365L;
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATIC BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Check that a legal answer was given to a question.
1:ff22a62:      * Throws an exception if it is not.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static int vetChoice( int actualChoice, int questionID )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Connection          conn = getDefaultConnection();
1:ff22a62:         int                 column = 1;
1:ff22a62: 
1:ff22a62:         PreparedStatement   ps = Utils.prepare
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select numberOfChoices, questionName\n" +
1:ff22a62:              "from Question\n" +
1:ff22a62:              "where questionID = ?\n"
1:ff22a62:              );
1:ff22a62:             
1:ff22a62:         ps.setInt( 1, questionID );
1:ff22a62:             
1:ff22a62:         ResultSet           rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:         rs.next();
1:ff22a62: 
1:ff22a62:         int                 numberOfChoices = rs.getInt( column++ );
1:ff22a62:         String              questionName = rs.getString( column++ );
1:ff22a62: 
1:ff22a62:         Utils.close(rs);
1:ff22a62:         Utils.close(ps);
1:ff22a62:         
1:ff22a62:         if ( ( actualChoice >= -1 ) && ( actualChoice < numberOfChoices ) )
1:ff22a62:         { return 1; }
1:ff22a62:         else
1:ff22a62:         {
1:ff22a62:             throw new SQLException
1:ff22a62:                 (
1:ff22a62:                  "Illegal answer " + actualChoice +
1:ff22a62:                  " given to question " + questionName
1:ff22a62:                  );
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Compute a Student's age given their birthday.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static int computeAge( java.sql.Date date)
1:ff22a62:     {
1:ff22a62:         long    interval = System.currentTimeMillis() - date.getTime();
1:ff22a62:         return (int)(interval / MILLISECONDS_IN_YEAR);
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Compute the relative weight of a Question given its difficulty.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double weighQuestion(int difficulty)
1:ff22a62:     {
1:ff22a62:         return Utils.weighQuestion( difficulty );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Compute the score for a question. A penalty is assessed
1:ff22a62:      * for guessing the wrong answer. If actualChoice is -1,
1:ff22a62:      * then the Student didn't guess and we don't assess a penalty.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double scoreAnswer
1:ff22a62:         (
1:ff22a62:          int difficulty,
1:ff22a62:          int numberOfChoices,
1:ff22a62:          int correctChoice,
1:ff22a62:          int actualChoice
1:ff22a62:          )
1:ff22a62:     {
1:ff22a62:         return Utils.scoreAnswer
1:ff22a62:             ( difficulty, numberOfChoices, correctChoice, actualChoice );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Calculate the median score achieved on a Test.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double getMedianTestScore(int testID)
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Logger              log = Logger.getLogger();
1:ff22a62:         boolean             loggingEnabled = log.isLoggingEnabled();
1:ff22a62:         Median              median = new Median();
1:ff22a62:         ArrayList           arraylist = new ArrayList();
1:ff22a62:         Connection          conn = getDefaultConnection();
1:ff22a62: 
1:ff22a62:         try {
1:ff22a62:             log.enableLogging( false );
1:ff22a62:             
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select tk.score\n" +
1:ff22a62:                  "from TestTaking tk, LastTaking lt\n" +
1:ff22a62:                  "where tk.takingID = lt.takingID\n" +
1:ff22a62:                  "and tk.testID = ?\n"
1:ff22a62:                  );
1:ff22a62:             
1:ff22a62:             ps.setInt( 1, testID );
1:ff22a62:             
1:ff22a62:             ResultSet           rs = ps.executeQuery();
1:ff22a62:             
1:ff22a62:             while( rs.next() )
1:ff22a62:             {
1:ff22a62:                 arraylist.add(new Double(rs.getDouble(1)));
1:ff22a62:             }
1:ff22a62:             
1:ff22a62:             Utils.close(rs);
1:ff22a62:             Utils.close(ps);
1:ff22a62:         }
1:ff22a62:         finally
1:ff22a62:         {
1:ff22a62:             log.enableLogging( loggingEnabled );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         int                 count = arraylist.size();
1:ff22a62:         double              values[] = new double[ count ];
1:ff22a62: 
1:ff22a62:         for ( int i = 0; i < count; i++)
1:ff22a62:         { values[ i ] = ((Double)arraylist.get(i)).doubleValue(); }
1:ff22a62: 
1:ff22a62:         return median.evaluate( values );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Format a double as a percentage, suitable for printing.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static String formatPercent(double score)
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         int             rounded = (int) score;
1:ff22a62:         NumberFormat    nf = NumberFormat.getNumberInstance();
1:ff22a62: 
1:ff22a62:         return nf.format( rounded );
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Get the default connection, called from inside the database engine.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     static Connection getDefaultConnection()
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         return DriverManager.getConnection("jdbc:default:connection");
1:ff22a62:     }
1:ff22a62: 
1:ff22a62: }
============================================================================
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.stat.descriptive.rank.Median;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.proc.Functions
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.proc;
1: 
1: import java.sql.*;
1: import java.text.*;
1: import java.util.*;
1: 
0: import org.apache.commons.math.stat.descriptive.rank.Median;
1: 
1: import org.apache.derbyDemo.scores.util.*;
1: 
1: /**
1:  * <p>
1:  * Functions used by the Scores application.
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public class Functions
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     public  static  final   long    MILLISECONDS_IN_YEAR =
1:         1000L * 60L * 60L * 24L * 365L;
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Check that a legal answer was given to a question.
1:      * Throws an exception if it is not.
1:      * </p>
1:      */
1:     public static int vetChoice( int actualChoice, int questionID )
1:         throws SQLException
1:     {
1:         Connection          conn = getDefaultConnection();
1:         int                 column = 1;
1: 
1:         PreparedStatement   ps = Utils.prepare
1:             (
1:              conn,
1:              "select numberOfChoices, questionName\n" +
1:              "from Question\n" +
1:              "where questionID = ?\n"
1:              );
1:             
1:         ps.setInt( 1, questionID );
1:             
1:         ResultSet           rs = ps.executeQuery();
1: 
1:         rs.next();
1: 
1:         int                 numberOfChoices = rs.getInt( column++ );
1:         String              questionName = rs.getString( column++ );
1: 
1:         Utils.close(rs);
1:         Utils.close(ps);
1:         
1:         if ( ( actualChoice >= -1 ) && ( actualChoice < numberOfChoices ) )
1:         { return 1; }
1:         else
1:         {
1:             throw new SQLException
1:                 (
1:                  "Illegal answer " + actualChoice +
1:                  " given to question " + questionName
1:                  );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Compute a Student's age given their birthday.
1:      * </p>
1:      */
1:     public static int computeAge( java.sql.Date date)
1:     {
1:         long    interval = System.currentTimeMillis() - date.getTime();
1:         return (int)(interval / MILLISECONDS_IN_YEAR);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Compute the relative weight of a Question given its difficulty.
1:      * </p>
1:      */
1:     public static double weighQuestion(int difficulty)
1:     {
1:         return Utils.weighQuestion( difficulty );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Compute the score for a question. A penalty is assessed
1:      * for guessing the wrong answer. If actualChoice is -1,
1:      * then the Student didn't guess and we don't assess a penalty.
1:      * </p>
1:      */
1:     public static double scoreAnswer
1:         (
1:          int difficulty,
1:          int numberOfChoices,
1:          int correctChoice,
1:          int actualChoice
1:          )
1:     {
1:         return Utils.scoreAnswer
1:             ( difficulty, numberOfChoices, correctChoice, actualChoice );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Calculate the median score achieved on a Test.
1:      * </p>
1:      */
1:     public static double getMedianTestScore(int testID)
1:         throws SQLException
1:     {
1:         Logger              log = Logger.getLogger();
1:         boolean             loggingEnabled = log.isLoggingEnabled();
1:         Median              median = new Median();
1:         ArrayList           arraylist = new ArrayList();
1:         Connection          conn = getDefaultConnection();
1: 
1:         try {
1:             log.enableLogging( false );
1:             
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select tk.score\n" +
1:                  "from TestTaking tk, LastTaking lt\n" +
1:                  "where tk.takingID = lt.takingID\n" +
1:                  "and tk.testID = ?\n"
1:                  );
1:             
1:             ps.setInt( 1, testID );
1:             
1:             ResultSet           rs = ps.executeQuery();
1:             
1:             while( rs.next() )
1:             {
1:                 arraylist.add(new Double(rs.getDouble(1)));
1:             }
1:             
1:             Utils.close(rs);
1:             Utils.close(ps);
1:         }
1:         finally
1:         {
1:             log.enableLogging( loggingEnabled );
1:         }
1: 
1:         int                 count = arraylist.size();
1:         double              values[] = new double[ count ];
1: 
1:         for ( int i = 0; i < count; i++)
1:         { values[ i ] = ((Double)arraylist.get(i)).doubleValue(); }
1: 
1:         return median.evaluate( values );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Format a double as a percentage, suitable for printing.
1:      * </p>
1:      */
1:     public static String formatPercent(double score)
1:         throws SQLException
1:     {
1:         int             rounded = (int) score;
1:         NumberFormat    nf = NumberFormat.getNumberInstance();
1: 
1:         return nf.format( rounded );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get the default connection, called from inside the database engine.
1:      * </p>
1:      */
1:     static Connection getDefaultConnection()
1:         throws SQLException
1:     {
1:         return DriverManager.getConnection("jdbc:default:connection");
1:     }
1: 
1: }
============================================================================