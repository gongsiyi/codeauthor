1:6de7104: /*
4:6de7104: 
1:6de7104:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20
1:5ff5941: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:6de7104: 
1:6de7104:       http://www.apache.org/licenses/LICENSE-2.0
1:6de7104: 
1:6de7104:    Unless required by applicable law or agreed to in writing, software
1:6de7104:    distributed under the License is distributed on an "AS IS" BASIS,
1:6de7104:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6de7104:    See the License for the specific language governing permissions and
1:6de7104:    limitations under the License.
1:6de7104: 
1:6de7104:  */
1:6de7104: 
1:6de7104: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:6de7104: import java.sql.Connection;
1:6de7104: import java.sql.DriverManager;
1:6de7104: import java.sql.ResultSetMetaData;
1:6de7104: import java.sql.ResultSet;
1:6de7104: import java.sql.Statement;
1:6de7104: import java.sql.SQLException;
1:6de7104: import java.sql.Types;
1:6de7104: import java.sql.PreparedStatement;
1:6de7104: import java.sql.CallableStatement;
1:6de7104: import java.sql.DatabaseMetaData;
1:6de7104: import java.io.*;
1:6de7104: 
1:6de7104: import org.apache.derby.tools.ij;
1:6de7104: import org.apache.derby.tools.JDBCDisplayUtil;
1:0bbfdac: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:6de7104: 
1:6de7104: /**
1:6de7104:  *This Program Test getConnection()/getStatement().
1:6de7104:  */
1:6de7104: 
1:6de7104: public class connectionJdbc20{ 
1:6de7104: 
1:6de7104: 	public static void main(String[] args) {
1:6de7104: 		Connection conn, connreturn;
1:6de7104: 		Statement stmt, stmtreturn;
1:0bbfdac: 
1:6de7104: 
1:6de7104: 		System.out.println("Test connection20 starting");
1:6de7104: 		try
1:6de7104: 		{
1:6de7104: 			// use the ij utility to read the property file and
1:6de7104: 			// make the initial connection.
1:6de7104: 			 ij.getPropertyArg(args);
1:6de7104: 			 conn = ij.startJBMS();
1:d029255: 
1:6de7104: 			 stmt = conn.createStatement();
1:d029255: 
1:6de7104:             //create a table, insert a row, do a select from the table,
1:6de7104: 			 stmt.execute("create table tab1("+
1:6de7104:                                            "c1 char(100) for bit data,"+
1:6de7104:                                            "c2 varchar(100) for bit data," +
1:6de7104:                                            "c3 long varchar for bit data,"+
1:6de7104:                                            "c4 char(100),"+ 
1:6de7104:                                            "c5 varchar(100),"+
1:6de7104:                                            "c6 long varchar)");
1:6de7104: 
1:6de7104:             connreturn = stmt.getConnection();
1:6de7104:             if (conn.equals(connreturn))
1:6de7104:                 System.out.println("Got Same Connection Object");
1:6de7104:             else
1:6de7104:                 System.out.println("Got Different Connection Object");
1:6de7104:            
1:6de7104:             // load some data into this table ..
1:6de7104:             load_data(connreturn);
1:6de7104:             
1:6de7104: 			// read the data   of each type with all the possible functions
1:31f29a4: 			ResultSet rs = stmt.executeQuery("select " + 
1:31f29a4: 							 "c1," + 
1:31f29a4: 							 "c2," + 
1:31f29a4: 							 "c3," + 
1:31f29a4: 							 "c4," + 
1:31f29a4: 							 "c5," + 
1:31f29a4: 							 "c6," + 
1:31f29a4: 							 "c1 as c1_spare," + 
1:31f29a4: 							 "c2 as c2_spare,"  +
1:31f29a4: 							 "c3 as c3_spare "  +
1:31f29a4: 							 "from tab1");
1:6de7104:             int loop = 0;
1:6de7104:             while(loop < 2 )
1:6de7104:             {
1:6de7104:                 while (rs.next())
1:6de7104:                 {
1:6de7104:                     for(int i=1 ; i < 7 ; i++)
1:6de7104:                     {
1:6de7104:                         get_using_object(rs, i);
1:6de7104:                         get_using_string(rs, i);
1:31f29a4: 			
1:31f29a4: 			get_using_ascii_stream(rs, i);
1:31f29a4: 
1:6de7104:                         if(i < 4 ) // only c1 , c2, c3
1:6de7104:                         {
1:31f29a4:                             get_using_binary_stream(rs, i + 6);
1:31f29a4:                             get_using_bytes(rs, i + 6);
1:6de7104:                         }
1:6de7104:                     } 
1:6de7104:                 }
1:6de7104:                 // get the statment back from the result set
1:6de7104:                 stmtreturn = rs.getStatement();
1:6de7104:                 if (stmt.equals(stmtreturn))
1:6de7104:                     System.out.println("Got Same Statement Object");
1:6de7104:                 else
1:6de7104:                     System.out.println("Got Different Statement Object");
1:6de7104:                 
1:6de7104:                 rs.close();
1:31f29a4: 		rs = stmt.executeQuery("select " + 
1:31f29a4: 				       "c1," + 
1:31f29a4: 				       "c2," + 
1:31f29a4: 				       "c3," + 
1:31f29a4: 				       "c4," + 
1:31f29a4: 				       "c5," + 
1:31f29a4: 				       "c6," + 
1:31f29a4: 				       "c1 as c1_spare," + 
1:31f29a4: 				       "c2 as c2_spare,"  +
1:31f29a4: 				       "c3 as c3_spare "  +
1:31f29a4: 				       "from tab1");
1:31f29a4: 		loop++;
1:6de7104:             }
1:6de7104: 
1:31f29a4: 	    stmt.close();
1:6de7104: 
1:6de7104:             // Try to get the connection object thro database meta data
1:6de7104:             DatabaseMetaData dbmeta = conn.getMetaData();
1:6de7104: 
1:6de7104: 			rs = dbmeta.getTypeInfo();
1:6de7104:             while (rs.next())
1:6de7104:             {
1:6de7104:                System.out.println(rs.getString(1)); 
1:6de7104:             }
1:6de7104:             // try to get a statemet from a meta data result set
1:6de7104:             stmt = rs.getStatement(); 
1:d029255:             rs.close();
1:6de7104: 
1:6de7104:             // Try to get the Connection back from a Metadata
1:6de7104:             System.out.println("Try to Get the connection back from metadata");
1:6de7104:             connreturn = dbmeta.getConnection();
1:6de7104:             if (conn.equals(connreturn))
1:6de7104:                 System.out.println("Got Same Connection Object");
1:6de7104:             else
1:6de7104:                 System.out.println("Got Different Connection Object");
1:6de7104: 
1:6de7104:              
1:6de7104:             // Try to get the connection thru callable statement
1:6de7104:             CallableStatement  cs = conn.prepareCall("select * from tab1");
1:6de7104:             System.out.println(" Try to get the connection back from a callable stmt");
1:6de7104:             connreturn = cs.getConnection();
1:6de7104:             if (conn.equals(connreturn))
1:6de7104:                 System.out.println("Got Same Connection Object");
1:6de7104:             else
1:6de7104:                 System.out.println("Got Different Connection Object");
1:6de7104: 
1:6de7104:             cs.close();
1:6de7104: 			conn.close();
1:6de7104: 
1:6de7104: 		}
1:6de7104: 		catch (SQLException e) {
1:6de7104: 			dumpSQLExceptions(e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 		catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception: "+e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		System.out.println("Test getConnection  finished");
1:6de7104:     }
1:6de7104: 
1:6de7104: 
1:6de7104:     static private void load_data(Connection conn) throws Exception{
1:6de7104:         PreparedStatement pstmt = null;
1:6de7104: 
1:6de7104:         try{
1:6de7104:             pstmt = conn.prepareStatement(
1:6de7104:                      "insert into tab1 values(?,?,?,?,?,?)");
1:6de7104:             String c1_value="C1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:             String c2_value="C2XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:             String c3_value="C3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:             String c4_value="C4XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:             String c5_value="C5XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:             String c6_value="C6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104: 
1:6de7104:             pstmt.setBytes(1, c1_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setBytes(2, c2_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setBytes(3, c3_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setString(4, c4_value);
1:6de7104:             pstmt.setString(5, c5_value);
1:6de7104:             pstmt.setString(6, c6_value);
1:6de7104:             pstmt.execute();
1:6de7104: 
1:6de7104:             // get the connection back thru preapred statement
1:6de7104:             System.out.println("Try to get connection using preaparedstatement");
1:6de7104:             Connection connreturn = pstmt.getConnection();
1:6de7104:             if (conn.equals(connreturn))
1:6de7104:                 System.out.println("Got Same Connection Object");
1:6de7104:             else
1:6de7104:                 System.out.println("Got Different Connection Object");
1:6de7104: 
1:6de7104:         }catch(SQLException e){
1:6de7104:              dumpSQLExceptions(e);
1:6de7104:              e.printStackTrace();
1:6de7104:         }catch(Throwable e ){
1:6de7104:              System.out.println("Fail -- unexpected exception ");
1:6de7104:              e.printStackTrace();
1:6de7104:         }finally{
1:6de7104:              pstmt.close();
1:6de7104:         }
1:6de7104:     }
1:6de7104: 
1:6de7104: 	static private void dumpSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("FAIL -- unexpected exception");
1:6de7104: 		while (se != null) {
1:6de7104: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1:6de7104: 			se = se.getNextException();
1:6de7104: 		}
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	static private void dumpExpectedSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("PASS -- expected exception");
1:6de7104: 		while (se != null) {
1:6de7104: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1:6de7104: 			se = se.getNextException();
1:6de7104:         }
1:6de7104:     }
1:6de7104: 
1:6de7104:     static private int printbytearray(byte [] a , int len, int count){
1:6de7104: 
1:6de7104: 		for (int i =0 ; i < len; i++, count++) {
1:6de7104: 
1:6de7104: 			System.out.print("x" + Integer.toHexString(a[i]));
1:6de7104: 
1:6de7104: 			if ((i > 0) && ((i % 20) == 0))
1:6de7104: 				System.out.println("");
1:6de7104: 		}
1:6de7104: 		return count;
1:6de7104:     }
1:6de7104: 
1:6de7104:     static void get_using_object(ResultSet rs, int col_no) throws Exception{
1:6de7104: 		System.out.println("getObject(" + col_no + ")");
1:6de7104:         Object cobj = rs.getObject(col_no);
1:6de7104:         if (cobj instanceof byte[]){
1:6de7104:             byte[] bytearray = (byte[]) cobj;
1:6de7104: 			System.out.println("  as byte[] length " + bytearray.length);
1:6de7104:             printbytearray(bytearray, bytearray.length, 0);
1:6de7104: 			System.out.println("");
1:6de7104:         }else {
1:6de7104: 			System.out.println("  as String");
1:6de7104:             System.out.println(cobj.toString());
1:6de7104: 		}
1:6de7104:     }
1:6de7104: 
1:6de7104:     static void get_using_bytes(ResultSet rs, int col_no) throws Exception{
1:6de7104: 		System.out.println("getBytes(" + col_no + ")");
1:6de7104:        byte[] bytearray = (byte[]) rs.getBytes(col_no);
1:6de7104:        printbytearray(bytearray, bytearray.length, 0);
1:6de7104: 		System.out.println("");
1:6de7104:     }
1:6de7104: 
1:6de7104:     static void get_using_string(ResultSet rs, int col_no) throws Exception{
1:6de7104: 		String s = rs.getString(col_no);
1:6de7104: 		System.out.println("getString(" + col_no + ") length " + s.length());
1:6de7104:         System.out.println(s);
1:6de7104:     }
1:6de7104: 
1:6de7104:     static void get_using_ascii_stream(ResultSet rs, int col_no) throws Exception{
1:6de7104:  		System.out.println("getAsciiStream(" + col_no + ")");
1:6de7104: 		int no_bytes_read = 0;
1:6de7104:         InputStream rsbin = rs.getAsciiStream(col_no);
1:6de7104:         byte [] bytearray = new byte[200];
1:6de7104: 		int count = 0;
1:6de7104:         while((no_bytes_read=rsbin.read(bytearray)) != -1)
1:6de7104:         {
1:6de7104: 			count = printbytearray(bytearray, no_bytes_read, count);
1:6de7104:         }
1:6de7104: 		System.out.println("");
1:6de7104: 
1:6de7104:     }
1:6de7104: 
1:6de7104:     static void get_using_binary_stream(ResultSet rs, int col_no) throws Exception{
1:6de7104:  		System.out.println("getBinaryStream(" + col_no + ")");
1:6de7104:         int no_bytes_read = 0;
1:6de7104:         InputStream rsbin = rs.getBinaryStream(col_no);
1:6de7104:         byte [] bytearray = new byte[200];
1:6de7104: 		int count = 0;
1:6de7104:         while((no_bytes_read=rsbin.read(bytearray)) != -1)
1:6de7104:         {
1:6de7104: 			count = printbytearray(bytearray, no_bytes_read, count);
1:6de7104:         }
1:6de7104: 		System.out.println("");
1:6de7104:     }
1:6de7104: 
1:6de7104: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d029255
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             rs.close();
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
0: 	static private String[] testObjects = {"TABLE TAB1"};
1: 
/////////////////////////////////////////////////////////////////////////
0: 			// cleanup table, just in case
0: 			TestUtil.cleanUpTest(stmt, testObjects);
/////////////////////////////////////////////////////////////////////////
0: 			TestUtil.cleanUpTest(stmt, testObjects);
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:31f29a4
/////////////////////////////////////////////////////////////////////////
1: 			ResultSet rs = stmt.executeQuery("select " + 
1: 							 "c1," + 
1: 							 "c2," + 
1: 							 "c3," + 
1: 							 "c4," + 
1: 							 "c5," + 
1: 							 "c6," + 
1: 							 "c1 as c1_spare," + 
1: 							 "c2 as c2_spare,"  +
1: 							 "c3 as c3_spare "  +
1: 							 "from tab1");
/////////////////////////////////////////////////////////////////////////
1: 			
1: 			get_using_ascii_stream(rs, i);
1: 
1:                             get_using_binary_stream(rs, i + 6);
1:                             get_using_bytes(rs, i + 6);
/////////////////////////////////////////////////////////////////////////
1: 		rs = stmt.executeQuery("select " + 
1: 				       "c1," + 
1: 				       "c2," + 
1: 				       "c3," + 
1: 				       "c4," + 
1: 				       "c5," + 
1: 				       "c6," + 
1: 				       "c1 as c1_spare," + 
1: 				       "c2 as c2_spare,"  +
1: 				       "c3 as c3_spare "  +
1: 				       "from tab1");
1: 		loop++;
1: 	    stmt.close();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 			 isDerbyNet = TestUtil.isNetFramework();
commit:6de7104
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20
1: 
0:    Copyright 2000, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSetMetaData;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: import java.sql.PreparedStatement;
1: import java.sql.CallableStatement;
1: import java.sql.DatabaseMetaData;
1: import java.io.*;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  *This Program Test getConnection()/getStatement().
0:  * @author - suresht
1:  */
1: 
1: public class connectionJdbc20{ 
1:    
0: 	static private boolean isDerbyNet = false;
1: 
1: 	public static void main(String[] args) {
1: 		Connection conn, connreturn;
1: 		Statement stmt, stmtreturn;
0: 		String framework = System.getProperty("framework");
0: 		if (framework != null && framework.toUpperCase().equals("DERBYNET"))
0: 			isDerbyNet = true;
1: 
1: 		System.out.println("Test connection20 starting");
1: 		try
1: 		{
1: 			// use the ij utility to read the property file and
1: 			// make the initial connection.
1: 			 ij.getPropertyArg(args);
1: 			 conn = ij.startJBMS();
1: 			 stmt = conn.createStatement();
1:             //create a table, insert a row, do a select from the table,
1: 			 stmt.execute("create table tab1("+
1:                                            "c1 char(100) for bit data,"+
1:                                            "c2 varchar(100) for bit data," +
1:                                            "c3 long varchar for bit data,"+
1:                                            "c4 char(100),"+ 
1:                                            "c5 varchar(100),"+
1:                                            "c6 long varchar)");
1: 
1:             connreturn = stmt.getConnection();
1:             if (conn.equals(connreturn))
1:                 System.out.println("Got Same Connection Object");
1:             else
1:                 System.out.println("Got Different Connection Object");
1:            
1:             // load some data into this table ..
1:             load_data(connreturn);
1:             
1: 			// read the data   of each type with all the possible functions
0: 			ResultSet rs = stmt.executeQuery("select * from tab1");
1:             int loop = 0;
1:             while(loop < 2 )
1:             {
1:                 while (rs.next())
1:                 {
1:                     for(int i=1 ; i < 7 ; i++)
1:                     {
1:                         get_using_object(rs, i);
1:                         get_using_string(rs, i);
0: 						get_using_ascii_stream(rs, i);
1:                         if(i < 4 ) // only c1 , c2, c3
1:                         {
0:                             get_using_binary_stream(rs, i);
0:                             get_using_bytes(rs, i);
1:                         }
1:                     } 
1:                 }
1:                 // get the statment back from the result set
1:                 stmtreturn = rs.getStatement();
1:                 if (stmt.equals(stmtreturn))
1:                     System.out.println("Got Same Statement Object");
1:                 else
1:                     System.out.println("Got Different Statement Object");
1:                 
1:                 rs.close();
0: 			    rs = stmt.executeQuery("select * from tab1");
0:                 loop++;
1:             }
1: 
0: 			stmt.close();
1: 
1:             // Try to get the connection object thro database meta data
1:             DatabaseMetaData dbmeta = conn.getMetaData();
1: 
1: 			rs = dbmeta.getTypeInfo();
1:             while (rs.next())
1:             {
1:                System.out.println(rs.getString(1)); 
1:             }
1:             // try to get a statemet from a meta data result set
1:             stmt = rs.getStatement(); 
1: 
1:             // Try to get the Connection back from a Metadata
1:             System.out.println("Try to Get the connection back from metadata");
1:             connreturn = dbmeta.getConnection();
1:             if (conn.equals(connreturn))
1:                 System.out.println("Got Same Connection Object");
1:             else
1:                 System.out.println("Got Different Connection Object");
1: 
1:              
1:             // Try to get the connection thru callable statement
1:             CallableStatement  cs = conn.prepareCall("select * from tab1");
1:             System.out.println(" Try to get the connection back from a callable stmt");
1:             connreturn = cs.getConnection();
1:             if (conn.equals(connreturn))
1:                 System.out.println("Got Same Connection Object");
1:             else
1:                 System.out.println("Got Different Connection Object");
1: 
1:             cs.close();
1: 			conn.close();
1: 
1: 		}
1: 		catch (SQLException e) {
1: 			dumpSQLExceptions(e);
1: 			e.printStackTrace();
1: 		}
1: 		catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception: "+e);
1: 			e.printStackTrace();
1: 		}
1: 
1: 		System.out.println("Test getConnection  finished");
1:     }
1: 
1: 
1:     static private void load_data(Connection conn) throws Exception{
1:         PreparedStatement pstmt = null;
1: 
1:         try{
1:             pstmt = conn.prepareStatement(
1:                      "insert into tab1 values(?,?,?,?,?,?)");
1:             String c1_value="C1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:             String c2_value="C2XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:             String c3_value="C3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:             String c4_value="C4XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:             String c5_value="C5XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:             String c6_value="C6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1: 
1:             pstmt.setBytes(1, c1_value.getBytes("US-ASCII"));
1:             pstmt.setBytes(2, c2_value.getBytes("US-ASCII"));
1:             pstmt.setBytes(3, c3_value.getBytes("US-ASCII"));
1:             pstmt.setString(4, c4_value);
1:             pstmt.setString(5, c5_value);
1:             pstmt.setString(6, c6_value);
1:             pstmt.execute();
1: 
1:             // get the connection back thru preapred statement
1:             System.out.println("Try to get connection using preaparedstatement");
1:             Connection connreturn = pstmt.getConnection();
1:             if (conn.equals(connreturn))
1:                 System.out.println("Got Same Connection Object");
1:             else
1:                 System.out.println("Got Different Connection Object");
1: 
1:         }catch(SQLException e){
1:              dumpSQLExceptions(e);
1:              e.printStackTrace();
1:         }catch(Throwable e ){
1:              System.out.println("Fail -- unexpected exception ");
1:              e.printStackTrace();
1:         }finally{
1:              pstmt.close();
1:         }
1:     }
1: 
1: 	static private void dumpSQLExceptions (SQLException se) {
1: 		System.out.println("FAIL -- unexpected exception");
1: 		while (se != null) {
1: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1: 			se = se.getNextException();
1: 		}
1: 	}
1: 
1: 	static private void dumpExpectedSQLExceptions (SQLException se) {
1: 		System.out.println("PASS -- expected exception");
1: 		while (se != null) {
1: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1: 			se = se.getNextException();
1:         }
1:     }
1: 
1:     static private int printbytearray(byte [] a , int len, int count){
1: 
1: 		for (int i =0 ; i < len; i++, count++) {
1: 
1: 			System.out.print("x" + Integer.toHexString(a[i]));
1: 
1: 			if ((i > 0) && ((i % 20) == 0))
1: 				System.out.println("");
1: 		}
1: 		return count;
1:     }
1: 
1:     static void get_using_object(ResultSet rs, int col_no) throws Exception{
1: 		System.out.println("getObject(" + col_no + ")");
1:         Object cobj = rs.getObject(col_no);
1:         if (cobj instanceof byte[]){
1:             byte[] bytearray = (byte[]) cobj;
1: 			System.out.println("  as byte[] length " + bytearray.length);
1:             printbytearray(bytearray, bytearray.length, 0);
1: 			System.out.println("");
1:         }else {
1: 			System.out.println("  as String");
1:             System.out.println(cobj.toString());
1: 		}
1:     }
1: 
1:     static void get_using_bytes(ResultSet rs, int col_no) throws Exception{
1: 		System.out.println("getBytes(" + col_no + ")");
1:        byte[] bytearray = (byte[]) rs.getBytes(col_no);
1:        printbytearray(bytearray, bytearray.length, 0);
1: 		System.out.println("");
1:     }
1: 
1:     static void get_using_string(ResultSet rs, int col_no) throws Exception{
1: 		String s = rs.getString(col_no);
1: 		System.out.println("getString(" + col_no + ") length " + s.length());
1:         System.out.println(s);
1:     }
1: 
1:     static void get_using_ascii_stream(ResultSet rs, int col_no) throws Exception{
1:  		System.out.println("getAsciiStream(" + col_no + ")");
1: 		int no_bytes_read = 0;
1:         InputStream rsbin = rs.getAsciiStream(col_no);
1:         byte [] bytearray = new byte[200];
1: 		int count = 0;
1:         while((no_bytes_read=rsbin.read(bytearray)) != -1)
1:         {
1: 			count = printbytearray(bytearray, no_bytes_read, count);
1:         }
1: 		System.out.println("");
1: 
1:     }
1: 
1:     static void get_using_binary_stream(ResultSet rs, int col_no) throws Exception{
1:  		System.out.println("getBinaryStream(" + col_no + ")");
1:         int no_bytes_read = 0;
1:         InputStream rsbin = rs.getBinaryStream(col_no);
1:         byte [] bytearray = new byte[200];
1: 		int count = 0;
1:         while((no_bytes_read=rsbin.read(bytearray)) != -1)
1:         {
1: 			count = printbytearray(bytearray, no_bytes_read, count);
1:         }
1: 		System.out.println("");
1:     }
1: 
1: }
============================================================================