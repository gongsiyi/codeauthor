1:8716d11: /*
3:8716d11: 
1:8716d11:    Derby - Class org.apache.derby.impl.jdbc.InternalClob
1:8716d11: 
1:8716d11:    Licensed to the Apache Software Foundation (ASF) under one
1:8716d11:    or more contributor license agreements.  See the NOTICE file
1:8716d11:    distributed with this work for additional information
1:8716d11:    regarding copyright ownership.  The ASF licenses this file
1:8716d11:    to you under the Apache License, Version 2.0 (the
1:8716d11:    "License"); you may not use this file except in compliance
1:8716d11:    with the License.  You may obtain a copy of the License at
1:8716d11: 
1:8716d11:      http://www.apache.org/licenses/LICENSE-2.0
1:8716d11: 
1:8716d11:    Unless required by applicable law or agreed to in writing,
1:8716d11:    software distributed under the License is distributed on an
1:8716d11:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8716d11:    KIND, either express or implied.  See the License for the
1:8716d11:    specific language governing permissions and limitations
1:8716d11:    under the License.
1:8716d11: 
3:8716d11:  */
1:8716d11: package org.apache.derby.impl.jdbc;
1:8716d11: 
1:8716d11: import java.io.IOException;
1:8716d11: import java.io.InputStream;
1:8716d11: import java.io.Reader;
1:8716d11: import java.io.Writer;
1:8716d11: 
1:8716d11: import java.sql.SQLException;
1:8716d11: 
3:8716d11: /**
1:8716d11:  * A set of operations available on internal Clob content representations.
2:8716d11:  * <p>
1:8716d11:  * The methods defined by {@link java.sql.Clob} must be implemented on top of
1:8716d11:  * this interface. In addition, there are some methods to aid internal tasks and
1:8716d11:  * organization, like transferring one internal Clob representation to another
1:8716d11:  * one.
1:8716d11:  */
1:8716d11: interface InternalClob {
1:8716d11: 
1:8716d11:     /**
1:8716d11:      * Gets the number of characters in the Clob.
3:8716d11:      *
1:8716d11:      * @return Number of characters in the Clob.
2:8716d11:      * @throws IOException if accessing underlying I/O resources fail
2:8716d11:      * @throws SQLException if accessing underlying resources fail
1:8716d11:      */
1:8716d11:     long getCharLength() throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:dac5aed:      * Gets the number of characters in the Clob if it is already known.
1:dac5aed:      * <p>
1:dac5aed:      * This method will not do any work to obtain the length if it isn't
1:dac5aed:      * already known. Due to special handling of zero in the code, this method
1:dac5aed:      * will return {@code -1} if a length of zero is cached internally.
1:dac5aed:      * <p>
1:dac5aed:      * If a positive value is returned, it is expected to be equal to the
1:dac5aed:      * actual length of the Clob (i.e., no stale values must be returned).
1:dac5aed:      *
1:dac5aed:      * @return Number of characters in the Clob, or {@code -1} if the length is
1:dac5aed:      *      currently unknown (not cached).
1:dac5aed:      */
1:dac5aed:     long getCharLengthIfKnown();
1:dac5aed: 
1:dac5aed:     /**
1:8716d11:      * Returns a stream serving the raw bytes of the Clob.
1:8716d11:      * <p>
1:8716d11:      * Note that it is up to the caller of this method to handle the issue of
1:8716d11:      * encoding. There is no predetermined encoding associated with this byte
1:8716d11:      * stream, it is up to the Clob representation which one it uses.
1:8716d11:      * <p>
1:d211792:      * This stream may be an internal store stream, and should not be directly
1:e8fd686:      * published to the end user (returned through the JDBC API). There are
1:e8fd686:      * three reasons for this:
1:e8fd686:      * <ul> <li>the stream may be closed by the end user when it is
1:e8fd686:      *          not supposed to</li>
1:e8fd686:      *      <li>operations on the stream might throw exceptions we don't want to
1:e8fd686:      *          present to the end user unwrapped</li>
1:e8fd686:      *      <li>the stream may contain a Derby specific end-of-stream marker
1:e8fd686:      *      </li>
1:e8fd686:      * </ul>
1:d211792:      * <p>
1:8716d11:      * The primary use of this method is to clone the Clob contents without
1:8716d11:      * going via char (or String). Make sure the clone uses the same encoding
1:8716d11:      * as the original Clob representation.
1:8716d11:      *
1:8716d11:      * @return A stream of bytes representing the content of the Clob,
1:8716d11:      *      initialized at byte position 0.
1:8716d11:      * @throws IOException if accessing underlying I/O resources fail
1:8716d11:      * @throws SQLException if accessing underlying resources fail
1:8716d11:      */
1:8716d11:     InputStream getRawByteStream() throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:8716d11:      * Returns a reader for the Clob content, initialized at the specified
1:8716d11:      * character position.
1:8716d11:      *
1:8716d11:      * @param characterPosition character position. The first character is at
1:8716d11:      *      position <code>1</code>.
1:1c4d62e:      * @return A {@code Reader} serving the content of the Clob.
1:d211792:      * @throws EOFException if the position is larger then the Clob
1:8716d11:      * @throws IOException if accessing underlying I/O resources fail
1:8716d11:      * @throws SQLException if accessing underlying resources fail
1:8716d11:      */
1:8716d11:     Reader getReader(long characterPosition) throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:ab2037f:      * Returns an internal reader for the Clob content, initialized at the
1:ab2037f:      * specified character position.
1:ab2037f:      * <p>
1:ab2037f:      * This method can return a shared reader object, avoiding instantiation and
1:ab2037f:      * repositioning costs for internal operations where the stream itself is
1:ab2037f:      * not published to the end-user. One such example is
1:ab2037f:      * {@code Clob.getSubString}.
1:ab2037f:      *
1:ab2037f:      * @param characterPosition character position. The first character is at
1:ab2037f:      *      position {@code 1}.
1:ab2037f:      * @return A {@code Reader} serving the content of the Clob.
1:ab2037f:      * @throws EOFException if the position is larger then the Clob
1:ab2037f:      * @throws IOException if accessing underlying I/O resources fail
1:ab2037f:      * @throws SQLException if accessing underlying resources fail
1:ab2037f:      */
1:ab2037f:     Reader getInternalReader(long characterPosition)
1:ab2037f:             throws IOException, SQLException;
1:ab2037f: 
1:ab2037f:     /**
1:d9319b8:      * Returns the update count of the Clob.
1:d9319b8:      * <p>
1:d9319b8:      * The update count is increased each time a modification of the Clob
1:d9319b8:      * content is made.
1:d9319b8:      *
1:d9319b8:      * @return Update count, starting at zero.
1:d9319b8:      */
1:d9319b8:     long getUpdateCount();
1:d9319b8: 
1:d9319b8:     /**
1:8716d11:      * Returns a writer to write data into the Clob.
1:8716d11:      * <p>
1:dec4025:      * The semantics of the writer is the same as for {@link #insertString}.
1:8716d11:      *
1:8716d11:      * @param charPos the starting character position. The first character is
1:8716d11:      *      at position <code>1</code>.
1:8716d11:      * @return A writer initialized at the specified character position.
1:8716d11:      * @throws IOException if writing to the Clob fails
1:8716d11:      * @throws SQLException if accessing underlying resources fail
1:8716d11:      * @throws UnsupportedOperationException if the Clob representation is
1:8716d11:      *      read-only
1:8716d11:      */
1:dec4025:     Writer getWriter(long charPos) throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:8716d11:      * Inserts the given string at the specified character position.
1:8716d11:      * <p>
1:8716d11:      * The behavior of this method can be defined by the following examples on
1:8716d11:      * the Clob <code>clob</code> with value <code>"ABCDEFG"</code>;
1:8716d11:      * <ul> <li><code>clob.setString(2, "XX")</code> - "AXXDEFG"
1:8716d11:      *      <li><code>clob.setString(1, "XX")</code> - "XXCDEFG"
1:8716d11:      *      <li><code>clob.setString(8, "XX")</code> - "ABCDEFGXX"
1:8716d11:      *      <li><code>clob.setString(7, "XX")</code> - "ABCDEFXX"
1:8716d11:      *      <li><code>clob.setString(9, "XX")</code> - throws exception
1:8716d11:      * </ul>
1:8716d11:      *
1:8716d11:      * @param str the string to insert
1:8716d11:      * @param pos the character position the string will be inserted at. Must be
1:8716d11:      *      between <code>1</code> and <code>clob.length() +1</code>, inclusive.
1:8716d11:      * @return The number of characters inserted.
1:8716d11:      * @throws IOException if writing to the I/O resources fail
1:8716d11:      * @throws SQLException it the position is invalid
1:8716d11:      * @throws IllegalArgumentException if the string is <code>null</code>
1:8716d11:      * @throws UnsupportedOperationException if the Clob representation is
1:8716d11:      *      read-only
1:8716d11:      */
1:8716d11:     long insertString(String str, long pos) throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:d9319b8:      * Tells if the the Clob has been released.
1:d9319b8:      * <p>
1:d9319b8:      * Depending on the context, a Clob is released either because the internal
1:d9319b8:      * representation has been changed, or because the Clob itself has been
1:d9319b8:      * closed. The former can happen when a user modifies a stream that is
1:d9319b8:      * currently represented as a store stream. The latter can happen if
1:d9319b8:      * {@code Clob.free} has been called, or if Derby implicitly closes the
1:d9319b8:      * Clob.
1:d9319b8:      *
1:d9319b8:      * @return {@code true} if released, {@code false} if not.
1:d9319b8:      */
1:d9319b8:     boolean isReleased();
1:d9319b8: 
1:d9319b8:     /**
1:8716d11:      * Tells if the Clob representation is intended to be writable.
1:8716d11:      * <p>
1:1a3795e:      * Note that even if this method returns <code>true</code>, it might not be
1:8716d11:      * possible to write to the Clob. If this happens, it is because the
1:8716d11:      * assoicated database is read-only, and the internal Clob representation is
1:8716d11:      * unable to obtain the resources it require (could be an area on disk to
1:8716d11:      * write temporary data).
1:8716d11:      *
1:8716d11:      * @return <code>true</code> if the Clob is intended to be writable, 
1:8716d11:      *      <code>false</code> if modifying the Clob is definitely not possible.
1:8716d11:      */
1:8716d11:     boolean isWritable();
1:8716d11: 
1:8716d11:     /**
1:8716d11:      * Frees the resources held by the internal Clob representation.
1:8716d11:      * <p>
1:8716d11:      * After calling this method, all other operations on the Clob will be
1:8716d11:      * invalid and throw an exception.
1:8716d11:      *
1:8716d11:      * @throws IOException if freeing associated I/O resources fails
1:8716d11:      * @throws SQLException if freeing associated resources fails
1:8716d11:      */
1:8716d11:     void release() throws IOException, SQLException;
1:8716d11: 
1:8716d11:     /**
1:8716d11:      *
1:8716d11:      * @param newLength the length in characters to truncate to
1:8716d11:      *
1:8716d11:      * @throws IOException if accessing the underlying I/O resources fails
1:8716d11:      * @throws SQLException if accessing underlying resources fail
1:8716d11:      * @throws UnsupportedOperationException if the Clob representation is
1:8716d11:      *      read-only
1:8716d11:      */
1:8716d11:     void truncate(long newLength) throws IOException, SQLException;
1:8716d11: } // End interface InternalClob
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:dac5aed
/////////////////////////////////////////////////////////////////////////
1:      * Gets the number of characters in the Clob if it is already known.
1:      * <p>
1:      * This method will not do any work to obtain the length if it isn't
1:      * already known. Due to special handling of zero in the code, this method
1:      * will return {@code -1} if a length of zero is cached internally.
1:      * <p>
1:      * If a positive value is returned, it is expected to be equal to the
1:      * actual length of the Clob (i.e., no stale values must be returned).
1:      *
1:      * @return Number of characters in the Clob, or {@code -1} if the length is
1:      *      currently unknown (not cached).
1:      */
1:     long getCharLengthIfKnown();
1: 
1:     /**
commit:d9319b8
/////////////////////////////////////////////////////////////////////////
1:      * Returns the update count of the Clob.
1:      * <p>
1:      * The update count is increased each time a modification of the Clob
1:      * content is made.
1:      *
1:      * @return Update count, starting at zero.
1:      */
1:     long getUpdateCount();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Tells if the the Clob has been released.
1:      * <p>
1:      * Depending on the context, a Clob is released either because the internal
1:      * representation has been changed, or because the Clob itself has been
1:      * closed. The former can happen when a user modifies a stream that is
1:      * currently represented as a store stream. The latter can happen if
1:      * {@code Clob.free} has been called, or if Derby implicitly closes the
1:      * Clob.
1:      *
1:      * @return {@code true} if released, {@code false} if not.
1:      */
1:     boolean isReleased();
1: 
1:     /**
commit:ab2037f
/////////////////////////////////////////////////////////////////////////
1:      * Returns an internal reader for the Clob content, initialized at the
1:      * specified character position.
1:      * <p>
1:      * This method can return a shared reader object, avoiding instantiation and
1:      * repositioning costs for internal operations where the stream itself is
1:      * not published to the end-user. One such example is
1:      * {@code Clob.getSubString}.
1:      *
1:      * @param characterPosition character position. The first character is at
1:      *      position {@code 1}.
1:      * @return A {@code Reader} serving the content of the Clob.
1:      * @throws EOFException if the position is larger then the Clob
1:      * @throws IOException if accessing underlying I/O resources fail
1:      * @throws SQLException if accessing underlying resources fail
1:      */
1:     Reader getInternalReader(long characterPosition)
1:             throws IOException, SQLException;
1: 
1:     /**
commit:e8fd686
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * published to the end user (returned through the JDBC API). There are
1:      * three reasons for this:
1:      * <ul> <li>the stream may be closed by the end user when it is
1:      *          not supposed to</li>
1:      *      <li>operations on the stream might throw exceptions we don't want to
1:      *          present to the end user unwrapped</li>
1:      *      <li>the stream may contain a Derby specific end-of-stream marker
1:      *      </li>
1:      * </ul>
commit:1c4d62e
/////////////////////////////////////////////////////////////////////////
1:      * @return A {@code Reader} serving the content of the Clob.
commit:65e0386
/////////////////////////////////////////////////////////////////////////
commit:d211792
/////////////////////////////////////////////////////////////////////////
0:      * @throws EOFException if the position is bigger than the Clob
/////////////////////////////////////////////////////////////////////////
1:      * This stream may be an internal store stream, and should not be directly
0:      * published to the end user (returned through the JDBC API). There are two
0:      * motivations for this; the stream may be closed by the end user when it is
0:      * not supposed to, and operations on the stream might throw exceptions we
0:      * do not want to present to the end user unwrapped.
1:      * <p>
/////////////////////////////////////////////////////////////////////////
1:      * @throws EOFException if the position is larger then the Clob
commit:dec4025
/////////////////////////////////////////////////////////////////////////
1:      * The semantics of the writer is the same as for {@link #insertString}.
/////////////////////////////////////////////////////////////////////////
1:     Writer getWriter(long charPos) throws IOException, SQLException;
commit:8716d11
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.InternalClob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.io.Writer;
1: 
1: import java.sql.SQLException;
1: 
1: /**
1:  * A set of operations available on internal Clob content representations.
1:  * <p>
1:  * The methods defined by {@link java.sql.Clob} must be implemented on top of
1:  * this interface. In addition, there are some methods to aid internal tasks and
1:  * organization, like transferring one internal Clob representation to another
1:  * one.
1:  */
1: interface InternalClob {
1: 
1:     /**
0:      * Gets the number of bytes contained in the Clob.
1:      *
0:      * @return Number of bytes in the Clob.
1:      * @throws IOException if accessing underlying I/O resources fail
1:      * @throws SQLException if accessing underlying resources fail
1:      */
0:     long getByteLength() throws IOException, SQLException;
1: 
1:     /**
0:      * Obtains the byte position for the given character position.
1:      * <p>
0:      * The range of valid character positions is 
0:      *  <code>1 - Clob.getCharLength() +1</code>, inclusive. The upper bound is
0:      * used when appending to the Clob. Note that specifying a character
0:      * position that is more than one longer than the Clob raises an exception.
1:      *
0:      * @param charPos character position. The first position is <code>1</code>.
0:      * @return A 0-based byte position.
0:      * @throws IOException if accessing the underlying I/O resources fail
0:      * @throws SQLException if the specified character position is invalid
1:      */
0:     long getBytePosition(long charPos) throws IOException, SQLException;
1: 
1:     /**
1:      * Gets the number of characters in the Clob.
1:      *
1:      * @return Number of characters in the Clob.
1:      * @throws IOException if accessing underlying I/O resources fail
1:      * @throws SQLException if accessing underlying resources fail
1:      */
1:     long getCharLength() throws IOException, SQLException;
1: 
1:     /**
1:      * Returns a stream serving the raw bytes of the Clob.
1:      * <p>
1:      * Note that it is up to the caller of this method to handle the issue of
1:      * encoding. There is no predetermined encoding associated with this byte
1:      * stream, it is up to the Clob representation which one it uses.
1:      * <p>
1:      * The primary use of this method is to clone the Clob contents without
1:      * going via char (or String). Make sure the clone uses the same encoding
1:      * as the original Clob representation.
1:      *
1:      * @return A stream of bytes representing the content of the Clob,
1:      *      initialized at byte position 0.
1:      * @throws IOException if accessing underlying I/O resources fail
1:      * @throws SQLException if accessing underlying resources fail
1:      */
1:     InputStream getRawByteStream() throws IOException, SQLException;
1: 
1:     /**
1:      * Returns a reader for the Clob content, initialized at the specified
1:      * character position.
1:      *
1:      * @param characterPosition character position. The first character is at
1:      *      position <code>1</code>.
0:      * @return A <code>Reader</coder> serving the content of the Clob.
1:      * @throws IOException if accessing underlying I/O resources fail
1:      * @throws SQLException if accessing underlying resources fail
1:      */
1:     Reader getReader(long characterPosition) throws IOException, SQLException;
1: 
1:     /**
1:      * Returns a writer to write data into the Clob.
1:      * <p>
0:      * The semantics of the writer is the same as for {@link #setString}.
1:      *
1:      * @param charPos the starting character position. The first character is
1:      *      at position <code>1</code>.
1:      * @return A writer initialized at the specified character position.
1:      * @throws IOException if writing to the Clob fails
1:      * @throws SQLException if accessing underlying resources fail
1:      * @throws UnsupportedOperationException if the Clob representation is
1:      *      read-only
1:      */
0:     Writer getWriter(long pos) throws IOException, SQLException;
1: 
1:     /**
1:      * Inserts the given string at the specified character position.
1:      * <p>
1:      * The behavior of this method can be defined by the following examples on
1:      * the Clob <code>clob</code> with value <code>"ABCDEFG"</code>;
1:      * <ul> <li><code>clob.setString(2, "XX")</code> - "AXXDEFG"
1:      *      <li><code>clob.setString(1, "XX")</code> - "XXCDEFG"
1:      *      <li><code>clob.setString(8, "XX")</code> - "ABCDEFGXX"
1:      *      <li><code>clob.setString(7, "XX")</code> - "ABCDEFXX"
1:      *      <li><code>clob.setString(9, "XX")</code> - throws exception
1:      * </ul>
1:      *
1:      * @param str the string to insert
1:      * @param pos the character position the string will be inserted at. Must be
1:      *      between <code>1</code> and <code>clob.length() +1</code>, inclusive.
1:      * @return The number of characters inserted.
1:      * @throws IOException if writing to the I/O resources fail
1:      * @throws SQLException it the position is invalid
1:      * @throws IllegalArgumentException if the string is <code>null</code>
1:      * @throws UnsupportedOperationException if the Clob representation is
1:      *      read-only
1:      */
1:     long insertString(String str, long pos) throws IOException, SQLException;
1: 
1:     /**
1:      * Tells if the Clob representation is intended to be writable.
1:      * <p>
0:      * Note that even if this method returns <code>true</true>, it might not be
1:      * possible to write to the Clob. If this happens, it is because the
1:      * assoicated database is read-only, and the internal Clob representation is
1:      * unable to obtain the resources it require (could be an area on disk to
1:      * write temporary data).
1:      *
1:      * @return <code>true</code> if the Clob is intended to be writable, 
1:      *      <code>false</code> if modifying the Clob is definitely not possible.
1:      */
1:     boolean isWritable();
1: 
1:     /**
1:      * Frees the resources held by the internal Clob representation.
1:      * <p>
1:      * After calling this method, all other operations on the Clob will be
1:      * invalid and throw an exception.
1:      *
1:      * @throws IOException if freeing associated I/O resources fails
1:      * @throws SQLException if freeing associated resources fails
1:      */
1:     void release() throws IOException, SQLException;
1: 
1:     /**
1:      *
1:      * @param newLength the length in characters to truncate to
1:      *
1:      * @throws IOException if accessing the underlying I/O resources fails
1:      * @throws SQLException if accessing underlying resources fail
1:      * @throws UnsupportedOperationException if the Clob representation is
1:      *      read-only
1:      */
1:     void truncate(long newLength) throws IOException, SQLException;
1: } // End interface InternalClob
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1a3795e
/////////////////////////////////////////////////////////////////////////
1:      * Note that even if this method returns <code>true</code>, it might not be
============================================================================