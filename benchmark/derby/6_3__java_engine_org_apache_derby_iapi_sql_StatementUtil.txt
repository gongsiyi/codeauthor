1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.StatementUtil
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: import org.apache.derby.iapi.services.i18n.MessageService;
1:fe77ca5: import org.apache.derby.iapi.reference.SQLState;
1:a56ecfa: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:a56ecfa: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:a56ecfa: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * Utilities for dealing with statements.
1:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: public class StatementUtil
1:fe77ca5: {
1:fe77ca5: 	private StatementUtil(){};	// Do not instantiate
1:fe77ca5: 
1:fe77ca5: 	public static String typeName(int typeNumber)
1:fe77ca5: 	{
1:fe77ca5: 		String retval;
1:fe77ca5: 
1:fe77ca5: 		switch (typeNumber)
1:fe77ca5: 		{
1:fe77ca5: 		  case StatementType.INSERT:
1:fe77ca5: 		  case StatementType.BULK_INSERT_REPLACE:
1:fe77ca5: 		  case StatementType.UPDATE:
1:fe77ca5: 		  case StatementType.DELETE:
1:fe77ca5: 		  case StatementType.ENABLED:
1:fe77ca5: 		  case StatementType.DISABLED:
1:fe77ca5: 			retval = TypeNames[typeNumber];
1:fe77ca5: 			break;
1:fe77ca5: 
1:fe77ca5: 		  default:
1:62d63f6: 			retval = "UNKNOWN";
1:fe77ca5: 			break;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return retval;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	private static final String[] TypeNames = 
1:fe77ca5: 				{ 
1:fe77ca5: 					"",
1:fe77ca5: 					"INSERT",
1:fe77ca5: 					"INSERT",
1:fe77ca5: 					"UPDATE",
1:fe77ca5: 					"DELETE",
1:fe77ca5: 					"ENABLED",
1:fe77ca5: 					"DISABLED"
1:fe77ca5: 				};
1:a56ecfa: 
1:a56ecfa:     /**
1:a56ecfa:      * Get the descriptor for the named schema. If the schemaName
1:a56ecfa:      * parameter is NULL, it gets the descriptor for the current
1:a56ecfa:      * compilation schema.
1:a56ecfa:      * 
1:a56ecfa:      * @param schemaName The name of the schema we're interested in.
1:a56ecfa:      * If the name is NULL, get the descriptor for the current compilation schema.
1:a56ecfa:      * @param raiseError True to raise an error if the schema does not exist,
1:a56ecfa:      * false to return null if the schema does not exist.
1:a56ecfa:      * @return Valid SchemaDescriptor or null if raiseError is false and the
1:a56ecfa:      * schema does not exist. 
1:a56ecfa:      * @throws StandardException Schema does not exist and raiseError is true.
1:a56ecfa:      */
1:a56ecfa: 	public static SchemaDescriptor	getSchemaDescriptor
1:a56ecfa:         (
1:a56ecfa:          String schemaName,
1:a56ecfa:          boolean raiseError,
1:a56ecfa:          DataDictionary dataDictionary,
1:a56ecfa:          LanguageConnectionContext lcc,
1:a56ecfa:          CompilerContext cc
1:a56ecfa:          )
1:a56ecfa: 		throws StandardException
1:a56ecfa: 	{
1:a56ecfa: 		/*
1:a56ecfa: 		** Check for a compilation context.  Sometimes
1:a56ecfa: 		** there is a special compilation context in
1:a56ecfa: 	 	** place to recompile something that may have
1:a56ecfa: 		** been compiled against a different schema than
1:a56ecfa: 		** the current schema (e.g views):
1:a56ecfa: 	 	**
1:a56ecfa: 	 	** 	CREATE SCHEMA x
1:a56ecfa: 	 	** 	CREATE TABLE t
1:a56ecfa: 		** 	CREATE VIEW vt as SEELCT * FROM t
1:a56ecfa: 		** 	SET SCHEMA app
1:a56ecfa: 		** 	SELECT * FROM X.vt 
1:a56ecfa: 		**
1:a56ecfa: 		** In the above view vt must be compiled against
1:a56ecfa: 		** the X schema.
1:a56ecfa: 		*/
1:a56ecfa: 
1:a56ecfa: 
1:a56ecfa: 		SchemaDescriptor sd = null;
1:a56ecfa: 		boolean isCurrent = false;
1:a56ecfa: 		boolean isCompilation = false;
1:a56ecfa: 		if (schemaName == null) {
1:a56ecfa: 
1:a56ecfa: 			sd = cc.getCompilationSchema();
1:a56ecfa: 
1:a56ecfa: 			if (sd == null) {
1:a56ecfa: 				// Set the compilation schema to be the default,
1:a56ecfa: 				// notes that this query has schema dependencies.
1:a56ecfa: 				sd = lcc.getDefaultSchema();
1:a56ecfa: 
1:a56ecfa: 				isCurrent = true;
1:a56ecfa: 
1:a56ecfa: 				cc.setCompilationSchema(sd);
1:a56ecfa: 			}
1:a56ecfa: 			else
1:a56ecfa: 			{
1:a56ecfa: 				isCompilation = true;
1:a56ecfa: 			}
1:a56ecfa: 			schemaName = sd.getSchemaName();
1:a56ecfa: 		}
1:a56ecfa: 
1:a56ecfa: 		SchemaDescriptor sdCatalog = dataDictionary.getSchemaDescriptor(schemaName,
1:a56ecfa: 			lcc.getTransactionCompile(), raiseError);
1:a56ecfa: 
1:a56ecfa: 		if (isCurrent || isCompilation) {
1:a56ecfa: 			//if we are dealing with a SESSION schema and it is not physically
1:a56ecfa: 			//created yet, then it's uuid is going to be null. DERBY-1706
1:a56ecfa: 			//Without the getUUID null check below, following will give NPE
1:a56ecfa: 			//set schema session; -- session schema has not been created yet
1:a56ecfa: 			//create table t1(c11 int);
1:a56ecfa: 			if (sdCatalog != null && sdCatalog.getUUID() != null)
1:a56ecfa: 			{
1:a56ecfa: 				// different UUID for default (current) schema than in catalog,
1:a56ecfa: 				// so reset default schema.
1:a56ecfa: 				if (!sdCatalog.getUUID().equals(sd.getUUID()))
1:a56ecfa: 				{
1:a56ecfa: 					if (isCurrent) { lcc.setDefaultSchema(sdCatalog); }
1:a56ecfa: 					cc.setCompilationSchema(sdCatalog);
1:a56ecfa: 				}
1:a56ecfa: 			}
1:a56ecfa: 			else
1:a56ecfa: 			{
1:a56ecfa: 				// this schema does not exist, so ensure its UUID is null.
1:a56ecfa: 				sd.setUUID(null);
1:a56ecfa: 				sdCatalog = sd;
1:a56ecfa: 			}
1:a56ecfa: 		}
1:a56ecfa: 		return sdCatalog;
1:a56ecfa: 	}
1:a56ecfa: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a56ecfa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Get the descriptor for the named schema. If the schemaName
1:      * parameter is NULL, it gets the descriptor for the current
1:      * compilation schema.
1:      * 
1:      * @param schemaName The name of the schema we're interested in.
1:      * If the name is NULL, get the descriptor for the current compilation schema.
1:      * @param raiseError True to raise an error if the schema does not exist,
1:      * false to return null if the schema does not exist.
1:      * @return Valid SchemaDescriptor or null if raiseError is false and the
1:      * schema does not exist. 
1:      * @throws StandardException Schema does not exist and raiseError is true.
1:      */
1: 	public static SchemaDescriptor	getSchemaDescriptor
1:         (
1:          String schemaName,
1:          boolean raiseError,
1:          DataDictionary dataDictionary,
1:          LanguageConnectionContext lcc,
1:          CompilerContext cc
1:          )
1: 		throws StandardException
1: 	{
1: 		/*
1: 		** Check for a compilation context.  Sometimes
1: 		** there is a special compilation context in
1: 	 	** place to recompile something that may have
1: 		** been compiled against a different schema than
1: 		** the current schema (e.g views):
1: 	 	**
1: 	 	** 	CREATE SCHEMA x
1: 	 	** 	CREATE TABLE t
1: 		** 	CREATE VIEW vt as SEELCT * FROM t
1: 		** 	SET SCHEMA app
1: 		** 	SELECT * FROM X.vt 
1: 		**
1: 		** In the above view vt must be compiled against
1: 		** the X schema.
1: 		*/
1: 
1: 
1: 		SchemaDescriptor sd = null;
1: 		boolean isCurrent = false;
1: 		boolean isCompilation = false;
1: 		if (schemaName == null) {
1: 
1: 			sd = cc.getCompilationSchema();
1: 
1: 			if (sd == null) {
1: 				// Set the compilation schema to be the default,
1: 				// notes that this query has schema dependencies.
1: 				sd = lcc.getDefaultSchema();
1: 
1: 				isCurrent = true;
1: 
1: 				cc.setCompilationSchema(sd);
1: 			}
1: 			else
1: 			{
1: 				isCompilation = true;
1: 			}
1: 			schemaName = sd.getSchemaName();
1: 		}
1: 
1: 		SchemaDescriptor sdCatalog = dataDictionary.getSchemaDescriptor(schemaName,
1: 			lcc.getTransactionCompile(), raiseError);
1: 
1: 		if (isCurrent || isCompilation) {
1: 			//if we are dealing with a SESSION schema and it is not physically
1: 			//created yet, then it's uuid is going to be null. DERBY-1706
1: 			//Without the getUUID null check below, following will give NPE
1: 			//set schema session; -- session schema has not been created yet
1: 			//create table t1(c11 int);
1: 			if (sdCatalog != null && sdCatalog.getUUID() != null)
1: 			{
1: 				// different UUID for default (current) schema than in catalog,
1: 				// so reset default schema.
1: 				if (!sdCatalog.getUUID().equals(sd.getUUID()))
1: 				{
1: 					if (isCurrent) { lcc.setDefaultSchema(sdCatalog); }
1: 					cc.setCompilationSchema(sdCatalog);
1: 				}
1: 			}
1: 			else
1: 			{
1: 				// this schema does not exist, so ensure its UUID is null.
1: 				sd.setUUID(null);
1: 				sdCatalog = sd;
1: 			}
1: 		}
1: 		return sdCatalog;
1: 	}
1: 
commit:62d63f6
/////////////////////////////////////////////////////////////////////////
1: 			retval = "UNKNOWN";
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.StatementUtil
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * Utilities for dealing with statements.
1:  *
0:  * @author jeff
1:  */
1: public class StatementUtil
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	private StatementUtil(){};	// Do not instantiate
1: 
1: 	public static String typeName(int typeNumber)
1: 	{
1: 		String retval;
1: 
1: 		switch (typeNumber)
1: 		{
1: 		  case StatementType.INSERT:
1: 		  case StatementType.BULK_INSERT_REPLACE:
1: 		  case StatementType.UPDATE:
1: 		  case StatementType.DELETE:
1: 		  case StatementType.ENABLED:
1: 		  case StatementType.DISABLED:
1: 			retval = TypeNames[typeNumber];
1: 			break;
1: 
1: 		  default:
0: 			retval = MessageService.getTextMessage(SQLState.LANG_UNKNOWN);
1: 			break;
1: 		}
1: 
1: 		return retval;
1: 	}
1: 
1: 	private static final String[] TypeNames = 
1: 				{ 
1: 					"",
1: 					"INSERT",
1: 					"INSERT",
1: 					"UPDATE",
1: 					"DELETE",
1: 					"ENABLED",
1: 					"DISABLED"
1: 				};
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  * Utilities for dealing with statements.
0:  *
0:  * @author jeff
0:  */
0: public class StatementUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private StatementUtil(){};	// Do not instantiate
0: 
0: 	public static String typeName(int typeNumber)
0: 	{
0: 		String retval;
0: 
0: 		switch (typeNumber)
0: 		{
0: 		  case StatementType.INSERT:
0: 		  case StatementType.BULK_INSERT_REPLACE:
0: 		  case StatementType.UPDATE:
0: 		  case StatementType.DELETE:
0: 		  case StatementType.ENABLED:
0: 		  case StatementType.DISABLED:
0: 			retval = TypeNames[typeNumber];
0: 			break;
0: 
0: 		  default:
0: 			retval = MessageService.getTextMessage(SQLState.LANG_UNKNOWN);
0: 			break;
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	private static final String[] TypeNames = 
0: 				{ 
0: 					"",
0: 					"INSERT",
0: 					"INSERT",
0: 					"UPDATE",
0: 					"DELETE",
0: 					"ENABLED",
0: 					"DISABLED"
0: 				};
0: }
============================================================================