1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.tools.ij
1:985fc85: 
1:3dc2ce4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3dc2ce4:    contributor license agreements.  See the NOTICE file distributed with
1:3dc2ce4:    this work for additional information regarding copyright ownership.
1:3dc2ce4:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3dc2ce4:    (the "License"); you may not use this file except in compliance with
1:3dc2ce4:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
7:fe77ca5: 
3:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.tools;
1:fe77ca5: 
1:a5a98ce: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
1:a5a98ce: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:a5a98ce: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.impl.tools.ij.Main;
1:2b47710: import org.apache.derby.impl.tools.ij.utilMain;
1:fe77ca5: 
1:fe77ca5: import java.io.IOException;
1:a5a98ce: import java.io.InputStream;
1:95011a0: import java.io.OutputStream;
1:a5a98ce: import java.io.PrintStream;
1:a5a98ce: import java.io.UnsupportedEncodingException;
1:a5a98ce: import java.sql.Connection;
1:a5a98ce: import java.util.Properties;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5: 	
1:3abc7d4: 	ij is Derby's interactive JDBC scripting tool.
1:3abc7d4: 	It is a simple utility for running scripts against a Derby database.
1:fe77ca5: 	You can also use it interactively to run ad hoc queries.
1:fe77ca5: 	ij provides several commands for ease in accessing a variety of JDBC features.
1:fe77ca5: 	<P>
1:fe77ca5: 
1:fe77ca5: 	To run from the command line enter the following:
1:fe77ca5: 	<p>
1:fe77ca5: 	java [options] org.apache.derby.tools.ij [arguments]
1:fe77ca5: 	<P>
1:fe77ca5: 	ij is can also be used with any database server that supports a JDBC driver.
1:fe77ca5: */
1:fe77ca5: public class ij {
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:   	@exception IOException thrown if cannot access input or output files.
1:fe77ca5:    */
1:fe77ca5:   static public void main(String[] args) throws IOException {
1:c06280c:       Main.main(args);
6:fe77ca5:   }
1:a5a98ce:   
1:a5a98ce:   /**
1:a5a98ce:    * Run a SQL script from an InputStream and write
1:a5a98ce:    * the resulting output to the provided PrintStream.
1:95011a0:    * SQL commands are separated by a semi-colon ';' character.
1:a5a98ce:    * 
1:a5a98ce:    * @param conn Connection to be used as the script's default connection. 
1:a5a98ce:    * @param sqlIn InputStream for the script.
1:a5a98ce:    * @param inputEncoding Encoding of the script.
1:95011a0:    * @param sqlOut OutputStream for the script's output
1:a5a98ce:    * @param outputEncoding Output encoding to use.
1:a5a98ce:    * @return Number of SQLExceptions thrown during the execution, -1 if not known.
1:a5a98ce:    * @throws UnsupportedEncodingException
1:a5a98ce:    */
1:a5a98ce:   public static int runScript(
1:a5a98ce: 		  Connection conn,
1:a5a98ce: 		  InputStream sqlIn,
1:a5a98ce: 		  String inputEncoding,
1:95011a0: 		  OutputStream sqlOut,
1:a5a98ce: 		  String outputEncoding)
1:a5a98ce: 		  throws UnsupportedEncodingException
1:a5a98ce:   {
1:a39c84c: 	  return ij.runScript(conn, sqlIn, inputEncoding, sqlOut, outputEncoding,false);
1:a39c84c:   }
1:a39c84c: 
1:a39c84c:     /**
1:a39c84c:     * Run a SQL script from an InputStream and write
1:a39c84c:     * the resulting output to the provided PrintStream.
1:a39c84c:     * SQL commands are separated by a semi-colon ';' character.
1:a39c84c:     *
1:a39c84c:     * @param conn Connection to be used as the script's default connection.
1:a39c84c:     * @param sqlIn InputStream for the script.
1:a39c84c:     * @param inputEncoding Encoding of the script.
1:a39c84c:     * @param sqlOut OutputStream for the script's output
1:a39c84c:     * @param outputEncoding Output encoding to use.
1:a39c84c:     * @param loadSystemProperties Whether to use the system properties.
1:a39c84c:     * @return Number of SQLExceptions thrown during the execution, -1 if not known.
1:a39c84c:     * @throws UnsupportedEncodingException
1:a39c84c:     */
1:a39c84c:     public static int runScript(
1:a39c84c: 		  Connection conn,
1:a39c84c: 		  InputStream sqlIn,
1:a39c84c: 		  String inputEncoding,
1:a39c84c: 		  OutputStream sqlOut,
1:a39c84c: 		  String outputEncoding,
1:a39c84c:           boolean loadSystemProperties)
1:a39c84c: 		  throws UnsupportedEncodingException
1:a39c84c:     {
1:a39c84c:         LocalizedOutput lo =
1:a39c84c:           outputEncoding == null ?
1:a39c84c:                   LocalizedResource.getInstance().
1:a39c84c:                     getNewOutput(sqlOut)
1:a39c84c:                  :
1:a39c84c:                   LocalizedResource.getInstance().
1:a5a98ce:                     getNewEncodedOutput(sqlOut, outputEncoding);
1:a5a98ce: 
1:a39c84c:         Main ijE = new Main(false);
1:a5a98ce: 
1:a39c84c:         LocalizedInput li = LocalizedResource.getInstance().
1:a39c84c:                 getNewEncodedInput(sqlIn, inputEncoding);
1:a39c84c: 
1:a39c84c:         utilMain um = ijE.getutilMain(1, lo, loadSystemProperties);
1:a39c84c: 
1:a39c84c:         return um.goScript(conn, li);
1:a39c84c:     }
1:2b47710: 
1:fe77ca5:   private ij() { // no instances allowed
1:a5a98ce:   }
1:a5a98ce:   
1:fe77ca5:   public static String getArg(String param, String[] args)
1:a5a98ce:   {
1:fe77ca5: 	  return org.apache.derby.impl.tools.ij.util.getArg(param, args);
1:a5a98ce:   }
1:a5a98ce: 
1:fe77ca5:   public static void getPropertyArg(String[] args) throws IOException
1:a5a98ce:   {
1:fe77ca5: 	  org.apache.derby.impl.tools.ij.util.getPropertyArg(args);
1:a5a98ce:   }
1:a5a98ce: 
1:fe77ca5:   public static java.sql.Connection startJBMS()
1:4469400:     throws java.sql.SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException,
1:4469400:            NoSuchMethodException, java.lang.reflect.InvocationTargetException
5:fe77ca5:   {			
1:fe77ca5: 		return org.apache.derby.impl.tools.ij.util.startJBMS();
1:fe77ca5:   }
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:     throws java.sql.SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException,
1:            NoSuchMethodException, java.lang.reflect.InvocationTargetException
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a39c84c
/////////////////////////////////////////////////////////////////////////
1: 	  return ij.runScript(conn, sqlIn, inputEncoding, sqlOut, outputEncoding,false);
1:   }
1: 
1:     /**
1:     * Run a SQL script from an InputStream and write
1:     * the resulting output to the provided PrintStream.
1:     * SQL commands are separated by a semi-colon ';' character.
1:     *
1:     * @param conn Connection to be used as the script's default connection.
1:     * @param sqlIn InputStream for the script.
1:     * @param inputEncoding Encoding of the script.
1:     * @param sqlOut OutputStream for the script's output
1:     * @param outputEncoding Output encoding to use.
1:     * @param loadSystemProperties Whether to use the system properties.
1:     * @return Number of SQLExceptions thrown during the execution, -1 if not known.
1:     * @throws UnsupportedEncodingException
1:     */
1:     public static int runScript(
1: 		  Connection conn,
1: 		  InputStream sqlIn,
1: 		  String inputEncoding,
1: 		  OutputStream sqlOut,
1: 		  String outputEncoding,
1:           boolean loadSystemProperties)
1: 		  throws UnsupportedEncodingException
1:     {
1:         LocalizedOutput lo =
1:           outputEncoding == null ?
1:                   LocalizedResource.getInstance().
1:                     getNewOutput(sqlOut)
1:                  :
1:                   LocalizedResource.getInstance().
1:         Main ijE = new Main(false);
1:         LocalizedInput li = LocalizedResource.getInstance().
1:                 getNewEncodedInput(sqlIn, inputEncoding);
1: 
1:         utilMain um = ijE.getutilMain(1, lo, loadSystemProperties);
1: 
1:         return um.goScript(conn, li);
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c06280c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Main.main(args);
/////////////////////////////////////////////////////////////////////////
0: 	  Main ijE = new Main(false);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:95011a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
1:    * SQL commands are separated by a semi-colon ';' character.
1:    * @param sqlOut OutputStream for the script's output
/////////////////////////////////////////////////////////////////////////
1: 		  OutputStream sqlOut,
/////////////////////////////////////////////////////////////////////////
0: 	  return um.goScript(conn, li);
commit:edc200c
/////////////////////////////////////////////////////////////////////////
0: 		  // temp - allow ij to continue to work under jdk131
0: 		  // will resolve as part of DEBRY-1609
0: 		  // jdk13 gets error loading Main14 due to the
0: 		  // class now being built with the jdk14 target flag.
0: 		  // ijE = new org.apache.derby.impl.tools.ij.Main14(false);
0: 		  ijE = new Main(false);
commit:2b47710
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.tools.ij.utilMain;
/////////////////////////////////////////////////////////////////////////
0: 		  ijE = new Main(false);
0: 		  ijE = new org.apache.derby.impl.tools.ij.Main14(false);
0: 	  utilMain um = ijE.getutilMain(1, lo);
1: 
0: 	  um.goScript(conn, li);
commit:a5a98ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import java.io.InputStream;
1: import java.io.PrintStream;
1: import java.io.UnsupportedEncodingException;
1: import java.sql.Connection;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Run a SQL script from an InputStream and write
1:    * the resulting output to the provided PrintStream.
1:    * 
1:    * @param conn Connection to be used as the script's default connection. 
1:    * @param sqlIn InputStream for the script.
1:    * @param inputEncoding Encoding of the script.
0:    * @param sqlOut PrintStream for the script's output
1:    * @param outputEncoding Output encoding to use.
1:    * @return Number of SQLExceptions thrown during the execution, -1 if not known.
1:    * @throws UnsupportedEncodingException
1:    */
1:   public static int runScript(
1: 		  Connection conn,
1: 		  InputStream sqlIn,
1: 		  String inputEncoding,
0: 		  PrintStream sqlOut,
1: 		  String outputEncoding)
1: 		  throws UnsupportedEncodingException
1:   {
0: 	  LocalizedOutput lo = 
0: 		  outputEncoding == null ?
0: 				  LocalizedResource.getInstance().
0: 		            getNewOutput(sqlOut)
0: 	             :  
0: 		          LocalizedResource.getInstance().
1:                     getNewEncodedOutput(sqlOut, outputEncoding);
1: 
0: 	  Main ijE;
0: 	  if (JVMInfo.JDK_ID == JVMInfo.J2SE_13)
1: 	  {
0: 		  ijE = new Main(lo);
1: 	  }
0: 	  else
1: 	  {
0: 		  ijE = new org.apache.derby.impl.tools.ij.Main14(lo);
1: 	  }	  
1: 	  
0: 	  LocalizedInput li = LocalizedResource.getInstance().
0: 	            getNewEncodedInput(sqlIn, inputEncoding);
1: 	  
1: 	  
0: 	  ijE.goScript(conn, li);
1: 	  
0: 	  return -1;
1:   }
commit:6ae3022
/////////////////////////////////////////////////////////////////////////
0: 	  if (JVMInfo.JDK_ID == JVMInfo.J2SE_13)
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.tools.ij
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.tools
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.tools;
1: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
1: 
1: import org.apache.derby.impl.tools.ij.Main;
1: 
1: import java.io.IOException;
1: 
1: /**
1: 	
0: 	ij is Cloudscape's interactive JDBC scripting tool.
0: 	It is a simple utility for running scripts against a Cloudscape database.
1: 	You can also use it interactively to run ad hoc queries.
1: 	ij provides several commands for ease in accessing a variety of JDBC features.
1: 	<P>
1: 
1: 	To run from the command line enter the following:
1: 	<p>
1: 	java [options] org.apache.derby.tools.ij [arguments]
1: 	<P>
1: 	ij is can also be used with any database server that supports a JDBC driver.
1: */
1: public class ij {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:   /**
1:   	@exception IOException thrown if cannot access input or output files.
1:    */
1:   static public void main(String[] args) throws IOException {
1: 
0: 	  /* We decide which verion of ij (2.0 or 4.0) to
0: 	   * load based on the same criteria that the JDBC driver
0: 	   * uses.
1: 	   */
0: 	  if (JVMInfo.JDK_ID == 2)
1: 	  {
0: 		  Main.main(args);
1: 	  }
0: 	  else
1: 	  {
0: 		  org.apache.derby.impl.tools.ij.Main14.main(args);
1: 	  }
1:   }
1: 
1:   private ij() { // no instances allowed
1:   }
1:   
1:   public static String getArg(String param, String[] args)
1:   {
1: 	  return org.apache.derby.impl.tools.ij.util.getArg(param, args);
1:   }
1: 
1:   public static void getPropertyArg(String[] args) throws IOException
1:   {
1: 	  org.apache.derby.impl.tools.ij.util.getPropertyArg(args);
1:   }
1: 
1:   public static java.sql.Connection startJBMS()
0: 	  throws java.sql.SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException
1:   {			
1: 		return org.apache.derby.impl.tools.ij.util.startJBMS();
1:   }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3dc2ce4
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1: 	ij is Derby's interactive JDBC scripting tool.
1: 	It is a simple utility for running scripts against a Derby database.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.tools
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.tools;
0: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
0: 
0: import org.apache.derby.impl.tools.ij.Main;
0: 
0: import java.io.IOException;
0: 
0: /**
0: 	
0: 	ij is Cloudscape's interactive JDBC scripting tool.
0: 	It is a simple utility for running scripts against a Cloudscape database.
0: 	You can also use it interactively to run ad hoc queries.
0: 	ij provides several commands for ease in accessing a variety of JDBC features.
0: 	<P>
0: 
0: 	To run from the command line enter the following:
0: 	<p>
0: 	java [options] org.apache.derby.tools.ij [arguments]
0: 	<P>
0: 	ij is can also be used with any database server that supports a JDBC driver.
0: */
0: public class ij {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:   /**
0:   	@exception IOException thrown if cannot access input or output files.
0:    */
0:   static public void main(String[] args) throws IOException {
0: 
0: 	  /* We decide which verion of ij (2.0 or 4.0) to
0: 	   * load based on the same criteria that the JDBC driver
0: 	   * uses.
0: 	   */
0: 	  if (JVMInfo.JDK_ID == 2)
0: 	  {
0: 		  Main.main(args);
0: 	  }
0: 	  else
0: 	  {
0: 		  org.apache.derby.impl.tools.ij.Main14.main(args);
0: 	  }
0:   }
0: 
0:   private ij() { // no instances allowed
0:   }
0:   
0:   public static String getArg(String param, String[] args)
0:   {
0: 	  return org.apache.derby.impl.tools.ij.util.getArg(param, args);
0:   }
0: 
0:   public static void getPropertyArg(String[] args) throws IOException
0:   {
0: 	  org.apache.derby.impl.tools.ij.util.getPropertyArg(args);
0:   }
0: 
0:   public static java.sql.Connection startJBMS()
0: 	  throws java.sql.SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException
0:   {			
0: 		return org.apache.derby.impl.tools.ij.util.startJBMS();
0:   }
0: }
============================================================================