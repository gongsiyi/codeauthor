1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DefaultNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.catalog.types.DefaultInfoImpl;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:eac0369: import org.apache.derby.iapi.sql.compile.Parser;
1:70a4f2d: import org.apache.derby.iapi.sql.compile.Visitable;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * DefaultNode represents a column/parameter default.
1:eac0369:  */
1:eac0369: public  class DefaultNode extends ValueNode
5:eac0369: {
1:eac0369: 	private String		columnName;
1:eac0369: 	private String		defaultText;
1:eac0369: 	private ValueNode	defaultTree;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a generated by default as identity column.
1:3bb140c:      *
1:3bb140c:      * @param cm            The context manager
1:3bb140c:      */
1:3bb140c:     DefaultNode(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * Constructor for a column/parameter default.
2:eac0369: 	 *
1:3bb140c:      * @param defaultTree   Query tree for default
1:eac0369: 	 * @param defaultText	The text of the default.
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 */
1:3bb140c:     DefaultNode(ValueNode defaultTree,
1:3bb140c:                 String defaultText,
1:3bb140c:                 ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.defaultTree = defaultTree;
1:3bb140c:         this.defaultText = defaultText;
3:eac0369: 	}
1:eac0369: 
1:c9a1206: 	/**
1:3bb140c:      * Constructor for insert/update
1:3bb140c:      * @param columnName The column name for which a default is to be applied
1:eac0369: 	 */
1:3bb140c:     DefaultNode(String columnName, ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.columnName = columnName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  * Get the text of the default.
1:eac0369: 	  */
1:eac0369: 	public	String	getDefaultText()
1:eac0369: 	{
1:eac0369: 		return	defaultText;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the query tree for the default.
1:eac0369: 	 *
1:eac0369: 	 * @return The query tree for the default.
1:eac0369: 	 */
1:eac0369: 	ValueNode getDefaultTree()
1:eac0369: 	{
1:eac0369: 		return defaultTree;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:c9a1206: 			return "columnName: " + columnName + "\n" +
1:c9a1206: 				"defaultText: " + defaultText + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:c9a1206: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:c9a1206: 	 * how tree printing is supposed to work.
1:c9a1206: 	 *
1:c9a1206: 	 * @param depth		The depth of this node in the tree
1:c9a1206: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:c9a1206: 	{
1:c9a1206: 		if (SanityManager.DEBUG)
1:c9a1206: 		{
1:c9a1206: 			super.printSubNodes(depth);
1:c9a1206: 
1:c9a1206: 			if (defaultTree != null) {
1:c9a1206: 				printLabel(depth, "defaultTree:");
1:c9a1206: 				defaultTree.treePrint(depth + 1);
1:c9a1206: 			}
1:c9a1206: 		}
1:c9a1206: 	}
1:c9a1206: 
1:c9a1206: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this expression.  This means binding the sub-expressions,
1:eac0369: 	 * as well as figuring out what the return type is for this expression.
1:eac0369: 	 * In this case, there are no sub-expressions, and the return type
1:eac0369: 	 * is already known, so this is just a stub.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList		The FROM list for the query this
1:eac0369: 	 *				expression is in, for binding columns.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:71c8e86:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ColumnDescriptor	cd;
1:eac0369: 		TableDescriptor		td;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(fromList.size() != 0,
1:eac0369: 				"fromList expected to be non-empty");
1:eac0369: 			if (! (fromList.elementAt(0) instanceof FromBaseTable))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"fromList.elementAt(0) expected to be instanceof FromBaseTable, not " +
1:eac0369: 					fromList.elementAt(0).getClass().getName());
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		}
1:eac0369: 		// Get the TableDescriptor for the target table
1:eac0369: 		td = ((FromBaseTable) fromList.elementAt(0)).getTableDescriptor();
1:eac0369: 
1:eac0369: 		// Get the ColumnDescriptor for the column
1:eac0369: 		cd = td.getColumnDescriptor(columnName);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(cd != null,
1:eac0369: 				"cd expected to be non-null");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* If we have the default text, then parse and bind it and
1:eac0369: 		 * return the tree.
1:eac0369: 		 */
1:eac0369: 		DefaultInfoImpl defaultInfo = (DefaultInfoImpl) cd.getDefaultInfo();
1:eac0369: 		if (defaultInfo != null)
1:eac0369: 		{
1:3bb140c:             String      defaultTxt = defaultInfo.getDefaultText();
1:3bb140c:             ValueNode   defaultTre = parseDefault(
1:3bb140c:                 defaultTxt,
1:3bb140c:                 getLanguageConnectionContext(),
1:3bb140c:                 getCompilerContext());
1:eac0369: 
1:eac0369: 			/* Query is dependent on the DefaultDescriptor */
1:eac0369: 			DefaultDescriptor defaultDescriptor = cd.getDefaultDescriptor(
1:eac0369: 													getDataDictionary());
1:eac0369: 			getCompilerContext().createDependency(defaultDescriptor);
1:eac0369: 
1:3bb140c:             return defaultTre.bindExpression(
1:eac0369: 									fromList, 
1:eac0369: 									subqueryList,
1:09c2697:                                     aggregates);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			// Default is null
1:3bb140c:             return new UntypedNullConstantNode(getContextManager());
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Parse a default and turn it into a query tree.
1:eac0369: 	  *
1:eac0369: 	  *	@param	defaultText			Text of Default.
1:eac0369: 	  * @param	lcc					LanguageConnectionContext
1:eac0369: 	  * @param	cc					CompilerContext
1:eac0369: 	  *
1:eac0369: 	  * @return	The parsed default as a query tree.
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on failure
1:eac0369: 	  */
1:eac0369: 	public	static ValueNode	parseDefault
1:eac0369: 	(
1:eac0369: 		String						defaultText,
1:eac0369: 		LanguageConnectionContext	lcc,
1:eac0369: 		CompilerContext				cc
1:eac0369:     )
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		Parser						p;
1:eac0369: 		ValueNode					defaultTree;
1:eac0369: 
1:eac0369: 		/* Get a Statement to pass to the parser */
1:eac0369: 
1:eac0369: 		/* We're all set up to parse. We have to build a compilable SQL statement
1:eac0369: 		 * before we can parse -  So, we goober up a VALUES defaultText.
1:eac0369: 		 */
1:eac0369: 		String values = "VALUES " + defaultText;
1:eac0369: 		
1:eac0369: 		/*
1:eac0369: 		** Get a new compiler context, so the parsing of the select statement
1:eac0369: 		** doesn't mess up anything in the current context (it could clobber
1:eac0369: 		** the ParameterValueSet, for example).
1:eac0369: 		*/
1:eac0369: 		CompilerContext newCC = lcc.pushCompilerContext();
1:eac0369: 
1:eac0369: 		p = newCC.getParser();
1:eac0369: 
1:eac0369: 		
1:eac0369: 		/* Finally, we can call the parser */
1:eac0369: 		// Since this is always nested inside another SQL statement, so topLevel flag
1:eac0369: 		// should be false
1:70a4f2d: 		Visitable qt = p.parseStatement(values);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (! (qt instanceof CursorNode))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"qt expected to be instanceof CursorNode, not " +
1:eac0369: 					qt.getClass().getName());
1:eac0369: 			}
1:eac0369: 			CursorNode cn = (CursorNode) qt;
1:eac0369: 			if (! (cn.getResultSetNode() instanceof RowResultSetNode))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"cn.getResultSetNode() expected to be instanceof RowResultSetNode, not " +
1:eac0369: 					cn.getResultSetNode().getClass().getName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:e1f49ca:         defaultTree = ((CursorNode) qt).getResultSetNode().getResultColumns().
1:e1f49ca:                 elementAt(0).getExpression();
1:eac0369: 
1:eac0369: 		lcc.popCompilerContext(newCC);
1:eac0369: 
1:eac0369: 		return	defaultTree;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 				"generateExpression not expected to be called");
1:eac0369: 		}
1:eac0369: 	}
1:01217c2: 
1:01217c2:     /**
1:01217c2:      * @inheritDoc
1:01217c2:      */
1:2706d1f:     boolean isEquivalent(ValueNode other)
1:01217c2:     {
1:01217c2: 		return false;
1:01217c2:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode other)
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:         defaultTree = ((CursorNode) qt).getResultSetNode().getResultColumns().
1:                 elementAt(0).getExpression();
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.types.DefaultInfoImpl;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for a generated by default as identity column.
1:      *
1:      * @param cm            The context manager
1:      */
1:     DefaultNode(ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.DEFAULT_NODE);
1:     }
1: 
1:     /**
1:      * Constructor for a column/parameter default.
1:      * @param defaultTree   Query tree for default
1:      * @param cm            The context manager
1:     DefaultNode(ValueNode defaultTree,
1:                 String defaultText,
1:                 ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.DEFAULT_NODE);
1:         this.defaultTree = defaultTree;
1:         this.defaultText = defaultText;
1:      * Constructor for insert/update
1:      * @param columnName The column name for which a default is to be applied
1:     DefaultNode(String columnName, ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.DEFAULT_NODE);
1:         this.columnName = columnName;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             String      defaultTxt = defaultInfo.getDefaultText();
1:             ValueNode   defaultTre = parseDefault(
1:                 defaultTxt,
1:                 getLanguageConnectionContext(),
1:                 getCompilerContext());
1:             return defaultTre.bindExpression(
/////////////////////////////////////////////////////////////////////////
1:             return new UntypedNullConstantNode(getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 			return "columnName: " + columnName + "\n" +
1: 				"defaultText: " + defaultText + "\n" +
/////////////////////////////////////////////////////////////////////////
1:     /**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 */
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
1: 			if (defaultTree != null) {
1: 				printLabel(depth, "defaultTree:");
1: 				defaultTree.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
0:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List aggregates)
/////////////////////////////////////////////////////////////////////////
1:                                     aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			List aggregateVector)
commit:70a4f2d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitable;
/////////////////////////////////////////////////////////////////////////
1: 		Visitable qt = p.parseStatement(values);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8a93440
/////////////////////////////////////////////////////////////////////////
0: 		StatementNode qt = p.parseStatement(values);
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @inheritDoc
1:      */
0: 	protected boolean isEquivalent(ValueNode other)
1:     {
1: 		return false;
1:     }
commit:867a530
/////////////////////////////////////////////////////////////////////////
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DefaultNode
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.compile.Parser;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.sql.depend.ProviderList;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.catalog.types.DefaultInfoImpl;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * DefaultNode represents a column/parameter default.
1:  */
1: public  class DefaultNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private ProviderList apl;
1: 	private String		columnName;
1: 	private String		defaultText;
1: 	private ValueNode	defaultTree;
1: 
1: 	/**
0: 	 * Initializer for a column/parameter default.
1: 	 *
0: 	 * @param defaultTree			Query tree for default
1: 	 * @param defaultText	The text of the default.
1: 	 */
0: 	public void init(
0: 					Object defaultTree,
0: 					Object defaultText)
1: 	{
0: 		this.defaultTree = (ValueNode) defaultTree;
0: 		this.defaultText = (String) defaultText;
1: 	}
1: 
1: 	/**
0: 	 * Initializer for insert/update
1: 	 *
1: 	 */
0: 	public void init(Object columnName)
1: 	{
0: 		this.columnName = (String) columnName;
1: 	}
1: 
1: 	/**
1: 	  * Get the text of the default.
1: 	  */
1: 	public	String	getDefaultText()
1: 	{
1: 		return	defaultText;
1: 	}
1: 
1: 	/**
1: 	 * Get the query tree for the default.
1: 	 *
1: 	 * @return The query tree for the default.
1: 	 */
1: 	ValueNode getDefaultTree()
1: 	{
1: 		return defaultTree;
1: 	}
1: 
0: 	void setAuxiliaryProviderList(ProviderList apl)
1: 	{
0: 		this.apl = apl;
1: 	}
1: 
0: 	public ProviderList getAuxiliaryProviderList()
1: 	{
0: 		return apl;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return "defaultTree: " + defaultTree + "\n" +
0: 				   "defaultText: " + defaultText + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 * In this case, there are no sub-expressions, and the return type
1: 	 * is already known, so this is just a stub.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 			Vector	aggregateVector)
1: 		throws StandardException
1: 	{
1: 		ColumnDescriptor	cd;
1: 		TableDescriptor		td;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(fromList.size() != 0,
1: 				"fromList expected to be non-empty");
1: 			if (! (fromList.elementAt(0) instanceof FromBaseTable))
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"fromList.elementAt(0) expected to be instanceof FromBaseTable, not " +
1: 					fromList.elementAt(0).getClass().getName());
1: 			}
1: 
1: 		}
1: 		// Get the TableDescriptor for the target table
1: 		td = ((FromBaseTable) fromList.elementAt(0)).getTableDescriptor();
1: 
1: 		// Get the ColumnDescriptor for the column
1: 		cd = td.getColumnDescriptor(columnName);
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(cd != null,
1: 				"cd expected to be non-null");
1: 		}
1: 
1: 		/* If we have the default text, then parse and bind it and
1: 		 * return the tree.
1: 		 */
1: 		DefaultInfoImpl defaultInfo = (DefaultInfoImpl) cd.getDefaultInfo();
1: 		if (defaultInfo != null)
1: 		{
0: 			String		defaultText = defaultInfo.getDefaultText();
0: 			ValueNode	defaultTree = parseDefault(defaultText, getLanguageConnectionContext(),
0: 												   getCompilerContext());
1: 
1: 			/* Query is dependent on the DefaultDescriptor */
1: 			DefaultDescriptor defaultDescriptor = cd.getDefaultDescriptor(
1: 													getDataDictionary());
1: 			getCompilerContext().createDependency(defaultDescriptor);
1: 
0: 			return defaultTree.bindExpression(
1: 									fromList, 
1: 									subqueryList,
0: 									aggregateVector);
1: 		}
1: 		else
1: 		{
1: 			// Default is null
0: 			ValueNode nullNode = (ValueNode) getNodeFactory().getNode(
0: 										C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
0: 										getContextManager());
0: 			return nullNode;
1: 		}
1: 	}
1: 
1: 	/**
1: 	  *	Parse a default and turn it into a query tree.
1: 	  *
1: 	  *	@param	defaultText			Text of Default.
1: 	  * @param	lcc					LanguageConnectionContext
1: 	  * @param	cc					CompilerContext
1: 	  *
1: 	  * @return	The parsed default as a query tree.
1: 	  *
1: 	  * @exception StandardException		Thrown on failure
1: 	  */
1: 	public	static ValueNode	parseDefault
1: 	(
1: 		String						defaultText,
1: 		LanguageConnectionContext	lcc,
1: 		CompilerContext				cc
1:     )
1: 		throws StandardException
1: 	{
1: 		Parser						p;
1: 		ValueNode					defaultTree;
1: 
1: 		/* Get a Statement to pass to the parser */
1: 
1: 		/* We're all set up to parse. We have to build a compilable SQL statement
1: 		 * before we can parse -  So, we goober up a VALUES defaultText.
1: 		 */
1: 		String values = "VALUES " + defaultText;
1: 		
1: 		/*
1: 		** Get a new compiler context, so the parsing of the select statement
1: 		** doesn't mess up anything in the current context (it could clobber
1: 		** the ParameterValueSet, for example).
1: 		*/
1: 		CompilerContext newCC = lcc.pushCompilerContext();
1: 
1: 		p = newCC.getParser();
1: 
1: 		
1: 		/* Finally, we can call the parser */
1: 		// Since this is always nested inside another SQL statement, so topLevel flag
1: 		// should be false
0: 		QueryTreeNode qt = p.parseStatement(values);
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (! (qt instanceof CursorNode))
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"qt expected to be instanceof CursorNode, not " +
1: 					qt.getClass().getName());
1: 			}
1: 			CursorNode cn = (CursorNode) qt;
1: 			if (! (cn.getResultSetNode() instanceof RowResultSetNode))
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"cn.getResultSetNode() expected to be instanceof RowResultSetNode, not " +
1: 					cn.getResultSetNode().getClass().getName());
1: 			}
1: 		}
1: 
0: 		defaultTree = ((ResultColumn) 
0: 							((CursorNode) qt).getResultSetNode().getResultColumns().elementAt(0)).
0: 									getExpression();
1: 
1: 		lcc.popCompilerContext(newCC);
1: 
1: 		return	defaultTree;
1: 	}
1: 
1: 	/**
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb) 
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.THROWASSERT(
1: 				"generateExpression not expected to be called");
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.compile.Parser;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.ProviderList;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.catalog.types.DefaultInfoImpl;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * DefaultNode represents a column/parameter default.
0:  */
0: public  class DefaultNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private ProviderList apl;
0: 	private String		columnName;
0: 	private String		defaultText;
0: 	private ValueNode	defaultTree;
0: 
0: 	/**
0: 	 * Initializer for a column/parameter default.
0: 	 *
0: 	 * @param defaultTree			Query tree for default
0: 	 * @param defaultText	The text of the default.
0: 	 */
0: 	public void init(
0: 					Object defaultTree,
0: 					Object defaultText)
0: 	{
0: 		this.defaultTree = (ValueNode) defaultTree;
0: 		this.defaultText = (String) defaultText;
0: 	}
0: 
0: 	/**
0: 	 * Initializer for insert/update
0: 	 *
0: 	 */
0: 	public void init(Object columnName)
0: 	{
0: 		this.columnName = (String) columnName;
0: 	}
0: 
0: 	/**
0: 	  * Get the text of the default.
0: 	  */
0: 	public	String	getDefaultText()
0: 	{
0: 		return	defaultText;
0: 	}
0: 
0: 	/**
0: 	 * Get the query tree for the default.
0: 	 *
0: 	 * @return The query tree for the default.
0: 	 */
0: 	ValueNode getDefaultTree()
0: 	{
0: 		return defaultTree;
0: 	}
0: 
0: 	void setAuxiliaryProviderList(ProviderList apl)
0: 	{
0: 		this.apl = apl;
0: 	}
0: 
0: 	public ProviderList getAuxiliaryProviderList()
0: 	{
0: 		return apl;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "defaultTree: " + defaultTree + "\n" +
0: 				   "defaultText: " + defaultText + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 * In this case, there are no sub-expressions, and the return type
0: 	 * is already known, so this is just a stub.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 			Vector	aggregateVector)
0: 		throws StandardException
0: 	{
0: 		ColumnDescriptor	cd;
0: 		TableDescriptor		td;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(fromList.size() != 0,
0: 				"fromList expected to be non-empty");
0: 			if (! (fromList.elementAt(0) instanceof FromBaseTable))
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"fromList.elementAt(0) expected to be instanceof FromBaseTable, not " +
0: 					fromList.elementAt(0).getClass().getName());
0: 			}
0: 
0: 		}
0: 		// Get the TableDescriptor for the target table
0: 		td = ((FromBaseTable) fromList.elementAt(0)).getTableDescriptor();
0: 
0: 		// Get the ColumnDescriptor for the column
0: 		cd = td.getColumnDescriptor(columnName);
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(cd != null,
0: 				"cd expected to be non-null");
0: 		}
0: 
0: 		/* If we have the default text, then parse and bind it and
0: 		 * return the tree.
0: 		 */
0: 		DefaultInfoImpl defaultInfo = (DefaultInfoImpl) cd.getDefaultInfo();
0: 		if (defaultInfo != null)
0: 		{
0: 			String		defaultText = defaultInfo.getDefaultText();
0: 			ValueNode	defaultTree = parseDefault(defaultText, getLanguageConnectionContext(),
0: 												   getCompilerContext());
0: 
0: 			/* Query is dependent on the DefaultDescriptor */
0: 			DefaultDescriptor defaultDescriptor = cd.getDefaultDescriptor(
0: 													getDataDictionary());
0: 			getCompilerContext().createDependency(defaultDescriptor);
0: 
0: 			return defaultTree.bindExpression(
0: 									fromList, 
0: 									subqueryList,
0: 									aggregateVector);
0: 		}
0: 		else
0: 		{
0: 			// Default is null
0: 			ValueNode nullNode = (ValueNode) getNodeFactory().getNode(
0: 										C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
0: 										getContextManager());
0: 			return nullNode;
0: 		}
0: 	}
0: 
0: 	/**
0: 	  *	Parse a default and turn it into a query tree.
0: 	  *
0: 	  *	@param	defaultText			Text of Default.
0: 	  * @param	lcc					LanguageConnectionContext
0: 	  * @param	cc					CompilerContext
0: 	  *
0: 	  * @return	The parsed default as a query tree.
0: 	  *
0: 	  * @exception StandardException		Thrown on failure
0: 	  */
0: 	public	static ValueNode	parseDefault
0: 	(
0: 		String						defaultText,
0: 		LanguageConnectionContext	lcc,
0: 		CompilerContext				cc
0:     )
0: 		throws StandardException
0: 	{
0: 		Parser						p;
0: 		ValueNode					defaultTree;
0: 
0: 		/* Get a Statement to pass to the parser */
0: 
0: 		/* We're all set up to parse. We have to build a compilable SQL statement
0: 		 * before we can parse -  So, we goober up a VALUES defaultText.
0: 		 */
0: 		String values = "VALUES " + defaultText;
0: 		
0: 		/*
0: 		** Get a new compiler context, so the parsing of the select statement
0: 		** doesn't mess up anything in the current context (it could clobber
0: 		** the ParameterValueSet, for example).
0: 		*/
0: 		CompilerContext newCC = lcc.pushCompilerContext();
0: 
0: 		p = newCC.getParser();
0: 
0: 		
0: 		/* Finally, we can call the parser */
0: 		// Since this is always nested inside another SQL statement, so topLevel flag
0: 		// should be false
0: 		QueryTreeNode qt = p.parseStatement(values);
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (! (qt instanceof CursorNode))
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"qt expected to be instanceof CursorNode, not " +
0: 					qt.getClass().getName());
0: 			}
0: 			CursorNode cn = (CursorNode) qt;
0: 			if (! (cn.getResultSetNode() instanceof RowResultSetNode))
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"cn.getResultSetNode() expected to be instanceof RowResultSetNode, not " +
0: 					cn.getResultSetNode().getClass().getName());
0: 			}
0: 		}
0: 
0: 		defaultTree = ((ResultColumn) 
0: 							((CursorNode) qt).getResultSetNode().getResultColumns().elementAt(0)).
0: 									getExpression();
0: 
0: 		lcc.popCompilerContext(newCC);
0: 
0: 		return	defaultTree;
0: 	}
0: 
0: 	/**
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb) 
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.THROWASSERT(
0: 				"generateExpression not expected to be called");
0: 		}
0: 	}
0: }
============================================================================