1:db8dae7: /*
1:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlave
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.IOException;
1:db8dae7: import java.sql.Connection;
1:db8dae7: import java.sql.DriverManager;
1:db8dae7: import java.sql.PreparedStatement;
1:db8dae7: import java.sql.ResultSet;
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import java.sql.Statement;
1:db8dae7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:db8dae7: 
1:db8dae7: public class ShutdownSlave extends BaseJDBCTestCase
1:db8dae7: {
1:db8dae7:     private static ReplicationRun repRun = new ReplicationRun("ShutdownSlave");
1:db8dae7:     
1:db8dae7:     public ShutdownSlave(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /* */
1:db8dae7:     static String jvmVersion = null;
1:db8dae7:     static String derbyVersion = null;
1:db8dae7:     static String slaveServerHost = null;
1:db8dae7:     static int slaveServerPort = -1;
1:db8dae7:     static String slaveDatabasePath = null;
1:db8dae7:     static String masterServerHost = null;
1:db8dae7:     static int masterServerPort = -1;
1:db8dae7:     static String masterDatabasePath = null;
1:db8dae7:     /* */
1:db8dae7:     
1:db8dae7:     static void setEnv()
1:db8dae7:     throws Exception
1:db8dae7:     {
1:db8dae7:         repRun.initEnvironment();
1:db8dae7:         masterServerHost = ReplicationRun.masterServerHost;
1:db8dae7:         masterServerPort = ReplicationRun.masterServerPort;
1:db8dae7:         slaveServerHost = ReplicationRun.slaveServerHost;
1:db8dae7:         slaveServerPort = ReplicationRun.slaveServerPort;
1:db8dae7:         jvmVersion =      ReplicationRun.masterJvmVersion;
1:db8dae7:         derbyVersion =    ReplicationRun.derbyMasterVersion;
1:db8dae7:         masterDatabasePath = ReplicationRun.masterDatabasePath;
1:db8dae7:         slaveDatabasePath = ReplicationRun.slaveDatabasePath;
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /*
1:db8dae7:     public static Test suite()
1:db8dae7:     throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("**** ShutdownSlave.suite()");
1:db8dae7:         System.out.println("'ShutdownSlave' can not be run outside the 'ReplicationRun' framework.");
1:db8dae7:         
1:db8dae7:         setEnv();
1:db8dae7:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ShutdownSlave");
1:db8dae7:         suite.addTest(ShutdownSlave.suite(masterServerHost, masterServerPort));
1:db8dae7:         return (Test)suite;
1:db8dae7:     }
1:db8dae7:      */
1:db8dae7:     /**
1:db8dae7:      * Adds this class to the *existing server* suite.
1:db8dae7:      */
1:db8dae7:     /*
1:db8dae7:     public static Test suite(String serverHost, int serverPort)
1:db8dae7:     throws IOException
1:db8dae7:     {
1:db8dae7:         System.out.println("*** ShutdownSlave.suite("+serverHost+","+serverPort+")");
1:db8dae7:         
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(ShutdownSlave.class,false,serverHost,serverPort);
1:db8dae7:         System.out.println("*** Done TestConfiguration.existingServerSuite(ShutdownSlave.class,false,"
1:db8dae7:                 +serverHost+":"+serverPort+")");
1:db8dae7:         return t;
1:db8dae7:     }
1:db8dae7:      */
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * Test shut down slave server during replication.
1:db8dae7:      *
1:db8dae7:      * @throws SQLException, IOException, InterruptedException
1:db8dae7:      */
1:db8dae7:     /*
1:db8dae7:     public void testShutdownSlave()
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7:         String slaveServerURL = "jdbc:derby:"
1:db8dae7:                 +"//"+slaveServerHost+":"+slaveServerPort+"/";
1:db8dae7:         String slaveDbURL = slaveServerURL
1:db8dae7:                 +ReplicationRun.slaveDatabasePath
1:db8dae7:                 +"/"+ReplicationRun.slaveDbSubPath
1:db8dae7:                 +"/"+ReplicationRun.replicatedDb;
1:db8dae7:         
1:db8dae7:         // shutdown(null, false, true); // -,-,true: Use OS kill on server!
1:db8dae7:         // shutdown(null, false, false); // null,-,-: use networkservercontrol!
1:db8dae7:         shutdown(slaveServerURL, false, false); // serverURL,false,-: shutdown server!
1:db8dae7:         // shutdown(slaveDbURL, true, false); // dbURL,true,-: shutdown database!
1:db8dae7:     }
1:db8dae7:      */
1:db8dae7:     
1:db8dae7:     void shutdown(String url, boolean dbOnly, boolean killServer) // FIXME! Factor out this as common with ShutdownMaster!
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7:         
1:db8dae7:         System.out.println("**** ShutdownSlave.shutdown() "
1:db8dae7:                 + getTestConfiguration().getJDBCClient().getJDBCDriverName()
1:db8dae7:                 + " " + url + " dbOnly: " + dbOnly + " killServer: " + killServer);
1:db8dae7:         
1:db8dae7:         Connection conn = getConnection(); // To master
1:db8dae7:         Statement s = conn.createStatement();
1:db8dae7:         s.executeUpdate("create table t (i integer primary key, vc varchar(20))");
1:db8dae7:         
1:db8dae7:         PreparedStatement pSt = prepareStatement("insert into t values (?,?)");
1:db8dae7:         
1:db8dae7:         for (int i=0;i<1000;i++)
1:db8dae7:         {
1:db8dae7:             pSt.setInt(1, i);
1:db8dae7:             pSt.setString(2, "i"+i);
1:db8dae7:             pSt.execute();
1:db8dae7:             System.out.println("i: "+i);
1:db8dae7:             if ( i == 500 )
1:db8dae7:             {
1:db8dae7:                 // conn.commit(); // Force transferring replication data?
1:db8dae7:                 if ( killServer )
1:db8dae7:                 {
1:db8dae7:                     repRun.killMaster(slaveServerHost, slaveServerPort);
1:db8dae7:                     // expectNoConnection = true;
1:db8dae7:                 }
1:db8dae7:                 else if (url == null )
1:db8dae7:                 {
1:db8dae7:                     repRun.stopServer(jvmVersion, derbyVersion, // Shuts down the server
1:db8dae7:                             slaveServerHost, slaveServerPort);
1:db8dae7:                 }
1:db8dae7:                 else
1:db8dae7:                 { // url specifies server or database shutdown.
1:db8dae7:                     System.out.println("**** DriverManager.getConnection(\"" + url+";shutdown=true\");");
1:db8dae7:                     try
1:db8dae7:                     {
1:db8dae7:                         DriverManager.getConnection(url+";shutdown=true"); // PoC hangs on dburl.
1:db8dae7:                         // SQLCODE: -1, SQLSTATE: XJ015
1:db8dae7:                         // Will not be allowed in final code: when privileges are implemented!
1:db8dae7:                     }
1:db8dae7:                     catch( SQLException se)
1:db8dae7:                     {
1:db8dae7:                         int errCode = se.getErrorCode();
1:db8dae7:                         String msg = se.getMessage();
1:db8dae7:                         String state = se.getSQLState();
1:db8dae7:                         String expectedState = (dbOnly)? "08004": "XJ015";
1:b54db0f:                         int expectedCode = dbOnly ? 45000 : 50000;
1:db8dae7:                         System.out.println("shutdown Got SQLException: " + errCode + " " + state + " " + msg);
1:b54db0f:                         if ( (errCode == expectedCode)
1:db8dae7:                         && (state.equalsIgnoreCase(expectedState) ) )
1:db8dae7:                         {
1:db8dae7:                             System.out.println("As expected.");
1:db8dae7:                             // Continue insert on master. return; 
1:db8dae7:                             // shutdown db will be refused in this state!
1:db8dae7:                         }
1:db8dae7:                         else
1:db8dae7:                         {
1:db8dae7:                             throw se;
1:db8dae7:                         }
1:db8dae7:                     }
1:db8dae7:                 }
1:db8dae7:             }
1:db8dae7:         }
1:db8dae7:         ResultSet rs = s.executeQuery("select count(*) from t");
1:db8dae7:         rs.next();
1:db8dae7:         int count = rs.getInt(1);
1:db8dae7:         System.out.println("count: "+count);
1:db8dae7:         // s.executeUpdate("drop table t");
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ShutdownSlave");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b54db0f
/////////////////////////////////////////////////////////////////////////
1:                         int expectedCode = dbOnly ? 45000 : 50000;
1:                         if ( (errCode == expectedCode)
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlave
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class ShutdownSlave extends BaseJDBCTestCase
1: {
1:     private static ReplicationRun repRun = new ReplicationRun("ShutdownSlave");
1:     
1:     public ShutdownSlave(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     /* */
1:     static String jvmVersion = null;
1:     static String derbyVersion = null;
1:     static String slaveServerHost = null;
1:     static int slaveServerPort = -1;
1:     static String slaveDatabasePath = null;
1:     static String masterServerHost = null;
1:     static int masterServerPort = -1;
1:     static String masterDatabasePath = null;
1:     /* */
1:     
1:     static void setEnv()
1:     throws Exception
1:     {
1:         repRun.initEnvironment();
1:         masterServerHost = ReplicationRun.masterServerHost;
1:         masterServerPort = ReplicationRun.masterServerPort;
1:         slaveServerHost = ReplicationRun.slaveServerHost;
1:         slaveServerPort = ReplicationRun.slaveServerPort;
1:         jvmVersion =      ReplicationRun.masterJvmVersion;
1:         derbyVersion =    ReplicationRun.derbyMasterVersion;
1:         masterDatabasePath = ReplicationRun.masterDatabasePath;
1:         slaveDatabasePath = ReplicationRun.slaveDatabasePath;
1:     }
1:     
1:     /*
1:     public static Test suite()
1:     throws Exception
1:     {
1:         System.out.println("**** ShutdownSlave.suite()");
1:         System.out.println("'ShutdownSlave' can not be run outside the 'ReplicationRun' framework.");
1:         
1:         setEnv();
1:         
0:         TestSuite suite = new TestSuite("ShutdownSlave");
1:         suite.addTest(ShutdownSlave.suite(masterServerHost, masterServerPort));
1:         return (Test)suite;
1:     }
1:      */
1:     /**
1:      * Adds this class to the *existing server* suite.
1:      */
1:     /*
1:     public static Test suite(String serverHost, int serverPort)
1:     throws IOException
1:     {
1:         System.out.println("*** ShutdownSlave.suite("+serverHost+","+serverPort+")");
1:         
1:         Test t = TestConfiguration.existingServerSuite(ShutdownSlave.class,false,serverHost,serverPort);
1:         System.out.println("*** Done TestConfiguration.existingServerSuite(ShutdownSlave.class,false,"
1:                 +serverHost+":"+serverPort+")");
1:         return t;
1:     }
1:      */
1:     
1:     /**
1:      * Test shut down slave server during replication.
1:      *
1:      * @throws SQLException, IOException, InterruptedException
1:      */
1:     /*
1:     public void testShutdownSlave()
1:     throws SQLException, IOException, InterruptedException
1:     {
1:         String slaveServerURL = "jdbc:derby:"
1:                 +"//"+slaveServerHost+":"+slaveServerPort+"/";
1:         String slaveDbURL = slaveServerURL
1:                 +ReplicationRun.slaveDatabasePath
1:                 +"/"+ReplicationRun.slaveDbSubPath
1:                 +"/"+ReplicationRun.replicatedDb;
1:         
1:         // shutdown(null, false, true); // -,-,true: Use OS kill on server!
1:         // shutdown(null, false, false); // null,-,-: use networkservercontrol!
1:         shutdown(slaveServerURL, false, false); // serverURL,false,-: shutdown server!
1:         // shutdown(slaveDbURL, true, false); // dbURL,true,-: shutdown database!
1:     }
1:      */
1:     
1:     void shutdown(String url, boolean dbOnly, boolean killServer) // FIXME! Factor out this as common with ShutdownMaster!
1:     throws SQLException, IOException, InterruptedException
1:     {
1:         
1:         System.out.println("**** ShutdownSlave.shutdown() "
1:                 + getTestConfiguration().getJDBCClient().getJDBCDriverName()
1:                 + " " + url + " dbOnly: " + dbOnly + " killServer: " + killServer);
1:         
1:         Connection conn = getConnection(); // To master
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("create table t (i integer primary key, vc varchar(20))");
1:         
1:         PreparedStatement pSt = prepareStatement("insert into t values (?,?)");
1:         
1:         for (int i=0;i<1000;i++)
1:         {
1:             pSt.setInt(1, i);
1:             pSt.setString(2, "i"+i);
1:             pSt.execute();
1:             System.out.println("i: "+i);
1:             if ( i == 500 )
1:             {
1:                 // conn.commit(); // Force transferring replication data?
1:                 if ( killServer )
1:                 {
1:                     repRun.killMaster(slaveServerHost, slaveServerPort);
1:                     // expectNoConnection = true;
1:                 }
1:                 else if (url == null )
1:                 {
1:                     repRun.stopServer(jvmVersion, derbyVersion, // Shuts down the server
1:                             slaveServerHost, slaveServerPort);
1:                 }
1:                 else
1:                 { // url specifies server or database shutdown.
1:                     System.out.println("**** DriverManager.getConnection(\"" + url+";shutdown=true\");");
1:                     try
1:                     {
1:                         DriverManager.getConnection(url+";shutdown=true"); // PoC hangs on dburl.
1:                         // SQLCODE: -1, SQLSTATE: XJ015
1:                         // Will not be allowed in final code: when privileges are implemented!
1:                     }
1:                     catch( SQLException se)
1:                     {
1:                         int errCode = se.getErrorCode();
1:                         String msg = se.getMessage();
1:                         String state = se.getSQLState();
1:                         String expectedState = (dbOnly)? "08004": "XJ015";
1:                         System.out.println("shutdown Got SQLException: " + errCode + " " + state + " " + msg);
0:                         if ( (errCode == -1)
1:                         && (state.equalsIgnoreCase(expectedState) ) )
1:                         {
1:                             System.out.println("As expected.");
1:                             // Continue insert on master. return; 
1:                             // shutdown db will be refused in this state!
1:                         }
1:                         else
1:                         {
1:                             throw se;
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         ResultSet rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int count = rs.getInt(1);
1:         System.out.println("count: "+count);
1:         // s.executeUpdate("drop table t");
1:     }
1: }
============================================================================