1:33776ff: /*
16:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetPackageReply
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:33776ff: import org.apache.derby.client.am.DisconnectException;
1:33776ff: 
1:0326967: class NetPackageReply extends NetConnectionReply {
1:70f7692:     NetPackageReply(NetAgent netAgent, int bufferSize) {
1:70f7692:         super(netAgent, bufferSize);
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     NetSqlca parseSqlErrorCondition() throws DisconnectException {
1:70f7692:         parseSQLERRRM();
1:70f7692:         parseTypdefsOrMgrlvlovrs();
1:70f7692:         NetSqlca netSqlca = parseSQLCARD(null);
1:70f7692:         return netSqlca;
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     // Also called by NetStatementReply
1:70f7692:     void parseDTAMCHRM() throws DisconnectException {
1:70f7692:         boolean svrcodReceived = false;
1:70f7692:         int svrcod = CodePoint.SVRCOD_INFO;
1:70f7692:         boolean rdbnamReceived = false;
2:70f7692:         String rdbnam = null;
1:33776ff: 
1:70f7692:         parseLengthAndMatchCodePoint(CodePoint.DTAMCHRM);
1:70f7692:         pushLengthOnCollectionStack();
1:70f7692:         int peekCP = peekCodePoint();
1:33776ff: 
1:70f7692:         while (peekCP != Reply.END_OF_COLLECTION) {
1:33776ff: 
1:70f7692:             boolean foundInPass = false;
1:33776ff: 
1:70f7692:             if (peekCP == CodePoint.SVRCOD) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:70f7692:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:33776ff: 
1:70f7692:             if (peekCP == CodePoint.RDBNAM) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
2:70f7692:                 rdbnam = parseRDBNAM(true);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:33776ff: 
1:70f7692:             if (!foundInPass) {
1:70f7692:                 doPrmnsprmSemantics(peekCP);
1:70f7692:             }
1:70f7692: 
1:70f7692:         }
1:70f7692:         popCollectionStack();
1:70f7692:         checkRequiredObjects(svrcodReceived, rdbnamReceived);
1:70f7692: 
1:70f7692:         netAgent_.setSvrcod(svrcod);
1:70f7692:         doDtamchrmSemantics();
1:70f7692:     }
1:70f7692: 
1:70f7692:     // RDB Update Reply Message indicates that a DDM command resulted
1:70f7692:     // in an update at the target relational database.  If a command
1:70f7692:     // generated multiple reply messages including an RDBUPDRM, then
1:70f7692:     // the RDBUPDRM must be the first reply message for the command.
1:70f7692:     // For each target server, the RDBUPDRM  must be returned the first
1:70f7692:     // time an update is made to the target RDB within a unit of work.
1:70f7692:     // The target server may optionally return the RDBUPDRM after subsequent
1:70f7692:     // updates within the UOW.  If multiple target RDBs are involved with
1:70f7692:     // the current UOW and updates are made with any of them, then the RDBUPDRM
1:70f7692:     // must be returned in response to the first update at each of them.
1:70f7692:     protected void parseRDBUPDRM() throws DisconnectException {
1:70f7692:         boolean svrcodReceived = false;
1:70f7692:         int svrcod = CodePoint.SVRCOD_INFO;
1:70f7692:         boolean rdbnamReceived = false;
1:70f7692: 
1:70f7692:         parseLengthAndMatchCodePoint(CodePoint.RDBUPDRM);
1:70f7692:         pushLengthOnCollectionStack();
1:70f7692: 
1:70f7692:         int peekCP = peekCodePoint();
1:70f7692: 
1:70f7692:         while (peekCP != Reply.END_OF_COLLECTION) {
1:70f7692: 
1:70f7692:             boolean foundInPass = false;
1:70f7692: 
1:70f7692:             if (peekCP == CodePoint.SVRCOD) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:70f7692:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_INFO, CodePoint.SVRCOD_INFO);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:70f7692: 
1:70f7692:             if (peekCP == CodePoint.RDBNAM) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
1:b565f41:                 parseRDBNAM(true);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:70f7692: 
1:70f7692:             if (!foundInPass) {
1:70f7692:                 doPrmnsprmSemantics(peekCP);
1:70f7692:             }
1:70f7692: 
1:70f7692:         }
1:70f7692:         popCollectionStack();
1:70f7692:         checkRequiredObjects(svrcodReceived, rdbnamReceived);
1:70f7692: 
1:70f7692:         // call an event to indicate the server has been updated
1:70f7692:         netAgent_.setSvrcod(svrcod);
1:70f7692: 
16:33776ff:     }
1:33776ff: 
1:70f7692:     // SQL Error Condition Reply Message indicates that an SQL error
1:70f7692:     // has occurred.  It may be sent even though no reply message
1:70f7692:     // precedes the SQLCARD object that is the normal
1:70f7692:     // response to a command when an exception occurs.
1:70f7692:     // The SQLERRM is also used when a BNDSQLSTT command is terminated
1:70f7692:     // by an INTRRDBRQS command.
1:70f7692:     // This reply message must precede an SQLCARD object.
1:70f7692:     // The SQLSTATE is returned in the SQLCARD.
1:70f7692:     //
1:70f7692:     // Returned from Server:
1:70f7692:     // SVRCOD - required  (8 - ERROR)
1:70f7692:     // RDBNAM - optional
1:70f7692:     //
1:70f7692:     // Also called by NetResultSetReply and NetStatementReply
1:0326967:     private void parseSQLERRRM() throws DisconnectException {
1:70f7692:         boolean svrcodReceived = false;
1:70f7692:         int svrcod = CodePoint.SVRCOD_INFO;
1:70f7692:         boolean rdbnamReceived = false;
1:70f7692:         String rdbnam = null;
1:33776ff: 
1:70f7692:         parseLengthAndMatchCodePoint(CodePoint.SQLERRRM);
1:70f7692:         pushLengthOnCollectionStack();
1:70f7692:         int peekCP = peekCodePoint();
1:33776ff: 
1:70f7692:         while (peekCP != Reply.END_OF_COLLECTION) {
1:33776ff: 
1:70f7692:             boolean foundInPass = false;
1:33776ff: 
1:70f7692:             if (peekCP == CodePoint.SVRCOD) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:70f7692:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:33776ff: 
1:70f7692:             if (peekCP == CodePoint.RDBNAM) {
1:70f7692:                 foundInPass = true;
1:70f7692:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
1:70f7692:                 rdbnam = parseRDBNAM(true);
1:70f7692:                 peekCP = peekCodePoint();
1:70f7692:             }
1:33776ff: 
1:70f7692:             if (!foundInPass) {
1:70f7692:                 doPrmnsprmSemantics(peekCP);
1:70f7692:             }
1:33776ff: 
1:70f7692:         }
1:70f7692:         popCollectionStack();
1:70f7692:         checkRequiredObjects(svrcodReceived);
1:33776ff: 
1:70f7692:         // move into a method
1:70f7692:         netAgent_.setSvrcod(svrcod);
1:70f7692:     }
1:33776ff: 
1:70f7692:     //--------------------- parse DDM Reply Data--------------------------------------
1:33776ff: 
1:70f7692:     //------------------------parse DDM Scalars-----------------------------
1:33776ff: 
1:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 parseRDBNAM(true);
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetPackageReply extends NetConnectionReply {
/////////////////////////////////////////////////////////////////////////
1:     private void parseSQLERRRM() throws DisconnectException {
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:29fe9b7
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f271471
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ClientMessageId;
0: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0:                 new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),
0:                 "parsePKGNAMCT"));
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class NetPackageReply extends NetConnectionReply {
1:     NetPackageReply(NetAgent netAgent, int bufferSize) {
1:         super(netAgent, bufferSize);
1:     }
1:     NetSqlca parseSqlErrorCondition() throws DisconnectException {
1:         parseSQLERRRM();
1:         parseTypdefsOrMgrlvlovrs();
1:         NetSqlca netSqlca = parseSQLCARD(null);
1:         return netSqlca;
1:     }
1:     // Also called by NetStatementReply
1:     void parseDTAMCHRM() throws DisconnectException {
1:         boolean svrcodReceived = false;
1:         int svrcod = CodePoint.SVRCOD_INFO;
1:         boolean rdbnamReceived = false;
1:         String rdbnam = null;
1:         parseLengthAndMatchCodePoint(CodePoint.DTAMCHRM);
1:         pushLengthOnCollectionStack();
1:         int peekCP = peekCodePoint();
1:         while (peekCP != Reply.END_OF_COLLECTION) {
1:             boolean foundInPass = false;
1:             if (peekCP == CodePoint.SVRCOD) {
1:                 foundInPass = true;
1:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
1:                 peekCP = peekCodePoint();
1:             }
1:             if (peekCP == CodePoint.RDBNAM) {
1:                 foundInPass = true;
1:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
1:                 rdbnam = parseRDBNAM(true);
1:                 peekCP = peekCodePoint();
1:             }
1:             if (!foundInPass) {
1:                 doPrmnsprmSemantics(peekCP);
1:             }
1: 
1:         }
1:         popCollectionStack();
1:         checkRequiredObjects(svrcodReceived, rdbnamReceived);
1: 
1:         netAgent_.setSvrcod(svrcod);
1:         doDtamchrmSemantics();
1:     }
1: 
1:     // RDB Update Reply Message indicates that a DDM command resulted
1:     // in an update at the target relational database.  If a command
1:     // generated multiple reply messages including an RDBUPDRM, then
1:     // the RDBUPDRM must be the first reply message for the command.
1:     // For each target server, the RDBUPDRM  must be returned the first
1:     // time an update is made to the target RDB within a unit of work.
1:     // The target server may optionally return the RDBUPDRM after subsequent
1:     // updates within the UOW.  If multiple target RDBs are involved with
1:     // the current UOW and updates are made with any of them, then the RDBUPDRM
1:     // must be returned in response to the first update at each of them.
1:     protected void parseRDBUPDRM() throws DisconnectException {
1:         boolean svrcodReceived = false;
1:         int svrcod = CodePoint.SVRCOD_INFO;
1:         boolean rdbnamReceived = false;
1:         String rdbnam = null;
1: 
1:         parseLengthAndMatchCodePoint(CodePoint.RDBUPDRM);
1:         pushLengthOnCollectionStack();
1: 
0:         // in XA Global transaction we need to know if we have a read-only
0:         //  transaction, if we get a RDBUPDRM this is NOT a read-only transaction
0:         //  currently only XAConnections care about read-only transactions, if
0:         //  non-XA wants this information they will need to initialize the flag
0:         //  at start of UOW
0:         netAgent_.netConnection_.setReadOnlyTransactionFlag(false);
1: 
1:         int peekCP = peekCodePoint();
1: 
1:         while (peekCP != Reply.END_OF_COLLECTION) {
1: 
1:             boolean foundInPass = false;
1: 
1:             if (peekCP == CodePoint.SVRCOD) {
1:                 foundInPass = true;
1:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_INFO, CodePoint.SVRCOD_INFO);
1:                 peekCP = peekCodePoint();
1:             }
1: 
1:             if (peekCP == CodePoint.RDBNAM) {
1:                 foundInPass = true;
1:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
1:                 rdbnam = parseRDBNAM(true);
1:                 peekCP = peekCodePoint();
1:             }
1: 
1:             if (!foundInPass) {
1:                 doPrmnsprmSemantics(peekCP);
1:             }
1: 
1:         }
1:         popCollectionStack();
1:         checkRequiredObjects(svrcodReceived, rdbnamReceived);
1: 
1:         // call an event to indicate the server has been updated
1:         netAgent_.setSvrcod(svrcod);
1:     // SQL Error Condition Reply Message indicates that an SQL error
1:     // has occurred.  It may be sent even though no reply message
1:     // precedes the SQLCARD object that is the normal
1:     // response to a command when an exception occurs.
1:     // The SQLERRM is also used when a BNDSQLSTT command is terminated
1:     // by an INTRRDBRQS command.
1:     // This reply message must precede an SQLCARD object.
1:     // The SQLSTATE is returned in the SQLCARD.
1:     //
1:     // Returned from Server:
1:     // SVRCOD - required  (8 - ERROR)
1:     // RDBNAM - optional
1:     //
1:     // Also called by NetResultSetReply and NetStatementReply
0:     void parseSQLERRRM() throws DisconnectException {
1:         boolean svrcodReceived = false;
1:         int svrcod = CodePoint.SVRCOD_INFO;
1:         boolean rdbnamReceived = false;
1:         String rdbnam = null;
1:         parseLengthAndMatchCodePoint(CodePoint.SQLERRRM);
1:         pushLengthOnCollectionStack();
1:         int peekCP = peekCodePoint();
1:         while (peekCP != Reply.END_OF_COLLECTION) {
1:             boolean foundInPass = false;
1:             if (peekCP == CodePoint.SVRCOD) {
1:                 foundInPass = true;
1:                 svrcodReceived = checkAndGetReceivedFlag(svrcodReceived);
1:                 svrcod = parseSVRCOD(CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
1:                 peekCP = peekCodePoint();
1:             }
1:             if (peekCP == CodePoint.RDBNAM) {
1:                 foundInPass = true;
1:                 rdbnamReceived = checkAndGetReceivedFlag(rdbnamReceived);
1:                 rdbnam = parseRDBNAM(true);
1:                 peekCP = peekCodePoint();
1:             }
1:             if (!foundInPass) {
1:                 doPrmnsprmSemantics(peekCP);
1:             }
1:         }
1:         popCollectionStack();
1:         checkRequiredObjects(svrcodReceived);
1:         // move into a method
1:         netAgent_.setSvrcod(svrcod);
1:     //--------------------- parse DDM Reply Data--------------------------------------
1:     //------------------------parse DDM Scalars-----------------------------
0:     // RDB Package Name and Consistency token Scalar Object specifies the
0:     // fully qualified name of a relational database package and its
0:     // consistency token.
0:     protected Object parsePKGNAMCT(boolean skip) throws DisconnectException {
0:         parseLengthAndMatchCodePoint(CodePoint.PKGNAMCT);
0:         if (skip) {
0:             skipBytes();
0:             return null;
1:         }
0:         agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,
0:                 "parsePKGNAMCT not yet implemented"));
0:         return null; // to make compiler happy
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetPackageReply
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: import org.apache.derby.client.am.DisconnectException;
1: 
0: public class NetPackageReply extends NetConnectionReply
0: {
0:   NetPackageReply (NetAgent netAgent, int bufferSize)
0:   {
0:     super (netAgent, bufferSize);
1:   }
1: 
1: 
0:   NetSqlca parseSqlErrorCondition () throws DisconnectException
0:   {
0:     parseSQLERRRM();
0:     parseTypdefsOrMgrlvlovrs ();
0:     NetSqlca netSqlca = parseSQLCARD (null);
0:     return netSqlca;
1:   }
1: 
1: 
0:   // Also called by NetStatementReply
0:   void parseDTAMCHRM () throws DisconnectException
0:   {
0:     boolean svrcodReceived = false;
0:     int svrcod = CodePoint.SVRCOD_INFO;
0:     boolean rdbnamReceived = false;
0:     String rdbnam = null;
1: 
0:     parseLengthAndMatchCodePoint (CodePoint.DTAMCHRM);
0:     pushLengthOnCollectionStack();
0:     int peekCP = peekCodePoint();
1: 
0:     while (peekCP != Reply.END_OF_COLLECTION) {
1: 
0:       boolean foundInPass = false;
1: 
0:       if (peekCP == CodePoint.SVRCOD) {
0:         foundInPass = true;
0:         svrcodReceived = checkAndGetReceivedFlag (svrcodReceived);
0:         svrcod = parseSVRCOD (CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (peekCP == CodePoint.RDBNAM) {
0:         foundInPass = true;
0:         rdbnamReceived = checkAndGetReceivedFlag (rdbnamReceived);
0:         rdbnam = parseRDBNAM (true);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (!foundInPass)
0:         doPrmnsprmSemantics (peekCP);
1: 
1:     }
0:     popCollectionStack();
0:     checkRequiredObjects (svrcodReceived, rdbnamReceived);
1: 
0:     netAgent_.setSvrcod (svrcod);
0:     doDtamchrmSemantics();
1:   }
1: 
0:   // RDB Update Reply Message indicates that a DDM command resulted
0:   // in an update at the target relational database.  If a command
0:   // generated multiple reply messages including an RDBUPDRM, then
0:   // the RDBUPDRM must be the first reply message for the command.
0:   // For each target server, the RDBUPDRM  must be returned the first
0:   // time an update is made to the target RDB within a unit of work.
0:   // The target server may optionally return the RDBUPDRM after subsequent
0:   // updates within the UOW.  If multiple target RDBs are involved with
0:   // the current UOW and updates are made with any of them, then the RDBUPDRM
0:   // must be returned in response to the first update at each of them.
0:   protected void parseRDBUPDRM () throws DisconnectException
0:   {
0:     boolean svrcodReceived = false;
0:     int svrcod = CodePoint.SVRCOD_INFO;
0:     boolean rdbnamReceived = false;
0:     String rdbnam = null;
1: 
0:     parseLengthAndMatchCodePoint (CodePoint.RDBUPDRM);
0:     pushLengthOnCollectionStack();
1: 
0:     // in XA Global transaction we need to know if we have a read-only
0:     //  transaction, if we get a RDBUPDRM this is NOT a read-only transaction
0:     //  currently only XAConnections care about read-only transactions, if
0:     //  non-XA wants this information they will need to initialize the flag
0:     //  at start of UOW
0:     netAgent_.netConnection_.setReadOnlyTransactionFlag( false );
1: 
0:     int peekCP = peekCodePoint();
1: 
0:     while (peekCP != Reply.END_OF_COLLECTION) {
1: 
0:       boolean foundInPass = false;
1: 
0:       if (peekCP == CodePoint.SVRCOD) {
0:         foundInPass = true;
0:         svrcodReceived = checkAndGetReceivedFlag (svrcodReceived);
0:         svrcod = parseSVRCOD (CodePoint.SVRCOD_INFO, CodePoint.SVRCOD_INFO);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (peekCP == CodePoint.RDBNAM) {
0:         foundInPass = true;
0:         rdbnamReceived = checkAndGetReceivedFlag (rdbnamReceived);
0:         rdbnam = parseRDBNAM (true);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (!foundInPass)
0:         doPrmnsprmSemantics (peekCP);
1: 
1:     }
0:     popCollectionStack();
0:     checkRequiredObjects (svrcodReceived, rdbnamReceived);
1: 
0:     // call an event to indicate the server has been updated 
0:     netAgent_.setSvrcod (svrcod);
1: 
1:   }
1: 
0:   // SQL Error Condition Reply Message indicates that an SQL error
0:   // has occurred.  It may be sent even though no reply message
0:   // precedes the SQLCARD object that is the normal
0:   // response to a command when an exception occurs.
0:   // The SQLERRM is also used when a BNDSQLSTT command is terminated
0:   // by an INTRRDBRQS command.
0:   // This reply message must precede an SQLCARD object.
0:   // The SQLSTATE is returned in the SQLCARD.
0:   //
0:   // Returned from Server:
0:   // SVRCOD - required  (8 - ERROR)
0:   // RDBNAM - optional
0:   //
0:   // Also called by NetResultSetReply and NetStatementReply
0:   void parseSQLERRRM () throws DisconnectException
0:   {
0:     boolean svrcodReceived = false;
0:     int svrcod = CodePoint.SVRCOD_INFO;
0:     boolean rdbnamReceived = false;
0:     String rdbnam = null;
1: 
0:     parseLengthAndMatchCodePoint (CodePoint.SQLERRRM);
0:     pushLengthOnCollectionStack();
0:     int peekCP = peekCodePoint();
1: 
0:     while (peekCP != Reply.END_OF_COLLECTION) {
1: 
0:       boolean foundInPass = false;
1: 
0:       if (peekCP == CodePoint.SVRCOD) {
0:         foundInPass = true;
0:         svrcodReceived = checkAndGetReceivedFlag (svrcodReceived);
0:         svrcod = parseSVRCOD (CodePoint.SVRCOD_ERROR, CodePoint.SVRCOD_ERROR);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (peekCP == CodePoint.RDBNAM) {
0:         foundInPass = true;
0:         rdbnamReceived = checkAndGetReceivedFlag (rdbnamReceived);
0:         rdbnam = parseRDBNAM (true);
0:         peekCP = peekCodePoint();
1:       }
1: 
0:       if (!foundInPass)
0:         doPrmnsprmSemantics (peekCP);
1: 
1:     }
0:     popCollectionStack();
0:     checkRequiredObjects (svrcodReceived);
1: 
0:     // move into a method
0:     netAgent_.setSvrcod (svrcod);
1:   }
1: 
0:   //--------------------- parse DDM Reply Data--------------------------------------
1: 
0:   //------------------------parse DDM Scalars-----------------------------
1: 
0:   // RDB Package Name and Consistency token Scalar Object specifies the
0:   // fully qualified name of a relational database package and its
0:   // consistency token.
0:   protected Object parsePKGNAMCT (boolean skip) throws DisconnectException
0:   {
0:     parseLengthAndMatchCodePoint (CodePoint.PKGNAMCT);
0:     if (skip) {
0:       skipBytes();
0:       return null;
1:     }
0:     agent_.accumulateChainBreakingReadExceptionAndThrow (new DisconnectException (
0:       agent_,
0:       "parsePKGNAMCT not yet implemented"));
0:     return null; // to make compiler happy
1:   }
1: }
============================================================================