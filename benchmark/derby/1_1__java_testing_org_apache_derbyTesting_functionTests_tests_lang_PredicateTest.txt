1:0af1665: /*
1:0af1665:  * Class org.apache.derbyTesting.functionTests.tests.lang.PredicateTest
1:0af1665:  *
1:0af1665:  * Licensed to the Apache Software Foundation (ASF) under one
1:0af1665:  * or more contributor license agreements.  See the NOTICE file
1:0af1665:  * distributed with this work for additional information
1:0af1665:  * regarding copyright ownership.  The ASF licenses this file
1:0af1665:  * to you under the Apache License, Version 2.0 (the
1:0af1665:  * "License"); you may not use this file except in compliance
1:0af1665:  * with the License.  You may obtain a copy of the License at
1:0af1665:  *
1:0af1665:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0af1665:  *
1:0af1665:  * Unless required by applicable law or agreed to in writing,
1:0af1665:  * software distributed under the License is distributed on an
1:0af1665:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0af1665:  * KIND, either express or implied.  See the License for the
1:0af1665:  * specific language governing permissions and limitations
1:0af1665:  * under the License.
1:0af1665:  */
1:0af1665: 
1:0af1665: package org.apache.derbyTesting.functionTests.tests.lang;
1:0af1665: 
1:0af1665: import java.io.BufferedReader;
1:0af1665: import java.io.IOException;
1:0af1665: import java.io.StringReader;
1:a6631d9: import java.sql.PreparedStatement;
1:0af1665: import java.sql.ResultSet;
1:0af1665: import java.sql.SQLException;
1:0af1665: import java.sql.Statement;
1:0af1665: import java.util.ArrayList;
1:0af1665: import java.util.Arrays;
1:0af1665: import java.util.List;
1:0af1665: import junit.framework.Test;
1:0af1665: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:0af1665: import org.apache.derbyTesting.junit.JDBC;
1:0af1665: import org.apache.derbyTesting.junit.TestConfiguration;
1:0af1665: 
1:0af1665: /**
1:0af1665:  * This class contains test cases for the correct handling of predicates in
1:0af1665:  * SQL queries.
1:0af1665:  */
1:0af1665: public class PredicateTest extends BaseJDBCTestCase {
1:0af1665:     public PredicateTest(String name) {
1:0af1665:         super(name);
1:0af1665:     }
1:0af1665: 
1:0af1665:     public static Test suite() {
1:0af1665:         // We're testing engine functionality, so run in embedded only.
1:0af1665:         return TestConfiguration.embeddedSuite(PredicateTest.class);
1:0af1665:     }
1:0af1665: 
1:0af1665:     /**
1:0af1665:      * DERBY-2282: Test that we're able to compute the transitive closure of
1:0af1665:      * predicates with constants on the left side of the comparison operator.
1:0af1665:      */
1:0af1665:     public void testTransitiveClosureWithConstantsOnLeftSide()
1:0af1665:             throws SQLException, IOException {
1:0af1665: 
1:0af1665:         setAutoCommit(false); // let tables be cleaned up automatically
1:0af1665: 
1:0af1665:         Statement s = createStatement();
1:0af1665: 
1:0af1665:         // insert test data
1:0af1665:         s.execute("create table t1 (i int)");
1:0af1665:         s.execute("create table t2 (j int)");
1:0af1665:         s.execute("insert into t1 values 1, 5, 7, 11, 13, 17, 19");
1:0af1665:         s.execute("insert into t2 values 23, 29, 31, 37, 43, 47, 53");
1:0af1665:         s.execute("insert into t1 select 23 * i from t1 where i < 19");
1:0af1665:         s.execute("insert into t2 select 23 * j from t2 where j < 55");
1:0af1665: 
1:0af1665:         // enable runtime statistics
1:0af1665:         s.execute("call syscs_util.syscs_set_runtimestatistics(1)");
1:0af1665: 
1:0af1665:         // Following will show two qualifiers for T2 and three for T1
1:0af1665:         // because transitive closure adds two new qualifiers, "t2.j >= 23"
1:0af1665:         // and "t1.i <= 30" to the list.
1:0af1665:         JDBC.assertSingleValueResultSet(
1:0af1665:                 s.executeQuery(
1:0af1665:                     "select i from t1, t2 where " +
1:0af1665:                     "t1.i = t2.j and t1.i >= 23 and t2.j <= 30"),
1:0af1665:                 "23");
1:0af1665: 
1:0af1665:         List expectedOperators = Arrays.asList(new String[] {
1:0af1665:                     "Operator: <", "Operator: <=",
1:0af1665:                     "Operator: <", "Operator: <=", "Operator: ="
1:0af1665:                 });
1:0af1665: 
1:0af1665:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1:0af1665: 
1:0af1665:         // But if we put the constants on the left-hand side, we didn't
1:0af1665:         // detect the transitive closure and thus we had a single qualifier
1:0af1665:         // for T2 and only two qualifiers for T1.
1:0af1665:         JDBC.assertSingleValueResultSet(
1:0af1665:                 s.executeQuery(
1:0af1665:                     "select i from t1, t2 where " +
1:0af1665:                     "t1.i = t2.j and 23 <= t1.i and 30 >= t2.j"),
1:0af1665:                 "23");
1:0af1665: 
1:0af1665:         // Verify that we now have all the expected qualifiers.
1:0af1665:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1:a6631d9: 
1:a6631d9:         // Now check that we get the same plan with parameters instead of
1:a6631d9:         // constants on the right-hand side.
1:a6631d9: 
1:a6631d9:         PreparedStatement paramRight = prepareStatement(
1:a6631d9:                 "select i from t1, t2 where " +
1:a6631d9:                 "t1.i = t2.j and t1.i >= ? and t2.j <= ?");
1:a6631d9:         paramRight.setInt(1, 23);
1:a6631d9:         paramRight.setInt(2, 30);
1:a6631d9: 
1:a6631d9:         JDBC.assertSingleValueResultSet(paramRight.executeQuery(), "23");
1:a6631d9:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1:a6631d9: 
1:a6631d9:         // Same plan expected with parameters on the left-hand side.
1:a6631d9: 
1:a6631d9:         PreparedStatement paramLeft = prepareStatement(
1:a6631d9:                 "select i from t1, t2 where " +
1:a6631d9:                 "t1.i = t2.j and ? <= t1.i and ? >= t2.j");
1:a6631d9:         paramLeft.setInt(1, 23);
1:a6631d9:         paramLeft.setInt(2, 30);
1:a6631d9: 
1:a6631d9:         JDBC.assertSingleValueResultSet(paramLeft.executeQuery(), "23");
1:a6631d9:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1:0af1665:     }
1:0af1665: 
1:0af1665:     /**
1:0af1665:      * Get the runtime statistics for the previous statement executed on the
1:0af1665:      * default connection (if collection of runtime statistics has been
1:0af1665:      * enabled).
1:0af1665:      *
1:0af1665:      * @return a string with the runtime statistics
1:0af1665:      */
1:0af1665:     private String getStatistics() throws SQLException {
1:0af1665:         ResultSet rs = createStatement().executeQuery(
1:0af1665:                 "values syscs_util.syscs_get_runtimestatistics()");
1:0af1665:         rs.next();
1:0af1665:         String stats = rs.getString(1);
1:0af1665:         JDBC.assertEmpty(rs);
1:0af1665:         return stats;
1:0af1665:     }
1:0af1665: 
1:0af1665:     /**
1:0af1665:      * Extract all the operators from the runtime statistics.
1:0af1665:      *
1:0af1665:      * @param stats the runtime statistics
1:0af1665:      * @return a list of all operators
1:0af1665:      */
1:3f5c48a:     private List<String> extractOperators(String stats) throws IOException {
1:3f5c48a:         ArrayList<String> ops = new ArrayList<String>();
1:0af1665:         BufferedReader r = new BufferedReader(new StringReader(stats));
1:0af1665:         String line;
1:0af1665:         while ((line = r.readLine()) != null) {
1:0af1665:             line = line.trim();
1:0af1665:             if (line.startsWith("Operator: ")) {
1:0af1665:                 ops.add(line);
1:0af1665:             }
1:0af1665:         }
1:0af1665:         return ops;
1:0af1665:     }
1:0af1665: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     private List<String> extractOperators(String stats) throws IOException {
1:         ArrayList<String> ops = new ArrayList<String>();
commit:a6631d9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Now check that we get the same plan with parameters instead of
1:         // constants on the right-hand side.
1: 
1:         PreparedStatement paramRight = prepareStatement(
1:                 "select i from t1, t2 where " +
1:                 "t1.i = t2.j and t1.i >= ? and t2.j <= ?");
1:         paramRight.setInt(1, 23);
1:         paramRight.setInt(2, 30);
1: 
1:         JDBC.assertSingleValueResultSet(paramRight.executeQuery(), "23");
1:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1: 
1:         // Same plan expected with parameters on the left-hand side.
1: 
1:         PreparedStatement paramLeft = prepareStatement(
1:                 "select i from t1, t2 where " +
1:                 "t1.i = t2.j and ? <= t1.i and ? >= t2.j");
1:         paramLeft.setInt(1, 23);
1:         paramLeft.setInt(2, 30);
1: 
1:         JDBC.assertSingleValueResultSet(paramLeft.executeQuery(), "23");
1:         assertEquals(expectedOperators, extractOperators(getStatistics()));
commit:0af1665
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Class org.apache.derbyTesting.functionTests.tests.lang.PredicateTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.StringReader;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This class contains test cases for the correct handling of predicates in
1:  * SQL queries.
1:  */
1: public class PredicateTest extends BaseJDBCTestCase {
1:     public PredicateTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // We're testing engine functionality, so run in embedded only.
1:         return TestConfiguration.embeddedSuite(PredicateTest.class);
1:     }
1: 
1:     /**
1:      * DERBY-2282: Test that we're able to compute the transitive closure of
1:      * predicates with constants on the left side of the comparison operator.
1:      */
1:     public void testTransitiveClosureWithConstantsOnLeftSide()
1:             throws SQLException, IOException {
1: 
1:         setAutoCommit(false); // let tables be cleaned up automatically
1: 
1:         Statement s = createStatement();
1: 
1:         // insert test data
1:         s.execute("create table t1 (i int)");
1:         s.execute("create table t2 (j int)");
1:         s.execute("insert into t1 values 1, 5, 7, 11, 13, 17, 19");
1:         s.execute("insert into t2 values 23, 29, 31, 37, 43, 47, 53");
1:         s.execute("insert into t1 select 23 * i from t1 where i < 19");
1:         s.execute("insert into t2 select 23 * j from t2 where j < 55");
1: 
1:         // enable runtime statistics
1:         s.execute("call syscs_util.syscs_set_runtimestatistics(1)");
1: 
1:         // Following will show two qualifiers for T2 and three for T1
1:         // because transitive closure adds two new qualifiers, "t2.j >= 23"
1:         // and "t1.i <= 30" to the list.
1:         JDBC.assertSingleValueResultSet(
1:                 s.executeQuery(
1:                     "select i from t1, t2 where " +
1:                     "t1.i = t2.j and t1.i >= 23 and t2.j <= 30"),
1:                 "23");
1: 
1:         List expectedOperators = Arrays.asList(new String[] {
1:                     "Operator: <", "Operator: <=",
1:                     "Operator: <", "Operator: <=", "Operator: ="
1:                 });
1: 
1:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1: 
1:         // But if we put the constants on the left-hand side, we didn't
1:         // detect the transitive closure and thus we had a single qualifier
1:         // for T2 and only two qualifiers for T1.
1:         JDBC.assertSingleValueResultSet(
1:                 s.executeQuery(
1:                     "select i from t1, t2 where " +
1:                     "t1.i = t2.j and 23 <= t1.i and 30 >= t2.j"),
1:                 "23");
1: 
1:         // Verify that we now have all the expected qualifiers.
1:         assertEquals(expectedOperators, extractOperators(getStatistics()));
1:     }
1: 
1:     /**
1:      * Get the runtime statistics for the previous statement executed on the
1:      * default connection (if collection of runtime statistics has been
1:      * enabled).
1:      *
1:      * @return a string with the runtime statistics
1:      */
1:     private String getStatistics() throws SQLException {
1:         ResultSet rs = createStatement().executeQuery(
1:                 "values syscs_util.syscs_get_runtimestatistics()");
1:         rs.next();
1:         String stats = rs.getString(1);
1:         JDBC.assertEmpty(rs);
1:         return stats;
1:     }
1: 
1:     /**
1:      * Extract all the operators from the runtime statistics.
1:      *
1:      * @param stats the runtime statistics
1:      * @return a list of all operators
1:      */
0:     private List extractOperators(String stats) throws IOException {
0:         ArrayList ops = new ArrayList();
1:         BufferedReader r = new BufferedReader(new StringReader(stats));
1:         String line;
1:         while ((line = r.readLine()) != null) {
1:             line = line.trim();
1:             if (line.startsWith("Operator: ")) {
1:                 ops.add(line);
1:             }
1:         }
1:         return ops;
1:     }
1: }
============================================================================