1:ff22a62: /*
1:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.app.Scores
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.app;
1:ff22a62: 
1:ff22a62: import org.apache.derbyDemo.scores.data.*;
1:ff22a62: import org.apache.derbyDemo.scores.util.*;
1:ff22a62: 
1:ff22a62: import java.sql.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Application for showcasing Derby features using
1:ff22a62:  * an educational testing schema.
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public  class   Scores
1:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     private Logger  _logger;
1:ff22a62:     private String  _serverJar;
1:ff22a62:     private String  _mathJar;
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTRUCTOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Construct out of thin air.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  Scores()
1:ff22a62:     {
1:ff22a62:         _logger = new Logger();
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // ENTRY POINT
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Run the Scores application, showcasing Derby features.
1:ff22a62:      * </p>
1:ff22a62:      *
1:ff22a62:      * <ul>
1:ff22a62:      * <li>args[ 0 ] = name of server jar</li>
1:ff22a62:      * <li>args[ 1 ] = name of math library</li>
1:ff22a62:      * </ul>
1:ff22a62:      */
1:ff22a62:     public  static  void    main( String[] args )
1:ff22a62:     {
1:ff22a62:         Scores      application = new Scores();
1:ff22a62:         int         argIdx = 0;
1:ff22a62: 
1:ff22a62:         try {
1:ff22a62:             application._serverJar = args[ argIdx++ ];
1:ff22a62:             application._mathJar = args[ argIdx++ ];
1:ff22a62: 
1:ff22a62:             application.execute();
1:ff22a62:         }
1:ff22a62:         catch (Throwable t)
1:ff22a62:         {
1:ff22a62:             Logger.getLogger().log( t );
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // APPLICATION BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Run the Scores application, showcasing Derby features.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private void    execute()
1:ff22a62:         throws Exception
1:ff22a62:     {
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62: 
1:ff22a62:         log.logBanner( "Starting Scores Application..." );
1:ff22a62: 
1:ff22a62:         Database    db = Database.getDatabase( _serverJar, _mathJar );
1:ff22a62: 
1:ff22a62:         Connection  conn = db.getConnection();
1:ff22a62:         Data        data = db.getData();
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             (
1:ff22a62:              "Now the students take their tests." +
1:ff22a62:              " Watch for the trigger firing..."
1:ff22a62:              );
1:ff22a62:         data.takeTests( db );
1:ff22a62:         Utils.commit( conn );
1:ff22a62: 
1:ff22a62:         log.logBanner( "Show scores for latest takings..." );
1:ff22a62:         Database.prettyPrint
1:ff22a62:             (
1:ff22a62:              db.getConnection(),
1:ff22a62:              "select s.lastName, s.firstName, t.testName,\n" +
1:ff22a62:              "tk.takingID, formatPercent( tk.score ) score\n" +
1:ff22a62:              "from Student s, Test t, TestTaking tk, LastTaking lt\n" +
1:ff22a62:              "where t.testID = tk.testID\n" +
1:ff22a62:              "and s.studentID = tk.studentID\n" +
1:ff22a62:              "and tk.takingID = lt.takingID\n" +
1:ff22a62:              "order by s.lastName, s.firstName, t.testName, tk.takingID\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             ( "Median Score Per Test. Note how we fake " +
1:ff22a62:               "a user-defined aggregate..." );
1:ff22a62:         db.prettyPrint
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select testName, " +
1:ff22a62:              "formatPercent( getMedianTestScore( testID ) ) " +
1:ff22a62:              "as \"median score\"\n" +
1:ff22a62:              "from Test\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             (
1:ff22a62:              "Who Needs Improvement? Note the filtering done " +
1:ff22a62:              "at the end of the WHERE clause..."
1:ff22a62:              );
1:ff22a62:         data.reportWhoNeedsImprovement
1:ff22a62:             ( db, Data.LincolnGrammar, "GSM_2_0" );
1:ff22a62: 
1:ff22a62:         log.logBanner( "Hoopla! Everything works!" );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.app.Scores
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.app;
1: 
1: import org.apache.derbyDemo.scores.data.*;
1: import org.apache.derbyDemo.scores.util.*;
1: 
1: import java.sql.*;
1: 
1: /**
1:  * <p>
1:  * Application for showcasing Derby features using
1:  * an educational testing schema.
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public  class   Scores
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     private Logger  _logger;
1:     private String  _serverJar;
1:     private String  _mathJar;
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct out of thin air.
1:      * </p>
1:      */
1:     public  Scores()
1:     {
1:         _logger = new Logger();
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // ENTRY POINT
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Run the Scores application, showcasing Derby features.
1:      * </p>
1:      *
1:      * <ul>
1:      * <li>args[ 0 ] = name of server jar</li>
1:      * <li>args[ 1 ] = name of math library</li>
1:      * </ul>
1:      */
1:     public  static  void    main( String[] args )
1:     {
1:         Scores      application = new Scores();
1:         int         argIdx = 0;
1: 
1:         try {
1:             application._serverJar = args[ argIdx++ ];
1:             application._mathJar = args[ argIdx++ ];
1: 
1:             application.execute();
1:         }
1:         catch (Throwable t)
1:         {
1:             Logger.getLogger().log( t );
1:         }
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // APPLICATION BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Run the Scores application, showcasing Derby features.
1:      * </p>
1:      */
1:     private void    execute()
1:         throws Exception
1:     {
1:         Logger      log = Logger.getLogger();
1: 
1:         log.logBanner( "Starting Scores Application..." );
1: 
1:         Database    db = Database.getDatabase( _serverJar, _mathJar );
1: 
1:         Connection  conn = db.getConnection();
1:         Data        data = db.getData();
1: 
1:         log.logBanner
1:             (
1:              "Now the students take their tests." +
1:              " Watch for the trigger firing..."
1:              );
1:         data.takeTests( db );
1:         Utils.commit( conn );
1: 
1:         log.logBanner( "Show scores for latest takings..." );
1:         Database.prettyPrint
1:             (
1:              db.getConnection(),
1:              "select s.lastName, s.firstName, t.testName,\n" +
1:              "tk.takingID, formatPercent( tk.score ) score\n" +
1:              "from Student s, Test t, TestTaking tk, LastTaking lt\n" +
1:              "where t.testID = tk.testID\n" +
1:              "and s.studentID = tk.studentID\n" +
1:              "and tk.takingID = lt.takingID\n" +
1:              "order by s.lastName, s.firstName, t.testName, tk.takingID\n"
1:              );
1: 
1:         log.logBanner
1:             ( "Median Score Per Test. Note how we fake " +
1:               "a user-defined aggregate..." );
1:         db.prettyPrint
1:             (
1:              conn,
1:              "select testName, " +
1:              "formatPercent( getMedianTestScore( testID ) ) " +
1:              "as \"median score\"\n" +
1:              "from Test\n"
1:              );
1: 
1:         log.logBanner
1:             (
1:              "Who Needs Improvement? Note the filtering done " +
1:              "at the end of the WHERE clause..."
1:              );
1:         data.reportWhoNeedsImprovement
1:             ( db, Data.LincolnGrammar, "GSM_2_0" );
1: 
1:         log.logBanner( "Hoopla! Everything works!" );
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1: }
============================================================================