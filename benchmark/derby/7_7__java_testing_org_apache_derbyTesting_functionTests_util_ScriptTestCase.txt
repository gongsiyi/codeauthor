1:a41eb3a: /*
2:a41eb3a:  *
1:a41eb3a:  * Derby - Class org.apache.derbyTesting.functionTests.util.ScriptTestCase
1:a41eb3a:  *
1:15651f5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:  * contributor license agreements.  See the NOTICE file distributed with
1:15651f5:  * this work for additional information regarding copyright ownership.
1:15651f5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:  * (the "License"); you may not use this file except in compliance with
1:15651f5:  * the License.  You may obtain a copy of the License at
1:a41eb3a:  *
1:a41eb3a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a41eb3a:  *
1:a41eb3a:  * Unless required by applicable law or agreed to in writing, 
1:a41eb3a:  * software distributed under the License is distributed on an 
1:a41eb3a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a41eb3a:  * either express or implied. See the License for the specific 
1:a41eb3a:  * language governing permissions and limitations under the License.
3:a41eb3a:  */
1:a41eb3a: package org.apache.derbyTesting.functionTests.util;
1:e3aea2b: 
1:a41eb3a: import java.io.InputStream;
1:a41eb3a: import java.net.URL;
1:4483839: import java.sql.Connection;
1:70c969f: import java.util.Locale;
1:a41eb3a: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.Derby;
1:3f5c48a: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:21a3353: 
1:e3aea2b: /**
1:a41eb3a:  * Run a .sql script as a test comparing it to
1:a41eb3a:  * a master output file.
1:a41eb3a:  *
1:e3aea2b:  */
1:d2b9c54: public abstract class ScriptTestCase extends CanonTestCase {
1:617d53c: 
1:4483839: 	private final String inputEncoding;
1:7cbf021: 	private final String user;
1:a39c84c:     private boolean useSystemProperties = false;
1:70c969f:     private Locale oldLocale;
1:a39c84c: 
1:a39c84c:     /**
1:a39c84c: 	 * Create a ScriptTestCase to run a single test
1:a39c84c:      * using a connection obtained from getConnection()
1:a39c84c: 	 * @param script Base name of the .sql script
1:a39c84c:      * @param useSystemProperties Whether to use system properties for this test
1:a39c84c: 	 * excluding the .sql suffix.
1:a39c84c: 	 */
1:a39c84c: 	public ScriptTestCase(String script, boolean useSystemProperties)
1:a39c84c: 	{
1:a39c84c:         this(script, null, null, null);
1:a39c84c:         this.useSystemProperties = useSystemProperties;
1:7cbf021: 	}
1:7cbf021: 
1:7cbf021: 	/**
1:7cbf021: 	 * Create a ScriptTestCase to run a single test
1:e3aea2b:      * using a connection obtained from getConnection()
1:a41eb3a: 	 * @param script Base name of the .sql script
1:a41eb3a: 	 * excluding the .sql suffix.
1:e3aea2b: 	 */
1:a41eb3a: 	public ScriptTestCase(String script)
1:e3aea2b: 	{
1:617d53c:         this(script, null, null, null);
1:70c969f: 	}
1:f121a69: 	
1:678868b:     /**
1:678868b:      * Create a ScriptTestCase to run a single test
1:7cbf021:      * using a connection obtained from getConnection() with a
1:678868b:      * different encoding
1:678868b:      * @param script Base name of the .sql script
1:678868b:      * excluding the .sql suffix.
1:678868b:      */
1:678868b:     public ScriptTestCase(String script, String encoding)
1:678868b:     {
1:617d53c:         this(script, encoding, encoding, null);
1:678868b:     }
1:f121a69: 
1:678868b:     /**
1:e3aea2b:      * Create a ScriptTestCase to run a single test
1:678868b:      * using a connection obtained from getConnection() with a
1:7cbf021:      * different encoding.
1:7cbf021:      * @param script     Base name of the .sql script
1:7cbf021:      *                   excluding the .sql suffix.
1:617d53c:      * @param inputEnc   The encoding for the script, if not null,
1:617d53c:      *                   else use "US-ASCII"
1:617d53c:      * @param outputEnc  The encoding for the ouput from the script,
1:617d53c:      *                   if not null, else use "US-ASCII"
1:7cbf021:      * @param user       Run script as user
1:7cbf021:      */
1:617d53c:     public ScriptTestCase(String script,
1:617d53c:             String inputEnc, String outputEnc, String user)
1:7cbf021:     {
1:617d53c:         super(script, outputEnc);
1:7e177bd:         setSystemProperty("ij.showNoConnectionsAtStart", "true");
1:7e177bd:         setSystemProperty("ij.showNoCountForSelect", "true");
1:617d53c:         inputEncoding = (inputEnc == null) ? DEFAULT_ENCODING : inputEnc;
1:7cbf021: 
1:7cbf021: 		this.user = user;
1:a39c84c:     }
1:7cbf021: 
1:e3aea2b:     /**
1:a41eb3a: 	 * Return the folder (last element of the package) where
1:a41eb3a: 	 * the .sql script lives, e.g. lang.
1:a41eb3a: 	 */
1:4483839: 	protected String getArea() {
1:678868b: 		
1:4483839: 		String name =  getClass().getName();
1:a39c84c: 		
1:4483839: 		int lastDot = name.lastIndexOf('.');
1:95011a0: 		
1:4483839: 		name = name.substring(0, lastDot);
1:3bd1dd8: 		
1:4483839: 		lastDot = name.lastIndexOf('.');
1:e3aea2b: 		
1:4483839: 		return name.substring(lastDot+1);
1:e3aea2b: 	}
1:4483839: 		
4:a41eb3a: 	/**
1:a41eb3a: 	 * Get a decorator to setup the ij in order
1:a41eb3a: 	 * to run the test. A sub-class must decorate
1:a41eb3a: 	 * its suite using this call.
1:a41eb3a: 	 */
1:4483839: 	public static Test getIJConfig(Test test)
3:a41eb3a: 	{
1:21a3353:         // Need the tools to run the scripts as this
1:21a3353:         // test uses ij as the script runner.
1:21a3353:         if (!Derby.hasTools())
1:1ae02c9:             return new BaseTestSuite("empty: no tools support");
1:21a3353:             
1:4483839: 		// No decorator needed currently.
1:4483839: 		return test;
1:4483839: 	}
1:4483839: 	
1:a41eb3a: 	/**
1:a41eb3a: 	 * Run the test, using the resource as the input.
1:a41eb3a: 	 * Compare to the master file using a very simple
1:a41eb3a: 	 * line by line comparision. Fails at the first
1:a41eb3a: 	 * difference. If a failure occurs the output
1:a41eb3a: 	 * is written into the current directory as
1:a41eb3a: 	 * testScript.out, otherwise the output is only
1:a41eb3a: 	 * kept in memory.
1:a41eb3a: 	 * @throws Throwable 
1:a41eb3a: 	 */
1:a41eb3a: 	public void runTest() throws Throwable
1:a41eb3a: 	{
1:a41eb3a: 		String resource =
1:4483839: 			"org/apache/derbyTesting/functionTests/tests/"
1:a41eb3a: 			+ getArea() + "/"
1:a41eb3a: 			+ getName() + ".sql";
1:4483839: 		
1:a41eb3a: 		String canon =
1:a41eb3a: 			"org/apache/derbyTesting/functionTests/master/"
1:a41eb3a: 			+ getName() + ".out";
1:4483839: 
1:4483839: 		URL sql = getTestResource(resource);
1:4483839: 		assertNotNull("SQL script missing: " + resource, sql);
1:d2b9c54: 		
1:e3aea2b: 		InputStream sqlIn = openTestResource(sql);
1:7cbf021: 
1:7cbf021: 		Connection conn;
1:7cbf021: 
1:7cbf021: 		if (user != null) {
1:7cbf021: 			conn = openUserConnection(user);
1:7cbf021: 		} else {
1:7cbf021: 			conn = getConnection();
1:7cbf021: 		}
1:7cbf021: 
1:617d53c:         final String outputEnc;
1:617d53c:         final String derby_ui_codeset = getSystemProperty("derby.ui.codeset");
1:617d53c: 
1:617d53c:         if (derby_ui_codeset != null) {
1:617d53c:             // IJ should format output according to the derby.ui.codeset
1:617d53c:             // variable. If we pass in an encoding explicitly to runScript(),
1:617d53c:             // we won't test that derby.ui.codeset is obeyed. Therefore,
1:617d53c:             // leave it as null.
1:617d53c:             outputEnc = null;
1:617d53c:             assertEquals(
1:617d53c:                     "Requested output encoding and derby.ui.codeset differ",
1:617d53c:                     outputEncoding, derby_ui_codeset);
1:7cbf021:         } else {
1:617d53c:             // derby.ui.codeset isn't set. Tell runScript() which output
1:617d53c:             // encoding to use.
1:617d53c:             outputEnc = outputEncoding;
1:7cbf021:         }
1:617d53c:         
1:4483839: 		org.apache.derby.tools.ij.runScript(
1:4483839: 				conn,
1:4483839: 				sqlIn,
1:4483839: 				inputEncoding,
1:d2b9c54:                 getOutputStream(),
1:a39c84c: 				outputEnc,
1:a39c84c:                 useSystemProperties);
1:4483839: 		
1:e3aea2b: 		if (!conn.isClosed() && !conn.getAutoCommit())
1:e3aea2b: 		    conn.commit();
1:4483839: 		
1:4483839: 		sqlIn.close();
1:d2b9c54:         
1:d2b9c54:         this.compareCanon(canon);
1:617d53c: 	}
1:70c969f:     
1:70c969f:     /**
1:70c969f:      * Set up the new locale for the test
1:70c969f:      */
1:70c969f:     protected void setUp() {
1:70c969f:         oldLocale = Locale.getDefault();
1:3f5c48a:         LocaleTestSetup.setDefaultLocale(Locale.US);
1:70c969f: 
1:f121a69:         // Reset IJ's locale to allow it to pick up the new locale from
1:f121a69:         // the environment.
1:f121a69:         LocalizedResource.resetLocalizedResourceCache();
1:70c969f:     }
1:70c969f: 
1:70c969f:     /**
1:70c969f:      * Revert the locale back to the old one
1:70c969f:      */
1:70c969f:     protected void tearDown() throws Exception {
1:70c969f:         super.tearDown();
1:70c969f: 
1:3f5c48a:         LocaleTestSetup.setDefaultLocale(oldLocale);
1:4483839: 
1:f121a69:         // Forget the locale used by this test.
1:f121a69:         LocalizedResource.resetLocalizedResourceCache();
1:70c969f:     }
1:70c969f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("empty: no tools support");
commit:7cbf021
/////////////////////////////////////////////////////////////////////////
1: 	private final String user;
/////////////////////////////////////////////////////////////////////////
0: 		user = null;
/////////////////////////////////////////////////////////////////////////
0: 		user = null;
1:     }
1: 
1:     /**
1:      * Create a ScriptTestCase to run a single test
1:      * using a connection obtained from getConnection() with a
1:      * different encoding.
1:      * @param script     Base name of the .sql script
1:      *                   excluding the .sql suffix.
0:      * @param encoding   Run using encoding if not null, else use "US-ASCII".
1:      * @param user       Run script as user
1:      */
0:     public ScriptTestCase(String script, String encoding, String user)
1:     {
0:         super(script);
1: 
0: 		if (encoding != null) {
0: 			inputEncoding = encoding;
1: 		} else {
0: 			inputEncoding = "US-ASCII";
1: 		}
1: 
1: 		this.user = user;
/////////////////////////////////////////////////////////////////////////
1: 
1: 		Connection conn;
1: 
1: 		if (user != null) {
1: 			conn = openUserConnection(user);
1: 		} else {
1: 			conn = getConnection();
1: 		}
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         LocaleTestSetup.setDefaultLocale(Locale.US);
/////////////////////////////////////////////////////////////////////////
1:         LocaleTestSetup.setDefaultLocale(oldLocale);
commit:f121a69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Reset IJ's locale to allow it to pick up the new locale from
1:         // the environment.
1:         LocalizedResource.resetLocalizedResourceCache();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Forget the locale used by this test.
1:         LocalizedResource.resetLocalizedResourceCache();
commit:617d53c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         this(script, null, null, null);
/////////////////////////////////////////////////////////////////////////
1:         this(script, encoding, encoding, null);
/////////////////////////////////////////////////////////////////////////
1:      * @param inputEnc   The encoding for the script, if not null,
1:      *                   else use "US-ASCII"
1:      * @param outputEnc  The encoding for the ouput from the script,
1:      *                   if not null, else use "US-ASCII"
1:     public ScriptTestCase(String script,
1:             String inputEnc, String outputEnc, String user)
1:         super(script, outputEnc);
1:         inputEncoding = (inputEnc == null) ? DEFAULT_ENCODING : inputEnc;
/////////////////////////////////////////////////////////////////////////
1:         final String outputEnc;
1:         final String derby_ui_codeset = getSystemProperty("derby.ui.codeset");
1: 
1:         if (derby_ui_codeset != null) {
1:             // IJ should format output according to the derby.ui.codeset
1:             // variable. If we pass in an encoding explicitly to runScript(),
1:             // we won't test that derby.ui.codeset is obeyed. Therefore,
1:             // leave it as null.
1:             outputEnc = null;
1:             assertEquals(
1:                     "Requested output encoding and derby.ui.codeset differ",
1:                     outputEncoding, derby_ui_codeset);
0:         } else {
1:             // derby.ui.codeset isn't set. Tell runScript() which output
1:             // encoding to use.
1:             outputEnc = outputEncoding;
1:         }
1: 
0: 				outputEnc);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e177bd
/////////////////////////////////////////////////////////////////////////
1:         setSystemProperty("ij.showNoConnectionsAtStart", "true");
1:         setSystemProperty("ij.showNoCountForSelect", "true");
/////////////////////////////////////////////////////////////////////////
commit:400ea2e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
0:         BaseTestCase.setSystemProperty("ij.showNoConnectionsAtStart", "true");
0:         BaseTestCase.setSystemProperty("ij.showNoCountForSelect", "true");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:70c969f
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:     private Locale oldLocale;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Set up the new locale for the test
1:      */
1:     protected void setUp() {
1:         oldLocale = Locale.getDefault();
1: 
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 Locale.setDefault(Locale.US);
0:                 return null;
1:             }
0:         });
1:     }
1: 
1:     /**
1:      * Revert the locale back to the old one
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 Locale.setDefault(oldLocale);
0:                 return null;
1:             }
0:         });
1:     }
commit:678868b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create a ScriptTestCase to run a single test
1:      * using a connection obtained from getConnection() with a
1:      * different encoding
1:      * @param script Base name of the .sql script
1:      * excluding the .sql suffix.
1:      */
1:     public ScriptTestCase(String script, String encoding)
1:     {
0:         super(script);
0:         inputEncoding = encoding;
1:     }
1: 
1:     /**
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a39c84c
/////////////////////////////////////////////////////////////////////////
1:     private boolean useSystemProperties = false;
1: 
1:     /**
1: 	 * Create a ScriptTestCase to run a single test
1:      * using a connection obtained from getConnection()
1: 	 * @param script Base name of the .sql script
1:      * @param useSystemProperties Whether to use system properties for this test
1: 	 * excluding the .sql suffix.
1: 	 */
1: 	public ScriptTestCase(String script, boolean useSystemProperties)
1: 	{
1:         this(script, null, null, null);
1:         this.useSystemProperties = useSystemProperties;
1: 	}
/////////////////////////////////////////////////////////////////////////
1:         
1: 				outputEnc,
1:                 useSystemProperties);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:21a3353
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.Derby;
1: 
0: import junit.framework.TestSuite;
/////////////////////////////////////////////////////////////////////////
1:         // Need the tools to run the scripts as this
1:         // test uses ij as the script runner.
1:         if (!Derby.hasTools())
0:             return new TestSuite("empty: no tools support");
1:             
commit:d2b9c54
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public abstract class ScriptTestCase extends CanonTestCase {
/////////////////////////////////////////////////////////////////////////
1: 					
1:                 getOutputStream(),
1:         
1:         this.compareCanon(canon);
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
0: 		Connection conn = getConnection();
commit:95011a0
/////////////////////////////////////////////////////////////////////////
1: 			
0:                 rawBytes,
0:         rawBytes.flush();
0:         rawBytes.close();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
commit:b3d2bc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		Connection conn = getXConnection();
/////////////////////////////////////////////////////////////////////////
commit:e3aea2b
/////////////////////////////////////////////////////////////////////////
1: 	
1:     /**
0:      * Default connection.
1:      */
0: 	private Connection conn;
1: 	 * Create a ScriptTestCase to run a single test
1:      * using a connection obtained from getConnection()
/////////////////////////////////////////////////////////////////////////
1: 		InputStream sqlIn = openTestResource(sql);
0: 		conn = getConnection();
/////////////////////////////////////////////////////////////////////////
1: 		if (!conn.isClosed() && !conn.getAutoCommit())
1: 		    conn.commit();
/////////////////////////////////////////////////////////////////////////
1: 	
1:     /**
0:      * Clean up the connection on teardown.
1:      */
0: 	protected void tearDown() throws Exception
1: 	{
0: 		JDBC.cleanup(conn);
0:         super.tearDown();
1: 	}
commit:4483839
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private final String inputEncoding;
0: 	private final String outputEncoding = "US-ASCII";
/////////////////////////////////////////////////////////////////////////
0: 		inputEncoding = "US-ASCII";
/////////////////////////////////////////////////////////////////////////
1: 	protected String getArea() {
1: 		
1: 		String name =  getClass().getName();
1: 		
1: 		int lastDot = name.lastIndexOf('.');
1: 		
1: 		name = name.substring(0, lastDot);
1: 		
1: 		lastDot = name.lastIndexOf('.');
1: 		
1: 		return name.substring(lastDot+1);
1: 	}
1: 		
1: 	public static Test getIJConfig(Test test)
1: 		// No decorator needed currently.
1: 		return test;
/////////////////////////////////////////////////////////////////////////
1: 			"org/apache/derbyTesting/functionTests/tests/"
0: 
1: 		URL sql = getTestResource(resource);
1: 		assertNotNull("SQL script missing: " + resource, sql);
0: 		InputStream sqlIn = sql.openStream();
0: 		ByteArrayOutputStream rawBytes =
0: 			new ByteArrayOutputStream(20 * 1024);
0: 		PrintStream printOut = new PrintStream(rawBytes);
0: 	
0: 		Connection conn = getConnection();
1: 		org.apache.derby.tools.ij.runScript(
1: 				conn,
1: 				sqlIn,
1: 				inputEncoding,
0: 				printOut,
0: 				outputEncoding);
0: 		
0: 		conn.close();
0: 		
0: 		printOut.flush();
0: 		printOut.close();
1: 		sqlIn.close();
/////////////////////////////////////////////////////////////////////////
0: 					new InputStreamReader(canonStream, outputEncoding));
0: 					new ByteArrayInputStream(testRawBytes),
0: 					   outputEncoding));
/////////////////////////////////////////////////////////////////////////
0: 				assertEquals("Output at line " + lineNumber,
0: 						canonLine, testLine);
commit:a41eb3a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.ScriptTestCase
1:  *
0:  * Copyright 2005,2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.util;
0: 
0: import java.io.BufferedReader;
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.FileOutputStream;
1: import java.io.InputStream;
0: import java.io.InputStreamReader;
0: import java.io.PrintStream;
1: import java.net.URL;
0: import java.util.Properties;
0: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: 
1: /**
1:  * Run a .sql script as a test comparing it to
1:  * a master output file.
1:  *
1:  */
0: public abstract class ScriptTestCase extends BaseJDBCTestCase {
0: 
1: 	/**
0: 	 * Create a ScriptTestCase to run a single test. 
1: 	 * @param script Base name of the .sql script
1: 	 * excluding the .sql suffix.
1: 	 */
1: 	public ScriptTestCase(String script)
1: 	{
0: 		super(script);
0: 	}
0: 	
1: 	/**
1: 	 * Return the folder (last element of the package) where
1: 	 * the .sql script lives, e.g. lang.
0: 	 * @return
1: 	 */
0: 	protected abstract String getArea();
0: 	
1: 	/**
1: 	 * Get a decorator to setup the ij in order
1: 	 * to run the test. A sub-class must decorate
1: 	 * its suite using this call.
1: 	 */
0: 	public static TestSetup getIJConfig(Test test)
1: 	{
0: 		Properties ij = new Properties();
0: 
0: 		//TODO: set from configuration.
0: 		ij.setProperty("ij.driver", "org.apache.derby.jdbc.EmbeddedDriver");
0: 		ij.setProperty("ij.database", "jdbc:derby:wombat");
0: 
0: 		ij.setProperty("ij.showNoConnectionsAtStart", "true");
0: 		ij.setProperty("ij.showNoCountForSelect", "true");
0: 			
0: 		return new SystemPropertyTestSetup(test, ij);
0: 	}
0: 	
1: 	/**
1: 	 * Run the test, using the resource as the input.
1: 	 * Compare to the master file using a very simple
1: 	 * line by line comparision. Fails at the first
1: 	 * difference. If a failure occurs the output
1: 	 * is written into the current directory as
1: 	 * testScript.out, otherwise the output is only
1: 	 * kept in memory.
1: 	 * @throws Throwable 
1: 	 */
1: 	public void runTest() throws Throwable
1: 	{
1: 		String resource =
0: 			"/org/apache/derbyTesting/functionTests/tests/"
1: 			+ getArea() + "/"
1: 			+ getName() + ".sql";
0: 		
1: 		String canon =
1: 			"org/apache/derbyTesting/functionTests/master/"
1: 			+ getName() + ".out";
0: 		
0: 		PrintStream originalOut = System.out;
0: 		
0: 		ByteArrayOutputStream rawBytes;
0: 		try {
0: 			
0: 			 rawBytes = new ByteArrayOutputStream(20 * 1024);
0: 			
0: 			PrintStream printOut = new PrintStream(rawBytes);
0: 			System.setOut(printOut);
0: 		
0: 			org.apache.derby.tools.ij.main(new String[] {"-fr", resource});
0: 			
0: 			printOut.flush();
0: 			
0: 		} finally {
0: 			System.setOut(originalOut);
0: 		}
0: 		
0: 		byte[] testRawBytes = rawBytes.toByteArray();
0: 		
0: 		try {
0: 			URL canonURL = getTestResource(canon);
0: 			assertNotNull("No master file " + canon, canonURL);
0: 				
0: 			InputStream canonStream = getTestResource(canon).openStream();
0: 			
0: 			BufferedReader cannonReader = new BufferedReader(
0: 					new InputStreamReader(canonStream));
0: 			
0: 			BufferedReader testOutput = new BufferedReader(
0: 					new InputStreamReader(
0: 					new ByteArrayInputStream(testRawBytes)));
0: 			
0: 			testOutput.readLine();
0: 			
0: 			for (int lineNumber = 1; ; lineNumber++)
1: 			{
0: 				String testLine = testOutput.readLine();
0: 				
0: 				// Skip blank lines.
0: 				if ("".equals(testLine))
0: 					continue;
0: 				
0: 				String canonLine = cannonReader.readLine();
0: 					
0: 				if (canonLine == null && testLine == null)
0: 					break;
0: 				
0: 				if (canonLine == null)
0: 					fail("More output from test than expected");
0: 				
0: 				if (testLine == null)
0: 					fail("Less output from test than expected, stoped at line"
0: 							+ lineNumber);
0: 										
0: 				assertEquals("Output at line " + lineNumber, canonLine, testLine);
0: 			}
0: 			
0: 			cannonReader.close();
0: 			testOutput.close();
0: 		} catch (Throwable t) {
0: 			FileOutputStream outFile = new FileOutputStream(getName() + ".out");
0: 			outFile.write(testRawBytes);
0: 			outFile.flush();
0: 			outFile.close();
0: 			throw t;
0: 		}
0: 	}
0: }
============================================================================