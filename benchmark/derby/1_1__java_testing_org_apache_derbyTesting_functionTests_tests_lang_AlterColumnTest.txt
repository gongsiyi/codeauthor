1:e432522: /*
1:e432522: 
1:e432522: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AlterColumnTest
1:e432522: 
1:e432522: Licensed to the Apache Software Foundation (ASF) under one or more
1:e432522: contributor license agreements.  See the NOTICE file distributed with
1:e432522: this work for additional information regarding copyright ownership.
1:e432522: The ASF licenses this file to You under the Apache License, Version 2.0
1:e432522: (the "License"); you may not use this file except in compliance with
1:e432522: the License.  You may obtain a copy of the License at
1:e432522: 
1:e432522: http://www.apache.org/licenses/LICENSE-2.0
1:e432522: 
1:e432522: Unless required by applicable law or agreed to in writing, software
1:e432522: distributed under the License is distributed on an "AS IS" BASIS,
1:e432522: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e432522: See the License for the specific language governing permissions and
1:e432522: limitations under the License.
1:e432522: 
1:e432522: */
1:e432522: 
1:e432522: package org.apache.derbyTesting.functionTests.tests.lang;
1:e432522: 
1:e432522: import java.sql.SQLException;
1:e432522: import java.sql.Statement;
1:e432522: import java.sql.PreparedStatement;
1:e432522: import java.sql.ResultSet;
1:e432522: import junit.framework.Test;
1:e432522: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:e432522: import org.apache.derbyTesting.junit.TestConfiguration;
1:e432522: import org.apache.derbyTesting.junit.JDBC;
1:e432522: 
1:e432522: /**
1:e432522:  * Test cases for altering columns.
1:e432522:  */
1:e432522: public class AlterColumnTest extends BaseJDBCTestCase {
1:e432522: 
1:e432522:     public AlterColumnTest(String name) {
1:e432522:         super(name);
1:e432522:     }
1:e432522: 
1:e432522:     public static Test suite() {
1:e432522:         return TestConfiguration.defaultSuite(AlterColumnTest.class);
1:e432522:     }
1:e432522: 
1:e432522:     /**
1:e432522:      * Test ALTER COLUMN default
1:e432522:      */
1:e432522:     public void testAlterDefault() throws SQLException {
1:e432522:         Statement s = createStatement();
1:e432522:         s.execute("create table t(i int default 0)");
1:e432522:         PreparedStatement pd = prepareStatement("delete from t");
1:e432522:         PreparedStatement pi = prepareStatement("insert into t values default");
1:e432522:         PreparedStatement ps = prepareStatement("select * from t order by i");
1:e432522: 
1:e432522:         pi.executeUpdate();
1:e432522:         JDBC.assertFullResultSet(
1:e432522:             ps.executeQuery(), new String[][]{ {"0"} });
1:e432522: 
1:e432522:         /*
1:e432522:          * Try different syntaxes allowed
1:e432522:          */
1:e432522:         s.execute("alter table t alter COLUMN i DEFAULT 1");
1:e432522:         tryAndExpect(pd, pi, ps, "1");
1:e432522: 
1:e432522:         s.execute("alter table t alter COLUMN i WITH DEFAULT 2");
1:e432522:         tryAndExpect(pd, pi, ps, "2");
1:e432522: 
1:e432522:         // Standard SQL syntax added in DERBY-4013
1:e432522:         s.execute("alter table t alter COLUMN i SET DEFAULT 3");
1:e432522:         tryAndExpect(pd, pi, ps, "3");
1:e432522: 
1:e432522:         s.execute("alter table t alter i DEFAULT 4");
1:e432522:         tryAndExpect(pd, pi, ps, "4");
1:e432522: 
1:e432522:         s.execute("alter table t alter i WITH DEFAULT 5");
1:e432522:         tryAndExpect(pd, pi, ps, "5");
1:e432522: 
1:e432522:         // Standard SQL syntax added in DERBY-4013
1:e432522:         s.execute("alter table t alter i SET DEFAULT 6");
1:e432522:         tryAndExpect(pd, pi, ps, "6");
1:e432522: 
1:e432522:         s.execute("alter table t alter i SET DEFAULT null");
1:e432522:         tryAndExpect(pd, pi, ps, null);
1:e432522: 
1:e432522:         s.execute("alter table t alter i SET DEFAULT 1");
1:e432522:         tryAndExpect(pd, pi, ps, "1");
1:e432522: 
1:e432522:         // Standard SQL syntax added in DERBY-4013
1:e432522:         s.execute("alter table t alter i DROP DEFAULT");
1:e432522:         tryAndExpect(pd, pi, ps, null);
1:e432522: 
1:e432522:         s.close();
1:e432522:         pd.close();
1:e432522:         pi.close();
1:e432522:         ps.close();
1:e432522:     }
1:e432522: 
1:e432522:     /**
1:e432522:      * Auxiliary method: Execute the delete statement d to clean table, then
1:e432522:      * the insert statement i to exercise the default mechanism, then check via
1:e432522:      * the select statement s, that the value inserted is e.
1:e432522:      *
1:e432522:      * @param d delete statement
1:e432522:      * @param i insert statement
1:e432522:      * @param s select statement
1:e432522:      * @param e expected value as a string
1:e432522:      */
1:e432522:     private static void tryAndExpect(
1:e432522:         PreparedStatement d,
1:e432522:         PreparedStatement i,
1:e432522:         PreparedStatement s,
1:e432522:         String e) throws SQLException {
1:e432522: 
1:e432522:         d.executeUpdate();
1:e432522:         i.executeUpdate();
1:e432522:         JDBC.assertSingleValueResultSet(s.executeQuery(), e);
1:e432522:     }
1:e432522: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e432522
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AlterColumnTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * Test cases for altering columns.
1:  */
1: public class AlterColumnTest extends BaseJDBCTestCase {
1: 
1:     public AlterColumnTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(AlterColumnTest.class);
1:     }
1: 
1:     /**
1:      * Test ALTER COLUMN default
1:      */
1:     public void testAlterDefault() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("create table t(i int default 0)");
1:         PreparedStatement pd = prepareStatement("delete from t");
1:         PreparedStatement pi = prepareStatement("insert into t values default");
1:         PreparedStatement ps = prepareStatement("select * from t order by i");
1: 
1:         pi.executeUpdate();
1:         JDBC.assertFullResultSet(
1:             ps.executeQuery(), new String[][]{ {"0"} });
1: 
1:         /*
1:          * Try different syntaxes allowed
1:          */
1:         s.execute("alter table t alter COLUMN i DEFAULT 1");
1:         tryAndExpect(pd, pi, ps, "1");
1: 
1:         s.execute("alter table t alter COLUMN i WITH DEFAULT 2");
1:         tryAndExpect(pd, pi, ps, "2");
1: 
1:         // Standard SQL syntax added in DERBY-4013
1:         s.execute("alter table t alter COLUMN i SET DEFAULT 3");
1:         tryAndExpect(pd, pi, ps, "3");
1: 
1:         s.execute("alter table t alter i DEFAULT 4");
1:         tryAndExpect(pd, pi, ps, "4");
1: 
1:         s.execute("alter table t alter i WITH DEFAULT 5");
1:         tryAndExpect(pd, pi, ps, "5");
1: 
1:         // Standard SQL syntax added in DERBY-4013
1:         s.execute("alter table t alter i SET DEFAULT 6");
1:         tryAndExpect(pd, pi, ps, "6");
1: 
1:         s.execute("alter table t alter i SET DEFAULT null");
1:         tryAndExpect(pd, pi, ps, null);
1: 
1:         s.execute("alter table t alter i SET DEFAULT 1");
1:         tryAndExpect(pd, pi, ps, "1");
1: 
1:         // Standard SQL syntax added in DERBY-4013
1:         s.execute("alter table t alter i DROP DEFAULT");
1:         tryAndExpect(pd, pi, ps, null);
1: 
1:         s.close();
1:         pd.close();
1:         pi.close();
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Auxiliary method: Execute the delete statement d to clean table, then
1:      * the insert statement i to exercise the default mechanism, then check via
1:      * the select statement s, that the value inserted is e.
1:      *
1:      * @param d delete statement
1:      * @param i insert statement
1:      * @param s select statement
1:      * @param e expected value as a string
1:      */
1:     private static void tryAndExpect(
1:         PreparedStatement d,
1:         PreparedStatement i,
1:         PreparedStatement s,
1:         String e) throws SQLException {
1: 
1:         d.executeUpdate();
1:         i.executeUpdate();
1:         JDBC.assertSingleValueResultSet(s.executeQuery(), e);
1:     }
1: }
============================================================================