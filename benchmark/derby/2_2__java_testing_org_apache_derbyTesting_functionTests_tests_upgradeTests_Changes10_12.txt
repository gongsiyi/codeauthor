1:a826375: /*
1:a826375: 
1:a826375: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_12
1:a826375: 
1:a826375: Licensed to the Apache Software Foundation (ASF) under one or more
1:a826375: contributor license agreements.  See the NOTICE file distributed with
1:a826375: this work for additional information regarding copyright ownership.
1:a826375: The ASF licenses this file to You under the Apache License, Version 2.0
1:a826375: (the "License"); you may not use this file except in compliance with
1:a826375: the License.  You may obtain a copy of the License at
1:a826375: 
1:a826375:    http://www.apache.org/licenses/LICENSE-2.0
1:a826375: 
1:a826375: Unless required by applicable law or agreed to in writing, software
1:a826375: distributed under the License is distributed on an "AS IS" BASIS,
1:a826375: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a826375: See the License for the specific language governing permissions and
1:a826375: limitations under the License.
1:a826375: 
1:a826375: */
1:a826375: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:a826375: 
1:a826375: import java.sql.SQLException;
1:a826375: import java.sql.Statement;
1:a826375: import junit.framework.Test;
1:a826375: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a826375: import org.apache.derbyTesting.junit.JDBC;
1:a826375: 
1:a826375: 
1:a826375: /**
1:a826375:  * Upgrade test cases for 10.12.
1:a826375:  */
1:a826375: public class Changes10_12 extends UpgradeChange
1:a826375: {
1:a826375: 
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375:     //
1:a826375:     // CONSTANTS
1:a826375:     //
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375: 
1:a826375:     private static  final   String  LANG_AI_CANNOT_MODIFY_AI = "42Z23";
1:a826375:     private static  final   String  LANG_NULL_INTO_NON_NULL = "23502";
1:a826375: 
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375:     //
1:a826375:     // CONSTRUCTOR
1:a826375:     //
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375: 
1:a826375:     public Changes10_12(String name) {
1:a826375:         super(name);
1:a826375:     }
1:a826375: 
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375:     //
1:a826375:     // JUnit BEHAVIOR
1:a826375:     //
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375: 
1:a826375:     /**
1:a826375:      * Return the suite of tests to test the changes made in 10.12.
1:a826375:      *
1:a826375:      * @param phase an integer that indicates the current phase in
1:a826375:      *              the upgrade test.
1:a826375:      * @return the test suite created.
1:a826375:      */
1:a826375:     public static Test suite(int phase) {
1:a826375:         return new BaseTestSuite(Changes10_12.class, "Upgrade test for 10.12");
1:a826375:     }
1:a826375: 
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375:     //
1:a826375:     // TESTS
1:a826375:     //
1:a826375:     //////////////////////////////////////////////////////////////////
1:a826375: 
1:a826375:     /**
1:a826375:      * DERBY-6414(Incorrect handling when using an UPDATE to SET an 
1:a826375:      *  identity column to DEFAULT)
1:a826375:      * Starting Derby 10.12, we support updating an identity column using
1:a826375:      *  the keyword DEFAULT on 10.11 and higher dbs. A 10.11 database in 
1:a826375:      *  soft upgrade mode can use this feature to update identity columns. 
1:a826375:      *  Database versions earlier than that will not be able to use this 
1:a826375:      *  feature. The reason for restricting the functionality to 10.11 and 
1:a826375:      *  higher dbs is that starting 10.11, we started using sequence generator 
1:a826375:      *  to create unique values for identity columns. Prior to that, we had 
1:a826375:      *  really old code to generate unique values. In order to keep the code 
1:a826375:      *  clean in 10.12, DERBY-6414 is fixed only for identity columns using 
1:a826375:      *  sequence generator to create the new ids.
1:a826375:      * @throws SQLException
1:a826375:      */
1:a826375:     public void testDerby6414UpdateIdentityColumn() throws SQLException {
1:a826375:         //10.0 release does not support "generated by default as 
1:a826375:         // identity" columns. 
1:a826375:         if (!oldAtLeast(10, 1)) return;
1:a826375:         
1:a826375:         Statement s = createStatement();
1:a826375:         switch (getPhase()) {
1:a826375:             case PH_CREATE:
1:a826375:             	//Create the necessary tables and show that update of
1:a826375:             	// identity columns is not supported in these older
1:a826375:             	// releases
1:a826375:                 s.execute("create table t1_6414(a int, "+
1:a826375:                         "c int generated always as identity," +
1:a826375:                         "d char(3)," +
1:a826375:                         "e char(5)" +
1:a826375:                         ")");
1:a826375:                 s.execute("insert into t1_6414(a) values "+
1:a826375:                         "(1), (2)");
1:a826375:                 //Update of identity columns using DEFAULT keyword is not 
1:a826375:                 // supported in pre-10.12 releases
1:a826375:                 assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:a826375:                         "update t1_6414 set e='ccccc', a=-a, c=default");
1:a826375: 
1:a826375:                 s.execute("create table t2_6414(a int, "+
1:a826375:                         "c int generated by default as identity," +
1:a826375:                         "d char(3)," +
1:a826375:                         "e char(5)" +
1:a826375:                         ")");
1:a826375:                 s.execute("insert into t2_6414(a,d,e,c) values "+
1:a826375:                         "(1,'aaa','aaaaa',1)");
1:a826375:                 s.execute("insert into t2_6414(a,d,e,c) values "+
1:a826375:                 		"(2,'bbb','bbbbb',default)");
1:a826375:                 //Update of identity columns using DEFAULT keyword is not 
1:a826375:                 // supported in pre-10.12 releases
1:a826375:                 assertStatementError(LANG_NULL_INTO_NON_NULL,
1:a826375:                 		s,
1:a826375:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:a826375:                 break;
1:b5392db: 
1:a826375:             case PH_SOFT_UPGRADE:
1:a826375:             	if (!oldAtLeast(10, 11)) {
1:a826375:                 	//If the soft upgrade is on a pre10.11 db, then update of
1:a826375:                 	// identity column will still not be supported. This is
1:a826375:                 	// because those releases do not use sequence generator
1:a826375:                 	// to generate a new value for identity columns
1:a826375:                     assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:a826375:                             "update t1_6414 set e='ccccc', a=-a, c=default");
1:a826375:                     assertStatementError(LANG_NULL_INTO_NON_NULL,
1:a826375:                     		s,
1:a826375: 	                        "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:a826375:                 } else {
1:a826375:                 	//We are dealing with 10.11 and higher dbs. These dbs use 
1:a826375:                 	// sequence generator to create the new identity value. On 
1:a826375:                 	// such dbs, on soft upgrade, we allow update of identity
1:a826375:                 	// column using DEFAULT keyword
1:a826375:                 	s.execute("update t1_6414 set e='ccccc', a=-a, c=default");
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t1_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                                 { "-1", "3", null, "ccccc" },
1:a826375:                                 { "-2", "4", null, "ccccc" },
1:a826375:                             }
1:a826375:                     );
1:a826375: 
1:a826375:                 	s.execute(
1:a826375:                             "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t2_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                                 { "-1", "2", "ccc", "ccccc" },
1:a826375:                                 { "-2", "3", "ccc", "ccccc" },
1:a826375:                             }
1:a826375:                     );
1:a826375:                 }
1:a826375:                 break;
1:a826375:             case PH_POST_SOFT_UPGRADE:
1:a826375:             	//We are back to the release where the db was created. Those 
1:a826375:             	// releases do not have fix for DERBY-6414 and hence the
1:a826375:             	// following UPDATE of identity columns using DEFAULT 
1:a826375:             	// keyword will fail.
1:a826375:                 assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:a826375:                         "update t1_6414 set e='ccccc', a=-a, c=default");
1:a826375:                 assertStatementError(LANG_NULL_INTO_NON_NULL,
1:a826375:                 		s,
1:a826375:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:a826375:                 break;
1:a826375:             case PH_HARD_UPGRADE:
1:a826375:             	s.execute("update t1_6414 set e='ccccc', a=-a, c=default");
1:a826375:                 if (!oldAtLeast(10, 11)) 
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t1_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                                 { "-1", "3", null, "ccccc" },
1:a826375:                                 { "-2", "4", null, "ccccc" },
1:a826375:                             }
1:a826375:                     );
1:a826375:                 else
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t1_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                 	             { "1", "5", null, "ccccc" },
1:a826375:                 	             { "2", "6", null, "ccccc" },
1:a826375:                             }
1:a826375:                     );
1:a826375: 
1:a826375:             	s.execute(
1:a826375:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:a826375:                 if (!oldAtLeast(10, 11)) 
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t2_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                                 { "-1", "2", "ccc", "ccccc" },
1:a826375:                                 { "-2", "3", "ccc", "ccccc" },
1:a826375:                             }
1:a826375:                     );
1:a826375:                 else
1:a826375:                 	JDBC.assertFullResultSet(
1:a826375:                 			s.executeQuery("select * from t2_6414"),
1:a826375:                             new String[][]
1:a826375:                             {
1:a826375:                                 { "1", "4", "ccc", "ccccc" },
1:a826375:                                 { "2", "5", "ccc", "ccccc" },
1:a826375:                             }
1:a826375:                     );                	
1:a826375:                 break;
1:a826375:         }
1:a826375:     }
1:a826375: 
1:b5392db:     /**
1:b5392db:      * Test the addition of support for adding identity columns with
1:b5392db:      * an ALTER TABLE statement. DERBY-3888.
1:b5392db:      */
1:b5392db:     public void testAlterTableAddIdentity() throws SQLException {
1:b5392db:         Statement s = createStatement();
1:b5392db: 
1:b5392db:         String addIdToT1 = "alter table derby_3888_t1 add column "
1:b5392db:                             + "id int generated always as identity";
1:b5392db:         String addIdToT2 = "alter table derby_3888_t2 add column "
1:b5392db:                             + "id int generated by default as identity";
1:b5392db: 
1:b5392db:         // GENERATED BY DEFAULT AS IDENTITY is not supported prior to
1:b5392db:         // Derby 10.1.1.0 (DERBY-167). If we're running on an older version,
1:b5392db:         // change the syntax to something it recognizes.
1:b5392db:         if (!oldAtLeast(10, 1) &&
1:b5392db:                 (getPhase() == PH_CREATE ||
1:b5392db:                  getPhase() == PH_POST_SOFT_UPGRADE)) {
1:b5392db:             addIdToT2 = addIdToT2.replace("by default", "always");
1:b5392db:         }
1:b5392db: 
1:b5392db:         switch (getPhase()) {
1:b5392db:             case PH_CREATE:
1:b5392db:                 // The old version doesn't support adding identity columns
1:b5392db:                 // via ALTER TABLE, so expect failures.
1:b5392db:                 s.execute("create table derby_3888_t1(x int)");
1:b5392db:                 s.execute("insert into derby_3888_t1 values 1");
1:b5392db:                 assertCompileError("42601", addIdToT1);
1:b5392db:                 s.execute("create table derby_3888_t2(x int)");
1:b5392db:                 s.execute("insert into derby_3888_t2 values 1");
1:b5392db:                 assertCompileError("42601", addIdToT2);
1:b5392db:                 break;
1:b5392db:             case PH_SOFT_UPGRADE:
1:b5392db:                 // In soft upgrade, adding identity columns is only supported
1:b5392db:                 // if the database format is 10.11 or higher (needs identity
1:b5392db:                 // columns backed by sequences, added in DERBY-6542).
1:b5392db:                 if (oldAtLeast(10, 11)) {
1:b5392db:                     s.execute(addIdToT1);
1:b5392db:                     s.execute("insert into derby_3888_t1(x) values 2");
1:b5392db:                     JDBC.assertFullResultSet(
1:b5392db:                         s.executeQuery("select * from derby_3888_t1 order by x"),
1:b5392db:                         new String[][] {
1:b5392db:                             { "1", "1" },
1:b5392db:                             { "2", "2" },
1:b5392db:                         });
1:b5392db:                 } else {
1:b5392db:                     assertCompileError("XCL47", addIdToT1);
1:b5392db:                     assertCompileError("XCL47", addIdToT2);
1:b5392db:                     s.execute("insert into derby_3888_t1(x) values 2");
1:b5392db:                 }
1:b5392db:                 break;
1:b5392db:             case PH_POST_SOFT_UPGRADE:
1:b5392db:                 s.execute("insert into derby_3888_t1(x) values 3");
1:b5392db:                 // The result depends on whether or not the identity column
1:b5392db:                 // was added in the soft upgrade phase.
1:b5392db:                 String[][] expectedRows = oldAtLeast(10, 11)
1:b5392db:                         ? new String[][] {
1:b5392db:                             { "1", "1" },
1:b5392db:                             { "2", "2" },
1:b5392db:                             { "3", "3" },
1:b5392db:                         }
1:b5392db:                         : new String[][] {{"1"}, {"2"}, {"3"}};
1:b5392db:                 JDBC.assertFullResultSet(
1:b5392db:                     s.executeQuery("select * from derby_3888_t1 order by x"),
1:b5392db:                     expectedRows);
1:b5392db: 
1:b5392db:                 // Adding identity columns in the old version should fail.
1:b5392db:                 assertCompileError("42601", addIdToT2);
1:b5392db:                 break;
1:b5392db:             case PH_HARD_UPGRADE:
1:b5392db:                 // Adding identity columns should work in hard upgrade.
1:b5392db:                 if (!oldAtLeast(10, 11)) {
1:b5392db:                     // If the old version is older than 10.11, the identity
1:b5392db:                     // column of T1 was not added in the soft upgrade phase.
1:b5392db:                     // Add it now.
1:b5392db:                     s.execute(addIdToT1);
1:b5392db:                 }
1:b5392db:                 s.execute(addIdToT2);
1:b5392db:                 s.execute("insert into derby_3888_t2(x) values 2");
1:b5392db:                 s.execute("insert into derby_3888_t1(x) values 4");
1:b5392db:                 JDBC.assertFullResultSet(
1:b5392db:                     s.executeQuery("select * from derby_3888_t1 order by x"),
1:b5392db:                     new String[][] {
1:b5392db:                         { "1", "1" },
1:b5392db:                         { "2", "2" },
1:b5392db:                         { "3", "3" },
1:b5392db:                         { "4", "4" },
1:b5392db:                     });
1:b5392db:                 JDBC.assertFullResultSet(
1:b5392db:                     s.executeQuery("select * from derby_3888_t2 order by x"),
1:b5392db:                     new String[][] {
1:b5392db:                         { "1", "1" },
1:b5392db:                         { "2", "2" },
1:b5392db:                     });
1:b5392db:                 s.execute("drop table derby_3888_t1");
1:b5392db:                 s.execute("drop table derby_3888_t2");
1:b5392db:                 break;
1:b5392db:         };
1:b5392db:     }
1:a826375: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b5392db
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test the addition of support for adding identity columns with
1:      * an ALTER TABLE statement. DERBY-3888.
1:      */
1:     public void testAlterTableAddIdentity() throws SQLException {
1:         Statement s = createStatement();
1: 
1:         String addIdToT1 = "alter table derby_3888_t1 add column "
1:                             + "id int generated always as identity";
1:         String addIdToT2 = "alter table derby_3888_t2 add column "
1:                             + "id int generated by default as identity";
1: 
1:         // GENERATED BY DEFAULT AS IDENTITY is not supported prior to
1:         // Derby 10.1.1.0 (DERBY-167). If we're running on an older version,
1:         // change the syntax to something it recognizes.
1:         if (!oldAtLeast(10, 1) &&
1:                 (getPhase() == PH_CREATE ||
1:                  getPhase() == PH_POST_SOFT_UPGRADE)) {
1:             addIdToT2 = addIdToT2.replace("by default", "always");
1:         }
1: 
1:         switch (getPhase()) {
1:             case PH_CREATE:
1:                 // The old version doesn't support adding identity columns
1:                 // via ALTER TABLE, so expect failures.
1:                 s.execute("create table derby_3888_t1(x int)");
1:                 s.execute("insert into derby_3888_t1 values 1");
1:                 assertCompileError("42601", addIdToT1);
1:                 s.execute("create table derby_3888_t2(x int)");
1:                 s.execute("insert into derby_3888_t2 values 1");
1:                 assertCompileError("42601", addIdToT2);
1:                 break;
1:             case PH_SOFT_UPGRADE:
1:                 // In soft upgrade, adding identity columns is only supported
1:                 // if the database format is 10.11 or higher (needs identity
1:                 // columns backed by sequences, added in DERBY-6542).
1:                 if (oldAtLeast(10, 11)) {
1:                     s.execute(addIdToT1);
1:                     s.execute("insert into derby_3888_t1(x) values 2");
1:                     JDBC.assertFullResultSet(
1:                         s.executeQuery("select * from derby_3888_t1 order by x"),
1:                         new String[][] {
1:                             { "1", "1" },
1:                             { "2", "2" },
1:                         });
1:                 } else {
1:                     assertCompileError("XCL47", addIdToT1);
1:                     assertCompileError("XCL47", addIdToT2);
1:                     s.execute("insert into derby_3888_t1(x) values 2");
1:                 }
1:                 break;
1:             case PH_POST_SOFT_UPGRADE:
1:                 s.execute("insert into derby_3888_t1(x) values 3");
1:                 // The result depends on whether or not the identity column
1:                 // was added in the soft upgrade phase.
1:                 String[][] expectedRows = oldAtLeast(10, 11)
1:                         ? new String[][] {
1:                             { "1", "1" },
1:                             { "2", "2" },
1:                             { "3", "3" },
1:                         }
1:                         : new String[][] {{"1"}, {"2"}, {"3"}};
1:                 JDBC.assertFullResultSet(
1:                     s.executeQuery("select * from derby_3888_t1 order by x"),
1:                     expectedRows);
1: 
1:                 // Adding identity columns in the old version should fail.
1:                 assertCompileError("42601", addIdToT2);
1:                 break;
1:             case PH_HARD_UPGRADE:
1:                 // Adding identity columns should work in hard upgrade.
1:                 if (!oldAtLeast(10, 11)) {
1:                     // If the old version is older than 10.11, the identity
1:                     // column of T1 was not added in the soft upgrade phase.
1:                     // Add it now.
1:                     s.execute(addIdToT1);
1:                 }
1:                 s.execute(addIdToT2);
1:                 s.execute("insert into derby_3888_t2(x) values 2");
1:                 s.execute("insert into derby_3888_t1(x) values 4");
1:                 JDBC.assertFullResultSet(
1:                     s.executeQuery("select * from derby_3888_t1 order by x"),
1:                     new String[][] {
1:                         { "1", "1" },
1:                         { "2", "2" },
1:                         { "3", "3" },
1:                         { "4", "4" },
1:                     });
1:                 JDBC.assertFullResultSet(
1:                     s.executeQuery("select * from derby_3888_t2 order by x"),
1:                     new String[][] {
1:                         { "1", "1" },
1:                         { "2", "2" },
1:                     });
1:                 s.execute("drop table derby_3888_t1");
1:                 s.execute("drop table derby_3888_t2");
1:                 break;
1:         };
1:     }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a826375
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_12
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: 
1: /**
1:  * Upgrade test cases for 10.12.
1:  */
1: public class Changes10_12 extends UpgradeChange
1: {
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  LANG_AI_CANNOT_MODIFY_AI = "42Z23";
1:     private static  final   String  LANG_NULL_INTO_NON_NULL = "23502";
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     public Changes10_12(String name) {
1:         super(name);
1:     }
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return the suite of tests to test the changes made in 10.12.
1:      *
1:      * @param phase an integer that indicates the current phase in
1:      *              the upgrade test.
1:      * @return the test suite created.
1:      */
1:     public static Test suite(int phase) {
1:         return new BaseTestSuite(Changes10_12.class, "Upgrade test for 10.12");
1:     }
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * DERBY-6414(Incorrect handling when using an UPDATE to SET an 
1:      *  identity column to DEFAULT)
1:      * Starting Derby 10.12, we support updating an identity column using
1:      *  the keyword DEFAULT on 10.11 and higher dbs. A 10.11 database in 
1:      *  soft upgrade mode can use this feature to update identity columns. 
1:      *  Database versions earlier than that will not be able to use this 
1:      *  feature. The reason for restricting the functionality to 10.11 and 
1:      *  higher dbs is that starting 10.11, we started using sequence generator 
1:      *  to create unique values for identity columns. Prior to that, we had 
1:      *  really old code to generate unique values. In order to keep the code 
1:      *  clean in 10.12, DERBY-6414 is fixed only for identity columns using 
1:      *  sequence generator to create the new ids.
1:      * @throws SQLException
1:      */
1:     public void testDerby6414UpdateIdentityColumn() throws SQLException {
1:         //10.0 release does not support "generated by default as 
1:         // identity" columns. 
1:         if (!oldAtLeast(10, 1)) return;
1:         
1:         Statement s = createStatement();
1:         switch (getPhase()) {
1:             case PH_CREATE:
1:             	//Create the necessary tables and show that update of
1:             	// identity columns is not supported in these older
1:             	// releases
1:                 s.execute("create table t1_6414(a int, "+
1:                         "c int generated always as identity," +
1:                         "d char(3)," +
1:                         "e char(5)" +
1:                         ")");
1:                 s.execute("insert into t1_6414(a) values "+
1:                         "(1), (2)");
1:                 //Update of identity columns using DEFAULT keyword is not 
1:                 // supported in pre-10.12 releases
1:                 assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:                         "update t1_6414 set e='ccccc', a=-a, c=default");
1: 
1:                 s.execute("create table t2_6414(a int, "+
1:                         "c int generated by default as identity," +
1:                         "d char(3)," +
1:                         "e char(5)" +
1:                         ")");
1:                 s.execute("insert into t2_6414(a,d,e,c) values "+
1:                         "(1,'aaa','aaaaa',1)");
1:                 s.execute("insert into t2_6414(a,d,e,c) values "+
1:                 		"(2,'bbb','bbbbb',default)");
1:                 //Update of identity columns using DEFAULT keyword is not 
1:                 // supported in pre-10.12 releases
1:                 assertStatementError(LANG_NULL_INTO_NON_NULL,
1:                 		s,
1:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:                 break;
1: 
1:             case PH_SOFT_UPGRADE:
1:             	if (!oldAtLeast(10, 11)) {
1:                 	//If the soft upgrade is on a pre10.11 db, then update of
1:                 	// identity column will still not be supported. This is
1:                 	// because those releases do not use sequence generator
1:                 	// to generate a new value for identity columns
1:                     assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:                             "update t1_6414 set e='ccccc', a=-a, c=default");
1:                     assertStatementError(LANG_NULL_INTO_NON_NULL,
1:                     		s,
1: 	                        "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:                 } else {
1:                 	//We are dealing with 10.11 and higher dbs. These dbs use 
1:                 	// sequence generator to create the new identity value. On 
1:                 	// such dbs, on soft upgrade, we allow update of identity
1:                 	// column using DEFAULT keyword
1:                 	s.execute("update t1_6414 set e='ccccc', a=-a, c=default");
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t1_6414"),
1:                             new String[][]
1:                             {
1:                                 { "-1", "3", null, "ccccc" },
1:                                 { "-2", "4", null, "ccccc" },
1:                             }
1:                     );
1: 
1:                 	s.execute(
1:                             "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t2_6414"),
1:                             new String[][]
1:                             {
1:                                 { "-1", "2", "ccc", "ccccc" },
1:                                 { "-2", "3", "ccc", "ccccc" },
1:                             }
1:                     );
1:                 }
1:                 break;
1:             case PH_POST_SOFT_UPGRADE:
1:             	//We are back to the release where the db was created. Those 
1:             	// releases do not have fix for DERBY-6414 and hence the
1:             	// following UPDATE of identity columns using DEFAULT 
1:             	// keyword will fail.
1:                 assertCompileError(LANG_AI_CANNOT_MODIFY_AI,
1:                         "update t1_6414 set e='ccccc', a=-a, c=default");
1:                 assertStatementError(LANG_NULL_INTO_NON_NULL,
1:                 		s,
1:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:                 break;
1:             case PH_HARD_UPGRADE:
1:             	s.execute("update t1_6414 set e='ccccc', a=-a, c=default");
1:                 if (!oldAtLeast(10, 11)) 
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t1_6414"),
1:                             new String[][]
1:                             {
1:                                 { "-1", "3", null, "ccccc" },
1:                                 { "-2", "4", null, "ccccc" },
1:                             }
1:                     );
1:                 else
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t1_6414"),
1:                             new String[][]
1:                             {
1:                 	             { "1", "5", null, "ccccc" },
1:                 	             { "2", "6", null, "ccccc" },
1:                             }
1:                     );
1: 
1:             	s.execute(
1:                         "update t2_6414 set e='ccccc', a=-a, c=default, d='ccc'");
1:                 if (!oldAtLeast(10, 11)) 
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t2_6414"),
1:                             new String[][]
1:                             {
1:                                 { "-1", "2", "ccc", "ccccc" },
1:                                 { "-2", "3", "ccc", "ccccc" },
1:                             }
1:                     );
1:                 else
1:                 	JDBC.assertFullResultSet(
1:                 			s.executeQuery("select * from t2_6414"),
1:                             new String[][]
1:                             {
1:                                 { "1", "4", "ccc", "ccccc" },
1:                                 { "2", "5", "ccc", "ccccc" },
1:                             }
1:                     );                	
1:                 break;
1:         }
1:     }
1: }
============================================================================