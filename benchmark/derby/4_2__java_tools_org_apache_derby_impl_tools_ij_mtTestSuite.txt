1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.mtTestSuite
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import java.util.Vector;
1:fe77ca5: import java.util.Enumeration;
1:fe77ca5: import java.util.Properties;
1:fe77ca5: import java.io.FileNotFoundException;
1:fe77ca5: import java.io.IOException;
1:fe77ca5: import java.lang.Math;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  */
1:fe77ca5: public class mtTestSuite
1:fe77ca5: {
1:fe77ca5: 	private Vector cases;
1:fe77ca5: 	private Vector last;
1:fe77ca5: 	private Vector init;
1:fe77ca5: 	private mtTime time;
1:fe77ca5: 	private int numThreads;
1:fe77ca5: 	private String rootDir = null;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	mtTestSuite(int numThreads, mtTime time, 
1:fe77ca5: 			Vector initCases, Vector testCases, Vector finalCases)
1:fe77ca5: 	{
1:fe77ca5: 		this.numThreads = numThreads;
1:fe77ca5: 		this.time = time;
1:fe77ca5: 		this.cases = testCases;
1:fe77ca5: 		this.init = initCases;
1:fe77ca5: 		this.last = finalCases;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void init()
1:fe77ca5: 	{
1:fe77ca5: 		boolean loadInitFailed = loadCases(init);
1:fe77ca5: 		boolean loadTestsFailed = loadCases(cases);
1:fe77ca5: 		boolean loadLastFailed = loadCases(last);
1:fe77ca5: 
1:fe77ca5: 		if ((loadInitFailed == true) ||
1:fe77ca5: 			(loadTestsFailed == true) ||
1:fe77ca5: 			(loadLastFailed == true))
1:fe77ca5: 		{
1:fe77ca5: 			throw new Error("Initialization Error");
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** @return boolean indicates if there was a problem loading
1:fe77ca5: 	** 	the file
1:fe77ca5: 	*/
1:fe77ca5: 	private boolean loadCases(Vector cases)
1:fe77ca5: 	{
1:fe77ca5: 		if (cases == null)
1:fe77ca5: 			return false;
1:fe77ca5: 
1:fe77ca5: 		boolean gotError = false;
1:fe77ca5: 		Enumeration e = cases.elements();
1:fe77ca5: 		mtTestCase tcase;
1:fe77ca5:  
1:fe77ca5: 		while (e.hasMoreElements())
1:fe77ca5: 		{
1:fe77ca5: 			tcase = (mtTestCase)e.nextElement();
1:fe77ca5: 			try
1:fe77ca5: 			{
1:fe77ca5: 				tcase.initialize(rootDir);
1:fe77ca5: 			}
1:fe77ca5: 			catch (Throwable t)
1:fe77ca5: 			{
1:fe77ca5: 				gotError = true;
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return gotError;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void setRoot(String rootDir)
1:fe77ca5: 	{
1:fe77ca5: 		this.rootDir = rootDir;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public String getRoot()
1:fe77ca5: 	{
1:fe77ca5: 		return rootDir;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public int getNumThreads()
1:fe77ca5: 	{
1:fe77ca5: 		return numThreads;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Vector getCases()
1:fe77ca5: 	{
1:fe77ca5: 		return cases;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Vector getInitCases()
1:fe77ca5: 	{
1:fe77ca5: 		return init;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Vector getFinalCases()
1:fe77ca5: 	{
1:fe77ca5: 		return last;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public mtTime getTime()
1:fe77ca5: 	{
1:fe77ca5: 		return time;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public long getTimeMillis()
1:fe77ca5: 	{
1:fe77ca5: 		return ((time.hours * 360) +
1:fe77ca5: 				(time.minutes * 60) +
1:fe77ca5: 				(time.seconds)) * 1000;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public String toString()
1:fe77ca5: 	{
1:fe77ca5: 		String str;
1:fe77ca5: 		int	len;
1:fe77ca5: 		int i;
1:fe77ca5: 	
1:fe77ca5: 		str = "TEST CASES\nNumber of Threads: "+numThreads;
1:fe77ca5: 		str +="\nTime: "+time;
1:fe77ca5: 		str +="\nNumber of Initializers: "+init.size()+"\n";
1:fe77ca5: 		for (i = 0, len = init.size(); i < len; i++)
1:fe77ca5: 		{
1:fe77ca5: 			str += init.elementAt(i).toString() + "\n";
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		str +="\nNumber of Cases: "+cases.size()+"\n";
1:fe77ca5: 		for (i = 0, len = cases.size(); i < len; i++)
1:fe77ca5: 		{
1:fe77ca5: 			str += cases.elementAt(i).toString() + "\n";
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		str +="\nNumber of Final Cases: "+last.size()+"\n";
1:fe77ca5: 		for (i = 0, len = last.size(); i < len; i++)
1:fe77ca5: 		{
1:fe77ca5: 			str += last.elementAt(i).toString() + "\n";
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return str;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/*
1:fe77ca5: 	** Grab a test case.  Pick one randomly and
1:fe77ca5: 	** try to grab that case.  If we get it we are
1:fe77ca5: 	** done.  Otherwise, try try again.
1:fe77ca5: 	*/
1:fe77ca5: 	public mtTestCase grabTestCase() 
1:fe77ca5: 	{
1:fe77ca5: 		int numCases = cases.size();
1:fe77ca5: 		int caseNum;
1:fe77ca5: 		mtTestCase testCase;
1:fe77ca5: 
1:fe77ca5: 		do
1:fe77ca5: 		{
1:fe77ca5: 			caseNum = (int)((java.lang.Math.random() * 1311) % numCases);
1:fe77ca5: 			testCase = (mtTestCase)cases.elementAt(caseNum);
1:fe77ca5: 		}
1:fe77ca5: 		while (testCase.grab() == false);
1:fe77ca5: 	
1:fe77ca5: 		return testCase;	
1:fe77ca5: 	}
1:fe77ca5: }
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.mtTestSuite
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import java.util.Vector;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.lang.Math;
1: 
1: /**
1:  */
1: public class mtTestSuite
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private Vector cases;
1: 	private Vector last;
1: 	private Vector init;
1: 	private mtTime time;
1: 	private int numThreads;
1: 	private String rootDir = null;
1: 
1: 
1: 	mtTestSuite(int numThreads, mtTime time, 
1: 			Vector initCases, Vector testCases, Vector finalCases)
1: 	{
1: 		this.numThreads = numThreads;
1: 		this.time = time;
1: 		this.cases = testCases;
1: 		this.init = initCases;
1: 		this.last = finalCases;
1: 	}
1: 
1: 	public void init()
1: 	{
1: 		boolean loadInitFailed = loadCases(init);
1: 		boolean loadTestsFailed = loadCases(cases);
1: 		boolean loadLastFailed = loadCases(last);
1: 
1: 		if ((loadInitFailed == true) ||
1: 			(loadTestsFailed == true) ||
1: 			(loadLastFailed == true))
1: 		{
1: 			throw new Error("Initialization Error");
1: 		}
1: 	}
1: 
1: 	/**
1: 	** @return boolean indicates if there was a problem loading
1: 	** 	the file
1: 	*/
1: 	private boolean loadCases(Vector cases)
1: 	{
1: 		if (cases == null)
1: 			return false;
1: 
1: 		boolean gotError = false;
1: 		Enumeration e = cases.elements();
1: 		mtTestCase tcase;
1:  
1: 		while (e.hasMoreElements())
1: 		{
1: 			tcase = (mtTestCase)e.nextElement();
1: 			try
1: 			{
1: 				tcase.initialize(rootDir);
1: 			}
1: 			catch (Throwable t)
1: 			{
1: 				gotError = true;
1: 			}
1: 		}
1: 
1: 		return gotError;
1: 	}
1: 
1: 	public void setRoot(String rootDir)
1: 	{
1: 		this.rootDir = rootDir;
1: 	}
1: 
1: 	public String getRoot()
1: 	{
1: 		return rootDir;
1: 	}
1: 
1: 	public int getNumThreads()
1: 	{
1: 		return numThreads;
1: 	}
1: 
1: 	public Vector getCases()
1: 	{
1: 		return cases;
1: 	}
1: 
1: 	public Vector getInitCases()
1: 	{
1: 		return init;
1: 	}
1: 
1: 	public Vector getFinalCases()
1: 	{
1: 		return last;
1: 	}
1: 
1: 	public mtTime getTime()
1: 	{
1: 		return time;
1: 	}
1: 
1: 	public long getTimeMillis()
1: 	{
1: 		return ((time.hours * 360) +
1: 				(time.minutes * 60) +
1: 				(time.seconds)) * 1000;
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		String str;
1: 		int	len;
1: 		int i;
1: 	
1: 		str = "TEST CASES\nNumber of Threads: "+numThreads;
1: 		str +="\nTime: "+time;
1: 		str +="\nNumber of Initializers: "+init.size()+"\n";
1: 		for (i = 0, len = init.size(); i < len; i++)
1: 		{
1: 			str += init.elementAt(i).toString() + "\n";
1: 		}
1: 
1: 		str +="\nNumber of Cases: "+cases.size()+"\n";
1: 		for (i = 0, len = cases.size(); i < len; i++)
1: 		{
1: 			str += cases.elementAt(i).toString() + "\n";
1: 		}
1: 
1: 		str +="\nNumber of Final Cases: "+last.size()+"\n";
1: 		for (i = 0, len = last.size(); i < len; i++)
1: 		{
1: 			str += last.elementAt(i).toString() + "\n";
1: 		}
1: 
1: 		return str;
1: 	}
1: 
1: 	/*
1: 	** Grab a test case.  Pick one randomly and
1: 	** try to grab that case.  If we get it we are
1: 	** done.  Otherwise, try try again.
1: 	*/
1: 	public mtTestCase grabTestCase() 
1: 	{
1: 		int numCases = cases.size();
1: 		int caseNum;
1: 		mtTestCase testCase;
1: 
1: 		do
1: 		{
1: 			caseNum = (int)((java.lang.Math.random() * 1311) % numCases);
1: 			testCase = (mtTestCase)cases.elementAt(caseNum);
1: 		}
1: 		while (testCase.grab() == false);
1: 	
1: 		return testCase;	
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import java.util.Vector;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.lang.Math;
0: 
0: /**
0:  */
0: public class mtTestSuite
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private Vector cases;
0: 	private Vector last;
0: 	private Vector init;
0: 	private mtTime time;
0: 	private int numThreads;
0: 	private String rootDir = null;
0: 
0: 
0: 	mtTestSuite(int numThreads, mtTime time, 
0: 			Vector initCases, Vector testCases, Vector finalCases)
0: 	{
0: 		this.numThreads = numThreads;
0: 		this.time = time;
0: 		this.cases = testCases;
0: 		this.init = initCases;
0: 		this.last = finalCases;
0: 	}
0: 
0: 	public void init()
0: 	{
0: 		boolean loadInitFailed = loadCases(init);
0: 		boolean loadTestsFailed = loadCases(cases);
0: 		boolean loadLastFailed = loadCases(last);
0: 
0: 		if ((loadInitFailed == true) ||
0: 			(loadTestsFailed == true) ||
0: 			(loadLastFailed == true))
0: 		{
0: 			throw new Error("Initialization Error");
0: 		}
0: 	}
0: 
0: 	/**
0: 	** @return boolean indicates if there was a problem loading
0: 	** 	the file
0: 	*/
0: 	private boolean loadCases(Vector cases)
0: 	{
0: 		if (cases == null)
0: 			return false;
0: 
0: 		boolean gotError = false;
0: 		Enumeration e = cases.elements();
0: 		mtTestCase tcase;
0:  
0: 		while (e.hasMoreElements())
0: 		{
0: 			tcase = (mtTestCase)e.nextElement();
0: 			try
0: 			{
0: 				tcase.initialize(rootDir);
0: 			}
0: 			catch (Throwable t)
0: 			{
0: 				gotError = true;
0: 			}
0: 		}
0: 
0: 		return gotError;
0: 	}
0: 
0: 	public void setRoot(String rootDir)
0: 	{
0: 		this.rootDir = rootDir;
0: 	}
0: 
0: 	public String getRoot()
0: 	{
0: 		return rootDir;
0: 	}
0: 
0: 	public int getNumThreads()
0: 	{
0: 		return numThreads;
0: 	}
0: 
0: 	public Vector getCases()
0: 	{
0: 		return cases;
0: 	}
0: 
0: 	public Vector getInitCases()
0: 	{
0: 		return init;
0: 	}
0: 
0: 	public Vector getFinalCases()
0: 	{
0: 		return last;
0: 	}
0: 
0: 	public mtTime getTime()
0: 	{
0: 		return time;
0: 	}
0: 
0: 	public long getTimeMillis()
0: 	{
0: 		return ((time.hours * 360) +
0: 				(time.minutes * 60) +
0: 				(time.seconds)) * 1000;
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		String str;
0: 		int	len;
0: 		int i;
0: 	
0: 		str = "TEST CASES\nNumber of Threads: "+numThreads;
0: 		str +="\nTime: "+time;
0: 		str +="\nNumber of Initializers: "+init.size()+"\n";
0: 		for (i = 0, len = init.size(); i < len; i++)
0: 		{
0: 			str += init.elementAt(i).toString() + "\n";
0: 		}
0: 
0: 		str +="\nNumber of Cases: "+cases.size()+"\n";
0: 		for (i = 0, len = cases.size(); i < len; i++)
0: 		{
0: 			str += cases.elementAt(i).toString() + "\n";
0: 		}
0: 
0: 		str +="\nNumber of Final Cases: "+last.size()+"\n";
0: 		for (i = 0, len = last.size(); i < len; i++)
0: 		{
0: 			str += last.elementAt(i).toString() + "\n";
0: 		}
0: 
0: 		return str;
0: 	}
0: 
0: 	/*
0: 	** Grab a test case.  Pick one randomly and
0: 	** try to grab that case.  If we get it we are
0: 	** done.  Otherwise, try try again.
0: 	*/
0: 	public mtTestCase grabTestCase() 
0: 	{
0: 		int numCases = cases.size();
0: 		int caseNum;
0: 		mtTestCase testCase;
0: 
0: 		do
0: 		{
0: 			caseNum = (int)((java.lang.Math.random() * 1311) % numCases);
0: 			testCase = (mtTestCase)cases.elementAt(caseNum);
0: 		}
0: 		while (testCase.grab() == false);
0: 	
0: 		return testCase;	
0: 	}
0: }
============================================================================