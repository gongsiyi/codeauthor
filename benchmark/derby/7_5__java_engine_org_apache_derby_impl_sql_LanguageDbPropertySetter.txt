1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.LanguageDbPropertySetter
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertySetCallback;
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:5ec8510: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:5ec8510: import org.apache.derby.iapi.services.context.ContextService;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:31bea46: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:eac0369: import java.io.Serializable;
1:eac0369: import java.util.Dictionary;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A class to handle setting language database properties
1:eac0369:  */
1:eac0369: public class LanguageDbPropertySetter implements PropertySetCallback
1:eac0369: {
1:eac0369: 	public void init(boolean dbOnly, Dictionary p) {
1:eac0369: 		// not called yet ...
1:eac0369: 	}
1:eac0369: 	/** @exception StandardException Thrown on error. */
1:eac0369: 	public boolean validate
1:eac0369: 	(
1:eac0369: 		String			key,
1:eac0369: 		Serializable	value,
1:eac0369: 		Dictionary		p
1:eac0369: 	) throws StandardException 
1:eac0369: 	{
1:31bea46:         // Can't change the dictionary version manually. That could make the database
1:31bea46:         // unbootable. See DERBY-5838.
1:31bea46: 		if ( key.trim().equals( DataDictionary.CORE_DATA_DICTIONARY_VERSION ) )
1:31bea46: 		{
1:31bea46:             throw StandardException.newException( SQLState.PROPERTY_UNSUPPORTED_CHANGE, key, value );
1:31bea46:         }
1:31bea46:         
1:5ec8510: 		// Disallow changing sqlAuthorization from true to false or null after
1:5ec8510: 		// switching to Standard authorization
1:5ec8510: 		if (key.trim().equals(Property.SQL_AUTHORIZATION_PROPERTY))
1:5ec8510: 		{
1:5ec8510: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
1:a0dbbd7: 					getContext(LanguageConnectionContext.CONTEXT_ID);
1:5ec8510: 
1:5ec8510: 			if (lcc.usesSqlAuthorization() && !Boolean.valueOf((String)value).booleanValue())
1:5ec8510: 				throw StandardException.newException(SQLState.PROPERTY_UNSUPPORTED_CHANGE,
1:5ec8510: 					key, value);
1:5ec8510: 		}
1:5ec8510: 
1:eac0369: 		if (key.equals(Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL)) {
1:eac0369: 			PropertyUtil.intPropertyValue(
1:eac0369: 						Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
1:eac0369: 						value,
1:eac0369: 						Property.MIN_LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
1:eac0369: 						Integer.MAX_VALUE,
1:eac0369: 						Property.DEFAULT_LANGUAGE_STALE_PLAN_CHECK_INTERVAL
1:eac0369: 						);
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Serviceable apply
1:eac0369: 	(
1:eac0369: 		String			key,
1:eac0369: 		Serializable	value,
1:eac0369: 		Dictionary		p
1:eac0369: 	) 
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369:  	public Serializable map
1:eac0369: 	(
1:eac0369: 		String			key,
1:eac0369: 		Serializable	value,
1:eac0369: 		Dictionary		p
1:eac0369: 	) 
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContext( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContext( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContext( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 					getContext(LanguageConnectionContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContext( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContext( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContext( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:31bea46
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
1:         // Can't change the dictionary version manually. That could make the database
1:         // unbootable. See DERBY-5838.
1: 		if ( key.trim().equals( DataDictionary.CORE_DATA_DICTIONARY_VERSION ) )
1: 		{
1:             throw StandardException.newException( SQLState.PROPERTY_UNSUPPORTED_CHANGE, key, value );
1:         }
1:         
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:5ec8510
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextService;
/////////////////////////////////////////////////////////////////////////
1: 		// Disallow changing sqlAuthorization from true to false or null after
1: 		// switching to Standard authorization
1: 		if (key.trim().equals(Property.SQL_AUTHORIZATION_PROPERTY))
1: 		{
1: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 					ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);
1: 
1: 			if (lcc.usesSqlAuthorization() && !Boolean.valueOf((String)value).booleanValue())
1: 				throw StandardException.newException(SQLState.PROPERTY_UNSUPPORTED_CHANGE,
1: 					key, value);
1: 		}
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.LanguageDbPropertySetter
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.services.property.PropertySetCallback;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: 
1: /**
1:  * A class to handle setting language database properties
1:  */
1: public class LanguageDbPropertySetter implements PropertySetCallback
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	public void init(boolean dbOnly, Dictionary p) {
1: 		// not called yet ...
1: 	}
1: 	/** @exception StandardException Thrown on error. */
1: 	public boolean validate
1: 	(
1: 		String			key,
1: 		Serializable	value,
1: 		Dictionary		p
1: 	) throws StandardException 
1: 	{
1: 		if (key.equals(Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL)) {
1: 			PropertyUtil.intPropertyValue(
1: 						Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
1: 						value,
1: 						Property.MIN_LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
1: 						Integer.MAX_VALUE,
1: 						Property.DEFAULT_LANGUAGE_STALE_PLAN_CHECK_INTERVAL
1: 						);
1: 			return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	public Serviceable apply
1: 	(
1: 		String			key,
1: 		Serializable	value,
1: 		Dictionary		p
1: 	) 
1: 	{
1: 		return null;
1: 	}
1: 
1:  	public Serializable map
1: 	(
1: 		String			key,
1: 		Serializable	value,
1: 		Dictionary		p
1: 	) 
1: 	{
1: 		return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.services.property.PropertySetCallback;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import java.io.Serializable;
0: import java.util.Dictionary;
0: 
0: /**
0:  * A class to handle setting language database properties
0:  */
0: public class LanguageDbPropertySetter implements PropertySetCallback
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	public void init(boolean dbOnly, Dictionary p) {
0: 		// not called yet ...
0: 	}
0: 	/** @exception StandardException Thrown on error. */
0: 	public boolean validate
0: 	(
0: 		String			key,
0: 		Serializable	value,
0: 		Dictionary		p
0: 	) throws StandardException 
0: 	{
0: 		if (key.equals(Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL)) {
0: 			PropertyUtil.intPropertyValue(
0: 						Property.LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
0: 						value,
0: 						Property.MIN_LANGUAGE_STALE_PLAN_CHECK_INTERVAL,
0: 						Integer.MAX_VALUE,
0: 						Property.DEFAULT_LANGUAGE_STALE_PLAN_CHECK_INTERVAL
0: 						);
0: 			return true;
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	public Serviceable apply
0: 	(
0: 		String			key,
0: 		Serializable	value,
0: 		Dictionary		p
0: 	) 
0: 	{
0: 		return null;
0: 	}
0: 
0:  	public Serializable map
0: 	(
0: 		String			key,
0: 		Serializable	value,
0: 		Dictionary		p
0: 	) 
0: 	{
0: 		return null;
0: 	}
0: }
============================================================================