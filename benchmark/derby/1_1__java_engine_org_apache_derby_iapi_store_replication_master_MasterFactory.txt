1:4aeada8: /*
1:864d9d1:  
1:4aeada8:    Derby - Class
1:1bac3f3:    org.apache.derby.iapi.store.replication.master.MasterFactory
4:4aeada8:  
1:4aeada8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4aeada8:    contributor license agreements.  See the NOTICE file distributed with
1:4aeada8:    this work for additional information regarding copyright ownership.
1:4aeada8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4aeada8:    (the "License"); you may not use this file except in compliance with
1:4aeada8:    the License.  You may obtain a copy of the License at
1:4aeada8:  
1:4aeada8:       http://www.apache.org/licenses/LICENSE-2.0
1:4aeada8:  
1:4aeada8:    Unless required by applicable law or agreed to in writing, software
1:4aeada8:    distributed under the License is distributed on an "AS IS" BASIS,
1:4aeada8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4aeada8:    See the License for the specific language governing permissions and
1:4aeada8:    limitations under the License.
1:4aeada8:  
1:4aeada8: */
1:0217bc6: 
1:1bac3f3: package org.apache.derby.iapi.store.replication.master;
1:4aeada8: 
1:4aeada8: import org.apache.derby.iapi.error.StandardException;
1:4aeada8: import org.apache.derby.iapi.reference.Property;
1:4aeada8: 
1:4aeada8: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:4aeada8: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:4aeada8: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:4aeada8: 
1:4aeada8: 
1:0217bc6: /**
1:4aeada8:  * <p> 
1:4aeada8:  * This is the interface for the replication master controller
1:4aeada8:  * service. The master controller service is booted when this instance
1:4aeada8:  * of Derby will have the replication master role for this database.
1:4aeada8:  * </p> 
1:4aeada8:  * <p> 
1:4aeada8:  * The replication master service is responsible for managing all
1:4aeada8:  * replication related functionality on the master side of replication.
1:4aeada8:  * This includes connecting to the slave, setting up a log buffer to
1:4aeada8:  * temporarily store log records from the LogFactory, and to ship
1:4aeada8:  * these log records to the slave.
1:4aeada8:  * </p> 
1:4aeada8:  * <p> 
1:4aeada8:  * The master controller currently only supports asynchronous
1:4aeada8:  * replication. This means that there are no guarantees that
1:4aeada8:  * transactions that have committed here (the master side) are also
1:4aeada8:  * reflected on the slave side. However, the slave version of the
1:4aeada8:  * database IS guaranteed to be transaction consistent. This implies
1:4aeada8:  * that: <br>
1:0f8eece:  *
1:4aeada8:  * <ul>
1:4aeada8:  *  <li>A transaction t that is committed on the master will either be
1:4aeada8:  *  fully reflected or not be reflected at all on the slave when the
1:4aeada8:  *  slave database is turned into a non-replicated database (that is,
1:4aeada8:  *  at failover time)</li>
1:c414a36:  *
1:4aeada8:  *  <li>Slave execution of operations is in the same serial order as
1:4aeada8:  *  on the master because replication is based on redoing log records
1:4aeada8:  *  to the slave. By definition, log records are in serial order. This
1:4aeada8:  *  implies that if transaction t1 commits before t2 on the master,
1:4aeada8:  *  and t2 has been committed on the slave, t1 is also guaranteed to
1:4aeada8:  *  have committed on the slave.</li>
1:4aeada8:  * </ul>
1:4aeada8:  * </p>
1:4aeada8:  */
1:4aeada8: public interface MasterFactory {
1:4aeada8: 
1:4aeada8:     /** The name of the Master Factory, used to boot the service.  */
1:4aeada8:     public static final String MODULE =
1:1bac3f3:         "org.apache.derby.iapi.store.replication.master.MasterFactory";
1:4aeada8: 
1:4aeada8:     /* Property names that are used as key values in the Properties objects*/
1:4aeada8:     
1:4aeada8:     /** Property key to specify replication mode */
1:4aeada8:     public static final String REPLICATION_MODE =
1:4aeada8:         Property.PROPERTY_RUNTIME_PREFIX + "replication.master.mode";
1:4aeada8: 
1:4aeada8:     /* Property values */
1:4aeada8: 
1:4aeada8:     /**
1:4aeada8:      * Property value used to indicate that the service should be
1:4aeada8:      * booted in asynchronous replication mode.
1:4aeada8:      */
1:4aeada8:     public static final String ASYNCHRONOUS_MODE =
1:4aeada8:         Property.PROPERTY_RUNTIME_PREFIX + "asynch";
1:4aeada8: 
1:4aeada8: 
1:4aeada8:     /* Methods */
1:4aeada8: 
1:4aeada8:     /**
1:4aeada8:      * Will perform all the work that is needed to set up replication
3:4aeada8:      *
1:4aeada8:      * @param rawStore The RawStoreFactory for the database
1:4aeada8:      * @param dataFac The DataFactory for this database
1:4aeada8:      * @param logFac The LogFactory ensuring recoverability for this database
1:fc4e76b:      * @param slavehost The hostname for the slave
1:fc4e76b:      * @param slaveport The port the slave is listening on
1:fc4e76b:      * @param dbname The master database that is being replicated.
1:c414a36:      * @exception StandardException Standard Derby exception policy,
1:c414a36:      * thrown on replication startup error. 
1:4aeada8:      */
1:4aeada8:     public void startMaster(RawStoreFactory rawStore,
1:fc4e76b:                             DataFactory dataFac,
1:fc4e76b:                             LogFactory logFac,
1:fc4e76b:                             String slavehost,
1:fc4e76b:                             int slaveport,
1:fc4e76b:                             String dbname)
1:fc4e76b:                             throws StandardException;
1:4aeada8: 
1:4aeada8:     /**
1:fc4e76b:      * Will perform all work that is needed to shut down replication.
1:fc4e76b:      *
1:fc4e76b:      * @throws StandardException If the replication master has been stopped
1:fc4e76b:      *                           already.
1:4aeada8:      */
1:fc4e76b:     public void stopMaster() throws StandardException;
1:4aeada8:     
1:4aeada8:     /**
1:0217bc6:      * Will perform all work needed to failover
1:fd20d6b:      *
1:fd20d6b:      * @throws StandardException 1) If the failover succeeds, an exception is
1:fd20d6b:      *                              thrown to indicate that the master database
1:fd20d6b:      *                              was shutdown after a successful failover
1:0217bc6:      *                           2) If a failure occurs during network 
1:0217bc6:      *                              communication with slave.
1:0217bc6:      */
1:0217bc6:     public void startFailover() throws StandardException;
1:4aeada8: 
1:4aeada8:     /**
1:5235dfd:      * Append a chunk of log records to the log buffer.
1:4aeada8:      *
1:5235dfd:      * @param greatestInstant   the instant of the log record that was
1:5235dfd:      *                          added last to this chunk of log
1:5235dfd:      * @param log               the chunk of log records
1:5235dfd:      * @param logOffset         offset in log to start copy from
1:5235dfd:      * @param logLength         number of bytes to copy, starting
1:5235dfd:      *                          from logOffset
1:4aeada8:      **/
1:5235dfd:     public void appendLog(long greatestInstant,
1:5235dfd:                           byte[] log, int logOffset, int logLength);
1:4aeada8: 
1:4aeada8:     /**
1:4aeada8:      * Used by the LogFactory to notify the replication master
1:4aeada8:      * controller that the log records up to this instant have been
1:4aeada8:      * flushed to disk. The master controller takes action according
1:4aeada8:      * to the current replication strategy when this method is called.
1:4aeada8:      *
1:4aeada8:      * When the asynchronous replication strategy is used, the method
1:4aeada8:      * does not force log shipping to the slave; the log records may
1:4aeada8:      * be shipped now or later at the MasterFactory's discretion.
1:4aeada8:      *
1:4aeada8:      * However, if another strategy like 2-safe replication is
1:4aeada8:      * implemented in the future, a call to this method may force log
1:4aeada8:      * shipment before returning control to the caller.
1:4aeada8:      *
1:4aeada8:      * Currently, only asynchronous replication is supported.
1:4aeada8:      *
1:4aeada8:      * @param instant The highest log instant that has been flushed to
1:4aeada8:      * disk
1:4aeada8:      * @see LogFactory#flush
1:4aeada8:      */
1:4aeada8:     public void flushedTo(long instant);
1:2146e78:     
1:2146e78:     /**
1:2146e78:      * Used to notify the log shipper that a log buffer element is full.
1:2146e78:      */
1:2146e78:     public void workToDo(); 
1:4aeada8: 
1:4aeada8: }
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    org.apache.derby.iapi.store.replication.master.MasterFactory
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.store.replication.master;
/////////////////////////////////////////////////////////////////////////
1:         "org.apache.derby.iapi.store.replication.master.MasterFactory";
commit:fc4e76b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param slavehost The hostname for the slave
1:      * @param slaveport The port the slave is listening on
1:      * @param dbname The master database that is being replicated.
1:                             DataFactory dataFac,
1:                             LogFactory logFac,
1:                             String slavehost,
1:                             int slaveport,
1:                             String dbname)
1:                             throws StandardException;
1:      * Will perform all work that is needed to shut down replication.
1:      *
1:      * @throws StandardException If the replication master has been stopped
1:      *                           already.
1:     public void stopMaster() throws StandardException;
commit:2146e78
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Used to notify the log shipper that a log buffer element is full.
1:      */
1:     public void workToDo(); 
commit:fd20d6b
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @throws StandardException 1) If the failover succeeds, an exception is
1:      *                              thrown to indicate that the master database
1:      *                              was shutdown after a successful failover
commit:0217bc6
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Will perform all work needed to failover
0:      * @throws StandardException 1) If the failover succeeds
1:      *                           2) If a failure occurs during network 
1:      *                              communication with slave.
1:      */
1:     public void startFailover() throws StandardException;
commit:019c40a
/////////////////////////////////////////////////////////////////////////
commit:0f8eece
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @throws StandardException Standard Derby exception policy,
0:      *                           thrown on replication stop failure.
commit:864d9d1
/////////////////////////////////////////////////////////////////////////
1:     
0:     /** Property key to specify the name of the database */
0:     public static final String MASTER_DB =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.master.dbname";
commit:5235dfd
/////////////////////////////////////////////////////////////////////////
1:      * Append a chunk of log records to the log buffer.
1:      * @param greatestInstant   the instant of the log record that was
1:      *                          added last to this chunk of log
1:      * @param log               the chunk of log records
1:      * @param logOffset         offset in log to start copy from
1:      * @param logLength         number of bytes to copy, starting
1:      *                          from logOffset
1:     public void appendLog(long greatestInstant,
1:                           byte[] log, int logOffset, int logLength);
commit:c414a36
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby exception policy,
1:      * thrown on replication startup error. 
0:                             DataFactory dataFac, LogFactory logFac)
0:         throws StandardException;
/////////////////////////////////////////////////////////////////////////
0:      * @param instant               the log address of this log record.
0:      * @param dataOffset            offset in data[] to start copying from.
0:      * @param optionalDataOffset    offset in optionalData[] to start copy from
0:      * @param optionalDataLength    number of bytes in optionalData[]
1:      *
0:     public void appendLogRecord(int dataLength,
0:                                 long instant,
0:                                 byte[] data,
0:                                 int dataOffset,
0:                                 byte[] optionalData, 
0:                                 int optionalDataLength);
commit:4aeada8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class
0:    org.apache.derby.iapi.services.replication.master.MasterFactory
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1: */
1: 
0: package org.apache.derby.iapi.services.replication.master;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: 
1: 
1: /**
1:  * <p> 
1:  * This is the interface for the replication master controller
1:  * service. The master controller service is booted when this instance
1:  * of Derby will have the replication master role for this database.
1:  * </p> 
1:  * <p> 
1:  * The replication master service is responsible for managing all
1:  * replication related functionality on the master side of replication.
1:  * This includes connecting to the slave, setting up a log buffer to
1:  * temporarily store log records from the LogFactory, and to ship
1:  * these log records to the slave.
1:  * </p> 
1:  * <p> 
1:  * The master controller currently only supports asynchronous
1:  * replication. This means that there are no guarantees that
1:  * transactions that have committed here (the master side) are also
1:  * reflected on the slave side. However, the slave version of the
1:  * database IS guaranteed to be transaction consistent. This implies
1:  * that: <br>
1:  *
1:  * <ul>
1:  *  <li>A transaction t that is committed on the master will either be
1:  *  fully reflected or not be reflected at all on the slave when the
1:  *  slave database is turned into a non-replicated database (that is,
1:  *  at failover time)</li>
1:  *
1:  *  <li>Slave execution of operations is in the same serial order as
1:  *  on the master because replication is based on redoing log records
1:  *  to the slave. By definition, log records are in serial order. This
1:  *  implies that if transaction t1 commits before t2 on the master,
1:  *  and t2 has been committed on the slave, t1 is also guaranteed to
1:  *  have committed on the slave.</li>
1:  * </ul>
1:  * </p>
1:  */
1: public interface MasterFactory {
1: 
1:     /** The name of the Master Factory, used to boot the service.  */
1:     public static final String MODULE =
0:         "org.apache.derby.iapi.services.replication.master.MasterFactory";
1: 
1:     /* Property names that are used as key values in the Properties objects*/
1: 
0:     /** Property key used to specify which slave host to connect to */
0:     public static final String SLAVE_HOST =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.master.slavehost";
1: 
0:     /** Property key to specify which slave port to connect to */
0:     public static final String SLAVE_PORT =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.master.slaveport";
1: 
1:     /** Property key to specify replication mode */
1:     public static final String REPLICATION_MODE =
1:         Property.PROPERTY_RUNTIME_PREFIX + "replication.master.mode";
1: 
1:     /* Property values */
1: 
1:     /**
1:      * Property value used to indicate that the service should be
1:      * booted in asynchronous replication mode.
1:      */
1:     public static final String ASYNCHRONOUS_MODE =
1:         Property.PROPERTY_RUNTIME_PREFIX + "asynch";
1: 
1: 
1:     /* Methods */
1: 
1:     /**
1:      * Will perform all the work that is needed to set up replication
1:      *
1:      * @param rawStore The RawStoreFactory for the database
1:      * @param dataFac The DataFactory for this database
1:      * @param logFac The LogFactory ensuring recoverability for this database
1:      */
1:     public void startMaster(RawStoreFactory rawStore,
0:                             DataFactory dataFac, LogFactory logFac);
1: 
1:     /**
0:      * Will perform all work that is needed to shut down replication
1:      */
0:     public void stopMaster();
1: 
1:     /**
0:      * Append a single log record to the replication log buffer.
1:      *
0:      * @param instant               the log address of this log record.
0:      * @param dataLength            number of bytes in data[]
0:      * @param dataOffset            offset in data[] to start copying from.
0:      * @param optionalDataLength    number of bytes in optionalData[]
0:      * @param optionalDataOffset    offset in optionalData[] to start copy from
0:      * @param data                  "from" array to copy "data" portion of rec
0:      * @param optionalData          "from" array to copy "optional data" from
1:      **/
0:     public void appendLogRecord(long instant, int dataLength,
0:                                 int dataOffset, int optionalDataLength,
0:                                 int optionalDataOffset,
0:                                 byte[] data, byte[] optionalData);
1: 
1:     /**
1:      * Used by the LogFactory to notify the replication master
1:      * controller that the log records up to this instant have been
1:      * flushed to disk. The master controller takes action according
1:      * to the current replication strategy when this method is called.
1:      *
1:      * When the asynchronous replication strategy is used, the method
1:      * does not force log shipping to the slave; the log records may
1:      * be shipped now or later at the MasterFactory's discretion.
1:      *
1:      * However, if another strategy like 2-safe replication is
1:      * implemented in the future, a call to this method may force log
1:      * shipment before returning control to the caller.
1:      *
1:      * Currently, only asynchronous replication is supported.
1:      *
1:      * @param instant The highest log instant that has been flushed to
1:      * disk
1:      * @see LogFactory#flush
1:      */
1:     public void flushedTo(long instant);
1: 
1: }
============================================================================