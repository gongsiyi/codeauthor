1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.context.Context
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.context;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Contexts are created and used to manage the execution
1:eac0369:  * environment. They provide a convenient location for
1:eac0369:  * storing globals organized by the module using the
1:eac0369:  * globals. 
1:eac0369:  * <p>
1:eac0369:  * A basic context implementation is provided as an abstract
1:eac0369:  * class; this implementation satisfies the interface and
1:eac0369:  * should in general be used as the supertype of all context
1:eac0369:  * types.  Otherwise, context classes must satisfy the
1:eac0369:  * semantics of the interface through their own distinct
1:eac0369:  * implementations.
1:eac0369:  * <p>
1:eac0369:  * Contexts assist in cleanup
1:eac0369:  * when errors are caught in the outer block.
1:eac0369:  * <p>
1:eac0369:  * Use of context cleanup is preferred over using try/catch
1:eac0369:  * blocks throughout the code.
1:eac0369:  * <p>
1:eac0369:  * Use of context pushing and popping is preferred over
1:eac0369:  * using many instance or local variables, even when try/catch is present.
1:eac0369:  * when the instance or local variables would be holding resources.
1:eac0369:  <P>
1:eac0369:  Usually Context's have a reference based equality, ie. they do not provide
1:eac0369:  an implementation of equals(). Contexts may implement a value based equality
1:eac0369:  but this usually means there is only one instance of the Context on the stack,
1:eac0369:  This is because the popContext(Context) will remove the most recently pushed
1:eac0369:  Context that matches via the equals method, not by a reference check.
1:eac0369:  Implementing equals is useful for Contexts used in notifyAllThreads() that
1:eac0369:  is not aimed at a single thread.
1:eac0369:  */
1:eac0369: public interface Context
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Returns the context manager that has stored this
1:eac0369: 	 * context in its stack.
1:eac0369: 	 */
1:eac0369: 	public ContextManager getContextManager();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the current id name associated
1:eac0369: 	 * with this context. Contexts are placed into
1:eac0369: 	 * stacks by id, in a context manager. Null
1:eac0369: 	 * if the context is not assigned to an id.
1:eac0369: 	 * Contexts known by context managers are always
1:eac0369: 	 * assigned to an id.
1:eac0369: 	 * <p>
1:eac0369: 	 * A default Id name should be defined in each
1:eac0369: 	 * specific context interface as a static final
1:eac0369: 	 * field with the name CONTEXT_ID. For example,
1:eac0369: 	 * see org.apache.derby.iapi.sql.compile.CompilerContext.CONTEXT_ID.
1:eac0369: 	 * @see org.apache.derby.iapi.sql.compile.CompilerContext
1:eac0369: 	 */
1:eac0369: 	public String getIdName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Contexts will be passed errors that are caught
1:eac0369: 	 * by the outer system when they are serious enough
1:eac0369: 	 * to require corrective action. They will be told
1:eac0369: 	 * what the error is, so that they can react appropriately.
1:eac0369: 	 * Most of the time, the contexts will react by either
1:eac0369: 	 * doing nothing or by removing themselves from the
1:eac0369: 	 * context manager. If there are no other references
1:eac0369: 	 * to the context, removing itself from the manager
1:eac0369: 	 * equates to freeing it.
1:913815a:      * <BR>
1:913815a:      * On an exception that is session severity or greater
1:913815a:      * the Context must push itself off the stack. This is
1:913815a:      * to ensure that after a session has been closed there
1:913815a:      * are no Contexts on the stack that potentially hold
1:913815a:      * references to objects, thus delaying their garbage
1:913815a:      * collection.
1:eac0369: 	 * <p>
1:eac0369: 	 * Contexts must release all their resources before
1:eac0369: 	 * removing themselves from their context manager.
1:eac0369: 	 * <p>
1:eac0369: 	 * The context manager 
1:eac0369: 	 * will "unwind" the contexts during cleanup in the
1:eac0369: 	 * reverse order they were placed on its global stack.
1:eac0369: 	 *
1:eac0369: 	 * <P>
1:eac0369: 	 * If error is an instance of StandardException then an implementation
1:eac0369: 	 * of this method may throw a new exception if and only if the new exception
1:eac0369: 	 * is an instance of StandardException that is more severe than the original error
1:eac0369: 	 * or the new exception is a not an instance of StandardException (e.g java.lang.NullPointerException).
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cleanup goes awry
1:eac0369: 	 */
1:eac0369: 	public void cleanupOnError(Throwable error)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Push myself onto my context stack.
1:eac0369: 	*/
1:eac0369: 	public void pushMe();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Pop myself of the context stack.
1:eac0369: 	*/
1:eac0369: 	public void popMe();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this context is the "last" handler for a
1:eac0369: 	 * the specified severity level.  Previously, the context manager would march
1:eac0369: 	 * through all of the contexts in cleanupOnError() and call each of 
1:eac0369: 	 * their cleanupOnError() methods.  That did not work with server side
1:eac0369: 	 * JDBC, especially for a StatementException, because outer contexts
1:eac0369: 	 * could get cleaned up incorrectly.  This functionality is specific
1:eac0369: 	 * to the Language system.  Any non-language system contexts should
1:eac0369: 	 * return ExceptionSeverity.NOT_APPLICABLE_SEVERITY.
1:eac0369: 	 *
1:eac0369: 	 * NOTE: Both the LanguageConnectionContext and the JDBC Connection Context are
1:eac0369: 	 * interested in session level errors because they both have clean up to do.
1:eac0369: 	 * This method allows both of them to return false so that all such handlers
1:eac0369: 	 * under them can do their clean up.
1:eac0369: 	 */
1:eac0369: 	public boolean isLastHandler(int severity);
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:913815a
/////////////////////////////////////////////////////////////////////////
1:      * <BR>
1:      * On an exception that is session severity or greater
1:      * the Context must push itself off the stack. This is
1:      * to ensure that after a session has been closed there
1:      * are no Contexts on the stack that potentially hold
1:      * references to objects, thus delaying their garbage
1:      * collection.
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.context.Context
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.context;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Contexts are created and used to manage the execution
1:  * environment. They provide a convenient location for
1:  * storing globals organized by the module using the
1:  * globals. 
1:  * <p>
1:  * A basic context implementation is provided as an abstract
1:  * class; this implementation satisfies the interface and
1:  * should in general be used as the supertype of all context
1:  * types.  Otherwise, context classes must satisfy the
1:  * semantics of the interface through their own distinct
1:  * implementations.
1:  * <p>
1:  * Contexts assist in cleanup
1:  * when errors are caught in the outer block.
1:  * <p>
1:  * Use of context cleanup is preferred over using try/catch
1:  * blocks throughout the code.
1:  * <p>
1:  * Use of context pushing and popping is preferred over
1:  * using many instance or local variables, even when try/catch is present.
1:  * when the instance or local variables would be holding resources.
1:  <P>
1:  Usually Context's have a reference based equality, ie. they do not provide
1:  an implementation of equals(). Contexts may implement a value based equality
1:  but this usually means there is only one instance of the Context on the stack,
1:  This is because the popContext(Context) will remove the most recently pushed
1:  Context that matches via the equals method, not by a reference check.
1:  Implementing equals is useful for Contexts used in notifyAllThreads() that
1:  is not aimed at a single thread.
1:  */
1: public interface Context
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Returns the context manager that has stored this
1: 	 * context in its stack.
1: 	 */
1: 	public ContextManager getContextManager();
1: 
1: 	/**
1: 	 * Returns the current id name associated
1: 	 * with this context. Contexts are placed into
1: 	 * stacks by id, in a context manager. Null
1: 	 * if the context is not assigned to an id.
1: 	 * Contexts known by context managers are always
1: 	 * assigned to an id.
1: 	 * <p>
1: 	 * A default Id name should be defined in each
1: 	 * specific context interface as a static final
1: 	 * field with the name CONTEXT_ID. For example,
1: 	 * see org.apache.derby.iapi.sql.compile.CompilerContext.CONTEXT_ID.
1: 	 * @see org.apache.derby.iapi.sql.compile.CompilerContext
1: 	 */
1: 	public String getIdName();
1: 
1: 	/**
1: 	 * Contexts will be passed errors that are caught
1: 	 * by the outer system when they are serious enough
1: 	 * to require corrective action. They will be told
1: 	 * what the error is, so that they can react appropriately.
1: 	 * Most of the time, the contexts will react by either
1: 	 * doing nothing or by removing themselves from the
1: 	 * context manager. If there are no other references
1: 	 * to the context, removing itself from the manager
1: 	 * equates to freeing it.
1: 	 * <p>
1: 	 * Contexts must release all their resources before
1: 	 * removing themselves from their context manager.
1: 	 * <p>
1: 	 * The context manager 
1: 	 * will "unwind" the contexts during cleanup in the
1: 	 * reverse order they were placed on its global stack.
1: 	 *
1: 	 * <P>
1: 	 * If error is an instance of StandardException then an implementation
1: 	 * of this method may throw a new exception if and only if the new exception
1: 	 * is an instance of StandardException that is more severe than the original error
1: 	 * or the new exception is a not an instance of StandardException (e.g java.lang.NullPointerException).
1: 	 *
1: 	 * @exception StandardException thrown if cleanup goes awry
1: 	 */
1: 	public void cleanupOnError(Throwable error)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Push myself onto my context stack.
1: 	*/
1: 	public void pushMe();
1: 
1: 	/**
1: 		Pop myself of the context stack.
1: 	*/
1: 	public void popMe();
1: 
1: 	/**
1: 	 * Return whether or not this context is the "last" handler for a
1: 	 * the specified severity level.  Previously, the context manager would march
1: 	 * through all of the contexts in cleanupOnError() and call each of 
1: 	 * their cleanupOnError() methods.  That did not work with server side
1: 	 * JDBC, especially for a StatementException, because outer contexts
1: 	 * could get cleaned up incorrectly.  This functionality is specific
1: 	 * to the Language system.  Any non-language system contexts should
1: 	 * return ExceptionSeverity.NOT_APPLICABLE_SEVERITY.
1: 	 *
1: 	 * NOTE: Both the LanguageConnectionContext and the JDBC Connection Context are
1: 	 * interested in session level errors because they both have clean up to do.
1: 	 * This method allows both of them to return false so that all such handlers
1: 	 * under them can do their clean up.
1: 	 */
1: 	public boolean isLastHandler(int severity);
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.context;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * Contexts are created and used to manage the execution
0:  * environment. They provide a convenient location for
0:  * storing globals organized by the module using the
0:  * globals. 
0:  * <p>
0:  * A basic context implementation is provided as an abstract
0:  * class; this implementation satisfies the interface and
0:  * should in general be used as the supertype of all context
0:  * types.  Otherwise, context classes must satisfy the
0:  * semantics of the interface through their own distinct
0:  * implementations.
0:  * <p>
0:  * Contexts assist in cleanup
0:  * when errors are caught in the outer block.
0:  * <p>
0:  * Use of context cleanup is preferred over using try/catch
0:  * blocks throughout the code.
0:  * <p>
0:  * Use of context pushing and popping is preferred over
0:  * using many instance or local variables, even when try/catch is present.
0:  * when the instance or local variables would be holding resources.
0:  <P>
0:  Usually Context's have a reference based equality, ie. they do not provide
0:  an implementation of equals(). Contexts may implement a value based equality
0:  but this usually means there is only one instance of the Context on the stack,
0:  This is because the popContext(Context) will remove the most recently pushed
0:  Context that matches via the equals method, not by a reference check.
0:  Implementing equals is useful for Contexts used in notifyAllThreads() that
0:  is not aimed at a single thread.
0:  */
0: public interface Context
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Returns the context manager that has stored this
0: 	 * context in its stack.
0: 	 */
0: 	public ContextManager getContextManager();
0: 
0: 	/**
0: 	 * Returns the current id name associated
0: 	 * with this context. Contexts are placed into
0: 	 * stacks by id, in a context manager. Null
0: 	 * if the context is not assigned to an id.
0: 	 * Contexts known by context managers are always
0: 	 * assigned to an id.
0: 	 * <p>
0: 	 * A default Id name should be defined in each
0: 	 * specific context interface as a static final
0: 	 * field with the name CONTEXT_ID. For example,
0: 	 * see org.apache.derby.iapi.sql.compile.CompilerContext.CONTEXT_ID.
0: 	 * @see org.apache.derby.iapi.sql.compile.CompilerContext
0: 	 */
0: 	public String getIdName();
0: 
0: 	/**
0: 	 * Contexts will be passed errors that are caught
0: 	 * by the outer system when they are serious enough
0: 	 * to require corrective action. They will be told
0: 	 * what the error is, so that they can react appropriately.
0: 	 * Most of the time, the contexts will react by either
0: 	 * doing nothing or by removing themselves from the
0: 	 * context manager. If there are no other references
0: 	 * to the context, removing itself from the manager
0: 	 * equates to freeing it.
0: 	 * <p>
0: 	 * Contexts must release all their resources before
0: 	 * removing themselves from their context manager.
0: 	 * <p>
0: 	 * The context manager 
0: 	 * will "unwind" the contexts during cleanup in the
0: 	 * reverse order they were placed on its global stack.
0: 	 *
0: 	 * <P>
0: 	 * If error is an instance of StandardException then an implementation
0: 	 * of this method may throw a new exception if and only if the new exception
0: 	 * is an instance of StandardException that is more severe than the original error
0: 	 * or the new exception is a not an instance of StandardException (e.g java.lang.NullPointerException).
0: 	 *
0: 	 * @exception StandardException thrown if cleanup goes awry
0: 	 */
0: 	public void cleanupOnError(Throwable error)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Push myself onto my context stack.
0: 	*/
0: 	public void pushMe();
0: 
0: 	/**
0: 		Pop myself of the context stack.
0: 	*/
0: 	public void popMe();
0: 
0: 	/**
0: 	 * Return whether or not this context is the "last" handler for a
0: 	 * the specified severity level.  Previously, the context manager would march
0: 	 * through all of the contexts in cleanupOnError() and call each of 
0: 	 * their cleanupOnError() methods.  That did not work with server side
0: 	 * JDBC, especially for a StatementException, because outer contexts
0: 	 * could get cleaned up incorrectly.  This functionality is specific
0: 	 * to the Language system.  Any non-language system contexts should
0: 	 * return ExceptionSeverity.NOT_APPLICABLE_SEVERITY.
0: 	 *
0: 	 * NOTE: Both the LanguageConnectionContext and the JDBC Connection Context are
0: 	 * interested in session level errors because they both have clean up to do.
0: 	 * This method allows both of them to return false so that all such handlers
0: 	 * under them can do their clean up.
0: 	 */
0: 	public boolean isLastHandler(int severity);
0: }
============================================================================