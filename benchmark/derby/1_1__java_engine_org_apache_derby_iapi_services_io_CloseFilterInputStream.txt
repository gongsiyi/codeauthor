1:b996023: /*
1:b996023: 
1:b996023:    Derby - Class org.apache.derby.iapi.services.io.CloseFilterInputStream
1:b996023: 
1:b996023:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b996023:    contributor license agreements.  See the NOTICE file distributed with
1:b996023:    this work for additional information regarding copyright ownership.
1:b996023:    The ASF licenses this file to You under the Apache License, Version 2.0
1:b996023:    (the "License"); you may not use this file except in compliance with
1:b996023:    the License.  You may obtain a copy of the License at
1:b996023: 
1:b996023:       http://www.apache.org/licenses/LICENSE-2.0
1:b996023: 
1:b996023:    Unless required by applicable law or agreed to in writing, software
1:b996023:    distributed under the License is distributed on an "AS IS" BASIS,
1:b996023:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b996023:    See the License for the specific language governing permissions and
1:b996023:    limitations under the License.
1:b996023: 
1:b996023: */
1:b996023: package org.apache.derby.iapi.services.io;
1:b996023: 
1:b996023: import java.io.FilterInputStream;
1:b996023: import java.io.IOException;
1:b996023: import java.io.InputStream;
1:b996023: 
1:b996023: import org.apache.derby.iapi.reference.MessageId;
1:b996023: import org.apache.derby.iapi.services.i18n.MessageService;
1:b996023: 
1:b996023: /**
1:b996023:  * A stream that will throw an exception if its methods are invoked after it
1:b996023:  * has been closed.
1:b996023:  */
1:b996023: public class CloseFilterInputStream
1:b996023:         extends FilterInputStream {
1:b996023: 
1:b996023:     /** Message, modeled after CloseFilterInputStream in the client. */
1:b996023:     private static final String MESSAGE =
1:2d1bc8f:             MessageService.getTextMessage(MessageId.OBJECT_CLOSED); 
1:b996023:     
1:b996023:     /** Tells if this stream has been closed. */
1:b996023:     private boolean closed;
1:b996023: 
1:b996023:     public CloseFilterInputStream(InputStream in) {
1:b996023:         super(in);
1:b996023:     }
1:b996023: 
1:b996023:     public void close() throws IOException {
1:b996023:         closed = true;        
1:b996023:         super.close();
1:b996023:     }
1:b996023: 
1:b996023:     public int available() throws IOException {
1:b996023:         checkIfClosed();
1:b996023:         return super.available();
1:b996023:     }
1:b996023: 
1:b996023:     public int read() throws IOException {
1:b996023:         checkIfClosed();
1:b996023:         return super.read();
1:b996023:     }
1:b996023: 
1:b996023:     public int read(byte[] b) throws IOException {
1:b996023:         checkIfClosed();
1:b996023:         return super.read(b);
1:b996023:     }
1:b996023: 
1:b996023:     public int read(byte[] b, int off, int len) throws IOException {
1:b996023:         checkIfClosed();
1:b996023:         return super.read(b, off, len);
1:b996023:     }
1:b996023: 
1:b996023:     public long skip(long n) throws IOException {
1:b996023:         checkIfClosed();
1:b996023:         return super.skip(n);
1:b996023:     }
1:b996023:     
1:b996023:     /** Throws exception if this stream has been closed. */
1:b996023:     private void checkIfClosed() throws IOException {
1:b996023:         if (closed) {
1:b996023:             throw new IOException(MESSAGE);
1:b996023:         }
1:b996023:     }
1:b996023: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:2d1bc8f
/////////////////////////////////////////////////////////////////////////
1:             MessageService.getTextMessage(MessageId.OBJECT_CLOSED); 
commit:b996023
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.io.CloseFilterInputStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: /**
1:  * A stream that will throw an exception if its methods are invoked after it
1:  * has been closed.
1:  */
1: public class CloseFilterInputStream
1:         extends FilterInputStream {
1: 
1:     /** Message, modeled after CloseFilterInputStream in the client. */
1:     private static final String MESSAGE =
0:             MessageService.getTextMessage(MessageId.CONN_ALREADY_CLOSED); 
1:     
1:     /** Tells if this stream has been closed. */
1:     private boolean closed;
1: 
1:     public CloseFilterInputStream(InputStream in) {
1:         super(in);
1:     }
1: 
1:     public void close() throws IOException {
1:         closed = true;        
1:         super.close();
1:     }
1: 
1:     public int available() throws IOException {
1:         checkIfClosed();
1:         return super.available();
1:     }
1: 
1:     public int read() throws IOException {
1:         checkIfClosed();
1:         return super.read();
1:     }
1: 
1:     public int read(byte[] b) throws IOException {
1:         checkIfClosed();
1:         return super.read(b);
1:     }
1: 
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         checkIfClosed();
1:         return super.read(b, off, len);
1:     }
1: 
1:     public long skip(long n) throws IOException {
1:         checkIfClosed();
1:         return super.skip(n);
1:     }
1:     
1:     /** Throws exception if this stream has been closed. */
1:     private void checkIfClosed() throws IOException {
1:         if (closed) {
1:             throw new IOException(MESSAGE);
1:         }
1:     }
1: }
============================================================================