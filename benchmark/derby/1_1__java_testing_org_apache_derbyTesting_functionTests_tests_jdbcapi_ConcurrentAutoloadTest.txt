1:7d6c180: /*
1:7d6c180: 
1:7d6c180: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrentAutoloadTest
1:7d6c180: 
1:7d6c180: Licensed to the Apache Software Foundation (ASF) under one or more
1:7d6c180: contributor license agreements.  See the NOTICE file distributed with
1:7d6c180: this work for additional information regarding copyright ownership.
1:7d6c180: The ASF licenses this file to you under the Apache License, Version 2.0
1:7d6c180: (the "License"); you may not use this file except in compliance with
1:7d6c180: the License.  You may obtain a copy of the License at
1:7d6c180: 
1:7d6c180:    http://www.apache.org/licenses/LICENSE-2.0
1:7d6c180: 
1:7d6c180: Unless required by applicable law or agreed to in writing, software
1:7d6c180: distributed under the License is distributed on an "AS IS" BASIS,
1:7d6c180: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d6c180: See the License for the specific language governing permissions and
1:7d6c180: limitations under the License.
1:7d6c180: 
1:7d6c180: */
1:7d6c180: 
1:7d6c180: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:7d6c180: 
1:7d6c180: import java.sql.DriverManager;
1:7d6c180: import java.util.ArrayList;
1:7d6c180: import java.util.Collections;
1:7d6c180: import java.util.List;
1:7d6c180: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:7d6c180: import org.apache.derbyTesting.junit.JDBC;
1:7d6c180: import org.apache.derbyTesting.junit.TestConfiguration;
1:7d6c180: 
1:7d6c180: /**
1:7d6c180:  * Test that autoloading works correctly also in the case where it's invoked
1:7d6c180:  * from two threads at the same time. This test case must run in a separate
1:7d6c180:  * JVM to make sure the driver hasn't already been loaded.
1:7d6c180:  */
1:7d6c180: public class ConcurrentAutoloadTest extends BaseJDBCTestCase {
1:7d6c180:     public ConcurrentAutoloadTest(String name) {
1:7d6c180:         super(name);
1:7d6c180:     }
1:7d6c180: 
1:7d6c180:     public void testConcurrentAutoloading() throws Exception {
1:7d6c180: 
1:7d6c180:         if (!TestConfiguration.loadingFromJars()) {
1:7d6c180:             // Autoloading only happens when running from jars.
1:7d6c180:             return;
1:7d6c180:         }
1:7d6c180: 
1:7d6c180:         if (!JDBC.vmSupportsJDBC41()) {
1:7d6c180:             // Only run this test case on JDBC 4.1 (Java 7) and newer. Although
1:7d6c180:             // autoloading is supposed to work on JDBC 4.0 (Java 6) too, there
1:7d6c180:             // is a bug on Java 6 that causes problems when autoloading happens
1:7d6c180:             // in multiple threads at once. See DERBY-4480.
1:7d6c180:             return;
1:7d6c180:         }
1:7d6c180: 
1:7d6c180:         TestConfiguration tc = getTestConfiguration();
1:7d6c180:         final String url = tc.getJDBCUrl() + ";create=true";
1:7d6c180:         final String user = tc.getUserName();
1:7d6c180:         final String pw = tc.getUserPassword();
1:7d6c180: 
1:e18f54b:         final List<Throwable> errors =
1:e18f54b:                 Collections.synchronizedList(new ArrayList<Throwable>());
1:7d6c180: 
1:7d6c180:         Runnable r = new Runnable() {
1:7d6c180:             public void run() {
1:7d6c180:                 try {
1:7d6c180:                     DriverManager.getConnection(url, user, pw);
1:7d6c180:                 } catch (Throwable t) {
1:7d6c180:                     errors.add(t);
1:7d6c180:                 }
1:7d6c180:             }
1:7d6c180:         };
1:7d6c180: 
1:7d6c180:         Thread t1 = new Thread(r);
1:7d6c180:         Thread t2 = new Thread(r);
1:7d6c180: 
1:7d6c180:         t1.start();
1:7d6c180:         t2.start();
1:7d6c180: 
1:7d6c180:         t1.join();
1:7d6c180:         t2.join();
1:7d6c180: 
1:7d6c180:         if (!errors.isEmpty()) {
1:7d6c180:             if (errors.size() > 1) {
1:7d6c180:                 // Since we can only link one exception to the assert failure,
1:7d6c180:                 // print all stack traces if we have multiple errors.
1:7d6c180:                 for (int i = 0; i < errors.size(); i++) {
1:7d6c180:                     printStackTrace((Throwable) errors.get(i));
1:7d6c180:                 }
1:7d6c180:             }
1:7d6c180:             fail("Thread failed", (Throwable) errors.get(0));
1:7d6c180:         }
1:7d6c180:     }
1:7d6c180: 
1:7d6c180: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:         final List<Throwable> errors =
1:                 Collections.synchronizedList(new ArrayList<Throwable>());
commit:7d6c180
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrentAutoloadTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.DriverManager;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that autoloading works correctly also in the case where it's invoked
1:  * from two threads at the same time. This test case must run in a separate
1:  * JVM to make sure the driver hasn't already been loaded.
1:  */
1: public class ConcurrentAutoloadTest extends BaseJDBCTestCase {
1:     public ConcurrentAutoloadTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testConcurrentAutoloading() throws Exception {
1: 
1:         if (!TestConfiguration.loadingFromJars()) {
1:             // Autoloading only happens when running from jars.
1:             return;
1:         }
1: 
1:         if (!JDBC.vmSupportsJDBC41()) {
1:             // Only run this test case on JDBC 4.1 (Java 7) and newer. Although
1:             // autoloading is supposed to work on JDBC 4.0 (Java 6) too, there
1:             // is a bug on Java 6 that causes problems when autoloading happens
1:             // in multiple threads at once. See DERBY-4480.
1:             return;
1:         }
1: 
1:         TestConfiguration tc = getTestConfiguration();
1:         final String url = tc.getJDBCUrl() + ";create=true";
1:         final String user = tc.getUserName();
1:         final String pw = tc.getUserPassword();
1: 
0:         final List errors = Collections.synchronizedList(new ArrayList());
1: 
1:         Runnable r = new Runnable() {
1:             public void run() {
1:                 try {
1:                     DriverManager.getConnection(url, user, pw);
1:                 } catch (Throwable t) {
1:                     errors.add(t);
1:                 }
1:             }
1:         };
1: 
1:         Thread t1 = new Thread(r);
1:         Thread t2 = new Thread(r);
1: 
1:         t1.start();
1:         t2.start();
1: 
1:         t1.join();
1:         t2.join();
1: 
1:         if (!errors.isEmpty()) {
1:             if (errors.size() > 1) {
1:                 // Since we can only link one exception to the assert failure,
1:                 // print all stack traces if we have multiple errors.
1:                 for (int i = 0; i < errors.size(); i++) {
1:                     printStackTrace((Throwable) errors.get(i));
1:                 }
1:             }
1:             fail("Thread failed", (Throwable) errors.get(0));
1:         }
1:     }
1: 
1: }
============================================================================