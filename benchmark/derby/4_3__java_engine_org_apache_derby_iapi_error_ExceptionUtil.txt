1:022cb5b: /*
1:022cb5b:    Derby - Class org.apache.derby.iapi.error.ExceptionUtil
2:022cb5b:  
1:022cb5b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:022cb5b:    contributor license agreements.  See the NOTICE file distributed with
1:022cb5b:    this work for additional information regarding copyright ownership.
1:022cb5b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:022cb5b:    (the "License"); you may not use this file except in compliance with
1:022cb5b:    the License.  You may obtain a copy of the License at
1:022cb5b:  
1:022cb5b:       http://www.apache.org/licenses/LICENSE-2.0
1:022cb5b:  
1:022cb5b:    Unless required by applicable law or agreed to in writing, software
1:022cb5b:    distributed under the License is distributed on an "AS IS" BASIS,
1:022cb5b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:022cb5b:    See the License for the specific language governing permissions and
1:022cb5b:    limitations under the License.
1:022cb5b:  
1:022cb5b:  */
1:022cb5b: package org.apache.derby.iapi.error;
1:022cb5b: /* Until DERBY-289 related issue settle for shared code
1:022cb5b:  * Engine have similar code as client code even though some of 
1:022cb5b:  * code is potentially sharable. If you fix a bug in ExceptionUtil for engine, 
1:022cb5b:  * please also change the code in 
1:022cb5b:  * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for 
1:022cb5b:  * client if necessary.
1:022cb5b:  */
1:022cb5b: 
1:022cb5b: import java.io.PrintWriter;
1:022cb5b: import java.io.StringWriter;
1:022cb5b: import java.lang.reflect.InvocationTargetException;
1:022cb5b: import java.lang.reflect.Method;
1:022cb5b: import java.security.AccessControlException;
1:022cb5b: import java.security.AccessController;
1:022cb5b: import java.security.PrivilegedActionException;
1:022cb5b: import java.security.PrivilegedExceptionAction;
1:af1c18c: import org.apache.derby.iapi.reference.SQLState;
1:022cb5b: import org.apache.derby.shared.common.error.ExceptionSeverity;
1:022cb5b: 
1:022cb5b: /**
1:022cb5b:  * This class provides utility routines for exceptions 
1:022cb5b:  */
1:022cb5b: public class ExceptionUtil
1:022cb5b: {
1:022cb5b: 
1:022cb5b: 
1:022cb5b:     /**
1:022cb5b:      *  Convert a message identifier from 
1:022cb5b:      *  org.apache.derby.shared.common.reference.SQLState to
1:022cb5b:      *  a SQLState five character string.
1:022cb5b:      *
1:022cb5b:      *	@param messageID - the sql state id of the message from Derby
1:022cb5b:      *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
1:022cb5b:      */
1:022cb5b:     public static String getSQLStateFromIdentifier(String messageID) {
1:022cb5b: 
1:022cb5b:         if (messageID.length() == 5)
1:022cb5b:             return messageID;
1:022cb5b:         return messageID.substring(0, 5);
1:022cb5b:     }
1:022cb5b:     
1:022cb5b:     /**
1:af1c18c:      * Get the severity given a message identifier from {@code SQLState}.
1:af1c18c:      *
1:af1c18c:      * @param messageID the string carrying the SQL state
1:af1c18c:      * @return the constant representing the severity, as defined in
1:af1c18c:      *        {@link org.apache.derby.iapi.error.ExceptionSeverity}.
1:022cb5b:      */
1:022cb5b:     public static int getSeverityFromIdentifier(String messageID) {
1:022cb5b: 
1:022cb5b:         int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
1:022cb5b: 
1:022cb5b:         switch (messageID.length()) {
1:022cb5b:         case 5:
1:022cb5b:             switch (messageID.charAt(0)) {
1:022cb5b:             case '0':
1:022cb5b:                 switch (messageID.charAt(1)) {
1:022cb5b:                 case '1':
1:022cb5b:                     lseverity = ExceptionSeverity.WARNING_SEVERITY;
1:022cb5b:                     break;
1:022cb5b:                 case 'A':
1:022cb5b:                 case '7':
1:022cb5b:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:022cb5b:                     break;
1:022cb5b:                 case '8':
1:022cb5b:                     lseverity = ExceptionSeverity.SESSION_SEVERITY;
1:022cb5b:                     break;
1:022cb5b:                 }
1:022cb5b:                 break;	
1:022cb5b:             case '2':
1:022cb5b:             case '3':
1:022cb5b:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case '4':
1:022cb5b:                 switch (messageID.charAt(1)) {
1:022cb5b:                 case '0':
1:022cb5b:                     lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
1:022cb5b:                     break;
1:022cb5b:                 case '2':
1:022cb5b:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:022cb5b:                     break;
1:022cb5b:                 }
1:022cb5b:                 break;	
1:022cb5b:             }
1:022cb5b:             break;
1:022cb5b: 
1:022cb5b:         default:
1:022cb5b:             switch (messageID.charAt(6)) {
1:022cb5b:             case 'M':
1:022cb5b:                 lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case 'D':
1:022cb5b:                 lseverity = ExceptionSeverity.DATABASE_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case 'C':
1:022cb5b:                 lseverity = ExceptionSeverity.SESSION_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case 'T':
1:022cb5b:                 lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case 'S':
1:022cb5b:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             case 'U':
1:022cb5b:                 lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
1:022cb5b:                 break;
1:022cb5b:             }
1:022cb5b:             break;
1:022cb5b:         }
1:022cb5b: 
1:022cb5b:         return lseverity;
1:022cb5b:     }
1:022cb5b: 
1:022cb5b:     /**
1:022cb5b:      * Dumps stack traces for all the threads if the JVM supports it.
1:022cb5b:      * The result is returned as a string, ready to print.
1:022cb5b:      *
1:022cb5b:      * If the JVM doesn't have the method Thread.getAllStackTraces
1:dbed020:      * i.e, we are on a JVM &lt; 1.5, or  if we don't have the permissions:
1:022cb5b:      * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
1:022cb5b:      * a message saying so is returned instead.
1:022cb5b:      *
1:022cb5b:      * @return stack traces for all live threads as a string or an error message.
1:022cb5b:      */
1:af1c18c:     @SuppressWarnings({"BroadCatchBlock", "TooBroadCatch", "UseSpecificCatch"})
1:022cb5b:     public static String dumpThreads() {
1:022cb5b: 
1:022cb5b:         StringWriter out = new StringWriter();
1:022cb5b:         PrintWriter p = new PrintWriter(out, true);
1:022cb5b: 
1:022cb5b:         //Try to get a thread dump and deal with various situations.
1:022cb5b:         try {
1:022cb5b:             //This checks that we are on a jvm >= 1.5 where we
1:022cb5b:             //can actually do threaddumps.
1:af1c18c:             Thread.class.getMethod("getAllStackTraces", new Class<?>[] {});
1:022cb5b: 
1:022cb5b:             //Then get the thread dump.
1:dfc9ab0:             Class<?> c = Class.forName("org.apache.derby.iapi.error.ThreadDump");
1:dfc9ab0:             final Method m = c.getMethod("getStackDumpString",new Class<?>[] {});
1:022cb5b: 
1:022cb5b:             String dump;
1:022cb5b: 
1:022cb5b:             dump = (String) AccessController.doPrivileged
1:dfc9ab0:             (new PrivilegedExceptionAction<Object>(){
1:022cb5b:                 public Object run() throws
1:022cb5b:                 IllegalArgumentException,
1:022cb5b:                 IllegalAccessException,
1:022cb5b:                 InvocationTargetException{
1:af1c18c:                     return m.invoke(null, (Object[]) null);
1:022cb5b:                 }
1:022cb5b:             }
1:022cb5b:             );
1:022cb5b: 
1:022cb5b:             //Print the dump to the message string. That went OK.
1:022cb5b:             p.print("---------------\nStack traces for all " +
1:022cb5b:             "live threads:");
1:022cb5b:             p.println("\n" + dump);
1:022cb5b:             p.println("---------------");
1:022cb5b:         } catch (NoSuchMethodException e) {
1:022cb5b:             p.println("(Skipping thread dump because it is not " +
1:022cb5b:             "supported on JVM 1.4)");
1:022cb5b: 
1:022cb5b:         } catch (Exception e) {
1:022cb5b:             if (e instanceof PrivilegedActionException &&
1:022cb5b:                 e.getCause() instanceof InvocationTargetException &&
1:022cb5b:                 e.getCause().getCause() instanceof AccessControlException){
1:022cb5b: 
1:022cb5b:                 p.println("(Skipping thread dump "
1:022cb5b:                         + "because of insufficient permissions:\n"
1:022cb5b:                         + e.getCause().getCause() + ")\n");
1:022cb5b:             } else {
1:022cb5b:                 p.println("\nAssertFailure tried to do a thread dump, but "
1:022cb5b:                         + "there was an error:");
1:022cb5b:                 e.getCause().printStackTrace(p);
1:022cb5b:             }
1:022cb5b:         }
1:022cb5b:         return out.toString();
1:022cb5b:     }
1:022cb5b: 
1:af1c18c:     /**
1:af1c18c:      * Determine if the given {@code SQLState} string constant is a deferred
1:af1c18c:      * constraint transactional error. If this is so, return {@code true}, else
1:af1c18c:      * return {@code false}.
1:af1c18c:      *
1:af1c18c:      * @param e the string with the SQL state
1:af1c18c:      * @return see method description
1:af1c18c:      */
1:af1c18c:     public static boolean isDeferredConstraintViolation(String e) {
1:af1c18c:         return
1:af1c18c:             e.equals(
1:af1c18c:                 ExceptionUtil.getSQLStateFromIdentifier(
1:af1c18c:                     SQLState.LANG_DEFERRED_DUPLICATE_KEY_CONSTRAINT_T)) ||
1:af1c18c:             e.equals(
1:af1c18c:                 ExceptionUtil.getSQLStateFromIdentifier(
1:af1c18c:                     SQLState.LANG_DEFERRED_CHECK_CONSTRAINT_T));
1:af1c18c:     }
1:022cb5b: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * i.e, we are on a JVM &lt; 1.5, or  if we don't have the permissions:
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
1:             Class<?> c = Class.forName("org.apache.derby.iapi.error.ThreadDump");
1:             final Method m = c.getMethod("getStackDumpString",new Class<?>[] {});
1:             (new PrivilegedExceptionAction<Object>(){
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:      * Get the severity given a message identifier from {@code SQLState}.
1:      *
1:      * @param messageID the string carrying the SQL state
1:      * @return the constant representing the severity, as defined in
1:      *        {@link org.apache.derby.iapi.error.ExceptionSeverity}.
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"BroadCatchBlock", "TooBroadCatch", "UseSpecificCatch"})
/////////////////////////////////////////////////////////////////////////
1:             Thread.class.getMethod("getAllStackTraces", new Class<?>[] {});
/////////////////////////////////////////////////////////////////////////
1:                     return m.invoke(null, (Object[]) null);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Determine if the given {@code SQLState} string constant is a deferred
1:      * constraint transactional error. If this is so, return {@code true}, else
1:      * return {@code false}.
1:      *
1:      * @param e the string with the SQL state
1:      * @return see method description
1:      */
1:     public static boolean isDeferredConstraintViolation(String e) {
1:         return
1:             e.equals(
1:                 ExceptionUtil.getSQLStateFromIdentifier(
1:                     SQLState.LANG_DEFERRED_DUPLICATE_KEY_CONSTRAINT_T)) ||
1:             e.equals(
1:                 ExceptionUtil.getSQLStateFromIdentifier(
1:                     SQLState.LANG_DEFERRED_CHECK_CONSTRAINT_T));
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:022cb5b
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.iapi.error.ExceptionUtil
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: package org.apache.derby.iapi.error;
1: /* Until DERBY-289 related issue settle for shared code
1:  * Engine have similar code as client code even though some of 
1:  * code is potentially sharable. If you fix a bug in ExceptionUtil for engine, 
1:  * please also change the code in 
1:  * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for 
1:  * client if necessary.
1:  */
1: 
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: 
1: import org.apache.derby.shared.common.error.ExceptionSeverity;
1: 
1: /**
1:  * This class provides utility routines for exceptions 
1:  */
1: public class ExceptionUtil
1: {
1: 
1: 
1:     /**
1:      *  Convert a message identifier from 
1:      *  org.apache.derby.shared.common.reference.SQLState to
1:      *  a SQLState five character string.
1:      *
1:      *	@param messageID - the sql state id of the message from Derby
1:      *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
1:      */
1:     public static String getSQLStateFromIdentifier(String messageID) {
1: 
1:         if (messageID.length() == 5)
1:             return messageID;
1:         return messageID.substring(0, 5);
1:     }
1:     
1:     /**
0:      * Get the severity given a message identifier from SQLState.
1:      */
1:     public static int getSeverityFromIdentifier(String messageID) {
1: 
1:         int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
1: 
1:         switch (messageID.length()) {
1:         case 5:
1:             switch (messageID.charAt(0)) {
1:             case '0':
1:                 switch (messageID.charAt(1)) {
1:                 case '1':
1:                     lseverity = ExceptionSeverity.WARNING_SEVERITY;
1:                     break;
1:                 case 'A':
1:                 case '7':
1:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:                     break;
1:                 case '8':
1:                     lseverity = ExceptionSeverity.SESSION_SEVERITY;
1:                     break;
1:                 }
1:                 break;	
1:             case '2':
1:             case '3':
1:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:                 break;
1:             case '4':
1:                 switch (messageID.charAt(1)) {
1:                 case '0':
1:                     lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
1:                     break;
1:                 case '2':
1:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:                     break;
1:                 }
1:                 break;	
1:             }
1:             break;
1: 
1:         default:
1:             switch (messageID.charAt(6)) {
1:             case 'M':
1:                 lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
1:                 break;
1:             case 'D':
1:                 lseverity = ExceptionSeverity.DATABASE_SEVERITY;
1:                 break;
1:             case 'C':
1:                 lseverity = ExceptionSeverity.SESSION_SEVERITY;
1:                 break;
1:             case 'T':
1:                 lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
1:                 break;
1:             case 'S':
1:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
1:                 break;
1:             case 'U':
1:                 lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
1:                 break;
1:             }
1:             break;
1:         }
1: 
1:         return lseverity;
1:     }
1: 
1:     /**
1:      * Dumps stack traces for all the threads if the JVM supports it.
1:      * The result is returned as a string, ready to print.
1:      *
1:      * If the JVM doesn't have the method Thread.getAllStackTraces
0:      * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:
1:      * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
1:      * a message saying so is returned instead.
1:      *
1:      * @return stack traces for all live threads as a string or an error message.
1:      */
1:     public static String dumpThreads() {
1: 
1:         StringWriter out = new StringWriter();
1:         PrintWriter p = new PrintWriter(out, true);
1: 
1:         //Try to get a thread dump and deal with various situations.
1:         try {
1:             //This checks that we are on a jvm >= 1.5 where we
1:             //can actually do threaddumps.
0:             Thread.class.getMethod("getAllStackTraces", new Class[] {});
1: 
1:             //Then get the thread dump.
0:             Class c = Class.forName("org.apache.derby.iapi.error.ThreadDump");
0:             final Method m = c.getMethod("getStackDumpString",new Class[] {});
1: 
1:             String dump;
1: 
1:             dump = (String) AccessController.doPrivileged
0:             (new PrivilegedExceptionAction(){
1:                 public Object run() throws
1:                 IllegalArgumentException,
1:                 IllegalAccessException,
1:                 InvocationTargetException{
0:                     return m.invoke(null, null);
1:                 }
1:             }
1:             );
1: 
1:             //Print the dump to the message string. That went OK.
1:             p.print("---------------\nStack traces for all " +
1:             "live threads:");
1:             p.println("\n" + dump);
1:             p.println("---------------");
1:         } catch (NoSuchMethodException e) {
1:             p.println("(Skipping thread dump because it is not " +
1:             "supported on JVM 1.4)");
1: 
1:         } catch (Exception e) {
1:             if (e instanceof PrivilegedActionException &&
1:                 e.getCause() instanceof InvocationTargetException &&
1:                 e.getCause().getCause() instanceof AccessControlException){
1: 
1:                 p.println("(Skipping thread dump "
1:                         + "because of insufficient permissions:\n"
1:                         + e.getCause().getCause() + ")\n");
1:             } else {
1:                 p.println("\nAssertFailure tried to do a thread dump, but "
1:                         + "there was an error:");
1:                 e.getCause().printStackTrace(p);
1:             }
1:         }
1:         return out.toString();
1:     }
1: 
1: }
author:Lily Wei
-------------------------------------------------------------------------------
commit:b175fd2
/////////////////////////////////////////////////////////////////////////
0: /*
0:    Derby - Class org.apache.derby.iapi.error.ExceptionUtil
0:  
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to you under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0:  
0:       http://www.apache.org/licenses/LICENSE-2.0
0:  
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0:  
0:  */
0: package org.apache.derby.iapi.error;
0: /* Until DERBY-289 related issue settle for shared code
0:  * Engine have similar code as client code even though some of 
0:  * code is potentially sharable. If you fix a bug in ExceptionUtil for engine, 
0:  * please also change the code in 
0:  * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for 
0:  * client if necessary.
0:  */
0: 
0: import java.io.PrintWriter;
0: import java.io.StringWriter;
0: import java.lang.reflect.InvocationTargetException;
0: import java.lang.reflect.Method;
0: import java.security.AccessControlException;
0: import java.security.AccessController;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: 
0: import org.apache.derby.shared.common.error.ExceptionSeverity;
0: 
0: /**
0:  * This class provides utility routines for exceptions 
0:  */
0: public class ExceptionUtil
0: {
0: 
0: 
0:     /**
0:      *  Convert a message identifier from 
0:      *  org.apache.derby.shared.common.reference.SQLState to
0:      *  a SQLState five character string.
0:      *
0:      *	@param messageID - the sql state id of the message from Derby
0:      *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
0:      */
0:     public static String getSQLStateFromIdentifier(String messageID) {
0: 
0:         if (messageID.length() == 5)
0:             return messageID;
0:         return messageID.substring(0, 5);
0:     }
0:     
0:     /**
0:      * Get the severity given a message identifier from SQLState.
0:      */
0:     public static int getSeverityFromIdentifier(String messageID) {
0: 
0:         int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
0: 
0:         switch (messageID.length()) {
0:         case 5:
0:             switch (messageID.charAt(0)) {
0:             case '0':
0:                 switch (messageID.charAt(1)) {
0:                 case '1':
0:                     lseverity = ExceptionSeverity.WARNING_SEVERITY;
0:                     break;
0:                 case 'A':
0:                 case '7':
0:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
0:                     break;
0:                 case '8':
0:                     lseverity = ExceptionSeverity.SESSION_SEVERITY;
0:                     break;
0:                 }
0:                 break;	
0:             case '2':
0:             case '3':
0:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
0:                 break;
0:             case '4':
0:                 switch (messageID.charAt(1)) {
0:                 case '0':
0:                     lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
0:                     break;
0:                 case '2':
0:                     lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
0:                     break;
0:                 }
0:                 break;	
0:             }
0:             break;
0: 
0:         default:
0:             switch (messageID.charAt(6)) {
0:             case 'M':
0:                 lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
0:                 break;
0:             case 'D':
0:                 lseverity = ExceptionSeverity.DATABASE_SEVERITY;
0:                 break;
0:             case 'C':
0:                 lseverity = ExceptionSeverity.SESSION_SEVERITY;
0:                 break;
0:             case 'T':
0:                 lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
0:                 break;
0:             case 'S':
0:                 lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
0:                 break;
0:             case 'U':
0:                 lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
0:                 break;
0:             }
0:             break;
0:         }
0: 
0:         return lseverity;
0:     }
0: 
0:     /**
0:      * Dumps stack traces for all the threads if the JVM supports it.
0:      * The result is returned as a string, ready to print.
0:      *
0:      * If the JVM doesn't have the method Thread.getAllStackTraces
0:      * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:
0:      * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
0:      * a message saying so is returned instead.
0:      *
0:      * @return stack traces for all live threads as a string or an error message.
0:      */
0:     public static String dumpThreads() {
0: 
0:         StringWriter out = new StringWriter();
0:         PrintWriter p = new PrintWriter(out, true);
0: 
0:         //Try to get a thread dump and deal with various situations.
0:         try {
0:             //This checks that we are on a jvm >= 1.5 where we
0:             //can actually do threaddumps.
0:             Thread.class.getMethod("getAllStackTraces", new Class[] {});
0: 
0:             //Then get the thread dump.
0:             Class c = Class.forName("org.apache.derby.iapi.error.ThreadDump");
0:             final Method m = c.getMethod("getStackDumpString",new Class[] {});
0: 
0:             String dump;
0: 
0:             dump = (String) AccessController.doPrivileged
0:             (new PrivilegedExceptionAction(){
0:                 public Object run() throws
0:                 IllegalArgumentException,
0:                 IllegalAccessException,
0:                 InvocationTargetException{
0:                     return m.invoke(null, null);
0:                 }
0:             }
0:             );
0: 
0:             //Print the dump to the message string. That went OK.
0:             p.print("---------------\nStack traces for all " +
0:             "live threads:");
0:             p.println("\n" + dump);
0:             p.println("---------------");
0:         } catch (NoSuchMethodException e) {
0:             p.println("(Skipping thread dump because it is not " +
0:             "supported on JVM 1.4)");
0: 
0:         } catch (Exception e) {
0:             if (e instanceof PrivilegedActionException &&
0:                 e.getCause() instanceof InvocationTargetException &&
0:                 e.getCause().getCause() instanceof AccessControlException){
0: 
0:                 p.println("(Skipping thread dump "
0:                         + "because of insufficient permissions:\n"
0:                         + e.getCause().getCause() + ")\n");
0:             } else {
0:                 p.println("\nAssertFailure tried to do a thread dump, but "
0:                         + "there was an error:");
0:                 e.getCause().printStackTrace(p);
0:             }
0:         }
0:         return out.toString();
0:     }
0: 
0: }
============================================================================