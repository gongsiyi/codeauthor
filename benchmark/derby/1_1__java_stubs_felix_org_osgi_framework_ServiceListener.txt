1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceListener.java,v 1.15 2007/02/20 00:16:30 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.EventListener;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A <code>ServiceEvent</code> listener. <code>ServiceListener</code> is a
1:a8b6921:  * listener interface that may be implemented by a bundle developer. When a
1:a8b6921:  * <code>ServiceEvent</code> is fired, it is synchronously delivered to a
1:a8b6921:  * <code>ServiceListener</code>. The Framework may deliver
1:a8b6921:  * <code>ServiceEvent</code> objects to a <code>ServiceListener</code> out
1:a8b6921:  * of order and may concurrently call and/or reenter a
1:a8b6921:  * <code>ServiceListener</code>.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * A <code>ServiceListener</code> object is registered with the Framework
1:a8b6921:  * using the <code>BundleContext.addServiceListener</code> method.
1:a8b6921:  * <code>ServiceListener</code> objects are called with a
1:a8b6921:  * <code>ServiceEvent</code> object when a service is registered, modified, or
1:a8b6921:  * is in the process of unregistering.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>ServiceEvent</code> object delivery to <code>ServiceListener</code>
1:a8b6921:  * objects is filtered by the filter specified when the listener was registered.
1:a8b6921:  * If the Java Runtime Environment supports permissions, then additional
1:a8b6921:  * filtering is done. <code>ServiceEvent</code> objects are only delivered to
1:a8b6921:  * the listener if the bundle which defines the listener object's class has the
1:a8b6921:  * appropriate <code>ServicePermission</code> to get the service using at
1:a8b6921:  * least one of the named classes under which the service was registered.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>ServiceEvent</code> object delivery to <code>ServiceListener</code>
1:a8b6921:  * objects is further filtered according to package sources as defined in
1:a8b6921:  * {@link ServiceReference#isAssignableTo(Bundle, String)}.
1:a8b6921:  * 
1:a8b6921:  * @see ServiceEvent
1:a8b6921:  * @see ServicePermission
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.15 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface ServiceListener extends EventListener {
1:a8b6921: 	/**
1:a8b6921: 	 * Receives notification that a service has had a lifecycle change.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param event The <code>ServiceEvent</code> object.
1:a8b6921: 	 */
1:a8b6921: 	public void serviceChanged(ServiceEvent event);
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceListener.java,v 1.15 2007/02/20 00:16:30 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.EventListener;
1: 
1: /**
1:  * A <code>ServiceEvent</code> listener. <code>ServiceListener</code> is a
1:  * listener interface that may be implemented by a bundle developer. When a
1:  * <code>ServiceEvent</code> is fired, it is synchronously delivered to a
1:  * <code>ServiceListener</code>. The Framework may deliver
1:  * <code>ServiceEvent</code> objects to a <code>ServiceListener</code> out
1:  * of order and may concurrently call and/or reenter a
1:  * <code>ServiceListener</code>.
1:  * 
1:  * <p>
1:  * A <code>ServiceListener</code> object is registered with the Framework
1:  * using the <code>BundleContext.addServiceListener</code> method.
1:  * <code>ServiceListener</code> objects are called with a
1:  * <code>ServiceEvent</code> object when a service is registered, modified, or
1:  * is in the process of unregistering.
1:  * 
1:  * <p>
1:  * <code>ServiceEvent</code> object delivery to <code>ServiceListener</code>
1:  * objects is filtered by the filter specified when the listener was registered.
1:  * If the Java Runtime Environment supports permissions, then additional
1:  * filtering is done. <code>ServiceEvent</code> objects are only delivered to
1:  * the listener if the bundle which defines the listener object's class has the
1:  * appropriate <code>ServicePermission</code> to get the service using at
1:  * least one of the named classes under which the service was registered.
1:  * 
1:  * <p>
1:  * <code>ServiceEvent</code> object delivery to <code>ServiceListener</code>
1:  * objects is further filtered according to package sources as defined in
1:  * {@link ServiceReference#isAssignableTo(Bundle, String)}.
1:  * 
1:  * @see ServiceEvent
1:  * @see ServicePermission
1:  * @ThreadSafe
1:  * @version $Revision: 1.15 $
1:  */
1: 
1: public interface ServiceListener extends EventListener {
1: 	/**
1: 	 * Receives notification that a service has had a lifecycle change.
1: 	 * 
1: 	 * @param event The <code>ServiceEvent</code> object.
1: 	 */
1: 	public void serviceChanged(ServiceEvent event);
1: }
============================================================================