1:6de7104: /*
2:6de7104: 
1:6de7104:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.checkPoint
1:6de7104: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:6de7104: 
1:6de7104:       http://www.apache.org/licenses/LICENSE-2.0
1:6de7104: 
1:6de7104:    Unless required by applicable law or agreed to in writing, software
1:6de7104:    distributed under the License is distributed on an "AS IS" BASIS,
1:6de7104:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6de7104:    See the License for the specific language governing permissions and
1:6de7104:    limitations under the License.
1:6de7104: 
1:6de7104:  */
1:6de7104: 
1:6de7104: package org.apache.derbyTesting.functionTests.tests.store;
1:6de7104: import java.io.File;
1:6de7104: import java.io.ByteArrayInputStream;
1:6de7104: 
1:6de7104: import java.math.BigDecimal;
1:6de7104: 
1:6de7104: import java.sql.Connection;
1:6de7104: import java.sql.DriverManager;
1:6de7104: import java.sql.SQLException;
1:6de7104: import java.sql.PreparedStatement;
1:6de7104: import java.sql.ResultSet;
1:6de7104: import java.sql.Statement;
1:6de7104: import org.apache.derby.tools.ij;
1:6de7104: import org.apache.derby.tools.JDBCDisplayUtil;
1:6de7104: 
1:6de7104: /**
1:6de7104:  * Test to make sure checkpoint or occuring as expected.
1:6de7104:  * Check is done by looking at the timestamp for "log.ctrl" file,
1:6de7104:  * If modified time is more than what it was in the last lookup
1:6de7104:  * means , we know that checkpoint occured.
1:6de7104:  * Other thing that is counted is in this program is number of log switches.
1:6de7104:  */
1:6de7104: 
1:6de7104: public class checkPoint
1:6de7104: {
1:6de7104:  
1:6de7104:     public static void main( String args[])
1:6de7104:     {
1:6de7104: 		System.out.println("Test checkpoint starting");
1:6de7104: 		
1:6de7104:         try
1:6de7104:         {
1:6de7104: 			// use the ij utility to read the property file and
1:6de7104: 			// make the initial connection.
1:6de7104: 			ij.getPropertyArg(args);
1:6de7104: 			Connection conn = ij.startJBMS();
1:6de7104: 
1:6de7104: 			//open all the internal derby files involved in this test.
1:6de7104: 			setupAllTestFiles();
1:6de7104: 
1:6de7104:             Statement stmt = conn.createStatement();
1:6de7104: 			stmt.executeUpdate("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.T_Access.waitForPostCommitToFinish' PARAMETER STYLE JAVA");
1:6de7104: 
1:6de7104:             stmt.executeUpdate( "create table t1(" + 
1:6de7104: 								"c1 int not null primary key , c2 varchar(200) not null unique , c3 char(200) not null unique)");
1:6de7104:             conn.setAutoCommit(true);
1:6de7104: 			String  ins_string = "insert into t1 values(?,?,?)";
1:6de7104: 			PreparedStatement insStmt = conn.prepareStatement(ins_string);
1:6de7104: 			//wait to make sure that checkpoint thread finished it's work
1:6de7104: 			stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
1:6de7104: 			stmt.executeUpdate("call WAIT_FOR_POST_COMMIT()");
1:6de7104: 			checkpointOccured();
1:6de7104: 			boolean modifiedIntervals = false;
1:6de7104: 			for(int uniqueid =0 ; uniqueid < 3500 ; uniqueid++)
1:6de7104: 			{
1:6de7104: 				insStmt.setLong(1, uniqueid);
1:6de7104: 				insStmt.setString(2, "IBM GREAT COMPANY " + uniqueid);
1:6de7104: 				insStmt.setString(3, "IBM GREAT COMPANY " + uniqueid);
1:6de7104: 				insStmt.executeUpdate();
1:6de7104: 				
1:6de7104: 				//check every 300 rows inserted  how many log files
1:6de7104: 				//are there and whether a  checkpoint occured
1:6de7104: 				if((uniqueid % 400) == 0)
1:6de7104: 				{
1:6de7104: 					System.out.println("Checking logs and Checkpoint at Insert:"
1:6de7104: 									   + uniqueid);
1:6de7104: 					//wait to make sure that checkpoint thread finished it's work
1:6de7104: 					stmt.executeUpdate("call WAIT_FOR_POST_COMMIT()");
1:6de7104: 					checkpointOccured();
1:6de7104: 				}
1:6de7104: 
1:6de7104: 				//change the checkpointInterval and LogInterval to equal values
1:6de7104: 				if(uniqueid > 2500 && !modifiedIntervals)
1:6de7104: 				{
1:6de7104: 					ResultSet rs;
1:6de7104: 					System.out.println("Modifying the checkpoint/log intervals");
1:6de7104: 					//modify the values.
1:6de7104: 					String value = "150001";
1:6de7104: 					stmt.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:6de7104: 									   "('derby.storage.logSwitchInterval', " +
1:6de7104: 									   "'" + value + "'"+ ")");
1:6de7104: 					stmt.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:6de7104: 									   "('derby.storage.checkpointInterval', " +
1:6de7104: 									   "'" + value + "'" + ")");
1:6de7104: 					rs	= 
1:6de7104: 						stmt.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" +
1:6de7104: 										  "('derby.storage.checkpointInterval')");
1:6de7104: 					while(rs.next()){
1:6de7104: 						System.out.println("checkPointInterval:" + rs.getString(1));
1:6de7104: 					}
1:6de7104: 					
1:6de7104: 					rs =stmt.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" +
1:6de7104: 										  "('derby.storage.logSwitchInterval')");
1:6de7104: 					while(rs.next()){
1:6de7104: 						System.out.println("logSwitchInterval:" + rs.getString(1));
1:6de7104: 					}
1:6de7104: 
1:6de7104: 					modifiedIntervals = true;
1:6de7104: 				}
1:6de7104: 			}
1:6de7104: 			
1:6de7104: 			//print the number of the last log file
1:6de7104: 			//to make sure we are creating too many log files.
1:6de7104: 			numberOfLogFiles();
1:6de7104: 			conn.commit();
1:6de7104: 			stmt.close();
1:6de7104:             insStmt.close();
1:6de7104:             conn.close();
1:6de7104:         }
1:6de7104:         catch( SQLException e)
1:6de7104:         {
1:6de7104: 			dumpSQLExceptions(e);
1:6de7104: 		} catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		//shutdown the database ..
1:6de7104: 		try{
1:6de7104: 			//shutdown 
1:6de7104: 			Connection conn = DriverManager.getConnection("jdbc:derby:wombat;shutdown=true");
1:6de7104: 		}catch(SQLException se){
1:6de7104: 				if (se.getSQLState() != null && se.getSQLState().equals("08006"))
1:6de7104: 					System.out.println("database shutdown properly\n");
1:6de7104: 				else
1:6de7104: 					dumpSQLExceptions(se);
1:6de7104: 		} catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		System.out.println("Test checkpoint finished");
1:6de7104:     }
1:6de7104: 
1:6de7104: 	
1:6de7104: 	static private void dumpSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("FAIL -- unexpected exception: " + se.toString());
1:6de7104: 		while (se != null) {
1:6de7104: 			System.out.print("SQLSTATE("+se.getSQLState()+"):");
1:6de7104: 			se = se.getNextException();
1:6de7104: 		}
1:6de7104: 	}
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 	//utility routines to trach number of log files
1:6de7104: 	//and checkpoints.
1:6de7104: 	private static String derbyHome;
1:6de7104: 	private static File dbDir ;
1:6de7104: 	private static File logDir;
1:6de7104: 	private static File logControlFile;
1:6de7104: 	private static long lastCheckPointTime = 0;
1:6de7104: 
1:6de7104: 	private static void setupAllTestFiles()
1:6de7104: 	{
1:6de7104: 		derbyHome = System.getProperty("derby.system.home");
1:6de7104: 		dbDir = new File(derbyHome, "wombat");
1:6de7104: 		logDir = new File(dbDir , "log");
1:6de7104: 		logControlFile = new File(logDir , "log.ctrl");
1:6de7104: 		lastCheckPointTime = logControlFile.lastModified();
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	private static boolean checkpointOccured()
1:6de7104: 	{
1:6de7104: 		long currentModifiedTime = logControlFile.lastModified();
1:6de7104: 		if(currentModifiedTime > lastCheckPointTime)
1:6de7104: 		{
1:6de7104: 			lastCheckPointTime = currentModifiedTime ;
1:6de7104: 			System.out.println("CHECKPOINT WAS DONE");
1:6de7104: 			return true;
1:6de7104: 		}
1:6de7104: 		
1:6de7104: 		return false;
1:6de7104: 	}
1:6de7104: 
1:6de7104: 
1:6de7104: 	private static int numberOfLogFiles()
1:6de7104: 	{
1:6de7104: 		//find out how many log files are in logDir
1:6de7104: 		//-2 (control files log.ctrl, logmirror.ctrl)
1:6de7104: 		File[] logFiles = logDir.listFiles();
1:6de7104: 		int noFiles = (logFiles == null) ? 0 : logFiles.length;
1:6de7104: 		String lastLogFile ="";
1:6de7104: 		for(int i = 0 ; i < noFiles ; i++)
1:6de7104: 		{
1:6de7104: 			String current = logFiles[i].getName() ;
1:6de7104: 			if(current.compareTo("log.ctrl")==0 || current.compareTo("logmirror.ctrl")==0)
1:6de7104: 				continue;
1:6de7104: 			if(current.compareTo(lastLogFile) > 0)
1:6de7104: 				lastLogFile = current;
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		if(lastLogFile.compareTo("log21.dat") > 0)
1:6de7104: 		{
1:6de7104: 			System.out.println("There seems to be too many log files");
1:6de7104: 			System.out.println(lastLogFile);
1:6de7104: 		}
1:6de7104: 		logFiles = null;
1:6de7104: 		return noFiles -2 ;
1:6de7104: 
1:6de7104: 
1:6de7104: 	}
1:6de7104:     
1:6de7104: }        
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
1:6de7104: 
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6de7104
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.checkPoint
1: 
0:    Copyright 2003, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.io.File;
1: import java.io.ByteArrayInputStream;
1: 
1: import java.math.BigDecimal;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  * Test to make sure checkpoint or occuring as expected.
1:  * Check is done by looking at the timestamp for "log.ctrl" file,
1:  * If modified time is more than what it was in the last lookup
1:  * means , we know that checkpoint occured.
1:  * Other thing that is counted is in this program is number of log switches.
0:  * @author suresht
1:  */
1: 
1: public class checkPoint
1: {
1:  
1:     public static void main( String args[])
1:     {
1: 		System.out.println("Test checkpoint starting");
1: 		
1:         try
1:         {
1: 			// use the ij utility to read the property file and
1: 			// make the initial connection.
1: 			ij.getPropertyArg(args);
1: 			Connection conn = ij.startJBMS();
1: 
1: 			//open all the internal derby files involved in this test.
1: 			setupAllTestFiles();
1: 
1:             Statement stmt = conn.createStatement();
1: 			stmt.executeUpdate("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.T_Access.waitForPostCommitToFinish' PARAMETER STYLE JAVA");
1: 
1:             stmt.executeUpdate( "create table t1(" + 
1: 								"c1 int not null primary key , c2 varchar(200) not null unique , c3 char(200) not null unique)");
1:             conn.setAutoCommit(true);
1: 			String  ins_string = "insert into t1 values(?,?,?)";
1: 			PreparedStatement insStmt = conn.prepareStatement(ins_string);
1: 			//wait to make sure that checkpoint thread finished it's work
1: 			stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
1: 			stmt.executeUpdate("call WAIT_FOR_POST_COMMIT()");
1: 			checkpointOccured();
1: 			boolean modifiedIntervals = false;
1: 			for(int uniqueid =0 ; uniqueid < 3500 ; uniqueid++)
1: 			{
1: 				insStmt.setLong(1, uniqueid);
1: 				insStmt.setString(2, "IBM GREAT COMPANY " + uniqueid);
1: 				insStmt.setString(3, "IBM GREAT COMPANY " + uniqueid);
1: 				insStmt.executeUpdate();
1: 				
1: 				//check every 300 rows inserted  how many log files
1: 				//are there and whether a  checkpoint occured
1: 				if((uniqueid % 400) == 0)
1: 				{
1: 					System.out.println("Checking logs and Checkpoint at Insert:"
1: 									   + uniqueid);
1: 					//wait to make sure that checkpoint thread finished it's work
1: 					stmt.executeUpdate("call WAIT_FOR_POST_COMMIT()");
1: 					checkpointOccured();
1: 				}
1: 
1: 				//change the checkpointInterval and LogInterval to equal values
1: 				if(uniqueid > 2500 && !modifiedIntervals)
1: 				{
1: 					ResultSet rs;
1: 					System.out.println("Modifying the checkpoint/log intervals");
1: 					//modify the values.
1: 					String value = "150001";
1: 					stmt.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1: 									   "('derby.storage.logSwitchInterval', " +
1: 									   "'" + value + "'"+ ")");
1: 					stmt.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1: 									   "('derby.storage.checkpointInterval', " +
1: 									   "'" + value + "'" + ")");
1: 					rs	= 
1: 						stmt.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" +
1: 										  "('derby.storage.checkpointInterval')");
1: 					while(rs.next()){
1: 						System.out.println("checkPointInterval:" + rs.getString(1));
1: 					}
1: 					
1: 					rs =stmt.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" +
1: 										  "('derby.storage.logSwitchInterval')");
1: 					while(rs.next()){
1: 						System.out.println("logSwitchInterval:" + rs.getString(1));
1: 					}
1: 
1: 					modifiedIntervals = true;
1: 				}
1: 			}
1: 			
1: 			//print the number of the last log file
1: 			//to make sure we are creating too many log files.
1: 			numberOfLogFiles();
1: 			conn.commit();
1: 			stmt.close();
1:             insStmt.close();
1:             conn.close();
1:         }
1:         catch( SQLException e)
1:         {
1: 			dumpSQLExceptions(e);
1: 		} catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1: 		}
1: 
1: 		//shutdown the database ..
1: 		try{
1: 			//shutdown 
1: 			Connection conn = DriverManager.getConnection("jdbc:derby:wombat;shutdown=true");
1: 		}catch(SQLException se){
1: 				if (se.getSQLState() != null && se.getSQLState().equals("08006"))
1: 					System.out.println("database shutdown properly\n");
1: 				else
1: 					dumpSQLExceptions(se);
1: 		} catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1: 		}
1: 
1: 		System.out.println("Test checkpoint finished");
1:     }
1: 
1: 	
1: 	static private void dumpSQLExceptions (SQLException se) {
1: 		System.out.println("FAIL -- unexpected exception: " + se.toString());
1: 		while (se != null) {
1: 			System.out.print("SQLSTATE("+se.getSQLState()+"):");
1: 			se = se.getNextException();
1: 		}
1: 	}
1: 
1: 
1: 
1: 	//utility routines to trach number of log files
1: 	//and checkpoints.
1: 	private static String derbyHome;
1: 	private static File dbDir ;
1: 	private static File logDir;
1: 	private static File logControlFile;
1: 	private static long lastCheckPointTime = 0;
1: 
1: 	private static void setupAllTestFiles()
1: 	{
1: 		derbyHome = System.getProperty("derby.system.home");
1: 		dbDir = new File(derbyHome, "wombat");
1: 		logDir = new File(dbDir , "log");
1: 		logControlFile = new File(logDir , "log.ctrl");
1: 		lastCheckPointTime = logControlFile.lastModified();
1: 	}
1: 
1: 	private static boolean checkpointOccured()
1: 	{
1: 		long currentModifiedTime = logControlFile.lastModified();
1: 		if(currentModifiedTime > lastCheckPointTime)
1: 		{
1: 			lastCheckPointTime = currentModifiedTime ;
1: 			System.out.println("CHECKPOINT WAS DONE");
1: 			return true;
1: 		}
1: 		
1: 		return false;
1: 	}
1: 
1: 
1: 	private static int numberOfLogFiles()
1: 	{
1: 		//find out how many log files are in logDir
1: 		//-2 (control files log.ctrl, logmirror.ctrl)
1: 		File[] logFiles = logDir.listFiles();
1: 		int noFiles = (logFiles == null) ? 0 : logFiles.length;
1: 		String lastLogFile ="";
1: 		for(int i = 0 ; i < noFiles ; i++)
1: 		{
1: 			String current = logFiles[i].getName() ;
1: 			if(current.compareTo("log.ctrl")==0 || current.compareTo("logmirror.ctrl")==0)
1: 				continue;
1: 			if(current.compareTo(lastLogFile) > 0)
1: 				lastLogFile = current;
1: 		}
1: 
1: 		if(lastLogFile.compareTo("log21.dat") > 0)
1: 		{
1: 			System.out.println("There seems to be too many log files");
1: 			System.out.println(lastLogFile);
1: 		}
1: 		logFiles = null;
1: 		return noFiles -2 ;
1: 
1: 
1: 	}
1:     
1: }        
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
============================================================================