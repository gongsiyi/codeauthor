1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.jdbc.ResourceAdapterImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.jdbc;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.info.JVMInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.AccessFactory;
1:eac0369: import org.apache.derby.iapi.store.access.xa.XAResourceManager;
1:eac0369: import org.apache.derby.iapi.store.access.xa.XAXactId;
1:eac0369: 
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Hashtable;
1:eac0369: import java.util.Enumeration;
1:bb9f97a: import javax.transaction.xa.XAException;
1:eac0369: 
1:eac0369: 
1:eac0369: public class ResourceAdapterImpl
1:eac0369: 		implements ResourceAdapter, ModuleControl
1:eac0369: {
1:eac0369: 	private boolean active;
1:eac0369: 
1:eac0369: 	// the real resource manager 
1:eac0369: 	private XAResourceManager rm;	
1:eac0369: 
1:eac0369: 	// maps Xid to XATransationResource for run time transactions
1:850aba4:     private Hashtable<XAXactId, XATransactionState> connectionTable;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Module control
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void boot(boolean create, Properties properties)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		// we can only run on jdk1.2 or beyond with JTA and JAVA 20 extension
1:eac0369: 		// loaded.
1:eac0369: 
1:850aba4:         connectionTable = new Hashtable<XAXactId, XATransactionState>();
1:eac0369: 
1:eac0369: 		AccessFactory af = 
1:56c1dc2: 			(AccessFactory)findServiceModule(this, AccessFactory.MODULE);
1:eac0369: 
1:eac0369: 		rm = (XAResourceManager) af.getXAResourceManager();
1:eac0369: 
1:eac0369: 		active = true;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void stop()
1:eac0369: 	{
1:eac0369: 		active = false;
1:eac0369: 
1:850aba4:         for (Enumeration<XATransactionState> e = connectionTable.elements();
1:850aba4:                 e.hasMoreElements(); ) {
1:eac0369: 
1:850aba4:             XATransactionState tranState = e.nextElement();
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				tranState.conn.close();
1:eac0369: 			} catch (java.sql.SQLException sqle) {
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		active = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isActive()
1:eac0369: 	{
1:eac0369: 		return active;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Resource Adapter methods 
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public synchronized Object findConnection(XAXactId xid) {
1:eac0369: 
1:eac0369: 		return connectionTable.get(xid);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public synchronized boolean addConnection(XAXactId xid, Object conn) {
1:eac0369: 		if (connectionTable.get(xid) != null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		// put this into the transaction table, if the xid is already
1:eac0369: 		// present as an in-doubt transaction, we need to remove it from
1:eac0369: 		// the run time list
1:850aba4:         connectionTable.put(xid, (XATransactionState) conn);
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public synchronized Object removeConnection(XAXactId xid) {
1:eac0369: 
1:eac0369: 		return connectionTable.remove(xid);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:bb9f97a: 	/** @see org.apache.derby.iapi.jdbc.ResourceAdapter#cancelXATransaction(XAXactId, String)
1:bb9f97a: 	 */
1:bb9f97a: 	public void cancelXATransaction(XAXactId xid, String messageId)
1:bb9f97a: 	throws XAException
1:bb9f97a: 	{
1:bb9f97a: 		XATransactionState xaState = (XATransactionState) findConnection(xid);
1:bb9f97a: 
1:bb9f97a: 		if (xaState != null) {
1:bb9f97a: 			xaState.cancel(messageId);
1:bb9f97a: 		}
1:bb9f97a: 	}
1:bb9f97a: 
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Return the XA Resource manager to the XA Connection
1:eac0369: 	 */
1:eac0369: 	public XAResourceManager getXAResourceManager()
1:eac0369: 	{
1:eac0369: 		return rm;
1:eac0369: 	}
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object findServiceModule( final Object serviceModule, final String factoryInterface)
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:56c1dc2:             return AccessController.doPrivileged
1:56c1dc2:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:56c1dc2:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:56c1dc2:                      {
1:56c1dc2:                          return Monitor.findServiceModule( serviceModule, factoryInterface );
1:56c1dc2:                      }
1:56c1dc2:                  }
1:56c1dc2:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:56c1dc2:         }
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 			(AccessFactory)findServiceModule(this, AccessFactory.MODULE);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object findServiceModule( final Object serviceModule, final String factoryInterface)
1:         throws StandardException
1:     {
1:         try {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object run()
1:                          throws StandardException
1:                      {
1:                          return Monitor.findServiceModule( serviceModule, factoryInterface );
1:                      }
1:                  }
1:                  );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
1:         }
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1:     private Hashtable<XAXactId, XATransactionState> connectionTable;
/////////////////////////////////////////////////////////////////////////
1:         connectionTable = new Hashtable<XAXactId, XATransactionState>();
/////////////////////////////////////////////////////////////////////////
1:         for (Enumeration<XATransactionState> e = connectionTable.elements();
1:                 e.hasMoreElements(); ) {
1:             XATransactionState tranState = e.nextElement();
/////////////////////////////////////////////////////////////////////////
1:         connectionTable.put(xid, (XATransactionState) conn);
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:bb9f97a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAException;
/////////////////////////////////////////////////////////////////////////
1: 	/** @see org.apache.derby.iapi.jdbc.ResourceAdapter#cancelXATransaction(XAXactId, String)
1: 	 */
1: 	public void cancelXATransaction(XAXactId xid, String messageId)
1: 	throws XAException
1: 	{
1: 		XATransactionState xaState = (XATransactionState) findConnection(xid);
1: 
1: 		if (xaState != null) {
1: 			xaState.cancel(messageId);
1: 		}
1: 	}
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6ae3022
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.ResourceAdapterImpl
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import org.apache.derby.iapi.services.info.JVMInfo;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.jdbc.ResourceAdapter;
0: //import org.apache.derby.iapi.jdbc.XATransactionResource;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.xa.XAResourceManager;
1: import org.apache.derby.iapi.store.access.xa.XAXactId;
1: 
1: 
1: import java.util.Properties;
1: import java.util.Hashtable;
1: import java.util.Enumeration;
1: 
1: 
1: public class ResourceAdapterImpl
1: 		implements ResourceAdapter, ModuleControl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private boolean active;
1: 
1: 	// the real resource manager 
1: 	private XAResourceManager rm;	
1: 
1: 	// maps Xid to XATransationResource for run time transactions
0: 	private Hashtable connectionTable;
1: 
1: 	/*
1: 	 * Module control
1: 	 */
1: 
1: 	public void boot(boolean create, Properties properties)
1: 		throws StandardException
1: 	{
1: 		// we can only run on jdk1.2 or beyond with JTA and JAVA 20 extension
1: 		// loaded.
0: 		if (SanityManager.DEBUG) {
0: 			if (JVMInfo.JDK_ID < 2)
0: 				SanityManager.THROWASSERT("expected JDK ID to be 2 - is " + JVMInfo.JDK_ID);
1: 		}
1: 
0: 		connectionTable = new Hashtable();
1: 
1: 		AccessFactory af = 
0: 			(AccessFactory)Monitor.findServiceModule(this, AccessFactory.MODULE);
1: 
1: 		rm = (XAResourceManager) af.getXAResourceManager();
1: 
1: 		active = true;
1: 	}
1: 
1: 	public void stop()
1: 	{
1: 		active = false;
1: 
0: 		for (Enumeration e = connectionTable.elements(); e.hasMoreElements(); ) {
1: 
0: 			XATransactionState tranState = (XATransactionState) e.nextElement();
1: 
1: 			try {
1: 				tranState.conn.close();
1: 			} catch (java.sql.SQLException sqle) {
1: 			}
1: 		}
1: 
1: 		active = false;
1: 	}
1: 
1: 	public boolean isActive()
1: 	{
1: 		return active;
1: 	}
1: 
1: 	/*
1: 	 * Resource Adapter methods 
1: 	 */
1: 
1: 	public synchronized Object findConnection(XAXactId xid) {
1: 
1: 		return connectionTable.get(xid);
1: 	}
1: 
1: 	public synchronized boolean addConnection(XAXactId xid, Object conn) {
1: 		if (connectionTable.get(xid) != null)
1: 			return false;
1: 
1: 		// put this into the transaction table, if the xid is already
1: 		// present as an in-doubt transaction, we need to remove it from
1: 		// the run time list
0: 		connectionTable.put(xid, conn);
1: 		return true;
1: 	}
1: 
1: 	public synchronized Object removeConnection(XAXactId xid) {
1: 
1: 		return connectionTable.remove(xid);
1: 
1: 	}
1: 
1: 
1: 	/**
1: 		Return the XA Resource manager to the XA Connection
1: 	 */
1: 	public XAResourceManager getXAResourceManager()
1: 	{
1: 		return rm;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.jdbc;
0: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.jdbc.ResourceAdapter;
0: //import org.apache.derby.iapi.jdbc.XATransactionResource;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.store.access.xa.XAResourceManager;
0: import org.apache.derby.iapi.store.access.xa.XAXactId;
0: 
0: 
0: import java.util.Properties;
0: import java.util.Hashtable;
0: import java.util.Enumeration;
0: 
0: 
0: public class ResourceAdapterImpl
0: 		implements ResourceAdapter, ModuleControl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private boolean active;
0: 
0: 	// the real resource manager 
0: 	private XAResourceManager rm;	
0: 
0: 	// maps Xid to XATransationResource for run time transactions
0: 	private Hashtable connectionTable;
0: 
0: 	/*
0: 	 * Module control
0: 	 */
0: 
0: 	public void boot(boolean create, Properties properties)
0: 		throws StandardException
0: 	{
0: 		// we can only run on jdk1.2 or beyond with JTA and JAVA 20 extension
0: 		// loaded.
0: 		if (SanityManager.DEBUG) {
0: 			if (JVMInfo.JDK_ID < 2)
0: 				SanityManager.THROWASSERT("expected JDK ID to be 2 - is " + JVMInfo.JDK_ID);
0: 		}
0: 
0: 		connectionTable = new Hashtable();
0: 
0: 		AccessFactory af = 
0: 			(AccessFactory)Monitor.findServiceModule(this, AccessFactory.MODULE);
0: 
0: 		rm = (XAResourceManager) af.getXAResourceManager();
0: 
0: 		active = true;
0: 	}
0: 
0: 	public void stop()
0: 	{
0: 		active = false;
0: 
0: 		for (Enumeration e = connectionTable.elements(); e.hasMoreElements(); ) {
0: 
0: 			XATransactionState tranState = (XATransactionState) e.nextElement();
0: 
0: 			try {
0: 				tranState.conn.close();
0: 			} catch (java.sql.SQLException sqle) {
0: 			}
0: 		}
0: 
0: 		active = false;
0: 	}
0: 
0: 	public boolean isActive()
0: 	{
0: 		return active;
0: 	}
0: 
0: 	/*
0: 	 * Resource Adapter methods 
0: 	 */
0: 
0: 	public synchronized Object findConnection(XAXactId xid) {
0: 
0: 		return connectionTable.get(xid);
0: 	}
0: 
0: 	public synchronized boolean addConnection(XAXactId xid, Object conn) {
0: 		if (connectionTable.get(xid) != null)
0: 			return false;
0: 
0: 		// put this into the transaction table, if the xid is already
0: 		// present as an in-doubt transaction, we need to remove it from
0: 		// the run time list
0: 		connectionTable.put(xid, conn);
0: 		return true;
0: 	}
0: 
0: 	public synchronized Object removeConnection(XAXactId xid) {
0: 
0: 		return connectionTable.remove(xid);
0: 
0: 	}
0: 
0: 
0: 	/**
0: 		Return the XA Resource manager to the XA Connection
0: 	 */
0: 	public XAResourceManager getXAResourceManager()
0: 	{
0: 		return rm;
0: 	}
0: }
============================================================================