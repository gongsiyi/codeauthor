1:a12152a: /*
1:a12152a: 
1:a12152a:    Derby - Class org.apache.derby.iapi.services.monitor.DerbyObservable
1:a12152a: 
1:a12152a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a12152a:    contributor license agreements.  See the NOTICE file distributed with
1:a12152a:    this work for additional information regarding copyright ownership.
1:a12152a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a12152a:    (the "License"); you may not use this file except in compliance with
1:a12152a:    the License.  You may obtain a copy of the License at
1:a12152a: 
1:a12152a:       http://www.apache.org/licenses/LICENSE-2.0
1:a12152a: 
1:a12152a:    Unless required by applicable law or agreed to in writing, software
1:a12152a:    distributed under the License is distributed on an "AS IS" BASIS,
1:a12152a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a12152a:    See the License for the specific language governing permissions and
1:a12152a:    limitations under the License.
1:a12152a: 
1:a12152a:  */
1:a12152a: 
1:a12152a: package org.apache.derby.iapi.services.monitor;
1:a12152a: 
1:f5bf9a9: import java.util.ArrayList;
1:a12152a: 
1:a12152a: /**
1:a12152a:  * <p>
1:a12152a:  * Created to provide the Observable behavior which Derby has depended
1:a12152a:  * on since Java 1.2 but which as deprecated in JDK 9 build 118. A DerbyObservable
1:a12152a:  * is an object whose state changes are being tracked.
1:a12152a:  * </p>
1:a12152a:  */
1:a12152a: public class DerbyObservable
1:a12152a: {
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:     //
1:a12152a:     // STATE
1:a12152a:     //
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:   
1:a12152a:     private boolean _hasChanged = false;
1:f5bf9a9:     private ArrayList<DerbyObserver> _observers;
1:a12152a: 
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:     //
1:a12152a:     // CONSTRUCTORS
1:a12152a:     //
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:   
1:a12152a:     /** No-arg constructor */
1:f5bf9a9:     public DerbyObservable() { _observers = new ArrayList<DerbyObserver>(); }
1:a12152a: 
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:     //
1:a12152a:     // PUBLIC BEHAVIOR
1:a12152a:     //
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:   
1:a12152a:     /**
1:a12152a:      * Add another observer who wants to be told about changes to this object.
1:a12152a:      *
1:a12152a:      * @param observer The object which wants to be notified when this object changes
1:a12152a:      *
1:d21039a:      * @throws IllegalArgumentException If the argument is bad (e.g., null)
1:a12152a:      */
1:f5bf9a9:     public synchronized void addObserver(DerbyObserver observer)
1:a12152a:     {
1:a12152a:       if (observer == null) { throw new IllegalArgumentException("Null arguments not allowed."); }
1:a12152a: 
1:f5bf9a9:       if (!_observers.contains(observer)) { _observers.add(observer); }
1:a12152a:     }
1:a12152a: 
1:a12152a:     /**
1:a12152a:      * Return the number of observers who are watching this object.
1:a12152a:      *
1:a12152a:      * @return The number of watchers
1:a12152a:      */
1:f5bf9a9:     public synchronized int countObservers() { return _observers.size(); }
1:a12152a: 
1:a12152a:     /**
1:a12152a:      * Remove a specific observer from the list of watchers. Null is ignored.
1:a12152a:      *
1:a12152a:      * @param observer The observer to remove.
1:a12152a:      */
1:f5bf9a9:     public synchronized void deleteObserver(DerbyObserver observer) { _observers.remove(observer); }
1:a12152a: 
1:a12152a:     /**
1:a12152a:      * This method is equivalent to notifyObservers(null);
1:a12152a:      */
1:a12152a:     public void notifyObservers() { notifyObservers(null); }
1:a12152a:   
1:a12152a:     /**
1:a12152a:      * If this object has changed, then notify all observers. Pass
1:a12152a:      * them this object and the extraInfo. This object is then marked
1:a12152a:      * as unchanged again.
1:a12152a:      *
1:a12152a:      * @param extraInfo Extra information to be passed to the observer's callback method.
1:a12152a:      */
1:a12152a:     public void notifyObservers(Object extraInfo)
1:a12152a:     {
1:a12152a:         // Shield the observers from further changes to the list of watchers
1:a12152a:         DerbyObserver[] cachedObservers;
1:a12152a: 
1:a12152a:         synchronized (this)
1:a12152a:         {
1:a12152a:             if (!_hasChanged) { return; }
1:a12152a:             
1:a12152a:             cachedObservers = new DerbyObserver[_observers.size()];
1:a12152a:             _observers.toArray(cachedObservers);
1:a12152a:             _hasChanged = false;
1:a12152a:         }
1:a12152a: 
1:a12152a:         int lastIndex = cachedObservers.length - 1;
1:a12152a:         for (int idx = lastIndex; idx >= 0; idx--)
1:a12152a:         {
1:a12152a:             cachedObservers[idx].update(this, extraInfo);
1:a12152a:         }
1:a12152a:     }
1:a12152a:   
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:     //
1:a12152a:     // PROTECTED BEHAVIOR TO BE CALLED BY SUBCLASSES
1:a12152a:     //
1:a12152a:     //////////////////////////////////////////////////////////////////////
1:a12152a:   
1:a12152a:     /**
1:a12152a:      * When the object state changes, the object calls this method
1:a12152a:      * in order to flag that fact. After this method has been called,
1:a12152a:      * then the notifyObservers() will wake up the observers which are
1:a12152a:      * watching this object.
1:a12152a:      */
1:f5bf9a9:     protected synchronized void setChanged() { _hasChanged = true; }
1:a12152a:   
1:a12152a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f5bf9a9
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     private ArrayList<DerbyObserver> _observers;
/////////////////////////////////////////////////////////////////////////
1:     public DerbyObservable() { _observers = new ArrayList<DerbyObserver>(); }
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void addObserver(DerbyObserver observer)
1:       if (!_observers.contains(observer)) { _observers.add(observer); }
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int countObservers() { return _observers.size(); }
1:     public synchronized void deleteObserver(DerbyObserver observer) { _observers.remove(observer); }
/////////////////////////////////////////////////////////////////////////
1:     protected synchronized void setChanged() { _hasChanged = true; }
commit:d21039a
/////////////////////////////////////////////////////////////////////////
1:      * @throws IllegalArgumentException If the argument is bad (e.g., null)
commit:a12152a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.monitor.DerbyObservable
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.monitor;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * <p>
1:  * Created to provide the Observable behavior which Derby has depended
1:  * on since Java 1.2 but which as deprecated in JDK 9 build 118. A DerbyObservable
1:  * is an object whose state changes are being tracked.
1:  * </p>
1:  */
1: public class DerbyObservable
1: {
1:     //////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     //////////////////////////////////////////////////////////////////////
1:   
1:     private boolean _hasChanged = false;
0:     private Vector<DerbyObserver> _observers;
1: 
1:     //////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     //////////////////////////////////////////////////////////////////////
1:   
1:     /** No-arg constructor */
0:     public DerbyObservable() { _observers = new Vector<DerbyObserver>(); }
1: 
1:     //////////////////////////////////////////////////////////////////////
1:     //
1:     // PUBLIC BEHAVIOR
1:     //
1:     //////////////////////////////////////////////////////////////////////
1:   
1:     /**
1:      * Add another observer who wants to be told about changes to this object.
1:      *
1:      * @param observer The object which wants to be notified when this object changes
1:      *
0:      * @throw IllegalArgumentException If the argument is bad (e.g., null)
1:      */
0:     public void addObserver(DerbyObserver observer)
1:     {
1:       if (observer == null) { throw new IllegalArgumentException("Null arguments not allowed."); }
1: 
0:       if (!_observers.contains(observer)) { _observers.addElement(observer); }
1:     }
1: 
1:     /**
1:      * Return the number of observers who are watching this object.
1:      *
1:      * @return The number of watchers
1:      */
0:     public int countObservers() { return _observers.size(); }
1: 
1:     /**
1:      * Remove a specific observer from the list of watchers. Null is ignored.
1:      *
1:      * @param observer The observer to remove.
1:      */
0:     public void deleteObserver(DerbyObserver observer) { _observers.removeElement(observer); }
1: 
1:     /**
1:      * This method is equivalent to notifyObservers(null);
1:      */
1:     public void notifyObservers() { notifyObservers(null); }
1:   
1:     /**
1:      * If this object has changed, then notify all observers. Pass
1:      * them this object and the extraInfo. This object is then marked
1:      * as unchanged again.
1:      *
1:      * @param extraInfo Extra information to be passed to the observer's callback method.
1:      */
1:     public void notifyObservers(Object extraInfo)
1:     {
1:         // Shield the observers from further changes to the list of watchers
1:         DerbyObserver[] cachedObservers;
1: 
1:         synchronized (this)
1:         {
1:             if (!_hasChanged) { return; }
1:             
1:             cachedObservers = new DerbyObserver[_observers.size()];
1:             _observers.toArray(cachedObservers);
1:             _hasChanged = false;
1:         }
1: 
1:         int lastIndex = cachedObservers.length - 1;
1:         for (int idx = lastIndex; idx >= 0; idx--)
1:         {
1:             cachedObservers[idx].update(this, extraInfo);
1:         }
1:     }
1:   
1:     //////////////////////////////////////////////////////////////////////
1:     //
1:     // PROTECTED BEHAVIOR TO BE CALLED BY SUBCLASSES
1:     //
1:     //////////////////////////////////////////////////////////////////////
1:   
1:     /**
1:      * When the object state changes, the object calls this method
1:      * in order to flag that fact. After this method has been called,
1:      * then the notifyObservers() will wake up the observers which are
1:      * watching this object.
1:      */
0:     protected void setChanged() { _hasChanged = true; }
1:   
1: }
============================================================================