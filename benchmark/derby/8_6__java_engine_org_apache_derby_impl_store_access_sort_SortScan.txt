1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.SortScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   Abstract base class for merge sort scans.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public abstract class SortScan extends Scan
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The sort that this class is scanning.
1:eac0369: 	**/
1:eac0369: 	protected MergeSort sort = null;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The transactionManager that opened this scan.
1:eac0369: 	**/
1:eac0369: 	protected TransactionManager tran = null;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The row at the current position of the scan, from which
1:eac0369: 	fetch will return values.
1:eac0369: 	**/
1:eac0369: 	protected DataValueDescriptor[] current;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The row at the current position of the scan, from which
1:eac0369: 	fetch will return values.
1:eac0369: 	**/
1:eac0369: 	protected boolean hold;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Constructors
1:eac0369: 	 */
1:eac0369: 	SortScan(MergeSort sort, TransactionManager tran, boolean hold) 
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 		this.sort = sort;
1:eac0369: 		this.tran = tran;
1:eac0369: 		this.hold = hold;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Abstract methods of Scan
1:eac0369: 	 */
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Fetch the row at the next position of the Scan.
1:eac0369: 
1:eac0369:     If there is a valid next position in the scan then
1:eac0369: 	the value in the template storable row is replaced
1:eac0369: 	with the value of the row at the current scan
1:eac0369: 	position.  The columns of the template row must
1:eac0369: 	be of the same type as the actual columns in the
1:eac0369: 	underlying conglomerate.
1:eac0369: 
1:eac0369:     The resulting contents of templateRow after a fetchNext() 
1:eac0369:     which returns false is undefined.
1:eac0369: 
1:eac0369:     The result of calling fetchNext(row) is exactly logically
1:eac0369:     equivalent to making a next() call followed by a fetch(row)
1:eac0369:     call.  This interface allows implementations to optimize 
1:eac0369:     the 2 calls if possible.
1:eac0369: 
1:eac0369:     RESOLVE (mikem - 2/24/98) - come back to this and see if 
1:eac0369:     coding this differently saves in sort scans, as did the
1:eac0369:     heap recoding.
1:eac0369: 
1:7a4afea:     @param row The template row into which the value
1:eac0369: 	of the next position in the scan is to be stored.
1:eac0369: 
1:eac0369:     @return True if there is a next position in the scan,
1:eac0369: 	false if there isn't.
1:eac0369: 
1:eac0369: 	@exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369:     public final boolean fetchNext(DataValueDescriptor[] row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         boolean ret_val = next();
1:eac0369: 
1:eac0369:         if (ret_val)
1:eac0369:             fetch(row);
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Fetch the row at the current position of the Scan.
1:fa09146: 	@see org.apache.derby.iapi.store.access.ScanController#fetch
1:eac0369:     **/
1:eac0369:     public final void fetch(DataValueDescriptor[] result)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(sort != null);
1:eac0369:     	}
1:eac0369: 
1:eac0369: 		if (current == null)
1:eac0369:         {
1:eac0369:             throw StandardException.newException(
1:eac0369:                     SQLState.SORT_SCAN_NOT_POSITIONED);
1:eac0369:         }
1:eac0369: 
1:eac0369: 		// Make sure the passed in template row is of the correct type.
1:eac0369: 		sort.checkColumnTypes(result);
1:eac0369: 
1:eac0369: 		// RESOLVE
1:eac0369:         // Note that fetch() basically throws away the object's passed in.
1:eac0369:         // We should figure out how to allow callers in this situation to
1:eac0369:         // not go through the work of allocating objects in the first place.
1:eac0369: 
1:eac0369: 		// Sort has allocated objects for this row, and will not 
1:eac0369:         // reference them any more.  So just pass the objects out
1:eac0369:         // to the caller instead of copying them into the provided
1:eac0369:         // objects.
1:eac0369:         System.arraycopy(current, 0, result, 0, result.length);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:2700e3d:     Fetch the row at the current position of the Scan and does not apply the
1:2700e3d:     qualifiers.
1:2700e3d:     
1:2700e3d:     This method will always throw an exception.
1:2700e3d:     (SQLState.SORT_IMPROPER_SCAN_METHOD)
1:2700e3d:     
1:fa09146:     @see org.apache.derby.iapi.store.access.ScanController#fetchWithoutQualify
1:2700e3d:     **/
1:2700e3d:     public final void fetchWithoutQualify(DataValueDescriptor[] result)
1:2700e3d: 		throws StandardException
1:2700e3d: 	{
1:2700e3d:         throw StandardException.newException(
1:2700e3d:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:2700e3d: 
1:2700e3d:     }
1:2700e3d:     
1:2700e3d:     /**
1:eac0369:     Close the scan.	@see ScanController#close
1:eac0369:     **/
1:eac0369:     public void close()
1:eac0369: 	{
1:eac0369: 		sort = null;
1:eac0369: 		current = null;
1:eac0369: 
1:eac0369:         tran.closeMe(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of SortScan.  Arranged alphabetically.
1:eac0369: 	 */
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@see org.apache.derby.iapi.store.access.ScanController#fetch
/////////////////////////////////////////////////////////////////////////
1:     @see org.apache.derby.iapi.store.access.ScanController#fetchWithoutQualify
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2700e3d
/////////////////////////////////////////////////////////////////////////
1:     Fetch the row at the current position of the Scan and does not apply the
1:     qualifiers.
1:     
1:     This method will always throw an exception.
1:     (SQLState.SORT_IMPROPER_SCAN_METHOD)
1:     
0:     @see ScanController#fetchWithoutQualify
1:     **/
1:     public final void fetchWithoutQualify(DataValueDescriptor[] result)
1: 		throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 
1:     }
1:     
1:     /**
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7a4afea
/////////////////////////////////////////////////////////////////////////
1:     @param row The template row into which the value
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.SortScan
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.ScanController;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
1: /**
1: 
1:   Abstract base class for merge sort scans.
1: 
1: **/
1: 
1: public abstract class SortScan extends Scan
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	The sort that this class is scanning.
1: 	**/
1: 	protected MergeSort sort = null;
1: 
1: 	/**
1: 	The transactionManager that opened this scan.
1: 	**/
1: 	protected TransactionManager tran = null;
1: 
1: 	/**
1: 	The row at the current position of the scan, from which
1: 	fetch will return values.
1: 	**/
1: 	protected DataValueDescriptor[] current;
1: 
1: 	/**
1: 	The row at the current position of the scan, from which
1: 	fetch will return values.
1: 	**/
1: 	protected boolean hold;
1: 
1: 	/*
1: 	 * Constructors
1: 	 */
1: 	SortScan(MergeSort sort, TransactionManager tran, boolean hold) 
1: 	{
1: 		super();
1: 		this.sort = sort;
1: 		this.tran = tran;
1: 		this.hold = hold;
1: 	}
1: 
1: 	/*
1: 	 * Abstract methods of Scan
1: 	 */
1: 
1:     /**
1:     Fetch the row at the next position of the Scan.
1: 
1:     If there is a valid next position in the scan then
1: 	the value in the template storable row is replaced
1: 	with the value of the row at the current scan
1: 	position.  The columns of the template row must
1: 	be of the same type as the actual columns in the
1: 	underlying conglomerate.
1: 
1:     The resulting contents of templateRow after a fetchNext() 
1:     which returns false is undefined.
1: 
1:     The result of calling fetchNext(row) is exactly logically
1:     equivalent to making a next() call followed by a fetch(row)
1:     call.  This interface allows implementations to optimize 
1:     the 2 calls if possible.
1: 
1:     RESOLVE (mikem - 2/24/98) - come back to this and see if 
1:     coding this differently saves in sort scans, as did the
1:     heap recoding.
1: 
0:     @param template The template row into which the value
1: 	of the next position in the scan is to be stored.
1: 
1:     @return True if there is a next position in the scan,
1: 	false if there isn't.
1: 
1: 	@exception StandardException Standard exception policy.
1:     **/
1:     public final boolean fetchNext(DataValueDescriptor[] row)
1: 		throws StandardException
1: 	{
1:         boolean ret_val = next();
1: 
1:         if (ret_val)
1:             fetch(row);
1: 
1:         return(ret_val);
1:     }
1: 
1:     /**
1:     Fetch the row at the current position of the Scan.
0: 	@see ScanController#fetch
1:     **/
1:     public final void fetch(DataValueDescriptor[] result)
1: 		throws StandardException
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(sort != null);
1:     	}
1: 
1: 		if (current == null)
1:         {
1:             throw StandardException.newException(
1:                     SQLState.SORT_SCAN_NOT_POSITIONED);
1:         }
1: 
1: 		// Make sure the passed in template row is of the correct type.
1: 		sort.checkColumnTypes(result);
1: 
1: 		// RESOLVE
1:         // Note that fetch() basically throws away the object's passed in.
1:         // We should figure out how to allow callers in this situation to
1:         // not go through the work of allocating objects in the first place.
1: 
1: 		// Sort has allocated objects for this row, and will not 
1:         // reference them any more.  So just pass the objects out
1:         // to the caller instead of copying them into the provided
1:         // objects.
1:         System.arraycopy(current, 0, result, 0, result.length);
1: 	}
1: 
1:     /**
1:     Close the scan.	@see ScanController#close
1:     **/
1:     public void close()
1: 	{
1: 		sort = null;
1: 		current = null;
1: 
1:         tran.closeMe(this);
1: 	}
1: 
1: 	/*
1: 	 * Methods of SortScan.  Arranged alphabetically.
1: 	 */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: /**
0: 
0:   Abstract base class for merge sort scans.
0: 
0: **/
0: 
0: public abstract class SortScan extends Scan
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	The sort that this class is scanning.
0: 	**/
0: 	protected MergeSort sort = null;
0: 
0: 	/**
0: 	The transactionManager that opened this scan.
0: 	**/
0: 	protected TransactionManager tran = null;
0: 
0: 	/**
0: 	The row at the current position of the scan, from which
0: 	fetch will return values.
0: 	**/
0: 	protected DataValueDescriptor[] current;
0: 
0: 	/**
0: 	The row at the current position of the scan, from which
0: 	fetch will return values.
0: 	**/
0: 	protected boolean hold;
0: 
0: 	/*
0: 	 * Constructors
0: 	 */
0: 	SortScan(MergeSort sort, TransactionManager tran, boolean hold) 
0: 	{
0: 		super();
0: 		this.sort = sort;
0: 		this.tran = tran;
0: 		this.hold = hold;
0: 	}
0: 
0: 	/*
0: 	 * Abstract methods of Scan
0: 	 */
0: 
0:     /**
0:     Fetch the row at the next position of the Scan.
0: 
0:     If there is a valid next position in the scan then
0: 	the value in the template storable row is replaced
0: 	with the value of the row at the current scan
0: 	position.  The columns of the template row must
0: 	be of the same type as the actual columns in the
0: 	underlying conglomerate.
0: 
0:     The resulting contents of templateRow after a fetchNext() 
0:     which returns false is undefined.
0: 
0:     The result of calling fetchNext(row) is exactly logically
0:     equivalent to making a next() call followed by a fetch(row)
0:     call.  This interface allows implementations to optimize 
0:     the 2 calls if possible.
0: 
0:     RESOLVE (mikem - 2/24/98) - come back to this and see if 
0:     coding this differently saves in sort scans, as did the
0:     heap recoding.
0: 
0:     @param template The template row into which the value
0: 	of the next position in the scan is to be stored.
0: 
0:     @return True if there is a next position in the scan,
0: 	false if there isn't.
0: 
0: 	@exception StandardException Standard exception policy.
0:     **/
0:     public final boolean fetchNext(DataValueDescriptor[] row)
0: 		throws StandardException
0: 	{
0:         boolean ret_val = next();
0: 
0:         if (ret_val)
0:             fetch(row);
0: 
0:         return(ret_val);
0:     }
0: 
0:     /**
0:     Fetch the row at the current position of the Scan.
0: 	@see ScanController#fetch
0:     **/
0:     public final void fetch(DataValueDescriptor[] result)
0: 		throws StandardException
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(sort != null);
0:     	}
0: 
0: 		if (current == null)
0:         {
0:             throw StandardException.newException(
0:                     SQLState.SORT_SCAN_NOT_POSITIONED);
0:         }
0: 
0: 		// Make sure the passed in template row is of the correct type.
0: 		sort.checkColumnTypes(result);
0: 
0: 		// RESOLVE
0:         // Note that fetch() basically throws away the object's passed in.
0:         // We should figure out how to allow callers in this situation to
0:         // not go through the work of allocating objects in the first place.
0: 
0: 		// Sort has allocated objects for this row, and will not 
0:         // reference them any more.  So just pass the objects out
0:         // to the caller instead of copying them into the provided
0:         // objects.
0:         System.arraycopy(current, 0, result, 0, result.length);
0: 	}
0: 
0:     /**
0:     Close the scan.	@see ScanController#close
0:     **/
0:     public void close()
0: 	{
0: 		sort = null;
0: 		current = null;
0: 
0:         tran.closeMe(this);
0: 	}
0: 
0: 	/*
0: 	 * Methods of SortScan.  Arranged alphabetically.
0: 	 */
0: }
============================================================================