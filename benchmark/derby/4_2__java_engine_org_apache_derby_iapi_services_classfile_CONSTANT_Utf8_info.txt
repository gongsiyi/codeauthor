1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.classfile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: /** Constant Pool class - pages 92-99 */
1:eac0369: 
1:eac0369: /** Utf8- page 100 - Section 4.4.7 */
1:7e52071: public final class CONSTANT_Utf8_info extends ConstantPoolEntry {
1:eac0369: 	private final String value;
1:eac0369: 	private int asString;
1:eac0369: 	private int asCode;
1:eac0369: 	
1:eac0369: 	CONSTANT_Utf8_info(String value) {
1:eac0369: 		super(VMDescriptor.CONSTANT_Utf8);
1:eac0369: 		this.value = value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	Object getKey() {
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		We assume here that the String is ASCII, thus this
1:eac0369: 		might return a size smaller than actual size.
1:eac0369: 	*/
1:eac0369: 	int classFileSize() {
1:eac0369: 		// 1 (tag) + 2 (utf length) + string length
1:eac0369: 		return 1 + 2 + value.length();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// if this returns 0 then the caller must put another CONSTANT_Utf8_info into the
1:eac0369: 	// constant pool with no hash table entry and then call setAlternative() with its index.
1:eac0369: 	int setAsCode() {
1:eac0369: 		if (ClassHolder.isExternalClassName(value))
1:eac0369: 		{
1:eac0369: 			if (asString == 0) {
1:eac0369: 				// only used as code at the moment
1:eac0369: 				asCode = getIndex();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return asCode;
1:eac0369: 		}
1:eac0369: 		// no dots in the string so it can be used as a JVM internal string and
1:eac0369: 		// an external string.
1:eac0369: 		return getIndex();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	int setAsString() {
1:eac0369: 		if (ClassHolder.isExternalClassName(value))
1:eac0369: 		{
1:eac0369: 
1:eac0369: 			if (asCode == 0) {
1:eac0369: 				// only used as String at the moment
1:eac0369: 				asString = getIndex();
1:eac0369: 			}
1:eac0369: 			return asString;
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		// no dots in the string so it can be used as a JVM internal string and
1:eac0369: 		// an external string.
1:eac0369: 		return getIndex();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void setAlternative(int index) {
1:eac0369: 
1:eac0369: 		if (asCode == 0)
1:eac0369: 			asCode = index;
1:eac0369: 		else
1:eac0369: 			asString = index;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void put(ClassFormatOutput out) throws IOException {
1:eac0369: 		super.put(out);
1:eac0369: 
1:eac0369: 		if (getIndex() == asCode)
1:eac0369: 		{
1:eac0369: 			out.writeUTF(ClassHolder.convertToInternalClassName(value));
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			out.writeUTF(value);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7e52071
/////////////////////////////////////////////////////////////////////////
1: public final class CONSTANT_Utf8_info extends ConstantPoolEntry {
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: import java.io.IOException;
1: 
1: /** Constant Pool class - pages 92-99 */
1: 
1: /** Utf8- page 100 - Section 4.4.7 */
0: final class CONSTANT_Utf8_info extends ConstantPoolEntry {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	private final String value;
1: 	private int asString;
1: 	private int asCode;
1: 	
1: 	CONSTANT_Utf8_info(String value) {
1: 		super(VMDescriptor.CONSTANT_Utf8);
1: 		this.value = value;
1: 	}
1: 
1: 	Object getKey() {
1: 		return value;
1: 	}
1: 
1: 	/**
1: 		We assume here that the String is ASCII, thus this
1: 		might return a size smaller than actual size.
1: 	*/
1: 	int classFileSize() {
1: 		// 1 (tag) + 2 (utf length) + string length
1: 		return 1 + 2 + value.length();
1: 	}
1: 
1: 	public String toString() {
1: 		return value;
1: 	}
1: 
1: 	// if this returns 0 then the caller must put another CONSTANT_Utf8_info into the
1: 	// constant pool with no hash table entry and then call setAlternative() with its index.
1: 	int setAsCode() {
1: 		if (ClassHolder.isExternalClassName(value))
1: 		{
1: 			if (asString == 0) {
1: 				// only used as code at the moment
1: 				asCode = getIndex();
1: 			}
1: 
1: 			return asCode;
1: 		}
1: 		// no dots in the string so it can be used as a JVM internal string and
1: 		// an external string.
1: 		return getIndex();
1: 	}
1: 
1: 	int setAsString() {
1: 		if (ClassHolder.isExternalClassName(value))
1: 		{
1: 
1: 			if (asCode == 0) {
1: 				// only used as String at the moment
1: 				asString = getIndex();
1: 			}
1: 			return asString;
1: 		}
1: 		
1: 		// no dots in the string so it can be used as a JVM internal string and
1: 		// an external string.
1: 		return getIndex();
1: 	}
1: 
1: 	void setAlternative(int index) {
1: 
1: 		if (asCode == 0)
1: 			asCode = index;
1: 		else
1: 			asString = index;
1: 	}
1: 
1: 	void put(ClassFormatOutput out) throws IOException {
1: 		super.put(out);
1: 
1: 		if (getIndex() == asCode)
1: 		{
1: 			out.writeUTF(ClassHolder.convertToInternalClassName(value));
1: 		}
1: 		else
1: 			out.writeUTF(value);
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: import java.io.IOException;
0: 
0: /** Constant Pool class - pages 92-99 */
0: 
0: /** Utf8- page 100 - Section 4.4.7 */
0: final class CONSTANT_Utf8_info extends ConstantPoolEntry {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private final String value;
0: 	private int asString;
0: 	private int asCode;
0: 	
0: 	CONSTANT_Utf8_info(String value) {
0: 		super(VMDescriptor.CONSTANT_Utf8);
0: 		this.value = value;
0: 	}
0: 
0: 	Object getKey() {
0: 		return value;
0: 	}
0: 
0: 	/**
0: 		We assume here that the String is ASCII, thus this
0: 		might return a size smaller than actual size.
0: 	*/
0: 	int classFileSize() {
0: 		// 1 (tag) + 2 (utf length) + string length
0: 		return 1 + 2 + value.length();
0: 	}
0: 
0: 	public String toString() {
0: 		return value;
0: 	}
0: 
0: 	// if this returns 0 then the caller must put another CONSTANT_Utf8_info into the
0: 	// constant pool with no hash table entry and then call setAlternative() with its index.
0: 	int setAsCode() {
0: 		if (ClassHolder.isExternalClassName(value))
0: 		{
0: 			if (asString == 0) {
0: 				// only used as code at the moment
0: 				asCode = getIndex();
0: 			}
0: 
0: 			return asCode;
0: 		}
0: 		// no dots in the string so it can be used as a JVM internal string and
0: 		// an external string.
0: 		return getIndex();
0: 	}
0: 
0: 	int setAsString() {
0: 		if (ClassHolder.isExternalClassName(value))
0: 		{
0: 
0: 			if (asCode == 0) {
0: 				// only used as String at the moment
0: 				asString = getIndex();
0: 			}
0: 			return asString;
0: 		}
0: 		
0: 		// no dots in the string so it can be used as a JVM internal string and
0: 		// an external string.
0: 		return getIndex();
0: 	}
0: 
0: 	void setAlternative(int index) {
0: 
0: 		if (asCode == 0)
0: 			asCode = index;
0: 		else
0: 			asString = index;
0: 	}
0: 
0: 	void put(ClassFormatOutput out) throws IOException {
0: 		super.put(out);
0: 
0: 		if (getIndex() == asCode)
0: 		{
0: 			out.writeUTF(ClassHolder.convertToInternalClassName(value));
0: 		}
0: 		else
0: 			out.writeUTF(value);
0: 	}
0: }
============================================================================