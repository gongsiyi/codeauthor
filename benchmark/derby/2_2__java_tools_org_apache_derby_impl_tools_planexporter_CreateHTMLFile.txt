1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.tools.planexporter.CreateHTMLFile
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:4e20a51: package org.apache.derby.impl.tools.planexporter;
1:4e20a51: 
1:4e20a51: import javax.xml.transform.TransformerFactory;
1:4e20a51: import javax.xml.transform.Transformer;
1:4e20a51: import javax.xml.transform.stream.StreamSource;
1:4e20a51: import javax.xml.transform.stream.StreamResult;
1:4e20a51: 
1:4e20a51: import java.io.File;
1:4e20a51: import java.io.FileOutputStream;
1:4e20a51: import java.net.URL;
1:4e20a51: 
1:82d6586: /**
1:82d6586:  * This class is used by PlanExporter tool (DERBY-4587)
1:82d6586:  * in order to create HTML output of a query plan
1:82d6586:  * using a plain XSL style sheet and a XML data of
1:82d6586:  * a query plan.
1:82d6586:  */
1:4e20a51: public class CreateHTMLFile {
1:fb74f09: 	
1:fb74f09: 	private static String xslStyleSheetName ="resources/vanilla_html.xsl";//default xsl
1:4e20a51: 
1:fb74f09: 	/**
1:fb74f09: 	 * 
1:fb74f09: 	 * @param XMLFileName name of the XML file
1:fb74f09: 	 * @param XSLSheetName name of the XSL file
1:fb74f09: 	 * @param HTMLFile name of the HTML file
1:fb74f09: 	 * @param def whether to use the default XSL or not
1:fb74f09: 	 * @throws Exception
1:fb74f09: 	 */
1:4e20a51:     public void getHTML(String XMLFileName, String XSLSheetName,
1:4e20a51:             String HTMLFile, boolean def) throws Exception{
1:4e20a51: 
1:ce855d2:         if(!(HTMLFile.toUpperCase()).endsWith(".HTML"))
1:4e20a51:             HTMLFile +=".html";
1:4e20a51: 
1:4e20a51:         TransformerFactory transFactory = TransformerFactory.newInstance();
1:4e20a51:         Transformer transformer;
1:4e20a51: 
1:4e20a51:         if(def){
1:4e20a51:             URL url=getClass().getResource(XSLSheetName);
1:4e20a51:             transformer =
1:4e20a51:                 transFactory.newTransformer(new StreamSource(url.openStream()));
1:4e20a51:         }
1:4e20a51:         else{
1:4e20a51:             File style=new File(XSLSheetName);
1:4e20a51:             if(style.exists())
1:4e20a51:                 transformer =
1:4e20a51:                     transFactory.newTransformer(new StreamSource(XSLSheetName));
1:4e20a51:             else{
1:fb74f09:                 URL url=getClass().getResource(xslStyleSheetName);
1:4e20a51:                 transformer =
1:4e20a51:                     transFactory.newTransformer(new StreamSource(url.openStream()));
1:4e20a51:             }
1:4e20a51:         }
1:4e20a51: 
1:4e20a51:         transformer.transform(new StreamSource(XMLFileName),
1:4e20a51:                 new StreamResult(new FileOutputStream(HTMLFile)));
1:4e20a51:     }
1:4e20a51: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:fb74f09
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private static String xslStyleSheetName ="resources/vanilla_html.xsl";//default xsl
1: 	/**
1: 	 * 
1: 	 * @param XMLFileName name of the XML file
1: 	 * @param XSLSheetName name of the XSL file
1: 	 * @param HTMLFile name of the HTML file
1: 	 * @param def whether to use the default XSL or not
1: 	 * @throws Exception
1: 	 */
/////////////////////////////////////////////////////////////////////////
1:                 URL url=getClass().getResource(xslStyleSheetName);
commit:4e20a51
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.planexporter;
1: 
1: import javax.xml.transform.TransformerFactory;
1: import javax.xml.transform.Transformer;
1: import javax.xml.transform.stream.StreamSource;
1: import javax.xml.transform.stream.StreamResult;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.net.URL;
1: 
1: public class CreateHTMLFile {
1: 
1: 	public void getHTML(String XMLFileName, String XSLSheetName, 
1: 			String HTMLFile, boolean def) throws Exception{
1: 
0: 		if(!HTMLFile.endsWith(".html") && !HTMLFile.endsWith(".HTML"))
1: 			HTMLFile +=".html";
1: 
1: 		TransformerFactory transFactory = TransformerFactory.newInstance();
1: 		Transformer transformer;
1: 
1: 		if(def){
1: 			URL url=getClass().getResource(XSLSheetName); 
1: 			transformer = 
1: 				transFactory.newTransformer(new StreamSource(url.openStream()));
1: 		}
1: 		else{
1: 			File style=new File(XSLSheetName);
1: 			if(style.exists())
1: 				transformer = 
1: 					transFactory.newTransformer(new StreamSource(XSLSheetName));
1: 			else{
0: 				URL url=getClass().getResource("resources/"+XSLSheetName); 
1: 				transformer = 
1: 					transFactory.newTransformer(new StreamSource(url.openStream()));
1: 			}
1: 		}
1: 
1: 		transformer.transform(new StreamSource(XMLFileName),
1: 				new StreamResult(new FileOutputStream(HTMLFile)));
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.tools.planexporter.CreateHTMLFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
commit:ce855d2
/////////////////////////////////////////////////////////////////////////
0:     public void getHTML(String XMLFileName, String XSLSheetName,
0:             String HTMLFile, boolean def) throws Exception{
1:         if(!(HTMLFile.toUpperCase()).endsWith(".HTML"))
0:             HTMLFile +=".html";
0:         TransformerFactory transFactory = TransformerFactory.newInstance();
0:         Transformer transformer;
0:         if(def){
0:             URL url=getClass().getResource(XSLSheetName);
0:             transformer =
0:                 transFactory.newTransformer(new StreamSource(url.openStream()));
0:         }
0:         else{
0:             File style=new File(XSLSheetName);
0:             if(style.exists())
0:                 transformer =
0:                     transFactory.newTransformer(new StreamSource(XSLSheetName));
0:             else{
0:                 URL url=getClass().getResource("resources/vanilla_html.xsl");
0:                 transformer =
0:                     transFactory.newTransformer(new StreamSource(url.openStream()));
0:             }
0:         }
0:         transformer.transform(new StreamSource(XMLFileName),
0:                 new StreamResult(new FileOutputStream(HTMLFile)));
0:     }
commit:82d6586
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This class is used by PlanExporter tool (DERBY-4587)
1:  * in order to create HTML output of a query plan
1:  * using a plain XSL style sheet and a XML data of
1:  * a query plan.
1:  */
0: 		if(!(HTMLFile.toUpperCase()).endsWith(".HTML"))
/////////////////////////////////////////////////////////////////////////
0: 				URL url=getClass().getResource("resources/vanilla_html.xsl"); 
============================================================================