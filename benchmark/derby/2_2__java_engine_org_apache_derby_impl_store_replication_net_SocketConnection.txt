1:77323ec: /*
1:77323ec:  
1:1bac3f3:    Derby - Class org.apache.derby.impl.store.replication.net.SocketConnection
1:77323ec:  
1:77323ec:    Licensed to the Apache Software Foundation (ASF) under one or more
1:77323ec:    contributor license agreements.  See the NOTICE file distributed with
1:77323ec:    this work for additional information regarding copyright ownership.
1:77323ec:    The ASF licenses this file to you under the Apache License, Version 2.0
1:77323ec:    (the "License"); you may not use this file except in compliance with
1:77323ec:    the License.  You may obtain a copy of the License at
1:77323ec:  
1:77323ec:       http://www.apache.org/licenses/LICENSE-2.0
1:77323ec:  
1:77323ec:    Unless required by applicable law or agreed to in writing, software
1:77323ec:    distributed under the License is distributed on an "AS IS" BASIS,
1:77323ec:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77323ec:    See the License for the specific language governing permissions and
1:77323ec:    limitations under the License.
1:77323ec:  
1:77323ec:  */
1:77323ec: 
1:1bac3f3: package org.apache.derby.impl.store.replication.net;
1:77323ec: 
1:77323ec: import java.io.IOException;
1:77323ec: import java.io.ObjectInputStream;
1:77323ec: import java.io.ObjectOutputStream;
1:77323ec: import java.net.Socket;
1:77323ec: 
1:77323ec: /**
1:77323ec:  * This class encapsulates a <code>Socket</code> connection and has
1:77323ec:  * methods that allow to read and write into the Object streams
1:77323ec:  * created from this connection.
1:77323ec:  */
1:77323ec: public class SocketConnection {
1:77323ec:     /**
1:77323ec:      * Contains the Socket connection between the Replication master and the
1:77323ec:      * slave.
1:77323ec:      */
1:77323ec:     private final Socket socket;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * used to write message objects into the socket connection.
1:77323ec:      */
1:77323ec:     private final ObjectOutputStream objOutputStream;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * used to read message objects sent in the socket connection.
1:77323ec:      */
1:77323ec:     private final ObjectInputStream objInputStream;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Constructor creates the streams from the socket object passed as
1:77323ec:      * parameter.
1:77323ec:      *
1:77323ec:      * @param socket the <code>Socket</code> object that this class
1:77323ec:      *               encapsulates.
1:77323ec:      *
1:77323ec:      * @throws IOException If an exception occurs while creating the
1:77323ec:      *                     streams from the socket object.
1:77323ec:      */
1:77323ec:     public SocketConnection(Socket socket) throws IOException {
1:77323ec:         this.socket = socket;
1:77323ec:         
1:77323ec:         //Get the OutputStream from the socket
1:77323ec:         objOutputStream = new ObjectOutputStream(socket.getOutputStream());
1:77323ec:         //Get the InputStream from the socket
1:77323ec:         objInputStream = new ObjectInputStream(socket.getInputStream());
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to read the object messages that are sent.
1:77323ec:      * waits on the input stream until a data is present that
1:77323ec:      * can be read and returns this data.
1:77323ec:      *
1:77323ec:      * @return the data read from the connection.
1:77323ec:      *
1:77323ec:      * @throws ClassNotFoundException Class of a serialized object cannot 
1:77323ec:      *                                be found.
1:77323ec:      * @throws IOException if an exception occurs while reading from the
1:77323ec:      *                     stream.
1:77323ec:      */
1:77323ec:     public Object readMessage()
1:77323ec:     throws ClassNotFoundException, IOException {
1:77323ec:         return objInputStream.readObject();
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to send the object messages across the socket conection. 
1:77323ec:      *
1:77323ec:      * @param message the data to be written into the connection.
1:77323ec:      *
1:77323ec:      * @throws IOException if an exception occurs while writing into the
1:77323ec:      *                     stream.
1:77323ec:      */
1:77323ec:     public void writeMessage(Object message) throws IOException {
1:a0c8138:         // reset stream so that previously shipped objects can be gc'ed
1:a0c8138:         objOutputStream.reset();
1:77323ec:         objOutputStream.writeObject(message);
1:77323ec:         //flush the stream to ensure that all the data that is part
1:77323ec:         //of the message object is written and no data remains
1:77323ec:         //in this stream.
1:77323ec:         objOutputStream.flush();
1:77323ec:     }
1:b9c57d5:     
1:b9c57d5:     /**
1:b9c57d5:      * Closes the <code>Socket</code> and the object streams obtained
1:b9c57d5:      * from it.
1:b9c57d5:      *
1:b9c57d5:      * @throws IOException if an exception occurs while trying to close
1:b9c57d5:      *                     the socket or the streams.
1:b9c57d5:      */
1:b9c57d5:     public void tearDown() throws IOException {
1:42526fd:         // If the other party has crashed, closing the streams may fail (at
1:42526fd:         // least the output stream since its close() method calls flush()).
1:42526fd:         // In any case, we want the socket to be closed, so close it in a
1:42526fd:         // finally clause. DERBY-3878
1:42526fd:         try {
1:42526fd:             objInputStream.close();
1:42526fd:             objOutputStream.close();
1:42526fd:         } finally {
1:42526fd:             socket.close();
1:42526fd:         }
1:b9c57d5:     }
1:77323ec: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:42526fd
/////////////////////////////////////////////////////////////////////////
1:         // If the other party has crashed, closing the streams may fail (at
1:         // least the output stream since its close() method calls flush()).
1:         // In any case, we want the socket to be closed, so close it in a
1:         // finally clause. DERBY-3878
1:         try {
1:             objInputStream.close();
1:             objOutputStream.close();
1:         } finally {
1:             socket.close();
1:         }
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.replication.net.SocketConnection
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.store.replication.net;
commit:a0c8138
/////////////////////////////////////////////////////////////////////////
1:         // reset stream so that previously shipped objects can be gc'ed
1:         objOutputStream.reset();
commit:b9c57d5
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Closes the <code>Socket</code> and the object streams obtained
1:      * from it.
1:      *
1:      * @throws IOException if an exception occurs while trying to close
1:      *                     the socket or the streams.
1:      */
1:     public void tearDown() throws IOException {
0:         objInputStream.close();
0:         objOutputStream.close();
0:         socket.close();
1:     }
commit:77323ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0:    Derby - Class org.apache.derby.impl.services.replication.net.SocketConnection
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
0: package org.apache.derby.impl.services.replication.net;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.net.Socket;
1: 
1: /**
1:  * This class encapsulates a <code>Socket</code> connection and has
1:  * methods that allow to read and write into the Object streams
1:  * created from this connection.
1:  */
1: public class SocketConnection {
1:     /**
1:      * Contains the Socket connection between the Replication master and the
1:      * slave.
1:      */
1:     private final Socket socket;
1:     
1:     /**
1:      * used to write message objects into the socket connection.
1:      */
1:     private final ObjectOutputStream objOutputStream;
1:     
1:     /**
1:      * used to read message objects sent in the socket connection.
1:      */
1:     private final ObjectInputStream objInputStream;
1:     
1:     /**
1:      * Constructor creates the streams from the socket object passed as
1:      * parameter.
1:      *
1:      * @param socket the <code>Socket</code> object that this class
1:      *               encapsulates.
1:      *
1:      * @throws IOException If an exception occurs while creating the
1:      *                     streams from the socket object.
1:      */
1:     public SocketConnection(Socket socket) throws IOException {
1:         this.socket = socket;
1:         
1:         //Get the OutputStream from the socket
1:         objOutputStream = new ObjectOutputStream(socket.getOutputStream());
1:         //Get the InputStream from the socket
1:         objInputStream = new ObjectInputStream(socket.getInputStream());
1:     }
1:     
1:     /**
1:      * Used to read the object messages that are sent.
1:      * waits on the input stream until a data is present that
1:      * can be read and returns this data.
1:      *
1:      * @return the data read from the connection.
1:      *
1:      * @throws ClassNotFoundException Class of a serialized object cannot 
1:      *                                be found.
1:      * @throws IOException if an exception occurs while reading from the
1:      *                     stream.
1:      */
1:     public Object readMessage()
1:     throws ClassNotFoundException, IOException {
1:         return objInputStream.readObject();
1:     }
1:     
1:     /**
1:      * Used to send the object messages across the socket conection. 
1:      *
1:      * @param message the data to be written into the connection.
1:      *
1:      * @throws IOException if an exception occurs while writing into the
1:      *                     stream.
1:      */
1:     public void writeMessage(Object message) throws IOException {
1:         objOutputStream.writeObject(message);
1:         //flush the stream to ensure that all the data that is part
1:         //of the message object is written and no data remains
1:         //in this stream.
1:         objOutputStream.flush();
1:     }
1: }
============================================================================