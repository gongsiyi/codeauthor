1:eac0369: /*
1:9ed7c4d: 
1:345de35:    Derby - Class org.apache.derby.catalog.TypeDescriptor
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
1:eac0369:  */
1:4aef9b0: 
1:eac0369: package org.apache.derby.catalog;
3:eac0369: 
1:a8347d0: import java.sql.Types;
1:a8347d0: 
1:a8347d0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:d806971: import org.apache.derby.iapi.types.StringDataValue;
1:d806971: 
1:4aef9b0: /**
1:2afe578:  * TypeDescriptor represents a type in a system catalog, a
1:2afe578:  * persistent type. Examples are columns in tables and parameters
1:2afe578:  * for routines. A TypeDescriptor is immutable.
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface TypeDescriptor
1:eac0369: {
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTANTS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:a8347d0: 	/**
1:eac0369: 	  The return value from getMaximumWidth() for types where the maximum
1:eac0369: 	  width is unknown.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public	static	int MAXIMUM_WIDTH_UNKNOWN = -1;
1:a8347d0:     
1:a8347d0:     /**
1:a8347d0:      * Catalog type for nullable INTEGER
1:a8347d0:      */
1:a8347d0:     TypeDescriptor INTEGER = DataTypeDescriptor.INTEGER.getCatalogType();
1:eac0369: 
1:a8347d0:     /**
1:2e83f13:      * Catalog type for not nullable INTEGER
1:2e83f13:      */
1:2e83f13:     TypeDescriptor INTEGER_NOT_NULL =
1:2e83f13:         DataTypeDescriptor.INTEGER_NOT_NULL.getCatalogType();
1:2e83f13:     
1:2e83f13:     /**
1:a8347d0:      * Catalog type for nullable SMALLINT
1:a8347d0:      */
1:2e83f13:     TypeDescriptor SMALLINT = DataTypeDescriptor.SMALLINT.getCatalogType();
1:2e83f13:     
1:2e83f13:     /**
1:2e83f13:      * Catalog type for not nullable INTEGER
1:2e83f13:      */
1:2e83f13:     TypeDescriptor SMALLINT_NOT_NULL =
1:2e83f13:         DataTypeDescriptor.SMALLINT_NOT_NULL.getCatalogType();
1:a8347d0: 
1:2782d72:     /**
1:2782d72:      * Catalog type for nullable DOUBLE
1:2782d72:      */
1:2782d72:     TypeDescriptor DOUBLE = DataTypeDescriptor.DOUBLE.getCatalogType();
1:2782d72: 
1:a8347d0: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the jdbc type id for this type.  JDBC type can be
1:eac0369: 	 * found in java.sql.Types. 
5:eac0369: 	 *
1:eac0369: 	 * @return	a jdbc type, e.g. java.sql.Types.DECIMAL 
1:403684d: 	 *
1:1cd0a14: 	 * @see java.sql.Types
1:a8347d0: 	 */
1:eac0369: 	public int getJDBCTypeId();
1:403684d: 
1:eac0369: 	/**
1:eac0369: 	  Returns the maximum width of the type.  This may have
1:eac0369: 	  different meanings for different types.  For example, with char,
1:eac0369: 	  it means the maximum number of characters, while with int, it
1:eac0369: 	  is the number of bytes (i.e. 4).
1:eac0369: 
1:eac0369: 	  @return	the maximum length of this Type; -1 means "unknown/no max length"
1:eac0369: 	  */
1:eac0369: 	public	int			getMaximumWidth();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:09c8a0d: 	  Returns the maximum width of the type IN BYTES.  This is the
1:09c8a0d: 	  maximum number of bytes that could be returned for this type
1:09c8a0d: 	  if the corresponding getXXX() method is used.  For example,
1:09c8a0d: 	  if we have a CHAR type, then we want the number of bytes
1:09c8a0d: 	  that would be returned by a ResultSet.getString() call.
1:eac0369: 
1:09c8a0d: 	  @return	the maximum length of this Type IN BYTES;
1:09c8a0d: 				-1 means "unknown/no max length"
1:eac0369: 	  */
1:09c8a0d: 	public	int			getMaximumWidthInBytes();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Returns the number of decimal digits for the type, if applicable.
1:eac0369: 	 
1:eac0369: 	  @return	The number of decimal digits for the type.  Returns
1:eac0369: 	 		zero for non-numeric types.
1:eac0369: 	  */
1:eac0369: 	public	int			getPrecision();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Returns the number of digits to the right of the decimal for
1:eac0369: 	  the type, if applicable.
1:eac0369: 	 
1:eac0369: 	  @return	The number of digits to the right of the decimal for
1:eac0369: 	 		the type.  Returns zero for non-numeric types.
1:eac0369: 	  */
1:eac0369: 	public	int			getScale();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Gets the nullability that values of this type have.
1:eac0369: 	  
1:eac0369: 
1:eac0369: 	  @return	true if values of this type may be null. false otherwise
1:eac0369: 	  */
1:eac0369: 	public	boolean		isNullable();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Gets the name of this type.
1:eac0369: 	  
1:eac0369: 
1:eac0369: 	  @return	the name of this type
1:eac0369: 	  */
1:eac0369: 	public	String		getTypeName();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Converts this type descriptor (including length/precision)
1:eac0369: 	  to a string suitable for appearing in a SQL type specifier.  E.g.
1:eac0369: 	 
1:eac0369: 	 			VARCHAR(30)
1:eac0369: 
1:eac0369: 	  or
1:eac0369: 
1:eac0369: 	             java.util.Hashtable 
1:eac0369: 	 
1:eac0369: 	 
1:eac0369: 	  @return	String version of type, suitable for running through
1:eac0369: 	 			a SQL Parser.
1:eac0369: 	 
1:eac0369: 	 */
1:eac0369: 	public 	String		getSQLstring();
1:eac0369: 
1:eac0369: 	/**
1:7752cf6: 	 * Get the collation type for this type. This api applies only to character
1:403684d: 	 * string types. And its return value is valid only if the collation 
1:7752cf6: 	 * derivation  of this type is "implicit" or "explicit". (In Derby 10.3,
1:7752cf6: 	 * collation derivation can't be "explicit". Hence in Derby 10.3, this api
1:7752cf6: 	 * should be used only if the collation derivation is "implicit". 
1:403684d: 	 *
1:7752cf6: 	 * @return	collation type which applies to character string types with
1:7752cf6: 	 * collation derivation of "implicit" or "explicit". The possible return
1:403684d: 	 * values in Derby 10.3 will be COLLATION_TYPE_UCS_BASIC
1:403684d:      * and COLLATION_TYPE_TERRITORY_BASED.
1:403684d:      * 
2:403684d:      * @see StringDataValue#COLLATION_TYPE_UCS_BASIC
2:403684d:      * @see StringDataValue#COLLATION_TYPE_TERRITORY_BASED
1:403684d: 	 * 
1:eac0369: 	 */
1:7752cf6: 	public int getCollationType();
1:eac0369: 
1:eac0369: 	/**
1:4aef9b0: 	 * Return true if this is a Row Multiset type
1:4aef9b0: 	  */
1:4aef9b0: 	public	boolean isRowMultiSet();
1:d66ce7b:     
1:d039ced: 	/**
1:d039ced: 	 * Return true if this is a user defined type
1:d039ced: 	  */
1:d039ced: 	public	boolean isUserDefinedType();
1:d039ced:     
1:d66ce7b:     /**
1:d66ce7b:      * If this catalog type is a row multi-set type
1:d66ce7b:      * then return its array of catalog types.
1:d66ce7b:      * 
1:d66ce7b:      * @return Catalog ypes comprising the row,
1:d66ce7b:      * null if this is not a row type.
1:d66ce7b:      */
1:d66ce7b:     public TypeDescriptor[] getRowTypes();
1:d66ce7b: 
1:d66ce7b:     /**
1:d66ce7b:      * If this catalog type is a row multi-set type
1:d66ce7b:      * then return its array of column names.
1:d66ce7b:      * 
1:d66ce7b:      * @return Column names comprising the row,
1:d66ce7b:      * null if this is not a row type.
1:d66ce7b:      */
1:d66ce7b:     public String[] getRowColumnNames();
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2782d72
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Catalog type for nullable DOUBLE
1:      */
1:     TypeDescriptor DOUBLE = DataTypeDescriptor.DOUBLE.getCatalogType();
1: 
commit:d039ced
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Return true if this is a user defined type
1: 	  */
1: 	public	boolean isUserDefinedType();
1:     
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Return true if this is a Row Multiset type
1: 	  */
1: 	public	boolean isRowMultiSet();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2e83f13
/////////////////////////////////////////////////////////////////////////
1:      * Catalog type for not nullable INTEGER
1:      */
1:     TypeDescriptor INTEGER_NOT_NULL =
1:         DataTypeDescriptor.INTEGER_NOT_NULL.getCatalogType();
1:     
1:     /**
1:     TypeDescriptor SMALLINT = DataTypeDescriptor.SMALLINT.getCatalogType();
1:     
1:     /**
1:      * Catalog type for not nullable INTEGER
1:      */
1:     TypeDescriptor SMALLINT_NOT_NULL =
1:         DataTypeDescriptor.SMALLINT_NOT_NULL.getCatalogType();
commit:d66ce7b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * If this catalog type is a row multi-set type
1:      * then return its array of catalog types.
1:      * 
1:      * @return Catalog ypes comprising the row,
1:      * null if this is not a row type.
1:      */
1:     public TypeDescriptor[] getRowTypes();
1: 
1:     /**
1:      * If this catalog type is a row multi-set type
1:      * then return its array of column names.
1:      * 
1:      * @return Column names comprising the row,
1:      * null if this is not a row type.
1:      */
1:     public String[] getRowColumnNames();
commit:9ed7c4d
/////////////////////////////////////////////////////////////////////////
1: 
commit:c0c33cd
/////////////////////////////////////////////////////////////////////////
commit:a8347d0
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Catalog type for nullable INTEGER
1:      */
1:     TypeDescriptor INTEGER = DataTypeDescriptor.INTEGER.getCatalogType();
1:     /**
1:      * Catalog type for nullable SMALLINT
1:      */
0:     TypeDescriptor SMALLINT = 
0:         DataTypeDescriptor.getBuiltInDataTypeDescriptor(
0:             Types.SMALLINT).getCatalogType();
1:  
1:     
1:     /**
0:      * Catalog type for nullable VARCHAR(128) used for types representing
0:      * system catalogs.
1:      */
0:     TypeDescriptor VARCHAR128 =
0:         DataTypeDescriptor.getBuiltInDataTypeDescriptor(
0:                 Types.VARCHAR, 128).getCatalogType();
commit:2afe578
/////////////////////////////////////////////////////////////////////////
1:  * TypeDescriptor represents a type in a system catalog, a
1:  * persistent type. Examples are columns in tables and parameters
1:  * for routines. A TypeDescriptor is immutable.
commit:81de188
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d806971
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.StringDataValue;
1: 
/////////////////////////////////////////////////////////////////////////
commit:403684d
/////////////////////////////////////////////////////////////////////////
1: 	 * string types. And its return value is valid only if the collation 
1: 	 * values in Derby 10.3 will be COLLATION_TYPE_UCS_BASIC
1:      * and COLLATION_TYPE_TERRITORY_BASED.
1:      * 
1:      * @see StringDataValue#COLLATION_TYPE_UCS_BASIC
1:      * @see StringDataValue#COLLATION_TYPE_TERRITORY_BASED
0: 	 * @param collationTypeValue This will be COLLATION_TYPE_UCS_BASIC
0:      * or COLLATION_TYPE_TERRITORY_BASED
1:      * 
1:      * @see StringDataValue#COLLATION_TYPE_UCS_BASIC
1:      * @see StringDataValue#COLLATION_TYPE_TERRITORY_BASED
/////////////////////////////////////////////////////////////////////////
0: 	 * Collation derivation will be initialized to COLLATION_DERIVATION_NONE.
0: 	 * @return Should be COLLATION_DERIVATION_NONE or COLLATION_DERIVATION_IMPLICIT
1:      * 
0:      * @see StringDataValue#COLLATION_DERIVATION_NONE
0:      * @see StringDataValue#COLLATION_DERIVATION_IMPLICIT
0:      * @see StringDataValue#COLLATION_DERIVATION_EXPLICIT
0: 	 * COLLATION_DERIVATION_NONE/COLLATION_DERIVATION_IMPLICIT/COLLATION_DERIVATION_EXPLICIT
0: 	 * In Derby 10.3, we do not expect to get value COLLATION_DERIVATION_EXPLICIT.
1:      * 
0:      * @see StringDataValue#COLLATION_DERIVATION_NONE
0:      * @see StringDataValue#COLLATION_DERIVATION_IMPLICIT
0:      * @see StringDataValue#COLLATION_DERIVATION_EXPLICIT
1: 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.TypeDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: /**
1:  *
0:  * An interface for describing types in Cloudscape systems.
1:  *	
1:  *	
0:  *	<p>The values in system catalog DATATYPE columns are of type
0:  *	TypeDescriptor.
1:  */
1: 
1: public interface TypeDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTANTS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
1: 	  The return value from getMaximumWidth() for types where the maximum
1: 	  width is unknown.
1: 	 */
1: 
1: 	public	static	int MAXIMUM_WIDTH_UNKNOWN = -1;
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the jdbc type id for this type.  JDBC type can be
1: 	 * found in java.sql.Types. 
1: 	 *
1: 	 * @return	a jdbc type, e.g. java.sql.Types.DECIMAL 
1: 	 *
0: 	 * @see Types
1: 	 */
1: 	public int getJDBCTypeId();
1: 
1: 	/**
1: 	  Returns the maximum width of the type.  This may have
1: 	  different meanings for different types.  For example, with char,
1: 	  it means the maximum number of characters, while with int, it
1: 	  is the number of bytes (i.e. 4).
1: 
1: 	  @return	the maximum length of this Type; -1 means "unknown/no max length"
1: 	  */
1: 	public	int			getMaximumWidth();
1: 
1: 
1: 	/**
1: 	  Returns the number of decimal digits for the type, if applicable.
1: 	 
1: 	  @return	The number of decimal digits for the type.  Returns
1: 	 		zero for non-numeric types.
1: 	  */
1: 	public	int			getPrecision();
1: 
1: 
1: 	/**
1: 	  Returns the number of digits to the right of the decimal for
1: 	  the type, if applicable.
1: 	 
1: 	  @return	The number of digits to the right of the decimal for
1: 	 		the type.  Returns zero for non-numeric types.
1: 	  */
1: 	public	int			getScale();
1: 
1: 
1: 	/**
1: 	  Gets the nullability that values of this type have.
1: 	  
1: 
1: 	  @return	true if values of this type may be null. false otherwise
1: 	  */
1: 	public	boolean		isNullable();
1: 
1: 	/**
1: 	  Gets the name of this type.
1: 	  
1: 
1: 	  @return	the name of this type
1: 	  */
1: 	public	String		getTypeName();
1: 
1: 
1: 	/**
1: 	  Converts this type descriptor (including length/precision)
1: 	  to a string suitable for appearing in a SQL type specifier.  E.g.
1: 	 
1: 	 			VARCHAR(30)
1: 
1: 	  or
1: 
1: 	             java.util.Hashtable 
1: 	 
1: 	 
1: 	  @return	String version of type, suitable for running through
1: 	 			a SQL Parser.
1: 	 
1: 	 */
1: 	public 	String		getSQLstring();
1: 
1: }
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ec2b8d1
/////////////////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Gets the name of the collation type in this descriptor.
0:      * <p>
0:      * Used to generate strings decribing collation type for error messages.
0: 	 * 
0: 	 *
0: 	 *  @return	the name of the collation being used in this type.
0: 	 */
0: 	public String getCollationName();
commit:1cd0a14
/////////////////////////////////////////////////////////////////////////
1: 	 * @see java.sql.Types
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:96a630c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	 * Set the collation type of this TypeDescriptor
0: 	 * @param collationTypeValue This will be 0(UCS_BASIC)/1(TERRITORY_BASED)
/////////////////////////////////////////////////////////////////////////
0: 	 * Collation derivation will be initialized to 0("none").
0: 	 * @return Should be 0("none") or 1("implicit"). 
0: 	public int getCollationDerivation();
0: 	 * @param collationDerivationValue This will be 
0: 	 * (0)none/(1)implicit/(2)explicit
0: 	 * In Derby 10.3, we do not expect to get value 2(explicit).
0: 	public void setCollationDerivation(int collationDerivationValue);
commit:7752cf6
/////////////////////////////////////////////////////////////////////////
0: 	/**
0: 	  For a character string type, the collation derivation should always be 
0: 	  "explicit"(not possible in Derby 10.3), "implicit" or "none". We will 
0: 	  start by setting it to "error" here. But at runtime, no TypeDescriptor 
0: 	  which belongs to a character string type should ever have a collation 
0: 	  derivation of "error". The initialization to "error" is for catching an 
0: 	  edge(bug) case where the collation derivation may not have gotten set 
0: 	  correctly for a character string type.
0: 	  For all the other types (which are not character string types, the 
0: 	  collation derivation will be set to "error".
0: 	 */
0: 	public	static	String COLLATION_DERIVATION_INCORRECT = "error";
0: 	public	static	String COLLATION_DERIVATION_IMPLICIT = "implicit";
0: 	public	static	String COLLATION_DERIVATION_NONE = "none";
0: 	/**
0: 	 * In Derby 10.3, all the character columns could have a collation type of
0: 	 * UCS_BASIC. This is same as what we do in Derby 10.3 release. The other
0: 	 * option in Derby 10.3 is that all the character string types belonging to
0: 	 * system tables will collate using UCS_BASIC but all the character string
0: 	 * types belonging to user tables will collate using TERRITORY_BASED
0: 	 * collation.
0: 	 */
0: 	public	static	int COLLATION_VALUE_UCS_BASIC = 0;
0: 	public	static	int COLLATION_VALUE_TERRITORY_BASED = 1;
0: 
/////////////////////////////////////////////////////////////////////////
0: 	/**
1: 	 * Get the collation type for this type. This api applies only to character
0: 	 * string types. And it's return value is valid only if the collation 
1: 	 * derivation  of this type is "implicit" or "explicit". (In Derby 10.3,
1: 	 * collation derivation can't be "explicit". Hence in Derby 10.3, this api
1: 	 * should be used only if the collation derivation is "implicit". 
0: 	 *
1: 	 * @return	collation type which applies to character string types with
1: 	 * collation derivation of "implicit" or "explicit". The possible return
0: 	 * values in Derby 10.3 will be 0(UCS_BASIC) and 1(TERRITORY_BASED). 
0: 	 * 
0: 	 */
1: 	public int getCollationType();
0: 
0: 	/**
0: 	 * Set the collation type of this DTD
0: 	 * @param collationDerivationValue This will be UCS_BASIC/TERRITORY_BASED
0: 	 */
0: 	public void setCollationType(int collationTypeValue);
0: 
0: 	/**
0: 	 * Get the collation derivation for this type. This applies only for
0: 	 * character string types. For the other types, this api should be
0: 	 * ignored.
0: 	 * 
0: 	 * SQL spec talks about character string types having collation type and 
0: 	 * collation derivation associated with them (SQL spec Section 4.2.2 
0: 	 * Comparison of character strings). If collation derivation says explicit 
0: 	 * or implicit, then it means that there is a valid collation type 
0: 	 * associated with the charcter string type. If the collation derivation is 
0: 	 * none, then it means that collation type can't be established for the 
0: 	 * character string type.
0: 	 * 
0: 	 * 1)Collation derivation will be explicit if SQL COLLATE clause has been  
0: 	 * used for character string type (this is not a possibility for Derby 10.3 
0: 	 * because we are not planning to support SQL COLLATE clause in the 10.3
0: 	 * release). 
0: 	 * 
0: 	 * 2)Collation derivation will be implicit if the collation can be 
0: 	 * determined w/o the COLLATE clause eg CREATE TABLE t1(c11 char(4)) then 
0: 	 * c11 will have collation of USER character set. Another eg, TRIM(c11) 
0: 	 * then the result character string of TRIM operation will have collation 
0: 	 * of the operand, c11.
0: 	 * 
0: 	 * 3)Collation derivation will be none if the aggregate methods are dealing 
0: 	 * with character strings with different collations (Section 9.3 Data types 
0: 	 * of results of aggregations Syntax Rule 3aii).
0: 	 *  
0: 	 * Collation derivation will be initialized to "error" but by the 
0: 	 * time the runtime code kicks in, it should get set to "implicit"
0: 	 * or "none". Otherwise, we have run into a bug.
0: 	 *  
0: 	 * @return Should be "implicit" or "none". A value of "error" indicates 
0: 	 * that the collation derivation of character type has not been set
0: 	 * correctly.
0: 	 */
0: 	public String getCollationDerivation();
0: 
0: 	/**
0: 	 * Set the collation derivation of this DTD
0: 	 * @param collationDerivationValue This will be implicit/none/explicit
0: 	 * In Derby 10.3, we do not expect to get value explicit.
0: 	 */
0: 	public void setCollationDerivation(String collationDerivationValue);
0: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
0:  * An interface for describing types in Derby systems.
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:09c8a0d
/////////////////////////////////////////////////////////////////////////
1: 	  Returns the maximum width of the type IN BYTES.  This is the
1: 	  maximum number of bytes that could be returned for this type
1: 	  if the corresponding getXXX() method is used.  For example,
1: 	  if we have a CHAR type, then we want the number of bytes
1: 	  that would be returned by a ResultSet.getString() call.
0: 
1: 	  @return	the maximum length of this Type IN BYTES;
1: 				-1 means "unknown/no max length"
0: 	  */
1: 	public	int			getMaximumWidthInBytes();
0: 
0: 
0: 	/**
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog;
0: 
0: /**
0:  *
0:  * An interface for describing types in Cloudscape systems.
0:  *	
0:  *	
0:  *	<p>The values in system catalog DATATYPE columns are of type
0:  *	TypeDescriptor.
0:  */
0: 
0: public interface TypeDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTANTS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 
0: 	/**
0: 	  The return value from getMaximumWidth() for types where the maximum
0: 	  width is unknown.
0: 	 */
0: 
0: 	public	static	int MAXIMUM_WIDTH_UNKNOWN = -1;
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get the jdbc type id for this type.  JDBC type can be
0: 	 * found in java.sql.Types. 
0: 	 *
0: 	 * @return	a jdbc type, e.g. java.sql.Types.DECIMAL 
0: 	 *
0: 	 * @see Types
0: 	 */
0: 	public int getJDBCTypeId();
0: 
0: 	/**
0: 	  Returns the maximum width of the type.  This may have
0: 	  different meanings for different types.  For example, with char,
0: 	  it means the maximum number of characters, while with int, it
0: 	  is the number of bytes (i.e. 4).
0: 
0: 	  @return	the maximum length of this Type; -1 means "unknown/no max length"
0: 	  */
0: 	public	int			getMaximumWidth();
0: 
0: 
0: 	/**
0: 	  Returns the number of decimal digits for the type, if applicable.
0: 	 
0: 	  @return	The number of decimal digits for the type.  Returns
0: 	 		zero for non-numeric types.
0: 	  */
0: 	public	int			getPrecision();
0: 
0: 
0: 	/**
0: 	  Returns the number of digits to the right of the decimal for
0: 	  the type, if applicable.
0: 	 
0: 	  @return	The number of digits to the right of the decimal for
0: 	 		the type.  Returns zero for non-numeric types.
0: 	  */
0: 	public	int			getScale();
0: 
0: 
0: 	/**
0: 	  Gets the nullability that values of this type have.
0: 	  
0: 
0: 	  @return	true if values of this type may be null. false otherwise
0: 	  */
0: 	public	boolean		isNullable();
0: 
0: 	/**
0: 	  Gets the name of this type.
0: 	  
0: 
0: 	  @return	the name of this type
0: 	  */
0: 	public	String		getTypeName();
0: 
0: 
0: 	/**
0: 	  Converts this type descriptor (including length/precision)
0: 	  to a string suitable for appearing in a SQL type specifier.  E.g.
0: 	 
0: 	 			VARCHAR(30)
0: 
0: 	  or
0: 
0: 	             java.util.Hashtable 
0: 	 
0: 	 
0: 	  @return	String version of type, suitable for running through
0: 	 			a SQL Parser.
0: 	 
0: 	 */
0: 	public 	String		getSQLstring();
0: 
0: }
0: 
============================================================================