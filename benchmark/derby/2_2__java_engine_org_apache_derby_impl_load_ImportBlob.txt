1:84e347a: /*
1:84e347a: 
1:84e347a:    Derby - Class org.apache.derby.impl.load.ImportBlob
1:84e347a: 
1:84e347a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:84e347a:    contributor license agreements.  See the NOTICE file distributed with
1:84e347a:    this work for additional information regarding copyright ownership.
1:84e347a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:84e347a:    (the "License"); you may not use this file except in compliance with
1:84e347a:    the License.  You may obtain a copy of the License at
1:84e347a: 
1:84e347a:       http://www.apache.org/licenses/LICENSE-2.0
1:84e347a: 
1:84e347a:    Unless required by applicable law or agreed to in writing, software
1:84e347a:    distributed under the License is distributed on an "AS IS" BASIS,
1:84e347a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84e347a:    See the License for the specific language governing permissions and
1:84e347a:    limitations under the License.
1:84e347a: 
1:84e347a:  */
1:84e347a: 
1:84e347a: package org.apache.derby.impl.load;
1:84e347a: import org.apache.derby.iapi.services.io.LimitInputStream;
1:84e347a: import org.apache.derby.iapi.util.StringUtil;
1:84e347a: import java.sql.Blob;
1:84e347a: import java.sql.SQLException;
1:84e347a: import java.io.InputStream;
1:84e347a: 
1:84e347a: /**
1:84e347a:  * This class implements  <code > java.sql.BLOB interface </code>.  
1:84e347a:  * Objects created using the <code> ImportBlob </code> class  are 
1:84e347a:  * intended to be be used to create a blob object of the data  stored 
1:84e347a:  * in an import file or as an hex string.  Only the routines that 
1:84e347a:  * are needed read the blob data for the blob columns by the 
1:84e347a:  * inserts done through the VTI  have real implementations, 
1:84e347a:  * Other routines are dummy ones to satisfy <code> java.sql.Blob </code> 
1:84e347a:  * interface.
1:84e347a:  */
1:84e347a: 
1:84e347a: class ImportBlob implements java.sql.Blob {
1:84e347a: 
1:84e347a:     private ImportLobFile lobFile;
1:84e347a: 	private long blobPosition;
1:84e347a: 	private long blobLength;
1:84e347a:     private byte[] blobData = null;
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Create a import Blob object, that reads <code> length </code> amount of 
1:84e347a:      * data  from an external file, starting at <code> position </code>. 
1:84e347a:      * @param lobFile  lob file resource object, using which data is read.
1:84e347a:      * @param position  byte offset in the file, of this blob columb data. 
1:84e347a:      * @param length   length of this blob object data. 
1:84e347a:      */
1:84e347a:     public ImportBlob(ImportLobFile lobFile, long position, long length) 
4:84e347a: 	{
1:84e347a: 		this.lobFile = lobFile;
1:84e347a: 		this.blobPosition = position;
1:84e347a: 		this.blobLength = length;
8:84e347a: 	}
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Create a import Blob object, whose value is the give hex data string.  
1:ffdaf1e:      * @param data  byte array that contains the blob data. 
1:84e347a:      */
1:ffdaf1e:     public ImportBlob(byte[] data) 
1:84e347a:     {
1:ffdaf1e:         blobData = data;
1:ffdaf1e:         blobLength = data.length;
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:84e347a:   /**
1:84e347a:    * Returns the number of bytes in this <code>BLOB</code>  object.
1:84e347a:    * @return length of the <code>BLOB</code> in bytes
1:84e347a:    * @exception SQLException on any error.
1:84e347a:    */
1:84e347a: 	public long length() throws SQLException {
1:84e347a: 		return blobLength;
1:84e347a: 	}
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * Returns  <code>BLOB</code> value designated by this
1:84e347a:      * <code>Blob</code> object as a input stream.
1:84e347a:      *
1:84e347a:      * @return a stream containing the <code>BLOB</code> data
1:84e347a:      * @exception SQLException if any error occurs while setting up 
1:84e347a:      *                         this blob data in the import file as stream. 
1:84e347a:      */
1:84e347a: 	public java.io.InputStream getBinaryStream () throws SQLException
1:84e347a: 	{
1:84e347a: 		try {
1:84e347a:             InputStream fis;
1:84e347a:             if(blobData != null) {
1:84e347a:                 fis = new java.io.ByteArrayInputStream(blobData);
1:84e347a:                 // wrap the InputStream with a LimitInputStream class,
1:84e347a:                 // only the length of the  
1:84e347a:                 LimitInputStream  limitIn = new  LimitInputStream(fis);
1:84e347a:                 limitIn.setLimit((int) blobLength);
1:84e347a:                 return limitIn;
1:84e347a: 
1:84e347a:             } else {
1:84e347a:                 return lobFile.getBinaryStream(blobPosition, blobLength);
1:84e347a:             }
1:84e347a: 		} catch (Exception e) {
1:84e347a: 			throw LoadError.unexpectedError(e);
1:84e347a: 		}
1:84e347a: 	}
1:84e347a: 
1:84e347a:     
1:84e347a:     /** following rotines does not have implmentation because there are not
1:84e347a:      * used by the VTI that is used to import the data. 
1:84e347a:      */
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementatio  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob 
1:84e347a:      */
1:dfc9ab0: 	public byte[] getBytes(long pos, int length) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementatio  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob 
1:84e347a:      */
1:dfc9ab0: 	public long position(byte pattern[], long start) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementation is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob
1:84e347a:      */
1:dfc9ab0: 	public long position(Blob pattern, long start) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementation  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob
1:84e347a:      */
1:dfc9ab0:     public int setBytes(long pos, byte[] bytes) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementation  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob
1:84e347a:      */
1:dfc9ab0:     public int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementation  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob
1:84e347a:      */
1:dfc9ab0:     public java.io.OutputStream setBinaryStream(long pos) throws SQLException { throw methodNotImplemented(); }
1:84e347a: 
1:84e347a:     /**
1:84e347a:      * This routine is not used by the VTI to read the data, so no 
1:84e347a:      * implementation  is provided , an exception is thrown if used.  
1:84e347a:      *
1:84e347a:      * @see java.sql.Blob
1:84e347a:      */
1:dfc9ab0:     public void truncate(long len) throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0: 
1:dfc9ab0:     /** Raise error, not used by import */
1:dfc9ab0:     public InputStream 	getBinaryStream(long pos, long length) throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0: 
1:dfc9ab0:     /** Raise error, not used by import */
1:dfc9ab0:     public  void free() throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0:     
1:dfc9ab0:     /** Return an unimplemented feature error */
1:dfc9ab0:     private SQLException   methodNotImplemented()
1:dfc9ab0:     {
1:dfc9ab0: 		return LoadError.unexpectedError( new Exception("Method not implemented")) ;
1:dfc9ab0:     }
1:84e347a: }
1:84e347a: 
1:84e347a: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
1: 	public byte[] getBytes(long pos, int length) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1: 	public long position(byte pattern[], long start) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1: 	public long position(Blob pattern, long start) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public int setBytes(long pos, byte[] bytes) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public java.io.OutputStream setBinaryStream(long pos) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public void truncate(long len) throws SQLException { throw methodNotImplemented(); }
1: 
1:     /** Raise error, not used by import */
1:     public InputStream 	getBinaryStream(long pos, long length) throws SQLException { throw methodNotImplemented(); }
1: 
1:     /** Raise error, not used by import */
1:     public  void free() throws SQLException { throw methodNotImplemented(); }
1:     
1:     /** Return an unimplemented feature error */
1:     private SQLException   methodNotImplemented()
1:     {
1: 		return LoadError.unexpectedError( new Exception("Method not implemented")) ;
1:     }
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:ffdaf1e
/////////////////////////////////////////////////////////////////////////
1:      * @param data  byte array that contains the blob data. 
1:     public ImportBlob(byte[] data) 
1:         blobData = data;
1:         blobLength = data.length;
commit:84e347a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.load.ImportBlob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: import org.apache.derby.iapi.services.io.LimitInputStream;
1: import org.apache.derby.iapi.util.StringUtil;
1: import java.sql.Blob;
1: import java.sql.SQLException;
1: import java.io.InputStream;
1: 
1: /**
1:  * This class implements  <code > java.sql.BLOB interface </code>.  
1:  * Objects created using the <code> ImportBlob </code> class  are 
1:  * intended to be be used to create a blob object of the data  stored 
1:  * in an import file or as an hex string.  Only the routines that 
1:  * are needed read the blob data for the blob columns by the 
1:  * inserts done through the VTI  have real implementations, 
1:  * Other routines are dummy ones to satisfy <code> java.sql.Blob </code> 
1:  * interface.
1:  */
1: 
1: class ImportBlob implements java.sql.Blob {
1: 
1:     private ImportLobFile lobFile;
1: 	private long blobPosition;
1: 	private long blobLength;
1:     private byte[] blobData = null;
1: 
1: 
1:     /**
1:      * Create a import Blob object, that reads <code> length </code> amount of 
1:      * data  from an external file, starting at <code> position </code>. 
1:      * @param lobFile  lob file resource object, using which data is read.
1:      * @param position  byte offset in the file, of this blob columb data. 
1:      * @param length   length of this blob object data. 
1:      */
1:     public ImportBlob(ImportLobFile lobFile, long position, long length) 
1: 	{
1: 		this.lobFile = lobFile;
1: 		this.blobPosition = position;
1: 		this.blobLength = length;
1: 	}
1: 
1: 
1:     /**
1:      * Create a import Blob object, whose value is the give hex data string.  
0:      * @param hexData  data in the hex format, that this blob object contains. 
1:      */
0:     public ImportBlob(String hexData) 
1:     {
0:         // convert the given blob data in the hex format to a byte array.
0:         blobData = StringUtil.fromHexString(hexData, 0, hexData.length());
0:         blobLength = blobData.length;
1:     }
1: 
1: 
1:   /**
1:    * Returns the number of bytes in this <code>BLOB</code>  object.
1:    * @return length of the <code>BLOB</code> in bytes
1:    * @exception SQLException on any error.
1:    */
1: 	public long length() throws SQLException {
1: 		return blobLength;
1: 	}
1: 
1: 
1:     /**
1:      * Returns  <code>BLOB</code> value designated by this
1:      * <code>Blob</code> object as a input stream.
1:      *
1:      * @return a stream containing the <code>BLOB</code> data
1:      * @exception SQLException if any error occurs while setting up 
1:      *                         this blob data in the import file as stream. 
1:      */
1: 	public java.io.InputStream getBinaryStream () throws SQLException
1: 	{
1: 		try {
1:             InputStream fis;
1:             if(blobData != null) {
1:                 fis = new java.io.ByteArrayInputStream(blobData);
1:                 // wrap the InputStream with a LimitInputStream class,
1:                 // only the length of the  
1:                 LimitInputStream  limitIn = new  LimitInputStream(fis);
1:                 limitIn.setLimit((int) blobLength);
1:                 return limitIn;
1: 
1:             } else {
1:                 return lobFile.getBinaryStream(blobPosition, blobLength);
1:             }
1: 		} catch (Exception e) {
1: 			throw LoadError.unexpectedError(e);
1: 		}
1: 	}
1: 
1:     
1:     /** following rotines does not have implmentation because there are not
1:      * used by the VTI that is used to import the data. 
1:      */
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementatio  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob 
1:      */
0: 	public byte[] getBytes(long pos, int length) throws SQLException {
0: 		throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented"));
1: 	}
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementatio  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob 
1:      */
0: 	public long position(byte pattern[], long start) throws SQLException
1: 	{
0: 		throw LoadError.unexpectedError(
0:                         new Exception("Method not implemented"));
1: 	}
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob
1:      */
0: 	public long position(Blob pattern, long start) throws SQLException {
0: 		throw LoadError.unexpectedError(
0:                             new Exception("Method not implemented"));
1: 	}
1: 
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob
1:      */
0:     public int setBytes(long pos, byte[] bytes) throws SQLException {
0: 		throw LoadError.unexpectedError(new Exception("Method not implemented"));
1: 	}
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob
1:      */
0:     public int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException
1: 	{
0: 		throw LoadError.unexpectedError(
0:                         new Exception("Method not implemented"));
1: 	}
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob
1:      */
0:     public java.io.OutputStream setBinaryStream(long pos) throws SQLException 
1: 	{
0: 		throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented"));
1: 	}
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation  is provided , an exception is thrown if used.  
1:      *
1:      * @see java.sql.Blob
1:      */
0:     public void truncate(long len) throws SQLException {
0: 		throw LoadError.unexpectedError(
0:                         new Exception("Method not implemented"));
1: 	}
1: }
1: 
1: 
============================================================================