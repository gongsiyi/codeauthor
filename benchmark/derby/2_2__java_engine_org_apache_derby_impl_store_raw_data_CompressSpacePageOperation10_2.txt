1:f824190: /*
2:f824190: 
1:f824190:    Derby - Class org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2
1:f824190: 
1:f824190:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f824190:    contributor license agreements.  See the NOTICE file distributed with
1:f824190:    this work for additional information regarding copyright ownership.
1:f824190:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f824190:    (the "License"); you may not use this file except in compliance with
1:f824190:    the License.  You may obtain a copy of the License at
1:f824190: 
1:f824190:       http://www.apache.org/licenses/LICENSE-2.0
1:f824190: 
1:f824190:    Unless required by applicable law or agreed to in writing, software
1:f824190:    distributed under the License is distributed on an "AS IS" BASIS,
1:f824190:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f824190:    See the License for the specific language governing permissions and
1:f824190:    limitations under the License.
1:f824190: 
1:f824190:  */
1:f824190: 
1:f824190: package org.apache.derby.impl.store.raw.data;
1:f824190: 
1:f824190: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:f824190: 
1:f824190: import org.apache.derby.iapi.error.StandardException;
1:f824190: import org.apache.derby.iapi.services.io.CompressedNumber;
1:f824190: 
1:f824190: import java.io.ObjectOutput;
1:f824190: import java.io.IOException;
1:f824190: import java.io.ObjectInput;
1:f824190: 
1:f824190: /**
1:f824190:  * This class overrides the CompressSpacePageOperation class to write
1:f824190:  * CompressSpaceOperation Log Records that do not support negative values
1:f824190:  * for new_highest_page. No other changes are added to the superclass behavior.
1:3546404:  * This class ensures backward compatibility for Soft upgrades.
1:f824190:  */
1:f824190: public final class CompressSpacePageOperation10_2 extends CompressSpacePageOperation {
1:f824190:     
1:f824190: 	/**************************************************************************
1:f824190: 	* Constructors for This class:
1:f824190: 	**************************************************************************
1:f824190: 	*/
1:3546404:     CompressSpacePageOperation10_2(
1:f824190: 		AllocPage   allocPage, 
1:f824190: 		int         highest_page, 
1:f824190: 		int         num_truncated)
1:f824190: 			throws StandardException
1:f824190: 	{
1:f824190: 		super(allocPage, highest_page, num_truncated);
1:f824190: 	}
1:f824190: 
1:f824190: 	// no-arg constructor, required by Formatable 
1:f824190: 	public CompressSpacePageOperation10_2() { super(); }
1:f824190: 
1:f824190: 	/**************************************************************************
1:f824190: 	* Public Methods of Formatable interface.
1:f824190: 	**************************************************************************
1:f824190: 	*/
1:f824190: 
1:f824190: 	public void writeExternal(ObjectOutput out) throws IOException 
1:f824190: 	{
1:f824190: 		super.writeExternal(out);
1:f824190: 		CompressedNumber.writeInt(out, newHighestPage);
1:f824190: 		CompressedNumber.writeInt(out, num_pages_truncated);
1:f824190: 	}
1:f824190: 
1:f824190: 	/**
1:f824190: 		@exception IOException error reading from log stream
1:f824190: 		@exception ClassNotFoundException cannot read object from input
1:f824190: 	*/
1:f824190: 	public void readExternal(ObjectInput in)
1:f824190: 		 throws IOException, ClassNotFoundException
1:f824190: 	{
1:f824190: 		super.readExternal(in);
1:f824190: 		newHighestPage      = CompressedNumber.readInt(in);
1:f824190: 		num_pages_truncated = CompressedNumber.readInt(in);
1:f824190: 	}
1:f824190: 
1:f824190: 	/**
1:f824190: 		Return my format identifier.
1:f824190: 	*/
1:f824190: 	public int getTypeFormatId() {
1:f824190: 		return StoredFormatIds.LOGOP_COMPRESS10_2_SPACE;
1:f824190: 	}
1:f824190: 
1:f824190: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
1:  * This class ensures backward compatibility for Soft upgrades.
/////////////////////////////////////////////////////////////////////////
1:     CompressSpacePageOperation10_2(
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:f824190
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.CompressSpacePageOperation;
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import java.io.ObjectInput;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This class overrides the CompressSpacePageOperation class to write
1:  * CompressSpaceOperation Log Records that do not support negative values
1:  * for new_highest_page. No other changes are added to the superclass behavior.
0:  * This class ensures backword compatibility for Soft upgrades. 
1:  */
1: public final class CompressSpacePageOperation10_2 extends CompressSpacePageOperation {
1:     
1: 	/**************************************************************************
1: 	* Constructors for This class:
1: 	**************************************************************************
1: 	*/
0: 	public CompressSpacePageOperation10_2(
1: 		AllocPage   allocPage, 
1: 		int         highest_page, 
1: 		int         num_truncated)
1: 			throws StandardException
1: 	{
1: 		super(allocPage, highest_page, num_truncated);
1: 	}
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public CompressSpacePageOperation10_2() { super(); }
1: 
1: 	/**************************************************************************
1: 	* Public Methods of Formatable interface.
1: 	**************************************************************************
1: 	*/
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeInt(out, newHighestPage);
1: 		CompressedNumber.writeInt(out, num_pages_truncated);
1: 	}
1: 
1: 	/**
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException cannot read object from input
1: 	*/
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		newHighestPage      = CompressedNumber.readInt(in);
1: 		num_pages_truncated = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_COMPRESS10_2_SPACE;
1: 	}
1: 
1: }
============================================================================