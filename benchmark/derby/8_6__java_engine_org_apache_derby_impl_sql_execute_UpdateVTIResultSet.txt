1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.UpdateVTIResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Update the rows from the source into the specified
1:eac0369:  * base table.
1:eac0369:  */
1:6bc9897: class UpdateVTIResultSet extends DMLVTIResultSet
1:61070a6: {
1:eac0369: 	private java.sql.ResultSet		rs;
1:eac0369: 
1:eac0369: 	private	TemporaryRowHolderImpl	rowHolder;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      */
1:eac0369:     public UpdateVTIResultSet(NoPutResultSet source, 
1:eac0369: 						   Activation activation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		super(source, activation);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	protected void openCore() throws StandardException
1:eac0369: 	{
1:eac0369:         int rowLocationColumn = -1;
1:eac0369:         boolean firstRow = true;
1:eac0369:         
1:eac0369:         rs = activation.getTargetVTI();
1:6bc9897: 		ExecRow row = getNextRowCore(sourceResultSet);
1:eac0369: 
1:eac0369:         if( null != row)
1:eac0369:             rowLocationColumn = row.nColumns();
1:eac0369: 
1:eac0369: 		/* The source does not know whether or not we are doing a
1:eac0369: 		 * deferred mode insert.  If we are, then we must clear the
1:eac0369: 		 * index scan info from the activation so that the row changer
1:eac0369: 		 * does not re-use that information (which won't be valid for
1:eac0369: 		 * a deferred mode insert).
1:eac0369: 		 */
1:eac0369: 		if (constants.deferred)
1:eac0369: 		{
1:eac0369: 			activation.clearIndexScanInfo();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (null == rowHolder && constants.deferred)
1:eac0369: 		{
1:eac0369: 			Properties properties = new Properties();
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If deferred we save a copy of the entire row.
1:eac0369: 			*/
1:81b9853: 			rowHolder =
1:c69c8b0: 				new TemporaryRowHolderImpl(activation, properties,
1:c69c8b0: 										   resultDescription);
1:eac0369: 		}
1:eac0369: 
1:eac0369:         try
1:eac0369:         {
1:eac0369:             while ( row != null )
1:eac0369:             {
1:eac0369:                 if (constants.deferred)
1:eac0369:                 {
1:eac0369:                     // Add the row number to the row.
1:eac0369:                     if( firstRow)
1:eac0369:                     {
1:eac0369:                         row.getColumn( rowLocationColumn).setValue( rs.getRow());
1:eac0369:                         firstRow = false;
1:eac0369:                     }
1:eac0369:                     else
1:eac0369:                     {
1:eac0369:                         DataValueDescriptor rowLocation = row.cloneColumn( rowLocationColumn);
1:eac0369:                         rowLocation.setValue( rs.getRow());
1:eac0369:                         row.setColumn( rowLocationColumn, rowLocation);
1:eac0369:                     }
1:eac0369:                     rowHolder.insert(row);
1:eac0369:                 }
1:eac0369:                 else
1:6bc9897:                     updateVTI(rs, row);
1:eac0369:                 rowCount++;
1:eac0369: 
1:eac0369:                 // No need to do a next on a single row source
1:eac0369:                 if (constants.singleRowSource)
1:eac0369:                 {
1:eac0369:                     row = null;
1:eac0369:                 }
1:eac0369:                 else
1:eac0369:                 {
2:eac0369:                     row = getNextRowCore(sourceResultSet);
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369:         catch (StandardException se)
1:eac0369:         {
1:eac0369:             throw se;
1:eac0369:         }
1:eac0369: 		catch (Throwable t)
1:eac0369: 		{
1:eac0369: 			throw StandardException.unexpectedUserException(t);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If it's a deferred update, scan the temporary conglomerate and
1:eac0369: 		** insert the rows into the VTI using rowChanger.
1:eac0369: 		*/
1:eac0369: 		if (constants.deferred)
1:eac0369: 		{
1:eac0369: 			CursorResultSet tempRS = rowHolder.getResultSet();
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				tempRS.open();
1:6bc9897: 				while ((row = tempRS.getNextRow()) != null)
1:eac0369: 				{
1:eac0369:                     int rowNumber = row.getColumn( rowLocationColumn).getInt();
1:eac0369:                     rs.absolute( rowNumber);
1:6bc9897: 					updateVTI(rs, row);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369:             catch (Throwable t)
1:eac0369:             {
1:eac0369:                 throw StandardException.unexpectedUserException(t);
1:eac0369:             }
1:eac0369:             finally
1:eac0369: 			{
1:eac0369: 				sourceResultSet.clearCurrentRow();
1:eac0369: 				tempRS.close();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (rowHolder != null)
1:eac0369: 		{
1:eac0369: 			rowHolder.close();
1:eac0369: 			// rowHolder kept across opens
1:eac0369: 		}
1:eac0369: 	} // end of openCore
1:eac0369: 
1:01632c2:     @Override
1:01632c2:     public void close() throws StandardException
1:01632c2:     {
1:01632c2:         close( false );
1:01632c2:     }
1:01632c2: 
1:6bc9897: 	private void updateVTI(ResultSet target, ExecRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         int[] changedColumnIds = constants.changedColumnIds;
1:eac0369: 		try
1:eac0369: 		{
1:eac0369:             for( int i = 0; i < changedColumnIds.length; i++)
1:eac0369:             {
1:eac0369:                 int columnId = changedColumnIds[i];
1:eac0369:                 DataValueDescriptor newValue = row.getColumn( i + 1);
1:eac0369:                 if( newValue.isNull())
1:eac0369:                     target.updateNull( columnId);
1:eac0369:                 else
1:eac0369:                     newValue.setInto( target, columnId);
1:eac0369:             }
1:eac0369:             target.updateRow();
1:eac0369:         }
1:eac0369: 		catch (Throwable t)
1:eac0369: 		{
1:eac0369: 			throw StandardException.unexpectedUserException(t);
1:eac0369: 		}
1:eac0369: 	} // end of updateVTI
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void close() throws StandardException
1:     {
1:         close( false );
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 				new TemporaryRowHolderImpl(activation, properties,
1: 										   resultDescription);
commit:300bbeb
/////////////////////////////////////////////////////////////////////////
commit:81b9853
/////////////////////////////////////////////////////////////////////////
1: 			rowHolder =
0: 				new TemporaryRowHolderImpl(activation, properties,
0: 										   resultDescription);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:88bb146
/////////////////////////////////////////////////////////////////////////
0: 				new TemporaryRowHolderImpl(activation, properties);
commit:6bc9897
/////////////////////////////////////////////////////////////////////////
1: class UpdateVTIResultSet extends DMLVTIResultSet
/////////////////////////////////////////////////////////////////////////
1: 		ExecRow row = getNextRowCore(sourceResultSet);
/////////////////////////////////////////////////////////////////////////
1:                     updateVTI(rs, row);
/////////////////////////////////////////////////////////////////////////
1: 				while ((row = tempRS.getNextRow()) != null)
1: 					updateVTI(rs, row);
/////////////////////////////////////////////////////////////////////////
1: 	private void updateVTI(ResultSet target, ExecRow row)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.UpdateVTIResultSet
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
1: {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * Update the rows from the source into the specified
1:  * base table.
1:  */
0: public class UpdateVTIResultSet extends DMLVTIResultSet
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	private java.sql.ResultSet		rs;
1: 
1: 	private	TemporaryRowHolderImpl	rowHolder;
1: 
1:     /**
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      */
1:     public UpdateVTIResultSet(NoPutResultSet source, 
1: 						   Activation activation)
1: 		throws StandardException
1:     {
1: 		super(source, activation);
1: 	}
1: 	
1: 	
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	protected void openCore() throws StandardException
1: 	{
1:         int rowLocationColumn = -1;
1:         boolean firstRow = true;
1:         
1:         rs = activation.getTargetVTI();
1: 		row = getNextRowCore(sourceResultSet);
1: 
1:         if( null != row)
1:             rowLocationColumn = row.nColumns();
0: 		if (!firstExecute)
0: 			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
1: 
1: 		/* The source does not know whether or not we are doing a
1: 		 * deferred mode insert.  If we are, then we must clear the
1: 		 * index scan info from the activation so that the row changer
1: 		 * does not re-use that information (which won't be valid for
1: 		 * a deferred mode insert).
1: 		 */
1: 		if (constants.deferred)
1: 		{
1: 			activation.clearIndexScanInfo();
1: 		}
1: 
1: 		if (null == rowHolder && constants.deferred)
1: 		{
1: 			Properties properties = new Properties();
1: 
1: 			/*
1: 			** If deferred we save a copy of the entire row.
1: 			*/
0: 			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
1: 		}
1: 
1:         try
1:         {
1:             while ( row != null )
1:             {
1:                 if (constants.deferred)
1:                 {
1:                     // Add the row number to the row.
1:                     if( firstRow)
1:                     {
1:                         row.getColumn( rowLocationColumn).setValue( rs.getRow());
1:                         firstRow = false;
1:                     }
1:                     else
1:                     {
1:                         DataValueDescriptor rowLocation = row.cloneColumn( rowLocationColumn);
1:                         rowLocation.setValue( rs.getRow());
1:                         row.setColumn( rowLocationColumn, rowLocation);
1:                     }
1:                     rowHolder.insert(row);
1:                 }
1:                 else
0:                     updateVTI( rs);
1:                 rowCount++;
1: 
1:                 // No need to do a next on a single row source
1:                 if (constants.singleRowSource)
1:                 {
1:                     row = null;
1:                 }
1:                 else
1:                 {
1:                     row = getNextRowCore(sourceResultSet);
1:                 }
1:             }
1:         }
1:         catch (StandardException se)
1:         {
1:             throw se;
1:         }
1: 		catch (Throwable t)
1: 		{
1: 			throw StandardException.unexpectedUserException(t);
1: 		}
1: 
1: 		/*
1: 		** If it's a deferred update, scan the temporary conglomerate and
1: 		** insert the rows into the VTI using rowChanger.
1: 		*/
1: 		if (constants.deferred)
1: 		{
1: 			CursorResultSet tempRS = rowHolder.getResultSet();
1: 			try
1: 			{
0:                 ExecRow	deferredRowBuffer = null;
1: 
1: 				tempRS.open();
0: 				while ((deferredRowBuffer = tempRS.getNextRow()) != null)
1: 				{
0: 					row = deferredRowBuffer;
1:                     int rowNumber = row.getColumn( rowLocationColumn).getInt();
1:                     rs.absolute( rowNumber);
0: 					updateVTI(rs);
1: 				}
1: 			}
1:             catch (Throwable t)
1:             {
1:                 throw StandardException.unexpectedUserException(t);
1:             }
1:             finally
1: 			{
1: 				sourceResultSet.clearCurrentRow();
1: 				tempRS.close();
1: 			}
1: 		}
1: 
1: 		if (rowHolder != null)
1: 		{
1: 			rowHolder.close();
1: 			// rowHolder kept across opens
1: 		}
1: 	} // end of openCore
1: 
0: 	private void updateVTI(ResultSet target)
1: 		throws StandardException
1: 	{
1:         int[] changedColumnIds = constants.changedColumnIds;
1: 		try
1: 		{
1:             for( int i = 0; i < changedColumnIds.length; i++)
1:             {
1:                 int columnId = changedColumnIds[i];
1:                 DataValueDescriptor newValue = row.getColumn( i + 1);
1:                 if( newValue.isNull())
1:                     target.updateNull( columnId);
1:                 else
1:                     newValue.setInto( target, columnId);
1:             }
1:             target.updateRow();
1:         }
1: 		catch (Throwable t)
1: 		{
1: 			throw StandardException.unexpectedUserException(t);
1: 		}
1: 	} // end of updateVTI
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * Update the rows from the source into the specified
0:  * base table.
0:  */
0: public class UpdateVTIResultSet extends DMLVTIResultSet
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	private java.sql.ResultSet		rs;
0: 
0: 	private	TemporaryRowHolderImpl	rowHolder;
0: 
0:     /**
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      */
0:     public UpdateVTIResultSet(NoPutResultSet source, 
0: 						   Activation activation)
0: 		throws StandardException
0:     {
0: 		super(source, activation);
0: 	}
0: 	
0: 	
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	protected void openCore() throws StandardException
0: 	{
0:         int rowLocationColumn = -1;
0:         boolean firstRow = true;
0:         
0:         rs = activation.getTargetVTI();
0: 		row = getNextRowCore(sourceResultSet);
0: 
0:         if( null != row)
0:             rowLocationColumn = row.nColumns();
0: 		if (!firstExecute)
0: 			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
0: 
0: 		/* The source does not know whether or not we are doing a
0: 		 * deferred mode insert.  If we are, then we must clear the
0: 		 * index scan info from the activation so that the row changer
0: 		 * does not re-use that information (which won't be valid for
0: 		 * a deferred mode insert).
0: 		 */
0: 		if (constants.deferred)
0: 		{
0: 			activation.clearIndexScanInfo();
0: 		}
0: 
0: 		if (null == rowHolder && constants.deferred)
0: 		{
0: 			Properties properties = new Properties();
0: 
0: 			/*
0: 			** If deferred we save a copy of the entire row.
0: 			*/
0: 			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
0: 		}
0: 
0:         try
0:         {
0:             while ( row != null )
0:             {
0:                 if (constants.deferred)
0:                 {
0:                     // Add the row number to the row.
0:                     if( firstRow)
0:                     {
0:                         row.getColumn( rowLocationColumn).setValue( rs.getRow());
0:                         firstRow = false;
0:                     }
0:                     else
0:                     {
0:                         DataValueDescriptor rowLocation = row.cloneColumn( rowLocationColumn);
0:                         rowLocation.setValue( rs.getRow());
0:                         row.setColumn( rowLocationColumn, rowLocation);
0:                     }
0:                     rowHolder.insert(row);
0:                 }
0:                 else
0:                     updateVTI( rs);
0:                 rowCount++;
0: 
0:                 // No need to do a next on a single row source
0:                 if (constants.singleRowSource)
0:                 {
0:                     row = null;
0:                 }
0:                 else
0:                 {
0:                     row = getNextRowCore(sourceResultSet);
0:                 }
0:             }
0:         }
0:         catch (StandardException se)
0:         {
0:             throw se;
0:         }
0: 		catch (Throwable t)
0: 		{
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 
0: 		/*
0: 		** If it's a deferred update, scan the temporary conglomerate and
0: 		** insert the rows into the VTI using rowChanger.
0: 		*/
0: 		if (constants.deferred)
0: 		{
0: 			CursorResultSet tempRS = rowHolder.getResultSet();
0: 			try
0: 			{
0:                 ExecRow	deferredRowBuffer = null;
0: 
0: 				tempRS.open();
0: 				while ((deferredRowBuffer = tempRS.getNextRow()) != null)
0: 				{
0: 					row = deferredRowBuffer;
0:                     int rowNumber = row.getColumn( rowLocationColumn).getInt();
0:                     rs.absolute( rowNumber);
0: 					updateVTI(rs);
0: 				}
0: 			}
0:             catch (Throwable t)
0:             {
0:                 throw StandardException.unexpectedUserException(t);
0:             }
0:             finally
0: 			{
0: 				sourceResultSet.clearCurrentRow();
0: 				tempRS.close();
0: 			}
0: 		}
0: 
0: 		if (rowHolder != null)
0: 		{
0: 			rowHolder.close();
0: 			// rowHolder kept across opens
0: 		}
0: 	} // end of openCore
0: 
0: 	private void updateVTI(ResultSet target)
0: 		throws StandardException
0: 	{
0:         int[] changedColumnIds = constants.changedColumnIds;
0: 		try
0: 		{
0:             for( int i = 0; i < changedColumnIds.length; i++)
0:             {
0:                 int columnId = changedColumnIds[i];
0:                 DataValueDescriptor newValue = row.getColumn( i + 1);
0:                 if( newValue.isNull())
0:                     target.updateNull( columnId);
0:                 else
0:                     newValue.setInto( target, columnId);
0:             }
0:             target.updateRow();
0:         }
0: 		catch (Throwable t)
0: 		{
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 	} // end of updateVTI
0: }
============================================================================