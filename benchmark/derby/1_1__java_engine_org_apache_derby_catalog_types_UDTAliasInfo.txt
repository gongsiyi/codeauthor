1:fa292b9: /*
1:fa292b9: 
1:fa292b9:    Derby - Class org.apache.derby.catalog.types.UDTAliasInfo
1:fa292b9: 
1:fa292b9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fa292b9:    contributor license agreements.  See the NOTICE file distributed with
1:fa292b9:    this work for additional information regarding copyright ownership.
1:fa292b9:    The ASF licenses this file to You under the Apache License, Version 2.0
1:fa292b9:    (the "License"); you may not use this file except in compliance with
1:fa292b9:    the License.  You may obtain a copy of the License at
1:fa292b9: 
1:fa292b9:       http://www.apache.org/licenses/LICENSE-2.0
1:fa292b9: 
1:fa292b9:    Unless required by applicable law or agreed to in writing, software
1:fa292b9:    distributed under the License is distributed on an "AS IS" BASIS,
1:fa292b9:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fa292b9:    See the License for the specific language governing permissions and
1:fa292b9:    limitations under the License.
1:fa292b9: 
1:fa292b9:  */
1:fa292b9: 
1:fa292b9: package org.apache.derby.catalog.types;
1:fa292b9: 
1:fa292b9: import org.apache.derby.iapi.services.io.Formatable;
1:fa292b9: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:fa292b9: import org.apache.derby.catalog.AliasInfo;
1:fa292b9: import java.io.IOException;
1:fa292b9: import java.io.ObjectInput;
1:fa292b9: import java.io.ObjectOutput;
1:fa292b9: 
1:fa292b9: /**
1:fa292b9:  * Describe an A (Abstract Data Type) alias. For the first release of USer
1:fa292b9:  * Defined Types, this is a vacuous object. Future revs may add real information
1:fa292b9:  * to this object. The UDTAliasInfo maintains a version stamp so that it
1:fa292b9:  * can evolve its persistent form over time.
1:fa292b9:  *
1:fa292b9:  * @see AliasInfo
1:fa292b9:  */
1:fa292b9: public class UDTAliasInfo implements AliasInfo, Formatable
1:fa292b9: {
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9:     //
1:fa292b9:     // CONSTANTS
1:fa292b9:     //
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9: 
1:fa292b9:     private static final int FIRST_VERSION = 0;
1:fa292b9: 
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9:     //
1:fa292b9:     // STATE
1:fa292b9:     //
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9: 
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9:     //
1:fa292b9:     // CONSTRUCTOR
1:fa292b9:     //
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9: 
1:fa292b9:     // no-arg constructor for Formatable machinery
1:fa292b9: 	public UDTAliasInfo() {}
1:fa292b9: 
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9:     //
1:fa292b9:     // AliasInfo BEHAVIOR
1:fa292b9:     //
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9: 
1:fa292b9: 	public boolean isTableFunction() {return false; }
1:fa292b9: 
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9:     //
1:fa292b9:     // Formatable BEHAVIOR
1:fa292b9:     //
1:fa292b9:     ///////////////////////////////////////////////////////////////////////////////////
1:fa292b9: 
1:fa292b9: 	/**
1:fa292b9: 	 * Read this object from a stream of stored objects.
1:fa292b9: 	 *
1:fa292b9: 	 * @param in read this.
1:fa292b9: 	 *
1:fa292b9: 	 * @exception IOException					thrown on error
1:fa292b9: 	 * @exception ClassNotFoundException		thrown on error
1:fa292b9: 	 */
1:fa292b9: 	public void readExternal( ObjectInput in )
1:fa292b9: 		 throws IOException, ClassNotFoundException
1:fa292b9: 	{
1:fa292b9:         // as the persistent form evolves, switch on this value
1:fa292b9:         int oldVersion = in.readInt();
1:fa292b9: 	}
1:fa292b9: 
1:fa292b9: 	/**
1:fa292b9: 	 * Write this object to a stream of stored objects.
1:fa292b9: 	 *
1:fa292b9: 	 * @param out write bytes here.
1:fa292b9: 	 *
1:fa292b9: 	 * @exception IOException		thrown on error
1:fa292b9: 	 */
1:fa292b9: 	public void writeExternal( ObjectOutput out )
1:fa292b9: 		 throws IOException
1:fa292b9: 	{
1:fa292b9: 		out.writeInt( FIRST_VERSION );
1:fa292b9: 	}
1:fa292b9:  
1:fa292b9: 	/**
1:fa292b9: 	 * Get the formatID which corresponds to this class.
1:fa292b9: 	 *
1:fa292b9: 	 *	@return	the formatID of this class
1:fa292b9: 	 */
1:fa292b9: 	public	int	getTypeFormatId()	{ return StoredFormatIds.UDT_INFO_V01_ID; }
1:fa292b9: 
1:ef1ecee:     /**
1:ef1ecee:      * This is used by dblook to reconstruct the UDT-specific parts of the ddl
1:ef1ecee:      * needed to recreate this alias.
1:ef1ecee:      */
1:fa292b9: 	public String toString() {
1:ef1ecee: 		return "LANGUAGE JAVA";
1:fa292b9: 	}
1:fa292b9: 
1:fa292b9: 	public String getMethodName()
1:fa292b9: 	{
1:fa292b9: 		return null;
1:fa292b9: 	}
1:fa292b9: }
1:fa292b9: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ef1ecee
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This is used by dblook to reconstruct the UDT-specific parts of the ddl
1:      * needed to recreate this alias.
1:      */
1: 		return "LANGUAGE JAVA";
commit:fa292b9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.types.UDTAliasInfo
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.AliasInfo;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * Describe an A (Abstract Data Type) alias. For the first release of USer
1:  * Defined Types, this is a vacuous object. Future revs may add real information
1:  * to this object. The UDTAliasInfo maintains a version stamp so that it
1:  * can evolve its persistent form over time.
1:  *
1:  * @see AliasInfo
1:  */
1: public class UDTAliasInfo implements AliasInfo, Formatable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final int FIRST_VERSION = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // no-arg constructor for Formatable machinery
1: 	public UDTAliasInfo() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // AliasInfo BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public boolean isTableFunction() {return false; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Formatable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1:         // as the persistent form evolves, switch on this value
1:         int oldVersion = in.readInt();
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeInt( FIRST_VERSION );
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.UDT_INFO_V01_ID; }
1: 
1: 	public String toString() {
0: 		return "";
1: 	}
1: 
1: 	public String getMethodName()
1: 	{
1: 		return null;
1: 	}
1: }
1: 
============================================================================