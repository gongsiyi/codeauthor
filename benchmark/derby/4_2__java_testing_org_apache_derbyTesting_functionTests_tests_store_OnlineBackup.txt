1:7ddacaa: /*
4:7ddacaa: 
1:7ddacaa: Derby - Class org.apache.derbyTesting.functionTests.store.OnlineBackup
1:7ddacaa: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:7ddacaa: 
1:7ddacaa:       http://www.apache.org/licenses/LICENSE-2.0
1:7ddacaa: 
1:7ddacaa:    Unless required by applicable law or agreed to in writing, software
1:7ddacaa:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ddacaa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ddacaa:    See the License for the specific language governing permissions and
1:7ddacaa:    limitations under the License.
1:7ddacaa: 
2:7ddacaa:  */
1:7ddacaa: 
1:7ddacaa: package org.apache.derbyTesting.functionTests.tests.store;
1:7ddacaa: import java.sql.Connection;
1:7ddacaa: import java.sql.CallableStatement;
1:7ddacaa: import java.sql.SQLException;
1:7ddacaa: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:7ddacaa: 
2:7ddacaa: /**
1:7ddacaa:  * This class provides  functionalty for tests to perform 
1:7ddacaa:  * online backup  in a separate thread. And functions to 
1:7ddacaa:  * create/restore/rollforard recovery from the backup. 
3:7ddacaa:  *
1:7ddacaa:  * @version 1.0
1:7ddacaa:  */
1:7ddacaa: 
1:7ddacaa: public class OnlineBackup implements Runnable{
1:7ddacaa: 
1:7ddacaa: 	private String dbName; // name of the database to backup
1:7ddacaa: 	private boolean beginBackup = false;
1:7ddacaa: 	private boolean endBackup = false;
1:7ddacaa:     private boolean backupFailed = false;
1:7ddacaa:     private Throwable backupError = null;
1:7ddacaa:     private String backupPath;
1:7ddacaa: 
1:7ddacaa: 	OnlineBackup(String dbName, String backupPath) {
1:7ddacaa: 		this.dbName = dbName;
1:7ddacaa:         this.backupPath = backupPath;
3:7ddacaa: 	}
1:7ddacaa: 
1:7ddacaa: 	/**
1:7ddacaa: 	 * implementation of run() method in the Runnable interface, which
1:7ddacaa: 	 * is invoked when a thread is started using this class object. 
1:7ddacaa: 	 * 
1:7ddacaa: 	 *  Performs online backup. 
1:7ddacaa: 	 * 
1:7ddacaa: 	 */
1:7ddacaa: 	public void run()	{
1:7ddacaa:         backupFailed = false;
1:7ddacaa: 		try {
1:7ddacaa: 			performBackup();
1:7ddacaa: 		} catch (Throwable error) {
1:7ddacaa:             synchronized(this) {
1:7ddacaa:                 // inform threads that may be waiting for backup to 
1:7ddacaa:                 // start/end that it failed. 
1:7ddacaa:                 backupFailed = true;
1:7ddacaa:                 backupError = error;
1:7ddacaa:                 notifyAll();
1:7ddacaa:             }
1:7ddacaa: 			org.apache.derby.tools.JDBCDisplayUtil.ShowException(System.out, error);
1:7ddacaa: 			error.printStackTrace(System.out);
1:7ddacaa:         }
1:7ddacaa: 	}
1:7ddacaa: 
1:7ddacaa: 	/**
1:7ddacaa: 	 * Backup the database
1:7ddacaa: 	 */
1:7ddacaa: 	void performBackup() throws SQLException {
1:e72bcdd: 		Connection conn = TestUtil.getConnection(dbName , "");
1:7ddacaa: 		CallableStatement backupStmt = 	
1:7ddacaa: 			conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:7ddacaa: 		backupStmt.setString(1, backupPath);
1:7ddacaa: 			
1:7ddacaa: 		synchronized(this)	{
1:7ddacaa: 			beginBackup = true;
1:7ddacaa: 			endBackup = false;
1:7ddacaa: 			notifyAll();
1:7ddacaa: 		}
1:7ddacaa: 
1:7ddacaa: 		backupStmt.execute();
1:7ddacaa: 		backupStmt.close();
1:7ddacaa: 		conn.close();
1:7ddacaa: 
1:7ddacaa: 		synchronized(this)	{
1:7ddacaa: 			beginBackup = false;
1:7ddacaa: 			endBackup = true;
1:7ddacaa: 			notifyAll();
1:7ddacaa: 		}
1:7ddacaa: 	}
1:7ddacaa: 
1:7ddacaa: 	/**
1:7ddacaa: 	 * Wait for the backup to start.
1:7ddacaa: 	 */
1:7ddacaa: 
1:7ddacaa: 	public void waitForBackupToBegin() throws Exception{
1:7ddacaa: 		synchronized(this) {
1:7ddacaa: 			//wait for backup to begin
1:7ddacaa: 			while (!beginBackup) {
1:7ddacaa:                 // if the backup failed for some reason throw error, don't go
1:7ddacaa:                 // into wait state.
1:7ddacaa:                 if (backupFailed)
1:7ddacaa:                     throw new Exception("BACKUP FAILED:" + 
1:7ddacaa:                                         backupError.getMessage());
1:7ddacaa:                 else
1:7ddacaa: 					wait();
1:7ddacaa: 			}
1:7ddacaa: 		}
1:7ddacaa: 	}
1:7ddacaa: 	
1:7ddacaa: 	/*
1:7ddacaa: 	 * Wait for the backup to finish.
1:7ddacaa: 	 */
1:7ddacaa: 	public void waitForBackupToEnd() throws Exception{
1:7ddacaa: 		synchronized(this) {
1:7ddacaa: 			if (!endBackup) {
1:7ddacaa: 				// check if a backup has actually started by the test
1:7ddacaa: 				if (!beginBackup) {
1:7ddacaa: 					System.out.println("BACKUP IS NOT STARTED BY THE TEST YET");	
1:7ddacaa: 				} else {
1:7ddacaa: 
1:7ddacaa: 					//wait for backup to finish
1:7ddacaa: 					while (!endBackup) 
2:7ddacaa:                     {
1:7ddacaa:                         // if the backup failed for some reason throw error, don't go
1:7ddacaa:                         // into wait state.
1:7ddacaa:                         if (backupFailed)
1:7ddacaa:                             throw new Exception("BACKUP FAILED:" + 
1:7ddacaa:                                                 backupError.getMessage());
1:7ddacaa:                         else
1:7ddacaa:                             wait();
1:7ddacaa: 					}
1:7ddacaa: 				}
1:7ddacaa: 			}
1:7ddacaa: 
1:7ddacaa: 		}
1:7ddacaa: 	}
1:7ddacaa: 
1:7ddacaa: 	/**
1:7ddacaa: 	 * Check if backup is running ?
1:7ddacaa: 	 * @return     <tt>true</tt> if backup is running.
1:7ddacaa: 	 *             <tt>false</tt> otherwise.
1:7ddacaa: 	 */
1:7ddacaa: 	public synchronized boolean isRunning() {
1:7ddacaa: 		return beginBackup;
1:7ddacaa: 	}
1:7ddacaa: 	
1:7ddacaa: 	/**
1:7ddacaa: 	 * Create a new database from the backup copy taken earlier.
1:7ddacaa: 	 * @param  newDbName   name of the database to be created.
1:7ddacaa: 	 */
1:7ddacaa: 	public void createFromBackup(String newDbName) throws SQLException {
1:7ddacaa: 		
1:e72bcdd:         Connection conn = TestUtil.getConnection(newDbName,  
1:7ddacaa:                                         "createFrom=" +
1:7ddacaa:                                         backupPath + "/" + 
1:7ddacaa:                                         dbName);
1:7ddacaa:         conn.close();
1:7ddacaa:         
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa: 	
1:7ddacaa:     /**
1:7ddacaa:      * Restore the  database from the backup copy taken earlier.
1:7ddacaa:      */
1:7ddacaa:     public void restoreFromBackup() throws SQLException {
1:7ddacaa:        
1:e72bcdd:         Connection conn = TestUtil.getConnection(dbName,  
1:7ddacaa:                                         "restoreFrom=" +
1:7ddacaa:                                         backupPath + "/" + 
1:7ddacaa:                                         dbName);
1:7ddacaa: 
1:7ddacaa: 		conn.close();
1:7ddacaa:     }
1:7ddacaa: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:e72bcdd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		Connection conn = TestUtil.getConnection(dbName , "");
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = TestUtil.getConnection(newDbName,  
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = TestUtil.getConnection(dbName,  
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7ddacaa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.store.OnlineBackup
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.sql.Connection;
1: import java.sql.CallableStatement;
0: import java.sql.DriverManager;
1: import java.sql.SQLException;
0: import java.util.Properties;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: /**
1:  * This class provides  functionalty for tests to perform 
1:  * online backup  in a separate thread. And functions to 
1:  * create/restore/rollforard recovery from the backup. 
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  */
1: 
1: public class OnlineBackup implements Runnable{
1: 
1: 	private String dbName; // name of the database to backup
1: 	private boolean beginBackup = false;
1: 	private boolean endBackup = false;
1:     private boolean backupFailed = false;
1:     private Throwable backupError = null;
1:     private String backupPath;
1: 
1: 	OnlineBackup(String dbName, String backupPath) {
1: 		this.dbName = dbName;
1:         this.backupPath = backupPath;
1: 	}
1: 
1: 	/**
1: 	 * implementation of run() method in the Runnable interface, which
1: 	 * is invoked when a thread is started using this class object. 
1: 	 * 
1: 	 *  Performs online backup. 
1: 	 * 
1: 	 */
1: 	public void run()	{
1:         backupFailed = false;
1: 		try {
1: 			performBackup();
1: 		} catch (Throwable error) {
1:             synchronized(this) {
1:                 // inform threads that may be waiting for backup to 
1:                 // start/end that it failed. 
1:                 backupFailed = true;
1:                 backupError = error;
1:                 notifyAll();
1:             }
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowException(System.out, error);
1: 			error.printStackTrace(System.out);
1:         }
1: 	}
1: 
1: 	/**
1: 	 * Backup the database
1: 	 */
1: 	void performBackup() throws SQLException {
0:         Connection conn = getConnection(dbName , "");
1: 		CallableStatement backupStmt = 	
1: 			conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1: 		backupStmt.setString(1, backupPath);
1: 			
1: 		synchronized(this)	{
1: 			beginBackup = true;
1: 			endBackup = false;
1: 			notifyAll();
1: 		}
1: 
1: 		backupStmt.execute();
1: 		backupStmt.close();
1: 		conn.close();
1: 
1: 		synchronized(this)	{
1: 			beginBackup = false;
1: 			endBackup = true;
1: 			notifyAll();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Wait for the backup to start.
1: 	 */
1: 
1: 	public void waitForBackupToBegin() throws Exception{
1: 		synchronized(this) {
1: 			//wait for backup to begin
1: 			while (!beginBackup) {
1:                 // if the backup failed for some reason throw error, don't go
1:                 // into wait state.
1:                 if (backupFailed)
1:                     throw new Exception("BACKUP FAILED:" + 
1:                                         backupError.getMessage());
1:                 else
1: 					wait();
1: 			}
1: 		}
1: 	}
1: 	
1: 	/*
1: 	 * Wait for the backup to finish.
1: 	 */
1: 	public void waitForBackupToEnd() throws Exception{
1: 		synchronized(this) {
1: 			if (!endBackup) {
1: 				// check if a backup has actually started by the test
1: 				if (!beginBackup) {
1: 					System.out.println("BACKUP IS NOT STARTED BY THE TEST YET");	
1: 				} else {
1: 
1: 					//wait for backup to finish
1: 					while (!endBackup) 
1:                     {
1:                         // if the backup failed for some reason throw error, don't go
1:                         // into wait state.
1:                         if (backupFailed)
1:                             throw new Exception("BACKUP FAILED:" + 
1:                                                 backupError.getMessage());
1:                         else
1:                             wait();
1: 					}
1: 				}
1: 			}
1: 
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Check if backup is running ?
1: 	 * @return     <tt>true</tt> if backup is running.
1: 	 *             <tt>false</tt> otherwise.
1: 	 */
1: 	public synchronized boolean isRunning() {
1: 		return beginBackup;
1: 	}
1: 	
1: 	/**
1: 	 * Create a new database from the backup copy taken earlier.
1: 	 * @param  newDbName   name of the database to be created.
1: 	 */
1: 	public void createFromBackup(String newDbName) throws SQLException {
1: 		
0:         Connection conn = getConnection(newDbName,  
1:                                         "createFrom=" +
1:                                         backupPath + "/" + 
1:                                         dbName);
1:         conn.close();
1:         
1:     }
1: 
1: 	
1:     /**
1:      * Restore the  database from the backup copy taken earlier.
1:      */
1:     public void restoreFromBackup() throws SQLException {
1:        
0:         Connection conn = getConnection(dbName,  
1:                                         "restoreFrom=" +
1:                                         backupPath + "/" + 
1:                                         dbName);
1: 
1: 		conn.close();
1:     }
1: 
1:     
1:     /**
0:      * Get connection to the given database.
1:      *
0:      * @param databaseName the name of the database 
0: 	 * @param connAttrs  connection Attributes.
1:      *
1:      */
0:     private Connection getConnection(String databaseName, 
0:                                      String connAttrs) 
0:         throws SQLException 
1:     {
0:     	Connection conn;
0:     	if(TestUtil.HAVE_DRIVER_CLASS)
0: 			conn = DriverManager.getConnection("jdbc:derby:" + databaseName 
0: 												+ ";" + connAttrs );
0:     	else {
0: 	    	Properties prop = new Properties();
0: 	        prop.setProperty("databaseName", databaseName);
0: 	        prop.setProperty("connectionAttributes", connAttrs);
0: 	        conn = TestUtil.getDataSourceConnection(prop);
1:     	}
0:         return conn;
1:     }
1: }
commit:3108341
/////////////////////////////////////////////////////////////////////////
0:     private boolean backupFailed = false;
0:     private Throwable backupError = null;
0:     private String backupPath;
0: 	OnlineBackup(String dbName, String backupPath) {
0:         this.backupPath = backupPath;
/////////////////////////////////////////////////////////////////////////
0:         backupFailed = false;
0: 		} catch (Throwable error) {
0:             synchronized(this) {
0:                 // inform threads that may be waiting for backup to 
0:                 // start/end that it failed. 
0:                 backupFailed = true;
0:                 backupError = error;
0:                 notifyAll();
0:             }
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowException(System.out, error);
0: 			error.printStackTrace(System.out);
0:         }
/////////////////////////////////////////////////////////////////////////
0: 	public void waitForBackupToBegin() throws Exception{
0: 			while (!beginBackup) {
0:                 // if the backup failed for some reason throw error, don't go
0:                 // into wait state.
0:                 if (backupFailed)
0:                     throw new Exception("BACKUP FAILED:" + 
0:                                         backupError.getMessage());
0:                 else
/////////////////////////////////////////////////////////////////////////
0: 	public void waitForBackupToEnd() throws Exception{
/////////////////////////////////////////////////////////////////////////
0: 					while (!endBackup) 
0:                     {
0:                         // if the backup failed for some reason throw error, don't go
0:                         // into wait state.
0:                         if (backupFailed)
0:                             throw new Exception("BACKUP FAILED:" + 
0:                                                 backupError.getMessage());
0:                         else
0:                             wait();
commit:64ec5e2
/////////////////////////////////////////////////////////////////////////
0: import java.util.Properties;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
/////////////////////////////////////////////////////////////////////////
0:         Connection conn = getConnection(dbName , "");
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized boolean isRunning() {
/////////////////////////////////////////////////////////////////////////
0: 		
0:         Connection conn = getConnection(newDbName,  
0:                                         "createFrom=" +
0:                                         backupPath + "/" + 
0:                                         dbName);
0:         conn.close();
0:         
0:     }
0:     /**
0:      * Restore the  database from the backup copy taken earlier.
0:      */
0:     public void restoreFromBackup() throws SQLException {
0:        
0:         Connection conn = getConnection(dbName,  
0:                                         "restoreFrom=" +
0:                                         backupPath + "/" + 
0:                                         dbName);
0: 		conn.close();
0:     }
0: 
0:     
0:     /**
0:      * Get connection to the given database.
0:      *
0:      * @param databaseName the name of the database 
0: 	 * @param connAttrs  connection Attributes.
0:      *
0:      */
0:     private Connection getConnection(String databaseName, 
0:                                      String connAttrs) 
0:         throws SQLException 
0:     {
0:         Properties prop = new Properties();
0:         prop.setProperty("databaseName", databaseName);
0:         prop.setProperty("connectionAttributes", connAttrs);
0:         Connection conn = TestUtil.getDataSourceConnection(prop);
0:         return conn;
0:     }
commit:b4b8d3b
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0: Derby - Class org.apache.derbyTesting.functionTests.store.OnlineBackup
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.CallableStatement;
0: import java.sql.SQLException;
0: 
0: /**
0:  * This class provides  functionalty for tests to perform 
0:  * online backup  in a separate thread. And functions to 
0:  * create/restore/rollforard recovery from the backup. 
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  */
0: 
0: public class OnlineBackup implements Runnable{
0: 
0: 	private static final String backupPath = "extinout/onlinebackuptest";
0: 	
0: 	private String dbName; // name of the database to backup
0: 	private boolean beginBackup = false;
0: 	private boolean endBackup = false;
0: 
0: 	OnlineBackup(String dbName) {
0: 		this.dbName = dbName;
0: 	}
0: 
0: 	/**
0: 	 * implementation of run() method in the Runnable interface, which
0: 	 * is invoked when a thread is started using this class object. 
0: 	 * 
0: 	 *  Performs online backup. 
0: 	 * 
0: 	 */
0: 	public void run()	{
0: 		try {
0: 			performBackup();
0: 		} catch (SQLException sqle) {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Backup the database
0: 	 */
0: 	void performBackup() throws SQLException {
0: 		Connection conn = DriverManager.getConnection("jdbc:derby:"+ dbName);
0: 		CallableStatement backupStmt = 	
0: 			conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
0: 		backupStmt.setString(1, backupPath);
0: 			
0: 		synchronized(this)	{
0: 			beginBackup = true;
0: 			endBackup = false;
0: 			notifyAll();
0: 		}
0: 
0: 		backupStmt.execute();
0: 		backupStmt.close();
0: 		conn.close();
0: 
0: 		synchronized(this)	{
0: 			beginBackup = false;
0: 			endBackup = true;
0: 			notifyAll();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Wait for the backup to start.
0: 	 */
0: 
0: 	public void waitForBackupToBegin() throws InterruptedException{
0: 		synchronized(this) {
0: 			//wait for backup to begin
0: 			while(!beginBackup) {
0: 					wait();
0: 			}
0: 		}
0: 	}
0: 	
0: 	/*
0: 	 * Wait for the backup to finish.
0: 	 */
0: 	public void waitForBackupToEnd() throws InterruptedException{
0: 		synchronized(this) {
0: 			if (!endBackup) {
0: 				// check if a backup has actually started by the test
0: 				if (!beginBackup) {
0: 					System.out.println("BACKUP IS NOT STARTED BY THE TEST YET");	
0: 				} else {
0: 
0: 					//wait for backup to finish
0: 					while(!endBackup) {
0: 						wait();
0: 					}
0: 				}
0: 			}
0: 
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Check if backup is running ?
0: 	 * @return     <tt>true</tt> if backup is running.
0: 	 *             <tt>false</tt> otherwise.
0: 	 */
0: 	public boolean isRunning() {
0: 		return beginBackup;
0: 	}
0: 	
0: 	/**
0: 	 * Create a new database from the backup copy taken earlier.
0: 	 * @param  newDbName   name of the database to be created.
0: 	 */
0: 	public void createFromBackup(String newDbName) throws SQLException {
0: 		Connection conn = 
0: 			DriverManager.getConnection("jdbc:derby:"+ newDbName + ";" +  
0: 										"createFrom=" + backupPath + "/" + 
0: 										dbName);
0: 		conn.close();
0: 	}
0: 
0: 	
0: 	/**
0: 	 * Restore the  database from the backup copy taken earlier.
0: 	 */
0: 	public void restoreFromBackup() throws SQLException {
0: 		Connection conn = 
0: 			DriverManager.getConnection("jdbc:derby:"+ dbName + ";" +
0: 										"restoreFrom=" + backupPath + "/" + 
0: 										dbName);
0: 		conn.close();
0: 	}
0: 
0: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e967126
/////////////////////////////////////////////////////////////////////////
0: import java.sql.DriverManager;
/////////////////////////////////////////////////////////////////////////
0:     	Connection conn;
0:     	if(TestUtil.HAVE_DRIVER_CLASS)
0: 			conn = DriverManager.getConnection("jdbc:derby:" + databaseName 
0: 												+ ";" + connAttrs );
0:     	else {
0: 	    	Properties prop = new Properties();
0: 	        prop.setProperty("databaseName", databaseName);
0: 	        prop.setProperty("connectionAttributes", connAttrs);
0: 	        conn = TestUtil.getDataSourceConnection(prop);
0:     	}
============================================================================