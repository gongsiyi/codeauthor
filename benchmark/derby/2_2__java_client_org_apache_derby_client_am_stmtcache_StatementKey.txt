1:78944d5: /*
1:2e54aa6: 
1:78944d5:    Derby - Class org.apache.derby.client.am.stmtcache.StatementKey
1:2e54aa6: 
1:78944d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:78944d5:    contributor license agreements.  See the NOTICE file distributed with
1:78944d5:    this work for additional information regarding copyright ownership.
1:78944d5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:78944d5:    (the "License"); you may not use this file except in compliance with
1:78944d5:    the License.  You may obtain a copy of the License at
1:2e54aa6: 
1:78944d5:       http://www.apache.org/licenses/LICENSE-2.0
1:2e54aa6: 
1:78944d5:    Unless required by applicable law or agreed to in writing, software
1:78944d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:78944d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78944d5:    See the License for the specific language governing permissions and
1:78944d5:    limitations under the License.
1:2e54aa6: 
1:78944d5:  */
6:78944d5: 
1:78944d5: package org.apache.derby.client.am.stmtcache;
1:78944d5: 
1:69e3d06: import java.sql.ResultSet;
1:69e3d06: import java.sql.Statement;
1:20626ec: import org.apache.derby.shared.common.sanity.SanityManager;
1:20626ec: 
1:78944d5: /**
1:78944d5:  * A key representing a <code>java.sql.PreparedStatement</code> or a
1:78944d5:  * <code>java.sql.CallableStatement</code>.
1:78944d5:  * <p>
1:78944d5:  * The key takes a number of statement related attributes into account, and is
1:78944d5:  * used to insert and look up cached statement objects in the JDBC statement
1:78944d5:  * cache.
1:78944d5:  * <p>
1:78944d5:  * Key instances are created by a statement key factory.
1:2e54aa6:  *
1:78944d5:  * @see StatementKeyFactory
1:78944d5:  */
1:78944d5: //@Immutable
1:78944d5: public class StatementKey {
1:78944d5: 
1:78944d5:     /** Tells if the key represents a <code>CallableStatement</code>. */
1:78944d5:     private final boolean isCallableStatement;
1:78944d5:     /** The SQL query of the statement. */
1:78944d5:     private final String sql;
1:78944d5:     /** The compilation schema for the statement. */
1:78944d5:     private final String schema;
1:78944d5:     /** The result set type for the statement. */
1:78944d5:     private final int type;
1:78944d5:     /** The result set concurrency for the statement. */
1:78944d5:     private final int concurrency;
1:78944d5:     /** Result set holdability for the statement. */
1:78944d5:     private final int holdability;
1:78944d5:     /** Tells if the associated statement returns auto-generated keys. */
1:78944d5:     private final int autogeneratedKeys;
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a statement key with all the common properties.
1:2e54aa6:      *
1:78944d5:      * @param isCallableStatement <code>true</code> is this is a key for a
1:78944d5:      *      <code>java.sql.CallableStatement</code>
1:78944d5:      * @param sql SQL query string
1:78944d5:      * @param schema compilation schema
1:78944d5:      * @param rsType result set type
1:78944d5:      * @param rsConcurrency result set concurrency
1:78944d5:      * @param rsHoldability result set holdability
1:78944d5:      * @param autogeneratedKeys if auto-generated keys are returned
1:2e54aa6:      *
1:89e0c08:      * @throws IllegalArgumentException if {@code schema} is {@code null}
1:78944d5:      */
1:78944d5:     StatementKey(boolean isCallableStatement, String sql, String schema,
1:78944d5:             int rsType, int rsConcurrency, int rsHoldability,
1:78944d5:             int autogeneratedKeys) {
1:89e0c08:         if (schema == null) {
1:78944d5:             // Not localized (yet), because this should never reach the user.
1:89e0c08:             throw new IllegalArgumentException("schema is <null>");
1:78944d5:         }
1:78944d5:         this.isCallableStatement = isCallableStatement;
1:78944d5:         this.sql = sql;
1:78944d5:         this.schema = schema;
1:78944d5:         this.type = rsType;
1:78944d5:         this.concurrency = rsConcurrency;
1:78944d5:         this.holdability = rsHoldability;
1:78944d5:         this.autogeneratedKeys = autogeneratedKeys;
1:20626ec:         // In sane builds, make sure valid JDBC values are passed.
1:20626ec:         if (SanityManager.DEBUG) {
1:20626ec:             SanityManager.ASSERT(
1:69e3d06:                 rsType == ResultSet.TYPE_FORWARD_ONLY ||
1:69e3d06:                 rsType == ResultSet.TYPE_SCROLL_INSENSITIVE ||
1:69e3d06:                 rsType == ResultSet.TYPE_SCROLL_SENSITIVE,
1:b13b17c:                 "Invalid result set type: " + rsType);
1:20626ec:             SanityManager.ASSERT(
1:69e3d06:                 rsConcurrency == ResultSet.CONCUR_READ_ONLY ||
1:69e3d06:                 rsConcurrency == ResultSet.CONCUR_UPDATABLE,
1:b13b17c:                 "Invalid result set concurrency: " + rsConcurrency);
1:20626ec:             SanityManager.ASSERT(
1:69e3d06:                 rsHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT ||
1:69e3d06:                 rsHoldability == ResultSet.CLOSE_CURSORS_AT_COMMIT,
1:b13b17c:                 "Invalid result set holdability: " + rsHoldability);
1:20626ec:             SanityManager.ASSERT(
1:69e3d06:                 autogeneratedKeys == Statement.NO_GENERATED_KEYS ||
1:69e3d06:                 autogeneratedKeys == Statement.RETURN_GENERATED_KEYS,
1:b13b17c:                 "Invalid autogenerated key value: " + autogeneratedKeys);
1:20626ec:         }
1:78944d5:     }
1:78944d5: 
1:78944d5:     public boolean equals(Object obj) {
1:78944d5:         if (!(obj instanceof StatementKey)) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         final StatementKey other = (StatementKey)obj;
1:78944d5:         if (this.holdability != other.holdability) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         if (this.autogeneratedKeys != other.autogeneratedKeys) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         if (this.isCallableStatement != other.isCallableStatement) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         if (!this.schema.equals(other.schema)) {
1:78944d5:             return false;
1:78944d5:         }
1:89e0c08:         if (this.sql == null && other.sql != null) {
1:89e0c08:             return false;
1:89e0c08:         }
1:78944d5:         if (!this.sql.equals(other.sql)) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         if (this.type != other.type) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         if (this.concurrency != other.concurrency) {
1:78944d5:             return false;
1:78944d5:         }
1:78944d5:         return true;
1:78944d5:     }
1:78944d5: 
1:78944d5:     public int hashCode() {
1:78944d5:         int hash = 7;
1:78944d5:         hash = 47 * hash + (this.isCallableStatement ? 1 : 0);
1:89e0c08:         hash = 47 * hash + (this.sql == null ? 3 : this.sql.hashCode());
1:78944d5:         hash = 47 * hash + this.schema.hashCode();
1:78944d5:         hash = 47 * hash + this.type;
1:78944d5:         hash = 47 * hash + this.concurrency;
1:78944d5:         hash = 47 * hash + this.holdability;
1:78944d5:         hash = 47 * hash + this.autogeneratedKeys;
1:78944d5:         return hash;
1:78944d5:     }
1:78944d5: 
1:78944d5:     public String toString() {
1:78944d5:         return "'" + sql + "' in '" + schema + "', rsh = " + holdability +
1:78944d5:                 ", rst = " + type + ", rsc = " + concurrency +
1:78944d5:                 ", autogenKeys = " + autogeneratedKeys +
1:78944d5:                 ", isCallableStatement = " + isCallableStatement;
1:78944d5:     }
1:78944d5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.Statement;
/////////////////////////////////////////////////////////////////////////
1:                 rsType == ResultSet.TYPE_FORWARD_ONLY ||
1:                 rsType == ResultSet.TYPE_SCROLL_INSENSITIVE ||
1:                 rsType == ResultSet.TYPE_SCROLL_SENSITIVE,
1:                 rsConcurrency == ResultSet.CONCUR_READ_ONLY ||
1:                 rsConcurrency == ResultSet.CONCUR_UPDATABLE,
1:                 rsHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT ||
1:                 rsHoldability == ResultSet.CLOSE_CURSORS_AT_COMMIT,
1:                 autogeneratedKeys == Statement.NO_GENERATED_KEYS ||
1:                 autogeneratedKeys == Statement.RETURN_GENERATED_KEYS,
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 rsType == java.sql.ResultSet.TYPE_FORWARD_ONLY ||
0:                 rsType == java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE ||
0:                 rsType == java.sql.ResultSet.TYPE_SCROLL_SENSITIVE,
1:                 "Invalid result set type: " + rsType);
0:                 rsConcurrency == java.sql.ResultSet.CONCUR_READ_ONLY ||
0:                 rsConcurrency == java.sql.ResultSet.CONCUR_UPDATABLE,
1:                 "Invalid result set concurrency: " + rsConcurrency);
0:                 rsHoldability == java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT ||
0:                 rsHoldability == java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT,
1:                 "Invalid result set holdability: " + rsHoldability);
0:                 autogeneratedKeys == java.sql.Statement.NO_GENERATED_KEYS ||
0:                 autogeneratedKeys == java.sql.Statement.RETURN_GENERATED_KEYS,
1:                 "Invalid autogenerated key value: " + autogeneratedKeys);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:89e0c08
/////////////////////////////////////////////////////////////////////////
1:      * @throws IllegalArgumentException if {@code schema} is {@code null}
1:         if (schema == null) {
1:             throw new IllegalArgumentException("schema is <null>");
/////////////////////////////////////////////////////////////////////////
1:         if (this.sql == null && other.sql != null) {
1:             return false;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         hash = 47 * hash + (this.sql == null ? 3 : this.sql.hashCode());
commit:20626ec
/////////////////////////////////////////////////////////////////////////
0: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // In sane builds, make sure valid JDBC values are passed.
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(
0:                     rsType == ResultSet.TYPE_FORWARD_ONLY ||
0:                     rsType == ResultSet.TYPE_SCROLL_INSENSITIVE ||
0:                     rsType == ResultSet.TYPE_SCROLL_SENSITIVE,
0:                     "Invalid result set type: " + rsType);
1:             SanityManager.ASSERT(
0:                     rsConcurrency == ResultSet.CONCUR_READ_ONLY ||
0:                     rsConcurrency == ResultSet.CONCUR_UPDATABLE,
0:                     "Invalid result set concurrency: " + rsConcurrency);
1:             SanityManager.ASSERT(
0:                     rsHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT ||
0:                     rsHoldability == ResultSet.CLOSE_CURSORS_AT_COMMIT,
0:                     "Invalid result set holdability: " + rsHoldability);
1:             SanityManager.ASSERT(
0:                     autogeneratedKeys == Statement.NO_GENERATED_KEYS ||
0:                     autogeneratedKeys == Statement.RETURN_GENERATED_KEYS,
0:                     "Invalid autogenerated key value: " + autogeneratedKeys);
1:         }
commit:2e54aa6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
commit:78944d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.stmtcache.StatementKey
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am.stmtcache;
1: 
1: /**
1:  * A key representing a <code>java.sql.PreparedStatement</code> or a
1:  * <code>java.sql.CallableStatement</code>.
1:  * <p>
1:  * The key takes a number of statement related attributes into account, and is
1:  * used to insert and look up cached statement objects in the JDBC statement
1:  * cache.
1:  * <p>
1:  * Key instances are created by a statement key factory.
0:  * 
1:  * @see StatementKeyFactory
1:  */
1: //@Immutable
1: public class StatementKey {
1: 
1:     /** Tells if the key represents a <code>CallableStatement</code>. */
1:     private final boolean isCallableStatement;
1:     /** The SQL query of the statement. */
1:     private final String sql;
1:     /** The compilation schema for the statement. */
1:     private final String schema;
1:     /** The result set type for the statement. */
1:     private final int type;
1:     /** The result set concurrency for the statement. */
1:     private final int concurrency;
1:     /** Result set holdability for the statement. */
1:     private final int holdability;
1:     /** Tells if the associated statement returns auto-generated keys. */
1:     private final int autogeneratedKeys;
1: 
1:     /**
1:      * Creates a statement key with all the common properties.
0:      * 
1:      * @param isCallableStatement <code>true</code> is this is a key for a
1:      *      <code>java.sql.CallableStatement</code>
1:      * @param sql SQL query string
1:      * @param schema compilation schema
1:      * @param rsType result set type
1:      * @param rsConcurrency result set concurrency
1:      * @param rsHoldability result set holdability
1:      * @param autogeneratedKeys if auto-generated keys are returned
0:      * 
0:      * @throws IllegalArgumentException if <code>sql</code> and/or
0:      *      <code>schema</code> is <code>null</code>
1:      */
1:     StatementKey(boolean isCallableStatement, String sql, String schema,
1:             int rsType, int rsConcurrency, int rsHoldability,
1:             int autogeneratedKeys) {
0:         if (sql == null || schema == null) {
1:             // Not localized (yet), because this should never reach the user.
0:             throw new IllegalArgumentException(
0:                     "sql and/or schema is <null>: sql=" + (sql == null) +
0:                     ", schema=" + (schema == null));
1:         }
1:         this.isCallableStatement = isCallableStatement;
1:         this.sql = sql;
1:         this.schema = schema;
1:         this.type = rsType;
1:         this.concurrency = rsConcurrency;
1:         this.holdability = rsHoldability;
1:         this.autogeneratedKeys = autogeneratedKeys;
1:     }
1: 
1:     public boolean equals(Object obj) {
1:         if (!(obj instanceof StatementKey)) {
1:             return false;
1:         }
1:         final StatementKey other = (StatementKey)obj;
1:         if (this.holdability != other.holdability) {
1:             return false;
1:         }
1:         if (this.autogeneratedKeys != other.autogeneratedKeys) {
1:             return false;
1:         }
1:         if (this.isCallableStatement != other.isCallableStatement) {
1:             return false;
1:         }
1:         if (!this.schema.equals(other.schema)) {
1:             return false;
1:         }
1:         if (!this.sql.equals(other.sql)) {
1:             return false;
1:         }
1:         if (this.type != other.type) {
1:             return false;
1:         }
1:         if (this.concurrency != other.concurrency) {
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1:     public int hashCode() {
1:         int hash = 7;
1:         hash = 47 * hash + (this.isCallableStatement ? 1 : 0);
0:         hash = 47 * hash + this.sql.hashCode();
1:         hash = 47 * hash + this.schema.hashCode();
1:         hash = 47 * hash + this.type;
1:         hash = 47 * hash + this.concurrency;
1:         hash = 47 * hash + this.holdability;
1:         hash = 47 * hash + this.autogeneratedKeys;
1:         return hash;
1:     }
1: 
1:     public String toString() {
1:         return "'" + sql + "' in '" + schema + "', rsh = " + holdability +
1:                 ", rst = " + type + ", rsc = " + concurrency +
1:                 ", autogenKeys = " + autogeneratedKeys +
1:                 ", isCallableStatement = " + isCallableStatement;
1:     }
1: }
============================================================================