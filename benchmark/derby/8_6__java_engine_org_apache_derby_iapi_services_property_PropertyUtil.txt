1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.property.PropertyUtil
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.property;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.reference.Attribute;
1:eac0369: import org.apache.derby.iapi.reference.EngineType;
1:da7973c: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:c8e864b: import org.apache.derby.iapi.util.IdUtil;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.Serializable;
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:eac0369: import java.util.Dictionary;
1:c8e864b: import java.util.Enumeration;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	There are 5 property objects within a JBMS system.
1:eac0369: 
1:eac0369: 	1) JVM - JVM set - those in System.getProperties
1:eac0369: 	2) APP - Application set - derby.properties file
1:eac0369: 	3) SRV - Persistent Service set - Those stored in service.properties
1:eac0369: 	4) TRAN - Persistent Transactional set - Those stored via the AccessManager interface
1:eac0369: 	5) BOOT - Set by a boot method (rare)
1:eac0369: 
1:eac0369: 	This class has a set of static methods to find a property using a consistent search order
1:eac0369: 	from the above set.
1:eac0369: 	<BR>
1:eac0369: 	getSystem*() methods use the search order.
1:eac0369: 	<OL>
1:eac0369: 	<LI> JVM
1:eac0369: 	<LI> APP
1:eac0369: 	</OL>
1:eac0369: 	<BR>
1:eac0369: 	getService* methods use the search order
1:eac0369: 	<OL>
1:eac0369: 	<LI> JVM
1:eac0369: 	<LI> TRAN
1:eac0369: 	<LI> SRV
1:eac0369: 	<LI> APP
1:eac0369: 	</OL>
1:eac0369: 
1:eac0369: */
1:eac0369: public class PropertyUtil {
1:eac0369: 
1:eac0369: 	// List of properties that are stored in the service.properties file
1:da7973c: 	private static final String[] servicePropertyList = {
1:eac0369: 		EngineType.PROPERTY,
1:eac0369: 		Property.NO_AUTO_BOOT,
1:eac0369: 		Property.STORAGE_TEMP_DIRECTORY,
1:eac0369:         Attribute.CRYPTO_PROVIDER,
1:eac0369:         Attribute.CRYPTO_ALGORITHM,
1:eac0369: 		Attribute.RESTORE_FROM,
1:eac0369: 		Attribute.LOG_DEVICE,
1:eac0369: 		Property.LOG_ARCHIVE_MODE
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Property is set in JVM set
1:eac0369: 	*/
1:eac0369: 	public static final int SET_IN_JVM = 0;	
1:eac0369: 	/**
1:eac0369: 		Property is set in DATABASE set
1:eac0369: 	*/
1:eac0369: 	public static final int SET_IN_DATABASE = 1;
1:eac0369: 	/**
1:eac0369: 		Property is set in APPLICATION (derby.properties) set
1:eac0369: 	*/
1:eac0369: 	public static final int SET_IN_APPLICATION = 2;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Property is not set.
1:eac0369: 	*/
1:eac0369: 	public static final int NOT_SET = -1;
1:eac0369: 
1:eac0369: 
1:eac0369: 	static int whereSet(String key, Dictionary set) {
1:eac0369: 
1:eac0369: 		boolean dbOnly = isDBOnly(set);
1:eac0369: 
1:eac0369: 		if (!dbOnly) {
1:56c1dc2: 			if (getMonitor().getJVMProperty(key) != null) {
1:eac0369: 				return SET_IN_JVM;
3:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		if ((set != null) && (set.get(key) != null))
1:eac0369: 				return SET_IN_DATABASE;
1:eac0369: 
1:eac0369: 		if (!dbOnly) {
1:eac0369: 			if (PropertyUtil.getSystemProperty(key) != null)
1:eac0369: 				return SET_IN_APPLICATION;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return NOT_SET;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static boolean isDBOnly(Dictionary set) {
1:eac0369: 
1:eac0369: 		if (set == null)
1:eac0369: 			return false;
1:56c1dc2: 
1:eac0369: 		String value = (String) set.get(Property.DATABASE_PROPERTIES_ONLY);
1:eac0369: 
1:eac0369: 		boolean dbOnly = Boolean.valueOf(
1:801cf0d:                     (value != null ? value.trim() : null)).booleanValue();
1:eac0369: 
1:eac0369: 		return dbOnly;
1:eac0369: 	}
1:da7973c: 
1:eac0369: 	public static boolean isDBOnly(Properties set) {
1:eac0369: 
1:eac0369: 		if (set == null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		String value = set.getProperty(Property.DATABASE_PROPERTIES_ONLY);
1:eac0369: 
1:eac0369: 		boolean dbOnly = Boolean.valueOf(
2:eac0369:                     (value != null ? value.trim() : value)).booleanValue();
1:eac0369: 
1:eac0369: 		return dbOnly;
1:eac0369: 	}
1:eac0369: 
1:da7973c:     /** Get the list of properties which are normally stored in service.properties */
1:da7973c:     public  static  String[]    getServicePropertyList()
1:da7973c:     {
1:da7973c:         return ArrayUtil.copy( servicePropertyList );
1:da7973c:     }
1:5107349: 	
1:56c1dc2: 	/**
1:ec8172b: 		Find a system wide property.
1:eac0369: 
1:eac0369: 		@return the value of the property or null if it does not exist.
1:ec8172b: 		@see #getSystemProperty(String,String)
1:5107349: 	*/
1:eac0369: 	public static String getSystemProperty(String key) {
1:eac0369: 		return PropertyUtil.getSystemProperty(key, (String) null);
1:5107349: 	}
1:eac0369: 
1:5107349: 	/**
1:eac0369: 		Find a system wide property with a default. Search order is
1:eac0369: 
1:eac0369: 		<OL>
1:eac0369: 		<LI> JVM property
1:eac0369: 		<LI> derby.properties
1:eac0369: 		</OL>
1:eac0369: 
1:eac0369: 		<P>
1:3fd26f3: 		This method can be used by a system that is not running Derby,
1:eac0369: 		just to maintain the same lookup logic and security manager concerns
1:eac0369: 		for finding derby.properties and reading system properties.
1:eac0369: 
1:eac0369: 		@return the value of the property or defaultValue if it does not exist.
1:eac0369: 	*/
1:eac0369: 	public static String getSystemProperty(String key, String defaultValue) {
1:eac0369: 
1:56c1dc2: 		ModuleFactory monitor = getMonitorLite();
1:eac0369: 
1:eac0369: 		String value = monitor.getJVMProperty(key);
1:eac0369: 
1:eac0369: 		if (value == null) {
1:eac0369: 
1:eac0369: 			Properties applicationProperties =
1:eac0369: 				monitor.getApplicationProperties();
1:eac0369: 
1:eac0369: 			if (applicationProperties != null)
1:eac0369: 				value = applicationProperties.getProperty(key);
1:eac0369: 		}
1:eac0369: 		return value == null ? defaultValue : value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a property from the passed in set. The passed in set is
1:eac0369: 		either:
1:eac0369: 		
1:eac0369: 		  <UL>
1:eac0369: 		  <LI> The properties object passed into ModuleControl.boot()
1:eac0369: 		  after the database has been booted. This set will be a DoubleProperties
1:eac0369: 		  object with the per-database transaction set as the read set
1:eac0369: 		  and the service.properties as the write set.
1:eac0369: 		  <LI>
1:eac0369: 		  The Dictionary set returned/passed in by a method of BasicService.Properties.
1:eac0369: 		  </UL>
1:eac0369: 		<BR>
1:eac0369: 		This method uses the same search order as the getService() calls.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public static String getPropertyFromSet(Properties set, String key) {
1:eac0369: 	
1:eac0369: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
1:eac0369: 
1:c0399dc:         //
1:c0399dc:         // Once NATIVE authentication has been set in the database, it cannot
1:c0399dc:         // be overridden.
1:c0399dc:         //
1:c0399dc:         if ( Property.AUTHENTICATION_PROVIDER_PARAMETER.equals( key ) )
1:c0399dc:         {
1:c0399dc:             String  dbValue = PropertyUtil.getPropertyFromSet( true, set, key );
1:c0399dc: 
1:c0399dc:             if ( nativeAuthenticationEnabled( dbValue ) ) { return dbValue; }
1:c0399dc:         }
1:c0399dc: 
1:eac0369: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static Serializable getPropertyFromSet(Dictionary set, String key) {
1:eac0369: 	
1:eac0369: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
1:eac0369: 
1:eac0369: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static Serializable getPropertyFromSet(boolean dbOnly, Dictionary set, String key) {
1:eac0369: 
1:eac0369: 		if (set != null) {
1:eac0369: 
1:eac0369: 			Serializable value;
1:eac0369: 
1:eac0369: 			if (!dbOnly) {
1:56c1dc2: 				value = getMonitor().getJVMProperty(key);
1:eac0369: 				if (value != null)
1:eac0369: 					return value;
1:eac0369: 			}
1:eac0369: 		
1:eac0369: 			value = (Serializable) set.get(key);
1:eac0369: 			if (value != null)
1:eac0369: 				return value;
1:eac0369: 
1:eac0369: 			if (dbOnly)
1:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return PropertyUtil.getSystemProperty(key);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static String getPropertyFromSet(boolean dbOnly, Properties set, String key) {
1:eac0369: 
1:eac0369: 		if (set != null) {
1:eac0369: 
1:eac0369: 			String value;
1:eac0369: 
1:eac0369: 			if (!dbOnly) {
1:56c1dc2: 				value = getMonitor().getJVMProperty(key);
1:eac0369: 				if (value != null)
1:eac0369: 					return value;
1:eac0369: 			}
1:eac0369: 		
1:eac0369: 			value = set.getProperty(key);
1:eac0369: 			if (value != null)
1:eac0369: 				return value;
1:eac0369: 
1:eac0369: 			if (dbOnly)
1:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return PropertyUtil.getSystemProperty(key);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a property only looking in the Persistent Transactional (database) set.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error handling. 
1:eac0369: 	*/
1:eac0369: 	public static String getDatabaseProperty(PersistentSet set, String key) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		if (set == null)
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		Object obj = set.getProperty(key);
1:eac0369:  		if (obj == null) { return null; }
1:eac0369:  		return obj.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find a service wide property with a default. Search order is
1:eac0369: 
1:eac0369: 		The service is the persistent service associated with the
1:eac0369: 		current context stack.
1:eac0369: 
1:eac0369: 		@return the value of the property or defaultValue if it does not exist.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error handling. 
1:eac0369: 	*/
1:eac0369: 	public static String getServiceProperty(PersistentSet set, String key, String defaultValue) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 
1:eac0369: 		String value =
1:eac0369: 			PropertyUtil.getDatabaseProperty(
1:eac0369:                 set, Property.DATABASE_PROPERTIES_ONLY);
1:eac0369: 
1:eac0369: 		boolean dbOnly = 
2:eac0369:             Boolean.valueOf(
1:eac0369:                 (value != null ? value.trim() : value)).booleanValue();
1:eac0369: 
1:eac0369: 		if (!dbOnly) {
1:56c1dc2: 			value = getMonitor().getJVMProperty(key);
1:eac0369: 			if (value != null)
1:eac0369: 				return value;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		value = PropertyUtil.getDatabaseProperty(set, key);
1:eac0369: 		if (value != null)
1:eac0369: 			return value;
1:eac0369: 
1:eac0369: 		if (dbOnly) {
1:eac0369: 			return defaultValue;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return PropertyUtil.getSystemProperty(key, defaultValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find a service wide property. 
1:eac0369: 
1:eac0369: 		The service is the persistent service associated with the
1:eac0369: 		current context stack.
1:eac0369: 
1:eac0369: 		@return the value of the property or null if it does not exist.
1:eac0369: 
1:3fd26f3: 			@exception StandardException Standard Derby error handling. 
1:eac0369: 	*/
1:eac0369: 	public static String getServiceProperty(PersistentSet set, String key)
1:eac0369: 		throws StandardException {
1:eac0369: 		return PropertyUtil.getServiceProperty(set, key, (String) null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a system wide property as a boolean.
1:eac0369: 
1:1d0892e: 		@param key The name of the system property
1:eac0369: 		@return true of the property is set to 'true, TRUE', false otherwise
1:eac0369: 	*/
1:eac0369: 	public static boolean getSystemBoolean(String key) {
1:1d0892e: 		return getSystemBoolean(key, false);
1:1d0892e: 	}
1:1d0892e: 
1:1d0892e:     /**
1:1d0892e:      * Get a system wide property as a boolean.
1:1d0892e:      *
1:1d0892e:      * @param key The name of the system property
1:1d0892e:      * @param defaultValue The value to use if the property has not been set
1:1d0892e:      * @return return defaultValue if the property is not set, returns true if
1:1d0892e:      *  the property is set to 'true, TRUE', returns false otherwise.
1:1d0892e:      */
1:1d0892e:     public static boolean getSystemBoolean(String key, boolean defaultValue) {
1:eac0369: 
1:eac0369:         String value = PropertyUtil.getSystemProperty(key);
1:1d0892e:         if (value == null) {
1:1d0892e:             return defaultValue;
1:1d0892e:         } else {
1:1d0892e:             return (Boolean.valueOf(value.trim()).booleanValue());
1:1d0892e:         }
1:1d0892e:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a service wide property as a boolean.
1:eac0369: 
1:eac0369: 		@return true of the property is set to 'true, TRUE', false otherwise
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error handling. 
1:eac0369: 	*/
1:eac0369: 	public static boolean getServiceBoolean(PersistentSet set, String key, boolean defValue) 
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369:         String value = PropertyUtil.getServiceProperty(set, key);
1:eac0369: 
1:eac0369: 		return booleanProperty(key, value, defValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**s
1:eac0369: 		Get a system wide property as a int.
1:eac0369: 
1:eac0369: 		@return value of the property if set subject to min and max, defaultValue if
1:eac0369: 		it is not set or set to a non-integer value.
1:eac0369: 	*/
1:eac0369: 	public static int getSystemInt(String key, int min, int max, int defaultValue) {
1:eac0369: 		return PropertyUtil.handleInt(PropertyUtil.getSystemProperty(key), min, max, defaultValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a service wide property as a int.
1:eac0369: 
1:eac0369: 		@return value of the property if set subject to min and max, defaultValue if
1:eac0369: 		it is not set or set to a non-integer value.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error handling. 
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public static int getServiceInt(PersistentSet set, String key, int min, int max, int defaultValue)
1:eac0369: 		throws StandardException {
1:eac0369: 		//return PropertyUtil.intPropertyValue(key, PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
1:eac0369: 		return PropertyUtil.handleInt(PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a service wide property as a int. The passed in Properties
1:eac0369: 		set overrides any system, applcation or per-database properties.
1:eac0369: 
1:eac0369: 		@return value of the property if set subject to min and max, defaultValue if
1:eac0369: 		it is not set or set to a non-integer value.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error handling. 
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public static int getServiceInt(PersistentSet set, Properties props, String key, int min, int max, int defaultValue)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		String value = null;
1:eac0369: 
1:eac0369: 		if (props != null)
1:eac0369: 			value = props.getProperty(key);
1:eac0369: 
1:eac0369: 		if (value == null)
1:eac0369: 			value = PropertyUtil.getServiceProperty(set, key);
1:eac0369: 
1:eac0369: 		return PropertyUtil.handleInt(value, min, max, defaultValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a system wide property as a int.
1:eac0369: 
1:eac0369: 		@return value of the property if, defaultValue if
1:eac0369: 		it is not set or set to a non-integer value.
1:eac0369: 	*/
1:eac0369: 	public static int getSystemInt(String key, int defaultValue) {
1:eac0369: 		return PropertyUtil.getSystemInt(key, 0, Integer.MAX_VALUE, defaultValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Parse an string as an int based property value.
1:eac0369: 	*/
1:eac0369: 	public static int handleInt(String value, int min, int max, int defaultValue) {
1:eac0369: 
1:eac0369: 		if (value == null)
1:eac0369: 			return defaultValue;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			int intValue = Integer.parseInt(value);
1:eac0369: 			if ((intValue >= min) && (intValue <= max))
1:eac0369: 				return intValue;
1:eac0369: 		}
1:eac0369: 		catch (NumberFormatException nfe)
1:eac0369: 		{
1:eac0369: 			// just leave the default.
1:eac0369: 		}
1:eac0369: 		return defaultValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Parse and validate and return a boolean property value. If the value is invalid
1:eac0369: 	  raise an exception.
1:eac0369: 
1:eac0369: 	  <P>
1:eac0369: 	  The following are valid property values.
1:eac0369: 	  <UL>
1:eac0369: 	  <LI> null - returns defaultValue
1:eac0369: 	  <LI> "true" - returns true (in any case without the quotes)
1:eac0369: 	  <LI> "false" - return true (in any case without the quotes)
1:eac0369: 	  </UL>
1:eac0369: 	  @exception StandardException Oops
1:eac0369: 	  */
1:eac0369: 	public static boolean booleanProperty(String p, Serializable v, boolean defaultValue)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (v==null)
1:eac0369: 			return defaultValue;
1:eac0369: 
1:eac0369: 		String vS = ((String) v).trim();
1:03f03b6: 
1:03f03b6: 		if ("TRUE".equals(StringUtil.SQLToUpperCase(vS)))
1:eac0369: 			return true;
1:03f03b6:         if ("FALSE".equals(StringUtil.SQLToUpperCase(vS)))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vS);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Parse, validate and return an integer property value. If the value is invalid
1:eac0369: 	  raise an exception. If the value passed in is null return a default value.
1:eac0369: 
1:eac0369: 	  @exception StandardException Oops
1:eac0369: 	  */
1:eac0369: 	public static int intPropertyValue(String p, Serializable v,
1:eac0369: 									   int minValue, int maxValue, int defaultValue)
1:eac0369: 		 throws StandardException
1:c8e864b: 	{
1:eac0369: 		if (v==null)
1:eac0369: 			return defaultValue;
1:eac0369: 
1:eac0369: 		String vs = ((String)v).trim();
1:eac0369: 		try {
1:eac0369: 			int result = Integer.parseInt(vs);
1:eac0369: 			if (result < minValue || result > maxValue)
1:eac0369: 				throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 		catch (NumberFormatException nfe) {
1:eac0369: 			throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Return true iff the key is the name of a database property that is 
1:eac0369: 	  stored in services.properties.
1:eac0369: 	  */ 
1:eac0369: 	public static boolean isServiceProperty(String key)
1:eac0369: 	{
1:eac0369: 		for (int i = 0; i < PropertyUtil.servicePropertyList.length; i++) 
1:eac0369: 			if (key.equals(PropertyUtil.servicePropertyList[i])) return true;
1:eac0369: 		return false;
1:eac0369: 	}
1:c8e864b: 
1:c8e864b: 
1:c8e864b: 	/**
1:ade6ac5: 	 * Return {@code true} if {@code username} is defined as a built-in user
1:ade6ac5: 	 * i.e. there exists a property {@code derby.user.}&lt;userid&gt; in the
1:ade6ac5: 	 * database (or, possibly, in system properties if not forbidden by {@code
1:ade6ac5: 	 * derby.database.propertiesOnly}). Note that &lt;userid&gt; found in a
1:ade6ac5: 	 * property will be normalized to case normal form before comparison is
1:ade6ac5: 	 * performed against username, which is presumed normalized already.
1:c8e864b: 	 *
1:8959636: 	 * @param set object which implements PersistentSet interface
1:c8e864b: 	 *        (TransactionController)
1:c8e864b: 	 * @param username Normalized authorization identifier
1:c8e864b: 	 *
1:8959636: 	 * @return {@code true} if match found
1:c8e864b: 	 *
1:c8e864b: 	 * @exception StandardException
1:c8e864b: 	 */
1:c8e864b: 	public static boolean existsBuiltinUser (
1:c8e864b: 		PersistentSet set,
1:c8e864b: 		String username)
1:c8e864b: 			throws StandardException
1:c8e864b: 	{
1:c8e864b: 		if (propertiesContainsBuiltinUser(set.getProperties(), username)) {
1:c8e864b: 			return true;
1:c8e864b: 		}
1:c8e864b: 		
1:c8e864b: 		// check system level propery, if allowed by
1:c8e864b: 		// derby.database.propertiesOnly
1:c8e864b: 		boolean dbOnly = false;
1:c8e864b: 		dbOnly = Boolean.valueOf(
1:c8e864b: 			PropertyUtil.getDatabaseProperty(
1:c8e864b: 				set,
1:c8e864b: 				Property.DATABASE_PROPERTIES_ONLY)).booleanValue();
1:c8e864b: 
1:c8e864b: 		if (!dbOnly &&
1:c8e864b: 				systemPropertiesExistsBuiltinUser(username)){
1:c8e864b: 			return true;
1:c8e864b: 		}
1:c8e864b: 
1:c8e864b: 		return false;
1:c8e864b: 	}
1:c8e864b: 
1:c8e864b: 	/**
1:c0399dc:      *Return true if NATIVE authentication has been enabled in the passed-in properties.
1:c0399dc:      */
1:5107349: 	public static boolean nativeAuthenticationEnabled( Properties properties )
1:5107349:     {
1:5107349: 		String authenticationProvider = getPropertyFromSet
1:5107349:             (
1:5107349:              properties,
1:5107349:              Property.AUTHENTICATION_PROVIDER_PARAMETER
1:5107349:              );
1:5107349: 
1:c0399dc:         return nativeAuthenticationEnabled( authenticationProvider );
1:c0399dc: 	}
1:c0399dc: 
1:c0399dc: 	/**
1:c0399dc:      *Return true if NATIVE authentication is turned on for the passed-in
1:c0399dc:      * value of Property.AUTHENTICATION_PROVIDER_PARAMETER.
1:c0399dc:      */
1:c0399dc: 	private static boolean nativeAuthenticationEnabled( String authenticationProvider )
1:56c1dc2:     {
1:5107349:         if ( authenticationProvider ==  null ) { return false; }
1:5107349: 
1:5107349:         return StringUtil.SQLToUpperCase( authenticationProvider ).startsWith( Property.AUTHENTICATION_PROVIDER_NATIVE );
1:c0399dc:     }
1:c0399dc:     
1:5107349: 	/**
1:5107349: 		Return true if the passed-in properties specify NATIVE authentication using LOCAL credentials.
1:5107349: 	*/
1:5107349: 	public static boolean localNativeAuthenticationEnabled( Properties properties )
1:c0399dc:     {
1:5107349:         if ( ! nativeAuthenticationEnabled( properties ) ) { return false; }
1:5107349:         
1:5107349: 		String authenticationProvider = getPropertyFromSet
1:5107349:             (
1:5107349:              properties,
1:5107349:              Property.AUTHENTICATION_PROVIDER_PARAMETER
1:5107349:              );
1:5107349: 
1:5107349:         return StringUtil.SQLToUpperCase( authenticationProvider ).endsWith
1:5107349:             ( Property.AUTHENTICATION_PROVIDER_LOCAL_SUFFIX );
1:5107349: 	}
1:5107349: 
1:c8e864b: 
1:eac0369: 	/**
1:c8e864b: 	 * Return true if username is defined as a system property
1:ade6ac5: 	 * i.e. there exists a property {@code derby.user.}&lt;userid&gt;
1:ade6ac5: 	 * in the system properties. Note that &lt;userid&gt; will be
1:ade6ac5: 	 * normalized to case normal form before comparison is performed
1:c8e864b: 	 * against username, which is presumed normalized already.
1:c8e864b: 	 * @param username Normalized authorization identifier
1:8959636: 	 * @return {@code true} if match found
1:c8e864b: 	 */
1:c8e864b: 	private static boolean systemPropertiesExistsBuiltinUser(String username)
1:5107349: 	{
1:56c1dc2: 		ModuleFactory monitor = getMonitorLite();
1:c8e864b: 
1:c8e864b: 		try {
1:c8e864b: 			Properties JVMProperties = System.getProperties();
1:c8e864b: 
1:c8e864b: 			if (propertiesContainsBuiltinUser(JVMProperties, username)) {
1:c8e864b: 				return true;
1:c8e864b: 			}
1:c8e864b: 		} catch (SecurityException e) {
1:c8e864b: 			// Running with security manager and we can't get at all
1:c8e864b: 			// JVM properties, to try to map the back the authid to
1:c8e864b: 			// how the user may have specified a matching id (1->many,
1:c8e864b: 			// since userids are subject to SQL up-casing).
1:c8e864b: 			String key= Property.USER_PROPERTY_PREFIX +
1:c8e864b: 				IdUtil.SQLIdentifier2CanonicalPropertyUsername(username);
1:c8e864b: 
1:c8e864b: 			if (monitor.getJVMProperty(key) != null) {
1:c8e864b: 				return true;
1:c8e864b: 			}
1:c8e864b: 		}
1:c8e864b: 
1:c8e864b: 		Properties applicationProperties = monitor.getApplicationProperties();
1:c8e864b: 
1:c8e864b: 		return propertiesContainsBuiltinUser(applicationProperties, username);
1:c8e864b: 	}
1:c8e864b: 
1:c8e864b: 	private static boolean propertiesContainsBuiltinUser(Properties props,
1:c8e864b: 														 String username)
1:c8e864b: 	{
1:c8e864b: 		if (props != null) {
1:c8e864b: 			Enumeration e = props.propertyNames();
1:c8e864b: 		
1:c8e864b: 			while (e.hasMoreElements()) {
1:c8e864b: 				String p = (String)e.nextElement();
1:c8e864b: 
1:c8e864b: 				if (p.startsWith(Property.USER_PROPERTY_PREFIX)) {
1:c8e864b: 					String userAsSpecified = StringUtil.normalizeSQLIdentifier(
1:c8e864b: 						p.substring(Property.USER_PROPERTY_PREFIX.length()));
1:c8e864b: 
1:c8e864b: 					if (username.equals(userAsSpecified)) {
1:c8e864b: 						return true;
1:c8e864b: 					}
1:c8e864b: 				}
1:c8e864b: 			}
1:c8e864b: 		}
1:c8e864b: 
1:c8e864b: 		return false;
1:c8e864b: 	}
1:eac0369:     
1:eac0369:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitorLite()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:eac0369:                  {
1:56c1dc2:                      return Monitor.getMonitorLite();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 			if (getMonitor().getJVMProperty(key) != null) {
/////////////////////////////////////////////////////////////////////////
1: 		ModuleFactory monitor = getMonitorLite();
/////////////////////////////////////////////////////////////////////////
1: 				value = getMonitor().getJVMProperty(key);
/////////////////////////////////////////////////////////////////////////
1: 				value = getMonitor().getJVMProperty(key);
/////////////////////////////////////////////////////////////////////////
1: 			value = getMonitor().getJVMProperty(key);
/////////////////////////////////////////////////////////////////////////
1: 		ModuleFactory monitor = getMonitorLite();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitorLite()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitorLite();
1:                  }
1:              }
1:              );
1:     }
1: 
commit:da7973c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 	private static final String[] servicePropertyList = {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the list of properties which are normally stored in service.properties */
1:     public  static  String[]    getServicePropertyList()
1:     {
1:         return ArrayUtil.copy( servicePropertyList );
1:     }
commit:c0399dc
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // Once NATIVE authentication has been set in the database, it cannot
1:         // be overridden.
1:         //
1:         if ( Property.AUTHENTICATION_PROVIDER_PARAMETER.equals( key ) )
1:         {
1:             String  dbValue = PropertyUtil.getPropertyFromSet( true, set, key );
1: 
1:             if ( nativeAuthenticationEnabled( dbValue ) ) { return dbValue; }
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:      *Return true if NATIVE authentication has been enabled in the passed-in properties.
1:      */
/////////////////////////////////////////////////////////////////////////
1:         return nativeAuthenticationEnabled( authenticationProvider );
1: 	}
1: 
1: 	/**
1:      *Return true if NATIVE authentication is turned on for the passed-in
1:      * value of Property.AUTHENTICATION_PROVIDER_PARAMETER.
1:      */
1: 	private static boolean nativeAuthenticationEnabled( String authenticationProvider )
1:     {
1:     }
1:     
commit:5107349
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 		Return true if NATIVE authentication has been enabled in the passed-in properties.
1: 	*/
1: 	public static boolean nativeAuthenticationEnabled( Properties properties )
1:     {
1: 		String authenticationProvider = getPropertyFromSet
1:             (
1:              properties,
1:              Property.AUTHENTICATION_PROVIDER_PARAMETER
1:              );
1: 
1:         if ( authenticationProvider ==  null ) { return false; }
1: 
1:         return StringUtil.SQLToUpperCase( authenticationProvider ).startsWith( Property.AUTHENTICATION_PROVIDER_NATIVE );
1: 	}
1: 
1: 	/**
1: 		Return true if the passed-in properties specify NATIVE authentication using LOCAL credentials.
1: 	*/
1: 	public static boolean localNativeAuthenticationEnabled( Properties properties )
1:     {
1:         if ( ! nativeAuthenticationEnabled( properties ) ) { return false; }
1:         
1: 		String authenticationProvider = getPropertyFromSet
1:             (
1:              properties,
1:              Property.AUTHENTICATION_PROVIDER_PARAMETER
1:              );
1: 
1:         return StringUtil.SQLToUpperCase( authenticationProvider ).endsWith
1:             ( Property.AUTHENTICATION_PROVIDER_LOCAL_SUFFIX );
1: 	}
1: 
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1:                     (value != null ? value.trim() : null)).booleanValue();
commit:ade6ac5
/////////////////////////////////////////////////////////////////////////
1: 	 * Return {@code true} if {@code username} is defined as a built-in user
1: 	 * i.e. there exists a property {@code derby.user.}&lt;userid&gt; in the
1: 	 * database (or, possibly, in system properties if not forbidden by {@code
1: 	 * derby.database.propertiesOnly}). Note that &lt;userid&gt; found in a
1: 	 * property will be normalized to case normal form before comparison is
1: 	 * performed against username, which is presumed normalized already.
/////////////////////////////////////////////////////////////////////////
1: 	 * i.e. there exists a property {@code derby.user.}&lt;userid&gt;
1: 	 * in the system properties. Note that &lt;userid&gt; will be
1: 	 * normalized to case normal form before comparison is performed
commit:c8e864b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
0: 	 * Return true if username is defined as an effective property
0: 	 * i.e. there exists a property "<code>derby.user.</code><userid>"
0: 	 * in the database (or, possibly, in system properties if not
0: 	 * forbidden by derby.database.propertiesOnly). Note that <userid>
0: 	 * found in a property will be normalized to internal form before
0: 	 * comparison is performed against username, which is presumed
0: 	 * normalized already.
1: 	 *
0: 	 * @param object which implements PersistentSet interface
1: 	 *        (TransactionController)
1: 	 * @param username Normalized authorization identifier
1: 	 *
0: 	 * @returns true if match found
1: 	 *
1: 	 * @exception StandardException
1: 	 */
1: 	public static boolean existsBuiltinUser (
1: 		PersistentSet set,
1: 		String username)
1: 			throws StandardException
1: 	{
1: 		if (propertiesContainsBuiltinUser(set.getProperties(), username)) {
1: 			return true;
1: 		}
1: 		
1: 		// check system level propery, if allowed by
1: 		// derby.database.propertiesOnly
1: 		boolean dbOnly = false;
1: 		dbOnly = Boolean.valueOf(
1: 			PropertyUtil.getDatabaseProperty(
1: 				set,
1: 				Property.DATABASE_PROPERTIES_ONLY)).booleanValue();
1: 
1: 		if (!dbOnly &&
1: 				systemPropertiesExistsBuiltinUser(username)){
1: 			return true;
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Return true if username is defined as a system property
0: 	 * i.e. there exists a property "<code>derby.user.</code><userid>"
0: 	 * in the system properties. Note that <userid> will be
0: 	 * normalized to internal form before comparison is performed
1: 	 * against username, which is presumed normalized already.
1: 	 * @param username Normalized authorization identifier
0: 	 * @returns true if match found
1: 	 */
1: 	private static boolean systemPropertiesExistsBuiltinUser(String username)
1: 	{
0: 		ModuleFactory monitor = Monitor.getMonitorLite();
1: 
1: 		try {
1: 			Properties JVMProperties = System.getProperties();
1: 
1: 			if (propertiesContainsBuiltinUser(JVMProperties, username)) {
1: 				return true;
1: 			}
1: 		} catch (SecurityException e) {
1: 			// Running with security manager and we can't get at all
1: 			// JVM properties, to try to map the back the authid to
1: 			// how the user may have specified a matching id (1->many,
1: 			// since userids are subject to SQL up-casing).
1: 			String key= Property.USER_PROPERTY_PREFIX +
1: 				IdUtil.SQLIdentifier2CanonicalPropertyUsername(username);
1: 
1: 			if (monitor.getJVMProperty(key) != null) {
1: 				return true;
1: 			}
1: 		}
1: 
1: 		Properties applicationProperties = monitor.getApplicationProperties();
1: 
1: 		return propertiesContainsBuiltinUser(applicationProperties, username);
1: 	}
1: 
1: 	private static boolean propertiesContainsBuiltinUser(Properties props,
1: 														 String username)
1: 	{
1: 		if (props != null) {
1: 			Enumeration e = props.propertyNames();
1: 		
1: 			while (e.hasMoreElements()) {
1: 				String p = (String)e.nextElement();
1: 
1: 				if (p.startsWith(Property.USER_PROPERTY_PREFIX)) {
1: 					String userAsSpecified = StringUtil.normalizeSQLIdentifier(
1: 						p.substring(Property.USER_PROPERTY_PREFIX.length()));
1: 
1: 					if (username.equals(userAsSpecified)) {
1: 						return true;
1: 					}
1: 				}
1: 			}
1: 		}
1: 
1: 		return false;
1: 	}
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8959636
/////////////////////////////////////////////////////////////////////////
1: 	 * @param set object which implements PersistentSet interface
1: 	 * @return {@code true} if match found
/////////////////////////////////////////////////////////////////////////
1: 	 * @return {@code true} if match found
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1d0892e
/////////////////////////////////////////////////////////////////////////
1: 		@param key The name of the system property
1: 		return getSystemBoolean(key, false);
1: 	}
1: 
1:     /**
1:      * Get a system wide property as a boolean.
1:      *
1:      * @param key The name of the system property
1:      * @param defaultValue The value to use if the property has not been set
1:      * @return return defaultValue if the property is not set, returns true if
1:      *  the property is set to 'true, TRUE', returns false otherwise.
1:      */
1:     public static boolean getSystemBoolean(String key, boolean defaultValue) {
1:         if (value == null) {
1:             return defaultValue;
1:         } else {
1:             return (Boolean.valueOf(value.trim()).booleanValue());
1:         }
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:03f03b6
/////////////////////////////////////////////////////////////////////////
1: 
1: 		if ("TRUE".equals(StringUtil.SQLToUpperCase(vS)))
1:         if ("FALSE".equals(StringUtil.SQLToUpperCase(vS)))
commit:ec8172b
/////////////////////////////////////////////////////////////////////////
1: 		Find a system wide property.
1: 		@see #getSystemProperty(String,String)
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.property.PropertyUtil
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.property;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.reference.Attribute;
1: import org.apache.derby.iapi.reference.EngineType;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: import java.util.Properties;
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: 
1: /**
1: 	There are 5 property objects within a JBMS system.
1: 
1: 	1) JVM - JVM set - those in System.getProperties
1: 	2) APP - Application set - derby.properties file
1: 	3) SRV - Persistent Service set - Those stored in service.properties
1: 	4) TRAN - Persistent Transactional set - Those stored via the AccessManager interface
1: 	5) BOOT - Set by a boot method (rare)
1: 
1: 	This class has a set of static methods to find a property using a consistent search order
1: 	from the above set.
1: 	<BR>
1: 	getSystem*() methods use the search order.
1: 	<OL>
1: 	<LI> JVM
1: 	<LI> APP
1: 	</OL>
1: 	<BR>
1: 	getService* methods use the search order
1: 	<OL>
1: 	<LI> JVM
1: 	<LI> TRAN
1: 	<LI> SRV
1: 	<LI> APP
1: 	</OL>
1: 
1: */
1: public class PropertyUtil {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	// List of properties that are stored in the service.properties file
0: 	public static final String[] servicePropertyList = {
1: 		EngineType.PROPERTY,
1: 		Property.NO_AUTO_BOOT,
1: 		Property.STORAGE_TEMP_DIRECTORY,
1:         Attribute.CRYPTO_PROVIDER,
1:         Attribute.CRYPTO_ALGORITHM,
1: 		Attribute.RESTORE_FROM,
1: 		Attribute.LOG_DEVICE,
1: 		Property.LOG_ARCHIVE_MODE
1: 	};
1: 
1: 	/**
1: 		Property is set in JVM set
1: 	*/
1: 	public static final int SET_IN_JVM = 0;	
1: 	/**
1: 		Property is set in DATABASE set
1: 	*/
1: 	public static final int SET_IN_DATABASE = 1;
1: 	/**
1: 		Property is set in APPLICATION (derby.properties) set
1: 	*/
1: 	public static final int SET_IN_APPLICATION = 2;
1: 
1: 	/**
1: 		Property is not set.
1: 	*/
1: 	public static final int NOT_SET = -1;
1: 
1: 
1: 	static int whereSet(String key, Dictionary set) {
1: 
1: 		boolean dbOnly = isDBOnly(set);
1: 
1: 		if (!dbOnly) {
0: 			if (Monitor.getMonitor().getJVMProperty(key) != null) {
1: 				return SET_IN_JVM;
1: 			}
1: 		}
1: 		
1: 		if ((set != null) && (set.get(key) != null))
1: 				return SET_IN_DATABASE;
1: 
1: 		if (!dbOnly) {
1: 			if (PropertyUtil.getSystemProperty(key) != null)
1: 				return SET_IN_APPLICATION;
1: 		}
1: 
1: 		return NOT_SET;
1: 	}
1: 
1: 	public static boolean isDBOnly(Dictionary set) {
1: 
1: 		if (set == null)
1: 			return false;
1: 
1: 		String value = (String) set.get(Property.DATABASE_PROPERTIES_ONLY);
1: 
1: 		boolean dbOnly = Boolean.valueOf(
1:                     (value != null ? value.trim() : value)).booleanValue();
1: 
1: 		return dbOnly;
1: 	}
1: 
1: 	public static boolean isDBOnly(Properties set) {
1: 
1: 		if (set == null)
1: 			return false;
1: 
1: 		String value = set.getProperty(Property.DATABASE_PROPERTIES_ONLY);
1: 
1: 		boolean dbOnly = Boolean.valueOf(
1:                     (value != null ? value.trim() : value)).booleanValue();
1: 
1: 		return dbOnly;
1: 	}
1: 	
1: 	/**
0: 		Find a system wide property. Search order is
1: 
1: 		@return the value of the property or null if it does not exist.
1: 	*/
1: 	public static String getSystemProperty(String key) {
1: 		return PropertyUtil.getSystemProperty(key, (String) null);
1: 	}
1: 
1: 	/**
1: 		Find a system wide property with a default. Search order is
1: 
1: 		<OL>
1: 		<LI> JVM property
1: 		<LI> derby.properties
1: 		</OL>
1: 
1: 		<P>
0: 		This method can be used by a system that is not running Cloudscape,
1: 		just to maintain the same lookup logic and security manager concerns
1: 		for finding derby.properties and reading system properties.
1: 
1: 		@return the value of the property or defaultValue if it does not exist.
1: 	*/
1: 	public static String getSystemProperty(String key, String defaultValue) {
1: 
0: 		ModuleFactory monitor = Monitor.getMonitorLite();
1: 
1: 		String value = monitor.getJVMProperty(key);
1: 
1: 		if (value == null) {
1: 
1: 			Properties applicationProperties =
1: 				monitor.getApplicationProperties();
1: 
1: 			if (applicationProperties != null)
1: 				value = applicationProperties.getProperty(key);
1: 		}
1: 		return value == null ? defaultValue : value;
1: 	}
1: 
1: 
1: 	/**
1: 		Get a property from the passed in set. The passed in set is
1: 		either:
1: 		
1: 		  <UL>
1: 		  <LI> The properties object passed into ModuleControl.boot()
1: 		  after the database has been booted. This set will be a DoubleProperties
1: 		  object with the per-database transaction set as the read set
1: 		  and the service.properties as the write set.
1: 		  <LI>
1: 		  The Dictionary set returned/passed in by a method of BasicService.Properties.
1: 		  </UL>
1: 		<BR>
1: 		This method uses the same search order as the getService() calls.
1: 
1: 	*/
1: 	public static String getPropertyFromSet(Properties set, String key) {
1: 	
1: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
1: 
1: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
1: 	}
1: 
1: 	public static Serializable getPropertyFromSet(Dictionary set, String key) {
1: 	
1: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
1: 
1: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
1: 	}
1: 
1: 	public static Serializable getPropertyFromSet(boolean dbOnly, Dictionary set, String key) {
1: 
1: 		if (set != null) {
1: 
1: 			Serializable value;
1: 
1: 			if (!dbOnly) {
0: 				value = Monitor.getMonitor().getJVMProperty(key);
1: 				if (value != null)
1: 					return value;
1: 			}
1: 		
1: 			value = (Serializable) set.get(key);
1: 			if (value != null)
1: 				return value;
1: 
1: 			if (dbOnly)
1: 				return null;
1: 		}
1: 
1: 		return PropertyUtil.getSystemProperty(key);
1: 	}
1: 
1: 	public static String getPropertyFromSet(boolean dbOnly, Properties set, String key) {
1: 
1: 		if (set != null) {
1: 
1: 			String value;
1: 
1: 			if (!dbOnly) {
0: 				value = Monitor.getMonitor().getJVMProperty(key);
1: 				if (value != null)
1: 					return value;
1: 			}
1: 		
1: 			value = set.getProperty(key);
1: 			if (value != null)
1: 				return value;
1: 
1: 			if (dbOnly)
1: 				return null;
1: 		}
1: 
1: 		return PropertyUtil.getSystemProperty(key);
1: 	}
1: 
1: 	/**
1: 		Get a property only looking in the Persistent Transactional (database) set.
1: 
0: 		@exception StandardException Standard Cloudscape error handling. 
1: 	*/
1: 	public static String getDatabaseProperty(PersistentSet set, String key) 
1: 		throws StandardException {
1: 
1: 		if (set == null)
1: 			return null;
1: 
1: 		Object obj = set.getProperty(key);
1:  		if (obj == null) { return null; }
1:  		return obj.toString();
1: 	}
1: 
1: 	/**
1: 		Find a service wide property with a default. Search order is
1: 
1: 		The service is the persistent service associated with the
1: 		current context stack.
1: 
1: 		@return the value of the property or defaultValue if it does not exist.
1: 
0: 		@exception StandardException Standard Cloudscape error handling. 
1: 	*/
1: 	public static String getServiceProperty(PersistentSet set, String key, String defaultValue) 
1: 		throws StandardException {
1: 
1: 
1: 		String value =
1: 			PropertyUtil.getDatabaseProperty(
1:                 set, Property.DATABASE_PROPERTIES_ONLY);
1: 
1: 		boolean dbOnly = 
1:             Boolean.valueOf(
1:                 (value != null ? value.trim() : value)).booleanValue();
1: 
1: 		if (!dbOnly) {
0: 			value = Monitor.getMonitor().getJVMProperty(key);
1: 			if (value != null)
1: 				return value;
1: 		}
1: 
1: 		value = PropertyUtil.getDatabaseProperty(set, key);
1: 		if (value != null)
1: 			return value;
1: 
1: 		if (dbOnly) {
1: 			return defaultValue;
1: 		}
1: 
1: 		return PropertyUtil.getSystemProperty(key, defaultValue);
1: 	}
1: 
1: 
1: 	/**
1: 		Find a service wide property. 
1: 
1: 		The service is the persistent service associated with the
1: 		current context stack.
1: 
1: 		@return the value of the property or null if it does not exist.
1: 
0: 			@exception StandardException Standard Cloudscape error handling. 
1: 	*/
1: 	public static String getServiceProperty(PersistentSet set, String key)
1: 		throws StandardException {
1: 		return PropertyUtil.getServiceProperty(set, key, (String) null);
1: 	}
1: 
1: 	/**
1: 		Get a system wide property as a boolean.
1: 
1: 		@return true of the property is set to 'true, TRUE', false otherwise
1: 	*/
1: 	public static boolean getSystemBoolean(String key) {
1: 
1:         String value = PropertyUtil.getSystemProperty(key);
1: 
0: 		return( 
1:             Boolean.valueOf(
0:                 (value != null ? value.trim() : value)).booleanValue());
1: 	}
1: 
1: 	/**
1: 		Get a service wide property as a boolean.
1: 
1: 		@return true of the property is set to 'true, TRUE', false otherwise
1: 
0: 		@exception StandardException Standard Cloudscape error handling. 
1: 	*/
1: 	public static boolean getServiceBoolean(PersistentSet set, String key, boolean defValue) 
1: 		throws StandardException {
1: 
1:         String value = PropertyUtil.getServiceProperty(set, key);
1: 
1: 		return booleanProperty(key, value, defValue);
1: 	}
1: 
1: 	/**s
1: 		Get a system wide property as a int.
1: 
1: 		@return value of the property if set subject to min and max, defaultValue if
1: 		it is not set or set to a non-integer value.
1: 	*/
1: 	public static int getSystemInt(String key, int min, int max, int defaultValue) {
1: 		return PropertyUtil.handleInt(PropertyUtil.getSystemProperty(key), min, max, defaultValue);
1: 	}
1: 
1: 	/**
1: 		Get a service wide property as a int.
1: 
1: 		@return value of the property if set subject to min and max, defaultValue if
1: 		it is not set or set to a non-integer value.
1: 
0: 		@exception StandardException Standard Cloudscape error handling. 
1: 
1: 	*/
1: 	public static int getServiceInt(PersistentSet set, String key, int min, int max, int defaultValue)
1: 		throws StandardException {
1: 		//return PropertyUtil.intPropertyValue(key, PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
1: 		return PropertyUtil.handleInt(PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
1: 	}
1: 
1: 	/**
1: 		Get a service wide property as a int. The passed in Properties
1: 		set overrides any system, applcation or per-database properties.
1: 
1: 		@return value of the property if set subject to min and max, defaultValue if
1: 		it is not set or set to a non-integer value.
1: 
0: 		@exception StandardException Standard Cloudscape error handling. 
1: 
1: 	*/
1: 	public static int getServiceInt(PersistentSet set, Properties props, String key, int min, int max, int defaultValue)
1: 		throws StandardException {
1: 
1: 		String value = null;
1: 
1: 		if (props != null)
1: 			value = props.getProperty(key);
1: 
1: 		if (value == null)
1: 			value = PropertyUtil.getServiceProperty(set, key);
1: 
1: 		return PropertyUtil.handleInt(value, min, max, defaultValue);
1: 	}
1: 
1: 	/**
1: 		Get a system wide property as a int.
1: 
1: 		@return value of the property if, defaultValue if
1: 		it is not set or set to a non-integer value.
1: 	*/
1: 	public static int getSystemInt(String key, int defaultValue) {
1: 		return PropertyUtil.getSystemInt(key, 0, Integer.MAX_VALUE, defaultValue);
1: 	}
1: 
1: 	/**
1: 		Parse an string as an int based property value.
1: 	*/
1: 	public static int handleInt(String value, int min, int max, int defaultValue) {
1: 
1: 		if (value == null)
1: 			return defaultValue;
1: 
1: 		try {
1: 			int intValue = Integer.parseInt(value);
1: 			if ((intValue >= min) && (intValue <= max))
1: 				return intValue;
1: 		}
1: 		catch (NumberFormatException nfe)
1: 		{
1: 			// just leave the default.
1: 		}
1: 		return defaultValue;
1: 	}
1: 
1: 	/**
1: 	  Parse and validate and return a boolean property value. If the value is invalid
1: 	  raise an exception.
1: 
1: 	  <P>
1: 	  The following are valid property values.
1: 	  <UL>
1: 	  <LI> null - returns defaultValue
1: 	  <LI> "true" - returns true (in any case without the quotes)
1: 	  <LI> "false" - return true (in any case without the quotes)
1: 	  </UL>
1: 	  @exception StandardException Oops
1: 	  */
1: 	public static boolean booleanProperty(String p, Serializable v, boolean defaultValue)
1: 		 throws StandardException
1: 	{
1: 		if (v==null)
1: 			return defaultValue;
1: 
1: 		String vS = ((String) v).trim();
0: 		if (StringUtil.SQLToLowerCase(vS).equals("true"))
1: 			return true;
0: 		if (StringUtil.SQLToLowerCase(vS).equals("false"))
1: 			return false;
1: 
1: 		throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vS);
1: 	}
1: 
1: 	/**
1: 	  Parse, validate and return an integer property value. If the value is invalid
1: 	  raise an exception. If the value passed in is null return a default value.
1: 
1: 	  @exception StandardException Oops
1: 	  */
1: 	public static int intPropertyValue(String p, Serializable v,
1: 									   int minValue, int maxValue, int defaultValue)
1: 		 throws StandardException
1: 	{
1: 		if (v==null)
1: 			return defaultValue;
1: 
1: 		String vs = ((String)v).trim();
1: 		try {
1: 			int result = Integer.parseInt(vs);
1: 			if (result < minValue || result > maxValue)
1: 				throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
1: 			return result;
1: 		}
1: 		catch (NumberFormatException nfe) {
1: 			throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Return true iff the key is the name of a database property that is 
1: 	  stored in services.properties.
1: 	  */ 
1: 	public static boolean isServiceProperty(String key)
1: 	{
1: 		for (int i = 0; i < PropertyUtil.servicePropertyList.length; i++) 
1: 			if (key.equals(PropertyUtil.servicePropertyList[i])) return true;
1: 		return false;
1: 	}
1: }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		This method can be used by a system that is not running Derby,
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error handling. 
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error handling. 
/////////////////////////////////////////////////////////////////////////
1: 			@exception StandardException Standard Derby error handling. 
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error handling. 
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error handling. 
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error handling. 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.property;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.reference.EngineType;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.monitor.ModuleFactory;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import java.util.Properties;
0: import java.io.Serializable;
0: import java.util.Dictionary;
0: 
0: /**
0: 	There are 5 property objects within a JBMS system.
0: 
0: 	1) JVM - JVM set - those in System.getProperties
0: 	2) APP - Application set - derby.properties file
0: 	3) SRV - Persistent Service set - Those stored in service.properties
0: 	4) TRAN - Persistent Transactional set - Those stored via the AccessManager interface
0: 	5) BOOT - Set by a boot method (rare)
0: 
0: 	This class has a set of static methods to find a property using a consistent search order
0: 	from the above set.
0: 	<BR>
0: 	getSystem*() methods use the search order.
0: 	<OL>
0: 	<LI> JVM
0: 	<LI> APP
0: 	</OL>
0: 	<BR>
0: 	getService* methods use the search order
0: 	<OL>
0: 	<LI> JVM
0: 	<LI> TRAN
0: 	<LI> SRV
0: 	<LI> APP
0: 	</OL>
0: 
0: */
0: public class PropertyUtil {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	// List of properties that are stored in the service.properties file
0: 	public static final String[] servicePropertyList = {
0: 		EngineType.PROPERTY,
0: 		Property.NO_AUTO_BOOT,
0: 		Property.STORAGE_TEMP_DIRECTORY,
0:         Attribute.CRYPTO_PROVIDER,
0:         Attribute.CRYPTO_ALGORITHM,
0: 		Attribute.RESTORE_FROM,
0: 		Attribute.LOG_DEVICE,
0: 		Property.LOG_ARCHIVE_MODE
0: 	};
0: 
0: 	/**
0: 		Property is set in JVM set
0: 	*/
0: 	public static final int SET_IN_JVM = 0;	
0: 	/**
0: 		Property is set in DATABASE set
0: 	*/
0: 	public static final int SET_IN_DATABASE = 1;
0: 	/**
0: 		Property is set in APPLICATION (derby.properties) set
0: 	*/
0: 	public static final int SET_IN_APPLICATION = 2;
0: 
0: 	/**
0: 		Property is not set.
0: 	*/
0: 	public static final int NOT_SET = -1;
0: 
0: 
0: 	static int whereSet(String key, Dictionary set) {
0: 
0: 		boolean dbOnly = isDBOnly(set);
0: 
0: 		if (!dbOnly) {
0: 			if (Monitor.getMonitor().getJVMProperty(key) != null) {
0: 				return SET_IN_JVM;
0: 			}
0: 		}
0: 		
0: 		if ((set != null) && (set.get(key) != null))
0: 				return SET_IN_DATABASE;
0: 
0: 		if (!dbOnly) {
0: 			if (PropertyUtil.getSystemProperty(key) != null)
0: 				return SET_IN_APPLICATION;
0: 		}
0: 
0: 		return NOT_SET;
0: 	}
0: 
0: 	public static boolean isDBOnly(Dictionary set) {
0: 
0: 		if (set == null)
0: 			return false;
0: 
0: 		String value = (String) set.get(Property.DATABASE_PROPERTIES_ONLY);
0: 
0: 		boolean dbOnly = Boolean.valueOf(
0:                     (value != null ? value.trim() : value)).booleanValue();
0: 
0: 		return dbOnly;
0: 	}
0: 
0: 	public static boolean isDBOnly(Properties set) {
0: 
0: 		if (set == null)
0: 			return false;
0: 
0: 		String value = set.getProperty(Property.DATABASE_PROPERTIES_ONLY);
0: 
0: 		boolean dbOnly = Boolean.valueOf(
0:                     (value != null ? value.trim() : value)).booleanValue();
0: 
0: 		return dbOnly;
0: 	}
0: 	
0: 	/**
0: 		Find a system wide property. Search order is
0: 
0: 		@return the value of the property or null if it does not exist.
0: 	*/
0: 	public static String getSystemProperty(String key) {
0: 		return PropertyUtil.getSystemProperty(key, (String) null);
0: 	}
0: 
0: 	/**
0: 		Find a system wide property with a default. Search order is
0: 
0: 		<OL>
0: 		<LI> JVM property
0: 		<LI> derby.properties
0: 		</OL>
0: 
0: 		<P>
0: 		This method can be used by a system that is not running Cloudscape,
0: 		just to maintain the same lookup logic and security manager concerns
0: 		for finding derby.properties and reading system properties.
0: 
0: 		@return the value of the property or defaultValue if it does not exist.
0: 	*/
0: 	public static String getSystemProperty(String key, String defaultValue) {
0: 
0: 		ModuleFactory monitor = Monitor.getMonitorLite();
0: 
0: 		String value = monitor.getJVMProperty(key);
0: 
0: 		if (value == null) {
0: 
0: 			Properties applicationProperties =
0: 				monitor.getApplicationProperties();
0: 
0: 			if (applicationProperties != null)
0: 				value = applicationProperties.getProperty(key);
0: 		}
0: 		return value == null ? defaultValue : value;
0: 	}
0: 
0: 
0: 	/**
0: 		Get a property from the passed in set. The passed in set is
0: 		either:
0: 		
0: 		  <UL>
0: 		  <LI> The properties object passed into ModuleControl.boot()
0: 		  after the database has been booted. This set will be a DoubleProperties
0: 		  object with the per-database transaction set as the read set
0: 		  and the service.properties as the write set.
0: 		  <LI>
0: 		  The Dictionary set returned/passed in by a method of BasicService.Properties.
0: 		  </UL>
0: 		<BR>
0: 		This method uses the same search order as the getService() calls.
0: 
0: 	*/
0: 	public static String getPropertyFromSet(Properties set, String key) {
0: 	
0: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
0: 
0: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
0: 	}
0: 
0: 	public static Serializable getPropertyFromSet(Dictionary set, String key) {
0: 	
0: 		boolean dbOnly = set != null ? isDBOnly(set) : false;
0: 
0: 		return PropertyUtil.getPropertyFromSet(dbOnly, set, key);
0: 	}
0: 
0: 	public static Serializable getPropertyFromSet(boolean dbOnly, Dictionary set, String key) {
0: 
0: 		if (set != null) {
0: 
0: 			Serializable value;
0: 
0: 			if (!dbOnly) {
0: 				value = Monitor.getMonitor().getJVMProperty(key);
0: 				if (value != null)
0: 					return value;
0: 			}
0: 		
0: 			value = (Serializable) set.get(key);
0: 			if (value != null)
0: 				return value;
0: 
0: 			if (dbOnly)
0: 				return null;
0: 		}
0: 
0: 		return PropertyUtil.getSystemProperty(key);
0: 	}
0: 
0: 	public static String getPropertyFromSet(boolean dbOnly, Properties set, String key) {
0: 
0: 		if (set != null) {
0: 
0: 			String value;
0: 
0: 			if (!dbOnly) {
0: 				value = Monitor.getMonitor().getJVMProperty(key);
0: 				if (value != null)
0: 					return value;
0: 			}
0: 		
0: 			value = set.getProperty(key);
0: 			if (value != null)
0: 				return value;
0: 
0: 			if (dbOnly)
0: 				return null;
0: 		}
0: 
0: 		return PropertyUtil.getSystemProperty(key);
0: 	}
0: 
0: 	/**
0: 		Get a property only looking in the Persistent Transactional (database) set.
0: 
0: 		@exception StandardException Standard Cloudscape error handling. 
0: 	*/
0: 	public static String getDatabaseProperty(PersistentSet set, String key) 
0: 		throws StandardException {
0: 
0: 		if (set == null)
0: 			return null;
0: 
0: 		Object obj = set.getProperty(key);
0:  		if (obj == null) { return null; }
0:  		return obj.toString();
0: 	}
0: 
0: 	/**
0: 		Find a service wide property with a default. Search order is
0: 
0: 		The service is the persistent service associated with the
0: 		current context stack.
0: 
0: 		@return the value of the property or defaultValue if it does not exist.
0: 
0: 		@exception StandardException Standard Cloudscape error handling. 
0: 	*/
0: 	public static String getServiceProperty(PersistentSet set, String key, String defaultValue) 
0: 		throws StandardException {
0: 
0: 
0: 		String value =
0: 			PropertyUtil.getDatabaseProperty(
0:                 set, Property.DATABASE_PROPERTIES_ONLY);
0: 
0: 		boolean dbOnly = 
0:             Boolean.valueOf(
0:                 (value != null ? value.trim() : value)).booleanValue();
0: 
0: 		if (!dbOnly) {
0: 			value = Monitor.getMonitor().getJVMProperty(key);
0: 			if (value != null)
0: 				return value;
0: 		}
0: 
0: 		value = PropertyUtil.getDatabaseProperty(set, key);
0: 		if (value != null)
0: 			return value;
0: 
0: 		if (dbOnly) {
0: 			return defaultValue;
0: 		}
0: 
0: 		return PropertyUtil.getSystemProperty(key, defaultValue);
0: 	}
0: 
0: 
0: 	/**
0: 		Find a service wide property. 
0: 
0: 		The service is the persistent service associated with the
0: 		current context stack.
0: 
0: 		@return the value of the property or null if it does not exist.
0: 
0: 			@exception StandardException Standard Cloudscape error handling. 
0: 	*/
0: 	public static String getServiceProperty(PersistentSet set, String key)
0: 		throws StandardException {
0: 		return PropertyUtil.getServiceProperty(set, key, (String) null);
0: 	}
0: 
0: 	/**
0: 		Get a system wide property as a boolean.
0: 
0: 		@return true of the property is set to 'true, TRUE', false otherwise
0: 	*/
0: 	public static boolean getSystemBoolean(String key) {
0: 
0:         String value = PropertyUtil.getSystemProperty(key);
0: 
0: 		return( 
0:             Boolean.valueOf(
0:                 (value != null ? value.trim() : value)).booleanValue());
0: 	}
0: 
0: 	/**
0: 		Get a service wide property as a boolean.
0: 
0: 		@return true of the property is set to 'true, TRUE', false otherwise
0: 
0: 		@exception StandardException Standard Cloudscape error handling. 
0: 	*/
0: 	public static boolean getServiceBoolean(PersistentSet set, String key, boolean defValue) 
0: 		throws StandardException {
0: 
0:         String value = PropertyUtil.getServiceProperty(set, key);
0: 
0: 		return booleanProperty(key, value, defValue);
0: 	}
0: 
0: 	/**s
0: 		Get a system wide property as a int.
0: 
0: 		@return value of the property if set subject to min and max, defaultValue if
0: 		it is not set or set to a non-integer value.
0: 	*/
0: 	public static int getSystemInt(String key, int min, int max, int defaultValue) {
0: 		return PropertyUtil.handleInt(PropertyUtil.getSystemProperty(key), min, max, defaultValue);
0: 	}
0: 
0: 	/**
0: 		Get a service wide property as a int.
0: 
0: 		@return value of the property if set subject to min and max, defaultValue if
0: 		it is not set or set to a non-integer value.
0: 
0: 		@exception StandardException Standard Cloudscape error handling. 
0: 
0: 	*/
0: 	public static int getServiceInt(PersistentSet set, String key, int min, int max, int defaultValue)
0: 		throws StandardException {
0: 		//return PropertyUtil.intPropertyValue(key, PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
0: 		return PropertyUtil.handleInt(PropertyUtil.getServiceProperty(set, key), min, max, defaultValue);
0: 	}
0: 
0: 	/**
0: 		Get a service wide property as a int. The passed in Properties
0: 		set overrides any system, applcation or per-database properties.
0: 
0: 		@return value of the property if set subject to min and max, defaultValue if
0: 		it is not set or set to a non-integer value.
0: 
0: 		@exception StandardException Standard Cloudscape error handling. 
0: 
0: 	*/
0: 	public static int getServiceInt(PersistentSet set, Properties props, String key, int min, int max, int defaultValue)
0: 		throws StandardException {
0: 
0: 		String value = null;
0: 
0: 		if (props != null)
0: 			value = props.getProperty(key);
0: 
0: 		if (value == null)
0: 			value = PropertyUtil.getServiceProperty(set, key);
0: 
0: 		return PropertyUtil.handleInt(value, min, max, defaultValue);
0: 	}
0: 
0: 	/**
0: 		Get a system wide property as a int.
0: 
0: 		@return value of the property if, defaultValue if
0: 		it is not set or set to a non-integer value.
0: 	*/
0: 	public static int getSystemInt(String key, int defaultValue) {
0: 		return PropertyUtil.getSystemInt(key, 0, Integer.MAX_VALUE, defaultValue);
0: 	}
0: 
0: 	/**
0: 		Parse an string as an int based property value.
0: 	*/
0: 	public static int handleInt(String value, int min, int max, int defaultValue) {
0: 
0: 		if (value == null)
0: 			return defaultValue;
0: 
0: 		try {
0: 			int intValue = Integer.parseInt(value);
0: 			if ((intValue >= min) && (intValue <= max))
0: 				return intValue;
0: 		}
0: 		catch (NumberFormatException nfe)
0: 		{
0: 			// just leave the default.
0: 		}
0: 		return defaultValue;
0: 	}
0: 
0: 	/**
0: 	  Parse and validate and return a boolean property value. If the value is invalid
0: 	  raise an exception.
0: 
0: 	  <P>
0: 	  The following are valid property values.
0: 	  <UL>
0: 	  <LI> null - returns defaultValue
0: 	  <LI> "true" - returns true (in any case without the quotes)
0: 	  <LI> "false" - return true (in any case without the quotes)
0: 	  </UL>
0: 	  @exception StandardException Oops
0: 	  */
0: 	public static boolean booleanProperty(String p, Serializable v, boolean defaultValue)
0: 		 throws StandardException
0: 	{
0: 		if (v==null)
0: 			return defaultValue;
0: 
0: 		String vS = ((String) v).trim();
0: 		if (StringUtil.SQLToLowerCase(vS).equals("true"))
0: 			return true;
0: 		if (StringUtil.SQLToLowerCase(vS).equals("false"))
0: 			return false;
0: 
0: 		throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vS);
0: 	}
0: 
0: 	/**
0: 	  Parse, validate and return an integer property value. If the value is invalid
0: 	  raise an exception. If the value passed in is null return a default value.
0: 
0: 	  @exception StandardException Oops
0: 	  */
0: 	public static int intPropertyValue(String p, Serializable v,
0: 									   int minValue, int maxValue, int defaultValue)
0: 		 throws StandardException
0: 	{
0: 		if (v==null)
0: 			return defaultValue;
0: 
0: 		String vs = ((String)v).trim();
0: 		try {
0: 			int result = Integer.parseInt(vs);
0: 			if (result < minValue || result > maxValue)
0: 				throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
0: 			return result;
0: 		}
0: 		catch (NumberFormatException nfe) {
0: 			throw StandardException.newException(SQLState.PROPERTY_INVALID_VALUE, p,vs);
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Return true iff the key is the name of a database property that is 
0: 	  stored in services.properties.
0: 	  */ 
0: 	public static boolean isServiceProperty(String key)
0: 	{
0: 		for (int i = 0; i < PropertyUtil.servicePropertyList.length; i++) 
0: 			if (key.equals(PropertyUtil.servicePropertyList[i])) return true;
0: 		return false;
0: 	}
0: }
0: 
============================================================================