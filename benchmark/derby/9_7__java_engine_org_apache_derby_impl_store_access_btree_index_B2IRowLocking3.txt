1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking3
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
33:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:040d5c5: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTree;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: import org.apache.derby.impl.store.access.btree.ControlRow;
1:eac0369: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1:eac0369: import org.apache.derby.impl.store.access.btree.OpenBTree;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
1:eac0369: import org.apache.derby.impl.store.access.btree.WaitError;
1:040d5c5: import org.apache.derby.impl.store.access.heap.HeapController;
1:eac0369: 
6:eac0369: /**
1:eac0369: 
1:d7e478a: Implements the jdbc serializable isolation level using row locks.
1:d7e478a: <p>
1:d7e478a: Holds read and write locks until end of transaction.
1:d7e478a: Obtains previous key locks to protect from phantom reads.
1:eac0369: 
1:d7e478a: **/
1:eac0369: class B2IRowLocking3 implements BTreeLockingPolicy
17:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected fields of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The container id of the base container for this index.  Used to build
1:eac0369:      * record handles to make lock calls on.
6:eac0369:      **/
1:eac0369:     protected ConglomerateController        base_cc;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The OpenBtree to use if we have to lock anything in the btree vs.
1:eac0369:      * base row locking.
1:eac0369:      **/
1:eac0369:     protected OpenBTree                     open_btree;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The transaction to associate lock requests with.
1:eac0369:      **/
1:eac0369:     private Transaction                     rawtran;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     B2IRowLocking3(
1:eac0369:     Transaction             rawtran,
1:eac0369:     int                     lock_level,
1:eac0369:     LockingPolicy           locking_policy,
1:eac0369:     ConglomerateController  base_cc,
1:eac0369:     OpenBTree               open_btree)
1:eac0369:     {
1:eac0369:         this.rawtran             = rawtran;
1:eac0369:         this.base_cc             = base_cc;
1:eac0369:         this.open_btree          = open_btree;
17:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock key previous to first key in btree.
4:eac0369:      * <p>
1:eac0369:      * In the previous key locking protocol repeatable read and phantom 
1:eac0369:      * protection is guaranteed by locking a range of keys in the btree.
1:eac0369:      * The range is defined by the key previous to the first key you look
1:eac0369:      * at and all subsequent keys you look at.  The first key in the index
1:eac0369:      * is a special case, as there are no keys previous to it.  In that
1:eac0369:      * case a special key is declared the "previous key" to the first key
1:eac0369:      * in the btree and is locked instead.
1:eac0369:      * <p>
1:eac0369:      * In this implementation that first key is defined to be in the base
1:eac0369:      * container, page ContainerHandle.FIRST_PAGE_NUMBER, record id 
1:eac0369:      * PREVIOUS_KEY_HANDLE.
1:eac0369:      * <p>
1:eac0369:      * Note that the previous key is the same for all indexes on a given
1:eac0369:      * conglomerate.  It seemed better for all locks on a base table to have
1:eac0369:      * the same containerid, rather than having some locks generated from 
1:eac0369:      * a btree have a containerid from base table and some having a containerid
1:eac0369:      * from the btree.  If this turns out to be a problem we could either
1:eac0369:      * have 2 different containerid's, be more creative with the record id, or
1:eac0369:      * even add more to the lock key.
6:eac0369:      *
1:eac0369:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:eac0369:      *                          routine has to wait on the lock.
1:965be70:      * @param lock_operation    Whether to lock exclusive or share.
1:eac0369:      * @param lock_duration     For what duration should the lock be held,
1:eac0369:      *                          if INSTANT_DURATION, then the routine will
1:eac0369:      *                          guarantee that lock was acquired while holding
1:eac0369:      *                          the latch, but then immediately release the
1:eac0369:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:eac0369:      *                          then the lock be held when routine returns
1:eac0369:      *                          successfully.
1:eac0369:      *
3:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     private boolean lockPreviousToFirstKey(
2:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     LeafControlRow          aux_leaf,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
4:eac0369: 		throws StandardException
1:eac0369:     {
2:eac0369:         // This is first row in table, lock the special key that 
2:eac0369:         // represents the key previous to the first key of the table.
1:eac0369: 
3:eac0369:         // First try to get the lock NOWAIT, while latch is held.
2:eac0369:         boolean ret_status = 
1:eac0369:             base_cc.lockRow(
1:eac0369:                 BTree.ROOTPAGEID, 
1:eac0369:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
1:eac0369:                 lock_operation,
1:eac0369:                 false /* NOWAIT */, 
1:eac0369:                 lock_duration);
1:eac0369: 
2:eac0369:         if (!ret_status)
1:eac0369:         {
3:eac0369:             current_leaf.release();
3:eac0369:             current_leaf = null;
1:eac0369: 
1:eac0369:             if (aux_leaf != null)
1:eac0369:             {
1:eac0369:                 aux_leaf.release();
1:eac0369:                 aux_leaf = null;
1:eac0369:             }
1:eac0369: 
1:eac0369:             // Couldn't get the lock NOWAIT, release latch and wait for lock.
1:eac0369:             base_cc.lockRow(
1:eac0369:                 BTree.ROOTPAGEID, 
1:eac0369:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
1:eac0369:                 lock_operation,
1:eac0369:                 true /* WAIT */, 
1:eac0369:                 lock_duration);
1:eac0369:         }
1:eac0369: 
2:eac0369:         return(ret_status);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:5faf131:     /**
1:eac0369:      * Lock a btree row (row is at given slot in page).
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot in the page.  Meant to be used if caller 
1:eac0369:      * only has the slot on the page to be locked, and has not read the row
1:eac0369:      * yet.  This routine fetches the row location field from the page, and then
1:eac0369:      * locks that rowlocation in the base container.
1:eac0369:      * <p>
1:eac0369:      * Lock a btree row, enforcing the standard lock/latch protocol.  
1:eac0369:      * On return the row is locked.  Return status indicates if the lock
1:eac0369:      * was waited for, which will mean a latch was dropped while waiting.
1:eac0369:      * In general a false status means that the caller will either have 
1:eac0369:      * to research the tree unless some protocol has been implemented that
1:eac0369:      * insures that the row will not have moved while the latch was dropped.
1:eac0369:      * <p>
1:eac0369:      * This routine request a row lock NOWAIT on the in-memory row 
1:eac0369:      * "current_row.".  If the lock is granted the routine will return true.
1:eac0369:      * If the lock cannot be granted NOWAIT, then the routine will release
1:eac0369:      * the latch on "current_leaf" and "aux_leaf" (if aux_leaf is non-null),
1:eac0369:      * and then it will request a WAIT lock on the row.  
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param current_leaf      Latched current leaf where "current" key is.
1:eac0369:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:eac0369:      *                          routine has to wait on the lock.
1:eac0369:      * @param current_slot      Slot of row to lock.
1:eac0369:      * @param lock_fetch_desc   Descriptor for fetching just the RowLocation,
1:eac0369:      *                          used for locking.
1:86e051f:      * @param position          The position to lock if the lock is requested
1:86e051f:      *                          while performing a scan, null otherwise.
1:965be70:      * @param lock_operation    Whether lock is for key prev to insert or not.
1:eac0369:      * @param lock_duration     For what duration should the lock be held,
1:eac0369:      *                          if INSTANT_DURATION, then the routine will
1:eac0369:      *                          guarantee that lock was acquired while holding
1:eac0369:      *                          the latch, but then immediately release the
1:eac0369:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:eac0369:      *                          then the lock be held when routine returns
1:eac0369:      *                          successfully.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     private boolean lockRowOnPage(
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     LeafControlRow          aux_leaf,
2:eac0369:     int                     current_slot,
1:86e051f:     BTreeRowPosition        position,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
1:eac0369: 		throws StandardException
1:eac0369:     {
4:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(current_leaf != null);
1:eac0369: 
1:eac0369:             if (current_slot <= 0 || 
1:eac0369:                 current_slot >= current_leaf.getPage().recordCount())
1:eac0369:             {
2:eac0369:                 SanityManager.THROWASSERT(
1:eac0369:                     "current_slot = " + current_slot +
1:eac0369:                     "; current_leaf.getPage().recordCount() = " +
1:eac0369:                         current_leaf.getPage().recordCount());
1:eac0369:             }
1:eac0369: 
1:eac0369:             SanityManager.ASSERT(lock_template != null, "template is null");
1:eac0369: 
1:eac0369:             // For now the RowLocation is expected to be the object located in
1:eac0369:             // the last column of the lock_template, this may change if we
1:eac0369:             // ever support rows with RowLocations somewhere else.
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 lock_row_loc == lock_template[lock_template.length - 1], 
1:eac0369:                 "row_loc is not the object in last column of lock_template.");
1:86e051f: 
1:86e051f:             if (position != null) {
1:86e051f:                 SanityManager.ASSERT(current_leaf == position.current_leaf);
1:86e051f:                 SanityManager.ASSERT(current_slot == position.current_slot);
1:86e051f:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Fetch the row location to lock.
1:eac0369:         RecordHandle rec_handle = 
1:eac0369:             current_leaf.getPage().fetchFromSlot(
1:eac0369:                 (RecordHandle) null, current_slot, 
1:eac0369:                 lock_template, lock_fetch_desc, true);
1:eac0369: 
1:eac0369:         // First try to get the lock NOWAIT, while latch is held.
1:eac0369:         boolean ret_status =
1:eac0369:             base_cc.lockRow(
1:eac0369:                 lock_row_loc, 
1:eac0369:                 lock_operation,
1:eac0369:                 false /* NOWAIT */, lock_duration);
1:eac0369: 
1:eac0369:         if (!ret_status)
1:eac0369:         {
1:eac0369:             // Could not get the lock NOWAIT, release latch and wait for lock.
1:eac0369: 
1:86e051f:             if (position != null)
1:eac0369:             {
1:86e051f:                 // since we're releasing the lock in the middle of a scan,
1:86e051f:                 // save the current position of the scan before releasing the
1:86e051f:                 // latch
1:86e051f:                 position.saveMeAndReleasePage();
1:86e051f:             }
1:86e051f:             else if (current_leaf != null)
1:86e051f:             {
1:86e051f:                 // otherwise, just release the latch
1:eac0369:                 current_leaf.release();
1:eac0369:                 current_leaf = null;
1:eac0369:             }
1:eac0369:             if (aux_leaf != null)
1:eac0369:             {
1:eac0369:                 aux_leaf.release();
1:eac0369:                 aux_leaf = null;
1:eac0369:             }
1:eac0369: 
1:040d5c5:             if ((((HeapController)base_cc).getOpenConglomerate().getOpenMode() &
1:040d5c5:                     TransactionManager.OPENMODE_LOCK_ROW_NOWAIT) != 0) {
1:040d5c5:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:040d5c5:             }
1:040d5c5: 
1:eac0369:             base_cc.lockRow(
1:eac0369:                 lock_row_loc, 
1:eac0369:                 lock_operation,
1:eac0369:                 true /* WAIT */, lock_duration);
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_status);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:5faf131:      * move left in btree and lock previous key.
1:5faf131:      * <p>
1:5faf131:      * Enter routine with "current_leaf" latched.  This routine implements
1:5faf131:      * the left travel ladder locking protocol to search the leaf pages from
1:5faf131:      * right to left for the previous key to 1st key on current_leaf.
1:5faf131:      *
1:5faf131:      * There are 2 cases:
1:5faf131:      * 1) the previous page has keys, in which case the last key on that
1:5faf131:      *    page is locked, other wise search continues on the next page to
1:5faf131:      *    the left.
1:5faf131:      * 2) there are no keys on the current page and there is no page to the
1:5faf131:      *    left.  In this case the special "leftmost key" lock is gotten by
1:5faf131:      *    calling lockPreviousToFirstKey().
1:5faf131:      *
1:5faf131:      * Left laddar locking is used if all latches can be obtained immediately
1:5faf131:      * with NOWAIT.  This means that current latch is held while asking for
1:5faf131:      * left latch NOWAIT, and if left latch is granted then subsequently 
1:5faf131:      * current latch can be released.  If this protocol is followed and 
1:5faf131:      * all latches are granted then caller is guaranteed that the correct
1:5faf131:      * previous key has been locked and current_page latch remains.  The
1:5faf131:      * NOWAIT protocol is used to avoid latch/latch deadlocks.  The overall
1:5faf131:      * protocol is that one never holds a latch while waiting on another unless
1:5faf131:      * the direction of travel is down and to the right.
1:5faf131:      * <p>
1:5faf131:      * If along the search a latch has to be waited on then latches are
1:5faf131:      * released and a wait is performed, and "false" status is returned to
1:5faf131:      * caller.  In this case the routine can no longer be sure of it's current
1:5faf131:      * position and may have to retry the whole operation.
1:5faf131:      *
1:5faf131:      * @return true if previous key found without ever waiting on a latch, 
1:5faf131:      *         false if latch released in order to wait for other latch.
1:5faf131:      *
1:5faf131:      * @exception  StandardException  Standard exception policy.
1:5faf131:      **/
1:eac0369:     private boolean searchLeftAndLockPreviousKey(
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         boolean         latches_released = false;
1:eac0369:         LeafControlRow  prev_leaf;
1:eac0369:         LeafControlRow  prev_prev_leaf;
1:eac0369: 
2:eac0369:         try 
1:eac0369:         {
1:eac0369:             // Move left in tree, page latch will be requested nowait, 
1:eac0369:             // and WaitError will be thrown if latch not granted.
1:eac0369: 
1:eac0369:             prev_leaf = 
1:eac0369:                 (LeafControlRow) current_leaf.getLeftSibling(open_btree);
1:eac0369:         }
1:eac0369:         catch (WaitError e)
1:eac0369:         {
1:5faf131:             // initial latch request on leaf left of current could not be
1:5faf131:             // granted NOWAIT.
1:5faf131: 
1:eac0369:             long previous_pageno = current_leaf.getleftSiblingPageNumber();
1:eac0369: 
1:eac0369:             current_leaf.release();
1:eac0369:             current_leaf = null;
1:eac0369: 
1:5faf131:             // wait on the left leaf, which we could not be granted NOWAIT.
1:eac0369:             prev_leaf = (LeafControlRow) 
1:4a2b0d9:                 ControlRow.get(open_btree, previous_pageno);
1:eac0369: 
1:eac0369:             latches_released = true;
1:eac0369:         }
1:5faf131:        
1:eac0369:         while (true)
1:eac0369:         {
1:eac0369:             try
1:eac0369:             {
1:eac0369:                 // loop searching left in the btree until you either find 
1:eac0369:                 // a record to lock, or you reach the leftmost empty leaf.
1:eac0369: 
1:eac0369:                 if (prev_leaf.getPage().recordCount() > 1)
1:eac0369:                 {
1:5faf131: 
1:eac0369:                     // lock the last row on the page, which is the previous 
1:eac0369:                     // record to the first row on the next page.
1:eac0369:                     
1:eac0369:                     boolean ret_status = 
1:eac0369:                         lockRowOnPage(
1:eac0369:                             prev_leaf, 
1:eac0369:                             current_leaf, 
1:eac0369:                             prev_leaf.getPage().recordCount() - 1, 
1:86e051f:                             null,
1:eac0369:                             lock_fetch_desc,
1:eac0369:                             lock_template,
1:eac0369:                             lock_row_loc,
1:eac0369:                             lock_operation, 
1:eac0369:                             lock_duration);
1:eac0369: 
1:eac0369:                     if (!ret_status)
1:eac0369:                     {
1:5faf131:                         // needed to wait on a row lock, so both prev_leaf and
1:5faf131:                         // current_leaf latches have been released by 
1:5faf131:                         // lockRowOnPage()
1:eac0369:                         prev_leaf        = null;
1:eac0369:                         current_leaf     = null;
1:eac0369:                         latches_released = true;
1:eac0369:                     }
1:eac0369: 
1:eac0369:                     break;
1:eac0369:                 }
1:eac0369:                 else if (prev_leaf.isLeftmostLeaf())
1:eac0369:                 {
1:eac0369:                     // Table's first row, lock the key that represents the 
1:eac0369:                     // key previous to first key of the table.
1:eac0369:                     boolean ret_status = 
1:eac0369:                         lockPreviousToFirstKey(
1:eac0369:                             prev_leaf, current_leaf, 
1:eac0369:                             lock_operation, lock_duration);
1:eac0369: 
1:eac0369:                     if (!ret_status)
1:eac0369:                     {
1:5faf131:                         // needed to wait on a row lock, so both prev_leaf and
1:5faf131:                         // current_leaf latches have been released by 
1:5faf131:                         // lockPreviousToFirstKey()
1:5faf131: 
1:eac0369:                         prev_leaf        = null;
1:eac0369:                         current_leaf     = null;
1:eac0369:                         latches_released = true;
1:eac0369:                     }
1:eac0369: 
1:eac0369:                     break;
1:eac0369:                 }
1:eac0369: 
1:eac0369:                 // Move left in tree, page latch will be requested nowait, 
1:eac0369:                 // and WaitError will be thrown if latch not granted.
1:eac0369:                 // Release latches on pages between "current_leaf" and 
1:eac0369:                 // where the search leads, so that at most 3 latched pages
1:eac0369:                 // (current_leaf, prev_leaf, prev_prev_leaf) are held during 
1:5faf131:                 // the search.  Do left ladder locking as you walk left.
1:eac0369: 
1:eac0369:                 prev_prev_leaf = 
1:eac0369:                     (LeafControlRow) prev_leaf.getLeftSibling(open_btree);
1:eac0369:                 prev_leaf.release();
1:eac0369:                 prev_leaf = prev_prev_leaf;
1:eac0369:                 prev_prev_leaf = null;
1:5faf131: 
1:eac0369:             }
1:eac0369:             catch (WaitError e)
1:eac0369:             {
1:eac0369:                 long previous_pageno = prev_leaf.getleftSiblingPageNumber();
1:eac0369: 
1:eac0369:                 // error going left.  Release current page latch and 
1:eac0369:                 // original page latch continue the search.
1:5faf131:                 if (current_leaf != null)
1:5faf131:                 {
1:5faf131:                     // current_leaf may have already been released as part of
1:5faf131:                     // previous calls, need to check null status.
1:5faf131:                     current_leaf.release();
1:5faf131:                     current_leaf = null;
1:5faf131:                 }
1:5faf131: 
1:5faf131:                 // can only get here by above getLeftSibling() call so prev_leaf
1:5faf131:                 // should always be valid and latched at this point.  No null
1:5faf131:                 // check necessary.
1:eac0369:                 prev_leaf.release();
1:eac0369:                 prev_leaf = null;
1:eac0369: 
2:eac0369:                 // wait on the left page, which we could not get before. 
1:eac0369:                 prev_leaf = (LeafControlRow) 
1:4a2b0d9:                     ControlRow.get(open_btree, previous_pageno);
1:eac0369: 
1:eac0369:                 latches_released = true;
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (prev_leaf != null)
1:eac0369:             prev_leaf.release();
1:eac0369: 
1:eac0369:         return(!latches_released);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a row as part of doing the scan.
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot (or the previous row if slot is 0).
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
1:eac0369:      * @param open_btree        The open_btree to associate latches with - 
1:eac0369:      *                          used if routine has to scan backward.
1:965be70:      * @param pos               The position of the row to lock.
1:eac0369:      * @param request_row_lock  Whether to request the row lock, should
3:eac0369:      *                          only be requested once per page in the scan.
1:965be70:      * @param lock_fetch_desc   The fetch descriptor to use to fetch the
1:eac0369:      *                          row location for the lock request.
1:965be70:      * @param lock_template     A scratch area to use to read in rows.
1:eac0369:      * @param previous_key_lock Is this a previous key lock call?
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     protected boolean _lockScanRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 request_row_lock,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     boolean                 previous_key_lock,
2:eac0369:     boolean                 forUpdate,
2:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         boolean latch_released = false;
1:eac0369: 
1:eac0369:         if (request_row_lock)
1:eac0369:         {
1:eac0369:             // In order to implement a serialized scan based on previous
1:eac0369:             // key locking, this method acquires a row lock on
1:eac0369:             // the base table's row from the index row at [startpage/startslot].
1:eac0369:             // This will be the 'previous key'.
1:eac0369: 
1:eac0369:             if (pos.current_slot == 0)
1:eac0369:             {
1:eac0369:                 // this call will take care of searching left in the btree
1:eac0369:                 // to find the previous row to lock, 0 is the control row and
1:eac0369:                 // not a valid thing to lock as a previous key.
1:eac0369: 
1:eac0369:                 // it is ok to call the non-scan as this is just a special
1:eac0369:                 // case of a previous key lock call.  The only scan code that
1:eac0369:                 // will call this routine with slot == 0 will retry if this
1:eac0369:                 // routine returns that a latch was released.
1:eac0369: 
3:eac0369:                 latch_released = 
1:eac0369:                     !lockNonScanPreviousRow(
2:eac0369:                         pos.current_leaf,
1:eac0369:                         1 /* lock row previous to row at slot 1 */, 
1:eac0369:                         lock_fetch_desc,
1:eac0369:                         lock_template,
1:eac0369:                         lock_row_loc,
2:eac0369:                         open_btree, 
1:eac0369:                         lock_operation,
1:eac0369:                         TransactionManager.LOCK_COMMIT_DURATION);
1:eac0369: 
2:eac0369:                 // special test to see if latch release code works
1:eac0369:                 if (SanityManager.DEBUG)
1:eac0369:                 {
1:eac0369:                     latch_released = 
2:eac0369:                         OpenBTree.test_errors(
1:eac0369:                             open_btree,
1:86e051f:                             "B2iRowLocking3_1_lockScanRow",
1:86e051f:                             null, // Don't save position since the operation
1:86e051f:                                   // will be retried if the latch was released.
1:86e051f:                                   // See also comment above call to
1:86e051f:                                   // lockNonScanPreviousRow().
2:eac0369:                             this, pos.current_leaf, latch_released);
1:eac0369:                 }
1:eac0369:             }
3:eac0369:             else
1:eac0369:             {
1:eac0369:                 // Just lock the row at "slot"
1:eac0369: 
1:eac0369:                 latch_released = 
1:eac0369:                     !lockRowOnPage(
1:eac0369:                         pos.current_leaf, 
1:eac0369:                         (LeafControlRow) null /* no other latch currently */,
1:eac0369:                         pos.current_slot, 
1:86e051f:                         pos,
1:eac0369:                         lock_fetch_desc,
1:eac0369:                         lock_template,
1:eac0369:                         lock_row_loc,
1:eac0369:                         lock_operation,
1:eac0369:                         TransactionManager.LOCK_COMMIT_DURATION);
1:eac0369: 
1:eac0369:                 // special test to see if latch release code works
1:eac0369:                 if (SanityManager.DEBUG)
1:eac0369:                 {
1:eac0369:                     latch_released = 
1:eac0369:                         OpenBTree.test_errors(
1:eac0369:                             open_btree,
1:86e051f:                             "B2iRowLocking3_2_lockScanRow", pos,
1:eac0369:                             this, pos.current_leaf, latch_released);
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(!latch_released);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockScan*() locking methods of BTree:
1:86e051f:      *     lockScanRow              - lock row
1:eac0369:      *     unlockScanRecordAfterRead- unlock the scan record
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a btree row to determine if it is a committed deleted row.
1:eac0369:      * <p>
1:eac0369:      * @see BTreeLockingPolicy#lockScanCommittedDeletedRow
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockScanCommittedDeletedRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     LeafControlRow          leaf,
1:eac0369:     DataValueDescriptor[]   template,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     int                     slot_no)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(leaf != null);
1:eac0369: 
1:eac0369:             if (slot_no <= 0 || slot_no >= leaf.getPage().recordCount())
1:eac0369:             {
1:eac0369:                 SanityManager.THROWASSERT(
1:eac0369:                     "slot_no = " + slot_no +
1:eac0369:                     "; leaf.getPage().recordCount() = " +
1:eac0369:                         leaf.getPage().recordCount());
1:eac0369:             }
1:eac0369: 
1:eac0369:             SanityManager.ASSERT(template != null, "template is null");
1:eac0369:         }
1:eac0369: 
1:eac0369:         RowLocation row_loc = (RowLocation) 
1:eac0369:             template[((B2I) open_btree.getConglomerate()).rowLocationColumn];
1:eac0369: 
1:eac0369:         // Fetch the row location to lock.
1:eac0369:         leaf.getPage().fetchFromSlot(
1:eac0369:             (RecordHandle) null, slot_no, template, lock_fetch_desc, true);
1:eac0369: 
1:eac0369:         // Request the lock NOWAIT, return status
2:eac0369:         return(
1:eac0369:             base_cc.lockRow(row_loc, 
1:eac0369:                 ConglomerateController.LOCK_UPD,
1:eac0369:                 false /* NOWAIT */, 
1:eac0369:                 TransactionManager.LOCK_COMMIT_DURATION));
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a row as part of doing the scan.
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot (or the previous row if slot is 0).
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
1:eac0369:      * @param open_btree        The open_btree to associate latches with - 
1:eac0369:      *                          used if routine has to scan backward.
1:965be70:      * @param pos               The position of the row to lock.
1:965be70:      * @param lock_template     A scratch area to use to read in rows.
1:eac0369:      * @param previous_key_lock Is this a previous key lock call?
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockScanRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     boolean                 previous_key_lock,
1:eac0369:     boolean                 forUpdate,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(
1:eac0369:             _lockScanRow(
1:eac0369:                 open_btree,
1:eac0369:                 pos,
1:eac0369:                 true,  // request the row lock (always true for iso 3 )
1:eac0369:                 lock_fetch_desc,
1:eac0369:                 lock_template,
1:eac0369:                 lock_row_loc,
1:eac0369:                 previous_key_lock,
1:eac0369:                 forUpdate,
1:eac0369:                 lock_operation));
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Release read lock on a row.
1:eac0369:      *
1:eac0369:      * For serializable, there is no work to do.
1:eac0369:      *
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public void unlockScanRecordAfterRead(
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 forUpdate)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:eac0369:      *
1:eac0369:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:eac0369:      *     lockNonScanRow           - lock the input row
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the row previous to the input row.
1:eac0369:      * <p>
1:5faf131:      * See BTreeLockingPolicy.lockNonScanPreviousRow
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockNonScanPreviousRow(
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     int                     current_slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         boolean          ret_status;
1:eac0369: 
1:eac0369:         if (current_slot > 1)
1:eac0369:         {
1:eac0369:             // Easy case, just lock the key previous to the current one.
1:eac0369:             
1:eac0369:             // Lock (current_slot - 1)
1:eac0369: 
1:eac0369:             ret_status = 
1:eac0369:                 lockRowOnPage(
1:eac0369:                     current_leaf, (LeafControlRow) null, 
1:eac0369:                     current_slot - 1,
1:86e051f:                     null,
1:eac0369:                     lock_fetch_desc,
1:eac0369:                     lock_template,
1:eac0369:                     lock_row_loc,
1:eac0369:                     lock_operation, lock_duration);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             // Should only be called while pointing at a valid location, 0 
1:eac0369:             // is not a valid key slot - it is the control row.
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.ASSERT(current_slot == 1);
1:eac0369: 
1:eac0369:             if (current_leaf.isLeftmostLeaf())
1:eac0369:             {
1:eac0369:                 // This is first row in table, lock the special key that 
1:eac0369:                 // represents the key previous to the first key of the table.
1:eac0369:                 ret_status = 
1:eac0369:                     lockPreviousToFirstKey(
1:eac0369:                         current_leaf, (LeafControlRow) null, 
1:eac0369:                         lock_operation, lock_duration);
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 // The previous key is on a previous page, search left 
1:eac0369:                 // through the pages to find the key to latch.
1:eac0369: 
1:8654374:                 // If we need to release the latches while searching left,
1:8654374:                 // a new key may have appeared in the range that we've already
1:8654374:                 // searched, or the tree may have been rearranged, so the
1:eac0369:                 // caller must research, get new locks if this routine 
1:eac0369:                 // releases latches.
1:eac0369:                 ret_status = this.searchLeftAndLockPreviousKey(
1:f6fea40:                     current_leaf,
1:eac0369:                     lock_fetch_desc, lock_template, lock_row_loc,
1:eac0369:                     open_btree, lock_operation, lock_duration);
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_status);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the in memory row.
1:eac0369:      * <p>
1:eac0369:      * See BTree.lockRow() for more info.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockNonScanRow(
6:eac0369:     BTree                   btree,
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     LeafControlRow          aux_leaf,
1:eac0369:     DataValueDescriptor[]   current_row,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
2:eac0369:             SanityManager.ASSERT(btree instanceof B2I);
1:eac0369:         }
1:eac0369:         B2I b2i = (B2I) btree;
1:eac0369: 
1:eac0369:         // First try to get the lock NOWAIT, while latch is held.
1:eac0369:         boolean ret_status = 
1:eac0369:             base_cc.lockRow(
1:eac0369:                 (RowLocation) current_row[b2i.rowLocationColumn], 
1:eac0369:                 lock_operation,
1:eac0369:                 false /* NOWAIT */, 
1:eac0369:                 TransactionManager.LOCK_COMMIT_DURATION);
1:eac0369: 
1:eac0369:         if (!ret_status)
1:eac0369:         {
1:eac0369:             // Could not get the lock NOWAIT, release latch and wait for lock.
1:eac0369: 
2:eac0369:             if (current_leaf != null)
1:eac0369:             {
1:eac0369:                 current_leaf.release();
1:eac0369:                 current_leaf = null;
1:eac0369:             }
1:eac0369:             if (aux_leaf != null)
1:eac0369:             {
1:eac0369:                 aux_leaf.release();
1:eac0369:                 aux_leaf = null;
1:eac0369:             }
1:eac0369: 
1:eac0369:             base_cc.lockRow(
1:eac0369:                 (RowLocation) current_row[b2i.rowLocationColumn], 
1:eac0369:                 lock_operation,
1:eac0369:                 true /* WAIT */, 
1:eac0369:                 TransactionManager.LOCK_COMMIT_DURATION);
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_status);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public boolean lockNonScanRowOnPage(
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     int                     current_slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(
1:eac0369:             lockRowOnPage(
1:eac0369:                 current_leaf,
1:eac0369:                 null,
1:eac0369:                 current_slot,
1:86e051f:                 null,
1:eac0369:                 lock_fetch_desc,
1:eac0369:                 lock_template,
1:eac0369:                 lock_row_loc,
1:eac0369:                 lock_operation,
1:eac0369:                 TransactionManager.LOCK_COMMIT_DURATION));
1:eac0369:     }
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:040d5c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.store.access.heap.HeapController;
/////////////////////////////////////////////////////////////////////////
1:             if ((((HeapController)base_cc).getOpenConglomerate().getOpenMode() &
1:                     TransactionManager.OPENMODE_LOCK_ROW_NOWAIT) != 0) {
1:                 throw StandardException.newException(SQLState.LOCK_TIMEOUT);
1:             }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6fea40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     current_leaf,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8654374
/////////////////////////////////////////////////////////////////////////
1:                 // If we need to release the latches while searching left,
1:                 // a new key may have appeared in the range that we've already
1:                 // searched, or the tree may have been rearranged, so the
commit:86e051f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param position          The position to lock if the lock is requested
1:      *                          while performing a scan, null otherwise.
/////////////////////////////////////////////////////////////////////////
1:     BTreeRowPosition        position,
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (position != null) {
1:                 SanityManager.ASSERT(current_leaf == position.current_leaf);
1:                 SanityManager.ASSERT(current_slot == position.current_slot);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (position != null)
1:                 // since we're releasing the lock in the middle of a scan,
1:                 // save the current position of the scan before releasing the
1:                 // latch
1:                 position.saveMeAndReleasePage();
1:             }
1:             else if (current_leaf != null)
1:             {
1:                 // otherwise, just release the latch
/////////////////////////////////////////////////////////////////////////
1:                             null,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                             "B2iRowLocking3_1_lockScanRow",
1:                             null, // Don't save position since the operation
1:                                   // will be retried if the latch was released.
1:                                   // See also comment above call to
1:                                   // lockNonScanPreviousRow().
/////////////////////////////////////////////////////////////////////////
1:                         pos,
/////////////////////////////////////////////////////////////////////////
1:                             "B2iRowLocking3_2_lockScanRow", pos,
/////////////////////////////////////////////////////////////////////////
1:      *     lockScanRow              - lock row
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     null,
/////////////////////////////////////////////////////////////////////////
1:                 null,
commit:bbcc923
/////////////////////////////////////////////////////////////////////////
0:     public void unlockScan(RecordHandle scan_lock_rh)
commit:47efb9b
/////////////////////////////////////////////////////////////////////////
0:             current_leaf.getPage().getProtectionRecordHandle();
/////////////////////////////////////////////////////////////////////////
0:             current_leaf.getPage().getProtectionRecordHandle();
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
0: 				SanityManager.THROWASSERT(se);
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5faf131
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * move left in btree and lock previous key.
1:      * <p>
1:      * Enter routine with "current_leaf" latched.  This routine implements
1:      * the left travel ladder locking protocol to search the leaf pages from
1:      * right to left for the previous key to 1st key on current_leaf.
1:      *
1:      * There are 2 cases:
1:      * 1) the previous page has keys, in which case the last key on that
1:      *    page is locked, other wise search continues on the next page to
1:      *    the left.
1:      * 2) there are no keys on the current page and there is no page to the
1:      *    left.  In this case the special "leftmost key" lock is gotten by
1:      *    calling lockPreviousToFirstKey().
1:      *
1:      * Left laddar locking is used if all latches can be obtained immediately
1:      * with NOWAIT.  This means that current latch is held while asking for
1:      * left latch NOWAIT, and if left latch is granted then subsequently 
1:      * current latch can be released.  If this protocol is followed and 
1:      * all latches are granted then caller is guaranteed that the correct
1:      * previous key has been locked and current_page latch remains.  The
1:      * NOWAIT protocol is used to avoid latch/latch deadlocks.  The overall
1:      * protocol is that one never holds a latch while waiting on another unless
1:      * the direction of travel is down and to the right.
1:      * <p>
1:      * If along the search a latch has to be waited on then latches are
1:      * released and a wait is performed, and "false" status is returned to
1:      * caller.  In this case the routine can no longer be sure of it's current
1:      * position and may have to retry the whole operation.
1:      *
1:      * @return true if previous key found without ever waiting on a latch, 
1:      *         false if latch released in order to wait for other latch.
1:      *
1:      * @exception  StandardException  Standard exception policy.
1:      **/
/////////////////////////////////////////////////////////////////////////
1:             // initial latch request on leaf left of current could not be
1:             // granted NOWAIT.
1: 
1:             // wait on the left leaf, which we could not be granted NOWAIT.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                         // needed to wait on a row lock, so both prev_leaf and
1:                         // current_leaf latches have been released by 
1:                         // lockRowOnPage()
/////////////////////////////////////////////////////////////////////////
1:                         // needed to wait on a row lock, so both prev_leaf and
1:                         // current_leaf latches have been released by 
1:                         // lockPreviousToFirstKey()
1: 
/////////////////////////////////////////////////////////////////////////
1:                 // the search.  Do left ladder locking as you walk left.
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (current_leaf != null)
1:                 {
1:                     // current_leaf may have already been released as part of
1:                     // previous calls, need to check null status.
1:                     current_leaf.release();
1:                     current_leaf = null;
1:                 }
1: 
1:                 // can only get here by above getLeftSibling() call so prev_leaf
1:                 // should always be valid and latched at this point.  No null
1:                 // check necessary.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * See BTreeLockingPolicy.lockNonScanPreviousRow
commit:d7e478a
/////////////////////////////////////////////////////////////////////////
1: Implements the jdbc serializable isolation level using row locks.
1: <p>
1: Holds read and write locks until end of transaction.
1: Obtains previous key locks to protect from phantom reads.
1: **/
commit:8758a25
/////////////////////////////////////////////////////////////////////////
commit:965be70
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_operation    Whether to lock exclusive or share.
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_operation    Whether lock is for key prev to insert or not.
/////////////////////////////////////////////////////////////////////////
1:      * @param pos               The position of the row to lock.
1:      * @param lock_fetch_desc   The fetch descriptor to use to fetch the
1:      * @param lock_template     A scratch area to use to read in rows.
/////////////////////////////////////////////////////////////////////////
1:      * @param pos               The position of the row to lock.
1:      * @param lock_template     A scratch area to use to read in rows.
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4a2b0d9
/////////////////////////////////////////////////////////////////////////
1:                 ControlRow.get(open_btree, previous_pageno);
/////////////////////////////////////////////////////////////////////////
1:                     ControlRow.get(open_btree, previous_pageno);
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking3
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: 
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.impl.store.access.btree.BTree;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: import org.apache.derby.impl.store.access.btree.ControlRow;
1: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1: import org.apache.derby.impl.store.access.btree.OpenBTree;
1: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
1: import org.apache.derby.impl.store.access.btree.WaitError;
1: 
1: /**
1: 
1: **/
1: 
1: class B2IRowLocking3 implements BTreeLockingPolicy
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /**************************************************************************
1:      * Private/Protected fields of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * The container id of the base container for this index.  Used to build
1:      * record handles to make lock calls on.
1:      **/
1:     protected ConglomerateController        base_cc;
1: 
1:     /**
1:      * The OpenBtree to use if we have to lock anything in the btree vs.
1:      * base row locking.
1:      **/
1:     protected OpenBTree                     open_btree;
1: 
1:     /**
0:      * The locking policy to use to get and release the scan locks.  We could
0:      * cache this somewhere better.
1:      **/
0:     private LockingPolicy                   scan_locking_policy;
1: 
1:     /**
1:      * The transaction to associate lock requests with.
1:      **/
1:     private Transaction                     rawtran;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     B2IRowLocking3(
1:     Transaction             rawtran,
1:     int                     lock_level,
1:     LockingPolicy           locking_policy,
1:     ConglomerateController  base_cc,
1:     OpenBTree               open_btree)
1:     {
1:         this.rawtran             = rawtran;
1:         this.base_cc             = base_cc;
1:         this.open_btree          = open_btree;
0:         this.scan_locking_policy = 
0:             rawtran.newLockingPolicy(
0:                 LockingPolicy.MODE_RECORD, 
0:                 TransactionController.ISOLATION_READ_COMMITTED, true);
1:     }
1: 
1:     /**************************************************************************
1:      * Private methods of This class:
1:      **************************************************************************
1:      */
1: 
0:     private boolean _lockScan(
0:     RecordHandle    rh,
0:     boolean         forUpdate,
0:     boolean         wait)
1: 		throws StandardException
1:     {
0:         boolean ret_val = true;
1: 
0:         // only get the scan lock if we are record locking.
1:         
0:         if (!forUpdate)
1:         {
0:             ret_val = 
0:                 scan_locking_policy.lockRecordForRead(
0:                     rawtran, open_btree.getContainerHandle(), 
0:                     rh, wait, false);
1:         }
1:         else
1:         {
0:             ret_val = 
0:                 scan_locking_policy.lockRecordForWrite(
0:                     rawtran, rh, false, wait);
1:         }
1: 
0:         return(ret_val);
1:     }
1: 
1:     /**
1:      * Lock key previous to first key in btree.
1:      * <p>
1:      * In the previous key locking protocol repeatable read and phantom 
1:      * protection is guaranteed by locking a range of keys in the btree.
1:      * The range is defined by the key previous to the first key you look
1:      * at and all subsequent keys you look at.  The first key in the index
1:      * is a special case, as there are no keys previous to it.  In that
1:      * case a special key is declared the "previous key" to the first key
1:      * in the btree and is locked instead.
1:      * <p>
1:      * In this implementation that first key is defined to be in the base
1:      * container, page ContainerHandle.FIRST_PAGE_NUMBER, record id 
1:      * PREVIOUS_KEY_HANDLE.
1:      * <p>
1:      * Note that the previous key is the same for all indexes on a given
1:      * conglomerate.  It seemed better for all locks on a base table to have
1:      * the same containerid, rather than having some locks generated from 
1:      * a btree have a containerid from base table and some having a containerid
1:      * from the btree.  If this turns out to be a problem we could either
1:      * have 2 different containerid's, be more creative with the record id, or
1:      * even add more to the lock key.
1:      *
0:      * @param open_btree        The open btree to associate this lock with.
1:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:      *                          routine has to wait on the lock.
0:      * @param forUpdate         Whether to lock exclusive or share.
1:      * @param lock_duration     For what duration should the lock be held,
1:      *                          if INSTANT_DURATION, then the routine will
1:      *                          guarantee that lock was acquired while holding
1:      *                          the latch, but then immediately release the
1:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:      *                          then the lock be held when routine returns
1:      *                          successfully.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     private boolean lockPreviousToFirstKey(
1:     LeafControlRow          current_leaf,
1:     LeafControlRow          aux_leaf,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException
1:     {
1:         // This is first row in table, lock the special key that 
1:         // represents the key previous to the first key of the table.
1: 
1:         // First try to get the lock NOWAIT, while latch is held.
1:         boolean ret_status = 
1:             base_cc.lockRow(
1:                 BTree.ROOTPAGEID, 
1:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
1:                 lock_operation,
1:                 false /* NOWAIT */, 
1:                 lock_duration);
1: 
1:         if (!ret_status)
1:         {
1:             current_leaf.release();
1:             current_leaf = null;
1: 
1:             if (aux_leaf != null)
1:             {
1:                 aux_leaf.release();
1:                 aux_leaf = null;
1:             }
1: 
1:             // Couldn't get the lock NOWAIT, release latch and wait for lock.
1:             base_cc.lockRow(
1:                 BTree.ROOTPAGEID, 
1:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
1:                 lock_operation,
1:                 true /* WAIT */, 
1:                 lock_duration);
1:         }
1: 
1:         return(ret_status);
1:     }
1: 
1: 
1:     /**
1:      * Lock a btree row (row is at given slot in page).
1:      * <p>
1:      * Lock the row at the given slot in the page.  Meant to be used if caller 
1:      * only has the slot on the page to be locked, and has not read the row
1:      * yet.  This routine fetches the row location field from the page, and then
1:      * locks that rowlocation in the base container.
1:      * <p>
1:      * Lock a btree row, enforcing the standard lock/latch protocol.  
1:      * On return the row is locked.  Return status indicates if the lock
1:      * was waited for, which will mean a latch was dropped while waiting.
1:      * In general a false status means that the caller will either have 
1:      * to research the tree unless some protocol has been implemented that
1:      * insures that the row will not have moved while the latch was dropped.
1:      * <p>
1:      * This routine request a row lock NOWAIT on the in-memory row 
1:      * "current_row.".  If the lock is granted the routine will return true.
1:      * If the lock cannot be granted NOWAIT, then the routine will release
1:      * the latch on "current_leaf" and "aux_leaf" (if aux_leaf is non-null),
1:      * and then it will request a WAIT lock on the row.  
1:      * <p>
1:      *
0:      * @param btree             The conglomerate we are locking.
1:      * @param current_leaf      Latched current leaf where "current" key is.
1:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:      *                          routine has to wait on the lock.
1:      * @param current_slot      Slot of row to lock.
1:      * @param lock_fetch_desc   Descriptor for fetching just the RowLocation,
1:      *                          used for locking.
0:      * @param check_changed_rowloc
0:      *                          whether to check for the changed rowloc or not.
0:      * @param forUpdate         Whether to wait for lock.
0:      * @param forUpdatePrevKey  Whether lock is for key prev to insert or not.
1:      * @param lock_duration     For what duration should the lock be held,
1:      *                          if INSTANT_DURATION, then the routine will
1:      *                          guarantee that lock was acquired while holding
1:      *                          the latch, but then immediately release the
1:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:      *                          then the lock be held when routine returns
1:      *                          successfully.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     private boolean lockRowOnPage(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     LeafControlRow          aux_leaf,
1:     int                     current_slot,
0:     boolean                 check_changed_rowloc,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(current_leaf != null);
1: 
1:             if (current_slot <= 0 || 
1:                 current_slot >= current_leaf.getPage().recordCount())
1:             {
1:                 SanityManager.THROWASSERT(
1:                     "current_slot = " + current_slot +
1:                     "; current_leaf.getPage().recordCount() = " +
1:                         current_leaf.getPage().recordCount());
1:             }
1: 
1: 
0:             if (!(btree instanceof B2I))
1:             {
1:                 SanityManager.THROWASSERT(
0:                     "btree not instance of B2I, it is " +
0:                     btree.getClass().getName());
1:             }
1: 
1:             SanityManager.ASSERT(lock_template != null, "template is null");
1: 
1:             // For now the RowLocation is expected to be the object located in
1:             // the last column of the lock_template, this may change if we
1:             // ever support rows with RowLocations somewhere else.
1:             SanityManager.ASSERT(
1:                 lock_row_loc == lock_template[lock_template.length - 1], 
1:                 "row_loc is not the object in last column of lock_template.");
1:         }
1: 
1:         // Fetch the row location to lock.
1:         RecordHandle rec_handle = 
1:             current_leaf.getPage().fetchFromSlot(
1:                 (RecordHandle) null, current_slot, 
1:                 lock_template, lock_fetch_desc, true);
1: 
1:         // First try to get the lock NOWAIT, while latch is held.
1:         boolean ret_status =
1:             base_cc.lockRow(
1:                 lock_row_loc, 
1:                 lock_operation,
1:                 false /* NOWAIT */, lock_duration);
1: 
1:         if (!ret_status)
1:         {
1:             // Could not get the lock NOWAIT, release latch and wait for lock.
1: 
1:             if (current_leaf != null)
1:             {
1:                 current_leaf.release();
1:                 current_leaf = null;
1:             }
1:             if (aux_leaf != null)
1:             {
1:                 aux_leaf.release();
1:                 aux_leaf = null;
1:             }
1: 
1:             base_cc.lockRow(
1:                 lock_row_loc, 
1:                 lock_operation,
1:                 true /* WAIT */, lock_duration);
1:         }
1: 
1:         return(ret_status);
1:     }
1: 
1:     private boolean searchLeftAndLockPreviousKey(
0:     B2I                     b2i,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     OpenBTree               open_btree,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException
1:     {
1:         boolean         latches_released = false;
1:         LeafControlRow  prev_leaf;
1:         LeafControlRow  prev_prev_leaf;
1: 
1:         try 
1:         {
1:             // Move left in tree, page latch will be requested nowait, 
1:             // and WaitError will be thrown if latch not granted.
1: 
1:             prev_leaf = 
1:                 (LeafControlRow) current_leaf.getLeftSibling(open_btree);
1: 
1:         }
1:         catch (WaitError e)
1:         {
1:             long previous_pageno = current_leaf.getleftSiblingPageNumber();
1: 
0:             // error going from mainpage to first left page.  Release 
0:             // current page latch and continue the search.
1:             current_leaf.release();
1:             current_leaf = null;
1: 
1:             // wait on the left page, which we could not get before. 
1:             prev_leaf = (LeafControlRow) 
0:                 ControlRow.Get(open_btree, previous_pageno);
1: 
1:             latches_released = true;
1:         }
1:        
1:         while (true)
1:         {
1:             try
1:             {
1:                 // loop searching left in the btree until you either find 
1:                 // a record to lock, or you reach the leftmost empty leaf.
1: 
1:                 if (prev_leaf.getPage().recordCount() > 1)
1:                 {
1:                     // lock the last row on the page, which is the previous 
1:                     // record to the first row on the next page.
1:                     
1:                     boolean ret_status = 
1:                         lockRowOnPage(
0:                             b2i,
1:                             prev_leaf, 
1:                             current_leaf, 
1:                             prev_leaf.getPage().recordCount() - 1, 
0:                             false, 
1:                             lock_fetch_desc,
1:                             lock_template,
1:                             lock_row_loc,
1:                             lock_operation, 
1:                             lock_duration);
1: 
1:                     if (!ret_status)
1:                     {
1:                         prev_leaf        = null;
1:                         current_leaf     = null;
1:                         latches_released = true;
1:                     }
1: 
1:                     break;
1:                 }
1:                 else if (prev_leaf.isLeftmostLeaf())
1:                 {
1:                     // Table's first row, lock the key that represents the 
1:                     // key previous to first key of the table.
1:                     boolean ret_status = 
1:                         lockPreviousToFirstKey(
1:                             prev_leaf, current_leaf, 
1:                             lock_operation, lock_duration);
1: 
1:                     if (!ret_status)
1:                     {
1:                         prev_leaf        = null;
1:                         current_leaf     = null;
1:                         latches_released = true;
1:                     }
1: 
1:                     break;
1:                 }
1: 
1:                 // Move left in tree, page latch will be requested nowait, 
1:                 // and WaitError will be thrown if latch not granted.
1:                 // Release latches on pages between "current_leaf" and 
1:                 // where the search leads, so that at most 3 latched pages
1:                 // (current_leaf, prev_leaf, prev_prev_leaf) are held during 
0:                 // the search.  Do left ladder locking as you walk left, 
0:                 // but be ready to release l
1: 
1:                 prev_prev_leaf = 
1:                     (LeafControlRow) prev_leaf.getLeftSibling(open_btree);
1:                 prev_leaf.release();
1:                 prev_leaf = prev_prev_leaf;
1:                 prev_prev_leaf = null;
1:             }
1:             catch (WaitError e)
1:             {
1:                 long previous_pageno = prev_leaf.getleftSiblingPageNumber();
1: 
1:                 // error going left.  Release current page latch and 
1:                 // original page latch continue the search.
1:                 current_leaf.release();
1:                 current_leaf = null;
1:                 prev_leaf.release();
1:                 prev_leaf = null;
1: 
1:                 // wait on the left page, which we could not get before. 
1:                 prev_leaf = (LeafControlRow) 
0:                     ControlRow.Get(open_btree, previous_pageno);
1: 
1:                 latches_released = true;
1:             }
1:         }
1:         if (prev_leaf != null)
1:             prev_leaf.release();
1: 
1:         return(!latches_released);
1: 
1:     }
1: 
1:     /**************************************************************************
1:      * Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Lock a row as part of doing the scan.
1:      * <p>
1:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
1:      * @param request_row_lock  Whether to request the row lock, should
1:      *                          only be requested once per page in the scan.
0:      * @param request_scan_lock Whether to request the page scan lock, should
1:      *                          only be requested once per page in the scan.
0:      * @param lock_fetchDescriptor The fetch descriptor to use to fetch the
1:      *                          row location for the lock request.
0:      * @param scratch_template  A scratch area to use to read in rows.
1:      * @param previous_key_lock Is this a previous key lock call?
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     protected boolean _lockScanRow(
1:     OpenBTree               open_btree,
1:     BTree                   btree,
1:     BTreeRowPosition        pos,
1:     boolean                 request_row_lock,
0:     boolean                 request_scan_lock,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     boolean                 previous_key_lock,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         boolean latch_released = false;
0:         B2I     b2i            = (B2I) btree;
1: 
1:         if (request_row_lock)
1:         {
1:             // In order to implement a serialized scan based on previous
1:             // key locking, this method acquires a row lock on
1:             // the base table's row from the index row at [startpage/startslot].
1:             // This will be the 'previous key'.
1: 
1:             if (pos.current_slot == 0)
1:             {
1:                 // this call will take care of searching left in the btree
1:                 // to find the previous row to lock, 0 is the control row and
1:                 // not a valid thing to lock as a previous key.
1: 
1:                 // it is ok to call the non-scan as this is just a special
1:                 // case of a previous key lock call.  The only scan code that
1:                 // will call this routine with slot == 0 will retry if this
1:                 // routine returns that a latch was released.
1: 
1:                 latch_released = 
1:                     !lockNonScanPreviousRow(
0:                         btree,
1:                         pos.current_leaf,
1:                         1 /* lock row previous to row at slot 1 */, 
1:                         lock_fetch_desc,
1:                         lock_template,
1:                         lock_row_loc,
1:                         open_btree, 
1:                         lock_operation,
1:                         TransactionManager.LOCK_COMMIT_DURATION);
1: 
1:                 // special test to see if latch release code works
1:                 if (SanityManager.DEBUG)
1:                 {
1:                     latch_released = 
1:                         OpenBTree.test_errors(
1:                             open_btree,
0:                             "B2iRowLocking3_1_lockScanRow",  false,
1:                             this, pos.current_leaf, latch_released);
1:                 }
1:             }
1:             else
1:             {
1:                 // Just lock the row at "slot"
1: 
1:                 latch_released = 
1:                     !lockRowOnPage(
0:                         btree,
1:                         pos.current_leaf, 
1:                         (LeafControlRow) null /* no other latch currently */,
1:                         pos.current_slot, 
0:                         true,
1:                         lock_fetch_desc,
1:                         lock_template,
1:                         lock_row_loc,
1:                         lock_operation,
1:                         TransactionManager.LOCK_COMMIT_DURATION);
1: 
1:                 // special test to see if latch release code works
1:                 if (SanityManager.DEBUG)
1:                 {
1:                     latch_released = 
1:                         OpenBTree.test_errors(
1:                             open_btree,
0:                             "B2iRowLocking3_2_lockScanRow", false,
1:                             this, pos.current_leaf, latch_released);
1:                 }
1:             }
1:         }
1: 
0:         if (request_scan_lock && !latch_released)
1:         {
0:             // Get the scan lock on the start page.
1: 
0:             // Get shared RECORD_ID_PROTECTION_HANDLE lock to make sure that
0:             // we wait for scans in other transactions to move off of this page
0:             // before we split.
1: 
1: 
1:             latch_released = 
0:                 !lockScan(
1:                     pos.current_leaf, 
0:                     (LeafControlRow) null, // no other latch currently
0:                     false,
0:                     ConglomerateController.LOCK_READ);// read scan lock position
1: 
1:             // special test to see if latch release code works
1:             if (SanityManager.DEBUG)
1:             {
0:                 /* RESOLVE - need to get a container here */
1:                 latch_released = 
1:                     OpenBTree.test_errors(
1:                         open_btree,
0:                         "B2iRowLocking3_3_lockScanRow", true, 
1:                         this, pos.current_leaf, latch_released);
1:             }
1:         }
1: 
1:         return(!latch_released);
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
1:      *     unlockScanRecordAfterRead- unlock the scan record
1:      **************************************************************************
1:      */
1: 
1:     /**
0:      * Lock a control row page for scan.
1:      * <p>
0:      * Scanners get shared lock on the page while positioned on a row within
0:      * the page, splitter/purgers/mergers get exclusive lock on the page.
1:      *
0:      * See BTree.lockScan() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public boolean lockScan(
1:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
0:         // The scan page lock is implemented as a row lock on the reserved
0:         // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
0:         RecordHandle scan_lock_rh = 
0:             current_leaf.getPage().makeRecordHandle(
0:                 RecordHandle.RECORD_ID_PROTECTION_HANDLE);
1: 
1:         // First try to get the lock NOWAIT, while latch is held.
1:         boolean ret_status = 
0:             _lockScan(scan_lock_rh, forUpdate, false /* NOWAIT */);
1: 
1:         if (!ret_status)
1:         {
1:             current_leaf.release();
1:             current_leaf = null;
1: 
0:             if (aux_control_row != null)
1:             {
0:                 aux_control_row.release();
0:                 aux_control_row = null;
1:             }
1: 
0:             // Could not get the lock NOWAIT, release latch and wait
0:             // for the lock.
0:             _lockScan(scan_lock_rh, forUpdate, true /* WAIT */);
1: 
0:             // once we get the lock, give it up as we need to get the lock
0:             // while we have the latch.  When the lock manager gives us the
0:             // ability to do instantaneous locks do that.  We just wait on the
0:             // lock to give the split a chance to finish before we interfere.
1: 
0:             if (!forUpdate)
1:             {
0:                 scan_locking_policy.unlockRecordAfterRead(
0:                     rawtran, open_btree.getContainerHandle(), 
0:                     scan_lock_rh, false, true);
1:             }
1:             else
1:             {
0:                 // RESOLVE - need instantaneous locks as there is no way 
0:                 // currently to release a write lock.  This lock will only
0:                 // be requested by split, and will be released by internal
0:                 // transaction.
1:             }
1:         }
1: 
1:         return(ret_status);
1:     }
1: 
1:     /**
0:      * Lock a control row page for reclaiming deleted rows.
1:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
1:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
1: 		throws StandardException
1:     {
0:         // The scan page lock is implemented as a row lock on the reserved
0:         // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
0:         RecordHandle scan_lock_rh = 
0:             current_leaf.getPage().makeRecordHandle(
0:                 RecordHandle.RECORD_ID_PROTECTION_HANDLE);
1: 
1:         // First try to get the lock NOWAIT, while latch is held.
1:         return(
0:             _lockScan(scan_lock_rh, true /* update */, false /* NOWAIT */));
1:     }
1: 
1:     /**
1:      * Lock a btree row to determine if it is a committed deleted row.
1:      * <p>
1:      * @see BTreeLockingPolicy#lockScanCommittedDeletedRow
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockScanCommittedDeletedRow(
1:     OpenBTree               open_btree,
1:     LeafControlRow          leaf,
1:     DataValueDescriptor[]   template,
1:     FetchDescriptor         lock_fetch_desc,
1:     int                     slot_no)
1: 		throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(leaf != null);
1: 
1:             if (slot_no <= 0 || slot_no >= leaf.getPage().recordCount())
1:             {
1:                 SanityManager.THROWASSERT(
1:                     "slot_no = " + slot_no +
1:                     "; leaf.getPage().recordCount() = " +
1:                         leaf.getPage().recordCount());
1:             }
1: 
1:             SanityManager.ASSERT(template != null, "template is null");
1:         }
1: 
1:         RowLocation row_loc = (RowLocation) 
1:             template[((B2I) open_btree.getConglomerate()).rowLocationColumn];
1: 
1:         // Fetch the row location to lock.
1:         leaf.getPage().fetchFromSlot(
1:             (RecordHandle) null, slot_no, template, lock_fetch_desc, true);
1: 
1:         // Request the lock NOWAIT, return status
1:         return(
1:             base_cc.lockRow(row_loc, 
1:                 ConglomerateController.LOCK_UPD,
1:                 false /* NOWAIT */, 
1:                 TransactionManager.LOCK_COMMIT_DURATION));
1:     }
1: 
1:     /**
1:      * Lock a row as part of doing the scan.
1:      * <p>
1:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
1:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
1:      * @param previous_key_lock Is this a previous key lock call?
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockScanRow(
1:     OpenBTree               open_btree,
1:     BTree                   btree,
1:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     boolean                 previous_key_lock,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(
1:             _lockScanRow(
1:                 open_btree,
0:                 btree,
1:                 pos,
1:                 true,  // request the row lock (always true for iso 3 )
0:                 request_scan_lock,
1:                 lock_fetch_desc,
1:                 lock_template,
1:                 lock_row_loc,
1:                 previous_key_lock,
1:                 forUpdate,
1:                 lock_operation));
1:     }
1: 
1:     /**
1:      * Release read lock on a row.
1:      *
1:      * For serializable, there is no work to do.
1:      *
0:      * @param row_qualified     Did the row qualify to be returned to caller.
1:      *
1:      **/
1:     public void unlockScanRecordAfterRead(
1:     BTreeRowPosition        pos,
1:     boolean                 forUpdate)
1: 		throws StandardException
1:     {
1:         return;
1:     }
1: 
1:     /**
0:      * Release the lock gotten by calling lockScan.  This call can only be
0:      * made to release read scan locks, write scan locks must be held until
0:      * end of transaction.
1:      * <p>
0:      * See BTree.unlockScan() for more info.
1:      *
1:      **/
0:     public void unlockScan(
0:     long            page_number)
1:     {
1:         // This is first row in table, lock the special key that 
1:         // represents the key previous to the first key of the table.
1:         try
1:         {
0:             RecordHandle scan_lock_rh = 
0:                 open_btree.makeRecordHandle(
0:                     page_number, RecordHandle.RECORD_ID_PROTECTION_HANDLE);
1: 
0:             scan_locking_policy.unlockRecordAfterRead(
0:                 rawtran, open_btree.getContainerHandle(), 
0:                 scan_lock_rh, false, true);
1:         }
0:         catch (StandardException se)
1:         {
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("error from make RecordHandle.");
1:         }
1: 
1:     }
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:      *
1:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:      *     lockNonScanRow           - lock the input row
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Lock the row previous to the input row.
1:      * <p>
0:      * See BTree.lockPreviousRow() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockNonScanPreviousRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     OpenBTree               open_btree,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException
1:     {
1:         boolean          ret_status;
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(btree instanceof B2I);
1:         }
1: 
1:         if (current_slot > 1)
1:         {
1:             // Easy case, just lock the key previous to the current one.
1:             
1:             // Lock (current_slot - 1)
1: 
1:             ret_status = 
1:                 lockRowOnPage(
0:                     btree,
1:                     current_leaf, (LeafControlRow) null, 
1:                     current_slot - 1,
0:                     false,
1:                     lock_fetch_desc,
1:                     lock_template,
1:                     lock_row_loc,
1:                     lock_operation, lock_duration);
1:         }
1:         else
1:         {
1:             // Should only be called while pointing at a valid location, 0 
1:             // is not a valid key slot - it is the control row.
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.ASSERT(current_slot == 1);
1: 
1:             if (current_leaf.isLeftmostLeaf())
1:             {
1:                 // This is first row in table, lock the special key that 
1:                 // represents the key previous to the first key of the table.
1:                 ret_status = 
1:                     lockPreviousToFirstKey(
1:                         current_leaf, (LeafControlRow) null, 
1:                         lock_operation, lock_duration);
1:             }
1:             else
1:             {
1:                 // The previous key is on a previous page, search left 
1:                 // through the pages to find the key to latch.
1: 
0:                 // RESOLVE RLL (mikem) - do I need to do the 
0:                 // RECORD_ID_PROTECTION_HANDLE lock.
0:                 // First guarantee that record id's will not move off this
0:                 // current page while searching for previous key, by getting
0:                 // the RECORD_ID_PROTECTION_HANDLE lock on the current page.
0:                 // Since we have a latch on the cur
1: 
0:                 // RESOLVE RLL (mikem) - NO RECORD_ID PROTECTION IN EFFECT.
1:                 // caller must research, get new locks if this routine 
1:                 // releases latches.
1:                 ret_status = this.searchLeftAndLockPreviousKey(
0:                     (B2I) btree,
0:                     current_leaf, current_slot,
1:                     lock_fetch_desc, lock_template, lock_row_loc,
1:                     open_btree, lock_operation, lock_duration);
1:             }
1:         }
1: 
1:         return(ret_status);
1:     }
1: 
1:     /**
1:      * Lock the in memory row.
1:      * <p>
1:      * See BTree.lockRow() for more info.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockNonScanRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     LeafControlRow          aux_leaf,
1:     DataValueDescriptor[]   current_row,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(btree instanceof B2I);
1:         }
1:         B2I b2i = (B2I) btree;
1: 
1:         // First try to get the lock NOWAIT, while latch is held.
1:         boolean ret_status = 
1:             base_cc.lockRow(
1:                 (RowLocation) current_row[b2i.rowLocationColumn], 
1:                 lock_operation,
1:                 false /* NOWAIT */, 
1:                 TransactionManager.LOCK_COMMIT_DURATION);
1: 
1:         if (!ret_status)
1:         {
1:             // Could not get the lock NOWAIT, release latch and wait for lock.
1: 
1:             if (current_leaf != null)
1:             {
1:                 current_leaf.release();
1:                 current_leaf = null;
1:             }
1:             if (aux_leaf != null)
1:             {
1:                 aux_leaf.release();
1:                 aux_leaf = null;
1:             }
1: 
1:             base_cc.lockRow(
1:                 (RowLocation) current_row[b2i.rowLocationColumn], 
1:                 lock_operation,
1:                 true /* WAIT */, 
1:                 TransactionManager.LOCK_COMMIT_DURATION);
1:         }
1: 
1:         return(ret_status);
1:     }
1: 
1:     public boolean lockNonScanRowOnPage(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
1:         return(
1:             lockRowOnPage(
0:                 btree,
1:                 current_leaf,
1:                 null,
1:                 current_slot,
0:                 false,
1:                 lock_fetch_desc,
1:                 lock_template,
1:                 lock_row_loc,
1:                 lock_operation,
1:                 TransactionManager.LOCK_COMMIT_DURATION));
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: 
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.impl.store.access.btree.BTree;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
0: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.WaitError;
0: 
0: /**
0: 
0: **/
0: 
0: class B2IRowLocking3 implements BTreeLockingPolicy
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**************************************************************************
0:      * Private/Protected fields of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * The container id of the base container for this index.  Used to build
0:      * record handles to make lock calls on.
0:      **/
0:     protected ConglomerateController        base_cc;
0: 
0:     /**
0:      * The OpenBtree to use if we have to lock anything in the btree vs.
0:      * base row locking.
0:      **/
0:     protected OpenBTree                     open_btree;
0: 
0:     /**
0:      * The locking policy to use to get and release the scan locks.  We could
0:      * cache this somewhere better.
0:      **/
0:     private LockingPolicy                   scan_locking_policy;
0: 
0:     /**
0:      * The transaction to associate lock requests with.
0:      **/
0:     private Transaction                     rawtran;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     B2IRowLocking3(
0:     Transaction             rawtran,
0:     int                     lock_level,
0:     LockingPolicy           locking_policy,
0:     ConglomerateController  base_cc,
0:     OpenBTree               open_btree)
0:     {
0:         this.rawtran             = rawtran;
0:         this.base_cc             = base_cc;
0:         this.open_btree          = open_btree;
0:         this.scan_locking_policy = 
0:             rawtran.newLockingPolicy(
0:                 LockingPolicy.MODE_RECORD, 
0:                 TransactionController.ISOLATION_READ_COMMITTED, true);
0:     }
0: 
0:     /**************************************************************************
0:      * Private methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     private boolean _lockScan(
0:     RecordHandle    rh,
0:     boolean         forUpdate,
0:     boolean         wait)
0: 		throws StandardException
0:     {
0:         boolean ret_val = true;
0: 
0:         // only get the scan lock if we are record locking.
0:         
0:         if (!forUpdate)
0:         {
0:             ret_val = 
0:                 scan_locking_policy.lockRecordForRead(
0:                     rawtran, open_btree.getContainerHandle(), 
0:                     rh, wait, false);
0:         }
0:         else
0:         {
0:             ret_val = 
0:                 scan_locking_policy.lockRecordForWrite(
0:                     rawtran, rh, false, wait);
0:         }
0: 
0:         return(ret_val);
0:     }
0: 
0:     /**
0:      * Lock key previous to first key in btree.
0:      * <p>
0:      * In the previous key locking protocol repeatable read and phantom 
0:      * protection is guaranteed by locking a range of keys in the btree.
0:      * The range is defined by the key previous to the first key you look
0:      * at and all subsequent keys you look at.  The first key in the index
0:      * is a special case, as there are no keys previous to it.  In that
0:      * case a special key is declared the "previous key" to the first key
0:      * in the btree and is locked instead.
0:      * <p>
0:      * In this implementation that first key is defined to be in the base
0:      * container, page ContainerHandle.FIRST_PAGE_NUMBER, record id 
0:      * PREVIOUS_KEY_HANDLE.
0:      * <p>
0:      * Note that the previous key is the same for all indexes on a given
0:      * conglomerate.  It seemed better for all locks on a base table to have
0:      * the same containerid, rather than having some locks generated from 
0:      * a btree have a containerid from base table and some having a containerid
0:      * from the btree.  If this turns out to be a problem we could either
0:      * have 2 different containerid's, be more creative with the record id, or
0:      * even add more to the lock key.
0:      *
0:      * @param open_btree        The open btree to associate this lock with.
0:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
0:      *                          routine has to wait on the lock.
0:      * @param forUpdate         Whether to lock exclusive or share.
0:      * @param lock_duration     For what duration should the lock be held,
0:      *                          if INSTANT_DURATION, then the routine will
0:      *                          guarantee that lock was acquired while holding
0:      *                          the latch, but then immediately release the
0:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
0:      *                          then the lock be held when routine returns
0:      *                          successfully.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     private boolean lockPreviousToFirstKey(
0:     LeafControlRow          current_leaf,
0:     LeafControlRow          aux_leaf,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException
0:     {
0:         // This is first row in table, lock the special key that 
0:         // represents the key previous to the first key of the table.
0: 
0:         // First try to get the lock NOWAIT, while latch is held.
0:         boolean ret_status = 
0:             base_cc.lockRow(
0:                 BTree.ROOTPAGEID, 
0:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
0:                 lock_operation,
0:                 false /* NOWAIT */, 
0:                 lock_duration);
0: 
0:         if (!ret_status)
0:         {
0:             current_leaf.release();
0:             current_leaf = null;
0: 
0:             if (aux_leaf != null)
0:             {
0:                 aux_leaf.release();
0:                 aux_leaf = null;
0:             }
0: 
0:             // Couldn't get the lock NOWAIT, release latch and wait for lock.
0:             base_cc.lockRow(
0:                 BTree.ROOTPAGEID, 
0:                 RecordHandle.PREVIOUS_KEY_HANDLE, 
0:                 lock_operation,
0:                 true /* WAIT */, 
0:                 lock_duration);
0:         }
0: 
0:         return(ret_status);
0:     }
0: 
0: 
0:     /**
0:      * Lock a btree row (row is at given slot in page).
0:      * <p>
0:      * Lock the row at the given slot in the page.  Meant to be used if caller 
0:      * only has the slot on the page to be locked, and has not read the row
0:      * yet.  This routine fetches the row location field from the page, and then
0:      * locks that rowlocation in the base container.
0:      * <p>
0:      * Lock a btree row, enforcing the standard lock/latch protocol.  
0:      * On return the row is locked.  Return status indicates if the lock
0:      * was waited for, which will mean a latch was dropped while waiting.
0:      * In general a false status means that the caller will either have 
0:      * to research the tree unless some protocol has been implemented that
0:      * insures that the row will not have moved while the latch was dropped.
0:      * <p>
0:      * This routine request a row lock NOWAIT on the in-memory row 
0:      * "current_row.".  If the lock is granted the routine will return true.
0:      * If the lock cannot be granted NOWAIT, then the routine will release
0:      * the latch on "current_leaf" and "aux_leaf" (if aux_leaf is non-null),
0:      * and then it will request a WAIT lock on the row.  
0:      * <p>
0:      *
0:      * @param btree             The conglomerate we are locking.
0:      * @param current_leaf      Latched current leaf where "current" key is.
0:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
0:      *                          routine has to wait on the lock.
0:      * @param current_slot      Slot of row to lock.
0:      * @param lock_fetch_desc   Descriptor for fetching just the RowLocation,
0:      *                          used for locking.
0:      * @param check_changed_rowloc
0:      *                          whether to check for the changed rowloc or not.
0:      * @param forUpdate         Whether to wait for lock.
0:      * @param forUpdatePrevKey  Whether lock is for key prev to insert or not.
0:      * @param lock_duration     For what duration should the lock be held,
0:      *                          if INSTANT_DURATION, then the routine will
0:      *                          guarantee that lock was acquired while holding
0:      *                          the latch, but then immediately release the
0:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
0:      *                          then the lock be held when routine returns
0:      *                          successfully.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     private boolean lockRowOnPage(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     LeafControlRow          aux_leaf,
0:     int                     current_slot,
0:     boolean                 check_changed_rowloc,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(current_leaf != null);
0: 
0:             if (current_slot <= 0 || 
0:                 current_slot >= current_leaf.getPage().recordCount())
0:             {
0:                 SanityManager.THROWASSERT(
0:                     "current_slot = " + current_slot +
0:                     "; current_leaf.getPage().recordCount() = " +
0:                         current_leaf.getPage().recordCount());
0:             }
0: 
0: 
0:             if (!(btree instanceof B2I))
0:             {
0:                 SanityManager.THROWASSERT(
0:                     "btree not instance of B2I, it is " +
0:                     btree.getClass().getName());
0:             }
0: 
0:             SanityManager.ASSERT(lock_template != null, "template is null");
0: 
0:             // For now the RowLocation is expected to be the object located in
0:             // the last column of the lock_template, this may change if we
0:             // ever support rows with RowLocations somewhere else.
0:             SanityManager.ASSERT(
0:                 lock_row_loc == lock_template[lock_template.length - 1], 
0:                 "row_loc is not the object in last column of lock_template.");
0:         }
0: 
0:         // Fetch the row location to lock.
0:         RecordHandle rec_handle = 
0:             current_leaf.getPage().fetchFromSlot(
0:                 (RecordHandle) null, current_slot, 
0:                 lock_template, lock_fetch_desc, true);
0: 
0:         // First try to get the lock NOWAIT, while latch is held.
0:         boolean ret_status =
0:             base_cc.lockRow(
0:                 lock_row_loc, 
0:                 lock_operation,
0:                 false /* NOWAIT */, lock_duration);
0: 
0:         if (!ret_status)
0:         {
0:             // Could not get the lock NOWAIT, release latch and wait for lock.
0: 
0:             if (current_leaf != null)
0:             {
0:                 current_leaf.release();
0:                 current_leaf = null;
0:             }
0:             if (aux_leaf != null)
0:             {
0:                 aux_leaf.release();
0:                 aux_leaf = null;
0:             }
0: 
0:             base_cc.lockRow(
0:                 lock_row_loc, 
0:                 lock_operation,
0:                 true /* WAIT */, lock_duration);
0:         }
0: 
0:         return(ret_status);
0:     }
0: 
0:     private boolean searchLeftAndLockPreviousKey(
0:     B2I                     b2i,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     OpenBTree               open_btree,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException
0:     {
0:         boolean         latches_released = false;
0:         LeafControlRow  prev_leaf;
0:         LeafControlRow  prev_prev_leaf;
0: 
0:         try 
0:         {
0:             // Move left in tree, page latch will be requested nowait, 
0:             // and WaitError will be thrown if latch not granted.
0: 
0:             prev_leaf = 
0:                 (LeafControlRow) current_leaf.getLeftSibling(open_btree);
0: 
0:         }
0:         catch (WaitError e)
0:         {
0:             long previous_pageno = current_leaf.getleftSiblingPageNumber();
0: 
0:             // error going from mainpage to first left page.  Release 
0:             // current page latch and continue the search.
0:             current_leaf.release();
0:             current_leaf = null;
0: 
0:             // wait on the left page, which we could not get before. 
0:             prev_leaf = (LeafControlRow) 
0:                 ControlRow.Get(open_btree, previous_pageno);
0: 
0:             latches_released = true;
0:         }
0:        
0:         while (true)
0:         {
0:             try
0:             {
0:                 // loop searching left in the btree until you either find 
0:                 // a record to lock, or you reach the leftmost empty leaf.
0: 
0:                 if (prev_leaf.getPage().recordCount() > 1)
0:                 {
0:                     // lock the last row on the page, which is the previous 
0:                     // record to the first row on the next page.
0:                     
0:                     boolean ret_status = 
0:                         lockRowOnPage(
0:                             b2i,
0:                             prev_leaf, 
0:                             current_leaf, 
0:                             prev_leaf.getPage().recordCount() - 1, 
0:                             false, 
0:                             lock_fetch_desc,
0:                             lock_template,
0:                             lock_row_loc,
0:                             lock_operation, 
0:                             lock_duration);
0: 
0:                     if (!ret_status)
0:                     {
0:                         prev_leaf        = null;
0:                         current_leaf     = null;
0:                         latches_released = true;
0:                     }
0: 
0:                     break;
0:                 }
0:                 else if (prev_leaf.isLeftmostLeaf())
0:                 {
0:                     // Table's first row, lock the key that represents the 
0:                     // key previous to first key of the table.
0:                     boolean ret_status = 
0:                         lockPreviousToFirstKey(
0:                             prev_leaf, current_leaf, 
0:                             lock_operation, lock_duration);
0: 
0:                     if (!ret_status)
0:                     {
0:                         prev_leaf        = null;
0:                         current_leaf     = null;
0:                         latches_released = true;
0:                     }
0: 
0:                     break;
0:                 }
0: 
0:                 // Move left in tree, page latch will be requested nowait, 
0:                 // and WaitError will be thrown if latch not granted.
0:                 // Release latches on pages between "current_leaf" and 
0:                 // where the search leads, so that at most 3 latched pages
0:                 // (current_leaf, prev_leaf, prev_prev_leaf) are held during 
0:                 // the search.  Do left ladder locking as you walk left, 
0:                 // but be ready to release l
0: 
0:                 prev_prev_leaf = 
0:                     (LeafControlRow) prev_leaf.getLeftSibling(open_btree);
0:                 prev_leaf.release();
0:                 prev_leaf = prev_prev_leaf;
0:                 prev_prev_leaf = null;
0:             }
0:             catch (WaitError e)
0:             {
0:                 long previous_pageno = prev_leaf.getleftSiblingPageNumber();
0: 
0:                 // error going left.  Release current page latch and 
0:                 // original page latch continue the search.
0:                 current_leaf.release();
0:                 current_leaf = null;
0:                 prev_leaf.release();
0:                 prev_leaf = null;
0: 
0:                 // wait on the left page, which we could not get before. 
0:                 prev_leaf = (LeafControlRow) 
0:                     ControlRow.Get(open_btree, previous_pageno);
0: 
0:                 latches_released = true;
0:             }
0:         }
0:         if (prev_leaf != null)
0:             prev_leaf.release();
0: 
0:         return(!latches_released);
0: 
0:     }
0: 
0:     /**************************************************************************
0:      * Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock a row as part of doing the scan.
0:      * <p>
0:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_row_lock  Whether to request the row lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param lock_fetchDescriptor The fetch descriptor to use to fetch the
0:      *                          row location for the lock request.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param previous_key_lock Is this a previous key lock call?
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     protected boolean _lockScanRow(
0:     OpenBTree               open_btree,
0:     BTree                   btree,
0:     BTreeRowPosition        pos,
0:     boolean                 request_row_lock,
0:     boolean                 request_scan_lock,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     boolean                 previous_key_lock,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         boolean latch_released = false;
0:         B2I     b2i            = (B2I) btree;
0: 
0:         if (request_row_lock)
0:         {
0:             // In order to implement a serialized scan based on previous
0:             // key locking, this method acquires a row lock on
0:             // the base table's row from the index row at [startpage/startslot].
0:             // This will be the 'previous key'.
0: 
0:             if (pos.current_slot == 0)
0:             {
0:                 // this call will take care of searching left in the btree
0:                 // to find the previous row to lock, 0 is the control row and
0:                 // not a valid thing to lock as a previous key.
0: 
0:                 // it is ok to call the non-scan as this is just a special
0:                 // case of a previous key lock call.  The only scan code that
0:                 // will call this routine with slot == 0 will retry if this
0:                 // routine returns that a latch was released.
0: 
0:                 latch_released = 
0:                     !lockNonScanPreviousRow(
0:                         btree,
0:                         pos.current_leaf,
0:                         1 /* lock row previous to row at slot 1 */, 
0:                         lock_fetch_desc,
0:                         lock_template,
0:                         lock_row_loc,
0:                         open_btree, 
0:                         lock_operation,
0:                         TransactionManager.LOCK_COMMIT_DURATION);
0: 
0:                 // special test to see if latch release code works
0:                 if (SanityManager.DEBUG)
0:                 {
0:                     latch_released = 
0:                         OpenBTree.test_errors(
0:                             open_btree,
0:                             "B2iRowLocking3_1_lockScanRow",  false,
0:                             this, pos.current_leaf, latch_released);
0:                 }
0:             }
0:             else
0:             {
0:                 // Just lock the row at "slot"
0: 
0:                 latch_released = 
0:                     !lockRowOnPage(
0:                         btree,
0:                         pos.current_leaf, 
0:                         (LeafControlRow) null /* no other latch currently */,
0:                         pos.current_slot, 
0:                         true,
0:                         lock_fetch_desc,
0:                         lock_template,
0:                         lock_row_loc,
0:                         lock_operation,
0:                         TransactionManager.LOCK_COMMIT_DURATION);
0: 
0:                 // special test to see if latch release code works
0:                 if (SanityManager.DEBUG)
0:                 {
0:                     latch_released = 
0:                         OpenBTree.test_errors(
0:                             open_btree,
0:                             "B2iRowLocking3_2_lockScanRow", false,
0:                             this, pos.current_leaf, latch_released);
0:                 }
0:             }
0:         }
0: 
0:         if (request_scan_lock && !latch_released)
0:         {
0:             // Get the scan lock on the start page.
0: 
0:             // Get shared RECORD_ID_PROTECTION_HANDLE lock to make sure that
0:             // we wait for scans in other transactions to move off of this page
0:             // before we split.
0: 
0: 
0:             latch_released = 
0:                 !lockScan(
0:                     pos.current_leaf, 
0:                     (LeafControlRow) null, // no other latch currently
0:                     false,
0:                     ConglomerateController.LOCK_READ);// read scan lock position
0: 
0:             // special test to see if latch release code works
0:             if (SanityManager.DEBUG)
0:             {
0:                 /* RESOLVE - need to get a container here */
0:                 latch_released = 
0:                     OpenBTree.test_errors(
0:                         open_btree,
0:                         "B2iRowLocking3_3_lockScanRow", true, 
0:                         this, pos.current_leaf, latch_released);
0:             }
0:         }
0: 
0:         return(!latch_released);
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
0:      *     unlockScanRecordAfterRead- unlock the scan record
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock a control row page for scan.
0:      * <p>
0:      * Scanners get shared lock on the page while positioned on a row within
0:      * the page, splitter/purgers/mergers get exclusive lock on the page.
0:      *
0:      * See BTree.lockScan() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScan(
0:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         // The scan page lock is implemented as a row lock on the reserved
0:         // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
0:         RecordHandle scan_lock_rh = 
0:             current_leaf.getPage().makeRecordHandle(
0:                 RecordHandle.RECORD_ID_PROTECTION_HANDLE);
0: 
0:         // First try to get the lock NOWAIT, while latch is held.
0:         boolean ret_status = 
0:             _lockScan(scan_lock_rh, forUpdate, false /* NOWAIT */);
0: 
0:         if (!ret_status)
0:         {
0:             current_leaf.release();
0:             current_leaf = null;
0: 
0:             if (aux_control_row != null)
0:             {
0:                 aux_control_row.release();
0:                 aux_control_row = null;
0:             }
0: 
0:             // Could not get the lock NOWAIT, release latch and wait
0:             // for the lock.
0:             _lockScan(scan_lock_rh, forUpdate, true /* WAIT */);
0: 
0:             // once we get the lock, give it up as we need to get the lock
0:             // while we have the latch.  When the lock manager gives us the
0:             // ability to do instantaneous locks do that.  We just wait on the
0:             // lock to give the split a chance to finish before we interfere.
0: 
0:             if (!forUpdate)
0:             {
0:                 scan_locking_policy.unlockRecordAfterRead(
0:                     rawtran, open_btree.getContainerHandle(), 
0:                     scan_lock_rh, false, true);
0:             }
0:             else
0:             {
0:                 // RESOLVE - need instantaneous locks as there is no way 
0:                 // currently to release a write lock.  This lock will only
0:                 // be requested by split, and will be released by internal
0:                 // transaction.
0:             }
0:         }
0: 
0:         return(ret_status);
0:     }
0: 
0:     /**
0:      * Lock a control row page for reclaiming deleted rows.
0:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
0:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
0: 		throws StandardException
0:     {
0:         // The scan page lock is implemented as a row lock on the reserved
0:         // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
0:         RecordHandle scan_lock_rh = 
0:             current_leaf.getPage().makeRecordHandle(
0:                 RecordHandle.RECORD_ID_PROTECTION_HANDLE);
0: 
0:         // First try to get the lock NOWAIT, while latch is held.
0:         return(
0:             _lockScan(scan_lock_rh, true /* update */, false /* NOWAIT */));
0:     }
0: 
0:     /**
0:      * Lock a btree row to determine if it is a committed deleted row.
0:      * <p>
0:      * @see BTreeLockingPolicy#lockScanCommittedDeletedRow
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanCommittedDeletedRow(
0:     OpenBTree               open_btree,
0:     LeafControlRow          leaf,
0:     DataValueDescriptor[]   template,
0:     FetchDescriptor         lock_fetch_desc,
0:     int                     slot_no)
0: 		throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(leaf != null);
0: 
0:             if (slot_no <= 0 || slot_no >= leaf.getPage().recordCount())
0:             {
0:                 SanityManager.THROWASSERT(
0:                     "slot_no = " + slot_no +
0:                     "; leaf.getPage().recordCount() = " +
0:                         leaf.getPage().recordCount());
0:             }
0: 
0:             SanityManager.ASSERT(template != null, "template is null");
0:         }
0: 
0:         RowLocation row_loc = (RowLocation) 
0:             template[((B2I) open_btree.getConglomerate()).rowLocationColumn];
0: 
0:         // Fetch the row location to lock.
0:         leaf.getPage().fetchFromSlot(
0:             (RecordHandle) null, slot_no, template, lock_fetch_desc, true);
0: 
0:         // Request the lock NOWAIT, return status
0:         return(
0:             base_cc.lockRow(row_loc, 
0:                 ConglomerateController.LOCK_UPD,
0:                 false /* NOWAIT */, 
0:                 TransactionManager.LOCK_COMMIT_DURATION));
0:     }
0: 
0:     /**
0:      * Lock a row as part of doing the scan.
0:      * <p>
0:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      * (p>
0:      * As a sided effect stores the value of the record handle of the current
0:      * scan lock.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param previous_key_lock Is this a previous key lock call?
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanRow(
0:     OpenBTree               open_btree,
0:     BTree                   btree,
0:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     boolean                 previous_key_lock,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(
0:             _lockScanRow(
0:                 open_btree,
0:                 btree,
0:                 pos,
0:                 true,  // request the row lock (always true for iso 3 )
0:                 request_scan_lock,
0:                 lock_fetch_desc,
0:                 lock_template,
0:                 lock_row_loc,
0:                 previous_key_lock,
0:                 forUpdate,
0:                 lock_operation));
0:     }
0: 
0:     /**
0:      * Release read lock on a row.
0:      *
0:      * For serializable, there is no work to do.
0:      *
0:      * @param row_qualified     Did the row qualify to be returned to caller.
0:      *
0:      **/
0:     public void unlockScanRecordAfterRead(
0:     BTreeRowPosition        pos,
0:     boolean                 forUpdate)
0: 		throws StandardException
0:     {
0:         return;
0:     }
0: 
0:     /**
0:      * Release the lock gotten by calling lockScan.  This call can only be
0:      * made to release read scan locks, write scan locks must be held until
0:      * end of transaction.
0:      * <p>
0:      * See BTree.unlockScan() for more info.
0:      *
0:      **/
0:     public void unlockScan(
0:     long            page_number)
0:     {
0:         // This is first row in table, lock the special key that 
0:         // represents the key previous to the first key of the table.
0:         try
0:         {
0:             RecordHandle scan_lock_rh = 
0:                 open_btree.makeRecordHandle(
0:                     page_number, RecordHandle.RECORD_ID_PROTECTION_HANDLE);
0: 
0:             scan_locking_policy.unlockRecordAfterRead(
0:                 rawtran, open_btree.getContainerHandle(), 
0:                 scan_lock_rh, false, true);
0:         }
0:         catch (StandardException se)
0:         {
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("error from make RecordHandle.");
0:         }
0: 
0:     }
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockNonScan*() locking methods of BTree:
0:      *
0:      *     lockNonScanPreviousRow   - lock the row previous to the current
0:      *     lockNonScanRow           - lock the input row
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock the row previous to the input row.
0:      * <p>
0:      * See BTree.lockPreviousRow() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockNonScanPreviousRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     OpenBTree               open_btree,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException
0:     {
0:         boolean          ret_status;
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(btree instanceof B2I);
0:         }
0: 
0:         if (current_slot > 1)
0:         {
0:             // Easy case, just lock the key previous to the current one.
0:             
0:             // Lock (current_slot - 1)
0: 
0:             ret_status = 
0:                 lockRowOnPage(
0:                     btree,
0:                     current_leaf, (LeafControlRow) null, 
0:                     current_slot - 1,
0:                     false,
0:                     lock_fetch_desc,
0:                     lock_template,
0:                     lock_row_loc,
0:                     lock_operation, lock_duration);
0:         }
0:         else
0:         {
0:             // Should only be called while pointing at a valid location, 0 
0:             // is not a valid key slot - it is the control row.
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.ASSERT(current_slot == 1);
0: 
0:             if (current_leaf.isLeftmostLeaf())
0:             {
0:                 // This is first row in table, lock the special key that 
0:                 // represents the key previous to the first key of the table.
0:                 ret_status = 
0:                     lockPreviousToFirstKey(
0:                         current_leaf, (LeafControlRow) null, 
0:                         lock_operation, lock_duration);
0:             }
0:             else
0:             {
0:                 // The previous key is on a previous page, search left 
0:                 // through the pages to find the key to latch.
0: 
0:                 // RESOLVE RLL (mikem) - do I need to do the 
0:                 // RECORD_ID_PROTECTION_HANDLE lock.
0:                 // First guarantee that record id's will not move off this
0:                 // current page while searching for previous key, by getting
0:                 // the RECORD_ID_PROTECTION_HANDLE lock on the current page.
0:                 // Since we have a latch on the cur
0: 
0:                 // RESOLVE RLL (mikem) - NO RECORD_ID PROTECTION IN EFFECT.
0:                 // caller must research, get new locks if this routine 
0:                 // releases latches.
0:                 ret_status = this.searchLeftAndLockPreviousKey(
0:                     (B2I) btree,
0:                     current_leaf, current_slot,
0:                     lock_fetch_desc, lock_template, lock_row_loc,
0:                     open_btree, lock_operation, lock_duration);
0:             }
0:         }
0: 
0:         return(ret_status);
0:     }
0: 
0:     /**
0:      * Lock the in memory row.
0:      * <p>
0:      * See BTree.lockRow() for more info.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockNonScanRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     LeafControlRow          aux_leaf,
0:     DataValueDescriptor[]   current_row,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(btree instanceof B2I);
0:         }
0:         B2I b2i = (B2I) btree;
0: 
0:         // First try to get the lock NOWAIT, while latch is held.
0:         boolean ret_status = 
0:             base_cc.lockRow(
0:                 (RowLocation) current_row[b2i.rowLocationColumn], 
0:                 lock_operation,
0:                 false /* NOWAIT */, 
0:                 TransactionManager.LOCK_COMMIT_DURATION);
0: 
0:         if (!ret_status)
0:         {
0:             // Could not get the lock NOWAIT, release latch and wait for lock.
0: 
0:             if (current_leaf != null)
0:             {
0:                 current_leaf.release();
0:                 current_leaf = null;
0:             }
0:             if (aux_leaf != null)
0:             {
0:                 aux_leaf.release();
0:                 aux_leaf = null;
0:             }
0: 
0:             base_cc.lockRow(
0:                 (RowLocation) current_row[b2i.rowLocationColumn], 
0:                 lock_operation,
0:                 true /* WAIT */, 
0:                 TransactionManager.LOCK_COMMIT_DURATION);
0:         }
0: 
0:         return(ret_status);
0:     }
0: 
0:     public boolean lockNonScanRowOnPage(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         return(
0:             lockRowOnPage(
0:                 btree,
0:                 current_leaf,
0:                 null,
0:                 current_slot,
0:                 false,
0:                 lock_fetch_desc,
0:                 lock_template,
0:                 lock_row_loc,
0:                 lock_operation,
0:                 TransactionManager.LOCK_COMMIT_DURATION));
0:     }
0: }
============================================================================