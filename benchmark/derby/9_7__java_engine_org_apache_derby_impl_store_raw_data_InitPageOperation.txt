1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.InitPageOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.BasePage;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This operation initializes the page that is being allocated,
1:eac0369: 	this operation does not change the alloc page information.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_INIT_PAGE
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	initialized a page
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PhysicalPageOperation the superclass
1:eac0369: 		nextRecordId(CompressedInt)	the next recordId this page should give out
1:eac0369: 		initFlag(CompressedInt)		initialization flag: reuse, overflow
1:eac0369: 		pageformat(int)				the page's formatId
1:eac0369: 
1:eac0369: 		OptionalData	none
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: */
1:eac0369: public final class InitPageOperation extends PhysicalPageOperation
1:eac0369: {
1:eac0369: 	protected int	nextRecordId; // next recordId
1:eac0369: 	protected int	initFlag;
1:eac0369: 	protected int	pageFormatId;
1:eac0369: 	protected long	pageOffset;
1:eac0369: 
1:eac0369: 	protected boolean reuse;	// is this page being initialize for reuse, or for first time
1:eac0369: 	protected boolean overflowPage; // is this page an overflow page
1:eac0369: 
1:3546404:     InitPageOperation(BasePage page, int flag, int formatid,
1:eac0369: 							 long offset)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 
1:eac0369: 		initFlag = flag;
1:eac0369: 		pageFormatId = formatid;
1:eac0369: 		pageOffset = offset;
1:eac0369: 
1:eac0369: 		// unless we specified recordId should be reusable, when we reuse a
1:eac0369: 		// page, we keep incrementing the existing recordId
1:eac0369: 		if ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0)
1:eac0369: 			nextRecordId = page.newRecordId();
1:eac0369: 		else
1:eac0369: 			nextRecordId = RecordHandle.FIRST_RECORD_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public InitPageOperation() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		CompressedNumber.writeInt(out, nextRecordId);
1:eac0369: 		CompressedNumber.writeInt(out, initFlag);
1:eac0369: 		CompressedNumber.writeLong(out, pageOffset);
1:eac0369: 		out.writeInt(pageFormatId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		nextRecordId = CompressedNumber.readInt(in);
1:eac0369: 		initFlag = CompressedNumber.readInt(in);
1:eac0369: 		pageOffset = CompressedNumber.readLong(in);
1:eac0369: 		pageFormatId = in.readInt();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_INIT_PAGE;
1:eac0369: 	}
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		Mark the page as valid, and clear out any crud from the page
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1:eac0369: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1:eac0369: 
1:eac0369: 		this.page.initPage(instant,
1:eac0369: 						   BasePage.VALID_PAGE,
1:eac0369: 						   nextRecordId,
1:eac0369: 						   overflowPage, reuse);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:f57b07d: 	 * Override PageBasicOperation's getPageForRedoRecovery
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		If we are in load tran, this page may not exist for the container yet.
1:eac0369: 		We need to create it first.
1:eac0369: 
1:eac0369: 		This routine is called as the last resort of find page, the container
1:eac0369: 		handle has already been found and it is not dropped.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 	*/
1:f57b07d: 	protected BasePage getPageForRedoRecovery(Transaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:f57b07d: 		BasePage p = super.getPageForRedoRecovery(xact);
1:eac0369: 		if (p != null)
1:eac0369: 			return p;
1:eac0369: 
1:eac0369: 		// create the page
1:eac0369: 		// RESOLVE: we need the page format to properly recreate an Alloc page
1:eac0369: 		// NEED TO UPGRADE this log record.
1:f57b07d: 		p = (BasePage)containerHdl.reCreatePageForRedoRecovery(
1:eac0369: 						pageFormatId,								   
1:eac0369: 						getPageId().getPageNumber(), 
1:eac0369: 						pageOffset);
1:eac0369: 		return p;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PhysicalPageOperation method
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Mark the page as free
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@exception IOException Thrown by methods I call
1:eac0369: 
1:eac0369: 		@see PhysicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1:eac0369: 					   LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoPage.setPageStatus(CLRInstant, BasePage.INVALID_PAGE);
1:eac0369: 		// only set the page to invalid, cannot wipe out the page to zero's
1:eac0369: 		// becuase recovery may need to redo some operations that depend on the
1:eac0369: 		// content of the page.
1:eac0369: 
1:eac0369: 		undoPage.setAuxObject(null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PageBasicOperation methods
1:eac0369: 	 */
1:eac0369: 	
1:eac0369: 	/** 
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoMe(xact, undoPage, CLRInstant, in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1:eac0369: 			boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1:eac0369: 
1:eac0369: 			return super.toString() + "Init Page.  Overflow = "
1:eac0369: 				+ overflowPage + " reuse " + reuse + " nextRecordId " + nextRecordId;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
1:     InitPageOperation(BasePage page, int flag, int formatid,
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_INIT_PAGE
1: 	@derby.purpose	initialized a page
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1: 	 * Override PageBasicOperation's getPageForRedoRecovery
/////////////////////////////////////////////////////////////////////////
1: 	protected BasePage getPageForRedoRecovery(Transaction xact)
1: 		BasePage p = super.getPageForRedoRecovery(xact);
1: 		p = (BasePage)containerHdl.reCreatePageForRedoRecovery(
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.InitPageOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	This operation initializes the page that is being allocated,
1: 	this operation does not change the alloc page information.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_INIT_PAGE
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	initialized a page
0: 	@upgrade
0: 	@disk_layout
1: 		PhysicalPageOperation the superclass
1: 		nextRecordId(CompressedInt)	the next recordId this page should give out
1: 		initFlag(CompressedInt)		initialization flag: reuse, overflow
1: 		pageformat(int)				the page's formatId
1: 
1: 		OptionalData	none
0: 	@end_format
1: 	</PRE>
1: */
1: public final class InitPageOperation extends PhysicalPageOperation
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	protected int	nextRecordId; // next recordId
1: 	protected int	initFlag;
1: 	protected int	pageFormatId;
1: 	protected long	pageOffset;
1: 
1: 	protected boolean reuse;	// is this page being initialize for reuse, or for first time
1: 	protected boolean overflowPage; // is this page an overflow page
1: 
0: 	public InitPageOperation(BasePage page, int flag, int formatid, 
1: 							 long offset)
1: 		 throws StandardException
1: 	{
1: 		super(page);
1: 
1: 		initFlag = flag;
1: 		pageFormatId = formatid;
1: 		pageOffset = offset;
1: 
1: 		// unless we specified recordId should be reusable, when we reuse a
1: 		// page, we keep incrementing the existing recordId
1: 		if ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0)
1: 			nextRecordId = page.newRecordId();
1: 		else
1: 			nextRecordId = RecordHandle.FIRST_RECORD_ID;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public InitPageOperation() { super(); }
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeInt(out, nextRecordId);
1: 		CompressedNumber.writeInt(out, initFlag);
1: 		CompressedNumber.writeLong(out, pageOffset);
1: 		out.writeInt(pageFormatId);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		nextRecordId = CompressedNumber.readInt(in);
1: 		initFlag = CompressedNumber.readInt(in);
1: 		pageOffset = CompressedNumber.readLong(in);
1: 		pageFormatId = in.readInt();
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_INIT_PAGE;
1: 	}
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		Mark the page as valid, and clear out any crud from the page
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1: 
1: 		this.page.initPage(instant,
1: 						   BasePage.VALID_PAGE,
1: 						   nextRecordId,
1: 						   overflowPage, reuse);
1: 	}
1: 
1: 	/*
0: 	 * Override PageBasicOperation's getPageForLoadTran
1: 	 */
1: 	/**
1: 		If we are in load tran, this page may not exist for the container yet.
1: 		We need to create it first.
1: 
1: 		This routine is called as the last resort of find page, the container
1: 		handle has already been found and it is not dropped.
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	*/
0: 	protected BasePage getPageForLoadTran(Transaction xact)
1: 		 throws StandardException
1: 	{
0: 		BasePage p = super.getPageForLoadTran(xact);
1: 		if (p != null)
1: 			return p;
1: 
1: 		// create the page
1: 		// RESOLVE: we need the page format to properly recreate an Alloc page
1: 		// NEED TO UPGRADE this log record.
0: 		p = (BasePage)containerHdl.reCreatePageForLoadTran(
1: 						pageFormatId,								   
1: 						getPageId().getPageNumber(), 
1: 						pageOffset);
1: 		return p;
1: 	}
1: 	
1: 
1: 	/*
1: 	 * PhysicalPageOperation method
1: 	 */
1: 
1: 	/**
1: 		Mark the page as free
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@exception IOException Thrown by methods I call
1: 
1: 		@see PhysicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1: 					   LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoPage.setPageStatus(CLRInstant, BasePage.INVALID_PAGE);
1: 		// only set the page to invalid, cannot wipe out the page to zero's
1: 		// becuase recovery may need to redo some operations that depend on the
1: 		// content of the page.
1: 
1: 		undoPage.setAuxObject(null);
1: 	}
1: 
1: 
1: 	/*
1: 	 * PageBasicOperation methods
1: 	 */
1: 	
1: 	/** 
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 	public void restoreMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoMe(xact, undoPage, CLRInstant, in);
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1: 			boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1: 
1: 			return super.toString() + "Init Page.  Overflow = "
1: 				+ overflowPage + " reuse " + reuse + " nextRecordId " + nextRecordId;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	This operation initializes the page that is being allocated,
0: 	this operation does not change the alloc page information.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_INIT_PAGE
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	initialized a page
0: 	@upgrade
0: 	@disk_layout
0: 		PhysicalPageOperation the superclass
0: 		nextRecordId(CompressedInt)	the next recordId this page should give out
0: 		initFlag(CompressedInt)		initialization flag: reuse, overflow
0: 		pageformat(int)				the page's formatId
0: 
0: 		OptionalData	none
0: 	@end_format
0: 	</PRE>
0: */
0: public final class InitPageOperation extends PhysicalPageOperation
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected int	nextRecordId; // next recordId
0: 	protected int	initFlag;
0: 	protected int	pageFormatId;
0: 	protected long	pageOffset;
0: 
0: 	protected boolean reuse;	// is this page being initialize for reuse, or for first time
0: 	protected boolean overflowPage; // is this page an overflow page
0: 
0: 	public InitPageOperation(BasePage page, int flag, int formatid, 
0: 							 long offset)
0: 		 throws StandardException
0: 	{
0: 		super(page);
0: 
0: 		initFlag = flag;
0: 		pageFormatId = formatid;
0: 		pageOffset = offset;
0: 
0: 		// unless we specified recordId should be reusable, when we reuse a
0: 		// page, we keep incrementing the existing recordId
0: 		if ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0)
0: 			nextRecordId = page.newRecordId();
0: 		else
0: 			nextRecordId = RecordHandle.FIRST_RECORD_ID;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public InitPageOperation() { super(); }
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, nextRecordId);
0: 		CompressedNumber.writeInt(out, initFlag);
0: 		CompressedNumber.writeLong(out, pageOffset);
0: 		out.writeInt(pageFormatId);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		nextRecordId = CompressedNumber.readInt(in);
0: 		initFlag = CompressedNumber.readInt(in);
0: 		pageOffset = CompressedNumber.readLong(in);
0: 		pageFormatId = in.readInt();
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_INIT_PAGE;
0: 	}
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		Mark the page as valid, and clear out any crud from the page
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
0: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
0: 
0: 		this.page.initPage(instant,
0: 						   BasePage.VALID_PAGE,
0: 						   nextRecordId,
0: 						   overflowPage, reuse);
0: 	}
0: 
0: 	/*
0: 	 * Override PageBasicOperation's getPageForLoadTran
0: 	 */
0: 	/**
0: 		If we are in load tran, this page may not exist for the container yet.
0: 		We need to create it first.
0: 
0: 		This routine is called as the last resort of find page, the container
0: 		handle has already been found and it is not dropped.
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	*/
0: 	protected BasePage getPageForLoadTran(Transaction xact)
0: 		 throws StandardException
0: 	{
0: 		BasePage p = super.getPageForLoadTran(xact);
0: 		if (p != null)
0: 			return p;
0: 
0: 		// create the page
0: 		// RESOLVE: we need the page format to properly recreate an Alloc page
0: 		// NEED TO UPGRADE this log record.
0: 		p = (BasePage)containerHdl.reCreatePageForLoadTran(
0: 						pageFormatId,								   
0: 						getPageId().getPageNumber(), 
0: 						pageOffset);
0: 		return p;
0: 	}
0: 	
0: 
0: 	/*
0: 	 * PhysicalPageOperation method
0: 	 */
0: 
0: 	/**
0: 		Mark the page as free
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@exception IOException Thrown by methods I call
0: 
0: 		@see PhysicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
0: 					   LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoPage.setPageStatus(CLRInstant, BasePage.INVALID_PAGE);
0: 		// only set the page to invalid, cannot wipe out the page to zero's
0: 		// becuase recovery may need to redo some operations that depend on the
0: 		// content of the page.
0: 
0: 		undoPage.setAuxObject(null);
0: 	}
0: 
0: 
0: 	/*
0: 	 * PageBasicOperation methods
0: 	 */
0: 	
0: 	/** 
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 	public void restoreMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoMe(xact, undoPage, CLRInstant, in);
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
0: 			boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
0: 
0: 			return super.toString() + "Init Page.  Overflow = "
0: 				+ overflowPage + " reuse " + reuse + " nextRecordId " + nextRecordId;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: }
============================================================================