1:eac0369: /*
52:eac0369: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.DRDAProtocolException
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
1:d7258ed: 
6:eac0369:  */
1:eac0369: 
1:eac0369: /*
1:eac0369: 
2:eac0369: /**
1:4f996a4:     DRDAProtocolException is the root of all protocol exceptions that are 
1:4f996a4:     handled in a standard fashion by the DRDA AS.
1:4f996a4:     If a protocol error message needs to send more than 
1:4f996a4:     SVRCOD, an ERRCD and CODPNT arg it should be subclassed
1:eac0369: 
1:eac0369: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.drda;
1:eac0369: import java.util.Hashtable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:7df5ffe: class DRDAProtocolException extends Exception
23:eac0369: {
1:eac0369:     
1:4f996a4:     /* Static values, used in constructor if there is no associated 
1:4f996a4:        Error Code or the codepoint argument.
1:4f996a4:     */
1:4f996a4:     
1:4f996a4:     protected static final int NO_ASSOC_ERRCD = 0;
1:4f996a4:     protected static final int NO_CODPNT_ARG  = 0;
1:4f996a4: 
1:eac0369:     
1:4f996a4:     private DRDAConnThread agent;
1:eac0369: 
1:4f996a4:     // request correlation id
1:4f996a4:     private int correlationID;
1:4f996a4:     
1:4f996a4:     // correlation token
1:4f996a4:     private byte[] crrtkn;
1:eac0369: 
1:4f996a4:     //Codepoint arg
1:4f996a4:     private int codpntArg;
1:4f996a4: 
1:4f996a4:     private DRDAProtocolExceptionInfo exceptionInfo;
1:4f996a4: 
1:4f996a4:     // CodePoint of this error
1:4f996a4:     private int errorCodePoint;
1:4f996a4:     
1:4f996a4:     // Severity Code
1:4f996a4:     private int svrcod;
1:4f996a4:     
1:4f996a4:     // error code (e.g. SYNERRCD)
1:4f996a4:     private int errcd;
1:4f996a4:     
1:4f996a4:     // messageid for logging errors.
1:4f996a4:     private String  messageid;
1:4f996a4: 
1:4f996a4:     // database name
1:4f996a4:     private String rdbnam;
1:4f996a4:     
1:4f996a4:     // database diagnostic information
1:4f996a4:     private String srvdgn;
1:4f996a4: 
1:4f996a4:     // message arguments
1:4f996a4:     private Object [] messageArgs;
1:4f996a4:     
1:14928b1:     // A verbose error message string, will be helpful
1:14928b1:     // when getMessage() is called on this Exception object
1:14928b1:     private String msg;
1:14928b1:     
1:27fbf33:     private static Hashtable<String, DRDAProtocolExceptionInfo> errorInfoTable;
1:4f996a4:     
1:4f996a4:     protected static String DRDA_Proto_CMDCHKRM=    "DRDA_Proto_CMDCHKRM";
1:4f996a4:     protected static String DRDA_Proto_CMDNSPRM=    "DRDA_Proto_CMDNSPRM";
1:4f996a4:     protected static String DRDA_Proto_DTAMCHRM=    "DRDA_Proto_DTAMCHRM";
1:4f996a4: 
1:db9a013:     protected static String DRDA_Proto_OBJNSPRM =   "DRDA_Proto_OBJNSPRM";
1:4f996a4:     protected static String DRDA_Proto_PKGBNARM=    "DRDA_Proto_PKGBNARM";
1:4f996a4:     protected static String DRDA_Proto_PRCCNVRM=   "DRDA_Proto_PRCCNVRM";
1:4f996a4:     protected static String DRDA_Proto_PRMNSRM =   "DRDA_Proto_PRMNSPRM";
1:4f996a4: 
1:4f996a4:     protected static String DRDA_Proto_SYNTAXRM=   "DRDA_Proto_SYNTAXRM";
1:4f996a4:     protected static String DRDA_Proto_VALNSPRM=   "DRDA_Proto_VALNSPRM";
1:4f996a4:     protected static String DRDA_Proto_MGRLVLRM=   "DRDA_Proto_MGRLVLRM";
1:4f996a4:     protected static String DRDA_Proto_RDBNFNRM=   "DRDA_Proto_RDBNFNRM";
1:4f996a4: 
1:4f996a4:     protected static String DRDA_Disconnect=       "DRDA_Disconnect";
1:4f996a4:     protected static String DRDA_AgentError=       "DRDA_AgentError";
1:1f71856:     protected static String DRDA_Timeout=          "DRDA_Timeout";
1:b0902f1:     protected static String DRDA_InvalidClient =   "DRDA_InvalidClient";
1:4f996a4: 
1:4f996a4:     static {
1:4f996a4:     /* Create the errorInfoTable
1:4f996a4:        The Hashtable is keyed on messageid and holds 
1:4f996a4:        DRDAProtocolExceptionInfo for each of our messages.
1:4f996a4:     */
1:4f996a4:     
1:27fbf33:     errorInfoTable = new Hashtable<String, DRDAProtocolExceptionInfo>();
1:4f996a4:     
1:4f996a4:     errorInfoTable.put(
1:4f996a4:                DRDA_Proto_CMDCHKRM,
1:4f996a4:                new  DRDAProtocolExceptionInfo(
1:4f996a4:                               CodePoint.CMDCHKRM,
1:4f996a4:                               CodePoint.SVRCOD_ERROR,
1:4f996a4:                               NO_ASSOC_ERRCD,
1:4f996a4:                               false));
1:1f71856: 
1:4f996a4:     errorInfoTable.put(
1:4f996a4:                DRDA_Proto_CMDNSPRM,
1:4f996a4:                new  DRDAProtocolExceptionInfo(
1:4f996a4:                               CodePoint.CMDNSPRM,
1:4f996a4:                               CodePoint.SVRCOD_ERROR,
1:4f996a4:                               NO_ASSOC_ERRCD,
1:4f996a4:                               true));
1:4f996a4:     errorInfoTable.put(
1:4f996a4:                DRDA_Proto_DTAMCHRM,
1:4f996a4:                new  DRDAProtocolExceptionInfo(
1:4f996a4:                               CodePoint.DTAMCHRM,
1:4f996a4:                               CodePoint.SVRCOD_ERROR,
1:4f996a4:                               NO_ASSOC_ERRCD,
1:4f996a4:                               false));
1:4f996a4:     errorInfoTable.put(
1:4f996a4:                DRDA_Proto_OBJNSPRM,
1:4f996a4:                new  DRDAProtocolExceptionInfo(
1:4f996a4:                               CodePoint.OBJNSPRM,
1:4f996a4:                               CodePoint.SVRCOD_ERROR,
1:4f996a4:                               NO_ASSOC_ERRCD,
1:4f996a4:                               true));
1:4f996a4:         
1:4f996a4:     errorInfoTable.put(
1:4f996a4:                        DRDA_Proto_PKGBNARM,
1:4f996a4:                        new  DRDAProtocolExceptionInfo(
1:4f996a4:                                CodePoint.PKGBNARM,
1:4f996a4:                                CodePoint.SVRCOD_ERROR,
1:4f996a4:                                NO_ASSOC_ERRCD,
1:4f996a4:                                false));
1:4f996a4:                
1:4f996a4:     errorInfoTable.put(DRDA_Proto_PRCCNVRM,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              CodePoint.PRCCNVRM,
1:4f996a4:                              CodePoint.SVRCOD_ERROR,
1:4f996a4:                              CodePoint.PRCCNVCD,
1:4f996a4:                              false));
1:eac0369: 
1:4f996a4:     errorInfoTable.put(DRDA_Proto_SYNTAXRM,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              CodePoint.SYNTAXRM,
1:4f996a4:                              CodePoint.SVRCOD_ERROR,
1:4f996a4:                              CodePoint.SYNERRCD,
1:4f996a4:                              true));
1:eac0369: 
1:4f996a4:     errorInfoTable.put(DRDA_Proto_VALNSPRM,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              CodePoint.VALNSPRM,
1:4f996a4:                              CodePoint.SVRCOD_ERROR,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              true));
1:eac0369: 
1:4f996a4:     errorInfoTable.put(DRDA_Proto_MGRLVLRM,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              CodePoint.MGRLVLRM,
1:4f996a4:                              CodePoint.SVRCOD_ERROR,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              false));
1:eac0369: 
1:4f996a4:     errorInfoTable.put(DRDA_Proto_RDBNFNRM,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              CodePoint.RDBNFNRM,
1:4f996a4:                              CodePoint.SVRCOD_ERROR,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              false));
1:4f996a4: 
1:eac0369:                
1:4f996a4:     errorInfoTable.put(DRDA_Disconnect,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              0,
1:4f996a4:                              0,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              false));
1:eac0369: 
1:14928b1:     // Permanent Agent Error (AGNPRMRM) Reply Message indicates that the command
1:14928b1:     // requested could not be completed because of a permanent error
1:14928b1:     // condition detected at the target system.
1:4f996a4:     errorInfoTable.put(DRDA_AgentError,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:14928b1:                              CodePoint.AGNPRMRM,
1:14928b1:                              CodePoint.SVRCOD_PRMDMG,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              false));
1:eac0369: 
1:eac0369: 
1:4f996a4:     errorInfoTable.put(DRDA_Timeout,
1:4f996a4:                new DRDAProtocolExceptionInfo(
1:4f996a4:                              0,
1:4f996a4:                              0,
1:4f996a4:                              NO_ASSOC_ERRCD,
1:4f996a4:                              false));
1:1f71856: 
1:4f996a4:     }
1:4f996a4:         
1:4f996a4:     
1:4f996a4:     /**  Create a new Protocol exception 
1:4f996a4:      *
1:db9a013:      * @param agent     DRDAConnThread  that threw this exception
1:4f996a4:      *
1:db9a013:      * @param cpArg     CODPNT value  to pass to send
1:4f996a4:      *
1:4f996a4:      *
1:db9a013:      * @param msgid       The messageid for this message. (needs to be
1:4f996a4:      * integrated into logging mechanism)
1:4f996a4:      *
1:db9a013:      * @param args         Argments for the message in an Object[]
1:4f996a4:      *
1:4f996a4:      */
1:4f996a4:     
1:4f996a4:     DRDAProtocolException(String msgid,
1:4f996a4:                                     DRDAConnThread agent, 
1:4f996a4:                                     int cpArg, 
1:4f996a4:                                     int errCdArg, Object []args)
1:4f996a4:                         
1:4f996a4:     {
1:4f996a4:         
1:4f996a4:         boolean agentError = false;
1:eac0369: 
1:4f996a4:         exceptionInfo = 
1:4f996a4:             (DRDAProtocolExceptionInfo) errorInfoTable.get(msgid);
1:4f996a4:                 
1:4f996a4:         if (agent != null)
1:4f996a4:         {
1:4f996a4:             this.correlationID = agent.getCorrelationID();
1:4f996a4:             this.crrtkn = agent.getCrrtkn();
1:4f996a4:         }
1:eac0369: 
1:4f996a4:         this.codpntArg= cpArg;
1:4f996a4:         this.errorCodePoint = exceptionInfo.errorCodePoint;
1:4f996a4:         this.errcd = errCdArg;
1:4f996a4:         this.messageid = msgid;
1:eac0369: 
1:4f996a4:         if (msgid.equals(DRDA_AgentError))
1:4f996a4:         {
1:4f996a4:             this.svrcod = ((Integer)args[0]).intValue();
1:4f996a4:             this.rdbnam = (String)args[1];
1:14928b1:             // retrieve the server diagnostic error message 
1:14928b1:             String srvdgn = (String)args[2];
1:14928b1:             msg = "Execution failed because of Permanent Agent Error: SVRCOD = " +
1:4f996a4:                 java.lang.Integer.toHexString(this.svrcod) +
1:14928b1:                 "; RDBNAM = "+ rdbnam +"; diagnostic msg = "+ srvdgn;
1:4f996a4:             agentError = true;
1:4f996a4:         }
1:4f996a4:         else if (msgid.equals(DRDA_Proto_RDBNFNRM))
1:4f996a4:         {
1:4f996a4:             this.svrcod = exceptionInfo.svrcod;
1:4f996a4:             this.rdbnam = (String)args[0];
1:4f996a4:             msg = "Execution failed because of Distributed Protocol Error:  " 
1:4f996a4:                 + messageid +
1:4f996a4:                 "; RDBNAM = "+ rdbnam;
1:4f996a4:         }
1:4f996a4:         else
1:4f996a4:         {
1:4f996a4:             this.svrcod = exceptionInfo.svrcod;
1:4f996a4:             msg = "Execution failed because of a Distributed Protocol Error:  " 
1:4f996a4:                 + messageid +
1:4f996a4:                 "; CODPNT arg  = " + java.lang.Integer.toHexString(cpArg)  +
1:4f996a4:                 "; Error Code Value = " + java.lang.Integer.toHexString(errCdArg);
1:4f996a4:             if (msgid.equals(DRDA_Proto_SYNTAXRM)) {
1:4f996a4:                 msg += ". Plaintext connection attempt from an SSL enabled client?";
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:         
1:4f996a4:         
1:4f996a4:         if (!agentError && args != null)
1:4f996a4:         {
1:4f996a4:             messageArgs = args;
1:4f996a4:             for (int i = 0; i < args.length; i++)
1:4f996a4:             {
1:4f996a4:                 //args contain managers and manager levels display in hex
1:4f996a4:                 if (msgid.equals(DRDA_Proto_MGRLVLRM))
1:4f996a4:                     msg += "," + 
1:4f996a4:                         java.lang.Integer.toHexString(((Integer)args[i]).intValue());
1:4f996a4:                 else
1:4f996a4:                     msg += "," + args[i];
1:4f996a4:                 
1:4f996a4:             }
1:4f996a4:         }
1:eac0369: 
1:eac0369: 
1:4f996a4:         // for now dump all errors except disconnects to console        
1:4f996a4:         // and log
1:4f996a4:         if (!isDisconnectException())
1:4f996a4:         {
1:4f996a4:             DRDAConnThread.println2Log(agent.getDbName(),
1:4f996a4:                                    agent.getSession().drdaID, 
1:4f996a4:                                    msg);
1:4f996a4:             NetworkServerControlImpl s = agent.getServer();
1:a0f8405:             s.consoleExceptionPrintTrace(this);
1:4f996a4:         }
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     // Constructor with no additional args
1:4f996a4:     DRDAProtocolException(String msgid,
1:4f996a4:                                     DRDAConnThread agent, 
1:4f996a4:                                     int cpArg, 
1:4f996a4:                                     int errCdArg)
1:4f996a4:     {
1:4f996a4:         this(msgid,agent,  cpArg, errCdArg, (Object []) null);
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:4f996a4:     protected static DRDAProtocolException newDisconnectException(DRDAConnThread
1:4f996a4:                                                                   agent,Object[] args)
1:4f996a4:     {
1:4f996a4:         return new DRDAProtocolException(DRDA_Disconnect,
1:4f996a4:                                          agent,
1:4f996a4:                                          NO_CODPNT_ARG,
1:4f996a4:                                          NO_ASSOC_ERRCD,
1:4f996a4:                                          args);
1:4f996a4:         
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     protected static DRDAProtocolException newAgentError(DRDAConnThread agent,
1:4f996a4:         int svrcod, String rdbnam, String srvdgn)
1:4f996a4:     {
1:14928b1:         if ( SanityManager.DEBUG )
1:953604b:             agent.trace("agentError in " + agent);
1:66527ec:         Object[] oa = {svrcod, rdbnam, srvdgn};
1:4f996a4:         return new DRDAProtocolException(DRDA_AgentError,
1:4f996a4:                                         agent,
1:4f996a4:                                         NO_CODPNT_ARG,
1:4f996a4:                                         NO_ASSOC_ERRCD,
1:4f996a4:                                         oa);
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     protected final boolean isDisconnectException()
1:4f996a4:     {
1:4f996a4:         return (errorCodePoint == 0);
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     /** write will write the Error information to the buffer.
1:4f996a4:      * Most errors will write only the codepoint and svrcod 
1:4f996a4:      * Where appropriate the codepoint specific error code and
1:4f996a4:      * codePoint of origin will be written
1:4f996a4:      *
1:4f996a4:      * @param writer  The DDMWriter for the agent.
1:4f996a4:      */
1:4f996a4:     
1:4f996a4:     protected void write(DDMWriter writer)
1:4f996a4:     {
1:4f996a4:         //Writing Protocol Error
1:4f996a4:         writer.createDssReply();
1:4f996a4:         writer.startDdm(errorCodePoint);
1:4f996a4:         writer.writeScalar2Bytes(CodePoint.SVRCOD,svrcod);
1:4f996a4:         if (exceptionInfo.sendsCodpntArg)
1:4f996a4:             writer.writeScalar2Bytes(CodePoint.CODPNT,codpntArg);
1:4f996a4:         if (exceptionInfo.errCdCodePoint !=  NO_ASSOC_ERRCD)
1:4f996a4:             writer.writeScalar1Byte(exceptionInfo.errCdCodePoint,
1:4f996a4:                                     errcd);
1:4f996a4:         if (rdbnam != null && agent != null)
1:4f996a4:         {
1:4f996a4:             try {
1:4f996a4:                 agent.writeRDBNAM(rdbnam);
1:4f996a4:             } catch (DRDAProtocolException e) {} //ignore exceptions while processing
1:4f996a4:         }
1:4f996a4:         // for MGRLVLRM, need to write out the manager levels
1:4f996a4:         if (errorCodePoint == CodePoint.MGRLVLRM)
1:4f996a4:         {
1:4f996a4:             writer.startDdm(CodePoint.MGRLVLLS);
1:4f996a4:             for (int i = 0; i < messageArgs.length ; i += 2)
1:4f996a4:             {
1:4f996a4:                 writer.writeNetworkShort(((Integer)messageArgs[i]).intValue());
1:4f996a4:                 writer.writeNetworkShort(((Integer)messageArgs[i+1]).intValue());
1:4f996a4:             }
1:4f996a4:             writer.endDdm();
1:4f996a4:         }
1:4f996a4:         writer.endDdmAndDss();
1:4f996a4:     }
1:14928b1:     
1:14928b1:     /**
1:14928b1:      * Override getMessage() 
1:14928b1:      * @return the server diagnostic error message for this exception
1:14928b1:      */
1:14928b1:     public String getMessage()
1:14928b1:     {
1:14928b1:         return msg;
1:14928b1:     }
1:2a0eb8d: }
1:eac0369: 
1:eac0369: 
1:1f71856: /**
1:1f71856:  * Class used to transport that fact that we had a timeout and should
1:1f71856:  * *NOT* disconnect the connection.
1:1f71856:  * See DRDAConnThread.run()
1:1f71856:  */
1:1f71856: class DRDASocketTimeoutException extends DRDAProtocolException {
1:1f71856:     DRDASocketTimeoutException(DRDAConnThread t) {
1:1f71856:         super(DRDA_Timeout,t,0,0);
1:1f71856:     }
1:1f71856: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:14928b1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	// A verbose error message string, will be helpful
1: 	// when getMessage() is called on this Exception object
1: 	private String msg;
1:     
/////////////////////////////////////////////////////////////////////////
1:     // Permanent Agent Error (AGNPRMRM) Reply Message indicates that the command
1:     // requested could not be completed because of a permanent error
1:     // condition detected at the target system.
1: 							 CodePoint.AGNPRMRM,
1: 							 CodePoint.SVRCOD_PRMDMG,
/////////////////////////////////////////////////////////////////////////
1:             // retrieve the server diagnostic error message 
1:             String srvdgn = (String)args[2];
1: 			msg = "Execution failed because of Permanent Agent Error: SVRCOD = " +
1: 				"; RDBNAM = "+ rdbnam +"; diagnostic msg = "+ srvdgn;
/////////////////////////////////////////////////////////////////////////
1:         if ( SanityManager.DEBUG )
0:             System.out.println("agentError in " + agent);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Override getMessage() 
1:      * @return the server diagnostic error message for this exception
1:      */
1:     public String getMessage()
1:     {
1:         return msg;
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:     protected static String DRDA_Proto_OBJNSPRM =   "DRDA_Proto_OBJNSPRM";
/////////////////////////////////////////////////////////////////////////
1:      * @param agent     DRDAConnThread  that threw this exception
1:      * @param cpArg     CODPNT value  to pass to send
1:      * @param msgid       The messageid for this message. (needs to be
1:      * @param args         Argments for the message in an Object[]
commit:66527ec
/////////////////////////////////////////////////////////////////////////
1:         Object[] oa = {svrcod, rdbnam, srvdgn};
commit:27fbf33
/////////////////////////////////////////////////////////////////////////
1: 	private static Hashtable<String, DRDAProtocolExceptionInfo> errorInfoTable;
/////////////////////////////////////////////////////////////////////////
1: 	errorInfoTable = new Hashtable<String, DRDAProtocolExceptionInfo>();
commit:953604b
/////////////////////////////////////////////////////////////////////////
1:             agent.trace("agentError in " + agent);
commit:a0f8405
/////////////////////////////////////////////////////////////////////////
1: 			s.consoleExceptionPrintTrace(this);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     DRDAProtocolException is the root of all protocol exceptions that are 
1:     handled in a standard fashion by the DRDA AS.
1:     If a protocol error message needs to send more than 
1:     SVRCOD, an ERRCD and CODPNT arg it should be subclassed
/////////////////////////////////////////////////////////////////////////
1:     /* Static values, used in constructor if there is no associated 
1:        Error Code or the codepoint argument.
1:     */
1:     
1:     protected static final int NO_ASSOC_ERRCD = 0;
1:     protected static final int NO_CODPNT_ARG  = 0;
1:     
1:     private DRDAConnThread agent;
1:     // request correlation id
1:     private int correlationID;
1:     
1:     // correlation token
1:     private byte[] crrtkn;
1:     //Codepoint arg
1:     private int codpntArg;
1: 
1:     private DRDAProtocolExceptionInfo exceptionInfo;
1: 
1:     // CodePoint of this error
1:     private int errorCodePoint;
1:     
1:     // Severity Code
1:     private int svrcod;
1:     
1:     // error code (e.g. SYNERRCD)
1:     private int errcd;
1:     
1:     // messageid for logging errors.
1:     private String  messageid;
1: 
1:     // database name
1:     private String rdbnam;
1:     
1:     // database diagnostic information
1:     private String srvdgn;
1: 
1:     // message arguments
1:     private Object [] messageArgs;
1:     
0:     // A verbose error message string, will be helpful
0:     // when getMessage() is called on this Exception object
0:     private String msg;
1:     
0:     private static Hashtable<String, DRDAProtocolExceptionInfo> errorInfoTable;
1:     
1:     protected static String DRDA_Proto_CMDCHKRM=    "DRDA_Proto_CMDCHKRM";
1:     protected static String DRDA_Proto_CMDNSPRM=    "DRDA_Proto_CMDNSPRM";
1:     protected static String DRDA_Proto_DTAMCHRM=    "DRDA_Proto_DTAMCHRM";
1: 
0:     protected static String DRDA_Proto_OBJNSPRM =    "DRDA_Proto_OBJNSPRM";
1:     protected static String DRDA_Proto_PKGBNARM=    "DRDA_Proto_PKGBNARM";
1:     protected static String DRDA_Proto_PRCCNVRM=   "DRDA_Proto_PRCCNVRM";
1:     protected static String DRDA_Proto_PRMNSRM =   "DRDA_Proto_PRMNSPRM";
1: 
1:     protected static String DRDA_Proto_SYNTAXRM=   "DRDA_Proto_SYNTAXRM";
1:     protected static String DRDA_Proto_VALNSPRM=   "DRDA_Proto_VALNSPRM";
1:     protected static String DRDA_Proto_MGRLVLRM=   "DRDA_Proto_MGRLVLRM";
1:     protected static String DRDA_Proto_RDBNFNRM=   "DRDA_Proto_RDBNFNRM";
1: 
1:     protected static String DRDA_Disconnect=       "DRDA_Disconnect";
1:     protected static String DRDA_AgentError=       "DRDA_AgentError";
1:     static {
1:     /* Create the errorInfoTable
1:        The Hashtable is keyed on messageid and holds 
1:        DRDAProtocolExceptionInfo for each of our messages.
1:     */
1:     
0:     errorInfoTable = new Hashtable<String, DRDAProtocolExceptionInfo>();
1:     
1:     errorInfoTable.put(
1:                DRDA_Proto_CMDCHKRM,
1:                new  DRDAProtocolExceptionInfo(
1:                               CodePoint.CMDCHKRM,
1:                               CodePoint.SVRCOD_ERROR,
1:                               NO_ASSOC_ERRCD,
1:                               false));
1:     errorInfoTable.put(
1:                DRDA_Proto_CMDNSPRM,
1:                new  DRDAProtocolExceptionInfo(
1:                               CodePoint.CMDNSPRM,
1:                               CodePoint.SVRCOD_ERROR,
1:                               NO_ASSOC_ERRCD,
1:                               true));
1:     errorInfoTable.put(
1:                DRDA_Proto_DTAMCHRM,
1:                new  DRDAProtocolExceptionInfo(
1:                               CodePoint.DTAMCHRM,
1:                               CodePoint.SVRCOD_ERROR,
1:                               NO_ASSOC_ERRCD,
1:                               false));
1:     errorInfoTable.put(
1:                DRDA_Proto_OBJNSPRM,
1:                new  DRDAProtocolExceptionInfo(
1:                               CodePoint.OBJNSPRM,
1:                               CodePoint.SVRCOD_ERROR,
1:                               NO_ASSOC_ERRCD,
1:                               true));
1:         
1:     errorInfoTable.put(
1:                        DRDA_Proto_PKGBNARM,
1:                        new  DRDAProtocolExceptionInfo(
1:                                CodePoint.PKGBNARM,
1:                                CodePoint.SVRCOD_ERROR,
1:                                NO_ASSOC_ERRCD,
1:                                false));
1:                
1:     errorInfoTable.put(DRDA_Proto_PRCCNVRM,
1:                new DRDAProtocolExceptionInfo(
1:                              CodePoint.PRCCNVRM,
1:                              CodePoint.SVRCOD_ERROR,
1:                              CodePoint.PRCCNVCD,
1:                              false));
1:     errorInfoTable.put(DRDA_Proto_SYNTAXRM,
1:                new DRDAProtocolExceptionInfo(
1:                              CodePoint.SYNTAXRM,
1:                              CodePoint.SVRCOD_ERROR,
1:                              CodePoint.SYNERRCD,
1:                              true));
1:     errorInfoTable.put(DRDA_Proto_VALNSPRM,
1:                new DRDAProtocolExceptionInfo(
1:                              CodePoint.VALNSPRM,
1:                              CodePoint.SVRCOD_ERROR,
1:                              NO_ASSOC_ERRCD,
1:                              true));
1:     errorInfoTable.put(DRDA_Proto_MGRLVLRM,
1:                new DRDAProtocolExceptionInfo(
1:                              CodePoint.MGRLVLRM,
1:                              CodePoint.SVRCOD_ERROR,
1:                              NO_ASSOC_ERRCD,
1:                              false));
1:     errorInfoTable.put(DRDA_Proto_RDBNFNRM,
1:                new DRDAProtocolExceptionInfo(
1:                              CodePoint.RDBNFNRM,
1:                              CodePoint.SVRCOD_ERROR,
1:                              NO_ASSOC_ERRCD,
1:                              false));
1:                
1:     errorInfoTable.put(DRDA_Disconnect,
1:                new DRDAProtocolExceptionInfo(
1:                              0,
1:                              0,
1:                              NO_ASSOC_ERRCD,
1:                              false));
1:     errorInfoTable.put(DRDA_AgentError,
1:                new DRDAProtocolExceptionInfo(
0:                              CodePoint.AGNPRMRM,
0:                              CodePoint.SVRCOD_PRMDMG,
1:                              NO_ASSOC_ERRCD,
1:                              false));
1:     errorInfoTable.put(DRDA_Timeout,
1:                new DRDAProtocolExceptionInfo(
1:                              0,
1:                              0,
1:                              NO_ASSOC_ERRCD,
1:                              false));
1:     }
1:         
1:     
1:     /**  Create a new Protocol exception 
1:      *
0:      * @param agent        DRDAConnThread  that threw this exception
1:      *
0:      * @param cpArg        CODPNT value  to pass to send
1:      *
1:      *
0:      * @param msgid          The messageid for this message. (needs to be
1:      * integrated into logging mechanism)
1:      *
0:      * @param args           Argments for the message in an Object[]
1:      *
1:      */
1:     
1:     DRDAProtocolException(String msgid,
1:                                     DRDAConnThread agent, 
1:                                     int cpArg, 
1:                                     int errCdArg, Object []args)
1:                         
1:     {
1:         
1:         boolean agentError = false;
1:         exceptionInfo = 
1:             (DRDAProtocolExceptionInfo) errorInfoTable.get(msgid);
1:                 
1:         if (agent != null)
1:         {
1:             this.correlationID = agent.getCorrelationID();
1:             this.crrtkn = agent.getCrrtkn();
1:         }
1:         this.codpntArg= cpArg;
1:         this.errorCodePoint = exceptionInfo.errorCodePoint;
1:         this.errcd = errCdArg;
1:         this.messageid = msgid;
1:         if (msgid.equals(DRDA_AgentError))
1:         {
1:             this.svrcod = ((Integer)args[0]).intValue();
1:             this.rdbnam = (String)args[1];
0:             msg = "Execution failed because of Permanent Agent Error: SVRCOD = " +
1:                 java.lang.Integer.toHexString(this.svrcod) +
0:                 "; RDBNAM = "+ rdbnam +"; diagnostic msg = "+ srvdgn;
1:             agentError = true;
1:         }
1:         else if (msgid.equals(DRDA_Proto_RDBNFNRM))
1:         {
1:             this.svrcod = exceptionInfo.svrcod;
1:             this.rdbnam = (String)args[0];
1:             msg = "Execution failed because of Distributed Protocol Error:  " 
1:                 + messageid +
1:                 "; RDBNAM = "+ rdbnam;
1:         }
1:         else
1:         {
1:             this.svrcod = exceptionInfo.svrcod;
1:             msg = "Execution failed because of a Distributed Protocol Error:  " 
1:                 + messageid +
1:                 "; CODPNT arg  = " + java.lang.Integer.toHexString(cpArg)  +
1:                 "; Error Code Value = " + java.lang.Integer.toHexString(errCdArg);
1:             if (msgid.equals(DRDA_Proto_SYNTAXRM)) {
1:                 msg += ". Plaintext connection attempt from an SSL enabled client?";
1:             }
1:         }
1:         
1:         
1:         if (!agentError && args != null)
1:         {
1:             messageArgs = args;
1:             for (int i = 0; i < args.length; i++)
1:             {
1:                 //args contain managers and manager levels display in hex
1:                 if (msgid.equals(DRDA_Proto_MGRLVLRM))
1:                     msg += "," + 
1:                         java.lang.Integer.toHexString(((Integer)args[i]).intValue());
1:                 else
1:                     msg += "," + args[i];
1:                 
1:             }
1:         }
1:         // for now dump all errors except disconnects to console        
1:         // and log
1:         if (!isDisconnectException())
1:         {
1:             DRDAConnThread.println2Log(agent.getDbName(),
1:                                    agent.getSession().drdaID, 
1:                                    msg);
1:             NetworkServerControlImpl s = agent.getServer();
0:             s.consoleExceptionPrintTrace(this);
1:         }
1:     }
1:     
1:     // Constructor with no additional args
1:     DRDAProtocolException(String msgid,
1:                                     DRDAConnThread agent, 
1:                                     int cpArg, 
1:                                     int errCdArg)
1:     {
1:         this(msgid,agent,  cpArg, errCdArg, (Object []) null);
1:     }
1:     protected static DRDAProtocolException newDisconnectException(DRDAConnThread
1:                                                                   agent,Object[] args)
1:     {
1:         return new DRDAProtocolException(DRDA_Disconnect,
1:                                          agent,
1:                                          NO_CODPNT_ARG,
1:                                          NO_ASSOC_ERRCD,
1:                                          args);
1:         
1:     }
1:     
1:     protected static DRDAProtocolException newAgentError(DRDAConnThread agent,
1:         int svrcod, String rdbnam, String srvdgn)
1:     {
1:         return new DRDAProtocolException(DRDA_AgentError,
1:                                         agent,
1:                                         NO_CODPNT_ARG,
1:                                         NO_ASSOC_ERRCD,
1:                                         oa);
1:     }
1:     
1:     protected final boolean isDisconnectException()
1:     {
1:         return (errorCodePoint == 0);
1:     }
1:     
1:     /** write will write the Error information to the buffer.
1:      * Most errors will write only the codepoint and svrcod 
1:      * Where appropriate the codepoint specific error code and
1:      * codePoint of origin will be written
1:      *
1:      * @param writer  The DDMWriter for the agent.
1:      */
1:     
1:     protected void write(DDMWriter writer)
1:     {
1:         //Writing Protocol Error
1:         writer.createDssReply();
1:         writer.startDdm(errorCodePoint);
1:         writer.writeScalar2Bytes(CodePoint.SVRCOD,svrcod);
1:         if (exceptionInfo.sendsCodpntArg)
1:             writer.writeScalar2Bytes(CodePoint.CODPNT,codpntArg);
1:         if (exceptionInfo.errCdCodePoint !=  NO_ASSOC_ERRCD)
1:             writer.writeScalar1Byte(exceptionInfo.errCdCodePoint,
1:                                     errcd);
1:         if (rdbnam != null && agent != null)
1:         {
1:             try {
1:                 agent.writeRDBNAM(rdbnam);
1:             } catch (DRDAProtocolException e) {} //ignore exceptions while processing
1:         }
1:         // for MGRLVLRM, need to write out the manager levels
1:         if (errorCodePoint == CodePoint.MGRLVLRM)
1:         {
1:             writer.startDdm(CodePoint.MGRLVLLS);
1:             for (int i = 0; i < messageArgs.length ; i += 2)
1:             {
1:                 writer.writeNetworkShort(((Integer)messageArgs[i]).intValue());
1:                 writer.writeNetworkShort(((Integer)messageArgs[i+1]).intValue());
1:             }
1:             writer.endDdm();
1:         }
1:         writer.endDdmAndDss();
1:     }
commit:b0902f1
/////////////////////////////////////////////////////////////////////////
1:     protected static String DRDA_InvalidClient =   "DRDA_InvalidClient";
commit:2e4a44e
/////////////////////////////////////////////////////////////////////////
commit:9085abb
/////////////////////////////////////////////////////////////////////////
0: 			NetworkServerControlImpl s = agent.getServer();
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:2a0eb8d
/////////////////////////////////////////////////////////////////////////
0: 			if (msgid.equals(DRDA_Proto_SYNTAXRM)) {
0: 				msg += ". Plaintext connection attempt from an SSL enabled client?";
1: 			}
commit:1f71856
/////////////////////////////////////////////////////////////////////////
1:     protected static String DRDA_Timeout=          "DRDA_Timeout";
/////////////////////////////////////////////////////////////////////////
1: 
0: 	errorInfoTable.put(DRDA_Timeout,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 0,
0: 							 0,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
1: 
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Class used to transport that fact that we had a timeout and should
1:  * *NOT* disconnect the connection.
1:  * See DRDAConnThread.run()
1:  */
1: class DRDASocketTimeoutException extends DRDAProtocolException {
1:     DRDASocketTimeoutException(DRDAConnThread t) {
1:         super(DRDA_Timeout,t,0,0);
1:     }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1: class DRDAProtocolException extends Exception
/////////////////////////////////////////////////////////////////////////
0: 	DRDAProtocolException(String msgid,
/////////////////////////////////////////////////////////////////////////
0: 	DRDAProtocolException(String msgid,
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.DRDAProtocolException
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: /*
1: 
1: /**
0: 	DRDAProtocolException is the root of all protocol exceptions that are 
0: 	handled in a standard fashion by the DRDA AS.
0: 	If a protocol error message needs to send more than 
0: 	SVRCOD, an ERRCD and CODPNT arg it should be subclassed
1: 
0: 	@author marsden
1: */
1: 
1: package org.apache.derby.impl.drda;
1: import java.util.Hashtable;
1: 
0: public class DRDAProtocolException extends Exception
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	
0: 	/* Static values, used in constructor if there is no associated 
0: 	   Error Code or the codepoint argument.
1: 	*/
1: 	
0: 	protected static final int NO_ASSOC_ERRCD = 0;
0: 	protected static final int NO_CODPNT_ARG  = 0;
1: 
1: 	
0: 	private DRDAConnThread agent;
1: 
0: 	// request correlation id
0: 	private int correlationID;
1: 	
0: 	// correlation token
0: 	private byte[] crrtkn;
1: 
0: 	//Codepoint arg
0: 	private int codpntArg;
1: 
0: 	private DRDAProtocolExceptionInfo exceptionInfo;
1: 
0: 	// CodePoint of this error
0: 	private int errorCodePoint;
1: 	
0: 	// Severity Code
0: 	private int svrcod;
1: 	
0: 	// error code (e.g. SYNERRCD)
0: 	private int errcd;
1: 	
0: 	// messageid for logging errors.
0: 	private String  messageid;
1: 
0: 	// database name
0: 	private String rdbnam;
1: 	
0: 	// database diagnostic information
0: 	private String srvdgn;
1: 
0: 	// message arguments
0: 	private Object [] messageArgs;
1: 	
1: 	
0: 	private static Hashtable errorInfoTable;
1: 	
0: 	protected static String DRDA_Proto_CMDCHKRM=	"DRDA_Proto_CMDCHKRM";
0: 	protected static String DRDA_Proto_CMDNSPRM=	"DRDA_Proto_CMDNSPRM";
0: 	protected static String DRDA_Proto_DTAMCHRM=	"DRDA_Proto_DTAMCHRM";
1: 
0: 	protected static String DRDA_Proto_OBJNSPRM =	"DRDA_Proto_OBJNSPRM";
0: 	protected static String DRDA_Proto_PKGBNARM=	"DRDA_Proto_PKGBNARM";
0: 	protected static String DRDA_Proto_PRCCNVRM=   "DRDA_Proto_PRCCNVRM";
0: 	protected static String DRDA_Proto_PRMNSRM =   "DRDA_Proto_PRMNSPRM";
1: 
0: 	protected static String DRDA_Proto_SYNTAXRM=   "DRDA_Proto_SYNTAXRM";
0: 	protected static String DRDA_Proto_VALNSPRM=   "DRDA_Proto_VALNSPRM";
0: 	protected static String DRDA_Proto_MGRLVLRM=   "DRDA_Proto_MGRLVLRM";
0: 	protected static String DRDA_Proto_RDBNFNRM=   "DRDA_Proto_RDBNFNRM";
1: 
0: 	protected static String DRDA_Disconnect=	   "DRDA_Disconnect";
0: 	protected static String DRDA_AgentError=	   "DRDA_AgentError";
1: 
0: 	static {
0: 	/* Create the errorInfoTable
0: 	   The Hashtable is keyed on messageid and holds 
0: 	   DRDAProtocolExceptionInfo for each of our messages.
1: 	*/
1: 	
0: 	errorInfoTable = new Hashtable();
1: 	
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_CMDCHKRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.CMDCHKRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  false));
1: 
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_CMDNSPRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.CMDNSPRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  true));
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_DTAMCHRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.DTAMCHRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  false));
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_OBJNSPRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.OBJNSPRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  true));
1: 		
0: 	errorInfoTable.put(
0: 					   DRDA_Proto_PKGBNARM,
0: 					   new  DRDAProtocolExceptionInfo(
0: 							   CodePoint.PKGBNARM,
0: 							   CodePoint.SVRCOD_ERROR,
0: 							   NO_ASSOC_ERRCD,
0: 							   false));
1: 			   
0: 	errorInfoTable.put(DRDA_Proto_PRCCNVRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.PRCCNVRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 CodePoint.PRCCNVCD,
0: 							 false));
1: 
0: 	errorInfoTable.put(DRDA_Proto_SYNTAXRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.SYNTAXRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 CodePoint.SYNERRCD,
0: 							 true));
1: 
0: 	errorInfoTable.put(DRDA_Proto_VALNSPRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.VALNSPRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 true));
1: 
0: 	errorInfoTable.put(DRDA_Proto_MGRLVLRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.MGRLVLRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
1: 
0: 	errorInfoTable.put(DRDA_Proto_RDBNFNRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.RDBNFNRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
1: 
1: 			   
0: 	errorInfoTable.put(DRDA_Disconnect,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 0,
0: 							 0,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
1: 
0: 	errorInfoTable.put(DRDA_AgentError,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 0,
0: 							 0,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
1: 
0: 	}
1: 		
1: 	
0: 	/**  Create a new Protocol exception 
0: 	 *
0: 	 * @param agent		DRDAConnThread  that threw this exception
0: 	 *
0: 	 * @param cpArg		CODPNT value  to pass to send
0: 	 *
0: 	 *
0: 	 * @param msgid		  The messageid for this message. (needs to be
0: 	 * integrated into logging mechanism)
0: 	 *
0: 	 * @param args		   Argments for the message in an Object[]
0: 	 *
1: 	 */
1: 	
0: 	protected DRDAProtocolException(String msgid,
0: 									DRDAConnThread agent, 
0: 									int cpArg, 
0: 									int errCdArg, Object []args)
1: 						
1: 	{
1: 		
0: 		boolean agentError = false;
1: 
0: 		exceptionInfo = 
0: 			(DRDAProtocolExceptionInfo) errorInfoTable.get(msgid);
1: 				
0: 		if (agent != null)
1: 		{
0: 			this.correlationID = agent.getCorrelationID();
0: 			this.crrtkn = agent.getCrrtkn();
0: 		}
1: 
0: 		this.codpntArg= cpArg;
0: 		this.errorCodePoint = exceptionInfo.errorCodePoint;
0: 		this.errcd = errCdArg;
0: 		this.messageid = msgid;
1: 
0: 		String msg;
0: 		if (msgid.equals(DRDA_AgentError))
1: 		{
0: 			this.svrcod = ((Integer)args[0]).intValue();
0: 			this.rdbnam = (String)args[1];
0: 			msg = "Execution failed because of Permant Agent Error: SVRCOD = " +
0: 				java.lang.Integer.toHexString(this.svrcod) +
0: 				"; RDBNAM = "+ rdbnam;
0: 			agentError = true;
0: 		}
0: 		else if (msgid.equals(DRDA_Proto_RDBNFNRM))
1: 		{
0: 			this.svrcod = exceptionInfo.svrcod;
0: 			this.rdbnam = (String)args[0];
0: 			msg = "Execution failed because of Distributed Protocol Error:  " 
0: 				+ messageid +
0: 				"; RDBNAM = "+ rdbnam;
0: 		}
0: 		else
1: 		{
0: 			this.svrcod = exceptionInfo.svrcod;
0: 			msg = "Execution failed because of a Distributed Protocol Error:  " 
0: 				+ messageid +
0: 				"; CODPNT arg  = " + java.lang.Integer.toHexString(cpArg)  +
0: 				"; Error Code Value = " + java.lang.Integer.toHexString(errCdArg);
0: 		}
1: 		
1: 		
0: 		if (!agentError && args != null)
1: 		{
0: 			messageArgs = args;
0: 			for (int i = 0; i < args.length; i++)
1: 			{
0: 				//args contain managers and manager levels display in hex
0: 				if (msgid.equals(DRDA_Proto_MGRLVLRM))
0: 					msg += "," + 
0: 						java.lang.Integer.toHexString(((Integer)args[i]).intValue());
0: 				else
0: 					msg += "," + args[i];
1: 				
0: 			}
0: 		}
1: 
1: 
0: 		// for now dump all errors except disconnects to console		
0: 		// and log
0: 		if (!isDisconnectException())
1: 		{
0: 			DRDAConnThread.println2Log(agent.getDbName(),
0: 								   agent.getSession().drdaID, 
0: 								   msg);
0: 			DB2jServerImpl s = agent.getServer();
0: 			s.consoleMessage(msg);
0: 			this.printStackTrace(s.logWriter);
0: 		}
0: 	}
1: 	
0: 	// Constructor with no additional args
0: 	protected DRDAProtocolException(String msgid,
0: 									DRDAConnThread agent, 
0: 									int cpArg, 
0: 									int errCdArg)
1: 	{
0: 		this(msgid,agent,  cpArg, errCdArg, (Object []) null);
0: 	}
1: 
1: 
0: 	protected static DRDAProtocolException newDisconnectException(DRDAConnThread
0: 																  agent,Object[] args)
1: 	{
0: 		return new DRDAProtocolException(DRDA_Disconnect,
0: 										 agent,
0: 										 NO_CODPNT_ARG,
0: 										 NO_ASSOC_ERRCD,
0: 										 args);
1: 		
0: 	}
1: 	
0: 	protected static DRDAProtocolException newAgentError(DRDAConnThread agent,
0: 		int svrcod, String rdbnam, String srvdgn)
1: 	{
0: 		System.out.println("agent" + agent);
0: 		Object[] oa = {new Integer(svrcod), rdbnam, srvdgn};
0: 		return new DRDAProtocolException(DRDA_AgentError,
0: 										agent,
0: 										NO_CODPNT_ARG,
0: 										NO_ASSOC_ERRCD,
0: 										oa);
0: 	}
1: 	
0: 	protected final byte[] getCrrtkn()
1: 	{
0: 		return crrtkn;
0: 	}
1: 	
0: 	protected final int getCodpntArg()
1: 	{
0: 		return codpntArg;
0: 	}
1: 	
0: 	protected final int getErrorCodePoint()
1: 	{
0: 		return errorCodePoint;
0: 	}
1: 	
0: 	protected final int getSvrcod()
1: 	{
0: 		return  svrcod;
0: 	}
1: 	
0: 	protected final int getErrcd()
1: 	{
0: 		return  errcd;
0: 	}
1: 	
0: 	protected final String getMessageid()
1: 	{
0: 		return  messageid;
0: 	}
1: 	
1: 	
0: 	protected final boolean isDisconnectException()
1: 	{
0: 		return (errorCodePoint == 0);
0: 	}
1: 	
0: 	/** write will write the Error information to the buffer.
0: 	 * Most errors will write only the codepoint and svrcod 
0: 	 * Where appropriate the codepoint specific error code and
0: 	 * codePoint of origin will be written
0: 	 *
0: 	 * @param writer  The DDMWriter for the agent.
1: 	 */
1: 	
0: 	protected void write(DDMWriter writer)
1: 	{
0: 		//Writing Protocol Error
0: 		writer.createDssReply();
0: 		writer.startDdm(errorCodePoint);
0: 		writer.writeScalar2Bytes(CodePoint.SVRCOD,svrcod);
0: 		if (exceptionInfo.sendsCodpntArg)
0: 			writer.writeScalar2Bytes(CodePoint.CODPNT,codpntArg);
0: 		if (exceptionInfo.errCdCodePoint !=  NO_ASSOC_ERRCD)
0: 			writer.writeScalar1Byte(exceptionInfo.errCdCodePoint,
0: 									errcd);
0: 		if (rdbnam != null && agent != null)
1: 		{
0: 			try {
0: 				agent.writeRDBNAM(rdbnam);
0: 			} catch (DRDAProtocolException e) {} //ignore exceptions while processing
0: 		}
0: 		// for MGRLVLRM, need to write out the manager levels
0: 		if (errorCodePoint == CodePoint.MGRLVLRM)
1: 		{
0: 			writer.startDdm(CodePoint.MGRLVLLS);
0: 			for (int i = 0; i < messageArgs.length ; i += 2)
1: 			{
0: 				writer.writeNetworkShort(((Integer)messageArgs[i]).intValue());
0: 				writer.writeNetworkShort(((Integer)messageArgs[i+1]).intValue());
0: 			}
0: 			writer.endDdm();
0: 		}
0: 		writer.endDdmAndDss();
0: 	}
0: }
1: 
1: 
1: 
1: 
1: 
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: /*
0: 
0: /**
0: 	DRDAProtocolException is the root of all protocol exceptions that are 
0: 	handled in a standard fashion by the DRDA AS.
0: 	If a protocol error message needs to send more than 
0: 	SVRCOD, an ERRCD and CODPNT arg it should be subclassed
0: 
0: 	@author marsden
0: */
0: 
0: package org.apache.derby.impl.drda;
0: import java.util.Hashtable;
0: 
0: public class DRDAProtocolException extends Exception
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	
0: 	/* Static values, used in constructor if there is no associated 
0: 	   Error Code or the codepoint argument.
0: 	*/
0: 	
0: 	protected static final int NO_ASSOC_ERRCD = 0;
0: 	protected static final int NO_CODPNT_ARG  = 0;
0: 
0: 	
0: 	private DRDAConnThread agent;
0: 
0: 	// request correlation id
0: 	private int correlationID;
0: 	
0: 	// correlation token
0: 	private byte[] crrtkn;
0: 
0: 	//Codepoint arg
0: 	private int codpntArg;
0: 
0: 	private DRDAProtocolExceptionInfo exceptionInfo;
0: 
0: 	// CodePoint of this error
0: 	private int errorCodePoint;
0: 	
0: 	// Severity Code
0: 	private int svrcod;
0: 	
0: 	// error code (e.g. SYNERRCD)
0: 	private int errcd;
0: 	
0: 	// messageid for logging errors.
0: 	private String  messageid;
0: 
0: 	// database name
0: 	private String rdbnam;
0: 	
0: 	// database diagnostic information
0: 	private String srvdgn;
0: 
0: 	// message arguments
0: 	private Object [] messageArgs;
0: 	
0: 	
0: 	private static Hashtable errorInfoTable;
0: 	
0: 	protected static String DRDA_Proto_CMDCHKRM=	"DRDA_Proto_CMDCHKRM";
0: 	protected static String DRDA_Proto_CMDNSPRM=	"DRDA_Proto_CMDNSPRM";
0: 	protected static String DRDA_Proto_DTAMCHRM=	"DRDA_Proto_DTAMCHRM";
0: 
0: 	protected static String DRDA_Proto_OBJNSPRM =	"DRDA_Proto_OBJNSPRM";
0: 	protected static String DRDA_Proto_PKGBNARM=	"DRDA_Proto_PKGBNARM";
0: 	protected static String DRDA_Proto_PRCCNVRM=   "DRDA_Proto_PRCCNVRM";
0: 	protected static String DRDA_Proto_PRMNSRM =   "DRDA_Proto_PRMNSPRM";
0: 
0: 	protected static String DRDA_Proto_SYNTAXRM=   "DRDA_Proto_SYNTAXRM";
0: 	protected static String DRDA_Proto_VALNSPRM=   "DRDA_Proto_VALNSPRM";
0: 	protected static String DRDA_Proto_MGRLVLRM=   "DRDA_Proto_MGRLVLRM";
0: 	protected static String DRDA_Proto_RDBNFNRM=   "DRDA_Proto_RDBNFNRM";
0: 
0: 	protected static String DRDA_Disconnect=	   "DRDA_Disconnect";
0: 	protected static String DRDA_AgentError=	   "DRDA_AgentError";
0: 
0: 	static {
0: 	/* Create the errorInfoTable
0: 	   The Hashtable is keyed on messageid and holds 
0: 	   DRDAProtocolExceptionInfo for each of our messages.
0: 	*/
0: 	
0: 	errorInfoTable = new Hashtable();
0: 	
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_CMDCHKRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.CMDCHKRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  false));
0: 
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_CMDNSPRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.CMDNSPRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  true));
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_DTAMCHRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.DTAMCHRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  false));
0: 	errorInfoTable.put(
0: 			   DRDA_Proto_OBJNSPRM,
0: 			   new  DRDAProtocolExceptionInfo(
0: 							  CodePoint.OBJNSPRM,
0: 							  CodePoint.SVRCOD_ERROR,
0: 							  NO_ASSOC_ERRCD,
0: 							  true));
0: 		
0: 	errorInfoTable.put(
0: 					   DRDA_Proto_PKGBNARM,
0: 					   new  DRDAProtocolExceptionInfo(
0: 							   CodePoint.PKGBNARM,
0: 							   CodePoint.SVRCOD_ERROR,
0: 							   NO_ASSOC_ERRCD,
0: 							   false));
0: 			   
0: 	errorInfoTable.put(DRDA_Proto_PRCCNVRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.PRCCNVRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 CodePoint.PRCCNVCD,
0: 							 false));
0: 
0: 	errorInfoTable.put(DRDA_Proto_SYNTAXRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.SYNTAXRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 CodePoint.SYNERRCD,
0: 							 true));
0: 
0: 	errorInfoTable.put(DRDA_Proto_VALNSPRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.VALNSPRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 true));
0: 
0: 	errorInfoTable.put(DRDA_Proto_MGRLVLRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.MGRLVLRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
0: 
0: 	errorInfoTable.put(DRDA_Proto_RDBNFNRM,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 CodePoint.RDBNFNRM,
0: 							 CodePoint.SVRCOD_ERROR,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
0: 
0: 			   
0: 	errorInfoTable.put(DRDA_Disconnect,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 0,
0: 							 0,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
0: 
0: 	errorInfoTable.put(DRDA_AgentError,
0: 			   new DRDAProtocolExceptionInfo(
0: 							 0,
0: 							 0,
0: 							 NO_ASSOC_ERRCD,
0: 							 false));
0: 
0: 	}
0: 		
0: 	
0: 	/**  Create a new Protocol exception 
0: 	 *
0: 	 * @param agent		DRDAConnThread  that threw this exception
0: 	 *
0: 	 * @param cpArg		CODPNT value  to pass to send
0: 	 *
0: 	 *
0: 	 * @param msgid		  The messageid for this message. (needs to be
0: 	 * integrated into logging mechanism)
0: 	 *
0: 	 * @param args		   Argments for the message in an Object[]
0: 	 *
0: 	 */
0: 	
0: 	protected DRDAProtocolException(String msgid,
0: 									DRDAConnThread agent, 
0: 									int cpArg, 
0: 									int errCdArg, Object []args)
0: 						
0: 	{
0: 		
0: 		boolean agentError = false;
0: 
0: 		exceptionInfo = 
0: 			(DRDAProtocolExceptionInfo) errorInfoTable.get(msgid);
0: 				
0: 		if (agent != null)
0: 		{
0: 			this.correlationID = agent.getCorrelationID();
0: 			this.crrtkn = agent.getCrrtkn();
0: 		}
0: 
0: 		this.codpntArg= cpArg;
0: 		this.errorCodePoint = exceptionInfo.errorCodePoint;
0: 		this.errcd = errCdArg;
0: 		this.messageid = msgid;
0: 
0: 		String msg;
0: 		if (msgid.equals(DRDA_AgentError))
0: 		{
0: 			this.svrcod = ((Integer)args[0]).intValue();
0: 			this.rdbnam = (String)args[1];
0: 			msg = "Execution failed because of Permant Agent Error: SVRCOD = " +
0: 				java.lang.Integer.toHexString(this.svrcod) +
0: 				"; RDBNAM = "+ rdbnam;
0: 			agentError = true;
0: 		}
0: 		else if (msgid.equals(DRDA_Proto_RDBNFNRM))
0: 		{
0: 			this.svrcod = exceptionInfo.svrcod;
0: 			this.rdbnam = (String)args[0];
0: 			msg = "Execution failed because of Distributed Protocol Error:  " 
0: 				+ messageid +
0: 				"; RDBNAM = "+ rdbnam;
0: 		}
0: 		else
0: 		{
0: 			this.svrcod = exceptionInfo.svrcod;
0: 			msg = "Execution failed because of a Distributed Protocol Error:  " 
0: 				+ messageid +
0: 				"; CODPNT arg  = " + java.lang.Integer.toHexString(cpArg)  +
0: 				"; Error Code Value = " + java.lang.Integer.toHexString(errCdArg);
0: 		}
0: 		
0: 		
0: 		if (!agentError && args != null)
0: 		{
0: 			messageArgs = args;
0: 			for (int i = 0; i < args.length; i++)
0: 			{
0: 				//args contain managers and manager levels display in hex
0: 				if (msgid.equals(DRDA_Proto_MGRLVLRM))
0: 					msg += "," + 
0: 						java.lang.Integer.toHexString(((Integer)args[i]).intValue());
0: 				else
0: 					msg += "," + args[i];
0: 				
0: 			}
0: 		}
0: 
0: 
0: 		// for now dump all errors except disconnects to console		
0: 		// and log
0: 		if (!isDisconnectException())
0: 		{
0: 			DRDAConnThread.println2Log(agent.getDbName(),
0: 								   agent.getSession().drdaID, 
0: 								   msg);
0: 			DB2jServerImpl s = agent.getServer();
0: 			s.consoleMessage(msg);
0: 			this.printStackTrace(s.logWriter);
0: 		}
0: 	}
0: 	
0: 	// Constructor with no additional args
0: 	protected DRDAProtocolException(String msgid,
0: 									DRDAConnThread agent, 
0: 									int cpArg, 
0: 									int errCdArg)
0: 	{
0: 		this(msgid,agent,  cpArg, errCdArg, (Object []) null);
0: 	}
0: 
0: 
0: 	protected static DRDAProtocolException newDisconnectException(DRDAConnThread
0: 																  agent,Object[] args)
0: 	{
0: 		return new DRDAProtocolException(DRDA_Disconnect,
0: 										 agent,
0: 										 NO_CODPNT_ARG,
0: 										 NO_ASSOC_ERRCD,
0: 										 args);
0: 		
0: 	}
0: 	
0: 	protected static DRDAProtocolException newAgentError(DRDAConnThread agent,
0: 		int svrcod, String rdbnam, String srvdgn)
0: 	{
0: 		System.out.println("agent" + agent);
0: 		Object[] oa = {new Integer(svrcod), rdbnam, srvdgn};
0: 		return new DRDAProtocolException(DRDA_AgentError,
0: 										agent,
0: 										NO_CODPNT_ARG,
0: 										NO_ASSOC_ERRCD,
0: 										oa);
0: 	}
0: 	
0: 	protected final byte[] getCrrtkn()
0: 	{
0: 		return crrtkn;
0: 	}
0: 	
0: 	protected final int getCodpntArg()
0: 	{
0: 		return codpntArg;
0: 	}
0: 	
0: 	protected final int getErrorCodePoint()
0: 	{
0: 		return errorCodePoint;
0: 	}
0: 	
0: 	protected final int getSvrcod()
0: 	{
0: 		return  svrcod;
0: 	}
0: 	
0: 	protected final int getErrcd()
0: 	{
0: 		return  errcd;
0: 	}
0: 	
0: 	protected final String getMessageid()
0: 	{
0: 		return  messageid;
0: 	}
0: 	
0: 	
0: 	protected final boolean isDisconnectException()
0: 	{
0: 		return (errorCodePoint == 0);
0: 	}
0: 	
0: 	/** write will write the Error information to the buffer.
0: 	 * Most errors will write only the codepoint and svrcod 
0: 	 * Where appropriate the codepoint specific error code and
0: 	 * codePoint of origin will be written
0: 	 *
0: 	 * @param writer  The DDMWriter for the agent.
0: 	 */
0: 	
0: 	protected void write(DDMWriter writer)
0: 	{
0: 		//Writing Protocol Error
0: 		writer.createDssReply();
0: 		writer.startDdm(errorCodePoint);
0: 		writer.writeScalar2Bytes(CodePoint.SVRCOD,svrcod);
0: 		if (exceptionInfo.sendsCodpntArg)
0: 			writer.writeScalar2Bytes(CodePoint.CODPNT,codpntArg);
0: 		if (exceptionInfo.errCdCodePoint !=  NO_ASSOC_ERRCD)
0: 			writer.writeScalar1Byte(exceptionInfo.errCdCodePoint,
0: 									errcd);
0: 		if (rdbnam != null && agent != null)
0: 		{
0: 			try {
0: 				agent.writeRDBNAM(rdbnam);
0: 			} catch (DRDAProtocolException e) {} //ignore exceptions while processing
0: 		}
0: 		// for MGRLVLRM, need to write out the manager levels
0: 		if (errorCodePoint == CodePoint.MGRLVLRM)
0: 		{
0: 			writer.startDdm(CodePoint.MGRLVLLS);
0: 			for (int i = 0; i < messageArgs.length ; i += 2)
0: 			{
0: 				writer.writeNetworkShort(((Integer)messageArgs[i]).intValue());
0: 				writer.writeNetworkShort(((Integer)messageArgs[i+1]).intValue());
0: 			}
0: 			writer.endDdm();
0: 		}
0: 		writer.endDdmAndDss();
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================