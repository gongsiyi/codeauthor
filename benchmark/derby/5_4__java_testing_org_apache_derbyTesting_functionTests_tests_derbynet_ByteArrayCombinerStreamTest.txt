1:956354d: /*
1:956354d:     Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest
8:956354d: 
1:956354d:     Licensed to the Apache Software Foundation (ASF) under one
1:956354d:     or more contributor license agreements.  See the NOTICE file
1:956354d:     distributed with this work for additional information
1:956354d:     regarding copyright ownership.  The ASF licenses this file
1:956354d:     to you under the Apache License, Version 2.0 (the
1:956354d:     "License"); you may not use this file except in compliance
1:956354d:     with the License.  You may obtain a copy of the License at
1:956354d: 
1:956354d:     http://www.apache.org/licenses/LICENSE-2.0
1:956354d: 
1:956354d:     Unless required by applicable law or agreed to in writing,
1:956354d:     software distributed under the License is distributed on an
1:956354d:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:956354d:     KIND, either express or implied.  See the License for the
1:956354d:     specific language governing permissions and limitations
1:956354d:     under the License.
1:956354d: */
1:956354d: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:956354d: 
1:1ae02c9: import java.io.IOException;
1:956354d: import java.util.ArrayList;
1:956354d: import java.util.Arrays;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.client.am.ByteArrayCombinerStream;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:90e68d8: 
1:956354d: /**
1:956354d:  * Test functionality of <code>ByteArrayCombinerStream</code>.
1:956354d:  */
1:956354d: public class ByteArrayCombinerStreamTest
1:956354d:     extends BaseTestCase {
1:956354d: 
1:956354d:     private static final byte[] defaultArray = {
1:956354d:             65,66,67,68,69,70,71,72,73,74,75,76,
1:956354d:             77,78,79,80,81,82,83,84,85,86,87,88};
1:956354d: 
1:956354d:     private ByteArrayCombinerStream combiner;
1:ef4a7ba: 
1:956354d:     public ByteArrayCombinerStreamTest(String name) {
1:956354d:         super(name);
1:956354d:     }
1:956354d: 
1:956354d:     public void testCombineNullRead()
1:956354d:             throws IOException {
1:ef4a7ba:         combiner = new ByteArrayCombinerStream(null, 0);
1:956354d:         assertEquals(-1, combiner.read());
1:956354d:     }
1:956354d: 
1:956354d:     public void testCombineNullReadArray()
1:956354d:             throws IOException {
1:ef4a7ba:         combiner = new ByteArrayCombinerStream(null, 0);
1:956354d:         assertEquals(-1, combiner.read(new byte[10], 0, 10));
1:956354d:     }
1:956354d: 
1:956354d:     public void testCombineAvailableNull()
1:956354d:             throws IOException {
1:ef4a7ba:         combiner = new ByteArrayCombinerStream(null, 0);
1:ef4a7ba:         assertEquals(0, combiner.available());
1:956354d:     }
1:956354d: 
1:956354d:     public void testCombineAvailable4bytes()
1:956354d:             throws IOException {
1:956354d:         byte[] array = {65,66,77,79};
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:956354d:         list.add(array);
1:956354d:         combiner = new ByteArrayCombinerStream(list, 4);
1:ef4a7ba:         assertEquals(4, combiner.available());
1:956354d:     }
1:ef4a7ba: 
1:ef4a7ba:     /**
1:ef4a7ba:      * Make sure an extra "empty" array doesn't cause errors.
1:ef4a7ba:      * This test is based on knowledge of the implementation, where an extra
1:ef4a7ba:      * byte array was not removed during the reducation process. This can
1:ef4a7ba:      * cause <code>nextArray</code> to not return <code>null</code> when it
1:ef4a7ba:      * should, causing an <code>ArrayIndexOutOfBoundsException</code>.
1:ef4a7ba:      * This bug was corrected by DERBY-1417.
1:ef4a7ba:      */
1:ef4a7ba:     public void testCombineWithExtraEmptyByteArray()
1:ef4a7ba:             throws IOException {
1:ef4a7ba:         byte[] array = {65,66,77,79};
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(2);
1:ef4a7ba:         list.add(array);
1:ef4a7ba:         list.add(new byte[4]);
1:ef4a7ba:         combiner = new ByteArrayCombinerStream(list, array.length);
1:ef4a7ba:         byte[] resArray = new byte[array.length];
1:ef4a7ba:         assertEquals(array.length,
1:ef4a7ba:                      combiner.read(resArray, 0, resArray.length));
1:ef4a7ba:         assertTrue(combiner.read() == -1);
1:ef4a7ba:     }
1:ef4a7ba: 
1:956354d:     public void testCombineOneArray()
1:956354d:             throws IOException {
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:956354d:         list.add(defaultArray);
1:956354d:         combiner = new ByteArrayCombinerStream(list, defaultArray.length);
1:956354d:         byte[] resArray = new byte[defaultArray.length];
1:ef4a7ba:         assertEquals(defaultArray.length,
1:956354d:                      combiner.read(resArray,0, resArray.length));
1:956354d:         assertTrue(combiner.read() == -1);
1:956354d:         assertTrue(Arrays.equals(defaultArray, resArray));
1:956354d:     }
1:956354d: 
1:956354d:     public void testCominbe100SmallArrays()
1:956354d:             throws IOException {
1:956354d:         int arrays = 100;
1:956354d:         byte[] array = {65,66,77,79};
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(arrays);
1:956354d:         long length = 0;
1:956354d:         for (int i=0; i < arrays; i++) {
1:956354d:             list.add(array);
1:956354d:             length += array.length;
1:956354d:         }
1:956354d:         byte[] targetArray = new byte[(int)length];
1:956354d:         int offset = 0;
1:956354d:         for (int i=0; i < arrays; i++) {
1:956354d:             System.arraycopy(array, 0, targetArray, offset, array.length);
1:956354d:             offset += array.length;
1:956354d:         }
1:956354d:         combiner = new ByteArrayCombinerStream(list, length);
1:956354d:         byte[] resArray = new byte[(int)length];
1:956354d:         assertEquals(length, combiner.read(resArray, 0, resArray.length));
1:956354d:         assertTrue(combiner.read() == -1);
1:956354d:         assertTrue(combiner.read() == -1);
1:956354d:         assertTrue(Arrays.equals(targetArray, resArray));
1:956354d:     }
1:ef4a7ba: 
1:956354d:     public void testTruncateDataFromOneArray()
1:956354d:             throws IOException {
1:956354d:         int length = defaultArray.length -5;
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:956354d:         list.add(defaultArray);
1:956354d:         byte[] targetArray = new byte[length];
1:956354d:         System.arraycopy(defaultArray, 0,
1:956354d:                          targetArray, 0, length);
1:956354d:         byte[] resArray = new byte[length];
1:956354d:         combiner = new ByteArrayCombinerStream(list, length);
1:956354d:         assertEquals(length, combiner.read(resArray, 0, length));
1:956354d:         assertTrue(combiner.read() == -1);
1:956354d:         assertTrue(Arrays.equals(targetArray, resArray));
1:956354d:     }
1:ef4a7ba: 
1:956354d:     public void testTruncateDataFromTwoArrays()
1:956354d:             throws IOException {
1:956354d:         int length = (defaultArray.length *2) -7;
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(2);
1:956354d:         list.add(defaultArray);
1:956354d:         list.add(defaultArray);
1:956354d:         byte[] targetArray = new byte[length];
1:956354d:         System.arraycopy(defaultArray, 0,
1:956354d:                          targetArray, 0, defaultArray.length);
1:956354d:         System.arraycopy(defaultArray, 0,
1:ef4a7ba:                          targetArray, defaultArray.length,
1:956354d:                          length - defaultArray.length);
1:956354d:         byte[] resArray = new byte[length];
1:956354d:         combiner = new ByteArrayCombinerStream(list, length);
1:956354d:         assertEquals(length, combiner.read(resArray, 0, length));
1:956354d:         assertTrue(combiner.read() == -1);
1:956354d:         assertTrue(Arrays.equals(targetArray, resArray));
1:956354d:     }
1:ef4a7ba: 
1:ef4a7ba:     /**
1:ef4a7ba:      * Make sure an exception is thrown if there is less data available than
1:ef4a7ba:      * the specified length.
1:ef4a7ba:      */
1:ef4a7ba:     public void testTooLittleDataNoCombine() {
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:ef4a7ba:         list.add(new byte[5]);
1:ef4a7ba:         try {
1:ef4a7ba:             combiner = new ByteArrayCombinerStream(list, 10);
1:ef4a7ba:             fail("An IllegalArgumentException singalling too little data " +
1:ef4a7ba:                     "should have been thrown");
1:ef4a7ba:         } catch (IllegalArgumentException iae) {
1:ef4a7ba:             // This should happen, continue.
1:ef4a7ba:         }
1:ef4a7ba:     }
1:ef4a7ba: 
1:ef4a7ba:     /**
1:ef4a7ba:      * Make sure an exception is thrown if there is less data available than
1:ef4a7ba:      * the specified length.
1:ef4a7ba:      */
1:ef4a7ba:     public void testTooLittleDataWithCombine() {
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(3);
1:ef4a7ba:         byte[] data = {65,66,67,68,69};
1:ef4a7ba:         list.add(data);
1:ef4a7ba:         list.add(data);
1:ef4a7ba:         list.add(data);
1:ef4a7ba:         try {
1:ef4a7ba:             combiner = new ByteArrayCombinerStream(list, data.length *3 + 1);
1:ef4a7ba:             fail("An IllegalArgumentException singalling too little data " +
1:ef4a7ba:                     "should have been thrown");
1:ef4a7ba:         } catch (IllegalArgumentException iae) {
1:ef4a7ba:             // This should happen, continue.
1:ef4a7ba:         }
1:ef4a7ba:     }
1:ef4a7ba: 
1:ef4a7ba:     /**
1:ef4a7ba:      * Make sure an exception is thrown if a negative length is specified.
1:ef4a7ba:      */
1:ef4a7ba:     public void testNegativeLengthArgument() {
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:ef4a7ba:         list.add(new byte[1234]);
1:ef4a7ba:         try {
1:ef4a7ba:             combiner = new ByteArrayCombinerStream(list, -54);
1:ef4a7ba:             fail("An IllegalArgumentException singalling negative length " +
1:ef4a7ba:                     "should have been thrown");
1:ef4a7ba:         } catch (IllegalArgumentException iae) {
1:ef4a7ba:             // This should happen, continue.
1:ef4a7ba: 
1:ef4a7ba:         }
1:ef4a7ba:     }
1:ef4a7ba: 
1:ef4a7ba:     /**
1:ef4a7ba:      * Demonstrate that the stream does not change negative values in the
1:ef4a7ba:      * underlying data.
1:ef4a7ba:      * This can cause code to believe the stream is exhausted even though it is
1:ef4a7ba:      * not.
1:ef4a7ba:      */
1:ef4a7ba:     public void testNegativeValueInDataCausesEndOfStream()
1:ef4a7ba:             throws IOException {
1:ef4a7ba:         byte[] data = {66,67,-123,68,69};
1:ef4a7ba:         byte[] targetData = {66,67,0,0,0};
1:ef4a7ba:         byte[] resData = new byte[5];
1:9d44c9e:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
1:ef4a7ba:         list.add(data);
1:ef4a7ba:         combiner = new ByteArrayCombinerStream(list, data.length);
1:ef4a7ba:         byte b;
1:ef4a7ba:         int index = 0;
1:ef4a7ba:         while ((b = (byte)combiner.read()) > 0) {
1:ef4a7ba:             resData[index++] = b;
1:ef4a7ba:         }
1:ef4a7ba:         assertTrue(Arrays.equals(targetData, resData));
1:ef4a7ba:         // Even though we think the stream is exhausted, it is not...
1:ef4a7ba:         assertEquals(data[3], (byte)combiner.read());
1:ef4a7ba:         assertEquals(data[4], (byte)combiner.read());
1:ef4a7ba:         assertEquals(-1, (byte)combiner.read());
1:ef4a7ba:     }
1:90e68d8: 
1:90e68d8:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(ByteArrayCombinerStreamTest.class,
1:90e68d8:                              "ByteArrayCombinerStreamTest");
1:90e68d8:     }
1:ef4a7ba: } // End class ByteArrayCombinerStreamTest
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import junit.framework.Test;
1: import org.apache.derby.client.am.ByteArrayCombinerStream;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(ByteArrayCombinerStreamTest.class,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(2);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(arrays);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(2);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(3);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<byte[]> list = new ArrayList<byte[]>(1);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:90e68d8
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Test suite() {
0:         return new TestSuite(ByteArrayCombinerStreamTest.class,
1:                              "ByteArrayCombinerStreamTest");
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestCase;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ef4a7ba
/////////////////////////////////////////////////////////////////////////
1: 
1:         combiner = new ByteArrayCombinerStream(null, 0);
1:         combiner = new ByteArrayCombinerStream(null, 0);
1:         combiner = new ByteArrayCombinerStream(null, 0);
1:         assertEquals(0, combiner.available());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(4, combiner.available());
1: 
1:     /**
1:      * Make sure an extra "empty" array doesn't cause errors.
1:      * This test is based on knowledge of the implementation, where an extra
1:      * byte array was not removed during the reducation process. This can
1:      * cause <code>nextArray</code> to not return <code>null</code> when it
1:      * should, causing an <code>ArrayIndexOutOfBoundsException</code>.
1:      * This bug was corrected by DERBY-1417.
1:      */
1:     public void testCombineWithExtraEmptyByteArray()
1:             throws IOException {
1:         byte[] array = {65,66,77,79};
0:         ArrayList list = new ArrayList(2);
1:         list.add(array);
1:         list.add(new byte[4]);
1:         combiner = new ByteArrayCombinerStream(list, array.length);
1:         byte[] resArray = new byte[array.length];
1:         assertEquals(array.length,
1:                      combiner.read(resArray, 0, resArray.length));
1:         assertTrue(combiner.read() == -1);
1:     }
1: 
1:         assertEquals(defaultArray.length,
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                          targetArray, defaultArray.length,
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Make sure an exception is thrown if there is less data available than
1:      * the specified length.
1:      */
1:     public void testTooLittleDataNoCombine() {
0:         ArrayList list = new ArrayList(1);
1:         list.add(new byte[5]);
1:         try {
1:             combiner = new ByteArrayCombinerStream(list, 10);
1:             fail("An IllegalArgumentException singalling too little data " +
1:                     "should have been thrown");
1:         } catch (IllegalArgumentException iae) {
1:             // This should happen, continue.
1:         }
1:     }
1: 
1:     /**
1:      * Make sure an exception is thrown if there is less data available than
1:      * the specified length.
1:      */
1:     public void testTooLittleDataWithCombine() {
0:         ArrayList list = new ArrayList(3);
1:         byte[] data = {65,66,67,68,69};
1:         list.add(data);
1:         list.add(data);
1:         list.add(data);
1:         try {
1:             combiner = new ByteArrayCombinerStream(list, data.length *3 + 1);
1:             fail("An IllegalArgumentException singalling too little data " +
1:                     "should have been thrown");
1:         } catch (IllegalArgumentException iae) {
1:             // This should happen, continue.
1:         }
1:     }
1: 
1:     /**
1:      * Make sure an exception is thrown if a negative length is specified.
1:      */
1:     public void testNegativeLengthArgument() {
0:         ArrayList list = new ArrayList(1);
1:         list.add(new byte[1234]);
1:         try {
1:             combiner = new ByteArrayCombinerStream(list, -54);
1:             fail("An IllegalArgumentException singalling negative length " +
1:                     "should have been thrown");
1:         } catch (IllegalArgumentException iae) {
1:             // This should happen, continue.
1: 
1:         }
1:     }
1: 
1:     /**
1:      * Demonstrate that the stream does not change negative values in the
1:      * underlying data.
1:      * This can cause code to believe the stream is exhausted even though it is
1:      * not.
1:      */
1:     public void testNegativeValueInDataCausesEndOfStream()
1:             throws IOException {
1:         byte[] data = {66,67,-123,68,69};
1:         byte[] targetData = {66,67,0,0,0};
1:         byte[] resData = new byte[5];
0:         ArrayList list = new ArrayList(1);
1:         list.add(data);
1:         combiner = new ByteArrayCombinerStream(list, data.length);
1:         byte b;
1:         int index = 0;
1:         while ((b = (byte)combiner.read()) > 0) {
1:             resData[index++] = b;
1:         }
1:         assertTrue(Arrays.equals(targetData, resData));
1:         // Even though we think the stream is exhausted, it is not...
1:         assertEquals(data[3], (byte)combiner.read());
1:         assertEquals(data[4], (byte)combiner.read());
1:         assertEquals(-1, (byte)combiner.read());
1:     }
1: } // End class ByteArrayCombinerStreamTest
commit:956354d
/////////////////////////////////////////////////////////////////////////
1: /*
1:     Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest
1: 
1:     Licensed to the Apache Software Foundation (ASF) under one
1:     or more contributor license agreements.  See the NOTICE file
1:     distributed with this work for additional information
1:     regarding copyright ownership.  The ASF licenses this file
1:     to you under the Apache License, Version 2.0 (the
1:     "License"); you may not use this file except in compliance
1:     with the License.  You may obtain a copy of the License at
1: 
1:     http://www.apache.org/licenses/LICENSE-2.0
1: 
1:     Unless required by applicable law or agreed to in writing,
1:     software distributed under the License is distributed on an
1:     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:     KIND, either express or implied.  See the License for the
1:     specific language governing permissions and limitations
1:     under the License.
1: */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseTestCase;
1: 
0: import org.apache.derby.client.am.ByteArrayCombinerStream;
1: 
0: import java.io.*;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: 
1: /**
1:  * Test functionality of <code>ByteArrayCombinerStream</code>.
1:  */
1: public class ByteArrayCombinerStreamTest
1:     extends BaseTestCase {
1: 
1:     private static final byte[] defaultArray = {
1:             65,66,67,68,69,70,71,72,73,74,75,76,
1:             77,78,79,80,81,82,83,84,85,86,87,88};
1: 
1:     private ByteArrayCombinerStream combiner;
1:     
1:     public ByteArrayCombinerStreamTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testCombineNullRead()
1:             throws IOException {
0:         combiner = new ByteArrayCombinerStream(null, 10);
1:         assertEquals(-1, combiner.read());
1:     }
1: 
1:     public void testCombineNullReadArray()
1:             throws IOException {
0:         combiner = new ByteArrayCombinerStream(null, 10);
1:         assertEquals(-1, combiner.read(new byte[10], 0, 10));
1:     }
1: 
1:     public void testCombineAvailableNull()
1:             throws IOException {
0:         combiner = new ByteArrayCombinerStream(null, -34);
0:         assertEquals(0, combiner.available()); 
1:     }
1: 
1:     public void testCombineAvailable4bytes()
1:             throws IOException {
1:         byte[] array = {65,66,77,79};
0:         ArrayList list = new ArrayList(1);
1:         list.add(array);
1:         combiner = new ByteArrayCombinerStream(list, 4);
0:         assertEquals(4, combiner.available()); 
1:     }
1:     
1:     public void testCombineOneArray()
1:             throws IOException {
0:         ArrayList list = new ArrayList(1);
1:         list.add(defaultArray);
1:         combiner = new ByteArrayCombinerStream(list, defaultArray.length);
1:         byte[] resArray = new byte[defaultArray.length];
0:         assertEquals(defaultArray.length, 
1:                      combiner.read(resArray,0, resArray.length));
1:         assertTrue(combiner.read() == -1);
1:         assertTrue(Arrays.equals(defaultArray, resArray));
1:     }
1: 
1:     public void testCominbe100SmallArrays()
1:             throws IOException {
1:         int arrays = 100;
1:         byte[] array = {65,66,77,79};
0:         ArrayList list = new ArrayList(arrays);
1:         long length = 0;
1:         for (int i=0; i < arrays; i++) {
1:             list.add(array);
1:             length += array.length;
1:         }
1:         byte[] targetArray = new byte[(int)length];
1:         int offset = 0;
1:         for (int i=0; i < arrays; i++) {
1:             System.arraycopy(array, 0, targetArray, offset, array.length);
1:             offset += array.length;
1:         }
1:         combiner = new ByteArrayCombinerStream(list, length);
1:         byte[] resArray = new byte[(int)length];
1:         assertEquals(length, combiner.read(resArray, 0, resArray.length));
1:         assertTrue(combiner.read() == -1);
1:         assertTrue(combiner.read() == -1);
1:         assertTrue(Arrays.equals(targetArray, resArray));
1:     }
1:     
1:     public void testTruncateDataFromOneArray()
1:             throws IOException {
1:         int length = defaultArray.length -5;
0:         ArrayList list = new ArrayList(1);
1:         list.add(defaultArray);
1:         byte[] targetArray = new byte[length];
1:         System.arraycopy(defaultArray, 0,
1:                          targetArray, 0, length);
1:         byte[] resArray = new byte[length];
1:         combiner = new ByteArrayCombinerStream(list, length);
1:         assertEquals(length, combiner.read(resArray, 0, length));
1:         assertTrue(combiner.read() == -1);
1:         assertTrue(Arrays.equals(targetArray, resArray));
1:     }
1:     
1:     public void testTruncateDataFromTwoArrays()
1:             throws IOException {
1:         int length = (defaultArray.length *2) -7;
0:         ArrayList list = new ArrayList(2);
1:         list.add(defaultArray);
1:         list.add(defaultArray);
1:         byte[] targetArray = new byte[length];
1:         System.arraycopy(defaultArray, 0,
1:                          targetArray, 0, defaultArray.length);
1:         System.arraycopy(defaultArray, 0,
0:                          targetArray, defaultArray.length, 
1:                          length - defaultArray.length);
1:         byte[] resArray = new byte[length];
1:         combiner = new ByteArrayCombinerStream(list, length);
1:         assertEquals(length, combiner.read(resArray, 0, length));
1:         assertTrue(combiner.read() == -1);
1:         assertTrue(Arrays.equals(targetArray, resArray));
1:     }
0: } // End class ByteArrayCombinerStreamTest 
============================================================================