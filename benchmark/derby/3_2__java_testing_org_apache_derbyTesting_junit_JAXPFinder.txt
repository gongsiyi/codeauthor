1:a6fa53b: /*
1:a6fa53b:  *
1:eddb67d:  * Derby - Class org.apache.derbyTesting.junit.JAXPFinder
1:a6fa53b:  *
1:a6fa53b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a6fa53b:  * contributor license agreements.  See the NOTICE file distributed with
1:a6fa53b:  * this work for additional information regarding copyright ownership.
1:a6fa53b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a6fa53b:  * (the "License"); you may not use this file except in compliance with
1:a6fa53b:  * the License.  You may obtain a copy of the License at
1:a6fa53b:  *
1:a6fa53b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a6fa53b:  *
1:a6fa53b:  * Unless required by applicable law or agreed to in writing, 
1:a6fa53b:  * software distributed under the License is distributed on an 
1:a6fa53b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a6fa53b:  * either express or implied. See the License for the specific 
1:a6fa53b:  * language governing permissions and limitations under the License.
1:a6fa53b:  */
1:a6fa53b: package org.apache.derbyTesting.junit;
1:a6fa53b: 
1:a6fa53b: import java.net.URL;
1:a6fa53b: 
1:a6fa53b: /* The following import is of a JAXP API class.  The JAXP API classes
1:a6fa53b:  * are included within JVMs that are 1.4 and later.  However, 1.3 and
1:a6fa53b:  * J2ME JVMs do not include the JAXP API classes.  As a result this
1:a6fa53b:  * file can only be built with 1.4 or later (see build.xml in this
1:a6fa53b:  * directory).  We have to separate this class out from junit/XML.java
1:a6fa53b:  * because XML.java will be instantiated for any JUnit test, regardless
1:a6fa53b:  * of whether or not the the required JAXP classes are in the user's
1:a6fa53b:  * classpath.  This means that if we imported the JAXP class into
1:a6fa53b:  * junit/XML.java, a user who tried to run a JUnit test without
1:a6fa53b:  * the JAXP interface in his/her classpath (which typically means
1:a6fa53b:  * J2ME is being used) would see a NoClassFoundError. (DERBY-2153).
1:a6fa53b:  * That's not what we want; instead, all tests that do *not* rely on
1:a6fa53b:  * JAXP should run as normal and any tests that require JAXP should be
1:a6fa53b:  * silently skipped.
1:a6fa53b:  *
1:a6fa53b:  * To accomplish this goal we import/reference DocumentBuilderFactory 
1:a6fa53b:  * in *this* class (JAXPFinder). Then we *only* make calls on this
1:a6fa53b:  * JAXPFinder if we know for certain that all required XML classes
1:a6fa53b:  * are in the user's classpath.  With this restriction in place we
1:a6fa53b:  * can ensure that the JAXP class will never be instantiated for
1:a6fa53b:  * environments which do not have a JAXP parser.  Thus the JUnit
1:a6fa53b:  * harness will run/skip tests as expected whether or not the user's
1:a6fa53b:  * classpath includes a JAXP parser.
1:a6fa53b:  */
1:a6fa53b: import javax.xml.parsers.DocumentBuilderFactory;
1:a6fa53b: 
1:a6fa53b: /**
1:a6fa53b:  * Simple class used for determining the location of the jar 
1:a6fa53b:  * file (based on the user's classpath) that contains the JAXP
1:a6fa53b:  * implementation.
1:a6fa53b:  */
1:a6fa53b: public class JAXPFinder {
1:a6fa53b: 
1:a6fa53b:     /**
1:a6fa53b:      * String form of the URL for the jar file in the user's classpath
1:a6fa53b:      * that holds the JAXP implementation in use.  If the implementation
1:a6fa53b:      * is embedded within, or endorsed by, the JVM, then we will set this
1:a6fa53b:      * field to be an empty string.
1:a6fa53b:      */
1:a6fa53b:     private static String jaxpURLString = null;
1:a6fa53b:     
1:a6fa53b:     /**
1:a6fa53b:      * Return the string form of the URL for the jar file that contains
1:a6fa53b:      * whichever JAXP parser implementation is picked up from the user's
1:a6fa53b:      * classpath.  If the JAXP parser is not in the user's classpath,
1:a6fa53b:      * then it must be embedded within the JVM (either implicitly or else
1:a6fa53b:      * through use of "endorsed standards" jars), in which case we return
1:a6fa53b:      * null.
1:a6fa53b:      *
1:a6fa53b:      * NOTE: Assumption is that we only get here if we know there is in
1:a6fa53b:      * fact a JAXP parser available to the JVM.  I.e. if a call to
1:a6fa53b:      * the "classpathHasXalanAndJAXP()" method of junit/XML.java returns
1:a6fa53b:      * true.
1:a6fa53b:      */
1:a6fa53b:     protected static String getJAXPParserLocation()
1:a6fa53b:     {
1:a6fa53b:         // Only get the URL if we have not already done it.
1:a6fa53b:         if (jaxpURLString == null)
1:a6fa53b:         {
1:a6fa53b:             /* Figure out which JAXP implementation we have by
1:a6fa53b:              * instantiating a DocumentBuilderFactory and then getting
1:a6fa53b:              * the implementation-specific class for that object.
1:a6fa53b:              * Note that we cannot just use:
1:a6fa53b:              *
1:a6fa53b:              *   SecurityManagerSetup.getURL(DocumentBuilderFactory.class)
1:a6fa53b:              *
1:a6fa53b:              * because the 1.4, 1.5, and 1.6 JVMs (at least, Sun and IBM)
1:a6fa53b:              * all embed the JAXP API classes, so any attempts to look
1:a6fa53b:              * up the URL for DocumentBuilderFactory.class will return
1:a6fa53b:              * null for those JVMs. But in the case of, say, Sun 1.5, the
1:a6fa53b:              * JAXP *implementation* classes are not embedded. So if we're
1:a6fa53b:              * running with Sun 1.5 and we have an external JAXP
1:a6fa53b:              * implementation (say Xerces) in the classpath, we need to
1:a6fa53b:              * find the URL for that external jar file. By instantiating
1:a6fa53b:              * DocumentBuilderFactory and then using the implementation-
1:a6fa53b:              * specific class name we ensure that, for external (w.r.t the
1:a6fa53b:              * JVM) JAXP implementations, we can find the implementation
1:a6fa53b:              * jar file and thus we can assign the correct permissions.
1:a6fa53b:              */
1:a6fa53b:             URL jaxpURL = SecurityManagerSetup.getURL(
1:a6fa53b:                 DocumentBuilderFactory.newInstance().getClass());
1:a6fa53b: 
1:a6fa53b:             /* If we found a URL then the JAXP parser is in the classpath
1:a6fa53b:              * in some jar external to the JVM; in that case we have the
1:a6fa53b:              * the jar's location so we use/return that.  Otherwise we
1:a6fa53b:              * assume that the JAXP parser is either embedded within the
1:a6fa53b:              * JVM or else "endorsed" by it. In those cases we set our
1:a6fa53b:              * URL string to be the empty string, which is non-null and
1:a6fa53b:              * thus we will only execute this try-catch once.
1:a6fa53b:              */
1:a6fa53b:             jaxpURLString =
1:a6fa53b:                 (jaxpURL == null) ? "" : jaxpURL.toExternalForm();
1:a6fa53b:         }
1:a6fa53b: 
1:a6fa53b:         // If we didn't find the JAXP parser URL, then return null.
1:a6fa53b:         return ((jaxpURLString.length() == 0) ? null : jaxpURLString);
1:a6fa53b:     }
1:a6fa53b: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eddb67d
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.junit.JAXPFinder
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9c86d82
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:a6fa53b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class org.apache.derbyTesting.functionTests.util.JAXPFinder
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.net.URL;
0: import junit.framework.Assert;
1: 
1: /* The following import is of a JAXP API class.  The JAXP API classes
1:  * are included within JVMs that are 1.4 and later.  However, 1.3 and
1:  * J2ME JVMs do not include the JAXP API classes.  As a result this
1:  * file can only be built with 1.4 or later (see build.xml in this
1:  * directory).  We have to separate this class out from junit/XML.java
1:  * because XML.java will be instantiated for any JUnit test, regardless
1:  * of whether or not the the required JAXP classes are in the user's
1:  * classpath.  This means that if we imported the JAXP class into
1:  * junit/XML.java, a user who tried to run a JUnit test without
1:  * the JAXP interface in his/her classpath (which typically means
1:  * J2ME is being used) would see a NoClassFoundError. (DERBY-2153).
1:  * That's not what we want; instead, all tests that do *not* rely on
1:  * JAXP should run as normal and any tests that require JAXP should be
1:  * silently skipped.
1:  *
1:  * To accomplish this goal we import/reference DocumentBuilderFactory 
1:  * in *this* class (JAXPFinder). Then we *only* make calls on this
1:  * JAXPFinder if we know for certain that all required XML classes
1:  * are in the user's classpath.  With this restriction in place we
1:  * can ensure that the JAXP class will never be instantiated for
1:  * environments which do not have a JAXP parser.  Thus the JUnit
1:  * harness will run/skip tests as expected whether or not the user's
1:  * classpath includes a JAXP parser.
1:  */
1: import javax.xml.parsers.DocumentBuilderFactory;
1: 
1: /**
1:  * Simple class used for determining the location of the jar 
1:  * file (based on the user's classpath) that contains the JAXP
1:  * implementation.
1:  */
1: public class JAXPFinder {
1: 
1:     /**
1:      * String form of the URL for the jar file in the user's classpath
1:      * that holds the JAXP implementation in use.  If the implementation
1:      * is embedded within, or endorsed by, the JVM, then we will set this
1:      * field to be an empty string.
1:      */
1:     private static String jaxpURLString = null;
1:     
1:     /**
1:      * Return the string form of the URL for the jar file that contains
1:      * whichever JAXP parser implementation is picked up from the user's
1:      * classpath.  If the JAXP parser is not in the user's classpath,
1:      * then it must be embedded within the JVM (either implicitly or else
1:      * through use of "endorsed standards" jars), in which case we return
1:      * null.
1:      *
1:      * NOTE: Assumption is that we only get here if we know there is in
1:      * fact a JAXP parser available to the JVM.  I.e. if a call to
1:      * the "classpathHasXalanAndJAXP()" method of junit/XML.java returns
1:      * true.
1:      */
1:     protected static String getJAXPParserLocation()
1:     {
1:         // Only get the URL if we have not already done it.
1:         if (jaxpURLString == null)
1:         {
1:             /* Figure out which JAXP implementation we have by
1:              * instantiating a DocumentBuilderFactory and then getting
1:              * the implementation-specific class for that object.
1:              * Note that we cannot just use:
1:              *
1:              *   SecurityManagerSetup.getURL(DocumentBuilderFactory.class)
1:              *
1:              * because the 1.4, 1.5, and 1.6 JVMs (at least, Sun and IBM)
1:              * all embed the JAXP API classes, so any attempts to look
1:              * up the URL for DocumentBuilderFactory.class will return
1:              * null for those JVMs. But in the case of, say, Sun 1.5, the
1:              * JAXP *implementation* classes are not embedded. So if we're
1:              * running with Sun 1.5 and we have an external JAXP
1:              * implementation (say Xerces) in the classpath, we need to
1:              * find the URL for that external jar file. By instantiating
1:              * DocumentBuilderFactory and then using the implementation-
1:              * specific class name we ensure that, for external (w.r.t the
1:              * JVM) JAXP implementations, we can find the implementation
1:              * jar file and thus we can assign the correct permissions.
1:              */
1:             URL jaxpURL = SecurityManagerSetup.getURL(
1:                 DocumentBuilderFactory.newInstance().getClass());
1: 
1:             /* If we found a URL then the JAXP parser is in the classpath
1:              * in some jar external to the JVM; in that case we have the
1:              * the jar's location so we use/return that.  Otherwise we
1:              * assume that the JAXP parser is either embedded within the
1:              * JVM or else "endorsed" by it. In those cases we set our
1:              * URL string to be the empty string, which is non-null and
1:              * thus we will only execute this try-catch once.
1:              */
1:             jaxpURLString =
1:                 (jaxpURL == null) ? "" : jaxpURL.toExternalForm();
1:         }
1: 
1:         // If we didn't find the JAXP parser URL, then return null.
1:         return ((jaxpURLString.length() == 0) ? null : jaxpURLString);
1:     }
1: }
============================================================================