1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CostEstimateImpl
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.CostEstimate;
1:eac0369: import org.apache.derby.iapi.store.access.StoreCostResult;
1:eac0369: 
1:3bb140c: class CostEstimateImpl implements CostEstimate {
1:3bb140c:     double  cost;
1:3bb140c:     double  rowCount;
1:3bb140c:     double  singleScanRowCount;
1:eac0369: 
1:3bb140c:     CostEstimateImpl() {
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     CostEstimateImpl(double theCost,
1:eac0369: 							double theRowCount,
1:eac0369: 							double theSingleScanRowCount) {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (theCost < 0.0 || 
1:eac0369: 			    theRowCount < 0.0 || 
1:eac0369: 				theSingleScanRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All parameters expected to be < 0.0, " +
1:eac0369: 					"\n\ttheCost = " + theCost +
1:eac0369: 					"\n\ttheRowCount = " + theRowCount +
1:eac0369: 					"\n\ttheSingleScanRowCount = " + theSingleScanRowCount 
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.cost = theCost;
1:eac0369: 		this.rowCount = theRowCount;
1:eac0369: 		this.singleScanRowCount = theSingleScanRowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#setCost */
1:eac0369: 	public void setCost(double cost, double rowCount,
1:eac0369: 						double singleScanRowCount) {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (cost < 0.0 || 
1:eac0369: 			    rowCount < 0.0 || 
1:eac0369: 				singleScanRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All parameters expected to be < 0.0, " +
1:eac0369: 					"\n\tcost = " + cost +
1:eac0369: 					"\n\trowCount = " + rowCount +
1:eac0369: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.cost = cost;
1:eac0369: 		this.rowCount = rowCount;
1:eac0369: 		this.singleScanRowCount = singleScanRowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#setCost */
1:eac0369: 	public void setCost(CostEstimate other) {
1:eac0369: 		cost = other.getEstimatedCost();
1:eac0369: 		rowCount = other.rowCount();
1:eac0369: 		singleScanRowCount = other.singleScanRowCount();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#setSingleScanRowCount */
1:eac0369: 	public void setSingleScanRowCount(double singleScanRowCount)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (singleScanRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All parameters expected to be < 0.0, " +
1:eac0369: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.singleScanRowCount = singleScanRowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#compare */
1:eac0369: 	public double compare(CostEstimate other) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (other == null) {
1:eac0369: 				SanityManager.THROWASSERT("Comparing with null CostEstimate");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if ( ! (other instanceof CostEstimateImpl)) {
1:eac0369: 				SanityManager.THROWASSERT(other.getClass().getName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:e540aee: 		/* Note: if both CostEstimates are infinity, an attempt to
1:e540aee: 		 * substract them will result in NaN, which tells us nothing
1:e540aee: 		 * and thus makes it impossible to do a comparison.  So in
1:e540aee: 		 * that case we fallback and check the row counts as a secondary
1:e540aee: 		 * point of comparison, and the singleScanRowCounts as a
1:e540aee: 		 * third comparison.  If all three values are infinity
1:e540aee: 		 * for both CostEstimates then we just consider the two
1:e540aee: 		 * costs to equal (equally as bad?) and so return 0.0d (instead
1:e540aee: 		 * NaN).  RESOLVE: Ideally the optimizer could be updated
1:e540aee: 		 * to give more reasonable estimates than infinity, but
1:e540aee: 		 * until that happens we're forced to deal with such
1:e540aee: 		 * comparisons.  Note that we're most likely to end up with
1:e540aee: 		 * infinite cost estimates in situations where we have deeply
1:e540aee: 		 * nested subqueries and/or FROM lists with a large number of
1:e540aee: 		 * FromTables (such as 10 or more). The reason is that each
1:e540aee: 		 * FromTable's cost estimate is (potentially) multiplied by
1:e540aee: 		 * the row counts of all preceding FromTables, so if the
1:e540aee: 		 * row counts for the preceding FromTables are large, we
1:e540aee: 		 * can eventually end up going beyond Double.MAX_VALUE,
1:e540aee: 		 * which then gives us infinity.
1:e540aee: 		 */
1:e540aee: 
1:e540aee: 		// If at least one of costs is _not_ infinity, then just do
1:e540aee: 		// a normal compare (the other side is less).
1:e540aee: 		if ((this.cost != Double.POSITIVE_INFINITY) ||
1:e540aee: 			(other.getEstimatedCost() != Double.POSITIVE_INFINITY))
1:e540aee: 		{
1:e540aee: 			return this.cost - ((CostEstimateImpl) other).cost;
1:e540aee: 		}
1:e540aee: 
1:e540aee: 		// If both costs are infinity, then compare row counts.
1:e540aee: 		if ((this.rowCount != Double.POSITIVE_INFINITY) ||
1:e540aee: 			(other.rowCount() != Double.POSITIVE_INFINITY))
1:e540aee: 		{
1:e540aee: 			return this.rowCount - other.rowCount();
1:e540aee: 		}
1:e540aee: 
1:e540aee: 		// If both row counts are infinity, try singleScan counts.
1:e540aee: 		if ((this.singleScanRowCount != Double.POSITIVE_INFINITY) ||
1:e540aee: 			(other.singleScanRowCount() != Double.POSITIVE_INFINITY))
1:e540aee: 		{
1:e540aee: 			return this.singleScanRowCount - other.singleScanRowCount();
1:e540aee: 		}
1:e540aee: 
1:e540aee: 		// If we get here, all three parts of both cost estimates are
1:e540aee: 		// Infinity; for lack of better choice, just say they're "equal".
1:e540aee: 		return 0.0d;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#add */
1:eac0369: 	public CostEstimate add(CostEstimate other, CostEstimate retval) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(other instanceof CostEstimateImpl);
1:eac0369: 			SanityManager.ASSERT(retval == null ||
1:eac0369: 								retval instanceof CostEstimateImpl);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		CostEstimateImpl	addend = (CostEstimateImpl) other;
1:eac0369: 
1:eac0369: 		double sumCost = this.cost + addend.cost;
1:eac0369: 		double sumRowCount = this.rowCount + addend.rowCount;
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (sumCost < 0.0 || 
1:eac0369: 			    sumRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All sums expected to be < 0.0, " +
1:eac0369: 					"\n\tthis.cost = " + this.cost +
1:eac0369: 					"\n\taddend.cost = " + addend.cost +
1:eac0369: 					"\n\tsumCost = " + sumCost +
1:eac0369: 					"\n\tthis.rowCount = " + this.rowCount +
1:eac0369: 					"\n\taddend.rowCount = " + addend.rowCount +
1:eac0369: 					"\n\tsumRowCount = " + sumRowCount
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Presume that ordering is not maintained */
1:eac0369: 		return setState(sumCost,
1:eac0369: 						sumRowCount,
1:eac0369: 						(CostEstimateImpl) retval);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#multiply */
1:eac0369: 	public CostEstimate multiply(double multiplicand, CostEstimate retval) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(retval == null ||
1:eac0369: 								retval instanceof CostEstimateImpl);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		double multCost = this.cost * multiplicand;
1:eac0369: 		double multRowCount = this.rowCount * multiplicand;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (multCost < 0.0 || 
1:eac0369: 			    multRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All products expected to be < 0.0, " +
1:eac0369: 					"\n\tthis.cost = " + this.cost +
1:eac0369: 					"\n\tmultiplicand = " + multiplicand +
1:eac0369: 					"\n\tmultCost = " + multCost +
1:eac0369: 					"\n\tthis.rowCount = " + this.rowCount +
1:eac0369: 					"\n\tmultRowCount = " + multRowCount
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Presume that ordering is not maintained */
1:eac0369: 		return setState(multCost,
1:eac0369: 						multRowCount,
1:eac0369: 						(CostEstimateImpl) retval);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#divide */
1:eac0369: 	public CostEstimate divide(double divisor, CostEstimate retval) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(retval == null ||
1:eac0369: 								retval instanceof CostEstimateImpl);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		double divCost = this.cost / divisor;
1:eac0369: 		double divRowCount = this.rowCount / divisor;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (divCost < 0.0 || 
1:eac0369: 			    divRowCount < 0.0)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"All products expected to be < 0.0, " +
1:eac0369: 					"\n\tthis.cost = " + this.cost +
1:eac0369: 					"\n\tdivisor = " + divisor +
1:eac0369: 					"\n\tdivCost = " + divCost +
1:eac0369: 					"\n\tthis.rowCount = " + this.rowCount +
1:eac0369: 					"\n\tdivRowCount = " + divRowCount
1:eac0369: 					);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Presume that ordering is not maintained */
1:eac0369: 		return setState(divCost,
1:eac0369: 						divRowCount,
1:eac0369: 						(CostEstimateImpl) retval);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#rowCount */
1:eac0369: 	public double rowCount() {
1:eac0369: 		return rowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#singleScanRowCount */
1:eac0369: 	public double singleScanRowCount() {
1:eac0369: 		return singleScanRowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#cloneMe */
1:eac0369: 	public CostEstimate cloneMe() {
1:eac0369: 		return new CostEstimateImpl(cost,
1:eac0369: 									rowCount,
1:eac0369: 									singleScanRowCount);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see CostEstimate#isUninitialized */
1:eac0369: 	public boolean isUninitialized()
1:eac0369: 	{
1:eac0369: 		return (cost == Double.MAX_VALUE &&
1:eac0369: 			    rowCount == Double.MAX_VALUE &&
1:eac0369: 				singleScanRowCount == Double.MAX_VALUE);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see StoreCostResult#getEstimatedCost */
1:eac0369: 	public double getEstimatedCost() {
1:eac0369: 		return cost;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see StoreCostResult#setEstimatedCost */
1:eac0369: 	public void setEstimatedCost(double cost) {
1:eac0369: 		this.cost = cost;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see StoreCostResult#getEstimatedRowCount */
1:eac0369: 	public long getEstimatedRowCount() {
1:eac0369: 		return (long) rowCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see StoreCostResult#setEstimatedRowCount */
1:eac0369: 	public void setEstimatedRowCount(long count) {
1:eac0369: 		/* This method is called by the store to
1:eac0369: 		 * give us the estimate for the # of rows
1:eac0369: 		 * returned in a scan.  So, we set both
1:eac0369: 		 * rowCount and singleScanRowCount here.
1:eac0369: 		 */
1:eac0369: 		rowCount = (double) count;
1:eac0369: 		singleScanRowCount = (double) count;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     CostEstimateImpl setState(double theCost,
1:eac0369: 										double theRowCount,
1:eac0369: 										CostEstimateImpl retval) {
1:eac0369: 		if (retval == null) {
1:eac0369: 			retval = new CostEstimateImpl();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		retval.cost = theCost;
1:eac0369: 		retval.rowCount = theRowCount;
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:2ae1afe:     
1:2ae1afe: 	public String toString() 
1:2ae1afe: 	{
1:2ae1afe: 		return "CostEstimateImpl: at " + hashCode() + ", cost == " + cost +
1:2ae1afe: 				", rowCount == " + rowCount + 
1:2ae1afe: 				", singleScanRowCount == " + singleScanRowCount;
1:2ae1afe: 	}
1:2ae1afe: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: class CostEstimateImpl implements CostEstimate {
1:     double  cost;
1:     double  rowCount;
1:     double  singleScanRowCount;
1:     CostEstimateImpl() {
1:     CostEstimateImpl(double theCost,
/////////////////////////////////////////////////////////////////////////
1:     CostEstimateImpl setState(double theCost,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2ae1afe
/////////////////////////////////////////////////////////////////////////
1:     
1: 	public String toString() 
1: 	{
1: 		return "CostEstimateImpl: at " + hashCode() + ", cost == " + cost +
1: 				", rowCount == " + rowCount + 
1: 				", singleScanRowCount == " + singleScanRowCount;
1: 	}
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:e540aee
/////////////////////////////////////////////////////////////////////////
1: 		/* Note: if both CostEstimates are infinity, an attempt to
1: 		 * substract them will result in NaN, which tells us nothing
1: 		 * and thus makes it impossible to do a comparison.  So in
1: 		 * that case we fallback and check the row counts as a secondary
1: 		 * point of comparison, and the singleScanRowCounts as a
1: 		 * third comparison.  If all three values are infinity
1: 		 * for both CostEstimates then we just consider the two
1: 		 * costs to equal (equally as bad?) and so return 0.0d (instead
1: 		 * NaN).  RESOLVE: Ideally the optimizer could be updated
1: 		 * to give more reasonable estimates than infinity, but
1: 		 * until that happens we're forced to deal with such
1: 		 * comparisons.  Note that we're most likely to end up with
1: 		 * infinite cost estimates in situations where we have deeply
1: 		 * nested subqueries and/or FROM lists with a large number of
1: 		 * FromTables (such as 10 or more). The reason is that each
1: 		 * FromTable's cost estimate is (potentially) multiplied by
1: 		 * the row counts of all preceding FromTables, so if the
1: 		 * row counts for the preceding FromTables are large, we
1: 		 * can eventually end up going beyond Double.MAX_VALUE,
1: 		 * which then gives us infinity.
1: 		 */
1: 
1: 		// If at least one of costs is _not_ infinity, then just do
1: 		// a normal compare (the other side is less).
1: 		if ((this.cost != Double.POSITIVE_INFINITY) ||
1: 			(other.getEstimatedCost() != Double.POSITIVE_INFINITY))
1: 		{
1: 			return this.cost - ((CostEstimateImpl) other).cost;
1: 		}
1: 
1: 		// If both costs are infinity, then compare row counts.
1: 		if ((this.rowCount != Double.POSITIVE_INFINITY) ||
1: 			(other.rowCount() != Double.POSITIVE_INFINITY))
1: 		{
1: 			return this.rowCount - other.rowCount();
1: 		}
1: 
1: 		// If both row counts are infinity, try singleScan counts.
1: 		if ((this.singleScanRowCount != Double.POSITIVE_INFINITY) ||
1: 			(other.singleScanRowCount() != Double.POSITIVE_INFINITY))
1: 		{
1: 			return this.singleScanRowCount - other.singleScanRowCount();
1: 		}
1: 
1: 		// If we get here, all three parts of both cost estimates are
1: 		// Infinity; for lack of better choice, just say they're "equal".
1: 		return 0.0d;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CostEstimateImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
0: public class CostEstimateImpl implements CostEstimate {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.CostEstimate;
1: 
1: import org.apache.derby.iapi.store.access.StoreCostResult;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: public class CostEstimateImpl implements CostEstimate { 
1: 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public double	cost;
0: 	public double	rowCount;
0: 	public double	singleScanRowCount;
1: 
0: 	public CostEstimateImpl() {
1: 	}
1: 
0: 	public CostEstimateImpl(double theCost,
1: 							double theRowCount,
1: 							double theSingleScanRowCount) {
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (theCost < 0.0 || 
1: 			    theRowCount < 0.0 || 
1: 				theSingleScanRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All parameters expected to be < 0.0, " +
1: 					"\n\ttheCost = " + theCost +
1: 					"\n\ttheRowCount = " + theRowCount +
1: 					"\n\ttheSingleScanRowCount = " + theSingleScanRowCount 
1: 					);
1: 			}
1: 		}
1: 		this.cost = theCost;
1: 		this.rowCount = theRowCount;
1: 		this.singleScanRowCount = theSingleScanRowCount;
1: 	}
1: 
1: 	/** @see CostEstimate#setCost */
1: 	public void setCost(double cost, double rowCount,
1: 						double singleScanRowCount) {
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (cost < 0.0 || 
1: 			    rowCount < 0.0 || 
1: 				singleScanRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All parameters expected to be < 0.0, " +
1: 					"\n\tcost = " + cost +
1: 					"\n\trowCount = " + rowCount +
1: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
1: 					);
1: 			}
1: 		}
1: 		this.cost = cost;
1: 		this.rowCount = rowCount;
1: 		this.singleScanRowCount = singleScanRowCount;
1: 	}
1: 
1: 	/** @see CostEstimate#setCost */
1: 	public void setCost(CostEstimate other) {
1: 		cost = other.getEstimatedCost();
1: 		rowCount = other.rowCount();
1: 		singleScanRowCount = other.singleScanRowCount();
1: 	}
1: 
1: 	/** @see CostEstimate#setSingleScanRowCount */
1: 	public void setSingleScanRowCount(double singleScanRowCount)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (singleScanRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All parameters expected to be < 0.0, " +
1: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
1: 					);
1: 			}
1: 		}
1: 		this.singleScanRowCount = singleScanRowCount;
1: 	}
1: 
1: 	/** @see CostEstimate#compare */
1: 	public double compare(CostEstimate other) {
1: 		if (SanityManager.DEBUG) {
1: 			if (other == null) {
1: 				SanityManager.THROWASSERT("Comparing with null CostEstimate");
1: 			}
1: 
1: 			if ( ! (other instanceof CostEstimateImpl)) {
1: 				SanityManager.THROWASSERT(other.getClass().getName());
1: 			}
1: 		}
1: 
0: 		return this.cost - ((CostEstimateImpl) other).cost;
1: 	}
1: 
1: 	/** @see CostEstimate#add */
1: 	public CostEstimate add(CostEstimate other, CostEstimate retval) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(other instanceof CostEstimateImpl);
1: 			SanityManager.ASSERT(retval == null ||
1: 								retval instanceof CostEstimateImpl);
1: 		}
1: 
1: 		CostEstimateImpl	addend = (CostEstimateImpl) other;
1: 
1: 		double sumCost = this.cost + addend.cost;
1: 		double sumRowCount = this.rowCount + addend.rowCount;
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (sumCost < 0.0 || 
1: 			    sumRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All sums expected to be < 0.0, " +
1: 					"\n\tthis.cost = " + this.cost +
1: 					"\n\taddend.cost = " + addend.cost +
1: 					"\n\tsumCost = " + sumCost +
1: 					"\n\tthis.rowCount = " + this.rowCount +
1: 					"\n\taddend.rowCount = " + addend.rowCount +
1: 					"\n\tsumRowCount = " + sumRowCount
1: 					);
1: 			}
1: 		}
1: 
1: 		/* Presume that ordering is not maintained */
1: 		return setState(sumCost,
1: 						sumRowCount,
1: 						(CostEstimateImpl) retval);
1: 	}
1: 
1: 	/** @see CostEstimate#multiply */
1: 	public CostEstimate multiply(double multiplicand, CostEstimate retval) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(retval == null ||
1: 								retval instanceof CostEstimateImpl);
1: 		}
1: 
1: 		double multCost = this.cost * multiplicand;
1: 		double multRowCount = this.rowCount * multiplicand;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (multCost < 0.0 || 
1: 			    multRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All products expected to be < 0.0, " +
1: 					"\n\tthis.cost = " + this.cost +
1: 					"\n\tmultiplicand = " + multiplicand +
1: 					"\n\tmultCost = " + multCost +
1: 					"\n\tthis.rowCount = " + this.rowCount +
1: 					"\n\tmultRowCount = " + multRowCount
1: 					);
1: 			}
1: 		}
1: 
1: 		/* Presume that ordering is not maintained */
1: 		return setState(multCost,
1: 						multRowCount,
1: 						(CostEstimateImpl) retval);
1: 	}
1: 
1: 	/** @see CostEstimate#divide */
1: 	public CostEstimate divide(double divisor, CostEstimate retval) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(retval == null ||
1: 								retval instanceof CostEstimateImpl);
1: 		}
1: 
1: 		double divCost = this.cost / divisor;
1: 		double divRowCount = this.rowCount / divisor;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (divCost < 0.0 || 
1: 			    divRowCount < 0.0)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"All products expected to be < 0.0, " +
1: 					"\n\tthis.cost = " + this.cost +
1: 					"\n\tdivisor = " + divisor +
1: 					"\n\tdivCost = " + divCost +
1: 					"\n\tthis.rowCount = " + this.rowCount +
1: 					"\n\tdivRowCount = " + divRowCount
1: 					);
1: 			}
1: 		}
1: 
1: 		/* Presume that ordering is not maintained */
1: 		return setState(divCost,
1: 						divRowCount,
1: 						(CostEstimateImpl) retval);
1: 	}
1: 
1: 	/** @see CostEstimate#rowCount */
1: 	public double rowCount() {
1: 		return rowCount;
1: 	}
1: 
1: 	/** @see CostEstimate#singleScanRowCount */
1: 	public double singleScanRowCount() {
1: 		return singleScanRowCount;
1: 	}
1: 
1: 	/** @see CostEstimate#cloneMe */
1: 	public CostEstimate cloneMe() {
1: 		return new CostEstimateImpl(cost,
1: 									rowCount,
1: 									singleScanRowCount);
1: 	}
1: 
1: 	/** @see CostEstimate#isUninitialized */
1: 	public boolean isUninitialized()
1: 	{
1: 		return (cost == Double.MAX_VALUE &&
1: 			    rowCount == Double.MAX_VALUE &&
1: 				singleScanRowCount == Double.MAX_VALUE);
1: 	}
1: 
1: 	/** @see StoreCostResult#getEstimatedCost */
1: 	public double getEstimatedCost() {
1: 		return cost;
1: 	}
1: 
1: 	/** @see StoreCostResult#setEstimatedCost */
1: 	public void setEstimatedCost(double cost) {
1: 		this.cost = cost;
1: 	}
1: 
1: 	/** @see StoreCostResult#getEstimatedRowCount */
1: 	public long getEstimatedRowCount() {
1: 		return (long) rowCount;
1: 	}
1: 
1: 	/** @see StoreCostResult#setEstimatedRowCount */
1: 	public void setEstimatedRowCount(long count) {
1: 		/* This method is called by the store to
1: 		 * give us the estimate for the # of rows
1: 		 * returned in a scan.  So, we set both
1: 		 * rowCount and singleScanRowCount here.
1: 		 */
1: 		rowCount = (double) count;
1: 		singleScanRowCount = (double) count;
1: 	}
1: 
0: 	public CostEstimateImpl setState(double theCost,
1: 										double theRowCount,
1: 										CostEstimateImpl retval) {
1: 		if (retval == null) {
1: 			retval = new CostEstimateImpl();
1: 		}
1: 
1: 		retval.cost = theCost;
1: 		retval.rowCount = theRowCount;
1: 
1: 		return retval;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: 
0: import org.apache.derby.iapi.store.access.StoreCostResult;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: public class CostEstimateImpl implements CostEstimate { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public double	cost;
0: 	public double	rowCount;
0: 	public double	singleScanRowCount;
0: 
0: 	public CostEstimateImpl() {
0: 	}
0: 
0: 	public CostEstimateImpl(double theCost,
0: 							double theRowCount,
0: 							double theSingleScanRowCount) {
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (theCost < 0.0 || 
0: 			    theRowCount < 0.0 || 
0: 				theSingleScanRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All parameters expected to be < 0.0, " +
0: 					"\n\ttheCost = " + theCost +
0: 					"\n\ttheRowCount = " + theRowCount +
0: 					"\n\ttheSingleScanRowCount = " + theSingleScanRowCount 
0: 					);
0: 			}
0: 		}
0: 		this.cost = theCost;
0: 		this.rowCount = theRowCount;
0: 		this.singleScanRowCount = theSingleScanRowCount;
0: 	}
0: 
0: 	/** @see CostEstimate#setCost */
0: 	public void setCost(double cost, double rowCount,
0: 						double singleScanRowCount) {
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (cost < 0.0 || 
0: 			    rowCount < 0.0 || 
0: 				singleScanRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All parameters expected to be < 0.0, " +
0: 					"\n\tcost = " + cost +
0: 					"\n\trowCount = " + rowCount +
0: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
0: 					);
0: 			}
0: 		}
0: 		this.cost = cost;
0: 		this.rowCount = rowCount;
0: 		this.singleScanRowCount = singleScanRowCount;
0: 	}
0: 
0: 	/** @see CostEstimate#setCost */
0: 	public void setCost(CostEstimate other) {
0: 		cost = other.getEstimatedCost();
0: 		rowCount = other.rowCount();
0: 		singleScanRowCount = other.singleScanRowCount();
0: 	}
0: 
0: 	/** @see CostEstimate#setSingleScanRowCount */
0: 	public void setSingleScanRowCount(double singleScanRowCount)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (singleScanRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All parameters expected to be < 0.0, " +
0: 					"\n\tsingleScanRowCount = " + singleScanRowCount 
0: 					);
0: 			}
0: 		}
0: 		this.singleScanRowCount = singleScanRowCount;
0: 	}
0: 
0: 	/** @see CostEstimate#compare */
0: 	public double compare(CostEstimate other) {
0: 		if (SanityManager.DEBUG) {
0: 			if (other == null) {
0: 				SanityManager.THROWASSERT("Comparing with null CostEstimate");
0: 			}
0: 
0: 			if ( ! (other instanceof CostEstimateImpl)) {
0: 				SanityManager.THROWASSERT(other.getClass().getName());
0: 			}
0: 		}
0: 
0: 		return this.cost - ((CostEstimateImpl) other).cost;
0: 	}
0: 
0: 	/** @see CostEstimate#add */
0: 	public CostEstimate add(CostEstimate other, CostEstimate retval) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(other instanceof CostEstimateImpl);
0: 			SanityManager.ASSERT(retval == null ||
0: 								retval instanceof CostEstimateImpl);
0: 		}
0: 
0: 		CostEstimateImpl	addend = (CostEstimateImpl) other;
0: 
0: 		double sumCost = this.cost + addend.cost;
0: 		double sumRowCount = this.rowCount + addend.rowCount;
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (sumCost < 0.0 || 
0: 			    sumRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All sums expected to be < 0.0, " +
0: 					"\n\tthis.cost = " + this.cost +
0: 					"\n\taddend.cost = " + addend.cost +
0: 					"\n\tsumCost = " + sumCost +
0: 					"\n\tthis.rowCount = " + this.rowCount +
0: 					"\n\taddend.rowCount = " + addend.rowCount +
0: 					"\n\tsumRowCount = " + sumRowCount
0: 					);
0: 			}
0: 		}
0: 
0: 		/* Presume that ordering is not maintained */
0: 		return setState(sumCost,
0: 						sumRowCount,
0: 						(CostEstimateImpl) retval);
0: 	}
0: 
0: 	/** @see CostEstimate#multiply */
0: 	public CostEstimate multiply(double multiplicand, CostEstimate retval) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(retval == null ||
0: 								retval instanceof CostEstimateImpl);
0: 		}
0: 
0: 		double multCost = this.cost * multiplicand;
0: 		double multRowCount = this.rowCount * multiplicand;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (multCost < 0.0 || 
0: 			    multRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All products expected to be < 0.0, " +
0: 					"\n\tthis.cost = " + this.cost +
0: 					"\n\tmultiplicand = " + multiplicand +
0: 					"\n\tmultCost = " + multCost +
0: 					"\n\tthis.rowCount = " + this.rowCount +
0: 					"\n\tmultRowCount = " + multRowCount
0: 					);
0: 			}
0: 		}
0: 
0: 		/* Presume that ordering is not maintained */
0: 		return setState(multCost,
0: 						multRowCount,
0: 						(CostEstimateImpl) retval);
0: 	}
0: 
0: 	/** @see CostEstimate#divide */
0: 	public CostEstimate divide(double divisor, CostEstimate retval) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(retval == null ||
0: 								retval instanceof CostEstimateImpl);
0: 		}
0: 
0: 		double divCost = this.cost / divisor;
0: 		double divRowCount = this.rowCount / divisor;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (divCost < 0.0 || 
0: 			    divRowCount < 0.0)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"All products expected to be < 0.0, " +
0: 					"\n\tthis.cost = " + this.cost +
0: 					"\n\tdivisor = " + divisor +
0: 					"\n\tdivCost = " + divCost +
0: 					"\n\tthis.rowCount = " + this.rowCount +
0: 					"\n\tdivRowCount = " + divRowCount
0: 					);
0: 			}
0: 		}
0: 
0: 		/* Presume that ordering is not maintained */
0: 		return setState(divCost,
0: 						divRowCount,
0: 						(CostEstimateImpl) retval);
0: 	}
0: 
0: 	/** @see CostEstimate#rowCount */
0: 	public double rowCount() {
0: 		return rowCount;
0: 	}
0: 
0: 	/** @see CostEstimate#singleScanRowCount */
0: 	public double singleScanRowCount() {
0: 		return singleScanRowCount;
0: 	}
0: 
0: 	/** @see CostEstimate#cloneMe */
0: 	public CostEstimate cloneMe() {
0: 		return new CostEstimateImpl(cost,
0: 									rowCount,
0: 									singleScanRowCount);
0: 	}
0: 
0: 	/** @see CostEstimate#isUninitialized */
0: 	public boolean isUninitialized()
0: 	{
0: 		return (cost == Double.MAX_VALUE &&
0: 			    rowCount == Double.MAX_VALUE &&
0: 				singleScanRowCount == Double.MAX_VALUE);
0: 	}
0: 
0: 	/** @see StoreCostResult#getEstimatedCost */
0: 	public double getEstimatedCost() {
0: 		return cost;
0: 	}
0: 
0: 	/** @see StoreCostResult#setEstimatedCost */
0: 	public void setEstimatedCost(double cost) {
0: 		this.cost = cost;
0: 	}
0: 
0: 	/** @see StoreCostResult#getEstimatedRowCount */
0: 	public long getEstimatedRowCount() {
0: 		return (long) rowCount;
0: 	}
0: 
0: 	/** @see StoreCostResult#setEstimatedRowCount */
0: 	public void setEstimatedRowCount(long count) {
0: 		/* This method is called by the store to
0: 		 * give us the estimate for the # of rows
0: 		 * returned in a scan.  So, we set both
0: 		 * rowCount and singleScanRowCount here.
0: 		 */
0: 		rowCount = (double) count;
0: 		singleScanRowCount = (double) count;
0: 	}
0: 
0: 	public CostEstimateImpl setState(double theCost,
0: 										double theRowCount,
0: 										CostEstimateImpl retval) {
0: 		if (retval == null) {
0: 			retval = new CostEstimateImpl();
0: 		}
0: 
0: 		retval.cost = theCost;
0: 		retval.rowCount = theRowCount;
0: 
0: 		return retval;
0: 	}
0: }
============================================================================