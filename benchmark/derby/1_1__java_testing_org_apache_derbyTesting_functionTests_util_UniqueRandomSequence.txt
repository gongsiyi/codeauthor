1:4ea38fb: /*
1:4ea38fb: 
1:4ea38fb: Derby - Class org.apache.derbyTesting.functionTests.util.UniqueRandomSequence
1:4ea38fb: 
1:4ea38fb: Licensed to the Apache Software Foundation (ASF) under one or more
1:4ea38fb: contributor license agreements.  See the NOTICE file distributed with
1:4ea38fb: this work for additional information regarding copyright ownership.
1:4ea38fb: The ASF licenses this file to You under the Apache License, Version 2.0
1:4ea38fb: (the "License"); you may not use this file except in compliance with
1:4ea38fb: the License.  You may obtain a copy of the License at
1:4ea38fb: 
1:4ea38fb:    http://www.apache.org/licenses/LICENSE-2.0
1:4ea38fb: 
1:4ea38fb: Unless required by applicable law or agreed to in writing, software
1:4ea38fb: distributed under the License is distributed on an "AS IS" BASIS,
1:4ea38fb: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ea38fb: See the License for the specific language governing permissions and
1:4ea38fb: limitations under the License.
1:4ea38fb: 
1:4ea38fb: */
1:4ea38fb: 
1:4ea38fb: package org.apache.derbyTesting.functionTests.util;
1:4ea38fb: 
1:4ea38fb: import java.util.Random;
1:4ea38fb: 
1:4ea38fb: /**
1:4ea38fb:  * Utility class that generates a sequence of unique numbers in random order.
1:4ea38fb:  * Example of how to use the generator to print all the numbers from 0 to 9
1:4ea38fb:  * in random order:
1:4ea38fb:  * <pre>
1:4ea38fb:  * UniqueRandomSequence sequence = new UniqueRandomSequence(10);
1:4ea38fb:  * while (sequence.hasMore()) {
1:4ea38fb:  *     System.out.println(sequence.nextValue());
1:4ea38fb:  * }
1:4ea38fb:  * </pre>
1:4ea38fb:  */
1:4ea38fb: public class UniqueRandomSequence {
1:4ea38fb: 
1:4ea38fb:     /** Array of the numbers to be used in the sequence. */
1:4ea38fb:     private final int[] numbers;
1:4ea38fb: 
1:4ea38fb:     /** Random number generator. */
1:4ea38fb:     private final Random random = new Random();
1:4ea38fb: 
1:4ea38fb:     /** How many numbers are left in the sequence. */
1:4ea38fb:     private int numbersLeft;
1:4ea38fb: 
1:4ea38fb:     /**
1:4ea38fb:      * Generate a random sequence with all the numbers from 0 up to
1:4ea38fb:      * {@code length-1}.
1:4ea38fb:      * @param length the length of the sequence
1:4ea38fb:      */
1:4ea38fb:     public UniqueRandomSequence(int length) {
1:4ea38fb:         this(0, length, 1);
1:4ea38fb:     }
1:4ea38fb: 
1:4ea38fb:     /**
1:4ea38fb:      * Generate a random sequence in the specified range.
1:4ea38fb:      * @param start the smallest number in the sequence
1:4ea38fb:      * @param length the size of the sequence
1:4ea38fb:      * @param step the difference between adjacent numbers if the sequence is
1:4ea38fb:      * sorted
1:4ea38fb:      */
1:4ea38fb:     public UniqueRandomSequence(int start, int length, int step) {
1:4ea38fb:         if (step <= 0) {
1:4ea38fb:             throw new IllegalArgumentException("step must be greater than 0");
1:4ea38fb:         }
1:4ea38fb:         numbers = new int[length];
1:4ea38fb:         for (int i = 0, val = start; i < length; i++, val += step) {
1:4ea38fb:             numbers[i] = val;
1:4ea38fb:         }
1:4ea38fb:         numbersLeft = length;
1:4ea38fb:     }
1:4ea38fb: 
1:4ea38fb:     /**
1:4ea38fb:      * Check whether there are more numbers in the sequence.
1:4ea38fb:      * @return {@code true} if there are more numbers in the sequence,
1:4ea38fb:      * {@code false} otherwise
1:4ea38fb:      */
1:4ea38fb:     public boolean hasMore() {
1:4ea38fb:         return numbersLeft > 0;
1:4ea38fb:     }
1:4ea38fb: 
1:4ea38fb:     /**
1:4ea38fb:      * Fetch the next number from the sequence.
1:4ea38fb:      * @return a unique value in this generator's range
1:4ea38fb:      */
1:4ea38fb:     public int nextValue() {
1:4ea38fb:         int pos = random.nextInt(numbersLeft);
1:4ea38fb:         int value = numbers[pos];
1:4ea38fb:         numbers[pos] = numbers[numbersLeft - 1];
1:4ea38fb:         numbersLeft--;
1:4ea38fb:         return value;
1:4ea38fb:     }
1:4ea38fb: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4ea38fb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.util.UniqueRandomSequence
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Utility class that generates a sequence of unique numbers in random order.
1:  * Example of how to use the generator to print all the numbers from 0 to 9
1:  * in random order:
1:  * <pre>
1:  * UniqueRandomSequence sequence = new UniqueRandomSequence(10);
1:  * while (sequence.hasMore()) {
1:  *     System.out.println(sequence.nextValue());
1:  * }
1:  * </pre>
1:  */
1: public class UniqueRandomSequence {
1: 
1:     /** Array of the numbers to be used in the sequence. */
1:     private final int[] numbers;
1: 
1:     /** Random number generator. */
1:     private final Random random = new Random();
1: 
1:     /** How many numbers are left in the sequence. */
1:     private int numbersLeft;
1: 
1:     /**
1:      * Generate a random sequence with all the numbers from 0 up to
1:      * {@code length-1}.
1:      * @param length the length of the sequence
1:      */
1:     public UniqueRandomSequence(int length) {
1:         this(0, length, 1);
1:     }
1: 
1:     /**
1:      * Generate a random sequence in the specified range.
1:      * @param start the smallest number in the sequence
1:      * @param length the size of the sequence
1:      * @param step the difference between adjacent numbers if the sequence is
1:      * sorted
1:      */
1:     public UniqueRandomSequence(int start, int length, int step) {
1:         if (step <= 0) {
1:             throw new IllegalArgumentException("step must be greater than 0");
1:         }
1:         numbers = new int[length];
1:         for (int i = 0, val = start; i < length; i++, val += step) {
1:             numbers[i] = val;
1:         }
1:         numbersLeft = length;
1:     }
1: 
1:     /**
1:      * Check whether there are more numbers in the sequence.
1:      * @return {@code true} if there are more numbers in the sequence,
1:      * {@code false} otherwise
1:      */
1:     public boolean hasMore() {
1:         return numbersLeft > 0;
1:     }
1: 
1:     /**
1:      * Fetch the next number from the sequence.
1:      * @return a unique value in this generator's range
1:      */
1:     public int nextValue() {
1:         int pos = random.nextInt(numbersLeft);
1:         int value = numbers[pos];
1:         numbers[pos] = numbers[numbersLeft - 1];
1:         numbersLeft--;
1:         return value;
1:     }
1: }
============================================================================