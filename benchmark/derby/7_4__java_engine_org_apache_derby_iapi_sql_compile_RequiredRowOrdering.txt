1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.RequiredRowOrdering
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This interface provides a representation of the required ordering of rows
1:eac0369:  * from a ResultSet.  Different operations can require ordering: ORDER BY,
1:eac0369:  * DISTINCT, GROUP BY.  Some operations, like ORDER BY, require that the
1:eac0369:  * columns be ordered a particular way, while others, like DISTINCT and
1:eac0369:  * GROUP BY, reuire only that there be no duplicates in the result.
1:eac0369:  */
1:eac0369: public interface RequiredRowOrdering
1:eac0369: {
1:eac0369: 	static final int SORT_REQUIRED = 1;
1:eac0369: 	static final int ELIMINATE_DUPS = 2;
1:eac0369: 	static final int NOTHING_REQUIRED = 3;
1:eac0369: 
1:9f0dc0e:     /**
1:9f0dc0e:      * Tell whether sorting is required for this RequiredRowOrdering,
1:9f0dc0e:      * given a RowOrdering.
1:9f0dc0e:      *
1:9f0dc0e:      * @param rowOrdering   The order of rows in question
1:9f0dc0e:      * @param optimizableList The list of join participants
1:9f0dc0e:      * @param proposedJoinOrder The current join order being considered by
1:9f0dc0e:      *    the optimizer. We need to look into this to determine if the outer
1:9f0dc0e:      *    optimizables are single row result set if the order by column is
1:9f0dc0e:      *    on an inner optimizable and that inner optimizable is not a one.
1:9f0dc0e:      *    {@code proposedJoinOrder} is a map onto {@code optimizableList}:
1:9f0dc0e:      *    it contains indexes of optimizables in that list in the join order
1:9f0dc0e:      *    proposed, cf. {@code OptimizerImpl#proposedJoinOrder}.
1:9f0dc0e:      * @return  SORT_REQUIRED if sorting is required,
1:9f0dc0e:      *          ELIMINATE_DUPS if no sorting is required but duplicates
1:9f0dc0e:      *                          must be eliminated (i.e. the rows are in
1:9f0dc0e:      *                          the right order but there may be duplicates),
1:9f0dc0e:      *          NOTHING_REQUIRED is no operation is required
1:9f0dc0e:      *
1:9f0dc0e:      * @exception StandardException     Thrown on error
1:9f0dc0e:      */
1:9f0dc0e:     int sortRequired(RowOrdering rowOrdering,
1:9f0dc0e:                      OptimizableList optimizableList,
1:9f0dc0e:                      int[] proposedJoinOrder) throws StandardException;
1:eac0369: 
1:9f0dc0e:    /**
1:9f0dc0e:     * Tell whether sorting is required for this RequiredRowOrdering,
1:9f0dc0e:     * given a RowOrdering representing a partial join order, and
1:9f0dc0e:     * a bit map telling what tables are represented in the join order.
1:9f0dc0e:     * This is useful for reducing the number of cases the optimizer
1:9f0dc0e:     * has to consider.
1:9f0dc0e:     *
1:9f0dc0e:     * @param rowOrdering   The order of rows in the partial join order
1:9f0dc0e:     * @param tableMap      A bit map of the tables in the partial join order
1:9f0dc0e:     * @param optimizableList The list of join participants
1:9f0dc0e:     * @param proposedJoinOrder The current join order being considered by
1:9f0dc0e:     *    the optimizer. We need to look into this to determine if the outer
1:9f0dc0e:     *    optimizables are single row result set if the order by column is
1:9f0dc0e:     *    on an inner optimizable and that inner optimizable is not a one.
1:9f0dc0e:     *    {@code proposedJoinOrder} is a map onto {@code optimizableList}:
1:9f0dc0e:     *    it contains indexes of optimizables in that list in the join order
1:9f0dc0e:     *    proposed, cf. {@code OptimizerImpl#proposedJoinOrder}.
1:9f0dc0e:     *    DERBY-3926 and DERBY-6148
1:9f0dc0e:     *
1:9f0dc0e:     * @return  SORT_REQUIRED if sorting is required,
1:9f0dc0e:     *          ELIMINATE_DUPS if no sorting is required by duplicates
1:9f0dc0e:     *                          must be eliminated (i.e. the rows are in
1:9f0dc0e:     *                          the right order but there may be duplicates),
1:9f0dc0e:     *          NOTHING_REQUIRED is no operation is required
1:9f0dc0e:     *
1:9f0dc0e:     * @exception StandardException     Thrown on error
1:9f0dc0e:     */
1:9f0dc0e:     int sortRequired(RowOrdering rowOrdering,
1:9f0dc0e:                      JBitSet tableMap,
1:9f0dc0e:                      OptimizableList optimizableList,
1:9f0dc0e:                      int[] proposedJoinOrder) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Estimate the cost of doing a sort for this row ordering, given
1:eac0369: 	 * the number of rows to be sorted.  This does not take into account
1:eac0369: 	 * whether the sort is really needed.  It also estimates the number of
1:eac0369: 	 * result rows.
7:eac0369: 	 *
1:eac0369: 	 * @param estimatedInputRows	The estimated number of rows to sort
1:eac0369: 	 * @param rowOrdering			The ordering of the input rows
1:eac0369: 	 * @param resultCost			A place to store the resulting cost
1:eac0369: 	 *
3:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	void estimateCost(double estimatedInputRows,
1:eac0369: 						RowOrdering rowOrdering,
1:eac0369: 						CostEstimate resultCost)
1:200a5ea: 					throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate that a sort is necessary to fulfill this required ordering.
1:eac0369: 	 * This method may be called many times during a single optimization.
1:eac0369: 	 */
1:eac0369: 	void sortNeeded();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate that a sort is *NOT* necessary to fulfill this required
1:eac0369: 	 * ordering.  This method may be called many times during a single
1:eac0369: 	 * optimization.
1:eac0369: 	 */
1:eac0369: 	void sortNotNeeded();
1:eac0369: 
1:eac0369: 	boolean getSortNeeded();
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f0dc0e
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tell whether sorting is required for this RequiredRowOrdering,
1:      * given a RowOrdering.
1:      *
1:      * @param rowOrdering   The order of rows in question
1:      * @param optimizableList The list of join participants
1:      * @param proposedJoinOrder The current join order being considered by
1:      *    the optimizer. We need to look into this to determine if the outer
1:      *    optimizables are single row result set if the order by column is
1:      *    on an inner optimizable and that inner optimizable is not a one.
1:      *    {@code proposedJoinOrder} is a map onto {@code optimizableList}:
1:      *    it contains indexes of optimizables in that list in the join order
1:      *    proposed, cf. {@code OptimizerImpl#proposedJoinOrder}.
1:      * @return  SORT_REQUIRED if sorting is required,
1:      *          ELIMINATE_DUPS if no sorting is required but duplicates
1:      *                          must be eliminated (i.e. the rows are in
1:      *                          the right order but there may be duplicates),
1:      *          NOTHING_REQUIRED is no operation is required
1:      *
1:      * @exception StandardException     Thrown on error
1:      */
1:     int sortRequired(RowOrdering rowOrdering,
1:                      OptimizableList optimizableList,
1:                      int[] proposedJoinOrder) throws StandardException;
1:    /**
1:     * Tell whether sorting is required for this RequiredRowOrdering,
1:     * given a RowOrdering representing a partial join order, and
1:     * a bit map telling what tables are represented in the join order.
1:     * This is useful for reducing the number of cases the optimizer
1:     * has to consider.
1:     *
1:     * @param rowOrdering   The order of rows in the partial join order
1:     * @param tableMap      A bit map of the tables in the partial join order
1:     * @param optimizableList The list of join participants
1:     * @param proposedJoinOrder The current join order being considered by
1:     *    the optimizer. We need to look into this to determine if the outer
1:     *    optimizables are single row result set if the order by column is
1:     *    on an inner optimizable and that inner optimizable is not a one.
1:     *    {@code proposedJoinOrder} is a map onto {@code optimizableList}:
1:     *    it contains indexes of optimizables in that list in the join order
1:     *    proposed, cf. {@code OptimizerImpl#proposedJoinOrder}.
1:     *    DERBY-3926 and DERBY-6148
1:     *
1:     * @return  SORT_REQUIRED if sorting is required,
1:     *          ELIMINATE_DUPS if no sorting is required by duplicates
1:     *                          must be eliminated (i.e. the rows are in
1:     *                          the right order but there may be duplicates),
1:     *          NOTHING_REQUIRED is no operation is required
1:     *
1:     * @exception StandardException     Thrown on error
1:     */
1:     int sortRequired(RowOrdering rowOrdering,
1:                      JBitSet tableMap,
1:                      OptimizableList optimizableList,
1:                      int[] proposedJoinOrder) throws StandardException;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:fd4430d
/////////////////////////////////////////////////////////////////////////
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:200a5ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.sql.compile.PredicateList;
/////////////////////////////////////////////////////////////////////////
0: 	 * @param optimizableList	The current join order being considered by 
0: 	 *    the optimizer. We need to look into this to determine if the outer
0: 	 *    optimizables are single row resultset if the order by column is
0: 	 *    on an inner optimizable and that inner optimizable is not a one
0: 	 *    row resultset. DERBY-3926
/////////////////////////////////////////////////////////////////////////
0: 	int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList) 
1: 	throws StandardException;
/////////////////////////////////////////////////////////////////////////
0: 	 * @param optimizableList	The current join order being considered by 
0: 	 *    the optimizer. We need to look into this to determine if the outer
0: 	 *    optimizables are single row resultset if the order by column is
0: 	 *    on an inner optimizable and that inner optimizable is not a one
0: 	 *    row resultset. DERBY-3926
/////////////////////////////////////////////////////////////////////////
0: 	int sortRequired(RowOrdering rowOrdering, JBitSet tableMap, 
0: 			OptimizableList optimizableList)
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.RequiredRowOrdering
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
1: /**
1:  * This interface provides a representation of the required ordering of rows
1:  * from a ResultSet.  Different operations can require ordering: ORDER BY,
1:  * DISTINCT, GROUP BY.  Some operations, like ORDER BY, require that the
1:  * columns be ordered a particular way, while others, like DISTINCT and
1:  * GROUP BY, reuire only that there be no duplicates in the result.
1:  */
1: public interface RequiredRowOrdering
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	static final int SORT_REQUIRED = 1;
1: 	static final int ELIMINATE_DUPS = 2;
1: 	static final int NOTHING_REQUIRED = 3;
1: 
1: 	/**
0: 	 * Tell whether sorting is required for this RequiredRowOrdering,
0: 	 * given a RowOrdering.
1: 	 *
0: 	 * @param rowOrdering	The order of rows in question
1: 	 *
0: 	 * @return	SORT_REQUIRED if sorting is required,
0: 	 *			ELIMINATE_DUPS if no sorting is required but duplicates
0: 	 *							must be eliminated (i.e. the rows are in
0: 	 *							the right order but there may be duplicates),
0: 	 *			NOTHING_REQUIRED is no operation is required
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	int sortRequired(RowOrdering rowOrdering) throws StandardException;
1: 
1: 	/**
0: 	 * Tell whether sorting is required for this RequiredRowOrdering,
0: 	 * given a RowOrdering representing a partial join order, and
0: 	 * a bit map telling what tables are represented in the join order.
0: 	 * This is useful for reducing the number of cases the optimizer
0: 	 * has to consider.
1: 	 *
0: 	 * @param rowOrdering	The order of rows in the partial join order
0: 	 * @param tableMap		A bit map of the tables in the partial join order
1: 	 *
0: 	 * @return	SORT_REQUIRED if sorting is required,
0: 	 *			ELIMINATE_DUPS if no sorting is required by duplicates
0: 	 *							must be eliminated (i.e. the rows are in
0: 	 *							the right order but there may be duplicates),
0: 	 *			NOTHING_REQUIRED is no operation is required
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	int sortRequired(RowOrdering rowOrdering, JBitSet tableMap)
0: 			throws StandardException;
1: 
1: 	/**
1: 	 * Estimate the cost of doing a sort for this row ordering, given
1: 	 * the number of rows to be sorted.  This does not take into account
1: 	 * whether the sort is really needed.  It also estimates the number of
1: 	 * result rows.
1: 	 *
1: 	 * @param estimatedInputRows	The estimated number of rows to sort
1: 	 * @param rowOrdering			The ordering of the input rows
1: 	 * @param resultCost			A place to store the resulting cost
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	void estimateCost(double estimatedInputRows,
1: 						RowOrdering rowOrdering,
1: 						CostEstimate resultCost)
0: 					throws StandardException;
1: 
1: 	/**
1: 	 * Indicate that a sort is necessary to fulfill this required ordering.
1: 	 * This method may be called many times during a single optimization.
1: 	 */
1: 	void sortNeeded();
1: 
1: 	/**
1: 	 * Indicate that a sort is *NOT* necessary to fulfill this required
1: 	 * ordering.  This method may be called many times during a single
1: 	 * optimization.
1: 	 */
1: 	void sortNotNeeded();
1: 
1: 	boolean getSortNeeded();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: /**
0:  * This interface provides a representation of the required ordering of rows
0:  * from a ResultSet.  Different operations can require ordering: ORDER BY,
0:  * DISTINCT, GROUP BY.  Some operations, like ORDER BY, require that the
0:  * columns be ordered a particular way, while others, like DISTINCT and
0:  * GROUP BY, reuire only that there be no duplicates in the result.
0:  */
0: public interface RequiredRowOrdering
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	static final int SORT_REQUIRED = 1;
0: 	static final int ELIMINATE_DUPS = 2;
0: 	static final int NOTHING_REQUIRED = 3;
0: 
0: 	/**
0: 	 * Tell whether sorting is required for this RequiredRowOrdering,
0: 	 * given a RowOrdering.
0: 	 *
0: 	 * @param rowOrdering	The order of rows in question
0: 	 *
0: 	 * @return	SORT_REQUIRED if sorting is required,
0: 	 *			ELIMINATE_DUPS if no sorting is required but duplicates
0: 	 *							must be eliminated (i.e. the rows are in
0: 	 *							the right order but there may be duplicates),
0: 	 *			NOTHING_REQUIRED is no operation is required
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	int sortRequired(RowOrdering rowOrdering) throws StandardException;
0: 
0: 	/**
0: 	 * Tell whether sorting is required for this RequiredRowOrdering,
0: 	 * given a RowOrdering representing a partial join order, and
0: 	 * a bit map telling what tables are represented in the join order.
0: 	 * This is useful for reducing the number of cases the optimizer
0: 	 * has to consider.
0: 	 *
0: 	 * @param rowOrdering	The order of rows in the partial join order
0: 	 * @param tableMap		A bit map of the tables in the partial join order
0: 	 *
0: 	 * @return	SORT_REQUIRED if sorting is required,
0: 	 *			ELIMINATE_DUPS if no sorting is required by duplicates
0: 	 *							must be eliminated (i.e. the rows are in
0: 	 *							the right order but there may be duplicates),
0: 	 *			NOTHING_REQUIRED is no operation is required
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	int sortRequired(RowOrdering rowOrdering, JBitSet tableMap)
0: 			throws StandardException;
0: 
0: 	/**
0: 	 * Estimate the cost of doing a sort for this row ordering, given
0: 	 * the number of rows to be sorted.  This does not take into account
0: 	 * whether the sort is really needed.  It also estimates the number of
0: 	 * result rows.
0: 	 *
0: 	 * @param estimatedInputRows	The estimated number of rows to sort
0: 	 * @param rowOrdering			The ordering of the input rows
0: 	 * @param resultCost			A place to store the resulting cost
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	void estimateCost(double estimatedInputRows,
0: 						RowOrdering rowOrdering,
0: 						CostEstimate resultCost)
0: 					throws StandardException;
0: 
0: 	/**
0: 	 * Indicate that a sort is necessary to fulfill this required ordering.
0: 	 * This method may be called many times during a single optimization.
0: 	 */
0: 	void sortNeeded();
0: 
0: 	/**
0: 	 * Indicate that a sort is *NOT* necessary to fulfill this required
0: 	 * ordering.  This method may be called many times during a single
0: 	 * optimization.
0: 	 */
0: 	void sortNotNeeded();
0: 
0: 	boolean getSortNeeded();
0: }
============================================================================