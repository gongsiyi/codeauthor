1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.DataTypeUtilities
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:01b5961: import org.apache.derby.iapi.reference.JDBC40Translation;
1:eac0369: 
1:bc2c59e: import java.sql.Timestamp;
1:eac0369: import java.sql.Types;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: 
3:eac0369: /**
1:eac0369: 	A set of static utility methods for data types.
1:eac0369:  */
1:eac0369: public abstract class DataTypeUtilities  {
1:eac0369: 
1:bc2c59e:     /** Clone a Timestamp because they are mutable */
1:bc2c59e:     public  static  Timestamp   clone( Timestamp original )
1:bc2c59e:     {
1:bc2c59e:         return original == null ? null : (Timestamp) original.clone();
1:bc2c59e:     }
1:bc2c59e:     
1:eac0369: 	/**
1:eac0369: 		Get the precision of the datatype.
2:eac0369: 		@param	dtd			data type descriptor
1:eac0369: 	*/
1:eac0369: 	public static int getPrecision(DataTypeDescriptor dtd) {
2:eac0369: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1:eac0369: 
1:eac0369: 		switch ( typeId )
1:eac0369: 		{
1:eac0369: 		case Types.CHAR: // CHAR et alia return their # characters...
1:eac0369: 		case Types.VARCHAR:
1:eac0369: 		case Types.LONGVARCHAR:
1:eac0369: 		case Types.CLOB:
1:eac0369: 		case Types.BINARY:     	// BINARY types return their # bytes...
1:eac0369: 		case Types.VARBINARY:
1:eac0369: 		case Types.LONGVARBINARY:
1:eac0369: 		case Types.BLOB:
1:e33b8d8:         case Types.SQLXML:
1:eac0369: 				return dtd.getMaximumWidth();
1:eac0369: 			case Types.SMALLINT:
1:eac0369: 				return 5;
1:1a4ea31: 			case Types.BOOLEAN:
1:eac0369: 				return 1;
2:eac0369: 		}
1:eac0369:     	
1:eac0369: 		return dtd.getPrecision();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the precision of the datatype, in decimal digits
1:eac0369: 		This is used by EmbedResultSetMetaData.
1:eac0369: 		@param	dtd			data type descriptor
1:eac0369: 	*/
1:eac0369: 	public static int getDigitPrecision(DataTypeDescriptor dtd) {
1:eac0369: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1:eac0369: 
1:eac0369: 		switch ( typeId )
1:eac0369: 		{
1:eac0369: 			case Types.FLOAT:
1:eac0369: 			case Types.DOUBLE:
1:eac0369: 				return TypeId.DOUBLE_PRECISION_IN_DIGITS;
1:eac0369: 			case Types.REAL:
1:eac0369: 				return TypeId.REAL_PRECISION_IN_DIGITS;
1:eac0369: 			default: return getPrecision(dtd);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is the data type case sensitive.
1:eac0369: 		@param	dtd			data type descriptor
1:eac0369: 	*/
1:eac0369: 	public static boolean isCaseSensitive(DataTypeDescriptor dtd) {
1:eac0369: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1:eac0369: 
1:eac0369: 		return (typeId == Types.CHAR ||
1:eac0369: 		          typeId == Types.VARCHAR ||
1:eac0369: 		          typeId == Types.CLOB ||
1:099e28f: 		          typeId == Types.LONGVARCHAR ||
1:e33b8d8:                   typeId == Types.SQLXML);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Is the data type nullable.
1:eac0369: 		@param	dtd			data type descriptor
1:eac0369: 	*/
1:eac0369: 	public static int isNullable(DataTypeDescriptor dtd) {
1:eac0369: 		return dtd.isNullable() ?
1:eac0369: 				ResultSetMetaData.columnNullable :
1:eac0369: 				ResultSetMetaData.columnNoNulls;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is the data type signed.
1:eac0369: 		@param	dtd			data type descriptor
1:eac0369: 	*/
1:eac0369: 	public static boolean isSigned(DataTypeDescriptor dtd) {
1:eac0369: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1:eac0369: 
1:eac0369: 		return ( typeId == Types.INTEGER ||
1:eac0369: 		     		typeId == Types.FLOAT ||
1:eac0369: 		     		typeId == Types.DECIMAL ||
1:eac0369: 		     		typeId == Types.SMALLINT ||
1:eac0369: 		     		typeId == Types.BIGINT ||
1:eac0369: 		     		typeId == Types.TINYINT ||
1:eac0369: 		     		typeId == Types.NUMERIC ||
1:eac0369: 		     		typeId == Types.REAL ||
1:eac0369: 		     		typeId == Types.DOUBLE );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets the display width of a column of a given type.
1:eac0369: 	  *
1:eac0369: 	  *	@param	dtd			data type descriptor
1:eac0369: 	  *
1:eac0369: 	  *	@return	associated column display width
1:eac0369: 	  */
1:eac0369: 	public	static	int getColumnDisplaySize(DataTypeDescriptor dtd)
1:eac0369: 	{
1:eac0369: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1:eac0369: 		int	storageLength = dtd.getMaximumWidth();
1:eac0369: 		return DataTypeUtilities.getColumnDisplaySize(typeId, storageLength);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public	static	int getColumnDisplaySize(int typeId, int storageLength)
1:eac0369: 	{
1:eac0369: 		int size;
1:eac0369: 		switch (typeId)
1:eac0369: 		{
1:eac0369: 			case Types.TIMESTAMP:
1:1e90bf4: 				size = 29;
1:eac0369: 				break;
2:eac0369: 			case Types.DATE:
1:eac0369: 				size = 10;
1:eac0369: 				break;	
1:eac0369: 			case Types.TIME:
1:eac0369: 				size = 8;
1:eac0369: 				break;
1:eac0369: 			case Types.INTEGER:
1:eac0369: 				size = 11;
1:eac0369: 				break;
1:eac0369: 			case Types.SMALLINT :
1:eac0369: 				size = 6;
1:eac0369: 				break;
1:eac0369: 			case Types.REAL :
1:eac0369: 			case Types.FLOAT :
1:c0a5ce1: 				size = 15;
1:eac0369: 				break;
1:eac0369: 			case Types.DOUBLE:
1:c0a5ce1: 				size = 24;
1:eac0369: 				break;
1:eac0369: 			case Types.TINYINT :
1:eac0369: 				size = 15;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case Types.BINARY:
1:eac0369: 			case Types.VARBINARY:
1:eac0369: 			case Types.LONGVARBINARY:
1:eac0369:             case Types.BLOB:
1:eac0369: 				size =  2*storageLength;
1:eac0369: 				if (size < 0)
1:eac0369: 					size = Integer.MAX_VALUE;
1:eac0369:                 break;
1:eac0369: 
1:eac0369: 			case Types.BIGINT:
1:eac0369: 				size = 20;
1:eac0369: 				break;
1:eac0369: 			case Types.BIT:
1:1a4ea31: 			case Types.BOOLEAN:
1:eac0369: 				// Types.BIT == SQL BOOLEAN, so 5 chars for 'false'
1:eac0369: 				// In JDBC 3.0, Types.BIT or Types.BOOLEAN = SQL BOOLEAN
1:eac0369: 				size = 5;
1:eac0369: 				break;
1:eac0369: 			default: 
1:eac0369: 				// MaximumWidth is -1 when it is unknown.
1:eac0369: 				int w = storageLength;
1:e33b8d8:                 size = (w > 0 ? w : JDBC40Translation.DEFAULT_COLUMN_DISPLAY_SIZE);
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 		return size;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Compute the maximum width (column display width) of a decimal or numeric data value,
1:eac0369:      * given its precision and scale.
1:eac0369:      *
1:eac0369:      * @param precision The precision (number of digits) of the data value.
1:eac0369:      * @param scale The number of fractional digits (digits to the right of the decimal point).
1:eac0369:      *
1:eac0369:      * @return The maximum number of chracters needed to display the value.
1:eac0369:      */
1:eac0369:     public static int computeMaxWidth( int precision, int scale)
1:eac0369:     {
1:55e0679: 	// There are 3 possible cases with respect to finding the correct max
1:55e0679: 	// width for DECIMAL type.
1:55e0679: 	// 1. If scale = 0, only sign should be added to precision.
1:55e0679: 	// 2. scale=precision, 3 should be added to precision for sign, decimal and an additional char '0'.
1:55e0679: 	// 3. precision > scale > 0, 2 should be added to precision for sign and decimal.
1:55e0679: 	return (scale ==0) ? (precision +1) : ((scale == precision) ? (precision + 3) : (precision + 2));
1:eac0369:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:c66c15d
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         case Types.SQLXML:
/////////////////////////////////////////////////////////////////////////
1:                   typeId == Types.SQLXML);
/////////////////////////////////////////////////////////////////////////
1:                 size = (w > 0 ? w : JDBC40Translation.DEFAULT_COLUMN_DISPLAY_SIZE);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Timestamp;
/////////////////////////////////////////////////////////////////////////
1:     /** Clone a Timestamp because they are mutable */
1:     public  static  Timestamp   clone( Timestamp original )
1:     {
1:         return original == null ? null : (Timestamp) original.clone();
1:     }
1:     
commit:1e90bf4
/////////////////////////////////////////////////////////////////////////
1: 				size = 29;
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC30Translation;
/////////////////////////////////////////////////////////////////////////
0: 				size = (w > 0 ? w : JDBC30Translation.DEFAULT_COLUMN_DISPLAY_SIZE);
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:c0a5ce1
/////////////////////////////////////////////////////////////////////////
1: 				size = 15;
1: 				size = 24;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			case Types.BOOLEAN:
/////////////////////////////////////////////////////////////////////////
1: 			case Types.BOOLEAN:
commit:01b5961
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.JDBC40Translation;
/////////////////////////////////////////////////////////////////////////
0: 		case JDBC40Translation.SQLXML:
/////////////////////////////////////////////////////////////////////////
0: 		          typeId == JDBC40Translation.SQLXML);
commit:55e0679
/////////////////////////////////////////////////////////////////////////
1: 	// There are 3 possible cases with respect to finding the correct max
1: 	// width for DECIMAL type.
1: 	// 1. If scale = 0, only sign should be added to precision.
1: 	// 2. scale=precision, 3 should be added to precision for sign, decimal and an additional char '0'.
1: 	// 3. precision > scale > 0, 2 should be added to precision for sign and decimal.
1: 	return (scale ==0) ? (precision +1) : ((scale == precision) ? (precision + 3) : (precision + 2));
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.DataTypeUtilities
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: 
1: import java.sql.Types;
1: import java.sql.ResultSetMetaData;
1: 
1: /**
1: 	A set of static utility methods for data types.
0:  * @author djd
1:  */
1: public abstract class DataTypeUtilities  {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	/**
1: 		Get the precision of the datatype.
1: 		@param	dtd			data type descriptor
1: 	*/
1: 	public static int getPrecision(DataTypeDescriptor dtd) {
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 
1: 		switch ( typeId )
1: 		{
1: 		case Types.CHAR: // CHAR et alia return their # characters...
1: 		case Types.VARCHAR:
1: 		case Types.LONGVARCHAR:
1: 		case Types.CLOB:
1: 		case Types.BINARY:     	// BINARY types return their # bytes...
1: 		case Types.VARBINARY:
1: 		case Types.LONGVARBINARY:
1: 			case Types.BLOB:
1: 				return dtd.getMaximumWidth();
1: 			case Types.SMALLINT:
1: 				return 5;
1: 			case Types.DATE:
0: 				return 10;
0: 			case JDBC30Translation.SQL_TYPES_BOOLEAN:
1: 				return 1;
1: 		}
1:     	
1: 		return dtd.getPrecision();
1: 	}
1: 
1: 	/**
1: 		Get the precision of the datatype, in decimal digits
1: 		This is used by EmbedResultSetMetaData.
1: 		@param	dtd			data type descriptor
1: 	*/
1: 	public static int getDigitPrecision(DataTypeDescriptor dtd) {
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 
1: 		switch ( typeId )
1: 		{
1: 			case Types.FLOAT:
1: 			case Types.DOUBLE:
1: 				return TypeId.DOUBLE_PRECISION_IN_DIGITS;
1: 			case Types.REAL:
1: 				return TypeId.REAL_PRECISION_IN_DIGITS;
1: 			default: return getPrecision(dtd);
1: 		}
1: 
1: 	}
1: 
1: 
1: 	/**
0: 		Is the data type currency.
1: 		@param	dtd			data type descriptor
1: 	*/
0: 	public static boolean isCurrency(DataTypeDescriptor dtd) {
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 
0: 		// Only the NUMERIC and DECIMAL types are currency
0: 		return ((typeId == Types.DECIMAL) || (typeId == Types.NUMERIC));
1: 	}
1: 
1: 	/**
1: 		Is the data type case sensitive.
1: 		@param	dtd			data type descriptor
1: 	*/
1: 	public static boolean isCaseSensitive(DataTypeDescriptor dtd) {
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 
1: 		return (typeId == Types.CHAR ||
1: 		          typeId == Types.VARCHAR ||
1: 		          typeId == Types.CLOB ||
0: 		          typeId == Types.LONGVARCHAR);
1: 	}
1: 	/**
1: 		Is the data type nullable.
1: 		@param	dtd			data type descriptor
1: 	*/
1: 	public static int isNullable(DataTypeDescriptor dtd) {
1: 		return dtd.isNullable() ?
1: 				ResultSetMetaData.columnNullable :
1: 				ResultSetMetaData.columnNoNulls;
1: 	}
1: 
1: 	/**
1: 		Is the data type signed.
1: 		@param	dtd			data type descriptor
1: 	*/
1: 	public static boolean isSigned(DataTypeDescriptor dtd) {
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 
1: 		return ( typeId == Types.INTEGER ||
1: 		     		typeId == Types.FLOAT ||
1: 		     		typeId == Types.DECIMAL ||
1: 		     		typeId == Types.SMALLINT ||
1: 		     		typeId == Types.BIGINT ||
1: 		     		typeId == Types.TINYINT ||
1: 		     		typeId == Types.NUMERIC ||
1: 		     		typeId == Types.REAL ||
1: 		     		typeId == Types.DOUBLE );
1: 	}
1: 
1: 	/**
1: 	  *	Gets the display width of a column of a given type.
1: 	  *
1: 	  *	@param	dtd			data type descriptor
1: 	  *
1: 	  *	@return	associated column display width
1: 	  */
1: 	public	static	int getColumnDisplaySize(DataTypeDescriptor dtd)
1: 	{
1: 		int typeId = dtd.getTypeId().getJDBCTypeId();
1: 		int	storageLength = dtd.getMaximumWidth();
1: 		return DataTypeUtilities.getColumnDisplaySize(typeId, storageLength);
1: 	}
1: 
1: 	public	static	int getColumnDisplaySize(int typeId, int storageLength)
1: 	{
1: 		int size;
1: 		switch (typeId)
1: 		{
1: 			case Types.TIMESTAMP:
0: 				size = 26;
1: 				break;
1: 			case Types.DATE:
1: 				size = 10;
1: 				break;	
1: 			case Types.TIME:
1: 				size = 8;
1: 				break;
1: 			case Types.INTEGER:
1: 				size = 11;
1: 				break;
1: 			case Types.SMALLINT :
1: 				size = 6;
1: 				break;
1: 			case Types.REAL :
1: 			case Types.FLOAT :
0: 				size = 13;
1: 				break;
1: 			case Types.DOUBLE:
0: 				size = 22;
1: 				break;
1: 			case Types.TINYINT :
1: 				size = 15;
1: 				break;
1: 
1: 			case Types.BINARY:
1: 			case Types.VARBINARY:
1: 			case Types.LONGVARBINARY:
1:             case Types.BLOB:
1: 				size =  2*storageLength;
1: 				if (size < 0)
1: 					size = Integer.MAX_VALUE;
1:                 break;
1: 
1: 			case Types.BIGINT:
1: 				size = 20;
1: 				break;
1: 			case Types.BIT:
0: 			case JDBC30Translation.SQL_TYPES_BOOLEAN:
1: 				// Types.BIT == SQL BOOLEAN, so 5 chars for 'false'
1: 				// In JDBC 3.0, Types.BIT or Types.BOOLEAN = SQL BOOLEAN
1: 				size = 5;
1: 				break;
1: 			default: 
1: 				// MaximumWidth is -1 when it is unknown.
1: 				int w = storageLength;
0: 				size = (w > 0 ? w : 15);
1: 				break;
1: 		}
1: 		return size;
1: 	}
1: 
1:     /**
1:      * Compute the maximum width (column display width) of a decimal or numeric data value,
1:      * given its precision and scale.
1:      *
1:      * @param precision The precision (number of digits) of the data value.
1:      * @param scale The number of fractional digits (digits to the right of the decimal point).
1:      *
1:      * @return The maximum number of chracters needed to display the value.
1:      */
1:     public static int computeMaxWidth( int precision, int scale)
1:     {
0:         return (scale == 0) ? (precision + 1) : (precision + 3);
1:     }
1: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
/////////////////////////////////////////////////////////////////////////
0: 		case Types.BLOB:
0: 		case StoredFormatIds.XML_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
1: 		          typeId == Types.LONGVARCHAR ||
0: 		          typeId == StoredFormatIds.XML_TYPE_ID);
commit:fd58c3c
/////////////////////////////////////////////////////////////////////////
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.JDBC30Translation;
0: 
0: import java.sql.Types;
0: import java.sql.ResultSetMetaData;
0: 
0: /**
0: 	A set of static utility methods for data types.
0:  * @author djd
0:  */
0: public abstract class DataTypeUtilities  {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	/**
0: 		Get the precision of the datatype.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static int getPrecision(DataTypeDescriptor dtd) {
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 
0: 		switch ( typeId )
0: 		{
0: 		case Types.CHAR: // CHAR et alia return their # characters...
0: 		case Types.VARCHAR:
0: 		case Types.LONGVARCHAR:
0: 		case Types.CLOB:
0: 		case Types.BINARY:     	// BINARY types return their # bytes...
0: 		case Types.VARBINARY:
0: 		case Types.LONGVARBINARY:
0: 			case Types.BLOB:
0: 				return dtd.getMaximumWidth();
0: 			case Types.SMALLINT:
0: 				return 5;
0: 			case Types.DATE:
0: 				return 10;
0: 			case JDBC30Translation.SQL_TYPES_BOOLEAN:
0: 				return 1;
0: 		}
0:     	
0: 		return dtd.getPrecision();
0: 	}
0: 
0: 	/**
0: 		Get the precision of the datatype, in decimal digits
0: 		This is used by EmbedResultSetMetaData.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static int getDigitPrecision(DataTypeDescriptor dtd) {
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 
0: 		switch ( typeId )
0: 		{
0: 			case Types.FLOAT:
0: 			case Types.DOUBLE:
0: 				return TypeId.DOUBLE_PRECISION_IN_DIGITS;
0: 			case Types.REAL:
0: 				return TypeId.REAL_PRECISION_IN_DIGITS;
0: 			default: return getPrecision(dtd);
0: 		}
0: 
0: 	}
0: 
0: 
0: 	/**
0: 		Is the data type currency.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static boolean isCurrency(DataTypeDescriptor dtd) {
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 
0: 		// Only the NUMERIC and DECIMAL types are currency
0: 		return ((typeId == Types.DECIMAL) || (typeId == Types.NUMERIC));
0: 	}
0: 
0: 	/**
0: 		Is the data type case sensitive.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static boolean isCaseSensitive(DataTypeDescriptor dtd) {
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 
0: 		return (typeId == Types.CHAR ||
0: 		          typeId == Types.VARCHAR ||
0: 		          typeId == Types.CLOB ||
0: 		          typeId == Types.LONGVARCHAR);
0: 	}
0: 	/**
0: 		Is the data type nullable.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static int isNullable(DataTypeDescriptor dtd) {
0: 		return dtd.isNullable() ?
0: 				ResultSetMetaData.columnNullable :
0: 				ResultSetMetaData.columnNoNulls;
0: 	}
0: 
0: 	/**
0: 		Is the data type signed.
0: 		@param	dtd			data type descriptor
0: 	*/
0: 	public static boolean isSigned(DataTypeDescriptor dtd) {
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 
0: 		return ( typeId == Types.INTEGER ||
0: 		     		typeId == Types.FLOAT ||
0: 		     		typeId == Types.DECIMAL ||
0: 		     		typeId == Types.SMALLINT ||
0: 		     		typeId == Types.BIGINT ||
0: 		     		typeId == Types.TINYINT ||
0: 		     		typeId == Types.NUMERIC ||
0: 		     		typeId == Types.REAL ||
0: 		     		typeId == Types.DOUBLE );
0: 	}
0: 
0: 	/**
0: 	  *	Gets the display width of a column of a given type.
0: 	  *
0: 	  *	@param	dtd			data type descriptor
0: 	  *
0: 	  *	@return	associated column display width
0: 	  */
0: 	public	static	int getColumnDisplaySize(DataTypeDescriptor dtd)
0: 	{
0: 		int typeId = dtd.getTypeId().getJDBCTypeId();
0: 		int	storageLength = dtd.getMaximumWidth();
0: 		return DataTypeUtilities.getColumnDisplaySize(typeId, storageLength);
0: 	}
0: 
0: 	public	static	int getColumnDisplaySize(int typeId, int storageLength)
0: 	{
0: 		int size;
0: 		switch (typeId)
0: 		{
0: 			case Types.TIMESTAMP:
0: 				size = 26;
0: 				break;
0: 			case Types.DATE:
0: 				size = 10;
0: 				break;	
0: 			case Types.TIME:
0: 				size = 8;
0: 				break;
0: 			case Types.INTEGER:
0: 				size = 11;
0: 				break;
0: 			case Types.SMALLINT :
0: 				size = 6;
0: 				break;
0: 			case Types.REAL :
0: 			case Types.FLOAT :
0: 				size = 13;
0: 				break;
0: 			case Types.DOUBLE:
0: 				size = 22;
0: 				break;
0: 			case Types.TINYINT :
0: 				size = 15;
0: 				break;
0: 
0: 			case Types.BINARY:
0: 			case Types.VARBINARY:
0: 			case Types.LONGVARBINARY:
0:             case Types.BLOB:
0: 				size =  2*storageLength;
0: 				if (size < 0)
0: 					size = Integer.MAX_VALUE;
0:                 break;
0: 
0: 			case Types.BIGINT:
0: 				size = 20;
0: 				break;
0: 			case Types.BIT:
0: 			case JDBC30Translation.SQL_TYPES_BOOLEAN:
0: 				// Types.BIT == SQL BOOLEAN, so 5 chars for 'false'
0: 				// In JDBC 3.0, Types.BIT or Types.BOOLEAN = SQL BOOLEAN
0: 				size = 5;
0: 				break;
0: 			default: 
0: 				// MaximumWidth is -1 when it is unknown.
0: 				int w = storageLength;
0: 				size = (w > 0 ? w : 15);
0: 				break;
0: 		}
0: 		return size;
0: 	}
0: 
0:     /**
0:      * Compute the maximum width (column display width) of a decimal or numeric data value,
0:      * given its precision and scale.
0:      *
0:      * @param precision The precision (number of digits) of the data value.
0:      * @param scale The number of fractional digits (digits to the right of the decimal point).
0:      *
0:      * @return The maximum number of chracters needed to display the value.
0:      */
0:     public static int computeMaxWidth( int precision, int scale)
0:     {
0:         return (scale == 0) ? (precision + 1) : (precision + 3);
0:     }
0: }
0: 
============================================================================