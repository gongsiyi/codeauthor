1:80eb35f: /*
1:80eb35f: 
1:80eb35f:    Derby - Class org.apache.derby.impl.sql.compile.DropSequenceNode
1:80eb35f: 
1:80eb35f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:80eb35f:    contributor license agreements.  See the NOTICE file distributed with
1:80eb35f:    this work for additional information regarding copyright ownership.
1:80eb35f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:80eb35f:    (the "License"); you may not use this file except in compliance with
1:80eb35f:    the License.  You may obtain a copy of the License at
1:80eb35f: 
1:80eb35f:       http://www.apache.org/licenses/LICENSE-2.0
1:80eb35f: 
1:80eb35f:    Unless required by applicable law or agreed to in writing, software
1:80eb35f:    distributed under the License is distributed on an "AS IS" BASIS,
1:80eb35f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80eb35f:    See the License for the specific language governing permissions and
1:80eb35f:    limitations under the License.
1:80eb35f: 
1:80eb35f:  */
1:80eb35f: 
1:80eb35f: package org.apache.derby.impl.sql.compile;
1:80eb35f: 
1:80eb35f: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:80eb35f: import org.apache.derby.iapi.reference.SQLState;
1:80eb35f: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:80eb35f: 
1:80eb35f: /**
1:80eb35f:  * A DropSequenceNode  represents a DROP SEQUENCE statement.
1:80eb35f:  */
1:80eb35f: 
1:3bb140c: class DropSequenceNode extends DDLStatementNode {
1:80eb35f:     private TableName dropItem;
1:80eb35f: 
1:80eb35f:     /**
1:3bb140c:      * Constructor for a DropSequenceNode
1:80eb35f:      *
1:80eb35f:      * @param dropSequenceName The name of the sequence being dropped
1:3bb140c:      * @param cm               The context manager
1:80eb35f:      * @throws StandardException
1:80eb35f:      */
1:3bb140c:     DropSequenceNode(TableName dropSequenceName, ContextManager cm) {
1:3bb140c:         super(dropSequenceName, cm);
1:3bb140c:         dropItem = dropSequenceName;
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     public String statementToString() {
1:80eb35f:         return "DROP ".concat(dropItem.getTableName());
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Bind this DropSequenceNode.
1:80eb35f:      *
1:80eb35f:      * @throws StandardException Thrown on error
1:80eb35f:      */
1:3bb140c:     @Override
1:80eb35f:     public void bindStatement() throws StandardException {
1:80eb35f:         DataDictionary dataDictionary = getDataDictionary();
1:80eb35f:         String sequenceName = getRelativeName();
1:80eb35f: 
1:80eb35f:         SequenceDescriptor seqDesc = null;
1:80eb35f:         SchemaDescriptor sd = getSchemaDescriptor();
1:80eb35f: 
1:80eb35f:         if (sd.getUUID() != null) {
1:80eb35f:             seqDesc = dataDictionary.getSequenceDescriptor
1:80eb35f:                     (sd, sequenceName);
1:80eb35f:         }
1:80eb35f:         if (seqDesc == null) {
1:80eb35f:             throw StandardException.newException(SQLState.LANG_OBJECT_DOES_NOT_EXIST, statementToString(), sequenceName);
1:80eb35f:         }
1:80eb35f: 
1:80eb35f:         // Statement is dependent on the SequenceDescriptor
1:80eb35f:         getCompilerContext().createDependency(seqDesc);
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     // inherit generate() method from DDLStatementNode
1:80eb35f: 
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Create the Constant information that will drive the guts of Execution.
1:80eb35f:      *
1:80eb35f:      * @throws StandardException Thrown on failure
1:80eb35f:      */
1:3bb140c:     @Override
1:80eb35f:     public ConstantAction makeConstantAction() throws StandardException {
1:80eb35f:         return getGenericConstantActionFactory().getDropSequenceConstantAction(getSchemaDescriptor(), getRelativeName());
1:80eb35f: 	}
1:80eb35f: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (dropItem != null) {
1:69f8afa:             dropItem = (TableName) dropItem.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:80eb35f: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (dropItem != null) {
1:             dropItem = (TableName) dropItem.accept(v);
1:         }
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class DropSequenceNode extends DDLStatementNode {
1:      * Constructor for a DropSequenceNode
1:      * @param cm               The context manager
1:     DropSequenceNode(TableName dropSequenceName, ContextManager cm) {
1:         super(dropSequenceName, cm);
0:         setNodeType(C_NodeTypes.DROP_SEQUENCE_NODE);
1:         dropItem = dropSequenceName;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.DropSequenceNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: 
1: /**
1:  * A DropSequenceNode  represents a DROP SEQUENCE statement.
1:  */
1: 
0: public class DropSequenceNode extends DDLStatementNode {
1:     private TableName dropItem;
1: 
1:     /**
0:      * Initializer for a DropSequenceNode
1:      *
1:      * @param dropSequenceName The name of the sequence being dropped
1:      * @throws StandardException
1:      */
0:     public void init(Object dropSequenceName)
0:             throws StandardException {
0:         dropItem = (TableName) dropSequenceName;
0:         initAndCheck(dropItem);
1:     }
1: 
1:     public String statementToString() {
1:         return "DROP ".concat(dropItem.getTableName());
1:     }
1: 
1:     /**
1:      * Bind this DropSequenceNode.
1:      *
1:      * @throws StandardException Thrown on error
1:      */
1:     public void bindStatement() throws StandardException {
1:         DataDictionary dataDictionary = getDataDictionary();
1:         String sequenceName = getRelativeName();
1: 
1:         SequenceDescriptor seqDesc = null;
1:         SchemaDescriptor sd = getSchemaDescriptor();
1: 
1:         if (sd.getUUID() != null) {
1:             seqDesc = dataDictionary.getSequenceDescriptor
1:                     (sd, sequenceName);
1:         }
1:         if (seqDesc == null) {
1:             throw StandardException.newException(SQLState.LANG_OBJECT_DOES_NOT_EXIST, statementToString(), sequenceName);
1:         }
1: 
1:         // Statement is dependent on the SequenceDescriptor
1:         getCompilerContext().createDependency(seqDesc);
1:     }
1: 
1:     // inherit generate() method from DDLStatementNode
1: 
1: 
1:     /**
1:      * Create the Constant information that will drive the guts of Execution.
1:      *
1:      * @throws StandardException Thrown on failure
1:      */
1:     public ConstantAction makeConstantAction() throws StandardException {
1:         return getGenericConstantActionFactory().getDropSequenceConstantAction(getSchemaDescriptor(), getRelativeName());
1: 	}
1: 
1: }
============================================================================