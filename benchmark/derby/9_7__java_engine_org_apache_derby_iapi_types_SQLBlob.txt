1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLBlob
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:b7c1f3b: import org.apache.derby.iapi.reference.Limits;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:04acfa5: import org.apache.derby.iapi.services.io.CloneableStream;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:04acfa5: 
1:512bacf: import java.sql.Blob;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:534b037: import java.sql.PreparedStatement;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * SQLBlob satisfies the DataValueDescriptor,
1:eac0369:  * interfaces (i.e., OrderableDataType). 
1:eac0369:  * It uses the SQLLongVarbit implementation, which implements a String holder,
1:eac0369:  * e.g. for storing a column value; it can be specified
1:eac0369:  * when constructed to not allow nulls. Nullability cannot be changed
1:eac0369:  * after construction.
1:eac0369:  * <p>
1:eac0369:  * Because LOB types are not orderable, we'll override those
1:eac0369:  * methods...
2:eac0369:  *
1:b7c1f3b:  */
1:eac0369: public class SQLBlob extends SQLBinary
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constructors
1:eac0369: 	 */
1:eac0369: 	public SQLBlob()
1:eac0369:         {
3:eac0369:         }
1:eac0369: 
1:eac0369: 	public SQLBlob(byte[] val)
1:eac0369:         {
1:eac0369: 			super(val);
1:eac0369:         }
1:eac0369: 	
1:638f1b4: 	public SQLBlob(Blob val)
1:638f1b4:         {
1:638f1b4: 			super(val);
1:638f1b4:         }
1:638f1b4: 	
1:eac0369: 	public String getTypeName()
1:eac0369:         {
1:eac0369: 			return TypeId.BLOB_NAME;
1:eac0369:         }
1:eac0369: 
1:b7c1f3b: 	/**
1:b7c1f3b: 	 * Return max memory usage for a SQL Blob
1:f73afdc: 	 */
1:b7c1f3b: 	int getMaxMemoryUsage()
1:b7c1f3b: 	{
1:b7c1f3b: 		return Limits.DB2_LOB_MAXWIDTH;
1:b7c1f3b: 	}
1:b7c1f3b: 
1:eac0369:     /**
1:541361f:      * Tells if this BLOB value is, or will be, represented by a stream.
1:541361f:      *
1:541361f:      * @return {@code true} if the value is represented by a stream,
1:541361f:      *      {@code false} otherwise.
1:541361f:      */
1:541361f:     public boolean hasStream() {
1:541361f:         return stream != null;
1:541361f:     }
1:541361f: 
1:541361f:     /**
1:04acfa5:      * Returns a clone of this BLOB value.
1:04acfa5:      * <p>
1:04acfa5:      * Unlike the other binary types, BLOBs can be very large. We try to clone
1:04acfa5:      * the underlying stream when possible to avoid having to materialize the
1:04acfa5:      * value into memory.
1:04acfa5:      *
1:04acfa5:      * @param forceMaterialization any streams representing the data value will
1:04acfa5:      *      be materialized if {@code true}, the data value will be kept as a
1:04acfa5:      *      stream if possible if {@code false}
1:04acfa5:      * @return A clone of this BLOB value.
1:04acfa5:      */
1:04acfa5:     public DataValueDescriptor cloneValue(boolean forceMaterialization) {
1:04acfa5:         // TODO: Add optimization for materializing "smallish" streams. This
1:04acfa5:         //       may be more effective because the data doesn't have to be
1:04acfa5:         //       decoded multiple times.
1:04acfa5:         final SQLBlob clone = new SQLBlob();
1:04acfa5: 
1:04acfa5:         // Shortcut cases where value is NULL.
1:04acfa5:         if (isNull()) {
1:04acfa5:             return clone;
1:04acfa5:         }
1:04acfa5: 
1:04acfa5:         if (!forceMaterialization && dataValue == null) {
1:04acfa5:             if (stream != null && stream instanceof CloneableStream) {
1:04acfa5:                 clone.setStream( ((CloneableStream)stream).cloneStream());
1:04acfa5:                 if (streamValueLength != -1) {
1:04acfa5:                     clone.streamValueLength = streamValueLength;
1:04acfa5:                 }
1:04acfa5:             } else if (_blobValue != null) {
1:04acfa5:                 // Assumes the Blob object can be shared between value holders.
1:04acfa5:                 clone.setValue(_blobValue);
1:04acfa5:             }
1:04acfa5:             // At this point we may still not have cloned the value because we
1:04acfa5:             // have a stream that isn't cloneable.
1:04acfa5:             // TODO: Add functionality to materialize to temporary disk storage
1:04acfa5:             //       to avoid OOME for large BLOBs.
1:04acfa5:         }
1:04acfa5: 
1:04acfa5:         // See if we are forced to materialize the value, either because
1:04acfa5:         // requested by the user or because we don't know how to clone it.
1:04acfa5:         if (clone.isNull() || forceMaterialization) {
1:04acfa5:             try {
1:04acfa5:                 // NOTE: The byte array holding the value is shared.
1:04acfa5:                 clone.setValue(getBytes());
1:04acfa5:             } catch (StandardException se) {
1:04acfa5:                 if (SanityManager.DEBUG) {
1:04acfa5:                     SanityManager.THROWASSERT("Unexpected exception", se);
1:04acfa5:                 }
1:04acfa5:                 return null;
1:04acfa5:             }
1:04acfa5:         }
1:04acfa5:         return clone;
1:04acfa5:     }
1:04acfa5: 
1:04acfa5:     /**
1:eac0369:      * @see DataValueDescriptor#getNewNull
1:eac0369:      */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369:         {
1:eac0369: 			return new SQLBlob();
1:f73afdc:         }
1:f73afdc: 
1:a2a0ff2:      /**
1:a2a0ff2:       * Return a JDBC Blob. Originally implemented to support DERBY-2201.
1:a2a0ff2:       */
1:a2a0ff2:     public Object getObject()
1:a2a0ff2:         throws StandardException
1:a2a0ff2:     {
1:a2a0ff2:         // the generated code for the DERBY-2201 codepath expects to get a Blob
1:a2a0ff2:         // back.
1:a2a0ff2:         if ( _blobValue != null ) { return _blobValue; }
1:a2a0ff2:         else
1:a2a0ff2:         {
1:a2a0ff2:             byte[] bytes = getBytes();
1:a2a0ff2: 
1:a2a0ff2:             if ( bytes == null ) { return null; }
1:a2a0ff2:             else
1:a2a0ff2:             {
1:7cfb7e6:                 return new HarmonySerialBlob( bytes );
1:a2a0ff2:             }
1:a2a0ff2:         }
1:a2a0ff2:     }
1:a2a0ff2:     
1:f73afdc: 	/**
1:eac0369: 	 * Normalization method - this method may be called when putting
1:eac0369: 	 * a value into a SQLBit, for example, when inserting into a SQLBit
1:eac0369: 	 * column.  See NormalizeResultSet in execution.
1:f73afdc: 	 *
1:eac0369: 	 * @param desiredType	The type to normalize the source column to
1:eac0369: 	 * @param source		The value to normalize
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException				Thrown for null into
1:eac0369: 	 *											non-nullable column, and for
1:eac0369: 	 *											truncation error
1:eac0369: 	 */
1:f73afdc: 
1:eac0369: 	public void normalize(
1:eac0369: 				DataTypeDescriptor desiredType,
1:eac0369: 				DataValueDescriptor source)
1:eac0369: 					throws StandardException
1:a2a0ff2: 	{
1:eac0369: 		setValue(source);
1:eac0369: 		setWidth(desiredType.getMaximumWidth(), 0, true);
1:a2a0ff2: 	}
1:f73afdc: 
1:eac0369:     // The method setWidth is only(?) used to adopt the value
1:eac0369:     // to the casted domain/size. BLOBs behave different
1:eac0369:     // from the BIT types in that a (CAST (X'01' TO BLOB(1024)))
1:eac0369:     // does NOT pad the value to the maximal allowed datasize.
1:eac0369:     // That it is done for BIT is understandable, however,
1:eac0369:     // for BIT VARYING it is a bit confusing. Could be inheritence bug.
1:eac0369:     // Anyhow, here we just ignore the call, since there is no padding to be done.
1:eac0369:     // We do detect truncation, if the errorOnTrunc flag is set.
1:eac0369:     // DB2 does return a WARNING on CAST and ERROR on INSERT.
1:806114c: 	public void setWidth(int desiredWidth,  // ignored!
1:eac0369: 			int desiredScale,	// Ignored 
1:eac0369: 			boolean errorOnTrunc)
1:eac0369: 			throws StandardException
1:eac0369:     {
1:eac0369: 
1:9f5214d: 		// Input is null, so there's nothing to do.
1:eac0369: 		if (isNull())
1:806114c: 			return;
1:eac0369: 
1:9f5214d: 		// Input is a stream with unknown length. The length will be checked
1:9f5214d: 		// while reading the stream.
1:9f5214d: 		if (isLengthLess()) {
1:9f5214d: 			return;
1:9f5214d: 		}
1:9f5214d: 
1:eac0369: 		int sourceWidth = getLength();
1:eac0369: 
1:eac0369:         // need to truncate?
1:eac0369:         if (sourceWidth > desiredWidth) {
1:eac0369:             if (errorOnTrunc)
1:eac0369:                 throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), 
1:eac0369:                                                      "XXXX",
1:eac0369:                                                      String.valueOf(desiredWidth));
1:eac0369:             else {
1:eac0369:                 /*
1:eac0369:                  * Truncate to the desired width.
1:eac0369:                  */
1:75ec275: 				truncate(sourceWidth, desiredWidth, true);
1:f73afdc:             }
1:f73afdc:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	   Return my format identifier.
1:eac0369:            
1:eac0369: 	   @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId()
1:eac0369:         {
1:eac0369: 			return StoredFormatIds.SQL_BLOB_ID;
1:eac0369:         }
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#setValueFromResultSet 
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Thrown on error
1:96b9662: 	 * @throws StandardException 
1:eac0369: 	 */
1:eac0369: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1:eac0369: 									  boolean isNullable)
1:96b9662: 		throws SQLException, StandardException
1:eac0369: 	{
1:96b9662:         Blob blob = resultSet.getBlob(colNumber);
1:96b9662:         if (blob == null)
1:96b9662:             setToNull();
1:96b9662:         else
1:96b9662:             setObject(blob);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369:         
1:eac0369: 	/** @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 		{
1:eac0369: 			return TypeId.BLOB_PRECEDENCE; // not really used
1:eac0369: 		}
1:eac0369: 
1:af57bfb:     public void setInto(PreparedStatement ps, int position)
1:af57bfb: 		throws SQLException, StandardException
1:eac0369: 	{
1:f73afdc: 		if (isNull()) {
1:7814db2: 			ps.setBlob(position, (Blob)null);    
1:af57bfb: 			return;
1:eac0369: 		}
1:eac0369: 
1:af57bfb: 		// This may cause problems for streaming blobs, by materializing the whole blob.
1:af57bfb: 		ps.setBytes(position, getBytes());
1:eac0369:     }
1:512bacf:     
1:512bacf:     /**
1:512bacf:      * Set the value from an non-null object.
1:512bacf:      */
1:512bacf:     final void setObject(Object theValue)
1:512bacf:         throws StandardException
1:512bacf:     {
1:512bacf:         Blob vb = (Blob) theValue;
1:96b9662:         
1:a2a0ff2:         try {
1:96b9662:             long vbl = vb.length();
1:96b9662:             if (vbl < 0L || vbl > Integer.MAX_VALUE)
1:96b9662:                 throw this.outOfRange();
1:96b9662:             
1:96b9662:             setValue(new RawToBinaryFormatStream(
1:96b9662:                     vb.getBinaryStream(), (int) vbl),
1:96b9662:                     (int) vbl);
1:96b9662:             
1:512bacf:         } catch (SQLException e) {
1:512bacf:             throw dataTypeConversion("DAN-438-tmp");
1:512bacf:        }
1:512bacf:     }
1:9f5214d: 
1:9f5214d:     /**
1:9f5214d:      * Tell if this blob is length less.
1:9f5214d:      *
1:9f5214d:      * @return <code>true</code> if the length of the blob is not known,
1:9f5214d:      *      <code>false</code> otherwise
1:9f5214d:      */
1:9f5214d:     private final boolean isLengthLess() {
1:9f5214d:         return (stream != null && streamValueLength < 0);
1:9f5214d:     }
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
1:                 return new HarmonySerialBlob( bytes );
commit:a2a0ff2
/////////////////////////////////////////////////////////////////////////
1:      /**
1:       * Return a JDBC Blob. Originally implemented to support DERBY-2201.
1:       */
1:     public Object getObject()
1:         throws StandardException
1:     {
1:         // the generated code for the DERBY-2201 codepath expects to get a Blob
1:         // back.
1:         if ( _blobValue != null ) { return _blobValue; }
1:         else
1:         {
1:             byte[] bytes = getBytes();
1: 
1:             if ( bytes == null ) { return null; }
1:             else
1:             {
1:                 try {
0:                     return new HarmonySerialBlob( bytes );
0:                 } catch (SQLException se)
1:                 {
0:                     throw StandardException.plainWrapException( se );
1:                 }
1:             }
1:         }
1:     }
1:     
commit:638f1b4
/////////////////////////////////////////////////////////////////////////
1: 	public SQLBlob(Blob val)
1:         {
1: 			super(val);
1:         }
1: 	
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:75ec275
/////////////////////////////////////////////////////////////////////////
1: 				truncate(sourceWidth, desiredWidth, true);
commit:9f5214d
/////////////////////////////////////////////////////////////////////////
1: 		// Input is null, so there's nothing to do.
1: 		// Input is a stream with unknown length. The length will be checked
1: 		// while reading the stream.
1: 		if (isLengthLess()) {
1: 			return;
1: 		}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tell if this blob is length less.
1:      *
1:      * @return <code>true</code> if the length of the blob is not known,
1:      *      <code>false</code> otherwise
1:      */
1:     private final boolean isLengthLess() {
1:         return (stream != null && streamValueLength < 0);
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8b6fe4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
commit:541361f
/////////////////////////////////////////////////////////////////////////
1:      * Tells if this BLOB value is, or will be, represented by a stream.
1:      *
1:      * @return {@code true} if the value is represented by a stream,
1:      *      {@code false} otherwise.
1:      */
1:     public boolean hasStream() {
1:         return stream != null;
1:     }
1: 
1:     /**
commit:04acfa5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.CloneableStream;
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Returns a clone of this BLOB value.
1:      * <p>
1:      * Unlike the other binary types, BLOBs can be very large. We try to clone
1:      * the underlying stream when possible to avoid having to materialize the
1:      * value into memory.
1:      *
1:      * @param forceMaterialization any streams representing the data value will
1:      *      be materialized if {@code true}, the data value will be kept as a
1:      *      stream if possible if {@code false}
1:      * @return A clone of this BLOB value.
1:      */
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization) {
1:         // TODO: Add optimization for materializing "smallish" streams. This
1:         //       may be more effective because the data doesn't have to be
1:         //       decoded multiple times.
1:         final SQLBlob clone = new SQLBlob();
1: 
1:         // Shortcut cases where value is NULL.
1:         if (isNull()) {
1:             return clone;
1:         }
1: 
1:         if (!forceMaterialization && dataValue == null) {
1:             if (stream != null && stream instanceof CloneableStream) {
1:                 clone.setStream( ((CloneableStream)stream).cloneStream());
1:                 if (streamValueLength != -1) {
1:                     clone.streamValueLength = streamValueLength;
1:                 }
1:             } else if (_blobValue != null) {
1:                 // Assumes the Blob object can be shared between value holders.
1:                 clone.setValue(_blobValue);
1:             }
1:             // At this point we may still not have cloned the value because we
1:             // have a stream that isn't cloneable.
1:             // TODO: Add functionality to materialize to temporary disk storage
1:             //       to avoid OOME for large BLOBs.
1:         }
1: 
1:         // See if we are forced to materialize the value, either because
1:         // requested by the user or because we don't know how to clone it.
1:         if (clone.isNull() || forceMaterialization) {
1:             try {
1:                 // NOTE: The byte array holding the value is shared.
1:                 clone.setValue(getBytes());
1:             } catch (StandardException se) {
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.THROWASSERT("Unexpected exception", se);
1:                 }
1:                 return null;
1:             }
1:         }
1:         return clone;
1:     }
1: 
1:     /**
commit:7814db2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			ps.setBlob(position, (Blob)null);    
commit:4b66efc
/////////////////////////////////////////////////////////////////////////
commit:f73afdc
/////////////////////////////////////////////////////////////////////////
0:      * Gets a trace representation of the BLOB for debugging.
1:      *
0:      * @return a trace representation of the BLOB.
1:      */
0:     public final String getTraceString() throws StandardException {
0:         // Check if the value is SQL NULL.
1:         if (isNull()) {
0:             return "NULL";
1:         }
1: 
0:         // Check if we have a stream.
0:         if (getStream() != null) {
0:             return ("BLOB(" + getStream().toString() + ")");
1:         }
1: 
0:         return ("BLOB(" + getLength() + ")");
1:     }
1: 
1:     /**
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:b7c1f3b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Return max memory usage for a SQL Blob
1: 	 */
1: 	int getMaxMemoryUsage()
1: 	{
1: 		return Limits.DB2_LOB_MAXWIDTH;
1: 	}
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:96b9662
/////////////////////////////////////////////////////////////////////////
1: 	 * @throws StandardException 
1: 		throws SQLException, StandardException
1:         Blob blob = resultSet.getBlob(colNumber);
1:         if (blob == null)
1:             setToNull();
1:         else
1:             setObject(blob);
/////////////////////////////////////////////////////////////////////////
1:         
1:             long vbl = vb.length();
1:             if (vbl < 0L || vbl > Integer.MAX_VALUE)
1:                 throw this.outOfRange();
1:             
1:             setValue(new RawToBinaryFormatStream(
1:                     vb.getBinaryStream(), (int) vbl),
1:                     (int) vbl);
1:             
commit:40bcd6b
/////////////////////////////////////////////////////////////////////////
0: 			streamValueLength = -1; // unknown
/////////////////////////////////////////////////////////////////////////
0:         streamValueLength = -1; // unknown
commit:512bacf
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Set the value from an non-null object.
1:      */
1:     final void setObject(Object theValue)
1:         throws StandardException
1:     {
1:         Blob vb = (Blob) theValue;
0:         try {
0:             stream = vb.getBinaryStream();
1:         } catch (SQLException e) {
1:             throw dataTypeConversion("DAN-438-tmp");
1:        }
0:         streamLength = -1; // unknown
0:         dataValue = null;
1:     }
commit:806114c
/////////////////////////////////////////////////////////////////////////
1: 	public void setWidth(int desiredWidth,  // ignored!
1: 			return;
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLBlob
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.Orderable;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1:  * SQLBlob satisfies the DataValueDescriptor,
1:  * interfaces (i.e., OrderableDataType). 
1:  * It uses the SQLLongVarbit implementation, which implements a String holder,
1:  * e.g. for storing a column value; it can be specified
1:  * when constructed to not allow nulls. Nullability cannot be changed
1:  * after construction.
1:  * <p>
1:  * Because LOB types are not orderable, we'll override those
1:  * methods...
1:  *
1:  */
1: public class SQLBlob extends SQLBinary
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 	public SQLBlob()
1:         {
1:         }
1: 
1: 	public SQLBlob(byte[] val)
1:         {
1: 			super(val);
1:         }
1: 	
1: 	public String getTypeName()
1:         {
1: 			return TypeId.BLOB_NAME;
1:         }
1: 
1:     /**
1:      * @see DataValueDescriptor#getNewNull
1:      */
1: 	public DataValueDescriptor getNewNull()
1:         {
1: 			return new SQLBlob();
1:         }
1: 
1: 	/**
1: 	 * Normalization method - this method may be called when putting
1: 	 * a value into a SQLBit, for example, when inserting into a SQLBit
1: 	 * column.  See NormalizeResultSet in execution.
1: 	 *
1: 	 * @param desiredType	The type to normalize the source column to
1: 	 * @param source		The value to normalize
1: 	 *
1: 	 * @exception StandardException				Thrown for null into
1: 	 *											non-nullable column, and for
1: 	 *											truncation error
1: 	 */
1: 
1: 	public void normalize(
1: 				DataTypeDescriptor desiredType,
1: 				DataValueDescriptor source)
1: 					throws StandardException
1: 	{
1: 		setValue(source);
1: 		setWidth(desiredType.getMaximumWidth(), 0, true);
1: 	}
1: 
1:     // The method setWidth is only(?) used to adopt the value
1:     // to the casted domain/size. BLOBs behave different
1:     // from the BIT types in that a (CAST (X'01' TO BLOB(1024)))
1:     // does NOT pad the value to the maximal allowed datasize.
1:     // That it is done for BIT is understandable, however,
1:     // for BIT VARYING it is a bit confusing. Could be inheritence bug.
1:     // Anyhow, here we just ignore the call, since there is no padding to be done.
1:     // We do detect truncation, if the errorOnTrunc flag is set.
1:     // DB2 does return a WARNING on CAST and ERROR on INSERT.
0: 	public DataValueDescriptor setWidth(int desiredWidth,  // ignored!
1: 			int desiredScale,	// Ignored 
1: 			boolean errorOnTrunc)
1: 			throws StandardException
1:     {
1: 
1: 		if (isNull())
0: 			return this;
1: 
1: 		int sourceWidth = getLength();
1: 
1:         // need to truncate?
1:         if (sourceWidth > desiredWidth) {
1:             if (errorOnTrunc)
1:                 throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), 
1:                                                      "XXXX",
1:                                                      String.valueOf(desiredWidth));
1:             else {
1:                 /*
1:                  * Truncate to the desired width.
1:                  */
1: 				
1: 
0: 				byte[] shrunkData = new byte[desiredWidth];
0: 				System.arraycopy(getBytes(), 0, shrunkData, 0, desiredWidth);
0: 				dataValue = shrunkData;
1:             }
1:         }
1: 
0:         return this;
1:     }
1: 
1:     /**
1: 	   Return my format identifier.
1:            
1: 	   @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId()
1:         {
1: 			return StoredFormatIds.SQL_BLOB_ID;
1:         }
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#setValueFromResultSet 
1: 	 *
1: 	 * @exception SQLException		Thrown on error
1: 	 */
1: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1: 									  boolean isNullable)
0: 		throws SQLException
1: 	{
0: 			stream = resultSet.getBinaryStream(colNumber);
0: 			streamLength = -1; // unknown
0: 			dataValue = null;
1: 	}
1: 
1: 
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1:         
1: 	/** @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 		{
1: 			return TypeId.BLOB_PRECEDENCE; // not really used
1: 		}
1: 
1: 	}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:af57bfb
/////////////////////////////////////////////////////////////////////////
1:     public void setInto(PreparedStatement ps, int position)
1: 		throws SQLException, StandardException
0: 	{
0: 		if (isNull()) {
0: 			ps.setBlob(position, null);    
1: 			return;
0: 		}
0: 
1: 		// This may cause problems for streaming blobs, by materializing the whole blob.
1: 		ps.setBytes(position, getBytes());
commit:534b037
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
0:     public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
0:         ps.setBlob(position,null);    
0:     }
0: }
0: 
0: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: /**
0:  * SQLBlob satisfies the DataValueDescriptor,
0:  * interfaces (i.e., OrderableDataType). 
0:  * It uses the SQLLongVarbit implementation, which implements a String holder,
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because LOB types are not orderable, we'll override those
0:  * methods...
0:  *
0:  */
0: public class SQLBlob extends SQLBinary
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	/*
0: 	 * constructors
0: 	 */
0: 	public SQLBlob()
0:         {
0:         }
0: 
0: 	public SQLBlob(byte[] val)
0:         {
0: 			super(val);
0:         }
0: 	
0: 	public String getTypeName()
0:         {
0: 			return TypeId.BLOB_NAME;
0:         }
0: 
0:     /**
0:      * @see DataValueDescriptor#getNewNull
0:      */
0: 	public DataValueDescriptor getNewNull()
0:         {
0: 			return new SQLBlob();
0:         }
0: 
0: 	/**
0: 	 * Normalization method - this method may be called when putting
0: 	 * a value into a SQLBit, for example, when inserting into a SQLBit
0: 	 * column.  See NormalizeResultSet in execution.
0: 	 *
0: 	 * @param desiredType	The type to normalize the source column to
0: 	 * @param source		The value to normalize
0: 	 *
0: 	 * @exception StandardException				Thrown for null into
0: 	 *											non-nullable column, and for
0: 	 *											truncation error
0: 	 */
0: 
0: 	public void normalize(
0: 				DataTypeDescriptor desiredType,
0: 				DataValueDescriptor source)
0: 					throws StandardException
0: 	{
0: 		setValue(source);
0: 		setWidth(desiredType.getMaximumWidth(), 0, true);
0: 	}
0: 
0:     // The method setWidth is only(?) used to adopt the value
0:     // to the casted domain/size. BLOBs behave different
0:     // from the BIT types in that a (CAST (X'01' TO BLOB(1024)))
0:     // does NOT pad the value to the maximal allowed datasize.
0:     // That it is done for BIT is understandable, however,
0:     // for BIT VARYING it is a bit confusing. Could be inheritence bug.
0:     // Anyhow, here we just ignore the call, since there is no padding to be done.
0:     // We do detect truncation, if the errorOnTrunc flag is set.
0:     // DB2 does return a WARNING on CAST and ERROR on INSERT.
0: 	public DataValueDescriptor setWidth(int desiredWidth,  // ignored!
0: 			int desiredScale,	// Ignored 
0: 			boolean errorOnTrunc)
0: 			throws StandardException
0:     {
0: 
0: 		if (isNull())
0: 			return this;
0: 
0: 		int sourceWidth = getLength();
0: 
0:         // need to truncate?
0:         if (sourceWidth > desiredWidth) {
0:             if (errorOnTrunc)
0:                 throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), 
0:                                                      "XXXX",
0:                                                      String.valueOf(desiredWidth));
0:             else {
0:                 /*
0:                  * Truncate to the desired width.
0:                  */
0: 				
0: 
0: 				byte[] shrunkData = new byte[desiredWidth];
0: 				System.arraycopy(getBytes(), 0, shrunkData, 0, desiredWidth);
0: 				dataValue = shrunkData;
0:             }
0:         }
0: 
0:         return this;
0:     }
0: 
0:     /**
0: 	   Return my format identifier.
0:            
0: 	   @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId()
0:         {
0: 			return StoredFormatIds.SQL_BLOB_ID;
0:         }
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
0: 	 *
0: 	 * @exception SQLException		Thrown on error
0: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 		throws SQLException
0: 	{
0: 			stream = resultSet.getBinaryStream(colNumber);
0: 			streamLength = -1; // unknown
0: 			dataValue = null;
0: 	}
0: 
0: 
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0:         
0: 	/** @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 		{
0: 			return TypeId.BLOB_PRECEDENCE; // not really used
0: 		}
0: 
0: 	}
============================================================================