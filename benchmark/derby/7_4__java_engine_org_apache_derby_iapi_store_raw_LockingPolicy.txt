1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.LockingPolicy
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
14:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
4:eac0369: /**
1:eac0369: 	Any object that implements this interface can be used as a locking
1:eac0369: 	policy for accessing a container. 
1:eac0369: 	<P>
1:eac0369: 	The locking policy must use the defined lock qualifiers 
1:eac0369:     (ContainerLock.CIS, RowLock.RS, etc.) and the standard lock manager.
1:eac0369:     (A locking policy that just performs no locking wouldn't need to use 
1:eac0369:     these :-)
1:eac0369: 	<P>
1:eac0369: 	A locking policy must use the object that is an instance of Transaction
1:eac0369:     (originally obtained via startTransaction() in RawStoreFactory) as the 
1:eac0369:     compatibilitySpace for the LockFactory calls.
1:eac0369: 	<BR>
1:eac0369: 	A locking policy must use the passed in transaction as the 
1:eac0369:     compatability space and the lock group.
1:eac0369: 	This chain (group) of locks has the following defined behaviour
1:eac0369: 		<UL>
1:eac0369: 		<LI>Locks are released at transaction.commit()
1:eac0369: 		<LI>Locks are released at transaction.abort()
1:eac0369: 		</UL>
1:eac0369: 
1:eac0369: 
1:eac0369:     <BR>
1:eac0369: 	MT - Thread Safe
1:eac0369: 
1:eac0369: 	@see ContainerHandle
1:eac0369: 	@see RecordHandle
1:eac0369: 	@see org.apache.derby.iapi.services.locks.LockFactory
1:eac0369: 	@see org.apache.derby.iapi.services.locks.Lockable
1:eac0369: 
1:eac0369: */
1:eac0369: 
1:eac0369: public interface LockingPolicy {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		No locking what so ever, isolation parameter will be ignored by
1:eac0369: 		getLockingPolicy().
1:eac0369: 
1:eac0369: 		@see  	RawStoreFactory
1:eac0369: 	*/
1:eac0369: 	static final int MODE_NONE = 0;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Record level locking.
1:eac0369: 	*/
1:eac0369: 	static final int MODE_RECORD = 1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		ContainerHandle level locking.
1:eac0369: 	*/
1:eac0369: 	static final int MODE_CONTAINER = 2;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called when a container is opened.
1:eac0369: 
1:eac0369:         @param t            Transaction to associate lock with.
1:eac0369:         @param container    Container to lock.
1:eac0369:         @param waitForLock  Should lock request wait until granted?
2:eac0369:         @param forUpdate    Should container be locked for update, or read?
1:eac0369: 
1:eac0369: 		@return true if the lock was obtained, false if it wasn't. 
1:eac0369:         False should only be returned if the waitForLock policy was set to
1:eac0369:         "false," and the lock was unavailable.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 
1:eac0369: 		@see ContainerHandle
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public boolean lockContainer(
1:eac0369:     Transaction         t, 
1:eac0369:     ContainerHandle     container, 
1:eac0369:     boolean             waitForLock,
1:eac0369:     boolean             forUpdate)
3:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called when a container is closed.
1:eac0369: 
1:eac0369: 		@see ContainerHandle
1:eac0369: 		@see ContainerHandle#close
1:eac0369: 	*/
1:eac0369: 	public void unlockContainer(
1:eac0369:     Transaction t, 
1:eac0369:     ContainerHandle container);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called before a record is fetched.
1:eac0369: 
1:eac0369:         @param t            Transaction to associate lock with.
1:eac0369:         @param container    Open Container used to get record.  Will be used
1:eac0369:                             to row locks by the container they belong to.
3:eac0369:         @param record       Record to lock.
1:eac0369:         @param waitForLock  Should lock request wait until granted?
1:eac0369:         @param forUpdate    Should container be locked for update, or read?
1:eac0369: 
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 
3:eac0369: 		@see Page
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public boolean lockRecordForRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container, 
2:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         waitForLock,
2:eac0369:     boolean         forUpdate)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:         Request a write lock which will be released immediately upon grant.
1:eac0369: 
1:eac0369:         @param t                        Transaction to associate lock with.
1:eac0369:         @param record                   Record to lock.
1:12c6ed9:         @param lockForPreviousKey       Lock is for a previous key of a insert.
1:eac0369:         @param waitForLock              Should lock request wait until granted?
1:eac0369: 
1:eac0369: 		@return true if the lock was obtained, false if it wasn't. 
1:eac0369:         False should only be returned if the waitForLock argument was set to
1:eac0369:         "false," and the lock was unavailable.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 
1:eac0369: 		@see Page
1:eac0369: 	*/
1:eac0369: 	public boolean zeroDurationLockRecordForWrite(
1:eac0369:     Transaction     t, 
1:eac0369:     RecordHandle    record,
1:eac0369:     boolean         lockForPreviousKey,
1:eac0369:     boolean         waitForLock)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	    Called before a record is inserted, updated or deleted.
1:eac0369: 
1:eac0369:         If zeroDuration is true then lock is released immediately after it
1:eac0369:         has been granted.
1:eac0369: 
1:eac0369:         @param t             Transaction to associate lock with.
1:eac0369:         @param record        Record to lock.
1:eac0369:         @param lockForInsert Lock is for an insert.
1:eac0369:         @param waitForLock   Should lock request wait until granted?
1:eac0369: 
1:eac0369: 		@return true if the lock was obtained, false if it wasn't. 
1:eac0369:         False should only be returned if the waitForLock argument was set to
1:eac0369:         "false," and the lock was unavailable.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 
1:eac0369: 		@see Page
1:eac0369: 	*/
1:eac0369: 	public boolean lockRecordForWrite(
1:eac0369:     Transaction     t, 
1:eac0369:     RecordHandle    record,
1:eac0369:     boolean         lockForInsert,
1:eac0369:     boolean         waitForLock)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called after a record has been fetched.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 
1:eac0369:   		@see Page
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void unlockRecordAfterRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container, 
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         forUpdate,
1:eac0369:     boolean         row_qualified)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the mode of this policy
1:eac0369: 	*/
1:eac0369: 	public int getMode();
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:12c6ed9
/////////////////////////////////////////////////////////////////////////
1:         @param lockForPreviousKey       Lock is for a previous key of a insert.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.LockingPolicy
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	Any object that implements this interface can be used as a locking
1: 	policy for accessing a container. 
1: 	<P>
1: 	The locking policy must use the defined lock qualifiers 
1:     (ContainerLock.CIS, RowLock.RS, etc.) and the standard lock manager.
1:     (A locking policy that just performs no locking wouldn't need to use 
1:     these :-)
1: 	<P>
1: 	A locking policy must use the object that is an instance of Transaction
1:     (originally obtained via startTransaction() in RawStoreFactory) as the 
1:     compatibilitySpace for the LockFactory calls.
1: 	<BR>
1: 	A locking policy must use the passed in transaction as the 
1:     compatability space and the lock group.
1: 	This chain (group) of locks has the following defined behaviour
1: 		<UL>
1: 		<LI>Locks are released at transaction.commit()
1: 		<LI>Locks are released at transaction.abort()
1: 		</UL>
1: 
1: 
1:     <BR>
1: 	MT - Thread Safe
1: 
1: 	@see ContainerHandle
1: 	@see RecordHandle
1: 	@see org.apache.derby.iapi.services.locks.LockFactory
1: 	@see org.apache.derby.iapi.services.locks.Lockable
1: 
1: */
1: 
1: public interface LockingPolicy {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		No locking what so ever, isolation parameter will be ignored by
1: 		getLockingPolicy().
1: 
1: 		@see  	RawStoreFactory
1: 	*/
1: 	static final int MODE_NONE = 0;
1: 
1: 	/**
1: 		Record level locking.
1: 	*/
1: 	static final int MODE_RECORD = 1;
1: 
1: 	/**
1: 		ContainerHandle level locking.
1: 	*/
1: 	static final int MODE_CONTAINER = 2;
1: 
1: 	/**
1: 		Called when a container is opened.
1: 
1:         @param t            Transaction to associate lock with.
1:         @param container    Container to lock.
1:         @param waitForLock  Should lock request wait until granted?
1:         @param forUpdate    Should container be locked for update, or read?
1: 
1: 		@return true if the lock was obtained, false if it wasn't. 
1:         False should only be returned if the waitForLock policy was set to
1:         "false," and the lock was unavailable.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see ContainerHandle
1: 
1: 	*/
1: 	public boolean lockContainer(
1:     Transaction         t, 
1:     ContainerHandle     container, 
1:     boolean             waitForLock,
1:     boolean             forUpdate)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Called when a container is closed.
1: 
1: 		@see ContainerHandle
1: 		@see ContainerHandle#close
1: 	*/
1: 	public void unlockContainer(
1:     Transaction t, 
1:     ContainerHandle container);
1: 
1: 	/**
1: 		Called before a record is fetched.
1: 
1:         @param t            Transaction to associate lock with.
1:         @param container    Open Container used to get record.  Will be used
1:                             to row locks by the container they belong to.
1:         @param record       Record to lock.
1:         @param waitForLock  Should lock request wait until granted?
1:         @param forUpdate    Should container be locked for update, or read?
1: 
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see Page
1: 
1: 	*/
1: 	public boolean lockRecordForRead(
1:     Transaction     t, 
1:     ContainerHandle container, 
1:     RecordHandle    record, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException;
1: 
1: 
1: 	/**
0: 		Lock a record while holding a page latch.
1: 
0:         @param latch        Latch held.
1:         @param record       Record to lock.
1:         @param forUpdate    Should container be locked for update, or read?
1: 
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see Page
1: 
1: 	*/
0: 	public void lockRecordForRead(
0: 		Latch			latch, 
1: 		RecordHandle    record, 
1: 		boolean         forUpdate)
1: 			throws StandardException;
1: 
1: 	/**
1:         Request a write lock which will be released immediately upon grant.
1: 
1:         @param t                        Transaction to associate lock with.
1:         @param record                   Record to lock.
0:         @param lockForInsertPreviouskey Lock is for a previous key of a insert.
1:         @param waitForLock              Should lock request wait until granted?
1: 
1: 		@return true if the lock was obtained, false if it wasn't. 
1:         False should only be returned if the waitForLock argument was set to
1:         "false," and the lock was unavailable.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see Page
1: 	*/
1: 	public boolean zeroDurationLockRecordForWrite(
1:     Transaction     t, 
1:     RecordHandle    record,
1:     boolean         lockForPreviousKey,
1:     boolean         waitForLock)
1: 		throws StandardException;
1: 
1: 	/**
1: 	    Called before a record is inserted, updated or deleted.
1: 
1:         If zeroDuration is true then lock is released immediately after it
1:         has been granted.
1: 
1:         @param t             Transaction to associate lock with.
1:         @param record        Record to lock.
1:         @param lockForInsert Lock is for an insert.
1:         @param waitForLock   Should lock request wait until granted?
1: 
1: 		@return true if the lock was obtained, false if it wasn't. 
1:         False should only be returned if the waitForLock argument was set to
1:         "false," and the lock was unavailable.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see Page
1: 	*/
1: 	public boolean lockRecordForWrite(
1:     Transaction     t, 
1:     RecordHandle    record,
1:     boolean         lockForInsert,
1:     boolean         waitForLock)
1: 		throws StandardException;
1: 
1: 	/**
0: 	    Lock a record for write while holding a page latch.
1: 
1: 
0:         @param latch        Page latch held.
1:         @param record       Record to lock.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1: 		@see Page
1: 	*/
0: 	public void lockRecordForWrite(
0:     Latch			latch, 
0:     RecordHandle    record)
1: 		throws StandardException;
1: 	/**
1: 		Called after a record has been fetched.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 
1:   		@see Page
1: 
1: 	*/
1: 	public void unlockRecordAfterRead(
1:     Transaction     t, 
1:     ContainerHandle container, 
1:     RecordHandle    record, 
1:     boolean         forUpdate,
1:     boolean         row_qualified)
1:         throws StandardException;
1: 
1: 
1: 	/**
1: 		Get the mode of this policy
1: 	*/
1: 	public int getMode();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	Any object that implements this interface can be used as a locking
0: 	policy for accessing a container. 
0: 	<P>
0: 	The locking policy must use the defined lock qualifiers 
0:     (ContainerLock.CIS, RowLock.RS, etc.) and the standard lock manager.
0:     (A locking policy that just performs no locking wouldn't need to use 
0:     these :-)
0: 	<P>
0: 	A locking policy must use the object that is an instance of Transaction
0:     (originally obtained via startTransaction() in RawStoreFactory) as the 
0:     compatibilitySpace for the LockFactory calls.
0: 	<BR>
0: 	A locking policy must use the passed in transaction as the 
0:     compatability space and the lock group.
0: 	This chain (group) of locks has the following defined behaviour
0: 		<UL>
0: 		<LI>Locks are released at transaction.commit()
0: 		<LI>Locks are released at transaction.abort()
0: 		</UL>
0: 
0: 
0:     <BR>
0: 	MT - Thread Safe
0: 
0: 	@see ContainerHandle
0: 	@see RecordHandle
0: 	@see org.apache.derby.iapi.services.locks.LockFactory
0: 	@see org.apache.derby.iapi.services.locks.Lockable
0: 
0: */
0: 
0: public interface LockingPolicy {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		No locking what so ever, isolation parameter will be ignored by
0: 		getLockingPolicy().
0: 
0: 		@see  	RawStoreFactory
0: 	*/
0: 	static final int MODE_NONE = 0;
0: 
0: 	/**
0: 		Record level locking.
0: 	*/
0: 	static final int MODE_RECORD = 1;
0: 
0: 	/**
0: 		ContainerHandle level locking.
0: 	*/
0: 	static final int MODE_CONTAINER = 2;
0: 
0: 	/**
0: 		Called when a container is opened.
0: 
0:         @param t            Transaction to associate lock with.
0:         @param container    Container to lock.
0:         @param waitForLock  Should lock request wait until granted?
0:         @param forUpdate    Should container be locked for update, or read?
0: 
0: 		@return true if the lock was obtained, false if it wasn't. 
0:         False should only be returned if the waitForLock policy was set to
0:         "false," and the lock was unavailable.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see ContainerHandle
0: 
0: 	*/
0: 	public boolean lockContainer(
0:     Transaction         t, 
0:     ContainerHandle     container, 
0:     boolean             waitForLock,
0:     boolean             forUpdate)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Called when a container is closed.
0: 
0: 		@see ContainerHandle
0: 		@see ContainerHandle#close
0: 	*/
0: 	public void unlockContainer(
0:     Transaction t, 
0:     ContainerHandle container);
0: 
0: 	/**
0: 		Called before a record is fetched.
0: 
0:         @param t            Transaction to associate lock with.
0:         @param container    Open Container used to get record.  Will be used
0:                             to row locks by the container they belong to.
0:         @param record       Record to lock.
0:         @param waitForLock  Should lock request wait until granted?
0:         @param forUpdate    Should container be locked for update, or read?
0: 
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see Page
0: 
0: 	*/
0: 	public boolean lockRecordForRead(
0:     Transaction     t, 
0:     ContainerHandle container, 
0:     RecordHandle    record, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException;
0: 
0: 
0: 	/**
0: 		Lock a record while holding a page latch.
0: 
0:         @param latch        Latch held.
0:         @param record       Record to lock.
0:         @param forUpdate    Should container be locked for update, or read?
0: 
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see Page
0: 
0: 	*/
0: 	public void lockRecordForRead(
0: 		Latch			latch, 
0: 		RecordHandle    record, 
0: 		boolean         forUpdate)
0: 			throws StandardException;
0: 
0: 	/**
0:         Request a write lock which will be released immediately upon grant.
0: 
0:         @param t                        Transaction to associate lock with.
0:         @param record                   Record to lock.
0:         @param lockForInsertPreviouskey Lock is for a previous key of a insert.
0:         @param waitForLock              Should lock request wait until granted?
0: 
0: 		@return true if the lock was obtained, false if it wasn't. 
0:         False should only be returned if the waitForLock argument was set to
0:         "false," and the lock was unavailable.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see Page
0: 	*/
0: 	public boolean zeroDurationLockRecordForWrite(
0:     Transaction     t, 
0:     RecordHandle    record,
0:     boolean         lockForPreviousKey,
0:     boolean         waitForLock)
0: 		throws StandardException;
0: 
0: 	/**
0: 	    Called before a record is inserted, updated or deleted.
0: 
0:         If zeroDuration is true then lock is released immediately after it
0:         has been granted.
0: 
0:         @param t             Transaction to associate lock with.
0:         @param record        Record to lock.
0:         @param lockForInsert Lock is for an insert.
0:         @param waitForLock   Should lock request wait until granted?
0: 
0: 		@return true if the lock was obtained, false if it wasn't. 
0:         False should only be returned if the waitForLock argument was set to
0:         "false," and the lock was unavailable.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see Page
0: 	*/
0: 	public boolean lockRecordForWrite(
0:     Transaction     t, 
0:     RecordHandle    record,
0:     boolean         lockForInsert,
0:     boolean         waitForLock)
0: 		throws StandardException;
0: 
0: 	/**
0: 	    Lock a record for write while holding a page latch.
0: 
0: 
0:         @param latch        Page latch held.
0:         @param record       Record to lock.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0: 		@see Page
0: 	*/
0: 	public void lockRecordForWrite(
0:     Latch			latch, 
0:     RecordHandle    record)
0: 		throws StandardException;
0: 	/**
0: 		Called after a record has been fetched.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 
0:   		@see Page
0: 
0: 	*/
0: 	public void unlockRecordAfterRead(
0:     Transaction     t, 
0:     ContainerHandle container, 
0:     RecordHandle    record, 
0:     boolean         forUpdate,
0:     boolean         row_qualified)
0:         throws StandardException;
0: 
0: 
0: 	/**
0: 		Get the mode of this policy
0: 	*/
0: 	public int getMode();
0: }
============================================================================