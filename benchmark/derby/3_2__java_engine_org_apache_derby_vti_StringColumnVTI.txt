1:96e3f0c: /*
2:96e3f0c: 
1:96e3f0c: Derby - Class org.apache.derby.vti.StringColumnVTI
1:96e3f0c: 
1:96e3f0c: Licensed to the Apache Software Foundation (ASF) under one or more
1:96e3f0c: contributor license agreements.  See the NOTICE file distributed with
1:96e3f0c: this work for additional information regarding copyright ownership.
1:96e3f0c: The ASF licenses this file to You under the Apache License, Version 2.0
1:96e3f0c: (the "License"); you may not use this file except in compliance with
1:96e3f0c: the License.  You may obtain a copy of the License at
1:96e3f0c: 
1:96e3f0c: http://www.apache.org/licenses/LICENSE-2.0
1:96e3f0c: 
1:96e3f0c: Unless required by applicable law or agreed to in writing, software
1:96e3f0c: distributed under the License is distributed on an "AS IS" BASIS,
1:96e3f0c: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96e3f0c: See the License for the specific language governing permissions and
1:96e3f0c: limitations under the License.
1:96e3f0c: 
1:96e3f0c: */
1:96e3f0c: 
1:96e3f0c: package org.apache.derby.vti;
1:96e3f0c: 
1:96e3f0c: import java.io.ByteArrayInputStream;
1:96e3f0c: import java.io.InputStream;
1:96e3f0c: import java.io.UnsupportedEncodingException;
1:96e3f0c: import java.math.BigDecimal;
1:96e3f0c: import java.sql.Blob;
1:96e3f0c: import java.sql.Clob;
1:96e3f0c: import java.sql.Date;
1:96e3f0c: import java.sql.SQLException;
1:96e3f0c: import java.sql.Time;
1:96e3f0c: import java.sql.Timestamp;
1:96e3f0c: import java.text.DateFormat;
1:96e3f0c: import java.text.ParseException;
1:96e3f0c: 
1:70d436b: import org.apache.derby.shared.common.reference.SQLState;
1:70d436b: import org.apache.derby.iapi.error.StandardException;
1:80d6162: import org.apache.derby.iapi.services.io.ArrayUtil;
1:96e3f0c: import org.apache.derby.iapi.types.HarmonySerialBlob;
1:96e3f0c: import org.apache.derby.iapi.types.HarmonySerialClob;
1:96e3f0c: 
1:96e3f0c: /**
1:96e3f0c:  * <p>
1:96e3f0c:  * This is an abstract table function which assumes that all columns are strings and which
1:96e3f0c:  * coerces the strings to reasonable values for various getXXX()
1:96e3f0c:  * methods. Subclasses must implement the following ResultSet methods:
1:96e3f0c:  * </p>
1:96e3f0c:  *
1:96e3f0c:  * <ul>
1:96e3f0c:  * <li>next( )</li>
1:96e3f0c:  * <li>close()</li>
1:96e3f0c:  * </ul>
1:96e3f0c:  *
1:96e3f0c:  * <p>
1:96e3f0c:  * and the following protected method introduced by this class:
1:96e3f0c:  * </p>
1:96e3f0c:  *
1:96e3f0c:  * <ul>
1:96e3f0c:  * <li>getRawColumn( int columnNumber )</li>
1:96e3f0c:  * </ul>
1:96e3f0c:  */
1:96e3f0c: public  abstract    class   StringColumnVTI extends VTITemplate
1:96e3f0c: {
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:96e3f0c:     // CONSTANTS
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:96e3f0c:     // STATE
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:96e3f0c:     private String[]      _columnNames;
1:96e3f0c:     private boolean _lastColumnWasNull;
1:96e3f0c:     
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:96e3f0c:     // StringColumnVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:19d913d:     /**
1:19d913d:      * <p>
1:96e3f0c:      * Get the string value of the column in the current row identified by the 1-based columnNumber.
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     protected  abstract    String  getRawColumn( int columnNumber ) throws SQLException;
1:96e3f0c:     
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:96e3f0c:     // CONSTRUCTORS
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:96e3f0c:      * Build a StringColumnVTI with the given column names
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     public  StringColumnVTI( String[] columnNames )
1:96e3f0c:     {
1:70d436b:         if ( columnNames != null )
1:70d436b:         {
1:70d436b:             _columnNames = ArrayUtil.copy( columnNames );
1:70d436b:         }
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:19d913d:     // ACCESSORS
1:19d913d:     //
1:19d913d:     ///////////////////////////////////////////////////////////////////////////////////
1:19d913d: 
1:70d436b:     /**
1:70d436b:      * <p>
1:70d436b:      * Set the column names for this table function. This is useful for AwareVTIs,
1:70d436b:      * which need to figure out their column names after analyzing their execution
1:70d436b:      * context. Throws an exception if the column names have already been set.
1:70d436b:      * </p>
1:70d436b:      */
1:70d436b:     public  void    setColumnNames( String[] columnNames )
1:70d436b:         throws SQLException
1:70d436b:     {
1:70d436b:         if ( _columnNames != null ) { throw makeSQLException( SQLState.LANG_CANNOT_CHANGE_COLUMN_NAMES ); }
1:70d436b: 
1:70d436b:         _columnNames = ArrayUtil.copy( columnNames );
1:70d436b:     }
1:70d436b: 
1:70d436b:     
1:70d436b:     /**
1:70d436b:      * <p>
1:19d913d:      * Get the number of columns.
1:19d913d:      * </p>
1:19d913d:      */
1:19d913d:     public int getColumnCount() { return _columnNames.length; }
1:19d913d: 
1:19d913d:     /**
1:19d913d:      * <p>
1:19d913d:      * Get name of a column (1-based indexing).
1:19d913d:      * </p>
1:19d913d:      */
1:19d913d:     public String getColumnName( int columnNumber ) { return _columnNames[ columnNumber - 1 ]; }
1:19d913d: 
1:19d913d:     ///////////////////////////////////////////////////////////////////////////////////
1:19d913d:     //
1:96e3f0c:     // ResultSet BEHAVIOR
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:96e3f0c:     public boolean wasNull() throws SQLException { return _lastColumnWasNull; }
1:96e3f0c:     
1:96e3f0c:     public int findColumn( String columnName ) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         int     count = _columnNames.length;
1:96e3f0c: 
1:96e3f0c:         for ( int i = 0; i < count; i++ ) { if ( _columnNames[ i ].equals( columnName ) ) { return i+1; } }
1:96e3f0c: 
1:96e3f0c:         throw new SQLException( "Unknown column name." );
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     public String getString(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getRawColumn( columnIndex );
1:96e3f0c: 
1:96e3f0c:         checkNull( columnValue );
1:96e3f0c: 
1:96e3f0c:         return columnValue;
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     public boolean getBoolean(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return false; }
1:96e3f0c:         else { return Boolean.valueOf( columnValue ).booleanValue(); }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public byte getByte(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return (byte) 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 return Byte.valueOf( columnValue ).byteValue();
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public short getShort(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return (short) 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 return Short.valueOf( columnValue ).shortValue();
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public int getInt(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:eb7e251:                 return Integer.parseInt( columnValue );
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public long getLong(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return (long) 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 return Long.valueOf( columnValue ).longValue();
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:    public float getFloat(int columnIndex) throws SQLException
1:96e3f0c:    {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return (float) 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:eb7e251:                 return Float.parseFloat( columnValue );
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public double getDouble(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return (double) 0; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:eb7e251:                 return Double.parseDouble( columnValue );
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 return new BigDecimal( columnValue );
1:96e3f0c:             } catch (NumberFormatException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public byte[] getBytes(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 return columnValue.getBytes( "UTF-8" );
1:96e3f0c:             } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public java.sql.Date getDate(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             return new Date( parseDateTime( columnValue ) );
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public java.sql.Time getTime(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             return new Time( parseDateTime( columnValue ) );
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             return new Timestamp( parseDateTime( columnValue ) );
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public InputStream getAsciiStream(int columnIndex) throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         return getEncodedStream( columnValue, "US-ASCII" );
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public java.io.InputStream getBinaryStream(int columnIndex)
1:96e3f0c:         throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else { return new ByteArrayInputStream( getBytes( columnIndex ) ); }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     public Blob getBlob(int columnIndex)
1:96e3f0c:         throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else { return new HarmonySerialBlob( getBytes( columnIndex ) ); }
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     public Clob getClob(int columnIndex)
1:96e3f0c:         throws SQLException
1:96e3f0c:     {
1:96e3f0c:         String  columnValue = getString( columnIndex );
1:96e3f0c: 
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         { return new HarmonySerialClob( getString( columnIndex ) ); }
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c:     //
1:96e3f0c:     // MINIONS
1:96e3f0c:     //
1:96e3f0c:     ///////////////////////////////////////////////////////////////////////////////////
1:96e3f0c: 
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:96e3f0c:      * Set the wasNull flag based on whether this column value turned out to be null.
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     private void checkNull( String columnValue )
1:96e3f0c:     {
1:96e3f0c:         _lastColumnWasNull = ( columnValue == null );
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:96e3f0c:      * Wrap an exception in a SQLException.
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     private SQLException wrap( Throwable t )
1:96e3f0c:     {
1:96e3f0c:         return new SQLException( t.getMessage() );
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:96e3f0c:      * Translate a date/time expression into the corresponding long number of
1:96e3f0c:      * milliseconds.
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     private long parseDateTime( String columnValue  )
1:96e3f0c:         throws SQLException
1:96e3f0c:     {
1:96e3f0c:         try {
1:96e3f0c:             DateFormat      df = DateFormat.getDateTimeInstance();
1:96e3f0c:                 
1:96e3f0c:             java.util.Date  rawDate = df.parse( columnValue );
1:96e3f0c: 
1:96e3f0c:             return rawDate.getTime();
1:96e3f0c:         } catch (ParseException e) { throw wrap( e ); }
1:96e3f0c:     }
1:96e3f0c:     
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:96e3f0c:      * Turn a string into an appropriately encoded ByteArrayInputStream.
1:96e3f0c:      * </p>
1:96e3f0c:      */
1:96e3f0c:     private InputStream getEncodedStream( String columnValue, String encoding  )
1:96e3f0c:         throws SQLException
1:96e3f0c:     {
1:96e3f0c:         if ( columnValue == null ) { return null; }
1:96e3f0c:         else
1:96e3f0c:         {
1:96e3f0c:             try {
1:96e3f0c:                 byte[]      rawBytes = columnValue.getBytes( encoding );
1:96e3f0c:             
1:96e3f0c:                 return new ByteArrayInputStream( rawBytes );
1:96e3f0c:             } catch (UnsupportedEncodingException e) { throw wrap( e ); }
1:96e3f0c:         }
1:96e3f0c:     }
1:96e3f0c: 
1:96e3f0c:     /**
1:96e3f0c:      * <p>
1:70d436b:      * Construct a SQLException from a SQLState and args.
1:70d436b:      * </p>
1:70d436b:      */
1:70d436b:     private SQLException    makeSQLException( String sqlstate, Object... args )
1:70d436b:     {
1:70d436b:         StandardException   se = StandardException.newException( sqlstate, args );
1:70d436b: 
1:70d436b:         return new SQLException( se.getMessage(), se.getSQLState() );
1:70d436b:     }
1:70d436b: 
1:96e3f0c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:70d436b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:         if ( columnNames != null )
1:         {
1:             _columnNames = ArrayUtil.copy( columnNames );
1:         }
/////////////////////////////////////////////////////////////////////////
1:      * Set the column names for this table function. This is useful for AwareVTIs,
1:      * which need to figure out their column names after analyzing their execution
1:      * context. Throws an exception if the column names have already been set.
1:      * </p>
1:      */
1:     public  void    setColumnNames( String[] columnNames )
1:         throws SQLException
1:     {
1:         if ( _columnNames != null ) { throw makeSQLException( SQLState.LANG_CANNOT_CHANGE_COLUMN_NAMES ); }
1: 
1:         _columnNames = ArrayUtil.copy( columnNames );
1:     }
1: 
1:     
1:     /**
1:      * <p>
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Construct a SQLException from a SQLState and args.
1:      * </p>
1:      */
1:     private SQLException    makeSQLException( String sqlstate, Object... args )
1:     {
1:         StandardException   se = StandardException.newException( sqlstate, args );
1: 
1:         return new SQLException( se.getMessage(), se.getSQLState() );
1:     }
1: 
commit:80d6162
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
0:         _columnNames = ArrayUtil.copy( columnNames );
commit:19d913d
/////////////////////////////////////////////////////////////////////////
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the number of columns.
1:      * </p>
1:      */
1:     public int getColumnCount() { return _columnNames.length; }
1: 
1:     /**
1:      * <p>
1:      * Get name of a column (1-based indexing).
1:      * </p>
1:      */
1:     public String getColumnName( int columnNumber ) { return _columnNames[ columnNumber - 1 ]; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:96e3f0c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derby.vti.StringColumnVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.InputStream;
1: import java.io.UnsupportedEncodingException;
1: import java.math.BigDecimal;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Date;
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.text.DateFormat;
1: import java.text.ParseException;
1: 
1: import org.apache.derby.iapi.types.HarmonySerialBlob;
1: import org.apache.derby.iapi.types.HarmonySerialClob;
1: 
1: /**
1:  * <p>
1:  * This is an abstract table function which assumes that all columns are strings and which
1:  * coerces the strings to reasonable values for various getXXX()
1:  * methods. Subclasses must implement the following ResultSet methods:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li>next( )</li>
1:  * <li>close()</li>
1:  * </ul>
1:  *
1:  * <p>
1:  * and the following protected method introduced by this class:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li>getRawColumn( int columnNumber )</li>
1:  * </ul>
1:  */
1: public  abstract    class   StringColumnVTI extends VTITemplate
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private String[]      _columnNames;
1:     private boolean _lastColumnWasNull;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // StringColumnVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the string value of the column in the current row identified by the 1-based columnNumber.
1:      * </p>
1:      */
1:     protected  abstract    String  getRawColumn( int columnNumber ) throws SQLException;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build a StringColumnVTI with the given column names
1:      * </p>
1:      */
1:     public  StringColumnVTI( String[] columnNames )
1:     {
0:         _columnNames = columnNames;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     /** This method returns null. Derby does not look at the metadata returned by the table function. */
0:     public ResultSetMetaData getMetaData() throws SQLException { return null; }
1:     
1:     public boolean wasNull() throws SQLException { return _lastColumnWasNull; }
1:     
1:     public int findColumn( String columnName ) throws SQLException
1:     {
1:         int     count = _columnNames.length;
1: 
1:         for ( int i = 0; i < count; i++ ) { if ( _columnNames[ i ].equals( columnName ) ) { return i+1; } }
1: 
1:         throw new SQLException( "Unknown column name." );
1:     }
1:     
1:     public String getString(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getRawColumn( columnIndex );
1: 
1:         checkNull( columnValue );
1: 
1:         return columnValue;
1:     }
1:     
1:     public boolean getBoolean(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return false; }
1:         else { return Boolean.valueOf( columnValue ).booleanValue(); }
1:     }
1: 
1:     public byte getByte(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return (byte) 0; }
1:         else
1:         {
1:             try {
1:                 return Byte.valueOf( columnValue ).byteValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public short getShort(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return (short) 0; }
1:         else
1:         {
1:             try {
1:                 return Short.valueOf( columnValue ).shortValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public int getInt(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return 0; }
1:         else
1:         {
1:             try {
0:                 return Integer.valueOf( columnValue ).intValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public long getLong(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return (long) 0; }
1:         else
1:         {
1:             try {
1:                 return Long.valueOf( columnValue ).longValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:    public float getFloat(int columnIndex) throws SQLException
1:    {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return (float) 0; }
1:         else
1:         {
1:             try {
0:                 return Float.valueOf( columnValue ).floatValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public double getDouble(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return (double) 0; }
1:         else
1:         {
1:             try {
0:                 return Double.valueOf( columnValue ).doubleValue();
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             try {
1:                 return new BigDecimal( columnValue );
1:             } catch (NumberFormatException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1:     public byte[] getBytes(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             try {
1:                 return columnValue.getBytes( "UTF-8" );
1:             } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:         }
1:     }
1: 
1:     public java.sql.Date getDate(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             return new Date( parseDateTime( columnValue ) );
1:         }
1:     }
1: 
1:     public java.sql.Time getTime(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             return new Time( parseDateTime( columnValue ) );
1:         }
1:     }
1: 
1:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             return new Timestamp( parseDateTime( columnValue ) );
1:         }
1:     }
1: 
1:     public InputStream getAsciiStream(int columnIndex) throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         return getEncodedStream( columnValue, "US-ASCII" );
1:     }
1: 
1:     public java.io.InputStream getBinaryStream(int columnIndex)
1:         throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else { return new ByteArrayInputStream( getBytes( columnIndex ) ); }
1:     }
1: 
1:     public Blob getBlob(int columnIndex)
1:         throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         else { return new HarmonySerialBlob( getBytes( columnIndex ) ); }
1:     }
1:     
1:     public Clob getClob(int columnIndex)
1:         throws SQLException
1:     {
1:         String  columnValue = getString( columnIndex );
1: 
1:         if ( columnValue == null ) { return null; }
1:         { return new HarmonySerialClob( getString( columnIndex ) ); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Set the wasNull flag based on whether this column value turned out to be null.
1:      * </p>
1:      */
1:     private void checkNull( String columnValue )
1:     {
1:         _lastColumnWasNull = ( columnValue == null );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Wrap an exception in a SQLException.
1:      * </p>
1:      */
1:     private SQLException wrap( Throwable t )
1:     {
1:         return new SQLException( t.getMessage() );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Translate a date/time expression into the corresponding long number of
1:      * milliseconds.
1:      * </p>
1:      */
1:     private long parseDateTime( String columnValue  )
1:         throws SQLException
1:     {
1:         try {
1:             DateFormat      df = DateFormat.getDateTimeInstance();
1:                 
1:             java.util.Date  rawDate = df.parse( columnValue );
1: 
1:             return rawDate.getTime();
1:         } catch (ParseException e) { throw wrap( e ); }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Turn a string into an appropriately encoded ByteArrayInputStream.
1:      * </p>
1:      */
1:     private InputStream getEncodedStream( String columnValue, String encoding  )
1:         throws SQLException
1:     {
1:         if ( columnValue == null ) { return null; }
1:         else
1:         {
1:             try {
1:                 byte[]      rawBytes = columnValue.getBytes( encoding );
1:             
1:                 return new ByteArrayInputStream( rawBytes );
1:             } catch (UnsupportedEncodingException e) { throw wrap( e ); }
1:         }
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca998af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Lily Wei
-------------------------------------------------------------------------------
commit:eb7e251
/////////////////////////////////////////////////////////////////////////
1:                 return Integer.parseInt( columnValue );
/////////////////////////////////////////////////////////////////////////
1:                 return Float.parseFloat( columnValue );
/////////////////////////////////////////////////////////////////////////
1:                 return Double.parseDouble( columnValue );
============================================================================