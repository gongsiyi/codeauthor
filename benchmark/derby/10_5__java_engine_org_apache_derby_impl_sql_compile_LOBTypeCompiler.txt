1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.LOBTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
8:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:61070a6: /**
1:eac0369:  * This class implements TypeCompiler for the SQL LOB types.
5:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:4469400: public class LOBTypeCompiler extends BaseTypeCompiler
1:61070a6: {
1:3bb140c:     /**
1:3bb140c:      * Tell whether this type (LOB) can be converted to the given type.
1:3bb140c:      *
1:3bb140c:      * @see TypeCompiler#convertible
1:3bb140c:      */
1:3bb140c:     public boolean convertible(TypeId otherType,
1:3bb140c:             boolean forDataTypeFunction)
1:3bb140c:     {
1:eac0369: 
1:3bb140c:         return  (otherType.isBlobTypeId());
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * Tell whether this type (LOB) is compatible with the given type.
1:3bb140c:      *
1:3bb140c:      * @param otherType     The TypeId of the other type.
1:3bb140c:      */
1:3bb140c:     public boolean compatible(TypeId otherType)
1:3bb140c:     {
1:3bb140c:         return convertible(otherType,false);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * Tell whether this type (LOB) can be stored into from the given type.
1:3bb140c:      *
1:3bb140c:      * @param otherType     The TypeId of the other type.
1:3bb140c:      * @param cf            A ClassFactory
1:3bb140c:      */
1:eac0369: 
1:3bb140c:     public boolean storable(TypeId otherType, ClassFactory cf)
1:3bb140c:     {
1:3bb140c:         // no automatic conversions at store time
1:eac0369: 
1:3bb140c:         return  (otherType.isBlobTypeId());
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /** @see TypeCompiler#interfaceName */
1:3bb140c:     public String interfaceName()
1:3bb140c:     {
1:3bb140c:         return ClassName.BitDataValue;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:3bb140c:      */
1:eac0369: 
1:3bb140c:     public String getCorrespondingPrimitiveTypeName() {
1:3bb140c:         int formatId = getStoredFormatIdFromTypeId();
1:3bb140c:         switch (formatId) {
1:3bb140c:             case StoredFormatIds.BLOB_TYPE_ID:  return "java.sql.Blob";
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG) {
1:3bb140c:                     SanityManager.THROWASSERT(
1:3bb140c:                         "unexpected formatId " +
1:3bb140c:                         "in getCorrespondingPrimitiveTypeName() - " + formatId);
11:eac0369:                 }
1:3bb140c:                 return null;
1:3bb140c:         }
1:eac0369:     }
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * @see TypeCompiler#getCastToCharWidth
1:3bb140c:      */
1:3bb140c:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:3bb140c:     {
1:3bb140c:         return dts.getMaximumWidth();
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     String nullMethodName() {
1:3bb140c:         int formatId = getStoredFormatIdFromTypeId();
1:3bb140c:         switch (formatId) {
1:3bb140c:             case StoredFormatIds.BLOB_TYPE_ID:  return "getNullBlob";
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG) {
1:3bb140c:                     SanityManager.THROWASSERT(
1:3bb140c:                         "unexpected formatId " +
1:3bb140c:                         "in nullMethodName() - " + formatId);
1:3bb140c:                 }
1:3bb140c:                 return null;
1:3bb140c:         }
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     @Override
1:3bb140c:     String dataValueMethodName()
1:3bb140c:     {
1:3bb140c:         int formatId = getStoredFormatIdFromTypeId();
1:3bb140c:         switch (formatId) {
1:3bb140c:             case StoredFormatIds.BLOB_TYPE_ID:  return "getBlobDataValue";
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG) {
1:3bb140c:                     SanityManager.THROWASSERT(
1:3bb140c:                         "unexpected formatId " +
1:3bb140c:                         "in dataValueMethodName() - " + formatId);
1:3bb140c:                 }
1:3bb140c:                 return null;
1:3bb140c:         }
1:3bb140c:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class LOBTypeCompiler extends BaseTypeCompiler
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class LOBTypeCompiler extends BaseTypeCompiler
1:     /**
1:      * Tell whether this type (LOB) can be converted to the given type.
1:      *
1:      * @see TypeCompiler#convertible
1:      */
1:     public boolean convertible(TypeId otherType,
1:             boolean forDataTypeFunction)
1:     {
1:         return  (otherType.isBlobTypeId());
1:     }
1:     /**
1:      * Tell whether this type (LOB) is compatible with the given type.
1:      *
1:      * @param otherType     The TypeId of the other type.
1:      */
1:     public boolean compatible(TypeId otherType)
1:     {
1:         return convertible(otherType,false);
1:     }
1:     /**
1:      * Tell whether this type (LOB) can be stored into from the given type.
1:      *
1:      * @param otherType     The TypeId of the other type.
1:      * @param cf            A ClassFactory
1:      */
1:     public boolean storable(TypeId otherType, ClassFactory cf)
1:     {
1:         // no automatic conversions at store time
1:         return  (otherType.isBlobTypeId());
1:     }
1:     /** @see TypeCompiler#interfaceName */
1:     public String interfaceName()
1:     {
1:         return ClassName.BitDataValue;
1:     }
1:     /**
1:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:      */
1:     public String getCorrespondingPrimitiveTypeName() {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         switch (formatId) {
1:             case StoredFormatIds.BLOB_TYPE_ID:  return "java.sql.Blob";
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.THROWASSERT(
1:                         "unexpected formatId " +
1:                         "in getCorrespondingPrimitiveTypeName() - " + formatId);
1:                 return null;
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#getCastToCharWidth
1:      */
1:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:     {
1:         return dts.getMaximumWidth();
1:     }
1: 
1:     String nullMethodName() {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         switch (formatId) {
1:             case StoredFormatIds.BLOB_TYPE_ID:  return "getNullBlob";
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.THROWASSERT(
1:                         "unexpected formatId " +
1:                         "in nullMethodName() - " + formatId);
1:                 }
1:                 return null;
1:         }
1:     }
1: 
1:     @Override
1:     String dataValueMethodName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         switch (formatId) {
1:             case StoredFormatIds.BLOB_TYPE_ID:  return "getBlobDataValue";
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.THROWASSERT(
1:                         "unexpected formatId " +
1:                         "in dataValueMethodName() - " + formatId);
1:                 }
1:                 return null;
1:         }
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c5c4f19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
0:         String nullMethodName() {
/////////////////////////////////////////////////////////////////////////
0:         String dataValueMethodName()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.LOBTypeCompiler
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
1: {
1:        /**
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
0: /**
1:  * This class implements TypeCompiler for the SQL LOB types.
1:  *
0:  * @author Jonas S Karlsson
1:  */
1: 
0: public class LOBTypeCompiler extends BaseTypeCompiler
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0:         /**
0:          * Tell whether this type (BLOB) can be compared to the given type. // 
0: 		 * BLOBS are not comparable.
1:          *
0:          * @param otherType     The TypeId of the other type.
1:          */
1: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
0:         {
0: 			return false;
1:         }
1: 
1: 
1: 
0:         /**
0:          * Tell whether this type (LOB) can be converted to the given type.
1:          *
0: 		 * @see TypeCompiler#convertible
1:          */
0:         public boolean convertible(TypeId otherType, 
0: 								   boolean forDataTypeFunction)
0:         {
1: 
0:             return  (otherType.isBlobTypeId());
1:         }
1: 
0:         /**
0:          * Tell whether this type (LOB) is compatible with the given type.
1:          *
0:          * @param otherType     The TypeId of the other type.
1:          */
0: 		public boolean compatible(TypeId otherType)
0: 		{
0: 				return convertible(otherType,false);
1: 		}
1: 
0:         /**
0:          * Tell whether this type (LOB) can be stored into from the given type.
1:          *
0:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
1:          */
1: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
0:         {
0:             // no automatic conversions at store time
1: 
0: 			return  (otherType.isBlobTypeId());
1:         }
1: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
0:         {
0:             return ClassName.BitDataValue;
1:         }
1: 
0:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:          */
1: 
0:         public String getCorrespondingPrimitiveTypeName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "java.sql.Blob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
0:                     return null;
1:             }
1:         }
1: 
0:         /**
0:          * @see TypeCompiler#getCastToCharWidth
1:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
0:         {
0:                 return dts.getMaximumWidth();
1:         }
1: 
0:         protected String nullMethodName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "getNullBlob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in nullMethodName() - " + formatId);
0:                     return null;
1:             }
1:         }
1: 
0:         protected String dataValueMethodName()
0:         {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "getBlobDataValue";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in dataValueMethodName() - " + formatId);
0:                     return null;
1:                 }
1:         }
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL LOB types.
0:  *
0:  * @author Jonas S Karlsson
0:  */
0: 
0: public class LOBTypeCompiler extends BaseTypeCompiler
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0:         /**
0:          * Tell whether this type (BLOB) can be compared to the given type. // 
0: 		 * BLOBS are not comparable.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
0:         {
0: 			return false;
0:         }
0: 
0: 
0: 
0:         /**
0:          * Tell whether this type (LOB) can be converted to the given type.
0:          *
0: 		 * @see TypeCompiler#convertible
0:          */
0:         public boolean convertible(TypeId otherType, 
0: 								   boolean forDataTypeFunction)
0:         {
0: 
0:             return  (otherType.isBlobTypeId());
0:         }
0: 
0:         /**
0:          * Tell whether this type (LOB) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 		public boolean compatible(TypeId otherType)
0: 		{
0: 				return convertible(otherType,false);
0: 		}
0: 
0:         /**
0:          * Tell whether this type (LOB) can be stored into from the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
0:          */
0: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
0:         {
0:             // no automatic conversions at store time
0: 
0: 			return  (otherType.isBlobTypeId());
0:         }
0: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
0:         {
0:             return ClassName.BitDataValue;
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0:          */
0: 
0:         public String getCorrespondingPrimitiveTypeName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "java.sql.Blob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
0:                     return null;
0:             }
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCastToCharWidth
0:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
0:         {
0:                 return dts.getMaximumWidth();
0:         }
0: 
0:         protected String nullMethodName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "getNullBlob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in nullMethodName() - " + formatId);
0:                     return null;
0:             }
0:         }
0: 
0:         protected String dataValueMethodName()
0:         {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.BLOB_TYPE_ID:  return "getBlobDataValue";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in dataValueMethodName() - " + formatId);
0:                     return null;
0:                 }
0:         }
0: }
============================================================================