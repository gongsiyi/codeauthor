1:b8d1d8a: /*
1:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.init.DbSetup
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.init;
1:b8d1d8a: 
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: import java.sql.ResultSet;
1:b8d1d8a: import java.sql.SQLException;
1:b8d1d8a: import java.sql.Statement;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * DbSetup: Creates database and builds single user table with indexes
1:b8d1d8a:  */
1:b8d1d8a: public class DbSetup {
1:b8d1d8a: 
1:b8d1d8a: 	/**
1:b8d1d8a: 	 * The main database setup method
1:b8d1d8a: 	 */
1:b8d1d8a: 	public static boolean doIt(Connection conn) throws Throwable {
1:b8d1d8a: 		Statement s = null;
1:b8d1d8a: 		ResultSet rs = null;
1:b8d1d8a: 		boolean finished = false;
1:b8d1d8a: 
1:c043274: 		NsTest.logger.println("dbSetup.doIt() starting...");
1:b8d1d8a: 
1:b8d1d8a: 		try {
1:b8d1d8a: 			conn.setAutoCommit(false);
1:b8d1d8a: 		} catch (Exception e) {
1:c043274: 			NsTest.logger.println("FAIL - setAutoCommit() failed:");
1:b8d1d8a: 			printException("setting autocommit in dbSetup", e);
1:b8d1d8a: 			return (false);
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		try {
1:b8d1d8a: 			s = conn.createStatement();
1:b8d1d8a: 			rs = s.executeQuery("select tablename from sys.systables "
1:b8d1d8a: 					+ " where tablename = 'NSTESTTAB'");
1:b8d1d8a: 			if (rs.next()) {
1:b8d1d8a: 				rs.close();
1:c043274: 				NsTest.logger.println("table 'NSTESTTAB' already exists");
1:b8d1d8a: 				finished = true;
1:b8d1d8a: 				NsTest.schemaCreated = true; // indicates to other classes
1:e276048: 				// that the schema already exists
1:b8d1d8a: 			}
1:b8d1d8a: 		} catch (Exception e) {
1:c043274: 			NsTest.logger
1:b8d1d8a: 			.println("dbSetup.doIt() check existance of table: FAIL -- unexpected exception:");
1:b8d1d8a: 			printException(
1:b8d1d8a: 					"executing query or processing resultSet to check for table existence",
1:b8d1d8a: 					e);
1:b8d1d8a: 			return (false);
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		// if we reach here then the table does not exist, so we create it
1:b8d1d8a: 		if (finished == false) {
1:b8d1d8a: 			try {
1:c043274: 				NsTest.logger
1:b8d1d8a: 				.println("creating table 'NSTESTTAB' and corresponding indices");
1:b8d1d8a: 				s.execute("create table nstesttab (" + "id int,"
1:b8d1d8a: 						+ "t_char char(100)," + "t_date date,"
1:b8d1d8a: 						+ "t_decimal decimal," + "t_decimal_nn decimal(10,10),"
1:b8d1d8a: 						+ "t_double double precision," + "t_float float,"
1:b8d1d8a: 						+ "t_int int," + "t_longint bigint,"
1:b8d1d8a: 						+ "t_numeric_large numeric(30,10)," + "t_real real,"
1:b8d1d8a: 						+ "t_smallint smallint," + "t_time time,"
1:b8d1d8a: 						+ "t_timestamp timestamp," + "t_varchar varchar(100),"
1:b8d1d8a: 						+ "t_clob clob(1K)," + "t_blob blob(10K),"
1:b8d1d8a: 						+ "serialkey bigint generated always as identity, "
1:b13fb1c: 						+ "sequenceColumn bigint, "
1:b8d1d8a: 						+ "unique (serialkey)) ");
1:b8d1d8a: 
1:b8d1d8a: 				s.execute("create index t_char_ind on nstesttab ( t_char)");
1:b8d1d8a: 				s.execute("create index t_date_ind on nstesttab ( t_date)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_decimal_ind on nstesttab ( t_decimal)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_decimal_nn_ind on nstesttab ( t_decimal_nn)");
1:b8d1d8a: 				s.execute("create index t_double_ind on nstesttab ( t_double)");
1:b8d1d8a: 				s.execute("create index t_float_ind on nstesttab ( t_float)");
1:b8d1d8a: 				s.execute("create index t_int_ind on nstesttab ( t_int)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_longint_ind on nstesttab ( t_longint)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_num_lrg_ind on nstesttab ( t_numeric_large)");
1:b8d1d8a: 				s.execute("create index t_real_ind on nstesttab ( t_real)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_smallint_ind on nstesttab ( t_smallint)");
1:b8d1d8a: 				s.execute("create index t_time_ind on nstesttab ( t_time)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_timestamp_ind on nstesttab ( t_timestamp)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_varchar_ind on nstesttab ( t_varchar)");
1:b8d1d8a: 				s
1:b8d1d8a: 				.execute("create index t_serialkey_ind on nstesttab (serialkey)");
1:b8d1d8a: 
1:b13fb1c:                 NsTest.logger.println( "Creating nstesttab_seq sequence" );
1:b13fb1c:                 s.execute( "create sequence nstesttab_seq as bigint start with 0" );
1:b13fb1c: 
1:c043274: 				NsTest.logger
1:b8d1d8a: 				.println("creating table 'NSTRIGTAB' and corresponding indices");
1:b8d1d8a: 				s.execute("create table NSTRIGTAB (" + "id int,"
1:b8d1d8a: 						+ "t_char char(100)," + "t_date date,"
1:b8d1d8a: 						+ "t_decimal decimal," + "t_decimal_nn decimal(10,10),"
1:b8d1d8a: 						+ "t_double double precision," + "t_float float,"
1:b8d1d8a: 						+ "t_int int," + "t_longint bigint,"
1:b8d1d8a: 						+ "t_numeric_large numeric(30,10)," + "t_real real,"
1:b8d1d8a: 						+ "t_smallint smallint," + "t_time time,"
1:b8d1d8a: 						+ "t_timestamp timestamp," + "t_varchar varchar(100),"
1:b8d1d8a: 						+ "t_clob clob(1K)," + "t_blob blob(10K),"
1:b13fb1c: 						+ "serialkey bigint, "
1:b13fb1c: 						+ "sequenceColumn bigint )");
1:b8d1d8a: 				// create trigger
1:b8d1d8a: 				s.execute("CREATE TRIGGER NSTEST_TRIG AFTER DELETE ON nstesttab "
1:b8d1d8a: 						+ "REFERENCING OLD AS OLDROW FOR EACH ROW MODE DB2SQL "
1:b8d1d8a: 						+ "INSERT INTO NSTRIGTAB values("
1:b8d1d8a: 						+ "OLDROW.ID, OLDROW.T_CHAR,OLDROW.T_DATE,"
1:b8d1d8a: 						+ "OLDROW.T_DECIMAL,OLDROW.T_DECIMAL_NN,OLDROW.T_DOUBLE,"
1:b8d1d8a: 						+ "OLDROW.T_FLOAT, OLDROW.T_INT,OLDROW.T_LONGINT, OLDROW.T_numeric_large,"
1:b8d1d8a: 						+ "OLDROW.T_real,OLDROW.T_smallint,OLDROW.T_time,OLDROW.T_timestamp,OLDROW.T_varchar,"
1:b8d1d8a: 						+ "OLDROW.T_clob,OLDROW.T_blob, "
1:b13fb1c: 						+ "OLDROW.serialkey, "
1:b13fb1c: 						+ "OLDROW.sequenceColumn )");
1:b8d1d8a: 			} catch (Exception e) {
1:c043274:                 if ( NsTest.justCountErrors() ) { NsTest.printException( DbSetup.class.getName(), e ); }
1:c043274: 				else { e.printStackTrace( NsTest.logger ); }
1:c043274: 				NsTest.logger
1:b8d1d8a: 				.println("FAIL - unexpected exception in dbSetup.doIt() while creating schema:");
1:b8d1d8a: 				printException("executing statements to create schema", e);
1:b8d1d8a: 				return (false);
1:b8d1d8a: 			}
1:b8d1d8a: 		}// end of if(finished==false)
1:b8d1d8a: 
1:b8d1d8a: 		conn.commit();
1:b8d1d8a: 		return (true);
1:b8d1d8a: 
1:b8d1d8a: 	}// end of method doIt()
1:b8d1d8a: 
1:b8d1d8a: 	// ** This method abstracts exception message printing for all exception
1:b8d1d8a: 	// messages. You may want to change
1:b8d1d8a: 	// ****it if more detailed exception messages are desired.
1:b8d1d8a: 	// ***Method is synchronized so that the output file will contain sensible
1:b8d1d8a: 	// stack traces that are not
1:b8d1d8a: 	// ****mixed but rather one exception printed at a time
1:b8d1d8a: 	public static synchronized void printException(String where, Exception e) {
1:c043274:         if ( NsTest.justCountErrors() )
1:c043274:         {
1:c043274:             NsTest.addError( e );
1:c043274:             return;
1:c043274:         }
1:c043274: 
1:b8d1d8a: 		if (e instanceof SQLException) {
1:b8d1d8a: 			SQLException se = (SQLException) e;
1:b8d1d8a: 
1:b8d1d8a: 			if (se.getSQLState().equals("40001"))
1:c043274: 				NsTest.logger.println("deadlocked detected");
1:b8d1d8a: 			if (se.getSQLState().equals("40XL1"))
1:c043274: 				NsTest.logger.println(" lock timeout exception");
1:b8d1d8a: 			if (se.getSQLState().equals("23500"))
1:c043274: 				NsTest.logger.println(" duplicate key violation");
1:b8d1d8a: 			if (se.getNextException() != null) {
1:b8d1d8a: 				String m = se.getNextException().getSQLState();
1:c043274: 				NsTest.logger.println(se.getNextException().getMessage()
1:b8d1d8a: 						+ " SQLSTATE: " + m);
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:0a66fd0: 		if (e.getMessage() == null) {
1:c043274: 			NsTest.logger.println("NULL error message detected");
1:c043274: 			NsTest.logger.println("Here is the NULL exection - " + e.toString());
1:c043274: 			NsTest.logger.println("Stack trace of the NULL exception - ");
1:c043274: 			e.printStackTrace( NsTest.logger );
1:b8d1d8a: 		}
1:c043274: 		NsTest.logger.println("During " + where + ", exception thrown was : "
1:b8d1d8a: 				+ e.getMessage());
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: }//end of class definition
1:b8d1d8a: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b13fb1c
/////////////////////////////////////////////////////////////////////////
1: 						+ "sequenceColumn bigint, "
/////////////////////////////////////////////////////////////////////////
1:                 NsTest.logger.println( "Creating nstesttab_seq sequence" );
1:                 s.execute( "create sequence nstesttab_seq as bigint start with 0" );
1: 
/////////////////////////////////////////////////////////////////////////
1: 						+ "serialkey bigint, "
1: 						+ "sequenceColumn bigint )");
/////////////////////////////////////////////////////////////////////////
1: 						+ "OLDROW.serialkey, "
1: 						+ "OLDROW.sequenceColumn )");
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println("dbSetup.doIt() starting...");
1: 			NsTest.logger.println("FAIL - setAutoCommit() failed:");
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("table 'NSTESTTAB' already exists");
1: 			NsTest.logger
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1:                 if ( NsTest.justCountErrors() ) { NsTest.printException( DbSetup.class.getName(), e ); }
1: 				else { e.printStackTrace( NsTest.logger ); }
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1:         if ( NsTest.justCountErrors() )
1:         {
1:             NsTest.addError( e );
1:             return;
1:         }
1: 
1: 				NsTest.logger.println("deadlocked detected");
1: 				NsTest.logger.println(" lock timeout exception");
1: 				NsTest.logger.println(" duplicate key violation");
1: 				NsTest.logger.println(se.getNextException().getMessage()
1: 			NsTest.logger.println("NULL error message detected");
1: 			NsTest.logger.println("Here is the NULL exection - " + e.toString());
1: 			NsTest.logger.println("Stack trace of the NULL exception - ");
1: 			e.printStackTrace( NsTest.logger );
1: 		NsTest.logger.println("During " + where + ", exception thrown was : "
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e276048
/////////////////////////////////////////////////////////////////////////
1: 				// that the schema already exists
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0a66fd0
/////////////////////////////////////////////////////////////////////////
1: 		if (e.getMessage() == null) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.init.DbSetup
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.init;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * DbSetup: Creates database and builds single user table with indexes
1:  */
1: public class DbSetup {
1: 
1: 	/**
1: 	 * The main database setup method
1: 	 */
1: 	public static boolean doIt(Connection conn) throws Throwable {
1: 		Statement s = null;
1: 		ResultSet rs = null;
1: 		boolean finished = false;
1: 
0: 		System.out.println("dbSetup.doIt() starting...");
1: 
1: 		try {
1: 			conn.setAutoCommit(false);
1: 		} catch (Exception e) {
0: 			System.out.println("FAIL - setAutoCommit() failed:");
1: 			printException("setting autocommit in dbSetup", e);
1: 			return (false);
1: 		}
1: 
1: 		try {
1: 			s = conn.createStatement();
1: 			rs = s.executeQuery("select tablename from sys.systables "
1: 					+ " where tablename = 'NSTESTTAB'");
1: 			if (rs.next()) {
1: 				rs.close();
0: 				System.out.println("table 'NSTESTTAB' already exists");
1: 				finished = true;
1: 				NsTest.schemaCreated = true; // indicates to other classes
0: 				// that the schema already
0: 				// exists
1: 			}
1: 		} catch (Exception e) {
0: 			System.out
1: 			.println("dbSetup.doIt() check existance of table: FAIL -- unexpected exception:");
1: 			printException(
1: 					"executing query or processing resultSet to check for table existence",
1: 					e);
1: 			return (false);
1: 		}
1: 
1: 		// if we reach here then the table does not exist, so we create it
1: 		if (finished == false) {
1: 			try {
0: 				System.out
1: 				.println("creating table 'NSTESTTAB' and corresponding indices");
1: 				s.execute("create table nstesttab (" + "id int,"
1: 						+ "t_char char(100)," + "t_date date,"
1: 						+ "t_decimal decimal," + "t_decimal_nn decimal(10,10),"
1: 						+ "t_double double precision," + "t_float float,"
1: 						+ "t_int int," + "t_longint bigint,"
1: 						+ "t_numeric_large numeric(30,10)," + "t_real real,"
1: 						+ "t_smallint smallint," + "t_time time,"
1: 						+ "t_timestamp timestamp," + "t_varchar varchar(100),"
1: 						+ "t_clob clob(1K)," + "t_blob blob(10K),"
1: 						+ "serialkey bigint generated always as identity, "
1: 						+ "unique (serialkey)) ");
1: 
1: 				s.execute("create index t_char_ind on nstesttab ( t_char)");
1: 				s.execute("create index t_date_ind on nstesttab ( t_date)");
1: 				s
1: 				.execute("create index t_decimal_ind on nstesttab ( t_decimal)");
1: 				s
1: 				.execute("create index t_decimal_nn_ind on nstesttab ( t_decimal_nn)");
1: 				s.execute("create index t_double_ind on nstesttab ( t_double)");
1: 				s.execute("create index t_float_ind on nstesttab ( t_float)");
1: 				s.execute("create index t_int_ind on nstesttab ( t_int)");
1: 				s
1: 				.execute("create index t_longint_ind on nstesttab ( t_longint)");
1: 				s
1: 				.execute("create index t_num_lrg_ind on nstesttab ( t_numeric_large)");
1: 				s.execute("create index t_real_ind on nstesttab ( t_real)");
1: 				s
1: 				.execute("create index t_smallint_ind on nstesttab ( t_smallint)");
1: 				s.execute("create index t_time_ind on nstesttab ( t_time)");
1: 				s
1: 				.execute("create index t_timestamp_ind on nstesttab ( t_timestamp)");
1: 				s
1: 				.execute("create index t_varchar_ind on nstesttab ( t_varchar)");
1: 				s
1: 				.execute("create index t_serialkey_ind on nstesttab (serialkey)");
1: 
0: 				System.out
1: 				.println("creating table 'NSTRIGTAB' and corresponding indices");
1: 				s.execute("create table NSTRIGTAB (" + "id int,"
1: 						+ "t_char char(100)," + "t_date date,"
1: 						+ "t_decimal decimal," + "t_decimal_nn decimal(10,10),"
1: 						+ "t_double double precision," + "t_float float,"
1: 						+ "t_int int," + "t_longint bigint,"
1: 						+ "t_numeric_large numeric(30,10)," + "t_real real,"
1: 						+ "t_smallint smallint," + "t_time time,"
1: 						+ "t_timestamp timestamp," + "t_varchar varchar(100),"
1: 						+ "t_clob clob(1K)," + "t_blob blob(10K),"
0: 						+ "serialkey bigint )");
1: 				// create trigger
1: 				s.execute("CREATE TRIGGER NSTEST_TRIG AFTER DELETE ON nstesttab "
1: 						+ "REFERENCING OLD AS OLDROW FOR EACH ROW MODE DB2SQL "
1: 						+ "INSERT INTO NSTRIGTAB values("
1: 						+ "OLDROW.ID, OLDROW.T_CHAR,OLDROW.T_DATE,"
1: 						+ "OLDROW.T_DECIMAL,OLDROW.T_DECIMAL_NN,OLDROW.T_DOUBLE,"
1: 						+ "OLDROW.T_FLOAT, OLDROW.T_INT,OLDROW.T_LONGINT, OLDROW.T_numeric_large,"
1: 						+ "OLDROW.T_real,OLDROW.T_smallint,OLDROW.T_time,OLDROW.T_timestamp,OLDROW.T_varchar,"
1: 						+ "OLDROW.T_clob,OLDROW.T_blob, "
0: 						+ "OLDROW.serialkey)");
1: 			} catch (Exception e) {
0: 				e.printStackTrace();
0: 				System.out
1: 				.println("FAIL - unexpected exception in dbSetup.doIt() while creating schema:");
1: 				printException("executing statements to create schema", e);
1: 				return (false);
1: 			}
1: 		}// end of if(finished==false)
1: 
1: 		conn.commit();
1: 		return (true);
1: 
1: 	}// end of method doIt()
1: 
1: 	// ** This method abstracts exception message printing for all exception
1: 	// messages. You may want to change
1: 	// ****it if more detailed exception messages are desired.
1: 	// ***Method is synchronized so that the output file will contain sensible
1: 	// stack traces that are not
1: 	// ****mixed but rather one exception printed at a time
1: 	public static synchronized void printException(String where, Exception e) {
1: 		if (e instanceof SQLException) {
1: 			SQLException se = (SQLException) e;
1: 
1: 			if (se.getSQLState().equals("40001"))
0: 				System.out.println("deadlocked detected");
1: 			if (se.getSQLState().equals("40XL1"))
0: 				System.out.println(" lock timeout exception");
1: 			if (se.getSQLState().equals("23500"))
0: 				System.out.println(" duplicate key violation");
1: 			if (se.getNextException() != null) {
1: 				String m = se.getNextException().getSQLState();
0: 				System.out.println(se.getNextException().getMessage()
1: 						+ " SQLSTATE: " + m);
1: 			}
1: 		}
0: 		if (e.getMessage().equals(null)) {
0: 			System.out.println("NULL error message detected");
0: 			System.out.println("Here is the NULL exection - " + e.toString());
0: 			System.out.println("Stack trace of the NULL exception - ");
0: 			e.printStackTrace(System.out);
1: 		}
0: 		System.out.println("During " + where + ", exception thrown was : "
1: 				+ e.getMessage());
1: 	}
1: 
1: }//end of class definition
1: 
============================================================================