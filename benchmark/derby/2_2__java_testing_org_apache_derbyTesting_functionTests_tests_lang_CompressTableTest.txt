1:3082e5d: /*
1:3082e5d: 
1:3082e5d: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest
1:3082e5d: 
1:3082e5d: Licensed to the Apache Software Foundation (ASF) under one or more
1:3082e5d: contributor license agreements.  See the NOTICE file distributed with
1:3082e5d: this work for additional information regarding copyright ownership.
1:3082e5d: The ASF licenses this file to You under the Apache License, Version 2.0
1:3082e5d: (the "License"); you may not use this file except in compliance with
1:3082e5d: the License.  You may obtain a copy of the License at
1:3082e5d: 
1:3082e5d: http://www.apache.org/licenses/LICENSE-2.0
1:3082e5d: 
1:3082e5d: Unless required by applicable law or agreed to in writing, software
1:3082e5d: distributed under the License is distributed on an "AS IS" BASIS,
1:3082e5d: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3082e5d: See the License for the specific language governing permissions and
1:3082e5d: limitations under the License.
1:3082e5d: 
1:3082e5d: */
1:3082e5d: 
1:3082e5d: package org.apache.derbyTesting.functionTests.tests.lang;
1:3082e5d: 
1:5a56eb0: import java.sql.Connection;
1:5a56eb0: import java.sql.PreparedStatement;
1:3082e5d: import java.sql.SQLException;
1:3082e5d: import java.sql.Statement;
1:3f5c48a: import java.util.concurrent.atomic.AtomicBoolean;
1:3082e5d: import junit.framework.Test;
1:3082e5d: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:5a56eb0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:5a56eb0: import org.apache.derbyTesting.junit.JDBC;
1:3082e5d: import org.apache.derbyTesting.junit.TestConfiguration;
1:3082e5d: 
1:3082e5d: /**
1:3082e5d:  * Test cases for compressing tables.
1:3082e5d:  */
1:3082e5d: public class CompressTableTest extends BaseJDBCTestCase {
1:3082e5d: 
1:3082e5d:     public CompressTableTest(String name) {
1:3082e5d:         super(name);
1:3082e5d:     }
1:3082e5d: 
1:3082e5d:     public static Test suite() {
1:3082e5d:         // compress table is an embedded feature, no need to run network tests
1:5a56eb0:         return new CleanDatabaseTestSetup(
1:5a56eb0:                 TestConfiguration.embeddedSuite(CompressTableTest.class));
1:3082e5d:     }
1:3082e5d: 
1:f6e9c21:     //DERBY-5750(Sending an empty string as table name to compress table 
1:f6e9c21:     // procedure or empty string as index name to update statistics procedure 
1:f6e9c21:     // makes the parser throw an exception.)
1:f6e9c21:     //
1:f6e9c21:     //No table name will result in the same exception that a user would
1:f6e9c21:     // get when issuing the compress table sql directly without the table name
1:f6e9c21:     // eg alter table compress sequential
1:f6e9c21:     // Notice that the table name is missing in the compress sql above
1:f6e9c21:     public void testCompressTableWithEmptyParamsDerby5750() throws SQLException {
1:f6e9c21:         Statement s = createStatement();
1:f6e9c21:         s.execute("create table DERBY5750_t1 (c11 int)");
1:f6e9c21:         
1:f6e9c21:         //Following 2 statements will give exception since there is no schema
1:f6e9c21:         // named empty string
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42Y07", s,
1:f6e9c21:         		"call syscs_util.syscs_compress_table('','DERBY5750_T1',1)");
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42Y07", s,
1:f6e9c21:         		"call syscs_util.syscs_compress_table('','',1)");
1:f6e9c21: 
1:f6e9c21:         //null schema name will translate to current schema
1:f6e9c21:         s.execute("call syscs_util.syscs_compress_table(null,'DERBY5750_T1',1)");
1:f6e9c21: 
1:f6e9c21:         //Following 2 statements will give exception since there is no table  
1:f6e9c21:         // named empty string
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42X05", s,
1:f6e9c21:         		"call syscs_util.syscs_compress_table(null,'',1)");
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42X05", s,
1:f6e9c21:                 "call syscs_util.syscs_compress_table('APP','',1)");
1:f6e9c21: 
1:f6e9c21:         //Following 2 statements will give exception since table name can't 
1:f6e9c21:         // be null
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42X05", s,
1:f6e9c21:         		"call syscs_util.syscs_compress_table(null,null,1)");
1:f6e9c21:         assertStatementError(
1:f6e9c21:         		"42X05", s,
1:f6e9c21:         		"call syscs_util.syscs_compress_table('APP',null,1)");
1:f6e9c21: 
1:f6e9c21:         s.execute("call syscs_util.syscs_compress_table('APP','DERBY5750_T1',1)");
1:f6e9c21:         
1:f6e9c21:         s.execute("drop table DERBY5750_t1");    	
1:f6e9c21:     }
1:f6e9c21:     
1:3082e5d:     /**
1:3082e5d:      * Test that SYSCS_COMPRESS_TABLE and SYSCS_INPLACE_COMPRESS_TABLE work
1:3082e5d:      * when the table name contains a double quote. It used to raise a syntax
1:3082e5d:      * error. Fixed as part of DERBY-1062.
1:3082e5d:      */
1:3082e5d:     public void testCompressTableWithDoubleQuoteInName() throws SQLException {
1:3082e5d:         Statement s = createStatement();
1:3082e5d:         s.execute("create table app.\"abc\"\"def\" (x int)");
1:3082e5d:         s.execute("call syscs_util.syscs_compress_table('APP','abc\"def',1)");
1:3082e5d:         s.execute("call syscs_util.syscs_inplace_compress_table('APP'," +
1:3082e5d:                   "'abc\"def', 1, 1, 1)");
1:3082e5d:         s.execute("drop table app.\"abc\"\"def\"");
1:3082e5d:     }
1:5a56eb0: 
1:5a56eb0:     /**
1:5a56eb0:      * Test that statement invalidation works when SYSCS_COMPRESS_TABLE calls
1:5a56eb0:      * and other statements accessing the same table execute concurrently.
1:5a56eb0:      * DERBY-4275.
1:5a56eb0:      */
1:5a56eb0:     public void testConcurrentInvalidation() throws Exception {
1:5a56eb0:         Statement s = createStatement();
1:5a56eb0:         s.execute("create table d4275(x int)");
1:5a56eb0:         s.execute("insert into d4275 values 1");
1:5a56eb0: 
1:5a56eb0:         // Object used by the main thread to tell the helper thread to stop.
1:3f5c48a:         // The helper thread stops once the value is set to true.
1:3f5c48a:         final AtomicBoolean stop = new AtomicBoolean();
1:5a56eb0: 
1:5a56eb0:         // Holder for anything thrown by the run() method in the helper thread.
1:5a56eb0:         final Throwable[] error = new Throwable[1];
1:5a56eb0: 
1:5a56eb0:         // Set up a helper thread that executes a query against the table
1:5a56eb0:         // until the main thread tells it to stop.
1:5a56eb0:         Connection c2 = openDefaultConnection();
1:5a56eb0:         final PreparedStatement ps = c2.prepareStatement("select * from d4275");
1:5a56eb0: 
1:5a56eb0:         Thread t = new Thread() {
1:5a56eb0:             public void run() {
1:5a56eb0:                 try {
1:3f5c48a:                     while (!stop.get()) {
1:5a56eb0:                         JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
1:5a56eb0:                     }
1:5a56eb0:                 } catch (Throwable t) {
1:5a56eb0:                     error[0] = t;
1:5a56eb0:                 }
1:5a56eb0:             }
1:5a56eb0:         };
1:5a56eb0: 
1:5a56eb0:         t.start();
1:5a56eb0: 
1:5a56eb0:         // Compress the table while a query is being executed against the
1:5a56eb0:         // same table to force invalidation of the running statement. Since
1:5a56eb0:         // the problem we try to reproduce is timing-dependent, do it 100
1:5a56eb0:         // times to increase the chance of hitting the bug.
1:5a56eb0:         try {
1:5a56eb0:             for (int i = 0; i < 100; i++) {
1:5a56eb0:                 s.execute(
1:5a56eb0:                     "call syscs_util.syscs_compress_table('APP', 'D4275', 1)");
1:5a56eb0:             }
1:5a56eb0:         } finally {
1:5a56eb0:             // We're done, so tell the helper thread to stop.
1:3f5c48a:             stop.set(true);
1:5a56eb0:         }
1:5a56eb0: 
1:5a56eb0:         t.join();
1:5a56eb0: 
1:5a56eb0:         // Before DERBY-4275, the helper thread used to fail with an error
1:5a56eb0:         // saying the container was not found.
1:5a56eb0:         if (error[0] != null) {
1:5a56eb0:             fail("Helper thread failed", error[0]);
1:5a56eb0:         }
1:5a56eb0: 
1:5a56eb0:         // Cleanup.
1:5a56eb0:         ps.close();
1:5a56eb0:         c2.close();
1:5a56eb0:     }
1:3082e5d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:         // The helper thread stops once the value is set to true.
1:         final AtomicBoolean stop = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
1:                     while (!stop.get()) {
/////////////////////////////////////////////////////////////////////////
1:             stop.set(true);
commit:5a56eb0
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.List;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(
1:                 TestConfiguration.embeddedSuite(CompressTableTest.class));
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test that statement invalidation works when SYSCS_COMPRESS_TABLE calls
1:      * and other statements accessing the same table execute concurrently.
1:      * DERBY-4275.
1:      */
1:     public void testConcurrentInvalidation() throws Exception {
1:         Statement s = createStatement();
1:         s.execute("create table d4275(x int)");
1:         s.execute("insert into d4275 values 1");
1: 
1:         // Object used by the main thread to tell the helper thread to stop.
0:         // The helper thread stops once the list is non-empty.
0:         final List stop = Collections.synchronizedList(new ArrayList());
1: 
1:         // Holder for anything thrown by the run() method in the helper thread.
1:         final Throwable[] error = new Throwable[1];
1: 
1:         // Set up a helper thread that executes a query against the table
1:         // until the main thread tells it to stop.
1:         Connection c2 = openDefaultConnection();
1:         final PreparedStatement ps = c2.prepareStatement("select * from d4275");
1: 
1:         Thread t = new Thread() {
1:             public void run() {
1:                 try {
0:                     while (stop.isEmpty()) {
1:                         JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
1:                     }
1:                 } catch (Throwable t) {
1:                     error[0] = t;
1:                 }
1:             }
1:         };
1: 
1:         t.start();
1: 
1:         // Compress the table while a query is being executed against the
1:         // same table to force invalidation of the running statement. Since
1:         // the problem we try to reproduce is timing-dependent, do it 100
1:         // times to increase the chance of hitting the bug.
1:         try {
1:             for (int i = 0; i < 100; i++) {
1:                 s.execute(
1:                     "call syscs_util.syscs_compress_table('APP', 'D4275', 1)");
1:             }
1:         } finally {
1:             // We're done, so tell the helper thread to stop.
0:             stop.add(Boolean.TRUE);
1:         }
1: 
1:         t.join();
1: 
1:         // Before DERBY-4275, the helper thread used to fail with an error
1:         // saying the container was not found.
1:         if (error[0] != null) {
1:             fail("Helper thread failed", error[0]);
1:         }
1: 
1:         // Cleanup.
1:         ps.close();
1:         c2.close();
1:     }
commit:3082e5d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test cases for compressing tables.
1:  */
1: public class CompressTableTest extends BaseJDBCTestCase {
1: 
1:     public CompressTableTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // compress table is an embedded feature, no need to run network tests
0:         return TestConfiguration.embeddedSuite(CompressTableTest.class);
1:     }
1: 
1:     /**
1:      * Test that SYSCS_COMPRESS_TABLE and SYSCS_INPLACE_COMPRESS_TABLE work
1:      * when the table name contains a double quote. It used to raise a syntax
1:      * error. Fixed as part of DERBY-1062.
1:      */
1:     public void testCompressTableWithDoubleQuoteInName() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("create table app.\"abc\"\"def\" (x int)");
1:         s.execute("call syscs_util.syscs_compress_table('APP','abc\"def',1)");
1:         s.execute("call syscs_util.syscs_inplace_compress_table('APP'," +
1:                   "'abc\"def', 1, 1, 1)");
1:         s.execute("drop table app.\"abc\"\"def\"");
1:     }
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f6e9c21
/////////////////////////////////////////////////////////////////////////
0: import java.sql.ResultSet;
/////////////////////////////////////////////////////////////////////////
1:     //DERBY-5750(Sending an empty string as table name to compress table 
1:     // procedure or empty string as index name to update statistics procedure 
1:     // makes the parser throw an exception.)
1:     //
1:     //No table name will result in the same exception that a user would
1:     // get when issuing the compress table sql directly without the table name
1:     // eg alter table compress sequential
1:     // Notice that the table name is missing in the compress sql above
1:     public void testCompressTableWithEmptyParamsDerby5750() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("create table DERBY5750_t1 (c11 int)");
1:         
1:         //Following 2 statements will give exception since there is no schema
1:         // named empty string
1:         assertStatementError(
1:         		"42Y07", s,
1:         		"call syscs_util.syscs_compress_table('','DERBY5750_T1',1)");
1:         assertStatementError(
1:         		"42Y07", s,
1:         		"call syscs_util.syscs_compress_table('','',1)");
1: 
1:         //null schema name will translate to current schema
1:         s.execute("call syscs_util.syscs_compress_table(null,'DERBY5750_T1',1)");
1: 
1:         //Following 2 statements will give exception since there is no table  
1:         // named empty string
1:         assertStatementError(
1:         		"42X05", s,
1:         		"call syscs_util.syscs_compress_table(null,'',1)");
1:         assertStatementError(
1:         		"42X05", s,
1:                 "call syscs_util.syscs_compress_table('APP','',1)");
1: 
1:         //Following 2 statements will give exception since table name can't 
1:         // be null
1:         assertStatementError(
1:         		"42X05", s,
1:         		"call syscs_util.syscs_compress_table(null,null,1)");
1:         assertStatementError(
1:         		"42X05", s,
1:         		"call syscs_util.syscs_compress_table('APP',null,1)");
1: 
1:         s.execute("call syscs_util.syscs_compress_table('APP','DERBY5750_T1',1)");
1:         
1:         s.execute("drop table DERBY5750_t1");    	
1:     }
1:     
============================================================================