1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.UnJar
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
16:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.io.*;
1:67614ad: 
2:67614ad: /**
1:67614ad:   The upgrade tests use jar files containing older version
1:67614ad:   databases. These need to be "unjarred" in order to do the tests.
1:67614ad:   */
1:67614ad: public class UnJar
1:67614ad: {
1:67614ad:  
1:67614ad:     public UnJar()
1:67614ad:     {
1:67614ad:     }
1:67614ad:     
1:67614ad:     public static void main(String args[]) throws Exception
1:67614ad:     {
1:67614ad:         UnJar uj = new UnJar();
1:67614ad:         uj.unjar(args[0], null, true);
1:67614ad:     }
1:67614ad:     
1:67614ad:     public static void unjar(String jarname, String outputdir, boolean useprocess)
1:67614ad:         throws ClassNotFoundException, IOException
1:67614ad:     {
1:67614ad:         if (outputdir == null)
1:67614ad:             outputdir = System.getProperty("user.dir");
1:67614ad:         
1:67614ad: 	    InputStream is =
1:67614ad:             RunTest.loadTestResource("upgrade" + '/' + jarname);
1:67614ad:         if (is == null)
1:67614ad:         {
1:67614ad:             System.out.println("File not found: " + jarname);
1:67614ad:             System.exit(1);
1:67614ad:         }
1:67614ad:         
1:67614ad:         // Copy to the current directory in order to unjar it
1:67614ad:         //System.out.println("Copy the jarfile to: " + outputdir);
1:67614ad:         File jarFile = new File((new File(outputdir, jarname)).getCanonicalPath());
1:67614ad:         //System.out.println("jarFile: " + jarFile.getPath());
1:67614ad:     	FileOutputStream fos = new FileOutputStream(jarFile);
1:67614ad:         byte[] data = new byte[1024];
1:67614ad:         int len;
1:67614ad:     	while ((len = is.read(data)) != -1)
1:67614ad:     	{
1:67614ad:     	    fos.write(data, 0, len);
1:67614ad:     	}
1:67614ad:     	fos.close();
1:67614ad:         
1:67614ad:         // Now unjar the file
1:67614ad:         String jarCmd = "jar xf " + jarFile.getPath();
1:67614ad:         if ( useprocess == true )
1:67614ad:         {
1:67614ad:             // Now execute the jar command
1:67614ad:             Process pr = null;
1:67614ad:         	try
1:67614ad:         	{
1:67614ad:         		//System.out.println("Use process to execute: " + jarCmd);
1:67614ad:                 pr = Runtime.getRuntime().exec(jarCmd);
1:67614ad:                 
1:67614ad:                 pr.waitFor();
1:67614ad:                 //System.out.println("Process done.");
1:67614ad:                 pr.destroy();
1:67614ad:             }
1:67614ad:             catch(Throwable t)
1:67614ad:             {
1:67614ad:                 System.out.println("Process exception: " + t.getMessage());
1:67614ad:                 if (pr != null)
1:67614ad:                 {
1:67614ad:                     pr.destroy();
1:67614ad:                     pr = null;
1:67614ad:                 }
1:67614ad:             }
1:67614ad:         }
1:67614ad:         else
1:67614ad:         {
1:67614ad:             System.out.println("Jar not implemented yet with useprocess=false");
1:67614ad:         }
1:67614ad:     }
1:67614ad: }
1:67614ad: 		
1:67614ad: 			
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.*;
1: 
1: /**
1:   The upgrade tests use jar files containing older version
1:   databases. These need to be "unjarred" in order to do the tests.
1:   */
1: public class UnJar
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:  
1:     public UnJar()
1:     {
1:     }
1:     
1:     public static void main(String args[]) throws Exception
1:     {
1:         UnJar uj = new UnJar();
1:         uj.unjar(args[0], null, true);
1:     }
1:     
1:     public static void unjar(String jarname, String outputdir, boolean useprocess)
1:         throws ClassNotFoundException, IOException
1:     {
1:         if (outputdir == null)
1:             outputdir = System.getProperty("user.dir");
1:         
1: 	    InputStream is =
1:             RunTest.loadTestResource("upgrade" + '/' + jarname);
1:         if (is == null)
1:         {
1:             System.out.println("File not found: " + jarname);
1:             System.exit(1);
1:         }
1:         
1:         // Copy to the current directory in order to unjar it
1:         //System.out.println("Copy the jarfile to: " + outputdir);
1:         File jarFile = new File((new File(outputdir, jarname)).getCanonicalPath());
1:         //System.out.println("jarFile: " + jarFile.getPath());
1:     	FileOutputStream fos = new FileOutputStream(jarFile);
1:         byte[] data = new byte[1024];
1:         int len;
1:     	while ((len = is.read(data)) != -1)
1:     	{
1:     	    fos.write(data, 0, len);
1:     	}
1:     	fos.close();
1:         
1:         // Now unjar the file
1:         String jarCmd = "jar xf " + jarFile.getPath();
1:         if ( useprocess == true )
1:         {
1:             // Now execute the jar command
1:             Process pr = null;
1:         	try
1:         	{
1:         		//System.out.println("Use process to execute: " + jarCmd);
1:                 pr = Runtime.getRuntime().exec(jarCmd);
1:                 
1:                 pr.waitFor();
1:                 //System.out.println("Process done.");
1:                 pr.destroy();
1:             }
1:             catch(Throwable t)
1:             {
1:                 System.out.println("Process exception: " + t.getMessage());
1:                 if (pr != null)
1:                 {
1:                     pr.destroy();
1:                     pr = null;
1:                 }
1:             }
1:         }
1:         else
1:         {
1:             System.out.println("Jar not implemented yet with useprocess=false");
1:         }
1:     }
1: }
1: 		
1: 			
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.UnJar
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.io.*;
1: 
0: /**
0:   The upgrade tests use jar files containing older version
0:   databases. These need to be "unjarred" in order to do the tests.
0:   */
0: public class UnJar
0: {
1:  
0:     public UnJar()
0:     {
0:     }
1:     
0:     public static void main(String args[]) throws Exception
0:     {
0:         UnJar uj = new UnJar();
0:         uj.unjar(args[0], null, true);
0:     }
1:     
0:     public static void unjar(String jarname, String outputdir, boolean useprocess)
0:         throws ClassNotFoundException, IOException
0:     {
0:         if (outputdir == null)
0:             outputdir = System.getProperty("user.dir");
1:         
0: 	    InputStream is =
0:             RunTest.loadTestResource("upgrade" + '/' + jarname);
0:         if (is == null)
0:         {
0:             System.out.println("File not found: " + jarname);
0:             System.exit(1);
0:         }
1:         
0:         // Copy to the current directory in order to unjar it
0:         //System.out.println("Copy the jarfile to: " + outputdir);
0:         File jarFile = new File((new File(outputdir, jarname)).getCanonicalPath());
0:         //System.out.println("jarFile: " + jarFile.getPath());
0:     	FileOutputStream fos = new FileOutputStream(jarFile);
0:         byte[] data = new byte[1024];
0:         int len;
0:     	while ((len = is.read(data)) != -1)
0:     	{
0:     	    fos.write(data, 0, len);
0:     	}
0:     	fos.close();
1:         
0:         // Now unjar the file
0:         String jarCmd = "jar xf " + jarFile.getPath();
0:         if ( useprocess == true )
0:         {
0:             // Now execute the jar command
0:             Process pr = null;
0:         	try
0:         	{
0:         		//System.out.println("Use process to execute: " + jarCmd);
0:                 pr = Runtime.getRuntime().exec(jarCmd);
1:                 
0:                 pr.waitFor();
0:                 //System.out.println("Process done.");
0:                 pr.destroy();
0:             }
0:             catch(Throwable t)
0:             {
0:                 System.out.println("Process exception: " + t.getMessage());
0:                 if (pr != null)
0:                 {
0:                     pr.destroy();
0:                     pr = null;
0:                 }
0:             }
0:         }
0:         else
0:         {
0:             System.out.println("Jar not implemented yet with useprocess=false");
0:         }
0:     }
0: }
1: 		
1: 			
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.UnJar
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================