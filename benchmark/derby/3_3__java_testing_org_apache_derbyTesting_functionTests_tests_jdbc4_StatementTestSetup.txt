1:64e1768: /*
2:64e1768:  *
1:64e1768:  * Derby - Class StatementTestSetup
1:64e1768:  *
1:6e3dbab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:  * contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:  * this work for additional information regarding copyright ownership.
1:6e3dbab:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:  * (the "License"); you may not use this file except in compliance with
1:6e3dbab:  * the License.  You may obtain a copy of the License at
1:64e1768:  *
1:64e1768:  *    http://www.apache.org/licenses/LICENSE-2.0
1:64e1768:  *
1:64e1768:  * Unless required by applicable law or agreed to in writing, 
1:64e1768:  * software distributed under the License is distributed on an 
1:64e1768:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:64e1768:  * either express or implied. See the License for the specific 
1:64e1768:  * language governing permissions and limitations under the License.
1:64e1768:  */
1:64e1768: 
1:64e1768: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:64e1768: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:13e9e78: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:64e1768: 
1:64e1768: import junit.framework.Test;
1:64e1768: import junit.extensions.TestSetup;
1:64e1768: 
1:64e1768: import java.sql.*;
1:64e1768: 
1:64e1768: /**
1:64e1768:  *  Create the table necessary for running {@link StatementTest}.
1:64e1768:  *
1:64e1768:  *  @see StatementTest
1:64e1768:  */
1:64e1768: public class StatementTestSetup 
1:13e9e78:     extends BaseJDBCTestSetup {
1:64e1768: 
1:64e1768:     /**
1:64e1768:      * Initialize database schema.
1:64e1768:      * Uses the framework specified by the test harness.
1:64e1768:      *
1:64e1768:      * @see StatementTest
1:64e1768:      */
1:64e1768:     public StatementTestSetup(Test test) {
1:64e1768:         super(test);
1:64e1768:     }
1:64e1768: 
1:64e1768:     /**
1:64e1768:      * Create the table and data needed for the test.
1:64e1768:      *
1:64e1768:      * @throws SQLException if database operations fail.
1:64e1768:      *
1:64e1768:      * @see StatementTest
1:64e1768:      */
1:13e9e78:     protected void setUp()
2:64e1768:         throws SQLException {
1:13e9e78:         Connection con = getConnection();
1:64e1768:         // Create tables used by the test.
1:64e1768:         Statement stmt = con.createStatement();
1:64e1768:         // See if the table is already there, and if so, delete it.
1:64e1768:         try {
1:64e1768:             stmt.execute("select count(*) from stmtTable");
1:64e1768:             // Only get here is the table already exists.
1:64e1768:             stmt.execute("drop table stmtTable");
1:64e1768:         } catch (SQLException sqle) {
1:64e1768:             // Table does not exist, so we can go ahead and create it.
1:64e1768:             assertEquals("Unexpected error when accessing non-existing table.",
1:64e1768:                     "42X05",
1:64e1768:                     sqle.getSQLState());
1:64e1768:         }
1:4eb3fed: 
1:4eb3fed:         try {
1:4eb3fed:             stmt.execute("drop function delay_st");
1:4eb3fed:         }
1:4eb3fed:         catch (SQLException se)
1:4eb3fed:         {
1:4eb3fed:             // ignore object does not exist error
1:4eb3fed:             assertEquals( "42Y55", se.getSQLState() );
1:4eb3fed:         }
1:64e1768:         stmt.execute("create table stmtTable (id int, val varchar(10))");
1:64e1768:         stmt.execute("insert into stmtTable values (1, 'one'),(2,'two')");
1:64e1768:         // Check just to be sure, and to notify developers if the database
1:64e1768:         // contents are changed at a later time.
1:64e1768:         ResultSet rs = stmt.executeQuery("select count(*) from stmtTable");
1:64e1768:         rs.next();
1:64e1768:         assertEquals("Number of rows are not as expected", 
1:64e1768:                 2, rs.getInt(1));
1:64e1768:         rs.close();
1:4eb3fed:         stmt.execute
1:4eb3fed:             (
1:4eb3fed:              "create function delay_st(seconds integer, value integer) returns integer\n" +
1:4eb3fed:              "parameter style java no sql language java\n" +
1:4eb3fed:              "external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.delay'"
1:4eb3fed:              );
1:64e1768:         stmt.close();
1:64e1768:         con.commit();
1:64e1768:     }
1:64e1768: 
1:64e1768:     /**
1:64e1768:      * Clean up after the tests.
1:64e1768:      * Deletes the table that was created for the tests.
1:64e1768:      *
1:64e1768:      * @throws SQLException if database operations fail.
1:64e1768:      */
1:13e9e78:     protected void tearDown() 
1:13e9e78:         throws Exception {
1:13e9e78:         Connection con = getConnection();
1:64e1768:         Statement stmt = con.createStatement();
1:64e1768:         stmt.execute("drop table stmtTable");
1:64e1768:         stmt.close();
1:64e1768:         con.commit();
1:13e9e78:         super.tearDown();
1:64e1768:     }
1:64e1768:    
1:64e1768: } // End class StatementTestSetup
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4eb3fed
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             stmt.execute("drop function delay_st");
1:         }
1:         catch (SQLException se)
1:         {
1:             // ignore object does not exist error
1:             assertEquals( "42Y55", se.getSQLState() );
1:         }
/////////////////////////////////////////////////////////////////////////
1:         stmt.execute
1:             (
1:              "create function delay_st(seconds integer, value integer) returns integer\n" +
1:              "parameter style java no sql language java\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.delay'"
1:              );
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     extends BaseJDBCTestSetup {
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp()
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() 
1:         throws Exception {
1:         Connection con = getConnection();
1:         super.tearDown();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:64e1768
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class StatementTestSetup
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: import junit.framework.Test;
1: import junit.extensions.TestSetup;
1: 
1: import java.sql.*;
1: 
1: /**
1:  *  Create the table necessary for running {@link StatementTest}.
1:  *
1:  *  @see StatementTest
1:  */
1: public class StatementTestSetup 
0:     extends TestSetup {
1: 
1:     /**
1:      * Initialize database schema.
1:      * Uses the framework specified by the test harness.
1:      *
1:      * @see StatementTest
1:      */
1:     public StatementTestSetup(Test test) {
1:         super(test);
1:     }
1: 
1:     /**
1:      * Create the table and data needed for the test.
1:      *
1:      * @throws SQLException if database operations fail.
1:      *
1:      * @see StatementTest
1:      */
0:     public void setUp()
1:         throws SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         // Create tables used by the test.
1:         Statement stmt = con.createStatement();
1:         // See if the table is already there, and if so, delete it.
1:         try {
1:             stmt.execute("select count(*) from stmtTable");
1:             // Only get here is the table already exists.
1:             stmt.execute("drop table stmtTable");
1:         } catch (SQLException sqle) {
1:             // Table does not exist, so we can go ahead and create it.
1:             assertEquals("Unexpected error when accessing non-existing table.",
1:                     "42X05",
1:                     sqle.getSQLState());
1:         }
1:         stmt.execute("create table stmtTable (id int, val varchar(10))");
1:         stmt.execute("insert into stmtTable values (1, 'one'),(2,'two')");
1:         // Check just to be sure, and to notify developers if the database
1:         // contents are changed at a later time.
1:         ResultSet rs = stmt.executeQuery("select count(*) from stmtTable");
1:         rs.next();
1:         assertEquals("Number of rows are not as expected", 
1:                 2, rs.getInt(1));
1:         rs.close();
1:         stmt.close();
1:         con.commit();
0:         con.close();
1:     }
1: 
1:     /**
1:      * Clean up after the tests.
1:      * Deletes the table that was created for the tests.
1:      *
1:      * @throws SQLException if database operations fail.
1:      */
0:     public void tearDown() 
1:         throws SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         Statement stmt = con.createStatement();
1:         stmt.execute("drop table stmtTable");
1:         stmt.close();
1:         con.commit();
0:         con.close();
1:     }
1:    
1: } // End class StatementTestSetup
============================================================================