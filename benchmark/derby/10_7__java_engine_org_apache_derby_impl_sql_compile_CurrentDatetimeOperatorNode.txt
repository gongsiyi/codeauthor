1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
12:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:3bb140c: import org.apache.derby.iapi.store.access.Qualifier;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * The CurrentDatetimeOperator operator is for the builtin CURRENT_DATE,
1:eac0369:  * CURRENT_TIME, and CURRENT_TIMESTAMP operations.
2:eac0369:  *
1:eac0369:  */
1:3bb140c: class CurrentDatetimeOperatorNode extends ValueNode {
1:eac0369: 
1:3bb140c:     static final int CURRENT_DATE = 0;
1:3bb140c:     static final int CURRENT_TIME = 1;
1:3bb140c:     static final int CURRENT_TIMESTAMP = 2;
1:eac0369: 
1:eac0369: 	static private final int jdbcTypeId[] = { 
1:eac0369: 		Types.DATE, 
1:eac0369: 		Types.TIME,
1:eac0369: 		Types.TIMESTAMP
1:eac0369: 	};
1:eac0369: 	static private final String methodName[] = { // used in toString only
1:eac0369: 		"CURRENT DATE",
1:eac0369: 		"CURRENT TIME",
1:eac0369: 		"CURRENT TIMSTAMP"
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	private int whichType;
1:eac0369: 
1:3bb140c:     CurrentDatetimeOperatorNode(int whichType, ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.whichType = whichType;
1:eac0369: 
1:3bb140c:         if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(this.whichType >= 0 && this.whichType <= 2);
1:3bb140c:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// QueryTreeNode interface
1:eac0369: 	//
1:eac0369: 
1:2706d1f: 	/**
1:eac0369: 	 * Binding this expression means setting the result DataTypeServices.
1:eac0369: 	 * In this case, the result type is based on the operation requested.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The FROM list for the statement.  This parameter
1:eac0369: 	 *							is not used in this case.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find 
1:eac0369: 	 *							SubqueryNodes. Not used in this case.
1:09c2697:      * @param aggregates        The aggregate list being built as we find
1:eac0369: 	 *							AggregateNodes. Not used in this case.
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:01217c2: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode bindExpression(FromList fromList,
1:3bb140c:                              SubqueryList subqueryList,
1:3bb140c:                              List<AggregateNode> aggregates)
1:3bb140c:             throws StandardException
1:01217c2: 	{
1:eac0369: 		checkReliability( methodName[whichType], CompilerContext.DATETIME_ILLEGAL );
1:eac0369: 
1:eac0369: 		setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(
1:eac0369: 						jdbcTypeId[whichType],
1:eac0369: 						false		/* Not nullable */
1:eac0369: 					)
1:eac0369: 				);
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *							  (constant expressions)
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType()
2:eac0369: 	{
1:eac0369: 		// CurrentDate, Time, Timestamp are invariant for the life of the query
1:eac0369: 		return Qualifier.QUERY_INVARIANT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * CurrentDatetimeOperatorNode is used in expressions.
1:eac0369: 	 * The expression generated for it invokes a static method
1:94f158a: 	 * on a special Derby type to get the system time and
1:eac0369: 	 * wrap it in the right java.sql type, and then wrap it
1:eac0369: 	 * into the right shape for an arbitrary value, i.e. a column
1:eac0369: 	 * holder. This is very similar to what constants do.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
2:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** First, we generate the current expression to be stuffed into
1:eac0369: 		** the right shape of holder.
1:eac0369: 		*/
1:eac0369: 		switch (whichType) {
1:eac0369: 			case CURRENT_DATE: 
1:eac0369: 				acb.getCurrentDateExpression(mb);
1:eac0369: 				break;
1:eac0369: 			case CURRENT_TIME: 
1:eac0369: 				acb.getCurrentTimeExpression(mb);
1:eac0369: 				break;
1:eac0369: 			case CURRENT_TIMESTAMP: 
1:eac0369: 				acb.getCurrentTimestampExpression(mb);
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 
1:ba7683c: 		acb.generateDataValue(mb, getTypeCompiler(), 
1:ba7683c: 				getTypeServices().getCollationType(), (LocalField)null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 		print the non-node subfields
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString() {
2:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:c9a1206: 			return "methodName: " + methodName[whichType] + "\n" +
1:c9a1206: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:01217c2:         
1:01217c2:     /**
1:2706d1f:      * {@inheritDoc}
1:2706d1f:      */
1:2706d1f:     boolean isEquivalent(ValueNode o)
1:01217c2: 	{
1:2706d1f:         if (isSameNodeKind(o)) {
1:01217c2: 			CurrentDatetimeOperatorNode other = (CurrentDatetimeOperatorNode)o;
1:01217c2: 			return other.whichType == whichType;
1:01217c2: 		}
1:2706d1f: 
1:01217c2: 		return false;
1:01217c2: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * {@inheritDoc}
1:      */
1:     boolean isEquivalent(ValueNode o)
1:         if (isSameNodeKind(o)) {
1: 
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: class CurrentDatetimeOperatorNode extends ValueNode {
1:     static final int CURRENT_DATE = 0;
1:     static final int CURRENT_TIME = 1;
1:     static final int CURRENT_TIMESTAMP = 2;
/////////////////////////////////////////////////////////////////////////
1:     CurrentDatetimeOperatorNode(int whichType, ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE);
1:         this.whichType = whichType;
1:         if (SanityManager.DEBUG) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode bindExpression(FromList fromList,
1:                              SubqueryList subqueryList,
1:                              List<AggregateNode> aggregates)
1:             throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 			return "methodName: " + methodName[whichType] + "\n" +
1: 				super.toString();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find
0:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 							List aggregateVector)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateDataValue(mb, getTypeCompiler(), 
1: 				getTypeServices().getCollationType(), (LocalField)null);
commit:8567c35
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		acb.generateDataValue(mb, getTypeCompiler(), (LocalField)null);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	 * on a special Derby type to get the system time and
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:         
1:         /**
0:          * {@inheritDoc}
1:          */
0: 	protected boolean isEquivalent(ValueNode o)
1: 	{
0: 		if (isSameNodeType(o)) 
1: 		{
1: 			CurrentDatetimeOperatorNode other = (CurrentDatetimeOperatorNode)o;
1: 			return other.whichType == whichType;
1: 		}
1: 		return false;
1: 	}
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import java.lang.reflect.Modifier;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * The CurrentDatetimeOperator operator is for the builtin CURRENT_DATE,
1:  * CURRENT_TIME, and CURRENT_TIMESTAMP operations.
1:  *
0:  * @author ames
1:  */
0: public class CurrentDatetimeOperatorNode extends ValueNode {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	public static final int CURRENT_DATE = 0;
0: 	public static final int CURRENT_TIME = 1;
0: 	public static final int CURRENT_TIMESTAMP = 2;
1: 
1: 	static private final int jdbcTypeId[] = { 
1: 		Types.DATE, 
1: 		Types.TIME,
1: 		Types.TIMESTAMP
1: 	};
1: 	static private final String methodName[] = { // used in toString only
1: 		"CURRENT DATE",
1: 		"CURRENT TIME",
1: 		"CURRENT TIMSTAMP"
1: 	};
1: 
1: 	private int whichType;
1: 
0: 	public void init(Object whichType) {
0: 		this.whichType = ((Integer) whichType).intValue();
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(this.whichType >= 0 && this.whichType <= 2);
1: 	}
1: 
1: 	//
1: 	// QueryTreeNode interface
1: 	//
1: 
1: 	/**
1: 	 * Binding this expression means setting the result DataTypeServices.
1: 	 * In this case, the result type is based on the operation requested.
1: 	 *
1: 	 * @param fromList			The FROM list for the statement.  This parameter
1: 	 *							is not used in this case.
1: 	 * @param subqueryList		The subquery list being built as we find 
1: 	 *							SubqueryNodes. Not used in this case.
0: 	 * @param aggregateVector	The aggregate vector being built as we find 
1: 	 *							AggregateNodes. Not used in this case.
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 							Vector	aggregateVector)
1: 					throws StandardException
1: 	{
1: 		checkReliability( methodName[whichType], CompilerContext.DATETIME_ILLEGAL );
1: 
1: 		setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(
1: 						jdbcTypeId[whichType],
1: 						false		/* Not nullable */
1: 					)
1: 				);
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *							  (constant expressions)
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 */
1: 	protected int getOrderableVariantType()
1: 	{
1: 		// CurrentDate, Time, Timestamp are invariant for the life of the query
1: 		return Qualifier.QUERY_INVARIANT;
1: 	}
1: 
1: 	/**
1: 	 * CurrentDatetimeOperatorNode is used in expressions.
1: 	 * The expression generated for it invokes a static method
0: 	 * on a special Cloudscape type to get the system time and
1: 	 * wrap it in the right java.sql type, and then wrap it
1: 	 * into the right shape for an arbitrary value, i.e. a column
1: 	 * holder. This is very similar to what constants do.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
0: 	 * @return		The compiled Expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
0: 		acb.pushDataValueFactory(mb);
1: 
1: 		/*
1: 		** First, we generate the current expression to be stuffed into
1: 		** the right shape of holder.
1: 		*/
1: 		switch (whichType) {
1: 			case CURRENT_DATE: 
1: 				acb.getCurrentDateExpression(mb);
1: 				break;
1: 			case CURRENT_TIME: 
1: 				acb.getCurrentTimeExpression(mb);
1: 				break;
1: 			case CURRENT_TIMESTAMP: 
1: 				acb.getCurrentTimestampExpression(mb);
1: 				break;
1: 		}
1: 
0: 		String fieldType = getTypeCompiler().interfaceName();
0: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, fieldType);
0: 		getTypeCompiler().generateDataValue(mb, field);
1: 	}
1: 
1: 	/*
1: 		print the non-node subfields
1: 	 */
1: 	public String toString() {
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return super.toString()+"method = "+methodName[whichType]+"\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * The CurrentDatetimeOperator operator is for the builtin CURRENT_DATE,
0:  * CURRENT_TIME, and CURRENT_TIMESTAMP operations.
0:  *
0:  * @author ames
0:  */
0: public class CurrentDatetimeOperatorNode extends ValueNode {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	public static final int CURRENT_DATE = 0;
0: 	public static final int CURRENT_TIME = 1;
0: 	public static final int CURRENT_TIMESTAMP = 2;
0: 
0: 	static private final int jdbcTypeId[] = { 
0: 		Types.DATE, 
0: 		Types.TIME,
0: 		Types.TIMESTAMP
0: 	};
0: 	static private final String methodName[] = { // used in toString only
0: 		"CURRENT DATE",
0: 		"CURRENT TIME",
0: 		"CURRENT TIMSTAMP"
0: 	};
0: 
0: 	private int whichType;
0: 
0: 	public void init(Object whichType) {
0: 		this.whichType = ((Integer) whichType).intValue();
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(this.whichType >= 0 && this.whichType <= 2);
0: 	}
0: 
0: 	//
0: 	// QueryTreeNode interface
0: 	//
0: 
0: 	/**
0: 	 * Binding this expression means setting the result DataTypeServices.
0: 	 * In this case, the result type is based on the operation requested.
0: 	 *
0: 	 * @param fromList			The FROM list for the statement.  This parameter
0: 	 *							is not used in this case.
0: 	 * @param subqueryList		The subquery list being built as we find 
0: 	 *							SubqueryNodes. Not used in this case.
0: 	 * @param aggregateVector	The aggregate vector being built as we find 
0: 	 *							AggregateNodes. Not used in this case.
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 							Vector	aggregateVector)
0: 					throws StandardException
0: 	{
0: 		checkReliability( methodName[whichType], CompilerContext.DATETIME_ILLEGAL );
0: 
0: 		setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(
0: 						jdbcTypeId[whichType],
0: 						false		/* Not nullable */
0: 					)
0: 				);
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *							  (constant expressions)
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 */
0: 	protected int getOrderableVariantType()
0: 	{
0: 		// CurrentDate, Time, Timestamp are invariant for the life of the query
0: 		return Qualifier.QUERY_INVARIANT;
0: 	}
0: 
0: 	/**
0: 	 * CurrentDatetimeOperatorNode is used in expressions.
0: 	 * The expression generated for it invokes a static method
0: 	 * on a special Cloudscape type to get the system time and
0: 	 * wrap it in the right java.sql type, and then wrap it
0: 	 * into the right shape for an arbitrary value, i.e. a column
0: 	 * holder. This is very similar to what constants do.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 * @return		The compiled Expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		acb.pushDataValueFactory(mb);
0: 
0: 		/*
0: 		** First, we generate the current expression to be stuffed into
0: 		** the right shape of holder.
0: 		*/
0: 		switch (whichType) {
0: 			case CURRENT_DATE: 
0: 				acb.getCurrentDateExpression(mb);
0: 				break;
0: 			case CURRENT_TIME: 
0: 				acb.getCurrentTimeExpression(mb);
0: 				break;
0: 			case CURRENT_TIMESTAMP: 
0: 				acb.getCurrentTimestampExpression(mb);
0: 				break;
0: 		}
0: 
0: 		String fieldType = getTypeCompiler().interfaceName();
0: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, fieldType);
0: 		getTypeCompiler().generateDataValue(mb, field);
0: 	}
0: 
0: 	/*
0: 		print the non-node subfields
0: 	 */
0: 	public String toString() {
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString()+"method = "+methodName[whichType]+"\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================