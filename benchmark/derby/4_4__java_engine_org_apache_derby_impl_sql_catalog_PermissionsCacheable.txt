1:b7730e4: /*
3:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.catalog.PermissionsCacheable
1:b7730e4: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.catalog;
1:b7730e4: 
1:98c7520: import org.apache.derby.catalog.UUID;
1:98c7520: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.services.cache.Cacheable;
1:b7730e4: import org.apache.derby.iapi.services.cache.CacheManager;
1:b7730e4: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.sql.conn.Authorizer;
1:b7730e4: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1:b7730e4: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: 
1:b7730e4: /**
1:b7730e4:  * This class implements a Cacheable for a DataDictionary cache of
1:b7730e4:  * permissions.
1:b7730e4:  */
1:b7730e4: class PermissionsCacheable implements Cacheable
1:b7730e4: {
1:b7730e4: 	protected final DataDictionaryImpl dd;
1:b7730e4: 	private PermissionsDescriptor permissions;
1:b7730e4: 	
1:b7730e4: 	PermissionsCacheable(DataDictionaryImpl dd)
1:b7730e4: 	{
1:b7730e4: 		this.dd = dd;
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	/* Cacheable interface */
1:b7730e4: 	public Cacheable setIdentity(Object key) throws StandardException
1:b7730e4: 	{
1:b7730e4: 		// If the user does not have permission then cache an empty (no permission) descriptor in
1:b7730e4: 		// case the same user asks again. That is particularly important for table permission because
1:b7730e4: 		// we ask about table permission before column permissions. If a user has permission to use a
1:b7730e4: 		// proper subset of the columns we will still ask about table permission every time he tries
1:b7730e4: 		// to access that column subset.
1:b7730e4: 		if( key instanceof TablePermsDescriptor)
1:b7730e4: 		{
1:b7730e4: 			TablePermsDescriptor tablePermsKey = (TablePermsDescriptor) key;
1:b7730e4: 			permissions = dd.getUncachedTablePermsDescriptor( tablePermsKey);
1:b7730e4: 			if( permissions == null)
1:b7730e4: 			{
1:b7730e4: 				// The owner has all privileges unless they have been revoked.
1:b7730e4: 				TableDescriptor td = dd.getTableDescriptor( tablePermsKey.getTableUUID());
1:b7730e4: 				SchemaDescriptor sd = td.getSchemaDescriptor();
1:b7730e4: 				if( sd.isSystemSchema())
1:58806b9:                 {
1:b7730e4: 					// RESOLVE The access to system tables is hard coded to SELECT only to everyone.
1:b7730e4: 					// Is this the way we want Derby to work? Should we allow revocation of read access
1:b7730e4: 					// to system tables? If so we must explicitly add a row to the SYS.SYSTABLEPERMISSIONS
1:b7730e4: 					// table for each system table when a database is created.
1:b7730e4: 					permissions = new TablePermsDescriptor( dd,
1:b7730e4: 															tablePermsKey.getGrantee(),
1:b7730e4: 															(String) null,
1:b7730e4: 															tablePermsKey.getTableUUID(),
1:b7730e4: 															"Y", "N", "N", "N", "N", "N");
1:58806b9:                     // give the permission the same UUID as the system table
1:58806b9:                     ((TablePermsDescriptor) permissions).setUUID( tablePermsKey.getTableUUID() );
1:58806b9:                 }
1:b7730e4: 				else if( tablePermsKey.getGrantee().equals( sd.getAuthorizationId()))
1:58806b9:                 {
1:b7730e4: 					permissions = new TablePermsDescriptor( dd,
1:b7730e4: 															tablePermsKey.getGrantee(),
1:b7730e4: 															Authorizer.SYSTEM_AUTHORIZATION_ID,
1:b7730e4: 															tablePermsKey.getTableUUID(),
1:b7730e4: 															"Y", "Y", "Y", "Y", "Y", "Y");
1:58806b9:                 }
1:b7730e4: 				else
1:58806b9:                 {
1:b7730e4: 					permissions = new TablePermsDescriptor( dd,
1:b7730e4: 															tablePermsKey.getGrantee(),
1:b7730e4: 															(String) null,
1:b7730e4: 															tablePermsKey.getTableUUID(),
1:b7730e4: 															"N", "N", "N", "N", "N", "N");
1:58806b9:                 }
1:b7730e4: 			}
1:b7730e4: 		}
1:b7730e4: 		else if( key instanceof ColPermsDescriptor)
1:b7730e4: 		{
1:b7730e4: 			ColPermsDescriptor colPermsKey = (ColPermsDescriptor) key;
1:b7730e4: 			permissions = dd.getUncachedColPermsDescriptor(colPermsKey );
1:b7730e4: 			if( permissions == null)
1:b7730e4: 				permissions = new ColPermsDescriptor( dd,
1:b7730e4: 													  colPermsKey.getGrantee(),
1:b7730e4: 													  (String) null,
1:b7730e4: 													  colPermsKey.getTableUUID(),
1:b7730e4: 													  colPermsKey.getType(),
1:b7730e4: 													  (FormatableBitSet) null);
1:b7730e4: 		}
1:b7730e4: 		else if( key instanceof RoutinePermsDescriptor)
1:b7730e4: 		{
1:b7730e4: 			RoutinePermsDescriptor routinePermsKey = (RoutinePermsDescriptor) key;
1:b7730e4: 			permissions = dd.getUncachedRoutinePermsDescriptor( routinePermsKey);
1:b7730e4: 			if( permissions == null)
1:b7730e4: 			{
1:b7730e4: 				// The owner has all privileges unless they have been revoked.
1:b7730e4: 				try
1:b7730e4: 				{
1:b7730e4: 					AliasDescriptor ad = dd.getAliasDescriptor( routinePermsKey.getRoutineUUID());
1:b7730e4: 					SchemaDescriptor sd = dd.getSchemaDescriptor( ad.getSchemaUUID(),
1:70a12d9: 											  ConnectionUtil.getCurrentLCC().getTransactionExecute());
1:d78ad2e: 					if (sd.isSystemSchema() && !sd.isSchemaWithGrantableRoutines())
1:70a12d9: 						permissions = new RoutinePermsDescriptor( dd,
1:70a12d9: 																  routinePermsKey.getGrantee(),
1:70a12d9:                                                                   (String) null,
1:70a12d9: 																  routinePermsKey.getRoutineUUID(),
1:70a12d9: 																  true);
1:70a12d9: 					else if( routinePermsKey.getGrantee().equals( sd.getAuthorizationId()))
1:b7730e4: 						permissions = new RoutinePermsDescriptor( dd,
1:b7730e4: 																  routinePermsKey.getGrantee(),
1:b7730e4: 																  Authorizer.SYSTEM_AUTHORIZATION_ID,
1:b7730e4: 																  routinePermsKey.getRoutineUUID(),
1:c45f5b1: 																  true);
1:b7730e4: 				}
1:b7730e4: 				catch( java.sql.SQLException sqle)
1:b7730e4: 				{
1:b7730e4: 					throw StandardException.plainWrapException( sqle);
1:b7730e4: 				}
1:b7730e4: 			}
1:b7730e4: 		}
1:98c7520: 		else if( key instanceof PermDescriptor)
1:98c7520: 		{
1:98c7520: 			PermDescriptor permKey = (PermDescriptor) key;
1:98c7520: 			permissions = dd.getUncachedGenericPermDescriptor( permKey);
1:98c7520: 			if( permissions == null)
1:98c7520: 			{
1:98c7520: 				// The owner has all privileges unless they have been revoked.
1:98c7520:                 String objectType = permKey.getObjectType();
1:98c7520:                 String privilege = permKey.getPermission();
1:98c7520:                 UUID protectedObjectsID = permKey.getPermObjectId();
1:98c7520:                 
1:98c7520:                 
1:98c7520:                 PrivilegedSQLObject pso = PermDescriptor.getProtectedObject( dd, protectedObjectsID, objectType );
1:98c7520:                 SchemaDescriptor sd = pso.getSchemaDescriptor();
1:98c7520:                 if( permKey.getGrantee().equals( sd.getAuthorizationId()))
1:98c7520:                 {
1:98c7520:                     permissions = new PermDescriptor
1:98c7520:                         (
1:98c7520:                          dd,
1:98c7520:                          null,
1:98c7520:                          objectType,
1:98c7520:                          pso.getUUID(),
1:98c7520:                          privilege,
1:98c7520:                          Authorizer.SYSTEM_AUTHORIZATION_ID,
1:98c7520:                          permKey.getGrantee(),
1:98c7520:                          true
1:98c7520:                          );
1:98c7520:                 }
1:98c7520: 			}
1:98c7520: 		}
1:b7730e4: 		else
1:b7730e4: 		{
1:b7730e4: 			if( SanityManager.DEBUG)
1:b7730e4: 				SanityManager.NOTREACHED();
1:b7730e4: 			return null;
1:b7730e4: 		}
1:98c7520: 		if( permissions != null) { return this; }
1:98c7520:     
1:b7730e4: 		return null;
1:b7730e4: 	} // end of setIdentity
1:b7730e4: 
1:b7730e4: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException
1:b7730e4: 	{
1:b7730e4: 		if (SanityManager.DEBUG)
1:b7730e4: 		{
1:b7730e4: 			SanityManager.ASSERT( (key instanceof TablePermsDescriptor) ||
1:b7730e4: 								  (key instanceof ColPermsDescriptor) ||
1:b7730e4: 								  (key instanceof RoutinePermsDescriptor),
1:b7730e4: 								  "Invalid class, " + key.getClass().getName()
1:b7730e4: 								  + ", passed as key to PermissionsCacheable.createIdentity");
1:b7730e4: 		}
1:b7730e4: 		if( key == null)
1:b7730e4: 			return null;
1:b7730e4: 		permissions = (PermissionsDescriptor) ((PermissionsDescriptor)key).clone();
2:b7730e4: 		return this;
1:b7730e4: 	} // end of createIdentity
1:b7730e4: 
1:b7730e4: 	public void clearIdentity()
1:b7730e4: 	{
1:b7730e4: 		permissions = null;
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public Object getIdentity()
1:b7730e4: 	{
1:b7730e4: 		return permissions;
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public boolean isDirty()
1:b7730e4: 	{
1:b7730e4: 		return false;
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public void clean(boolean forRemove) throws StandardException
1:b7730e4: 	{
1:b7730e4: 	}
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:58806b9
/////////////////////////////////////////////////////////////////////////
1:                 {
/////////////////////////////////////////////////////////////////////////
1:                     // give the permission the same UUID as the system table
1:                     ((TablePermsDescriptor) permissions).setUUID( tablePermsKey.getTableUUID() );
1:                 }
1:                 {
1:                 }
1:                 {
1:                 }
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
/////////////////////////////////////////////////////////////////////////
1: 		else if( key instanceof PermDescriptor)
1: 		{
1: 			PermDescriptor permKey = (PermDescriptor) key;
1: 			permissions = dd.getUncachedGenericPermDescriptor( permKey);
1: 			if( permissions == null)
1: 			{
1: 				// The owner has all privileges unless they have been revoked.
1:                 String objectType = permKey.getObjectType();
1:                 String privilege = permKey.getPermission();
1:                 UUID protectedObjectsID = permKey.getPermObjectId();
1:                 
1:                 
1:                 PrivilegedSQLObject pso = PermDescriptor.getProtectedObject( dd, protectedObjectsID, objectType );
1:                 SchemaDescriptor sd = pso.getSchemaDescriptor();
1:                 if( permKey.getGrantee().equals( sd.getAuthorizationId()))
1:                 {
1:                     permissions = new PermDescriptor
1:                         (
1:                          dd,
1:                          null,
1:                          objectType,
1:                          pso.getUUID(),
1:                          privilege,
1:                          Authorizer.SYSTEM_AUTHORIZATION_ID,
1:                          permKey.getGrantee(),
1:                          true
1:                          );
1:                 }
1: 			}
1: 		}
1: 		if( permissions != null) { return this; }
1:     
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d78ad2e
/////////////////////////////////////////////////////////////////////////
1: 					if (sd.isSystemSchema() && !sd.isSchemaWithGrantableRoutines())
commit:70a12d9
/////////////////////////////////////////////////////////////////////////
1: 											  ConnectionUtil.getCurrentLCC().getTransactionExecute());
0: 					// GrantRevoke TODO: This needs to be changed. Shouldn't allow execute on all system
0: 					// routines.
0: 					if (sd.isSystemSchema())
1: 						permissions = new RoutinePermsDescriptor( dd,
1: 																  routinePermsKey.getGrantee(),
1:                                                                   (String) null,
1: 																  routinePermsKey.getRoutineUUID(),
1: 																  true);
1: 					else if( routinePermsKey.getGrantee().equals( sd.getAuthorizationId()))
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: 																  true);
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.PermissionsCacheable
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: 
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This class implements a Cacheable for a DataDictionary cache of
1:  * permissions.
1:  */
1: class PermissionsCacheable implements Cacheable
1: {
1: 	protected final DataDictionaryImpl dd;
1: 	private PermissionsDescriptor permissions;
1: 	
1: 	PermissionsCacheable(DataDictionaryImpl dd)
1: 	{
1: 		this.dd = dd;
1: 	}
1: 
1: 	/* Cacheable interface */
1: 	public Cacheable setIdentity(Object key) throws StandardException
1: 	{
1: 		// If the user does not have permission then cache an empty (no permission) descriptor in
1: 		// case the same user asks again. That is particularly important for table permission because
1: 		// we ask about table permission before column permissions. If a user has permission to use a
1: 		// proper subset of the columns we will still ask about table permission every time he tries
1: 		// to access that column subset.
1: 		if( key instanceof TablePermsDescriptor)
1: 		{
1: 			TablePermsDescriptor tablePermsKey = (TablePermsDescriptor) key;
1: 			permissions = dd.getUncachedTablePermsDescriptor( tablePermsKey);
1: 			if( permissions == null)
1: 			{
1: 				// The owner has all privileges unless they have been revoked.
1: 				TableDescriptor td = dd.getTableDescriptor( tablePermsKey.getTableUUID());
1: 				SchemaDescriptor sd = td.getSchemaDescriptor();
1: 				if( sd.isSystemSchema())
1: 					// RESOLVE The access to system tables is hard coded to SELECT only to everyone.
1: 					// Is this the way we want Derby to work? Should we allow revocation of read access
1: 					// to system tables? If so we must explicitly add a row to the SYS.SYSTABLEPERMISSIONS
1: 					// table for each system table when a database is created.
1: 					permissions = new TablePermsDescriptor( dd,
1: 															tablePermsKey.getGrantee(),
1: 															(String) null,
1: 															tablePermsKey.getTableUUID(),
1: 															"Y", "N", "N", "N", "N", "N");
1: 				else if( tablePermsKey.getGrantee().equals( sd.getAuthorizationId()))
1: 					permissions = new TablePermsDescriptor( dd,
1: 															tablePermsKey.getGrantee(),
1: 															Authorizer.SYSTEM_AUTHORIZATION_ID,
1: 															tablePermsKey.getTableUUID(),
1: 															"Y", "Y", "Y", "Y", "Y", "Y");
1: 				else
1: 					permissions = new TablePermsDescriptor( dd,
1: 															tablePermsKey.getGrantee(),
1: 															(String) null,
1: 															tablePermsKey.getTableUUID(),
1: 															"N", "N", "N", "N", "N", "N");
1: 			}
1: 		}
1: 		else if( key instanceof ColPermsDescriptor)
1: 		{
1: 			ColPermsDescriptor colPermsKey = (ColPermsDescriptor) key;
1: 			permissions = dd.getUncachedColPermsDescriptor(colPermsKey );
1: 			if( permissions == null)
1: 				permissions = new ColPermsDescriptor( dd,
1: 													  colPermsKey.getGrantee(),
1: 													  (String) null,
1: 													  colPermsKey.getTableUUID(),
1: 													  colPermsKey.getType(),
1: 													  (FormatableBitSet) null);
1: 		}
1: 		else if( key instanceof RoutinePermsDescriptor)
1: 		{
1: 			RoutinePermsDescriptor routinePermsKey = (RoutinePermsDescriptor) key;
1: 			permissions = dd.getUncachedRoutinePermsDescriptor( routinePermsKey);
1: 			if( permissions == null)
1: 			{
1: 				// The owner has all privileges unless they have been revoked.
1: 				try
1: 				{
1: 					AliasDescriptor ad = dd.getAliasDescriptor( routinePermsKey.getRoutineUUID());
1: 					SchemaDescriptor sd = dd.getSchemaDescriptor( ad.getSchemaUUID(),
0: 																  ConnectionUtil.getCurrentLCC().getTransactionExecute());
0: 					if( routinePermsKey.getGrantee().equals( sd.getAuthorizationId()))
1: 						permissions = new RoutinePermsDescriptor( dd,
1: 																  routinePermsKey.getGrantee(),
1: 																  Authorizer.SYSTEM_AUTHORIZATION_ID,
1: 																  routinePermsKey.getRoutineUUID(),
0: 																  false);
1: 				}
1: 				catch( java.sql.SQLException sqle)
1: 				{
1: 					throw StandardException.plainWrapException( sqle);
1: 				}
1: 			}
1: 		}
1: 		else
1: 		{
1: 			if( SanityManager.DEBUG)
1: 				SanityManager.NOTREACHED();
1: 			return null;
1: 		}
0: 		if( permissions != null)
1: 			return this;
1: 		return null;
1: 	} // end of setIdentity
1: 
1: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT( (key instanceof TablePermsDescriptor) ||
1: 								  (key instanceof ColPermsDescriptor) ||
1: 								  (key instanceof RoutinePermsDescriptor),
1: 								  "Invalid class, " + key.getClass().getName()
1: 								  + ", passed as key to PermissionsCacheable.createIdentity");
1: 		}
1: 		if( key == null)
1: 			return null;
1: 		permissions = (PermissionsDescriptor) ((PermissionsDescriptor)key).clone();
1: 		return this;
1: 	} // end of createIdentity
1: 
1: 	public void clearIdentity()
1: 	{
1: 		permissions = null;
1: 	}
1: 
1: 	public Object getIdentity()
1: 	{
1: 		return permissions;
1: 	}
1: 
1: 	public boolean isDirty()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	public void clean(boolean forRemove) throws StandardException
1: 	{
1: 	}
1: }
============================================================================