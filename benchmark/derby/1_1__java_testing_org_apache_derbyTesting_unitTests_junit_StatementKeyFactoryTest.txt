1:78944d5: /*
1:78944d5: 
1:78944d5:    Derby - Class org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest
1:78944d5: 
1:78944d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:78944d5:    contributor license agreements.  See the NOTICE file distributed with
1:78944d5:    this work for additional information regarding copyright ownership.
1:78944d5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:78944d5:    (the "License"); you may not use this file except in compliance with
1:78944d5:    the License.  You may obtain a copy of the License at
1:78944d5: 
1:78944d5:       http://www.apache.org/licenses/LICENSE-2.0
1:78944d5: 
1:78944d5:    Unless required by applicable law or agreed to in writing, software
1:78944d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:78944d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78944d5:    See the License for the specific language governing permissions and
1:78944d5:    limitations under the License.
1:78944d5: 
1:78944d5: */
1:78944d5: 
1:78944d5: package org.apache.derbyTesting.unitTests.junit;
1:78944d5: 
1:78944d5: import java.sql.ResultSet;
1:78944d5: import java.sql.Statement;
1:78944d5: import junit.framework.Test;
1:78944d5: import org.apache.derby.client.am.stmtcache.StatementKey;
1:78944d5: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1:78944d5: import org.apache.derbyTesting.junit.BaseTestCase;
1:78944d5: import org.apache.derbyTesting.junit.TestConfiguration;
1:78944d5: 
1:78944d5: /**
1:78944d5:  * Test that statement key equality is correct, and that the factory produces
1:78944d5:  * correct keys.
1:78944d5:  * <p>
1:78944d5:  * Objects implementing {@link StatementKey} is crucial for correct
1:78944d5:  * operation of the JDBC statement object cache.
1:78944d5:  * 
1:78944d5:  * @see org.apache.derby.client.am.stmtcache.JDBCStatementCache
1:78944d5:  */
1:78944d5: public class StatementKeyFactoryTest
1:78944d5:         extends BaseTestCase {
1:78944d5: 
1:78944d5:     public StatementKeyFactoryTest(String name) {
1:78944d5:         super(name);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creating keys with <code>null</code> for required information should
1:78944d5:      * fail, as it can lead to NPEs in the key implementations and/or the wrong
1:78944d5:      * statement to be fetched from the cache.
1:78944d5:      */
1:78944d5:     public void testCreationBasicWithNulls() {
1:78944d5:         try {
1:78944d5:             StatementKeyFactory.newPrepared(null, null, 0);
1:78944d5:             fail("Creation with <null> should have failed");
1:78944d5:         } catch (IllegalArgumentException iae) {
1:78944d5:             // As expected
1:78944d5:         }
1:78944d5:         try {
1:78944d5:             StatementKeyFactory.newPrepared(null, "app", 0);
1:78944d5:             fail("Creation with <null> should have failed");
1:78944d5:         } catch (IllegalArgumentException iae) {
1:78944d5:             // As expected
1:78944d5:         }
1:78944d5:         try {
1:78944d5:             StatementKeyFactory.newPrepared("values 1", null, 0);
1:78944d5:             fail("Creation with <null> should have failed");
1:78944d5:         } catch (IllegalArgumentException iae) {
1:78944d5:             // As expected
1:78944d5:         }
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testCreationBasic() {
1:78944d5:         StatementKey stdKey = StatementKeyFactory.newPrepared("values 1", "APP", 
1:78944d5:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:78944d5:         StatementKey key = StatementKeyFactory.newPrepared(
1:78944d5:                 "select * from sys.systables", "APP", 
1:78944d5:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:78944d5:         assertFalse(key.equals(stdKey));
1:78944d5:         assertFalse(stdKey.equals(key));
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testEqualityBasic() {
1:78944d5:         StatementKey key1 = StatementKeyFactory.newPrepared(
1:78944d5:                 "select * from sys.systables", "APP", 
1:78944d5:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:78944d5:         StatementKey key2 = StatementKeyFactory.newPrepared(
1:78944d5:                 "select * from sys.systables", "APP", 
1:78944d5:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:78944d5:         StatementKey key3 = StatementKeyFactory.newPrepared(
1:78944d5:                 "select * from sys.systables", "APP", 
1:78944d5:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:78944d5:         assertTrue(key1.equals(key2));
1:78944d5:         assertTrue(key2.equals(key1));
1:78944d5:         assertTrue(key2.equals(key3));
1:78944d5:         assertTrue(key1.equals(key3));
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testEqualityDefaultNoAutoGenKey() {
1:78944d5:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:78944d5:         StatementKey basicKey = StatementKeyFactory.newPrepared(
1:78944d5:                 "values 2", "APP", holdability);
1:78944d5:         StatementKey simplifiedKey = StatementKeyFactory.newPrepared(
1:78944d5:                 "values 2", "APP", holdability, Statement.NO_GENERATED_KEYS);
1:78944d5:         assertTrue(basicKey.equals(simplifiedKey));
1:78944d5:         assertTrue(simplifiedKey.equals(basicKey));
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testEqualityNoAutoVsAutoGenKey() {
1:78944d5:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:78944d5:         StatementKey basicKey = StatementKeyFactory.newPrepared(
1:78944d5:                 "values 2", "APP", holdability);
1:78944d5:         StatementKey autoKey = StatementKeyFactory.newPrepared(
1:78944d5:                 "values 2", "APP", holdability, Statement.RETURN_GENERATED_KEYS);
1:78944d5:         assertFalse(basicKey.equals(autoKey));
1:78944d5:         assertFalse(autoKey.equals(basicKey));
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testUnequalityVarious() {
1:78944d5:         String sql = "select * from sys.systables";
1:78944d5:         String schema = "APP";
1:78944d5:         int rsh = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:78944d5:         int rst = ResultSet.TYPE_SCROLL_INSENSITIVE;
1:78944d5:         int rsc = ResultSet.CONCUR_UPDATABLE;
1:78944d5:         int auto = Statement.RETURN_GENERATED_KEYS;
1:78944d5:         // Create a one key of each type, all different from each other.
1:78944d5:         StatementKey[] keys = new StatementKey[] {
1:78944d5:             StatementKeyFactory.newPrepared(sql, schema, rsh),
1:78944d5:             StatementKeyFactory.newPrepared(sql, schema, rsh, auto),
1:45f24f8:             StatementKeyFactory.newPrepared(sql, schema, rst, rsc, rsh),
1:78944d5:             StatementKeyFactory.newCallable(sql, schema, rsh),
1:45f24f8:             StatementKeyFactory.newCallable(sql, schema, rst, rsc, rsh)};
1:78944d5:         for (int outer=0; outer < keys.length; outer++) {
1:78944d5:             StatementKey current = keys[outer];
1:78944d5:             for (int inner=0; inner < keys.length; inner++) {
1:78944d5:                 if (outer != inner) {
1:78944d5:                     if (current.equals(keys[inner])) {
1:78944d5:                         fail("[" + current.toString() + "] should not equal [" +
1:78944d5:                                 keys[inner].toString() + "]");
1:78944d5:                     }
1:78944d5:                 } else {
1:78944d5:                     // Should equal itself.
1:78944d5:                     assertTrue(current.equals(keys[inner]));
1:78944d5:                 }
1:78944d5:             }
1:78944d5:         }
1:78944d5:     }
1:78944d5: 
1:78944d5:     public void testCallableVsPrepared() {
1:78944d5:         String sql = "select colA, colB from mytable";
1:78944d5:         String schema = "SOMEAPP";
1:78944d5:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:78944d5:         StatementKey callable =
1:78944d5:                 StatementKeyFactory.newCallable(sql, schema, holdability);
1:78944d5:         StatementKey prepared =
1:78944d5:                 StatementKeyFactory.newPrepared(sql, schema, holdability);
1:78944d5:         assertFalse(callable.equals(prepared));
1:78944d5:         assertFalse(prepared.equals(callable));
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Returns the appropriate tests.
1:78944d5:      * <p>
1:78944d5:      * Run only client/server, because the code being tested does not live
1:78944d5:      * in the embedded driver (yet).
1:78944d5:      * 
1:78944d5:      * @return A suite of tests (may be empty).
1:78944d5:      */
1:78944d5:     public static Test suite() {
1:78944d5:         // Run only client/server, because the code being tested does not live
1:78944d5:         // in the embedded driver (yet).
1:78944d5:         return TestConfiguration.clientServerSuite(
1:78944d5:                 StatementKeyFactoryTest.class);
1:78944d5:     }
1:78944d5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:45f24f8
/////////////////////////////////////////////////////////////////////////
1:             StatementKeyFactory.newPrepared(sql, schema, rst, rsc, rsh),
1:             StatementKeyFactory.newCallable(sql, schema, rst, rsc, rsh)};
commit:78944d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that statement key equality is correct, and that the factory produces
1:  * correct keys.
1:  * <p>
1:  * Objects implementing {@link StatementKey} is crucial for correct
1:  * operation of the JDBC statement object cache.
1:  * 
1:  * @see org.apache.derby.client.am.stmtcache.JDBCStatementCache
1:  */
1: public class StatementKeyFactoryTest
1:         extends BaseTestCase {
1: 
1:     public StatementKeyFactoryTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Creating keys with <code>null</code> for required information should
1:      * fail, as it can lead to NPEs in the key implementations and/or the wrong
1:      * statement to be fetched from the cache.
1:      */
1:     public void testCreationBasicWithNulls() {
1:         try {
1:             StatementKeyFactory.newPrepared(null, null, 0);
1:             fail("Creation with <null> should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected
1:         }
1:         try {
1:             StatementKeyFactory.newPrepared(null, "app", 0);
1:             fail("Creation with <null> should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected
1:         }
1:         try {
1:             StatementKeyFactory.newPrepared("values 1", null, 0);
1:             fail("Creation with <null> should have failed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected
1:         }
1:     }
1: 
1:     public void testCreationBasic() {
1:         StatementKey stdKey = StatementKeyFactory.newPrepared("values 1", "APP", 
1:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         StatementKey key = StatementKeyFactory.newPrepared(
1:                 "select * from sys.systables", "APP", 
1:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         assertFalse(key.equals(stdKey));
1:         assertFalse(stdKey.equals(key));
1:     }
1: 
1:     public void testEqualityBasic() {
1:         StatementKey key1 = StatementKeyFactory.newPrepared(
1:                 "select * from sys.systables", "APP", 
1:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         StatementKey key2 = StatementKeyFactory.newPrepared(
1:                 "select * from sys.systables", "APP", 
1:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         StatementKey key3 = StatementKeyFactory.newPrepared(
1:                 "select * from sys.systables", "APP", 
1:                                             ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         assertTrue(key1.equals(key2));
1:         assertTrue(key2.equals(key1));
1:         assertTrue(key2.equals(key3));
1:         assertTrue(key1.equals(key3));
1:     }
1: 
1:     public void testEqualityDefaultNoAutoGenKey() {
1:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:         StatementKey basicKey = StatementKeyFactory.newPrepared(
1:                 "values 2", "APP", holdability);
1:         StatementKey simplifiedKey = StatementKeyFactory.newPrepared(
1:                 "values 2", "APP", holdability, Statement.NO_GENERATED_KEYS);
1:         assertTrue(basicKey.equals(simplifiedKey));
1:         assertTrue(simplifiedKey.equals(basicKey));
1:     }
1: 
1:     public void testEqualityNoAutoVsAutoGenKey() {
1:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:         StatementKey basicKey = StatementKeyFactory.newPrepared(
1:                 "values 2", "APP", holdability);
1:         StatementKey autoKey = StatementKeyFactory.newPrepared(
1:                 "values 2", "APP", holdability, Statement.RETURN_GENERATED_KEYS);
1:         assertFalse(basicKey.equals(autoKey));
1:         assertFalse(autoKey.equals(basicKey));
1:     }
1: 
1:     public void testUnequalityVarious() {
1:         String sql = "select * from sys.systables";
1:         String schema = "APP";
1:         int rsh = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:         int rst = ResultSet.TYPE_SCROLL_INSENSITIVE;
1:         int rsc = ResultSet.CONCUR_UPDATABLE;
1:         int auto = Statement.RETURN_GENERATED_KEYS;
1:         // Create a one key of each type, all different from each other.
1:         StatementKey[] keys = new StatementKey[] {
1:             StatementKeyFactory.newPrepared(sql, schema, rsh),
1:             StatementKeyFactory.newPrepared(sql, schema, rsh, auto),
0:             StatementKeyFactory.newPrepared(sql, schema, rsh, rst, rsc),
1:             StatementKeyFactory.newCallable(sql, schema, rsh),
0:             StatementKeyFactory.newCallable(sql, schema, rsh, rst, rsc)};
1:         for (int outer=0; outer < keys.length; outer++) {
1:             StatementKey current = keys[outer];
1:             for (int inner=0; inner < keys.length; inner++) {
1:                 if (outer != inner) {
1:                     if (current.equals(keys[inner])) {
1:                         fail("[" + current.toString() + "] should not equal [" +
1:                                 keys[inner].toString() + "]");
1:                     }
1:                 } else {
1:                     // Should equal itself.
1:                     assertTrue(current.equals(keys[inner]));
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public void testCallableVsPrepared() {
1:         String sql = "select colA, colB from mytable";
1:         String schema = "SOMEAPP";
1:         int holdability = ResultSet.HOLD_CURSORS_OVER_COMMIT;
1:         StatementKey callable =
1:                 StatementKeyFactory.newCallable(sql, schema, holdability);
1:         StatementKey prepared =
1:                 StatementKeyFactory.newPrepared(sql, schema, holdability);
1:         assertFalse(callable.equals(prepared));
1:         assertFalse(prepared.equals(callable));
1:     }
1: 
1:     /**
1:      * Returns the appropriate tests.
1:      * <p>
1:      * Run only client/server, because the code being tested does not live
1:      * in the embedded driver (yet).
1:      * 
1:      * @return A suite of tests (may be empty).
1:      */
1:     public static Test suite() {
1:         // Run only client/server, because the code being tested does not live
1:         // in the embedded driver (yet).
1:         return TestConfiguration.clientServerSuite(
1:                 StatementKeyFactoryTest.class);
1:     }
1: }
============================================================================