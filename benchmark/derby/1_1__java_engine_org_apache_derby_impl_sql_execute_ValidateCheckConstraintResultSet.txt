3:af1c18c: /*
16:af1c18c: 
1:af1c18c:    Derby - Class org.apache.derby.impl.sql.execute.ValidateCheckConstraintResultSet
1:af1c18c: 
1:af1c18c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:af1c18c:    contributor license agreements.  See the NOTICE file distributed with
1:af1c18c:    this work for additional information regarding copyright ownership.
1:af1c18c:    The ASF licenses this file to you under the Apache License, Version 2.0
1:af1c18c:    (the "License"); you may not use this file except in compliance with
1:af1c18c:    the License.  You may obtain a copy of the License at
1:af1c18c: 
1:af1c18c:       http://www.apache.org/licenses/LICENSE-2.0
1:af1c18c: 
1:af1c18c:    Unless required by applicable law or agreed to in writing, software
1:af1c18c:    distributed under the License is distributed on an "AS IS" BASIS,
1:af1c18c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af1c18c:    See the License for the specific language governing permissions and
1:af1c18c:    limitations under the License.
1:af1c18c: 
5:af1c18c:  */
1:af1c18c: 
1:af1c18c: package org.apache.derby.impl.sql.execute;
1:af1c18c: 
1:af1c18c: import org.apache.derby.iapi.error.ExceptionUtil;
1:af1c18c: import org.apache.derby.iapi.error.StandardException;
1:af1c18c: import org.apache.derby.iapi.reference.SQLState;
1:af1c18c: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:af1c18c: import org.apache.derby.iapi.sql.Activation;
1:af1c18c: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:af1c18c: import org.apache.derby.iapi.store.access.Qualifier;
1:af1c18c: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:af1c18c: 
2:af1c18c: /**
1:af1c18c:  * Special result set used when checking deferred CHECK constraints.  Activated
1:f6d02c9:  * by a special {@code --DERBY_PROPERTY validateCheckConstraint=<baseTableUUIDString>}
1:af1c18c:  * override on a SELECT query, cf DeferredConstraintsMemory#validateCheck.  It
1:af1c18c:  * relies on having a correct row location set prior to invoking {@code
1:af1c18c:  * getNewtRowCore}, cf. the special code path in
1:af1c18c:  * {@code ProjectRestrictResultSet#getNextRowCore} activated by
1:af1c18c:  * {@code #validatingCheckConstraint}.
1:af1c18c:  *
1:af1c18c:  */
1:af1c18c: final class ValidateCheckConstraintResultSet extends TableScanResultSet
1:af1c18c:     implements CursorResultSet, Cloneable
1:af1c18c: {
1:af1c18c: 
1:af1c18c:     ValidateCheckConstraintResultSet(long conglomId,
1:af1c18c:         StaticCompiledOpenConglomInfo scoci,
1:af1c18c:         Activation activation,
1:af1c18c:         int resultRowTemplate,
1:af1c18c:         int resultSetNumber,
1:af1c18c:         GeneratedMethod startKeyGetter, int startSearchOperator,
1:af1c18c:         GeneratedMethod stopKeyGetter, int stopSearchOperator,
1:af1c18c:         boolean sameStartStopPosition,
1:af1c18c:         Qualifier[][] qualifiers,
1:af1c18c:         String tableName,
1:af1c18c:         String userSuppliedOptimizerOverrides,
1:af1c18c:         String indexName,
1:af1c18c:         boolean isConstraint,
1:af1c18c:         boolean forUpdate,
1:af1c18c:         int colRefItem,
1:af1c18c:         int indexColItem,
1:af1c18c:         int lockMode,
1:af1c18c:         boolean tableLocked,
1:af1c18c:         int isolationLevel,
1:af1c18c:         int rowsPerRead,
1:af1c18c:         boolean oneRowScan,
1:af1c18c:         double optimizerEstimatedRowCount,
1:af1c18c:         double optimizerEstimatedCost)
1:af1c18c:             throws StandardException
1:af1c18c:     {
1:af1c18c:         super(conglomId,
1:af1c18c:                 scoci,
1:af1c18c:                 activation,
1:af1c18c:                 resultRowTemplate,
1:af1c18c:                 resultSetNumber,
1:af1c18c:                 startKeyGetter, startSearchOperator,
1:af1c18c:                 stopKeyGetter, stopSearchOperator,
1:af1c18c:                 sameStartStopPosition,
1:af1c18c:                 qualifiers,
1:af1c18c:                 tableName,
1:af1c18c:                 userSuppliedOptimizerOverrides,
1:af1c18c:                 indexName,
1:af1c18c:                 isConstraint,
1:af1c18c:                 forUpdate,
1:af1c18c:                 colRefItem,
1:af1c18c:                 indexColItem,
1:af1c18c:                 lockMode,
1:af1c18c:                 tableLocked,
1:af1c18c:                 isolationLevel,
1:af1c18c:                 rowsPerRead,
1:af1c18c:                 oneRowScan,
1:af1c18c:                 optimizerEstimatedRowCount,
1:af1c18c:                 optimizerEstimatedCost);
13:af1c18c:     }
1:af1c18c: 
1:af1c18c:     @Override
1:a42c32e:     boolean loopControl(boolean moreRows) throws StandardException {
1:a42c32e:          try {
1:a42c32e:              scanController.fetch(candidate.getRowArray());
1:a42c32e:          } catch (StandardException e) {
1:a42c32e:              // Offending rows may have been deleted in the
1:a42c32e:              // transaction.  As for compress, we won't even get here
1:a42c32e:              // since we use a normal SELECT query then.
1:a42c32e:              if (e.getSQLState().equals(
1:a42c32e:                      ExceptionUtil.getSQLStateFromIdentifier(
1:a42c32e:                              SQLState.AM_RECORD_NOT_FOUND))) {
1:a42c32e:                  moreRows = false;
1:a42c32e:              } else {
1:a42c32e:                  throw e;
1:a42c32e:              }
1:a42c32e:          }
1:a42c32e:          return moreRows;
1:af1c18c:     }
1:af1c18c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a42c32e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean loopControl(boolean moreRows) throws StandardException {
1:          try {
1:              scanController.fetch(candidate.getRowArray());
1:          } catch (StandardException e) {
1:              // Offending rows may have been deleted in the
1:              // transaction.  As for compress, we won't even get here
1:              // since we use a normal SELECT query then.
1:              if (e.getSQLState().equals(
1:                      ExceptionUtil.getSQLStateFromIdentifier(
1:                              SQLState.AM_RECORD_NOT_FOUND))) {
1:                  moreRows = false;
1:              } else {
1:                  throw e;
1:              }
1:          }
1:          return moreRows;
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1:  * by a special {@code --DERBY_PROPERTY validateCheckConstraint=<baseTableUUIDString>}
/////////////////////////////////////////////////////////////////////////
0:             if ( scanControllerOpened) {
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.ValidateCheckConstraintResultSet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.ExceptionUtil;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Special result set used when checking deferred CHECK constraints.  Activated
0:  * by a special {@code --DERBY_PROPERTY validateCheckConstraint=<conglomId>}
1:  * override on a SELECT query, cf DeferredConstraintsMemory#validateCheck.  It
1:  * relies on having a correct row location set prior to invoking {@code
1:  * getNewtRowCore}, cf. the special code path in
1:  * {@code ProjectRestrictResultSet#getNextRowCore} activated by
1:  * {@code #validatingCheckConstraint}.
1:  *
1:  */
1: final class ValidateCheckConstraintResultSet extends TableScanResultSet
1:     implements CursorResultSet, Cloneable
1: {
1: 
1:     ValidateCheckConstraintResultSet(long conglomId,
1:         StaticCompiledOpenConglomInfo scoci,
1:         Activation activation,
1:         int resultRowTemplate,
1:         int resultSetNumber,
1:         GeneratedMethod startKeyGetter, int startSearchOperator,
1:         GeneratedMethod stopKeyGetter, int stopSearchOperator,
1:         boolean sameStartStopPosition,
1:         Qualifier[][] qualifiers,
1:         String tableName,
1:         String userSuppliedOptimizerOverrides,
1:         String indexName,
1:         boolean isConstraint,
1:         boolean forUpdate,
1:         int colRefItem,
1:         int indexColItem,
1:         int lockMode,
1:         boolean tableLocked,
1:         int isolationLevel,
1:         int rowsPerRead,
1:         boolean oneRowScan,
1:         double optimizerEstimatedRowCount,
1:         double optimizerEstimatedCost)
1:             throws StandardException
1:     {
1:         super(conglomId,
1:                 scoci,
1:                 activation,
1:                 resultRowTemplate,
1:                 resultSetNumber,
1:                 startKeyGetter, startSearchOperator,
1:                 stopKeyGetter, stopSearchOperator,
1:                 sameStartStopPosition,
1:                 qualifiers,
1:                 tableName,
1:                 userSuppliedOptimizerOverrides,
1:                 indexName,
1:                 isConstraint,
1:                 forUpdate,
1:                 colRefItem,
1:                 indexColItem,
1:                 lockMode,
1:                 tableLocked,
1:                 isolationLevel,
1:                 rowsPerRead,
1:                 oneRowScan,
1:                 optimizerEstimatedRowCount,
1:                 optimizerEstimatedCost);
1:     }
1: 
1:     /**
0:      * Return the current row (if any) from the base table scan, positioned
0:      * correctly by our caller (ProjectRestrictNode). It overrides
0:      * getNextRowCore from TableSCanResultSet, by using "fetch" instead of
0:      * "fetchNext" on the underlying controller, otherwise it's identical.
0:      * (This means it's probably over-general for the usage we have of it,
0:      * but it felt safer to keep the code as similar as possible.)
0:      * @return the row retrieved
0:      * @exception StandardException thrown on failure to get next row
1:      */
1:     @Override
0:     public ExecRow getNextRowCore() throws StandardException    {
0:         if (isXplainOnlyMode()) {
0:             return null;
1:         }
1: 
0:         checkCancellationFlag();
1: 
0:         if (SanityManager.DEBUG) {
0:             SanityManager.ASSERT(scanRepositioned);
1:         }
1: 
0:         if (currentRow == null || scanRepositioned) {
0:             currentRow = getCompactRow(candidate, accessedCols, isKeyed);
1:         }
1: 
0:         beginTime = getCurrentTimeMillis();
1: 
0:         ExecRow result = null;
1: 
0:         if (isOpen  && !nextDone) {
0:             // Only need to do 1 next per scan for 1 row scans.
0:             nextDone = oneRowScan;
1: 
0:             if (scanControllerOpened) {
0:                 boolean moreRows = true;
1: 
0:                 while (moreRows) {
0:                     try {
0:                         scanController.fetch(candidate.getRowArray());
0:                     } catch (StandardException e) {
0:                         // Offending rows may have been deleted in the
0:                         // transaction.  As for compress, we won't even get here
0:                         // since we use a normal SELECT query then.
0:                         if (e.getSQLState().equals(
0:                                 ExceptionUtil.getSQLStateFromIdentifier(
0:                                         SQLState.AM_RECORD_NOT_FOUND))) {
0:                             moreRows = false;
0:                             break;
0:                         } else {
0:                             throw e;
1:                         }
1:                     }
1: 
0:                     rowsSeen++;
0:                     rowsThisScan++;
1: 
1:                     /*
0:                     ** Skip rows where there are start or stop positioners
0:                     ** that do not implement ordered null semantics and
0:                     ** there are columns in those positions that contain
0:                     ** null.
0:                     ** No need to check if start and stop positions are the
0:                     ** same, since all predicates in both will be ='s,
0:                     ** and hence evaluated in the store.
1:                     */
0:                     if ((! sameStartStopPosition) && skipRow(candidate)) {
0:                         rowsFiltered++;
0:                         continue;
1:                     }
1: 
0:                     /* beetle 3865, updateable cursor use index. If we have a
0:                      * hash table that holds updated records, and we hit it
0:                      * again, skip it, and remove it from hash since we can't
0:                      * hit it again, and we have a space in hash, so can stop
0:                      * scanning forward.
1:                      */
0:                     if (past2FutureTbl != null) {
0:                         RowLocation rowLoc = (RowLocation)currentRow.getColumn(
0:                             currentRow.nColumns());
0:                         if (past2FutureTbl.remove(rowLoc) != null) {
0:                             continue;
1:                         }
1:                     }
1: 
0:                     result = currentRow;
0:                     break;
1:                 }
1: 
1:                 /*
0:                 ** If we just finished a full scan of the heap, update
0:                 ** the number of rows in the scan controller.
0:                 **
0:                 ** NOTE: It would be more efficient to only update the
0:                 ** scan controller if the optimizer's estimated number of
0:                 ** rows were wrong by more than some threshold (like 10%).
0:                 ** This would require a little more work than I have the
0:                 ** time for now, however, as the row estimate that is given
0:                 ** to this result set is the total number of rows for all
0:                 ** scans, not the number of rows per scan.
1:                 */
0:                 if (! moreRows) {
0:                     setRowCountIfPossible(rowsThisScan);
0:                     currentRow = null;
1:                 }
1:             }
1:         }
1: 
0:         setCurrentRow(result);
0:         currentRowIsValid = true;
0:         scanRepositioned = false;
0:         qualify = true;
1: 
0:         nextTime += getElapsedMillis(beginTime);
0:         return result;
1:     }
1: }
============================================================================