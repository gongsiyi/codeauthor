1:fd46794: /*
1:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.iapi.sql.dictionary.SchemaDescriptor
1:fd46794: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:4112e91: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:4112e91: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: import org.apache.derby.iapi.sql.depend.Provider;
1:6950a39: import org.apache.derby.iapi.sql.Activation;
1:4112e91: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.catalog.DependableFinder;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:4112e91: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:4112e91: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.catalog.Dependable;
1:eac0369: 
1:eac0369: /**
1:eac0369:  * This class represents a schema descriptor
3:eac0369:  *
1:eac0369:  * @version 0.1
2:eac0369:  */
1:7ecc1f2: 
1:f2fad75: public final class SchemaDescriptor extends UniqueTupleDescriptor 
1:f2fad75: 	implements Provider
1:eac0369: {
1:7ecc1f2: 	
1:eac0369: 	/*
1:eac0369: 	** When we boot, we put the system tables in
1:eac0369: 	** in 'SYS', owned by user DBA.
1:eac0369: 	** '92 talks about two system schemas:
1:eac0369: 	**
1:eac0369: 	**		Information Schema: literal name is 
1:eac0369: 	**		SYS.  This schema contains
1:eac0369: 	**		a series of well defined views that reference
1:eac0369: 	**		actual base tables from the Definition Schema.
1:eac0369: 	**
1:eac0369: 	**		Definition Schema:  literal name is
1:eac0369: 	**		DEFINITION_SCHEMA.  This schema contains 
1:eac0369: 	** 		system tables that can be in any shape or
1:eac0369: 	**		form.
1:eac0369: 	**	
1:eac0369: 	** SYS is owned by SA_USER_NAME (or DBA).
1:eac0369: 	*/
1:eac0369:     /**
1:eac0369:      * STD_SYSTEM_SCHEMA_NAME is the name of the system schema in databases that
1:3fd26f3:      * use ANSI standard identifier casing. 
1:eac0369:      *
1:6b50965:      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
1:eac0369:      */
1:eac0369:     public static final	String	STD_SYSTEM_SCHEMA_NAME      = "SYS";
1:eac0369: 
1:eac0369:     public static final	String	IBM_SYSTEM_SCHEMA_NAME      = "SYSIBM";
1:eac0369: 
1:eac0369:     /*
1:eac0369:      * Names of system schemas.
1:eac0369:      * The following schemas exist in a standard empty DB2 database.  For
1:3fd26f3:      * now creating them in the Derby database but not actually putting
1:eac0369:      * any objects in them.  Users should not be able to create any objects
1:eac0369:      * in these schemas.
1:eac0369:      **/
1:eac0369:     public static final	String	IBM_SYSTEM_CAT_SCHEMA_NAME      = "SYSCAT";
1:eac0369:     public static final	String	IBM_SYSTEM_FUN_SCHEMA_NAME      = "SYSFUN";
1:eac0369:     public static final	String	IBM_SYSTEM_PROC_SCHEMA_NAME     = "SYSPROC";
1:eac0369:     public static final	String	IBM_SYSTEM_STAT_SCHEMA_NAME     = "SYSSTAT";
1:eac0369:     public static final	String	IBM_SYSTEM_NULLID_SCHEMA_NAME   = "NULLID";
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This schema is used for jar handling procedures.
1:eac0369:      **/
1:eac0369:     public static final	String	STD_SQLJ_SCHEMA_NAME      = "SQLJ";
1:eac0369:      
1:eac0369:     /**
1:3fd26f3:      * This schema is for Derby specific system diagnostic procedures and 
1:eac0369:      * functions which are not available in DB2.  
1:eac0369:      **/
1:eac0369:     public static final	String	STD_SYSTEM_DIAG_SCHEMA_NAME     = "SYSCS_DIAG";
1:eac0369: 
1:eac0369:     /**
1:3fd26f3:      * This schema is for Derby specific system diagnostic procedures and 
1:eac0369:      * functions which are not available in DB2.  
1:eac0369:      **/
1:eac0369:     public static final	String	STD_SYSTEM_UTIL_SCHEMA_NAME     = "SYSCS_UTIL";
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * STD_DEFAULT_SCHEMA_NAME is the name of the default schema in databases 
1:3fd26f3:      * that use ANSI standard identifier casing. 
1:eac0369:      *
1:6b50965:      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
1:eac0369:      */
1:eac0369:     public	static	final	String	STD_DEFAULT_SCHEMA_NAME = Property.DEFAULT_USER_NAME;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * UUID's used as key's in the SYSSCHEMA catalog for the system schema's
1:eac0369:      **/
1:eac0369:     public static final String SYSCAT_SCHEMA_UUID      =  
1:eac0369:         "c013800d-00fb-2641-07ec-000000134f30";
1:eac0369:     public static final String SYSFUN_SCHEMA_UUID      =  
1:eac0369:         "c013800d-00fb-2642-07ec-000000134f30";
1:eac0369:     public static final String SYSPROC_SCHEMA_UUID     =  
1:eac0369:         "c013800d-00fb-2643-07ec-000000134f30";
1:eac0369:     public static final String SYSSTAT_SCHEMA_UUID     =  
1:eac0369:         "c013800d-00fb-2644-07ec-000000134f30";
1:eac0369:     public static final String SYSCS_DIAG_SCHEMA_UUID  =  
1:eac0369:         "c013800d-00fb-2646-07ec-000000134f30";
1:eac0369:     public static final String SYSCS_UTIL_SCHEMA_UUID  =  
1:eac0369:         "c013800d-00fb-2649-07ec-000000134f30";
1:eac0369:     public static final String NULLID_SCHEMA_UUID  =  
1:eac0369:         "c013800d-00fb-2647-07ec-000000134f30";
1:eac0369:     public static final String SQLJ_SCHEMA_UUID  =  
1:eac0369:         "c013800d-00fb-2648-07ec-000000134f30";
1:eac0369: 	public static final	String SYSTEM_SCHEMA_UUID =  
1:eac0369:         "8000000d-00d0-fd77-3ed8-000a0a0b1900";
1:eac0369: 	public static final	String SYSIBM_SCHEMA_UUID =  
1:eac0369:         "c013800d-00f8-5b53-28a9-00000019ed88";
1:eac0369: 	public static final	String DEFAULT_SCHEMA_UUID = 
1:eac0369:         "80000000-00d2-b38f-4cda-000a0a412c00";
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     public	static	final	String	STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME = "SESSION";
1:eac0369: 	public	static	final	String	DEFAULT_USER_NAME = Property.DEFAULT_USER_NAME;
1:eac0369: 	public	static	final	String	SA_USER_NAME = "DBA";
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** the public interface for this system:
1:eac0369: 		<ol>
1:eac0369: 		<li>public String getSchemaName();
1:eac0369: 		<li>public String getAuthorizationId();
1:eac0369: 		<li>public void	setUUID(UUID uuid);
1:eac0369: 		<li>public boolean isSystemSchema();
1:eac0369: 		</ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	//// Implementation
1:eac0369: 	private final String			name;
1:eac0369: 	private UUID			oid;
1:58806b9: 	private String			aid;
1:eac0369: 
1:feb5bb2:     private final boolean isSystem;
1:feb5bb2:     private final boolean isSYSIBM;
1:7e5a943:     
1:7e5a943:     /**
1:7e5a943:      * For system schemas, the only possible value for collation type is
1:7e5a943:      * UCS_BASIC. For user schemas, the collation type can be UCS_BASIC or 
1:7e5a943:      * TERRITORY_BASED.
1:7e5a943:      */
1:7e5a943:     private int collationType;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a SchemaDescriptor.
1:eac0369: 	 *
1:eac0369:      * @param dataDictionary
1:eac0369: 	 * @param name	        The schema descriptor for this table.
1:9f60172:      * @param aid           The authorization id
1:eac0369: 	 * @param oid	        The object id
1:eac0369:      * @param isSystem	    boolean, true iff this is a system schema, like SYS,
1:eac0369:      *                      SYSIBM, SYSCAT, SYSFUN, ....
1:eac0369: 	 */
1:eac0369: 	public SchemaDescriptor(
1:eac0369:     DataDictionary  dataDictionary, 
1:eac0369:     String          name,
1:eac0369:     String          aid, 
1:eac0369:     UUID            oid,
1:eac0369:     boolean         isSystem)
1:eac0369: 	{
1:eac0369: 		super (dataDictionary);
1:eac0369: 
1:eac0369: 		this.name = name;
1:eac0369: 		this.aid = aid;
1:eac0369: 		this.oid = oid;
1:eac0369:         this.isSystem = isSystem;
1:feb5bb2: 		isSYSIBM = isSystem && IBM_SYSTEM_SCHEMA_NAME.equals(name);
1:7e5a943: 		if (isSystem)
1:7e5a943: 			collationType = dataDictionary.getCollationTypeOfSystemSchemas();
1:7e5a943: 		else
1:7e5a943: 			collationType = dataDictionary.getCollationTypeOfUserSchemas();
1:eac0369: 	}
1:eac0369: 
1:6e48cbe: 	/**
1:eac0369: 	 * Gets the name of the schema 
1:eac0369: 	 *
1:eac0369: 	 * @return	The schema name
1:eac0369: 	 */
1:eac0369: 	public String	getSchemaName()
1:eac0369: 	{
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the authorization id of the schema 
1:eac0369: 	 *
1:eac0369: 	 * @return	Authorization id
1:eac0369: 	 *		lives in.
1:eac0369: 	 */
1:eac0369: 	public String getAuthorizationId()
1:eac0369: 	{
1:eac0369: 		return aid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:58806b9: 	 * Sets the authorization id of the schema. This is only used by the DataDictionary
1:58806b9:      * during boot in order to patch up the authorization ids on system schemas.
1:58806b9: 	 *
1:58806b9: 	 * @param newAuthorizationID What is is
1:58806b9: 	 */
1:58806b9: 	public void setAuthorizationId( String newAuthorizationID )
1:58806b9: 	{
1:58806b9: 		aid = newAuthorizationID;
1:58806b9: 	}
1:58806b9: 
1:58806b9: 	/**
1:eac0369: 	 * Gets the oid of the schema 
1:eac0369: 	 *
1:eac0369: 	 * @return	An oid
1:eac0369: 	 */
1:eac0369: 	public UUID	getUUID()
1:eac0369: 	{
1:eac0369: 		return oid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Sets the oid of the schema 
1:eac0369: 	 *
1:eac0369: 	 * @param oid	The object id
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void	setUUID(UUID oid)
1:eac0369: 	{
1:eac0369: 		this.oid = oid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:6e48cbe: 	 * Returns the collation type associated with this schema 
1:6e48cbe: 	 *
1:6e48cbe: 	 * @return collation type
1:6e48cbe: 	 *
1:6e48cbe: 	 */
1:6e48cbe: 	public int	getCollationType()
1:6e48cbe: 	{
1:6e48cbe: 		return collationType;
1:6e48cbe: 	}
1:6e48cbe: 
1:eac0369: 	//
1:eac0369: 	// Provider interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**		
1:eac0369: 		@return the stored form of this provider
1:eac0369: 
1:eac0369: 			@see Dependable#getDependableFinder
1:eac0369: 	 */
1:eac0369: 	public DependableFinder getDependableFinder()
1:eac0369: 	{
1:eac0369: 		// Is this OK?
1:eac0369: 	    return	getDependableFinder(StoredFormatIds.SCHEMA_DESCRIPTOR_FINDER_V01_ID);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the name of this Provider.  (Useful for errors.)
1:eac0369: 	 *
1:eac0369: 	 * @return String	The name of this provider.
1:eac0369: 	 */
1:eac0369: 	public String getObjectName()
1:eac0369: 	{
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's UUID 
1:eac0369: 	 *
1:eac0369: 	 * @return String	The provider's UUID
1:eac0369: 	 */
1:eac0369: 	public UUID getObjectID()
1:eac0369: 	{
1:eac0369: 		return oid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's type.
1:eac0369: 	 *
1:eac0369: 	 * @return String		The provider's type.
1:eac0369: 	 */
1:eac0369: 	public String getClassType()
1:eac0369: 	{
1:eac0369: 		return Dependable.SCHEMA;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Prints the contents of the SchemaDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @return The contents as a String
1:eac0369: 	 */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//	Methods so that we can put SchemaDescriptors on hashed lists
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Determine if two SchemaDescriptors are the same.
1:eac0369: 	  *
1:eac0369: 	  *	@param	otherObject	other schemadescriptor
1:eac0369: 	  *
1:eac0369: 	  *	@return	true if they are the same, false otherwise
1:eac0369: 	  */
1:eac0369: 
1:eac0369: 	public boolean equals(Object otherObject)
1:eac0369: 	{
1:eac0369: 		if (!(otherObject instanceof SchemaDescriptor))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		SchemaDescriptor other = (SchemaDescriptor) otherObject;
1:eac0369: 
1:eac0369: 		if ((oid != null) && (other.oid != null))
1:eac0369: 			return oid.equals( other.oid);
1:eac0369: 		
1:eac0369: 		return name.equals(other.name);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate whether this is a system schema or not
1:eac0369:      *
1:eac0369:      * Examples of system schema's include: 
1:eac0369:      *      SYS, SYSIBM, SYSCAT, SYSFUN, SYSPROC, SYSSTAT, and SYSCS_DIAG 
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean isSystemSchema()
1:eac0369: 	{
1:eac0369: 		return(isSystem);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:d78ad2e: 	 * Indicate whether this is a system schema with grantable routines
1:eac0369: 	 *
1:d78ad2e: 	 * @return true/false
1:eac0369: 	 */
1:d78ad2e: 	public boolean isSchemaWithGrantableRoutines()
1:eac0369: 	{
1:d78ad2e: 		if (!isSystem)
1:d78ad2e: 			return true;
1:eac0369: 
1:d78ad2e: 		if (name.equals(STD_SQLJ_SCHEMA_NAME) || name.equals(STD_SYSTEM_UTIL_SCHEMA_NAME))
1:d78ad2e: 			return true;
2:d78ad2e: 
1:d78ad2e: 		return false;
1:eac0369: 	}
1:d78ad2e: 
1:eac0369: 	public boolean isSYSIBM()
1:eac0369: 	{
1:eac0369: 		return isSYSIBM;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Get a hashcode for this SchemaDescriptor
1:eac0369: 	  *
1:eac0369: 	  *	@return	hashcode
1:eac0369: 	  */
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return	oid.hashCode();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** @see TupleDescriptor#getDescriptorName */
1:eac0369: 	public String getDescriptorName() 
1:eac0369: 	{ 
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** @see TupleDescriptor#getDescriptorType */
1:eac0369: 	public String getDescriptorType()
1:4112e91: 	{
1:eac0369: 		return "Schema";
1:4112e91:     }
1:4112e91:     
1:4112e91:     /**
1:4112e91:      * Drop this schema.
1:4112e91:      * Drops the schema if it is empty. If the schema was
1:4112e91:      * the current default then the current default will be
1:4112e91:      * reset through the language connection context.
1:4112e91:      * @throws StandardException Schema could not be dropped.
1:4112e91:      */
1:6950a39: 	public void drop(LanguageConnectionContext lcc,
1:6950a39: 					 Activation activation) throws StandardException
1:4112e91: 	{
1:4112e91:         DataDictionary dd = getDataDictionary();
1:4112e91:         DependencyManager dm = dd.getDependencyManager();
1:4112e91:         TransactionController tc = lcc.getTransactionExecute();
1:4112e91:        
1:4112e91: 	    //If user is attempting to drop SESSION schema and there is no physical SESSION schema, then throw an exception
1:4112e91: 	    //Need to handle it this special way is because SESSION schema is also used for temporary tables. If there is no
1:4112e91: 	    //physical SESSION schema, we internally generate an in-memory SESSION schema in order to support temporary tables
1:4112e91: 	    //But there is no way for the user to access that in-memory SESSION schema. Following if will be true if there is
1:4112e91: 	    //no physical SESSION schema and hence getSchemaDescriptor has returned an in-memory SESSION schema
1:4112e91: 	    if (getSchemaName().equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME)
1:4112e91:                 && (getUUID() == null))
1:4112e91: 	        throw StandardException.newException(SQLState.LANG_SCHEMA_DOES_NOT_EXIST, getSchemaName());
1:4112e91: 	    
1:4112e91: 	    /*
1:4112e91: 	     ** Make sure the schema is empty.
1:4112e91: 	     ** In the future we want to drop everything
1:4112e91: 	     ** in the schema if it is CASCADE.
1:4112e91: 	     */
1:4112e91: 	    if (!dd.isSchemaEmpty(this))
1:4112e91: 	    {
1:4112e91: 	        throw StandardException.newException(SQLState.LANG_SCHEMA_NOT_EMPTY, getSchemaName());
1:4112e91: 	    } 
1:4112e91: 	    
1:4112e91: 	    /* Prepare all dependents to invalidate.  (This is there chance
1:4112e91: 	     * to say that they can't be invalidated.  For example, an open
1:4112e91: 	     * cursor referencing a table/view that the user is attempting to
1:4112e91: 	     * drop.) If no one objects, then invalidate any dependent objects.
1:4112e91: 	     */
1:4112e91: 	    dm.invalidateFor(this, DependencyManager.DROP_SCHEMA, lcc);
1:4112e91: 	    
1:4112e91: 	    dd.dropSchemaDescriptor(getSchemaName(), tc);
1:4112e91: 	    
1:4112e91: 	    /*
1:4112e91: 	     ** If we have dropped the current default schema,
1:4112e91: 	     ** then we will set the default to null.  The
1:4112e91: 	     ** LCC is free to set the new default schema to 
1:4112e91: 	     ** some system defined default.
1:4112e91: 	     */
1:6950a39: 		lcc.resetSchemaUsages(activation, getSchemaName());
1:4112e91: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public final class SchemaDescriptor extends UniqueTupleDescriptor 
1: 	implements Provider
commit:58806b9
/////////////////////////////////////////////////////////////////////////
1: 	private String			aid;
/////////////////////////////////////////////////////////////////////////
1: 	 * Sets the authorization id of the schema. This is only used by the DataDictionary
1:      * during boot in order to patch up the authorization ids on system schemas.
1: 	 *
1: 	 * @param newAuthorizationID What is is
1: 	 */
1: 	public void setAuthorizationId( String newAuthorizationID )
1: 	{
1: 		aid = newAuthorizationID;
1: 	}
1: 
1: 	/**
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:      * @param aid           The authorization id
commit:6950a39
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 	public void drop(LanguageConnectionContext lcc,
1: 					 Activation activation) throws StandardException
/////////////////////////////////////////////////////////////////////////
1: 		lcc.resetSchemaUsages(activation, getSchemaName());
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:6e48cbe
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Returns the collation type associated with this schema 
1: 	 *
1: 	 * @return collation type
1: 	 *
1: 	 */
1: 	public int	getCollationType()
1: 	{
1: 		return collationType;
1: 	}
1: 
commit:7e5a943
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * For system schemas, the only possible value for collation type is
1:      * UCS_BASIC. For user schemas, the collation type can be UCS_BASIC or 
1:      * TERRITORY_BASED.
1:      */
1:     private int collationType;
/////////////////////////////////////////////////////////////////////////
1: 		if (isSystem)
1: 			collationType = dataDictionary.getCollationTypeOfSystemSchemas();
1: 		else
1: 			collationType = dataDictionary.getCollationTypeOfUserSchemas();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4112e91
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     /**
1:      * Drop this schema.
1:      * Drops the schema if it is empty. If the schema was
1:      * the current default then the current default will be
1:      * reset through the language connection context.
1:      * @throws StandardException Schema could not be dropped.
1:      */
0: 	public void drop(LanguageConnectionContext lcc) throws StandardException
1: 	{
1:         DataDictionary dd = getDataDictionary();
1:         DependencyManager dm = dd.getDependencyManager();
1:         TransactionController tc = lcc.getTransactionExecute();
1:        
1: 	    //If user is attempting to drop SESSION schema and there is no physical SESSION schema, then throw an exception
1: 	    //Need to handle it this special way is because SESSION schema is also used for temporary tables. If there is no
1: 	    //physical SESSION schema, we internally generate an in-memory SESSION schema in order to support temporary tables
1: 	    //But there is no way for the user to access that in-memory SESSION schema. Following if will be true if there is
1: 	    //no physical SESSION schema and hence getSchemaDescriptor has returned an in-memory SESSION schema
1: 	    if (getSchemaName().equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME)
1:                 && (getUUID() == null))
1: 	        throw StandardException.newException(SQLState.LANG_SCHEMA_DOES_NOT_EXIST, getSchemaName());
1: 	    
1: 	    /*
1: 	     ** Make sure the schema is empty.
1: 	     ** In the future we want to drop everything
1: 	     ** in the schema if it is CASCADE.
1: 	     */
1: 	    if (!dd.isSchemaEmpty(this))
1: 	    {
1: 	        throw StandardException.newException(SQLState.LANG_SCHEMA_NOT_EMPTY, getSchemaName());
1: 	    } 
1: 	    
1: 	    /* Prepare all dependents to invalidate.  (This is there chance
1: 	     * to say that they can't be invalidated.  For example, an open
1: 	     * cursor referencing a table/view that the user is attempting to
1: 	     * drop.) If no one objects, then invalidate any dependent objects.
1: 	     */
1: 	    dm.invalidateFor(this, DependencyManager.DROP_SCHEMA, lcc);
1: 	    
1: 	    dd.dropSchemaDescriptor(getSchemaName(), tc);
1: 	    
1: 	    /*
1: 	     ** If we have dropped the current default schema,
1: 	     ** then we will set the default to null.  The
1: 	     ** LCC is free to set the new default schema to 
1: 	     ** some system defined default.
1: 	     */
0: 	    SchemaDescriptor currentDefault = lcc.getDefaultSchema();
0: 	    if ((currentDefault != null) &&
0:                 getSchemaName().equals(currentDefault.getSchemaName()))
1: 	    {
0: 	        lcc.setDefaultSchema((SchemaDescriptor)null);
1: 	    }        
commit:feb5bb2
/////////////////////////////////////////////////////////////////////////
0: public final class SchemaDescriptor extends TupleDescriptor 
/////////////////////////////////////////////////////////////////////////
1:     private final boolean isSystem;
1:     private final boolean isSYSIBM;
/////////////////////////////////////////////////////////////////////////
1: 		isSYSIBM = isSystem && IBM_SYSTEM_SCHEMA_NAME.equals(name);
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.SchemaDescriptor
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 1997, 2004.WESTHAM
1: 
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 1997, 2004.
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.Dependable;
1: 
1: /**
1:  * This class represents a schema descriptor
1:  *
1:  * @version 0.1
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class SchemaDescriptor extends TupleDescriptor 
0: 	implements UniqueTupleDescriptor, Provider
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	
1: 	/*
1: 	** When we boot, we put the system tables in
1: 	** in 'SYS', owned by user DBA.
1: 	** '92 talks about two system schemas:
1: 	**
1: 	**		Information Schema: literal name is 
1: 	**		SYS.  This schema contains
1: 	**		a series of well defined views that reference
1: 	**		actual base tables from the Definition Schema.
1: 	**
1: 	**		Definition Schema:  literal name is
1: 	**		DEFINITION_SCHEMA.  This schema contains 
1: 	** 		system tables that can be in any shape or
1: 	**		form.
1: 	**	
1: 	** SYS is owned by SA_USER_NAME (or DBA).
1: 	*/
1:     /**
1:      * STD_SYSTEM_SCHEMA_NAME is the name of the system schema in databases that
0:      * use ANSI standard identifier casing. In LSA and in Cloudscape target 
0:      * databases the name will use the same case as the source database 
0:      * identifiers.
1:      *
0:      * @see org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
1:      */
1:     public static final	String	STD_SYSTEM_SCHEMA_NAME      = "SYS";
1: 
1:     public static final	String	IBM_SYSTEM_SCHEMA_NAME      = "SYSIBM";
1: 
1:     /*
1:      * Names of system schemas.
1:      * The following schemas exist in a standard empty DB2 database.  For
0:      * now creating them in the cloudscape database but not actually putting
1:      * any objects in them.  Users should not be able to create any objects
1:      * in these schemas.
1:      **/
1:     public static final	String	IBM_SYSTEM_CAT_SCHEMA_NAME      = "SYSCAT";
1:     public static final	String	IBM_SYSTEM_FUN_SCHEMA_NAME      = "SYSFUN";
1:     public static final	String	IBM_SYSTEM_PROC_SCHEMA_NAME     = "SYSPROC";
1:     public static final	String	IBM_SYSTEM_STAT_SCHEMA_NAME     = "SYSSTAT";
1:     public static final	String	IBM_SYSTEM_NULLID_SCHEMA_NAME   = "NULLID";
1: 
1:     /**
1:      * This schema is used for jar handling procedures.
1:      **/
1:     public static final	String	STD_SQLJ_SCHEMA_NAME      = "SQLJ";
1:      
1:     /**
0:      * This schema is for cloudscape specific system diagnostic procedures and 
1:      * functions which are not available in DB2.  
1:      **/
1:     public static final	String	STD_SYSTEM_DIAG_SCHEMA_NAME     = "SYSCS_DIAG";
1: 
1:     /**
0:      * This schema is for cloudscape specific system diagnostic procedures and 
1:      * functions which are not available in DB2.  
1:      **/
1:     public static final	String	STD_SYSTEM_UTIL_SCHEMA_NAME     = "SYSCS_UTIL";
1: 
1:     /**
1:      * STD_DEFAULT_SCHEMA_NAME is the name of the default schema in databases 
0:      * that use ANSI standard identifier casing. In LSA and in Cloudscape 
0:      * target databases the name will use the same case as the source database 
0:      * identifiers.
1:      *
0:      * @see org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
1:      */
1:     public	static	final	String	STD_DEFAULT_SCHEMA_NAME = Property.DEFAULT_USER_NAME;
1: 
1: 
1:     /**
1:      * UUID's used as key's in the SYSSCHEMA catalog for the system schema's
1:      **/
1:     public static final String SYSCAT_SCHEMA_UUID      =  
1:         "c013800d-00fb-2641-07ec-000000134f30";
1:     public static final String SYSFUN_SCHEMA_UUID      =  
1:         "c013800d-00fb-2642-07ec-000000134f30";
1:     public static final String SYSPROC_SCHEMA_UUID     =  
1:         "c013800d-00fb-2643-07ec-000000134f30";
1:     public static final String SYSSTAT_SCHEMA_UUID     =  
1:         "c013800d-00fb-2644-07ec-000000134f30";
1:     public static final String SYSCS_DIAG_SCHEMA_UUID  =  
1:         "c013800d-00fb-2646-07ec-000000134f30";
1:     public static final String SYSCS_UTIL_SCHEMA_UUID  =  
1:         "c013800d-00fb-2649-07ec-000000134f30";
1:     public static final String NULLID_SCHEMA_UUID  =  
1:         "c013800d-00fb-2647-07ec-000000134f30";
1:     public static final String SQLJ_SCHEMA_UUID  =  
1:         "c013800d-00fb-2648-07ec-000000134f30";
1: 	public static final	String SYSTEM_SCHEMA_UUID =  
1:         "8000000d-00d0-fd77-3ed8-000a0a0b1900";
1: 	public static final	String SYSIBM_SCHEMA_UUID =  
1:         "c013800d-00f8-5b53-28a9-00000019ed88";
1: 	public static final	String DEFAULT_SCHEMA_UUID = 
1:         "80000000-00d2-b38f-4cda-000a0a412c00";
1: 
1: 
1: 
1:     public	static	final	String	STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME = "SESSION";
1: 	public	static	final	String	DEFAULT_USER_NAME = Property.DEFAULT_USER_NAME;
1: 	public	static	final	String	SA_USER_NAME = "DBA";
1: 
1: 
1: 	/** the public interface for this system:
1: 		<ol>
1: 		<li>public String getSchemaName();
1: 		<li>public String getAuthorizationId();
1: 		<li>public void	setUUID(UUID uuid);
1: 		<li>public boolean isSystemSchema();
1: 		</ol>
1: 	*/
1: 
1: 	//// Implementation
1: 	private final String			name;
1: 	private UUID			oid;
0: 	private final String			aid;
1: 
0:     private boolean isSystem;
0:     private boolean isSYSIBM;
1: 
1: 	/**
1: 	 * Constructor for a SchemaDescriptor.
1: 	 *
1:      * @param dataDictionary
1: 	 * @param name	        The schema descriptor for this table.
1: 	 * @param oid	        The object id
0: 	 * @param aid	        The authorizatin id
1:      * @param isSystem	    boolean, true iff this is a system schema, like SYS,
1:      *                      SYSIBM, SYSCAT, SYSFUN, ....
1: 	 */
1: 	public SchemaDescriptor(
1:     DataDictionary  dataDictionary, 
1:     String          name,
1:     String          aid, 
1:     UUID            oid,
1:     boolean         isSystem)
1: 	{
1: 		super (dataDictionary);
1: 
1: 		this.name = name;
1: 		this.aid = aid;
1: 		this.oid = oid;
1:         this.isSystem = isSystem;
0: 		if (isSystem)
0: 			isSYSIBM = IBM_SYSTEM_SCHEMA_NAME.equals(name);
1: 	}
1: 
1: 	/**
1: 	 * Gets the name of the schema 
1: 	 *
1: 	 * @return	The schema name
1: 	 */
1: 	public String	getSchemaName()
1: 	{
1: 		return name;
1: 	}
1: 
1: 	/**
1: 	 * Gets the authorization id of the schema 
1: 	 *
1: 	 * @return	Authorization id
1: 	 *		lives in.
1: 	 */
1: 	public String getAuthorizationId()
1: 	{
1: 		return aid;
1: 	}
1: 
1: 	/**
1: 	 * Gets the oid of the schema 
1: 	 *
1: 	 * @return	An oid
1: 	 */
1: 	public UUID	getUUID()
1: 	{
1: 		return oid;
1: 	}
1: 
1: 	/**
1: 	 * Sets the oid of the schema 
1: 	 *
1: 	 * @param oid	The object id
1: 	 *
1: 	 */
1: 	public void	setUUID(UUID oid)
1: 	{
1: 		this.oid = oid;
1: 	}
1: 
1: 	//
1: 	// Provider interface
1: 	//
1: 
1: 	/**		
1: 		@return the stored form of this provider
1: 
1: 			@see Dependable#getDependableFinder
1: 	 */
1: 	public DependableFinder getDependableFinder()
1: 	{
1: 		// Is this OK?
1: 	    return	getDependableFinder(StoredFormatIds.SCHEMA_DESCRIPTOR_FINDER_V01_ID);
1: 	}
1: 
1: 	/**
1: 	 * Return the name of this Provider.  (Useful for errors.)
1: 	 *
1: 	 * @return String	The name of this provider.
1: 	 */
1: 	public String getObjectName()
1: 	{
1: 		return name;
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's UUID 
1: 	 *
1: 	 * @return String	The provider's UUID
1: 	 */
1: 	public UUID getObjectID()
1: 	{
1: 		return oid;
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's type.
1: 	 *
1: 	 * @return String		The provider's type.
1: 	 */
1: 	public String getClassType()
1: 	{
1: 		return Dependable.SCHEMA;
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
1: 
1: 	/**
1: 	 * Prints the contents of the SchemaDescriptor
1: 	 *
1: 	 * @return The contents as a String
1: 	 */
1: 	public String toString()
1: 	{
1: 		return name;
1: 	}
1: 
1: 	//	Methods so that we can put SchemaDescriptors on hashed lists
1: 
1: 	/**
1: 	  *	Determine if two SchemaDescriptors are the same.
1: 	  *
1: 	  *	@param	otherObject	other schemadescriptor
1: 	  *
1: 	  *	@return	true if they are the same, false otherwise
1: 	  */
1: 
1: 	public boolean equals(Object otherObject)
1: 	{
1: 		if (!(otherObject instanceof SchemaDescriptor))
1: 			return false;
1: 
1: 		SchemaDescriptor other = (SchemaDescriptor) otherObject;
1: 
1: 		if ((oid != null) && (other.oid != null))
1: 			return oid.equals( other.oid);
1: 		
1: 		return name.equals(other.name);
1: 	}
1: 
1: 	/**
1: 	 * Indicate whether this is a system schema or not
1:      *
1:      * Examples of system schema's include: 
1:      *      SYS, SYSIBM, SYSCAT, SYSFUN, SYSPROC, SYSSTAT, and SYSCS_DIAG 
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean isSystemSchema()
1: 	{
1: 		return(isSystem);
1: 	}
1: 
1: 	public boolean isSYSIBM()
1: 	{
1: 		return isSYSIBM;
1: 	}
1: 
1: 	/**
1: 	  *	Get a hashcode for this SchemaDescriptor
1: 	  *
1: 	  *	@return	hashcode
1: 	  */
1: 	public int hashCode()
1: 	{
1: 		return	oid.hashCode();
1: 	}
1: 	
1: 	/** @see TupleDescriptor#getDescriptorName */
1: 	public String getDescriptorName() 
1: 	{ 
1: 		return name;
1: 	}
1: 	
1: 	/** @see TupleDescriptor#getDescriptorType */
1: 	public String getDescriptorType()
1: 	{
1: 		return "Schema";
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1:      * use ANSI standard identifier casing. 
/////////////////////////////////////////////////////////////////////////
1:      * now creating them in the Derby database but not actually putting
/////////////////////////////////////////////////////////////////////////
1:      * This schema is for Derby specific system diagnostic procedures and 
1:      * This schema is for Derby specific system diagnostic procedures and 
1:      * that use ANSI standard identifier casing. 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1:      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
/////////////////////////////////////////////////////////////////////////
1:      * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d78ad2e
/////////////////////////////////////////////////////////////////////////
0: 	/**
1: 	 * Indicate whether this is a system schema with grantable routines
0: 	 *
1: 	 * @return true/false
0: 	 */
1: 	public boolean isSchemaWithGrantableRoutines()
0: 	{
1: 		if (!isSystem)
1: 			return true;
1: 
1: 		if (name.equals(STD_SQLJ_SCHEMA_NAME) || name.equals(STD_SYSTEM_UTIL_SCHEMA_NAME))
1: 			return true;
1: 
1: 		return false;
0: 	}
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 1997, 2004.
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.Dependable;
0: 
0: /**
0:  * This class represents a schema descriptor
0:  *
0:  * @version 0.1
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class SchemaDescriptor extends TupleDescriptor 
0: 	implements UniqueTupleDescriptor, Provider
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	
0: 	/*
0: 	** When we boot, we put the system tables in
0: 	** in 'SYS', owned by user DBA.
0: 	** '92 talks about two system schemas:
0: 	**
0: 	**		Information Schema: literal name is 
0: 	**		SYS.  This schema contains
0: 	**		a series of well defined views that reference
0: 	**		actual base tables from the Definition Schema.
0: 	**
0: 	**		Definition Schema:  literal name is
0: 	**		DEFINITION_SCHEMA.  This schema contains 
0: 	** 		system tables that can be in any shape or
0: 	**		form.
0: 	**	
0: 	** SYS is owned by SA_USER_NAME (or DBA).
0: 	*/
0:     /**
0:      * STD_SYSTEM_SCHEMA_NAME is the name of the system schema in databases that
0:      * use ANSI standard identifier casing. In LSA and in Cloudscape target 
0:      * databases the name will use the same case as the source database 
0:      * identifiers.
0:      *
0:      * @see org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
0:      */
0:     public static final	String	STD_SYSTEM_SCHEMA_NAME      = "SYS";
0: 
0:     public static final	String	IBM_SYSTEM_SCHEMA_NAME      = "SYSIBM";
0: 
0:     /*
0:      * Names of system schemas.
0:      * The following schemas exist in a standard empty DB2 database.  For
0:      * now creating them in the cloudscape database but not actually putting
0:      * any objects in them.  Users should not be able to create any objects
0:      * in these schemas.
0:      **/
0:     public static final	String	IBM_SYSTEM_CAT_SCHEMA_NAME      = "SYSCAT";
0:     public static final	String	IBM_SYSTEM_FUN_SCHEMA_NAME      = "SYSFUN";
0:     public static final	String	IBM_SYSTEM_PROC_SCHEMA_NAME     = "SYSPROC";
0:     public static final	String	IBM_SYSTEM_STAT_SCHEMA_NAME     = "SYSSTAT";
0:     public static final	String	IBM_SYSTEM_NULLID_SCHEMA_NAME   = "NULLID";
0: 
0:     /**
0:      * This schema is used for jar handling procedures.
0:      **/
0:     public static final	String	STD_SQLJ_SCHEMA_NAME      = "SQLJ";
0:      
0:     /**
0:      * This schema is for cloudscape specific system diagnostic procedures and 
0:      * functions which are not available in DB2.  
0:      **/
0:     public static final	String	STD_SYSTEM_DIAG_SCHEMA_NAME     = "SYSCS_DIAG";
0: 
0:     /**
0:      * This schema is for cloudscape specific system diagnostic procedures and 
0:      * functions which are not available in DB2.  
0:      **/
0:     public static final	String	STD_SYSTEM_UTIL_SCHEMA_NAME     = "SYSCS_UTIL";
0: 
0:     /**
0:      * STD_DEFAULT_SCHEMA_NAME is the name of the default schema in databases 
0:      * that use ANSI standard identifier casing. In LSA and in Cloudscape 
0:      * target databases the name will use the same case as the source database 
0:      * identifiers.
0:      *
0:      * @see org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
0:      */
0:     public	static	final	String	STD_DEFAULT_SCHEMA_NAME = Property.DEFAULT_USER_NAME;
0: 
0: 
0:     /**
0:      * UUID's used as key's in the SYSSCHEMA catalog for the system schema's
0:      **/
0:     public static final String SYSCAT_SCHEMA_UUID      =  
0:         "c013800d-00fb-2641-07ec-000000134f30";
0:     public static final String SYSFUN_SCHEMA_UUID      =  
0:         "c013800d-00fb-2642-07ec-000000134f30";
0:     public static final String SYSPROC_SCHEMA_UUID     =  
0:         "c013800d-00fb-2643-07ec-000000134f30";
0:     public static final String SYSSTAT_SCHEMA_UUID     =  
0:         "c013800d-00fb-2644-07ec-000000134f30";
0:     public static final String SYSCS_DIAG_SCHEMA_UUID  =  
0:         "c013800d-00fb-2646-07ec-000000134f30";
0:     public static final String SYSCS_UTIL_SCHEMA_UUID  =  
0:         "c013800d-00fb-2649-07ec-000000134f30";
0:     public static final String NULLID_SCHEMA_UUID  =  
0:         "c013800d-00fb-2647-07ec-000000134f30";
0:     public static final String SQLJ_SCHEMA_UUID  =  
0:         "c013800d-00fb-2648-07ec-000000134f30";
0: 	public static final	String SYSTEM_SCHEMA_UUID =  
0:         "8000000d-00d0-fd77-3ed8-000a0a0b1900";
0: 	public static final	String SYSIBM_SCHEMA_UUID =  
0:         "c013800d-00f8-5b53-28a9-00000019ed88";
0: 	public static final	String DEFAULT_SCHEMA_UUID = 
0:         "80000000-00d2-b38f-4cda-000a0a412c00";
0: 
0: 
0: 
0:     public	static	final	String	STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME = "SESSION";
0: 	public	static	final	String	DEFAULT_USER_NAME = Property.DEFAULT_USER_NAME;
0: 	public	static	final	String	SA_USER_NAME = "DBA";
0: 
0: 
0: 	/** the public interface for this system:
0: 		<ol>
0: 		<li>public String getSchemaName();
0: 		<li>public String getAuthorizationId();
0: 		<li>public void	setUUID(UUID uuid);
0: 		<li>public boolean isSystemSchema();
0: 		</ol>
0: 	*/
0: 
0: 	//// Implementation
0: 	private final String			name;
0: 	private UUID			oid;
0: 	private final String			aid;
0: 
0:     private boolean isSystem;
0:     private boolean isSYSIBM;
0: 
0: 	/**
0: 	 * Constructor for a SchemaDescriptor.
0: 	 *
0:      * @param dataDictionary
0: 	 * @param name	        The schema descriptor for this table.
0: 	 * @param oid	        The object id
0: 	 * @param aid	        The authorizatin id
0:      * @param isSystem	    boolean, true iff this is a system schema, like SYS,
0:      *                      SYSIBM, SYSCAT, SYSFUN, ....
0: 	 */
0: 	public SchemaDescriptor(
0:     DataDictionary  dataDictionary, 
0:     String          name,
0:     String          aid, 
0:     UUID            oid,
0:     boolean         isSystem)
0: 	{
0: 		super (dataDictionary);
0: 
0: 		this.name = name;
0: 		this.aid = aid;
0: 		this.oid = oid;
0:         this.isSystem = isSystem;
0: 		if (isSystem)
0: 			isSYSIBM = IBM_SYSTEM_SCHEMA_NAME.equals(name);
0: 	}
0: 
0: 	/**
0: 	 * Gets the name of the schema 
0: 	 *
0: 	 * @return	The schema name
0: 	 */
0: 	public String	getSchemaName()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	/**
0: 	 * Gets the authorization id of the schema 
0: 	 *
0: 	 * @return	Authorization id
0: 	 *		lives in.
0: 	 */
0: 	public String getAuthorizationId()
0: 	{
0: 		return aid;
0: 	}
0: 
0: 	/**
0: 	 * Gets the oid of the schema 
0: 	 *
0: 	 * @return	An oid
0: 	 */
0: 	public UUID	getUUID()
0: 	{
0: 		return oid;
0: 	}
0: 
0: 	/**
0: 	 * Sets the oid of the schema 
0: 	 *
0: 	 * @param oid	The object id
0: 	 *
0: 	 */
0: 	public void	setUUID(UUID oid)
0: 	{
0: 		this.oid = oid;
0: 	}
0: 
0: 	//
0: 	// Provider interface
0: 	//
0: 
0: 	/**		
0: 		@return the stored form of this provider
0: 
0: 			@see Dependable#getDependableFinder
0: 	 */
0: 	public DependableFinder getDependableFinder()
0: 	{
0: 		// Is this OK?
0: 	    return	getDependableFinder(StoredFormatIds.SCHEMA_DESCRIPTOR_FINDER_V01_ID);
0: 	}
0: 
0: 	/**
0: 	 * Return the name of this Provider.  (Useful for errors.)
0: 	 *
0: 	 * @return String	The name of this provider.
0: 	 */
0: 	public String getObjectName()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's UUID 
0: 	 *
0: 	 * @return String	The provider's UUID
0: 	 */
0: 	public UUID getObjectID()
0: 	{
0: 		return oid;
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's type.
0: 	 *
0: 	 * @return String		The provider's type.
0: 	 */
0: 	public String getClassType()
0: 	{
0: 		return Dependable.SCHEMA;
0: 	}
0: 
0: 	//
0: 	// class interface
0: 	//
0: 
0: 	/**
0: 	 * Prints the contents of the SchemaDescriptor
0: 	 *
0: 	 * @return The contents as a String
0: 	 */
0: 	public String toString()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	//	Methods so that we can put SchemaDescriptors on hashed lists
0: 
0: 	/**
0: 	  *	Determine if two SchemaDescriptors are the same.
0: 	  *
0: 	  *	@param	otherObject	other schemadescriptor
0: 	  *
0: 	  *	@return	true if they are the same, false otherwise
0: 	  */
0: 
0: 	public boolean equals(Object otherObject)
0: 	{
0: 		if (!(otherObject instanceof SchemaDescriptor))
0: 			return false;
0: 
0: 		SchemaDescriptor other = (SchemaDescriptor) otherObject;
0: 
0: 		if ((oid != null) && (other.oid != null))
0: 			return oid.equals( other.oid);
0: 		
0: 		return name.equals(other.name);
0: 	}
0: 
0: 	/**
0: 	 * Indicate whether this is a system schema or not
0:      *
0:      * Examples of system schema's include: 
0:      *      SYS, SYSIBM, SYSCAT, SYSFUN, SYSPROC, SYSSTAT, and SYSCS_DIAG 
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean isSystemSchema()
0: 	{
0: 		return(isSystem);
0: 	}
0: 
0: 	public boolean isSYSIBM()
0: 	{
0: 		return isSYSIBM;
0: 	}
0: 
0: 	/**
0: 	  *	Get a hashcode for this SchemaDescriptor
0: 	  *
0: 	  *	@return	hashcode
0: 	  */
0: 	public int hashCode()
0: 	{
0: 		return	oid.hashCode();
0: 	}
0: 	
0: 	/** @see TupleDescriptor#getDescriptorName */
0: 	public String getDescriptorName() 
0: 	{ 
0: 		return name;
0: 	}
0: 	
0: 	/** @see TupleDescriptor#getDescriptorType */
0: 	public String getDescriptorType()
0: 	{
0: 		return "Schema";
0: 	}
0: }
============================================================================