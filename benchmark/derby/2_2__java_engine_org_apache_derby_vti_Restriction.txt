1:86f2ca1: /*
4:86f2ca1: 
1:86f2ca1:    Derby - Class org.apache.derby.vti.Restriction
1:86f2ca1: 
1:86f2ca1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:86f2ca1:    contributor license agreements.  See the NOTICE file distributed with
1:86f2ca1:    this work for additional information regarding copyright ownership.
1:86f2ca1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:86f2ca1:    (the "License"); you may not use this file except in compliance with
1:86f2ca1:    the License.  You may obtain a copy of the License at
1:86f2ca1: 
1:86f2ca1:       http://www.apache.org/licenses/LICENSE-2.0
1:86f2ca1: 
1:86f2ca1:    Unless required by applicable law or agreed to in writing, software
1:86f2ca1:    distributed under the License is distributed on an "AS IS" BASIS,
1:86f2ca1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86f2ca1:    See the License for the specific language governing permissions and
1:86f2ca1:    limitations under the License.
1:86f2ca1: 
2:86f2ca1:  */
1:86f2ca1: package org.apache.derby.vti;
1:86f2ca1: 
1:a2d0847: import java.io.Serializable;
1:9c18d66: import org.apache.derby.iapi.util.IdUtil;
1:86f2ca1: 
2:86f2ca1: /**
1:86f2ca1:    <p>
1:86f2ca1:  * An expression to be pushed into a Table Function so that the Table Function
1:86f2ca1:  * can short-circuit its processing and return fewer rows. A restriction is represented
1:86f2ca1:  * as a binary tree. The non-leaf nodes are ANDs and ORs. The leaf nodes
1:86f2ca1:  * are ColumnQualifiers. A ColumnQualifier
1:86f2ca1:  * is a simple expression comparing a constant value to a column in
1:86f2ca1:  * the Table Function.
2:86f2ca1:  * </p>
1:86f2ca1:  */
1:a2d0847: public abstract class Restriction implements Serializable
1:86f2ca1: {
1:a2d0847:     /**
1:a2d0847:      * Turn this Restriction into a string suitable for use in a WHERE clause.
1:a2d0847:      */
1:a2d0847:     public abstract String toSQL();
1:a2d0847: 
1:a2d0847:     /** Utility method to parenthesize an expression */
1:a2d0847:     protected String parenthesize( String raw ) { return "( " + raw + " )"; }
1:a2d0847:     
1:86f2ca1:     /** An AND of two Restrictions */
1:86f2ca1:     public static class AND extends Restriction
1:86f2ca1:     {
1:a2d0847:         /** Derby serializes these objects in PreparedStatements */
1:a2d0847:         public static final long serialVersionUID = -8205388794606605844L;
1:a2d0847:         
1:86f2ca1:         private Restriction _leftChild;
1:86f2ca1:         private Restriction _rightChild;
1:a2d0847: 
1:86f2ca1:         /** AND together two other Restrictions */
1:86f2ca1:         public AND( Restriction leftChild, Restriction rightChild )
1:86f2ca1:         {
1:86f2ca1:             _leftChild = leftChild;
1:86f2ca1:             _rightChild = rightChild;
1:86f2ca1:         }
1:86f2ca1: 
1:86f2ca1:         /** Get the left Restriction */
1:86f2ca1:         public Restriction getLeftChild() { return _leftChild; }
1:86f2ca1: 
1:86f2ca1:         /** Get the right Restriction */
1:86f2ca1:         public Restriction getRightChild() { return _rightChild; }
1:a2d0847:         
1:a2d0847:         public String toSQL()
1:a2d0847:         {
1:a2d0847:             return parenthesize( _leftChild.toSQL() ) + " AND " + parenthesize( _rightChild.toSQL() );
1:a2d0847:         }
1:86f2ca1:     }
1:a2d0847: 
1:86f2ca1:     /** An OR of two Restrictions */
1:86f2ca1:     public static class OR extends Restriction
1:a2d0847:     {
1:a2d0847:         /** Derby serializes these objects in PreparedStatements */
1:a2d0847:         public static final long serialVersionUID = -8205388794606605844L;
1:a2d0847:         
1:86f2ca1:         private Restriction _leftChild;
1:86f2ca1:         private Restriction _rightChild;
1:86f2ca1: 
1:86f2ca1:         /** OR together two other Restrictions */
1:86f2ca1:         public OR( Restriction leftChild, Restriction rightChild )
1:86f2ca1:         {
1:86f2ca1:             _leftChild = leftChild;
1:86f2ca1:             _rightChild = rightChild;
1:86f2ca1:         }
1:86f2ca1: 
1:86f2ca1:         /** Get the left Restriction */
1:86f2ca1:         public Restriction getLeftChild() { return _leftChild; }
1:86f2ca1: 
1:86f2ca1:         /** Get the right Restriction */
1:86f2ca1:         public Restriction getRightChild() { return _rightChild; }
1:86f2ca1: 
1:a2d0847:         public String toSQL()
1:86f2ca1:         {
1:a2d0847:             return parenthesize( _leftChild.toSQL() ) + " OR " + parenthesize( _rightChild.toSQL() );
1:a2d0847:         }
1:86f2ca1:     }
1:86f2ca1: 
1:86f2ca1:     /**
1:86f2ca1:        <p>
1:86f2ca1:        * A simple comparison of a column to a constant value. The comparison
1:86f2ca1:        * has the form:
1:86f2ca1:        * </p>
1:86f2ca1:        *
1:86f2ca1:        * <blockquote><pre>
1:86f2ca1:        * column OP constant
1:86f2ca1:        * </pre></blockquote>
1:86f2ca1:        *
2:86f2ca1:        * <p>
1:86f2ca1:        * where OP is one of the following:
1:86f2ca1:        * </p>
1:86f2ca1:        *
1:86f2ca1:        * <blockquote><pre>
1:dbed020:        *  &lt;     =     &lt;=     &gt;      &gt;=    IS NULL    IS NOT NULL
1:86f2ca1:        * </pre></blockquote>
1:86f2ca1:        */
1:86f2ca1:     public static class ColumnQualifier extends Restriction
1:86f2ca1:     {
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1:         //
1:86f2ca1:         // CONSTANTS
1:86f2ca1:         //
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:a2d0847: 
1:a2d0847:         /** Derby serializes these objects in PreparedStatements */
1:a2d0847:         public static final long serialVersionUID = -8205388794606605844L;
1:86f2ca1:         
1:dbed020:         /**	 Ordering operation constant representing '&lt;' **/
1:a2d0847:         public static final int ORDER_OP_LESSTHAN = 0;
1:86f2ca1: 
1:86f2ca1:         /**	 Ordering operation constant representing '=' **/
1:a2d0847:         public static final int ORDER_OP_EQUALS = 1;
1:86f2ca1: 
1:dbed020:         /**	 Ordering operation constant representing '&lt;=' **/
1:a2d0847:         public static final int ORDER_OP_LESSOREQUALS = 2;
1:86f2ca1: 
1:dbed020:         /**	 Ordering operation constant representing '&gt;' **/
1:a2d0847:         public static final int ORDER_OP_GREATERTHAN = 3;
1:86f2ca1: 
1:dbed020:         /**	 Ordering operation constant representing '&gt;=' **/
1:a2d0847:         public static final int ORDER_OP_GREATEROREQUALS = 4;
1:a2d0847: 
1:a2d0847:         /**	 Ordering operation constant representing 'IS NULL' **/
1:a2d0847:         public static final int ORDER_OP_ISNULL = 5;
1:a2d0847: 
1:a2d0847:         /**	 Ordering operation constant representing 'IS NOT NULL' **/
1:a2d0847:         public static final int ORDER_OP_ISNOTNULL = 6;
1:a2d0847: 
1:0d2a54f:         /**	 Ordering operation constant representing '!=' **/
1:0d2a54f:         public static final int ORDER_OP_NOT_EQUALS = 7;
1:0d2a54f: 
1:a2d0847:         // Visible forms of the constants above
1:0d2a54f:         private String[] OPERATOR_SYMBOLS = new String[] {  "<", "=", "<=", ">", ">=", "IS NULL", "IS NOT NULL", "!=" };
1:86f2ca1: 
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1:         //
1:86f2ca1:         // STATE
1:86f2ca1:         //
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1: 
1:86f2ca1:         /** name of column being restricted */
1:86f2ca1:         private String _columnName;
1:86f2ca1: 
1:86f2ca1:         /** comparison operator, one of the ORDER_OP constants */
1:86f2ca1:         private int     _comparisonOperator;
1:86f2ca1: 
1:86f2ca1:         /** value to compare the column to */
1:86f2ca1:         private Object _constantOperand;
1:86f2ca1:         
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1:         //
1:86f2ca1:         // CONSTRUCTORS
1:86f2ca1:         //
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1: 
1:86f2ca1:         /**
1:86f2ca1:          * <p>
1:86f2ca1:          * Construct from pieces.
1:86f2ca1:          * </p>
1:86f2ca1:          *
1:86f2ca1:          * @param columnName Name of column as declared in the CREATE FUNCTION statement.
1:86f2ca1:          * @param comparisonOperator One of the ORDER_OP constants.
1:86f2ca1:          * @param constantOperand Constant value to which the column should be compared.
1:86f2ca1:          */
1:86f2ca1:         public ColumnQualifier
1:86f2ca1:             (
1:86f2ca1:              String columnName,
1:86f2ca1:              int comparisonOperator,
1:86f2ca1:              Object constantOperand
1:86f2ca1:              )
1:86f2ca1:         {
1:86f2ca1:             _columnName = columnName;
1:86f2ca1:             _comparisonOperator = comparisonOperator;
1:86f2ca1:             _constantOperand = constantOperand;
1:86f2ca1:         }
1:86f2ca1:         
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1:         //
1:86f2ca1:         // ACCESSORS
1:86f2ca1:         //
1:86f2ca1:         ////////////////////////////////////////////////////////////////////////////////////////
1:86f2ca1:         
1:86f2ca1:         /**
1:86f2ca1:          * <p>
1:86f2ca1:          * The name of the column being compared.
1:86f2ca1:          * </p>
1:86f2ca1:          */
1:86f2ca1:         public String getColumnName() { return _columnName; }
1:86f2ca1: 
1:86f2ca1:         /**
1:86f2ca1:          * <p>
1:86f2ca1:          * The type of comparison to perform. This is one of the ORDER_OP constants
1:86f2ca1:          * defined above.
1:86f2ca1:          * </p>
1:86f2ca1:          */
1:86f2ca1:         public int getComparisonOperator() { return _comparisonOperator; }
1:86f2ca1: 
1:86f2ca1:         /**
1:86f2ca1:          * <p>
1:86f2ca1:          * Get the constant value to which the column should be compared. The
1:86f2ca1:          * constant value must be an Object of the Java type which corresponds to
1:86f2ca1:          * the SQL type of the column. The column's SQL type was declared in the CREATE FUNCTION statement.
1:86f2ca1:          * The mapping of SQL types to Java types is defined in table 4 of chapter 14
1:86f2ca1:          * of the original JDBC 1 specification (dated 1996). Bascially, these are the Java
1:86f2ca1:          * wrapper values you would expect. For instance, SQL INT maps to java.lang.Integer, SQL CHAR
1:a2d0847:          * maps to java.lang.String, etc.. This object will be null if the
1:a2d0847:          * comparison operator is ORDER_OP_ISNULL or ORDER_OP_ISNOTNULL.
1:86f2ca1:          * </p>
1:86f2ca1:          */
1:86f2ca1:         public Object getConstantOperand() { return _constantOperand; }
1:a2d0847:         
1:a2d0847:         public String toSQL()
1:a2d0847:         {
1:a2d0847:             StringBuffer buffer = new StringBuffer();
1:a2d0847: 
1:9c18d66:             buffer.append( IdUtil.normalToDelimited( _columnName ) );
1:a2d0847:             buffer.append( " " + OPERATOR_SYMBOLS[ _comparisonOperator ] + " " );
1:8f23d8f:             if ( _constantOperand != null ) { buffer.append( toEscapedString( _constantOperand ) ); }
1:a2d0847: 
1:a2d0847:             return buffer.toString();
1:a2d0847:         }
1:8f23d8f: 
1:8f23d8f:         protected String toEscapedString(Object o) {
1:8f23d8f:             if (o instanceof java.sql.Timestamp) {
1:8f23d8f:                 return "TIMESTAMP('" + o.toString() + "')";
1:8f23d8f:             } else if (o instanceof java.sql.Date) {
1:8f23d8f:                 return "DATE('" + o.toString() + "')";
1:8f23d8f:             } else if (o instanceof java.sql.Time) {
1:8f23d8f:                 return "TIME('" + o.toString() + "')";
1:8f23d8f:             } else if (o instanceof String) {
1:8f23d8f:                 return "\'" + o.toString() + "\'";
1:8f23d8f:             } else if (o instanceof byte[]) {
1:8f23d8f:                 byte[] b = (byte[]) o;
1:8f23d8f:                 return "X\'" + org.apache.derby.iapi.util.StringUtil.toHexString(b, 0, b.length) + "\'" ;
1:8f23d8f:             } else {
1:8f23d8f:                 return o.toString();
1:8f23d8f:             }
1:8f23d8f:         }
1:86f2ca1:     }
1:86f2ca1:     
1:86f2ca1: }
1:86f2ca1: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:        *  &lt;     =     &lt;=     &gt;      &gt;=    IS NULL    IS NOT NULL
/////////////////////////////////////////////////////////////////////////
1:         /**	 Ordering operation constant representing '&lt;' **/
1:         /**	 Ordering operation constant representing '&lt;=' **/
1:         /**	 Ordering operation constant representing '&gt;' **/
1:         /**	 Ordering operation constant representing '&gt;=' **/
commit:0d2a54f
/////////////////////////////////////////////////////////////////////////
1:         /**	 Ordering operation constant representing '!=' **/
1:         public static final int ORDER_OP_NOT_EQUALS = 7;
1: 
1:         private String[] OPERATOR_SYMBOLS = new String[] {  "<", "=", "<=", ">", ">=", "IS NULL", "IS NOT NULL", "!=" };
commit:8f23d8f
/////////////////////////////////////////////////////////////////////////
1:             if ( _constantOperand != null ) { buffer.append( toEscapedString( _constantOperand ) ); }
1: 
1:         protected String toEscapedString(Object o) {
1:             if (o instanceof java.sql.Timestamp) {
1:                 return "TIMESTAMP('" + o.toString() + "')";
1:             } else if (o instanceof java.sql.Date) {
1:                 return "DATE('" + o.toString() + "')";
1:             } else if (o instanceof java.sql.Time) {
1:                 return "TIME('" + o.toString() + "')";
1:             } else if (o instanceof String) {
1:                 return "\'" + o.toString() + "\'";
1:             } else if (o instanceof byte[]) {
1:                 byte[] b = (byte[]) o;
1:                 return "X\'" + org.apache.derby.iapi.util.StringUtil.toHexString(b, 0, b.length) + "\'" ;
1:             } else {
1:                 return o.toString();
1:             }
1:         }
commit:a2d0847
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public abstract class Restriction implements Serializable
1:     /**
1:      * Turn this Restriction into a string suitable for use in a WHERE clause.
1:      */
1:     public abstract String toSQL();
1: 
0:     /** Utility method to double quote a string */
0:     protected String doubleQuote( String raw ) { return "\"" + raw + "\""; }
1: 
1:     /** Utility method to parenthesize an expression */
1:     protected String parenthesize( String raw ) { return "( " + raw + " )"; }
1:     
1:         /** Derby serializes these objects in PreparedStatements */
1:         public static final long serialVersionUID = -8205388794606605844L;
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:         public String toSQL()
1:         {
1:             return parenthesize( _leftChild.toSQL() ) + " AND " + parenthesize( _rightChild.toSQL() );
1:         }
1:         /** Derby serializes these objects in PreparedStatements */
1:         public static final long serialVersionUID = -8205388794606605844L;
1:         
/////////////////////////////////////////////////////////////////////////
1: 
1:         public String toSQL()
1:         {
1:             return parenthesize( _leftChild.toSQL() ) + " OR " + parenthesize( _rightChild.toSQL() );
1:         }
/////////////////////////////////////////////////////////////////////////
0:        *  <     =     <=     >      >=    IS NULL    IS NOT NULL
/////////////////////////////////////////////////////////////////////////
1: 
1:         /** Derby serializes these objects in PreparedStatements */
1:         public static final long serialVersionUID = -8205388794606605844L;
1:         public static final int ORDER_OP_LESSTHAN = 0;
1:         public static final int ORDER_OP_EQUALS = 1;
1:         public static final int ORDER_OP_LESSOREQUALS = 2;
1:         public static final int ORDER_OP_GREATERTHAN = 3;
1:         public static final int ORDER_OP_GREATEROREQUALS = 4;
1: 
1:         /**	 Ordering operation constant representing 'IS NULL' **/
1:         public static final int ORDER_OP_ISNULL = 5;
1: 
1:         /**	 Ordering operation constant representing 'IS NOT NULL' **/
1:         public static final int ORDER_OP_ISNOTNULL = 6;
1: 
1:         // Visible forms of the constants above
0:         private String[] OPERATOR_SYMBOLS = new String[] {  "<", "=", "<=", ">", ">=", "IS NULL", "IS NOT NULL" };
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:          * maps to java.lang.String, etc.. This object will be null if the
1:          * comparison operator is ORDER_OP_ISNULL or ORDER_OP_ISNOTNULL.
1:         
1:         public String toSQL()
1:         {
1:             StringBuffer buffer = new StringBuffer();
1: 
0:             buffer.append( doubleQuote( _columnName ) );
1:             buffer.append( " " + OPERATOR_SYMBOLS[ _comparisonOperator ] + " " );
0:             if ( _constantOperand != null ) { buffer.append( _constantOperand ); }
1: 
1:             return buffer.toString();
1:         }
commit:86f2ca1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.vti.Restriction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.vti;
1: 
0: import java.sql.SQLException;
1: 
1: /**
1:    <p>
1:  * An expression to be pushed into a Table Function so that the Table Function
1:  * can short-circuit its processing and return fewer rows. A restriction is represented
1:  * as a binary tree. The non-leaf nodes are ANDs and ORs. The leaf nodes
1:  * are ColumnQualifiers. A ColumnQualifier
1:  * is a simple expression comparing a constant value to a column in
1:  * the Table Function.
1:  * </p>
1:  */
0: public abstract class Restriction
1: {
1:     /** An AND of two Restrictions */
1:     public static class AND extends Restriction
1:     {
1:         private Restriction _leftChild;
1:         private Restriction _rightChild;
1: 
1:         /** AND together two other Restrictions */
1:         public AND( Restriction leftChild, Restriction rightChild )
1:         {
1:             _leftChild = leftChild;
1:             _rightChild = rightChild;
1:         }
1: 
1:         /** Get the left Restriction */
1:         public Restriction getLeftChild() { return _leftChild; }
1: 
1:         /** Get the right Restriction */
1:         public Restriction getRightChild() { return _rightChild; }
1:     }
1: 
1:     /** An OR of two Restrictions */
1:     public static class OR extends Restriction
1:     {
1:         private Restriction _leftChild;
1:         private Restriction _rightChild;
1: 
1:         /** OR together two other Restrictions */
1:         public OR( Restriction leftChild, Restriction rightChild )
1:         {
1:             _leftChild = leftChild;
1:             _rightChild = rightChild;
1:         }
1: 
1:         /** Get the left Restriction */
1:         public Restriction getLeftChild() { return _leftChild; }
1: 
1:         /** Get the right Restriction */
1:         public Restriction getRightChild() { return _rightChild; }
1:     }
1: 
1:     /**
1:        <p>
1:        * A simple comparison of a column to a constant value. The comparison
1:        * has the form:
1:        * </p>
1:        *
1:        * <blockquote><pre>
1:        * column OP constant
1:        * </pre></blockquote>
1:        *
1:        * <p>
1:        * where OP is one of the following:
1:        * </p>
1:        *
1:        * <blockquote><pre>
0:        *  <     =     <=     >      >=
1:        * </pre></blockquote>
1:        */
1:     public static class ColumnQualifier extends Restriction
1:     {
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         //
1:         // CONSTANTS
1:         //
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         
0:         /**	 Ordering operation constant representing '<' **/
0:         public static final int ORDER_OP_LESSTHAN = 1;
1: 
1:         /**	 Ordering operation constant representing '=' **/
0:         public static final int ORDER_OP_EQUALS = 2;
1: 
0:         /**	 Ordering operation constant representing '<=' **/
0:         public static final int ORDER_OP_LESSOREQUALS = 3;
1: 
0:         /**	 Ordering operation constant representing '>' **/
0:         public static final int ORDER_OP_GREATERTHAN = 4;
1: 
0:         /**	 Ordering operation constant representing '>=' **/
0:         public static final int ORDER_OP_GREATEROREQUALS = 5;
1: 
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         //
1:         // STATE
1:         //
1:         ////////////////////////////////////////////////////////////////////////////////////////
1: 
1:         /** name of column being restricted */
1:         private String _columnName;
1: 
1:         /** comparison operator, one of the ORDER_OP constants */
1:         private int     _comparisonOperator;
1: 
0:         /** null handling */
0:         private boolean _nullEqualsNull;
1: 
1:         /** value to compare the column to */
1:         private Object _constantOperand;
1:         
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         //
1:         // CONSTRUCTORS
1:         //
1:         ////////////////////////////////////////////////////////////////////////////////////////
1: 
1:         /**
1:          * <p>
1:          * Construct from pieces.
1:          * </p>
1:          *
1:          * @param columnName Name of column as declared in the CREATE FUNCTION statement.
1:          * @param comparisonOperator One of the ORDER_OP constants.
0:          * @param nullEqualsNull True if NULLS should be treated like ordinary values which sort before all other values. Used to encode IS NULL comparisons.
1:          * @param constantOperand Constant value to which the column should be compared.
1:          */
1:         public ColumnQualifier
1:             (
1:              String columnName,
1:              int comparisonOperator,
0:              boolean nullEqualsNull,
1:              Object constantOperand
1:              )
1:         {
1:             _columnName = columnName;
1:             _comparisonOperator = comparisonOperator;
0:             _nullEqualsNull = nullEqualsNull;
1:             _constantOperand = constantOperand;
1:         }
1:         
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         //
1:         // ACCESSORS
1:         //
1:         ////////////////////////////////////////////////////////////////////////////////////////
1:         
1:         /**
1:          * <p>
1:          * The name of the column being compared.
1:          * </p>
1:          */
1:         public String getColumnName() { return _columnName; }
1: 
1:         /**
1:          * <p>
1:          * The type of comparison to perform. This is one of the ORDER_OP constants
1:          * defined above.
1:          * </p>
1:          */
1:         public int getComparisonOperator() { return _comparisonOperator; }
1: 
1:         /**
1:          * <p>
0:          * Specifies how nulls behave in comparisons. If true, then nulls are
0:          * treated as values which sort before all other values; and the = comparison
0:          * between two nulls evaluates to TRUE. If this method returns false, then
0:          * any comparison involving a null evaluates to UNKNOWN. This is useful
0:          * for encoding IS NULL comparisons.
1:          * </p>
1:          */
0:         public boolean nullEqualsNull() { return _nullEqualsNull; }
1: 
1:         /**
1:          * <p>
1:          * Get the constant value to which the column should be compared. The
1:          * constant value must be an Object of the Java type which corresponds to
1:          * the SQL type of the column. The column's SQL type was declared in the CREATE FUNCTION statement.
1:          * The mapping of SQL types to Java types is defined in table 4 of chapter 14
1:          * of the original JDBC 1 specification (dated 1996). Bascially, these are the Java
1:          * wrapper values you would expect. For instance, SQL INT maps to java.lang.Integer, SQL CHAR
0:          * maps to java.lang.String, etc..
1:          * </p>
1:          */
1:         public Object getConstantOperand() { return _constantOperand; }
1:     }
1:     
1: }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9c18d66
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             buffer.append( IdUtil.normalToDelimited( _columnName ) );
============================================================================