1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_User
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.locks.*;
1:2bc809f: 
1:2bc809f: class T_User implements Runnable {
1:2bc809f: 
1:2bc809f: 	private LockFactory lf;
1:2bc809f: 	private Lockable[] refs;
1:2bc809f: 	private long iterations;
1:2bc809f: 	private long offset;
1:2bc809f: 	private int test;
1:2bc809f: 
1:2bc809f: 	Throwable error = null;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	T_User(int test, LockFactory lf, Lockable[] refs, long iterations, long offset) {
1:2bc809f: 
1:2bc809f: 		this.lf = lf;
1:2bc809f: 		this.refs = refs;
1:2bc809f: 		this.iterations = iterations;
1:2bc809f: 		this.test = test;
1:2bc809f: 		this.offset = offset;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void run() {
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			switch (test) {
1:2bc809f: 			case 1:
1:2bc809f: 				T001();
1:2bc809f: 				break;
1:2bc809f: 			case 2:
1:2bc809f: 				T002();
1:2bc809f: 				break;
1:2bc809f: 			case 3:
1:2bc809f: 				T003();
1:2bc809f: 				break;
1:2bc809f: 			}
1:2bc809f: 		} catch (Throwable t) {
1:2bc809f: 			error = t;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void T001() throws StandardException, T_Fail {
1:2bc809f: 
1:3c1f634: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
1:39b3237: 		Integer g0 = 1;	// create an object for a lock group
1:2bc809f: 
1:2bc809f: 		// check we have no locks held
1:2bc809f: 		checkLockCount(cs, 0);
1:2bc809f: 
1:2bc809f: 		T_L1 ref;
1:2bc809f: 
1:2bc809f: 		while (--iterations > 0) {
1:2bc809f: 			long value = offset + iterations;
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			ref = (T_L1) refs[0];
1:2bc809f: 			ref.value = value;
1:2bc809f: 			checkLockCount(cs, 1);
1:2bc809f: 			Thread.yield();
1:2bc809f: 			checkValue(ref, value);
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[1], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			ref = (T_L1) refs[1];
1:2bc809f: 			ref.value = value;
1:2bc809f: 			Thread.yield();
1:2bc809f: 
1:2bc809f: 			checkValue((T_L1) refs[0], value);
1:2bc809f: 			checkValue((T_L1) refs[1], value);
1:2bc809f: 
1:2bc809f: 			lf.unlock(cs, g0, refs[0], null);
1:2bc809f: 			checkValue((T_L1) refs[1], value);
1:2bc809f: 
1:2bc809f: 			Thread.yield();
1:2bc809f: 
1:2bc809f: 			lf.unlock(cs, g0, refs[1], null);
1:2bc809f: 
1:2bc809f: 			// check we have no locks held
1:2bc809f: 			checkLockCount(cs, 0);
1:2bc809f: 
1:2bc809f: 			Thread.yield();
1:2bc809f: 
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void T002() throws StandardException, T_Fail {
1:2bc809f: 
1:3c1f634: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
1:39b3237: 		Integer g0 = 1;	// create an object for a lock group
1:2bc809f: 
1:2bc809f: 		// check we have no locks held
1:2bc809f: 		checkLockCount(cs, 0);
1:2bc809f: 
1:2bc809f: 		while (--iterations > 0) {
1:2bc809f: 			long value = offset + iterations;
1:2bc809f: 			T_L1 ref = (T_L1) refs[0];
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			ref.value = value;
1:2bc809f: 			checkLockCount(cs, 1);
1:2bc809f: 			Thread.yield();
1:2bc809f: 			checkValue(ref, value);
1:2bc809f: 
1:2bc809f: 			lf.unlock(cs, g0, refs[0], null);
1:2bc809f: 
1:2bc809f: 			// check we have no locks held
1:2bc809f: 			checkLockCount(cs, 0);
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void T003() throws StandardException, T_Fail {
1:2bc809f: 
1:3c1f634: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
1:39b3237: 		Integer g0 = 1;	// create an object for a lock group
1:2bc809f: 
1:2bc809f: 		// check we have no locks held
1:2bc809f: 		checkLockCount(cs, 0);
1:2bc809f: 
1:2bc809f: 		while (--iterations > 0) {
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			checkLockCount(cs, 1);
1:2bc809f: 			Thread.yield();
1:2bc809f: 			lf.unlock(cs, g0, refs[0], null);
1:2bc809f: 
1:2bc809f: 			// check we have no locks held
1:2bc809f: 			checkLockCount(cs, 0);
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 	private void T004() throws StandardException, T_Fail {
1:2bc809f: 
1:3c1f634: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
1:39b3237: 		Integer g0 = 1;	// create an object for a lock group
1:2bc809f: 
1:2bc809f: 		// check we have no locks held
1:2bc809f: 		checkLockCount(cs, 0);
1:2bc809f: 
1:2bc809f: 		while (--iterations > 0) {
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			checkLockCount(cs, 1);
1:2bc809f: 			Thread.yield();
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1:2bc809f: 			checkLockCount(cs, 2);
1:2bc809f: 			Thread.yield();
1:2bc809f: 
1:2bc809f: 			lf.unlockGroup(cs, g0);
1:2bc809f: 
1:2bc809f: 			// check we have no locks held
1:2bc809f: 			checkLockCount(cs, 0);
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void checkValue(T_L1 item, long value) throws T_Fail {
1:2bc809f: 		if (item.value  != value)
1:2bc809f: 			throw T_Fail.testFailMsg("value corrupted in multi-user test, exapected " + value + ", got " + item.value);
1:2bc809f: 	}
1:2bc809f: 
1:3c1f634: 	void checkLockCount(CompatibilitySpace cs, int expected) throws T_Fail {
1:2bc809f: 		boolean expect = expected != 0;
1:2bc809f: 		boolean got = lf.areLocksHeld(cs);
1:2bc809f: 		if (got != expect)
1:2bc809f: 			throw T_Fail.testFailMsg("Expected lock count (" + expect + "), got (" + got + ")");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1: 		Integer g0 = 1;	// create an object for a lock group
/////////////////////////////////////////////////////////////////////////
1: 		Integer g0 = 1;	// create an object for a lock group
/////////////////////////////////////////////////////////////////////////
1: 		Integer g0 = 1;	// create an object for a lock group
/////////////////////////////////////////////////////////////////////////
1: 		Integer g0 = 1;	// create an object for a lock group
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
/////////////////////////////////////////////////////////////////////////
1: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
/////////////////////////////////////////////////////////////////////////
1: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
/////////////////////////////////////////////////////////////////////////
1: 		CompatibilitySpace cs = lf.createCompatibilitySpace(null);
/////////////////////////////////////////////////////////////////////////
1: 	void checkLockCount(CompatibilitySpace cs, int expected) throws T_Fail {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_User
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.locks.*;
1: 
1: class T_User implements Runnable {
1: 
1: 	private LockFactory lf;
1: 	private Lockable[] refs;
1: 	private long iterations;
1: 	private long offset;
1: 	private int test;
1: 
1: 	Throwable error = null;
1: 
1: 
1: 
1: 	T_User(int test, LockFactory lf, Lockable[] refs, long iterations, long offset) {
1: 
1: 		this.lf = lf;
1: 		this.refs = refs;
1: 		this.iterations = iterations;
1: 		this.test = test;
1: 		this.offset = offset;
1: 	}
1: 
1: 	public void run() {
1: 
1: 		try {
1: 			switch (test) {
1: 			case 1:
1: 				T001();
1: 				break;
1: 			case 2:
1: 				T002();
1: 				break;
1: 			case 3:
1: 				T003();
1: 				break;
1: 			}
1: 		} catch (Throwable t) {
1: 			error = t;
1: 		}
1: 	}
1: 
1: 	private void T001() throws StandardException, T_Fail {
1: 
0: 		Object cs = new Object();	// create an object for the compatability space
0: 		Integer g0 = new Integer(1);	// create an object for a lock group
1: 
1: 		// check we have no locks held
1: 		checkLockCount(cs, 0);
1: 
1: 		T_L1 ref;
1: 
1: 		while (--iterations > 0) {
1: 			long value = offset + iterations;
1: 
1: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1: 			ref = (T_L1) refs[0];
1: 			ref.value = value;
1: 			checkLockCount(cs, 1);
1: 			Thread.yield();
1: 			checkValue(ref, value);
1: 
1: 			lf.lockObject(cs, g0, refs[1], null, C_LockFactory.WAIT_FOREVER);
1: 			ref = (T_L1) refs[1];
1: 			ref.value = value;
1: 			Thread.yield();
1: 
1: 			checkValue((T_L1) refs[0], value);
1: 			checkValue((T_L1) refs[1], value);
1: 
1: 			lf.unlock(cs, g0, refs[0], null);
1: 			checkValue((T_L1) refs[1], value);
1: 
1: 			Thread.yield();
1: 
1: 			lf.unlock(cs, g0, refs[1], null);
1: 
1: 			// check we have no locks held
1: 			checkLockCount(cs, 0);
1: 
1: 			Thread.yield();
1: 
1: 		}
1: 	}
1: 
1: 	private void T002() throws StandardException, T_Fail {
1: 
0: 		Object cs = new Object();	// create an object for the compatability space
0: 		Integer g0 = new Integer(1);	// create an object for a lock group
1: 
1: 		// check we have no locks held
1: 		checkLockCount(cs, 0);
1: 
1: 		while (--iterations > 0) {
1: 			long value = offset + iterations;
1: 			T_L1 ref = (T_L1) refs[0];
1: 
1: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1: 			ref.value = value;
1: 			checkLockCount(cs, 1);
1: 			Thread.yield();
1: 			checkValue(ref, value);
1: 
1: 			lf.unlock(cs, g0, refs[0], null);
1: 
1: 			// check we have no locks held
1: 			checkLockCount(cs, 0);
1: 		}
1: 	}
1: 
1: 	private void T003() throws StandardException, T_Fail {
1: 
0: 		Object cs = new Object();	// create an object for the compatability space
0: 		Integer g0 = new Integer(1);	// create an object for a lock group
1: 
1: 		// check we have no locks held
1: 		checkLockCount(cs, 0);
1: 
1: 		while (--iterations > 0) {
1: 
1: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1: 			checkLockCount(cs, 1);
1: 			Thread.yield();
1: 			lf.unlock(cs, g0, refs[0], null);
1: 
1: 			// check we have no locks held
1: 			checkLockCount(cs, 0);
1: 		}
1: 	}
1: 	private void T004() throws StandardException, T_Fail {
1: 
0: 		Object cs = new Object();	// create an object for the compatability space
0: 		Integer g0 = new Integer(1);	// create an object for a lock group
1: 
1: 		// check we have no locks held
1: 		checkLockCount(cs, 0);
1: 
1: 		while (--iterations > 0) {
1: 
1: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1: 			checkLockCount(cs, 1);
1: 			Thread.yield();
1: 
1: 
1: 			lf.lockObject(cs, g0, refs[0], null, C_LockFactory.WAIT_FOREVER);
1: 			checkLockCount(cs, 2);
1: 			Thread.yield();
1: 
1: 			lf.unlockGroup(cs, g0);
1: 
1: 			// check we have no locks held
1: 			checkLockCount(cs, 0);
1: 		}
1: 	}
1: 
1: 	private void checkValue(T_L1 item, long value) throws T_Fail {
1: 		if (item.value  != value)
1: 			throw T_Fail.testFailMsg("value corrupted in multi-user test, exapected " + value + ", got " + item.value);
1: 	}
1: 
0: 	void checkLockCount(Object cs, int expected) throws T_Fail {
1: 		boolean expect = expected != 0;
1: 		boolean got = lf.areLocksHeld(cs);
1: 		if (got != expect)
1: 			throw T_Fail.testFailMsg("Expected lock count (" + expect + "), got (" + got + ")");
1: 	}
1: 
1: 
1: }
============================================================================