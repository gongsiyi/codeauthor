1:8a6cb02: /**
1:8a6cb02:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest
1:8a6cb02:  *  
1:8a6cb02:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a6cb02:  * or more contributor license agreements.  See the NOTICE file
1:8a6cb02:  * distributed with this work for additional information
1:8a6cb02:  * regarding copyright ownership.  The ASF licenses this file
1:8a6cb02:  * to you under the Apache License, Version 2.0 (the
1:8a6cb02:  * "License"); you may not use this file except in compliance
1:8a6cb02:  * with the License.  You may obtain a copy of the License at
1:8a6cb02:  *
1:8a6cb02:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8a6cb02:  *
1:8a6cb02:  * Unless required by applicable law or agreed to in writing,
1:8a6cb02:  * software distributed under the License is distributed on an
1:8a6cb02:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8a6cb02:  * KIND, either express or implied.  See the License for the
1:8a6cb02:  * specific language governing permissions and limitations
1:8a6cb02:  * under the License.
1:8a6cb02:  */
1:8a6cb02: package org.apache.derbyTesting.functionTests.tests.lang;
1:8a6cb02: 
1:8a6cb02: import java.sql.CallableStatement;
1:8a6cb02: import java.sql.Connection;
1:8a6cb02: import java.sql.ResultSet;
1:8a6cb02: import java.sql.SQLException;
1:8a6cb02: import java.sql.Statement;
1:8a6cb02: 
1:8a6cb02: import junit.framework.Test;
1:8a6cb02: 
1:8a6cb02: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:8a6cb02: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8a6cb02: import org.apache.derbyTesting.junit.TestConfiguration;
1:8a6cb02: 
1:8a6cb02: /**
1:8a6cb02:  * testing gathering of runtime statistics for for the resultsets/statements not
1:8a6cb02:  * closed by the usee, but get closed when garbage collector collects such
1:8a6cb02:  * objects and closes them by calling the finalize.
1:8a6cb02:  * 
1:8a6cb02:  */
1:8a6cb02: public class Bug5052rtsTest extends BaseJDBCTestCase {
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Basic constructor.
1:8a6cb02:      */
1:8a6cb02:     public Bug5052rtsTest(String name) {
1:8a6cb02:         super(name);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Sets the auto commit to false.
1:8a6cb02:      */
1:8a6cb02:     protected void initializeConnection(Connection conn) throws SQLException {
1:8a6cb02:         conn.setAutoCommit(false);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Returns the implemented tests.
1:8a6cb02:      * 
1:8a6cb02:      * @return An instance of <code>Test</code> with the implemented tests to
1:8a6cb02:      *         run.
1:8a6cb02:      */
1:8a6cb02:     public static Test suite() {
1:8a6cb02:         return new CleanDatabaseTestSetup(TestConfiguration
1:8a6cb02:                 .embeddedSuite(Bug5052rtsTest.class)) {
1:8a6cb02:             protected void decorateSQL(Statement stmt) throws SQLException {
1:8a6cb02:                 stmt
1:8a6cb02:                         .execute("create table tab1 (COL1 int, COL2 smallint, COL3 real)");
1:8a6cb02:                 stmt.executeUpdate("insert into tab1 values(1, 2, 3.1)");
1:8a6cb02:                 stmt.executeUpdate("insert into tab1 values(2, 2, 3.1)");
1:8a6cb02:             }
1:8a6cb02:         };
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Make sure NullPointerException does not occur if 
1:8a6cb02:      * RuntimeStatistics is used and ResultSet is not closed by the user
1:8a6cb02:      * 
1:8a6cb02:      * @throws SQLException
1:8a6cb02:      */
1:8a6cb02:     public void testBug5052() throws SQLException {
1:8a6cb02:         Statement stmt0 = createStatement();
1:8a6cb02:         Statement stmt1 = createStatement();
1:8a6cb02:         Statement stmt2 = createStatement();
1:8a6cb02:         CallableStatement cs;
1:8a6cb02:         ResultSet rs;
1:8a6cb02:         ResultSet rs1;
1:8a6cb02: 
1:8a6cb02:         /* case1: Setting runtime statistics on just before result set close. */
1:8a6cb02:         rs = stmt0.executeQuery("select * from tab1"); // opens the result set
1:8a6cb02: 
1:8a6cb02:         while (rs.next()) {
1:8a6cb02:             // System.out.println(rs.getString(1));
1:8a6cb02:         }
1:8a6cb02: 
1:8a6cb02:         // set the runtime statistics on now.
1:b878080:         cs = prepareCall(
1:8a6cb02:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:8a6cb02:         cs.setInt(1, 1);
1:8a6cb02:         cs.execute();
1:8a6cb02:         cs.close();
1:8a6cb02: 
1:8a6cb02:         rs.close();
1:8a6cb02: 
1:b878080:         cs = prepareCall(
1:8a6cb02:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:8a6cb02:         cs.setInt(1, 0);
1:8a6cb02:         cs.execute();
1:8a6cb02:         cs.close();
1:8a6cb02: 
1:8a6cb02:         /* case2: Statement/Resultset getting closed by the Garbage collector. */
1:8a6cb02:         rs = stmt1.executeQuery("select * from tab1"); // opens the result set
1:8a6cb02: 
1:8a6cb02:         while (rs.next()) {
1:8a6cb02:             // System.out.println(rs.getString(1));
1:8a6cb02:         }
1:8a6cb02:         // set the runtime statistics on now.
1:b878080:         cs = prepareCall(
1:8a6cb02:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:8a6cb02:         cs.setInt(1, 1);
1:8a6cb02:         cs.execute();
1:8a6cb02:         cs.close();
1:8a6cb02: 
1:8a6cb02:         rs1 = stmt2.executeQuery("select count(*) from tab1"); // opens the
1:8a6cb02:                                                                 // result set
1:8a6cb02: 
1:8a6cb02:         while (rs1.next()) {
1:8a6cb02:             // System.out.println(rs1.getString(1));
1:8a6cb02:         }
1:8a6cb02: 
1:8a6cb02:         for (int i = 0; i < 3; i++) {
1:8a6cb02:             System.gc();
1:8a6cb02:             System.runFinalization();
1:8a6cb02:             // sleep for sometime to make sure garbage collector kicked in
1:8a6cb02:             // and collected the result set object.
1:8a6cb02:             try {
1:8a6cb02:                 Thread.sleep(3000);
1:8a6cb02:             } catch (InterruptedException ie) {
1:8a6cb02:                 fail("Unexpected interruption!");
1:8a6cb02:             }
1:8a6cb02:         }
1:8a6cb02: 
1:8a6cb02:         commit(); // This should have failed before we fix 5052
1:8a6cb02:     }
1:8a6cb02: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b878080
/////////////////////////////////////////////////////////////////////////
1:         cs = prepareCall(
/////////////////////////////////////////////////////////////////////////
1:         cs = prepareCall(
/////////////////////////////////////////////////////////////////////////
1:         cs = prepareCall(
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:8a6cb02
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * testing gathering of runtime statistics for for the resultsets/statements not
1:  * closed by the usee, but get closed when garbage collector collects such
1:  * objects and closes them by calling the finalize.
1:  * 
1:  */
1: public class Bug5052rtsTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Basic constructor.
1:      */
1:     public Bug5052rtsTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Sets the auto commit to false.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Returns the implemented tests.
1:      * 
1:      * @return An instance of <code>Test</code> with the implemented tests to
1:      *         run.
1:      */
1:     public static Test suite() {
1:         return new CleanDatabaseTestSetup(TestConfiguration
1:                 .embeddedSuite(Bug5052rtsTest.class)) {
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 stmt
1:                         .execute("create table tab1 (COL1 int, COL2 smallint, COL3 real)");
1:                 stmt.executeUpdate("insert into tab1 values(1, 2, 3.1)");
1:                 stmt.executeUpdate("insert into tab1 values(2, 2, 3.1)");
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Make sure NullPointerException does not occur if 
1:      * RuntimeStatistics is used and ResultSet is not closed by the user
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testBug5052() throws SQLException {
1:         Statement stmt0 = createStatement();
1:         Statement stmt1 = createStatement();
1:         Statement stmt2 = createStatement();
1:         CallableStatement cs;
1:         ResultSet rs;
1:         ResultSet rs1;
1: 
1:         /* case1: Setting runtime statistics on just before result set close. */
1:         rs = stmt0.executeQuery("select * from tab1"); // opens the result set
1: 
1:         while (rs.next()) {
1:             // System.out.println(rs.getString(1));
1:         }
1: 
1:         // set the runtime statistics on now.
0:         cs = getConnection().prepareCall(
1:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:         cs.setInt(1, 1);
1:         cs.execute();
1:         cs.close();
1: 
1:         rs.close();
1: 
0:         cs = getConnection().prepareCall(
1:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:         cs.setInt(1, 0);
1:         cs.execute();
1:         cs.close();
1: 
1:         /* case2: Statement/Resultset getting closed by the Garbage collector. */
1:         rs = stmt1.executeQuery("select * from tab1"); // opens the result set
1: 
1:         while (rs.next()) {
1:             // System.out.println(rs.getString(1));
1:         }
1:         // set the runtime statistics on now.
0:         cs = getConnection().prepareCall(
1:                 "CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(?)");
1:         cs.setInt(1, 1);
1:         cs.execute();
1:         cs.close();
1: 
1:         rs1 = stmt2.executeQuery("select count(*) from tab1"); // opens the
1:                                                                 // result set
1: 
1:         while (rs1.next()) {
1:             // System.out.println(rs1.getString(1));
1:         }
1: 
1:         for (int i = 0; i < 3; i++) {
1:             System.gc();
1:             System.runFinalization();
1:             // sleep for sometime to make sure garbage collector kicked in
1:             // and collected the result set object.
1:             try {
1:                 Thread.sleep(3000);
1:             } catch (InterruptedException ie) {
1:                 fail("Unexpected interruption!");
1:             }
1:         }
1: 
1:         commit(); // This should have failed before we fix 5052
1:     }
1: }
============================================================================