1:eac0369: /*
18:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.IsNullNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.sql.Types;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizable;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.Orderable;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This node represents either a unary 
1:eac0369:  * IS NULL or IS NOT NULL comparison operator
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class IsNullNode extends UnaryComparisonOperatorNode
1:eac0369: 						implements RelationalOperator
22:eac0369: {
1:45535b5: 	private DataValueDescriptor nullValue;
1:eac0369: 
1:2706d1f:     /**
1:2706d1f:      * If {@code true}, this node represents a NOT NULL node rather than a
1:2706d1f:      * NULL node. Note that this state is mutable, cf {@link #getNegation}.
1:2706d1f:      */
1:2706d1f:     private boolean notNull;
1:2706d1f: 
1:2706d1f:     IsNullNode(ValueNode operand, boolean notNull, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operand, cm);
1:2706d1f:         this.notNull = notNull;
1:2706d1f:         updateOperatorDetails();
1:3bb140c:     }
1:3bb140c: 
1:2706d1f:     private void updateOperatorDetails()
1:eac0369: 	{
1:2706d1f:         setOperator(notNull ? "is not null" : "is null");
1:2706d1f:         setMethodName(notNull ? "isNotNull" : "isNullOp");
18:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Negate the comparison.
1:eac0369: 	 *
1:eac0369: 	 * @param operand	The operand of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return UnaryOperatorNode	The negated expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	UnaryOperatorNode getNegation(ValueNode operand)
1:eac0369: 				throws StandardException
1:eac0369: 	{
7:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:ef158f2: 			SanityManager.ASSERT(getTypeServices() != null,
1:eac0369: 						"dataTypeServices is expected to be non-null");
1:eac0369: 		}
1:eac0369: 
1:2706d1f:         notNull = !notNull;
1:2706d1f:         updateOperatorDetails();
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind a ? parameter operand of the IS [NOT] NULL predicate.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	void bindParameter()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If IS [NOT] NULL has a ? operand, we assume
1:eac0369: 		** its type is varchar with the implementation-defined maximum length
1:eac0369: 		** for a varchar.
1:1c87333: 		** Also, for IS [NOT] NULL, it doesn't matter what is VARCHAR's 
1:1c87333: 		** collation (since for NULL check, no collation sensitive processing
1:1c87333: 		** is required) and hence we will not worry about the collation setting
1:eac0369: 		*/
1:eac0369: 
1:d5bc20f: 		operand.setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* RelationalOperator interface */
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#usefulStartKey */
1:eac0369: 	public boolean usefulStartKey(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		// IS NULL is start/stop key, IS NOT NULL is not
1:eac0369: 		return (isNullNode());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#usefulStopKey */
1:eac0369: 	public boolean usefulStopKey(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		// IS NULL is start/stop key, IS NOT NULL is not
1:eac0369: 		return (isNullNode());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getStartOperator */
1:2706d1f:     @Override
1:eac0369: 	public int getStartOperator(Optimizable optTable)
1:eac0369: 	{
1:2706d1f:         if (SanityManager.DEBUG) {
1:2706d1f:             if (notNull) {
1:2706d1f:                 SanityManager.THROWASSERT("NOT NULL not expected here");
1:eac0369: 			}
1:eac0369: 		}
1:2706d1f: 
1:eac0369: 		return ScanController.GE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getStopOperator */
1:2706d1f:     @Override
1:eac0369: 	public int getStopOperator(Optimizable optTable)
1:eac0369: 	{
1:2706d1f:         if (SanityManager.DEBUG) {
1:2706d1f:             if (notNull) {
1:2706d1f:                 SanityManager.THROWASSERT("NOT NULL not expected here");
1:eac0369: 			}
1:eac0369: 		}
1:2706d1f: 
1:eac0369: 		return ScanController.GT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#generateOperator */
1:eac0369: 	public void generateOperator(MethodBuilder mb,
1:eac0369: 										Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		mb.push(Orderable.ORDER_OP_EQUALS);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#generateNegate */
1:eac0369: 	public void generateNegate(MethodBuilder mb,
1:eac0369: 										Optimizable optTable)
1:eac0369: 	{
1:2706d1f:         mb.push(notNull);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getOperator */
1:eac0369: 	public int getOperator()
1:eac0369: 	{
1:2706d1f:         return notNull ? IS_NOT_NULL_RELOP : IS_NULL_RELOP;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#compareWithKnownConstant */
1:eac0369: 	public boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters)
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see RelationalOperator#getCompareValue
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getCompareValue(Optimizable optTable)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (nullValue == null)
1:eac0369: 		{
1:45535b5: 			nullValue = operand.getTypeServices().getNull();
1:eac0369: 		}
1:eac0369: 
1:45535b5: 		return nullValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#equalsComparisonWithConstantExpression */
1:eac0369: 	public boolean equalsComparisonWithConstantExpression(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		// Always return false for NOT NULL
1:2706d1f:         if (notNull)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:2706d1f:         boolean retval = false;
1:2706d1f: 
1:eac0369: 		/*
1:eac0369: 		** Is the operand a column in the given table?
1:eac0369: 		*/
1:eac0369: 		if (operand instanceof ColumnReference)
1:eac0369: 		{
1:eac0369: 			int tabNum = ((ColumnReference) operand).getTableNumber();
1:eac0369: 			if (optTable.hasTableNumber() &&
1:eac0369: 				(optTable.getTableNumber() == tabNum))
1:eac0369: 			{
1:eac0369: 				retval = true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see RelationalOperator#getTransitiveSearchClause 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	thrown on error
1:eac0369: 	 */
1:eac0369: 	public RelationalOperator getTransitiveSearchClause(ColumnReference otherCR)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:2706d1f:         return new IsNullNode(otherCR, notNull, getContextManager());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * null operators are defined on DataValueDescriptor.
1:eac0369: 	 * Overrides method in UnaryOperatorNode for code generation purposes.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getReceiverInterfaceName() {
1:eac0369: 	    return ClassName.DataValueDescriptor;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:eac0369: 	public double selectivity(Optimizable optTable) 
1:eac0369: 	{
1:2706d1f:         if (notNull) {
1:2706d1f:             /* IS NOT NULL is like <>, so should have same selectivity */
1:eac0369: 			return 0.9d;
1:2706d1f:         } else {
1:2706d1f:             /** IS NULL is like =, so should have the same selectivity */
1:2706d1f:             return 0.1d;
1:2706d1f:         }
1:eac0369: 	}
1:eac0369: 
1:2706d1f:     boolean isNullNode()
1:eac0369: 	{
1:2706d1f:         return !notNull;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ValueNode#isRelationalOperator */
1:3bb140c:     @Override
1:3bb140c:     boolean isRelationalOperator()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ValueNode#optimizableEqualityNode */
2:3bb140c:     @Override
1:3bb140c:     boolean optimizableEqualityNode(Optimizable optTable,
1:eac0369: 										   int columnNumber, 
1:eac0369: 										   boolean isNullOkay)
1:eac0369: 	{
1:eac0369: 		if (!isNullNode() || !isNullOkay)
1:eac0369: 			return false;
1:eac0369: 		
1:eac0369: 		ColumnReference cr = getColumnOperand(optTable,
1:eac0369: 											  columnNumber);
1:eac0369: 		if (cr == null)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * If {@code true}, this node represents a NOT NULL node rather than a
1:      * NULL node. Note that this state is mutable, cf {@link #getNegation}.
1:      */
1:     private boolean notNull;
1: 
1:     IsNullNode(ValueNode operand, boolean notNull, ContextManager cm)
1:         this.notNull = notNull;
1:         updateOperatorDetails();
1:     private void updateOperatorDetails()
1:         setOperator(notNull ? "is not null" : "is null");
1:         setMethodName(notNull ? "isNotNull" : "isNullOp");
/////////////////////////////////////////////////////////////////////////
1:         notNull = !notNull;
1:         updateOperatorDetails();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if (SanityManager.DEBUG) {
1:             if (notNull) {
1:                 SanityManager.THROWASSERT("NOT NULL not expected here");
1: 
1:     @Override
1:         if (SanityManager.DEBUG) {
1:             if (notNull) {
1:                 SanityManager.THROWASSERT("NOT NULL not expected here");
1: 
/////////////////////////////////////////////////////////////////////////
1:         mb.push(notNull);
1:         return notNull ? IS_NOT_NULL_RELOP : IS_NULL_RELOP;
/////////////////////////////////////////////////////////////////////////
1:         if (notNull)
1:         boolean retval = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new IsNullNode(otherCR, notNull, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:         if (notNull) {
1:             /* IS NOT NULL is like <>, so should have same selectivity */
1:         } else {
1:             /** IS NULL is like =, so should have the same selectivity */
1:             return 0.1d;
1:         }
1:     boolean isNullNode()
1:         return !notNull;
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
0:     enum Sign {IS_NULL, IS_NOT_NULL};
0:     IsNullNode(ValueNode operand, Sign t, ContextManager cm)
1:             throws StandardException {
1:         super(operand, cm);
0:         setNodeType(
0:             t == Sign.IS_NOT_NULL ?
0:                 C_NodeTypes.IS_NOT_NULL_NODE :
0:                 C_NodeTypes.IS_NULL_NODE);
1:     }
1: 
1:     @Override
0:     void setNodeType(int nodeType)
0:         String op;
0:         String methodNam;
0:             op = "is null";
0:             methodNam = "isNullOp";
/////////////////////////////////////////////////////////////////////////
0:             op = "is not null";
0:             methodNam = "isNotNull";
0:         setOperator(op);
0:         setMethodName(methodNam);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         int op;
0:             op = IS_NULL_RELOP;
/////////////////////////////////////////////////////////////////////////
0:             op = IS_NOT_NULL_RELOP;
0:         return op;
/////////////////////////////////////////////////////////////////////////
0:         return new IsNullNode(otherCR,
0:                 getNodeType() == C_NodeTypes.IS_NULL_NODE ?
0:                 Sign.IS_NULL :
0:                 Sign.IS_NOT_NULL,
0:                 getContextManager());
1:     @Override
1:     String getReceiverInterfaceName() {
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isRelationalOperator()
1:     @Override
1:     boolean optimizableEqualityNode(Optimizable optTable,
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:1c87333
/////////////////////////////////////////////////////////////////////////
1: 		** Also, for IS [NOT] NULL, it doesn't matter what is VARCHAR's 
1: 		** collation (since for NULL check, no collation sensitive processing
1: 		** is required) and hence we will not worry about the collation setting
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
0: 		//collation of ? operand should be same as the compilation schema
0: 		operand.setCollationUsingCompilationSchema(
commit:7c5fbc4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0: 		//collation of ? operand should be same as the current schema
0: 		operand.getTypeServices().setCollationDerivation(
0: 				StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 		operand.getTypeServices().setCollationType(
0: 				getLanguageConnectionContext().getDefaultSchema()
0: 						.getCollationType());
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ef158f2
/////////////////////////////////////////////////////////////////////////
1: 			SanityManager.ASSERT(getTypeServices() != null,
commit:45535b5
/////////////////////////////////////////////////////////////////////////
1: 	private DataValueDescriptor nullValue;
/////////////////////////////////////////////////////////////////////////
1: 			nullValue = operand.getTypeServices().getNull();
1: 		return nullValue;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.IsNullNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.Optimizable;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.store.access.ScanController;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.types.Orderable;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import java.sql.Types;
1: 
1: /**
1:  * This node represents either a unary 
1:  * IS NULL or IS NOT NULL comparison operator
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
1: public final class IsNullNode extends UnaryComparisonOperatorNode
1: 						implements RelationalOperator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	Object nullValue = null;
1: 
0: 	public void setNodeType(int nodeType)
1: 	{
0: 		String operator;
0: 		String methodName;
1: 
0: 		if (nodeType == C_NodeTypes.IS_NULL_NODE)
1: 		{
0: 			/* By convention, the method name for the is null operator is "isNull" */
0: 			operator = "is null";
0: 			methodName = "isNullOp";
1: 		}
0: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (nodeType != C_NodeTypes.IS_NOT_NULL_NODE)
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
1: 				}
1: 			}
0: 			/* By convention, the method name for the is not null operator is 
0: 			 * "isNotNull" 
1: 			 */
0: 			operator = "is not null";
0: 			methodName = "isNotNull";
1: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
1: 	}
1: 
1: 	/**
1: 	 * Negate the comparison.
1: 	 *
1: 	 * @param operand	The operand of the operator
1: 	 *
1: 	 * @return UnaryOperatorNode	The negated expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	UnaryOperatorNode getNegation(ValueNode operand)
1: 				throws StandardException
1: 	{
0: 		UnaryOperatorNode negation;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(dataTypeServices != null,
1: 						"dataTypeServices is expected to be non-null");
1: 		}
1: 
0: 		if (isNullNode())
1: 		{
0: 			setNodeType(C_NodeTypes.IS_NOT_NULL_NODE);
1: 		}
0: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (! isNotNullNode())
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
1: 				}
1: 			}
0: 			setNodeType(C_NodeTypes.IS_NULL_NODE);
1: 		}
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind a ? parameter operand of the IS [NOT] NULL predicate.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	void bindParameter()
1: 			throws StandardException
1: 	{
1: 		/*
1: 		** If IS [NOT] NULL has a ? operand, we assume
1: 		** its type is varchar with the implementation-defined maximum length
1: 		** for a varchar.
1: 		*/
1: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
1: 	}
1: 
1: 	/* RelationalOperator interface */
1: 
1: 	/** @see RelationalOperator#usefulStartKey */
1: 	public boolean usefulStartKey(Optimizable optTable)
1: 	{
1: 		// IS NULL is start/stop key, IS NOT NULL is not
1: 		return (isNullNode());
1: 	}
1: 
1: 	/** @see RelationalOperator#usefulStopKey */
1: 	public boolean usefulStopKey(Optimizable optTable)
1: 	{
1: 		// IS NULL is start/stop key, IS NOT NULL is not
1: 		return (isNullNode());
1: 	}
1: 
1: 	/** @see RelationalOperator#getStartOperator */
1: 	public int getStartOperator(Optimizable optTable)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (! isNullNode())
1: 			{
0: 				SanityManager.THROWASSERT(
0: 					"getNodeType() not expected to return " + getNodeType());
1: 			}
1: 		}
1: 		return ScanController.GE;
1: 	}
1: 
1: 	/** @see RelationalOperator#getStopOperator */
1: 	public int getStopOperator(Optimizable optTable)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (! isNullNode())
1: 			{
0: 				SanityManager.THROWASSERT(
0: 					"getNodeType() not expected to return " + getNodeType());
1: 			}
1: 		}
1: 		return ScanController.GT;
1: 	}
1: 
1: 	/** @see RelationalOperator#generateOperator */
1: 	public void generateOperator(MethodBuilder mb,
1: 										Optimizable optTable)
1: 	{
1: 		mb.push(Orderable.ORDER_OP_EQUALS);
1: 	}
1: 
1: 	/** @see RelationalOperator#generateNegate */
1: 	public void generateNegate(MethodBuilder mb,
1: 										Optimizable optTable)
1: 	{
0: 		mb.push(isNotNullNode());
1: 	}
1: 
1: 	/** @see RelationalOperator#getOperator */
1: 	public int getOperator()
1: 	{
0: 		int operator;
0: 		if (isNullNode())
1: 		{
0: 			operator = IS_NULL_RELOP;
1: 		}
0: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (! isNotNullNode())
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
1: 				}
1: 			}
0: 			operator = IS_NOT_NULL_RELOP;
1: 		}
1: 
0: 		return operator;
1: 	}
1: 
1: 	/** @see RelationalOperator#compareWithKnownConstant */
1: 	public boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters)
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * @see RelationalOperator#getCompareValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public DataValueDescriptor getCompareValue(Optimizable optTable)
1: 					throws StandardException
1: 	{
1: 		if (nullValue == null)
1: 		{
0: 			nullValue = operand.getTypeId().getNull();
1: 		}
1: 
0: 		return (DataValueDescriptor) nullValue;
1: 	}
1: 
1: 	/** @see RelationalOperator#equalsComparisonWithConstantExpression */
1: 	public boolean equalsComparisonWithConstantExpression(Optimizable optTable)
1: 	{
0: 		boolean retval = false;
1: 
1: 		// Always return false for NOT NULL
0: 		if (isNotNullNode())
1: 		{
1: 			return false;
1: 		}
1: 
1: 		/*
1: 		** Is the operand a column in the given table?
1: 		*/
1: 		if (operand instanceof ColumnReference)
1: 		{
1: 			int tabNum = ((ColumnReference) operand).getTableNumber();
1: 			if (optTable.hasTableNumber() &&
1: 				(optTable.getTableNumber() == tabNum))
1: 			{
1: 				retval = true;
1: 			}
1: 		}
1: 
1: 		return retval;
1: 	}
1: 
1: 	/** 
1: 	 * @see RelationalOperator#getTransitiveSearchClause 
1: 	 *
1: 	 * @exception StandardException	thrown on error
1: 	 */
1: 	public RelationalOperator getTransitiveSearchClause(ColumnReference otherCR)
1: 		throws StandardException
1: 	{
0: 		return (RelationalOperator) getNodeFactory().getNode(
0: 									getNodeType(),
0: 									otherCR,
0: 									getContextManager());
1: 	}
1: 
1: 	/**
1: 	 * null operators are defined on DataValueDescriptor.
1: 	 * Overrides method in UnaryOperatorNode for code generation purposes.
1: 	 */
0: 	public String getReceiverInterfaceName() {
1: 	    return ClassName.DataValueDescriptor;
1: 	}
1: 
0: 	/** IS NULL is like =, so should have the same selectivity */
1: 	public double selectivity(Optimizable optTable) 
1: 	{
0: 		if (isNullNode())
1: 		{
0: 			return 0.1d;
1: 		}
0: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (! isNotNullNode())
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
1: 				}
1: 			}
0: 			/* IS NOT NULL is like <>, so should have same selectivity */
1: 			return 0.9d;
1: 		}
1: 	}
1: 
0: 	private boolean isNullNode()
1: 	{
0: 		return getNodeType() == C_NodeTypes.IS_NULL_NODE;
1: 	}
1: 
0: 	private boolean isNotNullNode()
1: 	{
0: 		return getNodeType() == C_NodeTypes.IS_NOT_NULL_NODE;
1: 	}
1: 	
1: 	/** @see ValueNode#isRelationalOperator */
0: 	public boolean isRelationalOperator()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/** @see ValueNode#optimizableEqualityNode */
0: 	public boolean optimizableEqualityNode(Optimizable optTable, 
1: 										   int columnNumber, 
1: 										   boolean isNullOkay)
1: 	{
1: 		if (!isNullNode() || !isNullOkay)
1: 			return false;
1: 		
1: 		ColumnReference cr = getColumnOperand(optTable,
1: 											  columnNumber);
1: 		if (cr == null)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		return true;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 		operand.setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import java.sql.Types;
0: 
0: /**
0:  * This node represents either a unary 
0:  * IS NULL or IS NOT NULL comparison operator
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public final class IsNullNode extends UnaryComparisonOperatorNode
0: 						implements RelationalOperator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	Object nullValue = null;
0: 
0: 	public void setNodeType(int nodeType)
0: 	{
0: 		String operator;
0: 		String methodName;
0: 
0: 		if (nodeType == C_NodeTypes.IS_NULL_NODE)
0: 		{
0: 			/* By convention, the method name for the is null operator is "isNull" */
0: 			operator = "is null";
0: 			methodName = "isNullOp";
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (nodeType != C_NodeTypes.IS_NOT_NULL_NODE)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
0: 				}
0: 			}
0: 			/* By convention, the method name for the is not null operator is 
0: 			 * "isNotNull" 
0: 			 */
0: 			operator = "is not null";
0: 			methodName = "isNotNull";
0: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
0: 	}
0: 
0: 	/**
0: 	 * Negate the comparison.
0: 	 *
0: 	 * @param operand	The operand of the operator
0: 	 *
0: 	 * @return UnaryOperatorNode	The negated expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	UnaryOperatorNode getNegation(ValueNode operand)
0: 				throws StandardException
0: 	{
0: 		UnaryOperatorNode negation;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(dataTypeServices != null,
0: 						"dataTypeServices is expected to be non-null");
0: 		}
0: 
0: 		if (isNullNode())
0: 		{
0: 			setNodeType(C_NodeTypes.IS_NOT_NULL_NODE);
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (! isNotNullNode())
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
0: 				}
0: 			}
0: 			setNodeType(C_NodeTypes.IS_NULL_NODE);
0: 		}
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind a ? parameter operand of the IS [NOT] NULL predicate.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	void bindParameter()
0: 			throws StandardException
0: 	{
0: 		/*
0: 		** If IS [NOT] NULL has a ? operand, we assume
0: 		** its type is varchar with the implementation-defined maximum length
0: 		** for a varchar.
0: 		*/
0: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), true));
0: 	}
0: 
0: 	/* RelationalOperator interface */
0: 
0: 	/** @see RelationalOperator#usefulStartKey */
0: 	public boolean usefulStartKey(Optimizable optTable)
0: 	{
0: 		// IS NULL is start/stop key, IS NOT NULL is not
0: 		return (isNullNode());
0: 	}
0: 
0: 	/** @see RelationalOperator#usefulStopKey */
0: 	public boolean usefulStopKey(Optimizable optTable)
0: 	{
0: 		// IS NULL is start/stop key, IS NOT NULL is not
0: 		return (isNullNode());
0: 	}
0: 
0: 	/** @see RelationalOperator#getStartOperator */
0: 	public int getStartOperator(Optimizable optTable)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (! isNullNode())
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"getNodeType() not expected to return " + getNodeType());
0: 			}
0: 		}
0: 		return ScanController.GE;
0: 	}
0: 
0: 	/** @see RelationalOperator#getStopOperator */
0: 	public int getStopOperator(Optimizable optTable)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (! isNullNode())
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"getNodeType() not expected to return " + getNodeType());
0: 			}
0: 		}
0: 		return ScanController.GT;
0: 	}
0: 
0: 	/** @see RelationalOperator#generateOperator */
0: 	public void generateOperator(MethodBuilder mb,
0: 										Optimizable optTable)
0: 	{
0: 		mb.push(Orderable.ORDER_OP_EQUALS);
0: 	}
0: 
0: 	/** @see RelationalOperator#generateNegate */
0: 	public void generateNegate(MethodBuilder mb,
0: 										Optimizable optTable)
0: 	{
0: 		mb.push(isNotNullNode());
0: 	}
0: 
0: 	/** @see RelationalOperator#getOperator */
0: 	public int getOperator()
0: 	{
0: 		int operator;
0: 		if (isNullNode())
0: 		{
0: 			operator = IS_NULL_RELOP;
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (! isNotNullNode())
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
0: 				}
0: 			}
0: 			operator = IS_NOT_NULL_RELOP;
0: 		}
0: 
0: 		return operator;
0: 	}
0: 
0: 	/** @see RelationalOperator#compareWithKnownConstant */
0: 	public boolean compareWithKnownConstant(Optimizable optTable, boolean considerParameters)
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * @see RelationalOperator#getCompareValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataValueDescriptor getCompareValue(Optimizable optTable)
0: 					throws StandardException
0: 	{
0: 		if (nullValue == null)
0: 		{
0: 			nullValue = operand.getTypeId().getNull();
0: 		}
0: 
0: 		return (DataValueDescriptor) nullValue;
0: 	}
0: 
0: 	/** @see RelationalOperator#equalsComparisonWithConstantExpression */
0: 	public boolean equalsComparisonWithConstantExpression(Optimizable optTable)
0: 	{
0: 		boolean retval = false;
0: 
0: 		// Always return false for NOT NULL
0: 		if (isNotNullNode())
0: 		{
0: 			return false;
0: 		}
0: 
0: 		/*
0: 		** Is the operand a column in the given table?
0: 		*/
0: 		if (operand instanceof ColumnReference)
0: 		{
0: 			int tabNum = ((ColumnReference) operand).getTableNumber();
0: 			if (optTable.hasTableNumber() &&
0: 				(optTable.getTableNumber() == tabNum))
0: 			{
0: 				retval = true;
0: 			}
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	/** 
0: 	 * @see RelationalOperator#getTransitiveSearchClause 
0: 	 *
0: 	 * @exception StandardException	thrown on error
0: 	 */
0: 	public RelationalOperator getTransitiveSearchClause(ColumnReference otherCR)
0: 		throws StandardException
0: 	{
0: 		return (RelationalOperator) getNodeFactory().getNode(
0: 									getNodeType(),
0: 									otherCR,
0: 									getContextManager());
0: 	}
0: 
0: 	/**
0: 	 * null operators are defined on DataValueDescriptor.
0: 	 * Overrides method in UnaryOperatorNode for code generation purposes.
0: 	 */
0: 	public String getReceiverInterfaceName() {
0: 	    return ClassName.DataValueDescriptor;
0: 	}
0: 
0: 	/** IS NULL is like =, so should have the same selectivity */
0: 	public double selectivity(Optimizable optTable) 
0: 	{
0: 		if (isNullNode())
0: 		{
0: 			return 0.1d;
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (! isNotNullNode())
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + getNodeType());
0: 				}
0: 			}
0: 			/* IS NOT NULL is like <>, so should have same selectivity */
0: 			return 0.9d;
0: 		}
0: 	}
0: 
0: 	private boolean isNullNode()
0: 	{
0: 		return getNodeType() == C_NodeTypes.IS_NULL_NODE;
0: 	}
0: 
0: 	private boolean isNotNullNode()
0: 	{
0: 		return getNodeType() == C_NodeTypes.IS_NOT_NULL_NODE;
0: 	}
0: 	
0: 	/** @see ValueNode#isRelationalOperator */
0: 	public boolean isRelationalOperator()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/** @see ValueNode#optimizableEqualityNode */
0: 	public boolean optimizableEqualityNode(Optimizable optTable, 
0: 										   int columnNumber, 
0: 										   boolean isNullOkay)
0: 	{
0: 		if (!isNullNode() || !isNullOkay)
0: 			return false;
0: 		
0: 		ColumnReference cr = getColumnOperand(optTable,
0: 											  columnNumber);
0: 		if (cr == null)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		return true;
0: 	}
0: 
0: }
============================================================================