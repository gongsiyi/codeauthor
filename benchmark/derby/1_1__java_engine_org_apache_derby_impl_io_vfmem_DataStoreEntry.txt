1:33467a5: /*
1:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.vfmem.DataStoreEntry
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io.vfmem;
1:33467a5: 
1:33467a5: import java.io.FileNotFoundException;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * A data store entry representing either a file or a directory.
1:33467a5:  * <p>
1:33467a5:  * If the entry is a directory, it doesn't create a data object.
1:33467a5:  */
1:33467a5: public class DataStoreEntry {
1:33467a5: 
1:33467a5:     /** The path of this entry. */
1:33467a5:     private final String path;
1:33467a5:     /** Tells if this entry is a directory or a regular file. */
1:33467a5:     private final boolean isDir;
1:33467a5:     /** Tells if this entry is read-only or not. */
1:33467a5:     private boolean isReadOnly = false;
1:33467a5:     /** The data of the entry. */
1:33467a5:     private final BlockedByteArray src;
1:33467a5:     /** Tells if the entry has been released or not. */
1:33467a5:     private volatile boolean released = false;
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a new data store entry.
1:33467a5:      *
1:33467a5:      * @param path the path of the entry
1:33467a5:      * @param isDir whether the entry is a directory or a regular file
1:33467a5:      */
1:33467a5:     public DataStoreEntry(String path, boolean isDir) {
1:33467a5:         this.path = path;
1:33467a5:         this.isDir = isDir;
1:33467a5:         if (isDir) {
1:33467a5:             src = null;
1:33467a5:         } else {
1:33467a5:             src = new BlockedByteArray();
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Tells if this entry is a directory.
1:33467a5:      *
1:33467a5:      * @return {@code true} if directory, {@code false} otherwise.
1:33467a5:      */
1:33467a5:     public boolean isDirectory() {
1:33467a5:         checkIfReleased();
1:33467a5:         return isDir;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns an input stream to read from this entry.
1:33467a5:      *
1:33467a5:      * @return An {@code InputStream}-object.
1:33467a5:      * @throws FileNotFoundException if this entry is a directory
1:33467a5:      */
1:33467a5:     BlockedByteArrayInputStream getInputStream()
1:33467a5:             throws FileNotFoundException {
1:33467a5:         checkIfReleased();
1:33467a5:         if (isDir) {
1:33467a5:             // As according to StorageFile
1:33467a5:             throw new FileNotFoundException("'" + path + "' is a directory");
1:33467a5:         }
1:33467a5:         return src.getInputStream();
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns an output stream to write into this entry.
1:33467a5:      *
1:33467a5:      * @param append tells whether the entry should be appended or not
1:33467a5:      * @return An {@code OutputStream}-object.
1:33467a5:      * @throws FileNotFoundException if this entry is a directory, or is
1:33467a5:      *      read-only
1:33467a5:      */
1:33467a5:     BlockedByteArrayOutputStream getOutputStream(boolean append)
1:33467a5:             throws FileNotFoundException {
1:33467a5:         checkIfReleased();
1:33467a5:         if (isDir) {
1:33467a5:             // As according to StorageFile
1:33467a5:             throw new FileNotFoundException("'" + path + "' is a directory");
1:33467a5:         }
1:33467a5:         if (isReadOnly) {
1:33467a5:             // As according to StorageFile
1:33467a5:             throw new FileNotFoundException("'" + path + "' is read-only");
1:33467a5:         }
1:33467a5:         BlockedByteArrayOutputStream out;
1:33467a5:         if (append) {
1:33467a5:             out = src.getOutputStream(src.length());
1:33467a5:         } else {
1:33467a5:             // Truncate existing data.
1:33467a5:             src.setLength(0L);
1:33467a5:             out = src.getOutputStream(0L);
1:33467a5:         }
1:33467a5:         return out;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the length of this entry.
1:33467a5:      *
1:33467a5:      * @return The length in bytes.
1:33467a5:      */
1:33467a5:     public long length() {
1:33467a5:         checkIfReleased();
1:33467a5:         // Will fail with a NullPointerException if this entry is a directory.
1:33467a5:         return src.length();
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Makes this entry read-only.
1:33467a5:      */
1:33467a5:     public void setReadOnly() {
1:33467a5:         checkIfReleased();
1:33467a5:         this.isReadOnly = true;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Tells if this entry is read-only.
1:33467a5:      *
1:33467a5:      * @return {@code true} is read-only, {@code false} if not.
1:33467a5:      */
1:33467a5:     public boolean isReadOnly() {
1:33467a5:         checkIfReleased();
1:33467a5:         return this.isReadOnly;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Relases this entry.
1:33467a5:      */
1:33467a5:     void release() {
1:33467a5:         released = true;
1:20e986d:         if (src != null) {
1:20e986d:             src.release();
1:20e986d:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Sets the length of this entry.
1:33467a5:      *
1:33467a5:      * @param newLength the length in number of bytes
1:33467a5:      */
1:33467a5:     public void setLength(long newLength) {
1:33467a5:         checkIfReleased();
1:33467a5:         src.setLength(newLength);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Checks if this entry has been released.
1:33467a5:      *
1:33467a5:      * @throws IllegalStateException if the entry has been released
1:33467a5:      */
1:33467a5:     private void checkIfReleased() {
1:33467a5:         if (released) {
1:33467a5:             throw new IllegalStateException("Entry has been released.");
1:33467a5:         }
1:33467a5:     }
1:33467a5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:20e986d
/////////////////////////////////////////////////////////////////////////
1:         if (src != null) {
1:             src.release();
1:         }
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.vfmem.DataStoreEntry
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.io.vfmem;
1: 
1: import java.io.FileNotFoundException;
1: 
1: /**
1:  * A data store entry representing either a file or a directory.
1:  * <p>
1:  * If the entry is a directory, it doesn't create a data object.
1:  */
1: public class DataStoreEntry {
1: 
1:     /** The path of this entry. */
1:     private final String path;
1:     /** Tells if this entry is a directory or a regular file. */
1:     private final boolean isDir;
1:     /** Tells if this entry is read-only or not. */
1:     private boolean isReadOnly = false;
1:     /** The data of the entry. */
1:     private final BlockedByteArray src;
1:     /** Tells if the entry has been released or not. */
1:     private volatile boolean released = false;
1: 
1:     /**
1:      * Creates a new data store entry.
1:      *
1:      * @param path the path of the entry
1:      * @param isDir whether the entry is a directory or a regular file
1:      */
1:     public DataStoreEntry(String path, boolean isDir) {
1:         this.path = path;
1:         this.isDir = isDir;
1:         if (isDir) {
1:             src = null;
1:         } else {
1:             src = new BlockedByteArray();
1:         }
1:     }
1: 
1:     /**
1:      * Tells if this entry is a directory.
1:      *
1:      * @return {@code true} if directory, {@code false} otherwise.
1:      */
1:     public boolean isDirectory() {
1:         checkIfReleased();
1:         return isDir;
1:     }
1: 
1:     /**
1:      * Returns an input stream to read from this entry.
1:      *
1:      * @return An {@code InputStream}-object.
1:      * @throws FileNotFoundException if this entry is a directory
1:      */
1:     BlockedByteArrayInputStream getInputStream()
1:             throws FileNotFoundException {
1:         checkIfReleased();
1:         if (isDir) {
1:             // As according to StorageFile
1:             throw new FileNotFoundException("'" + path + "' is a directory");
1:         }
1:         return src.getInputStream();
1:     }
1: 
1:     /**
1:      * Returns an output stream to write into this entry.
1:      *
1:      * @param append tells whether the entry should be appended or not
1:      * @return An {@code OutputStream}-object.
1:      * @throws FileNotFoundException if this entry is a directory, or is
1:      *      read-only
1:      */
1:     BlockedByteArrayOutputStream getOutputStream(boolean append)
1:             throws FileNotFoundException {
1:         checkIfReleased();
1:         if (isDir) {
1:             // As according to StorageFile
1:             throw new FileNotFoundException("'" + path + "' is a directory");
1:         }
1:         if (isReadOnly) {
1:             // As according to StorageFile
1:             throw new FileNotFoundException("'" + path + "' is read-only");
1:         }
1:         BlockedByteArrayOutputStream out;
1:         if (append) {
1:             out = src.getOutputStream(src.length());
1:         } else {
1:             // Truncate existing data.
1:             src.setLength(0L);
1:             out = src.getOutputStream(0L);
1:         }
1:         return out;
1:     }
1: 
1:     /**
1:      * Returns the length of this entry.
1:      *
1:      * @return The length in bytes.
1:      */
1:     public long length() {
1:         checkIfReleased();
1:         // Will fail with a NullPointerException if this entry is a directory.
1:         return src.length();
1:     }
1: 
1:     /**
1:      * Makes this entry read-only.
1:      */
1:     public void setReadOnly() {
1:         checkIfReleased();
1:         this.isReadOnly = true;
1:     }
1: 
1:     /**
1:      * Tells if this entry is read-only.
1:      *
1:      * @return {@code true} is read-only, {@code false} if not.
1:      */
1:     public boolean isReadOnly() {
1:         checkIfReleased();
1:         return this.isReadOnly;
1:     }
1: 
1:     /**
1:      * Relases this entry.
1:      */
1:     void release() {
1:         released = true;
0:         src.release();
1:     }
1: 
1:     /**
1:      * Sets the length of this entry.
1:      *
1:      * @param newLength the length in number of bytes
1:      */
1:     public void setLength(long newLength) {
1:         checkIfReleased();
1:         src.setLength(newLength);
1:     }
1: 
1:     /**
1:      * Checks if this entry has been released.
1:      *
1:      * @throws IllegalStateException if the entry has been released
1:      */
1:     private void checkIfReleased() {
1:         if (released) {
1:             throw new IllegalStateException("Entry has been released.");
1:         }
1:     }
1: }
============================================================================