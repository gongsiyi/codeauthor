1:2333262: /*
2:2333262: 
1:2333262:    Derby - Class org.apache.derby.impl.jdbc.EncryptedLOBFile
1:2333262: 
1:2333262:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2333262:    contributor license agreements.  See the NOTICE file distributed with
1:2333262:    this work for additional information regarding copyright ownership.
1:2333262:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2333262:    (the "License"); you may not use this file except in compliance with
1:2333262:    the License.  You may obtain a copy of the License at
1:2333262: 
1:2333262:       http://www.apache.org/licenses/LICENSE-2.0
1:2333262: 
1:2333262:    Unless required by applicable law or agreed to in writing, software
1:2333262:    distributed under the License is distributed on an "AS IS" BASIS,
1:2333262:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2333262:    See the License for the specific language governing permissions and
1:2333262:    limitations under the License.
1:2333262: 
2:2333262:  */
1:2333262: 
1:2333262: package org.apache.derby.impl.jdbc;
1:2333262: 
1:2333262: import java.io.EOFException;
1:2333262: import java.io.FileNotFoundException;
1:2333262: import java.io.IOException;
1:2333262: import org.apache.derby.iapi.error.StandardException;
1:2333262: import org.apache.derby.iapi.reference.SQLState;
1:2333262: import org.apache.derby.iapi.services.i18n.MessageService;
1:2333262: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:2333262: import org.apache.derby.io.StorageFile;
1:2333262: 
2:2333262: /**
1:2333262:  * This class is a wrapper class on top of StorageRandomAccess to provide common
1:2333262:  * methods to write in encrypted file.
1:2333262:  * This class is NOT thread safe. The user class should take care
1:2333262:  * of synchronization if being used in multi threaded environment.
1:2333262:  */
1:2333262: class EncryptedLOBFile extends LOBFile {
1:2333262:     /** Block size for encryption. */
1:2333262:     private final int blockSize;
1:2333262:     /** Leftover bytes. Stored in memory until they fill one block .*/
1:2333262:     private final byte [] tail;
1:2333262:     /** Number of actual bytes in tail array. */
1:2333262:     private int tailSize;
1:2333262:     /** Current file position. */
1:2333262:     private long currentPos;
1:2333262:     /** Factory object used for encryption and decryption. */
1:2333262:     private final DataFactory df;
1:2333262: 
1:2333262:     /**
1:2333262:      * Constructs the EncryptedLOBFile object with encryption support.
1:2333262:      *
1:2333262:      * @param lobFile StorageFile Object for which file will be created
1:2333262:      * @param df data factory for encryption and decription
1:2333262:      * @throws FileNotFoundException if the file exists but is a directory or
1:2333262:      * cannot be opened
1:2333262:      */
1:2333262:     EncryptedLOBFile(StorageFile lobFile, DataFactory df)
1:2333262:                                                 throws FileNotFoundException {
1:2333262:         super(lobFile);
1:2333262:         this.df = df;
1:2333262:         blockSize = df.getEncryptionBlockSize();
1:2333262:         tail = new byte [blockSize];
1:2333262:         tailSize = 0;
2:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Find the blocks containing the data we are interested in.
1:2333262:      *
1:2333262:      * @param pos first position we are interested in
1:2333262:      * @param len number of bytes of interest
1:2333262:      * @return byte array containing all the blocks of data the specified
1:2333262:      * region spans over
1:2333262:      */
1:2333262:     private byte [] getBlocks (long pos, int len)
1:2333262:                                         throws IOException, StandardException {
1:2333262:         if (len < 0)
1:2333262:             throw new IndexOutOfBoundsException (
1:2333262:                     MessageService.getTextMessage (
1:ce40a31:                         SQLState.BLOB_NONPOSITIVE_LENGTH, len));
1:2333262:         //starting position of the 1st block
1:2333262:         long startPos = pos - pos % blockSize;
1:2333262:         //end position of last block
1:2333262:         long endPos = (pos + len + blockSize - 1) / blockSize * blockSize;
1:2333262: 
1:2333262:         byte [] data = new byte [(int) (endPos - startPos)];
1:2333262:         super.seek (startPos);
1:2333262:         super.read (data, 0, data.length);
1:2333262:         return data;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Returns file length.
1:2333262:      * @return file length
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      */
1:2333262:     long length() throws IOException {
1:2333262:         return super.length() + tailSize;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Returns the currrent position in the file.
1:2333262:      * @return current position of file pointer
1:2333262:      */
1:2333262:     long getFilePointer() {
1:2333262:         return currentPos;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Sets the current file pointer to specific location.
1:2333262:      * @param pos new position
2:2333262:      * @throws IOException
1:2333262:      */
1:2333262:     void seek (long pos) throws IOException {
1:680c9ad:         long fileLength = super.length();
1:680c9ad:         if (pos > fileLength + tailSize) {
1:2333262:             //this should never happen
1:2333262:             //this exception will mean internal error most
1:2333262:             //probably in LOBStreamControl
1:2333262:             throw new IllegalArgumentException ("Internal Error");
1:2333262:         }
1:680c9ad:         if (pos < fileLength) {
1:2333262:             super.seek (pos);
1:2333262:         }
1:2333262:         currentPos = pos;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Writes one byte into the file.
1:2333262:      * @param b byte value
1:2333262:      * @throws IOException if disk operation fails
1:ec69f5f:      * @throws StandardException if error occurred during encryption/decryption
1:2333262:      */
1:2333262:     void write (int b) throws IOException, StandardException {
2:2333262:         long length = super.length();
1:2333262:         if (currentPos >= length) {
1:2333262:             //current position is in memory
1:2333262:             int pos = (int) (currentPos - length);
1:2333262:             tail [pos] = (byte) b;
1:2333262:             if (pos >= tailSize) {
1:2333262:                 tailSize = pos + 1;
1:2333262:             }
1:2333262:             if (tailSize == blockSize) {
1:2333262:                 //we have enough data to fill one block encrypt and write
1:2333262:                 //in file
1:2333262:                 byte [] cypherText = new byte [blockSize];
1:2333262:                 df.encrypt (tail, 0, tailSize, cypherText, 0, false);
1:2333262:                 super.seek (length);
1:2333262:                 super.write (cypherText);
1:2333262:                 tailSize = 0;
1:2333262:             }
1:2333262:         }
1:2333262:         else {
1:2333262:             //write position is in the middle of the file
1:2333262:             //get the complete block in which the destination byte falls into
1:2333262:             byte [] cypherText = getBlocks (currentPos, 1);
1:2333262:             byte [] clearText = new byte [blockSize];
1:2333262:             //decrypt the block before updating
1:2333262:             df.decrypt(cypherText, 0, blockSize, clearText, 0);
1:2333262:             clearText [(int) (currentPos%blockSize)] = (byte) b;
1:2333262:             //encrypt and write back
1:2333262:             df.encrypt (clearText, 0, blockSize, cypherText, 0, false);
1:2333262:             super.seek (currentPos - currentPos % blockSize);
1:2333262:             super.write (cypherText);
1:2333262:         }
1:2333262:         currentPos++;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Writes length number of bytes from buffer starting from off position.
1:2333262:      * @param b byte array containing bytes to be written
1:2333262:      * @param off starting offset of the byte array from where the
1:2333262:      * data should be written to the file
1:2333262:      * @param len number of bytes to be written
1:2333262:      * @throws IOException if disk operation fails
1:ec69f5f:      * @throws StandardException if error occurred during encryption/decryption
1:2333262:      */
1:2333262:     void write(byte[] b, int off, int len)
1:2333262:                                     throws IOException, StandardException {
1:2333262:         long fileLength = super.length();
1:2333262:         if (currentPos < fileLength) {
1:2333262:             //starting position for write is in file
1:2333262:             //find out if we need to update memory
1:2333262:             int overFlow = (int) Math.max(0L, currentPos + len - fileLength);
1:2333262:             long oldPos = currentPos;
1:2333262:             //get the block containing bytes we are going to overwrite
1:2333262:             byte [] cypherText = getBlocks (currentPos, len - overFlow);
1:2333262:             byte [] clearText = new byte [cypherText.length];
1:2333262:             //decrypt the data before updating
1:2333262:             for (int i = 0; i < cypherText.length / blockSize; i++)
1:2333262:                 df.decrypt (cypherText, i * blockSize, blockSize, clearText,
1:2333262:                                                                 i * blockSize);
1:2333262:             //update the data
1:2333262:             System.arraycopy (b, off, clearText, (int) (currentPos%blockSize),
1:2333262:                 len - overFlow);
1:2333262:             //encrypt and write back
1:2333262:             for (int i = 0; i < cypherText.length / blockSize; i++)
1:2333262:                 df.encrypt (clearText, i * blockSize, blockSize,
1:2333262:                                         cypherText, i * blockSize, false);
1:2333262:             super.seek (oldPos - oldPos % blockSize);
1:2333262:             super.write (cypherText);
1:2333262:             currentPos = oldPos + cypherText.length;
1:2333262:             //nothing to keep in memory.
1:2333262:             if (overFlow == 0)
1:2333262:                 return;
1:2333262:             //adjust the value to perform rest of the writes in tail buffer
1:2333262:             off = off + len - overFlow;
1:2333262:             len = overFlow;
1:2333262:             //write rest of the data in memory
1:2333262:             currentPos = fileLength;
1:2333262:         }
1:2333262:         //starting position in array
1:2333262:         int pos = (int) (currentPos - fileLength);
1:2333262:         int finalPos = pos + len;
1:2333262:         if (finalPos < blockSize) {
1:2333262:             //updated size won't be enough to perform encryption
1:2333262:             System.arraycopy (b, off, tail, pos, len);
1:2333262:             tailSize = Math.max(tailSize, pos + len);
1:2333262:             currentPos += len;
1:2333262:             return;
1:2333262:         }
1:2333262:         //number of bytes which can be encrypted
1:2333262:         int encLength = finalPos - finalPos % blockSize;
1:2333262:         int leftOver = finalPos % blockSize;
1:2333262:         byte [] clearText = new byte [encLength];
1:2333262:         //create array to encrypt
1:2333262:         //copy the bytes from tail which won't be overwritten
1:2333262:         System.arraycopy (tail, 0, clearText, 0, pos);
1:2333262:         //copy remaining data into array
1:2333262:         System.arraycopy (b, off, clearText, pos, encLength - pos);
1:2333262:         byte [] cypherText = new byte [clearText.length];
1:2333262:         //encrypt and write
1:2333262:         for (int offset = 0; offset < cypherText.length ; offset += blockSize)
1:2333262:             df.encrypt (clearText, offset, blockSize, cypherText,
1:2333262:                                                         offset, false);
1:2333262:         super.seek (fileLength);
1:2333262:         super.write (cypherText);
1:2333262:         //copy rest of it in tail
1:2333262:         System.arraycopy (b, off + len - leftOver, tail, 0, leftOver);
1:2333262:         tailSize = leftOver;
1:2333262:         currentPos = tailSize + fileLength + cypherText.length;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Write the buffer into file at current position. It overwrites the
1:2333262:      * data if current position is in the middle of the file and appends into
1:2333262:      * the file if the total length exceeds the file size.
1:2333262:      * @param b byte array to be written
1:2333262:      * @throws IOException if disk operation fails
1:ec69f5f:      * @throws StandardException if error occurred during encryption/decryption
1:2333262:      */
1:2333262:     void write(byte[] b) throws IOException, StandardException {
1:2333262:         write (b, 0, b.length);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Reads one byte from file.
1:2333262:      * @return byte
1:2333262:      * @throws IOException if disk operation fails
1:ec69f5f:      * @throws StandardException if error occurred during decryption
1:2333262:      */
1:2333262:     int readByte() throws IOException, StandardException {
1:2333262:         long fileLength = super.length();
1:680c9ad:         if (currentPos >= fileLength + tailSize)
1:680c9ad:             throw new EOFException ();
1:2333262:         if (currentPos >= fileLength)
1:2333262:             return tail [(int) (currentPos++ - fileLength)] & 0xff;
1:2333262:         //get the block containing the byte we are interested in
1:2333262:         byte cypherText [] = getBlocks (currentPos, 1);
1:2333262:         byte [] clearText = new byte [cypherText.length];
1:2333262:         df.decrypt (cypherText, 0, cypherText.length, clearText, 0);
1:2333262:         return clearText [(int) (currentPos++ % blockSize)] & 0xff;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Reads len or remaining bytes in the file (whichever is lower) bytes
1:2333262:      * into buff starting from off position of the buffer.
1:2333262:      * @param buff byte array to fill read bytes
1:2333262:      * @param off offset of buff where the byte will be written
1:2333262:      * @param len number of bytes to be read
1:2333262:      * @return number of bytes read
1:2333262:      * @throws IOException if disk operation fails
1:ec69f5f:      * @throws StandardException if error occurred during decryption
1:2333262:      */
1:2333262:     int read(byte[] buff, int off, int len)
1:2333262:                                         throws IOException, StandardException {
1:2333262:         long fileLength = super.length();
1:2333262:         if (currentPos < fileLength) {
1:2333262:             //starting position is in file
1:2333262:             //find number of bytes spilling out of file
1:2333262:             int overFlow = (int) Math.max(0L, currentPos + len - fileLength);
1:2333262:             //get all the blocks
1:2333262:             byte [] cypherText = getBlocks (currentPos, len - overFlow);
1:2333262:             byte [] tmpByte = new byte [cypherText.length];
1:2333262:             //decrypt
1:2333262:             for (int offset = 0; offset < cypherText.length; offset += blockSize) {
1:2333262:                 df.decrypt (cypherText, offset, blockSize, tmpByte,
1:2333262:                                                                 offset);
1:2333262:             }
1:2333262:             //copy the bytes we are interested in
1:2333262:             System.arraycopy (tmpByte, (int) (currentPos%blockSize), buff,
1:2333262:                                                         off, len - overFlow);
1:2333262:             if (overFlow == 0) {
1:2333262:                 currentPos += len;
1:2333262:                 return len;
1:2333262:             }
1:2333262:             //find out total number of bytes we can read
1:2333262:             int newLen = Math.min(overFlow, tailSize);
1:2333262:             //fill the buffer from tail
1:2333262:             System.arraycopy (tail, 0, buff, off + len - overFlow, newLen);
1:2333262:             currentPos += len - overFlow + newLen;
1:2333262:             return len - overFlow + newLen;
1:2333262:         }
1:2333262:         int newLen = (int) Math.min (
1:2333262:             tailSize - currentPos + fileLength, len);
1:2333262:         if (newLen == 0 && len != 0)
1:2333262:             return -1;
1:2333262: 
1:2333262:         System.arraycopy (tail, (int) (currentPos - fileLength),
1:2333262:                             buff, off, newLen);
1:2333262:         currentPos += newLen;
1:2333262:         return newLen;
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Sets the file length to a given size. If the new size is smaller than the
1:2333262:      * file length the file is truncated.
1:680c9ad:      *
1:2333262:      * @param size new  file size. Must be lower than file length.
1:2333262:      * @throws IOException if file i/o fails
1:ec69f5f:      * @throws StandardException if error occurred during decryption
1:2333262:      */
1:2333262:     void setLength(long size) throws IOException, StandardException {
1:680c9ad:         long fileLength = super.length();
1:680c9ad:         if (size > fileLength + tailSize) {
1:2333262:             //this should never happen
1:2333262:             //this exception will mean internal error most
1:2333262:             //probably in LOBStreamControl
1:2333262:             throw new IllegalArgumentException ("Internal Error");
1:2333262:         }
1:680c9ad:         if (size < fileLength) {
1:2333262:             byte [] block = getBlocks (size, 1);
1:2333262:             super.setLength (size - size % blockSize);
1:2333262:             df.decrypt (block, 0, blockSize, tail, 0);
1:2333262:             tailSize = (int) (size % blockSize);
1:2333262:         }
1:2333262:         else {
1:680c9ad:             tailSize = (int) (size - fileLength);
1:2333262:         }
1:2333262:     }
1:2333262: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                         SQLState.BLOB_NONPOSITIVE_LENGTH, len));
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ec69f5f
/////////////////////////////////////////////////////////////////////////
1:      * @throws StandardException if error occurred during encryption/decryption
/////////////////////////////////////////////////////////////////////////
1:      * @throws StandardException if error occurred during encryption/decryption
/////////////////////////////////////////////////////////////////////////
1:      * @throws StandardException if error occurred during encryption/decryption
1:      * @throws StandardException if error occurred during decryption
/////////////////////////////////////////////////////////////////////////
1:      * @throws StandardException if error occurred during decryption
/////////////////////////////////////////////////////////////////////////
1:      * @throws StandardException if error occurred during decryption
commit:680c9ad
/////////////////////////////////////////////////////////////////////////
1:         long fileLength = super.length();
1:         if (pos > fileLength + tailSize) {
1:         if (pos < fileLength) {
/////////////////////////////////////////////////////////////////////////
1:         if (currentPos >= fileLength + tailSize)
1:             throw new EOFException ();
/////////////////////////////////////////////////////////////////////////
1:      *
1:         long fileLength = super.length();
1:         if (size > fileLength + tailSize) {
1:         if (size < fileLength) {
1:             tailSize = (int) (size - fileLength);
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.EncryptedLOBFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.EOFException;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: import org.apache.derby.io.StorageFile;
1: 
1: /**
1:  * This class is a wrapper class on top of StorageRandomAccess to provide common
1:  * methods to write in encrypted file.
1:  * This class is NOT thread safe. The user class should take care
1:  * of synchronization if being used in multi threaded environment.
1:  */
1: class EncryptedLOBFile extends LOBFile {
1:     /** Block size for encryption. */
1:     private final int blockSize;
1:     /** Leftover bytes. Stored in memory until they fill one block .*/
1:     private final byte [] tail;
1:     /** Number of actual bytes in tail array. */
1:     private int tailSize;
1:     /** Current file position. */
1:     private long currentPos;
1:     /** Factory object used for encryption and decryption. */
1:     private final DataFactory df;
1: 
1:     /**
1:      * Constructs the EncryptedLOBFile object with encryption support.
1:      *
1:      * @param lobFile StorageFile Object for which file will be created
1:      * @param df data factory for encryption and decription
1:      * @throws FileNotFoundException if the file exists but is a directory or
1:      * cannot be opened
1:      */
1:     EncryptedLOBFile(StorageFile lobFile, DataFactory df)
1:                                                 throws FileNotFoundException {
1:         super(lobFile);
1:         this.df = df;
1:         blockSize = df.getEncryptionBlockSize();
1:         tail = new byte [blockSize];
1:         tailSize = 0;
1:     }
1: 
1:     /**
1:      * Find the blocks containing the data we are interested in.
1:      *
1:      * @param pos first position we are interested in
1:      * @param len number of bytes of interest
1:      * @return byte array containing all the blocks of data the specified
1:      * region spans over
1:      */
1:     private byte [] getBlocks (long pos, int len)
1:                                         throws IOException, StandardException {
1:         if (len < 0)
1:             throw new IndexOutOfBoundsException (
1:                     MessageService.getTextMessage (
0:                         SQLState.BLOB_NONPOSITIVE_LENGTH, new Integer (len)));
1:         //starting position of the 1st block
1:         long startPos = pos - pos % blockSize;
1:         //end position of last block
1:         long endPos = (pos + len + blockSize - 1) / blockSize * blockSize;
1: 
1:         byte [] data = new byte [(int) (endPos - startPos)];
1:         super.seek (startPos);
1:         super.read (data, 0, data.length);
1:         return data;
1:     }
1: 
1:     /**
1:      * Returns file length.
1:      * @return file length
1:      * @throws IOException if an I/O error occurs
1:      */
1:     long length() throws IOException {
1:         return super.length() + tailSize;
1:     }
1: 
1:     /**
1:      * Returns the currrent position in the file.
1:      * @return current position of file pointer
1:      */
1:     long getFilePointer() {
1:         return currentPos;
1:     }
1: 
1:     /**
1:      * Sets the current file pointer to specific location.
1:      * @param pos new position
1:      * @throws IOException
1:      */
1:     void seek (long pos) throws IOException {
0:         if (pos > length()) {
1:             //this should never happen
1:             //this exception will mean internal error most
1:             //probably in LOBStreamControl
1:             throw new IllegalArgumentException ("Internal Error");
1:         }
0:         if (pos < super.length()) {
1:             super.seek (pos);
1:         }
1:         currentPos = pos;
1:     }
1: 
1:     /**
1:      * Writes one byte into the file.
1:      * @param b byte value
1:      * @throws IOException if disk operation fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     void write (int b) throws IOException, StandardException {
1:         long length = super.length();
1:         if (currentPos >= length) {
1:             //current position is in memory
1:             int pos = (int) (currentPos - length);
1:             tail [pos] = (byte) b;
1:             if (pos >= tailSize) {
1:                 tailSize = pos + 1;
1:             }
1:             if (tailSize == blockSize) {
1:                 //we have enough data to fill one block encrypt and write
1:                 //in file
1:                 byte [] cypherText = new byte [blockSize];
1:                 df.encrypt (tail, 0, tailSize, cypherText, 0, false);
1:                 super.seek (length);
1:                 super.write (cypherText);
1:                 tailSize = 0;
1:             }
1:         }
1:         else {
1:             //write position is in the middle of the file
1:             //get the complete block in which the destination byte falls into
1:             byte [] cypherText = getBlocks (currentPos, 1);
1:             byte [] clearText = new byte [blockSize];
1:             //decrypt the block before updating
1:             df.decrypt(cypherText, 0, blockSize, clearText, 0);
1:             clearText [(int) (currentPos%blockSize)] = (byte) b;
1:             //encrypt and write back
1:             df.encrypt (clearText, 0, blockSize, cypherText, 0, false);
1:             super.seek (currentPos - currentPos % blockSize);
1:             super.write (cypherText);
1:         }
1:         currentPos++;
1:     }
1: 
1:     /**
1:      * Writes length number of bytes from buffer starting from off position.
1:      * @param b byte array containing bytes to be written
1:      * @param off starting offset of the byte array from where the
1:      * data should be written to the file
1:      * @param len number of bytes to be written
1:      * @throws IOException if disk operation fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     void write(byte[] b, int off, int len)
1:                                     throws IOException, StandardException {
1:         long fileLength = super.length();
1:         if (currentPos < fileLength) {
1:             //starting position for write is in file
1:             //find out if we need to update memory
1:             int overFlow = (int) Math.max(0L, currentPos + len - fileLength);
1:             long oldPos = currentPos;
1:             //get the block containing bytes we are going to overwrite
1:             byte [] cypherText = getBlocks (currentPos, len - overFlow);
1:             byte [] clearText = new byte [cypherText.length];
1:             //decrypt the data before updating
1:             for (int i = 0; i < cypherText.length / blockSize; i++)
1:                 df.decrypt (cypherText, i * blockSize, blockSize, clearText,
1:                                                                 i * blockSize);
1:             //update the data
1:             System.arraycopy (b, off, clearText, (int) (currentPos%blockSize),
1:                 len - overFlow);
1:             //encrypt and write back
1:             for (int i = 0; i < cypherText.length / blockSize; i++)
1:                 df.encrypt (clearText, i * blockSize, blockSize,
1:                                         cypherText, i * blockSize, false);
1:             super.seek (oldPos - oldPos % blockSize);
1:             super.write (cypherText);
1:             currentPos = oldPos + cypherText.length;
1:             //nothing to keep in memory.
1:             if (overFlow == 0)
1:                 return;
1:             //adjust the value to perform rest of the writes in tail buffer
1:             off = off + len - overFlow;
1:             len = overFlow;
1:             //write rest of the data in memory
1:             currentPos = fileLength;
1:         }
1:         //starting position in array
1:         int pos = (int) (currentPos - fileLength);
1:         int finalPos = pos + len;
1:         if (finalPos < blockSize) {
1:             //updated size won't be enough to perform encryption
1:             System.arraycopy (b, off, tail, pos, len);
1:             tailSize = Math.max(tailSize, pos + len);
1:             currentPos += len;
1:             return;
1:         }
1:         //number of bytes which can be encrypted
1:         int encLength = finalPos - finalPos % blockSize;
1:         int leftOver = finalPos % blockSize;
1:         byte [] clearText = new byte [encLength];
1:         //create array to encrypt
1:         //copy the bytes from tail which won't be overwritten
1:         System.arraycopy (tail, 0, clearText, 0, pos);
1:         //copy remaining data into array
1:         System.arraycopy (b, off, clearText, pos, encLength - pos);
1:         byte [] cypherText = new byte [clearText.length];
1:         //encrypt and write
1:         for (int offset = 0; offset < cypherText.length ; offset += blockSize)
1:             df.encrypt (clearText, offset, blockSize, cypherText,
1:                                                         offset, false);
1:         super.seek (fileLength);
1:         super.write (cypherText);
1:         //copy rest of it in tail
1:         System.arraycopy (b, off + len - leftOver, tail, 0, leftOver);
1:         tailSize = leftOver;
1:         currentPos = tailSize + fileLength + cypherText.length;
1:     }
1: 
1:     /**
1:      * Write the buffer into file at current position. It overwrites the
1:      * data if current position is in the middle of the file and appends into
1:      * the file if the total length exceeds the file size.
1:      * @param b byte array to be written
1:      * @throws IOException if disk operation fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     void write(byte[] b) throws IOException, StandardException {
1:         write (b, 0, b.length);
1:     }
1: 
1:     /**
0:      * closes the file.
1:      * @throws IOException
1:      */
0:     void close() throws IOException {
0:         super.close();
1:     }
1: 
1:     /**
1:      * Reads one byte from file.
1:      * @return byte
1:      * @throws IOException if disk operation fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     int readByte() throws IOException, StandardException {
0:         if (currentPos >= length())
0:             throw new EOFException ();
1:         long fileLength = super.length();
1:         if (currentPos >= fileLength)
1:             return tail [(int) (currentPos++ - fileLength)] & 0xff;
1:         //get the block containing the byte we are interested in
1:         byte cypherText [] = getBlocks (currentPos, 1);
1:         byte [] clearText = new byte [cypherText.length];
1:         df.decrypt (cypherText, 0, cypherText.length, clearText, 0);
1:         return clearText [(int) (currentPos++ % blockSize)] & 0xff;
1:     }
1: 
1:     /**
1:      * Reads len or remaining bytes in the file (whichever is lower) bytes
1:      * into buff starting from off position of the buffer.
1:      * @param buff byte array to fill read bytes
1:      * @param off offset of buff where the byte will be written
1:      * @param len number of bytes to be read
1:      * @return number of bytes read
1:      * @throws IOException if disk operation fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     int read(byte[] buff, int off, int len)
1:                                         throws IOException, StandardException {
1:         long fileLength = super.length();
1:         if (currentPos < fileLength) {
1:             //starting position is in file
1:             //find number of bytes spilling out of file
1:             int overFlow = (int) Math.max(0L, currentPos + len - fileLength);
1:             //get all the blocks
1:             byte [] cypherText = getBlocks (currentPos, len - overFlow);
1:             byte [] tmpByte = new byte [cypherText.length];
1:             //decrypt
1:             for (int offset = 0; offset < cypherText.length; offset += blockSize) {
1:                 df.decrypt (cypherText, offset, blockSize, tmpByte,
1:                                                                 offset);
1:             }
1:             //copy the bytes we are interested in
1:             System.arraycopy (tmpByte, (int) (currentPos%blockSize), buff,
1:                                                         off, len - overFlow);
1:             if (overFlow == 0) {
1:                 currentPos += len;
1:                 return len;
1:             }
1:             //find out total number of bytes we can read
1:             int newLen = Math.min(overFlow, tailSize);
1:             //fill the buffer from tail
1:             System.arraycopy (tail, 0, buff, off + len - overFlow, newLen);
1:             currentPos += len - overFlow + newLen;
1:             return len - overFlow + newLen;
1:         }
1:         int newLen = (int) Math.min (
1:             tailSize - currentPos + fileLength, len);
1:         if (newLen == 0 && len != 0)
1:             return -1;
1: 
1:         System.arraycopy (tail, (int) (currentPos - fileLength),
1:                             buff, off, newLen);
1:         currentPos += newLen;
1:         return newLen;
1:     }
1: 
1:     /**
1:      * Sets the file length to a given size. If the new size is smaller than the
1:      * file length the file is truncated.
1:      * @param size new  file size. Must be lower than file length.
1:      * @throws IOException if file i/o fails
0:      * @throws StandardException if error occured during encryption/decryption
1:      */
1:     void setLength(long size) throws IOException, StandardException {
0:         if (size > length()) {
1:             //this should never happen
1:             //this exception will mean internal error most
1:             //probably in LOBStreamControl
1:             throw new IllegalArgumentException ("Internal Error");
1:         }
1:         long length = super.length();
0:         if (size < length) {
1:             byte [] block = getBlocks (size, 1);
1:             super.setLength (size - size % blockSize);
1:             df.decrypt (block, 0, blockSize, tail, 0);
1:             tailSize = (int) (size % blockSize);
1:         }
1:         else {
0:             tailSize = (int) (size - length);
1:         }
1:     }
1: }
============================================================================