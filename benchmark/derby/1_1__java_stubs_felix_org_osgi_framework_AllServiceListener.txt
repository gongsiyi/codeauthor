1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/AllServiceListener.java,v 1.10 2007/02/20 00:16:30 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2005, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A <code>ServiceEvent</code> listener that does not filter based upon
1:a8b6921:  * package wiring. <code>AllServiceListener</code> is a listener interface
1:a8b6921:  * that may be implemented by a bundle developer. When a
1:a8b6921:  * <code>ServiceEvent</code> is fired, it is synchronously delivered to an
1:a8b6921:  * <code>AllServiceListener</code>. The Framework may deliver
1:a8b6921:  * <code>ServiceEvent</code> objects to an <code>AllServiceListener</code>
1:a8b6921:  * out of order and may concurrently call and/or reenter an
1:a8b6921:  * <code>AllServiceListener</code>.
1:a8b6921:  * <p>
1:a8b6921:  * An <code>AllServiceListener</code> object is registered with the Framework
1:a8b6921:  * using the <code>BundleContext.addServiceListener</code> method.
1:a8b6921:  * <code>AllServiceListener</code> objects are called with a
1:a8b6921:  * <code>ServiceEvent</code> object when a service is registered, modified, or
1:a8b6921:  * is in the process of unregistering.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>ServiceEvent</code> object delivery to
1:a8b6921:  * <code>AllServiceListener</code> objects is filtered by the filter specified
1:a8b6921:  * when the listener was registered. If the Java Runtime Environment supports
1:a8b6921:  * permissions, then additional filtering is done. <code>ServiceEvent</code>
1:a8b6921:  * objects are only delivered to the listener if the bundle which defines the
1:a8b6921:  * listener object's class has the appropriate <code>ServicePermission</code>
1:a8b6921:  * to get the service using at least one of the named classes under which the
1:a8b6921:  * service was registered.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * Unlike normal <code>ServiceListener</code> objects,
1:a8b6921:  * <code>AllServiceListener</code> objects receive all
1:a8b6921:  * <code>ServiceEvent</code> objects regardless of whether the package source
1:a8b6921:  * of the listening bundle is equal to the package source of the bundle that
1:a8b6921:  * registered the service. This means that the listener may not be able to cast
1:a8b6921:  * the service object to any of its corresponding service interfaces if the
1:a8b6921:  * service object is retrieved.
1:a8b6921:  * 
1:a8b6921:  * @see ServiceEvent
1:a8b6921:  * @see ServicePermission
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @since 1.3
1:a8b6921:  * @version $Revision: 1.10 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface AllServiceListener extends ServiceListener {
1:a8b6921: 	// This is a marker interface
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/AllServiceListener.java,v 1.10 2007/02/20 00:16:30 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2005, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: /**
1:  * A <code>ServiceEvent</code> listener that does not filter based upon
1:  * package wiring. <code>AllServiceListener</code> is a listener interface
1:  * that may be implemented by a bundle developer. When a
1:  * <code>ServiceEvent</code> is fired, it is synchronously delivered to an
1:  * <code>AllServiceListener</code>. The Framework may deliver
1:  * <code>ServiceEvent</code> objects to an <code>AllServiceListener</code>
1:  * out of order and may concurrently call and/or reenter an
1:  * <code>AllServiceListener</code>.
1:  * <p>
1:  * An <code>AllServiceListener</code> object is registered with the Framework
1:  * using the <code>BundleContext.addServiceListener</code> method.
1:  * <code>AllServiceListener</code> objects are called with a
1:  * <code>ServiceEvent</code> object when a service is registered, modified, or
1:  * is in the process of unregistering.
1:  * 
1:  * <p>
1:  * <code>ServiceEvent</code> object delivery to
1:  * <code>AllServiceListener</code> objects is filtered by the filter specified
1:  * when the listener was registered. If the Java Runtime Environment supports
1:  * permissions, then additional filtering is done. <code>ServiceEvent</code>
1:  * objects are only delivered to the listener if the bundle which defines the
1:  * listener object's class has the appropriate <code>ServicePermission</code>
1:  * to get the service using at least one of the named classes under which the
1:  * service was registered.
1:  * 
1:  * <p>
1:  * Unlike normal <code>ServiceListener</code> objects,
1:  * <code>AllServiceListener</code> objects receive all
1:  * <code>ServiceEvent</code> objects regardless of whether the package source
1:  * of the listening bundle is equal to the package source of the bundle that
1:  * registered the service. This means that the listener may not be able to cast
1:  * the service object to any of its corresponding service interfaces if the
1:  * service object is retrieved.
1:  * 
1:  * @see ServiceEvent
1:  * @see ServicePermission
1:  * @ThreadSafe
1:  * @since 1.3
1:  * @version $Revision: 1.10 $
1:  */
1: 
1: public interface AllServiceListener extends ServiceListener {
1: 	// This is a marker interface
1: }
============================================================================