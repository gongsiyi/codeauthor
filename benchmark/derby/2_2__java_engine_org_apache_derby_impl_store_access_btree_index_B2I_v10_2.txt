1:b61f876: /*
1:b61f876: 
1:b61f876:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I
1:b61f876: 
1:b61f876:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b61f876:    contributor license agreements.  See the NOTICE file distributed with
1:b61f876:    this work for additional information regarding copyright ownership.
1:b61f876:    The ASF licenses this file to you under the Apache License, Version 2.0
1:b61f876:    (the "License"); you may not use this file except in compliance with
1:b61f876:    the License.  You may obtain a copy of the License at
1:b61f876: 
1:b61f876:       http://www.apache.org/licenses/LICENSE-2.0
1:b61f876: 
1:b61f876:    Unless required by applicable law or agreed to in writing, software
1:b61f876:    distributed under the License is distributed on an "AS IS" BASIS,
1:b61f876:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b61f876:    See the License for the specific language governing permissions and
1:b61f876:    limitations under the License.
1:b61f876: 
1:b61f876:  */
1:b61f876: 
1:b61f876: package org.apache.derby.impl.store.access.btree.index;
1:b61f876: 
1:b61f876: 
1:b61f876: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1:b61f876: 
1:b61f876: import java.io.IOException; 
1:b61f876: import java.io.ObjectOutput;
1:b61f876: import java.io.ObjectInput;
1:b61f876: 
1:b61f876: import java.lang.ClassNotFoundException;
1:b61f876: 
1:b61f876: 
1:b61f876: /*
1:787ceb4:  * @derby.formatId ACCESS_B2I_V3_ID
1:b61f876:  *
1:787ceb4:  * @derby.purpose   The tag that describes the on disk representation of the B2I
1:b61f876:  *            conglomerate object.  Access contains no "directory" of 
1:b61f876:  *            conglomerate information.  In order to bootstrap opening a file
1:b61f876:  *            it encodes the factory that can open the conglomerate in the 
1:b61f876:  *            conglomerate id itself.  There exists a single B2IFactory which
1:b61f876:  *            must be able to read all btree format id's.  
1:b61f876:  *
1:b61f876:  *            This format was used for all Derby database B2I's in version
1:b61f876:  *            10.2 and previous versions.
1:b61f876:  *
1:787ceb4:  * @derby.upgrade   The format id of this object is currently always read from disk
1:b61f876:  *            as the first field of the conglomerate itself.  A bootstrap
1:b61f876:  *            problem exists as we don't know the format id of the B2I 
1:b61f876:  *            until we are in the "middle" of reading the B2I.  Thus the
1:b61f876:  *            base B2I implementation must be able to read and write 
1:b61f876:  *            all formats based on the reading the 
1:b61f876:  *            "format_of_this_conglomerate". 
1:b61f876:  *
1:b61f876:  *            soft upgrade to ACCESS_B2I_V4_ID:
1:b61f876:  *                read:
1:b61f876:  *                    old format is readable by current B2I implementation,
1:b61f876:  *                    with automatic in memory creation of default collation
1:b61f876:  *                    id needed by new format.  No code other than
1:b61f876:  *                    readExternal and writeExternal need know about old format.
1:b61f876:  *                write:
1:b61f876:  *                    will never write out new format id in soft upgrade mode.
1:b61f876:  *                    Code in readExternal and writeExternal handles writing
1:b61f876:  *                    correct version.  Code in the factory handles making
1:b61f876:  *                    sure new conglomerates use the B2I_v10_2 class to 
1:b61f876:  *                    that will write out old format info.
1:b61f876:  *
1:b61f876:  *            hard upgrade to ACCESS_B2I_V4_ID:
1:b61f876:  *                read:
1:b61f876:  *                    old format is readable by current B2I implementation,
1:b61f876:  *                    with automatic in memory creation of default collation
1:b61f876:  *                    id needed by new format.
1:b61f876:  *                write:
1:b61f876:  *                    Only "lazy" upgrade will happen.  New format will only
1:b61f876:  *                    get written for new conglomerate created after the 
1:b61f876:  *                    upgrade.  Old conglomerates continue to be handled the
1:b61f876:  *                    same as soft upgrade.
1:b61f876:  *
1:787ceb4:  * @derby.diskLayout 
1:b61f876:  *     format_of_this_conlgomerate(byte[])
1:b61f876:  *     containerid(long)
1:b61f876:  *     segmentid(int)
1:b61f876:  *     number_of_key_fields(int)
1:b61f876:  *     number_of_unique_columns(int)
1:b61f876:  *     allow_duplicates(boolean)
1:b61f876:  *     maintain_parent_links(boolean)
1:b61f876:  *     array_of_format_ids(byte[][])
1:b61f876:  *     baseConglomerateId(long)
1:b61f876:  *     rowLocationColumn(int)
1:b61f876:  *     ascend_column_info(FormatableBitSet)
1:b61f876:  *
1:b61f876:  */
1:b61f876: 
1:b61f876: /**
1:b61f876:  * Class used to instantiate 10.2 version of the B2I object.
1:b61f876:  *
1:b61f876:  * This class implements the format of the B2I object as existed in 
1:b61f876:  * the 10.2 and previous releases of Derby.  In subsequent releases
1:b61f876:  * the format was enhanced to store the Collation Id of the columns
1:b61f876:  * in the index.  
1:b61f876:  *
1:b61f876:  * Collation can be configured on a per column basis to allow for
1:b61f876:  * alter sort ordering of each column.  One use of this is to allow
1:b61f876:  * a column to be sorted according to language based rules rather
1:b61f876:  * than the default numerical ordering of the binary value.
1:b61f876:  *
1:b61f876:  * For upgrade purpose all columns stored with ACCESS_B2I_V3_ID format
1:b61f876:  * are assumed to be USC_BASIC collation id (ie. the default numerical
1:b61f876:  * ordering, rather than any alternate collation).  
1:b61f876:  *
1:b61f876:  * This class reads and writes the V3 version to/from disk and reads/writes
1:b61f876:  * current in-memory version of the data structure.
1:b61f876:  *
1:b61f876:  */
1:b61f876: public class B2I_v10_2 extends B2I
1:b61f876: {
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * No arg constructor, required by Formatable.
1:b61f876:      **/
1:b61f876:     public B2I_v10_2()
1:b61f876:     {
1:b61f876:         super();
1:b61f876:     }
1:b61f876: 
1:b61f876: 
1:b61f876:     /**************************************************************************
1:b61f876:      * Public Methods required by Storable interface, implies 
1:b61f876:      *     Externalizable, TypedFormat:
1:b61f876:      **************************************************************************
1:b61f876:      */
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Return my format identifier.
1:b61f876:      * <p>
1:b61f876:      * This identifier was used for B2I in all Derby versions prior to and
1:b61f876:      * including 10.2.  Databases hard upgraded to a version subsequent
1:b61f876:      * to 10.2 will write the new format, see B2I.  Databases created in
1:b61f876:      * a version subsequent to 10.2 will also write the new formate, see
1:b61f876:      * B2I.
1:b61f876:      *
1:b61f876:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:b61f876:      **/
1:b61f876: 	public int getTypeFormatId() 
1:b61f876:     {
1:b61f876: 		return StoredFormatIds.ACCESS_B2I_V3_ID;
1:b61f876: 	}
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Store the stored representation of the column value in the
1:b61f876:      * stream.
1:b61f876:      * <p>
1:b61f876:      * For more detailed description of the format see documentation
1:b61f876:      * at top of file.
1:b61f876:      *
1:b61f876:      * @see java.io.Externalizable#writeExternal
1:b61f876:      **/
1:b61f876: 	public void writeExternal(ObjectOutput out) throws IOException 
1:b61f876:     {
1:b61f876: 		super.writeExternal_v10_2(out);
1:b61f876: 	}
1:b61f876: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1:  * @derby.formatId ACCESS_B2I_V3_ID
1:  * @derby.purpose   The tag that describes the on disk representation of the B2I
/////////////////////////////////////////////////////////////////////////
1:  * @derby.upgrade   The format id of this object is currently always read from disk
/////////////////////////////////////////////////////////////////////////
1:  * @derby.diskLayout 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1: 
1: import java.io.IOException; 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: 
1: import java.lang.ClassNotFoundException;
1: 
1: 
1: /*
0:  * @format_id ACCESS_B2I_V3_ID
1:  *
0:  * @purpose   The tag that describes the on disk representation of the B2I
1:  *            conglomerate object.  Access contains no "directory" of 
1:  *            conglomerate information.  In order to bootstrap opening a file
1:  *            it encodes the factory that can open the conglomerate in the 
1:  *            conglomerate id itself.  There exists a single B2IFactory which
1:  *            must be able to read all btree format id's.  
1:  *
1:  *            This format was used for all Derby database B2I's in version
1:  *            10.2 and previous versions.
1:  *
0:  * @upgrade   The format id of this object is currently always read from disk
1:  *            as the first field of the conglomerate itself.  A bootstrap
1:  *            problem exists as we don't know the format id of the B2I 
1:  *            until we are in the "middle" of reading the B2I.  Thus the
1:  *            base B2I implementation must be able to read and write 
1:  *            all formats based on the reading the 
1:  *            "format_of_this_conglomerate". 
1:  *
1:  *            soft upgrade to ACCESS_B2I_V4_ID:
1:  *                read:
1:  *                    old format is readable by current B2I implementation,
1:  *                    with automatic in memory creation of default collation
1:  *                    id needed by new format.  No code other than
1:  *                    readExternal and writeExternal need know about old format.
1:  *                write:
1:  *                    will never write out new format id in soft upgrade mode.
1:  *                    Code in readExternal and writeExternal handles writing
1:  *                    correct version.  Code in the factory handles making
1:  *                    sure new conglomerates use the B2I_v10_2 class to 
1:  *                    that will write out old format info.
1:  *
1:  *            hard upgrade to ACCESS_B2I_V4_ID:
1:  *                read:
1:  *                    old format is readable by current B2I implementation,
1:  *                    with automatic in memory creation of default collation
1:  *                    id needed by new format.
1:  *                write:
1:  *                    Only "lazy" upgrade will happen.  New format will only
1:  *                    get written for new conglomerate created after the 
1:  *                    upgrade.  Old conglomerates continue to be handled the
1:  *                    same as soft upgrade.
1:  *
0:  * @disk_layout 
1:  *     format_of_this_conlgomerate(byte[])
1:  *     containerid(long)
1:  *     segmentid(int)
1:  *     number_of_key_fields(int)
1:  *     number_of_unique_columns(int)
1:  *     allow_duplicates(boolean)
1:  *     maintain_parent_links(boolean)
1:  *     array_of_format_ids(byte[][])
1:  *     baseConglomerateId(long)
1:  *     rowLocationColumn(int)
1:  *     ascend_column_info(FormatableBitSet)
1:  *
1:  */
1: 
1: /**
1:  * Class used to instantiate 10.2 version of the B2I object.
1:  *
1:  * This class implements the format of the B2I object as existed in 
1:  * the 10.2 and previous releases of Derby.  In subsequent releases
1:  * the format was enhanced to store the Collation Id of the columns
1:  * in the index.  
1:  *
1:  * Collation can be configured on a per column basis to allow for
1:  * alter sort ordering of each column.  One use of this is to allow
1:  * a column to be sorted according to language based rules rather
1:  * than the default numerical ordering of the binary value.
1:  *
1:  * For upgrade purpose all columns stored with ACCESS_B2I_V3_ID format
1:  * are assumed to be USC_BASIC collation id (ie. the default numerical
1:  * ordering, rather than any alternate collation).  
1:  *
1:  * This class reads and writes the V3 version to/from disk and reads/writes
1:  * current in-memory version of the data structure.
1:  *
1:  */
1: public class B2I_v10_2 extends B2I
1: {
1: 
1:     /**
1:      * No arg constructor, required by Formatable.
1:      **/
1:     public B2I_v10_2()
1:     {
1:         super();
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods required by Storable interface, implies 
1:      *     Externalizable, TypedFormat:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Return my format identifier.
1:      * <p>
1:      * This identifier was used for B2I in all Derby versions prior to and
1:      * including 10.2.  Databases hard upgraded to a version subsequent
1:      * to 10.2 will write the new format, see B2I.  Databases created in
1:      * a version subsequent to 10.2 will also write the new formate, see
1:      * B2I.
1:      *
1:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:      **/
1: 	public int getTypeFormatId() 
1:     {
1: 		return StoredFormatIds.ACCESS_B2I_V3_ID;
1: 	}
1: 
1:     /**
1:      * Store the stored representation of the column value in the
1:      * stream.
1:      * <p>
1:      * For more detailed description of the format see documentation
1:      * at top of file.
1:      *
1:      * @see java.io.Externalizable#writeExternal
1:      **/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1:     {
1: 		super.writeExternal_v10_2(out);
1: 	}
1: }
============================================================================