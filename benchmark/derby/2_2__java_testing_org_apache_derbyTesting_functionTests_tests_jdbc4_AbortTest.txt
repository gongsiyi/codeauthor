1:0a17859: /*
1:0a17859: 
1:0a17859:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.AbortTest
1:0a17859: 
1:0a17859:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0a17859:    contributor license agreements.  See the NOTICE file distributed with
1:0a17859:    this work for additional information regarding copyright ownership.
1:0a17859:    The ASF licenses this file to You under the Apache License, Version 2.0
1:0a17859:    (the "License"); you may not use this file except in compliance with
1:0a17859:    the License.  You may obtain a copy of the License at
1:0a17859: 
1:0a17859:       http://www.apache.org/licenses/LICENSE-2.0
1:0a17859: 
1:0a17859:    Unless required by applicable law or agreed to in writing, software
1:0a17859:    distributed under the License is distributed on an "AS IS" BASIS,
1:0a17859:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a17859:    See the License for the specific language governing permissions and
1:0a17859:    limitations under the License.
1:0a17859: 
1:0a17859:  */
1:0a17859: 
1:0a17859: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:0a17859: 
1:0a17859: import java.security.AccessControlException;
1:0a17859: import java.security.AccessController;
1:0a17859: import java.security.PrivilegedExceptionAction;
1:0a17859: import java.sql.Connection;
1:0a17859: import java.sql.PreparedStatement;
1:0a17859: import java.sql.ResultSet;
1:0a17859: import java.sql.SQLException;
1:0a17859: import java.sql.Statement;
1:d79f538: import javax.sql.ConnectionPoolDataSource;
1:d79f538: import javax.sql.PooledConnection;
1:d79f538: import javax.sql.XAConnection;
1:d79f538: import javax.sql.XADataSource;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0a17859: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:d79f538: import org.apache.derbyTesting.junit.J2EEDataSource;
1:0a17859: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:0a17859: import org.apache.derbyTesting.junit.TestConfiguration;
1:0a17859: 
1:0a17859: /**
1:0a17859:  * Tests for the new JDBC 4.1 Connection.abort(Executor) method. This
1:0a17859:  * class tests the affect of SecurityManagers on the method. A related
1:0a17859:  * test case can be found in ConnectionMethodsTest.
1:0a17859:  */
1:0a17859: public class AbortTest extends Wrapper41Test
1:0a17859: {
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859:     //
1:0a17859:     // CONSTANTS
1:0a17859:     //
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859: 
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859:     //
1:0a17859:     // STATE
1:0a17859:     //
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859: 
1:0a17859:     private boolean _hasSecurityManager;
1:0a17859: 
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859:     //
1:0a17859:     // CONSTRUCTOR
1:0a17859:     //
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859: 
1:0a17859:     public AbortTest(String name, boolean hasSecurityManager)
1:0a17859:     {
1:0a17859:         super(name);
1:0a17859:         
1:0a17859:         _hasSecurityManager = hasSecurityManager;
1:0a17859:     }
1:0a17859: 
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859:     //
1:0a17859:     // JUnit BEHAVIOR
1:0a17859:     //
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859: 
1:0a17859:     public static Test suite()
1:0a17859:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite( "AbortTest" );
1:0a17859: 
1:0a17859:         suite.addTest( baseSuite( true ) );
1:0a17859:         suite.addTest( baseSuite( false ) );
1:0a17859: 
1:0a17859:         suite.addTest
1:0a17859:             (
1:0a17859:              TestConfiguration.clientServerDecorator
1:0a17859:              ( baseSuite( true ) )
1:0a17859:              );
1:0a17859:         suite.addTest
1:0a17859:             (
1:0a17859:              TestConfiguration.clientServerDecorator
1:0a17859:              ( baseSuite( false ) )
1:0a17859:              );
1:0a17859:         
1:0a17859:         return suite;
1:0a17859:     }
1:0a17859: 
1:0a17859:     public static Test baseSuite( boolean hasSecurityManager )
1:0a17859:     {
1:0a17859:         AbortTest   abortTest = new AbortTest( "test_basic", hasSecurityManager );
1:0a17859:         
1:0a17859:         Test test = new CleanDatabaseTestSetup( abortTest )
1:0a17859:             {
1:0a17859:                 protected void decorateSQL( Statement s ) throws SQLException
1:0a17859:                 {
1:0a17859:                     s.execute("create table abort_table( a int )");
1:0a17859:                 }
1:0a17859:             };
1:0a17859: 
1:0a17859:         if ( hasSecurityManager )
1:0a17859:         {
1:0a17859:             return new SecurityManagerSetup( test, "org/apache/derbyTesting/functionTests/tests/jdbc4/noAbortPermission.policy" );
1:0a17859:         }
1:0a17859:         else
1:0a17859:         {
1:0a17859:             return SecurityManagerSetup.noSecurityManager( test );
1:0a17859:         }
1:0a17859:     }
1:0a17859:     
1:0a17859:     
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859:     //
1:0a17859:     // TESTS
1:0a17859:     //
1:0a17859:     ///////////////////////////////////////////////////////////////////////
1:0a17859: 
1:0a17859:     /**
1:0a17859:      * <p>
1:0a17859:      * Test Connection.abort(Executor) with and without a security manager.
1:0a17859:      * </p>
1:0a17859:      */
1:0a17859:     public  void    test_basic() throws Exception
1:0a17859:     {
1:0a17859:         //
1:0a17859:         // Only run if we can grant permissions to the jar files.
1:0a17859:         //
1:0a17859:         if ( !TestConfiguration.loadingFromJars() ) { return; }
1:0a17859: 
1:0a17859:         println( "AbortTest( " + _hasSecurityManager + " )" );
1:0a17859:         assertEquals( _hasSecurityManager, (System.getSecurityManager() != null) );
1:0a17859: 
1:d79f538:         physical();
1:d79f538:         pooled();
1:d79f538:         xa();
1:d79f538:     }
1:d79f538: 
1:d79f538:     private void    physical()  throws Exception
1:d79f538:     {
1:0a17859:         Connection conn0 = openUserConnection( "user0");
1:d79f538:         Connection conn1 = openUserConnection( "user1");
1:d79f538:         Connection conn2 = openUserConnection( "user2");
1:d79f538: 
1:d79f538:         vet( conn0, conn1, conn2 );
1:d79f538:     }
1:d79f538: 
1:d79f538:     private void    pooled()    throws Exception
1:d79f538:     {
1:d79f538:         ConnectionPoolDataSource cpDs =
1:d79f538:                 J2EEDataSource.getConnectionPoolDataSource();
1:d79f538:         
1:d79f538:         PooledConnection conn0 = getPooledConnection( cpDs, "user3");
1:d79f538:         PooledConnection conn1 = getPooledConnection( cpDs, "user4");
1:d79f538:         PooledConnection conn2 = getPooledConnection( cpDs, "user5");
1:d79f538: 
1:d79f538:         vet( conn0.getConnection(), conn1.getConnection(), conn2.getConnection() );
1:d79f538:     }
1:d79f538:     private PooledConnection    getPooledConnection
1:d79f538:         ( ConnectionPoolDataSource cpDs, String userName ) throws Exception
1:d79f538:     {
1:d79f538:         return cpDs.getPooledConnection( userName, getTestConfiguration().getPassword( userName ) );
1:d79f538:     }
1:d79f538:     
1:d79f538:     private void    xa()        throws Exception
1:d79f538:     {
1:d79f538:         XADataSource xads = J2EEDataSource.getXADataSource();
1:d79f538:         
1:d79f538:         XAConnection conn0 = getXAConnection( xads, "user6");
1:d79f538:         XAConnection conn1 = getXAConnection( xads, "user7");
1:d79f538:         XAConnection conn2 = getXAConnection( xads, "user8");
1:d79f538: 
1:d79f538:         vet( conn0.getConnection(), conn1.getConnection(), conn2.getConnection() );
1:d79f538:     }
1:d79f538:     private XAConnection    getXAConnection
1:d79f538:         ( XADataSource xads, String userName ) throws Exception
1:d79f538:     {
1:d79f538:         return xads.getXAConnection( userName, getTestConfiguration().getPassword( userName ) );
1:d79f538:     }
1:d79f538:     
1:d79f538:     /**
1:d79f538:      * <p>
1:d79f538:      * Test Connection.abort(Executor) with and without a security manager.
1:d79f538:      * </p>
1:d79f538:      */
1:d79f538:     public  void    vet( Connection conn0, Connection conn1, Connection conn2 ) throws Exception
1:d79f538:     {
1:d79f538:         assertNotNull( conn0 );
1:d79f538:         assertNotNull( conn1 );
1:d79f538:         assertNotNull( conn2 );
1:d79f538:         
1:d79f538:         // NOP if called on a closed connection
1:0a17859:         conn0.close();
1:0a17859:         Wrapper41Conn   wrapper0 = new Wrapper41Conn( conn0 );
1:0a17859:         wrapper0.abort( new ConnectionMethodsTest.DirectExecutor() );
1:0a17859: 
1:0a17859:         conn1.setAutoCommit( false );
1:0a17859:         final   Wrapper41Conn   wrapper1 = new Wrapper41Conn( conn1 );
1:0a17859: 
1:0a17859:         // the Executor may not be null
1:0a17859:         try {
1:0a17859:             wrapper1.abort( null );
1:0a17859:         }
1:0a17859:         catch (SQLException se)
1:0a17859:         {
1:0a17859:             assertSQLState( "XCZ02", se );
1:0a17859:         }
1:0a17859: 
1:0a17859:         if ( _hasSecurityManager ) { missingPermission( wrapper1 ); }
1:d79f538:         else { noSecurityManager( wrapper1, conn2 ); }
1:0a17859:     }
1:0a17859: 
1:0a17859:     // Run if we have a security manager. This tests that abort() fails
1:0a17859:     // if the caller has not been granted the correct permission.
1:0a17859:     private void    missingPermission( final Wrapper41Conn wrapper1 ) throws Exception
1:0a17859:     {
1:0a17859:         // should not be able to abort the connection because this code
1:0a17859:         // lacks the permission
1:0a17859:         try {
1:0a17859:             //
1:0a17859:             // This doPrivileged block absolves outer code blocks (like JUnit)
1:0a17859:             // of the need to be granted SQLPermission( "callAbort" ). However,
1:0a17859:             // derbyTesting.jar still needs that permission.
1:0a17859:             //
1:0a17859:             AccessController.doPrivileged
1:0a17859:                 (
1:0a17859:                  new PrivilegedExceptionAction<Object>()
1:0a17859:                  {
1:0a17859:                      public Object    run() throws Exception
1:0a17859:                      {
1:0a17859:                          ConnectionMethodsTest.DirectExecutor  executor = new ConnectionMethodsTest.DirectExecutor();
1:0a17859:                          wrapper1.abort( executor );
1:0a17859:                          return null;
1:0a17859:                      }
1:0a17859:                  }
1:0a17859:                  );
1:0a17859:             fail( "The call to Connection.abort(Executor) should have failed." );
1:0a17859:         }
1:0a17859:         catch (Exception e)
1:0a17859:         {
1:0a17859:             assertTrue( e instanceof AccessControlException );
1:0a17859:         }
1:0a17859:     }
1:0a17859: 
1:0a17859:     // Run if we don't have a security manager. Verifies that abort() is uncontrolled
1:0a17859:     // in that situation.
1:d79f538:     private void    noSecurityManager(  final Wrapper41Conn wrapper1, Connection conn2  ) throws Exception
1:0a17859:     {
1:0a17859:         PreparedStatement   ps = prepareStatement
1:0a17859:             ( wrapper1.getWrappedObject(), "insert into app.abort_table( a ) values ( 1 )" );
1:0a17859:         ps.execute();
1:0a17859:         ps.close();
1:0a17859: 
1:0a17859:         // abort the connection
1:0a17859:         ConnectionMethodsTest.DirectExecutor  executor = new ConnectionMethodsTest.DirectExecutor();
1:0a17859:         wrapper1.abort( executor );
1:0a17859: 
1:0a17859:         // verify that the connection is closed
1:0a17859:         try {
1:0a17859:             prepareStatement( wrapper1.getWrappedObject(), "select * from sys.systables" );
1:0a17859:             fail( "Connection should be dead!" );
1:0a17859:         }
1:0a17859:         catch (SQLException se)
1:0a17859:         {
1:0a17859:             assertSQLState( "08003", se );
1:0a17859:         }
1:0a17859: 
1:0a17859:         // verify that the changes were rolled back
1:0a17859:         ps = prepareStatement( conn2, "select * from app.abort_table" );
1:0a17859:         ResultSet   rs = ps.executeQuery();
1:0a17859:         assertFalse( rs.next() );
1:0a17859:         rs.close();
1:0a17859:         ps.close();
1:0a17859:         conn2.close();
1:0a17859:     }
1:0a17859: 
1:0a17859: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite( "AbortTest" );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:d79f538
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.ConnectionPoolDataSource;
0: import javax.sql.DataSource;
1: import javax.sql.PooledConnection;
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
/////////////////////////////////////////////////////////////////////////
1:         physical();
1:         pooled();
1:         xa();
1:     }
1: 
1:     private void    physical()  throws Exception
1:     {
1:         Connection conn1 = openUserConnection( "user1");
1:         Connection conn2 = openUserConnection( "user2");
1: 
1:         vet( conn0, conn1, conn2 );
1:     }
1: 
1:     private void    pooled()    throws Exception
1:     {
1:         ConnectionPoolDataSource cpDs =
1:                 J2EEDataSource.getConnectionPoolDataSource();
1:         
1:         PooledConnection conn0 = getPooledConnection( cpDs, "user3");
1:         PooledConnection conn1 = getPooledConnection( cpDs, "user4");
1:         PooledConnection conn2 = getPooledConnection( cpDs, "user5");
1: 
1:         vet( conn0.getConnection(), conn1.getConnection(), conn2.getConnection() );
1:     }
1:     private PooledConnection    getPooledConnection
1:         ( ConnectionPoolDataSource cpDs, String userName ) throws Exception
1:     {
1:         return cpDs.getPooledConnection( userName, getTestConfiguration().getPassword( userName ) );
1:     }
1:     
1:     private void    xa()        throws Exception
1:     {
1:         XADataSource xads = J2EEDataSource.getXADataSource();
1:         
1:         XAConnection conn0 = getXAConnection( xads, "user6");
1:         XAConnection conn1 = getXAConnection( xads, "user7");
1:         XAConnection conn2 = getXAConnection( xads, "user8");
1: 
1:         vet( conn0.getConnection(), conn1.getConnection(), conn2.getConnection() );
1:     }
1:     private XAConnection    getXAConnection
1:         ( XADataSource xads, String userName ) throws Exception
1:     {
1:         return xads.getXAConnection( userName, getTestConfiguration().getPassword( userName ) );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Test Connection.abort(Executor) with and without a security manager.
1:      * </p>
1:      */
1:     public  void    vet( Connection conn0, Connection conn1, Connection conn2 ) throws Exception
1:     {
1:         assertNotNull( conn0 );
1:         assertNotNull( conn1 );
1:         assertNotNull( conn2 );
1:         
1:         // NOP if called on a closed connection
/////////////////////////////////////////////////////////////////////////
1:         else { noSecurityManager( wrapper1, conn2 ); }
/////////////////////////////////////////////////////////////////////////
1:     private void    noSecurityManager(  final Wrapper41Conn wrapper1, Connection conn2  ) throws Exception
/////////////////////////////////////////////////////////////////////////
commit:0a17859
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.AbortTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.security.AccessControlException;
1: import java.security.AccessController;
0: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.JDBCDataSource;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Tests for the new JDBC 4.1 Connection.abort(Executor) method. This
1:  * class tests the affect of SecurityManagers on the method. A related
1:  * test case can be found in ConnectionMethodsTest.
1:  */
1: public class AbortTest extends Wrapper41Test
1: {
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     private boolean _hasSecurityManager;
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public AbortTest(String name, boolean hasSecurityManager)
1:     {
1:         super(name);
1:         
1:         _hasSecurityManager = hasSecurityManager;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite( "AbortTest" );
1: 
1:         suite.addTest( baseSuite( true ) );
1:         suite.addTest( baseSuite( false ) );
1: 
1:         suite.addTest
1:             (
1:              TestConfiguration.clientServerDecorator
1:              ( baseSuite( true ) )
1:              );
1:         suite.addTest
1:             (
1:              TestConfiguration.clientServerDecorator
1:              ( baseSuite( false ) )
1:              );
1:         
1:         return suite;
1:     }
1: 
1:     public static Test baseSuite( boolean hasSecurityManager )
1:     {
1:         AbortTest   abortTest = new AbortTest( "test_basic", hasSecurityManager );
1:         
1:         Test test = new CleanDatabaseTestSetup( abortTest )
1:             {
1:                 protected void decorateSQL( Statement s ) throws SQLException
1:                 {
1:                     s.execute("create table abort_table( a int )");
1:                 }
1:             };
1: 
1:         if ( hasSecurityManager )
1:         {
1:             return new SecurityManagerSetup( test, "org/apache/derbyTesting/functionTests/tests/jdbc4/noAbortPermission.policy" );
1:         }
1:         else
1:         {
1:             return SecurityManagerSetup.noSecurityManager( test );
1:         }
1:     }
1:     
1:     
1:     ///////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test Connection.abort(Executor) with and without a security manager.
1:      * </p>
1:      */
1:     public  void    test_basic() throws Exception
1:     {
1:         //
1:         // Only run if we can grant permissions to the jar files.
1:         //
1:         if ( !TestConfiguration.loadingFromJars() ) { return; }
1: 
1:         println( "AbortTest( " + _hasSecurityManager + " )" );
1:         assertEquals( _hasSecurityManager, (System.getSecurityManager() != null) );
1: 
0:         // NOP if called on a closed connection
1:         Connection conn0 = openUserConnection( "user0");
1:         conn0.close();
1:         Wrapper41Conn   wrapper0 = new Wrapper41Conn( conn0 );
1:         wrapper0.abort( new ConnectionMethodsTest.DirectExecutor() );
1: 
0:         Connection conn1 = openUserConnection( "user1");
1:         conn1.setAutoCommit( false );
1:         final   Wrapper41Conn   wrapper1 = new Wrapper41Conn( conn1 );
1: 
1:         // the Executor may not be null
1:         try {
1:             wrapper1.abort( null );
1:         }
1:         catch (SQLException se)
1:         {
1:             assertSQLState( "XCZ02", se );
1:         }
1: 
1:         if ( _hasSecurityManager ) { missingPermission( wrapper1 ); }
0:         else { noSecurityManager( wrapper1 ); }
1:     }
1: 
1:     // Run if we have a security manager. This tests that abort() fails
1:     // if the caller has not been granted the correct permission.
1:     private void    missingPermission( final Wrapper41Conn wrapper1 ) throws Exception
1:     {
1:         // should not be able to abort the connection because this code
1:         // lacks the permission
1:         try {
1:             //
1:             // This doPrivileged block absolves outer code blocks (like JUnit)
1:             // of the need to be granted SQLPermission( "callAbort" ). However,
1:             // derbyTesting.jar still needs that permission.
1:             //
1:             AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object    run() throws Exception
1:                      {
1:                          ConnectionMethodsTest.DirectExecutor  executor = new ConnectionMethodsTest.DirectExecutor();
1:                          wrapper1.abort( executor );
1:                          return null;
1:                      }
1:                  }
1:                  );
1:             fail( "The call to Connection.abort(Executor) should have failed." );
1:         }
1:         catch (Exception e)
1:         {
1:             assertTrue( e instanceof AccessControlException );
1:         }
1:     }
1: 
1:     // Run if we don't have a security manager. Verifies that abort() is uncontrolled
1:     // in that situation.
0:     private void    noSecurityManager(  final Wrapper41Conn wrapper1  ) throws Exception
1:     {
1:         PreparedStatement   ps = prepareStatement
1:             ( wrapper1.getWrappedObject(), "insert into app.abort_table( a ) values ( 1 )" );
1:         ps.execute();
1:         ps.close();
1: 
1:         // abort the connection
1:         ConnectionMethodsTest.DirectExecutor  executor = new ConnectionMethodsTest.DirectExecutor();
1:         wrapper1.abort( executor );
1: 
1:         // verify that the connection is closed
1:         try {
1:             prepareStatement( wrapper1.getWrappedObject(), "select * from sys.systables" );
1:             fail( "Connection should be dead!" );
1:         }
1:         catch (SQLException se)
1:         {
1:             assertSQLState( "08003", se );
1:         }
1: 
1:         // verify that the changes were rolled back
0:         Connection conn2 = openUserConnection( "user2");
1:         ps = prepareStatement( conn2, "select * from app.abort_table" );
1:         ResultSet   rs = ps.executeQuery();
1:         assertFalse( rs.next() );
1:         rs.close();
1:         ps.close();
1:         conn2.close();
1:     }
1: 
1: }
============================================================================