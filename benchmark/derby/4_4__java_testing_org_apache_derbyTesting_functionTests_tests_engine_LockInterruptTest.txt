1:035abcc: /*
1:035abcc:  * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.LockInterruptTest
1:035abcc:  *
1:035abcc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:035abcc:  * contributor license agreements.  See the NOTICE file distributed with
1:035abcc:  * this work for additional information regarding copyright ownership.
1:035abcc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:035abcc:  * (the "License"); you may not use this file except in compliance with
1:035abcc:  * the License.  You may obtain a copy of the License at
1:035abcc:  *
1:035abcc:  * http://www.apache.org/licenses/LICENSE-2.0
1:035abcc:  *
1:035abcc:  * Unless required by applicable law or agreed to in writing, software
1:035abcc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:035abcc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:035abcc:  * See the License for the specific language governing permissions and
1:035abcc:  * limitations under the License.
1:035abcc:  */
1:75bf63d: 
1:035abcc: package org.apache.derbyTesting.functionTests.tests.engine;
3:035abcc: 
1:035abcc: import java.sql.Connection;
1:035abcc: import java.sql.PreparedStatement;
1:035abcc: import java.sql.SQLException;
1:035abcc: import java.sql.Statement;
1:822ce3d: import java.util.Properties;
1:035abcc: import junit.framework.Test;
1:035abcc: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:035abcc: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:035abcc: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:035abcc: import org.apache.derbyTesting.junit.JDBC;
1:822ce3d: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:035abcc: import org.apache.derbyTesting.junit.TestConfiguration;
1:035abcc: 
1:035abcc: /**
1:035abcc:  * Test that other threads are able to proceed if one thread is interrupted
1:035abcc:  * when it's waiting for a lock. Regression test case for DERBY-4711.
1:035abcc:  */
1:035abcc: public class LockInterruptTest extends BaseJDBCTestCase {
1:035abcc:     /** SQLState for exception thrown because of interrupts. */
1:035abcc:     private final static String INTERRUPTED = "08000";
1:035abcc: 
1:035abcc:     /** Lock timeout in seconds used in this test. */
1:035abcc:     private final static int LOCK_TIMEOUT = 60;
1:035abcc: 
1:035abcc:     /** Deadlock timeout in seconds used in this test. */
1:035abcc:     private final static int DEADLOCK_TIMEOUT = LOCK_TIMEOUT / 2;
1:035abcc: 
1:035abcc:     public LockInterruptTest(String name) {
1:035abcc:         super(name);
1:75bf63d:     }
1:75bf63d: 
1:035abcc:     public static Test suite() {
1:75bf63d:         
1:035abcc:         // Only run in embedded mode since we cannot interrupt the engine
1:035abcc:         // thread from the network client.
1:035abcc:         Test test = TestConfiguration.embeddedSuite(LockInterruptTest.class);
1:035abcc: 
1:035abcc:         // Set the lock timeout to a known value so that we know what to
1:035abcc:         // expect for timeouts.
1:035abcc:         test = DatabasePropertyTestSetup.setLockTimeouts(
1:035abcc:                 test, DEADLOCK_TIMEOUT, LOCK_TIMEOUT);
1:822ce3d:         Properties syspros = new Properties();
1:822ce3d:         //Derby-4856 interrupt error create thread dump and diagnostic
1:822ce3d:         //info. Add property to avoid the information.
1:822ce3d:         syspros.put("derby.stream.error.extendedDiagSeverityLevel", "50000");
1:822ce3d:         test = new SystemPropertyTestSetup(test, syspros, true);
1:822ce3d:         
1:035abcc: 
1:035abcc:         return new CleanDatabaseTestSetup(test);
1:75bf63d:     }
1:035abcc: 
1:035abcc:     public void testInterruptLockWaiter() throws Exception {
1:035abcc:         setAutoCommit(false);
1:035abcc:         Statement s = createStatement();
1:035abcc:         s.executeUpdate("create table derby4711(x int)");
1:035abcc:         commit();
1:035abcc: 
1:035abcc:         // Obtain a table lock in order to block the waiter threads.
1:035abcc:         s.executeUpdate("lock table derby4711 in share mode");
1:035abcc: 
1:035abcc:         // Create first waiter thread.
1:035abcc:         Waiter t1 = new Waiter();
1:035abcc:         t1.start();
1:035abcc:         Thread.sleep(2000); // give t1 time to become the first waiter
1:035abcc: 
1:035abcc:         // Create second waiter thread.
1:035abcc:         Waiter t2 = new Waiter();
1:035abcc:         t2.start();
1:035abcc:         Thread.sleep(2000); // give t2 time to enter the wait queue
1:035abcc: 
1:035abcc:         // Now that the queue of waiters has been set up, interrupt the
1:f97d079:         // first thread and give the interrupt a little time to do its work.
1:035abcc:         t1.interrupt();
1:f97d079:         Thread.sleep(1000);
1:035abcc: 
1:035abcc:         // Release the table lock to allow the waiters to proceed.
1:035abcc:         commit();
1:035abcc: 
1:035abcc:         // Wait for the threads to complete before checking their state.
1:035abcc:         t1.join();
1:035abcc:         t2.join();
1:035abcc: 
1:035abcc:         // The first thread should fail because it was interrupted.
1:035abcc:         Throwable e1 = t1.throwable;
1:035abcc:         assertNotNull("First thread should fail because of interrupt", e1);
1:035abcc:         if (!(e1 instanceof SQLException)) {
1:035abcc:             fail("Unexpected exception from first thread", e1);
3:035abcc:         }
1:035abcc:         assertSQLState(INTERRUPTED, (SQLException) e1);
1:035abcc: 
1:482ff80:         if (hasInterruptibleIO()) {
1:482ff80:             println("Skipping assert for t1.InterruptFlagSetOnThrow due " +
1:482ff80:                     " to interruptible IO.");
1:482ff80:             println("This is default on Solaris/Sun Java <= 1.6, use " +
1:482ff80:                     "-XX:-UseVMInterruptibleIO if available.");
1:482ff80:             // The flag will may get swallowed
1:482ff80:         } else {
1:482ff80:             assertTrue(t1.InterruptFlagSetOnThrow);
1:482ff80:         }
1:482ff80: 
1:035abcc:         // The second thread should be able to complete successfully.
1:035abcc:         Throwable e2 = t2.throwable;
1:035abcc:         if (e2 != null) {
1:035abcc:             fail("Unexpected exception from second thread", e2);
1:035abcc:         }
1:035abcc: 
1:035abcc:         // And the second thread should be able to complete in less time than
1:035abcc:         // the deadlock timeout (before DERBY-4711, it would wait for a
1:035abcc:         // timeout before obtaining the lock, even if the lock was available
1:035abcc:         // long before).
1:035abcc:         if (t2.elapsedTime >= DEADLOCK_TIMEOUT * 1000) {
1:035abcc:             fail("Second thread needed " + t2.elapsedTime +
1:035abcc:                  " ms to complete. Probably stuck waiting for a lock.");
1:035abcc:         }
1:035abcc: 
1:035abcc:         // Expect that the second thread managed to insert a row.
1:035abcc:         JDBC.assertSingleValueResultSet(
1:035abcc:                 s.executeQuery("select * from derby4711"), "1");
1:035abcc:     }
1:035abcc: 
1:035abcc:     /**
1:035abcc:      * Thread class that opens a new connection and attempts to insert a
1:035abcc:      * row into a table.
1:035abcc:      */
1:035abcc:     private class Waiter extends Thread {
1:035abcc:         private final Connection c;
1:035abcc:         private final PreparedStatement ps;
1:035abcc: 
1:035abcc:         private Throwable throwable;
1:482ff80:         private boolean InterruptFlagSetOnThrow;
1:035abcc:         private long elapsedTime;
1:035abcc: 
1:035abcc:         private Waiter() throws SQLException {
1:035abcc:             c = openDefaultConnection();
1:035abcc:             ps = c.prepareStatement("insert into derby4711 values 1");
1:035abcc:         }
1:035abcc: 
1:035abcc:         public void run() {
1:035abcc:             try {
1:035abcc:                 runWaiter();
1:035abcc:             } catch (Throwable t) {
1:035abcc:                 throwable = t;
1:482ff80:                 InterruptFlagSetOnThrow = interrupted(); // clears also
1:035abcc:             }
1:035abcc:         };
1:035abcc: 
1:035abcc:         private void runWaiter() throws SQLException {
1:035abcc:             long start = System.currentTimeMillis();
1:035abcc:             try {
1:035abcc:                 ps.executeUpdate();
1:035abcc:             } finally {
1:035abcc:                 ps.close();
1:035abcc:                 c.close();
1:035abcc:             }
1:035abcc:             elapsedTime = System.currentTimeMillis() - start;
1:035abcc:         }
1:035abcc:     }
1:035abcc: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
commit:482ff80
/////////////////////////////////////////////////////////////////////////
1:         if (hasInterruptibleIO()) {
1:             println("Skipping assert for t1.InterruptFlagSetOnThrow due " +
1:                     " to interruptible IO.");
1:             println("This is default on Solaris/Sun Java <= 1.6, use " +
1:                     "-XX:-UseVMInterruptibleIO if available.");
1:             // The flag will may get swallowed
1:         } else {
1:             assertTrue(t1.InterruptFlagSetOnThrow);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         private boolean InterruptFlagSetOnThrow;
/////////////////////////////////////////////////////////////////////////
1:                 InterruptFlagSetOnThrow = interrupted(); // clears also
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8e65593
/////////////////////////////////////////////////////////////////////////
commit:064cc93
/////////////////////////////////////////////////////////////////////////
0:         if (isIBMJVM()) {
commit:75bf63d
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
1: 
/////////////////////////////////////////////////////////////////////////
1:         
0:         if (! isSunJVM()) {
0:             // DERBY-4463 test fails on IBM VM 1.5.
0:             // It's fixed in IBM VM 1.6 SR9 and above.
0:             // Remove this condition when that issue is solved in IBM VM 1.5 SR13.
0:             if (getSystemProperty("java.version").startsWith("1.5.0"))
0:             {
0:                 println("Test skipped for this VM, cf. DERBY-4463");
0:                 return new TestSuite("empty LockInterruptTest");
1:             }
1:         }
1:         
author:Lily Wei
-------------------------------------------------------------------------------
commit:822ce3d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         Properties syspros = new Properties();
1:         //Derby-4856 interrupt error create thread dump and diagnostic
1:         //info. Add property to avoid the information.
1:         syspros.put("derby.stream.error.extendedDiagSeverityLevel", "50000");
1:         test = new SystemPropertyTestSetup(test, syspros, true);
1:         
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f97d079
/////////////////////////////////////////////////////////////////////////
1:         // first thread and give the interrupt a little time to do its work.
1:         Thread.sleep(1000);
commit:035abcc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.engine.LockInterruptTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.engine;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that other threads are able to proceed if one thread is interrupted
1:  * when it's waiting for a lock. Regression test case for DERBY-4711.
1:  */
1: public class LockInterruptTest extends BaseJDBCTestCase {
1:     /** SQLState for exception thrown because of interrupts. */
1:     private final static String INTERRUPTED = "08000";
1: 
1:     /** Lock timeout in seconds used in this test. */
1:     private final static int LOCK_TIMEOUT = 60;
1: 
1:     /** Deadlock timeout in seconds used in this test. */
1:     private final static int DEADLOCK_TIMEOUT = LOCK_TIMEOUT / 2;
1: 
1:     public LockInterruptTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // Only run in embedded mode since we cannot interrupt the engine
1:         // thread from the network client.
1:         Test test = TestConfiguration.embeddedSuite(LockInterruptTest.class);
1: 
1:         // Set the lock timeout to a known value so that we know what to
1:         // expect for timeouts.
1:         test = DatabasePropertyTestSetup.setLockTimeouts(
1:                 test, DEADLOCK_TIMEOUT, LOCK_TIMEOUT);
1: 
1:         return new CleanDatabaseTestSetup(test);
1:     }
1: 
1:     public void testInterruptLockWaiter() throws Exception {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.executeUpdate("create table derby4711(x int)");
1:         commit();
1: 
1:         // Obtain a table lock in order to block the waiter threads.
1:         s.executeUpdate("lock table derby4711 in share mode");
1: 
1:         // Create first waiter thread.
1:         Waiter t1 = new Waiter();
1:         t1.start();
1:         Thread.sleep(2000); // give t1 time to become the first waiter
1: 
1:         // Create second waiter thread.
1:         Waiter t2 = new Waiter();
1:         t2.start();
1:         Thread.sleep(2000); // give t2 time to enter the wait queue
1: 
1:         // Now that the queue of waiters has been set up, interrupt the
0:         // first thread.
1:         t1.interrupt();
1: 
1:         // Release the table lock to allow the waiters to proceed.
1:         commit();
1: 
1:         // Wait for the threads to complete before checking their state.
1:         t1.join();
1:         t2.join();
1: 
1:         // The first thread should fail because it was interrupted.
1:         Throwable e1 = t1.throwable;
1:         assertNotNull("First thread should fail because of interrupt", e1);
1:         if (!(e1 instanceof SQLException)) {
1:             fail("Unexpected exception from first thread", e1);
1:         }
1:         assertSQLState(INTERRUPTED, (SQLException) e1);
1: 
1:         // The second thread should be able to complete successfully.
1:         Throwable e2 = t2.throwable;
1:         if (e2 != null) {
1:             fail("Unexpected exception from second thread", e2);
1:         }
1: 
1:         // And the second thread should be able to complete in less time than
1:         // the deadlock timeout (before DERBY-4711, it would wait for a
1:         // timeout before obtaining the lock, even if the lock was available
1:         // long before).
1:         if (t2.elapsedTime >= DEADLOCK_TIMEOUT * 1000) {
1:             fail("Second thread needed " + t2.elapsedTime +
1:                  " ms to complete. Probably stuck waiting for a lock.");
1:         }
1: 
1:         // Expect that the second thread managed to insert a row.
1:         JDBC.assertSingleValueResultSet(
1:                 s.executeQuery("select * from derby4711"), "1");
1:     }
1: 
1:     /**
1:      * Thread class that opens a new connection and attempts to insert a
1:      * row into a table.
1:      */
1:     private class Waiter extends Thread {
1:         private final Connection c;
1:         private final PreparedStatement ps;
1: 
1:         private Throwable throwable;
1:         private long elapsedTime;
1: 
1:         private Waiter() throws SQLException {
1:             c = openDefaultConnection();
1:             ps = c.prepareStatement("insert into derby4711 values 1");
1:         }
1: 
1:         public void run() {
1:             try {
1:                 runWaiter();
1:             } catch (Throwable t) {
1:                 throwable = t;
1:             }
1:         };
1: 
1:         private void runWaiter() throws SQLException {
1:             long start = System.currentTimeMillis();
1:             try {
1:                 ps.executeUpdate();
1:             } finally {
1:                 ps.close();
1:                 c.close();
1:             }
1:             elapsedTime = System.currentTimeMillis() - start;
1:         }
1:     }
1: }
============================================================================