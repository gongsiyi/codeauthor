1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.SpecialFlags
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
14:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.util.Enumeration;
1:67614ad: import java.util.Properties;
1:67614ad: import java.util.StringTokenizer;
1:67614ad: 
2:67614ad: /**
1:67614ad:     Parse testJavaFlags for RunTest
1:67614ad:     These are special properties that might be
1:67614ad:     set for a suite or test, and they can be
1:67614ad:     either ij properties or server properties
1:67614ad:     which is why they need to be parsed
1:67614ad: */
1:67614ad: 
1:67614ad: public class SpecialFlags
1:67614ad: {
1:67614ad: 
1:67614ad:     public static Properties getSpecialProperties(Properties suiteProperties)
1:67614ad:     {
1:67614ad:         // Save any special properties which can be used by a
1:67614ad:         // suite for ij or server properties (not in the usual list)
1:67614ad: 
1:67614ad:         // Define the "usual" properties to exclude from special props
1:67614ad:         // FIXME: These should be in a file or something to make it
1:67614ad:         // easier to add to this
1:67614ad:         String[] excludeList = new String[32];
1:67614ad:         excludeList[0] = "jvm";
1:67614ad:         excludeList[1] = "classpath";
1:67614ad:         excludeList[2] = "classpathServer";
1:67614ad:         excludeList[3] = "framework";
1:67614ad:         excludeList[4] = "usesystem";
1:67614ad:         excludeList[5] = "useprocess";
1:67614ad:         excludeList[6] = "outputdir";
1:67614ad:         excludeList[7] = "replication";
1:67614ad:         excludeList[8] = "keepfiles";
1:67614ad:         excludeList[9] = "mtestdir";
1:67614ad:         excludeList[10] = "suites";
1:67614ad:         excludeList[11] = "searchCP";
1:67614ad:         excludeList[12] = "useoutput";
1:67614ad:         excludeList[13] = "suitename";
1:67614ad:         excludeList[14] = "cleanfiles";
1:67614ad:         excludeList[15] = "systemdiff";
1:67614ad:         excludeList[16] = "jvmflags";
1:67614ad:         excludeList[17] = "testJavaFlags";
1:67614ad:         excludeList[18] = "ij.defaultResourcePackage";
1:67614ad:         excludeList[19] = "outcopy";
1:67614ad:         excludeList[20] = "verbose";
1:67614ad:         excludeList[21] = "canondir";
1:67614ad:         excludeList[22] = "timeout";
1:67614ad:         excludeList[23] = "encryption";
1:67614ad:         excludeList[24] = "javaCmd";
1:67614ad:         excludeList[25] = "topreportdir";
1:67614ad:         excludeList[26] = "jarfile";
1:67614ad:         excludeList[27] = "upgradetest";
1:67614ad:         excludeList[28] = "jdk12test";
1:67614ad:         excludeList[29] = "jdk12exttest";
1:67614ad:         excludeList[30] = "skipsed";
1:67614ad: 		excludeList[31] = "sourceEnv";
1:67614ad: 
1:67614ad:         Properties p = new Properties();
1:67614ad: 
1:67614ad:         for (Enumeration e = suiteProperties.propertyNames(); e.hasMoreElements();)
1:67614ad:         {
1:67614ad:             boolean exclude = false;
1:67614ad:             String key = (String)e.nextElement();
1:67614ad:             for ( int i = 0; i < excludeList.length; i++ )
1:67614ad:             {
1:67614ad:                 if ( excludeList[i].equals(key) )
1:67614ad:                 {
1:67614ad:                     exclude = true;
1:67614ad:                     break;
1:67614ad:                 }
1:67614ad:             }
1:67614ad:             if ( exclude == false )
1:67614ad:             {
1:67614ad:                 String value = suiteProperties.getProperty(key);
1:67614ad:                 p.put(key,value);
1:67614ad:             }
1:67614ad:         }
1:67614ad:         return p;
1:67614ad:     }
1:67614ad: 
1:67614ad: 	public static void parse(String flags,
1:67614ad: 	    Properties ijProps, Properties srvProps)
1:67614ad: 	{
1:67614ad: 	    // flags is a list of key-value pairs separated by a ^;
1:67614ad: 	    // to be parsed and added to either ijProps or srvProps
1:e3acc4a:         if (flags == null)
1:e3acc4a:             flags = "";
1:67614ad: 	    StringTokenizer st = new StringTokenizer(flags, "^");
1:67614ad: 	    String str = "";
1:67614ad: 	    String key = "";
1:67614ad: 	    String value = "";
1:67614ad: 	    while (st.hasMoreTokens())
1:67614ad: 	    {
1:67614ad: 	        str = st.nextToken();
1:67614ad:             // System.out.println("TOKEN:"+str);
1:67614ad: 	        key = str.substring( 0, str.indexOf("=") );
1:67614ad: 	        value = str.substring( (str.indexOf("=") + 1) );
1:67614ad: 	        if ( str.startsWith("derby") )
1:67614ad: 	        {
1:67614ad: 	            // This is a server property
1:67614ad: 	            // Note that some can have a list of values
1:67614ad: 	            if ( key.equals("derby.debug.true") ||
1:67614ad: 	                 key.equals("derby.infolog.streams") )
1:67614ad: 	            {
1:67614ad: 	                String currval = srvProps.getProperty(key);
1:67614ad: 	                if ( (currval != null) && (currval.length()>0) )
1:67614ad: 	                {
1:67614ad: 	                    value = value + "," + currval;
1:67614ad: 	                }
1:67614ad: 	            }
1:67614ad: 	            srvProps.put(key,value);
1:67614ad: 	        }
1:67614ad: 	        else
1:67614ad: 	            // This is an ij property
1:67614ad: 	            ijProps.put(key,value);
1:67614ad:         }
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	// no instances permitted.
1:67614ad: 	private SpecialFlags(){}
1:67614ad: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
1: /**
1:     Parse testJavaFlags for RunTest
1:     These are special properties that might be
1:     set for a suite or test, and they can be
1:     either ij properties or server properties
1:     which is why they need to be parsed
1: */
1: 
1: public class SpecialFlags
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     public static Properties getSpecialProperties(Properties suiteProperties)
1:     {
1:         // Save any special properties which can be used by a
1:         // suite for ij or server properties (not in the usual list)
1: 
1:         // Define the "usual" properties to exclude from special props
1:         // FIXME: These should be in a file or something to make it
1:         // easier to add to this
1:         String[] excludeList = new String[32];
1:         excludeList[0] = "jvm";
1:         excludeList[1] = "classpath";
1:         excludeList[2] = "classpathServer";
1:         excludeList[3] = "framework";
1:         excludeList[4] = "usesystem";
1:         excludeList[5] = "useprocess";
1:         excludeList[6] = "outputdir";
1:         excludeList[7] = "replication";
1:         excludeList[8] = "keepfiles";
1:         excludeList[9] = "mtestdir";
1:         excludeList[10] = "suites";
1:         excludeList[11] = "searchCP";
1:         excludeList[12] = "useoutput";
1:         excludeList[13] = "suitename";
1:         excludeList[14] = "cleanfiles";
1:         excludeList[15] = "systemdiff";
1:         excludeList[16] = "jvmflags";
1:         excludeList[17] = "testJavaFlags";
1:         excludeList[18] = "ij.defaultResourcePackage";
1:         excludeList[19] = "outcopy";
1:         excludeList[20] = "verbose";
1:         excludeList[21] = "canondir";
1:         excludeList[22] = "timeout";
1:         excludeList[23] = "encryption";
1:         excludeList[24] = "javaCmd";
1:         excludeList[25] = "topreportdir";
1:         excludeList[26] = "jarfile";
1:         excludeList[27] = "upgradetest";
1:         excludeList[28] = "jdk12test";
1:         excludeList[29] = "jdk12exttest";
1:         excludeList[30] = "skipsed";
1: 		excludeList[31] = "sourceEnv";
1: 
1:         Properties p = new Properties();
1: 
1:         for (Enumeration e = suiteProperties.propertyNames(); e.hasMoreElements();)
1:         {
1:             boolean exclude = false;
1:             String key = (String)e.nextElement();
1:             for ( int i = 0; i < excludeList.length; i++ )
1:             {
1:                 if ( excludeList[i].equals(key) )
1:                 {
1:                     exclude = true;
1:                     break;
1:                 }
1:             }
1:             if ( exclude == false )
1:             {
1:                 String value = suiteProperties.getProperty(key);
1:                 p.put(key,value);
1:             }
1:         }
1:         return p;
1:     }
1: 
1: 	public static void parse(String flags,
1: 	    Properties ijProps, Properties srvProps)
1: 	{
1: 	    // flags is a list of key-value pairs separated by a ^;
1: 	    // to be parsed and added to either ijProps or srvProps
1: 	    StringTokenizer st = new StringTokenizer(flags, "^");
1: 	    String str = "";
1: 	    String key = "";
1: 	    String value = "";
1: 	    while (st.hasMoreTokens())
1: 	    {
1: 	        str = st.nextToken();
1:             // System.out.println("TOKEN:"+str);
1: 	        key = str.substring( 0, str.indexOf("=") );
1: 	        value = str.substring( (str.indexOf("=") + 1) );
1: 	        if ( str.startsWith("derby") )
1: 	        {
1: 	            // This is a server property
1: 	            // Note that some can have a list of values
1: 	            if ( key.equals("derby.debug.true") ||
1: 	                 key.equals("derby.infolog.streams") )
1: 	            {
1: 	                String currval = srvProps.getProperty(key);
1: 	                if ( (currval != null) && (currval.length()>0) )
1: 	                {
1: 	                    value = value + "," + currval;
1: 	                }
1: 	            }
1: 	            srvProps.put(key,value);
1: 	        }
1: 	        else
1: 	            // This is an ij property
1: 	            ijProps.put(key,value);
1:         }
1: 	}
1: 
1: 	// no instances permitted.
1: 	private SpecialFlags(){}
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e3acc4a
/////////////////////////////////////////////////////////////////////////
1:         if (flags == null)
1:             flags = "";
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.SpecialFlags
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.StringTokenizer;
1: 
0: /**
0:     Parse testJavaFlags for RunTest
0:     These are special properties that might be
0:     set for a suite or test, and they can be
0:     either ij properties or server properties
0:     which is why they need to be parsed
0: */
1: 
0: public class SpecialFlags
0: {
1: 
0:     public static Properties getSpecialProperties(Properties suiteProperties)
0:     {
0:         // Save any special properties which can be used by a
0:         // suite for ij or server properties (not in the usual list)
1: 
0:         // Define the "usual" properties to exclude from special props
0:         // FIXME: These should be in a file or something to make it
0:         // easier to add to this
0:         String[] excludeList = new String[32];
0:         excludeList[0] = "jvm";
0:         excludeList[1] = "classpath";
0:         excludeList[2] = "classpathServer";
0:         excludeList[3] = "framework";
0:         excludeList[4] = "usesystem";
0:         excludeList[5] = "useprocess";
0:         excludeList[6] = "outputdir";
0:         excludeList[7] = "replication";
0:         excludeList[8] = "keepfiles";
0:         excludeList[9] = "mtestdir";
0:         excludeList[10] = "suites";
0:         excludeList[11] = "searchCP";
0:         excludeList[12] = "useoutput";
0:         excludeList[13] = "suitename";
0:         excludeList[14] = "cleanfiles";
0:         excludeList[15] = "systemdiff";
0:         excludeList[16] = "jvmflags";
0:         excludeList[17] = "testJavaFlags";
0:         excludeList[18] = "ij.defaultResourcePackage";
0:         excludeList[19] = "outcopy";
0:         excludeList[20] = "verbose";
0:         excludeList[21] = "canondir";
0:         excludeList[22] = "timeout";
0:         excludeList[23] = "encryption";
0:         excludeList[24] = "javaCmd";
0:         excludeList[25] = "topreportdir";
0:         excludeList[26] = "jarfile";
0:         excludeList[27] = "upgradetest";
0:         excludeList[28] = "jdk12test";
0:         excludeList[29] = "jdk12exttest";
0:         excludeList[30] = "skipsed";
0: 		excludeList[31] = "sourceEnv";
1: 
0:         Properties p = new Properties();
1: 
0:         for (Enumeration e = suiteProperties.propertyNames(); e.hasMoreElements();)
0:         {
0:             boolean exclude = false;
0:             String key = (String)e.nextElement();
0:             for ( int i = 0; i < excludeList.length; i++ )
0:             {
0:                 if ( excludeList[i].equals(key) )
0:                 {
0:                     exclude = true;
0:                     break;
0:                 }
0:             }
0:             if ( exclude == false )
0:             {
0:                 String value = suiteProperties.getProperty(key);
0:                 p.put(key,value);
0:             }
0:         }
0:         return p;
0:     }
1: 
0: 	public static void parse(String flags,
0: 	    Properties ijProps, Properties srvProps)
0: 	{
0: 	    // flags is a list of key-value pairs separated by a ^;
0: 	    // to be parsed and added to either ijProps or srvProps
0: 	    StringTokenizer st = new StringTokenizer(flags, "^");
0: 	    String str = "";
0: 	    String key = "";
0: 	    String value = "";
0: 	    while (st.hasMoreTokens())
0: 	    {
0: 	        str = st.nextToken();
0:             // System.out.println("TOKEN:"+str);
0: 	        key = str.substring( 0, str.indexOf("=") );
0: 	        value = str.substring( (str.indexOf("=") + 1) );
0: 	        if ( str.startsWith("derby") )
0: 	        {
0: 	            // This is a server property
0: 	            // Note that some can have a list of values
0: 	            if ( key.equals("derby.debug.true") ||
0: 	                 key.equals("derby.infolog.streams") )
0: 	            {
0: 	                String currval = srvProps.getProperty(key);
0: 	                if ( (currval != null) && (currval.length()>0) )
0: 	                {
0: 	                    value = value + "," + currval;
0: 	                }
0: 	            }
0: 	            srvProps.put(key,value);
0: 	        }
0: 	        else
0: 	            // This is an ij property
0: 	            ijProps.put(key,value);
0:         }
0: 	}
1: 
0: 	// no instances permitted.
0: 	private SpecialFlags(){}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.SpecialFlags
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================