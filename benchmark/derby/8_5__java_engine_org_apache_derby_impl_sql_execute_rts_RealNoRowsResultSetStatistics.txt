1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: 
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Vector;
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for NoPutResultSetImpl.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: abstract class RealNoRowsResultSetStatistics
1:eac0369: 	implements ResultSetStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 
1:eac0369: 	/* fields used for formating run time statistics output */
1:eac0369: 	protected String indent;
1:eac0369: 	protected String subIndent;
1:eac0369: 	protected int sourceDepth;
1:eac0369: 	public	ResultSetStatistics	sourceResultSetStatistics;
1:48a9884: 	public long executeTime;
1:eac0369: 
1:eac0369: 	// variables to implement the inspectable interface.
1:eac0369: 	// Do these have to be public? 
1:eac0369: 	public long inspectOverall;
1:eac0369: 	public long inspectNum;
1:eac0369: 	public String inspectDesc;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Initializes the time spent in NoRowsResultSet minus the source
1:eac0369: 	 * result set.
1:eac0369: 	 */
1:eac0369: 	public RealNoRowsResultSetStatistics(long executeTime, 
1:eac0369: 										 ResultSetStatistics sourceRS)
1:eac0369: 	{
1:eac0369: 		if (sourceRS instanceof RealBasicNoPutResultSetStatistics)
1:eac0369: 			this.executeTime = executeTime -
1:eac0369: 				((RealBasicNoPutResultSetStatistics)sourceRS).getTotalTime();
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Initialize the format info for run time statistics.
1:eac0369: 	 */
1:eac0369: 	protected void initFormatInfo(int depth)
1:eac0369: 	{
1:eac0369: 		char [] indentchars = new char[depth];
1:eac0369: 		char [] subIndentchars = new char[depth + 1];
1:eac0369: 		sourceDepth = depth + 1;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Form an array of tab characters for indentation.
1:eac0369: 		*/
1:eac0369: 		subIndentchars[depth] = '\t';
1:eac0369: 		while (depth > 0)
1:eac0369: 		{
1:eac0369: 			subIndentchars[depth - 1] = '\t';
1:eac0369: 			indentchars[depth - 1] = '\t';
1:eac0369: 			depth--;
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		indent = new String(indentchars);
1:eac0369: 		subIndent = new String(subIndentchars);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Dump out the time information for run time stats.
1:eac0369: 	 *
1:eac0369: 	 * @return String to be printed out.
1:eac0369: 	 */
1:eac0369: 	protected String dumpTimeStats(String indent)
1:eac0369: 	{
1:eac0369: 		return
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
1:eac0369: 	                   		" = " + executeTime + "\n";
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Get the objects to be displayed when this tree object is expanded.
1:eac0369: 	 * <P>
1:eac0369: 	 * The objects returned can be of any type, including addtional Inspectables.
1:eac0369:    *
1:eac0369: 	 * @return java.util.Vector	A vector of objects.
1:eac0369: 	 */
1:9d5bd0e:   public Vector<ResultSetStatistics> getChildren(){
1:9d5bd0e:     Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
1:eac0369:     children.addElement(sourceResultSetStatistics);
1:eac0369:     return children;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public abstract String getNodeName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated row count for the number of rows returned
1:eac0369: 	 * by the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The estimated number of rows returned by the associated
1:eac0369: 	 * query or statement.
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount()
1:eac0369: 	{
1:eac0369: 		return 0.0;
1:eac0369: 	}
1:48a9884:     public String getRSXplainDetails() { return null; }
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:48a9884:            null,                              // the number of opens
1:48a9884:            null,                              // the number of index updates 
1:48a9884:            null,                           // lock mode
1:48a9884:            null,                           // lock granularity
1:48a9884:            (UUID)parentID,
1:48a9884:            null,                             // estimated row count
1:48a9884:            null,                             // estimated cost
1:48a9884:            null,                             // affected rows
1:48a9884:            null,                             // deferred rows.
1:48a9884:            null,                              // the input rows
1:48a9884:            null,                              // the seen rows left
1:48a9884:            null,                              // the seen rows right
1:48a9884:            null,                              // the filtered rows
1:48a9884:            null,                              // the returned rows
1:48a9884:            null,                              // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:48a9884:     public Object getResultSetTimingsDescriptor(Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetTimingsDescriptor(
1:48a9884:            (UUID)timingID,
1:48a9884:            null,                                   // the constructor time
1:48a9884:            null,                                   // the open time
1:48a9884:            null,                                   // the next time
1:48a9884:            null,                                   // the close time
1:ce40a31:            this.executeTime,             // the execute time
1:48a9884:            null,                                   // the avg next time/row
1:48a9884:            null,                                   // the projection time
1:48a9884:            null,                                   // the restriction time
1:48a9884:            null,                                   // the temp_cong_create_time
1:48a9884:            null                                    // the temo_cong_fetch_time
1:48a9884:         );
1:48a9884:     }
1:48a9884:     public Object getSortPropsDescriptor(Object UUID)
1:48a9884:     {
1:48a9884:         return null; // Most statistics classes don't have sort props
1:48a9884:     }
1:48a9884:     public Object getScanPropsDescriptor(Object UUID)
1:48a9884:     {
1:48a9884:         return null; // Most statistics classes don't have sort props
1:48a9884:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:            this.executeTime,             // the execute time
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:   public Vector<ResultSetStatistics> getChildren(){
1:     Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public long executeTime;
/////////////////////////////////////////////////////////////////////////
1:     public String getRSXplainDetails() { return null; }
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
1:            null,                              // the number of opens
1:            null,                              // the number of index updates 
1:            null,                           // lock mode
1:            null,                           // lock granularity
1:            (UUID)parentID,
1:            null,                             // estimated row count
1:            null,                             // estimated cost
1:            null,                             // affected rows
1:            null,                             // deferred rows.
1:            null,                              // the input rows
1:            null,                              // the seen rows left
1:            null,                              // the seen rows right
1:            null,                              // the filtered rows
1:            null,                              // the returned rows
1:            null,                              // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
1:     public Object getResultSetTimingsDescriptor(Object timingID)
1:     {
1:         return new XPLAINResultSetTimingsDescriptor(
1:            (UUID)timingID,
1:            null,                                   // the constructor time
1:            null,                                   // the open time
1:            null,                                   // the next time
1:            null,                                   // the close time
0:            new Long(this.executeTime),             // the execute time
1:            null,                                   // the avg next time/row
1:            null,                                   // the projection time
1:            null,                                   // the restriction time
1:            null,                                   // the temp_cong_create_time
1:            null                                    // the temo_cong_fetch_time
1:         );
1:     }
1:     public Object getSortPropsDescriptor(Object UUID)
1:     {
1:         return null; // Most statistics classes don't have sort props
1:     }
1:     public Object getScanPropsDescriptor(Object UUID)
1:     {
1:         return null; // Most statistics classes don't have sort props
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.util.Vector;
1: 
1: /**
1:   ResultSetStatistics implemenation for NoPutResultSetImpl.
1: 
0:   @author jerry
1: 
1: */
1: abstract class RealNoRowsResultSetStatistics
1: 	implements ResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 
1: 	/* Leave these fields public for object inspectors */
1: 
1: 	/* fields used for formating run time statistics output */
1: 	protected String indent;
1: 	protected String subIndent;
1: 	protected int sourceDepth;
1: 	public	ResultSetStatistics	sourceResultSetStatistics;
0: 	protected long executeTime;
1: 
1: 	// variables to implement the inspectable interface.
1: 	// Do these have to be public? 
1: 	public long inspectOverall;
1: 	public long inspectNum;
1: 	public String inspectDesc;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Initializes the time spent in NoRowsResultSet minus the source
1: 	 * result set.
1: 	 */
1: 	public RealNoRowsResultSetStatistics(long executeTime, 
1: 										 ResultSetStatistics sourceRS)
1: 	{
1: 		if (sourceRS instanceof RealBasicNoPutResultSetStatistics)
1: 			this.executeTime = executeTime -
1: 				((RealBasicNoPutResultSetStatistics)sourceRS).getTotalTime();
1: 	}
1:  
1: 	/**
1: 	 * Initialize the format info for run time statistics.
1: 	 */
1: 	protected void initFormatInfo(int depth)
1: 	{
1: 		char [] indentchars = new char[depth];
1: 		char [] subIndentchars = new char[depth + 1];
1: 		sourceDepth = depth + 1;
1: 
1: 		/*
1: 		** Form an array of tab characters for indentation.
1: 		*/
1: 		subIndentchars[depth] = '\t';
1: 		while (depth > 0)
1: 		{
1: 			subIndentchars[depth - 1] = '\t';
1: 			indentchars[depth - 1] = '\t';
1: 			depth--;
1: 		}
1: 		
1: 		indent = new String(indentchars);
1: 		subIndent = new String(subIndentchars);
1: 	}
1: 
1: 	/**
1: 	 * Dump out the time information for run time stats.
1: 	 *
1: 	 * @return String to be printed out.
1: 	 */
1: 	protected String dumpTimeStats(String indent)
1: 	{
1: 		return
1: 			indent + MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
1: 	                   		" = " + executeTime + "\n";
1: 	}
1: 	/**
1: 	 * Get the objects to be displayed when this tree object is expanded.
1: 	 * <P>
1: 	 * The objects returned can be of any type, including addtional Inspectables.
1:    *
1: 	 * @return java.util.Vector	A vector of objects.
1: 	 */
0:   public Vector getChildren(){
0:     Vector children = new Vector();
1:     children.addElement(sourceResultSetStatistics);
1:     return children;
1:   }
1: 
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public abstract String getNodeName();
1: 
1: 	/**
1: 	 * Get the estimated row count for the number of rows returned
1: 	 * by the associated query or statement.
1: 	 *
1: 	 * @return	The estimated number of rows returned by the associated
1: 	 * query or statement.
1: 	 */
1: 	public double getEstimatedRowCount()
1: 	{
1: 		return 0.0;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.util.Vector;
0: 
0: /**
0:   ResultSetStatistics implemenation for NoPutResultSetImpl.
0: 
0:   @author jerry
0: 
0: */
0: abstract class RealNoRowsResultSetStatistics
0: 	implements ResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 
0: 	/* Leave these fields public for object inspectors */
0: 
0: 	/* fields used for formating run time statistics output */
0: 	protected String indent;
0: 	protected String subIndent;
0: 	protected int sourceDepth;
0: 	public	ResultSetStatistics	sourceResultSetStatistics;
0: 	protected long executeTime;
0: 
0: 	// variables to implement the inspectable interface.
0: 	// Do these have to be public? 
0: 	public long inspectOverall;
0: 	public long inspectNum;
0: 	public String inspectDesc;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Initializes the time spent in NoRowsResultSet minus the source
0: 	 * result set.
0: 	 */
0: 	public RealNoRowsResultSetStatistics(long executeTime, 
0: 										 ResultSetStatistics sourceRS)
0: 	{
0: 		if (sourceRS instanceof RealBasicNoPutResultSetStatistics)
0: 			this.executeTime = executeTime -
0: 				((RealBasicNoPutResultSetStatistics)sourceRS).getTotalTime();
0: 	}
0:  
0: 	/**
0: 	 * Initialize the format info for run time statistics.
0: 	 */
0: 	protected void initFormatInfo(int depth)
0: 	{
0: 		char [] indentchars = new char[depth];
0: 		char [] subIndentchars = new char[depth + 1];
0: 		sourceDepth = depth + 1;
0: 
0: 		/*
0: 		** Form an array of tab characters for indentation.
0: 		*/
0: 		subIndentchars[depth] = '\t';
0: 		while (depth > 0)
0: 		{
0: 			subIndentchars[depth - 1] = '\t';
0: 			indentchars[depth - 1] = '\t';
0: 			depth--;
0: 		}
0: 		
0: 		indent = new String(indentchars);
0: 		subIndent = new String(subIndentchars);
0: 	}
0: 
0: 	/**
0: 	 * Dump out the time information for run time stats.
0: 	 *
0: 	 * @return String to be printed out.
0: 	 */
0: 	protected String dumpTimeStats(String indent)
0: 	{
0: 		return
0: 			indent + MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
0: 	                   		" = " + executeTime + "\n";
0: 	}
0: 	/**
0: 	 * Get the objects to be displayed when this tree object is expanded.
0: 	 * <P>
0: 	 * The objects returned can be of any type, including addtional Inspectables.
0:    *
0: 	 * @return java.util.Vector	A vector of objects.
0: 	 */
0:   public Vector getChildren(){
0:     Vector children = new Vector();
0:     children.addElement(sourceResultSetStatistics);
0:     return children;
0:   }
0: 
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public abstract String getNodeName();
0: 
0: 	/**
0: 	 * Get the estimated row count for the number of rows returned
0: 	 * by the associated query or statement.
0: 	 *
0: 	 * @return	The estimated number of rows returned by the associated
0: 	 * query or statement.
0: 	 */
0: 	public double getEstimatedRowCount()
0: 	{
0: 		return 0.0;
0: 	}
0: }
============================================================================