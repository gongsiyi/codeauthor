1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.ResultDescription
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:fe77ca5: 
3:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
3:fe77ca5: /**
1:fe77ca5:  * The ResultDescription interface provides methods to get metadata on the
1:fe77ca5:  * results returned by a statement.
3:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public interface ResultDescription
1:fe77ca5: {
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns an identifier that tells what type of statement has been
1:fe77ca5: 	 * executed. This can be used to determine what other methods to call
1:fe77ca5: 	 * to get the results back from a statement. For example, a SELECT
1:fe77ca5: 	 * statement returns rows and columns, while other statements don't,
1:fe77ca5: 	 * so you would only call getColumnCount() or getColumnType() for
1:fe77ca5: 	 * SELECT statements.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	A String identifier telling what type of statement this
1:fe77ca5: 	 *		is.
1:fe77ca5: 	 */
1:fe77ca5: 	String	getStatementType();	
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the number of columns in the result set.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The number of columns in the result set.
1:fe77ca5: 	 */
1:fe77ca5: 	int	getColumnCount();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return information about all the columns.
1:fe77ca5: 	*/
1:fe77ca5: 	public ResultColumnDescriptor[] getColumnInfo();
1:fe77ca5: 
1:6cc0702:     /**
1:6cc0702:      * Return the information about a single column (0-based indexing)
1:6cc0702:      */
1:6cc0702:     public  ResultColumnDescriptor  getColumnInfo( int idx );
1:6cc0702: 
1:fe77ca5: 	/**
1:b61f876: 	 * Returns a ResultColumnDescriptor for the column, given the ordiinal
1:fe77ca5: 	 * position of the column.
1:fe77ca5: 	 * NOTE - position is 1-based.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param position	The oridinal position of a column in the
1:fe77ca5: 	 *			ResultSet.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return		A ResultColumnDescriptor describing the
1:fe77ca5: 	 *			column in the ResultSet.
1:fe77ca5: 	 */
1:fe77ca5: 	ResultColumnDescriptor	getColumnDescriptor(int position);
1:c69c8b0: 
1:c69c8b0: 	/**
1:c69c8b0: 	 * Get a new result description that has been truncated
1:c69c8b0: 	 * from input column number.   If the input column is
1:c69c8b0: 	 * 5, then columns 5 to getColumnCount() are removed.
1:c69c8b0: 	 * The new ResultDescription points to the same
1:c69c8b0: 	 * ColumnDescriptors (this method performs a shallow
1:c69c8b0: 	 * copy. The saved JDBC ResultSetMetaData will
1:c69c8b0:      * not be copied.
1:c69c8b0: 	 *
1:c69c8b0: 	 * @param truncateFrom the starting column to remove,
1:c69c8b0: 	 * 1-based.
1:c69c8b0: 	 *
1:c69c8b0: 	 * @return a new ResultDescription
1:c69c8b0: 	 */
1:c69c8b0: 	public ResultDescription truncateColumns(int truncateFrom);
1:f512b2f:     
1:f512b2f:     /**
1:f512b2f:      * Set the JDBC ResultSetMetaData for this ResultDescription.
1:f512b2f:      * A ResultSetMetaData object can be saved in the statement
1:f512b2f:      * plan using this method. This only works while
1:f512b2f:      * the ResultSetMetaData api does not contain a getConnection()
1:f512b2f:      * method or a close method.
1:f512b2f:      * <BR>
1:f512b2f:      * If this object already has a saved meta data object
1:f512b2f:      * this call will do nothing.
1:f512b2f:      * Due to synchronization the saved ResultSetMetaData
1:51fb033:      * object may not be the one passed in, ie. if two
1:f512b2f:      * threads call this concurrently, only one will be saved.
1:f512b2f:      * It is assumed the JDBC layer passes in a ResultSetMetaData
1:f512b2f:      * object based upon this.
1:f512b2f:      */
1:f512b2f:     public void setMetaData(java.sql.ResultSetMetaData rsmd);
1:f512b2f:     
1:f512b2f:     /**
1:f512b2f:      * Get the saved JDBC ResultSetMetaData. Will return
1:f512b2f:      * null if setMetaData() has not been called on this
1:f512b2f:      * object. The caller then should manufacture a
1:f512b2f:      * ResultSetMetaData object and pass it into setMetaData.
1:f512b2f:      */
1:f512b2f:     public java.sql.ResultSetMetaData getMetaData();
1:f512b2f:     
1:f512b2f:     /**
1:f512b2f:      * Return the position of the column matching the
1:f512b2f:      * passed in names following the JDBC rules for
1:f512b2f:      * ResultSet.getXXX and updateXXX.
1:f512b2f:      * Rules are the matching is case insensitive
1:f512b2f:      * and the insensitive name matches the first
1:f512b2f:      * column found that matches (starting at postion 1).
1:f512b2f:      * @param name
1:f512b2f:      * @return Position of the column (1-based), -1 if no match.
1:f512b2f:      */
1:f512b2f:     public int findColumnInsenstive(String name);
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6cc0702
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Return the information about a single column (0-based indexing)
1:      */
1:     public  ResultColumnDescriptor  getColumnInfo( int idx );
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get a new result description that has been truncated
1: 	 * from input column number.   If the input column is
1: 	 * 5, then columns 5 to getColumnCount() are removed.
1: 	 * The new ResultDescription points to the same
1: 	 * ColumnDescriptors (this method performs a shallow
1: 	 * copy. The saved JDBC ResultSetMetaData will
1:      * not be copied.
1: 	 *
1: 	 * @param truncateFrom the starting column to remove,
1: 	 * 1-based.
1: 	 *
1: 	 * @return a new ResultDescription
1: 	 */
1: 	public ResultDescription truncateColumns(int truncateFrom);
commit:51fb033
/////////////////////////////////////////////////////////////////////////
1:      * object may not be the one passed in, ie. if two
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:51572c8
/////////////////////////////////////////////////////////////////////////
commit:f512b2f
/////////////////////////////////////////////////////////////////////////
0: 	 * copy. The saved JDBC ResultSetMetaData will
0:      * not be copied.
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Set the JDBC ResultSetMetaData for this ResultDescription.
1:      * A ResultSetMetaData object can be saved in the statement
1:      * plan using this method. This only works while
1:      * the ResultSetMetaData api does not contain a getConnection()
1:      * method or a close method.
1:      * <BR>
1:      * If this object already has a saved meta data object
1:      * this call will do nothing.
1:      * Due to synchronization the saved ResultSetMetaData
0:      * obejct may not be the one passed in, ie. if two
1:      * threads call this concurrently, only one will be saved.
1:      * It is assumed the JDBC layer passes in a ResultSetMetaData
1:      * object based upon this.
1:      */
1:     public void setMetaData(java.sql.ResultSetMetaData rsmd);
1:     
1:     /**
1:      * Get the saved JDBC ResultSetMetaData. Will return
1:      * null if setMetaData() has not been called on this
1:      * object. The caller then should manufacture a
1:      * ResultSetMetaData object and pass it into setMetaData.
1:      */
1:     public java.sql.ResultSetMetaData getMetaData();
1:     
1:     /**
1:      * Return the position of the column matching the
1:      * passed in names following the JDBC rules for
1:      * ResultSet.getXXX and updateXXX.
1:      * Rules are the matching is case insensitive
1:      * and the insensitive name matches the first
1:      * column found that matches (starting at postion 1).
1:      * @param name
1:      * @return Position of the column (1-based), -1 if no match.
1:      */
1:     public int findColumnInsenstive(String name);
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.ResultDescription
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: /**
1:  * The ResultDescription interface provides methods to get metadata on the
1:  * results returned by a statement.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public interface ResultDescription
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Returns an identifier that tells what type of statement has been
1: 	 * executed. This can be used to determine what other methods to call
1: 	 * to get the results back from a statement. For example, a SELECT
1: 	 * statement returns rows and columns, while other statements don't,
1: 	 * so you would only call getColumnCount() or getColumnType() for
1: 	 * SELECT statements.
1: 	 *
1: 	 * @return	A String identifier telling what type of statement this
1: 	 *		is.
1: 	 */
1: 	String	getStatementType();	
1: 
1: 	/**
1: 	 * Returns the number of columns in the result set.
1: 	 *
1: 	 * @return	The number of columns in the result set.
1: 	 */
1: 	int	getColumnCount();
1: 
1: 	/**
1: 		Return information about all the columns.
1: 	*/
1: 	public ResultColumnDescriptor[] getColumnInfo();
1: 
1: 	/**
0: 	 * Returns a ResultColumnDescriptor for the column, given the oridinal
1: 	 * position of the column.
1: 	 * NOTE - position is 1-based.
1: 	 *
1: 	 * @param position	The oridinal position of a column in the
1: 	 *			ResultSet.
1: 	 *
1: 	 * @return		A ResultColumnDescriptor describing the
1: 	 *			column in the ResultSet.
1: 	 */
1: 	ResultColumnDescriptor	getColumnDescriptor(int position);
1: 
1: 	/**
0: 	 * Get a new result description that has been truncated
0: 	 * from input column number.   If the input column is
0: 	 * 5, then columns 5 to getColumnCount() are removed.
0: 	 * The new ResultDescription points to the same
0: 	 * ColumnDescriptors (this method performs a shallow
0: 	 * copy.
1: 	 *
0: 	 * @param truncateFrom the starting column to remove,
0: 	 * 1-based.
1: 	 *
0: 	 * @return a new ResultDescription
1: 	 */
0: 	public ResultDescription truncateColumns(int truncateFrom);
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1: 	 * Returns a ResultColumnDescriptor for the column, given the ordiinal
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: /**
0:  * The ResultDescription interface provides methods to get metadata on the
0:  * results returned by a statement.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public interface ResultDescription
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Returns an identifier that tells what type of statement has been
0: 	 * executed. This can be used to determine what other methods to call
0: 	 * to get the results back from a statement. For example, a SELECT
0: 	 * statement returns rows and columns, while other statements don't,
0: 	 * so you would only call getColumnCount() or getColumnType() for
0: 	 * SELECT statements.
0: 	 *
0: 	 * @return	A String identifier telling what type of statement this
0: 	 *		is.
0: 	 */
0: 	String	getStatementType();	
0: 
0: 	/**
0: 	 * Returns the number of columns in the result set.
0: 	 *
0: 	 * @return	The number of columns in the result set.
0: 	 */
0: 	int	getColumnCount();
0: 
0: 	/**
0: 		Return information about all the columns.
0: 	*/
0: 	public ResultColumnDescriptor[] getColumnInfo();
0: 
0: 	/**
0: 	 * Returns a ResultColumnDescriptor for the column, given the oridinal
0: 	 * position of the column.
0: 	 * NOTE - position is 1-based.
0: 	 *
0: 	 * @param position	The oridinal position of a column in the
0: 	 *			ResultSet.
0: 	 *
0: 	 * @return		A ResultColumnDescriptor describing the
0: 	 *			column in the ResultSet.
0: 	 */
0: 	ResultColumnDescriptor	getColumnDescriptor(int position);
0: 
0: 	/**
0: 	 * Get a new result description that has been truncated
0: 	 * from input column number.   If the input column is
0: 	 * 5, then columns 5 to getColumnCount() are removed.
0: 	 * The new ResultDescription points to the same
0: 	 * ColumnDescriptors (this method performs a shallow
0: 	 * copy.
0: 	 *
0: 	 * @param truncateFrom the starting column to remove,
0: 	 * 1-based.
0: 	 *
0: 	 * @return a new ResultDescription
0: 	 */
0: 	public ResultDescription truncateColumns(int truncateFrom);
0: }
============================================================================