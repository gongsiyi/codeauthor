1:fe77ca5: /*
3:fe77ca5: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.uuid.UUIDFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.uuid;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.catalog.UUID;
1:fe77ca5: 
1:fe77ca5: /*
1:fe77ca5: 	Internal comment (not for user documentation):
1:fe77ca5:   Although this is an abstract interface, I believe that the
1:fe77ca5:   underlying implementation of UUID will have to be DCE UUID.
1:fe77ca5:   This is because the string versions of UUIDs get stored in
1:fe77ca5:   the source code.  In other words, no matter what implementation
1:fe77ca5:   is used for UUIDs, strings that look like this
1:fe77ca5:   <blockquote><pre>
1:fe77ca5: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
1:fe77ca5:   </blockquote></pre>
1:fe77ca5:   will always have to be turned into universally unique objects
1:fe77ca5:   by the recreateUUID method
1:fe77ca5:  */
3:fe77ca5: /**
1:fe77ca5: 	
1:fe77ca5:   Generates and recreates unique identifiers.
1:fe77ca5:   
1:fe77ca5:   An example of such an identifier is:
1:fe77ca5:   <blockquote><pre>
1:fe77ca5: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
1:fe77ca5:   </blockquote></pre>
1:fe77ca5:   These resemble DCE UUIDs, but use a different implementation.
1:fe77ca5:   <P>
1:fe77ca5:   The string format is designed to be the same as the string
1:fe77ca5:   format produced by Microsoft's UUIDGEN program, although at
1:fe77ca5:   present the bit fields are probably not the same.
1:fe77ca5:   
2:fe77ca5:  **/
1:fe77ca5: public interface UUIDFactory 
1:fe77ca5: {
1:fe77ca5: 	/**
1:fe77ca5: 	  Create a new UUID.  The resulting object is guaranteed
1:fe77ca5: 	  to be unique "across space and time".
2:fe77ca5: 	  @return		The UUID.
1:fe77ca5: 	**/
1:fe77ca5:  	public UUID createUUID();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	  Recreate a UUID from a string produced by UUID.toString.
1:fe77ca5: 	  @return		The UUID.
1:fe77ca5: 	**/
1:fe77ca5: 	public UUID recreateUUID(String uuidstring);
1:fe77ca5: }
1:fe77ca5: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b9bd28c
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.uuid.UUIDFactory
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.uuid
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.uuid;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /*
1: 	Internal comment (not for user documentation):
1:   Although this is an abstract interface, I believe that the
1:   underlying implementation of UUID will have to be DCE UUID.
1:   This is because the string versions of UUIDs get stored in
1:   the source code.  In other words, no matter what implementation
1:   is used for UUIDs, strings that look like this
1:   <blockquote><pre>
1: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
1:   </blockquote></pre>
1:   will always have to be turned into universally unique objects
1:   by the recreateUUID method
1:  */
1: /**
1: 	
1:   Generates and recreates unique identifiers.
1:   
1:   An example of such an identifier is:
1:   <blockquote><pre>
1: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
1:   </blockquote></pre>
1:   These resemble DCE UUIDs, but use a different implementation.
1:   <P>
1:   The string format is designed to be the same as the string
1:   format produced by Microsoft's UUIDGEN program, although at
1:   present the bit fields are probably not the same.
1:   
1:  **/
1: public interface UUIDFactory 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	  Create a new UUID.  The resulting object is guaranteed
1: 	  to be unique "across space and time".
1: 	  @return		The UUID.
1: 	**/
1:  	public UUID createUUID();
1: 
1: 	/**
1: 	  Recreate a UUID from a string produced by UUID.toString.
1: 	  @return		The UUID.
1: 	**/
1: 	public UUID recreateUUID(String uuidstring);
1: 
1: 	/**
0: 	  Recreate a UUID from a byte array produced by UUID.toByteArray.
1: 	  @return		The UUID.
0: 	  @see UUID#toByteArray
1: 	**/
0: 	public UUID recreateUUID(byte[] b);
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.uuid
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.uuid;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /*
0: 	Internal comment (not for user documentation):
0:   Although this is an abstract interface, I believe that the
0:   underlying implementation of UUID will have to be DCE UUID.
0:   This is because the string versions of UUIDs get stored in
0:   the source code.  In other words, no matter what implementation
0:   is used for UUIDs, strings that look like this
0:   <blockquote><pre>
0: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
0:   </blockquote></pre>
0:   will always have to be turned into universally unique objects
0:   by the recreateUUID method
0:  */
0: /**
0: 	
0:   Generates and recreates unique identifiers.
0:   
0:   An example of such an identifier is:
0:   <blockquote><pre>
0: 	E4900B90-DA0E-11d0-BAFE-0060973F0942
0:   </blockquote></pre>
0:   These resemble DCE UUIDs, but use a different implementation.
0:   <P>
0:   The string format is designed to be the same as the string
0:   format produced by Microsoft's UUIDGEN program, although at
0:   present the bit fields are probably not the same.
0:   
0:  **/
0: public interface UUIDFactory 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	  Create a new UUID.  The resulting object is guaranteed
0: 	  to be unique "across space and time".
0: 	  @return		The UUID.
0: 	**/
0:  	public UUID createUUID();
0: 
0: 	/**
0: 	  Recreate a UUID from a string produced by UUID.toString.
0: 	  @return		The UUID.
0: 	**/
0: 	public UUID recreateUUID(String uuidstring);
0: 
0: 	/**
0: 	  Recreate a UUID from a byte array produced by UUID.toByteArray.
0: 	  @return		The UUID.
0: 	  @see UUID#toByteArray
0: 	**/
0: 	public UUID recreateUUID(byte[] b);
0: }
0: 
============================================================================