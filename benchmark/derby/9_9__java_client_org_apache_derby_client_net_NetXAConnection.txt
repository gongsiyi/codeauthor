1:33776ff: /*
38:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetXAConnection
1:70f7692: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:70f7692: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:70f7692: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:70f7692: 
1:33776ff: */
1:70f7692: 
1:33776ff: package org.apache.derby.client.net;
1:d506170: 
1:d5ba8a8: import javax.transaction.xa.XAResource;
1:70f7692: 
1:33776ff: import org.apache.derby.client.am.SqlException;
1:69e3d06: import org.apache.derby.client.am.ClientStatement;
1:70f7692: 
1:407e52d: import org.apache.derby.client.ClientPooledConnection;
1:348f4cd: import org.apache.derby.client.am.ClientMessageId;
1:6372907: import org.apache.derby.client.am.LogWriter;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:348f4cd: import org.apache.derby.shared.common.reference.SQLState;
1:407e52d: 
1:ea12fde: import org.apache.derby.jdbc.ClientDriver;
1:ea12fde: 
1:dadd05a: public class NetXAConnection {    
1:dadd05a:     private NetConnection netCon;
1:70f7692:     //---------------------constructors/finalizer---------------------------------
1:dadd05a:     // For XA Connections    
1:407e52d:     /**
1:407e52d:      *
1:407e52d:      * The construcor for the NetXAConnection. The parameter 
1:407e52d:      * is set to <code>this</code> from ClientXAConnection when
1:407e52d:      * it creates an instance of NetXAConnection. This is then
1:407e52d:      * passed on the underlying NetConnection constructor and is 
1:407e52d:      * used to raise StatementEvents from any PreparedStatement that
1:407e52d:      * would be created from that NetConnection.
1:407e52d:      *
1:6372907:      * @param logWriter    LogWriter object associated with this connection
1:407e52d:      * @param user         user id for this connection
1:407e52d:      * @param password     password for this connection
1:407e52d:      * @param dataSource   The DataSource object passed from the ClientXAConnection 
1:407e52d:      *                     object from which this constructor was called
1:407e52d:      * @param rmId         The Resource manager ID for XA Connections
1:407e52d:      * @param isXAConn     true if this is a XA connection
1:407e52d:      * @param cpc          The ClientPooledConnection object from which this 
1:407e52d:      *                     NetConnection constructor was called. This is used
1:407e52d:      *                     to pass StatementEvents back to the pooledConnection
1:407e52d:      *                     object
1:407e52d:      * @throws SqlException
1:407e52d:      * 
1:407e52d:      */
1:8269b78:     public NetXAConnection(
1:6372907:             LogWriter logWriter,
1:8269b78:             String user,
1:8269b78:             String password,
1:7863d83:             BasicClientDataSource40 dataSource,
1:8269b78:             int rmId,
1:8269b78:             boolean isXAConn,
1:8269b78:             ClientPooledConnection cpc) throws SqlException {
1:8269b78: 
1:6372907:         netCon = createNetConnection(logWriter, user, password,
1:407e52d:                 dataSource, rmId, isXAConn,cpc);
1:70f7692:         checkPlatformVersion();
20:70f7692:     }
1:70f7692: 
1:70f7692:     public void setCorrelatorToken(byte[] crttoken) {
1:dadd05a:         netCon.crrtkn_ = crttoken;
1:70f7692:     }
1:70f7692: 
1:70f7692:     void setNetXAResource(NetXAResource xares) {
1:dadd05a:         netCon.xares_ = xares;
1:70f7692:     }
1:70f7692: 
1:0326967:     private void writeLocalXACommit_() throws SqlException {
1:dadd05a:         netCon.netAgent_.netConnectionRequest_.writeLocalXACommit(netCon);
1:70f7692:     }
1:70f7692: 
1:0326967:     private void readLocalXACommit_() throws SqlException {
1:dadd05a:         netCon.netAgent_.netConnectionReply_.readLocalXACommit(netCon);
1:70f7692:     }
1:70f7692: 
1:0326967:     private void writeLocalXARollback_() throws SqlException {
1:dadd05a:         netCon.netAgent_.netConnectionRequest_.writeLocalXARollback(netCon);
1:70f7692:     }
1:70f7692: 
1:0326967:     private void readLocalXARollback_() throws SqlException {
1:dadd05a:         netCon.netAgent_.netConnectionReply_.readLocalXARollback(netCon);
1:70f7692:     }
1:70f7692: 
1:0326967:     void writeTransactionStart(ClientStatement statement)
1:69e3d06:             throws SqlException {
1:70f7692:         //KATHEY  remove below after checking that we don't need it.
1:dadd05a:         if (!netCon.isXAConnection()) {
1:70f7692:             return; // not a XA connection
1:70f7692:         }
1:70f7692: 
1:70f7692:         // this is a XA connection
1:dadd05a:         int xaState = netCon.getXAState();
1:dadd05a:         netCon.xares_.exceptionsOnXA = null;
1:38083d6:         //TODO: Looks like this can go and also the whole client indoubtTransaction code.
1:38083d6:         /*
1:70f7692:         if (xaState == XA_RECOVER) { // in recover, clean up and go to open-idle
2:70f7692:             if (indoubtTransactions_ != null) {
2:70f7692:                 indoubtTransactions_.clear();
1:70f7692:                 indoubtTransactions_ = null;
3:70f7692:                 setXAState(XA_OPEN_IDLE);
1:70f7692:                 xaState = XA_OPEN_IDLE;
1:70f7692:             }
1:38083d6:             
1:38083d6:         }*/
1:70f7692:         // For derby we don't need to write transaction start for a local
1:70f7692:         //transaction.  If autocommit is off we are good to go.
1:70f7692:         return;
1:70f7692:     }
1:70f7692: 
1:0326967:     void writeCommit() throws SqlException {
1:70f7692:         // this logic must be in sync with willAutoCommitGenerateFlow() logic
1:dadd05a:         int xaState = netCon.getXAState();
1:dadd05a:         if (xaState == netCon.XA_T0_NOT_ASSOCIATED){
1:dadd05a:             netCon.xares_.callInfoArray_[
1:dadd05a:                     netCon.xares_.conn_.currXACallInfoOffset_
1:dadd05a:                     ].xid_ = NetXAResource.nullXid;
1:dadd05a:             writeLocalXACommit_();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:0326967:     void readCommit() throws SqlException {
1:dadd05a:         int xaState = netCon.getXAState();
1:dadd05a:         NetXACallInfo callInfo = netCon.xares_.callInfoArray_
1:dadd05a:                 [netCon.currXACallInfoOffset_];
1:dadd05a:         callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
1:dadd05a:         if (xaState == netCon.XA_T0_NOT_ASSOCIATED) {
1:dadd05a:             readLocalXACommit_();
1:dadd05a:             //TODO: Remove
1:dadd05a:             //setXAState(XA_LOCAL);
1:70f7692:         }
1:dadd05a:         if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
1:dadd05a:             callInfo.xaFunction_ = NetXAResource.XAFUNC_COMMIT;
1:dadd05a:             netCon.xares_.xaRetValErrorAccumSQL(callInfo, 0);
1:dadd05a:             callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
1:dadd05a:             throw netCon.xares_.exceptionsOnXA;
1:dadd05a:         }        
1:70f7692:     }
1:70f7692: 
1:0326967:     void writeRollback() throws SqlException {
1:dadd05a:       netCon.xares_.callInfoArray_[
1:dadd05a:                 netCon.xares_.conn_.currXACallInfoOffset_
1:dadd05a:                 ].xid_ = netCon.xares_.nullXid;
1:dadd05a:        writeLocalXARollback_(); 
1:70f7692:     }
1:70f7692: 
1:0326967:     void readRollback() throws SqlException {
1:dadd05a:         NetXACallInfo callInfo = netCon.xares_.callInfoArray_
1:dadd05a:                 [netCon.currXACallInfoOffset_];
1:dadd05a:         callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
1:dadd05a:         readLocalXARollback_();
1:70f7692: 
1:dadd05a:         if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
1:dadd05a:             callInfo.xaFunction_ = NetXAResource.XAFUNC_ROLLBACK;
1:dadd05a:             netCon.xares_.xaRetValErrorAccumSQL(callInfo, 0);
1:dadd05a:             callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
1:dadd05a:             throw netCon.xares_.exceptionsOnXA;
1:70f7692:         }
1:dadd05a: 
1:dadd05a: 
1:dadd05a:         // for all XA connectiions
1:dadd05a:         // TODO:KATHEY - Do we need this?
1:dadd05a:         netCon.setXAState(netCon.XA_T0_NOT_ASSOCIATED);
1:70f7692:     }
1:70f7692: 
1:dadd05a:     /**
1:dadd05a:      * Returns underlying net connection
1:dadd05a:      * @return NetConnection
1:dadd05a:      */
1:dadd05a:     public NetConnection getNetConnection () {
1:dadd05a:         return netCon;
1:70f7692:     }
1:8269b78: 
1:70f7692:     private void checkPlatformVersion() throws SqlException {
1:70f7692:         int supportedVersion;
1:70f7692: 
1:70f7692:         supportedVersion = 8;
1:70f7692: 
1:dadd05a:         if (netCon.xaHostVersion_ >= supportedVersion) { 
1:dadd05a:             // supported version, return
1:70f7692:             return;
1:70f7692:         }
1:70f7692: 
1:70f7692:         // unsupported version for platform
1:70f7692:         String platform = null;
1:70f7692:         platform = "Linux, Unix, Windows";
1:348f4cd:         throw new SqlException(netCon.agent_.logWriter_, 
1:348f4cd:             new ClientMessageId(SQLState.NET_WRONG_XA_VERSION),
1:66527ec:             platform, supportedVersion, netCon.xaHostVersion_);
1:dadd05a:     }
1:dadd05a:     
1:dadd05a:     /**
1:407e52d:      *
1:dadd05a:      * Creates NetConnection for the supported version of jdbc.
1:dadd05a:      * This method can be overwritten to return NetConnection
1:dadd05a:      * of the supported jdbc version.
1:6372907:      * @param logWriter    LogWriter object associated with this connection
1:407e52d:      * @param user         user id for this connection
1:407e52d:      * @param password     password for this connection
1:407e52d:      * @param dataSource   The DataSource object passed from the ClientXAConnection 
1:407e52d:      *                     object from which this constructor was called
1:407e52d:      * @param rmId         The Resource manager ID for XA Connections
1:407e52d:      * @param isXAConn     true if this is a XA connection
1:407e52d:      * @param cpc          The ClientPooledConnection object from which this 
1:407e52d:      *                     NetConnection constructor was called. This is used
1:407e52d:      *                     to pass StatementEvents back to the pooledConnection
1:407e52d:      *                     object
1:dadd05a:      * @return NetConnection
1:407e52d:      *
1:dadd05a:      */
1:0326967:     private NetConnection createNetConnection (
1:6372907:             LogWriter logWriter,
1:8269b78:             String user,
1:8269b78:             String password,
1:7863d83:             BasicClientDataSource40 dataSource,
1:8269b78:             int rmId,
1:8269b78:             boolean isXAConn,
1:8269b78:             ClientPooledConnection cpc) throws SqlException {
1:70f7692: 
1:ea12fde:         return (NetConnection)ClientDriver.getFactory().newNetConnection
1:6372907:             (logWriter, user, password,dataSource, rmId, isXAConn,cpc);
1:70f7692:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     private void writeLocalXACommit_() throws SqlException {
1:     private void readLocalXACommit_() throws SqlException {
1:     private void writeLocalXARollback_() throws SqlException {
1:     private void readLocalXARollback_() throws SqlException {
1:     void writeTransactionStart(ClientStatement statement)
/////////////////////////////////////////////////////////////////////////
1:     void writeCommit() throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     void readCommit() throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     void writeRollback() throws SqlException {
1:     void readRollback() throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     private NetConnection createNetConnection (
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientStatement;
/////////////////////////////////////////////////////////////////////////
0:     public void writeTransactionStart(ClientStatement statement)
1:             throws SqlException {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot dataSource,
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot dataSource,
commit:95049cf
/////////////////////////////////////////////////////////////////////////
commit:43fb59e
/////////////////////////////////////////////////////////////////////////
0:         NetIndoubtTransaction indoubtTxn = netCon.getIndoubtTransaction(xid);
/////////////////////////////////////////////////////////////////////////
0:         NetIndoubtTransaction indoubtTxn = netCon.getIndoubtTransaction(xid);
commit:8269b78
/////////////////////////////////////////////////////////////////////////
1:     public NetXAConnection(
0:             NetLogWriter netLogWriter,
1:             String user,
1:             String password,
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot dataSource,
1:             int rmId,
1:             boolean isXAConn,
1:             ClientPooledConnection cpc) throws SqlException {
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected NetConnection createNetConnection (
0:             NetLogWriter netLogWriter,
1:             String user,
1:             String password,
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot dataSource,
1:             int rmId,
1:             boolean isXAConn,
1:             ClientPooledConnection cpc) throws SqlException {
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6372907
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.LogWriter;
/////////////////////////////////////////////////////////////////////////
1:      * @param logWriter    LogWriter object associated with this connection
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter,
/////////////////////////////////////////////////////////////////////////
1:         netCon = createNetConnection(logWriter, user, password,
/////////////////////////////////////////////////////////////////////////
1:      * @param logWriter    LogWriter object associated with this connection
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter,
/////////////////////////////////////////////////////////////////////////
1:             (logWriter, user, password,dataSource, rmId, isXAConn,cpc);
commit:66527ec
/////////////////////////////////////////////////////////////////////////
1:             platform, supportedVersion, netCon.xaHostVersion_);
commit:407e52d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.ClientPooledConnection;
1: 
1:     /**
1:      *
1:      * The construcor for the NetXAConnection. The parameter 
1:      * is set to <code>this</code> from ClientXAConnection when
1:      * it creates an instance of NetXAConnection. This is then
1:      * passed on the underlying NetConnection constructor and is 
1:      * used to raise StatementEvents from any PreparedStatement that
1:      * would be created from that NetConnection.
1:      *
0:      * @param netLogWriter NetLogWriter object associated with this connection
1:      * @param user         user id for this connection
1:      * @param password     password for this connection
1:      * @param dataSource   The DataSource object passed from the ClientXAConnection 
1:      *                     object from which this constructor was called
1:      * @param rmId         The Resource manager ID for XA Connections
1:      * @param isXAConn     true if this is a XA connection
1:      * @param cpc          The ClientPooledConnection object from which this 
1:      *                     NetConnection constructor was called. This is used
1:      *                     to pass StatementEvents back to the pooledConnection
1:      *                     object
1:      * @throws SqlException
1:      * 
1:      */
0:                            boolean isXAConn,
0:                            ClientPooledConnection cpc) throws SqlException {
1:                 dataSource, rmId, isXAConn,cpc);
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @param netLogWriter NetLogWriter object associated with this connection
1:      * @param user         user id for this connection
1:      * @param password     password for this connection
1:      * @param dataSource   The DataSource object passed from the ClientXAConnection 
1:      *                     object from which this constructor was called
1:      * @param rmId         The Resource manager ID for XA Connections
1:      * @param isXAConn     true if this is a XA connection
1:      * @param cpc          The ClientPooledConnection object from which this 
1:      *                     NetConnection constructor was called. This is used
1:      *                     to pass StatementEvents back to the pooledConnection
1:      *                     object
1:      *
0:                            boolean isXAConn,
0:                            ClientPooledConnection cpc) throws SqlException {        
0:             (netLogWriter, user, password,dataSource, rmId, isXAConn,cpc);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:348f4cd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientMessageId;
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:         throw new SqlException(netCon.agent_.logWriter_, 
1:             new ClientMessageId(SQLState.NET_WRONG_XA_VERSION),
0:             platform, new Integer(supportedVersion), 
0:             new Integer(netCon.xaHostVersion_));
commit:d506170
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLException;
1: 
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void close() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void closeX() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void closeResources() throws SQLException {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ea12fde
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDriver;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return (NetConnection)ClientDriver.getFactory().newNetConnection
0:             (netLogWriter, user, password,dataSource, rmId, isXAConn);
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0:                            org.apache.derby.jdbc.ClientBaseDataSource dataSource,
/////////////////////////////////////////////////////////////////////////
0:                            org.apache.derby.jdbc.ClientBaseDataSource dataSource,
commit:dadd05a
/////////////////////////////////////////////////////////////////////////
0:    Copyright (c) 2001, 2005, 2006 The Apache Software Foundation or its 
0:    licensors, where applicable.
/////////////////////////////////////////////////////////////////////////
1: public class NetXAConnection {    
1:     private NetConnection netCon;
1:     // For XA Connections    
0:         netCon = createNetConnection (netLogWriter, user, password, 
0:                 dataSource, rmId, isXAConn);
0:         netCon.finalize();
1:         netCon.crrtkn_ = crttoken;
0:         return netCon.crrtkn_;
1:         netCon.xares_ = xares;
0:         netCon.netAgent_.netConnectionRequest_.writeLocalXAStart(netCon);
0:         netCon.netAgent_.netConnectionReply_.readLocalXAStart(netCon);
1:         netCon.netAgent_.netConnectionRequest_.writeLocalXACommit(netCon);
1:         netCon.netAgent_.netConnectionReply_.readLocalXACommit(netCon);
1:         netCon.netAgent_.netConnectionRequest_.writeLocalXARollback(netCon);
1:         netCon.netAgent_.netConnectionReply_.readLocalXARollback(netCon);
1:         if (!netCon.isXAConnection()) {
1:         int xaState = netCon.getXAState();
1:         netCon.xares_.exceptionsOnXA = null;
/////////////////////////////////////////////////////////////////////////
0:         NetIndoubtTransaction indoubtTxn = 
0:                 (NetIndoubtTransaction) netCon.indoubtTransactions_.get(xid);
/////////////////////////////////////////////////////////////////////////
0:         NetIndoubtTransaction indoubtTxn = (NetIndoubtTransaction) netCon.indoubtTransactions_.get(xid);
/////////////////////////////////////////////////////////////////////////
1:         int xaState = netCon.getXAState();
1:         if (xaState == netCon.XA_T0_NOT_ASSOCIATED){
1:             netCon.xares_.callInfoArray_[
1:                     netCon.xares_.conn_.currXACallInfoOffset_
1:                     ].xid_ = NetXAResource.nullXid;
1:             writeLocalXACommit_();
1:         int xaState = netCon.getXAState();
1:         NetXACallInfo callInfo = netCon.xares_.callInfoArray_
1:                 [netCon.currXACallInfoOffset_];
1:         callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
1:         if (xaState == netCon.XA_T0_NOT_ASSOCIATED) {
1:             readLocalXACommit_();
1:             //TODO: Remove
1:             //setXAState(XA_LOCAL);
1:         if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
1:             callInfo.xaFunction_ = NetXAResource.XAFUNC_COMMIT;
1:             netCon.xares_.xaRetValErrorAccumSQL(callInfo, 0);
1:             callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
1:             throw netCon.xares_.exceptionsOnXA;
1:         }        
1:       netCon.xares_.callInfoArray_[
1:                 netCon.xares_.conn_.currXACallInfoOffset_
1:                 ].xid_ = netCon.xares_.nullXid;
1:        writeLocalXARollback_(); 
1:         NetXACallInfo callInfo = netCon.xares_.callInfoArray_
1:                 [netCon.currXACallInfoOffset_];
1:         callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
1:         readLocalXARollback_();
1:         if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
1:             callInfo.xaFunction_ = NetXAResource.XAFUNC_ROLLBACK;
1:             netCon.xares_.xaRetValErrorAccumSQL(callInfo, 0);
1:             callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
1:             throw netCon.xares_.exceptionsOnXA;
1: 
1: 
1:         // for all XA connectiions
1:         // TODO:KATHEY - Do we need this?
1:         netCon.setXAState(netCon.XA_T0_NOT_ASSOCIATED);
1:     /**
1:      * Returns underlying net connection
1:      * @return NetConnection
1:      */
1:     public NetConnection getNetConnection () {
1:         return netCon;
/////////////////////////////////////////////////////////////////////////
1:         if (netCon.xaHostVersion_ >= supportedVersion) { 
1:             // supported version, return
/////////////////////////////////////////////////////////////////////////
0:                 netCon.xaHostVersion_;
0:         throw new SqlException(netCon.agent_.logWriter_, versionMsg);
1:     }
1:     
1:     /**
1:      * Creates NetConnection for the supported version of jdbc.
1:      * This method can be overwritten to return NetConnection
1:      * of the supported jdbc version.
0:      * @param netLogWriter 
0:      * @param user 
0:      * @param password 
0:      * @param dataSource 
0:      * @param rmId 
0:      * @param isXAConn 
1:      * @return NetConnection
1:      */
0:     protected NetConnection createNetConnection (NetLogWriter netLogWriter,
0:                            String user,
0:                            String password,
0:                            org.apache.derby.jdbc.ClientDataSource dataSource,
0:                            int rmId,
0:                            boolean isXAConn) throws SqlException {        
0:         return new NetConnection (netLogWriter, user, password, 
0:                 dataSource, rmId, isXAConn);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d5ba8a8
/////////////////////////////////////////////////////////////////////////
0: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
/////////////////////////////////////////////////////////////////////////
0:             callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
0:             if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
0:                 callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
/////////////////////////////////////////////////////////////////////////
0:             callInfo.xaRetVal_ = XAResource.XA_OK; // initialize XARETVAL
0:             if (callInfo.xaRetVal_ != XAResource.XA_OK) { // xaRetVal has possible error, format it
0:                 callInfo.xaRetVal_ = XAResource.XA_OK; // re-initialize XARETVAL
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88c25bb
/////////////////////////////////////////////////////////////////////////
0:             if (xaState == XA_T0_NOT_ASSOCIATED){
/////////////////////////////////////////////////////////////////////////
0:             if (xaState == XA_T0_NOT_ASSOCIATED) {
/////////////////////////////////////////////////////////////////////////
0:             setXAState(XA_T0_NOT_ASSOCIATED);
commit:38083d6
/////////////////////////////////////////////////////////////////////////
1:         //TODO: Looks like this can go and also the whole client indoubtTransaction code.
1:         /*
/////////////////////////////////////////////////////////////////////////
1:             
1:         }*/
/////////////////////////////////////////////////////////////////////////
0:             if (xaState == XA_LOCAL){
0:                         NetXAResource.nullXid;
/////////////////////////////////////////////////////////////////////////
0:             if (xaState == XA_LOCAL) {
0:                 //TODO: Remove
0:                 //setXAState(XA_LOCAL);
/////////////////////////////////////////////////////////////////////////
0:             // TODO:KATHEY - Do we need this?
0:             setXAState(XA_LOCAL);
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: import javax.transaction.xa.Xid;
1: 
0: public class NetXAConnection extends org.apache.derby.client.net.NetConnection {
1:     //---------------------constructors/finalizer---------------------------------
0:     // For XA Connections
0:     public NetXAConnection(NetLogWriter netLogWriter,
0:                            String user,
0:                            String password,
0:                            org.apache.derby.jdbc.ClientDataSource dataSource,
0:                            int rmId,
0:                            boolean isXAConn) throws SqlException {
0:         super(netLogWriter, user, password, dataSource, rmId, isXAConn);
1:         checkPlatformVersion();
0:     protected void finalize() throws java.lang.Throwable {
0:         super.finalize();
1: 
1:     public void setCorrelatorToken(byte[] crttoken) {
0:         crrtkn_ = crttoken;
0:     public byte[] getCorrelatorToken() {
0:         return crrtkn_;
1:     void setNetXAResource(NetXAResource xares) {
0:         xares_ = xares;
0:     public void writeLocalXAStart_() throws SqlException {
0:         netAgent_.netConnectionRequest_.writeLocalXAStart(this);
1:     }
0:     public void readLocalXAStart_() throws SqlException {
0:         netAgent_.netConnectionReply_.readLocalXAStart(this);
1:     }
1: 
0:     public void writeLocalXACommit_() throws SqlException {
0:         netAgent_.netConnectionRequest_.writeLocalXACommit(this);
1:     }
1: 
0:     public void readLocalXACommit_() throws SqlException {
0:         netAgent_.netConnectionReply_.readLocalXACommit(this);
1:     }
1: 
0:     public void writeLocalXARollback_() throws SqlException {
0:         netAgent_.netConnectionRequest_.writeLocalXARollback(this);
1:     }
1: 
0:     public void readLocalXARollback_() throws SqlException {
0:         netAgent_.netConnectionReply_.readLocalXARollback(this);
1:     }
1: 
0:     public void writeTransactionStart(Statement statement) throws SqlException {
1:         //KATHEY  remove below after checking that we don't need it.
0:         if (!isXAConnection_) {
1:             return; // not a XA connection
1:         // this is a XA connection
0:         int xaState = getXAState();
0:         xares_.exceptionsOnXA = null;
1:         if (xaState == XA_RECOVER) { // in recover, clean up and go to open-idle
1:             if (indoubtTransactions_ != null) {
1:                 indoubtTransactions_.clear();
1:                 indoubtTransactions_ = null;
1:                 setXAState(XA_OPEN_IDLE);
1:                 xaState = XA_OPEN_IDLE;
1:             }
1:         }
1:         // For derby we don't need to write transaction start for a local
1:         //transaction.  If autocommit is off we are good to go.
1:         return;
0:     public void setIndoubtTransactions(java.util.Hashtable indoubtTransactions) {
1:         if (indoubtTransactions_ != null) {
1:             indoubtTransactions_.clear();
1:         }
0:         indoubtTransactions_ = indoubtTransactions;
1:     }
1: 
0:     public byte[] getUOWID(Xid xid) {
0:         NetIndoubtTransaction indoubtTxn = (NetIndoubtTransaction) indoubtTransactions_.get(xid);
0:         if (indoubtTxn == null) {
0:             return null;
1:         }
0:         byte[] uowid = indoubtTxn.getUOWID();
0:         return uowid;
1:     }
1: 
1: 
0:     public int getPort(Xid xid) {
0:         NetIndoubtTransaction indoubtTxn = (NetIndoubtTransaction) indoubtTransactions_.get(xid);
0:         if (indoubtTxn == null) {
0:             return -1;
1:         }
0:         return indoubtTxn.getPort();
1:     }
1: 
0:     public void writeCommit() throws SqlException {
1:         // this logic must be in sync with willAutoCommitGenerateFlow() logic
0:         if (isXAConnection_) { // XA Connection
0:             int xaState = getXAState();
0:             if ((xaState == XA_OPEN_IDLE) ||
0:                     (xaState == XA_LOCAL) ||
0:                     (xaState == XA_LOCAL_START_SENT)) {
0:                 xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
0:                         xares_.nullXid;
0:                 writeLocalXACommit_();
1:             }
0:         } else { // not XA connection
0:             writeLocalCommit_();
1:         }
1:     }
1: 
0:     public void readCommit() throws SqlException {
0:         if (isXAConnection_) { // XA Connection
0:             int xaState = getXAState();
0:             NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
0:             callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
0:             if ((xaState == XA_OPEN_IDLE) ||
0:                     (xaState == XA_LOCAL) ||
0:                     (xaState == XA_LOCAL_START_SENT)) {
0:                 readLocalXACommit_();
1:                 setXAState(XA_OPEN_IDLE);
1:             }
0:             if (callInfo.xaRetVal_ != NetXAResource.XARETVAL_XAOK) { // xaRetVal has possible error, format it
0:                 callInfo.xaFunction_ = NetXAResource.XAFUNC_COMMIT;
0:                 xares_.xaRetValErrorAccumSQL(callInfo, 0);
0:                 callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // re-initialize XARETVAL
0:                 throw xares_.exceptionsOnXA;
1:             }
0:         } else
0:         // non-XA connections
0:         {
0:             readLocalCommit_();
1:         }
1:     }
1: 
0:     public void writeRollback() throws SqlException {
0:         if (isXAConnection_) {
0:             xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
0:                     xares_.nullXid;
0:             writeLocalXARollback_();
0:         } else {
0:             writeLocalRollback_(); // non-XA
1:         }
1:     }
1: 
0:     public void readRollback() throws SqlException {
0:         if (isXAConnection_) { // XA connections
0:             NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
0:             callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
0:             readLocalXARollback_();
1: 
0:             if (callInfo.xaRetVal_ != NetXAResource.XARETVAL_XAOK) { // xaRetVal has possible error, format it
0:                 callInfo.xaFunction_ = NetXAResource.XAFUNC_ROLLBACK;
0:                 xares_.xaRetValErrorAccumSQL(callInfo, 0);
0:                 callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // re-initialize XARETVAL
0:                 throw xares_.exceptionsOnXA;
1:             }
1: 
1: 
0:             // for all XA connectiions
1:             setXAState(XA_OPEN_IDLE);
0:         } else {
0:             readLocalRollback_(); // non-XA connections
1:         }
1:     }
1: 
0:     synchronized public void close() throws SqlException {
0:         // call super.close*() to do the close*
0:         super.close();
0:         if (open_) {
0:             return; // still open, return
1:         }
0:         if (xares_ != null) {
0:             xares_.removeXaresFromSameRMchain();
1:         }
1:     }
1: 
0:     synchronized public void closeX() throws SqlException {
0:         // call super.close*() to do the close*
0:         super.closeX();
0:         if (open_) {
0:             return; // still open, return
1:         }
0:         if (xares_ != null) {
0:             xares_.removeXaresFromSameRMchain();
1:         }
1:     }
1: 
0:     synchronized public void closeForReuse() throws SqlException {
0:         // call super.close*() to do the close*
0:         super.closeForReuse();
0:         if (open_) {
0:             return; // still open, return
1:         }
0:         if (xares_ != null) {
0:             xares_.removeXaresFromSameRMchain();
1:         }
1:     }
1: 
0:     synchronized public void closeResources() throws SqlException {
0:         // call super.close*() to do the close*
0:         super.closeResources();
0:         if (open_) {
0:             return; // still open, return
1:         }
0:         if (xares_ != null) {
0:             xares_.removeXaresFromSameRMchain();
1:         }
1:     }
1: 
1:     private void checkPlatformVersion() throws SqlException {
1:         int supportedVersion;
1: 
1:         supportedVersion = 8;
1: 
0:         if (xaHostVersion_ >= supportedVersion) { // supported version, return
1:             return;
1:         }
1: 
1:         // unsupported version for platform
1:         String platform = null;
1:         platform = "Linux, Unix, Windows";
0:         String versionMsg = "On " + platform + " XA supports version " +
0:                 supportedVersion + " and above, this is version " +
0:                 xaHostVersion_;
0:         throw new SqlException(agent_.logWriter_, versionMsg);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetXAConnection
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.client.am.Statement;
0: import javax.transaction.xa.*;
1: 
0: public class NetXAConnection extends org.apache.derby.client.net.NetConnection
0: {
0:   //---------------------constructors/finalizer---------------------------------
0:   // For XA Connections
0:   public NetXAConnection (NetLogWriter netLogWriter,
0:                          String user,
0:                          String password,
0:                          org.apache.derby.jdbc.ClientDataSource dataSource,
0:                          int rmId,
0:                          boolean isXAConn) throws SqlException
0:   {
0:     super (netLogWriter, user, password, dataSource, rmId, isXAConn);
0:     checkPlatformVersion();
0:   }
1: 
0:   protected void finalize () throws java.lang.Throwable
0:   {
0:     super.finalize();
0:   }
1: 
0:   public void setCorrelatorToken(byte[] crttoken)
0:   {
0:     crrtkn_ = crttoken;
0:   }
1: 
0:   public byte[] getCorrelatorToken()
0:   {
0:     return crrtkn_;
0:   }
1: 
0:   void setNetXAResource( NetXAResource xares )
0:   {
0:     xares_ = xares;
0:   }
1: 
0:   public void writeLocalXAStart_ () throws SqlException
0:   { netAgent_.netConnectionRequest_.writeLocalXAStart (this); }
0:   public void readLocalXAStart_ () throws SqlException
0:   { netAgent_.netConnectionReply_.readLocalXAStart (this); }
1: 
0:   public void writeLocalXACommit_ () throws SqlException
0:   {  netAgent_.netConnectionRequest_.writeLocalXACommit (this); }
0:   public void readLocalXACommit_ () throws SqlException
0:   { netAgent_.netConnectionReply_.readLocalXACommit (this); }
1: 
0:   public void writeLocalXARollback_ () throws SqlException
0:   {  netAgent_.netConnectionRequest_.writeLocalXARollback (this); }
0:   public void readLocalXARollback_ () throws SqlException
0:   { netAgent_.netConnectionReply_.readLocalXARollback (this); }
1: 
0:   public void writeTransactionStart(Statement statement) throws SqlException
0:   {
0: 	  //KATHEY  remove below after checking that we don't need it.
0:     if( !isXAConnection_ )
0:       return; // not a XA connection
1: 
0:     // this is a XA connection
0:     int xaState = getXAState();
0:     xares_.exceptionsOnXA = null;
1: 
0:     if( xaState == XA_RECOVER )
0:     { // in recover, clean up and go to open-idle
0:       if (indoubtTransactions_ != null)
0:       {
0:         indoubtTransactions_.clear();
0:         indoubtTransactions_ = null;
0:         setXAState( XA_OPEN_IDLE );
0:         xaState = XA_OPEN_IDLE;
0:       }
0:     }
0: 	// For derby we don't need to write transaction start for a local 
0: 	//transaction.  If autocommit is off we are good to go.
0: 	return;
0:   }
1: 
0:   public void setIndoubtTransactions(java.util.Hashtable indoubtTransactions)
0:   {
0:     if (indoubtTransactions_ != null)
0:       indoubtTransactions_.clear();
0:     indoubtTransactions_ = indoubtTransactions;
0:   }
1: 
0:   public byte[] getUOWID(Xid xid)
0:   {
0:     NetIndoubtTransaction indoubtTxn = (NetIndoubtTransaction) indoubtTransactions_.get(xid);
0:     if( indoubtTxn == null )
0:       return null;
0:     byte[] uowid = indoubtTxn.getUOWID();
0:     return uowid;
0:   }
1: 
1: 
0:   public int getPort(Xid xid)
0:   {
0:     NetIndoubtTransaction indoubtTxn = (NetIndoubtTransaction) indoubtTransactions_.get(xid);
0:     if( indoubtTxn == null )
0:       return -1;
0:     return indoubtTxn.getPort();
0:   }
1: 
0:   public void writeCommit () throws SqlException
0:   {
0:     // this logic must be in sync with willAutoCommitGenerateFlow() logic
0:     if (isXAConnection_)
0:     { // XA Connection
0:       int xaState = getXAState();
0:       if ((xaState == XA_OPEN_IDLE) ||
0:           (xaState == XA_LOCAL) ||
0:           (xaState == XA_LOCAL_START_SENT))
0:       {
0:           xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
0:               xares_.nullXid;
0:           writeLocalXACommit_();
0: 	  }
0:     }
0:     else
0:     { // not XA connection
0:       writeLocalCommit_();
0:     }
0:   }
1: 
0:   public void readCommit () throws SqlException
0:   {
0:     if (isXAConnection_)
0:     { // XA Connection
0:       int xaState = getXAState();
0:       NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
0:       callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
0:       if ((xaState == XA_OPEN_IDLE) ||
0:            (xaState == XA_LOCAL) ||
0:            (xaState == XA_LOCAL_START_SENT))
0:       {
0:          readLocalXACommit_();
0:          setXAState( XA_OPEN_IDLE );
0:       }
0:       if( callInfo.xaRetVal_ != NetXAResource.XARETVAL_XAOK )
0:       { // xaRetVal has possible error, format it
0:          callInfo.xaFunction_ = NetXAResource.XAFUNC_COMMIT;
0:          xares_.xaRetValErrorAccumSQL( callInfo, 0 );
0:          callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // re-initialize XARETVAL
0:          throw xares_.exceptionsOnXA;
0:       }
0:     }
0:     else
0:       // non-XA connections
0:       readLocalCommit_();
0:   }
1: 
0:   public void writeRollback () throws SqlException
0:   {
0:     if (isXAConnection_)
0:     {
0:          xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
0:                 xares_.nullXid;
0:          writeLocalXARollback_();
0:     }
0:     else
0:       writeLocalRollback_(); // non-XA
0:   }
1: 
0:   public void readRollback() throws SqlException
0:   {
0:     if (isXAConnection_)
0:     { // XA connections
0:         NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
0:         callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
0:         readLocalXARollback_();
1: 
0:         if( callInfo.xaRetVal_ != NetXAResource.XARETVAL_XAOK )
0:         { // xaRetVal has possible error, format it
0:           callInfo.xaFunction_ = NetXAResource.XAFUNC_ROLLBACK;
0:           xares_.xaRetValErrorAccumSQL( callInfo, 0 );
0:           callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // re-initialize XARETVAL
0:           throw xares_.exceptionsOnXA;
0:         }
1: 
1: 
0:       // for all XA connectiions
0:       setXAState( XA_OPEN_IDLE );
0:     }
0:     else
0:       readLocalRollback_(); // non-XA connections
0:   }
1: 
0:   synchronized public void close () throws SqlException
0:   {
0:     // call super.close*() to do the close*
0:     super.close();
0:     if (open_) return; // still open, return
0:     if( xares_ != null )
0:     {
0:       xares_.removeXaresFromSameRMchain();
0:     }
0:   }
1: 
0:   synchronized public void closeX () throws SqlException
0:   {
0:     // call super.close*() to do the close*
0:     super.closeX();
0:     if (open_) return; // still open, return
0:     if( xares_ != null )
0:     {
0:       xares_.removeXaresFromSameRMchain();
0:     }
0:   }
1: 
0:   synchronized public void closeForReuse() throws SqlException
0:   {
0:     // call super.close*() to do the close*
0:     super.closeForReuse();
0:     if (open_) return; // still open, return
0:     if( xares_ != null )
0:     {
0:       xares_.removeXaresFromSameRMchain();
0:     }
0:   }
1: 
0:   synchronized public void closeResources () throws SqlException
0:   {
0:     // call super.close*() to do the close*
0:     super.closeResources();
0:     if (open_) return; // still open, return
0:     if( xares_ != null )
0:     {
0:       xares_.removeXaresFromSameRMchain();
0:     }
0:   }
1: 
0:   private void checkPlatformVersion() throws SqlException
0:   {
0:     int supportedVersion;
1: 
0:     supportedVersion = 8;
1: 
0:     if( xaHostVersion_ >= supportedVersion )
0:     { // supported version, return
0:       return;
0:     }
1: 
0:     // unsupported version for platform
0:     String platform = null;
0:     platform = "Linux, Unix, Windows";
0:     String versionMsg = "On " + platform + " XA supports version " +
0:                         supportedVersion + " and above, this is version " +
0:                         xaHostVersion_;
0:     throw new SqlException( agent_.logWriter_, versionMsg );
0:   }
0: }
============================================================================