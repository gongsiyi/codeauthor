1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.VTIDeferModPolicy
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:3541af3: import java.util.Arrays;
1:3541af3: import java.util.HashSet;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.sql.compile.Visitable;
1:3bb140c: import org.apache.derby.iapi.sql.compile.Visitor;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:3bb140c: import org.apache.derby.vti.DeferModification;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class applies a VTI modification deferral policy to a statement to
1:eac0369:  * see whether it should be deferred.
1:eac0369:  */
1:eac0369: class VTIDeferModPolicy implements Visitor
2:eac0369: {
1:eac0369:     /**
1:eac0369:      * See if a VTI modification statement should be deferred.
1:eac0369:      *
1:eac0369:      * @param statementType DeferModification.INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
1:eac0369:      * @param targetVTI The target VTI
1:eac0369:      * @param updateColumnNames The list of columns being updated, null if this is not an update statement
1:eac0369:      * @param source
1:eac0369:      */
1:eac0369:     public static boolean deferIt( int statementType,
1:eac0369:                                    FromVTI targetVTI,
1:eac0369:                                    String[] updateColumnNames,
1:eac0369:                                    QueryTreeNode source)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         try
1:eac0369:         {
1:eac0369:             DeferModification deferralControl;
1:eac0369:             int resultSetType = targetVTI.getResultSetType( );
1:eac0369: 
1:eac0369:             /* Deferred updates and deletes are implemented by scrolling the result set. So, if
1:eac0369:              * the statement is an update or delete but the result set is not scrollable then do
1:eac0369:              * not attempt to defer the statement.
1:eac0369:              */
1:eac0369:             if( (statementType == DeferModification.UPDATE_STATEMENT ||statementType == DeferModification.DELETE_STATEMENT)
1:eac0369:                 && resultSetType == ResultSet.TYPE_FORWARD_ONLY)
1:eac0369:                 return false;
1:eac0369: 
1:eac0369:             deferralControl = targetVTI.getDeferralControl();
1:eac0369:             if( deferralControl == null)
1:eac0369:             {
1:4aef9b0:                 String VTIClassName = targetVTI.getMethodCall().getJavaClassName();
1:eac0369:                 deferralControl = new DefaultVTIModDeferPolicy( VTIClassName,
1:eac0369:                                                                 ResultSet.TYPE_SCROLL_SENSITIVE == resultSetType);
1:eac0369:             }
1:eac0369:             if( deferralControl.alwaysDefer( statementType))
1:eac0369:                 return true;
1:eac0369: 
1:eac0369:             if( source == null && statementType != DeferModification.UPDATE_STATEMENT)
1:eac0369:                 return false;
1:eac0369: 
1:eac0369:             VTIDeferModPolicy deferralSearch = new VTIDeferModPolicy( targetVTI,
1:eac0369:                                                                       updateColumnNames,
1:eac0369:                                                                       deferralControl,
1:eac0369:                                                                       statementType);
1:eac0369: 
1:eac0369:             if( source != null)
1:eac0369:                 source.accept( deferralSearch);
1:eac0369: 
1:eac0369:             if( statementType == DeferModification.UPDATE_STATEMENT)
1:eac0369:             {
1:eac0369:                 // Apply the columnRequiresDefer method to updated columns not in the where clause.
1:e1f49ca:                 for (String s : deferralSearch.columns) {
1:3541af3:                     if (deferralControl.columnRequiresDefer(
1:e1f49ca:                             statementType, s, false)) {
1:eac0369:                         return true;
1:3541af3:                     }
1:eac0369:                 }
1:eac0369:             }
1:eac0369:             return deferralSearch.deferred;
1:eac0369:         }
1:eac0369:         catch( SQLException sqle)
1:eac0369:         {
1:eac0369:             throw StandardException.unexpectedUserException(sqle);
1:eac0369:         }
1:eac0369:     } // end of deferIt
1:eac0369: 
1:eac0369:     // state needed to search the statement parse tree for nodes that require deferred modification
1:eac0369:     private boolean deferred = false;
1:eac0369:     private DeferModification deferralControl;
1:eac0369:     private int statementType;
1:eac0369:     private int tableNumber;
1:71c8e86:     private final HashSet<String> columns = new HashSet<String>();
1:eac0369: 
1:eac0369:     private VTIDeferModPolicy( FromVTI targetVTI,
1:eac0369:                                String[] columnNames,
1:eac0369:                                DeferModification deferralControl,
1:eac0369:                                int statementType)
1:eac0369:     {
1:eac0369:         this.deferralControl = deferralControl;
1:eac0369:         this.statementType = statementType;
1:eac0369:         tableNumber = targetVTI.getTableNumber();
1:eac0369:         if( statementType == DeferModification.UPDATE_STATEMENT && columnNames != null)
1:eac0369:         {
1:3541af3:             columns.addAll(Arrays.asList(columnNames));
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     public Visitable visit(Visitable node)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         try
1:eac0369:         {
1:eac0369:             if( node instanceof ColumnReference && statementType != DeferModification.INSERT_STATEMENT)
1:eac0369:             {
1:eac0369:                 ColumnReference cr = (ColumnReference) node;
1:eac0369:                 if( cr.getTableNumber() == tableNumber)
1:eac0369:                 {
1:eac0369:                     String columnName = cr.getColumnName();
1:eac0369:                     if( statementType == DeferModification.DELETE_STATEMENT)
1:eac0369:                     {
1:3541af3:                         if (columns.add(columnName))
1:eac0369:                         {
1:eac0369:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
1:eac0369:                                 deferred = true;
1:eac0369:                         }
1:eac0369:                     }
1:eac0369:                     else if( statementType == DeferModification.UPDATE_STATEMENT)
1:eac0369:                     {
1:3541af3:                         if (columns.remove(columnName))
1:eac0369:                         {
1:eac0369:                             // This column is referenced in the where clause and is being updated
1:eac0369:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
1:eac0369:                                 deferred = true;
1:eac0369:                         }
1:eac0369:                     }
1:eac0369:                 }
1:eac0369:             }
1:eac0369:             else if( node instanceof SelectNode)
1:eac0369:             {
1:eac0369:                 SelectNode subSelect = (SelectNode) node;
1:eac0369:                 FromList fromList = subSelect.getFromList();
1:eac0369: 
1:eac0369:                 for( int i = 0; i < fromList.size(); i++)
1:eac0369:                 {
1:eac0369:                     FromTable fromTable = (FromTable) fromList.elementAt(i);
1:eac0369:                     if( fromTable instanceof FromBaseTable)
1:eac0369:                     {
1:eac0369:                         TableDescriptor td = fromTable.getTableDescriptor();
1:eac0369:                         if( deferralControl.subselectRequiresDefer( statementType,
1:eac0369:                                                                     td.getSchemaName(),
1:eac0369:                                                                     td.getName()))
1:eac0369:                             deferred = true;
1:eac0369:                     }
1:eac0369:                     else if( fromTable instanceof FromVTI)
1:eac0369:                     {
1:eac0369:                         FromVTI fromVTI = (FromVTI) fromTable;
1:eac0369:                         if( deferralControl.subselectRequiresDefer( statementType,
1:4aef9b0:                                                                     fromVTI.getMethodCall().getJavaClassName()))
1:eac0369:                             deferred = true;
1:eac0369:                     }
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369:         catch( SQLException sqle)
1:eac0369:         {
1:eac0369:             throw StandardException.unexpectedUserException(sqle);
1:eac0369:         }
1:eac0369:         return node;
1:eac0369:     } // end of visit
1:eac0369:     
1:eac0369:     public boolean stopTraversal()
1:eac0369:     {
1:eac0369:         return deferred;
1:eac0369:     } // end of stopTraversal
1:eac0369:     
1:eac0369:     public boolean skipChildren(Visitable node)
1:eac0369:     {
1:eac0369:         return false;
1:eac0369:     } // end of skipChildren
1:dd2f5a8: 
1:dd2f5a8:     public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8:     {
1:dd2f5a8:         return false;
1:dd2f5a8:     }
1:eac0369: } // end of class VTIDeferModPolicy
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 for (String s : deferralSearch.columns) {
1:                             statementType, s, false)) {
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.vti.DeferModification;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     private final HashSet<String> columns = new HashSet<String>();
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
1:                 String VTIClassName = targetVTI.getMethodCall().getJavaClassName();
/////////////////////////////////////////////////////////////////////////
1:                                                                     fromVTI.getMethodCall().getJavaClassName()))
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3541af3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.HashSet;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:                 Iterator columns = deferralSearch.columns.iterator();
0:                 while (columns.hasNext())
1:                     if (deferralControl.columnRequiresDefer(
0:                             statementType, (String) columns.next(), false)) {
1:                     }
/////////////////////////////////////////////////////////////////////////
0:     private final HashSet columns = new HashSet();
/////////////////////////////////////////////////////////////////////////
1:             columns.addAll(Arrays.asList(columnNames));
/////////////////////////////////////////////////////////////////////////
1:                         if (columns.add(columnName))
1:                         if (columns.remove(columnName))
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean visitChildrenFirst(Visitable node)
1:     {
1:         return false;
1:     }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.VTIDeferModPolicy
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
1: 
0: import org.apache.derby.vti.DeferModification;
1: 
0: import java.util.Enumeration;
0: import java.util.Hashtable;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1:  * This class applies a VTI modification deferral policy to a statement to
1:  * see whether it should be deferred.
1:  */
1: class VTIDeferModPolicy implements Visitor
1: {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1:     /**
1:      * See if a VTI modification statement should be deferred.
1:      *
1:      * @param statementType DeferModification.INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
1:      * @param targetVTI The target VTI
1:      * @param updateColumnNames The list of columns being updated, null if this is not an update statement
1:      * @param source
1:      */
1:     public static boolean deferIt( int statementType,
1:                                    FromVTI targetVTI,
1:                                    String[] updateColumnNames,
1:                                    QueryTreeNode source)
1:         throws StandardException
1:     {
1:         try
1:         {
1:             DeferModification deferralControl;
1:             int resultSetType = targetVTI.getResultSetType( );
1: 
1:             /* Deferred updates and deletes are implemented by scrolling the result set. So, if
1:              * the statement is an update or delete but the result set is not scrollable then do
1:              * not attempt to defer the statement.
1:              */
1:             if( (statementType == DeferModification.UPDATE_STATEMENT ||statementType == DeferModification.DELETE_STATEMENT)
1:                 && resultSetType == ResultSet.TYPE_FORWARD_ONLY)
1:                 return false;
1: 
1:             deferralControl = targetVTI.getDeferralControl();
1:             if( deferralControl == null)
1:             {
0:                 String VTIClassName = targetVTI.getNewInvocation().getJavaClassName();
1:                 deferralControl = new DefaultVTIModDeferPolicy( VTIClassName,
1:                                                                 ResultSet.TYPE_SCROLL_SENSITIVE == resultSetType);
1:             }
1:             if( deferralControl.alwaysDefer( statementType))
1:                 return true;
1: 
1:             if( source == null && statementType != DeferModification.UPDATE_STATEMENT)
1:                 return false;
1: 
1:             VTIDeferModPolicy deferralSearch = new VTIDeferModPolicy( targetVTI,
1:                                                                       updateColumnNames,
1:                                                                       deferralControl,
1:                                                                       statementType);
1: 
1:             if( source != null)
1:                 source.accept( deferralSearch);
1: 
1:             if( statementType == DeferModification.UPDATE_STATEMENT)
1:             {
1:                 // Apply the columnRequiresDefer method to updated columns not in the where clause.
0:                 Enumeration columns = deferralSearch.columns.keys();
0:                 while( columns.hasMoreElements())
1:                 {
0:                     if( deferralControl.columnRequiresDefer( statementType,
0:                                                              (String) columns.nextElement(),
0:                                                              false))
1:                         return true;
1:                 }
1:             }
1:             return deferralSearch.deferred;
1:         }
1:         catch( SQLException sqle)
1:         {
1:             throw StandardException.unexpectedUserException(sqle);
1:         }
1:     } // end of deferIt
1: 
1:     // state needed to search the statement parse tree for nodes that require deferred modification
1:     private boolean deferred = false;
1:     private DeferModification deferralControl;
1:     private int statementType;
1:     private int tableNumber;
0:     private Hashtable columns = new Hashtable();
1: 
1:     private VTIDeferModPolicy( FromVTI targetVTI,
1:                                String[] columnNames,
1:                                DeferModification deferralControl,
1:                                int statementType)
1:     {
1:         this.deferralControl = deferralControl;
1:         this.statementType = statementType;
1:         tableNumber = targetVTI.getTableNumber();
1:         if( statementType == DeferModification.UPDATE_STATEMENT && columnNames != null)
1:         {
0:             for( int i = 0; i < columnNames.length; i++)
0:                 columns.put( columnNames[i], columnNames[i]);
1:         }
1:     }
1: 
1:     public Visitable visit(Visitable node)
1:         throws StandardException
1:     {
1:         try
1:         {
1:             if( node instanceof ColumnReference && statementType != DeferModification.INSERT_STATEMENT)
1:             {
1:                 ColumnReference cr = (ColumnReference) node;
1:                 if( cr.getTableNumber() == tableNumber)
1:                 {
1:                     String columnName = cr.getColumnName();
1:                     if( statementType == DeferModification.DELETE_STATEMENT)
1:                     {
0:                         if( columns.get( columnName) == null)
1:                         {
0:                             columns.put( columnName, columnName);
1:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
1:                                 deferred = true;
1:                         }
1:                     }
1:                     else if( statementType == DeferModification.UPDATE_STATEMENT)
1:                     {
0:                         if( columns.get( columnName) != null)
1:                         {
1:                             // This column is referenced in the where clause and is being updated
1:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
1:                                 deferred = true;
0:                             columns.remove( columnName); // Only test it once.
1:                         }
1:                     }
1:                 }
1:             }
1:             else if( node instanceof SelectNode)
1:             {
1:                 SelectNode subSelect = (SelectNode) node;
1:                 FromList fromList = subSelect.getFromList();
1: 
1:                 for( int i = 0; i < fromList.size(); i++)
1:                 {
1:                     FromTable fromTable = (FromTable) fromList.elementAt(i);
1:                     if( fromTable instanceof FromBaseTable)
1:                     {
1:                         TableDescriptor td = fromTable.getTableDescriptor();
1:                         if( deferralControl.subselectRequiresDefer( statementType,
1:                                                                     td.getSchemaName(),
1:                                                                     td.getName()))
1:                             deferred = true;
1:                     }
1:                     else if( fromTable instanceof FromVTI)
1:                     {
1:                         FromVTI fromVTI = (FromVTI) fromTable;
1:                         if( deferralControl.subselectRequiresDefer( statementType,
0:                                                                     fromVTI.getNewInvocation().getJavaClassName()))
1:                             deferred = true;
1:                     }
1:                 }
1:             }
1:         }
1:         catch( SQLException sqle)
1:         {
1:             throw StandardException.unexpectedUserException(sqle);
1:         }
1:         return node;
1:     } // end of visit
1:     
1:     public boolean stopTraversal()
1:     {
1:         return deferred;
1:     } // end of stopTraversal
1:     
1:     public boolean skipChildren(Visitable node)
1:     {
1:         return false;
1:     } // end of skipChildren
1: } // end of class VTIDeferModPolicy
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: 
0: import org.apache.derby.vti.DeferModification;
0: 
0: import java.util.Enumeration;
0: import java.util.Hashtable;
0: 
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: /**
0:  * This class applies a VTI modification deferral policy to a statement to
0:  * see whether it should be deferred.
0:  */
0: class VTIDeferModPolicy implements Visitor
0: {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0:     /**
0:      * See if a VTI modification statement should be deferred.
0:      *
0:      * @param statementType DeferModification.INSERT_STATEMENT, UPDATE_STATEMENT, or DELETE_STATEMENT
0:      * @param targetVTI The target VTI
0:      * @param updateColumnNames The list of columns being updated, null if this is not an update statement
0:      * @param source
0:      */
0:     public static boolean deferIt( int statementType,
0:                                    FromVTI targetVTI,
0:                                    String[] updateColumnNames,
0:                                    QueryTreeNode source)
0:         throws StandardException
0:     {
0:         try
0:         {
0:             DeferModification deferralControl;
0:             int resultSetType = targetVTI.getResultSetType( );
0: 
0:             /* Deferred updates and deletes are implemented by scrolling the result set. So, if
0:              * the statement is an update or delete but the result set is not scrollable then do
0:              * not attempt to defer the statement.
0:              */
0:             if( (statementType == DeferModification.UPDATE_STATEMENT ||statementType == DeferModification.DELETE_STATEMENT)
0:                 && resultSetType == ResultSet.TYPE_FORWARD_ONLY)
0:                 return false;
0: 
0:             deferralControl = targetVTI.getDeferralControl();
0:             if( deferralControl == null)
0:             {
0:                 String VTIClassName = targetVTI.getNewInvocation().getJavaClassName();
0:                 deferralControl = new DefaultVTIModDeferPolicy( VTIClassName,
0:                                                                 ResultSet.TYPE_SCROLL_SENSITIVE == resultSetType);
0:             }
0:             if( deferralControl.alwaysDefer( statementType))
0:                 return true;
0: 
0:             if( source == null && statementType != DeferModification.UPDATE_STATEMENT)
0:                 return false;
0: 
0:             VTIDeferModPolicy deferralSearch = new VTIDeferModPolicy( targetVTI,
0:                                                                       updateColumnNames,
0:                                                                       deferralControl,
0:                                                                       statementType);
0: 
0:             if( source != null)
0:                 source.accept( deferralSearch);
0: 
0:             if( statementType == DeferModification.UPDATE_STATEMENT)
0:             {
0:                 // Apply the columnRequiresDefer method to updated columns not in the where clause.
0:                 Enumeration columns = deferralSearch.columns.keys();
0:                 while( columns.hasMoreElements())
0:                 {
0:                     if( deferralControl.columnRequiresDefer( statementType,
0:                                                              (String) columns.nextElement(),
0:                                                              false))
0:                         return true;
0:                 }
0:             }
0:             return deferralSearch.deferred;
0:         }
0:         catch( SQLException sqle)
0:         {
0:             throw StandardException.unexpectedUserException(sqle);
0:         }
0:     } // end of deferIt
0: 
0:     // state needed to search the statement parse tree for nodes that require deferred modification
0:     private boolean deferred = false;
0:     private DeferModification deferralControl;
0:     private int statementType;
0:     private int tableNumber;
0:     private Hashtable columns = new Hashtable();
0: 
0:     private VTIDeferModPolicy( FromVTI targetVTI,
0:                                String[] columnNames,
0:                                DeferModification deferralControl,
0:                                int statementType)
0:     {
0:         this.deferralControl = deferralControl;
0:         this.statementType = statementType;
0:         tableNumber = targetVTI.getTableNumber();
0:         if( statementType == DeferModification.UPDATE_STATEMENT && columnNames != null)
0:         {
0:             for( int i = 0; i < columnNames.length; i++)
0:                 columns.put( columnNames[i], columnNames[i]);
0:         }
0:     }
0: 
0:     public Visitable visit(Visitable node)
0:         throws StandardException
0:     {
0:         try
0:         {
0:             if( node instanceof ColumnReference && statementType != DeferModification.INSERT_STATEMENT)
0:             {
0:                 ColumnReference cr = (ColumnReference) node;
0:                 if( cr.getTableNumber() == tableNumber)
0:                 {
0:                     String columnName = cr.getColumnName();
0:                     if( statementType == DeferModification.DELETE_STATEMENT)
0:                     {
0:                         if( columns.get( columnName) == null)
0:                         {
0:                             columns.put( columnName, columnName);
0:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
0:                                 deferred = true;
0:                         }
0:                     }
0:                     else if( statementType == DeferModification.UPDATE_STATEMENT)
0:                     {
0:                         if( columns.get( columnName) != null)
0:                         {
0:                             // This column is referenced in the where clause and is being updated
0:                             if( deferralControl.columnRequiresDefer( statementType, columnName, true))
0:                                 deferred = true;
0:                             columns.remove( columnName); // Only test it once.
0:                         }
0:                     }
0:                 }
0:             }
0:             else if( node instanceof SelectNode)
0:             {
0:                 SelectNode subSelect = (SelectNode) node;
0:                 FromList fromList = subSelect.getFromList();
0: 
0:                 for( int i = 0; i < fromList.size(); i++)
0:                 {
0:                     FromTable fromTable = (FromTable) fromList.elementAt(i);
0:                     if( fromTable instanceof FromBaseTable)
0:                     {
0:                         TableDescriptor td = fromTable.getTableDescriptor();
0:                         if( deferralControl.subselectRequiresDefer( statementType,
0:                                                                     td.getSchemaName(),
0:                                                                     td.getName()))
0:                             deferred = true;
0:                     }
0:                     else if( fromTable instanceof FromVTI)
0:                     {
0:                         FromVTI fromVTI = (FromVTI) fromTable;
0:                         if( deferralControl.subselectRequiresDefer( statementType,
0:                                                                     fromVTI.getNewInvocation().getJavaClassName()))
0:                             deferred = true;
0:                     }
0:                 }
0:             }
0:         }
0:         catch( SQLException sqle)
0:         {
0:             throw StandardException.unexpectedUserException(sqle);
0:         }
0:         return node;
0:     } // end of visit
0:     
0:     public boolean stopTraversal()
0:     {
0:         return deferred;
0:     } // end of stopTraversal
0:     
0:     public boolean skipChildren(Visitable node)
0:     {
0:         return false;
0:     } // end of skipChildren
0: } // end of class VTIDeferModPolicy
============================================================================