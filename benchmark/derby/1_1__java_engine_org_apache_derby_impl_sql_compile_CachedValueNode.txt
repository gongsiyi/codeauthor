1:f2dfe06: /*
1:f2dfe06: 
1:f2dfe06:    Derby - Class org.apache.derby.impl.sql.compile.CachedValueNode
1:f2dfe06: 
1:f2dfe06:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f2dfe06:    contributor license agreements.  See the NOTICE file distributed with
1:f2dfe06:    this work for additional information regarding copyright ownership.
1:f2dfe06:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f2dfe06:    (the "License"); you may not use this file except in compliance with
1:f2dfe06:    the License.  You may obtain a copy of the License at
1:f2dfe06: 
1:f2dfe06:       http://www.apache.org/licenses/LICENSE-2.0
1:f2dfe06: 
1:f2dfe06:    Unless required by applicable law or agreed to in writing, software
1:f2dfe06:    distributed under the License is distributed on an "AS IS" BASIS,
1:f2dfe06:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f2dfe06:    See the License for the specific language governing permissions and
1:f2dfe06:    limitations under the License.
1:f2dfe06: 
1:f2dfe06:  */
1:f2dfe06: 
1:f2dfe06: package org.apache.derby.impl.sql.compile;
1:f2dfe06: 
1:f2dfe06: import java.lang.reflect.Modifier;
1:f2dfe06: import java.util.List;
1:f2dfe06: import org.apache.derby.iapi.error.StandardException;
1:f2dfe06: import org.apache.derby.iapi.reference.ClassName;
1:f2dfe06: import org.apache.derby.iapi.services.compiler.LocalField;
1:f2dfe06: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:f2dfe06: import org.apache.derby.iapi.sql.compile.Visitor;
1:f2dfe06: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:f2dfe06: import org.apache.derby.iapi.util.JBitSet;
1:f2dfe06: 
1:f2dfe06: /**
1:f2dfe06:  * <p>
1:f2dfe06:  * A wrapper class for a {@code ValueNode} that is referenced multiple
1:f2dfe06:  * places in the abstract syntax tree, but should only be evaluated once.
1:f2dfe06:  * This node will cache the return value the first time the expression
1:f2dfe06:  * is evaluated, and simply return the cached value the next time.
1:f2dfe06:  * </p>
1:f2dfe06:  *
1:f2dfe06:  * <p>For example, an expression such as</p>
1:f2dfe06:  *
1:f2dfe06:  * <pre>
1:f2dfe06:  *   CASE expr1
1:f2dfe06:  *     WHEN expr2 THEN expr3
1:f2dfe06:  *     WHEN expr4 THEN expr5
1:f2dfe06:  *   END
1:f2dfe06:  * </pre>
1:f2dfe06:  *
1:f2dfe06:  * <p>is rewritten by the parser to</p>
1:f2dfe06:  *
1:f2dfe06:  * <pre>
1:f2dfe06:  *   CASE
1:f2dfe06:  *     WHEN expr1 = expr2 THEN expr3
1:f2dfe06:  *     WHEN expr1 = expr4 THEN expr5
1:f2dfe06:  *   END
1:f2dfe06:  * </pre>
1:f2dfe06:  *
1:f2dfe06:  * <p>
1:f2dfe06:  * In this case, we want {@code expr1} to be evaluated only once, even
1:f2dfe06:  * though it's referenced twice in the rewritten tree. By wrapping the
1:f2dfe06:  * {@code ValueNode} for {@code expr1} in a {@code CachedValueNode}, we
1:f2dfe06:  * make sure {@code expr1} is only evaluated once, and the second reference
1:f2dfe06:  * to it will use the cached return value from the first evaluation.
1:f2dfe06:  * </p>
1:f2dfe06:  */
1:f2dfe06: class CachedValueNode extends ValueNode {
1:f2dfe06: 
1:f2dfe06:     /** The node representing the expression whose value should be cached. */
1:f2dfe06:     private ValueNode value;
1:f2dfe06: 
1:f2dfe06:     /** The field in the {@code Activation} class where the value is cached. */
1:f2dfe06:     private LocalField field;
1:f2dfe06: 
1:f2dfe06:     /**
1:f2dfe06:      * Wrap the value in a {@code CachedValueNode}.
1:f2dfe06:      * @param value the value to wrap
1:f2dfe06:      */
1:f2dfe06:     CachedValueNode(ValueNode value) {
1:f2dfe06:         super(value.getContextManager());
1:f2dfe06:         this.value = value;
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     /**
1:f2dfe06:      * Generate code that returns the value that this expression evaluates
1:f2dfe06:      * to. For the first occurrence of this node in the abstract syntax
1:f2dfe06:      * tree, this method generates the code needed to evaluate the expression.
1:f2dfe06:      * Additionally, it stores the returned value in a field in the {@code
1:f2dfe06:      * Activation} class. For subsequent occurrences of this node, it will
1:f2dfe06:      * simply generate code that reads the value of that field, so that
1:f2dfe06:      * reevaluation is not performed.
1:f2dfe06:      *
1:f2dfe06:      * @param acb the class builder
1:f2dfe06:      * @param mb  the method builder
1:f2dfe06:      * @throws StandardException if an error occurs
1:f2dfe06:      */
1:f2dfe06:     @Override
1:f2dfe06:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:f2dfe06:             throws StandardException {
1:f2dfe06:         if (field == null) {
1:f2dfe06:             // This is the first occurrence of the node, so we generate
1:f2dfe06:             // code for evaluating the expression and storing the returned
1:f2dfe06:             // value in a field.
1:f2dfe06:             field = acb.newFieldDeclaration(
1:f2dfe06:                     Modifier.PRIVATE, ClassName.DataValueDescriptor);
1:f2dfe06:             value.generateExpression(acb, mb);
1:f2dfe06:             mb.putField(field);
1:f2dfe06:         } else {
1:f2dfe06:             // This is not the first occurrence of the node, so we can
1:f2dfe06:             // simply read the cached value from the field instead of
1:f2dfe06:             // reevaluating the expression.
1:f2dfe06:             mb.getField(field);
1:f2dfe06:         }
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     /**
1:f2dfe06:      * Generate code that clears the field that holds the cached value, so
1:f2dfe06:      * that it can be garbage collected.
1:f2dfe06:      *
1:f2dfe06:      * @param mb the method builder that should have the code
1:f2dfe06:      */
1:f2dfe06:     void generateClearField(MethodBuilder mb) {
1:f2dfe06:         if (field != null) {
1:f2dfe06:             mb.pushNull(ClassName.DataValueDescriptor);
1:f2dfe06:             mb.setField(field);
1:f2dfe06:         }
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     // Overrides for various ValueNode methods. Simply forward the calls
1:f2dfe06:     // to the wrapped ValueNode.
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
1:f2dfe06:                                  List<AggregateNode> aggregates)
1:f2dfe06:             throws StandardException {
1:f2dfe06:         value = value.bindExpression(fromList, subqueryList, aggregates);
1:f2dfe06:         return this;
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     ValueNode preprocess(int numTables,
1:f2dfe06:                          FromList outerFromList,
1:f2dfe06:                          SubqueryList outerSubqueryList,
1:f2dfe06:                          PredicateList outerPredicateList)
1:f2dfe06:             throws StandardException {
1:f2dfe06:         value = value.preprocess(numTables, outerFromList,
1:f2dfe06:                                  outerSubqueryList, outerPredicateList);
1:f2dfe06:         return this;
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     boolean isEquivalent(ValueNode other) throws StandardException {
1:f2dfe06:         if (other instanceof CachedValueNode) {
1:f2dfe06:             CachedValueNode that = (CachedValueNode) other;
1:f2dfe06:             return this.value.isEquivalent(that.value);
1:f2dfe06:         } else {
1:f2dfe06:             return false;
1:f2dfe06:         }
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     void acceptChildren(Visitor v) throws StandardException {
1:f2dfe06:         super.acceptChildren(v);
1:f2dfe06: 
1:f2dfe06:         if (value != null) {
1:f2dfe06:             value = (ValueNode) value.accept(v);
1:f2dfe06:         }
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     DataTypeDescriptor getTypeServices() {
1:f2dfe06:         return value.getTypeServices();
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     void setType(DataTypeDescriptor dtd) throws StandardException {
1:f2dfe06:         value.setType(dtd);
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     boolean requiresTypeFromContext() {
1:f2dfe06:         return value.requiresTypeFromContext();
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     ValueNode remapColumnReferencesToExpressions() throws StandardException {
1:f2dfe06:         value = value.remapColumnReferencesToExpressions();
1:f2dfe06:         return this;
1:f2dfe06:     }
1:f2dfe06: 
1:f2dfe06:     @Override
1:f2dfe06:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:f2dfe06:             throws StandardException {
1:f2dfe06:         return value.categorize(referencedTabs, simplePredsOnly);
1:f2dfe06:     }
1:f2dfe06: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f2dfe06
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.CachedValueNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import java.lang.reflect.Modifier;
1: import java.util.List;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.util.JBitSet;
1: 
1: /**
1:  * <p>
1:  * A wrapper class for a {@code ValueNode} that is referenced multiple
1:  * places in the abstract syntax tree, but should only be evaluated once.
1:  * This node will cache the return value the first time the expression
1:  * is evaluated, and simply return the cached value the next time.
1:  * </p>
1:  *
1:  * <p>For example, an expression such as</p>
1:  *
1:  * <pre>
1:  *   CASE expr1
1:  *     WHEN expr2 THEN expr3
1:  *     WHEN expr4 THEN expr5
1:  *   END
1:  * </pre>
1:  *
1:  * <p>is rewritten by the parser to</p>
1:  *
1:  * <pre>
1:  *   CASE
1:  *     WHEN expr1 = expr2 THEN expr3
1:  *     WHEN expr1 = expr4 THEN expr5
1:  *   END
1:  * </pre>
1:  *
1:  * <p>
1:  * In this case, we want {@code expr1} to be evaluated only once, even
1:  * though it's referenced twice in the rewritten tree. By wrapping the
1:  * {@code ValueNode} for {@code expr1} in a {@code CachedValueNode}, we
1:  * make sure {@code expr1} is only evaluated once, and the second reference
1:  * to it will use the cached return value from the first evaluation.
1:  * </p>
1:  */
1: class CachedValueNode extends ValueNode {
1: 
1:     /** The node representing the expression whose value should be cached. */
1:     private ValueNode value;
1: 
1:     /** The field in the {@code Activation} class where the value is cached. */
1:     private LocalField field;
1: 
1:     /**
1:      * Wrap the value in a {@code CachedValueNode}.
1:      * @param value the value to wrap
1:      */
1:     CachedValueNode(ValueNode value) {
1:         super(value.getContextManager());
1:         this.value = value;
1:     }
1: 
1:     /**
1:      * Generate code that returns the value that this expression evaluates
1:      * to. For the first occurrence of this node in the abstract syntax
1:      * tree, this method generates the code needed to evaluate the expression.
1:      * Additionally, it stores the returned value in a field in the {@code
1:      * Activation} class. For subsequent occurrences of this node, it will
1:      * simply generate code that reads the value of that field, so that
1:      * reevaluation is not performed.
1:      *
1:      * @param acb the class builder
1:      * @param mb  the method builder
1:      * @throws StandardException if an error occurs
1:      */
1:     @Override
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:             throws StandardException {
1:         if (field == null) {
1:             // This is the first occurrence of the node, so we generate
1:             // code for evaluating the expression and storing the returned
1:             // value in a field.
1:             field = acb.newFieldDeclaration(
1:                     Modifier.PRIVATE, ClassName.DataValueDescriptor);
1:             value.generateExpression(acb, mb);
1:             mb.putField(field);
1:         } else {
1:             // This is not the first occurrence of the node, so we can
1:             // simply read the cached value from the field instead of
1:             // reevaluating the expression.
1:             mb.getField(field);
1:         }
1:     }
1: 
1:     /**
1:      * Generate code that clears the field that holds the cached value, so
1:      * that it can be garbage collected.
1:      *
1:      * @param mb the method builder that should have the code
1:      */
1:     void generateClearField(MethodBuilder mb) {
1:         if (field != null) {
1:             mb.pushNull(ClassName.DataValueDescriptor);
1:             mb.setField(field);
1:         }
1:     }
1: 
1:     // Overrides for various ValueNode methods. Simply forward the calls
1:     // to the wrapped ValueNode.
1: 
1:     @Override
1:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
1:                                  List<AggregateNode> aggregates)
1:             throws StandardException {
1:         value = value.bindExpression(fromList, subqueryList, aggregates);
1:         return this;
1:     }
1: 
1:     @Override
1:     ValueNode preprocess(int numTables,
1:                          FromList outerFromList,
1:                          SubqueryList outerSubqueryList,
1:                          PredicateList outerPredicateList)
1:             throws StandardException {
1:         value = value.preprocess(numTables, outerFromList,
1:                                  outerSubqueryList, outerPredicateList);
1:         return this;
1:     }
1: 
1:     @Override
1:     boolean isEquivalent(ValueNode other) throws StandardException {
1:         if (other instanceof CachedValueNode) {
1:             CachedValueNode that = (CachedValueNode) other;
1:             return this.value.isEquivalent(that.value);
1:         } else {
1:             return false;
1:         }
1:     }
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (value != null) {
1:             value = (ValueNode) value.accept(v);
1:         }
1:     }
1: 
1:     @Override
1:     DataTypeDescriptor getTypeServices() {
1:         return value.getTypeServices();
1:     }
1: 
1:     @Override
1:     void setType(DataTypeDescriptor dtd) throws StandardException {
1:         value.setType(dtd);
1:     }
1: 
1:     @Override
1:     boolean requiresTypeFromContext() {
1:         return value.requiresTypeFromContext();
1:     }
1: 
1:     @Override
1:     ValueNode remapColumnReferencesToExpressions() throws StandardException {
1:         value = value.remapColumnReferencesToExpressions();
1:         return this;
1:     }
1: 
1:     @Override
1:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:             throws StandardException {
1:         return value.categorize(referencedTabs, simplePredsOnly);
1:     }
1: }
============================================================================