1:02fcca3: /*
5:02fcca3: 
1:02fcca3:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Test_6496
1:02fcca3: 
1:02fcca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:02fcca3:    contributor license agreements.  See the NOTICE file distributed with
1:02fcca3:    this work for additional information regarding copyright ownership.
1:02fcca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:02fcca3:    (the "License"); you may not use this file except in compliance with
1:02fcca3:    the License.  You may obtain a copy of the License at
1:02fcca3: 
1:02fcca3:      http://www.apache.org/licenses/LICENSE-2.0
1:02fcca3: 
1:02fcca3:    Unless required by applicable law or agreed to in writing, software
1:02fcca3:    distributed under the License is distributed on an "AS IS" BASIS,
1:02fcca3:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:02fcca3:    See the License for the specific language governing permissions and
1:02fcca3:    limitations under the License.
1:02fcca3: 
3:02fcca3:  */
1:02fcca3: 
1:02fcca3: package org.apache.derbyTesting.functionTests.tests.lang;
1:02fcca3: 
1:02fcca3: import java.sql.Connection;
1:02fcca3: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:02fcca3: import org.apache.derbyTesting.junit.TestConfiguration;
1:02fcca3: 
3:02fcca3: /**
3:02fcca3:  * <p>
1:02fcca3:  * Test the loading of optional tools when the CompilerContext is not available
1:02fcca3:  * at execution time. See DERBY-6496.
3:02fcca3:  * </p>
1:02fcca3:  */
1:02fcca3: public class Test_6496 extends GeneratedColumnsHelper
5:02fcca3: {
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // CONSTANTS
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:63ecb28:     private static  final   String      LOAD_METADATA_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', true )";
1:63ecb28:     private static  final   String      UNLOAD_METADATA_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', false )";
1:63ecb28: 
1:63ecb28:     private static  final   String      LOAD_OPTIMIZER_TOOL = "call syscs_util.syscs_register_tool('optimizerTracing', true, 'custom', 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace')";
1:63ecb28:     private static  final   String      UNLOAD_OPTIMIZER_TOOL = "call syscs_util.syscs_register_tool('optimizerTracing', false)";
1:02fcca3: 
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // STATE
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // CONSTRUCTOR
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:02fcca3:     /**
1:02fcca3:      * Create a new instance.
1:02fcca3:      */
1:02fcca3: 
1:02fcca3:     public Test_6496(String name)
1:63ecb28:     {
1:02fcca3:         super(name);
1:63ecb28:     }
1:02fcca3: 
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // JUnit BEHAVIOR
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:02fcca3: 
1:63ecb28:     /**
1:02fcca3:      * Construct top level suite in this JUnit test
1:02fcca3:      */
1:02fcca3:     public static Test suite()
1:63ecb28:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             Test_6496.class);
1:02fcca3: 
1:02fcca3:         return suite;
1:63ecb28:     }
1:02fcca3: 
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // TESTS
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:02fcca3:     /**
1:63ecb28:      * <p>
2:63ecb28:      * Test that we can load the metadata tool twice without popping an NPE.
1:63ecb28:      * </p>
1:63ecb28:      */
1:63ecb28:     public  void    test_001_metadata()
1:63ecb28:         throws Exception
1:63ecb28:     {
1:63ecb28:         toolTester( LOAD_METADATA_TOOL, UNLOAD_METADATA_TOOL );
1:63ecb28:     }
1:63ecb28: 
1:63ecb28:     /**
1:63ecb28:      * <p>
2:63ecb28:      * Test that we can load the optimizer tool twice without popping an NPE.
1:63ecb28:      * </p>
1:63ecb28:      */
1:4e7a614:     public  void    test_002_optimizer()
1:63ecb28:         throws Exception
1:63ecb28:     {
1:63ecb28:         toolTester( LOAD_OPTIMIZER_TOOL, UNLOAD_OPTIMIZER_TOOL );
1:63ecb28:     }
1:02fcca3: 
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3:     //
1:02fcca3:     // MINIONS
1:02fcca3:     //
1:02fcca3:     ///////////////////////////////////////////////////////////////////////////////////
1:02fcca3: 
1:63ecb28:     private void    toolTester( String loadTool, String unloadTool ) throws Exception
1:63ecb28:     {
1:4e7a614:         Connection c1 = openDefaultConnection();
1:4e7a614:         goodStatement( c1, loadTool );
1:4e7a614:         goodStatement( c1, unloadTool );
1:63ecb28: 
1:4e7a614:         // Loading the tool a second time in a fresh connection, with the
1:4e7a614:         // exact same statement text so that the compiled statement is found
1:4e7a614:         // in the statement cache, used to result in a NullPointerException
1:4e7a614:         // because there was no CompilerContext on the stack.
1:4e7a614:         Connection c2 = openDefaultConnection();
1:4e7a614:         goodStatement( c2, loadTool );
1:4e7a614:         goodStatement( c2, unloadTool );
1:63ecb28:     }
5:02fcca3: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             Test_6496.class);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4e7a614
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_002_optimizer()
/////////////////////////////////////////////////////////////////////////
1:         Connection c1 = openDefaultConnection();
1:         goodStatement( c1, loadTool );
1:         goodStatement( c1, unloadTool );
1:         // Loading the tool a second time in a fresh connection, with the
1:         // exact same statement text so that the compiled statement is found
1:         // in the statement cache, used to result in a NullPointerException
1:         // because there was no CompilerContext on the stack.
1:         Connection c2 = openDefaultConnection();
1:         goodStatement( c2, loadTool );
1:         goodStatement( c2, unloadTool );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:63ecb28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      LOAD_METADATA_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', true )";
1:     private static  final   String      UNLOAD_METADATA_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', false )";
1: 
1:     private static  final   String      LOAD_OPTIMIZER_TOOL = "call syscs_util.syscs_register_tool('optimizerTracing', true, 'custom', 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace')";
1:     private static  final   String      UNLOAD_OPTIMIZER_TOOL = "call syscs_util.syscs_register_tool('optimizerTracing', false)";
/////////////////////////////////////////////////////////////////////////
1:      * Test that we can load the metadata tool twice without popping an NPE.
1:     public  void    test_001_metadata()
0:         metadataTester();
1:      * Test that we can load the metadata tool twice without popping an NPE.
0:     public  void    test_002_metadata()
0:         metadataTester();
1:     }
0:     private void    metadataTester() throws Exception
1:     {
1:         toolTester( LOAD_METADATA_TOOL, UNLOAD_METADATA_TOOL );
1:     }
1:     /**
1:      * <p>
1:      * Test that we can load the optimizer tool twice without popping an NPE.
1:      * </p>
1:      */
0:     public  void    test_003_optimizer()
1:         throws Exception
1:     {
0:         optimizerTester();
1:     }
1: 
1:     /**
1:      * <p>
1:      * Test that we can load the optimizer tool twice without popping an NPE.
1:      * </p>
1:      */
0:     public  void    test_004_optimizer()
1:         throws Exception
1:     {
0:         optimizerTester();
1:     }
0:     private void    optimizerTester() throws Exception
1:     {
1:         toolTester( LOAD_OPTIMIZER_TOOL, UNLOAD_OPTIMIZER_TOOL );
/////////////////////////////////////////////////////////////////////////
1:     private void    toolTester( String loadTool, String unloadTool ) throws Exception
1:     {
0:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
0:         goodStatement( dboConnection, loadTool );
0:         goodStatement( dboConnection, unloadTool );
1:     }
commit:02fcca3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Test_6496
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.DriverManager;
0: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Test the loading of optional tools when the CompilerContext is not available
1:  * at execution time. See DERBY-6496.
1:  * </p>
1:  */
1: public class Test_6496 extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private static  final   String      TEST_DBO = "TEST_DBO";
1: 
0:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', true )";
0:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'databaseMetaData', false )";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public Test_6496(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(Test_6496.class);
1: 
1:         return suite;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
0:      * Test baseline permissions where no grants are made.
1:      * </p>
1:      */
0:     public  void    test_001()
0:         throws Exception
1:     {
0:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
0:         goodStatement( dboConnection, LOAD_TOOL );
0:         goodStatement( dboConnection, UNLOAD_TOOL );
1:     }
1: 
1:     /**
1:      * <p>
0:      * Test that a user can grant access to her indexes.
1:      * </p>
1:      */
0:     public  void    test_002()
0:         throws Exception
1:     {
0:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
0:         goodStatement( dboConnection, LOAD_TOOL );
0:         goodStatement( dboConnection, UNLOAD_TOOL );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: }
============================================================================