1:5c759ff: /*
1:5c759ff: 
1:5c759ff:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptDatabaseTest
1:5c759ff: 
1:5c759ff:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5c759ff:    contributor license agreements.  See the NOTICE file distributed with
1:5c759ff:    this work for additional information regarding copyright ownership.
1:5c759ff:    The ASF licenses this file to you under the Apache License, Version 2.0
1:5c759ff:    (the "License"); you may not use this file except in compliance with
1:5c759ff:    the License.  You may obtain a copy of the License at
1:5c759ff: 
1:5c759ff:      http://www.apache.org/licenses/LICENSE-2.0
1:5c759ff: 
1:5c759ff:    Unless required by applicable law or agreed to in writing, software
1:5c759ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:5c759ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c759ff:    See the License for the specific language governing permissions and
1:5c759ff:    limitations under the License.
1:5c759ff: 
1:5c759ff:  */
1:5c759ff: 
1:5c759ff: package org.apache.derbyTesting.functionTests.tests.store;
1:5c759ff: 
1:5c759ff: import java.sql.SQLException;
1:5c759ff: import java.sql.Statement;
1:5c759ff: import java.util.Arrays;
1:5c759ff: import javax.sql.DataSource;
1:5c759ff: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.Decorator;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBCDataSource;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:5c759ff: 
1:5c759ff: 
1:5c759ff: /**
1:5c759ff:  * Database encryption testing, mainly that handling of bootPassword works ok
1:5c759ff:  * across encryption algorithms. Converted from {@code encryptDatabase.sql} in
1:5c759ff:  * old harness, which was used in suites for the different algoritms,
1:5c759ff:  * e.g. {@code encryptionECB}.  DERBY-2687.
1:5c759ff:  */
1:5c759ff: 
1:5c759ff: public class EncryptDatabaseTest  extends BaseJDBCTestCase
1:5c759ff: {
1:5c759ff:     // SQL states 
1:5c759ff:     private static final String ENCRYPTION_NOCHANGE_ALGORITHM = "XBCXD";
1:5c759ff:     private static final String ENCRYPTION_NOCHANGE_PROVIDER = "XBCXE";
1:5c759ff:     private static final String ILLEGAL_BP_LENGTH = "XBCX2";
1:5c759ff:     private static final String NULL_BOOT_PASSWORD = "XBCX5";
1:5c759ff:     private static final String WRONG_BOOT_PASSWORD = "XBCXA";
1:5c759ff:     private static final String WRONG_PASSWORD_CHANGE_FORMAT = "XBCX7";
1:5c759ff: 
1:5c759ff:     
1:5c759ff:     public EncryptDatabaseTest(String name) {
1:5c759ff:         super(name);
1:5c759ff:     }
1:5c759ff: 
1:5c759ff:     
1:5c759ff:     /**
1:5c759ff:      * Construct top level suite in this JUnit test
1:5c759ff:      *
1:5c759ff:      * @return A suite containing embedded suites
1:5c759ff:      */
1:5c759ff:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("EncryptDatabase");
1:5c759ff:         suite.addTest(wrapTest());
1:5c759ff:         suite.addTest(wrapTest("DESede/CBC/NoPadding")); // from encryption
1:5c759ff:         suite.addTest(wrapTest("DESede/CFB/NoPadding")); // from encryptionCFB
1:5c759ff:         suite.addTest(wrapTest("DES/OFB/NoPadding"));    // from encryptionOFB
1:5c759ff:         suite.addTest(wrapTest("DES/ECB/NoPadding"));    // from encryptionECB
1:5c759ff:         suite.addTest(wrapTest("DES/CBC/NoPadding"));    // from encryptionDES
1:5c759ff:         suite.addTest(wrapTest("Blowfish/CBC/NoPadding")); // from e..Blowfish
1:5c759ff:         suite.addTest(wrapTest("AES/CBC/NoPadding"));    // from encryptionAES
1:5c759ff:         suite.addTest(wrapTest("AES/OFB/NoPadding"));
1:5c759ff:         return suite;
1:5c759ff:     }
1:5c759ff: 
1:5c759ff:     
1:5c759ff:     private static Test wrapTest() {
1:5c759ff:         return Decorator.encryptedDatabaseBpw(
1:5c759ff:                           TestConfiguration.embeddedSuite(
1:5c759ff:                               EncryptDatabaseTest.class),
1:5c759ff:                           "Thursday"); // only initial bootPassword, though..
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     private static Test wrapTest(String encryptionMethod) {
1:5c759ff:         return Decorator.encryptedDatabaseBpw(
1:5c759ff:                           TestConfiguration.embeddedSuite(
1:5c759ff:                               EncryptDatabaseTest.class),
1:5c759ff:                           encryptionMethod,
1:5c759ff:                           "Thursday"); // only initial bootPassword, though..
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     public void testEncryption() throws SQLException {
1:5c759ff: 
1:5c759ff:         // for bug 3668 - you couldn't change the password without exiting
1:5c759ff:         // out of db create session
1:5c759ff: 
1:5c759ff:         Statement s = createStatement();
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', 'Thursday, Wednesday')");
1:5c759ff: 
1:5c759ff:         TestConfiguration.getCurrent().shutdownEngine();
1:5c759ff: 
1:5c759ff:         // -- test for bug 3668
1:5c759ff:         // -- try the old password, should fail
1:5c759ff:         assertFailedBoot("Thursday");
1:5c759ff: 
1:5c759ff:         assertSuccessfulBoot("Wednesday");
1:5c759ff:         s = createStatement();
1:5c759ff: 
1:5c759ff:         // -- switch back to old password
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', 'Wednesday, Thursday')");
1:5c759ff: 
1:5c759ff:         // create table t1 ( a char(20));
1:5c759ff:         s.executeUpdate("create table t1 ( a char(20))");
1:5c759ff: 
1:5c759ff:         // -- make sure we cannot access the secret key
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'bootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'encryptedBootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         s.executeUpdate("insert into t1 values ('hello world')");
1:5c759ff: 
1:5c759ff:         // -- change the secret key
1:5c759ff: 
1:5c759ff:         // -- these should fail
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', null)",
1:5c759ff:             NULL_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'wrongkey, ')",
1:5c759ff:             ILLEGAL_BP_LENGTH);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursday')",
1:5c759ff:             WRONG_PASSWORD_CHANGE_FORMAT);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursday , ')",
1:5c759ff:             ILLEGAL_BP_LENGTH);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursday , short')",
1:5c759ff:             ILLEGAL_BP_LENGTH);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursdya , derbypwd')",
1:5c759ff:             WRONG_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursdayx , derbypwd')",
1:5c759ff:             WRONG_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'xThursday , derbypwd')",
1:5c759ff:             WRONG_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'thursday , derbypwd')",
1:5c759ff:             WRONG_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', ' Thursday , Saturday')");
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'bootPassword', 'Thursday , derbypwd')",
1:5c759ff:             WRONG_BOOT_PASSWORD);
1:5c759ff: 
1:5c759ff: 
1:5c759ff:         // -- change it again
1:5c759ff: 
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', 'Saturday,derbypwd')");
1:5c759ff: 
1:5c759ff:         // -- make sure we cannot access the secret key
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'bootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'encryptedBootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff: 
1:5c759ff:         TestConfiguration.getCurrent().shutdownEngine();
1:5c759ff: 
1:5c759ff:         assertFailedBoot(null);
1:5c759ff:         assertFailedBoot("Thursday");
1:5c759ff:         assertFailedBoot("Saturday");
1:5c759ff:         assertSuccessfulBoot("derbypwd");
1:5c759ff: 
1:5c759ff:         s = createStatement();
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'bootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'encryptedBootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         // -- change it again, make sure it trims white spaces
1:5c759ff: 
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', '   derbypwd   ,  bbderbypwdx  ')");
1:5c759ff:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:                         "'bootPassword', 'bbderbypwdx, derbypwdxx ')");
1:5c759ff: 
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'bootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:5c759ff:                            "'encryptedBootPassword')"),
1:5c759ff:             null);
1:5c759ff: 
1:5c759ff:         TestConfiguration.getCurrent().shutdownEngine();
1:5c759ff: 
1:5c759ff:         assertFailedBoot("derbypwd");
1:5c759ff:         assertSuccessfulBoot("derbypwdxx");
1:5c759ff: 
1:5c759ff:         s = createStatement();
1:5c759ff: 
1:5c759ff:         JDBC.assertSingleValueResultSet(
1:5c759ff:             s.executeQuery("select * from t1"),
1:5c759ff:             "hello world");
1:5c759ff: 
1:5c759ff:         // test that you cannot change the encryption provider or algorithm
1:5c759ff:         // after database creation
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'encryptionAlgorithm', 'DES/blabla/NoPadding')",
1:5c759ff:             ENCRYPTION_NOCHANGE_ALGORITHM);
1:5c759ff: 
1:5c759ff:         assertFailedStatement(
1:5c759ff:             s,
1:5c759ff:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:5c759ff:             "'encryptionProvider', 'com.pom.aplomb')",
1:5c759ff:             ENCRYPTION_NOCHANGE_PROVIDER);
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     private void assertFailedBoot(String bootPassword) throws SQLException {
1:5c759ff:         DataSource ds = JDBCDataSource.getDataSource();
1:5c759ff: 
1:5c759ff:         JDBCDataSource.setBeanProperty(
1:5c759ff:                 ds, "connectionAttributes",
1:5c759ff:                 (bootPassword != null ? "bootPassword=" + bootPassword
1:5c759ff:                  : "")); // "": lest we inherit bootPassword from current config
1:5c759ff: 
1:5c759ff: 
1:5c759ff:         try {
1:5c759ff:             ds.getConnection();
1:5c759ff:             fail("boot worked: unexpected");
1:5c759ff:         } catch (SQLException e) {
1:5c759ff: 
1:5c759ff:             String [] accepted = new String[]{
1:5c759ff:                 "XBM06",  // normal: wrong bootpassword
1:5c759ff:                 "XJ040"}; // Java error during boot: DERBY-2687
1:5c759ff:                           // Remove when DERBY-5622 is fixed.
1:5c759ff:             boolean found = Arrays.asList(accepted).contains(e.getSQLState()); 
1:5c759ff: 
1:5c759ff:             if (!found) {
1:5c759ff:                 throw e;
1:5c759ff:             }
1:5c759ff:         }
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     private static void assertSuccessfulBoot(String bootPassword)
1:5c759ff:             throws SQLException {
1:5c759ff: 
1:5c759ff:         DataSource ds = JDBCDataSource.getDataSource();
1:5c759ff:         JDBCDataSource.setBeanProperty(
1:5c759ff:             ds, "connectionAttributes", "bootPassword=" + bootPassword);
1:5c759ff:         ds.getConnection().close();
1:5c759ff:     }
1:5c759ff: 
1:5c759ff: 
1:5c759ff:     private static void assertFailedStatement(Statement s,
1:5c759ff:                                               String sql,
1:5c759ff:                                               String state) {
1:5c759ff:         assertStatementError(state, s, sql);
1:5c759ff:     }
1:5c759ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("EncryptDatabase");
commit:5c759ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptDatabaseTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Arrays;
0: import java.util.List;
1: import javax.sql.DataSource;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.*;
1: 
1: 
1: /**
1:  * Database encryption testing, mainly that handling of bootPassword works ok
1:  * across encryption algorithms. Converted from {@code encryptDatabase.sql} in
1:  * old harness, which was used in suites for the different algoritms,
1:  * e.g. {@code encryptionECB}.  DERBY-2687.
1:  */
1: 
1: public class EncryptDatabaseTest  extends BaseJDBCTestCase
1: {
1:     // SQL states 
1:     private static final String ENCRYPTION_NOCHANGE_ALGORITHM = "XBCXD";
1:     private static final String ENCRYPTION_NOCHANGE_PROVIDER = "XBCXE";
1:     private static final String ILLEGAL_BP_LENGTH = "XBCX2";
1:     private static final String NULL_BOOT_PASSWORD = "XBCX5";
1:     private static final String WRONG_BOOT_PASSWORD = "XBCXA";
1:     private static final String WRONG_PASSWORD_CHANGE_FORMAT = "XBCX7";
1: 
1:     
1:     public EncryptDatabaseTest(String name) {
1:         super(name);
1:     }
1: 
1:     
1:     /**
1:      * Construct top level suite in this JUnit test
1:      *
1:      * @return A suite containing embedded suites
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("EncryptDatabase");
1:         suite.addTest(wrapTest());
1:         suite.addTest(wrapTest("DESede/CBC/NoPadding")); // from encryption
1:         suite.addTest(wrapTest("DESede/CFB/NoPadding")); // from encryptionCFB
1:         suite.addTest(wrapTest("DES/OFB/NoPadding"));    // from encryptionOFB
1:         suite.addTest(wrapTest("DES/ECB/NoPadding"));    // from encryptionECB
1:         suite.addTest(wrapTest("DES/CBC/NoPadding"));    // from encryptionDES
1:         suite.addTest(wrapTest("Blowfish/CBC/NoPadding")); // from e..Blowfish
1:         suite.addTest(wrapTest("AES/CBC/NoPadding"));    // from encryptionAES
1:         suite.addTest(wrapTest("AES/OFB/NoPadding"));
1:         return suite;
1:     }
1: 
1:     
1:     private static Test wrapTest() {
1:         return Decorator.encryptedDatabaseBpw(
1:                           TestConfiguration.embeddedSuite(
1:                               EncryptDatabaseTest.class),
1:                           "Thursday"); // only initial bootPassword, though..
1:     }
1: 
1: 
1:     private static Test wrapTest(String encryptionMethod) {
1:         return Decorator.encryptedDatabaseBpw(
1:                           TestConfiguration.embeddedSuite(
1:                               EncryptDatabaseTest.class),
1:                           encryptionMethod,
1:                           "Thursday"); // only initial bootPassword, though..
1:     }
1: 
1: 
1:     public void testEncryption() throws SQLException {
1: 
1:         // for bug 3668 - you couldn't change the password without exiting
1:         // out of db create session
1: 
1:         Statement s = createStatement();
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', 'Thursday, Wednesday')");
1: 
1:         TestConfiguration.getCurrent().shutdownEngine();
1: 
1:         // -- test for bug 3668
1:         // -- try the old password, should fail
1:         assertFailedBoot("Thursday");
1: 
1:         assertSuccessfulBoot("Wednesday");
1:         s = createStatement();
1: 
1:         // -- switch back to old password
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', 'Wednesday, Thursday')");
1: 
1:         // create table t1 ( a char(20));
1:         s.executeUpdate("create table t1 ( a char(20))");
1: 
1:         // -- make sure we cannot access the secret key
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'bootPassword')"),
1:             null);
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'encryptedBootPassword')"),
1:             null);
1: 
1:         s.executeUpdate("insert into t1 values ('hello world')");
1: 
1:         // -- change the secret key
1: 
1:         // -- these should fail
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', null)",
1:             NULL_BOOT_PASSWORD);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'wrongkey, ')",
1:             ILLEGAL_BP_LENGTH);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursday')",
1:             WRONG_PASSWORD_CHANGE_FORMAT);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursday , ')",
1:             ILLEGAL_BP_LENGTH);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursday , short')",
1:             ILLEGAL_BP_LENGTH);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursdya , derbypwd')",
1:             WRONG_BOOT_PASSWORD);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursdayx , derbypwd')",
1:             WRONG_BOOT_PASSWORD);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'xThursday , derbypwd')",
1:             WRONG_BOOT_PASSWORD);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'thursday , derbypwd')",
1:             WRONG_BOOT_PASSWORD);
1: 
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', ' Thursday , Saturday')");
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'bootPassword', 'Thursday , derbypwd')",
1:             WRONG_BOOT_PASSWORD);
1: 
1: 
1:         // -- change it again
1: 
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', 'Saturday,derbypwd')");
1: 
1:         // -- make sure we cannot access the secret key
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'bootPassword')"),
1:             null);
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'encryptedBootPassword')"),
1:             null);
1: 
1: 
1:         TestConfiguration.getCurrent().shutdownEngine();
1: 
1:         assertFailedBoot(null);
1:         assertFailedBoot("Thursday");
1:         assertFailedBoot("Saturday");
1:         assertSuccessfulBoot("derbypwd");
1: 
1:         s = createStatement();
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'bootPassword')"),
1:             null);
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'encryptedBootPassword')"),
1:             null);
1: 
1:         // -- change it again, make sure it trims white spaces
1: 
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', '   derbypwd   ,  bbderbypwdx  ')");
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'bootPassword', 'bbderbypwdx, derbypwdxx ')");
1: 
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'bootPassword')"),
1:             null);
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
1:                            "'encryptedBootPassword')"),
1:             null);
1: 
1:         TestConfiguration.getCurrent().shutdownEngine();
1: 
1:         assertFailedBoot("derbypwd");
1:         assertSuccessfulBoot("derbypwdxx");
1: 
1:         s = createStatement();
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("select * from t1"),
1:             "hello world");
1: 
1:         // test that you cannot change the encryption provider or algorithm
1:         // after database creation
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'encryptionAlgorithm', 'DES/blabla/NoPadding')",
1:             ENCRYPTION_NOCHANGE_ALGORITHM);
1: 
1:         assertFailedStatement(
1:             s,
1:             "call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:             "'encryptionProvider', 'com.pom.aplomb')",
1:             ENCRYPTION_NOCHANGE_PROVIDER);
1:     }
1: 
1: 
1:     private void assertFailedBoot(String bootPassword) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource();
1: 
1:         JDBCDataSource.setBeanProperty(
1:                 ds, "connectionAttributes",
1:                 (bootPassword != null ? "bootPassword=" + bootPassword
1:                  : "")); // "": lest we inherit bootPassword from current config
1: 
1: 
1:         try {
1:             ds.getConnection();
1:             fail("boot worked: unexpected");
1:         } catch (SQLException e) {
1: 
1:             String [] accepted = new String[]{
1:                 "XBM06",  // normal: wrong bootpassword
1:                 "XJ040"}; // Java error during boot: DERBY-2687
1:                           // Remove when DERBY-5622 is fixed.
1:             boolean found = Arrays.asList(accepted).contains(e.getSQLState()); 
1: 
1:             if (!found) {
1:                 throw e;
1:             }
1:         }
1:     }
1: 
1: 
1:     private static void assertSuccessfulBoot(String bootPassword)
1:             throws SQLException {
1: 
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(
1:             ds, "connectionAttributes", "bootPassword=" + bootPassword);
1:         ds.getConnection().close();
1:     }
1: 
1: 
1:     private static void assertFailedStatement(Statement s,
1:                                               String sql,
1:                                               String state) {
1:         assertStatementError(state, s, sql);
1:     }
1: }
============================================================================