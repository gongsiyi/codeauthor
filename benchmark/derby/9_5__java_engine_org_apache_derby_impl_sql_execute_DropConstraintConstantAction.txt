2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropConstraintConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
5:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	drop constraint at Execution time.
1:eac0369:  *
1:eac0369:  *	@version 0.1
1:eac0369:  */
1:eac0369: 
1:e87a9fd: public class DropConstraintConstantAction extends ConstraintConstantAction
8:eac0369: {
1:eac0369: 
1:eac0369: 	private boolean cascade;		// default false
1:eac0369: 	private String constraintSchemaName;
1:eac0369:     private int verifyType;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make one of these puppies.
1:eac0369: 	 *
1:eac0369: 	 *  @param constraintName	Constraint name.
1:eac0369: 	 *  @param constraintSchemaName		the schema that constraint lives in.
1:eac0369: 	 *  @param tableName		Table name.
1:eac0369: 	 *	@param tableId			UUID of table.
1:eac0369: 	 *  @param tableSchemaName				the schema that table lives in.
1:eac0369: 	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
1:eac0369: 	 *  @param behavior			the drop behavior (e.g. StatementType.DROP_CASCADE)
1:eac0369: 	 */
1:eac0369: 	DropConstraintConstantAction(
1:eac0369: 		               String				constraintName,
1:eac0369: 					   String				constraintSchemaName,
1:eac0369: 		               String				tableName,
1:eac0369: 					   UUID					tableId,
1:eac0369: 					   String				tableSchemaName,
1:eac0369: 					   IndexConstantAction indexAction,
1:eac0369: 					   int					behavior,
1:eac0369:                        int                  verifyType)
1:eac0369: 	{
1:eac0369: 		super(constraintName, DataDictionary.DROP_CONSTRAINT, tableName, 
1:eac0369: 			  tableId, tableSchemaName, indexAction);
1:eac0369: 
1:eac0369: 		cascade = (behavior == StatementType.DROP_CASCADE);
1:eac0369: 		this.constraintSchemaName = constraintSchemaName;
1:eac0369:         this.verifyType = verifyType;
8:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		if (constraintName == null)
1:eac0369: 			return "DROP PRIMARY KEY";
1:eac0369: 
1:eac0369: 		String ss = constraintSchemaName == null ? schemaName : constraintSchemaName;
1:eac0369: 		return "DROP CONSTRAINT " + ss + "." + constraintName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP CONSTRAINT.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
2:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor		conDesc = null;
1:eac0369: 		TableDescriptor				td;
1:eac0369: 		UUID							indexId = null;
1:eac0369: 		String						indexUUIDString;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DependencyManager dm = dd.getDependencyManager();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		td = dd.getTableDescriptor(tableId);
1:eac0369: 
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Table gets locked in AlterTableConstantAction */
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the schema descriptor is null, then
1:eac0369: 		** we must have just read ourselves in.  
1:eac0369: 		** So we will get the corresponding schema
1:eac0369: 		** descriptor from the data dictionary.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		SchemaDescriptor tdSd = td.getSchemaDescriptor();
1:eac0369: 		SchemaDescriptor constraintSd = 
1:eac0369: 			constraintSchemaName == null ? tdSd : dd.getSchemaDescriptor(constraintSchemaName, tc, true);
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* Get the constraint descriptor for the index, along
1:eac0369: 		 * with an exclusive row lock on the row in sys.sysconstraints
1:eac0369: 		 * in order to ensure that no one else compiles against the
1:eac0369: 		 * index.
1:eac0369: 		 */
1:eac0369: 		if (constraintName == null)  // this means "alter table drop primary key"
1:eac0369: 			conDesc = dd.getConstraintDescriptors(td).getPrimaryKey();
1:eac0369: 		else
1:eac0369: 			conDesc = dd.getConstraintDescriptorByName(td, constraintSd, constraintName, true);
1:eac0369: 
1:eac0369: 		// Error if constraint doesn't exist
1:eac0369: 		if (conDesc == null)
1:eac0369: 		{
1:eac0369: 			String errorName = constraintName == null ? "PRIMARY KEY" :
1:eac0369: 								(constraintSd.getSchemaName() + "."+ constraintName);
1:eac0369: 
1:09bee7d:             throw StandardException.newException(SQLState.LANG_DROP_OR_ALTER_NON_EXISTING_CONSTRAINT,
1:eac0369: 						errorName,
1:eac0369: 						td.getQualifiedName());
1:eac0369: 		}
1:eac0369:         switch( verifyType)
1:eac0369:         {
1:eac0369:         case DataDictionary.UNIQUE_CONSTRAINT:
1:eac0369:             if( conDesc.getConstraintType() != verifyType)
1:eac0369:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:eac0369:                                                      constraintName, "UNIQUE");
2:eac0369:             break;
1:eac0369: 
1:eac0369:         case DataDictionary.CHECK_CONSTRAINT:
1:eac0369:             if( conDesc.getConstraintType() != verifyType)
1:eac0369:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:eac0369:                                                      constraintName, "CHECK");
1:eac0369:             break;
1:eac0369: 
1:eac0369:         case DataDictionary.FOREIGNKEY_CONSTRAINT:
1:eac0369:             if( conDesc.getConstraintType() != verifyType)
1:eac0369:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:eac0369:                                                      constraintName, "FOREIGN KEY");
1:eac0369:             break;
1:eac0369:         }
1:eac0369: 
1:eac0369: 		boolean cascadeOnRefKey = (cascade && 
1:eac0369: 						conDesc instanceof ReferencedKeyConstraintDescriptor);
1:eac0369: 		if (!cascadeOnRefKey)
1:eac0369: 		{
1:eac0369: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we had a primary/unique key and it is drop cascade,	
1:eac0369: 		** drop all the referencing keys now.  We MUST do this AFTER
1:eac0369: 		** dropping the referenced key because otherwise we would
1:eac0369: 		** be repeatedly changing the reference count of the referenced
1:eac0369: 		** key and generating unnecessary I/O.
1:eac0369: 		*/
1:c437565: 		dropConstraint(conDesc, activation, lcc, !cascadeOnRefKey);
1:eac0369: 
1:eac0369: 		if (cascadeOnRefKey) 
1:eac0369: 		{
1:eac0369: 			ForeignKeyConstraintDescriptor fkcd;
1:eac0369: 			ReferencedKeyConstraintDescriptor cd;
1:eac0369: 			ConstraintDescriptorList cdl;
1:eac0369: 
1:eac0369: 			cd = (ReferencedKeyConstraintDescriptor)conDesc;
1:eac0369: 			cdl = cd.getForeignKeyConstraints(ReferencedKeyConstraintDescriptor.ALL);
1:eac0369: 			int cdlSize = cdl.size();
1:eac0369: 
1:eac0369: 			for(int index = 0; index < cdlSize; index++)
1:eac0369: 			{
1:eac0369: 				fkcd = (ForeignKeyConstraintDescriptor) cdl.elementAt(index);
1:eac0369: 				dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
1:c437565: 				dropConstraint(fkcd, activation, lcc, true);
1:eac0369: 			}
1:eac0369: 	
1:eac0369: 			/*
1:eac0369: 			** We told dropConstraintAndIndex not to
1:eac0369: 			** remove our dependencies, so send an invalidate,
1:eac0369: 			** and drop the dependencies.
1:eac0369: 			*/
1:eac0369: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
1:e87a9fd: 			dm.clearDependencies(lcc, conDesc);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:             throw StandardException.newException(SQLState.LANG_DROP_OR_ALTER_NON_EXISTING_CONSTRAINT,
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Army
-------------------------------------------------------------------------------
commit:c437565
/////////////////////////////////////////////////////////////////////////
1: 		dropConstraint(conDesc, activation, lcc, !cascadeOnRefKey);
/////////////////////////////////////////////////////////////////////////
1: 				dropConstraint(fkcd, activation, lcc, true);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:997ee7f
/////////////////////////////////////////////////////////////////////////
0:         conDesc.drop(lcc, !cascadeOnRefKey);
/////////////////////////////////////////////////////////////////////////
0: 				fkcd.drop(lcc, true);
/////////////////////////////////////////////////////////////////////////
commit:e87a9fd
/////////////////////////////////////////////////////////////////////////
1: public class DropConstraintConstantAction extends ConstraintConstantAction
/////////////////////////////////////////////////////////////////////////
0: 		dropConstraintAndIndex(dm, td, dd, conDesc, tc, lcc, !cascadeOnRefKey);
/////////////////////////////////////////////////////////////////////////
0: 								tc, lcc, true);
/////////////////////////////////////////////////////////////////////////
0: 	public static void dropConstraintAndIndex(DependencyManager	dm,
0: 								LanguageConnectionContext lcc,
/////////////////////////////////////////////////////////////////////////
1: 			dm.clearDependencies(lcc, conDesc);
/////////////////////////////////////////////////////////////////////////
0: 													conglomDescs[i], td, 
0: 													lcc);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropConstraintConstantAction
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.StatementType;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: import org.apache.derby.iapi.types.DataValueFactory;
1: 
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	drop constraint at Execution time.
1:  *
1:  *	@version 0.1
0:  *	@author Jerry Brenner
1:  */
1: 
0: class DropConstraintConstantAction extends ConstraintConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private boolean cascade;		// default false
1: 	private String constraintSchemaName;
1:     private int verifyType;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 *	Make one of these puppies.
1: 	 *
1: 	 *  @param constraintName	Constraint name.
1: 	 *  @param constraintSchemaName		the schema that constraint lives in.
1: 	 *  @param tableName		Table name.
1: 	 *	@param tableId			UUID of table.
1: 	 *  @param tableSchemaName				the schema that table lives in.
1: 	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
1: 	 *  @param behavior			the drop behavior (e.g. StatementType.DROP_CASCADE)
1: 	 */
1: 	DropConstraintConstantAction(
1: 		               String				constraintName,
1: 					   String				constraintSchemaName,
1: 		               String				tableName,
1: 					   UUID					tableId,
1: 					   String				tableSchemaName,
1: 					   IndexConstantAction indexAction,
1: 					   int					behavior,
1:                        int                  verifyType)
1: 	{
1: 		super(constraintName, DataDictionary.DROP_CONSTRAINT, tableName, 
1: 			  tableId, tableSchemaName, indexAction);
1: 
1: 		cascade = (behavior == StatementType.DROP_CASCADE);
1: 		this.constraintSchemaName = constraintSchemaName;
1:         this.verifyType = verifyType;
1: 	}
1: 
1: 	// OBJECT METHODS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		if (constraintName == null)
1: 			return "DROP PRIMARY KEY";
1: 
1: 		String ss = constraintSchemaName == null ? schemaName : constraintSchemaName;
1: 		return "DROP CONSTRAINT " + ss + "." + constraintName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP CONSTRAINT.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		ConstraintDescriptor		conDesc = null;
1: 		TableDescriptor				td;
1: 		UUID							indexId = null;
1: 		String						indexUUIDString;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		td = dd.getTableDescriptor(tableId);
1: 
1: 		if (td == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1: 		}
1: 
1: 		/* Table gets locked in AlterTableConstantAction */
1: 
1: 		/*
1: 		** If the schema descriptor is null, then
1: 		** we must have just read ourselves in.  
1: 		** So we will get the corresponding schema
1: 		** descriptor from the data dictionary.
1: 		*/
1: 
1: 		SchemaDescriptor tdSd = td.getSchemaDescriptor();
1: 		SchemaDescriptor constraintSd = 
1: 			constraintSchemaName == null ? tdSd : dd.getSchemaDescriptor(constraintSchemaName, tc, true);
1: 
1: 
1: 		/* Get the constraint descriptor for the index, along
1: 		 * with an exclusive row lock on the row in sys.sysconstraints
1: 		 * in order to ensure that no one else compiles against the
1: 		 * index.
1: 		 */
1: 		if (constraintName == null)  // this means "alter table drop primary key"
1: 			conDesc = dd.getConstraintDescriptors(td).getPrimaryKey();
1: 		else
1: 			conDesc = dd.getConstraintDescriptorByName(td, constraintSd, constraintName, true);
1: 
1: 		// Error if constraint doesn't exist
1: 		if (conDesc == null)
1: 		{
1: 			String errorName = constraintName == null ? "PRIMARY KEY" :
1: 								(constraintSd.getSchemaName() + "."+ constraintName);
1: 
0: 			throw StandardException.newException(SQLState.LANG_DROP_NON_EXISTENT_CONSTRAINT, 
1: 						errorName,
1: 						td.getQualifiedName());
1: 		}
1:         switch( verifyType)
1:         {
1:         case DataDictionary.UNIQUE_CONSTRAINT:
1:             if( conDesc.getConstraintType() != verifyType)
1:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:                                                      constraintName, "UNIQUE");
1:             break;
1: 
1:         case DataDictionary.CHECK_CONSTRAINT:
1:             if( conDesc.getConstraintType() != verifyType)
1:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:                                                      constraintName, "CHECK");
1:             break;
1: 
1:         case DataDictionary.FOREIGNKEY_CONSTRAINT:
1:             if( conDesc.getConstraintType() != verifyType)
1:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
1:                                                      constraintName, "FOREIGN KEY");
1:             break;
1:         }
1: 
1: 		boolean cascadeOnRefKey = (cascade && 
1: 						conDesc instanceof ReferencedKeyConstraintDescriptor);
1: 		if (!cascadeOnRefKey)
1: 		{
1: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
1: 		}
1: 
1: 		/*
1: 		** If we had a primary/unique key and it is drop cascade,	
1: 		** drop all the referencing keys now.  We MUST do this AFTER
1: 		** dropping the referenced key because otherwise we would
1: 		** be repeatedly changing the reference count of the referenced
1: 		** key and generating unnecessary I/O.
1: 		*/
0: 		dropConstraintAndIndex(dm, td, dd, conDesc, tc, activation, !cascadeOnRefKey);
1: 
1: 		if (cascadeOnRefKey) 
1: 		{
1: 			ForeignKeyConstraintDescriptor fkcd;
1: 			ReferencedKeyConstraintDescriptor cd;
1: 			ConstraintDescriptorList cdl;
1: 
1: 			cd = (ReferencedKeyConstraintDescriptor)conDesc;
1: 			cdl = cd.getForeignKeyConstraints(ReferencedKeyConstraintDescriptor.ALL);
1: 			int cdlSize = cdl.size();
1: 
1: 			for(int index = 0; index < cdlSize; index++)
1: 			{
1: 				fkcd = (ForeignKeyConstraintDescriptor) cdl.elementAt(index);
1: 				dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 				dropConstraintAndIndex(dm, fkcd.getTableDescriptor(), dd, fkcd,
0: 								tc, activation, true);
1: 			}
1: 	
1: 			/*
1: 			** We told dropConstraintAndIndex not to
1: 			** remove our dependencies, so send an invalidate,
1: 			** and drop the dependencies.
1: 			*/
1: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
0: 			dm.clearDependencies(lcc, conDesc);
1: 		}
1: 	}
1: 
1: 	/*
0: 	 * Drop the constraint.  Clears dependencies, drops 
0: 	 * the backing index and removes the constraint
0: 	 * from the list on the table descriptor.  Does NOT
0: 	 * do an dm.invalidateFor()
1: 	 */
0: 	protected static void dropConstraintAndIndex(DependencyManager	dm,
0: 								TableDescriptor 		td,
0: 								DataDictionary 			dd,
0: 								ConstraintDescriptor 	conDesc,
0: 								TransactionController 	tc,
0: 								Activation				activation,
0: 								boolean					clearDependencies)
1: 		throws StandardException
1: 	{
0: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(tc != null, "tc is null");
0: 			SanityManager.ASSERT(td != null, "td is null");
1: 		}
1: 
0: 		if (clearDependencies)
1: 		{
0: 			dm.clearDependencies(activation.getLanguageConnectionContext(), conDesc);
1: 		}
1: 
0: 		/* Drop the constraint.
0: 		 * NOTE: This must occur before dropping any backing index, since
0: 		 * a user is not allowed to drop a backing index without dropping
0: 		 * the constraint.
1: 		 */
0: 		dd.dropConstraintDescriptor(td, conDesc, tc);
1: 
0: 		/* Drop the index, if there's one for this constraint.
0: 		 * NOTE: There will always be an indexAction. We don't
0: 		 * force the constraint to exist at bind time, so we always
0: 		 * generate one.
1: 		 */
0: 		if (conDesc.hasBackingIndex())
1: 		{
0: 			ConglomerateDescriptor[] conglomDescs;
1: 
0: 			// it may have duplicates, and we drop a backing index
0: 			// Bug 4307
0: 			// We need to get the conglomerate descriptors from the 
0: 			// dd in case we dropped other constraints in a cascade operation. 
0: 			conglomDescs = dd.getConglomerateDescriptors(
0: 							conDesc.getConglomerateId());
1: 
0: 			if (conglomDescs.length != 0)
1: 			{
0: 				for (int i = 0; i < conglomDescs.length; i++)
1: 				{
0: 					if (conglomDescs[i].isConstraint())
1: 					{
0: 						DropIndexConstantAction.dropIndex(dm, dd, tc,
0: 													conglomDescs[i], td, activation);
1: 						break;
1: 					}
1: 				}
1: 			}
1: 		}
1: 
0: 		td.removeConstraintDescriptor(conDesc);
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	drop constraint at Execution time.
0:  *
0:  *	@version 0.1
0:  *	@author Jerry Brenner
0:  */
0: 
0: class DropConstraintConstantAction extends ConstraintConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private boolean cascade;		// default false
0: 	private String constraintSchemaName;
0:     private int verifyType;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *	Make one of these puppies.
0: 	 *
0: 	 *  @param constraintName	Constraint name.
0: 	 *  @param constraintSchemaName		the schema that constraint lives in.
0: 	 *  @param tableName		Table name.
0: 	 *	@param tableId			UUID of table.
0: 	 *  @param tableSchemaName				the schema that table lives in.
0: 	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
0: 	 *  @param behavior			the drop behavior (e.g. StatementType.DROP_CASCADE)
0: 	 */
0: 	DropConstraintConstantAction(
0: 		               String				constraintName,
0: 					   String				constraintSchemaName,
0: 		               String				tableName,
0: 					   UUID					tableId,
0: 					   String				tableSchemaName,
0: 					   IndexConstantAction indexAction,
0: 					   int					behavior,
0:                        int                  verifyType)
0: 	{
0: 		super(constraintName, DataDictionary.DROP_CONSTRAINT, tableName, 
0: 			  tableId, tableSchemaName, indexAction);
0: 
0: 		cascade = (behavior == StatementType.DROP_CASCADE);
0: 		this.constraintSchemaName = constraintSchemaName;
0:         this.verifyType = verifyType;
0: 	}
0: 
0: 	// OBJECT METHODS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		if (constraintName == null)
0: 			return "DROP PRIMARY KEY";
0: 
0: 		String ss = constraintSchemaName == null ? schemaName : constraintSchemaName;
0: 		return "DROP CONSTRAINT " + ss + "." + constraintName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP CONSTRAINT.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		ConstraintDescriptor		conDesc = null;
0: 		TableDescriptor				td;
0: 		UUID							indexId = null;
0: 		String						indexUUIDString;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		td = dd.getTableDescriptor(tableId);
0: 
0: 		if (td == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
0: 		}
0: 
0: 		/* Table gets locked in AlterTableConstantAction */
0: 
0: 		/*
0: 		** If the schema descriptor is null, then
0: 		** we must have just read ourselves in.  
0: 		** So we will get the corresponding schema
0: 		** descriptor from the data dictionary.
0: 		*/
0: 
0: 		SchemaDescriptor tdSd = td.getSchemaDescriptor();
0: 		SchemaDescriptor constraintSd = 
0: 			constraintSchemaName == null ? tdSd : dd.getSchemaDescriptor(constraintSchemaName, tc, true);
0: 
0: 
0: 		/* Get the constraint descriptor for the index, along
0: 		 * with an exclusive row lock on the row in sys.sysconstraints
0: 		 * in order to ensure that no one else compiles against the
0: 		 * index.
0: 		 */
0: 		if (constraintName == null)  // this means "alter table drop primary key"
0: 			conDesc = dd.getConstraintDescriptors(td).getPrimaryKey();
0: 		else
0: 			conDesc = dd.getConstraintDescriptorByName(td, constraintSd, constraintName, true);
0: 
0: 		// Error if constraint doesn't exist
0: 		if (conDesc == null)
0: 		{
0: 			String errorName = constraintName == null ? "PRIMARY KEY" :
0: 								(constraintSd.getSchemaName() + "."+ constraintName);
0: 
0: 			throw StandardException.newException(SQLState.LANG_DROP_NON_EXISTENT_CONSTRAINT, 
0: 						errorName,
0: 						td.getQualifiedName());
0: 		}
0:         switch( verifyType)
0:         {
0:         case DataDictionary.UNIQUE_CONSTRAINT:
0:             if( conDesc.getConstraintType() != verifyType)
0:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
0:                                                      constraintName, "UNIQUE");
0:             break;
0: 
0:         case DataDictionary.CHECK_CONSTRAINT:
0:             if( conDesc.getConstraintType() != verifyType)
0:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
0:                                                      constraintName, "CHECK");
0:             break;
0: 
0:         case DataDictionary.FOREIGNKEY_CONSTRAINT:
0:             if( conDesc.getConstraintType() != verifyType)
0:                 throw StandardException.newException(SQLState.LANG_DROP_CONSTRAINT_TYPE,
0:                                                      constraintName, "FOREIGN KEY");
0:             break;
0:         }
0: 
0: 		boolean cascadeOnRefKey = (cascade && 
0: 						conDesc instanceof ReferencedKeyConstraintDescriptor);
0: 		if (!cascadeOnRefKey)
0: 		{
0: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
0: 		}
0: 
0: 		/*
0: 		** If we had a primary/unique key and it is drop cascade,	
0: 		** drop all the referencing keys now.  We MUST do this AFTER
0: 		** dropping the referenced key because otherwise we would
0: 		** be repeatedly changing the reference count of the referenced
0: 		** key and generating unnecessary I/O.
0: 		*/
0: 		dropConstraintAndIndex(dm, td, dd, conDesc, tc, activation, !cascadeOnRefKey);
0: 
0: 		if (cascadeOnRefKey) 
0: 		{
0: 			ForeignKeyConstraintDescriptor fkcd;
0: 			ReferencedKeyConstraintDescriptor cd;
0: 			ConstraintDescriptorList cdl;
0: 
0: 			cd = (ReferencedKeyConstraintDescriptor)conDesc;
0: 			cdl = cd.getForeignKeyConstraints(ReferencedKeyConstraintDescriptor.ALL);
0: 			int cdlSize = cdl.size();
0: 
0: 			for(int index = 0; index < cdlSize; index++)
0: 			{
0: 				fkcd = (ForeignKeyConstraintDescriptor) cdl.elementAt(index);
0: 				dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 				dropConstraintAndIndex(dm, fkcd.getTableDescriptor(), dd, fkcd,
0: 								tc, activation, true);
0: 			}
0: 	
0: 			/*
0: 			** We told dropConstraintAndIndex not to
0: 			** remove our dependencies, so send an invalidate,
0: 			** and drop the dependencies.
0: 			*/
0: 			dm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);
0: 			dm.clearDependencies(lcc, conDesc);
0: 		}
0: 	}
0: 
0: 	/*
0: 	 * Drop the constraint.  Clears dependencies, drops 
0: 	 * the backing index and removes the constraint
0: 	 * from the list on the table descriptor.  Does NOT
0: 	 * do an dm.invalidateFor()
0: 	 */
0: 	protected static void dropConstraintAndIndex(DependencyManager	dm,
0: 								TableDescriptor 		td,
0: 								DataDictionary 			dd,
0: 								ConstraintDescriptor 	conDesc,
0: 								TransactionController 	tc,
0: 								Activation				activation,
0: 								boolean					clearDependencies)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(tc != null, "tc is null");
0: 			SanityManager.ASSERT(td != null, "td is null");
0: 		}
0: 
0: 		if (clearDependencies)
0: 		{
0: 			dm.clearDependencies(activation.getLanguageConnectionContext(), conDesc);
0: 		}
0: 
0: 		/* Drop the constraint.
0: 		 * NOTE: This must occur before dropping any backing index, since
0: 		 * a user is not allowed to drop a backing index without dropping
0: 		 * the constraint.
0: 		 */
0: 		dd.dropConstraintDescriptor(td, conDesc, tc);
0: 
0: 		/* Drop the index, if there's one for this constraint.
0: 		 * NOTE: There will always be an indexAction. We don't
0: 		 * force the constraint to exist at bind time, so we always
0: 		 * generate one.
0: 		 */
0: 		if (conDesc.hasBackingIndex())
0: 		{
0: 			ConglomerateDescriptor[] conglomDescs;
0: 
0: 			// it may have duplicates, and we drop a backing index
0: 			// Bug 4307
0: 			// We need to get the conglomerate descriptors from the 
0: 			// dd in case we dropped other constraints in a cascade operation. 
0: 			conglomDescs = dd.getConglomerateDescriptors(
0: 							conDesc.getConglomerateId());
0: 
0: 			if (conglomDescs.length != 0)
0: 			{
0: 				for (int i = 0; i < conglomDescs.length; i++)
0: 				{
0: 					if (conglomDescs[i].isConstraint())
0: 					{
0: 						DropIndexConstantAction.dropIndex(dm, dd, tc,
0: 													conglomDescs[i], td, activation);
0: 						break;
0: 					}
0: 				}
0: 			}
0: 		}
0: 
0: 		td.removeConstraintDescriptor(conDesc);
0: 	}
0: }
============================================================================