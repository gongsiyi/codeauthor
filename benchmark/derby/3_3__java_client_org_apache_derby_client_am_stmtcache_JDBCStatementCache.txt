1:78944d5: /*
1:2e54aa6: 
1:78944d5:    Derby - Class org.apache.derby.client.am.stmtcache.JDBCStatementCache
1:2e54aa6: 
1:78944d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:78944d5:    contributor license agreements.  See the NOTICE file distributed with
1:78944d5:    this work for additional information regarding copyright ownership.
1:78944d5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:78944d5:    (the "License"); you may not use this file except in compliance with
1:78944d5:    the License.  You may obtain a copy of the License at
1:2e54aa6: 
1:78944d5:       http://www.apache.org/licenses/LICENSE-2.0
1:2e54aa6: 
1:78944d5:    Unless required by applicable law or agreed to in writing, software
1:78944d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:78944d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78944d5:    See the License for the specific language governing permissions and
1:78944d5:    limitations under the License.
1:2e54aa6: 
1:78944d5:  */
6:78944d5: 
1:78944d5: package org.apache.derby.client.am.stmtcache;
1:78944d5: 
1:69e3d06: import java.sql.PreparedStatement;
1:78944d5: import java.sql.SQLException;
1:78944d5: import java.util.LinkedHashMap;
1:78944d5: import java.util.Map;
1:78944d5: import org.apache.derby.shared.common.sanity.SanityManager;
1:78944d5: 
1:78944d5: /**
1:78944d5:  * A cache for JDBC statement objects.
1:78944d5:  * <p>
1:78944d5:  * The entries in the cache contains objects implementing the
1:78944d5:  * <code>java.sql.PreparedStatement</code> interface, and they are inserted with
1:78944d5:  * a key object implementing the interface <code>StatementKey</code>. The cached
1:78944d5:  * objects can be either <code>java.sql.PreparedStatement</code> or
1:78944d5:  * <code>java.sql.CallableStatement</code>. These two should be separated by
1:78944d5:  * using different types of keys.
1:78944d5:  * <p>
1:78944d5:  * The cache only contains free statement objects, and on a successful request
1:78944d5:  * for a cached statement the statement is removed from the cache. The cache is
1:78944d5:  * not intended to hold duplicate statements. The physical prepared statement
1:78944d5:  * should be (re-)inserted into the cache when <code>close</code> is called on
1:78944d5:  * the logical prepared statement using it.
1:78944d5:  * <p>
1:78944d5:  * There is a maximum number of cached statements associated with the cache.
1:78944d5:  * If this number is exceeded, the oldest entry will be thrown out. One can
1:78944d5:  * always throw out an entry, because the fact that it is in the cache means it
1:78944d5:  * is free and not in use.
1:78944d5:  */
1:78944d5: //@ThreadSafe
1:78944d5: public final class JDBCStatementCache {
1:78944d5: 
1:78944d5:     /** Structure holding the cached prepared statement objects. */
1:78944d5:     //@GuardedBy("this");
1:b13b17c:     private final
1:69e3d06:         LinkedHashMap<StatementKey, PreparedStatement> statements;
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Creates a new, empty JDBC statement cache.
1:2e54aa6:      *
1:78944d5:      * @param maxSize maximum number of statements in the cache
1:2e54aa6:      *
1:78944d5:      * @throws IllegalArgumentException if <code>maxSize</code> is less than one
1:78944d5:      */
1:78944d5:     public JDBCStatementCache(int maxSize) {
1:78944d5:         if (maxSize < 1) {
1:78944d5:             throw new IllegalArgumentException("maxSize must be positive: " +
1:78944d5:                     maxSize);
1:78944d5:         }
1:78944d5:         this.statements = new BoundedLinkedHashMap(maxSize);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Retrieves a cached prepared statement if one exists.
1:2e54aa6:      *
1:78944d5:      * @param statementKey key for the prepared statement to look up
1:78944d5:      * @return A cached statement if one exists, <code>null</code> otherwise.
1:78944d5:      */
1:69e3d06:     public synchronized PreparedStatement getCached(
1:b13b17c:             StatementKey statementKey) {
1:78944d5:         if (SanityManager.DEBUG) {
1:78944d5:             // Getting a null here indicates a programming error, but does not
1:78944d5:             // cause Derby to fail.
1:78944d5:             SanityManager.ASSERT(statementKey != null,
1:78944d5:                                  "statementKey is not supposed to be null");
1:78944d5:         }
1:4772c7e:         return statements.remove(statementKey);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Cache the prepared statement if it does not already exist.
1:2e54aa6:      *
1:78944d5:      * @param statementKey key to insert prepared statement with
1:78944d5:      * @param ps prepared statement to cache
1:78944d5:      * @return <code>true</code> if added to the cache, <code>false</code> if
1:78944d5:      *      not.
1:78944d5:      */
1:78944d5:     public synchronized boolean cacheStatement(
1:78944d5:                                         StatementKey statementKey,
1:69e3d06:                                         PreparedStatement ps) {
1:78944d5:         if (SanityManager.DEBUG) {
1:78944d5:             SanityManager.ASSERT(statementKey != null,
1:78944d5:                                  "statementKey is not supposed to be null");
1:78944d5:             SanityManager.ASSERT(ps != null,
1:78944d5:                                  "ps is not supposed to be null");
1:78944d5:         }
1:78944d5:         final boolean alreadyCached = this.statements.containsKey(statementKey);
1:78944d5:         if (!alreadyCached) {
1:78944d5:             statements.put(statementKey, ps);
1:78944d5:         }
1:78944d5:         return !alreadyCached;
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * A {@link LinkedHashMap} with an upper bound on the number of entries.
1:78944d5:      * <p>
1:78944d5:      * If the maximum size is exceeded, the oldest entry is automatically
1:78944d5:      * removed after the new entry has been inserted.
1:78944d5:      */
1:78944d5:     //@NotThreadSafe
1:4772c7e:     private static class BoundedLinkedHashMap
1:69e3d06:             extends LinkedHashMap<StatementKey, PreparedStatement> {
1:78944d5: 
1:78944d5:         /** Maximum number of entries. */
1:78944d5:         private final int maxSize;
1:78944d5: 
1:78944d5:         /**
1:78944d5:          * Creates a bounded {@link LinkedHashMap} with the specified maximum
1:78944d5:          * size.
1:78944d5:          * <p>
1:78944d5:          * Iteration is by insertion-order.
1:2e54aa6:          *
1:78944d5:          * @param maxCapacity maximum size of the map
1:78944d5:          */
1:78944d5:         public BoundedLinkedHashMap(int maxCapacity) {
1:78944d5:             super();
1:78944d5:             this.maxSize = maxCapacity;
1:78944d5:         }
1:78944d5: 
1:78944d5:         /**
1:78944d5:          * Tells if an entry should be removed from the map.
1:78944d5:          * <p>
1:78944d5:          * If the cache has exceeded its maximum size, the oldest element will
1:78944d5:          * be marked for removal. The oldest element will be removed after the
1:78944d5:          * new element has been inserted.
1:2e54aa6:          *
1:78944d5:          * @param eldest the element picked out for removal
1:78944d5:          * @return <code>true</code> if the element is to be removed,
1:78944d5:          *      <code>false</code> if not.
1:78944d5:          */
1:4772c7e:         protected boolean removeEldestEntry(
1:69e3d06:                 Map.Entry<StatementKey, PreparedStatement> eldest) {
1:78944d5:             final boolean remove = size() > maxSize;
1:ea799de:             if (remove && eldest != null) {
1:78944d5:                 try {
1:4772c7e:                     eldest.getValue().close();
1:78944d5:                 } catch (SQLException ex) {
1:78944d5:                     // Ignore this exception in insane mode, throw an assertion
1:78944d5:                     // error if a sane build is run.
1:78944d5:                     if (SanityManager.DEBUG) {
1:78944d5:                         SanityManager.THROWASSERT("Failed to close prepared " +
1:78944d5:                                 "statement marked for cache removal", ex);
1:78944d5:                     }
1:78944d5:                 }
1:78944d5:             }
1:78944d5:             return remove;
1:78944d5:         }
1:78944d5:     } // End inner class BoundedLinkedHashMap
1:78944d5: } // End JDBCStatementCache
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:         LinkedHashMap<StatementKey, PreparedStatement> statements;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PreparedStatement getCached(
/////////////////////////////////////////////////////////////////////////
1:                                         PreparedStatement ps) {
/////////////////////////////////////////////////////////////////////////
1:             extends LinkedHashMap<StatementKey, PreparedStatement> {
/////////////////////////////////////////////////////////////////////////
1:                 Map.Entry<StatementKey, PreparedStatement> eldest) {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final
0:         LinkedHashMap<StatementKey, java.sql.PreparedStatement> statements;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement getCached(
1:             StatementKey statementKey) {
/////////////////////////////////////////////////////////////////////////
0:                                         java.sql.PreparedStatement ps) {
/////////////////////////////////////////////////////////////////////////
0:             extends LinkedHashMap<StatementKey, java.sql.PreparedStatement> {
/////////////////////////////////////////////////////////////////////////
0:                 Map.Entry<StatementKey, java.sql.PreparedStatement> eldest) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
0:     private final LinkedHashMap<StatementKey, PreparedStatement> statements;
/////////////////////////////////////////////////////////////////////////
1:         return statements.remove(statementKey);
/////////////////////////////////////////////////////////////////////////
1:     private static class BoundedLinkedHashMap
0:             extends LinkedHashMap<StatementKey, PreparedStatement> {
/////////////////////////////////////////////////////////////////////////
1:         protected boolean removeEldestEntry(
0:                 Map.Entry<StatementKey, PreparedStatement> eldest) {
1:                     eldest.getValue().close();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:ea799de
/////////////////////////////////////////////////////////////////////////
1:             if (remove && eldest != null) {
commit:2e54aa6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:          *
/////////////////////////////////////////////////////////////////////////
1:          *
commit:78944d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.stmtcache.JDBCStatementCache
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am.stmtcache;
1: 
0: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * A cache for JDBC statement objects.
1:  * <p>
1:  * The entries in the cache contains objects implementing the
1:  * <code>java.sql.PreparedStatement</code> interface, and they are inserted with
1:  * a key object implementing the interface <code>StatementKey</code>. The cached
1:  * objects can be either <code>java.sql.PreparedStatement</code> or
1:  * <code>java.sql.CallableStatement</code>. These two should be separated by
1:  * using different types of keys.
1:  * <p>
1:  * The cache only contains free statement objects, and on a successful request
1:  * for a cached statement the statement is removed from the cache. The cache is
1:  * not intended to hold duplicate statements. The physical prepared statement
1:  * should be (re-)inserted into the cache when <code>close</code> is called on
1:  * the logical prepared statement using it.
1:  * <p>
1:  * There is a maximum number of cached statements associated with the cache.
1:  * If this number is exceeded, the oldest entry will be thrown out. One can
1:  * always throw out an entry, because the fact that it is in the cache means it
1:  * is free and not in use.
1:  */
1: //@ThreadSafe
1: public final class JDBCStatementCache {
1: 
1:     /** Structure holding the cached prepared statement objects. */
1:     //@GuardedBy("this");
0:     private final LinkedHashMap statements;
1: 
1:     /**
1:      * Creates a new, empty JDBC statement cache.
0:      * 
1:      * @param maxSize maximum number of statements in the cache
0:      * 
1:      * @throws IllegalArgumentException if <code>maxSize</code> is less than one
1:      */
1:     public JDBCStatementCache(int maxSize) {
1:         if (maxSize < 1) {
1:             throw new IllegalArgumentException("maxSize must be positive: " +
1:                     maxSize);
1:         }
1:         this.statements = new BoundedLinkedHashMap(maxSize);
1:     }
1: 
1:     /**
1:      * Retrieves a cached prepared statement if one exists.
0:      * 
1:      * @param statementKey key for the prepared statement to look up
1:      * @return A cached statement if one exists, <code>null</code> otherwise.
1:      */
0:     public synchronized PreparedStatement getCached(StatementKey statementKey) {
1:         if (SanityManager.DEBUG) {
1:             // Getting a null here indicates a programming error, but does not
1:             // cause Derby to fail.
1:             SanityManager.ASSERT(statementKey != null,
1:                                  "statementKey is not supposed to be null");
1:         }
0:         return (PreparedStatement)this.statements.remove(statementKey);
1:     }
1: 
1:     /**
1:      * Cache the prepared statement if it does not already exist.
0:      * 
1:      * @param statementKey key to insert prepared statement with
1:      * @param ps prepared statement to cache
1:      * @return <code>true</code> if added to the cache, <code>false</code> if
1:      *      not.
1:      */
1:     public synchronized boolean cacheStatement(
1:                                         StatementKey statementKey,
0:                                         PreparedStatement ps) {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(statementKey != null,
1:                                  "statementKey is not supposed to be null");
1:             SanityManager.ASSERT(ps != null,
1:                                  "ps is not supposed to be null");
1:         }
1:         final boolean alreadyCached = this.statements.containsKey(statementKey);
1:         if (!alreadyCached) {
1:             statements.put(statementKey, ps);
1:         }
1:         return !alreadyCached;
1:     }
1: 
1:     /**
1:      * A {@link LinkedHashMap} with an upper bound on the number of entries.
1:      * <p>
1:      * If the maximum size is exceeded, the oldest entry is automatically
1:      * removed after the new entry has been inserted.
1:      */
1:     //@NotThreadSafe
0:     private static class BoundedLinkedHashMap extends LinkedHashMap {
1: 
1:         /** Maximum number of entries. */
1:         private final int maxSize;
1: 
1:         /**
1:          * Creates a bounded {@link LinkedHashMap} with the specified maximum
1:          * size.
1:          * <p>
1:          * Iteration is by insertion-order.
0:          * 
1:          * @param maxCapacity maximum size of the map
1:          */
1:         public BoundedLinkedHashMap(int maxCapacity) {
1:             super();
1:             this.maxSize = maxCapacity;
1:         }
1: 
1:         /**
1:          * Tells if an entry should be removed from the map.
1:          * <p>
1:          * If the cache has exceeded its maximum size, the oldest element will
1:          * be marked for removal. The oldest element will be removed after the
1:          * new element has been inserted.
0:          * 
1:          * @param eldest the element picked out for removal
1:          * @return <code>true</code> if the element is to be removed,
1:          *      <code>false</code> if not.
1:          */
0:         protected boolean removeEldestEntry(Map.Entry eldest) {
1:             final boolean remove = size() > maxSize;
0:             if (remove) {
1:                 try {
0:                     ((PreparedStatement)eldest.getValue()).close();
1:                 } catch (SQLException ex) {
1:                     // Ignore this exception in insane mode, throw an assertion
1:                     // error if a sane build is run.
1:                     if (SanityManager.DEBUG) {
1:                         SanityManager.THROWASSERT("Failed to close prepared " +
1:                                 "statement marked for cache removal", ex);
1:                     }
1:                 }
1:             }
1:             return remove;
1:         }
1:     } // End inner class BoundedLinkedHashMap
1: } // End JDBCStatementCache
============================================================================