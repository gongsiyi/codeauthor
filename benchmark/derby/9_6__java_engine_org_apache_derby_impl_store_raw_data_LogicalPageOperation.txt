1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.LogicalPageOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.LogicalUndoable;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An abstract class that is used for logical log operation.  A logical log
1:eac0369: 	operation is one where the undo of the operation may be applied to a
1:eac0369: 	different page than the original operation.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	no format id, an abstract class.
1:787ceb4: 	@derby.purpose	provide methods for logical undo
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PageBasicOperation	the super class
1:eac0369: 		recordId(CompressedInt)	the recordId this operation affects
1:eac0369: 		undo(LogicalUndo)		the piece of code that can figure out which page 
1:eac0369: 								the row has moved into
1:eac0369: 		OptionalData	none
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: 
1:eac0369: */
1:3546404: abstract class LogicalPageOperation
1:eac0369:     extends PageBasicOperation implements LogicalUndoable
1:eac0369: {
1:eac0369: 
1:eac0369: 	protected LogicalUndo undo; // Callback to access for logical undo.
1:eac0369: 								// If non-null, then logical undo is necessary
1:eac0369: 								// for this operation.  If null, then the
1:eac0369: 								// operation really only needs physical undo
1:eac0369: 
1:eac0369: 	protected int			recordId;	// record id - this is what the
1:eac0369: 										// recordId is during the doMe time, it
1:eac0369: 										// may have been changed now since the
1:eac0369: 										// record may move to another page.
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public LogicalPageOperation() { super(); }
1:eac0369: 
1:3546404:     LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 		this.undo = undo;
1:eac0369: 		this.recordId = recordId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		CompressedNumber.writeInt(out, recordId);
1:eac0369: 		out.writeObject(undo);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		recordId = CompressedNumber.readInt(in);
1:eac0369: 		undo = (LogicalUndo)in.readObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undoable method
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 		Generate a Compensation (PageUndoOperation) that will rollback the
1:eac0369: 		changes of this page operation. If this Page operation cannot or need not
1:eac0369: 		be rolled back (redo only), overwrite this function to return null.
1:eac0369: 
1:eac0369: 		@see LogicalUndo
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 		@exception IOException Method may read from ObjectInput
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 		// if logical undo is not necessary, use normal physical undo 
1:eac0369: 		if (undo == null)
1:eac0369: 		{
1:eac0369: 			BasePage undoPage = findpage(xact);
1:eac0369: 
1:eac0369: 			// Needs to pre-dirty this page so that if a checkpoint is taken
1:eac0369: 			// any time after the CLR is sent to the log stream, it will wait
1:eac0369: 			// for the actual undo to happen on the page.  We need this to
1:eac0369: 			// preserve the integrity of the redoLWM.
1:eac0369: 			undoPage.preDirty();
1:eac0369: 
1:eac0369: 			return new LogicalUndoOperation(undoPage, recordId, this);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				// Sanity check to make sure logical undo is not called inside
1:eac0369: 				// internal transaction
1:eac0369: 				RawTransaction rtran = (RawTransaction)xact;
1:eac0369: 				rtran.checkLogicalOperationOk();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			BasePage logicalUndoPage = findLogicalPage(xact, undo, in);
1:eac0369: 
1:eac0369: 			// Needs to pre-dirty this page so that if a checkpoint is taken
1:eac0369: 			// any time after the CLR is sent to the log stream, it will wait
1:eac0369: 			// for the actual undo to happen on the page.  We need this to
1:eac0369: 			// preserve the integrity of the redoLWM.
1:eac0369: 			logicalUndoPage.preDirty();
1:eac0369: 
1:eac0369: 			// find logical page is going to call undo.findUndo to find the
1:eac0369: 			// right page to apply the CLR to.  If the record has changed,
1:eac0369: 			// logicalUndo should have resetRecordHandle to reset the page
1:eac0369: 			// number and the recordId to the new record location.  We need to
1:eac0369: 			// store both of these in the clr since during recovery redo,
1:eac0369: 			// undo.findUndo is not called.
1:eac0369: 			return  new LogicalUndoOperation(logicalUndoPage, recordId, this);
1:eac0369: 
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * LogicalUndoable methods
1:eac0369: 	 * These methods are called by undo.findUndo to extract information out of
1:eac0369: 	 * the log record for the purpose of logical undo.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the container handle where the log operated on
1:eac0369: 	*/
1:eac0369: 	public ContainerHandle getContainer()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(containerHdl != null, "accessing null container handle");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return containerHdl;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		After the logical undo logic figures out where the real record that
1:eac0369: 		needs roll back is, reset this log operation to refer to that record
1:eac0369: 	*/
1:eac0369: 	public void resetRecordHandle(RecordHandle rh)
1:eac0369: 	{
1:eac0369: 		resetPageNumber(rh.getPageNumber());
1:eac0369: 		recordId = rh.getId();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the record handle that correspond to the record that was changed
1:eac0369: 		during roll forward.  This is used as a hint by logical undo as a good
1:eac0369: 		place to look for the record to apply the roll back.
1:eac0369: 	*/
1:eac0369: 	public RecordHandle getRecordHandle()
1:eac0369: 	{
1:eac0369: 		return new RecordId(getPageId(), recordId);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of RePreparable Interface:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * reclaim locks associated with the changes in this log record.
1:eac0369:      * <p>
1:eac0369: 	 * @param locking_policy  The locking policy to use to claim the locks.
1:eac0369:      * 
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void reclaimPrepareLocks(
1:eac0369:     Transaction     t,
1:eac0369:     LockingPolicy   locking_policy)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.DEBUG_PRINT("", "reclaimPrepareLocks().");
1:eac0369:             SanityManager.ASSERT(getRecordHandle() != null);
1:eac0369:         }
1:eac0369: 
1:eac0369:         ContainerHandle ch = t.openContainer(
1:eac0369:             getPageId().getContainerId(), locking_policy, 
1:eac0369:             (ContainerHandle.MODE_FORUPDATE          | 
1:eac0369:              ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | 
1:eac0369:              ContainerHandle.MODE_LOCK_NOWAIT));
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(ch != null);
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (ch != null)
1:eac0369:             ch.close();
1:eac0369: 
1:eac0369:         /*
1:eac0369:         // get the intent lock on the container.
1:eac0369:         boolean lock_granted = 
1:eac0369:             locking_policy.lockContainer(
1:eac0369:                 t, 
1:eac0369:                 getContainer(), 
1:eac0369:                 false,          // don't wait for the lock, it is bug if a 
1:eac0369:                                 // lock has to wait while reclaiming locks 
1:eac0369:                                 // during recovery.
1:eac0369:                 true);          // lock for update.
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(lock_granted);
1:eac0369:         }
1:eac0369:         
1:eac0369:         */
1:eac0369:         // get the row lock on the c.
1:eac0369:         boolean lock_granted = 
1:eac0369:             locking_policy.lockRecordForWrite(
1:eac0369:                 t, 
1:eac0369:                 getRecordHandle(), 
1:eac0369:                 false,          // default is not for insert. 
1:eac0369:                 false);         // don't wait for the lock, it is bug if a 
1:eac0369:                                 // lock has to wait while reclaiming locks 
1:eac0369:                                 // during recovery.
1:eac0369: 
1:eac0369:         releaseResource(t);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(lock_granted);
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * method specific to this class
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	  Find the page that the rollback operation should be applied to.
1:eac0369: 
1:eac0369: 	  <P>The actual logical log operation is expected to implement
1:eac0369: 	  Undoable.generateUndo.  This utility function findLogicalPage is provided
1:eac0369: 	  for the common case scenario of using a LogicalUndo interface to find the
1:eac0369: 	  undo page.  The subclass that implements Undoable.generateUndo can use
1:eac0369: 	  this function to find the logical page with its LogicalUndo callback function.
1:eac0369: 	  This method can be used with the default releaseResource().
1:eac0369: 
1:eac0369: 	  <P>During recovery redo, the logging system is page oriented and will use
1:eac0369: 	  the pageID stored in the PageUndoOperation to find the page.  The
1:eac0369: 	  page will be latched and released using the default findpage and
1:eac0369: 	  releaseResource - this.releaseResource() will still be called so it has
1:eac0369: 	  to know not to release any resource it did not acquire.
1:eac0369: 
1:eac0369: 	  @param xact	the transaction doing the compensating
1:eac0369: 	  @param in		optional input
1:eac0369: 
1:eac0369: 	  @return the compensation operation that will rollback this change 
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 		@exception IOException Method may read from ObjectInput
1:eac0369: 
1:eac0369: 	  @see PageBasicOperation
1:eac0369: 	  @see Undoable#generateUndo
1:eac0369: 	  @see  org.apache.derby.iapi.store.raw.Loggable#releaseResource
1:eac0369: 	
1:eac0369: 
1:eac0369:     */
1:eac0369: 	private BasePage findLogicalPage(Transaction xact, LogicalUndo undo,
1:eac0369: 									   LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 		releaseResource(xact);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			// the try,finally code makes these assumptions.
1:eac0369: 			SanityManager.ASSERT(containerHdl == null);
1:eac0369: 			SanityManager.ASSERT(page == null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		boolean okExit = false;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			// open the container
1:eac0369: 			RawTransaction rtran = (RawTransaction)xact;
1:eac0369: 
1:eac0369: 			containerHdl = rtran.openDroppedContainer
1:eac0369: 				(getPageId().getContainerId(), (LockingPolicy) null);
1:eac0369: 
1:eac0369: 			if (SanityManager.DEBUG) {
1:eac0369: 				SanityManager.ASSERT(containerHdl != null, "cannot open container");
1:eac0369: 				SanityManager.ASSERT(containerHdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
1:eac0369: 								 "finding a page for undo in a committed dropped container");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			page = (BasePage)(undo.findUndo(xact, this, in));
1:eac0369: 
1:eac0369: 			if (SanityManager.DEBUG) {
1:eac0369: 				SanityManager.ASSERT(page != null, "findUndo returns null page");
1:eac0369: 				SanityManager.ASSERT(page.getPageNumber() == getPageId().getPageNumber(),
1:eac0369: 								"undo.findUndo did not reset the log op's recordHandle");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// if you add code here then ensure that you handle page unlatching in the
1:eac0369: 			// backout code.
1:eac0369: 
1:eac0369: 			okExit = true;
1:eac0369: 		} finally {
1:eac0369: 
1:eac0369: 			if (!okExit) {
1:eac0369: 
1:eac0369: 				if (containerHdl != null) {
1:eac0369: 					containerHdl.close();
1:eac0369: 					containerHdl = null;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// no need to unlatch page here because is page is valid no
1:eac0369: 			// exceptions can be thrown, until some adds code after the findUndo.
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		foundHere = true;
1:eac0369: 		return page;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undo the change indicated by this log operation and optional data.
1:eac0369: 		The undoPage and undoRecordId is the page, record the undo should apply to.
1:eac0369: 		The undoRecorId differs from the roll forward recordId if the undoPage
1:eac0369: 		differs from the page the roll forward operation was applied to, in
1:eac0369: 		other words, the record moved to another page and the recordId changed.
1:eac0369: 
1:eac0369: 		<BR>A logical operation can at most deal with 1 record.
1:eac0369: 
1:eac0369: 		<P> The available() method of in indicates how much data can be read, i.e.
1:eac0369: 		how much was originally written.
1:eac0369: 
1:eac0369: 		<BR><B>In this RawStore implementation, should only only be called via
1:eac0369: 		CompOp.doMe</B>.
1:eac0369: 
1:eac0369: 
1:eac0369: 		@param xact			the Transaction doing the rollback
1:eac0369: 		@param undoPage		the page to rollback changes on
1:eac0369: 		@param undoRecordId	the recordId to rollback changes on
1:eac0369: 		@param CLRinstant	the log instant of this (PageUndo) operation
1:eac0369: 		@param in			optional data for the rollback operation
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	*/
1:eac0369: 	abstract public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
1:eac0369: 								LogInstant CLRinstant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: abstract class LogicalPageOperation
/////////////////////////////////////////////////////////////////////////
1:     LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	no format id, an abstract class.
1: 	@derby.purpose	provide methods for logical undo
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.LogicalPageOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.RecordId;
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.LogicalUndoable;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	An abstract class that is used for logical log operation.  A logical log
1: 	operation is one where the undo of the operation may be applied to a
1: 	different page than the original operation.
1: 
1: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for logical undo
0: 	@upgrade
0: 	@disk_layout
1: 		PageBasicOperation	the super class
1: 		recordId(CompressedInt)	the recordId this operation affects
1: 		undo(LogicalUndo)		the piece of code that can figure out which page 
1: 								the row has moved into
1: 		OptionalData	none
0: 	@end_format
1: 	</PRE>
1: 
1: */
0: public abstract class LogicalPageOperation 
1:     extends PageBasicOperation implements LogicalUndoable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected LogicalUndo undo; // Callback to access for logical undo.
1: 								// If non-null, then logical undo is necessary
1: 								// for this operation.  If null, then the
1: 								// operation really only needs physical undo
1: 
1: 	protected int			recordId;	// record id - this is what the
1: 										// recordId is during the doMe time, it
1: 										// may have been changed now since the
1: 										// record may move to another page.
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public LogicalPageOperation() { super(); }
1: 
0: 	protected LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)
1: 	{
1: 		super(page);
1: 		this.undo = undo;
1: 		this.recordId = recordId;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeInt(out, recordId);
1: 		out.writeObject(undo);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		recordId = CompressedNumber.readInt(in);
1: 		undo = (LogicalUndo)in.readObject();
1: 	}
1: 
1: 
1: 	/**
1: 		Undoable method
1: 	*/
1: 
1: 	/** 
1: 		Generate a Compensation (PageUndoOperation) that will rollback the
1: 		changes of this page operation. If this Page operation cannot or need not
1: 		be rolled back (redo only), overwrite this function to return null.
1: 
1: 		@see LogicalUndo
0: 		@see #findLogicalPage
0: 		@exception StandardException Standard Cloudscape policy.
1: 		@exception IOException Method may read from ObjectInput
1: 	*/
1: 
1: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1: 		 throws StandardException, IOException
1: 	{
1: 		// if logical undo is not necessary, use normal physical undo 
1: 		if (undo == null)
1: 		{
1: 			BasePage undoPage = findpage(xact);
1: 
1: 			// Needs to pre-dirty this page so that if a checkpoint is taken
1: 			// any time after the CLR is sent to the log stream, it will wait
1: 			// for the actual undo to happen on the page.  We need this to
1: 			// preserve the integrity of the redoLWM.
1: 			undoPage.preDirty();
1: 
1: 			return new LogicalUndoOperation(undoPage, recordId, this);
1: 		}
1: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				// Sanity check to make sure logical undo is not called inside
1: 				// internal transaction
1: 				RawTransaction rtran = (RawTransaction)xact;
1: 				rtran.checkLogicalOperationOk();
1: 			}
1: 
1: 			BasePage logicalUndoPage = findLogicalPage(xact, undo, in);
1: 
1: 			// Needs to pre-dirty this page so that if a checkpoint is taken
1: 			// any time after the CLR is sent to the log stream, it will wait
1: 			// for the actual undo to happen on the page.  We need this to
1: 			// preserve the integrity of the redoLWM.
1: 			logicalUndoPage.preDirty();
1: 
1: 			// find logical page is going to call undo.findUndo to find the
1: 			// right page to apply the CLR to.  If the record has changed,
1: 			// logicalUndo should have resetRecordHandle to reset the page
1: 			// number and the recordId to the new record location.  We need to
1: 			// store both of these in the clr since during recovery redo,
1: 			// undo.findUndo is not called.
1: 			return  new LogicalUndoOperation(logicalUndoPage, recordId, this);
1: 
1: 		}
1: 	}
1: 
1: 
1: 	/*
1: 	 * LogicalUndoable methods
1: 	 * These methods are called by undo.findUndo to extract information out of
1: 	 * the log record for the purpose of logical undo.
1: 	 */
1: 
1: 	/**
1: 		Return the container handle where the log operated on
1: 	*/
1: 	public ContainerHandle getContainer()
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(containerHdl != null, "accessing null container handle");
1: 		}
1: 
1: 		return containerHdl;
1: 	}
1: 
1: 	/**
1: 		After the logical undo logic figures out where the real record that
1: 		needs roll back is, reset this log operation to refer to that record
1: 	*/
1: 	public void resetRecordHandle(RecordHandle rh)
1: 	{
1: 		resetPageNumber(rh.getPageNumber());
1: 		recordId = rh.getId();
1: 	}
1: 
1: 
1: 	/**
1: 		Return the record handle that correspond to the record that was changed
1: 		during roll forward.  This is used as a hint by logical undo as a good
1: 		place to look for the record to apply the roll back.
1: 	*/
1: 	public RecordHandle getRecordHandle()
1: 	{
1: 		return new RecordId(getPageId(), recordId);
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of RePreparable Interface:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * reclaim locks associated with the changes in this log record.
1:      * <p>
1: 	 * @param locking_policy  The locking policy to use to claim the locks.
1:      * 
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void reclaimPrepareLocks(
1:     Transaction     t,
1:     LockingPolicy   locking_policy)
1: 		throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.DEBUG_PRINT("", "reclaimPrepareLocks().");
1:             SanityManager.ASSERT(getRecordHandle() != null);
1:         }
1: 
1:         ContainerHandle ch = t.openContainer(
1:             getPageId().getContainerId(), locking_policy, 
1:             (ContainerHandle.MODE_FORUPDATE          | 
1:              ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | 
1:              ContainerHandle.MODE_LOCK_NOWAIT));
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(ch != null);
1:         }
1: 
1:         if (ch != null)
1:             ch.close();
1: 
1:         /*
1:         // get the intent lock on the container.
1:         boolean lock_granted = 
1:             locking_policy.lockContainer(
1:                 t, 
1:                 getContainer(), 
1:                 false,          // don't wait for the lock, it is bug if a 
1:                                 // lock has to wait while reclaiming locks 
1:                                 // during recovery.
1:                 true);          // lock for update.
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(lock_granted);
1:         }
1:         
1:         */
1:         // get the row lock on the c.
1:         boolean lock_granted = 
1:             locking_policy.lockRecordForWrite(
1:                 t, 
1:                 getRecordHandle(), 
1:                 false,          // default is not for insert. 
1:                 false);         // don't wait for the lock, it is bug if a 
1:                                 // lock has to wait while reclaiming locks 
1:                                 // during recovery.
1: 
1:         releaseResource(t);
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(lock_granted);
1:         }
1:     }
1: 
1: 	/*
1: 	 * method specific to this class
1: 	 */
1: 
1: 	/** 
1: 	  Find the page that the rollback operation should be applied to.
1: 
1: 	  <P>The actual logical log operation is expected to implement
1: 	  Undoable.generateUndo.  This utility function findLogicalPage is provided
1: 	  for the common case scenario of using a LogicalUndo interface to find the
1: 	  undo page.  The subclass that implements Undoable.generateUndo can use
1: 	  this function to find the logical page with its LogicalUndo callback function.
1: 	  This method can be used with the default releaseResource().
1: 
1: 	  <P>During recovery redo, the logging system is page oriented and will use
1: 	  the pageID stored in the PageUndoOperation to find the page.  The
1: 	  page will be latched and released using the default findpage and
1: 	  releaseResource - this.releaseResource() will still be called so it has
1: 	  to know not to release any resource it did not acquire.
1: 
1: 	  @param xact	the transaction doing the compensating
1: 	  @param in		optional input
1: 
1: 	  @return the compensation operation that will rollback this change 
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 		@exception IOException Method may read from ObjectInput
1: 
1: 	  @see PageBasicOperation
1: 	  @see Undoable#generateUndo
1: 	  @see  org.apache.derby.iapi.store.raw.Loggable#releaseResource
1: 	
1: 
1:     */
1: 	private BasePage findLogicalPage(Transaction xact, LogicalUndo undo,
1: 									   LimitObjectInput in)
1: 		 throws StandardException, IOException
1: 	{
1: 		releaseResource(xact);
1: 
1: 		if (SanityManager.DEBUG) {
1: 			// the try,finally code makes these assumptions.
1: 			SanityManager.ASSERT(containerHdl == null);
1: 			SanityManager.ASSERT(page == null);
1: 		}
1: 
1: 		boolean okExit = false;
1: 
1: 		try {
1: 
1: 			// open the container
1: 			RawTransaction rtran = (RawTransaction)xact;
1: 
1: 			containerHdl = rtran.openDroppedContainer
1: 				(getPageId().getContainerId(), (LockingPolicy) null);
1: 
1: 			if (SanityManager.DEBUG) {
1: 				SanityManager.ASSERT(containerHdl != null, "cannot open container");
1: 				SanityManager.ASSERT(containerHdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
1: 								 "finding a page for undo in a committed dropped container");
1: 			}
1: 
1: 			page = (BasePage)(undo.findUndo(xact, this, in));
1: 
1: 			if (SanityManager.DEBUG) {
1: 				SanityManager.ASSERT(page != null, "findUndo returns null page");
1: 				SanityManager.ASSERT(page.getPageNumber() == getPageId().getPageNumber(),
1: 								"undo.findUndo did not reset the log op's recordHandle");
1: 			}
1: 
1: 			// if you add code here then ensure that you handle page unlatching in the
1: 			// backout code.
1: 
1: 			okExit = true;
1: 		} finally {
1: 
1: 			if (!okExit) {
1: 
1: 				if (containerHdl != null) {
1: 					containerHdl.close();
1: 					containerHdl = null;
1: 				}
1: 			}
1: 
1: 			// no need to unlatch page here because is page is valid no
1: 			// exceptions can be thrown, until some adds code after the findUndo.
1: 		}
1: 
1: 		foundHere = true;
1: 		return page;
1: 	}
1: 
1: 
1: 	/**
1: 		Undo the change indicated by this log operation and optional data.
1: 		The undoPage and undoRecordId is the page, record the undo should apply to.
1: 		The undoRecorId differs from the roll forward recordId if the undoPage
1: 		differs from the page the roll forward operation was applied to, in
1: 		other words, the record moved to another page and the recordId changed.
1: 
1: 		<BR>A logical operation can at most deal with 1 record.
1: 
1: 		<P> The available() method of in indicates how much data can be read, i.e.
1: 		how much was originally written.
1: 
1: 		<BR><B>In this RawStore implementation, should only only be called via
1: 		CompOp.doMe</B>.
1: 
1: 
1: 		@param xact			the Transaction doing the rollback
1: 		@param undoPage		the page to rollback changes on
1: 		@param undoRecordId	the recordId to rollback changes on
1: 		@param CLRinstant	the log instant of this (PageUndo) operation
1: 		@param in			optional data for the rollback operation
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	*/
1: 	abstract public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
1: 								LogInstant CLRinstant, LimitObjectInput in) 
1: 		 throws StandardException, IOException;
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.RecordId;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.LogicalUndoable;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	An abstract class that is used for logical log operation.  A logical log
0: 	operation is one where the undo of the operation may be applied to a
0: 	different page than the original operation.
0: 
0: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for logical undo
0: 	@upgrade
0: 	@disk_layout
0: 		PageBasicOperation	the super class
0: 		recordId(CompressedInt)	the recordId this operation affects
0: 		undo(LogicalUndo)		the piece of code that can figure out which page 
0: 								the row has moved into
0: 		OptionalData	none
0: 	@end_format
0: 	</PRE>
0: 
0: */
0: public abstract class LogicalPageOperation 
0:     extends PageBasicOperation implements LogicalUndoable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected LogicalUndo undo; // Callback to access for logical undo.
0: 								// If non-null, then logical undo is necessary
0: 								// for this operation.  If null, then the
0: 								// operation really only needs physical undo
0: 
0: 	protected int			recordId;	// record id - this is what the
0: 										// recordId is during the doMe time, it
0: 										// may have been changed now since the
0: 										// record may move to another page.
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public LogicalPageOperation() { super(); }
0: 
0: 	protected LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)
0: 	{
0: 		super(page);
0: 		this.undo = undo;
0: 		this.recordId = recordId;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, recordId);
0: 		out.writeObject(undo);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		recordId = CompressedNumber.readInt(in);
0: 		undo = (LogicalUndo)in.readObject();
0: 	}
0: 
0: 
0: 	/**
0: 		Undoable method
0: 	*/
0: 
0: 	/** 
0: 		Generate a Compensation (PageUndoOperation) that will rollback the
0: 		changes of this page operation. If this Page operation cannot or need not
0: 		be rolled back (redo only), overwrite this function to return null.
0: 
0: 		@see LogicalUndo
0: 		@see #findLogicalPage
0: 		@exception StandardException Standard Cloudscape policy.
0: 		@exception IOException Method may read from ObjectInput
0: 	*/
0: 
0: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
0: 		 throws StandardException, IOException
0: 	{
0: 		// if logical undo is not necessary, use normal physical undo 
0: 		if (undo == null)
0: 		{
0: 			BasePage undoPage = findpage(xact);
0: 
0: 			// Needs to pre-dirty this page so that if a checkpoint is taken
0: 			// any time after the CLR is sent to the log stream, it will wait
0: 			// for the actual undo to happen on the page.  We need this to
0: 			// preserve the integrity of the redoLWM.
0: 			undoPage.preDirty();
0: 
0: 			return new LogicalUndoOperation(undoPage, recordId, this);
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				// Sanity check to make sure logical undo is not called inside
0: 				// internal transaction
0: 				RawTransaction rtran = (RawTransaction)xact;
0: 				rtran.checkLogicalOperationOk();
0: 			}
0: 
0: 			BasePage logicalUndoPage = findLogicalPage(xact, undo, in);
0: 
0: 			// Needs to pre-dirty this page so that if a checkpoint is taken
0: 			// any time after the CLR is sent to the log stream, it will wait
0: 			// for the actual undo to happen on the page.  We need this to
0: 			// preserve the integrity of the redoLWM.
0: 			logicalUndoPage.preDirty();
0: 
0: 			// find logical page is going to call undo.findUndo to find the
0: 			// right page to apply the CLR to.  If the record has changed,
0: 			// logicalUndo should have resetRecordHandle to reset the page
0: 			// number and the recordId to the new record location.  We need to
0: 			// store both of these in the clr since during recovery redo,
0: 			// undo.findUndo is not called.
0: 			return  new LogicalUndoOperation(logicalUndoPage, recordId, this);
0: 
0: 		}
0: 	}
0: 
0: 
0: 	/*
0: 	 * LogicalUndoable methods
0: 	 * These methods are called by undo.findUndo to extract information out of
0: 	 * the log record for the purpose of logical undo.
0: 	 */
0: 
0: 	/**
0: 		Return the container handle where the log operated on
0: 	*/
0: 	public ContainerHandle getContainer()
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(containerHdl != null, "accessing null container handle");
0: 		}
0: 
0: 		return containerHdl;
0: 	}
0: 
0: 	/**
0: 		After the logical undo logic figures out where the real record that
0: 		needs roll back is, reset this log operation to refer to that record
0: 	*/
0: 	public void resetRecordHandle(RecordHandle rh)
0: 	{
0: 		resetPageNumber(rh.getPageNumber());
0: 		recordId = rh.getId();
0: 	}
0: 
0: 
0: 	/**
0: 		Return the record handle that correspond to the record that was changed
0: 		during roll forward.  This is used as a hint by logical undo as a good
0: 		place to look for the record to apply the roll back.
0: 	*/
0: 	public RecordHandle getRecordHandle()
0: 	{
0: 		return new RecordId(getPageId(), recordId);
0: 	}
0: 
0:     /**************************************************************************
0:      * Public Methods of RePreparable Interface:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * reclaim locks associated with the changes in this log record.
0:      * <p>
0: 	 * @param locking_policy  The locking policy to use to claim the locks.
0:      * 
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void reclaimPrepareLocks(
0:     Transaction     t,
0:     LockingPolicy   locking_policy)
0: 		throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.DEBUG_PRINT("", "reclaimPrepareLocks().");
0:             SanityManager.ASSERT(getRecordHandle() != null);
0:         }
0: 
0:         ContainerHandle ch = t.openContainer(
0:             getPageId().getContainerId(), locking_policy, 
0:             (ContainerHandle.MODE_FORUPDATE          | 
0:              ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | 
0:              ContainerHandle.MODE_LOCK_NOWAIT));
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(ch != null);
0:         }
0: 
0:         if (ch != null)
0:             ch.close();
0: 
0:         /*
0:         // get the intent lock on the container.
0:         boolean lock_granted = 
0:             locking_policy.lockContainer(
0:                 t, 
0:                 getContainer(), 
0:                 false,          // don't wait for the lock, it is bug if a 
0:                                 // lock has to wait while reclaiming locks 
0:                                 // during recovery.
0:                 true);          // lock for update.
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(lock_granted);
0:         }
0:         
0:         */
0:         // get the row lock on the c.
0:         boolean lock_granted = 
0:             locking_policy.lockRecordForWrite(
0:                 t, 
0:                 getRecordHandle(), 
0:                 false,          // default is not for insert. 
0:                 false);         // don't wait for the lock, it is bug if a 
0:                                 // lock has to wait while reclaiming locks 
0:                                 // during recovery.
0: 
0:         releaseResource(t);
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(lock_granted);
0:         }
0:     }
0: 
0: 	/*
0: 	 * method specific to this class
0: 	 */
0: 
0: 	/** 
0: 	  Find the page that the rollback operation should be applied to.
0: 
0: 	  <P>The actual logical log operation is expected to implement
0: 	  Undoable.generateUndo.  This utility function findLogicalPage is provided
0: 	  for the common case scenario of using a LogicalUndo interface to find the
0: 	  undo page.  The subclass that implements Undoable.generateUndo can use
0: 	  this function to find the logical page with its LogicalUndo callback function.
0: 	  This method can be used with the default releaseResource().
0: 
0: 	  <P>During recovery redo, the logging system is page oriented and will use
0: 	  the pageID stored in the PageUndoOperation to find the page.  The
0: 	  page will be latched and released using the default findpage and
0: 	  releaseResource - this.releaseResource() will still be called so it has
0: 	  to know not to release any resource it did not acquire.
0: 
0: 	  @param xact	the transaction doing the compensating
0: 	  @param in		optional input
0: 
0: 	  @return the compensation operation that will rollback this change 
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 		@exception IOException Method may read from ObjectInput
0: 
0: 	  @see PageBasicOperation
0: 	  @see Undoable#generateUndo
0: 	  @see  org.apache.derby.iapi.store.raw.Loggable#releaseResource
0: 	
0: 
0:     */
0: 	private BasePage findLogicalPage(Transaction xact, LogicalUndo undo,
0: 									   LimitObjectInput in)
0: 		 throws StandardException, IOException
0: 	{
0: 		releaseResource(xact);
0: 
0: 		if (SanityManager.DEBUG) {
0: 			// the try,finally code makes these assumptions.
0: 			SanityManager.ASSERT(containerHdl == null);
0: 			SanityManager.ASSERT(page == null);
0: 		}
0: 
0: 		boolean okExit = false;
0: 
0: 		try {
0: 
0: 			// open the container
0: 			RawTransaction rtran = (RawTransaction)xact;
0: 
0: 			containerHdl = rtran.openDroppedContainer
0: 				(getPageId().getContainerId(), (LockingPolicy) null);
0: 
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.ASSERT(containerHdl != null, "cannot open container");
0: 				SanityManager.ASSERT(containerHdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
0: 								 "finding a page for undo in a committed dropped container");
0: 			}
0: 
0: 			page = (BasePage)(undo.findUndo(xact, this, in));
0: 
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.ASSERT(page != null, "findUndo returns null page");
0: 				SanityManager.ASSERT(page.getPageNumber() == getPageId().getPageNumber(),
0: 								"undo.findUndo did not reset the log op's recordHandle");
0: 			}
0: 
0: 			// if you add code here then ensure that you handle page unlatching in the
0: 			// backout code.
0: 
0: 			okExit = true;
0: 		} finally {
0: 
0: 			if (!okExit) {
0: 
0: 				if (containerHdl != null) {
0: 					containerHdl.close();
0: 					containerHdl = null;
0: 				}
0: 			}
0: 
0: 			// no need to unlatch page here because is page is valid no
0: 			// exceptions can be thrown, until some adds code after the findUndo.
0: 		}
0: 
0: 		foundHere = true;
0: 		return page;
0: 	}
0: 
0: 
0: 	/**
0: 		Undo the change indicated by this log operation and optional data.
0: 		The undoPage and undoRecordId is the page, record the undo should apply to.
0: 		The undoRecorId differs from the roll forward recordId if the undoPage
0: 		differs from the page the roll forward operation was applied to, in
0: 		other words, the record moved to another page and the recordId changed.
0: 
0: 		<BR>A logical operation can at most deal with 1 record.
0: 
0: 		<P> The available() method of in indicates how much data can be read, i.e.
0: 		how much was originally written.
0: 
0: 		<BR><B>In this RawStore implementation, should only only be called via
0: 		CompOp.doMe</B>.
0: 
0: 
0: 		@param xact			the Transaction doing the rollback
0: 		@param undoPage		the page to rollback changes on
0: 		@param undoRecordId	the recordId to rollback changes on
0: 		@param CLRinstant	the log instant of this (PageUndo) operation
0: 		@param in			optional data for the rollback operation
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	*/
0: 	abstract public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
0: 								LogInstant CLRinstant, LimitObjectInput in) 
0: 		 throws StandardException, IOException;
0: 
0: 
0: }
============================================================================