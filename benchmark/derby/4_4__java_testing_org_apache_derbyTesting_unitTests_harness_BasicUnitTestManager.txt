1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.ContextManager;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:2bc809f: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:a0dbbd7: import java.security.PrivilegedAction;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:a0dbbd7: import java.security.AccessController;
1:2bc809f: import java.util.Date;
1:2bc809f: import java.util.Enumeration;
1:2bc809f: import java.util.Properties;
1:2bc809f: import java.util.Vector;
1:2bc809f: import java.util.Hashtable;
1:2bc809f: 
1:2bc809f: public class BasicUnitTestManager implements UnitTestManager, ModuleControl
3:2bc809f: {
1:3f5c48a:     private Vector<UnitTest> vectorOfTests;
1:3f5c48a:     private Hashtable<String, String> namesOfTests;
1:2bc809f: 
1:2bc809f: 	private	static	boolean	alreadyRun = false;
1:2bc809f: 	private HeaderPrintWriter output;
1:2bc809f: 	private HeaderPrintWriter currentOutput;
1:2bc809f: 	private int testType = UnitTestConstants.TYPE_COMPLETE;
1:2bc809f: 	private int testDuration = UnitTestConstants.DURATION_FOREVER;
1:2bc809f: 	private boolean reportOutputOn = true;
1:2bc809f: 	private boolean performanceReportOn = false;
1:2bc809f: 	private ContextService contextService;
1:2bc809f: 	private boolean runForever = false; 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Constructor
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public BasicUnitTestManager() {
2:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Methods of ModuleControl
1:2bc809f: 	*/
1:2bc809f: 	public void boot(boolean create, Properties startParams)
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		boolean	testStatus = true;
1:2bc809f: 
1:2bc809f: 		// startParams should define output, for now
1:2bc809f: 		// use the sytem trace stream. If that doesn't exist
1:2bc809f: 		// then use a null stream.
1:2bc809f: 
1:2bc809f: 		output = Monitor.getStream();
1:2bc809f: 
1:a0dbbd7: 		contextService = getContextService();
1:2bc809f: 
1:2bc809f: 		this.currentOutput = output;
1:2bc809f: 
1:3f5c48a: 		vectorOfTests = new Vector<UnitTest>();
1:3f5c48a: 		namesOfTests = new Hashtable<String, String>();
1:2bc809f: 
1:2bc809f: 		findTests(startParams, startParams);
1:2bc809f: 		try {
1:2bc809f: 			findTests(System.getProperties(), startParams);
1:2bc809f: 		} catch (SecurityException se) {
1:2bc809f: 		}
1:56c1dc2: 		findTests(getMonitor().getApplicationProperties(), startParams);
1:2bc809f: 
1:2bc809f: 		if ( !alreadyRun )
1:2bc809f: 		{
1:2bc809f: 			testStatus = runTests();
1:2bc809f: 			alreadyRun = true;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (!testStatus) {
1:2bc809f: 
1:2bc809f: 			// try to print out that the shutdown is occurring.
1:2bc809f: 			System.out.println("Shutting down due to unit test failure.");
1:2bc809f: 			output.printlnWithHeader("Shutting down due to unit test failure, see log for more information.");
1:2bc809f: 
1:56c1dc2: 			getMonitor().shutdown();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void stop(){
1:2bc809f: 		return;
1:2bc809f: 	}
1:a0dbbd7: 
1:2bc809f: 	public synchronized void registerTest(UnitTest objectToTest, String testName){
1:2bc809f: 
1:2bc809f: 		// only add the new test if it isn't already there.
1:2bc809f: 		// otherwise you will upset me.
1:2bc809f: 		if ( !namesOfTests.containsKey( testName ) )
1:2bc809f: 		{
1:2bc809f: 			vectorOfTests.addElement(objectToTest);
1:2bc809f: 			namesOfTests.put( testName, testName );
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void findTests(Properties testList, Properties startParams) {
1:2bc809f: 
1:2bc809f: 		if (testList == null)
1:2bc809f: 			return;
1:2bc809f: 
1:2bc809f: 		for (Enumeration e = testList.propertyNames(); e.hasMoreElements(); ) {
1:2bc809f: 
1:2bc809f: 			String key = (String) e.nextElement();
1:2bc809f: 			if (key.startsWith("derby.module.test.")) {
1:2bc809f: 				String unitTestClass = testList.getProperty(key);
1:2bc809f: 
1:2bc809f: 				try {
1:2bc809f: 					Object unitTest =
1:56c1dc2: 						bootServiceModule(false, this, unitTestClass,
1:2bc809f: 												  startParams);
1:2bc809f: 					if (unitTest instanceof UnitTest) {
1:2bc809f: 						registerTest((UnitTest) unitTest, unitTestClass);
1:2bc809f: 					} else if (unitTest != null) {
1:2bc809f: 					System.out.println("class does not implement UnitTest " +
1:2bc809f: 									   unitTestClass);
1:2bc809f: 					}
1:2bc809f: 				} catch (StandardException se) {
1:2bc809f: 					System.out.println("exception booting " + unitTestClass);
1:2bc809f: 					System.out.println(se.toString());
1:2bc809f: 					se.printStackTrace(System.out);
1:2bc809f: 				}
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:a0dbbd7: 	/**
1:2bc809f: 	 *	emitAMessage
1:2bc809f: 	 *
1:2bc809f: 	 *	Convenience routine to emit messages. This routine only works
1:2bc809f: 	 *  for messages provided by this package.
1:2bc809f: 	 *
1:2bc809f: 	 *  @see	UnitTestConstants for supported durations.
1:2bc809f: 	 **/
1:2bc809f: 	private void emitAMessage(String message){
1:2bc809f: 
1:2bc809f: 	   currentOutput.printlnWithHeader(message);
1:a0dbbd7: 	}
1:2bc809f: 
1:2bc809f: 	private boolean runATest(UnitTest aTest){
1:2bc809f: 
1:2bc809f: 		boolean result;
1:2bc809f: 
1:2bc809f: 		String thisTestName = aTest.getClass().getName();
1:2bc809f: 		Date startTime = null, endTime;
1:2bc809f: 
1:2bc809f: 		// push a new context manager
1:2bc809f: 		ContextManager cm = null;
1:2bc809f: 		if (contextService != null) {
1:2bc809f: 			cm = contextService.newContextManager();
1:2bc809f: 			contextService.setCurrentContextManager(cm);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (performanceReportOn)
1:2bc809f: 			startTime = new Date();
1:2bc809f: 
1:2bc809f: 		try{
1:2bc809f: 			emitAMessage("Starting test  '" + thisTestName + "'.");
1:2bc809f: 			result = aTest.Execute(currentOutput);
1:2bc809f: 			if (result == true)
1:2bc809f: 				emitAMessage("Test '" + thisTestName + "' passed");
1:a0dbbd7: 			else
1:2bc809f: 				emitAMessage("Test '" + thisTestName + "' failed");
1:2bc809f: 
1:2bc809f: 		} catch (Throwable t) {
1:2bc809f: 			if (t instanceof ThreadDeath)
1:a0dbbd7: 			{
1:2bc809f: 				t.printStackTrace(output.getPrintWriter());
1:2bc809f: 				Runtime.getRuntime().exit(1);
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			result = false;
1:2bc809f: 			String  msg = t.getMessage();
1:2bc809f: 			if (msg == null) msg = t.getClass().getName();
1:2bc809f: 			emitAMessage("Test '" + thisTestName + "' failed with exception '" + msg +"'.");
1:2bc809f: 			t.printStackTrace(output.getPrintWriter());
1:2bc809f: 		} finally {
1:2bc809f: 
1:2bc809f: 			if (contextService != null) {
1:2bc809f: 				//
1:2bc809f: 				//Assure the completed test does not stick around
1:2bc809f: 				//cm.cleanupOnError
1:2bc809f: 				//	(BasicUnitTestDatabaseException.cleanUp());
1:2bc809f: 				contextService.resetCurrentContextManager(cm);
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (performanceReportOn){
1:2bc809f: 			endTime = new Date();
1:39b3237: 			emitAMessage("Test '" + thisTestName + "' took " + (endTime.getTime() - startTime.getTime()) + " milliseconds.");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		return result;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// STUB: Verify its ok this is synchronized.
1:2bc809f: 	public synchronized boolean runTests(){
1:2bc809f: 
1:2bc809f: 		boolean result = true;
1:2bc809f: 		int passCount = 0;
1:2bc809f: 		int failCount = 0;
1:2bc809f: 		int skipCount = 0;
1:2bc809f: 		boolean runTests = true;
1:2bc809f: 
1:2bc809f: 		if (SanityManager.DEBUG)
1:a0dbbd7: 		{
1:2bc809f: 			runTests =
1:2bc809f: 				!SanityManager.DEBUG_ON(UnitTestManager.SKIP_UNIT_TESTS);
1:2bc809f: 			runForever =
1:2bc809f: 				SanityManager.DEBUG_ON(UnitTestManager.RUN_FOREVER);
1:2bc809f: 		}
1:2bc809f: 		if (runTests) {
1:2bc809f: 
1:2bc809f: 		if (!runForever) T_Bomb.makeBomb();
1:2bc809f: 		for(int ix = vectorOfTests.size() - 1; ix >= 0 ; ix--){
1:2bc809f: 
1:2bc809f: 			UnitTest thisTest =
1:2bc809f: 				((UnitTest)vectorOfTests.elementAt(ix));
1:2bc809f: 			if (thisTest.UnitTestDuration() <= this.testDuration &&
1:2bc809f: 				thisTest.UnitTestType() <= this.testType){
1:2bc809f: 				if (runATest(thisTest))
1:2bc809f: 					passCount++;
2:2bc809f: 				else
1:2bc809f: 					failCount++;
1:2bc809f: 				vectorOfTests.removeElementAt(ix);
1:2bc809f: 			}
1:2bc809f: 			else{
1:2bc809f: 				skipCount++;
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		emitAMessage("Test Summary - Run " + (passCount+failCount) +
1:2bc809f: 			", Passed " + passCount + ", Failed " + failCount + ", Skipped " + skipCount + ".");
1:2bc809f: 		}
1:2bc809f: 		else {
1:2bc809f: 			emitAMessage("Tests not run.");
1:2bc809f: 		}
1:2bc809f: 		return (failCount == 0);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public boolean runTests(int testType, int testDuration){
1:2bc809f: 		//STUB: Sanity check for type/duration
1:2bc809f: 		this.testType = testType;
1:2bc809f: 		this.testDuration = testDuration;
1:2bc809f: 		return runTests();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public void setTestDuration(int testDuration){
1:2bc809f: 		//STUB: Sanity check for type/duration
1:2bc809f: 		this.testDuration = testDuration;
1:2bc809f: 		return;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public void setTestType(int testType){
1:2bc809f: 		//STUB: Sanity check for type/duration
1:2bc809f: 		this.testType = testType;
1:2bc809f: 		return;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public void setPerformanceReportOn(boolean performanceReportOn){
1:2bc809f: 		this.performanceReportOn = performanceReportOn;
1:2bc809f: 		return;
1:2bc809f: 	}	
1:2bc809f:     
1:2bc809f:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
1:a0dbbd7:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ContextService>()
1:56c1dc2:              {
1:56c1dc2:                  public ContextService run()
1:56c1dc2:                  {
1:56c1dc2:                      return ContextService.getFactory();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object bootServiceModule
1:56c1dc2:         (
1:56c1dc2:          final boolean create, final Object serviceModule,
1:56c1dc2:          final String factoryInterface, final Properties properties
1:56c1dc2:          )
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:a0dbbd7:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:a0dbbd7:                      {
1:56c1dc2:                          return Monitor.bootServiceModule( create, serviceModule, factoryInterface, properties );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1: 			emitAMessage("Test '" + thisTestName + "' took " + (endTime.getTime() - startTime.getTime()) + " milliseconds.");
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 		findTests(getMonitor().getApplicationProperties(), startParams);
/////////////////////////////////////////////////////////////////////////
1: 			getMonitor().shutdown();
/////////////////////////////////////////////////////////////////////////
1: 						bootServiceModule(false, this, unitTestClass,
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ContextService>()
1:              {
1:                  public ContextService run()
1:                  {
1:                      return ContextService.getFactory();
1:                  }
1:              }
1:              );
1:     }
1: 
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object bootServiceModule
1:         (
1:          final boolean create, final Object serviceModule,
1:          final String factoryInterface, final Properties properties
1:          )
1:         throws StandardException
1:     {
1:         try {
1:                  new PrivilegedExceptionAction<Object>()
1:                      public Object run()
1:                          throws StandardException
1:                          return Monitor.bootServiceModule( create, serviceModule, factoryInterface, properties );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: 		contextService = getContextService();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
0:         if ( System.getSecurityManager() == null )
1:         {
0:             return ContextService.getFactory();
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
0:                  new PrivilegedAction<ContextService>()
1:                  {
0:                      public ContextService run()
1:                      {
0:                          return ContextService.getFactory();
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private Vector<UnitTest> vectorOfTests;
1:     private Hashtable<String, String> namesOfTests;
/////////////////////////////////////////////////////////////////////////
1: 		vectorOfTests = new Vector<UnitTest>();
1: 		namesOfTests = new Hashtable<String, String>();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derbyTesting.unitTests.harness.UnitTest;
0: import org.apache.derbyTesting.unitTests.harness.UnitTestConstants;
0: import org.apache.derbyTesting.unitTests.harness.UnitTestManager;
0: import org.apache.derbyTesting.unitTests.harness.T_Bomb;
1: import java.util.Date;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.util.Vector;
1: import java.util.Hashtable;
1: 
1: public class BasicUnitTestManager implements UnitTestManager, ModuleControl
1: {
0: 	private Vector vectorOfTests;
0: 	private Hashtable	namesOfTests;
1: 
1: 	private	static	boolean	alreadyRun = false;
1: 	private HeaderPrintWriter output;
1: 	private HeaderPrintWriter currentOutput;
1: 	private int testType = UnitTestConstants.TYPE_COMPLETE;
1: 	private int testDuration = UnitTestConstants.DURATION_FOREVER;
1: 	private boolean reportOutputOn = true;
1: 	private boolean performanceReportOn = false;
1: 	private ContextService contextService;
1: 	private boolean runForever = false; 
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 
1: 	public BasicUnitTestManager() {
1: 	}
1: 
1: 	/*
1: 	** Methods of ModuleControl
1: 	*/
1: 	public void boot(boolean create, Properties startParams)
1: 		 throws StandardException
1: 	{
1: 		boolean	testStatus = true;
1: 
1: 		// startParams should define output, for now
1: 		// use the sytem trace stream. If that doesn't exist
1: 		// then use a null stream.
1: 
1: 		output = Monitor.getStream();
1: 
0: 		contextService = ContextService.getFactory();
1: 
1: 		this.currentOutput = output;
1: 
0: 		vectorOfTests = new Vector();
0: 		namesOfTests = new Hashtable();
1: 
1: 		findTests(startParams, startParams);
1: 		try {
1: 			findTests(System.getProperties(), startParams);
1: 		} catch (SecurityException se) {
1: 		}
0: 		findTests(Monitor.getMonitor().getApplicationProperties(), startParams);
1: 
1: 		if ( !alreadyRun )
1: 		{
1: 			testStatus = runTests();
1: 			alreadyRun = true;
1: 		}
1: 
1: 		if (!testStatus) {
1: 
1: 			// try to print out that the shutdown is occurring.
1: 			System.out.println("Shutting down due to unit test failure.");
1: 			output.printlnWithHeader("Shutting down due to unit test failure, see log for more information.");
1: 
0: 			Monitor.getMonitor().shutdown();
1: 		}
1: 	}
1: 
1: 	public void stop(){
1: 		return;
1: 	}
1: 
1: 	public synchronized void registerTest(UnitTest objectToTest, String testName){
1: 
1: 		// only add the new test if it isn't already there.
1: 		// otherwise you will upset me.
1: 		if ( !namesOfTests.containsKey( testName ) )
1: 		{
1: 			vectorOfTests.addElement(objectToTest);
1: 			namesOfTests.put( testName, testName );
1: 		}
1: 	}
1: 
1: 	private void findTests(Properties testList, Properties startParams) {
1: 
1: 		if (testList == null)
1: 			return;
1: 
1: 		for (Enumeration e = testList.propertyNames(); e.hasMoreElements(); ) {
1: 
1: 			String key = (String) e.nextElement();
1: 			if (key.startsWith("derby.module.test.")) {
1: 				String unitTestClass = testList.getProperty(key);
1: 
1: 				try {
1: 					Object unitTest =
0: 						Monitor.bootServiceModule(false, this, unitTestClass,
1: 												  startParams);
1: 					if (unitTest instanceof UnitTest) {
1: 						registerTest((UnitTest) unitTest, unitTestClass);
1: 					} else if (unitTest != null) {
1: 					System.out.println("class does not implement UnitTest " +
1: 									   unitTestClass);
1: 					}
1: 				} catch (StandardException se) {
1: 					System.out.println("exception booting " + unitTestClass);
1: 					System.out.println(se.toString());
1: 					se.printStackTrace(System.out);
1: 				}
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 *	emitAMessage
1: 	 *
1: 	 *	Convenience routine to emit messages. This routine only works
1: 	 *  for messages provided by this package.
1: 	 *
1: 	 *  @see	UnitTestConstants for supported durations.
1: 	 **/
1: 	private void emitAMessage(String message){
1: 
1: 	   currentOutput.printlnWithHeader(message);
1: 	}
1: 
1: 	private boolean runATest(UnitTest aTest){
1: 
1: 		boolean result;
1: 
1: 		String thisTestName = aTest.getClass().getName();
1: 		Date startTime = null, endTime;
1: 
1: 		// push a new context manager
1: 		ContextManager cm = null;
1: 		if (contextService != null) {
1: 			cm = contextService.newContextManager();
1: 			contextService.setCurrentContextManager(cm);
1: 		}
1: 
1: 		if (performanceReportOn)
1: 			startTime = new Date();
1: 
1: 		try{
1: 			emitAMessage("Starting test  '" + thisTestName + "'.");
1: 			result = aTest.Execute(currentOutput);
1: 			if (result == true)
1: 				emitAMessage("Test '" + thisTestName + "' passed");
1: 			else
1: 				emitAMessage("Test '" + thisTestName + "' failed");
1: 
1: 		} catch (Throwable t) {
1: 			if (t instanceof ThreadDeath)
1: 			{
1: 				t.printStackTrace(output.getPrintWriter());
1: 				Runtime.getRuntime().exit(1);
1: 			}
1: 
1: 			result = false;
1: 			String  msg = t.getMessage();
1: 			if (msg == null) msg = t.getClass().getName();
1: 			emitAMessage("Test '" + thisTestName + "' failed with exception '" + msg +"'.");
1: 			t.printStackTrace(output.getPrintWriter());
1: 		} finally {
1: 
1: 			if (contextService != null) {
1: 				//
1: 				//Assure the completed test does not stick around
1: 				//cm.cleanupOnError
1: 				//	(BasicUnitTestDatabaseException.cleanUp());
1: 				contextService.resetCurrentContextManager(cm);
1: 			}
1: 		}
1: 
1: 		if (performanceReportOn){
1: 			endTime = new Date();
0: 			emitAMessage("Test '" + thisTestName + "' took " + new Long(endTime.getTime() - startTime.getTime()) + " milliseconds.");
1: 		}
1: 
1: 		return result;
1: 	}
1: 
1: 	// STUB: Verify its ok this is synchronized.
1: 	public synchronized boolean runTests(){
1: 
1: 		boolean result = true;
1: 		int passCount = 0;
1: 		int failCount = 0;
1: 		int skipCount = 0;
1: 		boolean runTests = true;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			runTests =
1: 				!SanityManager.DEBUG_ON(UnitTestManager.SKIP_UNIT_TESTS);
1: 			runForever =
1: 				SanityManager.DEBUG_ON(UnitTestManager.RUN_FOREVER);
1: 		}
1: 		if (runTests) {
1: 
1: 		if (!runForever) T_Bomb.makeBomb();
1: 		for(int ix = vectorOfTests.size() - 1; ix >= 0 ; ix--){
1: 
1: 			UnitTest thisTest =
1: 				((UnitTest)vectorOfTests.elementAt(ix));
1: 			if (thisTest.UnitTestDuration() <= this.testDuration &&
1: 				thisTest.UnitTestType() <= this.testType){
1: 				if (runATest(thisTest))
1: 					passCount++;
1: 				else
1: 					failCount++;
1: 				vectorOfTests.removeElementAt(ix);
1: 			}
1: 			else{
1: 				skipCount++;
1: 			}
1: 		}
1: 		emitAMessage("Test Summary - Run " + (passCount+failCount) +
1: 			", Passed " + passCount + ", Failed " + failCount + ", Skipped " + skipCount + ".");
1: 		}
1: 		else {
1: 			emitAMessage("Tests not run.");
1: 		}
1: 		return (failCount == 0);
1: 	}
1: 
1: 
1: 	public boolean runTests(int testType, int testDuration){
1: 		//STUB: Sanity check for type/duration
1: 		this.testType = testType;
1: 		this.testDuration = testDuration;
1: 		return runTests();
1: 	}
1: 
1: 
1: 	public void setTestDuration(int testDuration){
1: 		//STUB: Sanity check for type/duration
1: 		this.testDuration = testDuration;
1: 		return;
1: 	}
1: 
1: 
1: 	public void setTestType(int testType){
1: 		//STUB: Sanity check for type/duration
1: 		this.testType = testType;
1: 		return;
1: 	}
1: 
1: 
1: 	public void setPerformanceReportOn(boolean performanceReportOn){
1: 		this.performanceReportOn = performanceReportOn;
1: 		return;
1: 	}	
1: }
1: 
============================================================================