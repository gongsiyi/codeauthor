1:bce78c9: /*
3:bce78c9: 
1:bce78c9:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.KeepDisposableStatsPropertyTest
1:bce78c9: 
1:bce78c9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bce78c9:    contributor license agreements.  See the NOTICE file distributed with
1:bce78c9:    this work for additional information regarding copyright ownership.
1:bce78c9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bce78c9:    (the "License"); you may not use this file except in compliance with
1:bce78c9:    the License.  You may obtain a copy of the License at
1:bce78c9: 
1:bce78c9:       http://www.apache.org/licenses/LICENSE-2.0
1:bce78c9: 
1:bce78c9:    Unless required by applicable law or agreed to in writing, software
1:bce78c9:    distributed under the License is distributed on an "AS IS" BASIS,
1:bce78c9:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bce78c9:    See the License for the specific language governing permissions and
1:bce78c9:    limitations under the License.
1:bce78c9: 
1:bce78c9:  */
1:bce78c9: package org.apache.derbyTesting.functionTests.tests.store;
1:bce78c9: 
1:bce78c9: import java.sql.PreparedStatement;
1:bce78c9: import java.sql.SQLException;
1:bce78c9: import java.sql.Statement;
1:bce78c9: import java.sql.Types;
1:bce78c9: import java.util.Properties;
1:bce78c9: import junit.framework.Test;
1:bce78c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:bce78c9: import org.apache.derbyTesting.junit.IndexStatsUtil;
1:bce78c9: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:bce78c9: 
1:bce78c9: /**
1:bce78c9:  * Tests that the debug property used to revert to the previous behavior for
1:bce78c9:  * dealing with disposable index cardinality statistics works.
1:bce78c9:  */
1:bce78c9: public class KeepDisposableStatsPropertyTest
1:bce78c9:     extends BaseJDBCTestCase {
1:bce78c9: 
1:bce78c9:     public KeepDisposableStatsPropertyTest(String name) {
1:bce78c9:         super(name);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Verifies the behavior when the property is set to {@code true}. */
1:bce78c9:     public void testPropertyFalse()
1:bce78c9:             throws SQLException {
1:bce78c9:         assertOnSCUI(false);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Verifies the behavior when the property is set to {@code true}. */
1:bce78c9:     public void testPropertyTrue()
1:bce78c9:             throws SQLException {
1:bce78c9:         assertOnSCUI(true);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Verifies that the default for the property is {@code false}. */
1:bce78c9:     public void testPropertyDefault()
1:bce78c9:             throws SQLException {
1:bce78c9:         assertOnSCUI(false);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Runs the real test case. */
1:bce78c9:     private void assertOnSCUI(boolean keepDisposable)
1:bce78c9:             throws SQLException {
1:3574e10:         IndexStatsUtil stats = new IndexStatsUtil(
1:3574e10:                 openDefaultConnection(), 20*1000); // 20 seconds timeout
1:bce78c9:         // Create table.
1:bce78c9:         String TAB = "STAT_SCUI";
1:bce78c9:         dropTable(TAB);
1:bce78c9:         Statement stmt = createStatement();
1:bce78c9:         stmt.executeUpdate("create table " + TAB +
1:bce78c9:                 " (id int not null, val int)");
1:bce78c9:         stats.assertNoStatsTable(TAB);
1:bce78c9:         PreparedStatement psIns = prepareStatement(
1:bce78c9:                 "insert into " + TAB + " values (?,?)");
1:bce78c9:         setAutoCommit(false);
1:bce78c9:         for (int i=0; i < 20; i++) {
1:bce78c9:             psIns.setInt(1, i);
1:bce78c9:             psIns.setInt(2, i);
1:bce78c9:             psIns.executeUpdate();
1:bce78c9:         }
1:bce78c9:         commit();
1:bce78c9:         setAutoCommit(true);
1:bce78c9:         stmt.executeUpdate("alter table " + TAB + " add constraint PK_" + TAB +
1:bce78c9:                 " primary key(id)");
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 1  : 0);
1:bce78c9:         stmt.executeUpdate(
1:bce78c9:                 "create unique index UNIQ_IDX_" + TAB + " ON " + TAB + "(val)");
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:bce78c9:         PreparedStatement ps = prepareStatement(
1:bce78c9:                 "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', ?, ?)");
1:bce78c9:         // Update stats for all indexes.
1:bce78c9:         ps.setString(1, TAB);
1:bce78c9:         ps.setNull(2, Types.VARCHAR);
1:bce78c9:         ps.execute();
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:bce78c9: 
1:bce78c9:         // Update stats for one specific index.
1:bce78c9:         ps.setString(2, "UNIQ_IDX_" + TAB);
1:bce78c9:         ps.execute();
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:bce78c9: 
1:bce78c9:         // Drop statistics.
1:bce78c9:         stmt.execute("call SYSCS_UTIL.SYSCS_DROP_STATISTICS(" +
1:bce78c9:                 "'APP', '" + TAB + "', null)");
1:bce78c9:         stats.assertNoStatsTable(TAB);
1:bce78c9: 
1:bce78c9:         // Update and assert again, this time in the reverse order.
1:bce78c9:         ps.execute();
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 1  : 0);
1:bce78c9:         ps.setNull(2, Types.VARCHAR);
1:bce78c9:         ps.execute();
1:bce78c9:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:bce78c9:         IndexStatsUtil.IdxStats[] oldStats = stats.getStatsTable(TAB);
1:bce78c9:         
1:bce78c9:         // Insert more data to trigger an automatic update
1:bce78c9:         setAutoCommit(false);
1:bce78c9:         for (int i=20; i < 2000; i++) {
1:bce78c9:             psIns.setInt(1, i);
1:bce78c9:             psIns.setInt(2, i);
1:bce78c9:             psIns.executeUpdate();
1:bce78c9:         }
1:bce78c9:         commit();
1:bce78c9:         setAutoCommit(true);
1:3574e10:         // Trigger the scheduling logic to get the istat daemon going
1:bce78c9:         prepareStatement("select * from " + TAB + " where id = ?"); 
1:3574e10:         IndexStatsUtil.IdxStats[] newStats =
1:3574e10:                 stats.getNewStatsTable(TAB, oldStats);
1:bce78c9:         assertEquals(oldStats.length, newStats.length);
1:bce78c9:         for (int i=0; i < oldStats.length; i++) {
1:bce78c9:             assertEquals(keepDisposable, newStats[i].after(oldStats[i]));
1:bce78c9:         }
1:bce78c9: 
1:bce78c9:         // Cleanup
1:bce78c9:         dropTable(TAB);
1:bce78c9:         stats.release();
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /**
1:bce78c9:      * Returns a suite where the test is run without specifying the property
1:bce78c9:      * (use the default value), explicitly setting it to {@code true}, and
1:bce78c9:      * explicitly setting it to {@code false}.
1:bce78c9:      */
1:bce78c9:     public static Test suite() {
1:f422f44:         String property = "derby.storage.indexStats.debug.keepDisposableStats";
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("KeepDisposableStatsPropertyTestSuite");
1:1ae02c9: 
1:bce78c9:         // Test the default (expected to be false).
1:bce78c9:         suite.addTest(
1:bce78c9:                 new KeepDisposableStatsPropertyTest("testPropertyDefault"));
1:bce78c9: 
1:bce78c9:         // Test setting the property explicitly to true.
1:bce78c9:         Properties propsOn = new Properties();
1:bce78c9:         propsOn.setProperty(property, "true");
1:1ae02c9:         BaseTestSuite suiteOn = new BaseTestSuite("Do KeepDisposableStats");
1:bce78c9:         suiteOn.addTest(
1:bce78c9:                 new KeepDisposableStatsPropertyTest("testPropertyTrue"));
1:bce78c9:         suite.addTest(new SystemPropertyTestSetup(suiteOn, propsOn, true));
1:bce78c9: 
1:bce78c9:         // Test setting the property explicitly to false.
1:bce78c9:         Properties propsOff = new Properties();
1:bce78c9:         propsOff.setProperty(property, "false");
1:1ae02c9:         BaseTestSuite suiteOff =
1:1ae02c9:             new BaseTestSuite("Don't KeepDisposableStats");
1:1ae02c9: 
1:bce78c9:         suiteOff.addTest(
1:bce78c9:                 new KeepDisposableStatsPropertyTest("testPropertyFalse"));
1:bce78c9:         suite.addTest(new SystemPropertyTestSetup(suiteOff, propsOff, true));
1:bce78c9: 
1:bce78c9:         return suite;
1:bce78c9:     }
1:bce78c9: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("KeepDisposableStatsPropertyTestSuite");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suiteOn = new BaseTestSuite("Do KeepDisposableStats");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suiteOff =
1:             new BaseTestSuite("Don't KeepDisposableStats");
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:3574e10
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         IndexStatsUtil stats = new IndexStatsUtil(
1:                 openDefaultConnection(), 20*1000); // 20 seconds timeout
/////////////////////////////////////////////////////////////////////////
1:         // Trigger the scheduling logic to get the istat daemon going
1:         IndexStatsUtil.IdxStats[] newStats =
1:                 stats.getNewStatsTable(TAB, oldStats);
commit:f422f44
/////////////////////////////////////////////////////////////////////////
1:         String property = "derby.storage.indexStats.debug.keepDisposableStats";
commit:bce78c9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.KeepDisposableStatsPropertyTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Types;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.IndexStatsUtil;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: /**
1:  * Tests that the debug property used to revert to the previous behavior for
1:  * dealing with disposable index cardinality statistics works.
1:  */
1: public class KeepDisposableStatsPropertyTest
1:     extends BaseJDBCTestCase {
1: 
1:     public KeepDisposableStatsPropertyTest(String name) {
1:         super(name);
1:     }
1: 
1:     /** Verifies the behavior when the property is set to {@code true}. */
1:     public void testPropertyFalse()
1:             throws SQLException {
1:         assertOnSCUI(false);
1:     }
1: 
1:     /** Verifies the behavior when the property is set to {@code true}. */
1:     public void testPropertyTrue()
1:             throws SQLException {
1:         assertOnSCUI(true);
1:     }
1: 
1:     /** Verifies that the default for the property is {@code false}. */
1:     public void testPropertyDefault()
1:             throws SQLException {
1:         assertOnSCUI(false);
1:     }
1: 
1:     /** Runs the real test case. */
1:     private void assertOnSCUI(boolean keepDisposable)
1:             throws SQLException {
0:         IndexStatsUtil stats = new IndexStatsUtil(openDefaultConnection());
1:         // Create table.
1:         String TAB = "STAT_SCUI";
1:         dropTable(TAB);
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("create table " + TAB +
1:                 " (id int not null, val int)");
1:         stats.assertNoStatsTable(TAB);
1:         PreparedStatement psIns = prepareStatement(
1:                 "insert into " + TAB + " values (?,?)");
1:         setAutoCommit(false);
1:         for (int i=0; i < 20; i++) {
1:             psIns.setInt(1, i);
1:             psIns.setInt(2, i);
1:             psIns.executeUpdate();
1:         }
1:         commit();
1:         setAutoCommit(true);
1:         stmt.executeUpdate("alter table " + TAB + " add constraint PK_" + TAB +
1:                 " primary key(id)");
1:         stats.assertTableStats(TAB, keepDisposable ? 1  : 0);
1:         stmt.executeUpdate(
1:                 "create unique index UNIQ_IDX_" + TAB + " ON " + TAB + "(val)");
1:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:         PreparedStatement ps = prepareStatement(
1:                 "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', ?, ?)");
1:         // Update stats for all indexes.
1:         ps.setString(1, TAB);
1:         ps.setNull(2, Types.VARCHAR);
1:         ps.execute();
1:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1: 
1:         // Update stats for one specific index.
1:         ps.setString(2, "UNIQ_IDX_" + TAB);
1:         ps.execute();
1:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1: 
1:         // Drop statistics.
1:         stmt.execute("call SYSCS_UTIL.SYSCS_DROP_STATISTICS(" +
1:                 "'APP', '" + TAB + "', null)");
1:         stats.assertNoStatsTable(TAB);
1: 
1:         // Update and assert again, this time in the reverse order.
1:         ps.execute();
1:         stats.assertTableStats(TAB, keepDisposable ? 1  : 0);
1:         ps.setNull(2, Types.VARCHAR);
1:         ps.execute();
1:         stats.assertTableStats(TAB, keepDisposable ? 2  : 0);
1:         IndexStatsUtil.IdxStats[] oldStats = stats.getStatsTable(TAB);
1:         
1:         // Insert more data to trigger an automatic update
1:         setAutoCommit(false);
1:         for (int i=20; i < 2000; i++) {
1:             psIns.setInt(1, i);
1:             psIns.setInt(2, i);
1:             psIns.executeUpdate();
1:         }
1:         commit();
1:         setAutoCommit(true);
0:         JDBC.assertDrainResultsHasData(
0:                 stmt.executeQuery("select count(*) from " + TAB));
1:         prepareStatement("select * from " + TAB + " where id = ?"); 
0:         Utilities.sleep(200);
0:         IndexStatsUtil.IdxStats[] newStats = stats.getStatsTable(TAB);
1:         assertEquals(oldStats.length, newStats.length);
1:         for (int i=0; i < oldStats.length; i++) {
1:             assertEquals(keepDisposable, newStats[i].after(oldStats[i]));
1:         }
1: 
1:         // Cleanup
1:         dropTable(TAB);
1:         stats.release();
1:     }
1: 
1:     /**
1:      * Returns a suite where the test is run without specifying the property
1:      * (use the default value), explicitly setting it to {@code true}, and
1:      * explicitly setting it to {@code false}.
1:      */
1:     public static Test suite() {
0:         String property = "derby.storage.indexStats.debug.forceOldBehavior";
0:         TestSuite suite = new TestSuite("KeepDisposableStatsPropertyTestSuite");
1:         // Test the default (expected to be false).
1:         suite.addTest(
1:                 new KeepDisposableStatsPropertyTest("testPropertyDefault"));
1: 
1:         // Test setting the property explicitly to true.
1:         Properties propsOn = new Properties();
1:         propsOn.setProperty(property, "true");
0:         TestSuite suiteOn = new TestSuite("Do KeepDisposableStats");
1:         suiteOn.addTest(
1:                 new KeepDisposableStatsPropertyTest("testPropertyTrue"));
1:         suite.addTest(new SystemPropertyTestSetup(suiteOn, propsOn, true));
1: 
1:         // Test setting the property explicitly to false.
1:         Properties propsOff = new Properties();
1:         propsOff.setProperty(property, "false");
0:         TestSuite suiteOff = new TestSuite("Don't KeepDisposableStats");
1:         suiteOff.addTest(
1:                 new KeepDisposableStatsPropertyTest("testPropertyFalse"));
1:         suite.addTest(new SystemPropertyTestSetup(suiteOff, propsOff, true));
1: 
1:         return suite;
1:     }
1: }
============================================================================