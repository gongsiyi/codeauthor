1:da8930f: /*
2:da8930f: 
1:da8930f:    Derby - Class org.apache.derby.impl.store.raw.log.ChecksumOperation
1:da8930f: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:da8930f: 
1:da8930f:       http://www.apache.org/licenses/LICENSE-2.0
1:da8930f: 
1:da8930f:    Unless required by applicable law or agreed to in writing, software
1:da8930f:    distributed under the License is distributed on an "AS IS" BASIS,
1:da8930f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da8930f:    See the License for the specific language governing permissions and
1:da8930f:    limitations under the License.
1:da8930f: 
1:da8930f:  */
1:da8930f: 
1:da8930f: package org.apache.derby.impl.store.raw.log;
1:da8930f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:da8930f: import org.apache.derby.iapi.services.io.Formatable;
1:da8930f: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:da8930f: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:da8930f: import org.apache.derby.catalog.UUID;
1:da8930f: 
1:da8930f: import org.apache.derby.iapi.store.raw.Transaction;
1:da8930f: import org.apache.derby.iapi.store.raw.Loggable;
1:da8930f: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:da8930f: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:da8930f: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:da8930f: 
1:da8930f: import org.apache.derby.iapi.error.StandardException;
1:da8930f: 
1:da8930f: import org.apache.derby.iapi.services.io.CompressedNumber;
1:da8930f: import org.apache.derby.iapi.util.ByteArray;
1:da8930f: 
1:da8930f: import java.io.Externalizable;
1:da8930f: import java.io.OutputStream;
1:da8930f: import java.io.InputStream;
1:da8930f: import java.io.ObjectInput;
1:da8930f: import java.io.ObjectOutput;
1:da8930f: import java.io.IOException;
1:da8930f: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:da8930f: 
1:da8930f: import java.util.zip.Checksum;
1:da8930f: import java.util.zip.CRC32;
1:da8930f: 
1:da8930f: 
1:da8930f: /**
1:da8930f: 	A Log Operation that represents a checksum for a group of log records
1:da8930f: 	that are written to the tranaction log file.
1:da8930f: 
1:da8930f: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_CHECKSUM
1:da8930f: 		the formatId is written by FormatIdOutputStream when this object is
1:da8930f: 		written out by writeObject
1:787ceb4: 	@derby.purpose  checksum one or more log records while writing to disk
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:da8930f: 		checksumAlgo(byte)  	the checksum algorithm 
1:da8930f: 		checksumValue(long)     the checksum value 
1:da8930f: 		dataLength(int)			number of bytes that the checksum is calculated
1:787ceb4: 	@derby.endFormat
1:da8930f: 	</PRE>
1:da8930f: 
1:da8930f: 	@see Loggable
1:da8930f: */
1:da8930f: 
1:da8930f: public class ChecksumOperation implements Loggable 
1:da8930f: {
1:da8930f: 
1:da8930f: 	private  byte   checksumAlgo;
1:da8930f: 	private  long   checksumValue;   
1:da8930f: 	private  int	dataLength; 
1:da8930f: 	private Checksum checksum; 
1:da8930f: 
1:da8930f: 	/*
1:da8930f: 	 * constant values for algorithm that are used to perform the checksum.
1:da8930f: 	 */
1:da8930f:     public static final byte CRC32_ALGORITHM  = (byte) 0x1; //java.util.zip.CRC32
1:da8930f: 	
1:da8930f: 	private static final int formatLength = FormatIdUtil.getFormatIdByteLength(StoredFormatIds.LOGOP_CHECKSUM);
1:da8930f: 	
1:da8930f: 	public void init()
1:da8930f: 	{
1:da8930f: 		this.checksumAlgo = CRC32_ALGORITHM;
1:da8930f: 		initializeChecksumAlgo();
1:da8930f: 		dataLength = 0;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	
1:da8930f: 	// update the checksum
1:da8930f: 	protected void update(byte[] buf, int off, int len)
1:da8930f: 	{
1:da8930f: 		checksum.update(buf, off , len);
1:da8930f: 		dataLength += len;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	
1:da8930f: 	// reset the checksum 
1:da8930f: 	protected void reset()
1:da8930f: 	{
1:da8930f: 		checksum.reset();
1:da8930f: 		dataLength = 0;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	private void initializeChecksumAlgo()
1:da8930f: 	{
1:da8930f: 		if(checksumAlgo == CRC32_ALGORITHM)
1:da8930f: 			this.checksum = new CRC32();
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	/*
1:da8930f: 	 * Formatable methods
1:da8930f: 	 */
1:da8930f: 
1:da8930f: 	// no-arg constructor, required by Formatable 
1:da8930f: 	public ChecksumOperation() { super();}
1:da8930f: 
1:da8930f: 	public void writeExternal(ObjectOutput out) throws IOException 
1:da8930f: 	{	
1:da8930f: 		checksumValue = checksum.getValue();
1:da8930f: 		out.writeByte(checksumAlgo);
1:da8930f: 		out.writeInt(dataLength);
1:da8930f: 		out.writeLong(checksumValue);
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:da8930f: 	{
1:da8930f: 		checksumAlgo = (byte) in.readUnsignedByte();
1:da8930f: 		dataLength = in.readInt();
1:da8930f: 		checksumValue = in.readLong();
1:da8930f: 		initializeChecksumAlgo();
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	public int getStoredSize()
1:da8930f: 	{
1:da8930f: 		return formatLength + 1 + 4 + 8;
1:da8930f: 	}	
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 		Return my format identifier.
1:da8930f: 	*/
1:da8930f: 	public int getTypeFormatId() {
1:da8930f: 		return StoredFormatIds.LOGOP_CHECKSUM;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 		Loggable methods
1:da8930f: 	*/
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 	 *	Nothing to do for the checksum log record because it does need to be
1:da8930f: 	 *  applied during redo. 
1:da8930f: 	 */
1:da8930f: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) throws StandardException
1:da8930f: 	{
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 		the default for prepared log is always null for all the operations
1:da8930f: 		that don't have optionalData.  If an operation has optional data,
1:da8930f: 		the operation need to prepare the optional data for this method.
1:da8930f: 
1:da8930f: 		Checksum has no optional data to write out
1:da8930f: 
1:da8930f: 		
1:da8930f: 	*/
1:da8930f: 	public ByteArray getPreparedLog()
1:da8930f: 	{
1:da8930f: 		return (ByteArray) null;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 		Checksum does not need to be redone, it is used to just verify that
1:da8930f: 		log records are written completely.
1:da8930f: 	*/
1:da8930f: 	public boolean needsRedo(Transaction xact)
1:da8930f: 	{
1:da8930f: 		return false;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 	  Checksum has no resources to release
1:da8930f: 	*/
1:da8930f: 	public void releaseResource(Transaction xact)
1:da8930f: 	{}
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 		Checksum is a raw store operation
1:da8930f: 	*/
1:da8930f: 	public int group()
1:da8930f: 	{
1:da8930f: 		return Loggable.RAWSTORE | Loggable.CHECKSUM;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 	
1:da8930f: 
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 	 * Access attributes of the checksum log record
1:da8930f: 	 */
1:da8930f: 
1:da8930f: 	protected int getDataLength() 
1:da8930f: 	{
1:da8930f: 		return dataLength;
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	protected boolean isChecksumValid(byte[] data, int off , int length)
1:da8930f: 	{
1:da8930f: 		checksum.reset();
1:da8930f: 		checksum.update(data , off , length);
1:da8930f: 		return checksum.getValue()== checksumValue;
1:da8930f: 
1:da8930f: 	}
1:da8930f: 
1:da8930f: 
1:da8930f: 	/**
1:da8930f: 	  DEBUG: Print self.
1:da8930f: 	*/
1:da8930f: 	public String toString()
1:da8930f: 	{
1:da8930f: 		if (SanityManager.DEBUG)
1:da8930f: 		{
1:da8930f: 			StringBuffer str = new StringBuffer(200)
1:da8930f: 				.append("Checksum Operation ")
1:da8930f: 				.append(" algorithm = ")
1:da8930f: 				.append(checksumAlgo)
1:da8930f: 				.append(" value = ")
1:da8930f: 				.append(checksumValue)
1:da8930f: 				.append(" data length= ").append(dataLength);
1:da8930f: 
1:da8930f: 				return str.toString();
1:da8930f: 		}
1:da8930f: 		else
1:da8930f: 			return null;
1:da8930f: 	}
1:da8930f: }
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
1:da8930f: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_CHECKSUM
1: 	@derby.purpose  checksum one or more log records while writing to disk
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:75b112d
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:da8930f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.raw.log.ChecksumOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.Externalizable;
1: import java.io.OutputStream;
1: import java.io.InputStream;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: import java.util.zip.Checksum;
1: import java.util.zip.CRC32;
1: 
1: 
1: /**
1: 	A Log Operation that represents a checksum for a group of log records
1: 	that are written to the tranaction log file.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_CHECKSUM
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose  checksum one or more log records while writing to disk
0: 	@upgrade
0: 	@disk_layout
1: 		checksumAlgo(byte)  	the checksum algorithm 
1: 		checksumValue(long)     the checksum value 
1: 		dataLength(int)			number of bytes that the checksum is calculated
0: 	@end_format
1: 	</PRE>
1: 
0: 	@author  Suresh Thalamati
1: 	@see Loggable
1: */
1: 
1: public class ChecksumOperation implements Loggable 
1: {
1: 
1: 	private  byte   checksumAlgo;
1: 	private  long   checksumValue;   
1: 	private  int	dataLength; 
1: 	private Checksum checksum; 
1: 
1: 	/*
1: 	 * constant values for algorithm that are used to perform the checksum.
1: 	 */
1:     public static final byte CRC32_ALGORITHM  = (byte) 0x1; //java.util.zip.CRC32
1: 	
1: 	private static final int formatLength = FormatIdUtil.getFormatIdByteLength(StoredFormatIds.LOGOP_CHECKSUM);
1: 	
1: 	public void init()
1: 	{
1: 		this.checksumAlgo = CRC32_ALGORITHM;
1: 		initializeChecksumAlgo();
1: 		dataLength = 0;
1: 	}
1: 
1: 	
1: 	// update the checksum
1: 	protected void update(byte[] buf, int off, int len)
1: 	{
1: 		checksum.update(buf, off , len);
1: 		dataLength += len;
1: 	}
1: 
1: 	
1: 	// reset the checksum 
1: 	protected void reset()
1: 	{
1: 		checksum.reset();
1: 		dataLength = 0;
1: 	}
1: 
1: 
1: 	private void initializeChecksumAlgo()
1: 	{
1: 		if(checksumAlgo == CRC32_ALGORITHM)
1: 			this.checksum = new CRC32();
1: 	}
1: 
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public ChecksumOperation() { super();}
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{	
1: 		checksumValue = checksum.getValue();
1: 		out.writeByte(checksumAlgo);
1: 		out.writeInt(dataLength);
1: 		out.writeLong(checksumValue);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		checksumAlgo = (byte) in.readUnsignedByte();
1: 		dataLength = in.readInt();
1: 		checksumValue = in.readLong();
1: 		initializeChecksumAlgo();
1: 	}
1: 
1: 
1: 	public int getStoredSize()
1: 	{
1: 		return formatLength + 1 + 4 + 8;
1: 	}	
1: 
1: 
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_CHECKSUM;
1: 	}
1: 
1: 
1: 
1: 
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/**
1: 	 *	Nothing to do for the checksum log record because it does need to be
1: 	 *  applied during redo. 
1: 	 */
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) throws StandardException
1: 	{
1: 	}
1: 
1: 	/**
1: 		the default for prepared log is always null for all the operations
1: 		that don't have optionalData.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		Checksum has no optional data to write out
1: 
0: 		@param out Where and how to write to optional data.
1: 		
1: 	*/
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (ByteArray) null;
1: 	}
1: 
1: 	/**
1: 		Checksum does not need to be redone, it is used to just verify that
1: 		log records are written completely.
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 	{
1: 		return false;
1: 	}
1: 
1: 
1: 	/**
1: 	  Checksum has no resources to release
1: 	*/
1: 	public void releaseResource(Transaction xact)
1: 	{}
1: 
1: 	/**
1: 		Checksum is a raw store operation
1: 	*/
1: 	public int group()
1: 	{
1: 		return Loggable.RAWSTORE | Loggable.CHECKSUM;
1: 	}
1: 
1: 	
1: 
1: 
1: 	/**
1: 	 * Access attributes of the checksum log record
1: 	 */
1: 
1: 	protected int getDataLength() 
1: 	{
1: 		return dataLength;
1: 	}
1: 
1: 
1: 	protected boolean isChecksumValid(byte[] data, int off , int length)
1: 	{
1: 		checksum.reset();
1: 		checksum.update(data , off , length);
1: 		return checksum.getValue()== checksumValue;
1: 
1: 	}
1: 
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			StringBuffer str = new StringBuffer(200)
1: 				.append("Checksum Operation ")
1: 				.append(" algorithm = ")
1: 				.append(checksumAlgo)
1: 				.append(" value = ")
1: 				.append(checksumValue)
1: 				.append(" data length= ").append(dataLength);
1: 
1: 				return str.toString();
1: 		}
1: 		else
1: 			return null;
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
============================================================================