1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This node represents a binary arithmetic operator, like + or *.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class BinaryArithmeticOperatorNode extends BinaryOperatorNode
3:eac0369: {
1:2706d1f:     // Allowed kinds
1:2706d1f:     final static int K_DIVIDE = 0;
1:2706d1f:     final static int K_MINUS = 1;
1:2706d1f:     final static int K_PLUS = 2;
1:2706d1f:     final static int K_TIMES = 3;
1:2706d1f:     final static int K_MOD = 4;
1:2706d1f: 
1:2706d1f:     /**
1:2706d1f:      * This class is used to hold logically different objects for
1:2706d1f:      * space efficiency. {@code kind} represents the logical object
1:2706d1f:      * type. See also {@link ValueNode#isSameNodeKind}.
1:2706d1f:      */
1:2706d1f:     final int kind;
1:2706d1f: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a BinaryArithmeticOperatorNode
1:eac0369: 	 *
1:2706d1f:      * @param kind          The kind of operator
1:eac0369: 	 * @param leftOperand	The left operand
1:eac0369: 	 * @param rightOperand	The right operand
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     BinaryArithmeticOperatorNode(
1:2706d1f:             int kind,
1:3bb140c:             ValueNode leftOperand,
1:3bb140c:             ValueNode rightOperand,
1:3bb140c:             ContextManager cm)
1:eac0369: 	{
1:3bb140c:         super(leftOperand,
1:3bb140c:               rightOperand,
1:3bb140c:               ClassName.NumberDataValue,
1:3bb140c:               ClassName.NumberDataValue,
1:3bb140c:               cm);
1:2706d1f:         this.kind = kind;
1:eac0369: 
1:2706d1f:         final String op;
1:2706d1f:         final String mNam;
1:eac0369: 
1:2706d1f:         switch (kind)
1:eac0369: 		{
1:2706d1f:             case K_DIVIDE:
1:3bb140c:                 op = TypeCompiler.DIVIDE_OP;
1:3bb140c:                 mNam = "divide";
1:eac0369: 				break;
1:eac0369: 
1:2706d1f:             case K_MINUS:
1:3bb140c:                 op = TypeCompiler.MINUS_OP;
1:3bb140c:                 mNam = "minus";
1:eac0369: 				break;
1:eac0369: 
1:2706d1f:             case K_PLUS:
1:3bb140c:                 op = TypeCompiler.PLUS_OP;
1:3bb140c:                 mNam = "plus";
1:eac0369: 				break;
1:eac0369: 
1:2706d1f:             case K_TIMES:
1:3bb140c:                 op = TypeCompiler.TIMES_OP;
1:3bb140c:                 mNam = "times";
1:eac0369: 				break;
1:eac0369: 
1:2706d1f:             case K_MOD:
1:3bb140c:                 op = TypeCompiler.MOD_OP;
1:3bb140c:                 mNam = "mod";
1:eac0369: 				break;
1:2706d1f:             default:
1:2706d1f:                 if (SanityManager.DEBUG) {
1:2706d1f:                     SanityManager.NOTREACHED();
1:2706d1f:                 }
1:2706d1f:                 op = null;
1:2706d1f:                 mNam = null;
1:2706d1f:         }
1:3bb140c:         setOperator(op);
1:3bb140c:         setMethodName(mNam);
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this operator
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		TypeId	leftType = leftOperand.getTypeId();
1:eac0369: 		TypeId	rightType = rightOperand.getTypeId();
1:eac0369: 		DataTypeDescriptor	leftDTS = leftOperand.getTypeServices();
1:eac0369: 		DataTypeDescriptor	rightDTS = rightOperand.getTypeServices();
1:eac0369: 
1:eac0369: 		/* Do any implicit conversions from (long) (var)char. */
1:eac0369: 		if (leftType.isStringTypeId() && rightType.isNumericTypeId())
1:eac0369: 		{
1:eac0369: 			boolean nullableResult;
1:eac0369: 			nullableResult = leftDTS.isNullable() ||
1:eac0369: 		 					 rightDTS.isNullable();
1:eac0369: 			/* If other side is decimal/numeric, then we need to diddle
1:eac0369: 			 * with the precision, scale and max width in order to handle
1:eac0369: 			 * computations like:  1.1 + '0.111'
1:eac0369: 			 */
1:eac0369: 			int precision = rightDTS.getPrecision();
1:eac0369: 			int scale	  = rightDTS.getScale();
1:eac0369: 			int maxWidth  = rightDTS.getMaximumWidth();
1:eac0369: 
1:eac0369: 			if (rightType.isDecimalTypeId())
1:eac0369: 			{
1:eac0369: 				int charMaxWidth = leftDTS.getMaximumWidth();
1:eac0369: 				precision += (2 * charMaxWidth);								
1:eac0369: 				scale += charMaxWidth;								
1:eac0369: 				maxWidth = precision + 3;
1:eac0369: 			}
1:eac0369: 
1:3bb140c:             leftOperand = new CastNode(
1:eac0369: 						leftOperand, 
1:eac0369: 						new DataTypeDescriptor(rightType, precision,
1:eac0369: 											scale, nullableResult, 
1:eac0369: 											maxWidth),
1:eac0369: 						getContextManager());
1:eac0369: 			((CastNode) leftOperand).bindCastNodeOnly();
1:eac0369: 		}
1:eac0369: 		else if (rightType.isStringTypeId() && leftType.isNumericTypeId())
1:eac0369: 		{
1:eac0369: 			boolean nullableResult;
1:eac0369: 			nullableResult = leftDTS.isNullable() ||
1:eac0369: 		 					 rightDTS.isNullable();
1:eac0369: 			/* If other side is decimal/numeric, then we need to diddle
1:eac0369: 			 * with the precision, scale and max width in order to handle
1:eac0369: 			 * computations like:  1.1 + '0.111'
1:eac0369: 			 */
1:eac0369: 			int precision = leftDTS.getPrecision();
1:eac0369: 			int scale	  = leftDTS.getScale();
1:eac0369: 			int maxWidth  = leftDTS.getMaximumWidth();
1:eac0369: 
1:eac0369: 			if (leftType.isDecimalTypeId())
1:eac0369: 			{
1:eac0369: 				int charMaxWidth = rightDTS.getMaximumWidth();
1:eac0369: 				precision += (2 * charMaxWidth);								
1:eac0369: 				scale += charMaxWidth;								
1:eac0369: 				maxWidth = precision + 3;
1:eac0369: 			}
1:eac0369: 
1:3bb140c:             rightOperand = new CastNode(
1:eac0369: 						rightOperand, 
1:eac0369: 						new DataTypeDescriptor(leftType, precision,
1:eac0369: 											scale, nullableResult, 
1:eac0369: 											maxWidth),
1:eac0369: 						getContextManager());
1:eac0369: 			((CastNode) rightOperand).bindCastNodeOnly();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Set the result type of this operator based on the operands.
1:eac0369: 		** By convention, the left operand gets to decide the result type
1:eac0369: 		** of a binary operator.
1:eac0369: 		*/
1:eac0369: 		setType(leftOperand.getTypeCompiler().
1:eac0369: 					resolveArithmeticOperation(
1:eac0369: 						leftOperand.getTypeServices(),
1:eac0369: 						rightOperand.getTypeServices(),
1:eac0369: 						operator
1:eac0369: 							)
1:eac0369: 				);
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:2706d1f: 
1:2706d1f:     @Override
1:2706d1f:     boolean isSameNodeKind(ValueNode o) {
1:2706d1f:         return super.isSameNodeKind(o) &&
1:2706d1f:                 ((BinaryArithmeticOperatorNode)o).kind == kind;
1:2706d1f:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // Allowed kinds
1:     final static int K_DIVIDE = 0;
1:     final static int K_MINUS = 1;
1:     final static int K_PLUS = 2;
1:     final static int K_TIMES = 3;
1:     final static int K_MOD = 4;
1: 
1:     /**
1:      * This class is used to hold logically different objects for
1:      * space efficiency. {@code kind} represents the logical object
1:      * type. See also {@link ValueNode#isSameNodeKind}.
1:      */
1:     final int kind;
1: 
1:      * @param kind          The kind of operator
1:             int kind,
/////////////////////////////////////////////////////////////////////////
1:         this.kind = kind;
1:         final String op;
1:         final String mNam;
1:         switch (kind)
1:             case K_DIVIDE:
1:             case K_MINUS:
1:             case K_PLUS:
1:             case K_TIMES:
1:             case K_MOD:
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.NOTREACHED();
1:                 }
1:                 op = null;
1:                 mNam = null;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     boolean isSameNodeKind(ValueNode o) {
1:         return super.isSameNodeKind(o) &&
1:                 ((BinaryArithmeticOperatorNode)o).kind == kind;
1:     }
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for a BinaryArithmeticOperatorNode
1:      * @param cm            The context manager
1:     BinaryArithmeticOperatorNode(
0:             int nodeType,
1:             ValueNode leftOperand,
1:             ValueNode rightOperand,
1:             ContextManager cm)
1:         super(leftOperand,
1:               rightOperand,
1:               ClassName.NumberDataValue,
1:               ClassName.NumberDataValue,
1:               cm);
0:         setNodeType(nodeType);
1:     @Override
0:     void setNodeType(int nodeType)
0:         String op = null;
0:         String mNam = null;
1:                 op = TypeCompiler.DIVIDE_OP;
1:                 mNam = "divide";
1:                 op = TypeCompiler.MINUS_OP;
1:                 mNam = "minus";
1:                 op = TypeCompiler.PLUS_OP;
1:                 mNam = "plus";
1:                 op = TypeCompiler.TIMES_OP;
1:                 mNam = "times";
1:                 op = TypeCompiler.MOD_OP;
1:                 mNam = "mod";
/////////////////////////////////////////////////////////////////////////
1:         setOperator(op);
1:         setMethodName(mNam);
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
1:             leftOperand = new CastNode(
/////////////////////////////////////////////////////////////////////////
1:             rightOperand = new CastNode(
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node represents a binary arithmetic operator, like + or *.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public final class BinaryArithmeticOperatorNode extends BinaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
0: 	 * Initializer for a BinaryArithmeticOperatorNode
1: 	 *
1: 	 * @param leftOperand	The left operand
1: 	 * @param rightOperand	The right operand
1: 	 */
1: 
0: 	public void init(
0: 					Object leftOperand,
0: 					Object rightOperand)
1: 	{
0: 		super.init(leftOperand, rightOperand,
0: 				ClassName.NumberDataValue, ClassName.NumberDataValue);
1: 	}
1: 
0: 	public void setNodeType(int nodeType)
1: 	{
0: 		String operator = null;
0: 		String methodName = null;
1: 
0: 		switch (nodeType)
1: 		{
0: 			case C_NodeTypes.BINARY_DIVIDE_OPERATOR_NODE:
0: 				operator = TypeCompiler.DIVIDE_OP;
0: 				methodName = "divide";
1: 				break;
1: 
0: 			case C_NodeTypes.BINARY_MINUS_OPERATOR_NODE:
0: 				operator = TypeCompiler.MINUS_OP;
0: 				methodName = "minus";
1: 				break;
1: 
0: 			case C_NodeTypes.BINARY_PLUS_OPERATOR_NODE:
0: 				operator = TypeCompiler.PLUS_OP;
0: 				methodName = "plus";
1: 				break;
1: 
0: 			case C_NodeTypes.BINARY_TIMES_OPERATOR_NODE:
0: 				operator = TypeCompiler.TIMES_OP;
0: 				methodName = "times";
1: 				break;
1: 
0: 			case C_NodeTypes.MOD_OPERATOR_NODE:
0: 				operator = TypeCompiler.MOD_OP;
0: 				methodName = "mod";
1: 				break;
1: 
0: 			default:
0: 				if (SanityManager.DEBUG)
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
1: 				}
1: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
1: 	}
1: 
1: 	/**
1: 	 * Bind this operator
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
1: 
1: 		TypeId	leftType = leftOperand.getTypeId();
1: 		TypeId	rightType = rightOperand.getTypeId();
1: 		DataTypeDescriptor	leftDTS = leftOperand.getTypeServices();
1: 		DataTypeDescriptor	rightDTS = rightOperand.getTypeServices();
1: 
1: 		/* Do any implicit conversions from (long) (var)char. */
1: 		if (leftType.isStringTypeId() && rightType.isNumericTypeId())
1: 		{
1: 			boolean nullableResult;
1: 			nullableResult = leftDTS.isNullable() ||
1: 		 					 rightDTS.isNullable();
1: 			/* If other side is decimal/numeric, then we need to diddle
1: 			 * with the precision, scale and max width in order to handle
1: 			 * computations like:  1.1 + '0.111'
1: 			 */
1: 			int precision = rightDTS.getPrecision();
1: 			int scale	  = rightDTS.getScale();
1: 			int maxWidth  = rightDTS.getMaximumWidth();
1: 
1: 			if (rightType.isDecimalTypeId())
1: 			{
1: 				int charMaxWidth = leftDTS.getMaximumWidth();
1: 				precision += (2 * charMaxWidth);								
1: 				scale += charMaxWidth;								
1: 				maxWidth = precision + 3;
1: 			}
1: 
0: 			leftOperand = (ValueNode)
0: 					getNodeFactory().getNode(
0: 						C_NodeTypes.CAST_NODE,
1: 						leftOperand, 
1: 						new DataTypeDescriptor(rightType, precision,
1: 											scale, nullableResult, 
1: 											maxWidth),
1: 						getContextManager());
1: 			((CastNode) leftOperand).bindCastNodeOnly();
1: 		}
1: 		else if (rightType.isStringTypeId() && leftType.isNumericTypeId())
1: 		{
1: 			boolean nullableResult;
1: 			nullableResult = leftDTS.isNullable() ||
1: 		 					 rightDTS.isNullable();
1: 			/* If other side is decimal/numeric, then we need to diddle
1: 			 * with the precision, scale and max width in order to handle
1: 			 * computations like:  1.1 + '0.111'
1: 			 */
1: 			int precision = leftDTS.getPrecision();
1: 			int scale	  = leftDTS.getScale();
1: 			int maxWidth  = leftDTS.getMaximumWidth();
1: 
1: 			if (leftType.isDecimalTypeId())
1: 			{
1: 				int charMaxWidth = rightDTS.getMaximumWidth();
1: 				precision += (2 * charMaxWidth);								
1: 				scale += charMaxWidth;								
1: 				maxWidth = precision + 3;
1: 			}
1: 
0: 			rightOperand =  (ValueNode)
0: 					getNodeFactory().getNode(
0: 						C_NodeTypes.CAST_NODE,
1: 						rightOperand, 
1: 						new DataTypeDescriptor(leftType, precision,
1: 											scale, nullableResult, 
1: 											maxWidth),
1: 						getContextManager());
1: 			((CastNode) rightOperand).bindCastNodeOnly();
1: 		}
1: 
1: 		/*
1: 		** Set the result type of this operator based on the operands.
1: 		** By convention, the left operand gets to decide the result type
1: 		** of a binary operator.
1: 		*/
1: 		setType(leftOperand.getTypeCompiler().
1: 					resolveArithmeticOperation(
1: 						leftOperand.getTypeServices(),
1: 						rightOperand.getTypeServices(),
1: 						operator
1: 							)
1: 				);
1: 
1: 		return this;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node represents a binary arithmetic operator, like + or *.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public final class BinaryArithmeticOperatorNode extends BinaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a BinaryArithmeticOperatorNode
0: 	 *
0: 	 * @param leftOperand	The left operand
0: 	 * @param rightOperand	The right operand
0: 	 */
0: 
0: 	public void init(
0: 					Object leftOperand,
0: 					Object rightOperand)
0: 	{
0: 		super.init(leftOperand, rightOperand,
0: 				ClassName.NumberDataValue, ClassName.NumberDataValue);
0: 	}
0: 
0: 	public void setNodeType(int nodeType)
0: 	{
0: 		String operator = null;
0: 		String methodName = null;
0: 
0: 		switch (nodeType)
0: 		{
0: 			case C_NodeTypes.BINARY_DIVIDE_OPERATOR_NODE:
0: 				operator = TypeCompiler.DIVIDE_OP;
0: 				methodName = "divide";
0: 				break;
0: 
0: 			case C_NodeTypes.BINARY_MINUS_OPERATOR_NODE:
0: 				operator = TypeCompiler.MINUS_OP;
0: 				methodName = "minus";
0: 				break;
0: 
0: 			case C_NodeTypes.BINARY_PLUS_OPERATOR_NODE:
0: 				operator = TypeCompiler.PLUS_OP;
0: 				methodName = "plus";
0: 				break;
0: 
0: 			case C_NodeTypes.BINARY_TIMES_OPERATOR_NODE:
0: 				operator = TypeCompiler.TIMES_OP;
0: 				methodName = "times";
0: 				break;
0: 
0: 			case C_NodeTypes.MOD_OPERATOR_NODE:
0: 				operator = TypeCompiler.MOD_OP;
0: 				methodName = "mod";
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected nodeType = " + nodeType);
0: 				}
0: 		}
0: 		setOperator(operator);
0: 		setMethodName(methodName);
0: 		super.setNodeType(nodeType);
0: 	}
0: 
0: 	/**
0: 	 * Bind this operator
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList,
0: 				aggregateVector);
0: 
0: 		TypeId	leftType = leftOperand.getTypeId();
0: 		TypeId	rightType = rightOperand.getTypeId();
0: 		DataTypeDescriptor	leftDTS = leftOperand.getTypeServices();
0: 		DataTypeDescriptor	rightDTS = rightOperand.getTypeServices();
0: 
0: 		/* Do any implicit conversions from (long) (var)char. */
0: 		if (leftType.isStringTypeId() && rightType.isNumericTypeId())
0: 		{
0: 			boolean nullableResult;
0: 			nullableResult = leftDTS.isNullable() ||
0: 		 					 rightDTS.isNullable();
0: 			/* If other side is decimal/numeric, then we need to diddle
0: 			 * with the precision, scale and max width in order to handle
0: 			 * computations like:  1.1 + '0.111'
0: 			 */
0: 			int precision = rightDTS.getPrecision();
0: 			int scale	  = rightDTS.getScale();
0: 			int maxWidth  = rightDTS.getMaximumWidth();
0: 
0: 			if (rightType.isDecimalTypeId())
0: 			{
0: 				int charMaxWidth = leftDTS.getMaximumWidth();
0: 				precision += (2 * charMaxWidth);								
0: 				scale += charMaxWidth;								
0: 				maxWidth = precision + 3;
0: 			}
0: 
0: 			leftOperand = (ValueNode)
0: 					getNodeFactory().getNode(
0: 						C_NodeTypes.CAST_NODE,
0: 						leftOperand, 
0: 						new DataTypeDescriptor(rightType, precision,
0: 											scale, nullableResult, 
0: 											maxWidth),
0: 						getContextManager());
0: 			((CastNode) leftOperand).bindCastNodeOnly();
0: 		}
0: 		else if (rightType.isStringTypeId() && leftType.isNumericTypeId())
0: 		{
0: 			boolean nullableResult;
0: 			nullableResult = leftDTS.isNullable() ||
0: 		 					 rightDTS.isNullable();
0: 			/* If other side is decimal/numeric, then we need to diddle
0: 			 * with the precision, scale and max width in order to handle
0: 			 * computations like:  1.1 + '0.111'
0: 			 */
0: 			int precision = leftDTS.getPrecision();
0: 			int scale	  = leftDTS.getScale();
0: 			int maxWidth  = leftDTS.getMaximumWidth();
0: 
0: 			if (leftType.isDecimalTypeId())
0: 			{
0: 				int charMaxWidth = rightDTS.getMaximumWidth();
0: 				precision += (2 * charMaxWidth);								
0: 				scale += charMaxWidth;								
0: 				maxWidth = precision + 3;
0: 			}
0: 
0: 			rightOperand =  (ValueNode)
0: 					getNodeFactory().getNode(
0: 						C_NodeTypes.CAST_NODE,
0: 						rightOperand, 
0: 						new DataTypeDescriptor(leftType, precision,
0: 											scale, nullableResult, 
0: 											maxWidth),
0: 						getContextManager());
0: 			((CastNode) rightOperand).bindCastNodeOnly();
0: 		}
0: 
0: 		/*
0: 		** Set the result type of this operator based on the operands.
0: 		** By convention, the left operand gets to decide the result type
0: 		** of a binary operator.
0: 		*/
0: 		setType(leftOperand.getTypeCompiler().
0: 					resolveArithmeticOperation(
0: 						leftOperand.getTypeServices(),
0: 						rightOperand.getTypeServices(),
0: 						operator
0: 							)
0: 				);
0: 
0: 		return this;
0: 	}
0: }
============================================================================