1:508a010: /*
1:508a010: 
1:508a010:    Derby - Class org.apache.derby.impl.sql.execute.MergeConstantAction
1:508a010: 
1:508a010:    Licensed to the Apache Software Foundation (ASF) under one or more
1:508a010:    contributor license agreements.  See the NOTICE file distributed with
1:508a010:    this work for additional information regarding copyright ownership.
1:508a010:    The ASF licenses this file to you under the Apache License, Version 2.0
1:508a010:    (the "License"); you may not use this file except in compliance with
1:508a010:    the License.  You may obtain a copy of the License at
1:508a010: 
1:508a010:       http://www.apache.org/licenses/LICENSE-2.0
1:508a010: 
1:508a010:    Unless required by applicable law or agreed to in writing, software
1:508a010:    distributed under the License is distributed on an "AS IS" BASIS,
1:508a010:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:508a010:    See the License for the specific language governing permissions and
1:508a010:    limitations under the License.
1:508a010: 
1:508a010:  */
1:508a010: 
1:508a010: package org.apache.derby.impl.sql.execute;
1:508a010: 
1:508a010: import java.io.ObjectOutput;
1:508a010: import java.io.ObjectInput;
1:508a010: import java.io.IOException;
1:508a010: import org.apache.derby.iapi.error.StandardException;
1:508a010: import org.apache.derby.iapi.services.io.ArrayUtil;
1:508a010: import org.apache.derby.iapi.services.io.Formatable;
1:508a010: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:508a010: import org.apache.derby.iapi.sql.Activation;
1:508a010: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:508a010: import org.apache.derby.shared.common.sanity.SanityManager;
1:508a010: 
1:508a010: /**
1:508a010:  * Describes the execution machinery needed to evaluate a MERGE statement.
1:508a010:  */
1:508a010: public class MergeConstantAction implements ConstantAction, Formatable
1:508a010: {
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTANTS
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /**
1:508a010:      * Serial version produced by the serialver utility. Needed in order to
1:508a010:      * make serialization work reliably across different compilers.
1:508a010:      */
1:508a010:     //private static  final   long    serialVersionUID = -6725483265211088817L;
1:508a010: 
1:508a010:     // for versioning during (de)serialization
1:508a010:     private static final int FIRST_VERSION = 0;
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // STATE
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     // constructor args
1:508a010:     private MatchingClauseConstantAction[]  _matchingClauses;
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTRUCTOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:bff2571:     /** 0-arg constructor needed by Formatable machinery */
1:bff2571:     public  MergeConstantAction() {}
1:bff2571: 
1:508a010:     /**
1:508a010:      * Construct from thin air.
1:508a010:      *
1:508a010:      * @param   matchingClauses Constant actions for WHEN [ NOT ] MATCHED clauses.
1:508a010:      */
1:508a010:     public  MergeConstantAction
1:508a010:         (
1:508a010:          ConstantAction[] matchingClauses
1:508a010:          )
1:508a010:     {
1:508a010:         int     clauseCount = matchingClauses.length;
1:508a010:         _matchingClauses = new MatchingClauseConstantAction[ clauseCount ];
1:508a010:         for ( int i = 0; i < clauseCount; i++ )
1:508a010:         { _matchingClauses[ i ] = (MatchingClauseConstantAction) matchingClauses[ i ]; }
1:508a010:     }
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // ACCESSORS
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /** Get the number of matching clauses */
1:508a010:     public  int matchingClauseCount() { return _matchingClauses.length; }
1:508a010: 
1:508a010:     /** Get the ith (0-based) matching clause */
1:508a010:     public  MatchingClauseConstantAction  getMatchingClause( int idx )  { return _matchingClauses[ idx ]; }
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // ConstantAction BEHAVIOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010: 	public void	executeConstantAction( Activation activation )
1:508a010:         throws StandardException
1:508a010:     {}
1:508a010:     
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // Formatable BEHAVIOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010: 	/**
1:508a010: 	 * Read this object from a stream of stored objects.
1:508a010: 	 *
1:508a010: 	 * @param in read this.
1:508a010: 	 *
1:508a010: 	 * @exception IOException					thrown on error
1:508a010: 	 * @exception ClassNotFoundException		thrown on error
1:508a010: 	 */
1:508a010: 	public void readExternal( ObjectInput in )
1:508a010: 		 throws IOException, ClassNotFoundException
1:508a010: 	{
1:508a010:         // as the persistent form evolves, switch on this value
1:508a010:         int oldVersion = in.readInt();
1:508a010: 
1:508a010:         _matchingClauses = new MatchingClauseConstantAction[ in.readInt() ];
1:508a010:         for ( int i = 0; i < _matchingClauses.length; i++ )
1:508a010:         { _matchingClauses[ i ] = (MatchingClauseConstantAction) in.readObject(); }
1:508a010: 	}
1:508a010: 
1:508a010: 	/**
1:508a010: 	 * Write this object to a stream of stored objects.
1:508a010: 	 *
1:508a010: 	 * @param out write bytes here.
1:508a010: 	 *
1:508a010: 	 * @exception IOException		thrown on error
1:508a010: 	 */
1:508a010: 	public void writeExternal( ObjectOutput out )
1:508a010: 		 throws IOException
1:508a010: 	{
1:508a010: 		out.writeInt( FIRST_VERSION );
1:508a010: 
1:508a010:         out.writeInt( _matchingClauses.length );
1:508a010:         for ( int i = 0; i < _matchingClauses.length; i++ ) { out.writeObject( _matchingClauses[ i ] ); }
1:508a010: 	}
1:508a010:  
1:508a010: 	/**
1:508a010: 	 * Get the formatID which corresponds to this class.
1:508a010: 	 *
1:508a010: 	 *	@return	the formatID of this class
1:508a010: 	 */
1:508a010: 	public	int	getTypeFormatId()	{ return StoredFormatIds.MERGE_CONSTANT_ACTION_V01_ID; }
1:508a010: 
1:508a010: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bff2571
/////////////////////////////////////////////////////////////////////////
1:     /** 0-arg constructor needed by Formatable machinery */
1:     public  MergeConstantAction() {}
1: 
commit:508a010
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.MergeConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Describes the execution machinery needed to evaluate a MERGE statement.
1:  */
1: public class MergeConstantAction implements ConstantAction, Formatable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Serial version produced by the serialver utility. Needed in order to
1:      * make serialization work reliably across different compilers.
1:      */
1:     //private static  final   long    serialVersionUID = -6725483265211088817L;
1: 
1:     // for versioning during (de)serialization
1:     private static final int FIRST_VERSION = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // constructor args
1:     private MatchingClauseConstantAction[]  _matchingClauses;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct from thin air.
1:      *
1:      * @param   matchingClauses Constant actions for WHEN [ NOT ] MATCHED clauses.
1:      */
1:     public  MergeConstantAction
1:         (
1:          ConstantAction[] matchingClauses
1:          )
1:     {
1:         int     clauseCount = matchingClauses.length;
1:         _matchingClauses = new MatchingClauseConstantAction[ clauseCount ];
1:         for ( int i = 0; i < clauseCount; i++ )
1:         { _matchingClauses[ i ] = (MatchingClauseConstantAction) matchingClauses[ i ]; }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the number of matching clauses */
1:     public  int matchingClauseCount() { return _matchingClauses.length; }
1: 
1:     /** Get the ith (0-based) matching clause */
1:     public  MatchingClauseConstantAction  getMatchingClause( int idx )  { return _matchingClauses[ idx ]; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ConstantAction BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public void	executeConstantAction( Activation activation )
1:         throws StandardException
1:     {}
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Formatable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1:         // as the persistent form evolves, switch on this value
1:         int oldVersion = in.readInt();
1: 
1:         _matchingClauses = new MatchingClauseConstantAction[ in.readInt() ];
1:         for ( int i = 0; i < _matchingClauses.length; i++ )
1:         { _matchingClauses[ i ] = (MatchingClauseConstantAction) in.readObject(); }
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeInt( FIRST_VERSION );
1: 
1:         out.writeInt( _matchingClauses.length );
1:         for ( int i = 0; i < _matchingClauses.length; i++ ) { out.writeObject( _matchingClauses[ i ] ); }
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.MERGE_CONSTANT_ACTION_V01_ID; }
1: 
1: }
============================================================================