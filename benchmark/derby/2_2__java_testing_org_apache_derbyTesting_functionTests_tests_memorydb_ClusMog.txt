1:0d2840c: /*
1:0d2840c:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.ClusMog
1:0d2840c: 
1:0d2840c:    Licensed to the Apache Software Foundation (ASF) under one
1:0d2840c:    or more contributor license agreements.  See the NOTICE file
1:0d2840c:    distributed with this work for additional information
1:0d2840c:    regarding copyright ownership.  The ASF licenses this file
1:0d2840c:    to you under the Apache License, Version 2.0 (the
1:0d2840c:    "License"); you may not use this file except in compliance
1:0d2840c:    with the License.  You may obtain a copy of the License at
1:0d2840c: 
1:0d2840c:      http://www.apache.org/licenses/LICENSE-2.0
1:0d2840c: 
1:0d2840c:    Unless required by applicable law or agreed to in writing,
1:0d2840c:    software distributed under the License is distributed on an
1:0d2840c:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0d2840c:    KIND, either express or implied.  See the License for the
1:0d2840c:    specific language governing permissions and limitations
1:0d2840c:    under the License.
1:0d2840c:  */
1:0d2840c: 
1:0d2840c: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:0d2840c: 
1:0d2840c: import java.util.Arrays;
1:0d2840c: import java.util.Random;
1:0d2840c: import org.apache.derbyTesting.junit.BaseTestCase;
1:0d2840c: 
1:0d2840c: /**
1:0d2840c:  * Simple utility to compute/recover the parameters of a mixture-of-Gaussian
1:0d2840c:  * distribution from independent samples.
1:0d2840c:  */
1:0d2840c: public class ClusMog
1:0d2840c: {
1:0d2840c:   /** default constructor */
1:0d2840c:   public ClusMog() {}
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Compute/recover the parameters of a mixture-of-Gaussian distribution
1:0d2840c:    * from given independent samples.
1:0d2840c:    * @param n number of clusters (Gaussian components) to output
1:f619a13:    * @param center initial cluster centers for iterative refinement
1:0d2840c:    * @param ns number of input samples
1:0d2840c:    * @param sample input samples; will be sorted in ascending order during use
1:0d2840c:    */
1:0d2840c:   public void cluster(int n, double center[], int ns, double sample[])
1:0d2840c:   {
1:0d2840c:     // Record input parameters.
1:0d2840c:     setCenters(n, center);
1:0d2840c:     setSamples(ns, sample);
1:0d2840c:     // Initialize EM iterations.
1:0d2840c:     initEM();
1:0d2840c:     // Perform EM iterations until convergence.
1:0d2840c:     final double thresh = 1.0e-6;
1:0d2840c:     double oldmsr = Double.MAX_VALUE;
1:0d2840c:     for (int it=1;; ++it) {
1:0d2840c:       // one EM iteration
1:0d2840c:       expectation();
1:0d2840c:       maximization();
1:0d2840c:       // Check for convergence.
1:0d2840c:       final double msr = measure();
1:0d2840c:       final double dif = Math.abs(msr - oldmsr);
1:0d2840c:       final double err = dif / (1.0 + oldmsr);
1:0d2840c:       oldmsr = msr;
1:0d2840c:       if (err < thresh) { break; }
1:0d2840c:     }
1:0d2840c:     // Compute cluster weights.
1:0d2840c:     computeWeights();
1:0d2840c: 
1:0d2840c:     // diagnostic messages
1:0d2840c:     printMog("JAVA-COMPUTED", n, weight, mean, var);
1:0d2840c:     BaseTestCase.println("msr = (" + oldmsr + ")");
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Compute an initial configuration of cluster centers uniformly spaced
1:0d2840c:    * over the range of the input samples, for subsequent iterative refinement.
1:0d2840c:    * @param n number of clusters to output
1:0d2840c:    * @param center initial uniform cluster centers to compute
1:0d2840c:    * @param ns number of input samples
1:0d2840c:    * @param sample array of input samples
1:0d2840c:    */
1:0d2840c:   public static void uniform(int n, double center[], int ns, double sample[])
1:0d2840c:   {
1:0d2840c:     double min_x = Double.MAX_VALUE, max_x = -Double.MAX_VALUE;
1:0d2840c:     for (int i=0; i<ns; ++i) {
1:0d2840c:       final double x = sample[i];
1:0d2840c:       if (min_x > x) { min_x = x; }
1:0d2840c:       if (max_x < x) { max_x = x; }
1:0d2840c:     }
1:0d2840c: 
1:0d2840c:     final double length = max_x - min_x;
1:0d2840c:     final double increment = length / n;
1:0d2840c:     center[0] = increment / 2;
1:0d2840c:     for (int i=1; i<n; ++i) { center[i] = center[i-1] + increment; }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Compute an initial configuration of cluster centers uniformly distributed
1:0d2840c:    * over the range of the input samples, for subsequent iterative refinement.
1:0d2840c:    * @param n number of clusters to output
1:0d2840c:    * @param center initial uniform cluster centers to compute
1:0d2840c:    * @param ns number of input samples
1:0d2840c:    * @param sample array of input samples
1:0d2840c:    * @param rng random number generator
1:0d2840c:    */
1:0d2840c:   public static void random(int n, double center[], int ns, double sample[],
1:0d2840c:                             Random rng)
1:0d2840c:   {
1:0d2840c:     double min_x = Double.MAX_VALUE, max_x = -Double.MAX_VALUE;
1:0d2840c:     for (int i=0; i<ns; ++i) {
1:0d2840c:       final double x = sample[i];
1:0d2840c:       if (min_x > x) { min_x = x; }
1:0d2840c:       if (max_x < x) { max_x = x; }
1:0d2840c:     }
1:0d2840c: 
1:0d2840c:     final double length = max_x - min_x;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final double r = rng.nextDouble();
1:0d2840c:       final double x = min_x + r * length;
1:0d2840c:       center[i] = x;
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Initialize cluster centers for EM iterations. */
1:0d2840c:   void setCenters(int n, double center[])
1:0d2840c:   {
1:0d2840c:     if (1 <= n && n <= max_n) {
1:0d2840c:       this.n = n;
1:0d2840c:       System.arraycopy(center, 0, mean, 0, n);
1:0d2840c:     }
1:0d2840c:     else {
1:0d2840c:       final String msg =
1:0d2840c:         "Number of Gaussian components (" + n + ") not in [1, " + max_n + "].";
1:0d2840c:       throw new IllegalArgumentException(msg);
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Specify the input samples to work with. */
1:0d2840c:   void setSamples(int ns, double sample[])
1:0d2840c:   {
1:0d2840c:     final int min_sample_size = n * min_sample_size_per_cluster;
1:0d2840c:     if (ns >= min_sample_size) {
1:0d2840c:       this.ns = ns;
1:0d2840c:       this.sample = sample;
1:0d2840c:     }
1:0d2840c:     else {
1:0d2840c:       final String msg =
1:0d2840c:         "Insufficient sample size (" + ns + " < " + min_sample_size + ").";
1:0d2840c:       throw new IllegalArgumentException(msg);
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Initialize the EM (expectation-maximization) iterations. */
1:0d2840c:   void initEM()
1:0d2840c:   {
1:0d2840c:     // Sort the input samples in ascending order.
1:0d2840c:     Arrays.sort(sample, 0, ns);
1:0d2840c:     // Sort the initial cluster centers in ascending order.
1:0d2840c:     Arrays.sort(mean, 0, n);
1:0d2840c:     // Initialize the cluster brackets.
1:0d2840c:     maximization();
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** (Re-)compute cluster centers while holding cluster brackets fixed. */
1:0d2840c:   void expectation()
1:0d2840c:   {
1:0d2840c:     // Remove empty clusters.
1:0d2840c:     for (int i=0, j=1;;) {
1:0d2840c:       // Examine the value at the current location.
1:0d2840c:       final int bi = bracket[i];
1:0d2840c:       // Locate the next larger value.
1:0d2840c:       for (; j<n; ++j) {
1:0d2840c:         final int bj = bracket[j];
1:0d2840c:         if (bi < bj) {
1:0d2840c:           // Move the larger value up to be adjacent to current value.
1:0d2840c:           bracket[i+1] = bj;
1:0d2840c:           // Advance loop variables.
1:0d2840c:           ++i;  ++j;  break;
1:0d2840c:         }
1:0d2840c:       }
1:0d2840c:       // Check for loop termination.
1:0d2840c:       if (j >= n) { n = i+1;  break; }
1:0d2840c:     }
1:0d2840c: 
1:0d2840c:     // Compute cluster parameters.
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final int ini = bracket[i];
1:0d2840c:       final int lim = bracket[i+1];
1:0d2840c:       final int nb = (lim - ini);
1:0d2840c:       // Computer cluster mean.
1:0d2840c:       double sum = 0.0;
1:0d2840c:       for (int j=ini; j<lim; ++j) {
1:0d2840c:         final double x = sample[j];
1:0d2840c:         sum += x;
1:0d2840c:       }
1:0d2840c:       final double m = (sum / nb);
1:0d2840c:       mean[i] = m;
1:0d2840c:       // Compute cluster variance.
1:0d2840c:       sum = 0.0;
1:0d2840c:       for (int j=ini; j<lim; ++j) {
1:0d2840c:         final double x = sample[j];
1:0d2840c:         final double d = x - m;
1:0d2840c:         sum += d * d;
1:0d2840c:       }
1:0d2840c:       final double v = ((nb > 1) ? (sum / (nb-1)) : 0.0);
1:0d2840c:       var[i] = v;
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** (Re-)compute cluster brackets while holding cluster centers fixed. */
1:0d2840c:   void maximization()
1:0d2840c:   {
1:0d2840c:     bracket[0] = 0;
1:0d2840c:     for (int i=1; i<n; ++i) {
1:0d2840c:       final double mlo = mean[i-1];
1:0d2840c:       final double mhi = mean[i];
1:0d2840c:       // Compute the dividing point between clusters (i-1) and (i).
1:0d2840c:       int lo = bracket[i-1], hi = ns;
1:0d2840c:       while (lo < (hi-1)) {
1:0d2840c:         final int mid = (lo + hi) >> 1;
1:0d2840c:         final double sam = sample[mid];
1:0d2840c:         final double dlo = Math.abs(sam - mlo);
1:0d2840c:         final double dhi = Math.abs(mhi - sam);
1:0d2840c:         if (dlo < dhi) { lo = mid; } else { hi = mid; }
1:0d2840c:       }
1:0d2840c:       bracket[i] = hi;
1:0d2840c:     }
1:0d2840c:     bracket[n] = ns;
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Compute a measure of total quantization error. */
1:0d2840c:   double measure()
1:0d2840c:   {
1:0d2840c:     double sum = 0.0;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final int ini = bracket[i];
1:0d2840c:       final int lim = bracket[i+1];
1:0d2840c:       final int nb = lim - ini;
1:0d2840c:       final double v = var[i];
1:0d2840c:       sum += v * (nb-1);
1:0d2840c:     }
1:0d2840c:     sum /= ns;
1:0d2840c:     return sum;
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Compute cluster weights. */
1:0d2840c:   void computeWeights()
1:0d2840c:   {
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final int ini = bracket[i];
1:0d2840c:       final int lim = bracket[i+1];
1:0d2840c:       final int siz = lim - ini;
1:0d2840c:       final double wt = ((ns > 0) ? ((double) siz / (double) ns) : 0.0);
1:0d2840c:       weight[i] = wt;
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Print out the clustering configuration. */
1:0d2840c:   void printMog(String label, int n, double weight[], double mean[], double var[])
1:0d2840c:   {
1:0d2840c:     BaseTestCase.println(label + ": n = " + n);
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       BaseTestCase.println("(w, m, v) = (" +
1:0d2840c:               weight[i] + ", " + mean[i] + ", " + var[i] + ")");
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** maximum number of Gaussian components */
1:0d2840c:   public final static int max_n = 6;
1:0d2840c: 
1:0d2840c:   /** actual number of Gaussian components */
1:0d2840c:   public int n = 0;
1:0d2840c:   /** weights associated with the Gaussian components */
1:0d2840c:   public final double weight[] = new double[max_n];
1:0d2840c:   /** mean parameters for the Gaussian components */
1:0d2840c:   public final double mean[] = new double[max_n];
1:0d2840c:   /** variance parameters for the Gaussian components */
1:0d2840c:   public final double var[] = new double[max_n];
1:0d2840c: 
1:0d2840c:   /** cluster brackets on the input samples */
1:0d2840c:   protected int bracket[] = new int[max_n+1];
1:0d2840c:   /** number of input samples */
1:0d2840c:   protected int ns = 0;
1:0d2840c:   /** array of input samples */
1:0d2840c:   protected double sample[] = null;
1:0d2840c: 
1:0d2840c:   /** minimum sample size per output cluster */
1:0d2840c:   public static final int min_sample_size_per_cluster = 32;
1:0d2840c: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f619a13
/////////////////////////////////////////////////////////////////////////
1:    * @param center initial cluster centers for iterative refinement
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0d2840c
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.ClusMog
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import java.util.Arrays;
1: import java.util.Random;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Simple utility to compute/recover the parameters of a mixture-of-Gaussian
1:  * distribution from independent samples.
1:  */
1: public class ClusMog
1: {
1:   /** default constructor */
1:   public ClusMog() {}
1: 
1:   /**
1:    * Compute/recover the parameters of a mixture-of-Gaussian distribution
1:    * from given independent samples.
1:    * @param n number of clusters (Gaussian components) to output
0:    * @param mean initial cluster centers for iterative refinement
1:    * @param ns number of input samples
1:    * @param sample input samples; will be sorted in ascending order during use
1:    */
1:   public void cluster(int n, double center[], int ns, double sample[])
1:   {
1:     // Record input parameters.
1:     setCenters(n, center);
1:     setSamples(ns, sample);
1:     // Initialize EM iterations.
1:     initEM();
1:     // Perform EM iterations until convergence.
1:     final double thresh = 1.0e-6;
1:     double oldmsr = Double.MAX_VALUE;
1:     for (int it=1;; ++it) {
1:       // one EM iteration
1:       expectation();
1:       maximization();
1:       // Check for convergence.
1:       final double msr = measure();
1:       final double dif = Math.abs(msr - oldmsr);
1:       final double err = dif / (1.0 + oldmsr);
1:       oldmsr = msr;
1:       if (err < thresh) { break; }
1:     }
1:     // Compute cluster weights.
1:     computeWeights();
1: 
1:     // diagnostic messages
1:     printMog("JAVA-COMPUTED", n, weight, mean, var);
1:     BaseTestCase.println("msr = (" + oldmsr + ")");
1:   }
1: 
1:   /**
1:    * Compute an initial configuration of cluster centers uniformly spaced
1:    * over the range of the input samples, for subsequent iterative refinement.
1:    * @param n number of clusters to output
1:    * @param center initial uniform cluster centers to compute
1:    * @param ns number of input samples
1:    * @param sample array of input samples
1:    */
1:   public static void uniform(int n, double center[], int ns, double sample[])
1:   {
1:     double min_x = Double.MAX_VALUE, max_x = -Double.MAX_VALUE;
1:     for (int i=0; i<ns; ++i) {
1:       final double x = sample[i];
1:       if (min_x > x) { min_x = x; }
1:       if (max_x < x) { max_x = x; }
1:     }
1: 
1:     final double length = max_x - min_x;
1:     final double increment = length / n;
1:     center[0] = increment / 2;
1:     for (int i=1; i<n; ++i) { center[i] = center[i-1] + increment; }
1:   }
1: 
1:   /**
1:    * Compute an initial configuration of cluster centers uniformly distributed
1:    * over the range of the input samples, for subsequent iterative refinement.
1:    * @param n number of clusters to output
1:    * @param center initial uniform cluster centers to compute
1:    * @param ns number of input samples
1:    * @param sample array of input samples
1:    * @param rng random number generator
1:    */
1:   public static void random(int n, double center[], int ns, double sample[],
1:                             Random rng)
1:   {
1:     double min_x = Double.MAX_VALUE, max_x = -Double.MAX_VALUE;
1:     for (int i=0; i<ns; ++i) {
1:       final double x = sample[i];
1:       if (min_x > x) { min_x = x; }
1:       if (max_x < x) { max_x = x; }
1:     }
1: 
1:     final double length = max_x - min_x;
1:     for (int i=0; i<n; ++i) {
1:       final double r = rng.nextDouble();
1:       final double x = min_x + r * length;
1:       center[i] = x;
1:     }
1:   }
1: 
1:   /** Initialize cluster centers for EM iterations. */
1:   void setCenters(int n, double center[])
1:   {
1:     if (1 <= n && n <= max_n) {
1:       this.n = n;
1:       System.arraycopy(center, 0, mean, 0, n);
1:     }
1:     else {
1:       final String msg =
1:         "Number of Gaussian components (" + n + ") not in [1, " + max_n + "].";
1:       throw new IllegalArgumentException(msg);
1:     }
1:   }
1: 
1:   /** Specify the input samples to work with. */
1:   void setSamples(int ns, double sample[])
1:   {
1:     final int min_sample_size = n * min_sample_size_per_cluster;
1:     if (ns >= min_sample_size) {
1:       this.ns = ns;
1:       this.sample = sample;
1:     }
1:     else {
1:       final String msg =
1:         "Insufficient sample size (" + ns + " < " + min_sample_size + ").";
1:       throw new IllegalArgumentException(msg);
1:     }
1:   }
1: 
1:   /** Initialize the EM (expectation-maximization) iterations. */
1:   void initEM()
1:   {
1:     // Sort the input samples in ascending order.
1:     Arrays.sort(sample, 0, ns);
1:     // Sort the initial cluster centers in ascending order.
1:     Arrays.sort(mean, 0, n);
1:     // Initialize the cluster brackets.
1:     maximization();
1:   }
1: 
1:   /** (Re-)compute cluster centers while holding cluster brackets fixed. */
1:   void expectation()
1:   {
1:     // Remove empty clusters.
1:     for (int i=0, j=1;;) {
1:       // Examine the value at the current location.
1:       final int bi = bracket[i];
1:       // Locate the next larger value.
1:       for (; j<n; ++j) {
1:         final int bj = bracket[j];
1:         if (bi < bj) {
1:           // Move the larger value up to be adjacent to current value.
1:           bracket[i+1] = bj;
1:           // Advance loop variables.
1:           ++i;  ++j;  break;
1:         }
1:       }
1:       // Check for loop termination.
1:       if (j >= n) { n = i+1;  break; }
1:     }
1: 
1:     // Compute cluster parameters.
1:     for (int i=0; i<n; ++i) {
1:       final int ini = bracket[i];
1:       final int lim = bracket[i+1];
1:       final int nb = (lim - ini);
1:       // Computer cluster mean.
1:       double sum = 0.0;
1:       for (int j=ini; j<lim; ++j) {
1:         final double x = sample[j];
1:         sum += x;
1:       }
1:       final double m = (sum / nb);
1:       mean[i] = m;
1:       // Compute cluster variance.
1:       sum = 0.0;
1:       for (int j=ini; j<lim; ++j) {
1:         final double x = sample[j];
1:         final double d = x - m;
1:         sum += d * d;
1:       }
1:       final double v = ((nb > 1) ? (sum / (nb-1)) : 0.0);
1:       var[i] = v;
1:     }
1:   }
1: 
1:   /** (Re-)compute cluster brackets while holding cluster centers fixed. */
1:   void maximization()
1:   {
1:     bracket[0] = 0;
1:     for (int i=1; i<n; ++i) {
1:       final double mlo = mean[i-1];
1:       final double mhi = mean[i];
1:       // Compute the dividing point between clusters (i-1) and (i).
1:       int lo = bracket[i-1], hi = ns;
1:       while (lo < (hi-1)) {
1:         final int mid = (lo + hi) >> 1;
1:         final double sam = sample[mid];
1:         final double dlo = Math.abs(sam - mlo);
1:         final double dhi = Math.abs(mhi - sam);
1:         if (dlo < dhi) { lo = mid; } else { hi = mid; }
1:       }
1:       bracket[i] = hi;
1:     }
1:     bracket[n] = ns;
1:   }
1: 
1:   /** Compute a measure of total quantization error. */
1:   double measure()
1:   {
1:     double sum = 0.0;
1:     for (int i=0; i<n; ++i) {
1:       final int ini = bracket[i];
1:       final int lim = bracket[i+1];
1:       final int nb = lim - ini;
1:       final double v = var[i];
1:       sum += v * (nb-1);
1:     }
1:     sum /= ns;
1:     return sum;
1:   }
1: 
1:   /** Compute cluster weights. */
1:   void computeWeights()
1:   {
1:     for (int i=0; i<n; ++i) {
1:       final int ini = bracket[i];
1:       final int lim = bracket[i+1];
1:       final int siz = lim - ini;
1:       final double wt = ((ns > 0) ? ((double) siz / (double) ns) : 0.0);
1:       weight[i] = wt;
1:     }
1:   }
1: 
1:   /** Print out the clustering configuration. */
1:   void printMog(String label, int n, double weight[], double mean[], double var[])
1:   {
1:     BaseTestCase.println(label + ": n = " + n);
1:     for (int i=0; i<n; ++i) {
1:       BaseTestCase.println("(w, m, v) = (" +
1:               weight[i] + ", " + mean[i] + ", " + var[i] + ")");
1:     }
1:   }
1: 
1:   /** maximum number of Gaussian components */
1:   public final static int max_n = 6;
1: 
1:   /** actual number of Gaussian components */
1:   public int n = 0;
1:   /** weights associated with the Gaussian components */
1:   public final double weight[] = new double[max_n];
1:   /** mean parameters for the Gaussian components */
1:   public final double mean[] = new double[max_n];
1:   /** variance parameters for the Gaussian components */
1:   public final double var[] = new double[max_n];
1: 
1:   /** cluster brackets on the input samples */
1:   protected int bracket[] = new int[max_n+1];
1:   /** number of input samples */
1:   protected int ns = 0;
1:   /** array of input samples */
1:   protected double sample[] = null;
1: 
1:   /** minimum sample size per output cluster */
1:   public static final int min_sample_size_per_cluster = 32;
1: }
============================================================================