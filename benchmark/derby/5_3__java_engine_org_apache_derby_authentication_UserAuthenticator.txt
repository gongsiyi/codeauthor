1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.authentication.UserAuthenticator
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.authentication;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * The UserAuthenticator interface provides operations to authenticate
1:eac0369:  * a user's credentials in order to successfully connect to a database.
1:eac0369:  * 
1:eac0369:  * Any user authentication schemes could be implemented using this interface
1:eac0369:  * and registered at start-up time.
1:eac0369:  * <p>
1:eac0369:  * If an application requires its own authentication scheme, then it can
1:eac0369:  * implement this interface and register as the authentication scheme
1:cd065ba:  * that Derby should call upon connection requests to the system.
1:eac0369:    See the dcoumentation for the property <I>derby.authentication.provider</I>
1:eac0369:  * <p>
1:eac0369:  * A typical example would be to implement user authentication using
1:eac0369:  * LDAP, Sun NIS+, or even Windows User Domain, using this interface.
1:eac0369:  * <p>
1:3374162:  * <i>Note</i>: Additional connection attributes can be specified on the 
1:3374162:  * database connection URL and/or Properties object on jdbc connection. Values
1:eac0369:  * for these attributes can be retrieved at runtime by the (specialized)
1:eac0369:  * authentication scheme to further help user authentication, if one needs
1:eac0369:  * additional info other than user, password, and database name.
1:eac0369:  *
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface UserAuthenticator
1:eac0369: {
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Authenticate a user's credentials.
1:3374162:      * <BR>
1:3374162:      * E.g. if connection url is 
1:a5f9148:      * <code>jdbc:derby:testdb;user=Fred;password=ScT7dmM2</code>
1:a5f9148:      * then the userName will be Fred and within the Derby user authorization 
1:a5f9148:      * system, Fred becomes a case-insensitive authorization identifier and 
1:a5f9148:      * is known as FRED
1:3374162:      *<BR>
1:3374162:      * if connection url is 
1:a5f9148:      * <code>jdbc:derby:testdb;user="Fred";password=ScT7dmM2</code>
1:a5f9148:      * then the userName will be "Fred" and within the Derby user authorization
1:a5f9148:      * system, Fred becomes a case-sensitive authorization identifier and is
1:a5f9148:      * known as Fred
1:3374162:      * <BR>
1:eac0369: 	 *
1:3374162: 	 * @param userName		The user's name for the connection request. May be 
1:3374162:      *                      null.  The user name is passed in as is from the 
1:a5f9148:      *                      connection request.
1:a5f9148:      *                      Derby will pass in the user name that is set on
1:a5f9148:      *                      connection request as is, without changing the 
1:a5f9148:      *                      casing and without removing the delimiter quotes 
1:a5f9148:      *                      if any.
1:3374162:      *
1:3374162: 	 * @param userPassword	The user's password for the connection request. 
1:3374162:      *                      May be null.
1:3374162:      *
1:eac0369: 	 * @param databaseName	The database that the user wants to connect to.
1:eac0369: 	 *						Will be null if this is system level authentication.
1:3374162:      *
1:3374162: 	 * @param info			A Properties object that contains additional 
1:3374162:      *                      connection information, that can help to 
1:3374162:      *                      authenticate the user. It has properties of the 
1:3374162:      *                      'info' object passed as part of 
1:3374162:      *                      DriverManager.getConnection() call and any 
1:3374162:      *                      attributes set on the JDBC URL.
1:3374162:      *
1:3374162:      * @return	false if the connection request should be denied, true if the 
1:3374162:      *          connection request should proceed.  If false is returned the 
1:3374162:      *          connection attempt will receive a SQLException with SQL State 
1:3374162:      *          08004.
1:eac0369: 	 *
1:3374162: 	 * @exception java.sql.SQLException An exception processing the request, 
1:3374162:      *            connection request will be denied.  The SQL exception will 
1:3374162:      *            be returned to the connection attempt.
1:eac0369: 	 */
1:eac0369: 	public boolean	authenticateUser(String userName,
1:eac0369: 								 String userPassword,
1:eac0369: 								 String databaseName,
1:eac0369: 								 Properties info
1:eac0369: 								)
1:eac0369: 		throws SQLException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
1:  * that Derby should call upon connection requests to the system.
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:a5f9148
/////////////////////////////////////////////////////////////////////////
1:      * <code>jdbc:derby:testdb;user=Fred;password=ScT7dmM2</code>
1:      * then the userName will be Fred and within the Derby user authorization 
1:      * system, Fred becomes a case-insensitive authorization identifier and 
1:      * is known as FRED
1:      * <code>jdbc:derby:testdb;user="Fred";password=ScT7dmM2</code>
1:      * then the userName will be "Fred" and within the Derby user authorization
1:      * system, Fred becomes a case-sensitive authorization identifier and is
1:      * known as Fred
1:      *                      connection request.
1:      *                      Derby will pass in the user name that is set on
1:      *                      connection request as is, without changing the 
1:      *                      casing and without removing the delimiter quotes 
1:      *                      if any.
commit:3374162
/////////////////////////////////////////////////////////////////////////
1:  * <i>Note</i>: Additional connection attributes can be specified on the 
1:  * database connection URL and/or Properties object on jdbc connection. Values
/////////////////////////////////////////////////////////////////////////
1:      * <BR>
1:      * E.g. if connection url is 
0:      * <code>jdbc:derby:testdb;create=true;user=Fred;password=p</code>
0:      * then the userName will be Fred
1:      *<BR>
1:      * if connection url is 
0:      * <code>jdbc:derby:testdb;create=true;user="Fred";password=p</code>
0:      * then the userName will be "Fred"
1:      * <BR>
1: 	 * @param userName		The user's name for the connection request. May be 
1:      *                      null.  The user name is passed in as is from the 
0:      *                      connection url.  For example if user attribute 
0:      *                      value in connection url is delimited with quotes, 
0:      *                      then the userName passed here will also have the 
0:      *                      delimiter quotes. Derby will pass in the user name 
0:      *                      that is set on connection url, without changing the
0:      *                      casing. 
1:      *
1: 	 * @param userPassword	The user's password for the connection request. 
1:      *                      May be null.
1:      *
1:      *
1: 	 * @param info			A Properties object that contains additional 
1:      *                      connection information, that can help to 
1:      *                      authenticate the user. It has properties of the 
1:      *                      'info' object passed as part of 
1:      *                      DriverManager.getConnection() call and any 
1:      *                      attributes set on the JDBC URL.
1:      *
1:      * @return	false if the connection request should be denied, true if the 
1:      *          connection request should proceed.  If false is returned the 
1:      *          connection attempt will receive a SQLException with SQL State 
1:      *          08004.
1: 	 * @exception java.sql.SQLException An exception processing the request, 
1:      *            connection request will be denied.  The SQL exception will 
1:      *            be returned to the connection attempt.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.authentication.UserAuthenticator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.authentication;
1: 
1: import java.util.Properties;
1: import java.sql.SQLException;
1: 
1: /**
1:  * The UserAuthenticator interface provides operations to authenticate
1:  * a user's credentials in order to successfully connect to a database.
1:  * 
1:  * Any user authentication schemes could be implemented using this interface
1:  * and registered at start-up time.
1:  * <p>
1:  * If an application requires its own authentication scheme, then it can
1:  * implement this interface and register as the authentication scheme
0:  * that Cloudscape should call upon connection requests to the system.
1:    See the dcoumentation for the property <I>derby.authentication.provider</I>
1:  * <p>
1:  * A typical example would be to implement user authentication using
1:  * LDAP, Sun NIS+, or even Windows User Domain, using this interface.
1:  * <p>
0:  * <i>Note</i>: Additional connection attributes can be specified on the database
0:  * connection URL and/or Properties object on jdbc connection. Values
1:  * for these attributes can be retrieved at runtime by the (specialized)
1:  * authentication scheme to further help user authentication, if one needs
1:  * additional info other than user, password, and database name.
1:  *
1:  *
1:  */
1: 
1: public interface UserAuthenticator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 	/**
1: 	 * Authenticate a user's credentials.
1: 	 *
0: 	 * @param userName		The user's name for the connection request. May be null.
0: 	 * @param userPassword	The user's password for the connection request. May be null.
1: 	 * @param databaseName	The database that the user wants to connect to.
1: 	 *						Will be null if this is system level authentication.
0: 	 * @param info			A Properties object that contains additional
0: 	 * connection information, that can help to authenticate the user. It
0: 	 * has properties of the 'info' object passed as part of
0: 	 * DriverManager.getConnection() call and any
0: 	 * attributes set on the JDBC URL.
1: 
0: 		@return	false if the connection request should be denied, true if the connection request should proceed.
0: 		If false is returned the connection attempt will receive a SQLException with SQL State 08004.
1: 	 *
0: 	 * @exception java.sql.SQLException An exception processing the request, connection request will be denied.
0: 		The SQL exception will be returned to the connection attempt.
1: 	 */
1: 	public boolean	authenticateUser(String userName,
1: 								 String userPassword,
1: 								 String databaseName,
1: 								 Properties info
1: 								)
1: 		throws SQLException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.authentication;
0: 
0: import java.util.Properties;
0: import java.sql.SQLException;
0: 
0: /**
0:  * The UserAuthenticator interface provides operations to authenticate
0:  * a user's credentials in order to successfully connect to a database.
0:  * 
0:  * Any user authentication schemes could be implemented using this interface
0:  * and registered at start-up time.
0:  * <p>
0:  * If an application requires its own authentication scheme, then it can
0:  * implement this interface and register as the authentication scheme
0:  * that Cloudscape should call upon connection requests to the system.
0:    See the dcoumentation for the property <I>derby.authentication.provider</I>
0:  * <p>
0:  * A typical example would be to implement user authentication using
0:  * LDAP, Sun NIS+, or even Windows User Domain, using this interface.
0:  * <p>
0:  * <i>Note</i>: Additional connection attributes can be specified on the database
0:  * connection URL and/or Properties object on jdbc connection. Values
0:  * for these attributes can be retrieved at runtime by the (specialized)
0:  * authentication scheme to further help user authentication, if one needs
0:  * additional info other than user, password, and database name.
0:  *
0:  *
0:  */
0: 
0: public interface UserAuthenticator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 	/**
0: 	 * Authenticate a user's credentials.
0: 	 *
0: 	 * @param userName		The user's name for the connection request. May be null.
0: 	 * @param userPassword	The user's password for the connection request. May be null.
0: 	 * @param databaseName	The database that the user wants to connect to.
0: 	 *						Will be null if this is system level authentication.
0: 	 * @param info			A Properties object that contains additional
0: 	 * connection information, that can help to authenticate the user. It
0: 	 * has properties of the 'info' object passed as part of
0: 	 * DriverManager.getConnection() call and any
0: 	 * attributes set on the JDBC URL.
0: 
0: 		@return	false if the connection request should be denied, true if the connection request should proceed.
0: 		If false is returned the connection attempt will receive a SQLException with SQL State 08004.
0: 	 *
0: 	 * @exception java.sql.SQLException An exception processing the request, connection request will be denied.
0: 		The SQL exception will be returned to the connection attempt.
0: 	 */
0: 	public boolean	authenticateUser(String userName,
0: 								 String userPassword,
0: 								 String databaseName,
0: 								 Properties info
0: 								)
0: 		throws SQLException;
0: }
============================================================================