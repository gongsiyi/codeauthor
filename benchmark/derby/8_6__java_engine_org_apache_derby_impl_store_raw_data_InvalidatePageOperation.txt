1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.InvalidatePageOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Represents invalidating a page due to deallocation.  
1:eac0369: 	This operation invalidates the page that is being deallocated, as opposed
1:eac0369: 	to deallocatePage that happens on the alloc page.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_INVALIDATE_PAGE
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	invalidate a page
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PhysicalPageOperation the superclass
1:eac0369: 		OptionalData	none
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: */
1:eac0369: public final class InvalidatePageOperation extends PhysicalPageOperation
1:eac0369: {
1:3546404:     InvalidatePageOperation(BasePage page)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public InvalidatePageOperation() { super(); }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * If this page can be reused in the same transaction (of if committed
1:eac0369: 	 * transaction needs to be undone, then we need the before image of the
1:eac0369: 	 * page.  Right now, the transaction that deallocate a page must commit
1:eac0369: 	 * before the page can be freed and reused, so we don't need to log the 
1:eac0369: 	 * before image of the page
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		// RESOLVE: may need to write out the page BI, see comment above
1:eac0369: 		super.writeExternal(out);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_INVALIDATE_PAGE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		Mark the page as being invalidated
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		this.page.setPageStatus(instant, BasePage.INVALID_PAGE);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PhysicalPageOperation
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Mark the page as being valid
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@exception IOException Thrown by methods I call
1:eac0369: 
1:eac0369: 		@see PhysicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1:eac0369: 					   LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoPage.setPageStatus(CLRInstant, BasePage.VALID_PAGE);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PageBasicOperation
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoMe(xact, undoPage, CLRInstant, in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			return super.toString() + "Invalidate Page - it has been deallocated";
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     InvalidatePageOperation(BasePage page)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_INVALIDATE_PAGE
1: 	@derby.purpose	invalidate a page
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.InvalidatePageOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	Represents invalidating a page due to deallocation.  
1: 	This operation invalidates the page that is being deallocated, as opposed
1: 	to deallocatePage that happens on the alloc page.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_INVALIDATE_PAGE
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	invalidate a page
0: 	@upgrade
0: 	@disk_layout
1: 		PhysicalPageOperation the superclass
1: 		OptionalData	none
0: 	@end_format
1: 	</PRE>
1: */
1: public final class InvalidatePageOperation extends PhysicalPageOperation
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public InvalidatePageOperation(BasePage page)
1: 	{
1: 		super(page);
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public InvalidatePageOperation() { super(); }
1: 
1: 
1: 	/*
1: 	 * If this page can be reused in the same transaction (of if committed
1: 	 * transaction needs to be undone, then we need the before image of the
1: 	 * page.  Right now, the transaction that deallocate a page must commit
1: 	 * before the page can be freed and reused, so we don't need to log the 
1: 	 * before image of the page
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		// RESOLVE: may need to write out the page BI, see comment above
1: 		super.writeExternal(out);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_INVALIDATE_PAGE;
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		Mark the page as being invalidated
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		this.page.setPageStatus(instant, BasePage.INVALID_PAGE);
1: 	}
1: 
1: 	/*
1: 	 * PhysicalPageOperation
1: 	 */
1: 
1: 	/**
1: 		Mark the page as being valid
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@exception IOException Thrown by methods I call
1: 
1: 		@see PhysicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
1: 					   LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoPage.setPageStatus(CLRInstant, BasePage.VALID_PAGE);
1: 	}
1: 
1: 
1: 	/*
1: 	 * PageBasicOperation
1: 	 */
1: 
1: 	/**
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 	public void restoreMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoMe(xact, undoPage, CLRInstant, in);
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			return super.toString() + "Invalidate Page - it has been deallocated";
1: 		else
1: 			return null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	Represents invalidating a page due to deallocation.  
0: 	This operation invalidates the page that is being deallocated, as opposed
0: 	to deallocatePage that happens on the alloc page.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_INVALIDATE_PAGE
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	invalidate a page
0: 	@upgrade
0: 	@disk_layout
0: 		PhysicalPageOperation the superclass
0: 		OptionalData	none
0: 	@end_format
0: 	</PRE>
0: */
0: public final class InvalidatePageOperation extends PhysicalPageOperation
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public InvalidatePageOperation(BasePage page)
0: 	{
0: 		super(page);
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public InvalidatePageOperation() { super(); }
0: 
0: 
0: 	/*
0: 	 * If this page can be reused in the same transaction (of if committed
0: 	 * transaction needs to be undone, then we need the before image of the
0: 	 * page.  Right now, the transaction that deallocate a page must commit
0: 	 * before the page can be freed and reused, so we don't need to log the 
0: 	 * before image of the page
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		// RESOLVE: may need to write out the page BI, see comment above
0: 		super.writeExternal(out);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_INVALIDATE_PAGE;
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		Mark the page as being invalidated
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		this.page.setPageStatus(instant, BasePage.INVALID_PAGE);
0: 	}
0: 
0: 	/*
0: 	 * PhysicalPageOperation
0: 	 */
0: 
0: 	/**
0: 		Mark the page as being valid
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@exception IOException Thrown by methods I call
0: 
0: 		@see PhysicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage, LogInstant CLRInstant, 
0: 					   LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoPage.setPageStatus(CLRInstant, BasePage.VALID_PAGE);
0: 	}
0: 
0: 
0: 	/*
0: 	 * PageBasicOperation
0: 	 */
0: 
0: 	/**
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 	public void restoreMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoMe(xact, undoPage, CLRInstant, in);
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			return super.toString() + "Invalidate Page - it has been deallocated";
0: 		else
0: 			return null;
0: 	}
0: 
0: }
============================================================================