1:044afae: /*
4:044afae: 
1:044afae:    Derby - Class org.apache.derby.impl.sql.compile.OperatorNode
1:044afae: 
1:044afae:    Licensed to the Apache Software Foundation (ASF) under one or more
1:044afae:    contributor license agreements.  See the NOTICE file distributed with
1:044afae:    this work for additional information regarding copyright ownership.
1:044afae:    The ASF licenses this file to you under the Apache License, Version 2.0
1:044afae:    (the "License"); you may not use this file except in compliance with
1:044afae:    the License.  You may obtain a copy of the License at
1:044afae: 
1:044afae:       http://www.apache.org/licenses/LICENSE-2.0
1:044afae: 
1:044afae:    Unless required by applicable law or agreed to in writing, software
1:044afae:    distributed under the License is distributed on an "AS IS" BASIS,
1:044afae:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:044afae:    See the License for the specific language governing permissions and
1:044afae:    limitations under the License.
1:044afae: 
1:044afae:  */
1:044afae: 
1:044afae: package org.apache.derby.impl.sql.compile;
1:044afae: 
1:044afae: import java.lang.reflect.Modifier;
1:044afae: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:044afae: import org.apache.derby.iapi.services.compiler.LocalField;
1:044afae: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:044afae: import org.apache.derby.iapi.types.SqlXmlUtil;
1:044afae: 
1:044afae: /**
1:044afae:  * Abstract base-class for the various operator nodes: UnaryOperatorNode,
1:044afae:  * BinaryOperatorNode and TernarnyOperatorNode.
1:044afae:  */
1:044afae: abstract class OperatorNode extends ValueNode {
1:044afae: 
1:3bb140c:     OperatorNode(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:3bb140c: 
1:044afae:     /**
1:044afae:      * <p>
1:044afae:      * Generate code that pushes an SqlXmlUtil instance onto the stack. The
1:2a09eb5:      * instance will be created and cached in the activation's constructor, so
1:2a09eb5:      * that we don't need to create a new instance for every row.
1:044afae:      * </p>
1:044afae:      *
1:044afae:      * <p>
1:044afae:      * If the {@code xmlQuery} parameter is non-null, there will also be code
1:044afae:      * that compiles the query when the SqlXmlUtil instance is created.
1:044afae:      * </p>
1:044afae:      *
1:044afae:      * @param acb builder for the class in which the generated code lives
1:044afae:      * @param mb builder for the method that implements this operator
1:044afae:      * @param xmlQuery the XML query to be executed by the operator, or
1:044afae:      * {@code null} if this isn't an XMLEXISTS or XMLQUERY operator
1:044afae:      * @param xmlOpName the name of the operator (ignored if {@code xmlQuery}
1:044afae:      * is {@code null})
1:044afae:      */
1:044afae:     static void pushSqlXmlUtil(
1:044afae:             ExpressionClassBuilder acb, MethodBuilder mb,
1:044afae:             String xmlQuery, String xmlOpName) {
1:044afae: 
1:044afae:         // Create a field in which the instance can be cached.
1:044afae:         LocalField sqlXmlUtil = acb.newFieldDeclaration(
1:2a09eb5:                 Modifier.PRIVATE | Modifier.FINAL, SqlXmlUtil.class.getName());
1:044afae: 
1:2a09eb5:         // Add code that creates the SqlXmlUtil instance in the constructor.
1:2a09eb5:         MethodBuilder constructor = acb.getConstructor();
1:2a09eb5:         constructor.pushNewStart(SqlXmlUtil.class.getName());
1:2a09eb5:         constructor.pushNewComplete(0);
1:2a09eb5:         constructor.putField(sqlXmlUtil);
1:044afae: 
1:2a09eb5:         // Compile the query, if one is specified.
1:2a09eb5:         if (xmlQuery == null) {
1:2a09eb5:             // No query. The SqlXmlUtil instance is still on the stack. Pop it
1:2a09eb5:             // to restore the initial state of the stack.
1:2a09eb5:             constructor.pop();
1:2a09eb5:         } else {
1:2a09eb5:             // Compile the query. This will consume the SqlXmlUtil instance
1:2a09eb5:             // and leave the stack in its initial state.
1:2a09eb5:             constructor.push(xmlQuery);
1:2a09eb5:             constructor.push(xmlOpName);
1:2a09eb5:             constructor.callMethod(
1:044afae:                     VMOpcode.INVOKEVIRTUAL, SqlXmlUtil.class.getName(),
1:044afae:                     "compileXQExpr", "void", 2);
1:044afae:         }
1:044afae: 
1:2a09eb5:         // Read the cached value and push it onto the stack in the method
1:2a09eb5:         // generated for the operator.
1:2a09eb5:         mb.getField(sqlXmlUtil);
1:044afae:     }
1:044afae: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1:     OperatorNode(ContextManager cm) {
1:         super(cm);
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2a09eb5
/////////////////////////////////////////////////////////////////////////
1:      * instance will be created and cached in the activation's constructor, so
1:      * that we don't need to create a new instance for every row.
/////////////////////////////////////////////////////////////////////////
1:                 Modifier.PRIVATE | Modifier.FINAL, SqlXmlUtil.class.getName());
1:         // Add code that creates the SqlXmlUtil instance in the constructor.
1:         MethodBuilder constructor = acb.getConstructor();
1:         constructor.pushNewStart(SqlXmlUtil.class.getName());
1:         constructor.pushNewComplete(0);
1:         constructor.putField(sqlXmlUtil);
1:         // Compile the query, if one is specified.
1:         if (xmlQuery == null) {
1:             // No query. The SqlXmlUtil instance is still on the stack. Pop it
1:             // to restore the initial state of the stack.
1:             constructor.pop();
1:         } else {
1:             // Compile the query. This will consume the SqlXmlUtil instance
1:             // and leave the stack in its initial state.
1:             constructor.push(xmlQuery);
1:             constructor.push(xmlOpName);
1:             constructor.callMethod(
1:         // Read the cached value and push it onto the stack in the method
1:         // generated for the operator.
1:         mb.getField(sqlXmlUtil);
commit:044afae
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.OperatorNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import java.lang.reflect.Modifier;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.types.SqlXmlUtil;
1: 
1: /**
1:  * Abstract base-class for the various operator nodes: UnaryOperatorNode,
1:  * BinaryOperatorNode and TernarnyOperatorNode.
1:  */
1: abstract class OperatorNode extends ValueNode {
1: 
1:     /**
1:      * <p>
1:      * Generate code that pushes an SqlXmlUtil instance onto the stack. The
0:      * instance will be created and cached in the activation the first time
0:      * the code is executed, so that we don't need to create a new instance
0:      * for every row.
1:      * </p>
1:      *
1:      * <p>
1:      * If the {@code xmlQuery} parameter is non-null, there will also be code
1:      * that compiles the query when the SqlXmlUtil instance is created.
1:      * </p>
1:      *
1:      * @param acb builder for the class in which the generated code lives
1:      * @param mb builder for the method that implements this operator
1:      * @param xmlQuery the XML query to be executed by the operator, or
1:      * {@code null} if this isn't an XMLEXISTS or XMLQUERY operator
1:      * @param xmlOpName the name of the operator (ignored if {@code xmlQuery}
1:      * is {@code null})
1:      */
1:     static void pushSqlXmlUtil(
1:             ExpressionClassBuilder acb, MethodBuilder mb,
1:             String xmlQuery, String xmlOpName) {
1: 
1:         // Create a field in which the instance can be cached.
1:         LocalField sqlXmlUtil = acb.newFieldDeclaration(
0:                 Modifier.PRIVATE, SqlXmlUtil.class.getName());
1: 
0:         // Read the cached value.
0:         mb.getField(sqlXmlUtil);
1: 
0:         // Check if the cached value is null. If it is, create a new instance.
0:         // Otherwise, we're happy with the stack as it is (the cached instance
0:         // will be on top of it), and nothing more is needed.
0:         mb.dup();
0:         mb.conditionalIfNull();
1: 
0:         // The cached value is null. Pop it from the stack so that we can put
0:         // a fresh instance there in its place.
0:         mb.pop();
1: 
0:         // Create a new instance and cache it in the field. Its value will be
0:         // on the top of the stack after this sequence.
0:         mb.pushNewStart(SqlXmlUtil.class.getName());
0:         mb.pushNewComplete(0);
0:         mb.putField(sqlXmlUtil);
1: 
0:         // If a query is specified, compile it.
0:         if (xmlQuery != null) {
0:             mb.dup();
0:             mb.push(xmlQuery);
0:             mb.push(xmlOpName);
0:             mb.callMethod(
1:                     VMOpcode.INVOKEVIRTUAL, SqlXmlUtil.class.getName(),
1:                     "compileXQExpr", "void", 2);
1:         }
1: 
0:         mb.completeConditional();
1:     }
1: }
============================================================================