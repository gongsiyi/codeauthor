1:2a8df97: /*
1:2a8df97: 
1:2a8df97:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest
1:2a8df97: 
1:2a8df97:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2a8df97:    contributor license agreements.  See the NOTICE file distributed with
1:2a8df97:    this work for additional information regarding copyright ownership.
1:2a8df97:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2a8df97:    (the "License"); you may not use this file except in compliance with
1:2a8df97:    the License.  You may obtain a copy of the License at
1:2a8df97: 
1:2a8df97:      http://www.apache.org/licenses/LICENSE-2.0
1:2a8df97: 
1:2a8df97:    Unless required by applicable law or agreed to in writing, software
1:2a8df97:    distributed under the License is distributed on an "AS IS" BASIS,
1:2a8df97:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a8df97:    See the License for the specific language governing permissions and
1:2a8df97:    limitations under the License.
1:2a8df97: 
1:2a8df97:  */
1:2a8df97: 
1:2a8df97: package org.apache.derbyTesting.functionTests.tests.lang;
1:2a8df97: 
1:2a8df97: import java.sql.Connection;
1:2a8df97: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.SQLException;
1:435459e: import java.util.Locale;
1:2a8df97: import java.util.Properties;
1:2a8df97: import junit.framework.Test;
1:a4e6298: import org.apache.derby.optional.api.LuceneIndexDescriptor;
1:435459e: import org.apache.derby.optional.api.LuceneUtils;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:2a8df97: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:2a8df97: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:2a8df97: import org.apache.derbyTesting.junit.TestConfiguration;
1:1ae02c9: import org.apache.lucene.analysis.Analyzer;
1:2a8df97: 
1:2a8df97: /**
1:2a8df97:  * <p>
1:2a8df97:  * Test permissions on objects created by the optional Lucene support tool.
1:2a8df97:  * </p>
1:2a8df97:  */
1:2a8df97: public class LuceneCoarseAuthorizationTest extends GeneratedColumnsHelper
1:2a8df97: {
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:2a8df97:     // CONSTANTS
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:2a8df97:     private static  final   String      RUTH = "RUTH";
1:2a8df97:     private static  final   String      READ_ONLY_USER = "READONLYUSER";
1:2a8df97:     private static  final   String      READ_WRITE_USER = "READWRITEUSER";
1:2a8df97:     private static  final   String[]    LEGAL_USERS = { RUTH, READ_ONLY_USER, READ_WRITE_USER };
1:2a8df97: 
1:a4e6298:     public  static  final   String      ENGLISH_ANALYZER =
1:435459e:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getEnglishAnalyzer";
1:a4e6298:     public  static  final   String      STANDARD_ANALYZER =
1:a4e6298:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getStandardAnalyzer";
1:435459e: 
1:2a8df97:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:2a8df97:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:435459e:     private static  final   String      INDEX_POEMS =
1:435459e:         "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', '" + ENGLISH_ANALYZER + "' )";
1:2a8df97:     private static  final   String      UPDATE_POEMS_INDEX =
1:a4e6298:         "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText', '" + STANDARD_ANALYZER + "' )";
1:2a8df97:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1:2a8df97: 
1:2a8df97:     private static  final   String      ILLEGAL_FOR_READONLY = "25502";
1:2a8df97: 
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:2a8df97:     // STATE
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:2a8df97:     // CONSTRUCTOR
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:2a8df97:     /**
1:2a8df97:      * Create a new instance.
1:2a8df97:      */
1:2a8df97: 
1:2a8df97:     public LuceneCoarseAuthorizationTest(String name)
1:2a8df97:     {
1:2a8df97:         super(name);
1:2a8df97:     }
1:2a8df97: 
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:2a8df97:     // JUnit BEHAVIOR
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:2a8df97: 
1:2a8df97:     /**
1:2a8df97:      * Construct top level suite in this JUnit test
1:2a8df97:      */
1:2a8df97:     public static Test suite()
1:2a8df97:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             LuceneCoarseAuthorizationTest.class);
1:2a8df97: 
1:2a8df97:         Test        unsecureTest = SecurityManagerSetup.noSecurityManager( suite );
1:2a8df97:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:2a8df97:             ( unsecureTest, LEGAL_USERS, "LuceneCoarsePermissions" );
1:2a8df97: 
1:2a8df97:         Test        coarseTest = new DatabasePropertyTestSetup( authenticatedTest, makeProperties() );
1:435459e:         Test        singleUseTest = TestConfiguration.singleUseDatabaseDecorator( coarseTest );
1:2a8df97: 
1:435459e:         return singleUseTest;
1:2a8df97:     }
1:2a8df97:     private static  Properties  makeProperties()
1:2a8df97:     {
1:2a8df97:         Properties  props = new Properties();
1:2a8df97: 
1:2a8df97:         props.setProperty(  "derby.database.fullAccessUsers", RUTH + "," + READ_WRITE_USER );
1:2a8df97:         props.setProperty(  "derby.database.readOnlyAccessUsers", READ_ONLY_USER );
1:2a8df97: 
1:2a8df97:         return props;
1:2a8df97:     }
1:2a8df97: 
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:2a8df97:     // TESTS
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:2a8df97:     /**
1:2a8df97:      * <p>
1:2a8df97:      * Test that read-only users can't (un)load the tool or create/update indexes. But
1:2a8df97:      * they can view data.
1:2a8df97:      * </p>
1:2a8df97:      */
1:2a8df97:     public  void    test_001_basic()
1:2a8df97:         throws Exception
1:2a8df97:     {
1:2a8df97:         Connection  ruthConnection = openUserConnection( RUTH );
1:2a8df97:         Connection  readOnlyConnection = openUserConnection( READ_ONLY_USER );
1:2a8df97:         Connection  readWriteConnection = openUserConnection( READ_WRITE_USER );
1:2a8df97: 
1:2a8df97:         createSchema( ruthConnection );
1:2a8df97: 
1:2a8df97:         expectExecutionError
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              ILLEGAL_FOR_READONLY,
1:2a8df97:              LOAD_TOOL
2:2a8df97:              );
1:2a8df97:         goodStatement( readWriteConnection, LOAD_TOOL );
1:2a8df97: 
1:2a8df97:         expectExecutionError
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              ILLEGAL_FOR_READONLY,
1:2a8df97:              INDEX_POEMS
1:2a8df97:              );
1:2a8df97:         goodStatement( readWriteConnection, INDEX_POEMS );
1:2a8df97: 
1:2a8df97:         String  readPoemsIndex =
1:cbdf827:             "select p.originalAuthor, i.score\n" +
1:a4e6298:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', 1000, null ) ) i\n" +
1:2a8df97:             "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
1:cbdf827:             "order by i.score desc\n";
1:2a8df97:         String[][]  defaultPoemResults =
1:2a8df97:             new String[][]
1:2a8df97:             {
1:2a8df97:                 { "Walt Whitman", "0.26756266" },
1:2a8df97:                 { "Lord Byron", "0.22933942" },
1:2a8df97:                 { "John Milton", "0.22933942" },
1:2a8df97:             };
1:2a8df97: 
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              readPoemsIndex,
1:2a8df97:              defaultPoemResults,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readWriteConnection,
1:2a8df97:              readPoemsIndex,
1:2a8df97:              defaultPoemResults,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97: 
1:2a8df97:         String  listIndexes =
1:a4e6298:             "select schemaName, tableName, columnName, indexDescriptorMaker from table( LuceneSupport.listIndexes() ) l";
1:2a8df97:         String[][]  defaultIndexList =
1:2a8df97:             new String[][]
1:2a8df97:             {
1:435459e:                 { "RUTH", "POEMS", "POEMTEXT", ENGLISH_ANALYZER },
1:2a8df97:             };
1:2a8df97: 
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              listIndexes,
1:2a8df97:              defaultIndexList,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readWriteConnection,
1:2a8df97:              listIndexes,
1:2a8df97:              defaultIndexList,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97: 
1:2a8df97:         expectExecutionError
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              ILLEGAL_FOR_READONLY,
1:2a8df97:              UPDATE_POEMS_INDEX
1:2a8df97:              );
1:2a8df97:         goodStatement( readWriteConnection, UPDATE_POEMS_INDEX );
1:2a8df97: 
1:2a8df97:         String[][]  standardPoemResults =
1:2a8df97:             new String[][]
1:2a8df97:             {
1:2a8df97:                 { "Walt Whitman", "0.3304931" },
1:2a8df97:                 { "John Milton", "0.2832798" },
1:2a8df97:             };
1:2a8df97: 
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              readPoemsIndex,
1:2a8df97:              standardPoemResults,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readWriteConnection,
1:2a8df97:              readPoemsIndex,
1:2a8df97:              standardPoemResults,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97: 
1:2a8df97:         String[][]  standardIndexList =
1:2a8df97:             new String[][]
1:2a8df97:             {
1:a4e6298:                 { "RUTH", "POEMS", "POEMTEXT", STANDARD_ANALYZER },
1:2a8df97:             };
1:2a8df97: 
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              listIndexes,
1:2a8df97:              standardIndexList,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97:         assertResults
1:2a8df97:             (
1:2a8df97:              readWriteConnection,
1:2a8df97:              listIndexes,
1:2a8df97:              standardIndexList,
1:2a8df97:              false
1:2a8df97:              );
1:2a8df97: 
1:2a8df97:         expectExecutionError
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              ILLEGAL_FOR_READONLY,
1:2a8df97:              DROP_POEMS_INDEX
1:2a8df97:              );
1:2a8df97:         goodStatement( readWriteConnection, DROP_POEMS_INDEX );
1:2a8df97: 
1:2a8df97:         expectExecutionError
1:2a8df97:             (
1:2a8df97:              readOnlyConnection,
1:2a8df97:              ILLEGAL_FOR_READONLY,
1:2a8df97:              UNLOAD_TOOL
1:2a8df97:              );
1:2a8df97:         goodStatement( readWriteConnection, UNLOAD_TOOL );
1:2a8df97: 
1:2a8df97:         dropSchema( ruthConnection );
1:2a8df97:     }
1:2a8df97: 
1:2a8df97: 
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97:     //
1:435459e:     // EXTERNAL ENTRY POINTS
1:435459e:     //
1:435459e:     ///////////////////////////////////////////////////////////////////////////////////
1:435459e: 
1:a4e6298:     /** Return an index descriptor with an Analyzer for an English Locale */
1:a4e6298:     public  static  LuceneIndexDescriptor    getEnglishAnalyzer()
1:435459e:         throws Exception
1:435459e:     {
1:a4e6298:         return new EnglishIndexDescriptor();
1:a4e6298:     }
1:a4e6298:     
1:a4e6298:     /** Return an index descriptor with a StandardAnalyzer */
1:a4e6298:     public  static  LuceneIndexDescriptor    getStandardAnalyzer()
1:a4e6298:         throws Exception
1:a4e6298:     {
1:a4e6298:         return new StandardIndexDescriptor();
1:435459e:     }
1:435459e:     
1:435459e: 
1:435459e:     ///////////////////////////////////////////////////////////////////////////////////
1:435459e:     //
1:2a8df97:     // MINIONS
1:2a8df97:     //
1:2a8df97:     ///////////////////////////////////////////////////////////////////////////////////
1:2a8df97: 
1:5cf7a46:     public  static void    createSchema( Connection conn )  throws Exception
1:2a8df97:     {
1:2a8df97:         createPoemsTable( conn );
1:2a8df97:     }
1:5cf7a46:     public  static void    dropSchema( Connection conn )   throws Exception
1:2a8df97:     {
1:5cf7a46:         conn.prepareStatement( "drop table poems" ).execute();
1:2a8df97:     }
1:5cf7a46:     public static void    createPoemsTable( Connection conn )
1:2a8df97:         throws Exception
1:2a8df97:     {
1:5cf7a46:         conn.prepareStatement
1:2a8df97:             (
1:2a8df97:              "create table poems\n" +
1:2a8df97:              "(\n" +
1:2a8df97:              "    poemID int,\n" +
1:2a8df97:              "    versionStamp int not null,\n" +
1:2a8df97:              "    originalAuthor       varchar( 50 ),\n" +
1:2a8df97:              "    lastEditor           varchar( 50 ),\n" +
1:2a8df97:              "    poemText            clob,\n" +
1:2a8df97:              "    constraint poemsKey primary key( poemID, versionStamp )\n" +
1:2a8df97:              ")\n"
1:5cf7a46:              ).execute();
1:2a8df97: 
1:2a8df97:         PreparedStatement   ps = conn.prepareStatement( "insert into poems values ( ?, ?, ?, ?, ? )" );
1:2a8df97: 
1:2a8df97:         int     poemID = 1;
1:2a8df97:         int     versionStamp = 1;
1:2a8df97: 
1:2a8df97:         ps.setInt( 1, poemID++ );
1:2a8df97:         ps.setInt( 2, versionStamp++ );
1:2a8df97:         ps.setString( 3, "Geoffrey Chaucer" );
1:2a8df97:         ps.setString( 4, "Geoffrey Chaucer" );
1:2a8df97:         ps.setString( 5, "Whan that Aprill, with his shoures soote The droghte of March hath perced to the roote And bathed every veyne in swich licour, Of which vertu engendred is the flour;" );
1:2a8df97:         ps.executeUpdate();
1:2a8df97: 
1:2a8df97:         ps.setInt( 1, poemID++ );
1:2a8df97:         ps.setInt( 2, versionStamp++ );
1:2a8df97:         ps.setString( 3, "Andrew Marvell" );
1:2a8df97:         ps.setString( 4, "Andrew Marvell" );
1:2a8df97:         ps.setString( 5, "Had we but world enough, and time, This coyness, lady, were no crime." );
1:2a8df97:         ps.executeUpdate();
1:2a8df97: 
1:2a8df97:         ps.setInt( 1, poemID++ );
1:2a8df97:         ps.setInt( 2, versionStamp++ );
1:2a8df97:         ps.setString( 3, "John Milton" );
1:2a8df97:         ps.setString( 4, "John Milton" );
1:2a8df97:         ps.setString( 5, "From morn to noon he fell, from noon to dewy eve, a summers day, and with the setting sun dropped from the ze4ith like a falling star on Lemnos, the Aegean isle" );
1:2a8df97:         ps.executeUpdate();
1:2a8df97: 
1:2a8df97:         ps.setInt( 1, poemID++ );
1:2a8df97:         ps.setInt( 2, versionStamp++ );
1:2a8df97:         ps.setString( 3, "Lord Byron" );
1:2a8df97:         ps.setString( 4, "Lord Byron" );
1:2a8df97:         ps.setString( 5, "The Assyrian came down like the wolf on the fold, And his cohorts were gleaming in purple and gold; And the sheen of their spears was like stars on the sea, When the blue wave rolls nightly on deep Galilee." );
1:2a8df97:         ps.executeUpdate();
1:2a8df97: 
1:2a8df97:         ps.setInt( 1, poemID++ );
1:2a8df97:         ps.setInt( 2, versionStamp++ );
1:2a8df97:         ps.setString( 3, "Walt Whitman" );
1:2a8df97:         ps.setString( 4, "Walt Whitman" );
1:2a8df97:         ps.setString( 5, "When lilacs last in the dooryard bloomd, And the great star early droopd in the western sky in the night, I mournd, and yet shall mourn with ever-returning spring." );
1:2a8df97:         ps.executeUpdate();
1:2a8df97: 
1:2a8df97:         ps.close();
1:2a8df97:     }
1:2a8df97: 
1:a4e6298:     ///////////////////////////////////////////////////////////////////////////////////
1:a4e6298:     //
1:a4e6298:     // NESTED CLASSES
1:a4e6298:     //
1:a4e6298:     ///////////////////////////////////////////////////////////////////////////////////
1:a4e6298: 
1:a4e6298:     public  static  class   EnglishIndexDescriptor extends LuceneUtils.DefaultIndexDescriptor
1:a4e6298:     {
1:a4e6298:         public  EnglishIndexDescriptor() { super(); }
1:a4e6298:         
1:a4e6298:         public  Analyzer    getAnalyzer()   throws SQLException
1:a4e6298:         {
1:a4e6298:             return LuceneUtils.getAnalyzerForLocale( Locale.US );
1:a4e6298:         }
1:a4e6298:     }
1:a4e6298: 
1:a4e6298:     public  static  class   StandardIndexDescriptor extends LuceneUtils.DefaultIndexDescriptor
1:a4e6298:     {
1:a4e6298:         public  StandardIndexDescriptor() { super(); }
1:a4e6298:         
1:a4e6298:         public  Analyzer    getAnalyzer()   throws SQLException
1:a4e6298:         {
1:a4e6298:             return LuceneUtils.standardAnalyzer();
1:a4e6298:         }
1:a4e6298:     }
1:a4e6298: 
1:2a8df97: 
1:2a8df97: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.lucene.analysis.Analyzer;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             LuceneCoarseAuthorizationTest.class);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.api.LuceneIndexDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   String      ENGLISH_ANALYZER =
1:     public  static  final   String      STANDARD_ANALYZER =
1:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getStandardAnalyzer";
1:         "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText', '" + STANDARD_ANALYZER + "' )";
/////////////////////////////////////////////////////////////////////////
1:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', 1000, null ) ) i\n" +
/////////////////////////////////////////////////////////////////////////
1:             "select schemaName, tableName, columnName, indexDescriptorMaker from table( LuceneSupport.listIndexes() ) l";
/////////////////////////////////////////////////////////////////////////
1:                 { "RUTH", "POEMS", "POEMTEXT", STANDARD_ANALYZER },
/////////////////////////////////////////////////////////////////////////
1:     /** Return an index descriptor with an Analyzer for an English Locale */
1:     public  static  LuceneIndexDescriptor    getEnglishAnalyzer()
1:         return new EnglishIndexDescriptor();
1:     }
1:     
1:     /** Return an index descriptor with a StandardAnalyzer */
1:     public  static  LuceneIndexDescriptor    getStandardAnalyzer()
1:         throws Exception
1:     {
1:         return new StandardIndexDescriptor();
/////////////////////////////////////////////////////////////////////////
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  class   EnglishIndexDescriptor extends LuceneUtils.DefaultIndexDescriptor
1:     {
1:         public  EnglishIndexDescriptor() { super(); }
1:         
1:         public  Analyzer    getAnalyzer()   throws SQLException
1:         {
1:             return LuceneUtils.getAnalyzerForLocale( Locale.US );
1:         }
1:     }
1: 
1:     public  static  class   StandardIndexDescriptor extends LuceneUtils.DefaultIndexDescriptor
1:     {
1:         public  StandardIndexDescriptor() { super(); }
1:         
1:         public  Analyzer    getAnalyzer()   throws SQLException
1:         {
1:             return LuceneUtils.standardAnalyzer();
1:         }
1:     }
1: 
commit:4cedf31
/////////////////////////////////////////////////////////////////////////
0:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', null, 1000, null ) ) i\n" +
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1:     public  static void    createSchema( Connection conn )  throws Exception
1:     public  static void    dropSchema( Connection conn )   throws Exception
1:         conn.prepareStatement( "drop table poems" ).execute();
1:     public static void    createPoemsTable( Connection conn )
1:         conn.prepareStatement
/////////////////////////////////////////////////////////////////////////
1:              ).execute();
commit:435459e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
0: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.derby.optional.api.LuceneUtils;
/////////////////////////////////////////////////////////////////////////
0:     private static  final   String      ENGLISH_ANALYZER =
1:         "org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest.getEnglishAnalyzer";
1: 
1:     private static  final   String      INDEX_POEMS =
1:         "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', '" + ENGLISH_ANALYZER + "' )";
/////////////////////////////////////////////////////////////////////////
1:         Test        singleUseTest = TestConfiguration.singleUseDatabaseDecorator( coarseTest );
1:         return singleUseTest;
/////////////////////////////////////////////////////////////////////////
1:                 { "RUTH", "POEMS", "POEMTEXT", ENGLISH_ANALYZER },
/////////////////////////////////////////////////////////////////////////
1:     // EXTERNAL ENTRY POINTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     /** Return the Analyzer for an English Locale */
0:     public  static  Analyzer    getEnglishAnalyzer()
1:         throws Exception
1:     {
0:         return LuceneUtils.getAnalyzerForLocale( Locale.US );
1:     }
1:     
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:0b71ff5
/////////////////////////////////////////////////////////////////////////
0:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', null, 1000, 0 ) ) i\n" +
commit:9cc25e2
/////////////////////////////////////////////////////////////////////////
0:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', 1000, 0 ) ) i\n" +
commit:cbdf827
/////////////////////////////////////////////////////////////////////////
1:             "select p.originalAuthor, i.score\n" +
1:             "order by i.score desc\n";
commit:2a8df97
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneCoarseAuthorizationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.math.BigDecimal;
0: import java.security.AccessController;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Date;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: import java.sql.Types;
0: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.Properties;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.LocaleTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * <p>
1:  * Test permissions on objects created by the optional Lucene support tool.
1:  * </p>
1:  */
1: public class LuceneCoarseAuthorizationTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      READ_ONLY_USER = "READONLYUSER";
1:     private static  final   String      READ_WRITE_USER = "READWRITEUSER";
1:     private static  final   String[]    LEGAL_USERS = { RUTH, READ_ONLY_USER, READ_WRITE_USER };
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
0:     private static  final   String      INDEX_POEMS = "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', null )";
1:     private static  final   String      UPDATE_POEMS_INDEX =
0:         "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText', 'org.apache.derby.optional.api.LuceneUtils.standardAnalyzer' )";
1:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1: 
1:     private static  final   String      ILLEGAL_FOR_READONLY = "25502";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public LuceneCoarseAuthorizationTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(LuceneCoarseAuthorizationTest.class);
1: 
1:         Test        unsecureTest = SecurityManagerSetup.noSecurityManager( suite );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( unsecureTest, LEGAL_USERS, "LuceneCoarsePermissions" );
1: 
1:         Test        coarseTest = new DatabasePropertyTestSetup( authenticatedTest, makeProperties() );
1: 
0:         return coarseTest;
1:     }
1:     private static  Properties  makeProperties()
1:     {
1:         Properties  props = new Properties();
1: 
1:         props.setProperty(  "derby.database.fullAccessUsers", RUTH + "," + READ_WRITE_USER );
1:         props.setProperty(  "derby.database.readOnlyAccessUsers", READ_ONLY_USER );
1: 
1:         return props;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that read-only users can't (un)load the tool or create/update indexes. But
1:      * they can view data.
1:      * </p>
1:      */
1:     public  void    test_001_basic()
1:         throws Exception
1:     {
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         Connection  readOnlyConnection = openUserConnection( READ_ONLY_USER );
1:         Connection  readWriteConnection = openUserConnection( READ_WRITE_USER );
1: 
1:         createSchema( ruthConnection );
1: 
1:         expectExecutionError
1:             (
1:              readOnlyConnection,
1:              ILLEGAL_FOR_READONLY,
1:              LOAD_TOOL
1:              );
1:         goodStatement( readWriteConnection, LOAD_TOOL );
1: 
1:         expectExecutionError
1:             (
1:              readOnlyConnection,
1:              ILLEGAL_FOR_READONLY,
1:              INDEX_POEMS
1:              );
1:         goodStatement( readWriteConnection, INDEX_POEMS );
1: 
1:         String  readPoemsIndex =
0:             "select p.originalAuthor, i.rank\n" +
0:             "from ruth.poems p, table ( ruth.poems__poemText( 'star', 0 ) ) i\n" +
1:             "where p.poemID = i.poemID and p.versionStamp = i.versionStamp\n" +
0:             "order by i.rank desc\n";
1:         String[][]  defaultPoemResults =
1:             new String[][]
1:             {
1:                 { "Walt Whitman", "0.26756266" },
1:                 { "Lord Byron", "0.22933942" },
1:                 { "John Milton", "0.22933942" },
1:             };
1: 
1:         assertResults
1:             (
1:              readOnlyConnection,
1:              readPoemsIndex,
1:              defaultPoemResults,
1:              false
1:              );
1:         assertResults
1:             (
1:              readWriteConnection,
1:              readPoemsIndex,
1:              defaultPoemResults,
1:              false
1:              );
1: 
1:         String  listIndexes =
0:             "select schemaName, tableName, columnName, analyzerMaker from table( LuceneSupport.listIndexes() ) l";
1:         String[][]  defaultIndexList =
1:             new String[][]
1:             {
0:                 { "RUTH", "POEMS", "POEMTEXT", "org.apache.derby.optional.api.LuceneUtils.defaultAnalyzer" },
1:             };
1: 
1:         assertResults
1:             (
1:              readOnlyConnection,
1:              listIndexes,
1:              defaultIndexList,
1:              false
1:              );
1:         assertResults
1:             (
1:              readWriteConnection,
1:              listIndexes,
1:              defaultIndexList,
1:              false
1:              );
1: 
1:         expectExecutionError
1:             (
1:              readOnlyConnection,
1:              ILLEGAL_FOR_READONLY,
1:              UPDATE_POEMS_INDEX
1:              );
1:         goodStatement( readWriteConnection, UPDATE_POEMS_INDEX );
1: 
1:         String[][]  standardPoemResults =
1:             new String[][]
1:             {
1:                 { "Walt Whitman", "0.3304931" },
1:                 { "John Milton", "0.2832798" },
1:             };
1: 
1:         assertResults
1:             (
1:              readOnlyConnection,
1:              readPoemsIndex,
1:              standardPoemResults,
1:              false
1:              );
1:         assertResults
1:             (
1:              readWriteConnection,
1:              readPoemsIndex,
1:              standardPoemResults,
1:              false
1:              );
1: 
1:         String[][]  standardIndexList =
1:             new String[][]
1:             {
0:                 { "RUTH", "POEMS", "POEMTEXT", "org.apache.derby.optional.api.LuceneUtils.standardAnalyzer" },
1:             };
1: 
1:         assertResults
1:             (
1:              readOnlyConnection,
1:              listIndexes,
1:              standardIndexList,
1:              false
1:              );
1:         assertResults
1:             (
1:              readWriteConnection,
1:              listIndexes,
1:              standardIndexList,
1:              false
1:              );
1: 
1:         expectExecutionError
1:             (
1:              readOnlyConnection,
1:              ILLEGAL_FOR_READONLY,
1:              DROP_POEMS_INDEX
1:              );
1:         goodStatement( readWriteConnection, DROP_POEMS_INDEX );
1: 
1:         expectExecutionError
1:             (
1:              readOnlyConnection,
1:              ILLEGAL_FOR_READONLY,
1:              UNLOAD_TOOL
1:              );
1:         goodStatement( readWriteConnection, UNLOAD_TOOL );
1: 
1:         dropSchema( ruthConnection );
1:     }
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private void    createSchema( Connection conn )  throws Exception
1:     {
1:         createPoemsTable( conn );
1:     }
0:     private void    dropSchema( Connection conn )   throws Exception
1:     {
0:         goodStatement( conn, "drop table poems" );
1:     }
0:     private void    createPoemsTable( Connection conn )
1:         throws Exception
1:     {
0:         goodStatement
1:             (
0:              conn,
1:              "create table poems\n" +
1:              "(\n" +
1:              "    poemID int,\n" +
1:              "    versionStamp int not null,\n" +
1:              "    originalAuthor       varchar( 50 ),\n" +
1:              "    lastEditor           varchar( 50 ),\n" +
1:              "    poemText            clob,\n" +
1:              "    constraint poemsKey primary key( poemID, versionStamp )\n" +
1:              ")\n"
1:              );
1: 
1:         PreparedStatement   ps = conn.prepareStatement( "insert into poems values ( ?, ?, ?, ?, ? )" );
1: 
1:         int     poemID = 1;
1:         int     versionStamp = 1;
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Geoffrey Chaucer" );
1:         ps.setString( 4, "Geoffrey Chaucer" );
1:         ps.setString( 5, "Whan that Aprill, with his shoures soote The droghte of March hath perced to the roote And bathed every veyne in swich licour, Of which vertu engendred is the flour;" );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Andrew Marvell" );
1:         ps.setString( 4, "Andrew Marvell" );
1:         ps.setString( 5, "Had we but world enough, and time, This coyness, lady, were no crime." );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "John Milton" );
1:         ps.setString( 4, "John Milton" );
1:         ps.setString( 5, "From morn to noon he fell, from noon to dewy eve, a summers day, and with the setting sun dropped from the ze4ith like a falling star on Lemnos, the Aegean isle" );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Lord Byron" );
1:         ps.setString( 4, "Lord Byron" );
1:         ps.setString( 5, "The Assyrian came down like the wolf on the fold, And his cohorts were gleaming in purple and gold; And the sheen of their spears was like stars on the sea, When the blue wave rolls nightly on deep Galilee." );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Walt Whitman" );
1:         ps.setString( 4, "Walt Whitman" );
1:         ps.setString( 5, "When lilacs last in the dooryard bloomd, And the great star early droopd in the western sky in the night, I mournd, and yet shall mourn with ever-returning spring." );
1:         ps.executeUpdate();
1: 
1:         ps.close();
1:     }
1: 
1: 
1: }
============================================================================