1:c872753: /*
1:c872753:  * Licensed to the Apache Software Foundation (ASF) under one
1:c872753:  * or more contributor license agreements.  See the NOTICE file
1:c872753:  * distributed with this work for additional information
1:c872753:  * regarding copyright ownership.  The ASF licenses this file
1:c872753:  * to you under the Apache License, Version 2.0 (the
1:c872753:  * "License"); you may not use this file except in compliance
1:c872753:  * with the License.  You may obtain a copy of the License at
2:c872753:  *
1:c872753:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c872753:  *
1:c872753:  * Unless required by applicable law or agreed to in writing,
1:c872753:  * software distributed under the License is distributed on an
1:c872753:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c872753:  * KIND, either express or implied.  See the License for the
1:c872753:  * specific language governing permissions and limitations
1:c872753:  * under the License.
4:c872753:  */
1:7358413: 
1:c872753: package org.apache.derbyTesting.functionTests.tests.lang;
18:c872753: 
1:c872753: import java.sql.PreparedStatement;
1:c872753: import java.sql.ResultSet;
1:c872753: import java.sql.SQLException;
1:c872753: import java.sql.Statement;
1:c872753: import junit.framework.Test;
1:c872753: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7358413: import org.apache.derbyTesting.junit.TestConfiguration;
1:7358413: 
4:c872753: /**
1:c872753:  * Tests cursors
1:c872753:  */
1:c872753: public class CursorTest extends BaseJDBCTestCase {
1:c872753: 
1:c872753:     /**
1:c872753:      * Creates a new <code>CursorTest</code> instance.
1:7358413:      * 
1:7358413:      * @param name
1:7358413:      *            name of the test
1:c872753:      */
1:c872753:     public CursorTest(String name) {
1:c872753:         super(name);
7:c872753:     }
1:c872753: 
1:7358413:     /**
1:7358413:      * Test cursor methods with regular cursor
1:7358413:      * 
1:7358413:      * @throws SQLException
1:7358413:      */
1:7358413:     public void testCursor() throws SQLException {
1:7358413:         PreparedStatement select;
1:7358413:         ResultSet cursor;
1:c872753: 
1:7358413:         // because there is no order by (nor can there be)
1:7358413:         // the fact that this test prints out rows may someday
1:7358413:         // be a problem. When that day comes, the row printing
1:7358413:         // can (should) be removed from this test.
1:c872753: 
1:7358413:         select = prepareStatement("select i, c from t for update");
1:7358413:         cursor = select.executeQuery(); // cursor is now open
1:7358413:         cursor.next();
1:7358413:         assertEquals(1956, cursor.getInt(1));
1:7358413:         assertEquals("hello world", cursor.getString(2).trim());
1:7358413:         // close and then test that fetch causes an error
1:7358413:         cursor.close();
1:7358413:         if (usingEmbedded()) {
1:7358413:             assertNextError("XCL16", cursor);
1:7358413:         } else if (usingDerbyNetClient()) {
1:7358413:             assertNextError("XCL16", cursor);
1:7358413:         }
1:7358413:         // restart the query for another test
1:7358413:         cursor = select.executeQuery();
1:7358413:         // test next/getInt past the end of table
1:7358413:         while (cursor.next())
1:7358413:             ;
1:7358413:         cursor.next();
1:7358413:         if (usingEmbedded()) {
1:7358413:             assertGetIntError(1, "24000", cursor);
1:7358413:         } else if (usingDerbyNetClient()) {
1:7358413:             assertGetIntError(1, "XJ121", cursor);
1:7358413:         }
1:7358413:         cursor.close();
1:7358413:         }
1:c872753: 
1:7358413:     /**
1:7358413:      * Test cursor methods with parameter
1:7358413:      * 
1:7358413:      * @throws SQLException
1:7358413:      */
1:7358413:     public void testCursorParam() throws SQLException {
1:7358413:         PreparedStatement select;
1:7358413:         ResultSet cursor;
1:7358413:         select = prepareStatement("select i, c from t where ?=1 for update");
1:7358413:         select.setInt(1, 1);
1:7358413:         cursor = select.executeQuery();
1:7358413:         // TEST: fetch of a row works
1:7358413:         assertTrue("FAIL: unable to fetch row.", cursor.next());
1:7358413:         assertEquals("FAIL: Wrong row on fetch with param", 1956, cursor
1:7358413:                 .getInt(1));
1:7358413:         // TEST: Close and then fetch gets an error on fetch.
1:7358413:         cursor.close();
1:7358413:         assertNextError("XCL16", cursor);
1:7358413:         // restart the query for another test
1:7358413:         select.setBoolean(1, false);
1:7358413:         select.setCursorName("ForCoverageSake");
1:7358413:         cursor = select.executeQuery();
1:7358413:         assertEquals("ForCoverageSake", cursor.getCursorName());
1:7358413:         cursor.next();
1:7358413:         if (usingEmbedded()) {
1:7358413:             assertGetIntError(1, "24000", cursor);
1:7358413:         } else if (usingDerbyNetClient()) {
1:7358413:             assertGetIntError(1, "XJ121", cursor);
1:7358413:         }
1:7358413:         cursor.close();
1:7358413:     }
1:c872753: 
1:7358413:     /**
1:7358413:      * Test getCursorName with and without update cursor
1:7358413:      * 
1:7358413:      * @throws SQLException
1:7358413:      */
1:7358413:     public void testGetCursorName() throws SQLException {
1:7358413:         Statement s = createStatement();
1:7358413:         ResultSet rs = s.executeQuery("select * from t");
1:7358413:         if (usingEmbedded())
1:7358413:             assertNull(rs.getCursorName());
1:7358413:         else if (usingDerbyNetClient())
1:7358413:             assertNotNull(rs.getCursorName());
1:7358413:         rs.close();
1:7358413: 
1:7358413:         // test Automatic naming of cursor for update
1:7358413:         rs = s.executeQuery("select * from t for update");
1:7358413:         assertNotNull( rs.getCursorName());
1:7358413:          rs.close();
1:7358413:         
1:7358413:         rs = s.executeQuery("select * from t for update of i");
1:7358413:         assertNotNull(rs.getCursorName());
1:7358413:         rs.close();
1:7358413:         
1:7358413: 
1:7358413:         s.setCursorName("myselect");
1:7358413:         rs = s.executeQuery("select * from t");
1:7358413:         assertEquals("myselect", rs.getCursorName());
1:7358413:         rs.close();
1:7358413: 
1:7358413:         s.setCursorName("myselect2");
1:7358413:         rs = s.executeQuery("select * from t for update");
1:7358413:         assertEquals("myselect2", rs.getCursorName());
1:7358413:         rs.close();
1:7358413:         
1:7358413:         s.setCursorName("myselect3");
1:7358413:         rs = s.executeQuery("select * from t for update of i");
1:7a9732b:         assertEquals("myselect3", rs.getCursorName());
1:7358413:         rs.close();
1:7358413:         s.close();
1:7358413:     }
1:7a9732b:     
1:7a9732b:     /**
1:7a9732b:      * Test that Statement.setCursorName affects only the next
1:7a9732b:      * execution and not any open ResultSet.
1:7a9732b:      */
1:7a9732b:     public void derby2417testSetCursorNextExecute() throws SQLException
1:7a9732b:     {   
1:7a9732b:         // Assert setCursorName only affects the next execution.
1:7a9732b:         // For statements
1:7a9732b:         Statement s = createStatement();
1:7a9732b:         ResultSet rs = s.executeQuery("select * from t for update");
1:7a9732b:         s.setCursorName("AFTER_EXECUTE");
1:7a9732b:         assertFalse("AFTER_EXECUTE".equals(rs.getCursorName()));
1:7a9732b:         rs.close();
1:7a9732b:         rs = s.executeQuery("select * from t");
1:7a9732b:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:7a9732b:         s.setCursorName("CHANGE_AGAIN");
1:7a9732b:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:7a9732b:         rs.close();
1:7a9732b:         rs = s.executeQuery("select * from t");
1:7a9732b:         assertEquals("CHANGE_AGAIN", rs.getCursorName());
1:7a9732b:         s.close();
1:7a9732b:         
1:7a9732b:         // And prepared statements
1:7a9732b:         PreparedStatement ps = prepareStatement("select * from t for update");
1:7a9732b:         rs = ps.executeQuery();
1:7a9732b:         ps.setCursorName("AFTER_EXECUTE");
1:7a9732b:         assertFalse("AFTER_EXECUTE".equals(rs.getCursorName()));
1:7a9732b:         rs.close();
1:7a9732b:         rs = ps.executeQuery();
1:7a9732b:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:7a9732b:         ps.setCursorName("CHANGE_AGAIN");
1:7a9732b:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:7a9732b:         rs.close();
1:7a9732b:         rs = ps.executeQuery();
1:7a9732b:         assertEquals("CHANGE_AGAIN", rs.getCursorName());
1:7a9732b:         ps.close();        
1:7a9732b:    
1:7a9732b:     }
1:7358413: 
1:7358413:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("CursorTest");
1:7a9732b:         
1:7a9732b:         suite.addTest(TestConfiguration.defaultSuite(CursorTest.class));
1:7a9732b:         
1:7a9732b:         // DERBY-2417 client throws exception for setCursorName
1:7a9732b:         // on Statement with active ResultSet.
1:7a9732b:         suite.addTest(new CursorTest("derby2417testSetCursorNextExecute"));
1:7a9732b:         
1:7a9732b:         return suite;
1:7358413:     }
1:7358413: 
1:7358413:     protected void setUp() throws SQLException {
1:7358413:         getConnection().setAutoCommit(false);
1:7358413:         Statement stmt = createStatement();
1:7358413:         stmt.executeUpdate("create table t (i int, c char(50))");
1:7358413:         stmt.executeUpdate("create table s (i int, c char(50))");
1:7358413:         stmt.executeUpdate("insert into t values (1956, 'hello world')");
1:7358413:         stmt.executeUpdate("insert into t values (456, 'hi yourself')");
1:7358413:         stmt.executeUpdate("insert into t values (180, 'rubber ducky')");
1:7358413:         stmt.executeUpdate("insert into t values (3, 'you are the one')");
1:7358413: 
1:7358413:         stmt.close();
1:7358413:         commit();
1:7358413:     }
1:7358413: 
1:7358413:     protected void tearDown() throws Exception {
1:7358413:         Statement stmt = createStatement();
1:7358413:         rollback();
1:7358413:         stmt.executeUpdate("drop table t");
1:7358413:         stmt.executeUpdate("drop table s");
1:7358413:         stmt.close();
1:7358413:         commit();
1:7358413:         super.tearDown();
1:7358413:     }
1:c872753: 
1:c872753: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("CursorTest");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a9732b
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("myselect3", rs.getCursorName());
1:     
1:     /**
1:      * Test that Statement.setCursorName affects only the next
1:      * execution and not any open ResultSet.
1:      */
1:     public void derby2417testSetCursorNextExecute() throws SQLException
1:     {   
1:         // Assert setCursorName only affects the next execution.
1:         // For statements
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("select * from t for update");
1:         s.setCursorName("AFTER_EXECUTE");
1:         assertFalse("AFTER_EXECUTE".equals(rs.getCursorName()));
1:         rs.close();
1:         rs = s.executeQuery("select * from t");
1:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:         s.setCursorName("CHANGE_AGAIN");
1:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:         rs.close();
1:         rs = s.executeQuery("select * from t");
1:         assertEquals("CHANGE_AGAIN", rs.getCursorName());
1:         s.close();
1:         
1:         // And prepared statements
1:         PreparedStatement ps = prepareStatement("select * from t for update");
1:         rs = ps.executeQuery();
1:         ps.setCursorName("AFTER_EXECUTE");
1:         assertFalse("AFTER_EXECUTE".equals(rs.getCursorName()));
1:         rs.close();
1:         rs = ps.executeQuery();
1:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:         ps.setCursorName("CHANGE_AGAIN");
1:         assertEquals("AFTER_EXECUTE", rs.getCursorName());
1:         rs.close();
1:         rs = ps.executeQuery();
1:         assertEquals("CHANGE_AGAIN", rs.getCursorName());
1:         ps.close();        
1:    
1:     }
0:         TestSuite suite = new TestSuite("CursorTest");
1:         
1:         suite.addTest(TestConfiguration.defaultSuite(CursorTest.class));
1:         
1:         // DERBY-2417 client throws exception for setCursorName
1:         // on Statement with active ResultSet.
1:         suite.addTest(new CursorTest("derby2417testSetCursorNextExecute"));
1:         
1:         return suite;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7358413
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @param name
1:      *            name of the test
1:     /**
1:      * Test cursor methods with regular cursor
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testCursor() throws SQLException {
1:         PreparedStatement select;
1:         ResultSet cursor;
1:         // because there is no order by (nor can there be)
1:         // the fact that this test prints out rows may someday
1:         // be a problem. When that day comes, the row printing
1:         // can (should) be removed from this test.
1:         select = prepareStatement("select i, c from t for update");
1:         cursor = select.executeQuery(); // cursor is now open
1:         cursor.next();
1:         assertEquals(1956, cursor.getInt(1));
1:         assertEquals("hello world", cursor.getString(2).trim());
1:         // close and then test that fetch causes an error
1:         cursor.close();
1:         if (usingEmbedded()) {
1:             assertNextError("XCL16", cursor);
1:         } else if (usingDerbyNetClient()) {
1:             assertNextError("XCL16", cursor);
1:         }
1:         // restart the query for another test
1:         cursor = select.executeQuery();
1:         // test next/getInt past the end of table
1:         while (cursor.next())
1:             ;
1:         cursor.next();
1:         if (usingEmbedded()) {
1:             assertGetIntError(1, "24000", cursor);
1:         } else if (usingDerbyNetClient()) {
1:             assertGetIntError(1, "XJ121", cursor);
1:         }
1:         cursor.close();
1:         }
1:     /**
1:      * Test cursor methods with parameter
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testCursorParam() throws SQLException {
1:         PreparedStatement select;
1:         ResultSet cursor;
1:         select = prepareStatement("select i, c from t where ?=1 for update");
1:         select.setInt(1, 1);
1:         cursor = select.executeQuery();
1:         // TEST: fetch of a row works
1:         assertTrue("FAIL: unable to fetch row.", cursor.next());
1:         assertEquals("FAIL: Wrong row on fetch with param", 1956, cursor
1:                 .getInt(1));
1:         // TEST: Close and then fetch gets an error on fetch.
1:         cursor.close();
1:         assertNextError("XCL16", cursor);
1:         // restart the query for another test
1:         select.setBoolean(1, false);
1:         select.setCursorName("ForCoverageSake");
1:         cursor = select.executeQuery();
1:         assertEquals("ForCoverageSake", cursor.getCursorName());
1:         cursor.next();
1:         if (usingEmbedded()) {
1:             assertGetIntError(1, "24000", cursor);
1:         } else if (usingDerbyNetClient()) {
1:             assertGetIntError(1, "XJ121", cursor);
1:         }
1:         cursor.close();
1:     }
1:     /**
1:      * Test getCursorName with and without update cursor
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testGetCursorName() throws SQLException {
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("select * from t");
1:         if (usingEmbedded())
1:             assertNull(rs.getCursorName());
1:         else if (usingDerbyNetClient())
1:             assertNotNull(rs.getCursorName());
1:         rs.close();
1:         // test Automatic naming of cursor for update
1:         rs = s.executeQuery("select * from t for update");
1:         assertNotNull( rs.getCursorName());
1:          rs.close();
1:         
1:         rs = s.executeQuery("select * from t for update of i");
1:         assertNotNull(rs.getCursorName());
1:         rs.close();
1:         
1: 
1:         s.setCursorName("myselect");
1:         rs = s.executeQuery("select * from t");
1:         assertEquals("myselect", rs.getCursorName());
1:         rs.close();
1: 
1:         s.setCursorName("myselect2");
1:         rs = s.executeQuery("select * from t for update");
1:         assertEquals("myselect2", rs.getCursorName());
1:         rs.close();
1:         
1:         s.setCursorName("myselect3");
1:         rs = s.executeQuery("select * from t for update of i");
1:         rs.close();
1:         s.close();
1:     }
1: 
1:     public static Test suite() {
0:         //TestSuite suite = new TestSuite("CursorTestJunit");
0:         //suite.addTestSuite(CursorTest.class);
0:         //return suite;
0:          return TestConfiguration.defaultSuite(CursorTest.class);
1: 
1:     }
1: 
1:     protected void setUp() throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("create table t (i int, c char(50))");
1:         stmt.executeUpdate("create table s (i int, c char(50))");
1:         stmt.executeUpdate("insert into t values (1956, 'hello world')");
1:         stmt.executeUpdate("insert into t values (456, 'hi yourself')");
1:         stmt.executeUpdate("insert into t values (180, 'rubber ducky')");
1:         stmt.executeUpdate("insert into t values (3, 'you are the one')");
1: 
1:         stmt.close();
1:         commit();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         Statement stmt = createStatement();
1:         rollback();
1:         stmt.executeUpdate("drop table t");
1:         stmt.executeUpdate("drop table s");
1:         stmt.close();
1:         commit();
1:         super.tearDown();
1:     }
commit:c872753
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.Connection;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: 
1: 
1: /**
1:  * Tests cursors
1:  */
1: public class CursorTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Creates a new <code>CursorTest</code> instance.
1:      *
0:      * @param name name of the test
1:      */
1:     public CursorTest(String name) {
1:         super(name);
1:     }
1:     
1: 
1:    /**
0:     * Test cursor methods with regular cursor 
0:     * @throws SQLException
1:    */
0:   public void testCursor() throws SQLException {
0: 		PreparedStatement select;
0: 		ResultSet cursor;
1: 	
1: 		
0: 		// because there is no order by (nor can there be)
0: 		// the fact that this test prints out rows may someday
0: 		// be a problem.  When that day comes, the row printing
0: 		// can (should) be removed from this test.
1: 
0: 		select = prepareStatement("select i, c from t for update");
0: 		cursor = select.executeQuery(); // cursor is now open
0: 		cursor.next();
0: 		assertEquals(1956, cursor.getInt(1));
0: 		assertEquals("hello world", cursor.getString(2).trim());
0: 		// close and then test that fetch causes an error
0: 		cursor.close();
0: 		assertNextError("XCL16", cursor);
0: 		//restart the query for another test
0: 		cursor = select.executeQuery();
0: 		// test next/getInt past the end of table
0: 		while (cursor.next());
0: 		cursor.next();
0: 		assertGetIntError(1, "24000",cursor); 
1:   }
1:   
1:    
1:   /**
0:   * Test cursor methods with parameter
0:   * @throws SQLException
1:   */
0:    public void testCursorParam() throws SQLException{
0: 	   PreparedStatement select;
0: 	   ResultSet cursor;
0: 	   select = prepareStatement("select i, c from t where ?=1 for update");
0:        select.setInt(1,1);
0:        cursor = select.executeQuery();
0:        //TEST: fetch of a row works
0:        assertTrue("FAIL: unable to fetch row.",cursor.next());
0:        assertEquals("FAIL: Wrong row on fetch with param", 1956,cursor.getInt(1));
0:       // TEST: Close and then fetch gets an error on fetch.
0:        cursor.close();
0:        assertNextError("XCL16", cursor);
0: 		// restart the query for another test
0: 		select.setBoolean(1,false);
0: 		select.setCursorName("ForCoverageSake");
0: 		cursor = select.executeQuery();
0: 		assertEquals(cursor.getCursorName(),"ForCoverageSake");
0: 		cursor.next();
0: 		assertGetIntError(1,"24000", cursor);
1:    }
1: 
1:    
1:    
1:   /**
0:    * Test getCursorName with and without update cursor
0:    * @throws SQLException
1:    */
0:    public void  testGetCursorName()throws SQLException {
0: 	  Statement s = createStatement();
0: 	  ResultSet rs = s.executeQuery("select * from t");
0: 	  assertNull(rs.getCursorName());
0: 	  rs.close();
1: 	  
0: 	  // test Automatic naming of cursor for update
0: 	  rs = s.executeQuery("select * from t for update");
0: 	  assertEquals("SQLCUR0",rs.getCursorName());
0: 	  rs.close();
1: 	  
0: 	  rs = s.executeQuery("select * from t for update of i");
0: 	  assertEquals("SQLCUR1", rs.getCursorName());
0: 	  rs.close();
1: 	  
0: 	  s.setCursorName("myselect");
0: 	  rs = s.executeQuery("select * from t");
0: 	  assertEquals("myselect", rs.getCursorName());
0: 	  rs.close();
1: 	  
0: 	  s.setCursorName("myselect2");
0: 	  rs = s.executeQuery("select * from t for update");
0: 	  assertEquals("myselect2",rs.getCursorName());
1: 	
0: 	  s.setCursorName("myselect3");
0: 	  rs = s.executeQuery("select * from t for update of i");
0: 	  rs.close();
0: 	  s.close();
1:    }
0:    public static Test suite() {
0: 	TestSuite suite = new TestSuite("CursorTestJunit");
0: 	suite.addTestSuite(CursorTest.class);
0: 	return suite;
1:    }
1: 
0: protected void setUp() throws SQLException {
0: 	getConnection().setAutoCommit(false);
0: 	Statement stmt = createStatement();
0: 	stmt.executeUpdate("create table t (i int, c char(50))");
0: 	stmt.executeUpdate("create table s (i int, c char(50))");
0: 	stmt.executeUpdate("insert into t values (1956, 'hello world')");
0: 	stmt.executeUpdate("insert into t values (456, 'hi yourself')");
0: 	stmt.executeUpdate("insert into t values (180, 'rubber ducky')");
0: 	stmt.executeUpdate("insert into t values (3, 'you are the one')");
1: 
0: 	stmt.close();
0: 	commit();
1: }
1: 
0: protected void tearDown() throws Exception {
0: 	Statement stmt = createStatement();
0: 	stmt.executeUpdate("drop table t");
0: 	stmt.executeUpdate("drop table s");
0: 	stmt.close();
0: 	commit();
0: 	super.tearDown();
1: }
1: 
1: }
============================================================================