1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.GenericScanController
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Storable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   The set of interfaces implemented by all types of ScanControllers.
1:eac0369:   <P>
1:eac0369:   A scan is the mechanism for iterating over the rows in a conglomerate,
1:eac0369:   the scan controller is the interface through which access clients
1:eac0369:   control the underlying scan.  An instance of a scan controller can 
1:eac0369:   be thought of as an open scan.
1:eac0369:   <p>
1:eac0369:   Scans are opened from a TransactionController.
1:eac0369:   <P>
1:eac0369:   A ScanController can handle partial rows. Partial rows are described in 
1:eac0369:   RowUtil.
1:eac0369:   <BR>
1:eac0369:   A scan controller is opened with a FormatableBitSet that describes the
1:eac0369:   columns that need to be returned on a fetch call. This FormatableBitSet
1:eac0369:   need not include any columns referenced in the qualifers, start
1:eac0369:   and/or stop keys.
1:eac0369: 
1:eac0369:   @see TransactionController#openScan
1:eac0369:   @see RowCountable
1:eac0369:   @see RowUtil
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface GenericScanController extends RowCountable
1:eac0369: {
1:eac0369:     /**
1:eac0369:     Close the scan.  This method always succeeds, and never throws
1:eac0369:     any exceptions. Callers must not use the scan controller after
1:eac0369: 	closing it; they are strongly advised to clear out the scan
1:eac0369: 	controller reference after closing.
1:eac0369: 
1:eac0369: 	@exception  StandardException  Standard exception policy.
1:eac0369:     **/
1:eac0369:     void close()
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return ScanInfo object which describes performance of scan.
1:eac0369:      * <p>
1:eac0369:      * Return ScanInfo object which contains information about the current
1:eac0369:      * state of the scan.
1:eac0369:      * <p>
1:eac0369:      * The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:eac0369:      * rather they continue to accumulate.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      *
1:eac0369:      * @see ScanInfo
1:eac0369:      *
1:eac0369: 	 * @return The ScanInfo object which contains info about current scan.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     ScanInfo getScanInfo()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return whether this is a keyed conglomerate.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return whether this is a keyed conglomerate.
1:eac0369:      **/
1:eac0369: 	boolean isKeyed();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return whether this scan is table locked.
1:eac0369:      * <p>
1:eac0369:      * Implementation of this is not complete.  Currently it does not give back
1:eac0369:      * the right information on covering locks or lock escalation.  If the
1:eac0369:      * openScan() caller specifies a MODE_TABLE as the lock_level then this
1:eac0369:      * routine will always return true.  If the openScan() caller specifies a
1:eac0369:      * MODE_RECORD as the lock_level then this routine will return true iff
1:eac0369:      * the lock level of the system has been overridden either by the
1:eac0369:      * derby.storage.rowLocking=false property, or by a shipped 
1:eac0369:      * configuration which disables row locking.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return whether this scan is table locked.
1:eac0369:      **/
1:eac0369: 	boolean isTableLocked();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return a row location object to be used in calls to fetchLocation.
1:eac0369:      * <p>
1:eac0369:      * Return a row location object of the correct type to be used in calls to
1:eac0369:      * fetchLocation.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return a row location object to be used in calls to fetchLocation.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	RowLocation newRowLocationTemplate()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Reposition the current scan.  This call is semantically the same as if
1:eac0369:     the current scan had been closed and a openScan() had been called instead.
1:eac0369:     The scan is reopened with against the same conglomerate, and the scan
1:eac0369:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:eac0369:     parameters passed in the original openScan.  
1:eac0369:     <p>
1:eac0369:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:eac0369:     rather they continue to accumulate.
1:eac0369:     <p>
1:eac0369: 
1:eac0369: 	@param startKeyValue  An indexable row which holds a 
1:eac0369: 	(partial) key value which, in combination with the
1:eac0369: 	startSearchOperator, defines the starting position of
1:eac0369: 	the scan.  If null, the starting position of the scan
1:eac0369: 	is the first row of the conglomerate.
1:eac0369: 	
1:f2ee915: 	@param startSearchOperator an operator which defines
1:eac0369: 	how the startKeyValue is to be searched for.  If 
1:f2ee915:     startSearchOperator is ScanController.GE, the scan starts on
1:eac0369: 	the first row which is greater than or equal to the 
1:eac0369: 	startKeyValue.  If startSearchOperation is ScanController.GT,
1:eac0369: 	the scan starts on the first row whose key is greater than
1:eac0369: 	startKeyValue.  The startSearchOperation parameter is 
1:eac0369: 	ignored if the startKeyValue parameter is null.
1:eac0369: 
1:eac0369: 	@param qualifier An array of qualifiers which, applied
1:eac0369: 	to each key, restrict the rows returned by the scan.  Rows
1:eac0369: 	for which any one of the qualifiers returns false are not
1:eac0369: 	returned by the scan. If null, all rows are returned.
1:eac0369: 
1:eac0369: 	@param stopKeyValue  An indexable row which holds a 
1:eac0369: 	(partial) key value which, in combination with the
1:eac0369: 	stopSearchOperator, defines the ending position of
1:eac0369: 	the scan.  If null, the ending position of the scan
1:eac0369: 	is the last row of the conglomerate.
1:eac0369: 	
1:f2ee915: 	@param stopSearchOperator an operator which defines
1:eac0369: 	how the stopKeyValue is used to determine the scan stopping
1:eac0369: 	position. If stopSearchOperation is ScanController.GE, the scan 
1:eac0369: 	stops just before the first row which is greater than or
1:eac0369: 	equal to the stopKeyValue.  If stopSearchOperation is
1:eac0369: 	ScanController.GT, the scan stops just before the first row whose
1:eac0369: 	key is greater than	startKeyValue.  The stopSearchOperation
1:eac0369: 	parameter is ignored if the stopKeyValue parameter is null.
1:eac0369: 
1:eac0369: 	@exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369: 	void reopenScan(
1:eac0369:     DataValueDescriptor[]   startKeyValue,
1:eac0369:     int                     startSearchOperator,
1:eac0369:     Qualifier               qualifier[][],
1:eac0369:     DataValueDescriptor[]   stopKeyValue,
1:eac0369:     int                     stopSearchOperator)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Reposition the current scan.  This call is semantically the same as if
1:eac0369:     the current scan had been closed and a openScan() had been called instead.
1:eac0369:     The scan is reopened against the same conglomerate, and the scan
1:eac0369:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:eac0369:     parameters passed in the original openScan.  
1:eac0369:     <p>
1:eac0369:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:eac0369:     rather they continue to accumulate.
1:eac0369:     <p>
1:eac0369:     Note that this operation is currently only supported on Heap conglomerates.
1:eac0369:     Also note that order of rows within are heap are not guaranteed, so for
1:eac0369:     instance positioning at a RowLocation in the "middle" of a heap, then
1:eac0369:     inserting more data, then continuing the scan is not guaranteed to see
1:eac0369:     the new rows - they may be put in the "beginning" of the heap.
1:eac0369: 
1:eac0369: 	@param startRowLocation  An existing RowLocation within the conglomerate,
1:eac0369:     at which to position the start of the scan.  The scan will begin at this
1:eac0369:     location and continue forward until the end of the conglomerate.  
1:eac0369:     Positioning at a non-existent RowLocation (ie. an invalid one or one that
1:eac0369:     had been deleted), will result in an exception being thrown when the 
1:eac0369:     first next operation is attempted.
1:eac0369: 
1:eac0369: 	@param qualifier An array of qualifiers which, applied
1:eac0369: 	to each key, restrict the rows returned by the scan.  Rows
1:eac0369: 	for which any one of the qualifiers returns false are not
1:eac0369: 	returned by the scan. If null, all rows are returned.
1:eac0369: 
1:eac0369: 	@exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369: 	void reopenScanByRowLocation(
1:eac0369:     RowLocation startRowLocation,
1:eac0369:     Qualifier qualifier[][])
1:eac0369:         throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f2ee915
/////////////////////////////////////////////////////////////////////////
1: 	@param startSearchOperator an operator which defines
1:     startSearchOperator is ScanController.GE, the scan starts on
/////////////////////////////////////////////////////////////////////////
1: 	@param stopSearchOperator an operator which defines
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.GenericScanController
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 
1:   The set of interfaces implemented by all types of ScanControllers.
1:   <P>
1:   A scan is the mechanism for iterating over the rows in a conglomerate,
1:   the scan controller is the interface through which access clients
1:   control the underlying scan.  An instance of a scan controller can 
1:   be thought of as an open scan.
1:   <p>
1:   Scans are opened from a TransactionController.
1:   <P>
1:   A ScanController can handle partial rows. Partial rows are described in 
1:   RowUtil.
1:   <BR>
1:   A scan controller is opened with a FormatableBitSet that describes the
1:   columns that need to be returned on a fetch call. This FormatableBitSet
1:   need not include any columns referenced in the qualifers, start
1:   and/or stop keys.
1: 
1:   @see TransactionController#openScan
1:   @see RowCountable
1:   @see RowUtil
1: 
1: **/
1: 
1: public interface GenericScanController extends RowCountable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**
1:     Close the scan.  This method always succeeds, and never throws
1:     any exceptions. Callers must not use the scan controller after
1: 	closing it; they are strongly advised to clear out the scan
1: 	controller reference after closing.
1: 
1: 	@exception  StandardException  Standard exception policy.
1:     **/
1:     void close()
1:         throws StandardException;
1: 
1:     /**
1:      * Return ScanInfo object which describes performance of scan.
1:      * <p>
1:      * Return ScanInfo object which contains information about the current
1:      * state of the scan.
1:      * <p>
1:      * The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:      * rather they continue to accumulate.
1:      * <p>
1:      *
1:      *
1:      * @see ScanInfo
1:      *
1: 	 * @return The ScanInfo object which contains info about current scan.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     ScanInfo getScanInfo()
1: 		throws StandardException;
1: 
1:     /**
1:      * Return whether this is a keyed conglomerate.
1:      * <p>
1:      *
1: 	 * @return whether this is a keyed conglomerate.
1:      **/
1: 	boolean isKeyed();
1: 
1:     /**
1:      * Return whether this scan is table locked.
1:      * <p>
1:      * Implementation of this is not complete.  Currently it does not give back
1:      * the right information on covering locks or lock escalation.  If the
1:      * openScan() caller specifies a MODE_TABLE as the lock_level then this
1:      * routine will always return true.  If the openScan() caller specifies a
1:      * MODE_RECORD as the lock_level then this routine will return true iff
1:      * the lock level of the system has been overridden either by the
1:      * derby.storage.rowLocking=false property, or by a shipped 
1:      * configuration which disables row locking.
1:      * <p>
1:      *
1: 	 * @return whether this scan is table locked.
1:      **/
1: 	boolean isTableLocked();
1: 
1:     /**
1:      * Return a row location object to be used in calls to fetchLocation.
1:      * <p>
1:      * Return a row location object of the correct type to be used in calls to
1:      * fetchLocation.
1:      * <p>
1:      *
1: 	 * @return a row location object to be used in calls to fetchLocation.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	RowLocation newRowLocationTemplate()
1: 		throws StandardException;
1: 
1:     /**
1:     Reposition the current scan.  This call is semantically the same as if
1:     the current scan had been closed and a openScan() had been called instead.
1:     The scan is reopened with against the same conglomerate, and the scan
1:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:     parameters passed in the original openScan.  
1:     <p>
1:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:     rather they continue to accumulate.
1:     <p>
1: 
1: 	@param startKeyValue  An indexable row which holds a 
1: 	(partial) key value which, in combination with the
1: 	startSearchOperator, defines the starting position of
1: 	the scan.  If null, the starting position of the scan
1: 	is the first row of the conglomerate.
1: 	
0: 	@param startSearchOperation an operator which defines
1: 	how the startKeyValue is to be searched for.  If 
0:     startSearchOperation is ScanController.GE, the scan starts on
1: 	the first row which is greater than or equal to the 
1: 	startKeyValue.  If startSearchOperation is ScanController.GT,
1: 	the scan starts on the first row whose key is greater than
1: 	startKeyValue.  The startSearchOperation parameter is 
1: 	ignored if the startKeyValue parameter is null.
1: 
1: 	@param qualifier An array of qualifiers which, applied
1: 	to each key, restrict the rows returned by the scan.  Rows
1: 	for which any one of the qualifiers returns false are not
1: 	returned by the scan. If null, all rows are returned.
1: 
1: 	@param stopKeyValue  An indexable row which holds a 
1: 	(partial) key value which, in combination with the
1: 	stopSearchOperator, defines the ending position of
1: 	the scan.  If null, the ending position of the scan
1: 	is the last row of the conglomerate.
1: 	
0: 	@param stopSearchOperation an operator which defines
1: 	how the stopKeyValue is used to determine the scan stopping
1: 	position. If stopSearchOperation is ScanController.GE, the scan 
1: 	stops just before the first row which is greater than or
1: 	equal to the stopKeyValue.  If stopSearchOperation is
1: 	ScanController.GT, the scan stops just before the first row whose
1: 	key is greater than	startKeyValue.  The stopSearchOperation
1: 	parameter is ignored if the stopKeyValue parameter is null.
1: 
1: 	@exception StandardException Standard exception policy.
1:     **/
1: 	void reopenScan(
1:     DataValueDescriptor[]   startKeyValue,
1:     int                     startSearchOperator,
1:     Qualifier               qualifier[][],
1:     DataValueDescriptor[]   stopKeyValue,
1:     int                     stopSearchOperator)
1:         throws StandardException;
1: 
1:     /**
1:     Reposition the current scan.  This call is semantically the same as if
1:     the current scan had been closed and a openScan() had been called instead.
1:     The scan is reopened against the same conglomerate, and the scan
1:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:     parameters passed in the original openScan.  
1:     <p>
1:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
1:     rather they continue to accumulate.
1:     <p>
1:     Note that this operation is currently only supported on Heap conglomerates.
1:     Also note that order of rows within are heap are not guaranteed, so for
1:     instance positioning at a RowLocation in the "middle" of a heap, then
1:     inserting more data, then continuing the scan is not guaranteed to see
1:     the new rows - they may be put in the "beginning" of the heap.
1: 
1: 	@param startRowLocation  An existing RowLocation within the conglomerate,
1:     at which to position the start of the scan.  The scan will begin at this
1:     location and continue forward until the end of the conglomerate.  
1:     Positioning at a non-existent RowLocation (ie. an invalid one or one that
1:     had been deleted), will result in an exception being thrown when the 
1:     first next operation is attempted.
1: 
1: 	@param qualifier An array of qualifiers which, applied
1: 	to each key, restrict the rows returned by the scan.  Rows
1: 	for which any one of the qualifiers returns false are not
1: 	returned by the scan. If null, all rows are returned.
1: 
1: 	@exception StandardException Standard exception policy.
1:     **/
1: 	void reopenScanByRowLocation(
1:     RowLocation startRowLocation,
1:     Qualifier qualifier[][])
1:         throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 
0:   The set of interfaces implemented by all types of ScanControllers.
0:   <P>
0:   A scan is the mechanism for iterating over the rows in a conglomerate,
0:   the scan controller is the interface through which access clients
0:   control the underlying scan.  An instance of a scan controller can 
0:   be thought of as an open scan.
0:   <p>
0:   Scans are opened from a TransactionController.
0:   <P>
0:   A ScanController can handle partial rows. Partial rows are described in 
0:   RowUtil.
0:   <BR>
0:   A scan controller is opened with a FormatableBitSet that describes the
0:   columns that need to be returned on a fetch call. This FormatableBitSet
0:   need not include any columns referenced in the qualifers, start
0:   and/or stop keys.
0: 
0:   @see TransactionController#openScan
0:   @see RowCountable
0:   @see RowUtil
0: 
0: **/
0: 
0: public interface GenericScanController extends RowCountable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**
0:     Close the scan.  This method always succeeds, and never throws
0:     any exceptions. Callers must not use the scan controller after
0: 	closing it; they are strongly advised to clear out the scan
0: 	controller reference after closing.
0: 
0: 	@exception  StandardException  Standard exception policy.
0:     **/
0:     void close()
0:         throws StandardException;
0: 
0:     /**
0:      * Return ScanInfo object which describes performance of scan.
0:      * <p>
0:      * Return ScanInfo object which contains information about the current
0:      * state of the scan.
0:      * <p>
0:      * The statistics gathered by the scan are not reset to 0 by a reopenScan(),
0:      * rather they continue to accumulate.
0:      * <p>
0:      *
0:      *
0:      * @see ScanInfo
0:      *
0: 	 * @return The ScanInfo object which contains info about current scan.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     ScanInfo getScanInfo()
0: 		throws StandardException;
0: 
0:     /**
0:      * Return whether this is a keyed conglomerate.
0:      * <p>
0:      *
0: 	 * @return whether this is a keyed conglomerate.
0:      **/
0: 	boolean isKeyed();
0: 
0:     /**
0:      * Return whether this scan is table locked.
0:      * <p>
0:      * Implementation of this is not complete.  Currently it does not give back
0:      * the right information on covering locks or lock escalation.  If the
0:      * openScan() caller specifies a MODE_TABLE as the lock_level then this
0:      * routine will always return true.  If the openScan() caller specifies a
0:      * MODE_RECORD as the lock_level then this routine will return true iff
0:      * the lock level of the system has been overridden either by the
0:      * derby.storage.rowLocking=false property, or by a shipped 
0:      * configuration which disables row locking.
0:      * <p>
0:      *
0: 	 * @return whether this scan is table locked.
0:      **/
0: 	boolean isTableLocked();
0: 
0:     /**
0:      * Return a row location object to be used in calls to fetchLocation.
0:      * <p>
0:      * Return a row location object of the correct type to be used in calls to
0:      * fetchLocation.
0:      * <p>
0:      *
0: 	 * @return a row location object to be used in calls to fetchLocation.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	RowLocation newRowLocationTemplate()
0: 		throws StandardException;
0: 
0:     /**
0:     Reposition the current scan.  This call is semantically the same as if
0:     the current scan had been closed and a openScan() had been called instead.
0:     The scan is reopened with against the same conglomerate, and the scan
0:     is reopened with the same "scan column list", "hold" and "forUpdate"
0:     parameters passed in the original openScan.  
0:     <p>
0:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
0:     rather they continue to accumulate.
0:     <p>
0: 
0: 	@param startKeyValue  An indexable row which holds a 
0: 	(partial) key value which, in combination with the
0: 	startSearchOperator, defines the starting position of
0: 	the scan.  If null, the starting position of the scan
0: 	is the first row of the conglomerate.
0: 	
0: 	@param startSearchOperation an operator which defines
0: 	how the startKeyValue is to be searched for.  If 
0:     startSearchOperation is ScanController.GE, the scan starts on
0: 	the first row which is greater than or equal to the 
0: 	startKeyValue.  If startSearchOperation is ScanController.GT,
0: 	the scan starts on the first row whose key is greater than
0: 	startKeyValue.  The startSearchOperation parameter is 
0: 	ignored if the startKeyValue parameter is null.
0: 
0: 	@param qualifier An array of qualifiers which, applied
0: 	to each key, restrict the rows returned by the scan.  Rows
0: 	for which any one of the qualifiers returns false are not
0: 	returned by the scan. If null, all rows are returned.
0: 
0: 	@param stopKeyValue  An indexable row which holds a 
0: 	(partial) key value which, in combination with the
0: 	stopSearchOperator, defines the ending position of
0: 	the scan.  If null, the ending position of the scan
0: 	is the last row of the conglomerate.
0: 	
0: 	@param stopSearchOperation an operator which defines
0: 	how the stopKeyValue is used to determine the scan stopping
0: 	position. If stopSearchOperation is ScanController.GE, the scan 
0: 	stops just before the first row which is greater than or
0: 	equal to the stopKeyValue.  If stopSearchOperation is
0: 	ScanController.GT, the scan stops just before the first row whose
0: 	key is greater than	startKeyValue.  The stopSearchOperation
0: 	parameter is ignored if the stopKeyValue parameter is null.
0: 
0: 	@exception StandardException Standard exception policy.
0:     **/
0: 	void reopenScan(
0:     DataValueDescriptor[]   startKeyValue,
0:     int                     startSearchOperator,
0:     Qualifier               qualifier[][],
0:     DataValueDescriptor[]   stopKeyValue,
0:     int                     stopSearchOperator)
0:         throws StandardException;
0: 
0:     /**
0:     Reposition the current scan.  This call is semantically the same as if
0:     the current scan had been closed and a openScan() had been called instead.
0:     The scan is reopened against the same conglomerate, and the scan
0:     is reopened with the same "scan column list", "hold" and "forUpdate"
0:     parameters passed in the original openScan.  
0:     <p>
0:     The statistics gathered by the scan are not reset to 0 by a reopenScan(),
0:     rather they continue to accumulate.
0:     <p>
0:     Note that this operation is currently only supported on Heap conglomerates.
0:     Also note that order of rows within are heap are not guaranteed, so for
0:     instance positioning at a RowLocation in the "middle" of a heap, then
0:     inserting more data, then continuing the scan is not guaranteed to see
0:     the new rows - they may be put in the "beginning" of the heap.
0: 
0: 	@param startRowLocation  An existing RowLocation within the conglomerate,
0:     at which to position the start of the scan.  The scan will begin at this
0:     location and continue forward until the end of the conglomerate.  
0:     Positioning at a non-existent RowLocation (ie. an invalid one or one that
0:     had been deleted), will result in an exception being thrown when the 
0:     first next operation is attempted.
0: 
0: 	@param qualifier An array of qualifiers which, applied
0: 	to each key, restrict the rows returned by the scan.  Rows
0: 	for which any one of the qualifiers returns false are not
0: 	returned by the scan. If null, all rows are returned.
0: 
0: 	@exception StandardException Standard exception policy.
0:     **/
0: 	void reopenScanByRowLocation(
0:     RowLocation startRowLocation,
0:     Qualifier qualifier[][])
0:         throws StandardException;
0: }
============================================================================