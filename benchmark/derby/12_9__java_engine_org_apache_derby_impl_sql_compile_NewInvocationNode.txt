1:eac0369: /*
15:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.NewInvocationNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.lang.reflect.Member;
1:eac0369: import java.lang.reflect.Modifier;
1:9eb1bd1: import java.util.List;
1:3bb140c: import org.apache.derby.catalog.TypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.services.i18n.MessageService;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassInspector;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:3bb140c: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A NewInvocationNode represents a new object() invocation.
2:eac0369:  *
1:eac0369:  */
1:3bb140c: class NewInvocationNode extends MethodCallNode
4:eac0369: {
1:eac0369: 	// Whether or not to do a single instantiation
1:eac0369: 	private boolean singleInstantiation = false;
1:eac0369: 
1:eac0369: 	private boolean delimitedIdentifier;
1:eac0369: 
1:4aef9b0: 	private boolean isBuiltinVTI = false;
1:4aef9b0: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a NewInvocationNode. Parameters are:
1:3bb140c: 	 *
1:eac0369:      *
1:3bb140c:      * @param javaClassName     The full package.class name of the class
1:3bb140c:      * @param params            The parameter list for the constructor
1:3bb140c:      * @param delimitedIdentifier
1:3bb140c:      * @param cm                The context manager
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     NewInvocationNode(
1:3bb140c:             String javaClassName,
1:3bb140c:             List<ValueNode> params,
1:3bb140c:             boolean delimitedIdentifier,
1:3bb140c:             ContextManager cm)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         super("<init>", cm);
1:3bb140c:         addParms(params);
1:eac0369: 
1:3bb140c:         this.javaClassName = javaClassName;
1:3bb140c:         this.delimitedIdentifier = delimitedIdentifier;
4:eac0369: 	}
1:eac0369: 
1:3bb140c:     /* This constructor is used for mapping a table name
1:6c7bf48: 	 * or table function name to a corresponding VTI class name.  The VTI
1:6c7bf48: 	 * is then invoked as a regular NEW invocation node.
1:eac0369: 	 *
1:6c7bf48: 	 * There are two kinds of VTI mappings that we do: the first is for
1:6c7bf48: 	 * "table names", the second is for "table function names".  Table
1:6c7bf48: 	 * names can only be mapped to VTIs that do not accept any arguments;
1:6c7bf48: 	 * any VTI that has at least one constructor which accepts one or more
1:6c7bf48: 	 * arguments must be mapped from a table *function* name.  The way we
1:6c7bf48: 	 * tell the difference is by looking at the received arguments: if
1:6c7bf48: 	 * the vtiTableFuncName that we receive is null then we are mapping
1:6c7bf48: 	 * a "table name" and tableDescriptor must be non-null; if the
1:6c7bf48: 	 * vtiTableFuncName is non-null then we are mapping a "table
1:6c7bf48: 	 * function name" and tableDescriptor must be null.
1:eac0369: 	 *
1:6c7bf48: 	 * Note that we could have just used a single "init()" method and
1:6c7bf48: 	 * performed the mappings based on what type of Object "javaClassName"
1:6c7bf48: 	 * was (String, TableDescriptor, or TableName), but making this VTI
1:6c7bf48: 	 * mapping method separate from the "normal" init() method seems
1:6c7bf48: 	 * cleaner...
1:eac0369: 	 *
1:6c7bf48: 	 * @param vtiTableFuncName A TableName object holding a qualified name
1:6c7bf48: 	 *  that maps to a VTI which accepts arguments.  If vtiTableFuncName is
1:6c7bf48: 	 *  null then tableDescriptor must NOT be null.
1:6c7bf48: 	 * @param tableDescriptor A table descriptor that corresponds to a
1:6c7bf48: 	 *  table name (as opposed to a table function name) that will be
1:6c7bf48: 	 *  mapped to a no-argument VTI.  If tableDescriptor is null then
1:6c7bf48: 	 *  vtiTableFuncName should not be null.
1:6c7bf48: 	 * @param params Parameter list for the VTI constructor.
1:6c7bf48: 	 * @param delimitedIdentifier Whether or not the target class name
1:6c7bf48: 	 *  is a delimited identifier.
1:3bb140c:      * @param cm context manager
1:eac0369: 	 */
1:3bb140c:     NewInvocationNode(
1:3bb140c:                     TableName vtiTableFuncName,
1:3bb140c:                     TableDescriptor tableDescriptor,
1:3bb140c:                     List<ValueNode> params,
1:3bb140c:                     boolean delimitedIdentifier,
1:3bb140c:                     ContextManager cm)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         super("<init>", cm);
1:3bb140c:         addParms(params);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:6c7bf48: 			// Exactly one of vtiTableFuncName or tableDescriptor should
1:6c7bf48: 			// be null.
1:6c7bf48: 			SanityManager.ASSERT(
1:6c7bf48: 				((vtiTableFuncName == null) && (tableDescriptor != null)) ||
1:6c7bf48: 				((vtiTableFuncName != null) && (tableDescriptor == null)),
1:6c7bf48: 				"Exactly one of vtiTableFuncName or tableDescriptor should " +
1:6c7bf48: 				"be null, but neither or both of them were null.");
1:eac0369: 		}
1:eac0369: 
1:3bb140c:         TableName vtiName = vtiTableFuncName;
1:3bb140c:         TableDescriptor td = tableDescriptor;
1:6c7bf48: 		boolean isTableFunctionVTI = (vtiTableFuncName != null);
1:6c7bf48: 		if (isTableFunctionVTI)
1:eac0369: 		{
1:6c7bf48: 			// We have to create a generic TableDescriptor to
1:6c7bf48: 			// pass to the data dictionary.
1:6c7bf48: 			td = new TableDescriptor(getDataDictionary(),
1:6c7bf48: 					vtiName.getTableName(),
1:6c7bf48: 					getSchemaDescriptor(vtiName.getSchemaName()),
1:6c7bf48: 					TableDescriptor.VTI_TYPE,
1:6c7bf48: 					TableDescriptor.DEFAULT_LOCK_GRANULARITY);
1:eac0369: 		}
1:eac0369: 
1:6c7bf48: 		/* Use the table descriptor to figure out what the corresponding
1:6c7bf48: 		 * VTI class name is; we let the data dictionary do the mapping
1:6c7bf48: 		 * for us.
1:eac0369: 		 */
1:6c7bf48: 		this.javaClassName = getDataDictionary().getVTIClass(
1:6c7bf48: 			td, isTableFunctionVTI);
1:eac0369: 
1:4aef9b0: 		this.isBuiltinVTI =
1:4aef9b0: 		    ( getDataDictionary().getBuiltinVTIClass( td, isTableFunctionVTI) != null);
1:4aef9b0: 
1:6c7bf48: 		/* If javaClassName is still null at this point then we
1:6c7bf48: 		 * could not find the target class for the received table
1:6c7bf48: 		 * (or table function) name.  So throw the appropriate
1:6c7bf48: 		 * error.
1:eac0369: 		 */
1:6c7bf48: 		if (this.javaClassName == null)
1:eac0369: 		{
1:6c7bf48: 			if (!isTableFunctionVTI)
1:eac0369: 			{
1:6c7bf48: 				/* Create a TableName object from the table descriptor
1:6c7bf48: 				 * that we received.  This gives us the name to use
1:6c7bf48: 				 * in the error message.
1:eac0369: 				 */
1:6c7bf48: 				vtiName = makeTableName(td.getSchemaName(),
1:6c7bf48: 					td.getDescriptorName());
1:eac0369: 			}
1:eac0369: 
1:6c7bf48: 			throw StandardException.newException(
1:6c7bf48: 				isTableFunctionVTI
1:6c7bf48: 					? SQLState.LANG_NO_SUCH_METHOD_ALIAS
1:6c7bf48: 					: SQLState.LANG_TABLE_NOT_FOUND,
1:6c7bf48: 				vtiName.getFullTableName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		this.delimitedIdentifier =
1:eac0369: 				 ((Boolean) delimitedIdentifier).booleanValue();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:4aef9b0: 	 * Report whether this node represents a builtin VTI.
1:4aef9b0: 	 */
1:3bb140c:      boolean isBuiltinVTI()  { return isBuiltinVTI; }
1:4aef9b0: 
1:4aef9b0: 	/**
1:eac0369: 	 * Mark this node as only needing to
1:eac0369: 	 * to a single instantiation.  (We can
1:eac0369: 	 * reuse the object after newing it.)
1:eac0369: 	 */
1:eac0369: 	void setSingleInstantiation()
1:eac0369: 	{
1:eac0369: 		singleInstantiation = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this expression.  This means binding the sub-expressions,
1:eac0369: 	 * as well as figuring out what the return type is for this expression.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList		The FROM list for the query this
1:09c2697:      *                      expression is in, for binding columns.
1:09c2697:      * @param subqueryList  The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates    The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	Nothing
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:09c2697:     JavaValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         bindParameters(fromList, subqueryList, aggregates);
1:eac0369: 
1:2e1b5e8: 		verifyClassExist(javaClassName);
1:eac0369: 		/*
1:eac0369: 		** Get the parameter type names out of the parameters and put them
1:eac0369: 		** in an array.
1:eac0369: 		*/
1:eac0369: 		String[]	parmTypeNames = getObjectSignature();
1:eac0369: 		boolean[]	isParam = getIsParam();
1:eac0369: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Find the matching constructor.
1:eac0369: 		*/
2:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			/* First try with built-in types and mappings */
1:eac0369: 			method = classInspector.findPublicConstructor(javaClassName,
1:eac0369: 											parmTypeNames, null, isParam);
1:eac0369: 
1:eac0369: 			/* If no match, then retry to match any possible combinations of
1:eac0369: 			 * object and primitive types.
1:eac0369: 			 */
1:eac0369: 			if (method == null)
1:eac0369: 			{
1:eac0369: 				String[] primParmTypeNames = getPrimitiveSignature(false);
1:eac0369: 				method = classInspector.findPublicConstructor(javaClassName,
1:eac0369: 								parmTypeNames, primParmTypeNames, isParam);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		catch (ClassNotFoundException e)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** If one of the classes couldn't be found, just act like the
1:eac0369: 			** method couldn't be found.  The error lists all the class names,
1:eac0369: 			** which should give the user enough info to diagnose the problem.
1:eac0369: 			*/
1:eac0369: 			method = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (method == null)
1:eac0369: 		{
1:eac0369: 			/* Put the parameter type names into a single string */
1:eac0369: 			String	parmTypes = "";
1:eac0369: 			for (int i = 0; i < parmTypeNames.length; i++)
1:eac0369: 			{
1:eac0369: 				if (i != 0)
1:eac0369: 					parmTypes += ", ";
1:eac0369: 				parmTypes += (parmTypeNames[i].length() != 0 ?
1:eac0369: 								parmTypeNames[i] :
1:eac0369: 								MessageService.getTextMessage(
1:eac0369: 									SQLState.LANG_UNTYPED)
1:eac0369: 									);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			throw StandardException.newException(SQLState.LANG_NO_CONSTRUCTOR_FOUND, 
1:eac0369: 													javaClassName,
1:eac0369: 												 	parmTypes);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		methodParameterTypes = classInspector.getParameterTypes(method);
1:eac0369: 
1:eac0369: 		for (int i = 0; i < methodParameterTypes.length; i++)
1:eac0369: 		{
1:56a7b39: 			if (ClassInspector.primitiveType(methodParameterTypes[i]))
1:eac0369: 				methodParms[i].castToPrimitive(true);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Set type info for any null parameters */
1:eac0369: 		if ( someParametersAreNull() )
1:eac0369: 		{
1:eac0369: 			setNullParameterInfo(methodParameterTypes);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Constructor always returns an object of type javaClassName */
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(javaClassName.equals(classInspector.getType(method)),
1:eac0369: 				"Constructor is wrong type, expected " + javaClassName + 
1:eac0369: 				" actual is " + classInspector.getType(method));
1:eac0369: 		}
1:eac0369: 	 	setJavaTypeName( javaClassName );
1:72abc72: 	 	if (routineInfo != null)
1:72abc72:                 {
1:72abc72:                     TypeDescriptor returnType = routineInfo.getReturnType();
1:72abc72:                     if (returnType != null)
1:72abc72:                     {
1:72abc72:                         setCollationType(returnType.getCollationType());
1:72abc72:                     }
1:72abc72:                 }
1:72abc72: 	 	return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Categorize this predicate.  Initially, this means
1:eac0369: 	 * building a bit map of the referenced tables for each predicate.
1:eac0369: 	 * If the source of this ColumnReference (at the next underlying level) 
1:eac0369: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1:eac0369: 	 * will not be pushed down.
1:eac0369: 	 *
1:eac0369: 	 * For example, in:
1:eac0369: 	 *		select * from (select 1 from s) a (x) where x = 1
1:eac0369: 	 * we will not push down x = 1.
1:eac0369: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1:eac0369: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1:eac0369: 	 * that tree into the pushed predicate, and that tree could contain
1:eac0369: 	 * subqueries and method calls.
1:eac0369: 	 * RESOLVE - revisit this issue once we have views.
1:eac0369: 	 *
1:eac0369: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1:eac0369: 	 * @param simplePredsOnly	Whether or not to consider method
1:eac0369: 	 *							calls, field references and conditional nodes
1:eac0369: 	 *							when building bit map
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1:eac0369: 	 *						or a VirtualColumnNode.
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:9f2ed7d:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		/* We stop here when only considering simple predicates
1:eac0369: 		 *  as we don't consider new opeators when looking
1:eac0369: 		 * for null invariant predicates.
1:eac0369: 		 */
1:eac0369: 		if (simplePredsOnly)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		boolean pushable = true;
1:eac0369: 
1:eac0369: 		pushable = pushable && super.categorize(referencedTabs, simplePredsOnly);
1:eac0369: 
1:eac0369: 		return pushable;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this class assignable to the specified class?
1:eac0369: 	 * This is useful for the VTI interface where we want to see
1:eac0369: 	 * if the class implements java.sql.ResultSet.
1:eac0369: 	 *
1:eac0369: 	 * @param toClassName	The java class name we want to assign to
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not this class is assignable to
1:eac0369: 	 *						the specified class
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected boolean assignableTo(String toClassName) throws StandardException
1:eac0369: 	{
1:eac0369: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1:eac0369: 		return classInspector.assignableTo(javaClassName, toClassName);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this class have a public method with the specified signiture
1:eac0369: 	 * This is useful for the VTI interface where we want to see
1:eac0369: 	 * if the class has the option static method for returning the
1:eac0369: 	 * ResultSetMetaData.
1:eac0369: 	 *
1:eac0369: 	 * @param methodName	The method name we are looking for
1:eac0369: 	 * @param staticMethod	Whether or not the method we are looking for is static
1:eac0369: 	 *
1:eac0369: 	 * @return Member		The Member representing the method (or null
1:eac0369: 	 *						if the method doesn't exist).
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected Member findPublicMethod(String methodName, boolean staticMethod)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		Member publicMethod;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Get the parameter type names out of the parameters and put them
1:eac0369: 		** in an array.
1:eac0369: 		*/
1:eac0369: 		String[]	parmTypeNames = getObjectSignature();
1:eac0369: 		boolean[]	isParam = getIsParam();
1:eac0369: 
1:eac0369: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:232d09a: 			publicMethod = classInspector.findPublicMethod
1:232d09a:                 (
1:232d09a:                  javaClassName, methodName,
1:232d09a:                  parmTypeNames, null, isParam, staticMethod, false, hasVarargs()
1:232d09a:                  );
1:eac0369: 
1:eac0369: 			/* If no match, then retry to match any possible combinations of
1:eac0369: 			 * object and primitive types.
1:eac0369: 			 */
1:eac0369: 			if (publicMethod == null)
1:eac0369: 			{
1:eac0369: 				String[] primParmTypeNames = getPrimitiveSignature(false);
1:232d09a: 				publicMethod = classInspector.findPublicMethod
1:232d09a:                     (
1:232d09a:                      javaClassName, methodName, parmTypeNames,
1:232d09a:                      primParmTypeNames, isParam, staticMethod, false, hasVarargs()
1:232d09a:                      );
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		catch (ClassNotFoundException e)
1:eac0369: 		{
1:eac0369: 			/* We should always be able to find the class at this point
1:eac0369: 			 * since the protocol is to check to see if it exists
1:eac0369: 			 * before checking for a method off of it.  Anyway, just return
1:eac0369: 			 * null if the class doesn't exist, since the method doesn't
1:eac0369: 			 * exist in that case.
1:eac0369: 			 */
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", e);
1:eac0369: 			}
2:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return	publicMethod;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for this method call
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb	The method the expression will go into
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:9f2ed7d:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		/* If this node is for an ungrouped aggregator, 
1:eac0369: 		 * then we generate a conditional
1:eac0369: 		 * wrapper so that we only new the aggregator once.
1:eac0369: 		 *		(fx == null) ? fx = new ... : fx
1:eac0369: 		 */
1:eac0369: 		LocalField objectFieldLF = null;
1:eac0369: 		if (singleInstantiation)
1:eac0369: 		{
1:eac0369: 			/* Declare the field */
1:eac0369: 			objectFieldLF = acb.newFieldDeclaration(Modifier.PRIVATE, javaClassName);
1:eac0369: 
1:eac0369: 			// now we fill in the body of the conditional
1:eac0369: 
1:eac0369: 			mb.getField(objectFieldLF);
1:eac0369: 			mb.conditionalIfNull();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		mb.pushNewStart(javaClassName);
1:eac0369: 		int nargs = generateParameters(acb, mb);
1:eac0369: 		mb.pushNewComplete(nargs);
1:eac0369: 
1:eac0369: 		if (singleInstantiation) {
1:eac0369: 
1:eac0369: 			  mb.putField(objectFieldLF);
1:eac0369: 			mb.startElseCode();
1:eac0369: 			  mb.getField(objectFieldLF);
1:eac0369: 			mb.completeConditional();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.loader.ClassInspector;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.util.JBitSet;
1: class NewInvocationNode extends MethodCallNode
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for a NewInvocationNode. Parameters are:
1:      *
1:      * @param javaClassName     The full package.class name of the class
1:      * @param params            The parameter list for the constructor
1:      * @param delimitedIdentifier
1:      * @param cm                The context manager
1:     NewInvocationNode(
1:             String javaClassName,
1:             List<ValueNode> params,
1:             boolean delimitedIdentifier,
1:             ContextManager cm)
1:         super("<init>", cm);
0:         setNodeType(C_NodeTypes.NEW_INVOCATION_NODE);
1:         addParms(params);
1:         this.javaClassName = javaClassName;
1:         this.delimitedIdentifier = delimitedIdentifier;
1:     /* This constructor is used for mapping a table name
/////////////////////////////////////////////////////////////////////////
1:      * @param cm context manager
1:     NewInvocationNode(
1:                     TableName vtiTableFuncName,
1:                     TableDescriptor tableDescriptor,
1:                     List<ValueNode> params,
1:                     boolean delimitedIdentifier,
1:                     ContextManager cm)
1:         super("<init>", cm);
0:         setNodeType(C_NodeTypes.NEW_INVOCATION_NODE);
1:         addParms(params);
/////////////////////////////////////////////////////////////////////////
1:         TableName vtiName = vtiTableFuncName;
1:         TableDescriptor td = tableDescriptor;
/////////////////////////////////////////////////////////////////////////
1:      boolean isBuiltinVTI()  { return isBuiltinVTI; }
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
commit:232d09a
/////////////////////////////////////////////////////////////////////////
1: 			publicMethod = classInspector.findPublicMethod
1:                 (
1:                  javaClassName, methodName,
1:                  parmTypeNames, null, isParam, staticMethod, false, hasVarargs()
1:                  );
/////////////////////////////////////////////////////////////////////////
1: 				publicMethod = classInspector.findPublicMethod
1:                     (
1:                      javaClassName, methodName, parmTypeNames,
1:                      primParmTypeNames, isParam, staticMethod, false, hasVarargs()
1:                      );
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
1: 	private boolean isBuiltinVTI = false;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		this.isBuiltinVTI =
1: 		    ( getDataDictionary().getBuiltinVTIClass( td, isTableFunctionVTI) != null);
1: 
/////////////////////////////////////////////////////////////////////////
1: 	 * Report whether this node represents a builtin VTI.
1: 	 */
0: 	public  boolean isBuiltinVTI()  { return isBuiltinVTI; }
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      *                      expression is in, for binding columns.
1:      * @param subqueryList  The subquery list being built as we find SubqueryNodes
1:      * @param aggregates    The aggregate list being built as we find AggregateNodes
1:     JavaValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindParameters(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
commit:9eb1bd1
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		addParms((List) params);
/////////////////////////////////////////////////////////////////////////
0: 		addParms((List) params);
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
0: 					SanityManager.THROWASSERT("Unexpected exception", cnfe);
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", e);
author:Lily Wei
-------------------------------------------------------------------------------
commit:56a7b39
/////////////////////////////////////////////////////////////////////////
1: 			if (ClassInspector.primitiveType(methodParameterTypes[i]))
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:72abc72
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.catalog.TypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 	 	if (routineInfo != null)
1:                 {
1:                     TypeDescriptor returnType = routineInfo.getReturnType();
1:                     if (returnType != null)
1:                     {
1:                         setCollationType(returnType.getCollationType());
1:                     }
1:                 }
1: 	 	return this;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2e1b5e8
/////////////////////////////////////////////////////////////////////////
1: 		verifyClassExist(javaClassName);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.NewInvocationNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import org.apache.derby.catalog.AliasInfo;
1: 
1: import java.lang.reflect.Member;
1: import java.lang.reflect.Modifier;
1: 
0: import java.util.Vector;
0: import java.util.Enumeration;
1: 
1: /**
1:  * A NewInvocationNode represents a new object() invocation.
1:  *
0:  * @author Jerry Brenner
1:  */
0: public class NewInvocationNode extends MethodCallNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	// Whether or not to do a single instantiation
1: 	private boolean singleInstantiation = false;
1: 
1: 	private boolean delimitedIdentifier;
1: 
1: 	/**
0: 	 * Initializer for a NewInvocationNode
1: 	 *
0: 	 * @param javaClassName		The full package.class name of the class
0: 	 * @param parameterList		The parameter list for the constructor
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void init(
0: 					Object javaClassName,
0: 					Object params,
0: 					Object delimitedIdentifier)
1: 		throws StandardException
1: 	{
0: 		super.init("<init>");
0: 		addParms((Vector) params);
1: 
0: 		this.javaClassName = (String) javaClassName;
1: 		this.delimitedIdentifier =
1: 				 ((Boolean) delimitedIdentifier).booleanValue();
1: 	}
1: 
1: 	/**
1: 	 * Mark this node as only needing to
1: 	 * to a single instantiation.  (We can
1: 	 * reuse the object after newing it.)
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	void setSingleInstantiation()
1: 	{
1: 		singleInstantiation = true;
1: 	}
1: 
1: 	/**
0: 	  *	Get the resolved Classes of our parameters
1: 	  *
0: 	  *	@return	the Classes of our parameters
1: 	  */
0: 	public	Class[]	getMethodParameterClasses() 
1: 	{ 
0: 		ClassInspector ci = getClassFactory().getClassInspector();
1: 
0: 		Class[]	parmTypeClasses = new Class[methodParms.length];
0: 		for (int i = 0; i < methodParms.length; i++)
1: 		{
0: 			String className = methodParameterTypes[i];
1: 			try
1: 			{
0: 				parmTypeClasses[i] = ci.getClass(className);
1: 			}
0: 			catch (ClassNotFoundException cnfe)
1: 			{
0: 				/* We should never get this exception since we verified 
0: 				 * that the classes existed at bind time.  Just return null.
1: 				 */
1: 				if (SanityManager.DEBUG)
1: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected exception - " + cnfe);
1: 				}
1: 				return null;
1: 			}
1: 		}
1: 
0: 		return parmTypeClasses;
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public JavaValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector) 
1: 			throws StandardException
1: 	{
0: 		bindParameters(fromList, subqueryList, aggregateVector);
1: 
0: 		javaClassName = verifyClassExist(javaClassName, !delimitedIdentifier);
1: 		/*
1: 		** Get the parameter type names out of the parameters and put them
1: 		** in an array.
1: 		*/
1: 		String[]	parmTypeNames = getObjectSignature();
1: 		boolean[]	isParam = getIsParam();
1: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1: 
1: 		/*
1: 		** Find the matching constructor.
1: 		*/
1: 		try
1: 		{
1: 			/* First try with built-in types and mappings */
1: 			method = classInspector.findPublicConstructor(javaClassName,
1: 											parmTypeNames, null, isParam);
1: 
1: 			/* If no match, then retry to match any possible combinations of
1: 			 * object and primitive types.
1: 			 */
1: 			if (method == null)
1: 			{
1: 				String[] primParmTypeNames = getPrimitiveSignature(false);
1: 				method = classInspector.findPublicConstructor(javaClassName,
1: 								parmTypeNames, primParmTypeNames, isParam);
1: 			}
1: 		}
1: 		catch (ClassNotFoundException e)
1: 		{
1: 			/*
1: 			** If one of the classes couldn't be found, just act like the
1: 			** method couldn't be found.  The error lists all the class names,
1: 			** which should give the user enough info to diagnose the problem.
1: 			*/
1: 			method = null;
1: 		}
1: 
1: 		if (method == null)
1: 		{
1: 			/* Put the parameter type names into a single string */
1: 			String	parmTypes = "";
1: 			for (int i = 0; i < parmTypeNames.length; i++)
1: 			{
1: 				if (i != 0)
1: 					parmTypes += ", ";
1: 				parmTypes += (parmTypeNames[i].length() != 0 ?
1: 								parmTypeNames[i] :
1: 								MessageService.getTextMessage(
1: 									SQLState.LANG_UNTYPED)
1: 									);
1: 			}
1: 
1: 			throw StandardException.newException(SQLState.LANG_NO_CONSTRUCTOR_FOUND, 
1: 													javaClassName,
1: 												 	parmTypes);
1: 		}
1: 
1: 		methodParameterTypes = classInspector.getParameterTypes(method);
1: 
1: 		for (int i = 0; i < methodParameterTypes.length; i++)
1: 		{
0: 			if (classInspector.primitiveType(methodParameterTypes[i]))
1: 				methodParms[i].castToPrimitive(true);
1: 		}
1: 
1: 		/* Set type info for any null parameters */
1: 		if ( someParametersAreNull() )
1: 		{
1: 			setNullParameterInfo(methodParameterTypes);
1: 		}
1: 
1: 		/* Constructor always returns an object of type javaClassName */
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(javaClassName.equals(classInspector.getType(method)),
1: 				"Constructor is wrong type, expected " + javaClassName + 
1: 				" actual is " + classInspector.getType(method));
1: 		}
1: 	 	setJavaTypeName( javaClassName );
1: 
0: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Categorize this predicate.  Initially, this means
1: 	 * building a bit map of the referenced tables for each predicate.
1: 	 * If the source of this ColumnReference (at the next underlying level) 
1: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1: 	 * will not be pushed down.
1: 	 *
1: 	 * For example, in:
1: 	 *		select * from (select 1 from s) a (x) where x = 1
1: 	 * we will not push down x = 1.
1: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1: 	 * that tree into the pushed predicate, and that tree could contain
1: 	 * subqueries and method calls.
1: 	 * RESOLVE - revisit this issue once we have views.
1: 	 *
1: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1: 	 * @param simplePredsOnly	Whether or not to consider method
1: 	 *							calls, field references and conditional nodes
1: 	 *							when building bit map
1: 	 *
1: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1: 	 *						or a VirtualColumnNode.
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1: 		throws StandardException
1: 	{
1: 		/* We stop here when only considering simple predicates
1: 		 *  as we don't consider new opeators when looking
1: 		 * for null invariant predicates.
1: 		 */
1: 		if (simplePredsOnly)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		boolean pushable = true;
1: 
1: 		pushable = pushable && super.categorize(referencedTabs, simplePredsOnly);
1: 
1: 		return pushable;
1: 	}
1: 
1: 	/**
0: 	 * Build a JBitSet of all of the tables that we are
0: 	 * correlated with.
1: 	 *
0: 	 * @param correlationMap	The JBitSet of the tables that we are correlated with.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	void getCorrelationTables(JBitSet correlationMap)
1: 		throws StandardException
1: 	{
0: 		CollectNodesVisitor getCRs = new CollectNodesVisitor(ColumnReference.class);
0: 		super.accept(getCRs);
0: 		Vector colRefs = getCRs.getList();
0: 		for (Enumeration e = colRefs.elements(); e.hasMoreElements(); )
1: 		{
0: 			ColumnReference ref = (ColumnReference)e.nextElement();
0: 			if (ref.getCorrelated())
1: 			{
0: 				correlationMap.set(ref.getTableNumber());
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Is this class assignable to the specified class?
1: 	 * This is useful for the VTI interface where we want to see
1: 	 * if the class implements java.sql.ResultSet.
1: 	 *
1: 	 * @param toClassName	The java class name we want to assign to
1: 	 *
1: 	 * @return boolean		Whether or not this class is assignable to
1: 	 *						the specified class
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	protected boolean assignableTo(String toClassName) throws StandardException
1: 	{
1: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1: 		return classInspector.assignableTo(javaClassName, toClassName);
1: 	}
1: 
1: 
1: 	/**
1: 	 * Is this class have a public method with the specified signiture
1: 	 * This is useful for the VTI interface where we want to see
1: 	 * if the class has the option static method for returning the
1: 	 * ResultSetMetaData.
1: 	 *
1: 	 * @param methodName	The method name we are looking for
1: 	 * @param staticMethod	Whether or not the method we are looking for is static
1: 	 *
1: 	 * @return Member		The Member representing the method (or null
1: 	 *						if the method doesn't exist).
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	protected Member findPublicMethod(String methodName, boolean staticMethod)
1: 		throws StandardException
1: 	{
1: 		Member publicMethod;
1: 
1: 		/*
1: 		** Get the parameter type names out of the parameters and put them
1: 		** in an array.
1: 		*/
1: 		String[]	parmTypeNames = getObjectSignature();
1: 		boolean[]	isParam = getIsParam();
1: 
1: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1: 
1: 		try
1: 		{
0: 			publicMethod = classInspector.findPublicMethod(javaClassName, methodName,
0: 											   parmTypeNames, null, isParam, staticMethod, false);
1: 
1: 			/* If no match, then retry to match any possible combinations of
1: 			 * object and primitive types.
1: 			 */
1: 			if (publicMethod == null)
1: 			{
1: 				String[] primParmTypeNames = getPrimitiveSignature(false);
0: 				publicMethod = classInspector.findPublicMethod(javaClassName, 
0: 										methodName, parmTypeNames,
0: 										primParmTypeNames, isParam, staticMethod, false);
1: 			}
1: 		}
1: 		catch (ClassNotFoundException e)
1: 		{
1: 			/* We should always be able to find the class at this point
1: 			 * since the protocol is to check to see if it exists
1: 			 * before checking for a method off of it.  Anyway, just return
1: 			 * null if the class doesn't exist, since the method doesn't
1: 			 * exist in that case.
1: 			 */
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				SanityManager.THROWASSERT(
0: 					"Unexpected ClassNotFoundException for javaClassName");
1: 			}
1: 			return null;
1: 		}
1: 
1: 		return	publicMethod;
1: 	}
1: 
1: 	/**
1: 	 * Do code generation for this method call
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the expression will go into
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 		/* If this node is for an ungrouped aggregator, 
1: 		 * then we generate a conditional
1: 		 * wrapper so that we only new the aggregator once.
1: 		 *		(fx == null) ? fx = new ... : fx
1: 		 */
1: 		LocalField objectFieldLF = null;
1: 		if (singleInstantiation)
1: 		{
1: 			/* Declare the field */
1: 			objectFieldLF = acb.newFieldDeclaration(Modifier.PRIVATE, javaClassName);
1: 
1: 			// now we fill in the body of the conditional
1: 
1: 			mb.getField(objectFieldLF);
1: 			mb.conditionalIfNull();
1: 		}
1: 
1: 		mb.pushNewStart(javaClassName);
1: 		int nargs = generateParameters(acb, mb);
1: 		mb.pushNewComplete(nargs);
1: 
1: 		if (singleInstantiation) {
1: 
1: 			  mb.putField(objectFieldLF);
1: 			mb.startElseCode();
1: 			  mb.getField(objectFieldLF);
1: 			mb.completeConditional();
1: 		}
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:6c7bf48
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
0: 	 * <li>javaClassName		The full package.class name of the class</li>
/////////////////////////////////////////////////////////////////////////
0: 		this.javaClassName = (String) javaClassName;
0: 		this.delimitedIdentifier =
0: 				 ((Boolean) delimitedIdentifier).booleanValue();
0: 	}
0: 
0: 	/* This version of the "init" method is used for mapping a table name
1: 	 * or table function name to a corresponding VTI class name.  The VTI
1: 	 * is then invoked as a regular NEW invocation node.
0: 	 *
1: 	 * There are two kinds of VTI mappings that we do: the first is for
1: 	 * "table names", the second is for "table function names".  Table
1: 	 * names can only be mapped to VTIs that do not accept any arguments;
1: 	 * any VTI that has at least one constructor which accepts one or more
1: 	 * arguments must be mapped from a table *function* name.  The way we
1: 	 * tell the difference is by looking at the received arguments: if
1: 	 * the vtiTableFuncName that we receive is null then we are mapping
1: 	 * a "table name" and tableDescriptor must be non-null; if the
1: 	 * vtiTableFuncName is non-null then we are mapping a "table
1: 	 * function name" and tableDescriptor must be null.
0: 	 *
1: 	 * Note that we could have just used a single "init()" method and
1: 	 * performed the mappings based on what type of Object "javaClassName"
1: 	 * was (String, TableDescriptor, or TableName), but making this VTI
1: 	 * mapping method separate from the "normal" init() method seems
1: 	 * cleaner...
0: 	 *
1: 	 * @param vtiTableFuncName A TableName object holding a qualified name
1: 	 *  that maps to a VTI which accepts arguments.  If vtiTableFuncName is
1: 	 *  null then tableDescriptor must NOT be null.
1: 	 * @param tableDescriptor A table descriptor that corresponds to a
1: 	 *  table name (as opposed to a table function name) that will be
1: 	 *  mapped to a no-argument VTI.  If tableDescriptor is null then
1: 	 *  vtiTableFuncName should not be null.
1: 	 * @param params Parameter list for the VTI constructor.
1: 	 * @param delimitedIdentifier Whether or not the target class name
1: 	 *  is a delimited identifier.
0: 	 */
0: 	public void init(
0: 					Object vtiTableFuncName,
0: 					Object tableDescriptor,
0: 					Object params,
0: 					Object delimitedIdentifier)
0: 		throws StandardException
0: 	{
0: 		super.init("<init>");
0: 		addParms((Vector) params);
0: 
0: 		if (SanityManager.DEBUG)
1: 			// Exactly one of vtiTableFuncName or tableDescriptor should
1: 			// be null.
1: 			SanityManager.ASSERT(
1: 				((vtiTableFuncName == null) && (tableDescriptor != null)) ||
1: 				((vtiTableFuncName != null) && (tableDescriptor == null)),
1: 				"Exactly one of vtiTableFuncName or tableDescriptor should " +
1: 				"be null, but neither or both of them were null.");
0: 		}
0: 		TableName vtiName = (TableName)vtiTableFuncName;
0: 		TableDescriptor td = (TableDescriptor)tableDescriptor;
1: 		boolean isTableFunctionVTI = (vtiTableFuncName != null);
1: 		if (isTableFunctionVTI)
0: 		{
1: 			// We have to create a generic TableDescriptor to
1: 			// pass to the data dictionary.
1: 			td = new TableDescriptor(getDataDictionary(),
1: 					vtiName.getTableName(),
1: 					getSchemaDescriptor(vtiName.getSchemaName()),
1: 					TableDescriptor.VTI_TYPE,
1: 					TableDescriptor.DEFAULT_LOCK_GRANULARITY);
0: 		}
1: 		/* Use the table descriptor to figure out what the corresponding
1: 		 * VTI class name is; we let the data dictionary do the mapping
1: 		 * for us.
0: 		 */
1: 		this.javaClassName = getDataDictionary().getVTIClass(
1: 			td, isTableFunctionVTI);
1: 		/* If javaClassName is still null at this point then we
1: 		 * could not find the target class for the received table
1: 		 * (or table function) name.  So throw the appropriate
1: 		 * error.
0: 		 */
1: 		if (this.javaClassName == null)
0: 		{
1: 			if (!isTableFunctionVTI)
1: 				/* Create a TableName object from the table descriptor
1: 				 * that we received.  This gives us the name to use
1: 				 * in the error message.
0: 				 */
1: 				vtiName = makeTableName(td.getSchemaName(),
1: 					td.getDescriptorName());
0: 
1: 			throw StandardException.newException(
1: 				isTableFunctionVTI
1: 					? SQLState.LANG_NO_SUCH_METHOD_ALIAS
1: 					: SQLState.LANG_TABLE_NOT_FOUND,
1: 				vtiName.getFullTableName());
commit:41a9315
/////////////////////////////////////////////////////////////////////////
commit:b0db140
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
0: 	 * <li>javaClassName		The full package.class name of the class
0: 	 * 	                    	(as a String), or else a TableName object
0: 	 *                  		that maps to the full class name </li>
/////////////////////////////////////////////////////////////////////////
0: 		/* If javaClassName is a String then it is the full package
0: 		 * class name for the class to be invoked, so just store it
0: 		 * locally.
0: 		 */
0: 		if (javaClassName instanceof String)
0: 			this.javaClassName = (String) javaClassName;
0: 		else
0: 		{
0: 			/* javaClassName is a TableName object representing a table
0: 			 * function name that maps to some VTI class name.  For
0: 			 * example, in the following query:
0: 			 *
0: 			 *   select * from TABLE(SYSCS_DIAG.SPACE_TABLE(?)) x
0: 			 *
0: 			 * javaClassName will be a TableName object representing
0: 			 * the table function name "SYSCS_DIAG.SPACE_TABLE".  So
0: 			 * we need to look up that TableName to figure out what
0: 			 * the corresponding target class name should be.  We
0: 			 * figure that out by using the data dictionary.
0: 			 */
0: 			TableName funcName = (TableName)javaClassName;
0: 
0: 			/* If no schema was specified then we want to default to the
0: 			 * current schema; that's what the following line does.
0: 			 */
0: 			String funcSchema =
0: 				getSchemaDescriptor(funcName.getSchemaName()).getSchemaName();
0: 
0: 			this.javaClassName =
0: 				getDataDictionary().getVTIClassForTableFunction(
0: 					funcSchema, funcName.getTableName());
0: 
0: 			/* If javaClassName is still null at this point then we
0: 			 * could not find the target class for the received
0: 			 * table function name.
0: 			 */
0: 			if (this.javaClassName == null)
0: 			{
0: 				throw StandardException.newException(
0: 					SQLState.LANG_NO_SUCH_METHOD_ALIAS,
0: 					funcName.getFullTableName());
0: 			}
0: 		}
0: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * Initializer for a NewInvocationNode. Parameters are:
0: 	 * <ul>
0: 	 * <li>javaClassName		The full package.class name of the class</li>
0: 	 * <li>parameterList		The parameter list for the constructor</li>
0: 	 * </ul>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import org.apache.derby.catalog.AliasInfo;
0: 
0: import java.lang.reflect.Member;
0: import java.lang.reflect.Modifier;
0: 
0: import java.util.Vector;
0: import java.util.Enumeration;
0: 
0: /**
0:  * A NewInvocationNode represents a new object() invocation.
0:  *
0:  * @author Jerry Brenner
0:  */
0: public class NewInvocationNode extends MethodCallNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	// Whether or not to do a single instantiation
0: 	private boolean singleInstantiation = false;
0: 
0: 	private boolean delimitedIdentifier;
0: 
0: 	/**
0: 	 * Initializer for a NewInvocationNode
0: 	 *
0: 	 * @param javaClassName		The full package.class name of the class
0: 	 * @param parameterList		The parameter list for the constructor
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void init(
0: 					Object javaClassName,
0: 					Object params,
0: 					Object delimitedIdentifier)
0: 		throws StandardException
0: 	{
0: 		super.init("<init>");
0: 		addParms((Vector) params);
0: 
0: 		this.javaClassName = (String) javaClassName;
0: 		this.delimitedIdentifier =
0: 				 ((Boolean) delimitedIdentifier).booleanValue();
0: 	}
0: 
0: 	/**
0: 	 * Mark this node as only needing to
0: 	 * to a single instantiation.  (We can
0: 	 * reuse the object after newing it.)
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	void setSingleInstantiation()
0: 	{
0: 		singleInstantiation = true;
0: 	}
0: 
0: 	/**
0: 	  *	Get the resolved Classes of our parameters
0: 	  *
0: 	  *	@return	the Classes of our parameters
0: 	  */
0: 	public	Class[]	getMethodParameterClasses() 
0: 	{ 
0: 		ClassInspector ci = getClassFactory().getClassInspector();
0: 
0: 		Class[]	parmTypeClasses = new Class[methodParms.length];
0: 		for (int i = 0; i < methodParms.length; i++)
0: 		{
0: 			String className = methodParameterTypes[i];
0: 			try
0: 			{
0: 				parmTypeClasses[i] = ci.getClass(className);
0: 			}
0: 			catch (ClassNotFoundException cnfe)
0: 			{
0: 				/* We should never get this exception since we verified 
0: 				 * that the classes existed at bind time.  Just return null.
0: 				 */
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected exception - " + cnfe);
0: 				}
0: 				return null;
0: 			}
0: 		}
0: 
0: 		return parmTypeClasses;
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public JavaValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector) 
0: 			throws StandardException
0: 	{
0: 		bindParameters(fromList, subqueryList, aggregateVector);
0: 
0: 		javaClassName = verifyClassExist(javaClassName, !delimitedIdentifier);
0: 		/*
0: 		** Get the parameter type names out of the parameters and put them
0: 		** in an array.
0: 		*/
0: 		String[]	parmTypeNames = getObjectSignature();
0: 		boolean[]	isParam = getIsParam();
0: 		ClassInspector classInspector = getClassFactory().getClassInspector();
0: 
0: 		/*
0: 		** Find the matching constructor.
0: 		*/
0: 		try
0: 		{
0: 			/* First try with built-in types and mappings */
0: 			method = classInspector.findPublicConstructor(javaClassName,
0: 											parmTypeNames, null, isParam);
0: 
0: 			/* If no match, then retry to match any possible combinations of
0: 			 * object and primitive types.
0: 			 */
0: 			if (method == null)
0: 			{
0: 				String[] primParmTypeNames = getPrimitiveSignature(false);
0: 				method = classInspector.findPublicConstructor(javaClassName,
0: 								parmTypeNames, primParmTypeNames, isParam);
0: 			}
0: 		}
0: 		catch (ClassNotFoundException e)
0: 		{
0: 			/*
0: 			** If one of the classes couldn't be found, just act like the
0: 			** method couldn't be found.  The error lists all the class names,
0: 			** which should give the user enough info to diagnose the problem.
0: 			*/
0: 			method = null;
0: 		}
0: 
0: 		if (method == null)
0: 		{
0: 			/* Put the parameter type names into a single string */
0: 			String	parmTypes = "";
0: 			for (int i = 0; i < parmTypeNames.length; i++)
0: 			{
0: 				if (i != 0)
0: 					parmTypes += ", ";
0: 				parmTypes += (parmTypeNames[i].length() != 0 ?
0: 								parmTypeNames[i] :
0: 								MessageService.getTextMessage(
0: 									SQLState.LANG_UNTYPED)
0: 									);
0: 			}
0: 
0: 			throw StandardException.newException(SQLState.LANG_NO_CONSTRUCTOR_FOUND, 
0: 													javaClassName,
0: 												 	parmTypes);
0: 		}
0: 
0: 		methodParameterTypes = classInspector.getParameterTypes(method);
0: 
0: 		for (int i = 0; i < methodParameterTypes.length; i++)
0: 		{
0: 			if (classInspector.primitiveType(methodParameterTypes[i]))
0: 				methodParms[i].castToPrimitive(true);
0: 		}
0: 
0: 		/* Set type info for any null parameters */
0: 		if ( someParametersAreNull() )
0: 		{
0: 			setNullParameterInfo(methodParameterTypes);
0: 		}
0: 
0: 		/* Constructor always returns an object of type javaClassName */
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(javaClassName.equals(classInspector.getType(method)),
0: 				"Constructor is wrong type, expected " + javaClassName + 
0: 				" actual is " + classInspector.getType(method));
0: 		}
0: 	 	setJavaTypeName( javaClassName );
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Categorize this predicate.  Initially, this means
0: 	 * building a bit map of the referenced tables for each predicate.
0: 	 * If the source of this ColumnReference (at the next underlying level) 
0: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
0: 	 * will not be pushed down.
0: 	 *
0: 	 * For example, in:
0: 	 *		select * from (select 1 from s) a (x) where x = 1
0: 	 * we will not push down x = 1.
0: 	 * NOTE: It would be easy to handle the case of a constant, but if the
0: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
0: 	 * that tree into the pushed predicate, and that tree could contain
0: 	 * subqueries and method calls.
0: 	 * RESOLVE - revisit this issue once we have views.
0: 	 *
0: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
0: 	 * @param simplePredsOnly	Whether or not to consider method
0: 	 *							calls, field references and conditional nodes
0: 	 *							when building bit map
0: 	 *
0: 	 * @return boolean		Whether or not source.expression is a ColumnReference
0: 	 *						or a VirtualColumnNode.
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
0: 		throws StandardException
0: 	{
0: 		/* We stop here when only considering simple predicates
0: 		 *  as we don't consider new opeators when looking
0: 		 * for null invariant predicates.
0: 		 */
0: 		if (simplePredsOnly)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		boolean pushable = true;
0: 
0: 		pushable = pushable && super.categorize(referencedTabs, simplePredsOnly);
0: 
0: 		return pushable;
0: 	}
0: 
0: 	/**
0: 	 * Build a JBitSet of all of the tables that we are
0: 	 * correlated with.
0: 	 *
0: 	 * @param correlationMap	The JBitSet of the tables that we are correlated with.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	void getCorrelationTables(JBitSet correlationMap)
0: 		throws StandardException
0: 	{
0: 		CollectNodesVisitor getCRs = new CollectNodesVisitor(ColumnReference.class);
0: 		super.accept(getCRs);
0: 		Vector colRefs = getCRs.getList();
0: 		for (Enumeration e = colRefs.elements(); e.hasMoreElements(); )
0: 		{
0: 			ColumnReference ref = (ColumnReference)e.nextElement();
0: 			if (ref.getCorrelated())
0: 			{
0: 				correlationMap.set(ref.getTableNumber());
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Is this class assignable to the specified class?
0: 	 * This is useful for the VTI interface where we want to see
0: 	 * if the class implements java.sql.ResultSet.
0: 	 *
0: 	 * @param toClassName	The java class name we want to assign to
0: 	 *
0: 	 * @return boolean		Whether or not this class is assignable to
0: 	 *						the specified class
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	protected boolean assignableTo(String toClassName) throws StandardException
0: 	{
0: 		ClassInspector classInspector = getClassFactory().getClassInspector();
0: 		return classInspector.assignableTo(javaClassName, toClassName);
0: 	}
0: 
0: 
0: 	/**
0: 	 * Is this class have a public method with the specified signiture
0: 	 * This is useful for the VTI interface where we want to see
0: 	 * if the class has the option static method for returning the
0: 	 * ResultSetMetaData.
0: 	 *
0: 	 * @param methodName	The method name we are looking for
0: 	 * @param staticMethod	Whether or not the method we are looking for is static
0: 	 *
0: 	 * @return Member		The Member representing the method (or null
0: 	 *						if the method doesn't exist).
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	protected Member findPublicMethod(String methodName, boolean staticMethod)
0: 		throws StandardException
0: 	{
0: 		Member publicMethod;
0: 
0: 		/*
0: 		** Get the parameter type names out of the parameters and put them
0: 		** in an array.
0: 		*/
0: 		String[]	parmTypeNames = getObjectSignature();
0: 		boolean[]	isParam = getIsParam();
0: 
0: 		ClassInspector classInspector = getClassFactory().getClassInspector();
0: 
0: 		try
0: 		{
0: 			publicMethod = classInspector.findPublicMethod(javaClassName, methodName,
0: 											   parmTypeNames, null, isParam, staticMethod, false);
0: 
0: 			/* If no match, then retry to match any possible combinations of
0: 			 * object and primitive types.
0: 			 */
0: 			if (publicMethod == null)
0: 			{
0: 				String[] primParmTypeNames = getPrimitiveSignature(false);
0: 				publicMethod = classInspector.findPublicMethod(javaClassName, 
0: 										methodName, parmTypeNames,
0: 										primParmTypeNames, isParam, staticMethod, false);
0: 			}
0: 		}
0: 		catch (ClassNotFoundException e)
0: 		{
0: 			/* We should always be able to find the class at this point
0: 			 * since the protocol is to check to see if it exists
0: 			 * before checking for a method off of it.  Anyway, just return
0: 			 * null if the class doesn't exist, since the method doesn't
0: 			 * exist in that case.
0: 			 */
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"Unexpected ClassNotFoundException for javaClassName");
0: 			}
0: 			return null;
0: 		}
0: 
0: 		return	publicMethod;
0: 	}
0: 
0: 	/**
0: 	 * Do code generation for this method call
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the expression will go into
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		/* If this node is for an ungrouped aggregator, 
0: 		 * then we generate a conditional
0: 		 * wrapper so that we only new the aggregator once.
0: 		 *		(fx == null) ? fx = new ... : fx
0: 		 */
0: 		LocalField objectFieldLF = null;
0: 		if (singleInstantiation)
0: 		{
0: 			/* Declare the field */
0: 			objectFieldLF = acb.newFieldDeclaration(Modifier.PRIVATE, javaClassName);
0: 
0: 			// now we fill in the body of the conditional
0: 
0: 			mb.getField(objectFieldLF);
0: 			mb.conditionalIfNull();
0: 		}
0: 
0: 		mb.pushNewStart(javaClassName);
0: 		int nargs = generateParameters(acb, mb);
0: 		mb.pushNewComplete(nargs);
0: 
0: 		if (singleInstantiation) {
0: 
0: 			  mb.putField(objectFieldLF);
0: 			mb.startElseCode();
0: 			  mb.getField(objectFieldLF);
0: 			mb.completeConditional();
0: 		}
0: 	}
0: }
============================================================================