1:43ec835: /**
1:43ec835:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConsistencyCheckerTest
1:43ec835:  *
1:43ec835:  * Licensed to the Apache Software Foundation (ASF) under one
1:43ec835:  * or more contributor license agreements.  See the NOTICE file
1:43ec835:  * distributed with this work for additional information
1:43ec835:  * regarding copyright ownership.  The ASF licenses this file
1:43ec835:  * to you under the Apache License, Version 2.0 (the
1:43ec835:  * "License"); you may not use this file except in compliance
1:43ec835:  * with the License.  You may obtain a copy of the License at
1:43ec835:  *
1:43ec835:  *   http://www.apache.org/licenses/LICENSE-2.0
1:43ec835:  *
1:43ec835:  * Unless required by applicable law or agreed to in writing,
1:43ec835:  * software distributed under the License is distributed on an
1:43ec835:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:43ec835:  * KIND, either express or implied.  See the License for the
1:43ec835:  * specific language governing permissions and limitations
1:43ec835:  * under the License.
1:43ec835:  */
1:43ec835: 
1:43ec835: package org.apache.derbyTesting.functionTests.tests.lang;
1:43ec835: 
1:43ec835: import java.sql.CallableStatement;
1:43ec835: import java.sql.PreparedStatement;
1:43ec835: import java.sql.ResultSet;
1:43ec835: import java.sql.SQLException;
1:43ec835: import java.sql.Statement;
1:43ec835: import junit.framework.Test;
1:43ec835: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:43ec835: import org.apache.derbyTesting.junit.JDBC;
1:43ec835: import org.apache.derbyTesting.junit.TestConfiguration;
1:43ec835: 
1:43ec835: 
1:43ec835: public final class ConsistencyCheckerTest extends  BaseJDBCTestCase {
1:43ec835: 
1:43ec835:     private Statement st;
1:43ec835:     private ResultSet rs;
1:43ec835:     private String [] expColNames;
1:43ec835:     private String [][] expRS;
1:43ec835:     private final String LANG_INDEX_ROW_COUNT_MISMATCH = "X0Y55";
1:43ec835:     private final String LANG_INCONSISTENT_ROW_LOCATION = "X0X62";
1:43ec835:     private final String LANG_INDEX_COLUMN_NOT_EQUAL = "X0X61";
1:43ec835:     /**
1:43ec835:      * Public constructor required for running test as standalone JUnit.
1:43ec835:      * @param name test name
1:43ec835:      */
1:43ec835:     public ConsistencyCheckerTest(String name)
1:43ec835:     {
1:43ec835:         super(name);
1:43ec835:     }
1:43ec835: 
1:43ec835:     public static Test suite()
1:43ec835:     {
1:43ec835:         return TestConfiguration.defaultSuite(ConsistencyCheckerTest.class);
1:43ec835:     }
1:43ec835: 
1:43ec835:     public void testConsistencyChecker() throws Exception
1:43ec835:     {
1:43ec835:         CallableStatement cSt;
1:43ec835:         st = createStatement();
1:43ec835: 
1:43ec835: 
1:43ec835:         try {
1:43ec835:             x("create table t1(i int, s smallint, c10 char(10), "
1:43ec835:                              + "vc10 varchar(10), dc decimal(5,2))");
1:43ec835: 
1:43ec835:             x("create index t1_i on t1(i)");
1:43ec835:             x("create index t1_s on t1(s)");
1:43ec835:             x("create index t1_c10 on t1(c10)");
1:43ec835:             x("create index t1_vc10 on t1(vc10)");
1:43ec835:             x("create index t1_dc on t1(dc)");
1:43ec835: 
1:43ec835:             // populate the tables
1:43ec835: 
1:43ec835:             x("insert into t1 values (1, 11, '1 1', '1 1 1 ', 111.11)");
1:43ec835:             x("insert into t1 values (2, 22, '2 2', '2 2 2 ', 222.22)");
1:43ec835:             x("insert into t1 values (3, 33, '3 3', '3 3 3 ', 333.33)");
1:43ec835:             x("insert into t1 values (4, 44, '4 4', '4 4 4 ', 444.44)");
1:43ec835: 
1:43ec835:             // verify that everything is alright
1:43ec835: 
1:43ec835:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835:             c1();
1:43ec835:             r1();
1:43ec835: 
1:43ec835:             x("CREATE PROCEDURE RFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:43ec835:               + "LANGUAGE JAVA EXTERNAL NAME "
1:43ec835:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:43ec835:               + "tencyChecker.reinsertFirstHeapRow'"
1:43ec835:               + "PARAMETER STYLE JAVA");
1:43ec835: 
1:43ec835:             x("CREATE PROCEDURE DFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:43ec835:               + "LANGUAGE JAVA EXTERNAL NAME "
1:43ec835:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:43ec835:               + "tencyChecker.deleteFirstHeapRow'"
1:43ec835:               + "PARAMETER STYLE JAVA");
1:43ec835: 
1:43ec835:             x("CREATE PROCEDURE NFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:43ec835:               + "LANGUAGE JAVA EXTERNAL NAME "
1:43ec835:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:43ec835:               + "tencyChecker.nullFirstHeapRow'"
1:43ec835:               + "PARAMETER STYLE JAVA");
1:43ec835: 
1:43ec835:             setAutoCommit(false);
1:43ec835: 
1:43ec835:             // differing row counts
1:43ec835:             // RFHR: reinsertFirstHeapRow
1:43ec835:             cSt = prepareCall("call RFHR('APP', 'T1')");
1:43ec835:             assertUpdateCount(cSt, 0);
1:43ec835: 
1:43ec835:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             // Drop and recreate each index to see differing count move to next
1:43ec835:             // index.
1:43ec835: 
1:43ec835:             x("drop index t1_i");
1:43ec835:             x("create index t1_i on t1(i)");
1:43ec835: 
1:43ec835:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835:             x("drop index t1_s");
1:43ec835:             x("create index t1_s on t1(s)");
1:43ec835:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_c10");
1:43ec835:             x("create index t1_c10 on t1(c10)");
1:43ec835:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_vc10");
1:43ec835:             x("create index t1_vc10 on t1(vc10)");
1:43ec835:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_dc");
1:43ec835:             x("create index t1_dc on t1(dc)");
1:43ec835: 
1:43ec835:             // Everything should be back to normal
1:43ec835:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835:             c1();
1:43ec835:             r1();
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Delete 1st row from heap
1:43ec835:             //
1:43ec835:             // DFHR: deleteFirstHeapRow
1:43ec835:             //
1:43ec835:             cSt = prepareCall("call DFHR('APP', 'T1')");
1:43ec835:             assertUpdateCount(cSt, 0);
1:43ec835: 
1:43ec835:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Drop and recreate each index to see differing count
1:43ec835:             // move to next index.
1:43ec835:             //
1:43ec835: 
1:43ec835:             x("drop index t1_i");
1:43ec835:             x("create index t1_i on t1(i)");
1:43ec835: 
1:43ec835:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_s");
1:43ec835:             x("create index t1_s on t1(s)");
1:43ec835: 
1:43ec835:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_c10");
1:43ec835:             x("create index t1_c10 on t1(c10)");
1:43ec835: 
1:43ec835:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_vc10");
1:43ec835:             x("create index t1_vc10 on t1(vc10)");
1:43ec835: 
1:43ec835:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_dc");
1:43ec835:             x("create index t1_dc on t1(dc)");
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Everything should be back to normal
1:43ec835:             //
1:43ec835: 
1:43ec835:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835:             c1();
1:43ec835:             r1();
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Set 1st row from heap to all nulls
1:43ec835:             //
1:43ec835: 
1:43ec835:             q("select * from t1");
1:43ec835: 
1:43ec835:             expColNames = new String [] {"I", "S", "C10", "VC10", "DC"};
1:43ec835:             JDBC.assertColumnNames(rs, expColNames);
1:43ec835: 
1:43ec835:             expRS = new String [][]
1:43ec835:                 {
1:43ec835:                     {"2", "22", "2 2", "2 2 2", "222.22"},
1:43ec835:                     {"3", "33", "3 3", "3 3 3", "333.33"},
1:43ec835:                     {"4", "44", "4 4", "4 4 4", "444.44"},
1:43ec835:                     {"1", "11", "1 1", "1 1 1", "111.11"}
1:43ec835:                 };
1:43ec835:             JDBC.assertFullResultSet(rs, expRS, true);
1:43ec835: 
1:43ec835:             // NFHR: nullFirstHeapRow
1:43ec835:             cSt = prepareCall("call NFHR('APP', 'T1')");
1:43ec835:             assertUpdateCount(cSt, 0);
1:43ec835: 
1:43ec835:             q("select * from t1");
1:43ec835: 
1:43ec835:             expColNames = new String [] {"I", "S", "C10", "VC10", "DC"};
1:43ec835:             JDBC.assertColumnNames(rs, expColNames);
1:43ec835: 
1:43ec835:             expRS = new String [][]
1:43ec835:                 {
1:43ec835:                     {null, null, null, null, null},
1:43ec835:                     {"3", "33", "3 3", "3 3 3", "333.33"},
1:43ec835:                     {"4", "44", "4 4", "4 4 4", "444.44"},
1:43ec835:                     {"1", "11", "1 1", "1 1 1", "111.11"}
1:43ec835:                 };
1:43ec835: 
1:43ec835:             JDBC.assertFullResultSet(rs, expRS, true);
1:43ec835: 
1:43ec835:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Drop and recreate each index to see differing count
1:43ec835:             // move to next index.
1:43ec835:             //
1:43ec835: 
1:43ec835:             x("drop index t1_i");
1:43ec835:             x("create index t1_i on t1(i)");
1:43ec835: 
1:43ec835:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_s");
1:43ec835:             x("create index t1_s on t1(s)");
1:43ec835: 
1:43ec835:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_c10");
1:43ec835:             x("create index t1_c10 on t1(c10)");
1:43ec835: 
1:43ec835:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_vc10");
1:43ec835:             x("create index t1_vc10 on t1(vc10)");
1:43ec835: 
1:43ec835:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:43ec835:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835: 
1:43ec835:             x("drop index t1_dc");
1:43ec835:             x("create index t1_dc on t1(dc)");
1:43ec835: 
1:43ec835:             //
1:43ec835:             // Everything should be back to normal.
1:43ec835:             //
1:43ec835: 
1:43ec835:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:43ec835:             c1();
1:43ec835:             r1();
1:43ec835: 
1:43ec835:             // RESOLVE - Next test commented out due to inconsistency
1:43ec835:             // in store error message (sane vs. insane).  Check every
1:43ec835:             // index once store returns consistent error.
1:43ec835:             // insert a row with a bad row location into index call
1:43ec835:             // org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker::
1:43ec835:             //     insertBadRowLocation('APP', 'T1', 'T1_I');
1:43ec835:             // values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1');
1:43ec835: 
1:43ec835:         } finally {
1:43ec835:             // cleanup
1:43ec835:             dontThrow(st, "drop table t1");
1:43ec835:             commit();
1:43ec835: 
1:43ec835:             st = null;
1:43ec835:             rs= null;
1:43ec835:             expColNames = null;
1:43ec835:             expRS = null;
1:43ec835:         }
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void x(String stmt) throws SQLException {
1:43ec835: 
1:43ec835:         st.executeUpdate(stmt);
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void q(String query) throws SQLException {
1:43ec835:         rs = st.executeQuery(query);
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void c1() throws SQLException {
1:43ec835:         expColNames = new String [] {"1"};
1:43ec835:         JDBC.assertColumnNames(rs, expColNames);
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void r1() throws SQLException {
1:43ec835:         expRS = new String [][]
1:43ec835:         {
1:43ec835:             {"1"}
1:43ec835:         };
1:43ec835: 
1:43ec835:         JDBC.assertFullResultSet(rs, expRS, true);
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void e(String expectedState, String stmt) {
1:43ec835:         assertStatementError(expectedState, st, stmt);
1:43ec835:     }
1:43ec835: 
1:43ec835:     private void dontThrow(Statement st, String stm) {
1:43ec835:         try {
1:43ec835:             st.executeUpdate(stm);
1:43ec835:         } catch (SQLException e) {
1:43ec835:             // ignore, best effort here
1:43ec835:         }
1:43ec835:     }
1:43ec835: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:43ec835
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConsistencyCheckerTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: public final class ConsistencyCheckerTest extends  BaseJDBCTestCase {
1: 
1:     private Statement st;
1:     private ResultSet rs;
1:     private String [] expColNames;
1:     private String [][] expRS;
1:     private final String LANG_INDEX_ROW_COUNT_MISMATCH = "X0Y55";
1:     private final String LANG_INCONSISTENT_ROW_LOCATION = "X0X62";
1:     private final String LANG_INDEX_COLUMN_NOT_EQUAL = "X0X61";
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public ConsistencyCheckerTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         return TestConfiguration.defaultSuite(ConsistencyCheckerTest.class);
1:     }
1: 
1:     public void testConsistencyChecker() throws Exception
1:     {
1:         CallableStatement cSt;
1:         st = createStatement();
1: 
1: 
1:         try {
1:             x("create table t1(i int, s smallint, c10 char(10), "
1:                              + "vc10 varchar(10), dc decimal(5,2))");
1: 
1:             x("create index t1_i on t1(i)");
1:             x("create index t1_s on t1(s)");
1:             x("create index t1_c10 on t1(c10)");
1:             x("create index t1_vc10 on t1(vc10)");
1:             x("create index t1_dc on t1(dc)");
1: 
1:             // populate the tables
1: 
1:             x("insert into t1 values (1, 11, '1 1', '1 1 1 ', 111.11)");
1:             x("insert into t1 values (2, 22, '2 2', '2 2 2 ', 222.22)");
1:             x("insert into t1 values (3, 33, '3 3', '3 3 3 ', 333.33)");
1:             x("insert into t1 values (4, 44, '4 4', '4 4 4 ', 444.44)");
1: 
1:             // verify that everything is alright
1: 
1:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:             c1();
1:             r1();
1: 
1:             x("CREATE PROCEDURE RFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:               + "LANGUAGE JAVA EXTERNAL NAME "
1:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:               + "tencyChecker.reinsertFirstHeapRow'"
1:               + "PARAMETER STYLE JAVA");
1: 
1:             x("CREATE PROCEDURE DFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:               + "LANGUAGE JAVA EXTERNAL NAME "
1:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:               + "tencyChecker.deleteFirstHeapRow'"
1:               + "PARAMETER STYLE JAVA");
1: 
1:             x("CREATE PROCEDURE NFHR(P1 VARCHAR(128), P2 VARCHAR(128))"
1:               + "LANGUAGE JAVA EXTERNAL NAME "
1:               + "'org.apache.derbyTesting.functionTests.util.T_Consis"
1:               + "tencyChecker.nullFirstHeapRow'"
1:               + "PARAMETER STYLE JAVA");
1: 
1:             setAutoCommit(false);
1: 
1:             // differing row counts
1:             // RFHR: reinsertFirstHeapRow
1:             cSt = prepareCall("call RFHR('APP', 'T1')");
1:             assertUpdateCount(cSt, 0);
1: 
1:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             // Drop and recreate each index to see differing count move to next
1:             // index.
1: 
1:             x("drop index t1_i");
1:             x("create index t1_i on t1(i)");
1: 
1:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:             x("drop index t1_s");
1:             x("create index t1_s on t1(s)");
1:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_c10");
1:             x("create index t1_c10 on t1(c10)");
1:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_vc10");
1:             x("create index t1_vc10 on t1(vc10)");
1:             e(LANG_INDEX_ROW_COUNT_MISMATCH,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_dc");
1:             x("create index t1_dc on t1(dc)");
1: 
1:             // Everything should be back to normal
1:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:             c1();
1:             r1();
1: 
1:             //
1:             // Delete 1st row from heap
1:             //
1:             // DFHR: deleteFirstHeapRow
1:             //
1:             cSt = prepareCall("call DFHR('APP', 'T1')");
1:             assertUpdateCount(cSt, 0);
1: 
1:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             //
1:             // Drop and recreate each index to see differing count
1:             // move to next index.
1:             //
1: 
1:             x("drop index t1_i");
1:             x("create index t1_i on t1(i)");
1: 
1:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_s");
1:             x("create index t1_s on t1(s)");
1: 
1:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_c10");
1:             x("create index t1_c10 on t1(c10)");
1: 
1:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_vc10");
1:             x("create index t1_vc10 on t1(vc10)");
1: 
1:             e(LANG_INCONSISTENT_ROW_LOCATION,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_dc");
1:             x("create index t1_dc on t1(dc)");
1: 
1:             //
1:             // Everything should be back to normal
1:             //
1: 
1:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:             c1();
1:             r1();
1: 
1:             //
1:             // Set 1st row from heap to all nulls
1:             //
1: 
1:             q("select * from t1");
1: 
1:             expColNames = new String [] {"I", "S", "C10", "VC10", "DC"};
1:             JDBC.assertColumnNames(rs, expColNames);
1: 
1:             expRS = new String [][]
1:                 {
1:                     {"2", "22", "2 2", "2 2 2", "222.22"},
1:                     {"3", "33", "3 3", "3 3 3", "333.33"},
1:                     {"4", "44", "4 4", "4 4 4", "444.44"},
1:                     {"1", "11", "1 1", "1 1 1", "111.11"}
1:                 };
1:             JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:             // NFHR: nullFirstHeapRow
1:             cSt = prepareCall("call NFHR('APP', 'T1')");
1:             assertUpdateCount(cSt, 0);
1: 
1:             q("select * from t1");
1: 
1:             expColNames = new String [] {"I", "S", "C10", "VC10", "DC"};
1:             JDBC.assertColumnNames(rs, expColNames);
1: 
1:             expRS = new String [][]
1:                 {
1:                     {null, null, null, null, null},
1:                     {"3", "33", "3 3", "3 3 3", "333.33"},
1:                     {"4", "44", "4 4", "4 4 4", "444.44"},
1:                     {"1", "11", "1 1", "1 1 1", "111.11"}
1:                 };
1: 
1:             JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             //
1:             // Drop and recreate each index to see differing count
1:             // move to next index.
1:             //
1: 
1:             x("drop index t1_i");
1:             x("create index t1_i on t1(i)");
1: 
1:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_s");
1:             x("create index t1_s on t1(s)");
1: 
1:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_c10");
1:             x("create index t1_c10 on t1(c10)");
1: 
1:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_vc10");
1:             x("create index t1_vc10 on t1(vc10)");
1: 
1:             e(LANG_INDEX_COLUMN_NOT_EQUAL,
1:               "values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1: 
1:             x("drop index t1_dc");
1:             x("create index t1_dc on t1(dc)");
1: 
1:             //
1:             // Everything should be back to normal.
1:             //
1: 
1:             q("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1')");
1:             c1();
1:             r1();
1: 
1:             // RESOLVE - Next test commented out due to inconsistency
1:             // in store error message (sane vs. insane).  Check every
1:             // index once store returns consistent error.
1:             // insert a row with a bad row location into index call
1:             // org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker::
1:             //     insertBadRowLocation('APP', 'T1', 'T1_I');
1:             // values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP', 'T1');
1: 
1:         } finally {
1:             // cleanup
1:             dontThrow(st, "drop table t1");
1:             commit();
1: 
1:             st = null;
1:             rs= null;
1:             expColNames = null;
1:             expRS = null;
1:         }
1:     }
1: 
1:     private void x(String stmt) throws SQLException {
1: 
1:         st.executeUpdate(stmt);
1:     }
1: 
1:     private void q(String query) throws SQLException {
1:         rs = st.executeQuery(query);
1:     }
1: 
1:     private void c1() throws SQLException {
1:         expColNames = new String [] {"1"};
1:         JDBC.assertColumnNames(rs, expColNames);
1:     }
1: 
1:     private void r1() throws SQLException {
1:         expRS = new String [][]
1:         {
1:             {"1"}
1:         };
1: 
1:         JDBC.assertFullResultSet(rs, expRS, true);
1:     }
1: 
1:     private void e(String expectedState, String stmt) {
1:         assertStatementError(expectedState, st, stmt);
1:     }
1: 
1:     private void dontThrow(Statement st, String stm) {
1:         try {
1:             st.executeUpdate(stm);
1:         } catch (SQLException e) {
1:             // ignore, best effort here
1:         }
1:     }
1: }
============================================================================