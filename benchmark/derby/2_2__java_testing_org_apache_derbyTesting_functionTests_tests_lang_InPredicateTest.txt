1:2e57170: /*
1:2e57170: 
1:2e57170: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.InPredicateTest
1:2e57170: 
1:2e57170: Licensed to the Apache Software Foundation (ASF) under one or more
1:2e57170: contributor license agreements.  See the NOTICE file distributed with
1:2e57170: this work for additional information regarding copyright ownership.
1:2e57170: The ASF licenses this file to You under the Apache License, Version 2.0
1:2e57170: (the "License"); you may not use this file except in compliance with
1:2e57170: the License.  You may obtain a copy of the License at
1:2e57170: 
1:2e57170:    http://www.apache.org/licenses/LICENSE-2.0
1:2e57170: 
1:2e57170: Unless required by applicable law or agreed to in writing, software
1:2e57170: distributed under the License is distributed on an "AS IS" BASIS,
1:2e57170: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e57170: See the License for the specific language governing permissions and
1:2e57170: limitations under the License.
1:2e57170: 
1:2e57170: */
1:2e57170: 
1:2e57170: package org.apache.derbyTesting.functionTests.tests.lang;
1:2e57170: 
1:2e57170: import java.sql.PreparedStatement;
1:2e57170: import java.sql.SQLException;
1:2e57170: import java.sql.Statement;
1:2e57170: import junit.framework.Test;
1:2e57170: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2e57170: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:2e57170: import org.apache.derbyTesting.junit.JDBC;
1:2e57170: import org.apache.derbyTesting.junit.TestConfiguration;
1:2e57170: 
1:2e57170: /**
1:2e57170:  * Test cases for IN predicates.
1:2e57170:  */
1:2e57170: public class InPredicateTest extends BaseJDBCTestCase {
1:2e57170:     public InPredicateTest(String name) {
1:2e57170:         super(name);
1:2e57170:     }
1:2e57170: 
1:2e57170:     public static Test suite() {
1:2e57170:         // This is a test for language features, so running in one
1:2e57170:         // configuration should be enough.
1:2e57170:         return new CleanDatabaseTestSetup(
1:2e57170:                 TestConfiguration.embeddedSuite(InPredicateTest.class));
1:2e57170:     }
1:2e57170: 
1:2e57170:     /**
1:2e57170:      * <p>
1:2e57170:      * Test case for DERBY-6017. InListOperatorNode optimizes the case
1:2e57170:      * where all values in the IN list are constant and represent the same
1:2e57170:      * value, but the optimization could get confused if the IN list had
1:2e57170:      * constants of different types.
1:2e57170:      * </p>
1:2e57170:      *
1:2e57170:      * <p>
1:2e57170:      * For example, a predicate such as {@code x IN (9223372036854775806,
1:2e57170:      * 9223372036854775807, 9.223372036854776E18)} would be optimized to
1:2e57170:      * {@code x = 9223372036854775806}, which is not an equivalent expression.
1:2e57170:      * </p>
1:2e57170:      *
1:2e57170:      * <p>
1:2e57170:      * It is correct to reduce the IN list to a single comparison in this
1:2e57170:      * case, since all the values in the IN list should be converted to the
1:2e57170:      * dominant type. The dominant type in the list is DOUBLE, and all three
1:2e57170:      * values are equal when they are converted to DOUBLE (because DOUBLE can
1:2e57170:      * only approximate the integers that are close to Long.MAX_VALUE).
1:2e57170:      * However, the simplified expression needs to use the value as a DOUBLE,
1:2e57170:      * otherwise it cannot be used as a substitution for all the values in
1:2e57170:      * the IN list.
1:2e57170:      * </p>
1:2e57170:      *
1:2e57170:      * <p>
1:2e57170:      * DERBY-6017 solves it by optimizing the above predicate to
1:2e57170:      * {@code x = CAST(9223372036854775806 AS DOUBLE)}.
1:2e57170:      * </p>
1:2e57170:      */
1:2e57170:     public void testDuplicateConstantsMixedTypes() throws SQLException {
1:2e57170:         setAutoCommit(false);
1:2e57170: 
1:2e57170:         Statement s = createStatement();
1:2e57170:         s.executeUpdate("create table t1(b bigint)");
1:2e57170: 
1:2e57170:         String[][] allRows = {
1:2e57170:             { Long.toString(Long.MAX_VALUE - 2) },
1:2e57170:             { Long.toString(Long.MAX_VALUE - 1) },
1:2e57170:             { Long.toString(Long.MAX_VALUE)     },
1:2e57170:         };
1:2e57170: 
1:2e57170:         // Fill the table with BIGINT values so close to Long.MAX_VALUE that
1:2e57170:         // they all degenerate to a single value when converted to DOUBLE.
1:2e57170:         PreparedStatement insert = prepareStatement("insert into t1 values ?");
1:2e57170:         for (int i = 0; i < allRows.length; i++) {
1:2e57170:             insert.setString(1, allRows[i][0]);
1:2e57170:             insert.executeUpdate();
1:2e57170:         }
1:2e57170: 
1:2e57170:         // Expect this query to return all the rows in the table. It used
1:2e57170:         // to return only the first row.
1:2e57170:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:2e57170:                 "select * from t1 where b in " +
1:2e57170:                 "(9223372036854775805, 9223372036854775806," +
1:2e57170:                 " 9223372036854775807, 9.223372036854776E18)"),
1:2e57170:                 allRows);
1:4d09732: 
1:2e57170:         // SQL:2003, 8.4 <in predicate> says IN (x,y,z) is equivalent to
1:2e57170:         // IN (VALUES x,y,z), and also that x IN (...) is equivalent to
1:2e57170:         // x = ANY (...). Verify the correctness of the above result by
1:2e57170:         // comparing to the following equivalent queries.
1:2e57170:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:2e57170:                 "select * from t1 where b in " +
1:2e57170:                 "(values 9223372036854775805, 9223372036854775806," +
1:2e57170:                 " 9223372036854775807, 9.223372036854776E18)"),
1:2e57170:                 allRows);
1:2e57170:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:2e57170:                 "select * from t1 where b = any " +
1:2e57170:                 "(values 9223372036854775805, 9223372036854775806," +
1:2e57170:                 " 9223372036854775807, 9.223372036854776E18)"),
1:2e57170:                 allRows);
1:2e57170:     }
1:2e57170: 
1:4d09732:     /**
1:4d09732:      * Another test case for DERBY-6017. Derby used to evaluate IN lists by
1:4d09732:      * using the semantics of the dominant type of the two values being
1:4d09732:      * compared. It should use the dominant type of all the values in the
1:4d09732:      * left operand and in the IN list. Verify that it works as expected now.
1:4d09732:      */
1:4d09732:     public void testMixedTypes() throws SQLException {
1:4d09732:         setAutoCommit(false);
1:4d09732: 
1:4d09732:         // Test an IN predicate that mixes BIGINT and DOUBLE.
1:4d09732: 
1:4d09732:         Statement s = createStatement();
1:4d09732:         s.executeUpdate("create table t2(b1 bigint, b2 bigint, d double)");
1:4d09732:         s.executeUpdate("insert into t2 values " +
1:4d09732:                         "(9223372036854775805, 9223372036854775806, 1)");
1:4d09732: 
1:4d09732:         // The first query used to return zero rows. However, the next two
1:4d09732:         // queries used to return one row, and SQL:2003, 8.4 <in predicate>
1:4d09732:         // says that the three queries are equivalent. Now, they all return
1:4d09732:         // one row.
1:4d09732: 
1:4d09732:         JDBC.assertSingleValueResultSet(
1:4d09732:             s.executeQuery("select true from t2 where b1 in (b2, d)"),
1:4d09732:             "true");
1:4d09732: 
1:4d09732:         JDBC.assertSingleValueResultSet(
1:4d09732:             s.executeQuery("select true from t2 where b1 in (values b2, d)"),
1:4d09732:             "true");
1:4d09732: 
1:4d09732:         JDBC.assertSingleValueResultSet(
1:4d09732:             s.executeQuery("select true from t2 where b1 = any (values b2, d)"),
1:4d09732:             "true");
1:4d09732: 
1:4d09732:         // Test an IN predicate that mixes INT and REAL. They are supposed
1:4d09732:         // to be compared using DOUBLE semantics, but used to be compared as
1:4d09732:         // REALs.
1:4d09732: 
1:4d09732:         s.executeUpdate("create table t3 (i1 int, r1 real, r2 real)");
1:4d09732:         s.executeUpdate("insert into t3 values " +
1:4d09732:                         "(2147483645, 2147483645, 2147483645), " +
1:4d09732:                         "(2147483645, 2147483645, 0)");
1:4d09732: 
1:3900114:         Object[][] expectedRows = {
1:3900114:             {
1:39b3237:                 2147483645,
1:39b3237:                 2.14748365E9f,
1:39b3237:                 2.14748365E9f,
1:3900114:             }
1:4d09732:         };
1:4d09732: 
1:4d09732:         // The first query used to return two rows. However, the next two
1:4d09732:         // queries used to return one row, and SQL:2003, 8.4 <in predicate>
1:4d09732:         // says that the three queries are equivalent. Now, they all return
1:4d09732:         // one row.
1:4d09732: 
1:4d09732:         JDBC.assertFullResultSet(
1:4d09732:             s.executeQuery("select * from t3 where r1 in (i1, r2)"),
1:3900114:             expectedRows, false);
1:4d09732: 
1:4d09732:         JDBC.assertFullResultSet(
1:4d09732:             s.executeQuery("select * from t3 where r1 in (values i1, r2)"),
1:3900114:             expectedRows, false);
1:4d09732: 
1:4d09732:         JDBC.assertFullResultSet(
1:4d09732:             s.executeQuery("select * from t3 where r1 = any (values i1, r2)"),
1:3900114:             expectedRows, false);
1:4d09732:     }
1:2e57170: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:                 2147483645,
1:                 2.14748365E9f,
1:                 2.14748365E9f,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3900114
/////////////////////////////////////////////////////////////////////////
1:         Object[][] expectedRows = {
1:             {
0:                 new Integer(2147483645),
0:                 new Float(2.14748365E9f),
0:                 new Float(2.14748365E9f),
1:             }
/////////////////////////////////////////////////////////////////////////
1:             expectedRows, false);
1:             expectedRows, false);
1:             expectedRows, false);
commit:4d09732
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Another test case for DERBY-6017. Derby used to evaluate IN lists by
1:      * using the semantics of the dominant type of the two values being
1:      * compared. It should use the dominant type of all the values in the
1:      * left operand and in the IN list. Verify that it works as expected now.
1:      */
1:     public void testMixedTypes() throws SQLException {
1:         setAutoCommit(false);
1: 
1:         // Test an IN predicate that mixes BIGINT and DOUBLE.
1: 
1:         Statement s = createStatement();
1:         s.executeUpdate("create table t2(b1 bigint, b2 bigint, d double)");
1:         s.executeUpdate("insert into t2 values " +
1:                         "(9223372036854775805, 9223372036854775806, 1)");
1: 
1:         // The first query used to return zero rows. However, the next two
1:         // queries used to return one row, and SQL:2003, 8.4 <in predicate>
1:         // says that the three queries are equivalent. Now, they all return
1:         // one row.
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("select true from t2 where b1 in (b2, d)"),
1:             "true");
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("select true from t2 where b1 in (values b2, d)"),
1:             "true");
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery("select true from t2 where b1 = any (values b2, d)"),
1:             "true");
1: 
1:         // Test an IN predicate that mixes INT and REAL. They are supposed
1:         // to be compared using DOUBLE semantics, but used to be compared as
1:         // REALs.
1: 
1:         s.executeUpdate("create table t3 (i1 int, r1 real, r2 real)");
1:         s.executeUpdate("insert into t3 values " +
1:                         "(2147483645, 2147483645, 2147483645), " +
1:                         "(2147483645, 2147483645, 0)");
1: 
0:         String[][] expectedRows = {
0:             { "2147483645", "2.14748365E9", "2.14748365E9" }
1:         };
1: 
1:         // The first query used to return two rows. However, the next two
1:         // queries used to return one row, and SQL:2003, 8.4 <in predicate>
1:         // says that the three queries are equivalent. Now, they all return
1:         // one row.
1: 
1:         JDBC.assertFullResultSet(
1:             s.executeQuery("select * from t3 where r1 in (i1, r2)"),
0:             expectedRows);
1: 
1:         JDBC.assertFullResultSet(
1:             s.executeQuery("select * from t3 where r1 in (values i1, r2)"),
0:             expectedRows);
1: 
1:         JDBC.assertFullResultSet(
1:             s.executeQuery("select * from t3 where r1 = any (values i1, r2)"),
0:             expectedRows);
1:     }
commit:2e57170
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.InPredicateTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test cases for IN predicates.
1:  */
1: public class InPredicateTest extends BaseJDBCTestCase {
1:     public InPredicateTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // This is a test for language features, so running in one
1:         // configuration should be enough.
1:         return new CleanDatabaseTestSetup(
1:                 TestConfiguration.embeddedSuite(InPredicateTest.class));
1:     }
1: 
1:     /**
1:      * <p>
1:      * Test case for DERBY-6017. InListOperatorNode optimizes the case
1:      * where all values in the IN list are constant and represent the same
1:      * value, but the optimization could get confused if the IN list had
1:      * constants of different types.
1:      * </p>
1:      *
1:      * <p>
1:      * For example, a predicate such as {@code x IN (9223372036854775806,
1:      * 9223372036854775807, 9.223372036854776E18)} would be optimized to
1:      * {@code x = 9223372036854775806}, which is not an equivalent expression.
1:      * </p>
1:      *
1:      * <p>
1:      * It is correct to reduce the IN list to a single comparison in this
1:      * case, since all the values in the IN list should be converted to the
1:      * dominant type. The dominant type in the list is DOUBLE, and all three
1:      * values are equal when they are converted to DOUBLE (because DOUBLE can
1:      * only approximate the integers that are close to Long.MAX_VALUE).
1:      * However, the simplified expression needs to use the value as a DOUBLE,
1:      * otherwise it cannot be used as a substitution for all the values in
1:      * the IN list.
1:      * </p>
1:      *
1:      * <p>
1:      * DERBY-6017 solves it by optimizing the above predicate to
1:      * {@code x = CAST(9223372036854775806 AS DOUBLE)}.
1:      * </p>
1:      */
1:     public void testDuplicateConstantsMixedTypes() throws SQLException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
1:         s.executeUpdate("create table t1(b bigint)");
1: 
1:         String[][] allRows = {
1:             { Long.toString(Long.MAX_VALUE - 2) },
1:             { Long.toString(Long.MAX_VALUE - 1) },
1:             { Long.toString(Long.MAX_VALUE)     },
1:         };
1: 
1:         // Fill the table with BIGINT values so close to Long.MAX_VALUE that
1:         // they all degenerate to a single value when converted to DOUBLE.
1:         PreparedStatement insert = prepareStatement("insert into t1 values ?");
1:         for (int i = 0; i < allRows.length; i++) {
1:             insert.setString(1, allRows[i][0]);
1:             insert.executeUpdate();
1:         }
1: 
1:         // Expect this query to return all the rows in the table. It used
1:         // to return only the first row.
1:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:                 "select * from t1 where b in " +
1:                 "(9223372036854775805, 9223372036854775806," +
1:                 " 9223372036854775807, 9.223372036854776E18)"),
1:                 allRows);
1: 
1:         // SQL:2003, 8.4 <in predicate> says IN (x,y,z) is equivalent to
1:         // IN (VALUES x,y,z), and also that x IN (...) is equivalent to
1:         // x = ANY (...). Verify the correctness of the above result by
1:         // comparing to the following equivalent queries.
1:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:                 "select * from t1 where b in " +
1:                 "(values 9223372036854775805, 9223372036854775806," +
1:                 " 9223372036854775807, 9.223372036854776E18)"),
1:                 allRows);
1:         JDBC.assertUnorderedResultSet(s.executeQuery(
1:                 "select * from t1 where b = any " +
1:                 "(values 9223372036854775805, 9223372036854775806," +
1:                 " 9223372036854775807, 9.223372036854776E18)"),
1:                 allRows);
1:     }
1: }
============================================================================