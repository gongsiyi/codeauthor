1:62ab900: package org.apache.derbyTesting.functionTests.tests.largedata;
1:62ab900: 
1:62ab900: import java.sql.Connection;
1:62ab900: import java.sql.PreparedStatement;
1:62ab900: import java.sql.SQLException;
1:62ab900: import java.sql.Statement;
1:62ab900: import junit.framework.Test;
1:62ab900: import java.io.IOException;
1:62ab900: import java.io.InputStream;
1:62ab900: import java.io.Reader;
1:62ab900: import org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest;
1:62ab900: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:62ab900: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:62ab900: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:62ab900: import org.apache.derbyTesting.junit.BaseTestSuite;
1:62ab900: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:62ab900: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:62ab900: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1:62ab900: import org.apache.derbyTesting.junit.SQLUtilities;
1:62ab900: 
1:62ab900: 
1:62ab900: /*
1:62ab900: Class org.apache.derbyTesting.functionTests.tests.largedata.Derby6884Test
1:62ab900: 
1:62ab900: 
1:62ab900: Licensed to the Apache Software Foundation (ASF) under one or more
1:62ab900: contributor license agreements.  See the NOTICE file distributed with
1:62ab900: this work for additional information regarding copyright ownership.
1:62ab900: The ASF licenses this file to you under the Apache License, Version 2.0
1:62ab900: (the "License"); you may not use this file except in compliance with
1:62ab900: the License.  You may obtain a copy of the License at
1:62ab900: 
1:62ab900:    http://www.apache.org/licenses/LICENSE-2.0
1:62ab900: 
1:62ab900: Unless required by applicable law or agreed to in writing, software
1:62ab900: distributed under the License is distributed on an "AS IS" BASIS,
1:62ab900: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:62ab900: See the License for the specific language governing permissions and
1:62ab900: limitations under the License.
1:62ab900: 
1:62ab900: */
1:62ab900: 
1:62ab900: 
1:62ab900: public class Derby6884Test extends ImportExportBaseTest
1:62ab900: {
1:62ab900:     String fileName6884;
1:62ab900:     String lobFile6884;
1:62ab900: 
1:62ab900:     public Derby6884Test(String name) 
1:62ab900:     {
1:62ab900:         super(name);
1:62ab900:         fileName6884 = (SupportFilesSetup.getReadWrite("table-data")).getPath();
1:62ab900:         lobFile6884 = (SupportFilesSetup.getReadWrite("lob-data")).getPath();
1:62ab900:     }
1:62ab900: 
1:62ab900:     public static Test suite() 
1:62ab900:     {
1:62ab900:         BaseTestSuite suite = new BaseTestSuite("Derby6884Test");
1:62ab900:         suite.addTest(baseSuite("Derby6884Test:embedded"));
1:62ab900:         return suite;
1:62ab900:     }
1:62ab900:     
1:62ab900:     /*
1:62ab900:      * DERBY-6884: external file behaviors when the file contains more than
1:62ab900:      * Integer.MAX_VALUE bytes of data.
1:62ab900:      */
1:62ab900:     public void testDerby6884ImportLargeExtfileClob()
1:62ab900:         throws SQLException
1:62ab900:     {
1:62ab900:         Statement s  = createStatement();
1:62ab900:         PreparedStatement ps = prepareStatement(
1:62ab900:                      "insert into DERBY_6884_TESTCLOB values(? , ?)" );
1:62ab900:         int id = 1;
1:62ab900:         long byteCount = 0;
1:62ab900:         int clobSize = 0;
1:62ab900:         while ( byteCount < Integer.MAX_VALUE ) {
1:62ab900:             ps.setInt(1 , id++);
1:62ab900:             clobSize = ( 10000 * 1024 ) + ( 1024 * id );
1:62ab900:             byteCount += clobSize;
1:62ab900:             Reader reader = new LoopingAlphabetReader(clobSize);
1:62ab900:             ps.setCharacterStream(2, reader, clobSize);
1:62ab900:             ps.executeUpdate();
1:62ab900:         }
1:62ab900:         ps.setInt(1 , id++);
1:62ab900:         Reader reader = new LoopingAlphabetReader(clobSize);
1:62ab900:         ps.setCharacterStream(2, reader, clobSize);
1:62ab900:         ps.executeUpdate();
1:62ab900: 
1:62ab900:         commit();
1:62ab900:         doExportTableLobsToExtFile("APP", "DERBY_6884_TESTCLOB", fileName6884, 
1:62ab900:                                    null, null , null, lobFile6884);
1:62ab900:         s.execute("TRUNCATE TABLE DERBY_6884_TESTCLOB");
1:62ab900:         doImportTableLobsFromExtFile("APP", "DERBY_6884_TESTCLOB",
1:62ab900:                                    fileName6884, null, null, null, 0);
1:62ab900:         SupportFilesSetup.deleteFile(fileName6884);
1:62ab900:         SupportFilesSetup.deleteFile(lobFile6884);
1:62ab900:     }
1:62ab900: 
1:62ab900:     /*
1:62ab900:      * Same as the prior test, but with BLOB column, not CLOB column.
1:62ab900:      */
1:62ab900:     public void testDerby6884ImportLargeExtfileBlob()
1:62ab900:         throws SQLException
1:62ab900:     {
1:62ab900:         Statement s  = createStatement();
1:62ab900:         PreparedStatement ps = prepareStatement(
1:62ab900:                      "insert into DERBY_6884_TESTBLOB values(? , ?)" );
1:62ab900:         int id = 1;
1:62ab900:         long byteCount = 0;
1:62ab900:         int blobSize = 0;
1:62ab900:         while ( byteCount < Integer.MAX_VALUE ) {
1:62ab900:             ps.setInt(1 , id++);
1:62ab900:             blobSize = ( 50000 * 1024 ) + ( 1024 * id );
1:62ab900:             byteCount += blobSize;
1:62ab900:             InputStream stream = new LoopingAlphabetStream(blobSize);
1:62ab900:             ps.setBinaryStream(2, stream, blobSize);
1:62ab900:             ps.executeUpdate();
1:62ab900:         }
1:62ab900:         ps.setInt(1 , id++);
1:62ab900:         InputStream stream = new LoopingAlphabetStream(blobSize);
1:62ab900:         ps.setBinaryStream(2, stream, blobSize);
1:62ab900:         ps.executeUpdate();
1:62ab900: 
1:62ab900:         commit();
1:62ab900:         doExportTableLobsToExtFile("APP", "DERBY_6884_TESTBLOB", fileName6884, 
1:62ab900:                                    null, null , null, lobFile6884);
1:62ab900:         s.execute("TRUNCATE TABLE DERBY_6884_TESTBLOB");
1:62ab900:         doImportTableLobsFromExtFile("APP", "DERBY_6884_TESTBLOB",
1:62ab900:                                    fileName6884, null, null, null, 0);
1:62ab900:         SupportFilesSetup.deleteFile(fileName6884);
1:62ab900:         SupportFilesSetup.deleteFile(lobFile6884);
1:62ab900:     }
1:62ab900: 
1:62ab900: 
1:62ab900:     protected static Test baseSuite(String name) 
1:62ab900:     {
1:62ab900:         BaseTestSuite suite = new BaseTestSuite(name);
1:62ab900:         suite.addTestSuite(Derby6884Test.class);
1:62ab900:         Test test = suite;
1:62ab900:         test = new SupportFilesSetup(test);
1:62ab900:         return new CleanDatabaseTestSetup(test)
1:62ab900:         {
1:62ab900:             protected void decorateSQL(Statement stmt) throws SQLException
1:62ab900:             {
1:62ab900:                 Connection conn = stmt.getConnection();
1:62ab900: 
1:62ab900:                 stmt.execute("CREATE TABLE DERBY_6884_TESTBLOB" +
1:62ab900:                               "(id BIGINT, content BLOB)");
1:62ab900:                 stmt.execute("CREATE TABLE DERBY_6884_TESTCLOB" +
1:62ab900:                               "(id BIGINT, content CLOB)");
1:62ab900: 
1:62ab900:                 conn.commit();
1:62ab900:             }
1:62ab900:         };
1:62ab900:     }
1:62ab900: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:62ab900
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.largedata;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: import org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: 
1: 
1: /*
1: Class org.apache.derbyTesting.functionTests.tests.largedata.Derby6884Test
1: 
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: 
1: public class Derby6884Test extends ImportExportBaseTest
1: {
1:     String fileName6884;
1:     String lobFile6884;
1: 
1:     public Derby6884Test(String name) 
1:     {
1:         super(name);
1:         fileName6884 = (SupportFilesSetup.getReadWrite("table-data")).getPath();
1:         lobFile6884 = (SupportFilesSetup.getReadWrite("lob-data")).getPath();
1:     }
1: 
1:     public static Test suite() 
1:     {
1:         BaseTestSuite suite = new BaseTestSuite("Derby6884Test");
1:         suite.addTest(baseSuite("Derby6884Test:embedded"));
1:         return suite;
1:     }
1:     
1:     /*
1:      * DERBY-6884: external file behaviors when the file contains more than
1:      * Integer.MAX_VALUE bytes of data.
1:      */
1:     public void testDerby6884ImportLargeExtfileClob()
1:         throws SQLException
1:     {
1:         Statement s  = createStatement();
1:         PreparedStatement ps = prepareStatement(
1:                      "insert into DERBY_6884_TESTCLOB values(? , ?)" );
1:         int id = 1;
1:         long byteCount = 0;
1:         int clobSize = 0;
1:         while ( byteCount < Integer.MAX_VALUE ) {
1:             ps.setInt(1 , id++);
1:             clobSize = ( 10000 * 1024 ) + ( 1024 * id );
1:             byteCount += clobSize;
1:             Reader reader = new LoopingAlphabetReader(clobSize);
1:             ps.setCharacterStream(2, reader, clobSize);
1:             ps.executeUpdate();
1:         }
1:         ps.setInt(1 , id++);
1:         Reader reader = new LoopingAlphabetReader(clobSize);
1:         ps.setCharacterStream(2, reader, clobSize);
1:         ps.executeUpdate();
1: 
1:         commit();
1:         doExportTableLobsToExtFile("APP", "DERBY_6884_TESTCLOB", fileName6884, 
1:                                    null, null , null, lobFile6884);
1:         s.execute("TRUNCATE TABLE DERBY_6884_TESTCLOB");
1:         doImportTableLobsFromExtFile("APP", "DERBY_6884_TESTCLOB",
1:                                    fileName6884, null, null, null, 0);
1:         SupportFilesSetup.deleteFile(fileName6884);
1:         SupportFilesSetup.deleteFile(lobFile6884);
1:     }
1: 
1:     /*
1:      * Same as the prior test, but with BLOB column, not CLOB column.
1:      */
1:     public void testDerby6884ImportLargeExtfileBlob()
1:         throws SQLException
1:     {
1:         Statement s  = createStatement();
1:         PreparedStatement ps = prepareStatement(
1:                      "insert into DERBY_6884_TESTBLOB values(? , ?)" );
1:         int id = 1;
1:         long byteCount = 0;
1:         int blobSize = 0;
1:         while ( byteCount < Integer.MAX_VALUE ) {
1:             ps.setInt(1 , id++);
1:             blobSize = ( 50000 * 1024 ) + ( 1024 * id );
1:             byteCount += blobSize;
1:             InputStream stream = new LoopingAlphabetStream(blobSize);
1:             ps.setBinaryStream(2, stream, blobSize);
1:             ps.executeUpdate();
1:         }
1:         ps.setInt(1 , id++);
1:         InputStream stream = new LoopingAlphabetStream(blobSize);
1:         ps.setBinaryStream(2, stream, blobSize);
1:         ps.executeUpdate();
1: 
1:         commit();
1:         doExportTableLobsToExtFile("APP", "DERBY_6884_TESTBLOB", fileName6884, 
1:                                    null, null , null, lobFile6884);
1:         s.execute("TRUNCATE TABLE DERBY_6884_TESTBLOB");
1:         doImportTableLobsFromExtFile("APP", "DERBY_6884_TESTBLOB",
1:                                    fileName6884, null, null, null, 0);
1:         SupportFilesSetup.deleteFile(fileName6884);
1:         SupportFilesSetup.deleteFile(lobFile6884);
1:     }
1: 
1: 
1:     protected static Test baseSuite(String name) 
1:     {
1:         BaseTestSuite suite = new BaseTestSuite(name);
1:         suite.addTestSuite(Derby6884Test.class);
1:         Test test = suite;
1:         test = new SupportFilesSetup(test);
1:         return new CleanDatabaseTestSetup(test)
1:         {
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 Connection conn = stmt.getConnection();
1: 
1:                 stmt.execute("CREATE TABLE DERBY_6884_TESTBLOB" +
1:                               "(id BIGINT, content BLOB)");
1:                 stmt.execute("CREATE TABLE DERBY_6884_TESTCLOB" +
1:                               "(id BIGINT, content CLOB)");
1: 
1:                 conn.commit();
1:             }
1:         };
1:     }
1: }
============================================================================