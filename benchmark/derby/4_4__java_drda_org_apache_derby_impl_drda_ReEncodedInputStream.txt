1:f3ab04f: /*
24:f3ab04f:  
1:f3ab04f: Derby - Class org.apache.derby.impl.drda.ReEncodedInputStream
1:00b4912: 
1:59e5225: Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225: contributor license agreements.  See the NOTICE file distributed with
1:59e5225: this work for additional information regarding copyright ownership.
1:59e5225: The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225: (the "License"); you may not use this file except in compliance with
1:59e5225: the License.  You may obtain a copy of the License at
1:f3ab04f: 
1:f3ab04f: http://www.apache.org/licenses/LICENSE-2.0
1:f3ab04f: 
1:f3ab04f: Unless required by applicable law or agreed to in writing, software
1:f3ab04f: distributed under the License is distributed on an "AS IS" BASIS,
1:f3ab04f: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3ab04f: See the License for the specific language governing permissions and
1:f3ab04f: limitations under the License.
1:f3ab04f: 
1:f3ab04f: */
1:f3ab04f: package org.apache.derby.impl.drda;
1:f3ab04f: 
1:f3ab04f: import java.io.ByteArrayInputStream;
1:db4c995: import java.io.ByteArrayOutputStream;
1:f3ab04f: import java.io.IOException;
1:db4c995: import java.io.InputStream;
1:db4c995: import java.io.OutputStreamWriter;
1:db4c995: import java.io.Reader;
1:f3ab04f: 
1:f3ab04f: /**
1:f3ab04f:  *
1:f3ab04f:  * ReEncodedInputStream passes
1:f3ab04f:  * stream from Reader, which is stream of decoded style, 
1:f3ab04f:  * to user of this subclass of InputStream, which is stream of encoded style.
1:f3ab04f:  *
1:f3ab04f:  * The encoding of stream passed to user is limited to UTF8.
1:f3ab04f:  *
1:f3ab04f:  * This class will be used to pass stream, which is served as a Reader,
1:f3ab04f:  * as a InputStream of a arbitrary encoding.
1:f3ab04f:  *
1:f3ab04f:  */
1:f3ab04f: public class ReEncodedInputStream extends InputStream {
1:f3ab04f: 
1:f3ab04f:     private static final int BUFFERED_CHAR_LEN = 1024;
1:f3ab04f: 
1:f3ab04f:     private Reader reader_;
1:f3ab04f:     private char[] decodedBuffer_;
1:f3ab04f:     
1:f3ab04f:     private OutputStreamWriter encodedStreamWriter_;
1:f3ab04f:     private PublicBufferOutputStream encodedOutputStream_;
1:f3ab04f:     
1:f3ab04f:     private ByteArrayInputStream encodedInputStream_;
1:f3ab04f:     
1:f3ab04f:     public ReEncodedInputStream(Reader reader) 
1:4f996a4:     throws IOException {
1:4f996a4:     
1:4f996a4:     reader_ = reader;
1:4f996a4:     decodedBuffer_ = new char[BUFFERED_CHAR_LEN];
1:f3ab04f: 
1:4f996a4:     encodedOutputStream_ = new PublicBufferOutputStream( BUFFERED_CHAR_LEN * 3 );
1:4f996a4:     encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,"UTF8");
1:4f996a4:     
1:4f996a4:     encodedInputStream_ = reEncode(reader_);
1:4f996a4:     
11:f3ab04f:     }
1:f3ab04f: 
1:f3ab04f: 
1:f3ab04f:     private ByteArrayInputStream reEncode(Reader reader) 
1:4f996a4:     throws IOException
1:f3ab04f:     {
1:4f996a4:     
1:4f996a4:         int count;
1:4f996a4:         do{
1:4f996a4:             count = reader.read(decodedBuffer_, 0, BUFFERED_CHAR_LEN);
1:4f996a4:             
1:4f996a4:         }while(count == 0);
1:4f996a4:             
1:4f996a4:         if(count < 0)
1:4f996a4:             return null;
1:4f996a4:     
1:4f996a4:     encodedOutputStream_.reset();
1:4f996a4:     encodedStreamWriter_.write(decodedBuffer_,0,count);
1:4f996a4:     encodedStreamWriter_.flush();
1:00b4912: 
1:4f996a4:     int encodedLength = encodedOutputStream_.size();
1:4f996a4:     
1:4f996a4:     return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
1:4f996a4:                     0,
1:4f996a4:                     encodedLength);
1:f3ab04f:     }
1:f3ab04f:     
1:f3ab04f:     
1:f3ab04f:     public int available() 
1:4f996a4:     throws IOException {
1:4f996a4:     
1:4f996a4:     if(encodedInputStream_ == null){
1:4f996a4:         return 0;
1:4f996a4:     }
1:f3ab04f: 
1:4f996a4:     return encodedInputStream_.available();
1:4f996a4:     
1:f3ab04f:     }
1:f3ab04f:     
1:f3ab04f: 
1:f3ab04f:     public void close() 
1:4f996a4:     throws IOException {
1:4f996a4:     
1:4f996a4:     if(encodedInputStream_ != null ){
1:4f996a4:         encodedInputStream_.close();
1:4f996a4:         encodedInputStream_ = null;
1:4f996a4:     }
1:f3ab04f: 
1:4f996a4:     if(reader_ != null ){
1:4f996a4:         reader_.close();
1:4f996a4:         reader_ = null;
1:4f996a4:     }
1:f3ab04f: 
1:4f996a4:     if(encodedStreamWriter_ != null){
1:4f996a4:         encodedStreamWriter_.close();
1:4f996a4:         encodedStreamWriter_ = null;
1:4f996a4:     }
1:4f996a4:     
1:f3ab04f:     }
1:f3ab04f:     
1:f3ab04f:     
1:f3ab04f:     public int read() 
1:4f996a4:     throws IOException {
1:4f996a4:     
1:4f996a4:     if(encodedInputStream_ == null){
1:4f996a4:         return -1;
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     int c = encodedInputStream_.read();
1:f3ab04f: 
1:4f996a4:     if(c > -1){
1:4f996a4:         return c;
1:4f996a4:         
1:4f996a4:     }else{
1:4f996a4:         encodedInputStream_ = reEncode(reader_);
1:4f996a4:         
1:4f996a4:         if(encodedInputStream_ == null){
1:4f996a4:         return -1;
1:4f996a4:         }
1:4f996a4:         
1:4f996a4:         return encodedInputStream_.read();
1:4f996a4: 
1:4f996a4:     }
1:f3ab04f:     
1:f3ab04f:     }
1:f3ab04f:     
1:f3ab04f:     
1:f3ab04f:     protected void finalize() throws IOException {
1:4f996a4:     close();
1:f3ab04f:     }
1:f3ab04f:     
1:f3ab04f:     
1:fefd864:     private static class PublicBufferOutputStream extends ByteArrayOutputStream{
1:4f996a4:     
1:4f996a4:     PublicBufferOutputStream(int size){
1:4f996a4:         super(size);
1:4f996a4:     }
1:f3ab04f: 
1:4f996a4:     public byte[] getBuffer(){
1:4f996a4:         return buf;
1:4f996a4:     }
1:4f996a4:     
1:f3ab04f:     }
1:f3ab04f: 
1:f3ab04f: }
1:f3ab04f: 
1:f3ab04f: 
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     throws IOException {
1:     
1:     reader_ = reader;
1:     decodedBuffer_ = new char[BUFFERED_CHAR_LEN];
1:     encodedOutputStream_ = new PublicBufferOutputStream( BUFFERED_CHAR_LEN * 3 );
1:     encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,"UTF8");
1:     
1:     encodedInputStream_ = reEncode(reader_);
1:     
1:     throws IOException
1:     
1:         int count;
1:         do{
1:             count = reader.read(decodedBuffer_, 0, BUFFERED_CHAR_LEN);
1:             
1:         }while(count == 0);
1:             
1:         if(count < 0)
1:             return null;
1:     
1:     encodedOutputStream_.reset();
1:     encodedStreamWriter_.write(decodedBuffer_,0,count);
1:     encodedStreamWriter_.flush();
1:     int encodedLength = encodedOutputStream_.size();
1:     
1:     return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
1:                     0,
1:                     encodedLength);
1:     throws IOException {
1:     
1:     if(encodedInputStream_ == null){
1:         return 0;
1:     }
1:     return encodedInputStream_.available();
1:     
1:     throws IOException {
1:     
1:     if(encodedInputStream_ != null ){
1:         encodedInputStream_.close();
1:         encodedInputStream_ = null;
1:     }
1:     if(reader_ != null ){
1:         reader_.close();
1:         reader_ = null;
1:     }
1:     if(encodedStreamWriter_ != null){
1:         encodedStreamWriter_.close();
1:         encodedStreamWriter_ = null;
1:     }
1:     
1:     throws IOException {
1:     
1:     if(encodedInputStream_ == null){
1:         return -1;
1:     }
1:     
1:     int c = encodedInputStream_.read();
1:     if(c > -1){
1:         return c;
1:         
1:     }else{
1:         encodedInputStream_ = reEncode(reader_);
1:         
1:         if(encodedInputStream_ == null){
1:         return -1;
1:         }
1:         
1:         return encodedInputStream_.read();
1:     }
1:     
1:     close();
1:     
1:     PublicBufferOutputStream(int size){
1:         super(size);
1:     }
1:     public byte[] getBuffer(){
1:         return buf;
1:     }
1:     
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.InputStream;
1: import java.io.OutputStreamWriter;
1: import java.io.Reader;
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:fefd864
/////////////////////////////////////////////////////////////////////////
1:     private static class PublicBufferOutputStream extends ByteArrayOutputStream{
commit:00b4912
/////////////////////////////////////////////////////////////////////////
0: 		int count;
0: 		do{
0: 			count = reader.read(decodedBuffer_, 0, BUFFERED_CHAR_LEN);
1: 			
0: 		}while(count == 0);
1: 			
0: 		if(count < 0)
0: 			return null;
commit:f3ab04f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derby.impl.drda.ReEncodedInputStream
1: 
0: Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derby.impl.drda;
1: 
0: import java.io.InputStream;
0: import java.io.Reader;
0: import java.io.OutputStreamWriter;
0: import java.io.ByteArrayOutputStream;
1: import java.io.ByteArrayInputStream;
1: 
1: import java.io.IOException;
0: import java.io.UnsupportedEncodingException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  *
1:  * ReEncodedInputStream passes
1:  * stream from Reader, which is stream of decoded style, 
1:  * to user of this subclass of InputStream, which is stream of encoded style.
1:  *
1:  * The encoding of stream passed to user is limited to UTF8.
1:  *
1:  * This class will be used to pass stream, which is served as a Reader,
1:  * as a InputStream of a arbitrary encoding.
1:  *
1:  */
1: public class ReEncodedInputStream extends InputStream {
1: 
1:     private static final int BUFFERED_CHAR_LEN = 1024;
1: 
1:     private Reader reader_;
1:     private char[] decodedBuffer_;
1:     
1:     private OutputStreamWriter encodedStreamWriter_;
1:     private PublicBufferOutputStream encodedOutputStream_;
1:     
1:     private ByteArrayInputStream encodedInputStream_;
1:     
1:     public ReEncodedInputStream(Reader reader) 
0: 	throws IOException {
1: 	
0: 	reader_ = reader;
0: 	decodedBuffer_ = new char[BUFFERED_CHAR_LEN];
1: 
0: 	encodedOutputStream_ = new PublicBufferOutputStream( BUFFERED_CHAR_LEN * 3 );
0: 	encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,"UTF8");
1: 	
0: 	encodedInputStream_ = reEncode(reader_);
1: 	
1:     }
1: 
1: 
1:     private ByteArrayInputStream reEncode(Reader reader) 
0: 	throws IOException
1:     {
1: 	
0: 	int count;
0: 	if(( count = reader.read(decodedBuffer_, 0, BUFFERED_CHAR_LEN )) < 1 ){
0: 	    return null;
1: 	}
1: 	
0: 	encodedOutputStream_.reset();
0: 	encodedStreamWriter_.write(decodedBuffer_,0,count);
0: 	encodedStreamWriter_.flush();
1: 
0: 	int encodedLength = encodedOutputStream_.size();
1: 	
0: 	return new ByteArrayInputStream(encodedOutputStream_.getBuffer(),
0: 					0,
0: 					encodedLength);
1:     }
1:     
1:     
1:     public int available() 
0: 	throws IOException {
1: 	
0: 	if(encodedInputStream_ == null){
0: 	    return 0;
1: 	}
1: 
0: 	return encodedInputStream_.available();
1: 	
1:     }
1:     
1: 
1:     public void close() 
0: 	throws IOException {
1: 	
0: 	if(encodedInputStream_ != null ){
0: 	    encodedInputStream_.close();
0: 	    encodedInputStream_ = null;
1: 	}
1: 
0: 	if(reader_ != null ){
0: 	    reader_.close();
0: 	    reader_ = null;
1: 	}
1: 
0: 	if(encodedStreamWriter_ != null){
0: 	    encodedStreamWriter_.close();
0: 	    encodedStreamWriter_ = null;
1: 	}
1: 	
1:     }
1:     
1:     
1:     public int read() 
0: 	throws IOException {
1: 	
0: 	if(encodedInputStream_ == null){
0: 	    return -1;
1: 	}
1: 	
0: 	int c = encodedInputStream_.read();
1: 
0: 	if(c > -1){
0: 	    return c;
1: 	    
0: 	}else{
0: 	    encodedInputStream_ = reEncode(reader_);
1: 	    
0: 	    if(encodedInputStream_ == null){
0: 		return -1;
1: 	    }
1: 	    
0: 	    return encodedInputStream_.read();
1: 
1: 	}
1: 	
1:     }
1:     
1:     
1:     protected void finalize() throws IOException {
0: 	close();
1:     }
1:     
1:     
0:     static class PublicBufferOutputStream extends ByteArrayOutputStream{
1: 	
0: 	PublicBufferOutputStream(int size){
0: 	    super(size);
1: 	}
1: 
0: 	public byte[] getBuffer(){
0: 	    return buf;
1: 	}
1: 	
1:     }
1: 
1: }
1: 
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
============================================================================