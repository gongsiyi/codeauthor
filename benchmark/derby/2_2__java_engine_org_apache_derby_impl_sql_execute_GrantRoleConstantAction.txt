1:ee59de8: /*
4:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.execute.GrantRoleConstantAction
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.execute;
1:ee59de8: 
1:ee59de8: import java.util.Iterator;
1:ee59de8: import java.util.List;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:9c3b91c: import org.apache.derby.iapi.sql.conn.Authorizer;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:fe8c4c2: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1:2cc5408: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:ee59de8: import org.apache.derby.shared.common.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  *  This class performs actions that are ALWAYS performed for a
1:ee59de8:  *  GRANT role statement at execution time.
1:ee59de8:  *
1:ee59de8:  *  Descriptors corresponding to the grants are stored in the
1:ee59de8:  *  SYS.SYSROLES table, along with the role definitions, cf
1:ee59de8:  *  CreateRoleConstantAction.
1:ee59de8:  *
1:ee59de8:  */
1:ee59de8: class GrantRoleConstantAction extends DDLConstantAction {
1:ee59de8: 
1:ee59de8:     private List roleNames;
1:ee59de8:     private List grantees;
1:ee59de8:     private final boolean withAdminOption = false; // not impl.
1:ee59de8: 
1:ee59de8:     // CONSTRUCTORS
1:ee59de8:     /**
1:ee59de8:      *  Make the ConstantAction for a CREATE ROLE statement.
1:ee59de8:      *  When executed, will create a role by the given name.
1:ee59de8:      *
1:ee59de8:      *  @param roleNames     List of the names of the roles being granted
1:ee59de8:      *  @param grantees       List of the authorization ids granted to role
1:ee59de8:      */
1:ee59de8:     public GrantRoleConstantAction(List roleNames, List grantees) {
1:ee59de8:         this.roleNames = roleNames;
1:ee59de8:         this.grantees = grantees;
3:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // INTERFACE METHODS
1:ee59de8: 
1:fe8c4c2:     /**
1:ee59de8:      *  This is the guts of the Execution-time logic for GRANT role.
1:ee59de8:      *
1:ee59de8:      *  @see ConstantAction#executeConstantAction
1:ee59de8:      *
1:ee59de8:      * @exception StandardException     Thrown on failure
1:ee59de8:      */
1:ee59de8:     public void executeConstantAction(Activation activation)
1:ee59de8:             throws StandardException {
1:ee59de8: 
1:ee59de8:         LanguageConnectionContext lcc =
1:ee59de8:             activation.getLanguageConnectionContext();
1:ee59de8:         DataDictionary dd = lcc.getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:ee59de8: 
1:9f60172:         final String grantor = lcc.getCurrentUserId(activation);
1:ee59de8: 
1:ee59de8:         dd.startWriting(lcc);
1:ee59de8: 
1:ee59de8:         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
1:ee59de8:             String role = (String)rIter.next();
1:ee59de8: 
1:9c3b91c:             if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:9c3b91c:                 throw StandardException.
1:9c3b91c:                     newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:9c3b91c:             }
1:9c3b91c: 
1:ee59de8:             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
1:ee59de8:                 String grantee = (String)gIter.next();
1:ee59de8: 
1:ee59de8:                 // check that role exists
1:fe8c4c2:                 RoleGrantDescriptor rdDef =
1:fe8c4c2:                     dd.getRoleDefinitionDescriptor(role);
1:ee59de8: 
1:fe8c4c2:                 if (rdDef == null) {
1:ee59de8:                     throw StandardException.
1:ee59de8:                         newException(SQLState.ROLE_INVALID_SPECIFICATION, role);
1:ee59de8:                 }
1:ee59de8: 
1:ee59de8:                 // Check that role is granted to us (or PUBLIC) with
1:ee59de8:                 // WITH ADMIN option so we can grant it. For database
1:ee59de8:                 // owner, a role definition always fulfills this
1:ee59de8:                 // requirement.  If we implement granting with WITH ADMIN
1:ee59de8:                 // option later, we need to look for a grant to us (or
1:ee59de8:                 // PUBLIC) which has WITH ADMIN. The role definition
1:ee59de8:                 // descriptor will not suffice in that case, so we
1:ee59de8:                 // need something like:
1:ee59de8:                 //
1:fe8c4c2:                 // rdDef = dd.findRoleGrantWithAdminToRoleOrPublic(grantor)
1:fe8c4c2:                 // if (rdDef != null) {
1:ee59de8:                 //   :
1:4e3ddd7:                 if (grantor.equals(lcc.getDataDictionary().
1:4e3ddd7:                                        getAuthorizationDatabaseOwner())) {
1:ee59de8:                     // All ok, we are database owner
1:ee59de8:                     if (SanityManager.DEBUG) {
1:ee59de8:                         SanityManager.ASSERT(
1:fe8c4c2:                             rdDef.getGrantee().equals(grantor),
1:4e3ddd7:                             "expected database owner in role grant descriptor");
1:ee59de8:                         SanityManager.ASSERT(
1:fe8c4c2:                             rdDef.isWithAdminOption(),
1:ee59de8:                             "expected role definition to have ADMIN OPTION");
1:ee59de8:                     }
1:ee59de8:                 } else {
2:fe8c4c2:                     throw StandardException.newException
1:ee59de8:                         (SQLState.AUTH_ROLE_DBO_ONLY, "GRANT role");
1:ee59de8:                 }
1:ee59de8: 
1:4e3ddd7:                 // Has it already been granted?
1:fe8c4c2:                 RoleGrantDescriptor rgd =
1:fe8c4c2:                     dd.getRoleGrantDescriptor(role, grantee, grantor);
1:ee59de8: 
1:fe8c4c2:                 if (rgd != null &&
1:fe8c4c2:                         withAdminOption && !rgd.isWithAdminOption()) {
1:fe8c4c2: 
1:ee59de8:                     // NOTE: Never called yet, withAdminOption not yet
1:ee59de8:                     // implemented.
1:ee59de8: 
1:ee59de8:                     // Remove old descriptor and add a new one with admin
1:ee59de8:                     // option: cf. SQL 2003, section 12.5, general rule 3
1:fe8c4c2:                     rgd.drop(lcc);
1:fe8c4c2:                     rgd.setWithAdminOption(true);
1:fe8c4c2:                     dd.addDescriptor(rgd,
2:ee59de8:                                      null,  // parent
2:ee59de8:                                      DataDictionary.SYSROLES_CATALOG_NUM,
2:ee59de8:                                      false, // no duplicatesAllowed
2:ee59de8:                                      tc);
1:fe8c4c2:                 } else if (rgd == null) {
1:4e3ddd7:                     // Check if the grantee is a role (if not, it is a user)
1:fe8c4c2:                     RoleGrantDescriptor granteeDef =
1:4e3ddd7:                         dd.getRoleDefinitionDescriptor(grantee);
1:ee59de8: 
1:fe8c4c2:                     if (granteeDef != null) {
1:fe8c4c2:                         checkCircularity(role, grantee, grantor, tc, dd);
1:ee59de8:                     }
1:ee59de8: 
1:fe8c4c2:                     rgd = ddg.newRoleGrantDescriptor(
1:f717f79:                         dd.getUUIDFactory().createUUID(),
1:f717f79:                         role,
1:f717f79:                         grantee,
1:f717f79:                         grantor, // dbo for now
1:f717f79:                         withAdminOption,
1:f717f79:                         false);  // not definition
1:f717f79:                     dd.addDescriptor(
1:fe8c4c2:                         rgd,
1:f717f79:                         null,  // parent
1:f717f79:                         DataDictionary.SYSROLES_CATALOG_NUM,
1:f717f79:                         false, // no duplicatesAllowed
1:f717f79:                         tc);
1:ee59de8:                 } // else exists already, no need to add
1:ee59de8:             }
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:fe8c4c2:      * Check that allowing this grant to go ahead does nto create a
1:fe8c4c2:      * circularity in the GRANT role relation graph, cf. Section 12.5,
1:fe8c4c2:      * Syntax rule 1 of ISO/IEC 9075-2 2003.
1:fe8c4c2:      *
1:fe8c4c2:      * @param role The role about to be granted
1:fe8c4c2:      * @param grantee The role to which {@code role} is to be granted
1:fe8c4c2:      * @param grantor Who does the granting
1:fe8c4c2:      * @throws StandardException normal error policy. Throws
1:fe8c4c2:      *                           AUTH_ROLE_GRANT_CIRCULARITY if a
1:fe8c4c2:      *                           circularity is detected.
1:fe8c4c2:      */
1:fe8c4c2:     private void checkCircularity(String role,
1:fe8c4c2:                                   String grantee,
1:fe8c4c2:                                   String grantor,
1:fe8c4c2:                                   TransactionController tc,
1:fe8c4c2:                                   DataDictionary dd)
1:fe8c4c2:             throws StandardException {
1:fe8c4c2: 
1:fe8c4c2:         // The grantee is role, not a user id, so we need to check for
1:fe8c4c2:         // circularity. If there exists a grant back to the role being
1:fe8c4c2:         // granted now, from one of the roles in the grant closure of
1:fe8c4c2:         // grantee, there is a circularity.
1:fe8c4c2: 
1:fe8c4c2:         // Via grant closure of grantee
1:fe8c4c2:         RoleClosureIterator rci =
1:fe8c4c2:             dd.createRoleClosureIterator(tc, grantee, false);
1:12988c7: 
1:12988c7:         String r;
1:12988c7:         while ((r = rci.next()) != null) {
1:12988c7:             if (role.equals(r)) {
1:12988c7:                 throw StandardException.newException
1:12988c7:                     (SQLState.AUTH_ROLE_GRANT_CIRCULARITY,
1:12988c7:                      role, grantee);
1:fe8c4c2:             }
1:fe8c4c2:         }
1:fe8c4c2:     }
1:fe8c4c2: 
1:ee59de8:     // OBJECT SHADOWS
1:fe8c4c2: 
1:ee59de8:     public  String  toString()
1:ee59de8:     {
1:ee59de8:         // Do not put this under SanityManager.DEBUG - it is needed for
1:ee59de8:         // error reporting.
1:ee59de8: 
1:ee59de8:         StringBuffer sb1 = new StringBuffer();
1:ee59de8:         for (Iterator it = roleNames.iterator(); it.hasNext();) {
1:ee59de8:             if( sb1.length() > 0) {
1:ee59de8:                 sb1.append( ", ");
1:fe8c4c2:             }
1:ee59de8:             sb1.append( it.next().toString());
1:fe8c4c2:         }
1:ee59de8: 
1:ee59de8:         StringBuffer sb2 = new StringBuffer();
1:ee59de8:         for (Iterator it = grantees.iterator(); it.hasNext();) {
1:ee59de8:             if( sb2.length() > 0) {
1:ee59de8:                 sb2.append( ", ");
1:ee59de8:             }
1:ee59de8:             sb2.append( it.next().toString());
1:ee59de8:         }
1:ee59de8:         return ("GRANT " +
1:ee59de8:                 sb1.toString() +
1:ee59de8:                 " TO: " +
1:ee59de8:                 sb2.toString() +
1:ee59de8:                 "\n");
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         final String grantor = lcc.getCurrentUserId(activation);
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: 
1:         String r;
1:         while ((r = rci.next()) != null) {
1:             if (role.equals(r)) {
1:                 throw StandardException.newException
1:                     (SQLState.AUTH_ROLE_GRANT_CIRCULARITY,
1:                      role, grantee);
commit:2cc5408
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
commit:0674d16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
/////////////////////////////////////////////////////////////////////////
1:                 RoleGrantDescriptor rdDef =
1:                     dd.getRoleDefinitionDescriptor(role);
1:                 if (rdDef == null) {
/////////////////////////////////////////////////////////////////////////
1:                 // rdDef = dd.findRoleGrantWithAdminToRoleOrPublic(grantor)
1:                 // if (rdDef != null) {
1:                             rdDef.getGrantee().equals(grantor),
1:                             rdDef.isWithAdminOption(),
/////////////////////////////////////////////////////////////////////////
1:                 RoleGrantDescriptor rgd =
1:                     dd.getRoleGrantDescriptor(role, grantee, grantor);
1:                 if (rgd != null &&
1:                         withAdminOption && !rgd.isWithAdminOption()) {
1: 
1:                     rgd.drop(lcc);
1:                     rgd.setWithAdminOption(true);
1:                     dd.addDescriptor(rgd,
1:                 } else if (rgd == null) {
1:                     RoleGrantDescriptor granteeDef =
1:                     if (granteeDef != null) {
1:                         checkCircularity(role, grantee, grantor, tc, dd);
1:                     rgd = ddg.newRoleGrantDescriptor(
/////////////////////////////////////////////////////////////////////////
1:                         rgd,
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check that allowing this grant to go ahead does nto create a
1:      * circularity in the GRANT role relation graph, cf. Section 12.5,
1:      * Syntax rule 1 of ISO/IEC 9075-2 2003.
1:      *
1:      * @param role The role about to be granted
1:      * @param grantee The role to which {@code role} is to be granted
1:      * @param grantor Who does the granting
1:      * @throws StandardException normal error policy. Throws
1:      *                           AUTH_ROLE_GRANT_CIRCULARITY if a
1:      *                           circularity is detected.
1:      */
1:     private void checkCircularity(String role,
1:                                   String grantee,
1:                                   String grantor,
1:                                   TransactionController tc,
1:                                   DataDictionary dd)
1:             throws StandardException {
1: 
1:         // The grantee is role, not a user id, so we need to check for
1:         // circularity. If there exists a grant back to the role being
1:         // granted now, from one of the roles in the grant closure of
1:         // grantee, there is a circularity.
1: 
0:         // Trivial circularity: a->a
0:         if (role.equals(grantee)) {
1:             throw StandardException.newException
0:                 (SQLState.AUTH_ROLE_GRANT_CIRCULARITY,
0:                  role, grantee);
1:         }
1: 
1: 
1:         // Via grant closure of grantee
1:         RoleClosureIterator rci =
1:             dd.createRoleClosureIterator(tc, grantee, false);
0:         try {
0:             String r;
0:             while ((r = rci.next()) != null) {
0:                 if (role.equals(r)) {
1:                     throw StandardException.newException
0:                         (SQLState.AUTH_ROLE_GRANT_CIRCULARITY,
0:                          role, grantee);
1:                 }
1:             }
0:         } finally {
0:             rci.close();
1:         }
1:     }
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
0:                 RoleGrantDescriptor rd = dd.getRoleDefinitionDescriptor(role);
/////////////////////////////////////////////////////////////////////////
1:                 if (grantor.equals(lcc.getDataDictionary().
1:                                        getAuthorizationDatabaseOwner())) {
0:                             rd.getGrantee().equals(grantor),
1:                             "expected database owner in role grant descriptor");
/////////////////////////////////////////////////////////////////////////
1:                 // Has it already been granted?
/////////////////////////////////////////////////////////////////////////
1:                     // Check if the grantee is a role (if not, it is a user)
0:                     RoleGrantDescriptor gd =
1:                         dd.getRoleDefinitionDescriptor(grantee);
0:                     rd = ddg.newRoleGrantDescriptor(
commit:9c3b91c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.Authorizer;
/////////////////////////////////////////////////////////////////////////
1:             if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:                 throw StandardException.
1:                     newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:             }
1: 
commit:f717f79
/////////////////////////////////////////////////////////////////////////
0:                     rd = ddg.newRoleDescriptor(
1:                         dd.getUUIDFactory().createUUID(),
1:                         role,
1:                         grantee,
1:                         grantor, // dbo for now
1:                         withAdminOption,
1:                         false);  // not definition
1:                     dd.addDescriptor(
0:                         rd,
1:                         null,  // parent
1:                         DataDictionary.SYSROLES_CATALOG_NUM,
1:                         false, // no duplicatesAllowed
1:                         tc);
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.GrantRoleConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.shared.common.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  *  This class performs actions that are ALWAYS performed for a
1:  *  GRANT role statement at execution time.
1:  *
1:  *  Descriptors corresponding to the grants are stored in the
1:  *  SYS.SYSROLES table, along with the role definitions, cf
1:  *  CreateRoleConstantAction.
1:  *
1:  */
1: class GrantRoleConstantAction extends DDLConstantAction {
1: 
1:     private List roleNames;
1:     private List grantees;
1:     private final boolean withAdminOption = false; // not impl.
1: 
1:     // CONSTRUCTORS
1:     /**
1:      *  Make the ConstantAction for a CREATE ROLE statement.
1:      *  When executed, will create a role by the given name.
1:      *
1:      *  @param roleNames     List of the names of the roles being granted
1:      *  @param grantees       List of the authorization ids granted to role
1:      */
1:     public GrantRoleConstantAction(List roleNames, List grantees) {
1:         this.roleNames = roleNames;
1:         this.grantees = grantees;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1:     /**
1:      *  This is the guts of the Execution-time logic for GRANT role.
1:      *
1:      *  @see ConstantAction#executeConstantAction
1:      *
1:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction(Activation activation)
1:             throws StandardException {
1: 
1:         LanguageConnectionContext lcc =
1:             activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
0:         final String grantor = lcc.getAuthorizationId();
1: 
1:         dd.startWriting(lcc);
1: 
1:         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
1:             String role = (String)rIter.next();
1: 
1:             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
1:                 String grantee = (String)gIter.next();
1: 
1:                 // check that role exists
0:                 RoleDescriptor rd = dd.getRoleDefinitionDescriptor(role);
1: 
0:                 if (rd == null) {
1:                     throw StandardException.
1:                         newException(SQLState.ROLE_INVALID_SPECIFICATION, role);
1:                 }
1: 
1:                 // Check that role is granted to us (or PUBLIC) with
1:                 // WITH ADMIN option so we can grant it. For database
1:                 // owner, a role definition always fulfills this
1:                 // requirement.  If we implement granting with WITH ADMIN
1:                 // option later, we need to look for a grant to us (or
1:                 // PUBLIC) which has WITH ADMIN. The role definition
1:                 // descriptor will not suffice in that case, so we
1:                 // need something like:
1:                 //
0:                 // rd = dd.findRoleGrantWithAdminToRoleOrPublic(grantor)
0:                 // if (rd != null) {
1:                 //   :
0:                 if (grantor.equals(rd.getGrantee())) {
1:                     // All ok, we are database owner
1:                     if (SanityManager.DEBUG) {
1:                         SanityManager.ASSERT(
0:                             lcc.getDataDictionary().
0:                             getAuthorizationDatabaseOwner().
0:                             equals(grantor),
0:                             "expected database owner in role descriptor");
1:                         SanityManager.ASSERT(
0:                             rd.isWithAdminOption(),
1:                             "expected role definition to have ADMIN OPTION");
1:                     }
1:                 } else {
0:                     throw StandardException.newException
1:                         (SQLState.AUTH_ROLE_DBO_ONLY, "GRANT role");
1:                 }
1: 
0:                 rd = dd.getRoleGrantDescriptor(role, grantee, grantor);
1: 
0:                 if (rd != null && withAdminOption && !rd.isWithAdminOption()) {
1:                     // NOTE: Never called yet, withAdminOption not yet
1:                     // implemented.
1: 
1:                     // Remove old descriptor and add a new one with admin
1:                     // option: cf. SQL 2003, section 12.5, general rule 3
0:                     rd.drop(lcc);
0:                     rd.setWithAdminOption(true);
0:                     dd.addDescriptor(rd,
1:                                      null,  // parent
1:                                      DataDictionary.SYSROLES_CATALOG_NUM,
1:                                      false, // no duplicatesAllowed
1:                                      tc);
0:                 } else if (rd == null) {
0:                     RoleDescriptor gd = dd.getRoleDefinitionDescriptor(grantee);
1: 
0:                     if (gd != null) {
0:                         // FIXME: Grantee is role, need to check for circularity
1:                     }
1: 
0:                     rd = ddg.newRoleDescriptor(role,
0:                                                grantee,
0:                                                grantor, // dbo for now
0:                                                withAdminOption,
0:                                                false);  // not definition
0:                     dd.addDescriptor(rd,
1:                                      null,  // parent
1:                                      DataDictionary.SYSROLES_CATALOG_NUM,
1:                                      false, // no duplicatesAllowed
1:                                      tc);
1:                 } // else exists already, no need to add
1:             }
1:         }
1:     }
1: 
1: 
1:     // OBJECT SHADOWS
1: 
1:     public  String  toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1: 
1:         StringBuffer sb1 = new StringBuffer();
1:         for (Iterator it = roleNames.iterator(); it.hasNext();) {
1:             if( sb1.length() > 0) {
1:                 sb1.append( ", ");
1:             }
1:             sb1.append( it.next().toString());
1:         }
1: 
1:         StringBuffer sb2 = new StringBuffer();
1:         for (Iterator it = grantees.iterator(); it.hasNext();) {
1:             if( sb2.length() > 0) {
1:                 sb2.append( ", ");
1:             }
1:             sb2.append( it.next().toString());
1:         }
1:         return ("GRANT " +
1:                 sb1.toString() +
1:                 " TO: " +
1:                 sb2.toString() +
1:                 "\n");
1:     }
1: }
============================================================================