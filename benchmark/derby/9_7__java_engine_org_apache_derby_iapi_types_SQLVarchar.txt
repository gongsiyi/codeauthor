1:eac0369: /*
1:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLVarchar
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:638f1b4: import java.sql.Clob;
1:0cab10f: import java.text.RuleBasedCollator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: /**
1:403684d:  * SQLVarchar represents a VARCHAR value with UCS_BASIC collation.
1:eac0369:  *
1:eac0369:  * SQLVarchar is mostly the same as SQLChar, so it is implemented as a
1:eac0369:  * subclass of SQLChar.  Only those methods with different behavior are
1:eac0369:  * implemented here.
1:eac0369:  */
1:eac0369: public class SQLVarchar
1:eac0369: 	extends SQLChar
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:eac0369: 		return TypeId.VARCHAR_NAME;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:854dd10:     /** @see DataValueDescriptor#cloneValue */
1:854dd10:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369: 	{
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			return new SQLVarchar(getString());
1:eac0369: 		}
1:eac0369: 		catch (StandardException se)
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLVarchar();
1:eac0369: 	}
1:eac0369: 
1:0cab10f: 	/** @see StringDataValue#getValue(RuleBasedCollator) */
1:0cab10f: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1:0cab10f: 	{
1:0cab10f: 		if (collatorForComparison == null)
1:0cab10f: 		{//null collatorForComparison means use UCS_BASIC for collation
1:0cab10f: 		    return this;			
1:0cab10f: 		} else {
1:0cab10f: 			//non-null collatorForComparison means use collator sensitive
1:0cab10f: 			//implementation of SQLVarchar
1:726b66f: 		     CollatorSQLVarchar s = new CollatorSQLVarchar(collatorForComparison);
1:0cab10f: 		     s.copyState(this);
1:0cab10f: 		     return s;
1:0cab10f: 		}
1:0cab10f: 	}
1:eac0369: 
1:0cab10f: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.SQL_VARCHAR_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constructors
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public SQLVarchar()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLVarchar(String val)
1:eac0369: 	{
1:eac0369: 		super(val);
1:eac0369: 	}
1:eac0369: 
1:638f1b4: 	public SQLVarchar(Clob val)
1:638f1b4: 	{
1:638f1b4: 		super(val);
1:638f1b4: 	}
1:638f1b4: 
1:aa609d5:     /**
1:aa609d5:      * <p>
1:aa609d5:      * This is a special constructor used when we need to represent a password
1:aa609d5:      * as a VARCHAR (see DERBY-866). If you need a general-purpose constructor
1:aa609d5:      * for char[] values and you want to re-use this constructor, make sure to
1:aa609d5:      * read the comment on the SQLChar( char[] ) constructor.
1:aa609d5:      * </p>
1:aa609d5:      */
1:aa609d5:     public SQLVarchar( char[] val ) { super( val ); }
1:aa609d5: 
1:eac0369: 	/**
1:eac0369: 	 * Normalization method - this method may be called when putting
1:eac0369: 	 * a value into a SQLVarchar, for example, when inserting into a SQLVarchar
1:eac0369: 	 * column.  See NormalizeResultSet in execution.
1:eac0369: 	 *
1:eac0369: 	 * @param desiredType	The type to normalize the source column to
1:eac0369: 	 * @param source		The value to normalize
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException				Thrown for null into
1:eac0369: 	 *											non-nullable column, and for
1:eac0369: 	 *											truncation error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void normalize(
1:eac0369: 				DataTypeDescriptor desiredType,
1:eac0369: 				DataValueDescriptor source)
1:92268ac: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		normalize(desiredType, source.getString());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
2:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		int			desiredWidth = desiredType.getMaximumWidth();
1:eac0369: 
1:eac0369: 		int sourceWidth = sourceValue.length();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the input is already the right length, no normalization is
1:eac0369: 		** necessary.
1:eac0369: 		**
1:eac0369: 		** It's OK for a Varchar value to be shorter than the desired width.
1:eac0369: 		** This can happen, for example, if you insert a 3-character Varchar
1:eac0369: 		** value into a 10-character Varchar column.  Just return the value
1:eac0369: 		** in this case.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		if (sourceWidth > desiredWidth) {
1:eac0369: 
1:eac0369: 			hasNonBlankChars(sourceValue, desiredWidth, sourceWidth);
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** No non-blank characters will be truncated.  Truncate the blanks
1:eac0369: 			** to the desired width.
1:eac0369: 			*/
1:eac0369: 			sourceValue = sourceValue.substring(0, desiredWidth);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		setValue(sourceValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/* @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 	{
1:eac0369: 		return TypeId.VARCHAR_PRECEDENCE;
1:eac0369: 	}
1:0cab10f:     
1:eac0369:     /**
1:a4e8535:      * returns the reasonable minimum amount by 
1:a4e8535:      * which the array can grow . See readExternal. 
1:a4e8535:      * when we know that the array needs to grow by at least
1:a4e8535:      * one byte, it is not performant to grow by just one byte
1:a4e8535:      * instead this amount is used to provide a resonable growby size.
1:a4e8535:      * @return minimum reasonable growby size
1:eac0369:      */
1:a4e8535:     protected final int growBy()
1:a4e8535:     {
1:a4e8535:         return RETURN_SPACE_THRESHOLD;  //seems reasonable for a varchar or clob 
1:eac0369:     }
1:a4e8535: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * This is a special constructor used when we need to represent a password
1:      * as a VARCHAR (see DERBY-866). If you need a general-purpose constructor
1:      * for char[] values and you want to re-use this constructor, make sure to
1:      * read the comment on the SQLChar( char[] ) constructor.
1:      * </p>
1:      */
1:     public SQLVarchar( char[] val ) { super( val ); }
1: 
commit:638f1b4
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Clob;
/////////////////////////////////////////////////////////////////////////
1: 	public SQLVarchar(Clob val)
1: 	{
1: 		super(val);
1: 	}
1: 
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18f3f91
/////////////////////////////////////////////////////////////////////////
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:     /** @see DataValueDescriptor#cloneValue */
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:726b66f
/////////////////////////////////////////////////////////////////////////
1: 		     CollatorSQLVarchar s = new CollatorSQLVarchar(collatorForComparison);
commit:403684d
/////////////////////////////////////////////////////////////////////////
1:  * SQLVarchar represents a VARCHAR value with UCS_BASIC collation.
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLVarchar
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.util.StringUtil;
1: 
1: /**
0:  * SQLVarchar satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a String holder, 
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLVarchar can play a role in either a DataType/ValueRow
0:  * or a OrderableDataType/KeyRow, interchangeably.
1:  *
1:  * SQLVarchar is mostly the same as SQLChar, so it is implemented as a
1:  * subclass of SQLChar.  Only those methods with different behavior are
1:  * implemented here.
1:  */
1: public class SQLVarchar
1: 	extends SQLChar
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/*
1: 	 * DataValueDescriptor interface.
1: 	 *
1: 	 */
1: 
1: 	public String getTypeName()
1: 	{
1: 		return TypeId.VARCHAR_NAME;
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		try
1: 		{
1: 			return new SQLVarchar(getString());
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 *
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLVarchar();
1: 	}
1: 
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.SQL_VARCHAR_ID;
1: 	}
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 
1: 	public SQLVarchar()
1: 	{
1: 	}
1: 
1: 	public SQLVarchar(String val)
1: 	{
1: 		super(val);
1: 	}
1: 
1: 	/**
1: 	 * Normalization method - this method may be called when putting
1: 	 * a value into a SQLVarchar, for example, when inserting into a SQLVarchar
1: 	 * column.  See NormalizeResultSet in execution.
1: 	 *
1: 	 * @param desiredType	The type to normalize the source column to
1: 	 * @param source		The value to normalize
1: 	 *
1: 	 *
1: 	 * @exception StandardException				Thrown for null into
1: 	 *											non-nullable column, and for
1: 	 *											truncation error
1: 	 */
1: 
1: 	public void normalize(
1: 				DataTypeDescriptor desiredType,
1: 				DataValueDescriptor source)
1: 					throws StandardException
1: 	{
1: 		normalize(desiredType, source.getString());
1: 	}
1: 
1: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
1: 		throws StandardException
1: 	{
1: 
1: 		int			desiredWidth = desiredType.getMaximumWidth();
1: 
1: 		int sourceWidth = sourceValue.length();
1: 
1: 		/*
1: 		** If the input is already the right length, no normalization is
1: 		** necessary.
1: 		**
1: 		** It's OK for a Varchar value to be shorter than the desired width.
1: 		** This can happen, for example, if you insert a 3-character Varchar
1: 		** value into a 10-character Varchar column.  Just return the value
1: 		** in this case.
1: 		*/
1: 
1: 		if (sourceWidth > desiredWidth) {
1: 
1: 			hasNonBlankChars(sourceValue, desiredWidth, sourceWidth);
1: 
1: 			/*
1: 			** No non-blank characters will be truncated.  Truncate the blanks
1: 			** to the desired width.
1: 			*/
1: 			sourceValue = sourceValue.substring(0, desiredWidth);
1: 		}
1: 
1: 		setValue(sourceValue);
1: 	}
1: 
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/* @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 	{
1: 		return TypeId.VARCHAR_PRECEDENCE;
1: 	}
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:0cab10f
/////////////////////////////////////////////////////////////////////////
1: import java.text.RuleBasedCollator;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/** @see StringDataValue#getValue(RuleBasedCollator) */
1: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1: 	{
1: 		if (collatorForComparison == null)
1: 		{//null collatorForComparison means use UCS_BASIC for collation
1: 		    return this;			
1: 		} else {
1: 			//non-null collatorForComparison means use collator sensitive
1: 			//implementation of SQLVarchar
0: 		     CollatorSQLVarchar s = new CollatorSQLVarchar();
1: 		     s.copyState(this);
0: 		     s.setCollator(collatorForComparison);
1: 		     return s;
1: 		}
1: 	}
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:a4e8535
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * returns the reasonable minimum amount by 
1:      * which the array can grow . See readExternal. 
1:      * when we know that the array needs to grow by at least
1:      * one byte, it is not performant to grow by just one byte
1:      * instead this amount is used to provide a resonable growby size.
1:      * @return minimum reasonable growby size
0:      */
1:     protected final int growBy()
1:     {
1:         return RETURN_SPACE_THRESHOLD;  //seems reasonable for a varchar or clob 
1:     }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: /**
0:  * SQLVarchar satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a String holder, 
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLVarchar can play a role in either a DataType/ValueRow
0:  * or a OrderableDataType/KeyRow, interchangeably.
0:  *
0:  * SQLVarchar is mostly the same as SQLChar, so it is implemented as a
0:  * subclass of SQLChar.  Only those methods with different behavior are
0:  * implemented here.
0:  */
0: public class SQLVarchar
0: 	extends SQLChar
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/*
0: 	 * DataValueDescriptor interface.
0: 	 *
0: 	 */
0: 
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.VARCHAR_NAME;
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
0: 	{
0: 		try
0: 		{
0: 			return new SQLVarchar(getString());
0: 		}
0: 		catch (StandardException se)
0: 		{
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
0: 			return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 *
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLVarchar();
0: 	}
0: 
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.SQL_VARCHAR_ID;
0: 	}
0: 
0: 	/*
0: 	 * constructors
0: 	 */
0: 
0: 	public SQLVarchar()
0: 	{
0: 	}
0: 
0: 	public SQLVarchar(String val)
0: 	{
0: 		super(val);
0: 	}
0: 
0: 	/**
0: 	 * Normalization method - this method may be called when putting
0: 	 * a value into a SQLVarchar, for example, when inserting into a SQLVarchar
0: 	 * column.  See NormalizeResultSet in execution.
0: 	 *
0: 	 * @param desiredType	The type to normalize the source column to
0: 	 * @param source		The value to normalize
0: 	 *
0: 	 *
0: 	 * @exception StandardException				Thrown for null into
0: 	 *											non-nullable column, and for
0: 	 *											truncation error
0: 	 */
0: 
0: 	public void normalize(
0: 				DataTypeDescriptor desiredType,
0: 				DataValueDescriptor source)
0: 					throws StandardException
0: 	{
0: 		normalize(desiredType, source.getString());
0: 	}
0: 
0: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
0: 		throws StandardException
0: 	{
0: 
0: 		int			desiredWidth = desiredType.getMaximumWidth();
0: 
0: 		int sourceWidth = sourceValue.length();
0: 
0: 		/*
0: 		** If the input is already the right length, no normalization is
0: 		** necessary.
0: 		**
0: 		** It's OK for a Varchar value to be shorter than the desired width.
0: 		** This can happen, for example, if you insert a 3-character Varchar
0: 		** value into a 10-character Varchar column.  Just return the value
0: 		** in this case.
0: 		*/
0: 
0: 		if (sourceWidth > desiredWidth) {
0: 
0: 			hasNonBlankChars(sourceValue, desiredWidth, sourceWidth);
0: 
0: 			/*
0: 			** No non-blank characters will be truncated.  Truncate the blanks
0: 			** to the desired width.
0: 			*/
0: 			sourceValue = sourceValue.substring(0, desiredWidth);
0: 		}
0: 
0: 		setValue(sourceValue);
0: 	}
0: 
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/* @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 	{
0: 		return TypeId.VARCHAR_PRECEDENCE;
0: 	}
0: }
============================================================================