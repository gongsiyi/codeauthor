1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.lang.T_Like
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.lang;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.reference.Property;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	@see Like
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: public class T_Like extends T_Generic
1:2bc809f: {
1:2bc809f: 	private static final String testService = "likeTest";
1:2bc809f: 	boolean didFAIL;
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public String getModuleToTestProtocolName() {
1:2bc809f: 		// actually, we're just testing LIKE; but it is reached through
1:2bc809f: 		// the ExecutionFactory MODULE, and this wants a MODULE, so...
1:2bc809f: 		return ExecutionFactory.MODULE;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception T_Fail test failed.
1:2bc809f: 	*/
1:2bc809f: 	protected void runTests() throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		ExecutionFactory f = null;
1:2bc809f: 		boolean pass = false;
1:2bc809f: 		didFAIL = false;
1:2bc809f: 
1:2bc809f:         out.println(testService+" underway");
1:2bc809f: 
1:2bc809f: 		// don't automatic boot this service if it gets left around
1:2bc809f: 		if (startParams == null) {
1:2bc809f: 			startParams = new Properties();
1:2bc809f: 		}
1:2bc809f: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1:2bc809f: 
1:2bc809f: 		REPORT("(unitTestMain) Testing " + testService);
1:2bc809f: 
1:2bc809f: 		// REMIND: add tests here
1:2bc809f: 		try {
1:2bc809f: 			tests();
1:2bc809f: 		} catch (StandardException e) {
1:2bc809f: 			FAIL("exception:"+e);
1:2bc809f: 		}
1:2bc809f: 		if (didFAIL) throw T_Fail.testFailMsg("see log for details");
1:2bc809f: 
1:2bc809f:         out.println(testService+" complete");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// testing support:
1:2bc809f: 	private void expect(String desc, Boolean test, Boolean result) {
1:2bc809f: 		boolean pass =
1:2bc809f: 			( (test == null && result == null) ||
1:2bc809f: 			  (test != null && result != null && test.equals(result)) );
1:2bc809f: 
1:2bc809f: 		if (pass)
1:2bc809f: 			PASS("TEST ["+desc+"] == result["+result+"] ");
1:2bc809f: 		else
1:2bc809f: 			FAIL("TEST ["+desc+"] != result["+result+"] ");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// testing mechanism:
1:2bc809f: 	private void tests() throws StandardException {
1:2bc809f: 		boolean gotLE = false;
1:2bc809f: 		Boolean t = null;
1:2bc809f: 		char[] caNull = null;
1:2bc809f: 		char[] caHello = "hello".toCharArray();
1:2bc809f: 		String msg=null;
1:2bc809f: 		String desc=null;
1:2bc809f: 
1:2bc809f: 		REPORT("testing null combinations...");
1:2bc809f: 		try {
1:f148f1f: 		expect("null like null escape null", Like.like(caNull, 0, caNull, 0, caNull, 0, null), null);
1:f148f1f: 		expect("null like 'hello' escape null", Like.like(caNull, 0, caHello, caHello.length, caNull, 0, null), null);
1:f148f1f: 		expect("'hello' like null escape null", Like.like(caHello, caHello.length, caNull, 0, caNull, 0, null), null);
1:f148f1f: 		expect("null like null escape '\\'", Like.like(caNull, 0, caNull, 0, "\\".toCharArray(), "\\".toCharArray().length, null), null);
1:2bc809f: 
1:2bc809f: 		// gets back a null before it evaluates the escape
1:f148f1f: 		expect("null like null escape 'hello'", Like.like(caNull, 0, caNull, 0, caHello, caHello.length, null), null);
1:2bc809f: 		// gets back a null before it evaluates the pattern
1:f148f1f: 		expect("null like 'hello\\' escape '\\'", Like.like(caNull, 0, "hello\\".toCharArray(), "hello\\".toCharArray().length, "\\".toCharArray(), "\\".toCharArray().length, null), null);
1:2bc809f: 
1:2bc809f: 		} catch(StandardException leOuter1) {
1:2bc809f: 			leOuter1.printStackTrace();
1:2bc809f: 			FAIL("unexpected exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		REPORT("testing valid match cases...");
1:2bc809f: 		try {
1:f148f1f: 		expect("'hello' like 'hello' escape null", Like.like(caHello, caHello.length, caHello, caHello.length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'hello' like 'h_llo' escape null", Like.like(caHello, caHello.length, "h_llo".toCharArray(), "h_llo".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'hello' like '_ello' escape null", Like.like(caHello, caHello.length, "_ello".toCharArray(), "_ello".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'hello' like 'hell_' escape null", Like.like(caHello, caHello.length, "hell_".toCharArray(), "hell_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'hello' like '_____' escape null", Like.like(caHello, caHello.length, "_____".toCharArray(), "_____".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'hello' like 'h___e' escape null", Like.like(caHello, caHello.length, "h___o".toCharArray(), "h___o".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like 'h' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like '_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like '_%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%".toCharArray(), "_%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like '%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%_".toCharArray(), "%_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'' like '%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'' like '%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%".toCharArray(), "%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:f148f1f: 		expect("'' like '%%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%%".toCharArray(), "%%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1:2bc809f: 		} catch(StandardException leOuter2) {
1:2bc809f: 			leOuter2.printStackTrace();
1:2bc809f: 			FAIL("unexpected exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		REPORT("testing valid nonmatch cases...");
1:2bc809f: 		try {
1:f148f1f: 		expect("'hello' like 'hello ' escape null", Like.like(caHello, caHello.length, "hello ".toCharArray(), "hello ".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'hello ' like 'hello' escape null", Like.like("hello ".toCharArray(), "hello ".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'hello' like 'hellox' escape null", Like.like(caHello, caHello.length, "hellox".toCharArray(), "hellox".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'hellox' like 'hello' escape null", Like.like("hellox".toCharArray(), "hellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'xhellox' like 'hello' escape null", Like.like("xhellox".toCharArray(), "xhellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'hello' like 'xhellox' escape null", Like.like(caHello, caHello.length, "xhellox".toCharArray(), "xhellox".toCharArray().length, null, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'hello' like 'h___' escape null", Like.like(caHello, caHello.length, "h___".toCharArray(), "h___".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'h' like '_%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%_".toCharArray(), "_%_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1:f148f1f: 		expect("'' like '_' escape null", Like.like("".toCharArray(), "".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1:2bc809f: 		} catch(StandardException leOuter3) {
1:2bc809f: 			leOuter3.printStackTrace();
1:2bc809f: 			FAIL("unexpected exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		REPORT("testing error cases...");
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			msg = null;
1:2bc809f: 			gotLE=false;
1:2bc809f: 			desc="null like null escape 'hello'";
1:f148f1f: 			t=Like.like(caHello, caHello.length, caHello, caHello.length, caHello, caHello.length, null);
1:2bc809f: 		} catch (StandardException le) {
1:2bc809f: 			gotLE=true;
1:2bc809f: 			msg = le.getMessage();
1:2bc809f: 		} finally {
1:2bc809f: 			if (gotLE)
1:2bc809f: 				PASS("TEST ["+desc+"] got exception "+msg);
1:2bc809f: 			else
1:2bc809f: 				FAIL("TEST ["+desc+"] didn't get exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			msg = null;
1:2bc809f: 			gotLE=false;
1:2bc809f: 			desc="'hello' like 'hhh' escape 'h'";
1:f148f1f: 			t=Like.like(caHello, caHello.length, "hhh".toCharArray(), "hhh".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
1:2bc809f: 		} catch (StandardException le) {
1:2bc809f: 			gotLE=true;
1:2bc809f: 			msg = le.getMessage();
1:2bc809f: 		} finally {
1:2bc809f: 			if (gotLE)
1:2bc809f: 				PASS("TEST ["+desc+"] got exception "+msg);
1:2bc809f: 			else
1:2bc809f: 				FAIL("TEST ["+desc+"] didn't get exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			msg = null;
1:2bc809f: 			gotLE=false;
1:2bc809f: 			desc="'hello' like 'he%' escape 'h'";
1:f148f1f: 			t=Like.like(caHello, caHello.length, "he%".toCharArray(), "he%".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
1:2bc809f: 		} catch (StandardException le) {
1:2bc809f: 			gotLE=true;
1:2bc809f: 			msg = le.getMessage();
1:2bc809f: 		} finally {
1:2bc809f: 			if (gotLE)
1:2bc809f: 				PASS("TEST ["+desc+"] got exception "+msg);
1:2bc809f: 			else
1:2bc809f: 				FAIL("TEST ["+desc+"] didn't get exception");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 		override to mark the test as failed when dumping the message.
1:2bc809f: 	 */
1:2bc809f: 	protected boolean FAIL(String msg) {
1:2bc809f: 		super.FAIL(msg);
1:2bc809f: 		return didFAIL = true;
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f148f1f
/////////////////////////////////////////////////////////////////////////
1: 		expect("null like null escape null", Like.like(caNull, 0, caNull, 0, caNull, 0, null), null);
1: 		expect("null like 'hello' escape null", Like.like(caNull, 0, caHello, caHello.length, caNull, 0, null), null);
1: 		expect("'hello' like null escape null", Like.like(caHello, caHello.length, caNull, 0, caNull, 0, null), null);
1: 		expect("null like null escape '\\'", Like.like(caNull, 0, caNull, 0, "\\".toCharArray(), "\\".toCharArray().length, null), null);
1: 		expect("null like null escape 'hello'", Like.like(caNull, 0, caNull, 0, caHello, caHello.length, null), null);
1: 		expect("null like 'hello\\' escape '\\'", Like.like(caNull, 0, "hello\\".toCharArray(), "hello\\".toCharArray().length, "\\".toCharArray(), "\\".toCharArray().length, null), null);
/////////////////////////////////////////////////////////////////////////
1: 		expect("'hello' like 'hello' escape null", Like.like(caHello, caHello.length, caHello, caHello.length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'hello' like 'h_llo' escape null", Like.like(caHello, caHello.length, "h_llo".toCharArray(), "h_llo".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'hello' like '_ello' escape null", Like.like(caHello, caHello.length, "_ello".toCharArray(), "_ello".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'hello' like 'hell_' escape null", Like.like(caHello, caHello.length, "hell_".toCharArray(), "hell_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'hello' like '_____' escape null", Like.like(caHello, caHello.length, "_____".toCharArray(), "_____".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'hello' like 'h___e' escape null", Like.like(caHello, caHello.length, "h___o".toCharArray(), "h___o".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like 'h' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like '_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like '_%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%".toCharArray(), "_%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like '%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%_".toCharArray(), "%_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'' like '%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'' like '%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%".toCharArray(), "%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
1: 		expect("'' like '%%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%%".toCharArray(), "%%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1: 		expect("'hello' like 'hello ' escape null", Like.like(caHello, caHello.length, "hello ".toCharArray(), "hello ".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'hello ' like 'hello' escape null", Like.like("hello ".toCharArray(), "hello ".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'hello' like 'hellox' escape null", Like.like(caHello, caHello.length, "hellox".toCharArray(), "hellox".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'hellox' like 'hello' escape null", Like.like("hellox".toCharArray(), "hellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'xhellox' like 'hello' escape null", Like.like("xhellox".toCharArray(), "xhellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'hello' like 'xhellox' escape null", Like.like(caHello, caHello.length, "xhellox".toCharArray(), "xhellox".toCharArray().length, null, 0, null), Boolean.FALSE);
1: 		expect("'hello' like 'h___' escape null", Like.like(caHello, caHello.length, "h___".toCharArray(), "h___".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'h' like '_%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%_".toCharArray(), "_%_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
1: 		expect("'' like '_' escape null", Like.like("".toCharArray(), "".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
/////////////////////////////////////////////////////////////////////////
1: 			t=Like.like(caHello, caHello.length, caHello, caHello.length, caHello, caHello.length, null);
/////////////////////////////////////////////////////////////////////////
1: 			t=Like.like(caHello, caHello.length, "hhh".toCharArray(), "hhh".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
/////////////////////////////////////////////////////////////////////////
1: 			t=Like.like(caHello, caHello.length, "he%".toCharArray(), "he%".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.lang.T_Like
1: 
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.lang;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.types.*;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	@see Like
1: 
0: 	@author ames
1:  */
1: public class T_Like extends T_Generic
1: {
1: 	private static final String testService = "likeTest";
1: 	boolean didFAIL;
1: 
1: 	/*
1: 	** Methods required by T_Generic
1: 	*/
1: 
1: 	public String getModuleToTestProtocolName() {
1: 		// actually, we're just testing LIKE; but it is reached through
1: 		// the ExecutionFactory MODULE, and this wants a MODULE, so...
1: 		return ExecutionFactory.MODULE;
1: 	}
1: 
1: 	/**
1: 		@exception T_Fail test failed.
1: 	*/
1: 	protected void runTests() throws T_Fail
1: 	{
1: 		ExecutionFactory f = null;
1: 		boolean pass = false;
1: 		didFAIL = false;
1: 
1:         out.println(testService+" underway");
1: 
1: 		// don't automatic boot this service if it gets left around
1: 		if (startParams == null) {
1: 			startParams = new Properties();
1: 		}
1: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1: 
1: 		REPORT("(unitTestMain) Testing " + testService);
1: 
1: 		// REMIND: add tests here
1: 		try {
1: 			tests();
1: 		} catch (StandardException e) {
1: 			FAIL("exception:"+e);
1: 		}
1: 		if (didFAIL) throw T_Fail.testFailMsg("see log for details");
1: 
1:         out.println(testService+" complete");
1: 	}
1: 
1: 	// testing support:
1: 	private void expect(String desc, Boolean test, Boolean result) {
1: 		boolean pass =
1: 			( (test == null && result == null) ||
1: 			  (test != null && result != null && test.equals(result)) );
1: 
1: 		if (pass)
1: 			PASS("TEST ["+desc+"] == result["+result+"] ");
1: 		else
1: 			FAIL("TEST ["+desc+"] != result["+result+"] ");
1: 	}
1: 
1: 	// testing mechanism:
1: 	private void tests() throws StandardException {
1: 		boolean gotLE = false;
1: 		Boolean t = null;
1: 		char[] caNull = null;
1: 		char[] caHello = "hello".toCharArray();
1: 		String msg=null;
1: 		String desc=null;
1: 
1: 		REPORT("testing null combinations...");
1: 		try {
0: 		expect("null like null escape null", Like.like(caNull, 0, caNull, 0, caNull, 0), null);
0: 		expect("null like 'hello' escape null", Like.like(caNull, 0, caHello, caHello.length, caNull, 0), null);
0: 		expect("'hello' like null escape null", Like.like(caHello, caHello.length, caNull, 0, caNull, 0), null);
0: 		expect("null like null escape '\\'", Like.like(caNull, 0, caNull, 0, "\\".toCharArray(), "\\".toCharArray().length), null);
1: 
1: 		// gets back a null before it evaluates the escape
0: 		expect("null like null escape 'hello'", Like.like(caNull, 0, caNull, 0, caHello, caHello.length), null);
1: 		// gets back a null before it evaluates the pattern
0: 		expect("null like 'hello\\' escape '\\'", Like.like(caNull, 0, "hello\\".toCharArray(), "hello\\".toCharArray().length, "\\".toCharArray(), "\\".toCharArray().length), null);
1: 
1: 		} catch(StandardException leOuter1) {
1: 			leOuter1.printStackTrace();
1: 			FAIL("unexpected exception");
1: 		}
1: 
1: 		REPORT("testing valid match cases...");
1: 		try {
0: 		expect("'hello' like 'hello' escape null", Like.like(caHello, caHello.length, caHello, caHello.length, caNull, 0), Boolean.TRUE);
0: 		expect("'hello' like 'h_llo' escape null", Like.like(caHello, caHello.length, "h_llo".toCharArray(), "h_llo".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'hello' like '_ello' escape null", Like.like(caHello, caHello.length, "_ello".toCharArray(), "_ello".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'hello' like 'hell_' escape null", Like.like(caHello, caHello.length, "hell_".toCharArray(), "hell_".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'hello' like '_____' escape null", Like.like(caHello, caHello.length, "_____".toCharArray(), "_____".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'hello' like 'h___e' escape null", Like.like(caHello, caHello.length, "h___o".toCharArray(), "h___o".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like 'h' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like '_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like '_%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%".toCharArray(), "_%".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like '%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%_".toCharArray(), "%_".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'' like '%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'' like '%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%".toCharArray(), "%%".toCharArray().length, caNull, 0), Boolean.TRUE);
0: 		expect("'' like '%%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%%".toCharArray(), "%%%".toCharArray().length, caNull, 0), Boolean.TRUE);
1: 		} catch(StandardException leOuter2) {
1: 			leOuter2.printStackTrace();
1: 			FAIL("unexpected exception");
1: 		}
1: 
1: 		REPORT("testing valid nonmatch cases...");
1: 		try {
0: 		expect("'hello' like 'hello ' escape null", Like.like(caHello, caHello.length, "hello ".toCharArray(), "hello ".toCharArray().length, caNull, 0), Boolean.FALSE);
0: 		expect("'hello ' like 'hello' escape null", Like.like("hello ".toCharArray(), "hello ".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
0: 		expect("'hello' like 'hellox' escape null", Like.like(caHello, caHello.length, "hellox".toCharArray(), "hellox".toCharArray().length, caNull, 0), Boolean.FALSE);
0: 		expect("'hellox' like 'hello' escape null", Like.like("hellox".toCharArray(), "hellox".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
0: 		expect("'xhellox' like 'hello' escape null", Like.like("xhellox".toCharArray(), "xhellox".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
0: 		expect("'hello' like 'xhellox' escape null", Like.like(caHello, caHello.length, "xhellox".toCharArray(), "xhellox".toCharArray().length, null, 0), Boolean.FALSE);
0: 		expect("'hello' like 'h___' escape null", Like.like(caHello, caHello.length, "h___".toCharArray(), "h___".toCharArray().length, caNull, 0), Boolean.FALSE);
0: 		expect("'h' like '_%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%_".toCharArray(), "_%_".toCharArray().length, caNull, 0), Boolean.FALSE);
0: 		expect("'' like '_' escape null", Like.like("".toCharArray(), "".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0), Boolean.FALSE);
1: 		} catch(StandardException leOuter3) {
1: 			leOuter3.printStackTrace();
1: 			FAIL("unexpected exception");
1: 		}
1: 
1: 		REPORT("testing error cases...");
1: 
1: 		try {
1: 			msg = null;
1: 			gotLE=false;
1: 			desc="null like null escape 'hello'";
0: 			t=Like.like(caHello, caHello.length, caHello, caHello.length, caHello, caHello.length);
1: 		} catch (StandardException le) {
1: 			gotLE=true;
1: 			msg = le.getMessage();
1: 		} finally {
1: 			if (gotLE)
1: 				PASS("TEST ["+desc+"] got exception "+msg);
1: 			else
1: 				FAIL("TEST ["+desc+"] didn't get exception");
1: 		}
1: 
1: 		try {
1: 			msg = null;
1: 			gotLE=false;
1: 			desc="'hello' like 'hhh' escape 'h'";
0: 			t=Like.like(caHello, caHello.length, "hhh".toCharArray(), "hhh".toCharArray().length, "h".toCharArray(), "h".toCharArray().length);
1: 		} catch (StandardException le) {
1: 			gotLE=true;
1: 			msg = le.getMessage();
1: 		} finally {
1: 			if (gotLE)
1: 				PASS("TEST ["+desc+"] got exception "+msg);
1: 			else
1: 				FAIL("TEST ["+desc+"] didn't get exception");
1: 		}
1: 
1: 		try {
1: 			msg = null;
1: 			gotLE=false;
1: 			desc="'hello' like 'he%' escape 'h'";
0: 			t=Like.like(caHello, caHello.length, "he%".toCharArray(), "he%".toCharArray().length, "h".toCharArray(), "h".toCharArray().length);
1: 		} catch (StandardException le) {
1: 			gotLE=true;
1: 			msg = le.getMessage();
1: 		} finally {
1: 			if (gotLE)
1: 				PASS("TEST ["+desc+"] got exception "+msg);
1: 			else
1: 				FAIL("TEST ["+desc+"] didn't get exception");
1: 		}
1: 
1: 	}
1: 
1: 	/*
1: 		override to mark the test as failed when dumping the message.
1: 	 */
1: 	protected boolean FAIL(String msg) {
1: 		super.FAIL(msg);
1: 		return didFAIL = true;
1: 	}
1: }
1: 
============================================================================