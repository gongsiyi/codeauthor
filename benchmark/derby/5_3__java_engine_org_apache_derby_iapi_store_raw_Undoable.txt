1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.Undoable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An Undoable operation is an operation that changed the state of the RawStore
1:eac0369: 	in the context of a transaction and this change can be rolled back.
1:eac0369: 
1:eac0369: 	@see Transaction#logAndDo
1:eac0369: 	@see Compensation
1:eac0369: */
1:eac0369: 
1:76addbc: public interface Undoable extends Loggable {
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Generate a loggable which will undo this change, using the optional
1:eac0369: 		input if necessary.
1:eac0369: 
1:eac0369: 		<P><B>NOTE</B><BR>Any logical undo logic must be hidden behind generateUndo.
1:eac0369: 		During recovery redo, it should not depend on any logical undo logic.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		There are 3 ways to implement a redo-only log record:
1:eac0369: 		<NL>
1:eac0369: 		<LI>Make the log record a Loggable instead of an Undoable, this is the
1:eac0369: 		cleanest method.
1:eac0369: 		<LI>If you want to extend a log operation class that is an Undoable,
1:eac0369: 		you can then either have generateUndo return null - this is preferred -
1:eac0369: 		(the log operation's undoMe should never be called, so you can put a
1:eac0369: 		null body there if the super class you are extending does not implement
1:eac0369: 		a undoMe).
1:eac0369: 		<LI>Or, have undoMe do nothing - this is least preferred.
1:eac0369: 		</NL>
1:eac0369: 
1:eac0369: 		<P>Any resource (e.g., latched page) that is needed for the
1:eac0369: 		undoable.undoMe() must be acquired in undoable.generateUndo().
1:eac0369: 		Moreover, that resource must be identified in the compensation
1:eac0369: 		operation, and reacquired in the compensation.needsRedo() method during
1:eac0369: 		recovery redo.
1:eac0369: 		<BR><B>If you do write your own generateUndo or needsRedo, any
1:eac0369: 		resource you latch or acquire, you must release them in
1:eac0369: 		Compensation.doMe() or in Compensation.releaseResource().</B>
1:eac0369: 
1:eac0369: 		<P> To write a generateUndo operation, find the object that needs to be
1:eac0369: 		rolled back.  Assuming that it is a page, latch it, put together a
1:eac0369: 		Compensation operation with the undoOp set to this operation, and save
1:eac0369: 		the page number in the compensation operation, then
1:eac0369: 		return the Compensation operation to the logging system.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		The sequence of events in a rollback of a undoable operation is
1:eac0369: 		<NL>
1:eac0369: 		<LI> The logging system calls undoable.generateUndo.  If this returns
1:eac0369: 		null, then there is nothing to undo.
1:eac0369: 		<LI> If generateUndo returns a Compensation operation, then the logging
1:eac0369: 		system will log the Compensation log record and call
1:eac0369: 		Compenstation.doMe().  (Hopefully, this just calls the undoable's
1:eac0369: 		undoMe)
1:eac0369: 		<LI> After the Compensation operation has been applied, the logging
1:eac0369: 		system will call compensation.releaseResource(). If you do overwrite a
1:eac0369: 		super class's releaseResource(), it would be prudent to call
1:eac0369: 		super.releaseResource() first.
1:eac0369: 		</NL>
1:eac0369: 
1:eac0369: 		<P> The available() method of in indicates how much data can be read, i.e.
1:eac0369: 		how much was originally written.
1:eac0369: 
1:eac0369: 		@param xact	the transaction doing the rollback
1:eac0369: 		@return the compensation operation that will rollback this change, or
1:eac0369: 		null if nothing to undo. 
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:3fd26f3: 		@exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 		@see Loggable#releaseResource
1:eac0369: 		@see Loggable#needsRedo
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.Undoable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface Undoable extends Loggable {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 	An Undoable operation is an operation that changed the state of the RawStore
1: 	in the context of a transaction and this change can be rolled back.
1: 
1: 	@see Transaction#logAndDo
1: 	@see Compensation
1: */
1: 
0: public interface Undoable extends Loggable { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 
1: 	/**
1: 		Generate a loggable which will undo this change, using the optional
1: 		input if necessary.
1: 
1: 		<P><B>NOTE</B><BR>Any logical undo logic must be hidden behind generateUndo.
1: 		During recovery redo, it should not depend on any logical undo logic.
1: 
1: 		<P>
1: 		There are 3 ways to implement a redo-only log record:
1: 		<NL>
1: 		<LI>Make the log record a Loggable instead of an Undoable, this is the
1: 		cleanest method.
1: 		<LI>If you want to extend a log operation class that is an Undoable,
1: 		you can then either have generateUndo return null - this is preferred -
1: 		(the log operation's undoMe should never be called, so you can put a
1: 		null body there if the super class you are extending does not implement
1: 		a undoMe).
1: 		<LI>Or, have undoMe do nothing - this is least preferred.
1: 		</NL>
1: 
1: 		<P>Any resource (e.g., latched page) that is needed for the
1: 		undoable.undoMe() must be acquired in undoable.generateUndo().
1: 		Moreover, that resource must be identified in the compensation
1: 		operation, and reacquired in the compensation.needsRedo() method during
1: 		recovery redo.
1: 		<BR><B>If you do write your own generateUndo or needsRedo, any
1: 		resource you latch or acquire, you must release them in
1: 		Compensation.doMe() or in Compensation.releaseResource().</B>
1: 
1: 		<P> To write a generateUndo operation, find the object that needs to be
1: 		rolled back.  Assuming that it is a page, latch it, put together a
1: 		Compensation operation with the undoOp set to this operation, and save
1: 		the page number in the compensation operation, then
1: 		return the Compensation operation to the logging system.
1: 
1: 		<P>
1: 		The sequence of events in a rollback of a undoable operation is
1: 		<NL>
1: 		<LI> The logging system calls undoable.generateUndo.  If this returns
1: 		null, then there is nothing to undo.
1: 		<LI> If generateUndo returns a Compensation operation, then the logging
1: 		system will log the Compensation log record and call
1: 		Compenstation.doMe().  (Hopefully, this just calls the undoable's
1: 		undoMe)
1: 		<LI> After the Compensation operation has been applied, the logging
1: 		system will call compensation.releaseResource(). If you do overwrite a
1: 		super class's releaseResource(), it would be prudent to call
1: 		super.releaseResource() first.
1: 		</NL>
1: 
1: 		<P> The available() method of in indicates how much data can be read, i.e.
1: 		how much was originally written.
1: 
1: 		@param xact	the transaction doing the rollback
1: 		@return the compensation operation that will rollback this change, or
1: 		null if nothing to undo. 
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 		@see Loggable#releaseResource
1: 		@see Loggable#needsRedo
1: 
1: 	*/
1: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1: 		 throws StandardException, IOException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 	An Undoable operation is an operation that changed the state of the RawStore
0: 	in the context of a transaction and this change can be rolled back.
0: 
0: 	@see Transaction#logAndDo
0: 	@see Compensation
0: */
0: 
0: public interface Undoable extends Loggable { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 
0: 	/**
0: 		Generate a loggable which will undo this change, using the optional
0: 		input if necessary.
0: 
0: 		<P><B>NOTE</B><BR>Any logical undo logic must be hidden behind generateUndo.
0: 		During recovery redo, it should not depend on any logical undo logic.
0: 
0: 		<P>
0: 		There are 3 ways to implement a redo-only log record:
0: 		<NL>
0: 		<LI>Make the log record a Loggable instead of an Undoable, this is the
0: 		cleanest method.
0: 		<LI>If you want to extend a log operation class that is an Undoable,
0: 		you can then either have generateUndo return null - this is preferred -
0: 		(the log operation's undoMe should never be called, so you can put a
0: 		null body there if the super class you are extending does not implement
0: 		a undoMe).
0: 		<LI>Or, have undoMe do nothing - this is least preferred.
0: 		</NL>
0: 
0: 		<P>Any resource (e.g., latched page) that is needed for the
0: 		undoable.undoMe() must be acquired in undoable.generateUndo().
0: 		Moreover, that resource must be identified in the compensation
0: 		operation, and reacquired in the compensation.needsRedo() method during
0: 		recovery redo.
0: 		<BR><B>If you do write your own generateUndo or needsRedo, any
0: 		resource you latch or acquire, you must release them in
0: 		Compensation.doMe() or in Compensation.releaseResource().</B>
0: 
0: 		<P> To write a generateUndo operation, find the object that needs to be
0: 		rolled back.  Assuming that it is a page, latch it, put together a
0: 		Compensation operation with the undoOp set to this operation, and save
0: 		the page number in the compensation operation, then
0: 		return the Compensation operation to the logging system.
0: 
0: 		<P>
0: 		The sequence of events in a rollback of a undoable operation is
0: 		<NL>
0: 		<LI> The logging system calls undoable.generateUndo.  If this returns
0: 		null, then there is nothing to undo.
0: 		<LI> If generateUndo returns a Compensation operation, then the logging
0: 		system will log the Compensation log record and call
0: 		Compenstation.doMe().  (Hopefully, this just calls the undoable's
0: 		undoMe)
0: 		<LI> After the Compensation operation has been applied, the logging
0: 		system will call compensation.releaseResource(). If you do overwrite a
0: 		super class's releaseResource(), it would be prudent to call
0: 		super.releaseResource() first.
0: 		</NL>
0: 
0: 		<P> The available() method of in indicates how much data can be read, i.e.
0: 		how much was originally written.
0: 
0: 		@param xact	the transaction doing the rollback
0: 		@return the compensation operation that will rollback this change, or
0: 		null if nothing to undo. 
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 		@see Loggable#releaseResource
0: 		@see Loggable#needsRedo
0: 
0: 	*/
0: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
0: 		 throws StandardException, IOException;
0: 
0: }
============================================================================