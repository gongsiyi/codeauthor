1:5b838fd: /*
1:5b838fd: 
1:5b838fd: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_13
1:5b838fd: 
1:5b838fd: Licensed to the Apache Software Foundation (ASF) under one or more
1:5b838fd: contributor license agreements.  See the NOTICE file distributed with
1:5b838fd: this work for additional information regarding copyright ownership.
1:5b838fd: The ASF licenses this file to You under the Apache License, Version 2.0
1:5b838fd: (the "License"); you may not use this file except in compliance with
1:5b838fd: the License.  You may obtain a copy of the License at
1:5b838fd: 
1:5b838fd:    http://www.apache.org/licenses/LICENSE-2.0
1:5b838fd: 
1:5b838fd: Unless required by applicable law or agreed to in writing, software
1:5b838fd: distributed under the License is distributed on an "AS IS" BASIS,
1:5b838fd: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b838fd: See the License for the specific language governing permissions and
1:5b838fd: limitations under the License.
1:5b838fd: 
1:5b838fd: */
1:5b838fd: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:5b838fd: 
1:5b838fd: import java.sql.SQLException;
1:5b838fd: import java.sql.Statement;
1:5b838fd: import junit.framework.Test;
1:5b838fd: import org.apache.derbyTesting.junit.BaseTestSuite;
1:5b838fd: import org.apache.derbyTesting.junit.JDBC;
1:ea2e939: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:5b838fd: 
1:5b838fd: 
1:5b838fd: /**
1:5b838fd:  * Upgrade test cases for 10.13.
1:5b838fd:  */
1:5b838fd: public class Changes10_13 extends UpgradeChange
1:5b838fd: {
1:5b838fd: 
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd:     //
1:5b838fd:     // CONSTANTS
1:5b838fd:     //
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd: 
1:5b838fd:     private static final String SYNTAX_ERROR = "42X01";
1:5b838fd:     private static final String UPGRADE_REQUIRED = "XCL47";
1:5b838fd:     private static final String CANNOT_ALTER_NON_IDENTITY_COLUMN = "42Z29";
1:5b838fd:     private static final String CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN = "42Z23";
1:ea2e939:     private static final String NO_SUCH_METHOD_ALIAS="42Y03";
1:5b838fd: 
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd:     //
1:5b838fd:     // CONSTRUCTOR
1:5b838fd:     //
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd: 
1:5b838fd:     public Changes10_13(String name) {
1:5b838fd:         super(name);
1:5b838fd:     }
1:5b838fd: 
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd:     //
1:5b838fd:     // JUnit BEHAVIOR
1:5b838fd:     //
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd: 
1:ea2e939:     /**
1:5b838fd:      * Return the suite of tests to test the changes made in 10.13.
1:5b838fd:      *
1:5b838fd:      * @param phase an integer that indicates the current phase in
1:5b838fd:      *              the upgrade test.
1:5b838fd:      * @return the test suite created.
1:5b838fd:      */
1:5b838fd:     public static Test suite(int phase) {
1:5b838fd:         return new BaseTestSuite(Changes10_13.class, "Upgrade test for 10.13");
1:5b838fd:     }
1:5b838fd: 
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd:     //
1:5b838fd:     // TESTS
1:5b838fd:     //
1:5b838fd:     //////////////////////////////////////////////////////////////////
1:5b838fd: 
1:5b838fd:     /**
1:5b838fd:      * Test the addition of support for changing identity columns
1:5b838fd:      * from ALWAYS to BY DEFAULT and vice versa via
1:5b838fd:      * an ALTER TABLE statement. DERBY-6882.
1:5b838fd:      */
1:5b838fd:     public void testAlterTableSetGenerated() throws SQLException {
1:5b838fd:         Statement s = createStatement();
1:5b838fd: 
1:5b838fd:         // GENERATED BY DEFAULT not supported prior to 10.1
1:5b838fd:         if (!oldAtLeast(10, 1)) { return; }
1:5b838fd: 
1:5b838fd:         // 10.11 upgraded all identity columns to be backed by sequences
1:5b838fd:         boolean atLeast10_11 = oldAtLeast(10,11);
1:5b838fd:         
1:5b838fd:         switch (getPhase()) {
1:5b838fd:             case PH_CREATE:
1:5b838fd:                 s.execute("create table t_always_6882(a int generated always as identity, b int)");
1:5b838fd:                 s.execute("create table t_default_6882(a int generated by default as identity, b int)");
1:5b838fd:                 s.execute("create table t_none_6882(a int, b int)");
1:5b838fd:                 s.execute("insert into t_always_6882(b) values (100)");
1:5b838fd:                 s.execute("insert into t_default_6882(b) values (100)");
1:5b838fd:                 assertCompileError
1:5b838fd:                   (
1:5b838fd:                    CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:5b838fd:                    "insert into t_always_6882(a, b) values (-1, -100)"
1:5b838fd:                    );
1:5b838fd:                 s.execute("insert into t_default_6882(a, b) values (-1, -100)");
1:5b838fd:                 break;
1:5b838fd: 
1:5b838fd:             case PH_SOFT_UPGRADE:
1:5b838fd:                 // We only support the SET GENERATED clause if the database
1:5b838fd:                 // is at level 10.11 or higher.
1:5b838fd:                 if (atLeast10_11)
1:5b838fd:                 {
1:5b838fd:                     assertCompileError
1:5b838fd:                       (
1:5b838fd:                        CANNOT_ALTER_NON_IDENTITY_COLUMN,
1:5b838fd:                        "alter table t_none_6882 alter column a set generated by default"
1:5b838fd:                        );
1:5b838fd:                     s.execute("alter table t_always_6882 alter column a set generated by default");
1:5b838fd:                     s.execute("alter table t_default_6882 alter column a set generated always");
1:5b838fd:                     s.execute("insert into t_always_6882(a, b) values (-2, -200)");
1:5b838fd:                     assertCompileError
1:5b838fd:                       (
1:5b838fd:                        CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:5b838fd:                        "insert into t_default_6882(a, b) values (-2, -200)"
1:5b838fd:                        );
1:5b838fd:                     s.execute("insert into t_always_6882(b) values (200)");
1:5b838fd:                     s.execute("insert into t_default_6882(b) values (200)");
1:5b838fd:                     JDBC.assertFullResultSet(
1:5b838fd:                         s.executeQuery("select * from t_always_6882 order by a"),
1:5b838fd:                         new String[][]
1:5b838fd:                         {
1:5b838fd:                           { "-2", "-200" },
1:5b838fd:                           { "1", "100" },
1:5b838fd:                           { "2", "200" },
1:5b838fd:                         });
1:5b838fd:                     JDBC.assertFullResultSet(
1:5b838fd:                         s.executeQuery("select * from t_default_6882 order by a"),
1:5b838fd:                         new String[][]
1:5b838fd:                         {
1:5b838fd:                           { "-1", "-100" },
1:5b838fd:                           { "1", "100" },
1:5b838fd:                           { "2", "200" },
1:5b838fd:                         });
1:5b838fd:                 } else {
1:5b838fd:                     assertCompileError
1:5b838fd:                       (
1:5b838fd:                        UPGRADE_REQUIRED,
1:5b838fd:                        "alter table t_none_6882 alter column a set generated by default"
1:5b838fd:                        );
1:5b838fd:                     assertCompileError
1:5b838fd:                       (
1:5b838fd:                        UPGRADE_REQUIRED,
1:5b838fd:                        "alter table t_always_6882 alter column a set generated by default"
1:5b838fd:                        );
1:5b838fd:                     assertCompileError
1:5b838fd:                       (
1:5b838fd:                        UPGRADE_REQUIRED,
1:5b838fd:                        "alter table t_default_6882 alter column a set generated always"
1:5b838fd:                        );
1:5b838fd:                 }
1:5b838fd:                 break;
1:5b838fd:                 
1:5b838fd:             case PH_HARD_UPGRADE:
1:5b838fd:                 assertCompileError
1:5b838fd:                   (
1:5b838fd:                    CANNOT_ALTER_NON_IDENTITY_COLUMN,
1:5b838fd:                    "alter table t_none_6882 alter column a set generated by default"
1:5b838fd:                    );
1:5b838fd:                 s.execute("alter table t_always_6882 alter column a set generated always");
1:5b838fd:                 s.execute("alter table t_default_6882 alter column a set generated by default");
1:5b838fd:                 assertCompileError
1:5b838fd:                   (
1:5b838fd:                    CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:5b838fd:                    "insert into t_always_6882(a, b) values (-3, -300)"
1:5b838fd:                    );
1:5b838fd:                 s.execute("insert into t_default_6882(a, b) values (-3, -300)");
1:5b838fd:                 s.execute("insert into t_always_6882(b) values (300)");
1:5b838fd:                 s.execute("insert into t_default_6882(b) values (300)");
1:5b838fd: 
1:5b838fd:                 String[][] alwaysResults;
1:5b838fd:                 String[][] defaultResults;
1:5b838fd:                 if (atLeast10_11)
1:5b838fd:                 {
1:5b838fd:                     alwaysResults =  new String[][]  
1:5b838fd:                       {
1:5b838fd:                         { "-2", "-200" },
1:5b838fd:                         { "1", "100" },
1:5b838fd:                         { "2", "200" },
1:5b838fd:                         { "3", "300" },
1:5b838fd:                       };
1:5b838fd:                     defaultResults = new String[][]
1:5b838fd:                       {
1:5b838fd:                         { "-3", "-300" },
1:5b838fd:                         { "-1", "-100" },
1:5b838fd:                         { "1", "100" },
1:5b838fd:                         { "2", "200" },
1:5b838fd:                         { "3", "300" },
1:5b838fd:                       };
1:5b838fd:                 }
1:5b838fd:                 else
1:5b838fd:                 {
1:5b838fd:                     alwaysResults = new String[][]  
1:5b838fd:                       {
1:5b838fd:                         { "1", "100" },
1:5b838fd:                         { "2", "300" },
1:5b838fd:                       };
1:5b838fd:                     defaultResults = new String[][]
1:5b838fd:                       {
1:5b838fd:                         { "-3", "-300" },
1:5b838fd:                         { "-1", "-100" },
1:5b838fd:                         { "1", "100" },
1:5b838fd:                         { "2", "300" },
1:5b838fd:                       };
1:5b838fd:                 }
1:ea2e939: 
1:5b838fd:                 JDBC.assertFullResultSet
1:5b838fd:                   (
1:5b838fd:                    s.executeQuery("select * from t_always_6882 order by a"),
1:5b838fd:                    alwaysResults
1:5b838fd:                    );
1:5b838fd:                 JDBC.assertFullResultSet
1:5b838fd:                   (
1:5b838fd:                    s.executeQuery("select * from t_default_6882 order by a"),
1:5b838fd:                    defaultResults);
1:5b838fd:                 break;
1:5b838fd:         };
1:5b838fd:     }
1:08cc0f8: 	/**
1:ea2e939: 	 * Test newly added system procedure to import table with header lines.
1:ea2e939: 	 * DERBY-6892. 
1:ea2e939: 	 */
1:ea2e939:      public void testDerby6892SkipHeaderLines() throws SQLException {
1:ea2e939:         Statement s = createStatement();
1:ea2e939: 
1:ea2e939:         switch (getPhase()) {
1:ea2e939: 		case PH_CREATE:
1:ea2e939: 			//table to export
1:ea2e939: 			s.execute("create table ex_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1:ea2e939: 
1:ea2e939: 			//table to import
1:ea2e939: 			s.execute("create table imp_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1:08cc0f8: 		
1:ea2e939: 			s.execute("insert into ex_pet values('Rover', 'Dog' , 4)");
1:ea2e939: 
1:ea2e939: 			s.execute("insert into ex_pet values('Spot', 'Cat' , 2)");
1:ea2e939: 	
1:ea2e939: 			s.execute("insert into ex_pet values('Squawky','Parrot',37)");
1:ea2e939: 			
1:ea2e939: 
1:ea2e939: 			SupportFilesSetup.deleteFile("pet.dat");
1:ea2e939: 			s.execute("call SYSCS_UTIL.SYSCS_EXPORT_TABLE (null, 'EX_PET', 'pet.dat' , null, null, null) ");
1:ea2e939: 			
1:ea2e939: 				
1:ea2e939: 			
1:ea2e939: 			//Show that SYSCS_IMPORT_TABLE_BULK 
1:ea2e939: 			//does not exist
1:ea2e939: 			assertCompileError
1:ea2e939:                   	(
1:ea2e939:                    	NO_SUCH_METHOD_ALIAS,
1:ea2e939:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET' , 'pet.dat' , null, null, null, 0 , 1) ");
1:ea2e939: 			break;
1:ea2e939:             
1:ea2e939: 
1:ea2e939: 		case PH_SOFT_UPGRADE:		
1:ea2e939:            		//Show that SYSCS_IMPORT_TABLE_BULK
1:ea2e939: 			//does not support with soft upgrade
1:ea2e939: 			assertCompileError
1:ea2e939:                   	(
1:ea2e939:                    	NO_SUCH_METHOD_ALIAS,
1:ea2e939:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat' , null, null, null, 0 , 1) "
1:ea2e939:                    	);
1:ea2e939:                 	break;
1:ea2e939:                 
1:ea2e939:                 case PH_POST_SOFT_UPGRADE:
1:ea2e939:                 	//Show that SYSCS_IMPORT_TABLE_BULK
1:ea2e939: 			//does not exist
1:ea2e939: 			assertCompileError
1:ea2e939:                   	(
1:ea2e939:                    	NO_SUCH_METHOD_ALIAS,
1:ea2e939:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat' , null, null, null, 0 , 1) "
1:ea2e939:                    	);
1:ea2e939:                 	break;
1:ea2e939: 
1:ea2e939: 
1:ea2e939: 	       case PH_HARD_UPGRADE:
1:ea2e939: 
1:ea2e939: 			s.execute("delete from imp_pet");
1:08cc0f8: 			//Show that SYSCS_IMPORT_TABLE_BULK 
1:ea2e939: 			//accept CSV file with header lines
1:ea2e939: 			s.execute("call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat', null, null, null, 0, 1)");
1:ea2e939: 
1:ea2e939: 		
1:ea2e939: 			JDBC.assertFullResultSet(
1:ea2e939:                 	s.executeQuery("select * from IMP_PET"),
1:ea2e939:                         new String[][]
1:ea2e939:                         {
1:ea2e939:                               { "Spot", "Cat", "2"},
1:ea2e939:                               { "Squawky", "Parrot", "37"},
1:ea2e939:                         });
1:ea2e939: 
1:ea2e939: 			break;
1:ea2e939:         };
1:ea2e939:     }
1:ea2e939: 
1:5b838fd:         /**
1:08cc0f8: 	 * Test newly added system procedure to import data with header lines.
1:08cc0f8: 	 * DERBY-6893. 
1:08cc0f8: 	 */
1:08cc0f8:      public void testDerby6893SkipHeaderLines() throws SQLException {
1:08cc0f8:         Statement s = createStatement();
1:08cc0f8:        switch (getPhase()) {
1:08cc0f8: 		case PH_CREATE:
1:08cc0f8: 			//table to export
1:08cc0f8: 		        s.execute("create table exp_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1:08cc0f8: 
1:08cc0f8: 			//table to import
1:08cc0f8: 			s.execute("create table im_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1:08cc0f8: 			s.execute("insert into exp_pet values('Rover', 'Dog' , 4)");
1:08cc0f8: 
1:08cc0f8: 			s.execute("insert into exp_pet values('Spot', 'Cat' , 2)");
1:08cc0f8: 	
1:08cc0f8: 			s.execute("insert into exp_pet values('Squawky','Parrot',37)");
1:08cc0f8: 		
1:08cc0f8: 
1:08cc0f8: 			SupportFilesSetup.deleteFile("pet.dat");
1:08cc0f8: 			s.execute("call SYSCS_UTIL.SYSCS_EXPORT_TABLE(null, 'EXP_PET', 'pet.dat' , null, null, null) ");
1:08cc0f8: 			
1:08cc0f8: 		
1:08cc0f8: 			
1:08cc0f8: 			//Show that SYSCS_IMPORT_DATA_BULK 
1:08cc0f8: 			//does not exist
1:08cc0f8: 			assertCompileError
1:08cc0f8:                   	(
1:08cc0f8:                  	NO_SUCH_METHOD_ALIAS,
1:08cc0f8:                    	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) ");
1:08cc0f8: 			break;
1:08cc0f8:            
1:08cc0f8: 
1:08cc0f8: 		case PH_SOFT_UPGRADE:		
1:08cc0f8:            		//Show that SYSCS_IMPORT_DATA_BULK
1:08cc0f8: 			//does not support with soft upgrade
1:08cc0f8: 			assertCompileError
1:08cc0f8:                   	(
1:08cc0f8:                   	NO_SUCH_METHOD_ALIAS,
1:08cc0f8:                   	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) "
1:08cc0f8:                    	);
1:08cc0f8:               		break;
1:08cc0f8:                 
1:08cc0f8:                 case PH_POST_SOFT_UPGRADE:
1:08cc0f8: 	               	//Show that SYSCS_IMPORT_DATA_BULK
1:08cc0f8: 			//does not exist
1:08cc0f8: 			assertCompileError
1:08cc0f8:                  	(
1:08cc0f8:                    	NO_SUCH_METHOD_ALIAS,
1:08cc0f8:                   	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) "
1:08cc0f8:                    	);
1:08cc0f8:                 	break;
1:08cc0f8: 
1:08cc0f8: 	       case PH_HARD_UPGRADE:
1:08cc0f8: 			s.execute("delete from im_pet");
1:08cc0f8: 			//Show that SYSCS_IMPORT_DATA_BULK 
1:08cc0f8: 			//accept CSV file with header lines
1:08cc0f8: 			s.execute("call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3', "
1:08cc0f8:   			+" 'pet.dat' , null, null, null, 0 , 1) ");
1:08cc0f8: 
1:08cc0f8: 			JDBC.assertFullResultSet(
1:08cc0f8:                 	s.executeQuery("select * from IM_PET"),
1:08cc0f8:                         new String[][]
1:08cc0f8:                         {
1:08cc0f8:                               { "Spot", "Cat", "2"},
1:08cc0f8:                               { "Squawky", "Parrot", "37"},
1:08cc0f8:                         });
1:08cc0f8: 
1:08cc0f8: 			break;
1:08cc0f8:         };
1:08cc0f8:     }
1:08cc0f8: 
1:08cc0f8:  
1:5b838fd: 
1:5b838fd: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:08cc0f8
/////////////////////////////////////////////////////////////////////////
1: 			//Show that SYSCS_IMPORT_TABLE_BULK 
/////////////////////////////////////////////////////////////////////////
1:         /**
1: 	 * Test newly added system procedure to import data with header lines.
1: 	 * DERBY-6893. 
1: 	 */
1:      public void testDerby6893SkipHeaderLines() throws SQLException {
1:         Statement s = createStatement();
1:        switch (getPhase()) {
1: 		case PH_CREATE:
1: 			//table to export
1: 		        s.execute("create table exp_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1: 
1: 			//table to import
1: 			s.execute("create table im_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1: 			s.execute("insert into exp_pet values('Rover', 'Dog' , 4)");
1: 
1: 			s.execute("insert into exp_pet values('Spot', 'Cat' , 2)");
1: 	
1: 			s.execute("insert into exp_pet values('Squawky','Parrot',37)");
1: 		
1: 
1: 			SupportFilesSetup.deleteFile("pet.dat");
1: 			s.execute("call SYSCS_UTIL.SYSCS_EXPORT_TABLE(null, 'EXP_PET', 'pet.dat' , null, null, null) ");
1: 			
1: 		
1: 			
1: 			//Show that SYSCS_IMPORT_DATA_BULK 
1: 			//does not exist
1: 			assertCompileError
1:                   	(
1:                  	NO_SUCH_METHOD_ALIAS,
1:                    	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) ");
1: 			break;
1:            
1: 
1: 		case PH_SOFT_UPGRADE:		
1:            		//Show that SYSCS_IMPORT_DATA_BULK
1: 			//does not support with soft upgrade
1: 			assertCompileError
1:                   	(
1:                   	NO_SUCH_METHOD_ALIAS,
1:                   	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) "
1:                    	);
1:               		break;
1:                 
1:                 case PH_POST_SOFT_UPGRADE:
1: 	               	//Show that SYSCS_IMPORT_DATA_BULK
1: 			//does not exist
1: 			assertCompileError
1:                  	(
1:                    	NO_SUCH_METHOD_ALIAS,
1:                   	"call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3',  'pet.dat' , null, null, null, 0 , 1) "
1:                    	);
1:                 	break;
1: 
1: 	       case PH_HARD_UPGRADE:
1: 			s.execute("delete from im_pet");
1: 			//Show that SYSCS_IMPORT_DATA_BULK 
1: 			//accept CSV file with header lines
1: 			s.execute("call SYSCS_UTIL.SYSCS_IMPORT_DATA_BULK(null, 'IM_PET', null, '1,2,3', "
1:   			+" 'pet.dat' , null, null, null, 0 , 1) ");
1: 
1: 			JDBC.assertFullResultSet(
1:                 	s.executeQuery("select * from IM_PET"),
1:                         new String[][]
1:                         {
1:                               { "Spot", "Cat", "2"},
1:                               { "Squawky", "Parrot", "37"},
1:                         });
1: 
1: 			break;
1:         };
1:     }
1: 
1:  
1: 
commit:ea2e939
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
/////////////////////////////////////////////////////////////////////////
1:     private static final String NO_SUCH_METHOD_ALIAS="42Y03";
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Test newly added system procedure to import table with header lines.
1: 	 * DERBY-6892. 
1: 	 */
1:      public void testDerby6892SkipHeaderLines() throws SQLException {
1:         Statement s = createStatement();
1: 
1:         switch (getPhase()) {
1: 		case PH_CREATE:
1: 			//table to export
1: 			s.execute("create table ex_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1: 
1: 			//table to import
1: 			s.execute("create table imp_pet(petName varchar(50), kindOfAnimal varchar(50) , age int)");
1: 		
1: 			s.execute("insert into ex_pet values('Rover', 'Dog' , 4)");
1: 
1: 			s.execute("insert into ex_pet values('Spot', 'Cat' , 2)");
1: 	
1: 			s.execute("insert into ex_pet values('Squawky','Parrot',37)");
1: 			
1: 
1: 			SupportFilesSetup.deleteFile("pet.dat");
1: 			s.execute("call SYSCS_UTIL.SYSCS_EXPORT_TABLE (null, 'EX_PET', 'pet.dat' , null, null, null) ");
1: 			
1: 				
1: 			
1: 			//Show that SYSCS_IMPORT_TABLE_BULK 
1: 			//does not exist
1: 			assertCompileError
1:                   	(
1:                    	NO_SUCH_METHOD_ALIAS,
1:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET' , 'pet.dat' , null, null, null, 0 , 1) ");
1: 			break;
1:             
1: 
1: 		case PH_SOFT_UPGRADE:		
1:            		//Show that SYSCS_IMPORT_TABLE_BULK
1: 			//does not support with soft upgrade
1: 			assertCompileError
1:                   	(
1:                    	NO_SUCH_METHOD_ALIAS,
1:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat' , null, null, null, 0 , 1) "
1:                    	);
1:                 	break;
1:                 
1:                 case PH_POST_SOFT_UPGRADE:
1:                 	//Show that SYSCS_IMPORT_TABLE_BULK
1: 			//does not exist
1: 			assertCompileError
1:                   	(
1:                    	NO_SUCH_METHOD_ALIAS,
1:                    	"call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat' , null, null, null, 0 , 1) "
1:                    	);
1:                 	break;
1: 
1: 
1: 	       case PH_HARD_UPGRADE:
1: 
1: 			s.execute("delete from imp_pet");
0: 			//Show that SYSCS_IMPORT_TABLE 
1: 			//accept CSV file with header lines
1: 			s.execute("call SYSCS_UTIL.SYSCS_IMPORT_TABLE_BULK(null, 'IMP_PET', 'pet.dat', null, null, null, 0, 1)");
1: 
1: 		
1: 			JDBC.assertFullResultSet(
1:                 	s.executeQuery("select * from IMP_PET"),
1:                         new String[][]
1:                         {
1:                               { "Spot", "Cat", "2"},
1:                               { "Squawky", "Parrot", "37"},
1:                         });
1: 
1: 			break;
1:         };
1:     }
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5b838fd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_13
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: 
1: /**
1:  * Upgrade test cases for 10.13.
1:  */
1: public class Changes10_13 extends UpgradeChange
1: {
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     private static final String SYNTAX_ERROR = "42X01";
1:     private static final String UPGRADE_REQUIRED = "XCL47";
1:     private static final String CANNOT_ALTER_NON_IDENTITY_COLUMN = "42Z29";
1:     private static final String CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN = "42Z23";
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     public Changes10_13(String name) {
1:         super(name);
1:     }
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return the suite of tests to test the changes made in 10.13.
1:      *
1:      * @param phase an integer that indicates the current phase in
1:      *              the upgrade test.
1:      * @return the test suite created.
1:      */
1:     public static Test suite(int phase) {
1:         return new BaseTestSuite(Changes10_13.class, "Upgrade test for 10.13");
1:     }
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test the addition of support for changing identity columns
1:      * from ALWAYS to BY DEFAULT and vice versa via
1:      * an ALTER TABLE statement. DERBY-6882.
1:      */
1:     public void testAlterTableSetGenerated() throws SQLException {
1:         Statement s = createStatement();
1: 
1:         // GENERATED BY DEFAULT not supported prior to 10.1
1:         if (!oldAtLeast(10, 1)) { return; }
1: 
1:         // 10.11 upgraded all identity columns to be backed by sequences
1:         boolean atLeast10_11 = oldAtLeast(10,11);
1:         
1:         switch (getPhase()) {
1:             case PH_CREATE:
1:                 s.execute("create table t_always_6882(a int generated always as identity, b int)");
1:                 s.execute("create table t_default_6882(a int generated by default as identity, b int)");
1:                 s.execute("create table t_none_6882(a int, b int)");
1:                 s.execute("insert into t_always_6882(b) values (100)");
1:                 s.execute("insert into t_default_6882(b) values (100)");
1:                 assertCompileError
1:                   (
1:                    CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:                    "insert into t_always_6882(a, b) values (-1, -100)"
1:                    );
1:                 s.execute("insert into t_default_6882(a, b) values (-1, -100)");
1:                 break;
1: 
1:             case PH_SOFT_UPGRADE:
1:                 // We only support the SET GENERATED clause if the database
1:                 // is at level 10.11 or higher.
1:                 if (atLeast10_11)
1:                 {
1:                     assertCompileError
1:                       (
1:                        CANNOT_ALTER_NON_IDENTITY_COLUMN,
1:                        "alter table t_none_6882 alter column a set generated by default"
1:                        );
1:                     s.execute("alter table t_always_6882 alter column a set generated by default");
1:                     s.execute("alter table t_default_6882 alter column a set generated always");
1:                     s.execute("insert into t_always_6882(a, b) values (-2, -200)");
1:                     assertCompileError
1:                       (
1:                        CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:                        "insert into t_default_6882(a, b) values (-2, -200)"
1:                        );
1:                     s.execute("insert into t_always_6882(b) values (200)");
1:                     s.execute("insert into t_default_6882(b) values (200)");
1:                     JDBC.assertFullResultSet(
1:                         s.executeQuery("select * from t_always_6882 order by a"),
1:                         new String[][]
1:                         {
1:                           { "-2", "-200" },
1:                           { "1", "100" },
1:                           { "2", "200" },
1:                         });
1:                     JDBC.assertFullResultSet(
1:                         s.executeQuery("select * from t_default_6882 order by a"),
1:                         new String[][]
1:                         {
1:                           { "-1", "-100" },
1:                           { "1", "100" },
1:                           { "2", "200" },
1:                         });
1:                 } else {
1:                     assertCompileError
1:                       (
1:                        UPGRADE_REQUIRED,
1:                        "alter table t_none_6882 alter column a set generated by default"
1:                        );
1:                     assertCompileError
1:                       (
1:                        UPGRADE_REQUIRED,
1:                        "alter table t_always_6882 alter column a set generated by default"
1:                        );
1:                     assertCompileError
1:                       (
1:                        UPGRADE_REQUIRED,
1:                        "alter table t_default_6882 alter column a set generated always"
1:                        );
1:                 }
1:                 break;
1:                 
1:             case PH_HARD_UPGRADE:
1:                 assertCompileError
1:                   (
1:                    CANNOT_ALTER_NON_IDENTITY_COLUMN,
1:                    "alter table t_none_6882 alter column a set generated by default"
1:                    );
1:                 s.execute("alter table t_always_6882 alter column a set generated always");
1:                 s.execute("alter table t_default_6882 alter column a set generated by default");
1:                 assertCompileError
1:                   (
1:                    CANNOT_MODIFY_ALWAYS_IDENTITY_COLUMN,
1:                    "insert into t_always_6882(a, b) values (-3, -300)"
1:                    );
1:                 s.execute("insert into t_default_6882(a, b) values (-3, -300)");
1:                 s.execute("insert into t_always_6882(b) values (300)");
1:                 s.execute("insert into t_default_6882(b) values (300)");
1: 
1:                 String[][] alwaysResults;
1:                 String[][] defaultResults;
1:                 if (atLeast10_11)
1:                 {
1:                     alwaysResults =  new String[][]  
1:                       {
1:                         { "-2", "-200" },
1:                         { "1", "100" },
1:                         { "2", "200" },
1:                         { "3", "300" },
1:                       };
1:                     defaultResults = new String[][]
1:                       {
1:                         { "-3", "-300" },
1:                         { "-1", "-100" },
1:                         { "1", "100" },
1:                         { "2", "200" },
1:                         { "3", "300" },
1:                       };
1:                 }
1:                 else
1:                 {
1:                     alwaysResults = new String[][]  
1:                       {
1:                         { "1", "100" },
1:                         { "2", "300" },
1:                       };
1:                     defaultResults = new String[][]
1:                       {
1:                         { "-3", "-300" },
1:                         { "-1", "-100" },
1:                         { "1", "100" },
1:                         { "2", "300" },
1:                       };
1:                 }
1: 
1:                 JDBC.assertFullResultSet
1:                   (
1:                    s.executeQuery("select * from t_always_6882 order by a"),
1:                    alwaysResults
1:                    );
1:                 JDBC.assertFullResultSet
1:                   (
1:                    s.executeQuery("select * from t_default_6882 order by a"),
1:                    defaultResults);
1:                 break;
1:         };
1:     }
1: }
============================================================================