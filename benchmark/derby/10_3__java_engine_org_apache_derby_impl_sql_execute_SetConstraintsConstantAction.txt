16:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.SetConstraintsConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
57:eac0369: 
20:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:af1c18c: import java.util.ArrayList;
1:09bee7d: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:09bee7d: import org.apache.derby.iapi.reference.SQLState;
1:1e2aae0: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:af1c18c: import org.apache.derby.iapi.util.IdUtil;
1:09bee7d: import org.apache.derby.impl.sql.compile.TableName;
1:eac0369: 
5:eac0369: /**
1:eac0369:  * This class describes actions that are performed for a
1:0c5bc3a:  * set constraint at execution time.
2:eac0369:  * <p>
1:eac0369:  * Note that the dependency action we send is SET_CONSTRAINTS
1:eac0369:  * rather than ALTER_TABLE.  We do this because we want
1:eac0369:  * to distinguish SET_CONSTRAINTS from ALTER_TABLE for
1:eac0369:  * error messages.
6:eac0369:  *
1:eac0369:  */
1:eac0369: class SetConstraintsConstantAction extends DDLConstantAction
41:eac0369: {
1:eac0369: 
1:0c5bc3a:     final private boolean   deferred;
1:0c5bc3a:     final private List<TableName> constraints;
1:eac0369: 
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:09bee7d:     /**
1:0c5bc3a:      * @param constraints      List of constraints to set; null if all.
1:0c5bc3a:      * @param deferred         Encodes IMMEDIATE (false), DEFERRED (true)
1:09bee7d:      */
1:09bee7d:     SetConstraintsConstantAction(
1:09bee7d:             List<TableName>             constraints,
1:0c5bc3a:             boolean                     deferred) {
1:09bee7d:         this.constraints = constraints;
1:0c5bc3a:         this.deferred = deferred;
1:09bee7d: 	}
1:4cc0287: 
1:09bee7d:     @Override
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "SET CONSTRAINTS";
1:09bee7d: 	}
1:0c5bc3a: 
1:eac0369: 	/**
1:af1c18c:      * This is the guts of the execution time logic for SET CONSTRAINT.
1:eac0369: 	 *
1:af1c18c:      * @param activation
1:af1c18c:      *
1:af1c18c:      * @see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:09bee7d:     public void executeConstantAction(
1:09bee7d:             Activation activation) throws StandardException {
1:0c5bc3a: 
1:09bee7d:         final LanguageConnectionContext lcc =
1:09bee7d:                 activation.getLanguageConnectionContext();
1:eac0369: 
1:09bee7d:         final DataDictionary dd = lcc.getDataDictionary();
1:af1c18c:         final List<String> boundConstraints = new ArrayList<String>();
1:eac0369: 
1:09bee7d:         if (constraints != null) {
1:09bee7d:             for (TableName c : constraints) {
1:af1c18c: 
1:af1c18c:                 final SchemaDescriptor sd = dd.getSchemaDescriptor(
1:09bee7d:                     c.getSchemaName(),
1:09bee7d:                     lcc.getTransactionExecute(),
1:09bee7d:                     true);
1:eac0369: 
1:af1c18c:                 final ConstraintDescriptor cd =
1:09bee7d:                     dd.getConstraintDescriptor(c.getTableName(), sd.getUUID());
1:eac0369: 
1:09bee7d:                 if (cd == null) {
2:0c5bc3a:                     throw StandardException.newException(
1:09bee7d:                             SQLState.LANG_OBJECT_NOT_FOUND,
1:09bee7d:                             "CONSTRAINT",
1:09bee7d:                             c.getFullSQLName());
1:0c5bc3a:                 }
1:0c5bc3a: 
1:af1c18c:                 final String bound =
1:af1c18c:                         IdUtil.normalToDelimited(sd.getSchemaName()) + "." +
1:af1c18c:                         IdUtil.normalToDelimited(cd.getConstraintName());
1:af1c18c: 
1:af1c18c:                 if (boundConstraints.contains(bound)) {
1:af1c18c:                     throw StandardException.newException(
1:af1c18c:                             SQLState.LANG_DB2_DUPLICATE_NAMES,
1:af1c18c:                             cd.getConstraintName(),
1:af1c18c:                             bound);
1:af1c18c:                 } else {
1:af1c18c:                     boundConstraints.add(bound);
1:af1c18c:                 }
1:af1c18c: 
1:0c5bc3a:                 if (deferred && !cd.deferrable()) {
1:0c5bc3a:                     throw StandardException.newException(
1:0c5bc3a:                             SQLState.LANG_SET_CONSTRAINT_NOT_DEFERRABLE,
1:0c5bc3a:                             cd.getConstraintName());
1:0c5bc3a:                 }
1:4cc0287: 
1:f6d02c9:                 lcc.setConstraintDeferred(
1:f6d02c9:                     activation,
1:f6d02c9:                     cd,
1:f6d02c9:                     deferred);
1:0c5bc3a:             }
1:0c5bc3a:         } else {
1:0c5bc3a:             lcc.setDeferredAll(activation, deferred);
1:0c5bc3a:         }
1:0c5bc3a: 
1:0c5bc3a: 
1:09bee7d:     }
1:09bee7d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 lcc.setConstraintDeferred(
1:                     activation,
1:                     cd,
1:                     deferred);
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
/////////////////////////////////////////////////////////////////////////
0:                 if (cd instanceof ForeignKeyConstraintDescriptor ||
0:                     cd instanceof CheckConstraintDescriptor) {
0:                     // Set check constraints and FKs
0:                     lcc.setConstraintDeferred(
0:                         activation,
0:                         ( cd instanceof CheckConstraintDescriptor ?
0:                           cd.getTableDescriptor().getHeapConglomerateId() :
0:                           ((KeyConstraintDescriptor)cd).
0:                           getIndexConglomerateDescriptor(dd).
0:                           getConglomerateNumber() ),
0:                         cd.getUUID(),
0:                         deferred);
1: 
0:                     // Set unique, primary key
1: 
0:                             ((KeyConstraintDescriptor)cd).
0:                                     getIndexConglomerateDescriptor(dd).
0:                                     getConglomerateNumber(),
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1:      * This is the guts of the execution time logic for SET CONSTRAINT.
1:      * @param activation
1:      *
1:      * @see ConstantAction#executeConstantAction
/////////////////////////////////////////////////////////////////////////
1:         final List<String> boundConstraints = new ArrayList<String>();
1: 
1:                 final SchemaDescriptor sd = dd.getSchemaDescriptor(
1:                 final ConstraintDescriptor cd =
/////////////////////////////////////////////////////////////////////////
1:                 final String bound =
1:                         IdUtil.normalToDelimited(sd.getSchemaName()) + "." +
1:                         IdUtil.normalToDelimited(cd.getConstraintName());
1: 
1:                 if (boundConstraints.contains(bound)) {
1:                     throw StandardException.newException(
1:                             SQLState.LANG_DB2_DUPLICATE_NAMES,
1:                             cd.getConstraintName(),
1:                             bound);
1:                 } else {
1:                     boundConstraints.add(bound);
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
0:                     // Set unique, primary key and foreign key constraints
0:                     lcc.setConstraintDeferred(activation,
0:                     // Set check constraints
0:                     lcc.setConstraintDeferred(
0:                             activation,
0:                             cd.getTableDescriptor().getHeapConglomerateId(),
0:                             cd.getUUID(),
0:                             deferred);
commit:831e54e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;
1:  * set constraint at execution time.
/////////////////////////////////////////////////////////////////////////
1:     final private boolean   deferred;
1:     final private List<TableName> constraints;
1:      * @param constraints      List of constraints to set; null if all.
1:      * @param deferred         Encodes IMMEDIATE (false), DEFERRED (true)
1:             boolean                     deferred) {
1:         this.deferred = deferred;
/////////////////////////////////////////////////////////////////////////
0:      *  This is the guts of the Execution-time logic for SET CONSTRAINT.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 // Remove when feature DERBY-532 is completed
0:                 if (!PropertyUtil.getSystemProperty(
0:                         "derby.constraintsTesting", "false").equals("true")) {
1:                     throw StandardException.newException(
0:                         SQLState.NOT_IMPLEMENTED, "SET CONSTRAINT");
1:                 }
1: 
1:                 if (deferred && !cd.deferrable()) {
1:                     throw StandardException.newException(
1:                             SQLState.LANG_SET_CONSTRAINT_NOT_DEFERRABLE,
1:                             cd.getConstraintName());
1:                 }
1: 
0:                 if (cd instanceof KeyConstraintDescriptor) {
0:                     // Unique, primary key and foreign key
1: 
0:                     lcc.setDeferred(activation,
0:                                     ((KeyConstraintDescriptor)cd).
0:                                         getIndexConglomerateDescriptor(dd).
0:                                         getConglomerateNumber(),
0:                                     deferred);
1:                 } else {
0:                     // Check constraints
1:                     throw StandardException.newException(
0:                             SQLState.NOT_IMPLEMENTED, "SET CONSTRAINT");
1:                 }
0:             // Remove when feature DERBY-532 is completed
0:             if (!PropertyUtil.getSystemProperty(
0:                     "derby.constraintsTesting", "false").equals("true")) {
0:                 throw StandardException.newException(SQLState.NOT_IMPLEMENTED,
0:                         "SET CONSTRAINT");
1:             }
1: 
1:             lcc.setDeferredAll(activation, deferred);
1: 
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.sql.compile.TableName;
/////////////////////////////////////////////////////////////////////////
0:     final private boolean   initiallyDeferred;
0:     private List<TableName> constraints;
1:     /**
0:      * @param constraints               List of constraints to set; null if all.
0:      * @param initiallyDeferred         Encodes IMMEDIATE (false), DEFERRED (true)
1:      */
1:     SetConstraintsConstantAction(
1:             List<TableName>             constraints,
0:             boolean                     initiallyDeferred) {
1:         this.constraints = constraints;
0:         this.initiallyDeferred = initiallyDeferred;
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void executeConstantAction(
1:             Activation activation) throws StandardException {
1:         final LanguageConnectionContext lcc =
1:                 activation.getLanguageConnectionContext();
1:         final DataDictionary dd = lcc.getDataDictionary();
0:         ConstraintDescriptorList cl = new ConstraintDescriptorList();
1:         if (constraints != null) {
1:             for (TableName c : constraints) {
0:                 SchemaDescriptor sd = dd.getSchemaDescriptor(
1:                     c.getSchemaName(),
1:                     lcc.getTransactionExecute(),
1:                     true);
0:                 ConstraintDescriptor cd =
1:                     dd.getConstraintDescriptor(c.getTableName(), sd.getUUID());
1:                 if (cd == null) {
0:                     throw StandardException.newException(
1:                             SQLState.LANG_OBJECT_NOT_FOUND,
1:                             "CONSTRAINT",
1:                             c.getFullSQLName());
1:                 }
0:                 cl.add(cd);
1:             }
0:         } else {
0:             cl = dd.getConstraintDescriptors(null); // all
1:         }
0:         throw StandardException.newException(SQLState.NOT_IMPLEMENTED,
0:                        "SET CONSTRAINT");
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0: 		Hashtable<UUID,ConstraintDescriptorList> checkConstraintTables = null;
/////////////////////////////////////////////////////////////////////////
0: 						checkConstraintTables = new Hashtable<UUID,ConstraintDescriptorList>(10);
0: 					ConstraintDescriptorList tabCdl =
/////////////////////////////////////////////////////////////////////////
0: 	private void validateAllCheckConstraints(LanguageConnectionContext lcc, Hashtable<UUID,ConstraintDescriptorList> ht)
/////////////////////////////////////////////////////////////////////////
0: 		for (Enumeration<ConstraintDescriptorList> e = ht.elements(); e.hasMoreElements(); )
0: 			cdl = e.nextElement();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7af858d
/////////////////////////////////////////////////////////////////////////
0: 				cd = (ConstraintDescriptor) cdl.elementAt(index);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e5bbea4
/////////////////////////////////////////////////////////////////////////
0: 		ExecRow baseRow = td.getEmptyExecRow();
commit:1e2aae0
/////////////////////////////////////////////////////////////////////////
0: import java.util.Enumeration;
0: import java.util.Hashtable;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.types.RowLocation;
commit:9cd47dc
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.SetConstraintsConstantAction
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.sql.StatementType;
1: 
0: import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import java.util.Hashtable;
0: import java.util.Enumeration;
1: 
1: /**
1:  * This class describes actions that are performed for a
0:  * set constraint at Execution time.  
1:  * <p>
1:  * Note that the dependency action we send is SET_CONSTRAINTS
1:  * rather than ALTER_TABLE.  We do this because we want
1:  * to distinguish SET_CONSTRAINTS from ALTER_TABLE for
1:  * error messages.
1:  *
0:  *	@author jamie
1:  */
1: class SetConstraintsConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
0: 	private boolean 					enable;
0: 	private	boolean						unconditionallyEnforce;
1: 
1: 	/*
0: 	** For the following fields, never access directly, always
0: 	** get the constraint descript list via the private
0: 	** method getConstraintDescriptorList() defined herein.
1: 	*/
0: 	private ConstraintDescriptorList	cdl;
0: 	private UUID[]						cuuids;
0: 	private UUID[]						tuuids;
1: 
1: 	// CONSTRUCTORS
1: 	/**
0: 	 *Boilerplate
1: 	 *
0: 	 * @param cdl						ConstraintDescriptorList
0: 	 * @param enable					true == turn them on, false == turn them off
0: 	 * @param unconditionallyEnforce	Replication sets this to true at
0: 	 *									the end of REFRESH. This forces us
0: 	 *									to run the included foreign key constraints even
0: 	 *									if they're already marked ENABLED.
1: 	 */
0: 	SetConstraintsConstantAction
0: 	(
0: 		ConstraintDescriptorList	cdl,
0: 		boolean						enable,
0: 		boolean						unconditionallyEnforce
0: 	)
1: 	{
0: 		this.cdl = cdl;
0: 		this.enable = enable;
0: 		this.unconditionallyEnforce = unconditionallyEnforce;
0: 	}
1: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// OBJECT SHADOWS
0: 	//
0: 	//////////////////////////////////////////////////////////////
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "SET CONSTRAINTS";
0: 	}
1: 
0: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP CONSTRAINT.
1: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
1: 	{
0: 		ConstraintDescriptor		cd;
0: 		TableDescriptor				td;
0: 		ConstraintDescriptorList	tmpCdl;
0: 		boolean						enforceThisConstraint;
1: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
1: 
0: 		tmpCdl = getConstraintDescriptorList(dd);
1: 
0: 		int[] enabledCol = new int[1];
0: 		enabledCol[0] = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
1: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
1: 		*/
0: 		dd.startWriting(lcc);
1: 
1: 		/*
0: 		** Callback to rep subclass
1: 		*/
0: 		publishToTargets(activation);
1: 
0: 		boolean skipFKs = false;
1: 
1: 		/*
0: 		** If the constraint list is empty, then we are getting
0: 		** all constraints.  In this case, don't bother going
0: 		** after referencing keys (foreign keys) when we are 
0: 		** disabling a referenced key (pk or unique key) since
0: 		** we know we'll hit it eventually.	
1: 		*/
0: 		if (tmpCdl == null)
1: 		{
0: 			skipFKs = true;
0: 			tmpCdl = dd.getConstraintDescriptors((TableDescriptor)null);
0: 		}
1: 	
0: 		Hashtable checkConstraintTables = null;
0: 		int cdlSize = tmpCdl.size();
0: 		for (int index = 0; index < cdlSize; index++)
1: 		{
0: 			cd = tmpCdl.elementAt(index);
1: 
1: 			/*	
0: 			** We are careful to enable this constraint before trying
0: 			** to enable constraints that reference it.  Similarly,
0: 			** we disabled constraints that reference us before we
0: 			** disable ourselves, to make sure everything works ok.
1: 			*/
0: 			if (unconditionallyEnforce) 
1: 			{ 
0: 				enforceThisConstraint = true; 
0: 			}
0: 			else 
1: 			{ 
0: 				enforceThisConstraint = (enable && !cd.isEnabled()); 
0: 			}
1: 
0: 			if (enforceThisConstraint)
1: 			{
0: 				if (cd instanceof ForeignKeyConstraintDescriptor)
1: 				{
0: 					validateFKConstraint((ForeignKeyConstraintDescriptor)cd, dd, tc, lcc.getContextManager());
0: 				}
1: 				/*
0: 				** For check constraints, we build up a list of check constriants
0: 				** by table descriptor.  Once we have collected them all, we
0: 				** execute them in a single query per table descriptor.
1: 				*/
0: 				else if (cd instanceof CheckConstraintDescriptor)
1: 				{
0: 					td = cd.getTableDescriptor();
1: 
0: 					if (checkConstraintTables == null)
1: 					{
0: 						checkConstraintTables = new Hashtable(10);
0: 					}
1: 
0: 					ConstraintDescriptorList tabCdl = (ConstraintDescriptorList)
0: 												checkConstraintTables.get(td.getUUID());
0: 					if (tabCdl == null)
1: 					{
0: 						tabCdl = new ConstraintDescriptorList();
0: 						checkConstraintTables.put(td.getUUID(), tabCdl);
0: 					}
0: 					tabCdl.add(cd);
0: 				}
1: 				/*
0: 				** If we are enabling a constraint, we need to issue
0: 				** the invalidation on the underlying table rather than
0: 				** the constraint we are enabling.  This is because
0: 				** stmts that were compiled against a disabled constraint
0: 				** have no depedency on that disabled constriant.
1: 				*/
0: 				dm.invalidateFor(cd.getTableDescriptor(), 
0: 									DependencyManager.SET_CONSTRAINTS_ENABLE, lcc);
0: 				cd.setEnabled();
0: 				dd.updateConstraintDescriptor(cd, 
0: 											cd.getUUID(), 
0: 											enabledCol, 
0: 											tc);
0: 			}
1: 	
1: 			/*
0: 			** If we are dealing with a referenced constraint, then
0: 			** we find all of the constraints that reference this constraint.
0: 			** Turn them on/off based on what we are doing to this
0: 			** constraint.
1: 			*/
0: 			if (!skipFKs &&
0: 				(cd instanceof ReferencedKeyConstraintDescriptor))
1: 			{
0: 				ForeignKeyConstraintDescriptor fkcd;
0: 				ReferencedKeyConstraintDescriptor refcd;
0: 				ConstraintDescriptorList fkcdl;
1: 	
0: 				refcd = (ReferencedKeyConstraintDescriptor)cd;
0: 				fkcdl = refcd.getForeignKeyConstraints(ReferencedKeyConstraintDescriptor.ALL);
1: 
0: 				int fkcdlSize = fkcdl.size();
0: 				for (int inner = 0; inner < fkcdlSize; inner++)
1: 				{
0: 					fkcd = (ForeignKeyConstraintDescriptor) fkcdl.elementAt(inner);	
0: 					if (enable && !fkcd.isEnabled())
1: 					{
0: 						dm.invalidateFor(fkcd.getTableDescriptor(), 
0: 									DependencyManager.SET_CONSTRAINTS_ENABLE, lcc);
0: 						validateFKConstraint(fkcd, dd, tc, lcc.getContextManager());
0: 						fkcd.setEnabled();
0: 						dd.updateConstraintDescriptor(fkcd, 
0: 								fkcd.getUUID(), 
0: 								enabledCol, 
0: 								tc);
0: 					}
0: 					else if (!enable && fkcd.isEnabled())
1: 					{
0: 						dm.invalidateFor(fkcd, DependencyManager.SET_CONSTRAINTS_DISABLE,
0: 										 lcc);
0: 						fkcd.setDisabled();
0: 						dd.updateConstraintDescriptor(fkcd, 
0: 								fkcd.getUUID(), 
0: 								enabledCol, 
0: 								tc);
0: 					}
0: 				}
0: 			}
1: 	
0: 			if (!enable && cd.isEnabled())
1: 			{
0: 				dm.invalidateFor(cd, DependencyManager.SET_CONSTRAINTS_DISABLE,
0: 								 lcc);
0: 				cd.setDisabled();
0: 				dd.updateConstraintDescriptor(cd, 
0: 												cd.getUUID(), 
0: 												enabledCol, 
0: 												tc);
0: 			}
0: 		}
1: 
0: 		validateAllCheckConstraints(lcc, checkConstraintTables);
0: 	}
1: 
0: 	private void validateAllCheckConstraints(LanguageConnectionContext lcc, Hashtable ht)
0: 		throws StandardException
1: 	{
0: 		ConstraintDescriptorList	cdl;
0: 		ConstraintDescriptor		cd = null;
0: 		TableDescriptor				td;
0: 		StringBuffer				text;
0: 		StringBuffer				constraintNames;
1: 
0: 		if (ht == null)
1: 		{
0: 			return;
0: 		}
1: 
0: 		for (Enumeration e = ht.elements(); e.hasMoreElements(); )
1: 		{
1: 		
0: 			cdl = (ConstraintDescriptorList) e.nextElement();
0: 			text = null;
0: 			constraintNames = null;
1: 
1: 			/*
0: 			** Build up the text of all the constraints into one big
0: 			** predicate.  Also, we unfortunately have to build up a big
0: 			** comma separated list of constraint names in case
0: 			** there is an error (we are favoring speed over a very
0: 			** explicit check constraint xxxx failed error message).
1: 			*/
0: 			int cdlSize = cdl.size();
0: 			for (int index = 0; index < cdlSize; index++)
1: 			{
0: 				cd = (CheckConstraintDescriptor) cdl.elementAt(index);
0: 				if (text == null)
1: 				{
0: 					text = new StringBuffer("(").append(cd.getConstraintText()).append(") ");
0: 					constraintNames = new StringBuffer(cd.getConstraintName());
0: 				}
0: 				else
1: 				{
0: 					text.append(" AND (").append(cd.getConstraintText()).append(") ");
0: 					constraintNames.append(", ").append(cd.getConstraintName());
0: 				}
0: 			}
1: 
0: 			if (SanityManager.DEBUG)
1: 			{
0: 				SanityManager.ASSERT(text != null, "internal error, badly built hastable");
0: 			}
1: 
0: 			ConstraintConstantAction.validateConstraint(
0: 												constraintNames.toString(),
0: 												text.toString(),
0: 												cd.getTableDescriptor(),
0: 												lcc, true);
0: 		}
0: 	}
1: 
1: 	/*
0: 	**
1: 	*/
0: 	private void validateFKConstraint
0: 	(
0: 		ForeignKeyConstraintDescriptor	fk,
0: 		DataDictionary					dd,
0: 		TransactionController			tc,
0: 		ContextManager					cm
0: 	)
0: 		throws StandardException
1: 	{
1: 		/*
0: 		** Construct a template row 
1: 		*/
0: 		IndexRowGenerator irg = fk.getIndexConglomerateDescriptor(dd).getIndexDescriptor();	
0: 		ExecIndexRow indexTemplateRow = irg.getIndexRowTemplate();
0: 		TableDescriptor td = fk.getTableDescriptor();
0: 		ExecRow baseRow = td.getEmptyExecRow(cm);
0: 		irg.getIndexRow(baseRow, getRowLocation(dd, td, tc), 
0: 								indexTemplateRow, (FormatableBitSet)null);
1: 
1: 		/*
0: 		** The moment of truth
1: 		*/
0: 		ConstraintConstantAction.validateFKConstraint(tc, dd, fk, 
0: 							fk.getReferencedConstraint(), indexTemplateRow);
0: 	}
1: 			
1: 	/*
0: 	** Get a row location template.  Note that we are assuming that
0: 	** the same row location can be used for all tables participating
0: 	** in the fk.  For example, if there are multiple foreign keys,
0: 	** we are using the row location of one of the tables and assuming
0: 	** that it is the right shape for all tables.  Currently, this
0: 	** is a legitimate assumption.
1: 	*/
0: 	private RowLocation getRowLocation
0: 	(
0: 		DataDictionary			dd, 
0: 		TableDescriptor			td,
0: 		TransactionController	tc
0: 	) 
0: 		throws StandardException
1: 	{
0: 		RowLocation 			rl; 
0: 		ConglomerateController 	heapCC = null;
1: 
0: 		long tableId = td.getHeapConglomerateId();
0: 		heapCC = 
0:             tc.openConglomerate(
0:                 tableId, false, 0, tc.MODE_RECORD, tc.ISOLATION_READ_COMMITTED);
0: 		try
1: 		{
0: 			rl = heapCC.newRowLocationTemplate();
0: 		}
0: 		finally
1: 		{
0: 			heapCC.close();
0: 		}
1: 
0: 		return rl;
0: 	}
1: 		
1: 	/*
0: 	** Wrapper for constraint descriptor list -- always use
0: 	** this to get the constriant descriptor list.  It is
0: 	** used to hide serialization.
1: 	*/
0: 	private ConstraintDescriptorList getConstraintDescriptorList(DataDictionary dd)
0: 		throws StandardException
1: 	{
0: 		if (cdl != null)
1: 		{
0: 			return cdl;
0: 		}
0: 		if (tuuids == null)
1: 		{
0: 			return null;
0: 		}
1: 
1: 		/*
0: 		** Reconstitute the cdl from the uuids
1: 		*/
0: 		cdl = new ConstraintDescriptorList();
1: 
0: 		for (int i = 0; i < tuuids.length; i++)
1: 		{
0: 			TableDescriptor td = dd.getTableDescriptor(tuuids[i]);
0: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (td == null)
1: 				{
0: 					SanityManager.THROWASSERT("couldn't locate table descriptor "+
0: 						"in SET CONSTRAINTS for uuid "+tuuids[i]);
0: 				}
0: 			}
1: 
0: 			ConstraintDescriptor cd = dd.getConstraintDescriptorById(td, cuuids[i]);
1: 
0: 			if (SanityManager.DEBUG)
1: 			{
0: 				if (cd == null)
1: 				{
0: 					SanityManager.THROWASSERT("couldn't locate constraint descriptor "+
0: 						" in SET CONSTRAINTS for uuid "+cuuids[i]);
0: 				}
0: 			}
1: 
0: 			cdl.add(cd);
0: 		}
0: 		return cdl;
0: 	}
1: 		
1: 	/**
0: 	 * Does this constant action modify the passed in table
0: 	 * uuid?  By modify we mean add or drop things tied to
0: 	 * this table (e.g. index, trigger, constraint).  Things
0: 	 * like views or spses that reference this table don't
0: 	 * count.
1: 	 * <p>
0: 	 * For SET CONSTRAINTS return true if it is SET CONSTRAINTS
0: 	 * ALL otherwise, compare the table ids.
1: 	 *
0: 	 * @param tableId the table id
1: 	 *
0: 	 * @exception StandardException on error
1: 	 */
0: 	public boolean modifiesTableId(UUID tableId) throws StandardException
1: 	{
0: 		if (tuuids != null) {
0: 			for (int i = 0; i < tuuids.length; i++) {
0: 				if (tableId.equals(tuuids[i]))
0: 					return true;
0: 			}
0: 			return false;
0: 		}
1: 
0: 		// assume SET CONSTRAINTS ALL touches this table
0: 		if ((cdl == null) || (cdl.size() == 0))
1: 		{
0: 			return true;
0: 		}
1: 
0: 		int cdlSize = cdl.size();
0: 		for (int index = 0; index < cdlSize; index++)
1: 		{
0: 			ConstraintDescriptor cd = cdl.elementAt(index);
0: 			if (cd.getTableId().equals(tableId))
1: 			{
0: 				return true;
0: 			}
0: 		}
1: 		
0: 		return false;
0: 	}
1: 
0: 	///////////////////////////////////////////////
0: 	//
0: 	// MISC
0: 	//
0: 	///////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Do the work of publishing any this action to any
0: 	 * replication targets.  On a non-replicated source,
0: 	 * this is a no-op.
1: 	 *
0: 	 * @param activation the activation
1: 	 *
0: 	 * @exception StandardException on error
1: 	 */
0: 	protected void publishToTargets(Activation activation)
0: 		throws StandardException
1: 	{
0: 	}
0: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Hashtable;
0: import java.util.Enumeration;
0: 
0: /**
0:  * This class describes actions that are performed for a
0:  * set constraint at Execution time.  
0:  * <p>
0:  * Note that the dependency action we send is SET_CONSTRAINTS
0:  * rather than ALTER_TABLE.  We do this because we want
0:  * to distinguish SET_CONSTRAINTS from ALTER_TABLE for
0:  * error messages.
0:  *
0:  *	@author jamie
0:  */
0: class SetConstraintsConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private boolean 					enable;
0: 	private	boolean						unconditionallyEnforce;
0: 
0: 	/*
0: 	** For the following fields, never access directly, always
0: 	** get the constraint descript list via the private
0: 	** method getConstraintDescriptorList() defined herein.
0: 	*/
0: 	private ConstraintDescriptorList	cdl;
0: 	private UUID[]						cuuids;
0: 	private UUID[]						tuuids;
0: 
0: 	// CONSTRUCTORS
0: 	/**
0: 	 *Boilerplate
0: 	 *
0: 	 * @param cdl						ConstraintDescriptorList
0: 	 * @param enable					true == turn them on, false == turn them off
0: 	 * @param unconditionallyEnforce	Replication sets this to true at
0: 	 *									the end of REFRESH. This forces us
0: 	 *									to run the included foreign key constraints even
0: 	 *									if they're already marked ENABLED.
0: 	 */
0: 	SetConstraintsConstantAction
0: 	(
0: 		ConstraintDescriptorList	cdl,
0: 		boolean						enable,
0: 		boolean						unconditionallyEnforce
0: 	)
0: 	{
0: 		this.cdl = cdl;
0: 		this.enable = enable;
0: 		this.unconditionallyEnforce = unconditionallyEnforce;
0: 	}
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// OBJECT SHADOWS
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "SET CONSTRAINTS";
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP CONSTRAINT.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		ConstraintDescriptor		cd;
0: 		TableDescriptor				td;
0: 		ConstraintDescriptorList	tmpCdl;
0: 		boolean						enforceThisConstraint;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		tmpCdl = getConstraintDescriptorList(dd);
0: 
0: 		int[] enabledCol = new int[1];
0: 		enabledCol[0] = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		/*
0: 		** Callback to rep subclass
0: 		*/
0: 		publishToTargets(activation);
0: 
0: 		boolean skipFKs = false;
0: 
0: 		/*
0: 		** If the constraint list is empty, then we are getting
0: 		** all constraints.  In this case, don't bother going
0: 		** after referencing keys (foreign keys) when we are 
0: 		** disabling a referenced key (pk or unique key) since
0: 		** we know we'll hit it eventually.	
0: 		*/
0: 		if (tmpCdl == null)
0: 		{
0: 			skipFKs = true;
0: 			tmpCdl = dd.getConstraintDescriptors((TableDescriptor)null);
0: 		}
0: 	
0: 		Hashtable checkConstraintTables = null;
0: 		int cdlSize = tmpCdl.size();
0: 		for (int index = 0; index < cdlSize; index++)
0: 		{
0: 			cd = tmpCdl.elementAt(index);
0: 
0: 			/*	
0: 			** We are careful to enable this constraint before trying
0: 			** to enable constraints that reference it.  Similarly,
0: 			** we disabled constraints that reference us before we
0: 			** disable ourselves, to make sure everything works ok.
0: 			*/
0: 			if (unconditionallyEnforce) 
0: 			{ 
0: 				enforceThisConstraint = true; 
0: 			}
0: 			else 
0: 			{ 
0: 				enforceThisConstraint = (enable && !cd.isEnabled()); 
0: 			}
0: 
0: 			if (enforceThisConstraint)
0: 			{
0: 				if (cd instanceof ForeignKeyConstraintDescriptor)
0: 				{
0: 					validateFKConstraint((ForeignKeyConstraintDescriptor)cd, dd, tc, lcc.getContextManager());
0: 				}
0: 				/*
0: 				** For check constraints, we build up a list of check constriants
0: 				** by table descriptor.  Once we have collected them all, we
0: 				** execute them in a single query per table descriptor.
0: 				*/
0: 				else if (cd instanceof CheckConstraintDescriptor)
0: 				{
0: 					td = cd.getTableDescriptor();
0: 
0: 					if (checkConstraintTables == null)
0: 					{
0: 						checkConstraintTables = new Hashtable(10);
0: 					}
0: 
0: 					ConstraintDescriptorList tabCdl = (ConstraintDescriptorList)
0: 												checkConstraintTables.get(td.getUUID());
0: 					if (tabCdl == null)
0: 					{
0: 						tabCdl = new ConstraintDescriptorList();
0: 						checkConstraintTables.put(td.getUUID(), tabCdl);
0: 					}
0: 					tabCdl.add(cd);
0: 				}
0: 				/*
0: 				** If we are enabling a constraint, we need to issue
0: 				** the invalidation on the underlying table rather than
0: 				** the constraint we are enabling.  This is because
0: 				** stmts that were compiled against a disabled constraint
0: 				** have no depedency on that disabled constriant.
0: 				*/
0: 				dm.invalidateFor(cd.getTableDescriptor(), 
0: 									DependencyManager.SET_CONSTRAINTS_ENABLE, lcc);
0: 				cd.setEnabled();
0: 				dd.updateConstraintDescriptor(cd, 
0: 											cd.getUUID(), 
0: 											enabledCol, 
0: 											tc);
0: 			}
0: 	
0: 			/*
0: 			** If we are dealing with a referenced constraint, then
0: 			** we find all of the constraints that reference this constraint.
0: 			** Turn them on/off based on what we are doing to this
0: 			** constraint.
0: 			*/
0: 			if (!skipFKs &&
0: 				(cd instanceof ReferencedKeyConstraintDescriptor))
0: 			{
0: 				ForeignKeyConstraintDescriptor fkcd;
0: 				ReferencedKeyConstraintDescriptor refcd;
0: 				ConstraintDescriptorList fkcdl;
0: 	
0: 				refcd = (ReferencedKeyConstraintDescriptor)cd;
0: 				fkcdl = refcd.getForeignKeyConstraints(ReferencedKeyConstraintDescriptor.ALL);
0: 
0: 				int fkcdlSize = fkcdl.size();
0: 				for (int inner = 0; inner < fkcdlSize; inner++)
0: 				{
0: 					fkcd = (ForeignKeyConstraintDescriptor) fkcdl.elementAt(inner);	
0: 					if (enable && !fkcd.isEnabled())
0: 					{
0: 						dm.invalidateFor(fkcd.getTableDescriptor(), 
0: 									DependencyManager.SET_CONSTRAINTS_ENABLE, lcc);
0: 						validateFKConstraint(fkcd, dd, tc, lcc.getContextManager());
0: 						fkcd.setEnabled();
0: 						dd.updateConstraintDescriptor(fkcd, 
0: 								fkcd.getUUID(), 
0: 								enabledCol, 
0: 								tc);
0: 					}
0: 					else if (!enable && fkcd.isEnabled())
0: 					{
0: 						dm.invalidateFor(fkcd, DependencyManager.SET_CONSTRAINTS_DISABLE,
0: 										 lcc);
0: 						fkcd.setDisabled();
0: 						dd.updateConstraintDescriptor(fkcd, 
0: 								fkcd.getUUID(), 
0: 								enabledCol, 
0: 								tc);
0: 					}
0: 				}
0: 			}
0: 	
0: 			if (!enable && cd.isEnabled())
0: 			{
0: 				dm.invalidateFor(cd, DependencyManager.SET_CONSTRAINTS_DISABLE,
0: 								 lcc);
0: 				cd.setDisabled();
0: 				dd.updateConstraintDescriptor(cd, 
0: 												cd.getUUID(), 
0: 												enabledCol, 
0: 												tc);
0: 			}
0: 		}
0: 
0: 		validateAllCheckConstraints(lcc, checkConstraintTables);
0: 	}
0: 
0: 	private void validateAllCheckConstraints(LanguageConnectionContext lcc, Hashtable ht)
0: 		throws StandardException
0: 	{
0: 		ConstraintDescriptorList	cdl;
0: 		ConstraintDescriptor		cd = null;
0: 		TableDescriptor				td;
0: 		StringBuffer				text;
0: 		StringBuffer				constraintNames;
0: 
0: 		if (ht == null)
0: 		{
0: 			return;
0: 		}
0: 
0: 		for (Enumeration e = ht.elements(); e.hasMoreElements(); )
0: 		{
0: 		
0: 			cdl = (ConstraintDescriptorList) e.nextElement();
0: 			text = null;
0: 			constraintNames = null;
0: 
0: 			/*
0: 			** Build up the text of all the constraints into one big
0: 			** predicate.  Also, we unfortunately have to build up a big
0: 			** comma separated list of constraint names in case
0: 			** there is an error (we are favoring speed over a very
0: 			** explicit check constraint xxxx failed error message).
0: 			*/
0: 			int cdlSize = cdl.size();
0: 			for (int index = 0; index < cdlSize; index++)
0: 			{
0: 				cd = (CheckConstraintDescriptor) cdl.elementAt(index);
0: 				if (text == null)
0: 				{
0: 					text = new StringBuffer("(").append(cd.getConstraintText()).append(") ");
0: 					constraintNames = new StringBuffer(cd.getConstraintName());
0: 				}
0: 				else
0: 				{
0: 					text.append(" AND (").append(cd.getConstraintText()).append(") ");
0: 					constraintNames.append(", ").append(cd.getConstraintName());
0: 				}
0: 			}
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.ASSERT(text != null, "internal error, badly built hastable");
0: 			}
0: 
0: 			ConstraintConstantAction.validateConstraint(
0: 												constraintNames.toString(),
0: 												text.toString(),
0: 												cd.getTableDescriptor(),
0: 												lcc, true);
0: 		}
0: 	}
0: 
0: 	/*
0: 	**
0: 	*/
0: 	private void validateFKConstraint
0: 	(
0: 		ForeignKeyConstraintDescriptor	fk,
0: 		DataDictionary					dd,
0: 		TransactionController			tc,
0: 		ContextManager					cm
0: 	)
0: 		throws StandardException
0: 	{
0: 		/*
0: 		** Construct a template row 
0: 		*/
0: 		IndexRowGenerator irg = fk.getIndexConglomerateDescriptor(dd).getIndexDescriptor();	
0: 		ExecIndexRow indexTemplateRow = irg.getIndexRowTemplate();
0: 		TableDescriptor td = fk.getTableDescriptor();
0: 		ExecRow baseRow = td.getEmptyExecRow(cm);
0: 		irg.getIndexRow(baseRow, getRowLocation(dd, td, tc), 
0: 								indexTemplateRow, (FormatableBitSet)null);
0: 
0: 		/*
0: 		** The moment of truth
0: 		*/
0: 		ConstraintConstantAction.validateFKConstraint(tc, dd, fk, 
0: 							fk.getReferencedConstraint(), indexTemplateRow);
0: 	}
0: 			
0: 	/*
0: 	** Get a row location template.  Note that we are assuming that
0: 	** the same row location can be used for all tables participating
0: 	** in the fk.  For example, if there are multiple foreign keys,
0: 	** we are using the row location of one of the tables and assuming
0: 	** that it is the right shape for all tables.  Currently, this
0: 	** is a legitimate assumption.
0: 	*/
0: 	private RowLocation getRowLocation
0: 	(
0: 		DataDictionary			dd, 
0: 		TableDescriptor			td,
0: 		TransactionController	tc
0: 	) 
0: 		throws StandardException
0: 	{
0: 		RowLocation 			rl; 
0: 		ConglomerateController 	heapCC = null;
0: 
0: 		long tableId = td.getHeapConglomerateId();
0: 		heapCC = 
0:             tc.openConglomerate(
0:                 tableId, false, 0, tc.MODE_RECORD, tc.ISOLATION_READ_COMMITTED);
0: 		try
0: 		{
0: 			rl = heapCC.newRowLocationTemplate();
0: 		}
0: 		finally
0: 		{
0: 			heapCC.close();
0: 		}
0: 
0: 		return rl;
0: 	}
0: 		
0: 	/*
0: 	** Wrapper for constraint descriptor list -- always use
0: 	** this to get the constriant descriptor list.  It is
0: 	** used to hide serialization.
0: 	*/
0: 	private ConstraintDescriptorList getConstraintDescriptorList(DataDictionary dd)
0: 		throws StandardException
0: 	{
0: 		if (cdl != null)
0: 		{
0: 			return cdl;
0: 		}
0: 		if (tuuids == null)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		/*
0: 		** Reconstitute the cdl from the uuids
0: 		*/
0: 		cdl = new ConstraintDescriptorList();
0: 
0: 		for (int i = 0; i < tuuids.length; i++)
0: 		{
0: 			TableDescriptor td = dd.getTableDescriptor(tuuids[i]);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (td == null)
0: 				{
0: 					SanityManager.THROWASSERT("couldn't locate table descriptor "+
0: 						"in SET CONSTRAINTS for uuid "+tuuids[i]);
0: 				}
0: 			}
0: 
0: 			ConstraintDescriptor cd = dd.getConstraintDescriptorById(td, cuuids[i]);
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (cd == null)
0: 				{
0: 					SanityManager.THROWASSERT("couldn't locate constraint descriptor "+
0: 						" in SET CONSTRAINTS for uuid "+cuuids[i]);
0: 				}
0: 			}
0: 
0: 			cdl.add(cd);
0: 		}
0: 		return cdl;
0: 	}
0: 		
0: 	/**
0: 	 * Does this constant action modify the passed in table
0: 	 * uuid?  By modify we mean add or drop things tied to
0: 	 * this table (e.g. index, trigger, constraint).  Things
0: 	 * like views or spses that reference this table don't
0: 	 * count.
0: 	 * <p>
0: 	 * For SET CONSTRAINTS return true if it is SET CONSTRAINTS
0: 	 * ALL otherwise, compare the table ids.
0: 	 *
0: 	 * @param tableId the table id
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public boolean modifiesTableId(UUID tableId) throws StandardException
0: 	{
0: 		if (tuuids != null) {
0: 			for (int i = 0; i < tuuids.length; i++) {
0: 				if (tableId.equals(tuuids[i]))
0: 					return true;
0: 			}
0: 			return false;
0: 		}
0: 
0: 		// assume SET CONSTRAINTS ALL touches this table
0: 		if ((cdl == null) || (cdl.size() == 0))
0: 		{
0: 			return true;
0: 		}
0: 
0: 		int cdlSize = cdl.size();
0: 		for (int index = 0; index < cdlSize; index++)
0: 		{
0: 			ConstraintDescriptor cd = cdl.elementAt(index);
0: 			if (cd.getTableId().equals(tableId))
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 		
0: 		return false;
0: 	}
0: 
0: 	///////////////////////////////////////////////
0: 	//
0: 	// MISC
0: 	//
0: 	///////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Do the work of publishing any this action to any
0: 	 * replication targets.  On a non-replicated source,
0: 	 * this is a no-op.
0: 	 *
0: 	 * @param activation the activation
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	protected void publishToTargets(Activation activation)
0: 		throws StandardException
0: 	{
0: 	}
0: }
============================================================================