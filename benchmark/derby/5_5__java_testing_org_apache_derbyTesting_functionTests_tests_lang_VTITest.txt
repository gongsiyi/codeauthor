1:01b5d0b: /*
1:01b5d0b:     Derby - Class org.apache.derbyTesting.functionTests.tests.lang.VTITest
3:01b5d0b: 
1:01b5d0b:     Licensed to the Apache Software Foundation (ASF) under one or more
1:01b5d0b:     contributor license agreements.  See the NOTICE file distributed with
1:01b5d0b:     this work for additional information regarding copyright ownership.
1:01b5d0b:     The ASF licenses this file to You under the Apache License, Version 2.0
1:01b5d0b:     (the "License"); you may not use this file except in compliance with
1:01b5d0b:     the License.  You may obtain a copy of the License at
1:01b5d0b: 
1:01b5d0b:        http://www.apache.org/licenses/LICENSE-2.0
1:01b5d0b: 
1:01b5d0b:     Unless required by applicable law or agreed to in writing, software
1:01b5d0b:     distributed under the License is distributed on an "AS IS" BASIS,
1:01b5d0b:     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01b5d0b:     See the License for the specific language governing permissions and
1:01b5d0b:     limitations under the License.
1:01b5d0b: 
1:01b5d0b:   */
1:01b5d0b: package org.apache.derbyTesting.functionTests.tests.lang;
1:01b5d0b: 
1:01b5d0b:  
1:5b90cf1: import java.sql.CallableStatement;
1:1ae02c9: import java.sql.ResultSet;
1:01b5d0b: import java.sql.SQLException;
1:01b5d0b: import java.sql.Statement;
1:01b5d0b: import junit.framework.Test;
1:01b5d0b: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:01b5d0b: import org.apache.derbyTesting.junit.JDBC;
1:01b5d0b: 
1:01b5d0b: /**
1:01b5d0b:  * Add tests that use VTI 
1:01b5d0b:  */
1:01b5d0b:  public class VTITest extends BaseJDBCTestCase {
1:5b90cf1: 
1:5b90cf1:      private final String tableName;
1:01b5d0b: 
1:01b5d0b:      public static Test suite()
1:01b5d0b:      {
1:1ae02c9:          BaseTestSuite suite = new BaseTestSuite("VTITest");
1:01b5d0b:          // requires DriverManager support
1:7a5b1d0:          if (JDBC.vmSupportsJDBC3()) {
1:5b90cf1:             suite.addTest(new VTITest("bulkInsertVtiTest", "WAREHOUSE"));
1:5b90cf1:             // Run the same test again, but now insert into a table whose name
1:5b90cf1:             // contains single and double quote characters (DERBY-3682)
1:5b90cf1:             suite.addTest(new VTITest("bulkInsertVtiTest", "test\"'table"));
1:5b90cf1:          }
1:01b5d0b:          
1:01b5d0b:          return suite;
2:01b5d0b:      }
1:01b5d0b:      
1:01b5d0b: 
1:5b90cf1:      private VTITest(String name, String tableName) {
1:01b5d0b:          super(name);
1:5b90cf1:          this.tableName = tableName;
1:01b5d0b:      }
1:01b5d0b:      
1:01b5d0b: 
1:01b5d0b:      /**
1:01b5d0b:       * Setup: create a table for this test
1:01b5d0b:       */
1:01b5d0b:      protected void setUp() throws SQLException {
2:01b5d0b:          Statement stmt = createStatement();
1:5b90cf1:          stmt.execute("CREATE TABLE " + JDBC.escape(tableName) + "(id int)");
3:01b5d0b:          stmt.close();
1:2f625cd:      }
1:01b5d0b:      
1:01b5d0b:      /**
1:01b5d0b:       * Drop the table created during setup.
1:01b5d0b:       * @throws Exception 
1:01b5d0b:       */
1:01b5d0b:      protected void tearDown()
1:01b5d0b:          throws Exception {
1:01b5d0b:          Statement stmt = createStatement();
1:5b90cf1:          stmt.execute("DROP TABLE " + JDBC.escape(tableName));
1:01b5d0b:          stmt.close();
1:01b5d0b:          super.tearDown();
1:01b5d0b:      }
1:01b5d0b:  
1:01b5d0b:   
1:01b5d0b:      /**
1:01b5d0b:       * Execute SYSCS_BULK_INSERT procedure to insert rows.
1:01b5d0b:       * @throws SQLException
1:01b5d0b:       */
1:01b5d0b:      public void bulkInsertVtiTest()
1:01b5d0b:      throws SQLException
1:01b5d0b:      {
1:01b5d0b:         int expectedRows = 10;
1:5b90cf1: 
1:5b90cf1:         CallableStatement cs =
1:5b90cf1:                 prepareCall("CALL SYSCS_UTIL.SYSCS_BULK_INSERT(?, ?, ?, ?)");
1:5b90cf1:         cs.setString(1, "APP");
1:5b90cf1:         cs.setString(2, tableName);
1:5b90cf1:         cs.setString(3, WarehouseVTI.class.getName());
1:5b90cf1:         cs.setInt(4, expectedRows);
1:5b90cf1:         cs.execute();
1:5b90cf1: 
1:5b90cf1:         ResultSet rs = createStatement().executeQuery(
1:5b90cf1:                 "SELECT 1 FROM " + JDBC.escape(tableName));
1:5b90cf1:         JDBC.assertDrainResults(rs, expectedRows);
1:01b5d0b:      }
1:01b5d0b:  }   
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:          BaseTestSuite suite = new BaseTestSuite("VTITest");
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7a5b1d0
/////////////////////////////////////////////////////////////////////////
1:          if (JDBC.vmSupportsJDBC3()) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5b90cf1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
/////////////////////////////////////////////////////////////////////////
1: 
1:      private final String tableName;
0:          if (JDBC.vmSupportsJDBC2()) {
1:             suite.addTest(new VTITest("bulkInsertVtiTest", "WAREHOUSE"));
1:             // Run the same test again, but now insert into a table whose name
1:             // contains single and double quote characters (DERBY-3682)
1:             suite.addTest(new VTITest("bulkInsertVtiTest", "test\"'table"));
1:          }
1:      private VTITest(String name, String tableName) {
1:          this.tableName = tableName;
/////////////////////////////////////////////////////////////////////////
1:          stmt.execute("CREATE TABLE " + JDBC.escape(tableName) + "(id int)");
/////////////////////////////////////////////////////////////////////////
1:          stmt.execute("DROP TABLE " + JDBC.escape(tableName));
/////////////////////////////////////////////////////////////////////////
1: 
1:         CallableStatement cs =
1:                 prepareCall("CALL SYSCS_UTIL.SYSCS_BULK_INSERT(?, ?, ?, ?)");
1:         cs.setString(1, "APP");
1:         cs.setString(2, tableName);
1:         cs.setString(3, WarehouseVTI.class.getName());
1:         cs.setInt(4, expectedRows);
1:         cs.execute();
1: 
1:         ResultSet rs = createStatement().executeQuery(
1:                 "SELECT 1 FROM " + JDBC.escape(tableName));
1:         JDBC.assertDrainResults(rs, expectedRows);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:          TestSuite suite = new TestSuite("VTITest");
/////////////////////////////////////////////////////////////////////////
1:  }   
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:01b5d0b
/////////////////////////////////////////////////////////////////////////
1: /*
1:     Derby - Class org.apache.derbyTesting.functionTests.tests.lang.VTITest
1: 
1:     Licensed to the Apache Software Foundation (ASF) under one or more
1:     contributor license agreements.  See the NOTICE file distributed with
1:     this work for additional information regarding copyright ownership.
1:     The ASF licenses this file to You under the Apache License, Version 2.0
1:     (the "License"); you may not use this file except in compliance with
1:     the License.  You may obtain a copy of the License at
1: 
1:        http://www.apache.org/licenses/LICENSE-2.0
1: 
1:     Unless required by applicable law or agreed to in writing, software
1:     distributed under the License is distributed on an "AS IS" BASIS,
1:     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:     See the License for the specific language governing permissions and
1:     limitations under the License.
1: 
1:   */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1:  
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.ResultSet;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * Add tests that use VTI 
1:  */
1:  public class VTITest extends BaseJDBCTestCase {
1:      
1: 
1:      public static Test suite()
1:      {
0:          TestSuite suite = new TestSuite();
1:          // requires DriverManager support
0:          if (JDBC.vmSupportsJDBC2())
0:             suite.addTest(new VTITest("bulkInsertVtiTest"));
1:          
1:          return suite;
1:      }
1:      
1: 
0:      public VTITest(String name) {
1:          super(name);
1:      }
1:      
1: 
1:      /**
1:       * Setup: create a table for this test
1:       */
1:      protected void setUp() throws SQLException {
1:          Statement stmt = createStatement();
0:          stmt.execute("CREATE TABLE warehouse (id int)");
1:          stmt.close();
1:      }
1:      
1:      /**
1:       * Drop the table created during setup.
1:       * @throws Exception 
1:       */
1:      protected void tearDown()
1:          throws Exception {
1:          Statement stmt = createStatement();
0:          stmt.execute("DROP TABLE warehouse");
1:          stmt.close();
1:          super.tearDown();
1:      }
1:  
1:   
1:      /**
1:       * Execute SYSCS_BULK_INSERT procedure to insert rows.
1:       * @throws SQLException
1:       */
1:      public void bulkInsertVtiTest()
1:      throws SQLException
1:      {
1:         int expectedRows = 10;
1:         Statement stmt = createStatement();
0:         stmt.execute("call  SYSCS_UTIL.SYSCS_BULK_INSERT('APP','WAREHOUSE'," +
0:                 "'org.apache.derbyTesting.functionTests.tests.lang.WarehouseVTI',"
0:                 +"\'"+expectedRows+"')");
1:         stmt.close();
0:         stmt = createStatement();
0:         ResultSet  rs  = stmt.executeQuery("SELECT COUNT(*) from warehouse");
0:         rs.next();
0:         assertEquals(expectedRows,rs.getInt(1));
0:         rs.close();
1:         stmt.close();
1:      }
1:  }   
============================================================================