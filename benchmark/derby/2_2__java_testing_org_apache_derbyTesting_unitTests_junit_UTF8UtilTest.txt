1:88ff3fa: /*
5:88ff3fa: 
1:88ff3fa:    Derby - Class org.apache.derbyTesting.unitTests.junit.UTF8UtilTest
1:88ff3fa: 
1:88ff3fa:    Licensed to the Apache Software Foundation (ASF) under one
1:88ff3fa:    or more contributor license agreements.  See the NOTICE file
1:88ff3fa:    distributed with this work for additional information
1:88ff3fa:    regarding copyright ownership.  The ASF licenses this file
1:88ff3fa:    to you under the Apache License, Version 2.0 (the
1:88ff3fa:    "License"); you may not use this file except in compliance
1:88ff3fa:    with the License.  You may obtain a copy of the License at
1:88ff3fa: 
1:88ff3fa:      http://www.apache.org/licenses/LICENSE-2.0
1:88ff3fa: 
1:88ff3fa:    Unless required by applicable law or agreed to in writing,
1:88ff3fa:    software distributed under the License is distributed on an
1:88ff3fa:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:88ff3fa:    KIND, either express or implied.  See the License for the
1:88ff3fa:    specific language governing permissions and limitations
1:88ff3fa:    under the License.
1:88ff3fa: 
1:88ff3fa:  */
1:88ff3fa: package org.apache.derbyTesting.unitTests.junit;
1:88ff3fa: 
1:a8452cf: import java.io.ByteArrayInputStream;
1:a8452cf: import java.io.DataInputStream;
1:88ff3fa: import java.io.EOFException;
1:88ff3fa: import java.io.IOException;
1:88ff3fa: import java.io.InputStream;
1:88ff3fa: import java.io.UTFDataFormatException;
1:1ae02c9: import junit.framework.Test;
1:6f4c92a: import org.apache.derby.iapi.types.CharStreamHeaderGenerator;
1:6f4c92a: import org.apache.derby.iapi.types.ClobStreamHeaderGenerator;
1:88ff3fa: import org.apache.derby.iapi.types.ReaderToUTF8Stream;
1:88ff3fa: import org.apache.derby.iapi.util.UTF8Util;
1:88ff3fa: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1:88ff3fa: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:88ff3fa: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:88ff3fa: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a8452cf: 
1:88ff3fa: /**
1:88ff3fa:  * Tests that <code>skipFully</code> and <code>skipUntilEOF</code> behaves
1:88ff3fa:  * correctly on Derby's modfied UTF-8 encoded streams.
1:88ff3fa:  * <p>
1:88ff3fa:  * These tests are dependent on the behavior of <code>ReaderToUTF8Stream</code>.
1:88ff3fa:  * Note that this class inserts two bytes at the start of the user/application
1:88ff3fa:  * stream to encode the length of the stream. These two bytes may be zero, even
1:88ff3fa:  * if the stream is short enough for its length to be encoded.
1:88ff3fa:  * <p>
1:88ff3fa:  * Also note that the lengths chosen for large streams are just suitably large
1:88ff3fa:  * integers. The point is to choose them large enough to make sure buffer
1:88ff3fa:  * boundaries are crossed.
1:88ff3fa:  * 
1:88ff3fa:  * @see ReaderToUTF8Stream
1:88ff3fa:  * @see UTF8Util
1:88ff3fa:  */
1:88ff3fa: public class UTF8UtilTest
1:88ff3fa:     extends BaseTestCase {
1:88ff3fa: 
1:51c45b8:     /** Type name passed to {@code ReaderToUTF8Stream}. */
1:51c45b8:     private static final String TYPENAME = "VARCHAR";
1:7af6726: 
1:6f4c92a:     /**
1:6f4c92a:      * Hardcoded header length. This is why the Clob stream header generator
1:6f4c92a:      * is invoked with {@code true} in the constructor.
1:6f4c92a:      */
1:6f4c92a:     private static final int HEADER_LENGTH = 2;
1:51c45b8: 
1:88ff3fa:     /**
1:88ff3fa:      * Creates a test of the specified name.
1:88ff3fa:      */
1:88ff3fa:     public UTF8UtilTest(String name) {
1:88ff3fa:         super(name);
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:88ff3fa:      * Ensure the assumption that the default looping alphabet stream and the
1:88ff3fa:      * modified UTF-8 encoding is equal.
1:88ff3fa:      * <p>
1:88ff3fa:      * If this assumption is broken, several of the other tests will fail.
1:88ff3fa:      */
1:88ff3fa:     public void testEqualityOfModifedUTF8AndASCII()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int length = 12706;
1:88ff3fa:         InputStream ascii = new LoopingAlphabetStream(length);
1:88ff3fa:         InputStream modUTF8 = new ReaderToUTF8Stream(
1:88ff3fa:                                     new LoopingAlphabetReader(length),
1:6f4c92a:                                     length, 0, TYPENAME,
1:6f4c92a:                                     new CharStreamHeaderGenerator());
1:7af6726:         modUTF8.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         assertEquals(ascii, modUTF8);
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     public void testSkipUntilEOFOnZeroLengthStream()
1:88ff3fa:             throws IOException {
1:88ff3fa:         assertEquals(0, UTF8Util.skipUntilEOF(new LoopingAlphabetStream(0)));
1:88ff3fa:     }
1:88ff3fa:     
1:88ff3fa:     public void testSkipUntilEOFOnShortStreamASCII()
1:88ff3fa:             throws IOException {
1:88ff3fa:         assertEquals(5, UTF8Util.skipUntilEOF(new LoopingAlphabetStream(5)));
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     public void testSkipUntilEOFOnShortStreamCJK()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 5;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
1:6f4c92a:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
1:7af6726:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         assertEquals(charLength, UTF8Util.skipUntilEOF(in));
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     public void testSkipUntilEOFOnLongStreamASCII()
1:88ff3fa:             throws IOException {
1:88ff3fa:         assertEquals(127019, UTF8Util.skipUntilEOF(
1:88ff3fa:                 new LoopingAlphabetStream(127019)));
1:88ff3fa:     }
1:88ff3fa:     
1:88ff3fa:     public void testSkipUntilEOFOnLongStreamCJK()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 127019;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
1:6f4c92a:                 charLength, 0, TYPENAME, new ClobStreamHeaderGenerator(true));
1:7af6726:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         assertEquals(charLength, UTF8Util.skipUntilEOF(in));
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:88ff3fa:      * Tests that <code>skipFully</code> successfully skips the requested
1:88ff3fa:      * characters and returns the correct number of bytes skipped.
1:88ff3fa:      * 
1:88ff3fa:      * @throws IOException if the test fails for some unexpected reason
1:88ff3fa:      */
1:88ff3fa:     public void testSkipFullyOnValidLongStreamCJK()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 161019;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
1:6f4c92a:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
1:7af6726:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         // Returns count in bytes, we are using CJK chars so multiply length
1:88ff3fa:         // with 3 to get expected number of bytes.
1:88ff3fa:         assertEquals(charLength *3, UTF8Util.skipFully(in, charLength));
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:88ff3fa:      * Tests that <code>skipFully</code> throws exception if the stream contains
1:88ff3fa:      * less characters than the requested number of characters to skip.
1:88ff3fa:      * 
1:88ff3fa:      * @throws IOException if the test fails for some unexpected reason
1:88ff3fa:      */
1:88ff3fa:     public void testSkipFullyOnTooShortStreamCJK()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 161019;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
1:6f4c92a:                 charLength, 0, TYPENAME, new ClobStreamHeaderGenerator(true));
1:7af6726:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         try {
1:88ff3fa:             UTF8Util.skipFully(in, charLength + 100);
1:88ff3fa:             fail("Should have failed because of too short stream.");
1:88ff3fa:         } catch (EOFException eofe) {
1:88ff3fa:             // As expected, do nothing.
1:88ff3fa:         }
1:88ff3fa:     }
1:88ff3fa:     
1:88ff3fa:     /**
1:88ff3fa:      * Tests that <code>skipFully</code> throws exception if there is a UTF-8
1:88ff3fa:      * encoding error in the stream
1:88ff3fa:      * 
1:88ff3fa:      * @throws IOException if the test fails for some unexpected reason
1:88ff3fa:      */
1:88ff3fa:     public void testSkipFullyOnInvalidStreamCJK()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 10;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
1:6f4c92a:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
1:7af6726:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
1:88ff3fa:         in.skip(1L); // Skip one more byte to trigger a UTF error.
1:88ff3fa:         try {
1:88ff3fa:             UTF8Util.skipFully(in, charLength);
1:88ff3fa:             fail("Should have failed because of UTF error.");
1:88ff3fa:         } catch (UTFDataFormatException udfe) {
1:88ff3fa:             // As expected, do nothing.
1:88ff3fa:         }
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:88ff3fa:      * Tests a sequence of skip calls.
1:88ff3fa:      */
1:88ff3fa:     public void testMixedSkipOnStreamTamil()
1:88ff3fa:             throws IOException {
1:88ff3fa:         final int charLength = 161019;
1:88ff3fa:         InputStream in = new ReaderToUTF8Stream(
1:88ff3fa:                 new LoopingAlphabetReader(charLength, CharAlphabet.tamil()),
1:6f4c92a:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
1:7af6726:         // Skip encoded length added by ReaderToUTF8Stream.
1:7af6726:         in.skip(HEADER_LENGTH);
1:88ff3fa:         int firstSkip = 10078;
1:88ff3fa:         assertEquals(firstSkip*3, UTF8Util.skipFully(in, firstSkip));
1:88ff3fa:         assertEquals(charLength - firstSkip, UTF8Util.skipUntilEOF(in));
1:88ff3fa:         try {
1:88ff3fa:             UTF8Util.skipFully(in, 1L);
1:88ff3fa:             fail("Should have failed because the stream has been drained.");
1:88ff3fa:         } catch (EOFException eofe) {
1:88ff3fa:             // As expected, do nothing
1:88ff3fa:         }
1:88ff3fa:     }
1:88ff3fa: 
1:88ff3fa:     /**
1:a8452cf:      * Tries to skip characters where the data is incomplete.
1:a8452cf:      * <p>
1:a8452cf:      * In this test, the encoding states there is a character represented by
1:a8452cf:      * two bytes present. However, only one byte is provided.
1:a8452cf:      */
1:a8452cf:     public void testMissingSecondByteOfTwo()
1:a8452cf:             throws IOException {
1:701af66:         // 0xdf = 11011111
1:a8452cf:         byte[] data = {'a', (byte)0xdf};
1:a8452cf:         InputStream is = new ByteArrayInputStream(data);
1:a8452cf:         try {
1:a8452cf:             UTF8Util.skipFully(is, 2);
1:a8452cf:             fail("Reading invalid UTF-8 should fail");
1:a8452cf:         } catch (UTFDataFormatException udfe) {
1:a8452cf:             // As expected
1:a8452cf:         }
1:a8452cf:     }
1:a8452cf: 
1:a8452cf:     /**
1:a8452cf:      * Tries to skip characters where the data is incomplete.
1:a8452cf:      * <p>
1:a8452cf:      * In this test, the encoding states there is a character represented by
1:a8452cf:      * three bytes present. However, only one byte is provided.
1:a8452cf:      */
1:a8452cf:     public void testMissingSecondByteOfThree()
1:a8452cf:             throws IOException {
1:701af66:         // 0xef = 11101111
1:a8452cf:         byte[] data = {'a', (byte)0xef};
1:a8452cf:         InputStream is = new ByteArrayInputStream(data);
1:a8452cf:         try {
1:a8452cf:             UTF8Util.skipFully(is, 2);
1:a8452cf:             fail("Reading invalid UTF-8 should fail");
1:a8452cf:         } catch (UTFDataFormatException udfe) {
1:a8452cf:             // As expected
1:a8452cf:         }
1:a8452cf:     }
1:a8452cf: 
1:a8452cf:     /**
1:a8452cf:      * Tries to skip characters where the data is incomplete.
1:a8452cf:      * <p>
1:a8452cf:      * In this test, the encoding states there is a character represented by
1:a8452cf:      * three bytes present. However, only two bytes are provided.
1:a8452cf:      */
1:a8452cf:     public void testMissingThirdByteOfThree()
1:a8452cf:             throws IOException {
1:701af66:         // 0xef = 11101111, 0xb8 = 10111000
1:a8452cf:         byte[] data = {'a', (byte)0xef, (byte)0xb8};
1:a8452cf:         InputStream is = new ByteArrayInputStream(data);
1:a8452cf:         try {
1:a8452cf:             UTF8Util.skipFully(is, 2);
1:a8452cf:             fail("Reading invalid UTF-8 should fail");
1:a8452cf:         } catch (UTFDataFormatException udfe) {
1:a8452cf:             // As expected
1:a8452cf:         }
1:a8452cf:     }
1:a8452cf: 
1:a8452cf:     /**
1:a8452cf:      * Tries to read a stream of data where there is an invalid UTF-8 encoded
1:a8452cf:      * byte.
1:a8452cf:      */
1:a8452cf:     public void testInvalidUTF8Encoding()
1:a8452cf:             throws IOException {
1:a8452cf:         // 0xf8 = 11111000 <-- invalid UTF-8 encoding
1:a8452cf:         byte[] data = {'a', 'b', 'c', (byte)0xf8, 'e', 'f'};
1:a8452cf:         InputStream is = new ByteArrayInputStream(data);
1:a8452cf:         try {
1:a8452cf:             UTF8Util.skipFully(is, 6);
1:a8452cf:             fail("Reading invalid UTF-8 should fail");
1:a8452cf:         } catch (UTFDataFormatException udfe) {
1:a8452cf:             // As expected when reading invalid data
1:a8452cf:         }
1:a8452cf:     }
1:a8452cf: 
1:a8452cf:     /**
1:a8452cf:      * Demonstrates that skipping incorrectly encoded character sequences
1:a8452cf:      * works because the stream is not checked for well-formedness.
1:a8452cf:      */
1:a8452cf:     public void testSkippingInvalidEncodingWorks()
1:a8452cf:             throws IOException {
1:a8452cf:         // The array contains three valid characters and one invalid three-byte
1:a8452cf:         // representation that only has two bytes present.
1:a8452cf:         // When skipping, this sequence is (incorrectly) taken as a sequence of
1:a8452cf:         // three characters ('a' - some three byte character - 'a').
1:701af66:         // 0xef = 11101111, 0xb8 = 10111000
1:a8452cf:         byte[] data = {'a', (byte)0xef, (byte)0xb8, 'a', 'a'};
1:a8452cf:         byte[] dataWithLength =
1:a8452cf:             {0x0, 0x5, 'a', (byte)0xef, (byte)0xb8, 'a', 'a'};
1:a8452cf:         InputStream is = new ByteArrayInputStream(data);
1:a8452cf:         // This is actually incorrect, but does work currently.
1:a8452cf:         UTF8Util.skipFully(is, 3);
1:a8452cf:         // Verify that decoding this actually fails.
1:a8452cf:         DataInputStream dis = new DataInputStream(
1:a8452cf:                                     new ByteArrayInputStream(dataWithLength));
1:a8452cf:         try {
1:a8452cf:             dis.readUTF();
1:a8452cf:             fail("UTF-8 expected to be invalid, read should fail");
1:a8452cf:         } catch (UTFDataFormatException udfe) {
1:a8452cf:             // This is expected, since the UTF-8 encoding is invalid
1:a8452cf:         }
1:a8452cf:     }
1:a8452cf: 
1:a8452cf:     /**
1:88ff3fa:      * Returns a suite of tests.
1:88ff3fa:      */
1:88ff3fa:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(UTF8UtilTest.class, "UTF8Util tests");
1:88ff3fa:     }
1:88ff3fa: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(UTF8UtilTest.class, "UTF8Util tests");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6f4c92a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.CharStreamHeaderGenerator;
1: import org.apache.derby.iapi.types.ClobStreamHeaderGenerator;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Hardcoded header length. This is why the Clob stream header generator
1:      * is invoked with {@code true} in the constructor.
1:      */
1:     private static final int HEADER_LENGTH = 2;
/////////////////////////////////////////////////////////////////////////
1:                                     length, 0, TYPENAME,
1:                                     new CharStreamHeaderGenerator());
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new ClobStreamHeaderGenerator(true));
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new ClobStreamHeaderGenerator(true));
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
/////////////////////////////////////////////////////////////////////////
1:                 charLength, 0, TYPENAME, new CharStreamHeaderGenerator());
commit:7af6726
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.StreamHeaderHolder;
/////////////////////////////////////////////////////////////////////////
0:     /** Default header for stream with unknown length. */
0:     private static final StreamHeaderHolder HDR = new StreamHeaderHolder(
0:             new byte[] {0x00, 0x00}, new byte[] {8, 0}, false, true);
0:     private static final int HEADER_LENGTH = HDR.headerLength();
1: 
/////////////////////////////////////////////////////////////////////////
0:                                     length, 0, TYPENAME, HDR);
1:         modUTF8.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         in.skip(HEADER_LENGTH); // Skip encoded length added by ReaderToUTF8Stream.
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME, HDR);
1:         // Skip encoded length added by ReaderToUTF8Stream.
1:         in.skip(HEADER_LENGTH);
commit:51c45b8
/////////////////////////////////////////////////////////////////////////
1:     /** Type name passed to {@code ReaderToUTF8Stream}. */
1:     private static final String TYPENAME = "VARCHAR";
1: 
/////////////////////////////////////////////////////////////////////////
0:                                     length, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
/////////////////////////////////////////////////////////////////////////
0:                 charLength, 0, TYPENAME);
commit:701af66
/////////////////////////////////////////////////////////////////////////
1:         // 0xdf = 11011111
/////////////////////////////////////////////////////////////////////////
1:         // 0xef = 11101111
/////////////////////////////////////////////////////////////////////////
1:         // 0xef = 11101111, 0xb8 = 10111000
/////////////////////////////////////////////////////////////////////////
1:         // 0xef = 11101111, 0xb8 = 10111000
commit:a8452cf
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.DataInputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Tries to skip characters where the data is incomplete.
1:      * <p>
1:      * In this test, the encoding states there is a character represented by
1:      * two bytes present. However, only one byte is provided.
1:      */
1:     public void testMissingSecondByteOfTwo()
1:             throws IOException {
1:         byte[] data = {'a', (byte)0xdf};
1:         InputStream is = new ByteArrayInputStream(data);
1:         try {
1:             UTF8Util.skipFully(is, 2);
1:             fail("Reading invalid UTF-8 should fail");
1:         } catch (UTFDataFormatException udfe) {
1:             // As expected
1:         }
1:     }
1: 
1:     /**
1:      * Tries to skip characters where the data is incomplete.
1:      * <p>
1:      * In this test, the encoding states there is a character represented by
1:      * three bytes present. However, only one byte is provided.
1:      */
1:     public void testMissingSecondByteOfThree()
1:             throws IOException {
1:         byte[] data = {'a', (byte)0xef};
1:         InputStream is = new ByteArrayInputStream(data);
1:         try {
1:             UTF8Util.skipFully(is, 2);
1:             fail("Reading invalid UTF-8 should fail");
1:         } catch (UTFDataFormatException udfe) {
1:             // As expected
1:         }
1:     }
1: 
1:     /**
1:      * Tries to skip characters where the data is incomplete.
1:      * <p>
1:      * In this test, the encoding states there is a character represented by
1:      * three bytes present. However, only two bytes are provided.
1:      */
1:     public void testMissingThirdByteOfThree()
1:             throws IOException {
1:         byte[] data = {'a', (byte)0xef, (byte)0xb8};
1:         InputStream is = new ByteArrayInputStream(data);
1:         try {
1:             UTF8Util.skipFully(is, 2);
1:             fail("Reading invalid UTF-8 should fail");
1:         } catch (UTFDataFormatException udfe) {
1:             // As expected
1:         }
1:     }
1: 
1:     /**
1:      * Tries to read a stream of data where there is an invalid UTF-8 encoded
1:      * byte.
1:      */
1:     public void testInvalidUTF8Encoding()
1:             throws IOException {
1:         // 0xf8 = 11111000 <-- invalid UTF-8 encoding
1:         byte[] data = {'a', 'b', 'c', (byte)0xf8, 'e', 'f'};
1:         InputStream is = new ByteArrayInputStream(data);
1:         try {
1:             UTF8Util.skipFully(is, 6);
1:             fail("Reading invalid UTF-8 should fail");
1:         } catch (UTFDataFormatException udfe) {
1:             // As expected when reading invalid data
1:         }
1:     }
1: 
1:     /**
1:      * Demonstrates that skipping incorrectly encoded character sequences
1:      * works because the stream is not checked for well-formedness.
1:      */
1:     public void testSkippingInvalidEncodingWorks()
1:             throws IOException {
1:         // The array contains three valid characters and one invalid three-byte
1:         // representation that only has two bytes present.
1:         // When skipping, this sequence is (incorrectly) taken as a sequence of
1:         // three characters ('a' - some three byte character - 'a').
1:         byte[] data = {'a', (byte)0xef, (byte)0xb8, 'a', 'a'};
1:         byte[] dataWithLength =
1:             {0x0, 0x5, 'a', (byte)0xef, (byte)0xb8, 'a', 'a'};
1:         InputStream is = new ByteArrayInputStream(data);
1:         // This is actually incorrect, but does work currently.
1:         UTF8Util.skipFully(is, 3);
1:         // Verify that decoding this actually fails.
1:         DataInputStream dis = new DataInputStream(
1:                                     new ByteArrayInputStream(dataWithLength));
1:         try {
1:             dis.readUTF();
1:             fail("UTF-8 expected to be invalid, read should fail");
1:         } catch (UTFDataFormatException udfe) {
1:             // This is expected, since the UTF-8 encoding is invalid
1:         }
1:     }
1: 
1:     /**
commit:88ff3fa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.UTF8UtilTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derbyTesting.unitTests.junit;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import java.io.UTFDataFormatException;
1: import org.apache.derby.iapi.types.ReaderToUTF8Stream;
1: import org.apache.derby.iapi.util.UTF8Util;
1: 
1: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Tests that <code>skipFully</code> and <code>skipUntilEOF</code> behaves
1:  * correctly on Derby's modfied UTF-8 encoded streams.
1:  * <p>
1:  * These tests are dependent on the behavior of <code>ReaderToUTF8Stream</code>.
1:  * Note that this class inserts two bytes at the start of the user/application
1:  * stream to encode the length of the stream. These two bytes may be zero, even
1:  * if the stream is short enough for its length to be encoded.
1:  * <p>
1:  * Also note that the lengths chosen for large streams are just suitably large
1:  * integers. The point is to choose them large enough to make sure buffer
1:  * boundaries are crossed.
1:  * 
1:  * @see ReaderToUTF8Stream
1:  * @see UTF8Util
1:  */
1: public class UTF8UtilTest
1:     extends BaseTestCase {
1: 
1:     /**
1:      * Creates a test of the specified name.
1:      */
1:     public UTF8UtilTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Ensure the assumption that the default looping alphabet stream and the
1:      * modified UTF-8 encoding is equal.
1:      * <p>
1:      * If this assumption is broken, several of the other tests will fail.
1:      */
1:     public void testEqualityOfModifedUTF8AndASCII()
1:             throws IOException {
1:         final int length = 12706;
1:         InputStream ascii = new LoopingAlphabetStream(length);
1:         InputStream modUTF8 = new ReaderToUTF8Stream(
1:                                     new LoopingAlphabetReader(length),
0:                                     length, 0, "ignored-test-type");
0:         modUTF8.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         assertEquals(ascii, modUTF8);
1:     }
1: 
1:     public void testSkipUntilEOFOnZeroLengthStream()
1:             throws IOException {
1:         assertEquals(0, UTF8Util.skipUntilEOF(new LoopingAlphabetStream(0)));
1:     }
1:     
1:     public void testSkipUntilEOFOnShortStreamASCII()
1:             throws IOException {
1:         assertEquals(5, UTF8Util.skipUntilEOF(new LoopingAlphabetStream(5)));
1:     }
1: 
1:     public void testSkipUntilEOFOnShortStreamCJK()
1:             throws IOException {
1:         final int charLength = 5;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         assertEquals(charLength, UTF8Util.skipUntilEOF(in));
1:     }
1: 
1:     public void testSkipUntilEOFOnLongStreamASCII()
1:             throws IOException {
1:         assertEquals(127019, UTF8Util.skipUntilEOF(
1:                 new LoopingAlphabetStream(127019)));
1:     }
1:     
1:     public void testSkipUntilEOFOnLongStreamCJK()
1:             throws IOException {
1:         final int charLength = 127019;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         assertEquals(charLength, UTF8Util.skipUntilEOF(in));
1:     }
1: 
1:     /**
1:      * Tests that <code>skipFully</code> successfully skips the requested
1:      * characters and returns the correct number of bytes skipped.
1:      * 
1:      * @throws IOException if the test fails for some unexpected reason
1:      */
1:     public void testSkipFullyOnValidLongStreamCJK()
1:             throws IOException {
1:         final int charLength = 161019;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         // Returns count in bytes, we are using CJK chars so multiply length
1:         // with 3 to get expected number of bytes.
1:         assertEquals(charLength *3, UTF8Util.skipFully(in, charLength));
1:     }
1: 
1:     /**
1:      * Tests that <code>skipFully</code> throws exception if the stream contains
1:      * less characters than the requested number of characters to skip.
1:      * 
1:      * @throws IOException if the test fails for some unexpected reason
1:      */
1:     public void testSkipFullyOnTooShortStreamCJK()
1:             throws IOException {
1:         final int charLength = 161019;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         try {
1:             UTF8Util.skipFully(in, charLength + 100);
1:             fail("Should have failed because of too short stream.");
1:         } catch (EOFException eofe) {
1:             // As expected, do nothing.
1:         }
1:     }
1:     
1:     /**
1:      * Tests that <code>skipFully</code> throws exception if there is a UTF-8
1:      * encoding error in the stream
1:      * 
1:      * @throws IOException if the test fails for some unexpected reason
1:      */
1:     public void testSkipFullyOnInvalidStreamCJK()
1:             throws IOException {
1:         final int charLength = 10;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.cjkSubset()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         in.skip(1L); // Skip one more byte to trigger a UTF error.
1:         try {
1:             UTF8Util.skipFully(in, charLength);
1:             fail("Should have failed because of UTF error.");
1:         } catch (UTFDataFormatException udfe) {
1:             // As expected, do nothing.
1:         }
1:     }
1: 
1:     /**
1:      * Tests a sequence of skip calls.
1:      */
1:     public void testMixedSkipOnStreamTamil()
1:             throws IOException {
1:         final int charLength = 161019;
1:         InputStream in = new ReaderToUTF8Stream(
1:                 new LoopingAlphabetReader(charLength, CharAlphabet.tamil()),
0:                 charLength, 0, "ignored-test-type");
0:         in.skip(2L); // Skip encoded length added by ReaderToUTF8Stream.
1:         int firstSkip = 10078;
1:         assertEquals(firstSkip*3, UTF8Util.skipFully(in, firstSkip));
1:         assertEquals(charLength - firstSkip, UTF8Util.skipUntilEOF(in));
0:         assertEquals(0, UTF8Util.skipUntilEOF(in)); // Nothing left here.
1:         try {
1:             UTF8Util.skipFully(in, 1L);
1:             fail("Should have failed because the stream has been drained.");
1:         } catch (EOFException eofe) {
1:             // As expected, do nothing
1:         }
1:     }
1: 
1:     /**
1:      * Returns a suite of tests.
1:      */
1:     public static Test suite() {
0:         return new TestSuite(UTF8UtilTest.class, "UTF8Util tests");
1:     }
1: }
============================================================================