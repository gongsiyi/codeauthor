1:6bd3847: /*
1:6bd3847:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby5866TriggerOrderTest
1:6bd3847:  *
1:6bd3847:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6bd3847:  * contributor license agreements.  See the NOTICE file distributed with
1:6bd3847:  * this work for additional information regarding copyright ownership.
1:6bd3847:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6bd3847:  * (the "License"); you may not use this file except in compliance with
1:6bd3847:  * the License.  You may obtain a copy of the License at
1:6bd3847:  *
1:6bd3847:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6bd3847:  *
1:6bd3847:  * Unless required by applicable law or agreed to in writing,
1:6bd3847:  * software distributed under the License is distributed on an
1:6bd3847:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:6bd3847:  * either express or implied. See the License for the specific
1:6bd3847:  * language governing permissions and limitations under the License.
1:6bd3847:  */
1:6bd3847: 
1:6bd3847: package org.apache.derbyTesting.functionTests.tests.lang;
1:6bd3847: 
1:6bd3847: import java.sql.PreparedStatement;
1:6bd3847: import java.sql.ResultSet;
1:6bd3847: import java.sql.SQLException;
1:6bd3847: import java.sql.Statement;
1:6bd3847: import java.sql.Timestamp;
1:6bd3847: import java.util.Calendar;
1:6bd3847: import java.util.TimeZone;
1:6bd3847: import junit.framework.Test;
1:6bd3847: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:6bd3847: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:6bd3847: import org.apache.derbyTesting.junit.JDBC;
1:6bd3847: import org.apache.derbyTesting.junit.TestConfiguration;
1:6bd3847: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
1:6bd3847: 
1:6bd3847: /**
1:6bd3847:  * <p>
1:6bd3847:  * Test that triggers for a specific event execute in the order in which they
1:6bd3847:  * were defined. This is a regression test case for DERBY-5866, where triggers
1:6bd3847:  * were seen to fire in a nondeterministic order if the system clock was too
1:6bd3847:  * coarse-grained and gave the triggers identical creation time stamps. It
1:6bd3847:  * also tests that triggers fire in the correct order when the triggers are
1:6bd3847:  * created in different time zones, or right before or after daylight saving.
1:6bd3847:  * </p>
1:6bd3847:  */
1:6bd3847: public class Derby5866TriggerOrderTest extends BaseJDBCTestCase {
1:6bd3847: 
1:6bd3847:     private final static TimeZone TIMEZONE =
1:6bd3847:             TimeZone.getTimeZone("Europe/Oslo");
1:6bd3847: 
1:6bd3847:     private final static String OVERRIDE_TIME_PROP =
1:6bd3847:             "derby.debug.overrideTriggerCreationTimestamp";
1:6bd3847: 
1:6bd3847:     public Derby5866TriggerOrderTest(String name) {
1:6bd3847:         super(name);
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     public static Test suite() {
1:6bd3847:         Test test = new CleanDatabaseTestSetup(
1:6bd3847:             TestConfiguration.embeddedSuite(Derby5866TriggerOrderTest.class));
1:6bd3847:         return new TimeZoneTestSetup(test, TIMEZONE);
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     @Override
1:6bd3847:     protected void tearDown() throws Exception {
1:6bd3847:         // Reset the time zone after each test case, since the test case
1:6bd3847:         // may have altered it.
1:6bd3847:         TimeZoneTestSetup.setDefault(TIMEZONE);
1:6bd3847: 
1:6bd3847:         // Clear the system property that overrides the trigger creation
1:6bd3847:         // timestamps.
1:6bd3847:         removeSystemProperty(OVERRIDE_TIME_PROP);
1:6bd3847: 
1:6bd3847:         super.tearDown();
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Test that triggers fire in the correct order if the time zone changes
1:6bd3847:      * between two CREATE TRIGGER operations in a way that makes it look like
1:6bd3847:      * the second trigger was created before the first trigger.
1:6bd3847:      */
1:6bd3847:     public void testTimeZoneChange() throws SQLException {
1:6bd3847:         setAutoCommit(false);
1:6bd3847: 
1:6bd3847:         Statement s = createStatement();
1:6bd3847:         s.execute("create table t1(x int)");
1:6bd3847:         s.execute("create table t2(x int generated always as identity, "
1:6bd3847:                 + "y varchar(128))");
1:6bd3847: 
1:6bd3847:         // Create the first trigger while in the GMT time zone.
1:6bd3847:         s.execute("create trigger tr1 after insert on t1 "
1:6bd3847:                 + "insert into t2(y) values 'I won! :)'");
1:6bd3847: 
1:6bd3847:         // Travel back in time. Sort of... At least that's how it's perceived
1:6bd3847:         // until TIMESTAMP WITH TIMEZONE is supported, and SYSTRIGGERS is
1:6bd3847:         // updated to use it (DERBY-5974).
1:6bd3847:         TimeZoneTestSetup.setDefault(TimeZone.getTimeZone("GMT-8:00"));
1:6bd3847:         s.execute("create trigger tr2 after insert on t1 "
1:6bd3847:                 + "insert into t2(y) values 'I lost... :('");
1:6bd3847: 
1:6bd3847:         // Fire the triggers.
1:6bd3847:         s.execute("insert into t1 values 1");
1:6bd3847: 
1:6bd3847:         // Check which of the triggers was executed first. It should have been
1:6bd3847:         // the trigger that was defined first. Before DERBY-5866, they fired
1:6bd3847:         // in the opposite order.
1:6bd3847:         JDBC.assertFullResultSet(s.executeQuery("select * from t2 order by x"),
1:6bd3847:                                  new String[][] {
1:6bd3847:                                      { "1", "I won! :)" },
1:6bd3847:                                      { "2", "I lost... :(" },
1:6bd3847:                                  });
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Test that triggers fire in the correct order if the clock shows the
1:6bd3847:      * same creation time for all the triggers.
1:6bd3847:      */
1:6bd3847:     public void testEqualTimestamps() throws SQLException {
1:6bd3847:         Timestamp now = new Timestamp(System.currentTimeMillis());
1:6bd3847:         testSpecificTimestamps(now, now, now);
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Test that the triggers fire in creation order even if the clock goes
1:6bd3847:      * backwards.
1:6bd3847:      */
1:6bd3847:     public void testReversedTimestamps() throws SQLException {
1:6bd3847:         long now = System.currentTimeMillis();
1:6bd3847:         testSpecificTimestamps(new Timestamp(now), new Timestamp(now - 1),
1:6bd3847:                                new Timestamp(now - 2), new Timestamp(now - 3));
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Test that triggers fire in the correct order if they are created around
1:6bd3847:      * the daylight saving time switchover.
1:6bd3847:      */
1:6bd3847:     public void testCrossDaylightSaving() throws SQLException {
1:6bd3847:         // Use a GMT-based calendar to prevent ambiguities. For example, with
1:6bd3847:         // a CET-based calendar, it would be ambiguous whether 2014-10-26
1:6bd3847:         // 02:45:00 means 2014-10-26 02:45:00 CET or 2014-10-26 02:45:00 CEST.
1:6bd3847:         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
1:6bd3847: 
1:6bd3847:         // 15 min before Central European Time switches to DST.
1:6bd3847:         cal.set(2014, Calendar.MARCH, 30, 0, 45, 0);
1:6bd3847: 
1:6bd3847:         // Test that triggers are ordered correctly if they are created
1:6bd3847:         // 15 min before switch and 15 min after switch.
1:6bd3847:         testSpecificTimestamps(new Timestamp(cal.getTimeInMillis()),
1:6bd3847:                                new Timestamp(cal.getTimeInMillis() + 1800000));
1:6bd3847: 
1:6bd3847:         // 15 min before Central European Time switches from DST.
1:6bd3847:         cal.clear();
1:6bd3847:         cal.set(2014, Calendar.OCTOBER, 26, 0, 45, 0);
1:6bd3847: 
1:6bd3847:         // Test that triggers are ordered correctly if they are created
1:6bd3847:         // 15 min before switch and 15 min after switch.
1:6bd3847:         testSpecificTimestamps(new Timestamp(cal.getTimeInMillis()),
1:6bd3847:                                new Timestamp(cal.getTimeInMillis() + 1800000));
1:6bd3847: 
1:6bd3847:         // Last millisecond before switch to DST.
1:6bd3847:         cal.clear();
1:6bd3847:         cal.set(2014, Calendar.MARCH, 30, 0, 59, 59);
1:6bd3847:         cal.set(Calendar.MILLISECOND, 999);
1:6bd3847:         Timestamp ts = new Timestamp(cal.getTimeInMillis());
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847: 
1:6bd3847:         // Last millisecond before switch from DST.
1:6bd3847:         cal.clear();
1:6bd3847:         cal.set(2014, Calendar.OCTOBER, 26, 0, 59, 59);
1:6bd3847:         cal.set(Calendar.MILLISECOND, 999);
1:6bd3847:         ts = new Timestamp(cal.getTimeInMillis());
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Test that triggers created before the epoch (Jan 1 1970) fire in the
1:6bd3847:      * correct order.
1:6bd3847:      */
1:6bd3847:     public void testPreEpoch() throws SQLException {
1:6bd3847:         // 24 hours before the epoch
1:6bd3847:         Timestamp ts = new Timestamp(-3600L * 24 * 1000);
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847: 
1:6bd3847:         // Test with some non-zero fractions as well.
1:6bd3847: 
1:6bd3847:         ts.setNanos(123000000);
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847: 
1:6bd3847:         ts.setNanos(567000000);
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847: 
1:6bd3847:         ts.setNanos(999000000);
1:6bd3847:         testSpecificTimestamps(ts, ts, ts);
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Helper method that creates triggers with the specified creation
1:6bd3847:      * timestamps and verifies that they fire in creation order. The creation
1:6bd3847:      * timestamps can only be overridden in debug builds. When running in a
1:6bd3847:      * non-debug build, this method will simply create the triggers without
1:6bd3847:      * overriding the creation timestamps, and verify that they fire in the
1:6bd3847:      * expected order.
1:6bd3847:      */
1:6bd3847:     private void testSpecificTimestamps(Timestamp... timestamps)
1:6bd3847:             throws SQLException {
1:6bd3847:         setAutoCommit(false);
1:6bd3847: 
1:6bd3847:         Statement s = createStatement();
1:6bd3847: 
1:6bd3847:         s.execute("create table t1(x int)");
1:6bd3847:         s.execute("create table t2(x int generated always as identity, y int)");
1:6bd3847: 
1:6bd3847:         // Create the triggers.
1:6bd3847:         for (int i = 0; i < timestamps.length; i++) {
1:6bd3847:             overrideTriggerCreationTime(timestamps[i]);
1:6bd3847:             s.execute("create trigger tr" + (i + 1) + " after insert on t1 "
1:6bd3847:                     + "insert into t2(y) values " + (i + 1));
1:6bd3847:         }
1:6bd3847: 
1:6bd3847:         // Fire the triggers.
1:6bd3847:         s.execute("insert into t1 values 1");
1:6bd3847: 
1:6bd3847:         // Verify that the triggers executed in the correct order.
1:6bd3847:         ResultSet rs = s.executeQuery("select * from t2 order by x");
1:6bd3847:         for (int i = 1; i <= timestamps.length; i++) {
1:6bd3847:             if (rs.next()) {
1:6bd3847:                 assertEquals("X", i, rs.getInt("X"));
1:6bd3847:                 assertEquals("Y", i, rs.getInt("Y"));
1:6bd3847:             } else {
1:6bd3847:                 fail("Row " + i + " was missing");
1:6bd3847:             }
1:6bd3847:         }
1:6bd3847:         JDBC.assertEmpty(rs);
1:6bd3847: 
1:6bd3847:         // Verify that the CREATIONTIMESTAMP column in SYS.SYSTRIGGERS is
1:6bd3847:         // monotonically increasing.
1:6bd3847:         PreparedStatement ps = prepareStatement(
1:6bd3847:                 "select * from sys.sysschemas natural join sys.systriggers "
1:6bd3847:                 + "where schemaname = ? and triggername like 'TR%' "
1:6bd3847:                 + "order by creationtimestamp");
1:6bd3847:         ps.setString(1, getTestConfiguration().getUserName());
1:6bd3847:         rs = ps.executeQuery();
1:6bd3847:         Timestamp prev = null;
1:6bd3847:         for (int i = 1; i <= timestamps.length; i++) {
1:6bd3847:             assertTrue(rs.next());
1:6bd3847:             assertEquals("TR" + i, rs.getString("TRIGGERNAME"));
1:6bd3847:             Timestamp ts = rs.getTimestamp("CREATIONTIMESTAMP");
1:6bd3847:             assertNotNull(ts);
1:6bd3847:             if (prev != null && !prev.before(ts)) {
1:6bd3847:                 fail(prev + " expected to be before " + ts);
1:6bd3847:             }
1:6bd3847:             prev = ts;
1:6bd3847:         }
1:6bd3847:         JDBC.assertEmpty(rs);
1:6bd3847: 
1:6bd3847:         rollback();
1:6bd3847:     }
1:6bd3847: 
1:6bd3847:     /**
1:6bd3847:      * Set a system property that makes the next CREATE TRIGGER operation
1:6bd3847:      * use the specified timestamp instead of the current time when
1:6bd3847:      * constructing the creation timestamp.
1:6bd3847:      */
1:6bd3847:     private void overrideTriggerCreationTime(Timestamp ts) {
1:6bd3847:         setSystemProperty(OVERRIDE_TIME_PROP, String.valueOf(ts.getTime()));
1:6bd3847:     }
1:6bd3847: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6bd3847
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby5866TriggerOrderTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: import java.util.TimeZone;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
1: 
1: /**
1:  * <p>
1:  * Test that triggers for a specific event execute in the order in which they
1:  * were defined. This is a regression test case for DERBY-5866, where triggers
1:  * were seen to fire in a nondeterministic order if the system clock was too
1:  * coarse-grained and gave the triggers identical creation time stamps. It
1:  * also tests that triggers fire in the correct order when the triggers are
1:  * created in different time zones, or right before or after daylight saving.
1:  * </p>
1:  */
1: public class Derby5866TriggerOrderTest extends BaseJDBCTestCase {
1: 
1:     private final static TimeZone TIMEZONE =
1:             TimeZone.getTimeZone("Europe/Oslo");
1: 
1:     private final static String OVERRIDE_TIME_PROP =
1:             "derby.debug.overrideTriggerCreationTimestamp";
1: 
1:     public Derby5866TriggerOrderTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         Test test = new CleanDatabaseTestSetup(
1:             TestConfiguration.embeddedSuite(Derby5866TriggerOrderTest.class));
1:         return new TimeZoneTestSetup(test, TIMEZONE);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         // Reset the time zone after each test case, since the test case
1:         // may have altered it.
1:         TimeZoneTestSetup.setDefault(TIMEZONE);
1: 
1:         // Clear the system property that overrides the trigger creation
1:         // timestamps.
1:         removeSystemProperty(OVERRIDE_TIME_PROP);
1: 
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Test that triggers fire in the correct order if the time zone changes
1:      * between two CREATE TRIGGER operations in a way that makes it look like
1:      * the second trigger was created before the first trigger.
1:      */
1:     public void testTimeZoneChange() throws SQLException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
1:         s.execute("create table t1(x int)");
1:         s.execute("create table t2(x int generated always as identity, "
1:                 + "y varchar(128))");
1: 
1:         // Create the first trigger while in the GMT time zone.
1:         s.execute("create trigger tr1 after insert on t1 "
1:                 + "insert into t2(y) values 'I won! :)'");
1: 
1:         // Travel back in time. Sort of... At least that's how it's perceived
1:         // until TIMESTAMP WITH TIMEZONE is supported, and SYSTRIGGERS is
1:         // updated to use it (DERBY-5974).
1:         TimeZoneTestSetup.setDefault(TimeZone.getTimeZone("GMT-8:00"));
1:         s.execute("create trigger tr2 after insert on t1 "
1:                 + "insert into t2(y) values 'I lost... :('");
1: 
1:         // Fire the triggers.
1:         s.execute("insert into t1 values 1");
1: 
1:         // Check which of the triggers was executed first. It should have been
1:         // the trigger that was defined first. Before DERBY-5866, they fired
1:         // in the opposite order.
1:         JDBC.assertFullResultSet(s.executeQuery("select * from t2 order by x"),
1:                                  new String[][] {
1:                                      { "1", "I won! :)" },
1:                                      { "2", "I lost... :(" },
1:                                  });
1:     }
1: 
1:     /**
1:      * Test that triggers fire in the correct order if the clock shows the
1:      * same creation time for all the triggers.
1:      */
1:     public void testEqualTimestamps() throws SQLException {
1:         Timestamp now = new Timestamp(System.currentTimeMillis());
1:         testSpecificTimestamps(now, now, now);
1:     }
1: 
1:     /**
1:      * Test that the triggers fire in creation order even if the clock goes
1:      * backwards.
1:      */
1:     public void testReversedTimestamps() throws SQLException {
1:         long now = System.currentTimeMillis();
1:         testSpecificTimestamps(new Timestamp(now), new Timestamp(now - 1),
1:                                new Timestamp(now - 2), new Timestamp(now - 3));
1:     }
1: 
1:     /**
1:      * Test that triggers fire in the correct order if they are created around
1:      * the daylight saving time switchover.
1:      */
1:     public void testCrossDaylightSaving() throws SQLException {
1:         // Use a GMT-based calendar to prevent ambiguities. For example, with
1:         // a CET-based calendar, it would be ambiguous whether 2014-10-26
1:         // 02:45:00 means 2014-10-26 02:45:00 CET or 2014-10-26 02:45:00 CEST.
1:         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
1: 
1:         // 15 min before Central European Time switches to DST.
1:         cal.set(2014, Calendar.MARCH, 30, 0, 45, 0);
1: 
1:         // Test that triggers are ordered correctly if they are created
1:         // 15 min before switch and 15 min after switch.
1:         testSpecificTimestamps(new Timestamp(cal.getTimeInMillis()),
1:                                new Timestamp(cal.getTimeInMillis() + 1800000));
1: 
1:         // 15 min before Central European Time switches from DST.
1:         cal.clear();
1:         cal.set(2014, Calendar.OCTOBER, 26, 0, 45, 0);
1: 
1:         // Test that triggers are ordered correctly if they are created
1:         // 15 min before switch and 15 min after switch.
1:         testSpecificTimestamps(new Timestamp(cal.getTimeInMillis()),
1:                                new Timestamp(cal.getTimeInMillis() + 1800000));
1: 
1:         // Last millisecond before switch to DST.
1:         cal.clear();
1:         cal.set(2014, Calendar.MARCH, 30, 0, 59, 59);
1:         cal.set(Calendar.MILLISECOND, 999);
1:         Timestamp ts = new Timestamp(cal.getTimeInMillis());
1:         testSpecificTimestamps(ts, ts, ts);
1: 
1:         // Last millisecond before switch from DST.
1:         cal.clear();
1:         cal.set(2014, Calendar.OCTOBER, 26, 0, 59, 59);
1:         cal.set(Calendar.MILLISECOND, 999);
1:         ts = new Timestamp(cal.getTimeInMillis());
1:         testSpecificTimestamps(ts, ts, ts);
1:     }
1: 
1:     /**
1:      * Test that triggers created before the epoch (Jan 1 1970) fire in the
1:      * correct order.
1:      */
1:     public void testPreEpoch() throws SQLException {
1:         // 24 hours before the epoch
1:         Timestamp ts = new Timestamp(-3600L * 24 * 1000);
1:         testSpecificTimestamps(ts, ts, ts);
1: 
1:         // Test with some non-zero fractions as well.
1: 
1:         ts.setNanos(123000000);
1:         testSpecificTimestamps(ts, ts, ts);
1: 
1:         ts.setNanos(567000000);
1:         testSpecificTimestamps(ts, ts, ts);
1: 
1:         ts.setNanos(999000000);
1:         testSpecificTimestamps(ts, ts, ts);
1:     }
1: 
1:     /**
1:      * Helper method that creates triggers with the specified creation
1:      * timestamps and verifies that they fire in creation order. The creation
1:      * timestamps can only be overridden in debug builds. When running in a
1:      * non-debug build, this method will simply create the triggers without
1:      * overriding the creation timestamps, and verify that they fire in the
1:      * expected order.
1:      */
1:     private void testSpecificTimestamps(Timestamp... timestamps)
1:             throws SQLException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
1: 
1:         s.execute("create table t1(x int)");
1:         s.execute("create table t2(x int generated always as identity, y int)");
1: 
1:         // Create the triggers.
1:         for (int i = 0; i < timestamps.length; i++) {
1:             overrideTriggerCreationTime(timestamps[i]);
1:             s.execute("create trigger tr" + (i + 1) + " after insert on t1 "
1:                     + "insert into t2(y) values " + (i + 1));
1:         }
1: 
1:         // Fire the triggers.
1:         s.execute("insert into t1 values 1");
1: 
1:         // Verify that the triggers executed in the correct order.
1:         ResultSet rs = s.executeQuery("select * from t2 order by x");
1:         for (int i = 1; i <= timestamps.length; i++) {
1:             if (rs.next()) {
1:                 assertEquals("X", i, rs.getInt("X"));
1:                 assertEquals("Y", i, rs.getInt("Y"));
1:             } else {
1:                 fail("Row " + i + " was missing");
1:             }
1:         }
1:         JDBC.assertEmpty(rs);
1: 
1:         // Verify that the CREATIONTIMESTAMP column in SYS.SYSTRIGGERS is
1:         // monotonically increasing.
1:         PreparedStatement ps = prepareStatement(
1:                 "select * from sys.sysschemas natural join sys.systriggers "
1:                 + "where schemaname = ? and triggername like 'TR%' "
1:                 + "order by creationtimestamp");
1:         ps.setString(1, getTestConfiguration().getUserName());
1:         rs = ps.executeQuery();
1:         Timestamp prev = null;
1:         for (int i = 1; i <= timestamps.length; i++) {
1:             assertTrue(rs.next());
1:             assertEquals("TR" + i, rs.getString("TRIGGERNAME"));
1:             Timestamp ts = rs.getTimestamp("CREATIONTIMESTAMP");
1:             assertNotNull(ts);
1:             if (prev != null && !prev.before(ts)) {
1:                 fail(prev + " expected to be before " + ts);
1:             }
1:             prev = ts;
1:         }
1:         JDBC.assertEmpty(rs);
1: 
1:         rollback();
1:     }
1: 
1:     /**
1:      * Set a system property that makes the next CREATE TRIGGER operation
1:      * use the specified timestamp instead of the current time when
1:      * constructing the creation timestamp.
1:      */
1:     private void overrideTriggerCreationTime(Timestamp ts) {
1:         setSystemProperty(OVERRIDE_TIME_PROP, String.valueOf(ts.getTime()));
1:     }
1: }
============================================================================