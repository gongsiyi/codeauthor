1:fe77ca5: /*
15:fe77ca5: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.TimestampTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:fe77ca5: import java.sql.Types;
1:fe77ca5: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:fe77ca5: 
1:4469400: public class TimestampTypeCompiler extends BaseTypeCompiler
4:fe77ca5: {
1:fe77ca5: 	/* TypeCompiler methods */	
3:fe77ca5: 	/**
1:fe77ca5: 	 * User types are convertible to other user types only if
1:fe77ca5: 	 * (for now) they are the same type and are being used to
1:fe77ca5: 	 * implement some JDBC type.  This is sufficient for
1:fe77ca5: 	 * date/time types; it may be generalized later for e.g.
1:fe77ca5: 	 * comparison of any user type with one of its subtypes.
2:fe77ca5: 	 *
1:fe77ca5: 	 * @see TypeCompiler#convertible 
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:fe77ca5: 	public boolean convertible(TypeId otherType, 
1:fe77ca5: 							   boolean forDataTypeFunction)
1:fe77ca5: 	{
1:fe77ca5: 		if (otherType.isStringTypeId()&& 
1:fe77ca5: 			(!otherType.isLongConcatableTypeId()))
1:fe77ca5: 		{
2:fe77ca5: 			return true;
4:fe77ca5: 		}
1:fe77ca5: 		
2:fe77ca5: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** At this point, we have only date/time.  If
1:fe77ca5: 		** same type, convert always ok.
1:fe77ca5: 		*/
1:fe77ca5: 		if (otherJDBCTypeId == Types.TIMESTAMP)
1:fe77ca5: 		{
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** Otherwise, we can convert timestamp to
1:fe77ca5: 		** date or time only.
1:fe77ca5: 		*/
1:fe77ca5: 		return ((otherJDBCTypeId == Types.DATE) ||
1:fe77ca5: 				(otherJDBCTypeId == Types.TIME));
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5:         /**
1:fe77ca5:          * Tell whether this type (timestamp) is compatible with the given type.
1:fe77ca5:          *
1:fe77ca5:          * @param otherType     The TypeId of the other type.
1:fe77ca5:          */
1:fe77ca5: 	public boolean compatible(TypeId otherType)
1:fe77ca5: 	{
1:fe77ca5: 		if (otherType.isStringTypeId() &&
1:fe77ca5: 			(!otherType.isLongConcatableTypeId()))
1:fe77ca5: 		{
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** Both are timestamp datatypes and hence compatible.
1:fe77ca5: 		*/
1:fe77ca5: 		return (getStoredFormatIdFromTypeId() ==
1:fe77ca5: 				otherType.getTypeFormatId());
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * User types are storable into other user types that they
1:fe77ca5: 	 * are assignable to. The other type must be a subclass of
1:fe77ca5: 	 * this type, or implement this type as one of its interfaces.
1:fe77ca5: 	 *
1:fe77ca5: 	 * Built-in types are also storable into user types when the built-in
1:fe77ca5: 	 * type's corresponding Java type is assignable to the user type.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param otherType the type of the instance to store into this type.
2:fe77ca5: 	 * @param cf		A ClassFactory
1:fe77ca5: 	 * @return true if otherType is storable into this type, else false.
1:fe77ca5: 	 */
1:fe77ca5: 	public boolean storable(TypeId otherType, ClassFactory cf)
1:fe77ca5: 	{
1:fe77ca5: 		int	otherJDBCTypeId = otherType.getJDBCTypeId();
1:fe77ca5: 
1:fe77ca5: 		if (otherJDBCTypeId == Types.TIMESTAMP ||
1:fe77ca5: 			(otherJDBCTypeId == Types.CHAR) ||
1:fe77ca5: 			(otherJDBCTypeId == Types.VARCHAR))
1:fe77ca5: 		{
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return cf.getClassInspector().assignableTo(
1:fe77ca5: 			   otherType.getCorrespondingJavaTypeName(),
1:fe77ca5: 			   "java.sql.Timestamp");
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/** @see TypeCompiler#interfaceName */
1:fe77ca5: 	public String interfaceName()
1:fe77ca5: 	{
1:fe77ca5: 		return ClassName.DateTimeDataValue;
1:fe77ca5: 	}
1:fe77ca5: 			
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:fe77ca5: 	 */
1:fe77ca5: 
1:fe77ca5: 	public String getCorrespondingPrimitiveTypeName()
1:fe77ca5: 	{
1:fe77ca5: 		return "java.sql.Timestamp";
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see TypeCompiler#getCastToCharWidth
1:fe77ca5: 	 */
1:fe77ca5: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1:fe77ca5: 	{
1:fe77ca5: 		return 26; // DATE TIME.milliseconds (extra few for good measure)
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public double estimatedMemoryUsage(DataTypeDescriptor dtd)
1:fe77ca5: 	{
1:fe77ca5: 		return 12.0;
1:fe77ca5: 	}
1:44fad02: 	String nullMethodName()
1:fe77ca5: 	{
1:fe77ca5: 		return "getNullTimestamp";
1:fe77ca5: 	}
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class TimestampTypeCompiler extends BaseTypeCompiler
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class TimestampTypeCompiler extends BaseTypeCompiler
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: 	String nullMethodName()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.TimestampTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.Types;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
0: public class TimestampTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/* TypeCompiler methods */
1: 
1: 	/**
0: 	 * Timestamps are comparable to timestamps and to comparable
0: 	 * user types.
1: 	 *
0: 	 * @param otherType the type of the instance to compare with this type.
0: 	 * @param forEquals True if this is an = or <> comparison, false
0: 	 *					otherwise.
1: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is comparable to this type, else false.
1: 	 */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
1: 	{
0: 		 return comparable(getTypeId(), otherType, forEquals, cf);
1: 	}
1: 
0: 	boolean comparable(TypeId leftType,
0: 						TypeId otherType,
0: 						boolean forEquals,
0: 						ClassFactory cf)
1:     {
1: 
1: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
1: 
0: 		// Long types cannot be compared
0: 		if (otherType.isLongConcatableTypeId())
0: 			return false;
1: 
0: 		TypeCompiler otherTC = getTypeCompiler(otherType);
0: 		if (otherJDBCTypeId == Types.TIMESTAMP || otherType.isStringTypeId())
1: 			return true;
1: 
0: 		/* User types know the rules for what can be compared to them */
0: 		if (otherType.userType())
1: 		{
0: 			return otherTC.comparable(getTypeId(), forEquals, cf);
1: 		}
1: 
0: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * User types are convertible to other user types only if
1: 	 * (for now) they are the same type and are being used to
1: 	 * implement some JDBC type.  This is sufficient for
1: 	 * date/time types; it may be generalized later for e.g.
1: 	 * comparison of any user type with one of its subtypes.
1: 	 *
1: 	 * @see TypeCompiler#convertible 
1: 	 *
1: 	 */
1: 	public boolean convertible(TypeId otherType, 
1: 							   boolean forDataTypeFunction)
1: 	{
1: 		if (otherType.isStringTypeId()&& 
1: 			(!otherType.isLongConcatableTypeId()))
1: 		{
1: 			return true;
1: 		}
1: 		
1: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
1: 
1: 		/*
1: 		** At this point, we have only date/time.  If
1: 		** same type, convert always ok.
1: 		*/
1: 		if (otherJDBCTypeId == Types.TIMESTAMP)
1: 		{
1: 			return true;
1: 		}
1: 
1: 		/*
1: 		** Otherwise, we can convert timestamp to
1: 		** date or time only.
1: 		*/
1: 		return ((otherJDBCTypeId == Types.DATE) ||
1: 				(otherJDBCTypeId == Types.TIME));
1: 	}
1: 
1:         /**
1:          * Tell whether this type (timestamp) is compatible with the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 	public boolean compatible(TypeId otherType)
1: 	{
1: 		if (otherType.isStringTypeId() &&
1: 			(!otherType.isLongConcatableTypeId()))
1: 		{
1: 			return true;
1: 		}
1: 
1: 		/*
1: 		** Both are timestamp datatypes and hence compatible.
1: 		*/
1: 		return (getStoredFormatIdFromTypeId() ==
1: 				otherType.getTypeFormatId());
1: 	}
1: 
1: 	/**
1: 	 * User types are storable into other user types that they
1: 	 * are assignable to. The other type must be a subclass of
1: 	 * this type, or implement this type as one of its interfaces.
1: 	 *
1: 	 * Built-in types are also storable into user types when the built-in
1: 	 * type's corresponding Java type is assignable to the user type.
1: 	 *
1: 	 * @param otherType the type of the instance to store into this type.
1: 	 * @param cf		A ClassFactory
1: 	 * @return true if otherType is storable into this type, else false.
1: 	 */
1: 	public boolean storable(TypeId otherType, ClassFactory cf)
1: 	{
1: 		int	otherJDBCTypeId = otherType.getJDBCTypeId();
1: 
1: 		if (otherJDBCTypeId == Types.TIMESTAMP ||
1: 			(otherJDBCTypeId == Types.CHAR) ||
1: 			(otherJDBCTypeId == Types.VARCHAR))
1: 		{
1: 			return true;
1: 		}
1: 
1: 		return cf.getClassInspector().assignableTo(
1: 			   otherType.getCorrespondingJavaTypeName(),
1: 			   "java.sql.Timestamp");
1: 	}
1: 
1: 	/** @see TypeCompiler#interfaceName */
1: 	public String interfaceName()
1: 	{
1: 		return ClassName.DateTimeDataValue;
1: 	}
1: 			
1: 	/**
1: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1: 	 */
1: 
1: 	public String getCorrespondingPrimitiveTypeName()
1: 	{
1: 		return "java.sql.Timestamp";
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCastToCharWidth
1: 	 */
1: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1: 	{
1: 		return 26; // DATE TIME.milliseconds (extra few for good measure)
1: 	}
1: 
1: 	public double estimatedMemoryUsage(DataTypeDescriptor dtd)
1: 	{
1: 		return 12.0;
1: 	}
0: 	protected String nullMethodName()
1: 	{
1: 		return "getNullTimestamp";
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
0: 	/* TypeCompiler methods */	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: public class TimestampTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/* TypeCompiler methods */
0: 
0: 	/**
0: 	 * Timestamps are comparable to timestamps and to comparable
0: 	 * user types.
0: 	 *
0: 	 * @param otherType the type of the instance to compare with this type.
0: 	 * @param forEquals True if this is an = or <> comparison, false
0: 	 *					otherwise.
0: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is comparable to this type, else false.
0: 	 */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
0: 	{
0: 		 return comparable(getTypeId(), otherType, forEquals, cf);
0: 	}
0: 
0: 	boolean comparable(TypeId leftType,
0: 						TypeId otherType,
0: 						boolean forEquals,
0: 						ClassFactory cf)
0:     {
0: 
0: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
0: 
0: 		// Long types cannot be compared
0: 		if (otherType.isLongConcatableTypeId())
0: 			return false;
0: 
0: 		TypeCompiler otherTC = getTypeCompiler(otherType);
0: 		if (otherJDBCTypeId == Types.TIMESTAMP || otherType.isStringTypeId())
0: 			return true;
0: 
0: 		/* User types know the rules for what can be compared to them */
0: 		if (otherType.userType())
0: 		{
0: 			return otherTC.comparable(getTypeId(), forEquals, cf);
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * User types are convertible to other user types only if
0: 	 * (for now) they are the same type and are being used to
0: 	 * implement some JDBC type.  This is sufficient for
0: 	 * date/time types; it may be generalized later for e.g.
0: 	 * comparison of any user type with one of its subtypes.
0: 	 *
0: 	 * @see TypeCompiler#convertible 
0: 	 *
0: 	 */
0: 	public boolean convertible(TypeId otherType, 
0: 							   boolean forDataTypeFunction)
0: 	{
0: 		if (otherType.isStringTypeId()&& 
0: 			(!otherType.isLongConcatableTypeId()))
0: 		{
0: 			return true;
0: 		}
0: 		
0: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
0: 
0: 		/*
0: 		** At this point, we have only date/time.  If
0: 		** same type, convert always ok.
0: 		*/
0: 		if (otherJDBCTypeId == Types.TIMESTAMP)
0: 		{
0: 			return true;
0: 		}
0: 
0: 		/*
0: 		** Otherwise, we can convert timestamp to
0: 		** date or time only.
0: 		*/
0: 		return ((otherJDBCTypeId == Types.DATE) ||
0: 				(otherJDBCTypeId == Types.TIME));
0: 	}
0: 
0:         /**
0:          * Tell whether this type (timestamp) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		if (otherType.isStringTypeId() &&
0: 			(!otherType.isLongConcatableTypeId()))
0: 		{
0: 			return true;
0: 		}
0: 
0: 		/*
0: 		** Both are timestamp datatypes and hence compatible.
0: 		*/
0: 		return (getStoredFormatIdFromTypeId() ==
0: 				otherType.getTypeFormatId());
0: 	}
0: 
0: 	/**
0: 	 * User types are storable into other user types that they
0: 	 * are assignable to. The other type must be a subclass of
0: 	 * this type, or implement this type as one of its interfaces.
0: 	 *
0: 	 * Built-in types are also storable into user types when the built-in
0: 	 * type's corresponding Java type is assignable to the user type.
0: 	 *
0: 	 * @param otherType the type of the instance to store into this type.
0: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is storable into this type, else false.
0: 	 */
0: 	public boolean storable(TypeId otherType, ClassFactory cf)
0: 	{
0: 		int	otherJDBCTypeId = otherType.getJDBCTypeId();
0: 
0: 		if (otherJDBCTypeId == Types.TIMESTAMP ||
0: 			(otherJDBCTypeId == Types.CHAR) ||
0: 			(otherJDBCTypeId == Types.VARCHAR))
0: 		{
0: 			return true;
0: 		}
0: 
0: 		return cf.getClassInspector().assignableTo(
0: 			   otherType.getCorrespondingJavaTypeName(),
0: 			   "java.sql.Timestamp");
0: 	}
0: 
0: 	/** @see TypeCompiler#interfaceName */
0: 	public String interfaceName()
0: 	{
0: 		return ClassName.DateTimeDataValue;
0: 	}
0: 			
0: 	/**
0: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0: 	 */
0: 
0: 	public String getCorrespondingPrimitiveTypeName()
0: 	{
0: 		return "java.sql.Timestamp";
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCastToCharWidth
0: 	 */
0: 	public int getCastToCharWidth(DataTypeDescriptor dts)
0: 	{
0: 		return 26; // DATE TIME.milliseconds (extra few for good measure)
0: 	}
0: 
0: 	public double estimatedMemoryUsage(DataTypeDescriptor dtd)
0: 	{
0: 		return 12.0;
0: 	}
0: 	protected String nullMethodName()
0: 	{
0: 		return "getNullTimestamp";
0: 	}
0: }
============================================================================