1:aaea357: /*
3:aaea357: 
1:aaea357:    Derby - Class org.apache.derby.impl.store.raw.data.ChainAllocPageOperation
1:aaea357: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derby.impl.store.raw.data;
1:aaea357: 
1:aaea357: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:aaea357: 
1:aaea357: import org.apache.derby.iapi.error.StandardException;
1:aaea357: import org.apache.derby.iapi.store.raw.Transaction;
1:aaea357: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:aaea357: 
1:aaea357: import org.apache.derby.iapi.services.io.CompressedNumber;
1:aaea357: 
1:aaea357: import java.io.ObjectOutput;
1:aaea357: import java.io.IOException;
1:aaea357: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:aaea357: import java.io.ObjectInput;
1:aaea357: 
1:aaea357: 
1:aaea357: /**
1:aaea357: 
1:aaea357: Log operation to implement compressing space from a container and returning
1:aaea357: it to the operating system.
1:aaea357: 
1:aaea357: **/
1:aaea357: 
1:f824190: public class CompressSpacePageOperation extends PhysicalPageOperation
1:aaea357: {
1:aaea357:     /**************************************************************************
1:aaea357:      * Fields of the class
1:aaea357:      **************************************************************************
1:aaea357:      */
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * The new highest page on this allocation page.  The number is the
1:aaea357:      * offset of the page in the array of pages maintained by this 
1:aaea357:      * allocation page, for instance a value of 0 indicates all page except
1:aaea357:      * the first one are to be truncated.  If all pages are truncated then 
1:aaea357:      * the offset is set to -1.
1:aaea357:      **/
1:aaea357: 	protected int newHighestPage;	    
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * The number of allocated pages in this allocation page prior to 
1:aaea357:      * the truncate.  Note that all pages from NewHighestPage+1 through
1:aaea357:      * newHighestPage+num_pages_truncated should be FREE.
1:aaea357:      **/
1:aaea357: 	protected int num_pages_truncated; 
1:aaea357: 
1:aaea357:     /**************************************************************************
1:aaea357:      * Constructors for This class:
1:aaea357:      **************************************************************************
1:aaea357:      */
1:3546404:     CompressSpacePageOperation(
1:aaea357:     AllocPage   allocPage, 
1:aaea357:     int         highest_page, 
1:aaea357:     int         num_truncated)
1:aaea357: 		 throws StandardException
1:aaea357: 	{
1:aaea357: 		super(allocPage);
1:aaea357: 
1:aaea357:         newHighestPage      = highest_page;
1:aaea357:         num_pages_truncated = num_truncated;
1:aaea357: 	}
1:aaea357: 	
1:aaea357:     /**************************************************************************
1:aaea357:      * Public Methods of Formatable interface.
1:aaea357:      **************************************************************************
1:aaea357:      */
1:aaea357: 
1:aaea357: 	// no-arg constructor, required by Formatable 
1:aaea357: 	public CompressSpacePageOperation() { super(); }
1:aaea357: 
1:aaea357: 	public void writeExternal(ObjectOutput out) throws IOException 
1:aaea357: 	{
1:aaea357: 		super.writeExternal(out);
1:f824190: 		if( !(this instanceof CompressSpacePageOperation10_2) )
1:f824190: 		{
1:f824190: 			out.writeInt(newHighestPage);
1:f824190: 			CompressedNumber.writeInt(out, num_pages_truncated);
1:f824190: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/**
1:aaea357: 		@exception IOException error reading from log stream
1:aaea357: 		@exception ClassNotFoundException cannot read object from input
1:aaea357: 	*/
1:aaea357: 	public void readExternal(ObjectInput in)
1:aaea357: 		 throws IOException, ClassNotFoundException
1:aaea357: 	{
1:aaea357: 		super.readExternal(in);
1:f824190: 		if( !(this instanceof CompressSpacePageOperation10_2) )
1:f824190: 		{
1:f824190: 			newHighestPage      = in.readInt();
1:f824190: 			num_pages_truncated = CompressedNumber.readInt(in);
1:f824190: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/**
1:aaea357: 		Return my format identifier.
1:aaea357: 	*/
1:aaea357: 	public int getTypeFormatId() {
1:aaea357: 		return StoredFormatIds.LOGOP_COMPRESS_SPACE;
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**************************************************************************
1:aaea357:      * Public Methods of Loggable interface.
1:aaea357:      **************************************************************************
1:aaea357:      */
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Compress space from container.
1:aaea357:      * <p>
1:aaea357:      * Compress the indicate space from the container, returning the free
1:aaea357:      * pages to the OS.  Update the allocation page to reflect the file
1:aaea357:      * change.
1:aaea357:      *
1:aaea357:      * @param tran      transaction doing the operation.
1:aaea357:      * @param instant   log instant for this operation.
1:aaea357:      * @param in        unused by this log operation.
1:aaea357:      *
1:aaea357: 	 * @exception  StandardException  Standard exception policy.
1:aaea357:      **/
1:aaea357: 	public final void doMe(
1:aaea357:     Transaction         tran, 
1:aaea357:     LogInstant          instant, 
1:aaea357:     LimitObjectInput    in) 
1:aaea357: 		 throws StandardException
1:aaea357: 	{
1:aaea357: 		if (SanityManager.DEBUG) 
1:aaea357:         {
1:aaea357: 			SanityManager.ASSERT(this.page instanceof AllocPage);
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		((AllocPage)page).compressSpace(
1:aaea357:              instant, newHighestPage, num_pages_truncated);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**************************************************************************
1:aaea357:      * Public Methods of Undoable interface.
1:aaea357:      **************************************************************************
1:aaea357:      */
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Compress space undo.
1:aaea357:      * <p>
1:aaea357:      *
1:aaea357: 	 * @exception StandardException Thrown by methods I call 
1:aaea357:      * @see PhysicalPageOperation#undoMe
1:aaea357:      **/
1:aaea357: 	public void undoMe(
1:aaea357:     Transaction         xact, 
1:aaea357:     BasePage            undoPage, 
1:aaea357:     LogInstant          CLRInstant, 
1:aaea357:     LimitObjectInput    in)
1:aaea357: 		 throws StandardException
1:aaea357: 	{
1:aaea357: 		if (SanityManager.DEBUG) 
1:aaea357:         {
1:aaea357: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
1:aaea357: 			SanityManager.ASSERT(
1:aaea357:                 undoPage instanceof AllocPage, 
1:aaea357: 				"undo Page is not an allocPage");
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		((AllocPage)undoPage).undoCompressSpace(
1:aaea357:              CLRInstant, newHighestPage, num_pages_truncated);
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * method to support BeforeImageLogging
1:aaea357: 	 */
1:aaea357: 	public void restoreMe(
1:aaea357:     Transaction         xact, 
1:aaea357:     BasePage            undoPage, 
1:aaea357:     LogInstant          CLRinstant, 
1:aaea357:     LimitObjectInput    in)
1:aaea357: 	{
1:aaea357: 		// nobody should be calling this since there is no corresponding 
1:aaea357:         // BI operation.
1:aaea357: 		if (SanityManager.DEBUG)
1:aaea357: 			SanityManager.THROWASSERT(
1:aaea357:                 "cannot call restoreMe on CompressSpaceOperation.");
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/** debug */
1:aaea357: 	public String toString()
1:aaea357: 	{
1:aaea357: 		if (SanityManager.DEBUG)
1:aaea357: 		{
1:aaea357: 			String str = super.toString();
1:aaea357: 			str += " CompressSpaceOperation: " + 
1:aaea357:                 "newHighestPage = " + newHighestPage +
1:aaea357:                 ";num_pages_truncated = " + num_pages_truncated +
1:aaea357: 				" to " + getPageId();
1:aaea357: 
1:aaea357: 			return str;
1:aaea357: 		}
1:aaea357: 		else
1:aaea357: 			return null;
1:aaea357: 	}
1:aaea357: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     CompressSpacePageOperation(
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:f824190
/////////////////////////////////////////////////////////////////////////
1: public class CompressSpacePageOperation extends PhysicalPageOperation
/////////////////////////////////////////////////////////////////////////
1: 		if( !(this instanceof CompressSpacePageOperation10_2) )
1: 		{
1: 			out.writeInt(newHighestPage);
1: 			CompressedNumber.writeInt(out, num_pages_truncated);
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		if( !(this instanceof CompressSpacePageOperation10_2) )
1: 		{
1: 			newHighestPage      = in.readInt();
1: 			num_pages_truncated = CompressedNumber.readInt(in);
1: 		}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.raw.data.ChainAllocPageOperation
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: import java.io.ObjectInput;
1: 
1: 
1: /**
1: 
1: Log operation to implement compressing space from a container and returning
1: it to the operating system.
1: 
1: **/
1: 
0: public final class CompressSpacePageOperation extends PhysicalPageOperation
1: {
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * The new highest page on this allocation page.  The number is the
1:      * offset of the page in the array of pages maintained by this 
1:      * allocation page, for instance a value of 0 indicates all page except
1:      * the first one are to be truncated.  If all pages are truncated then 
1:      * the offset is set to -1.
1:      **/
1: 	protected int newHighestPage;	    
1: 
1:     /**
1:      * The number of allocated pages in this allocation page prior to 
1:      * the truncate.  Note that all pages from NewHighestPage+1 through
1:      * newHighestPage+num_pages_truncated should be FREE.
1:      **/
1: 	protected int num_pages_truncated; 
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
0: 	public CompressSpacePageOperation(
1:     AllocPage   allocPage, 
1:     int         highest_page, 
1:     int         num_truncated)
1: 		 throws StandardException
1: 	{
1: 		super(allocPage);
1: 
1:         newHighestPage      = highest_page;
1:         num_pages_truncated = num_truncated;
1: 	}
1: 	
1:     /**************************************************************************
1:      * Public Methods of Formatable interface.
1:      **************************************************************************
1:      */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public CompressSpacePageOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, newHighestPage);
0: 		CompressedNumber.writeInt(out, num_pages_truncated);
1: 	}
1: 
1: 	/**
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException cannot read object from input
1: 	*/
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
0: 		newHighestPage      = CompressedNumber.readInt(in);
0: 		num_pages_truncated = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_COMPRESS_SPACE;
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of Loggable interface.
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Compress space from container.
1:      * <p>
1:      * Compress the indicate space from the container, returning the free
1:      * pages to the OS.  Update the allocation page to reflect the file
1:      * change.
1:      *
1:      * @param tran      transaction doing the operation.
1:      * @param instant   log instant for this operation.
1:      * @param in        unused by this log operation.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public final void doMe(
1:     Transaction         tran, 
1:     LogInstant          instant, 
1:     LimitObjectInput    in) 
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) 
1:         {
1: 			SanityManager.ASSERT(this.page instanceof AllocPage);
1: 		}
1: 
1: 		((AllocPage)page).compressSpace(
1:              instant, newHighestPage, num_pages_truncated);
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of Undoable interface.
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Compress space undo.
1:      * <p>
1:      *
1: 	 * @exception StandardException Thrown by methods I call 
1:      * @see PhysicalPageOperation#undoMe
1:      **/
1: 	public void undoMe(
1:     Transaction         xact, 
1:     BasePage            undoPage, 
1:     LogInstant          CLRInstant, 
1:     LimitObjectInput    in)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) 
1:         {
1: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
1: 			SanityManager.ASSERT(
1:                 undoPage instanceof AllocPage, 
1: 				"undo Page is not an allocPage");
1: 		}
1: 
1: 		((AllocPage)undoPage).undoCompressSpace(
1:              CLRInstant, newHighestPage, num_pages_truncated);
1: 	}
1: 
1: 	/*
1: 	 * method to support BeforeImageLogging
1: 	 */
1: 	public void restoreMe(
1:     Transaction         xact, 
1:     BasePage            undoPage, 
1:     LogInstant          CLRinstant, 
1:     LimitObjectInput    in)
1: 	{
1: 		// nobody should be calling this since there is no corresponding 
1:         // BI operation.
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT(
1:                 "cannot call restoreMe on CompressSpaceOperation.");
1: 	}
1: 
1: 
1: 	/** debug */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String str = super.toString();
1: 			str += " CompressSpaceOperation: " + 
1:                 "newHighestPage = " + newHighestPage +
1:                 ";num_pages_truncated = " + num_pages_truncated +
1: 				" to " + getPageId();
1: 
1: 			return str;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bd54198
/////////////////////////////////////////////////////////////////////////
0: 		((AllocPage)undoPage).undoCompressSpace(
commit:04a2f12
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.store.raw.data.ChainAllocPageOperation
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: import java.io.ObjectInput;
0: 
0: 
0: /**
0: 
0: Log operation to implement compressing space from a container and returning
0: it to the operating system.
0: 
0: **/
0: 
0: public final class CompressSpacePageOperation extends PhysicalPageOperation
0: {
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * The new highest page on this allocation page.  The number is the
0:      * offset of the page in the array of pages maintained by this 
0:      * allocation page, for instance a value of 0 indicates all page except
0:      * the first one are to be truncated.  If all pages are truncated then 
0:      * the offset is set to -1.
0:      **/
0: 	protected int newHighestPage;	    
0: 
0:     /**
0:      * The number of allocated pages in this allocation page prior to 
0:      * the truncate.  Note that all pages from NewHighestPage+1 through
0:      * newHighestPage+num_pages_truncated should be FREE.
0:      **/
0: 	protected int num_pages_truncated; 
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 	public CompressSpacePageOperation(
0:     AllocPage   allocPage, 
0:     int         highest_page, 
0:     int         num_truncated)
0: 		 throws StandardException
0: 	{
0: 		super(allocPage);
0: 
0:         newHighestPage      = highest_page;
0:         num_pages_truncated = num_truncated;
0: 	}
0: 	
0:     /**************************************************************************
0:      * Public Methods of Formatable interface.
0:      **************************************************************************
0:      */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public CompressSpacePageOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, newHighestPage);
0: 		CompressedNumber.writeInt(out, num_pages_truncated);
0: 	}
0: 
0: 	/**
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException cannot read object from input
0: 	*/
0: 	public void readExternal(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		newHighestPage      = CompressedNumber.readInt(in);
0: 		num_pages_truncated = CompressedNumber.readInt(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_COMPRESS_SPACE;
0: 	}
0: 
0:     /**************************************************************************
0:      * Public Methods of Loggable interface.
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Compress space from container.
0:      * <p>
0:      * Compress the indicate space from the container, returning the free
0:      * pages to the OS.  Update the allocation page to reflect the file
0:      * change.
0:      *
0:      * @param tran      transaction doing the operation.
0:      * @param instant   log instant for this operation.
0:      * @param in        unused by this log operation.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public final void doMe(
0:     Transaction         tran, 
0:     LogInstant          instant, 
0:     LimitObjectInput    in) 
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG) 
0:         {
0: 			SanityManager.ASSERT(this.page instanceof AllocPage);
0: 		}
0: 
0: 		((AllocPage)page).compressSpace(
0:              instant, newHighestPage, num_pages_truncated);
0: 	}
0: 
0:     /**************************************************************************
0:      * Public Methods of Undoable interface.
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Compress space undo.
0:      * <p>
0:      *
0: 	 * @exception StandardException Thrown by methods I call 
0:      * @see PhysicalPageOperation#undoMe
0:      **/
0: 	public void undoMe(
0:     Transaction         xact, 
0:     BasePage            undoPage, 
0:     LogInstant          CLRInstant, 
0:     LimitObjectInput    in)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG) 
0:         {
0: 			SanityManager.ASSERT(undoPage != null, "undo Page null");
0: 			SanityManager.ASSERT(
0:                 undoPage instanceof AllocPage, 
0: 				"undo Page is not an allocPage");
0: 		}
0: 
0: 		((AllocPage)undoPage).compressSpace(
0:              CLRInstant, newHighestPage, num_pages_truncated);
0: 	}
0: 
0: 	/*
0: 	 * method to support BeforeImageLogging
0: 	 */
0: 	public void restoreMe(
0:     Transaction         xact, 
0:     BasePage            undoPage, 
0:     LogInstant          CLRinstant, 
0:     LimitObjectInput    in)
0: 	{
0: 		// nobody should be calling this since there is no corresponding 
0:         // BI operation.
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT(
0:                 "cannot call restoreMe on CompressSpaceOperation.");
0: 	}
0: 
0: 
0: 	/** debug */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String str = super.toString();
0: 			str += " CompressSpaceOperation: " + 
0:                 "newHighestPage = " + newHighestPage +
0:                 ";num_pages_truncated = " + num_pages_truncated +
0: 				" to " + getPageId();
0: 
0: 			return str;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: }
============================================================================