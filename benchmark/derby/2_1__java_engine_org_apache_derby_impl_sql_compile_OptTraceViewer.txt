1:b6cc9d7: /*
2:b6cc9d7: 
1:b6cc9d7:    Derby - Class org.apache.derby.impl.sql.compile.OptTraceViewer
1:b6cc9d7: 
1:b6cc9d7:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b6cc9d7:    contributor license agreements.  See the NOTICE file distributed with
1:b6cc9d7:    this work for additional information regarding copyright ownership.
1:b6cc9d7:    The ASF licenses this file to You under the Apache License, Version 2.0
1:b6cc9d7:    (the "License"); you may not use this file except in compliance with
1:b6cc9d7:    the License.  You may obtain a copy of the License at
1:b6cc9d7: 
1:b6cc9d7:       http://www.apache.org/licenses/LICENSE-2.0
1:b6cc9d7: 
1:b6cc9d7:    Unless required by applicable law or agreed to in writing, software
1:b6cc9d7:    distributed under the License is distributed on an "AS IS" BASIS,
1:b6cc9d7:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6cc9d7:    See the License for the specific language governing permissions and
1:b6cc9d7:    limitations under the License.
1:b6cc9d7: 
1:b6cc9d7:  */
1:b6cc9d7: 
1:b6cc9d7: package org.apache.derby.impl.sql.compile;
1:b6cc9d7: 
1:b6cc9d7: import java.sql.Connection;
1:b6cc9d7: import java.sql.DriverManager;
1:b6cc9d7: import java.sql.PreparedStatement;
1:b6cc9d7: import java.sql.SQLException;
1:b6cc9d7: import org.apache.derby.iapi.reference.SQLState;
1:b6cc9d7: import org.apache.derby.iapi.services.i18n.MessageService;
1:b6cc9d7: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1:b6cc9d7: 
1:b6cc9d7: /**
1:b6cc9d7:  * <p>
1:b6cc9d7:  * OptionalTool for viewing the output created when you xml-trace the optimizer.
1:b6cc9d7:  * </p>
1:b6cc9d7:  */
1:b6cc9d7: public	class   OptTraceViewer  implements OptionalTool
1:b6cc9d7: {
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7:     //
1:b6cc9d7:     //	CONSTANTS
1:b6cc9d7:     //
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7: 
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7:     //
1:b6cc9d7:     //	STATE
1:b6cc9d7:     //
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7: 
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7:     //
1:b6cc9d7:     //	CONSTRUCTOR
1:b6cc9d7:     //
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7: 
1:b6cc9d7:     /** 0-arg constructor required by the OptionalTool contract */
1:b6cc9d7:     public  OptTraceViewer() {}
1:b6cc9d7: 
1:b6cc9d7:     ///////////////////////////////////////////////////////////////////////////////////
1:b6cc9d7:     //
1:b6cc9d7:     // OptionalTool BEHAVIOR
1:b6cc9d7:     //
1:b6cc9d7:     ///////////////////////////////////////////////////////////////////////////////////
1:b6cc9d7: 
1:b6cc9d7:     /**
1:b6cc9d7:      * <p>
1:b6cc9d7:      * Takes the following arguments:
1:b6cc9d7:      * </p>
1:b6cc9d7:      *
1:b6cc9d7:      * <ul>
1:b6cc9d7:      * <li>fileURL - The url of the file holding the xml trace. E.g.: "file:///Users/me/mainline/z.txt"</li>
1:b6cc9d7:      * </ul>
1:b6cc9d7:      *
1:b6cc9d7:      * <p>
1:b6cc9d7:      * ...and creates the following schema objects for viewing the xml trace of the optimizer:
1:b6cc9d7:      * </p>
1:b6cc9d7:      *
1:b6cc9d7:      * <ul>
1:b6cc9d7:      * <li>ArrayList - A user-defined type wrapping java.util.ArrayList.</li>
1:b6cc9d7:      * <li>asList - A factory function for creating ArrayLists.</li>
1:b6cc9d7:      * <li>planCost - An XmlVTI for viewing xml traces.</li>
1:b6cc9d7:      * <li>planCost - A view which passes the file name to the XmlVTI.</li>
1:b6cc9d7:      * </ul>
1:b6cc9d7:      */
1:b6cc9d7:     public  void    loadTool( String... configurationParameters )
1:b6cc9d7:         throws SQLException
1:b6cc9d7:     {
1:b6cc9d7:         if ( (configurationParameters == null) || (configurationParameters.length != 1) )
1:b6cc9d7:         { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
1:b6cc9d7: 
1:b6cc9d7:         String  fileURL = configurationParameters[ 0 ];
1:b6cc9d7:         String  createView = XMLOptTrace.PLAN_COST_VIEW.replace( "FILE_URL", fileURL );
1:b6cc9d7:         
1:b6cc9d7:         Connection          conn = getDerbyConnection();
1:b6cc9d7: 
1:b6cc9d7:         executeDDL
1:b6cc9d7:             (
1:b6cc9d7:              conn,
1:b6cc9d7:              "create type ArrayList external name 'java.util.ArrayList' language java"
1:b6cc9d7:              );
1:b6cc9d7:         executeDDL
1:b6cc9d7:             (
1:b6cc9d7:              conn,
1:b6cc9d7:              "create function asList( cell varchar( 32672 ) ... ) returns ArrayList\n" +
1:b6cc9d7:              "language java parameter style derby no sql\n" +
1:b6cc9d7:              "external name 'org.apache.derby.vti.XmlVTI.asList'\n"
1:b6cc9d7:              );
1:b6cc9d7:         executeDDL( conn, XMLOptTrace.PLAN_COST_VTI );
1:b6cc9d7:         executeDDL( conn, createView );
1:b6cc9d7:     }
1:b6cc9d7: 
1:b6cc9d7:     /**
1:b6cc9d7:      * <p>
1:b6cc9d7:      * Drop the schema objects which were created for viewing the xml file
1:b6cc9d7:      * containing the optimizer trace.
1:b6cc9d7:      * </p>
1:b6cc9d7:      */
1:b6cc9d7:     public  void    unloadTool( String... configurationParameters )
1:b6cc9d7:         throws SQLException
1:b6cc9d7:     {
1:b6cc9d7:         Connection          conn = getDerbyConnection();
1:b6cc9d7: 
1:b6cc9d7:         executeDDL( conn, "drop view planCost" );
1:b6cc9d7:         executeDDL( conn, "drop function planCost" );
1:b6cc9d7:         executeDDL( conn, "drop function asList" );
1:b6cc9d7:         executeDDL( conn, "drop type ArrayList restrict" );
1:b6cc9d7:     }
1:b6cc9d7: 
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7:     //
1:b6cc9d7:     //	MINIONS
1:b6cc9d7:     //
1:b6cc9d7:     ////////////////////////////////////////////////////////////////////////
1:b6cc9d7: 
1:b6cc9d7:     private Connection  getDerbyConnection() throws SQLException
1:b6cc9d7:     {
1:b6cc9d7:         return DriverManager.getConnection( "jdbc:default:connection" );
1:b6cc9d7:     }
1:b6cc9d7: 
1:b6cc9d7:     private void    executeDDL
1:b6cc9d7:         ( Connection conn, String text )
1:b6cc9d7:         throws SQLException
1:b6cc9d7:     {
1:b6cc9d7:         PreparedStatement   ddl = prepareStatement( conn, text );
1:b6cc9d7:         ddl.execute();
1:b6cc9d7:         ddl.close();
1:b6cc9d7:     }
1:b6cc9d7:     
1:b6cc9d7:     private PreparedStatement   prepareStatement
1:b6cc9d7:         ( Connection conn, String text )
1:b6cc9d7:         throws SQLException
1:b6cc9d7:     {
1:b6cc9d7:         return conn.prepareStatement( text );
1:b6cc9d7:     }
1:b6cc9d7: 
1:b6cc9d7:     /** Wrap an exception in a SQLException */
1:b6cc9d7:     private SQLException    wrap( Throwable t )
1:b6cc9d7:     {
1:b6cc9d7:         return new SQLException( t.getMessage(), t );
1:b6cc9d7:     }
1:b6cc9d7:     
1:b6cc9d7:     private SQLException    wrap( String errorMessage )
1:b6cc9d7:     {
1:b6cc9d7:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1:b6cc9d7: 
1:b6cc9d7:         return new SQLException( errorMessage, sqlState );
1:b6cc9d7:     }
1:b6cc9d7: }
1:b6cc9d7: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b6cc9d7
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.OptTraceViewer
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1: 
1: /**
1:  * <p>
1:  * OptionalTool for viewing the output created when you xml-trace the optimizer.
1:  * </p>
1:  */
1: public	class   OptTraceViewer  implements OptionalTool
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** 0-arg constructor required by the OptionalTool contract */
1:     public  OptTraceViewer() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OptionalTool BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Takes the following arguments:
1:      * </p>
1:      *
1:      * <ul>
1:      * <li>fileURL - The url of the file holding the xml trace. E.g.: "file:///Users/me/mainline/z.txt"</li>
1:      * </ul>
1:      *
1:      * <p>
1:      * ...and creates the following schema objects for viewing the xml trace of the optimizer:
1:      * </p>
1:      *
1:      * <ul>
1:      * <li>ArrayList - A user-defined type wrapping java.util.ArrayList.</li>
1:      * <li>asList - A factory function for creating ArrayLists.</li>
1:      * <li>planCost - An XmlVTI for viewing xml traces.</li>
1:      * <li>planCost - A view which passes the file name to the XmlVTI.</li>
1:      * </ul>
1:      */
1:     public  void    loadTool( String... configurationParameters )
1:         throws SQLException
1:     {
1:         if ( (configurationParameters == null) || (configurationParameters.length != 1) )
1:         { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
1: 
1:         String  fileURL = configurationParameters[ 0 ];
1:         String  createView = XMLOptTrace.PLAN_COST_VIEW.replace( "FILE_URL", fileURL );
1:         
1:         Connection          conn = getDerbyConnection();
1: 
1:         executeDDL
1:             (
1:              conn,
1:              "create type ArrayList external name 'java.util.ArrayList' language java"
1:              );
1:         executeDDL
1:             (
1:              conn,
1:              "create function asList( cell varchar( 32672 ) ... ) returns ArrayList\n" +
1:              "language java parameter style derby no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.asList'\n"
1:              );
1:         executeDDL( conn, XMLOptTrace.PLAN_COST_VTI );
1:         executeDDL( conn, createView );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Drop the schema objects which were created for viewing the xml file
1:      * containing the optimizer trace.
1:      * </p>
1:      */
1:     public  void    unloadTool( String... configurationParameters )
1:         throws SQLException
1:     {
1:         Connection          conn = getDerbyConnection();
1: 
1:         executeDDL( conn, "drop view planCost" );
1:         executeDDL( conn, "drop function planCost" );
1:         executeDDL( conn, "drop function asList" );
1:         executeDDL( conn, "drop type ArrayList restrict" );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	MINIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private Connection  getDerbyConnection() throws SQLException
1:     {
1:         return DriverManager.getConnection( "jdbc:default:connection" );
1:     }
1: 
1:     private void    executeDDL
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         PreparedStatement   ddl = prepareStatement( conn, text );
1:         ddl.execute();
1:         ddl.close();
1:     }
1:     
1:     private PreparedStatement   prepareStatement
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         return conn.prepareStatement( text );
1:     }
1: 
1:     /** Wrap an exception in a SQLException */
1:     private SQLException    wrap( Throwable t )
1:     {
1:         return new SQLException( t.getMessage(), t );
1:     }
1:     
1:     private SQLException    wrap( String errorMessage )
1:     {
1:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1: 
1:         return new SQLException( errorMessage, sqlState );
1:     }
1: }
1: 
============================================================================