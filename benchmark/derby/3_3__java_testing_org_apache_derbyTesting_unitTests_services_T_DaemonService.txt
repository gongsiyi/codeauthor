1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_DaemonService
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.services.daemon.*;
1:2bc809f: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:2bc809f: import java.util.Random;
1:2bc809f: import java.util.Vector;
1:2bc809f: /**
1:2bc809f: 	This test exercices the DaemonFactory and DaemonService implementation
1:2bc809f: */
1:2bc809f: public class T_DaemonService extends T_MultiThreadedIterations 
1:2bc809f: {
1:2bc809f: 	private static DaemonService testDaemon;
1:2bc809f: 	private static Random random;
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * fields for testing serviceable, one per test object
1:2bc809f: 	 */
1:3f5c48a: 	private Vector<T_Serviceable> serviceRecord;
1:2bc809f: 
1:2bc809f: 	public T_DaemonService()
1:2bc809f: 	{
1:2bc809f: 		super();
1:3f5c48a: 		serviceRecord = new Vector<T_Serviceable>(9, 1);
1:2bc809f: 		random = new Random();
1:2bc809f: 	}
1:56c1dc2: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	protected String getModuleToTestProtocolName() {
1:2bc809f: 		return org.apache.derby.iapi.reference.Module.DaemonFactory;
1:2bc809f: 	}
1:2bc809f: 
1:56c1dc2: 	/**
1:2bc809f: 	** Methods required by T_MultiIterations
1:2bc809f: 	** @exception T_Fail unexpected behaviour from the API
1:2bc809f: 	*/
1:2bc809f: 	protected void setupTest() throws T_Fail
1:2bc809f: 	{
1:2bc809f: 
1:2bc809f: 		DaemonFactory daemonFactory;
1:2bc809f: 		try {
1:56c1dc2: 			daemonFactory = (DaemonFactory)startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
1:2bc809f: 		} catch (StandardException mse) {
1:2bc809f: 			throw T_Fail.exceptionFail(mse);
1:2bc809f: 		}
1:2bc809f: 		if (daemonFactory == null)
1:2bc809f: 			throw T_Fail.testFailMsg("cannot find daemon factory " + org.apache.derby.iapi.reference.Module.DaemonFactory);
1:2bc809f: 			
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			testDaemon = daemonFactory.createNewDaemon("testDaemon");
1:2bc809f: 		}
1:2bc809f: 		catch (StandardException se)
1:2bc809f: 		{
1:2bc809f: 			throw T_Fail.exceptionFail(se);
1:2bc809f: 		}
1:2bc809f: 		if (testDaemon == null)
1:2bc809f: 			throw T_Fail.testFailMsg("cannot create new Daemon Service");
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	** Methods required by T_MultiThreadedIterations
1:2bc809f: 	** @exception T_Fail unexpected behaviour from the API
1:2bc809f: 	*/
1:2bc809f: 	protected void joinSetupTest() throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		if (testDaemon == null)
1:2bc809f: 			throw T_Fail.testFailMsg("test deamon not set");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected T_MultiThreadedIterations newTestObject()
1:2bc809f: 	{
1:2bc809f: 		return new T_DaemonService(); // clone myself
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception T_Fail - test failed
1:2bc809f: 	*/
1:2bc809f: 	protected void runTestSet() throws T_Fail
1:2bc809f: 	{
1:668b59a: 		// we don't want t_checkStatus() to hang because of
1:668b59a: 		// unsubscribed records from a previous, failed iteration
1:668b59a: 		// (DERBY-989)
1:668b59a: 		serviceRecord.clear();
1:668b59a: 
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			/* test basic DaemonService interface */
1:2bc809f: 			T01(testDaemon);	// basic subscription
1:2bc809f: 			T02(testDaemon);	// basic enqueue
1:2bc809f: 			T03(testDaemon);	// mixture of everything
1:2bc809f: 
1:2bc809f: 			t_checkStatus(testDaemon);	// make sure all serviceables I created got serviced
1:2bc809f: 		}
1:2bc809f: 		catch (StandardException se)
1:2bc809f: 		{
1:2bc809f: 			throw T_Fail.exceptionFail(se);			
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 *  tests
1:2bc809f: 	 */
1:2bc809f: 
1:2bc809f: 	/* test 1 - basic subscription */
1:2bc809f: 	private void T01(DaemonService daemon) throws T_Fail, StandardException
1:2bc809f: 	{
1:2bc809f: 		// add a couple of subscriptions to the deamon
1:2bc809f: 		T_Serviceable s1 = new T_Serviceable(false);  // not on demand
1:2bc809f: 		serviceRecord.addElement(s1);
1:2bc809f: 		int clientNumber1 = daemon.subscribe(s1, false);
1:2bc809f: 		s1.setClientNumber(clientNumber1);
1:2bc809f: 
1:2bc809f: 		T_Serviceable s2 = new T_Serviceable(true);  // on demand only
1:2bc809f: 		serviceRecord.addElement(s2);
1:2bc809f: 		int clientNumber2 = daemon.subscribe(s2, true);
1:2bc809f: 		s2.setClientNumber(clientNumber2);
1:2bc809f: 
1:2bc809f: 		daemon.serviceNow(clientNumber2); // s2 should be serviced exactly once
1:2bc809f: 
1:2bc809f: 		s2.t_wait(1); // wait for s2 to be serviced
1:2bc809f: 
1:2bc809f: 		randomSleep();
1:2bc809f: 
1:2bc809f: 		// don't demand service, let daemon service it by itself
1:2bc809f: 		s1.t_wait(1); // wait for s1 to be serviced
1:2bc809f: 
1:2bc809f: 		s2.t_check(1);  // s2 should be serviced exactly once
1:2bc809f: 
1:2bc809f: 		PASS("T01");
1:2bc809f: 
1:2bc809f: 		randomSleep();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/* test 1 - basic enqueue */
1:2bc809f: 	private void T02(DaemonService daemon) throws T_Fail, StandardException
1:2bc809f: 	{
1:2bc809f: 		int requeue = 10;
1:2bc809f: 
1:2bc809f: 		T_Serviceable e1 = new T_Serviceable(1); // service now and don't requeue
1:2bc809f: 		serviceRecord.addElement(e1);
1:2bc809f: 		daemon.enqueue(e1, true);
1:2bc809f: 
1:2bc809f: 		T_Serviceable e2 = new T_Serviceable(requeue); // service now and requeue
1:2bc809f: 		serviceRecord.addElement(e2);
1:2bc809f: 		daemon.enqueue(e2, true);
1:2bc809f: 
1:2bc809f: 		T_Serviceable e3 = new T_Serviceable(1); // don't requeue
1:2bc809f: 		serviceRecord.addElement(e3);
1:2bc809f: 		daemon.enqueue(e3, false);
1:2bc809f: 
1:2bc809f: 		T_Serviceable e4 = new T_Serviceable(requeue); // requeue
1:2bc809f: 		serviceRecord.addElement(e4);
1:2bc809f: 		daemon.enqueue(e4, false);
1:2bc809f: 
1:2bc809f: 		randomSleep();
1:2bc809f: 
1:2bc809f: 		e1.t_wait(1);				// make sure they are all serviced at least once
1:2bc809f: 		e2.t_wait(1);
1:2bc809f: 		e3.t_wait(1);
1:2bc809f: 		e4.t_wait(1);
1:2bc809f: 
1:2bc809f: 		e2.t_wait(requeue);	// e2 and e4 are requeued
1:2bc809f: 		e4.t_wait(requeue);	// e2 and e4 are requeued
1:2bc809f: 
1:2bc809f: 		// meanwhile, e1 and e3 should not be service more than once
1:2bc809f: 		e1.t_check(1);
1:2bc809f: 		e3.t_check(1);
1:2bc809f: 
1:2bc809f: 		PASS("T02");
1:2bc809f: 
1:2bc809f: 		randomSleep();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/* test 4 - mixture */
1:2bc809f: 	private void T03(DaemonService daemon) throws T_Fail, StandardException
1:2bc809f: 	{
1:2bc809f: 		T_Serviceable s1 = new T_Serviceable(false);  // unsubscribe this laster
1:2bc809f: 		serviceRecord.addElement(s1);
1:2bc809f: 		int sub1 = daemon.subscribe(s1, false);
1:2bc809f: 
1:2bc809f: 		T_Serviceable e1 = new T_Serviceable(1); 
1:2bc809f: 		serviceRecord.addElement(e1);
1:2bc809f: 		daemon.enqueue(e1, false); // enqueue the same thing 5 times
1:2bc809f: 		daemon.enqueue(e1, false);
1:2bc809f: 		daemon.enqueue(e1, false);
1:2bc809f: 		daemon.enqueue(e1, false);
1:2bc809f: 		daemon.enqueue(e1, false);
1:2bc809f: 
1:2bc809f: 		T_Serviceable s2 = new T_Serviceable(false); // not on demand
1:2bc809f: 		serviceRecord.addElement(s2);
1:2bc809f: 		int sub2 = daemon.subscribe(s2, false); 
1:2bc809f: 		int realsub2 = daemon.subscribe(s2, false); 
1:2bc809f: 		s2.setClientNumber(realsub2);
1:2bc809f: 
1:2bc809f: 		daemon.unsubscribe(sub1);
1:2bc809f: 		daemon.unsubscribe(sub2); // it has another subscriptions
1:2bc809f: 
1:2bc809f: 		int save;
1:2bc809f: 		synchronized(s1)
1:2bc809f: 		{
1:2bc809f: 			save = s1.timesServiced;
1:2bc809f: 		}
1:2bc809f: 		daemon.serviceNow(sub1); // should be silently igored
1:2bc809f: 
1:2bc809f: 		randomSleep();
1:2bc809f: 
1:2bc809f: 		e1.t_wait(5);			// it is enqueued 5 times, it should be serviced 5 times
1:2bc809f: 
1:2bc809f: 		daemon.serviceNow(sub1); // should be silently igored
1:2bc809f: 
1:2bc809f: 		s2.t_wait(3);		// wait long enough for it to be serviced at least 3 times
1:2bc809f: 
1:2bc809f: 		daemon.serviceNow(sub1); // should be silently igored
1:2bc809f: 
1:2bc809f: 		synchronized(s1)
1:2bc809f: 		{
1:668b59a: 			// DERBY-989: The client should not be serviced after it
1:668b59a: 			// unsubscribes. However, it might have been in the
1:668b59a: 			// process of being serviced when unsubscribe() was
1:668b59a: 			// called. Therefore, performWork() can run even after the
1:668b59a: 			// save variable was initialized, but only once.
1:668b59a: 			int diff = s1.timesServiced - save;
1:668b59a: 			// Check that the client has not been serviced more than
1:668b59a: 			// once after it unsubscribed.
1:668b59a: 			T_Fail.T_ASSERT((diff == 0 || diff == 1),
1:668b59a: 							"unsubscribed continue to get serviced");
1:2bc809f: 
1:2bc809f: 			// unsubscribed can subscribe again
1:2bc809f: 			s1.timesServiced = 0;
1:2bc809f: 		}
1:2bc809f: 		
1:2bc809f: 		sub1 = daemon.subscribe(s1, false); // resubscribe
1:2bc809f: 		s1.setClientNumber(sub1);
1:2bc809f: 		daemon.serviceNow(sub1);
1:2bc809f: 		s1.t_wait(1);
1:2bc809f: 
1:2bc809f: 		// e1 should not be serviced for > 5 times
1:2bc809f: 		e1.t_check(5);
1:2bc809f: 
1:2bc809f: 		PASS("T03");
1:2bc809f: 		randomSleep();
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void t_checkStatus(DaemonService daemon) throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		for (int i = 0; i < serviceRecord.size(); i++)
1:2bc809f: 		{
1:2bc809f: 			T_Serviceable check = (T_Serviceable)serviceRecord.elementAt(i);
1:2bc809f: 			if (check != null)
1:2bc809f: 			{
1:2bc809f: 				if (check.subscribed)
1:2bc809f: 				{
1:2bc809f: 					if (check.onDemandOnly)
1:2bc809f: 						check.t_check(1);
1:2bc809f: 					else
1:2bc809f: 						check.t_wait(10); // sooner or later, it will be serviced this many times
1:2bc809f: 
1:2bc809f: 					daemon.unsubscribe(check.getClientNumber());
1:2bc809f: 				}
1:2bc809f: 				else			// enqueued
1:2bc809f: 				{
1:2bc809f: 					check.t_wait(check.timesRequeue);
1:2bc809f: 				}
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		PASS("T_CheckStatus");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void randomSleep()
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		// randomly sleep for a bit if this is a multi-threaded test to make it more interesting
1:2bc809f: 		if (getNumThreads() > 1)
1:2bc809f: 		{
1:2bc809f: 			int nap = random.nextInt()%100;
1:2bc809f: 			if (nap < 0) nap = -nap;
1:2bc809f: 			try
1:2bc809f: 			{
1:2bc809f: 				Thread.sleep(nap);
1:2bc809f: 			}
1:2bc809f: 			catch (InterruptedException ie)
1:2bc809f: 			{
1:2bc809f: 				throw StandardException.interrupt(ie);
1:2bc809f: 			}
1:2bc809f: 		}	
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f:     
1:2bc809f:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object  startSystemModule( final String factoryInterface )
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:56c1dc2:             return AccessController.doPrivileged
1:56c1dc2:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:56c1dc2:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:56c1dc2:                      {
1:56c1dc2:                          return Monitor.startSystemModule( factoryInterface );
1:56c1dc2:                      }
1:56c1dc2:                  }
1:56c1dc2:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:56c1dc2:         }
1:56c1dc2:     }
1:56c1dc2: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 			daemonFactory = (DaemonFactory)startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object  startSystemModule( final String factoryInterface )
1:         throws StandardException
1:     {
1:         try {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object run()
1:                          throws StandardException
1:                      {
1:                          return Monitor.startSystemModule( factoryInterface );
1:                      }
1:                  }
1:                  );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
1:         }
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: 	private Vector<T_Serviceable> serviceRecord;
1: 		serviceRecord = new Vector<T_Serviceable>(9, 1);
commit:668b59a
/////////////////////////////////////////////////////////////////////////
1: 		// we don't want t_checkStatus() to hang because of
1: 		// unsubscribed records from a previous, failed iteration
1: 		// (DERBY-989)
1: 		serviceRecord.clear();
1: 
/////////////////////////////////////////////////////////////////////////
1: 			// DERBY-989: The client should not be serviced after it
1: 			// unsubscribes. However, it might have been in the
1: 			// process of being serviced when unsubscribe() was
1: 			// called. Therefore, performWork() can run even after the
1: 			// save variable was initialized, but only once.
1: 			int diff = s1.timesServiced - save;
1: 			// Check that the client has not been serviced more than
1: 			// once after it unsubscribed.
1: 			T_Fail.T_ASSERT((diff == 0 || diff == 1),
1: 							"unsubscribed continue to get serviced");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_DaemonService
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: import org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.daemon.*;
1: 
1: import java.util.Random;
1: import java.util.Vector;
1: /**
1: 	This test exercices the DaemonFactory and DaemonService implementation
1: */
1: public class T_DaemonService extends T_MultiThreadedIterations 
1: {
1: 	private static DaemonService testDaemon;
1: 	private static Random random;
1: 
1: 	/*
1: 	 * fields for testing serviceable, one per test object
1: 	 */
0: 	private Vector serviceRecord; // a vectory of T_Serviceable
1: 
1: 	public T_DaemonService()
1: 	{
1: 		super();
0: 		serviceRecord = new Vector(9, 1);
1: 		random = new Random();
1: 	}
1: 
1: 
1: 	/*
1: 	** Methods required by T_Generic
1: 	*/
1: 
1: 	protected String getModuleToTestProtocolName() {
1: 		return org.apache.derby.iapi.reference.Module.DaemonFactory;
1: 	}
1: 
1: 	/**
1: 	** Methods required by T_MultiIterations
1: 	** @exception T_Fail unexpected behaviour from the API
1: 	*/
1: 	protected void setupTest() throws T_Fail
1: 	{
1: 
1: 		DaemonFactory daemonFactory;
1: 		try {
0: 			daemonFactory = (DaemonFactory)Monitor.startSystemModule(org.apache.derby.iapi.reference.Module.DaemonFactory);
1: 		} catch (StandardException mse) {
1: 			throw T_Fail.exceptionFail(mse);
1: 		}
1: 		if (daemonFactory == null)
1: 			throw T_Fail.testFailMsg("cannot find daemon factory " + org.apache.derby.iapi.reference.Module.DaemonFactory);
1: 			
1: 		try
1: 		{
1: 			testDaemon = daemonFactory.createNewDaemon("testDaemon");
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			throw T_Fail.exceptionFail(se);
1: 		}
1: 		if (testDaemon == null)
1: 			throw T_Fail.testFailMsg("cannot create new Daemon Service");
1: 
1: 
1: 	}
1: 
1: 
1: 	/**
1: 	** Methods required by T_MultiThreadedIterations
1: 	** @exception T_Fail unexpected behaviour from the API
1: 	*/
1: 	protected void joinSetupTest() throws T_Fail
1: 	{
1: 		if (testDaemon == null)
1: 			throw T_Fail.testFailMsg("test deamon not set");
1: 	}
1: 
1: 	protected T_MultiThreadedIterations newTestObject()
1: 	{
1: 		return new T_DaemonService(); // clone myself
1: 	}
1: 
1: 
1: 	/**
1: 		@exception T_Fail - test failed
1: 	*/
1: 	protected void runTestSet() throws T_Fail
1: 	{
1: 		try
1: 		{
1: 			/* test basic DaemonService interface */
1: 			T01(testDaemon);	// basic subscription
1: 			T02(testDaemon);	// basic enqueue
1: 			T03(testDaemon);	// mixture of everything
1: 
1: 			t_checkStatus(testDaemon);	// make sure all serviceables I created got serviced
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			throw T_Fail.exceptionFail(se);			
1: 		}
1: 
1: 	}
1: 
1: 	/*
1: 	 *  tests
1: 	 */
1: 
1: 	/* test 1 - basic subscription */
1: 	private void T01(DaemonService daemon) throws T_Fail, StandardException
1: 	{
1: 		// add a couple of subscriptions to the deamon
1: 		T_Serviceable s1 = new T_Serviceable(false);  // not on demand
1: 		serviceRecord.addElement(s1);
1: 		int clientNumber1 = daemon.subscribe(s1, false);
1: 		s1.setClientNumber(clientNumber1);
1: 
1: 		T_Serviceable s2 = new T_Serviceable(true);  // on demand only
1: 		serviceRecord.addElement(s2);
1: 		int clientNumber2 = daemon.subscribe(s2, true);
1: 		s2.setClientNumber(clientNumber2);
1: 
1: 		daemon.serviceNow(clientNumber2); // s2 should be serviced exactly once
1: 
1: 		s2.t_wait(1); // wait for s2 to be serviced
1: 
1: 		randomSleep();
1: 
1: 		// don't demand service, let daemon service it by itself
1: 		s1.t_wait(1); // wait for s1 to be serviced
1: 
1: 		s2.t_check(1);  // s2 should be serviced exactly once
1: 
1: 		PASS("T01");
1: 
1: 		randomSleep();
1: 	}
1: 
1: 	/* test 1 - basic enqueue */
1: 	private void T02(DaemonService daemon) throws T_Fail, StandardException
1: 	{
1: 		int requeue = 10;
1: 
1: 		T_Serviceable e1 = new T_Serviceable(1); // service now and don't requeue
1: 		serviceRecord.addElement(e1);
1: 		daemon.enqueue(e1, true);
1: 
1: 		T_Serviceable e2 = new T_Serviceable(requeue); // service now and requeue
1: 		serviceRecord.addElement(e2);
1: 		daemon.enqueue(e2, true);
1: 
1: 		T_Serviceable e3 = new T_Serviceable(1); // don't requeue
1: 		serviceRecord.addElement(e3);
1: 		daemon.enqueue(e3, false);
1: 
1: 		T_Serviceable e4 = new T_Serviceable(requeue); // requeue
1: 		serviceRecord.addElement(e4);
1: 		daemon.enqueue(e4, false);
1: 
1: 		randomSleep();
1: 
1: 		e1.t_wait(1);				// make sure they are all serviced at least once
1: 		e2.t_wait(1);
1: 		e3.t_wait(1);
1: 		e4.t_wait(1);
1: 
1: 		e2.t_wait(requeue);	// e2 and e4 are requeued
1: 		e4.t_wait(requeue);	// e2 and e4 are requeued
1: 
1: 		// meanwhile, e1 and e3 should not be service more than once
1: 		e1.t_check(1);
1: 		e3.t_check(1);
1: 
1: 		PASS("T02");
1: 
1: 		randomSleep();
1: 	}
1: 
1: 	/* test 4 - mixture */
1: 	private void T03(DaemonService daemon) throws T_Fail, StandardException
1: 	{
1: 		T_Serviceable s1 = new T_Serviceable(false);  // unsubscribe this laster
1: 		serviceRecord.addElement(s1);
1: 		int sub1 = daemon.subscribe(s1, false);
1: 
1: 		T_Serviceable e1 = new T_Serviceable(1); 
1: 		serviceRecord.addElement(e1);
1: 		daemon.enqueue(e1, false); // enqueue the same thing 5 times
1: 		daemon.enqueue(e1, false);
1: 		daemon.enqueue(e1, false);
1: 		daemon.enqueue(e1, false);
1: 		daemon.enqueue(e1, false);
1: 
1: 		T_Serviceable s2 = new T_Serviceable(false); // not on demand
1: 		serviceRecord.addElement(s2);
1: 		int sub2 = daemon.subscribe(s2, false); 
1: 		int realsub2 = daemon.subscribe(s2, false); 
1: 		s2.setClientNumber(realsub2);
1: 
1: 		daemon.unsubscribe(sub1);
1: 		daemon.unsubscribe(sub2); // it has another subscriptions
1: 
1: 		int save;
1: 		synchronized(s1)
1: 		{
1: 			save = s1.timesServiced;
1: 		}
1: 		daemon.serviceNow(sub1); // should be silently igored
1: 
1: 		randomSleep();
1: 
1: 		e1.t_wait(5);			// it is enqueued 5 times, it should be serviced 5 times
1: 
1: 		daemon.serviceNow(sub1); // should be silently igored
1: 
1: 		s2.t_wait(3);		// wait long enough for it to be serviced at least 3 times
1: 
1: 		daemon.serviceNow(sub1); // should be silently igored
1: 
1: 		synchronized(s1)
1: 		{
0: 			if (save != s1.timesServiced)
0: 				throw T_Fail.testFailMsg("unsubscribed continue to get serviced");
1: 
1: 			// unsubscribed can subscribe again
1: 			s1.timesServiced = 0;
1: 		}
1: 		
1: 		sub1 = daemon.subscribe(s1, false); // resubscribe
1: 		s1.setClientNumber(sub1);
1: 		daemon.serviceNow(sub1);
1: 		s1.t_wait(1);
1: 
1: 		// e1 should not be serviced for > 5 times
1: 		e1.t_check(5);
1: 
1: 		PASS("T03");
1: 		randomSleep();
1: 
1: 	}
1: 
1: 	private void t_checkStatus(DaemonService daemon) throws T_Fail
1: 	{
1: 		for (int i = 0; i < serviceRecord.size(); i++)
1: 		{
1: 			T_Serviceable check = (T_Serviceable)serviceRecord.elementAt(i);
1: 			if (check != null)
1: 			{
1: 				if (check.subscribed)
1: 				{
1: 					if (check.onDemandOnly)
1: 						check.t_check(1);
1: 					else
1: 						check.t_wait(10); // sooner or later, it will be serviced this many times
1: 
1: 					daemon.unsubscribe(check.getClientNumber());
1: 				}
1: 				else			// enqueued
1: 				{
1: 					check.t_wait(check.timesRequeue);
1: 				}
1: 			}
1: 		}
1: 		PASS("T_CheckStatus");
1: 	}
1: 
1: 	private void randomSleep()
1: 		 throws StandardException
1: 	{
1: 		// randomly sleep for a bit if this is a multi-threaded test to make it more interesting
1: 		if (getNumThreads() > 1)
1: 		{
1: 			int nap = random.nextInt()%100;
1: 			if (nap < 0) nap = -nap;
1: 			try
1: 			{
1: 				Thread.sleep(nap);
1: 			}
1: 			catch (InterruptedException ie)
1: 			{
1: 				throw StandardException.interrupt(ie);
1: 			}
1: 		}	
1: 	}
1: 
1: }
============================================================================