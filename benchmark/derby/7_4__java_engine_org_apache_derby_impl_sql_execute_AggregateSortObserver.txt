1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.AggregateSortObserver
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:e8e04bf: import org.apache.derby.iapi.types.UserDataValue;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This sort observer performs aggregation.
1:eac0369:  *
1:eac0369:  */
1:ca6ed17: class AggregateSortObserver extends BasicSortObserver
1:eac0369: {
1:eac0369: 
1:ca6ed17:     private final GenericAggregator[] aggsToProcess;
1:ca6ed17:     private final GenericAggregator[] aggsToInitialize;
1:eac0369: 
1:eac0369: 	private int firstAggregatorColumn;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Simple constructor
1:eac0369: 	 *
1:eac0369: 	 * @param doClone If true, then rows that are retained
1:eac0369: 	 *		by the sorter will be cloned.  This is needed
1:eac0369: 	 *		if language is reusing row wrappers.
1:eac0369: 	 *
1:eac0369: 	 * @param aggsToProcess the array of aggregates that 
1:eac0369: 	 *		need to be accumulated/merged in the sorter.
1:eac0369: 	 *
1:eac0369: 	 * @param aggsToInitialize the array of aggregates that
1:eac0369: 	 *		need to be iniitialized as they are inserted
1:eac0369: 	 *		into the sorter.  This may be different than
1:eac0369: 	 *		aggsToProcess in the case where some distinct
1:eac0369: 	 *		aggregates are dropped in the initial pass of
1:eac0369: 	 *		a two phase aggregation for scalar or vector
1:eac0369: 	 *		distinct aggregation.  The initialization process
1:eac0369: 	 *		consists of replacing an empty UserValue with a new, 
1:eac0369: 	 *		initialized aggregate of the appropriate type.
1:eac0369: 	 *		Note that for each row, only the first aggregate
1:eac0369: 	 *		in this list is checked to see whether initialization
1:eac0369: 	 *		is needed.  If so, ALL aggregates are initialized;
1:eac0369: 	 *		otherwise, NO aggregates are initialized.
1:eac0369: 	 *
1:eac0369: 	 * @param execRow	ExecRow to use as source of clone for store.
1:eac0369: 	 */
1:eac0369: 	public AggregateSortObserver(boolean doClone, GenericAggregator[] aggsToProcess, 
1:eac0369: 								 GenericAggregator[] aggsToInitialize,
1:eac0369: 								 ExecRow execRow)
1:eac0369: 	{
1:eac0369: 		super(doClone, false, execRow, true);
1:eac0369: 		this.aggsToProcess = aggsToProcess;
1:eac0369: 		this.aggsToInitialize = aggsToInitialize;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** We expect aggsToInitialize and aggsToProcess to
1:eac0369: 		** be non null.  However, if it is deemed ok for them
1:eac0369: 		** to be null, it shouldn't be too hard to add the
1:eac0369: 		** extra null checks herein.
1:eac0369: 		*/
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(aggsToInitialize != null, "aggsToInitialize argument to AggregateSortObserver is null");
1:eac0369: 			SanityManager.ASSERT(aggsToProcess != null, "aggsToProcess argument to AggregateSortObserver is null");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (aggsToInitialize.length > 0)
1:eac0369: 		{
1:eac0369: 			firstAggregatorColumn = aggsToInitialize[0].aggregatorColumnId;
1:eac0369: 		} 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a distinct sort
1:eac0369: 	 * key.  
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining
1:eac0369: 	 *
1:eac0369: 	 * @return the row to be inserted by the sorter.  If null,
1:eac0369: 	 *		then nothing is inserted by the sorter.  Distinct
1:eac0369: 	 *		sorts will want to return null.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException never thrown
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] returnRow = 
1:eac0369:             super.insertNonDuplicateKey(insertRow);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we have an aggregator column that hasn't been
1:eac0369: 		** initialized, then initialize the entire row now.	
1:eac0369: 		*/
1:eac0369: 		if (aggsToInitialize.length > 0 &&
1:e8e04bf: 			returnRow[firstAggregatorColumn].isNull())
1:eac0369: 		{
1:eac0369: 			for (int i = 0; i < aggsToInitialize.length; i++)
1:eac0369: 			{
1:eac0369: 				GenericAggregator aggregator = aggsToInitialize[i];
1:45075cc: 				UserDataValue wrapper = ((UserDataValue)returnRow[aggregator.aggregatorColumnId]);
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					if (!wrapper.isNull())
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT("during aggregate "+
1:eac0369: 						"initialization, all wrappers expected to be empty; "+
1:eac0369: 						"however, the wrapper for the following aggregate " +
1:eac0369: 						"was not empty:" +aggregator+".  The value stored is "+
1:eac0369: 						wrapper.getObject());
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 				wrapper.setValue(aggregator.getAggregatorInstance());
1:eac0369: 				aggregator.accumulate(returnRow, returnRow);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return returnRow;
1:eac0369: 	
1:eac0369: 	}	
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a duplicate sort
1:eac0369: 	 * key.  We do aggregation here.
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining.  It is a duplicate
1:eac0369: 	 * 		of existingRow.
1:eac0369: 	 *
1:eac0369: 	 * @param existingRow the row that is already in the
1:eac0369: 	 * 		the sorter which is a duplicate of insertRow
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException never thrown
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		if (aggsToProcess.length == 0)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the other row already has an aggregator, then
1:eac0369: 		** we need to merge with it.  Otherwise, accumulate
1:eac0369: 		** it.
1:eac0369: 		*/
1:eac0369: 		for (int i = 0; i < aggsToProcess.length; i++)
1:eac0369: 		{
1:eac0369: 			GenericAggregator aggregator = aggsToProcess[i];
1:e8e04bf: 			if (insertRow[aggregator.getColumnId()].isNull())
1:eac0369: 			{
1:eac0369: 				aggregator.accumulate(insertRow, existingRow);
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				aggregator.merge(insertRow, existingRow);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1: class AggregateSortObserver extends BasicSortObserver
1:     private final GenericAggregator[] aggsToProcess;
1:     private final GenericAggregator[] aggsToInitialize;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e8e04bf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.UserDataValue;
/////////////////////////////////////////////////////////////////////////
1: 			returnRow[firstAggregatorColumn].isNull())
/////////////////////////////////////////////////////////////////////////
1: 			if (insertRow[aggregator.getColumnId()].isNull())
commit:45075cc
/////////////////////////////////////////////////////////////////////////
1: 				UserDataValue wrapper = ((UserDataValue)returnRow[aggregator.aggregatorColumnId]);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.AggregateSortObserver
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.types.UserDataValue;
1: 
0: import org.apache.derby.iapi.types.CloneableObject;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This sort observer performs aggregation.
1:  *
0:  * @author jamie
1:  */
0: public class AggregateSortObserver extends BasicSortObserver
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
0: 	protected GenericAggregator[]	aggsToProcess;
0: 	protected GenericAggregator[]	aggsToInitialize;
1: 
1: 	private int firstAggregatorColumn;
1: 
1: 	/**
1: 	 * Simple constructor
1: 	 *
1: 	 * @param doClone If true, then rows that are retained
1: 	 *		by the sorter will be cloned.  This is needed
1: 	 *		if language is reusing row wrappers.
1: 	 *
1: 	 * @param aggsToProcess the array of aggregates that 
1: 	 *		need to be accumulated/merged in the sorter.
1: 	 *
1: 	 * @param aggsToInitialize the array of aggregates that
1: 	 *		need to be iniitialized as they are inserted
1: 	 *		into the sorter.  This may be different than
1: 	 *		aggsToProcess in the case where some distinct
1: 	 *		aggregates are dropped in the initial pass of
1: 	 *		a two phase aggregation for scalar or vector
1: 	 *		distinct aggregation.  The initialization process
1: 	 *		consists of replacing an empty UserValue with a new, 
1: 	 *		initialized aggregate of the appropriate type.
1: 	 *		Note that for each row, only the first aggregate
1: 	 *		in this list is checked to see whether initialization
1: 	 *		is needed.  If so, ALL aggregates are initialized;
1: 	 *		otherwise, NO aggregates are initialized.
1: 	 *
1: 	 * @param execRow	ExecRow to use as source of clone for store.
1: 	 */
1: 	public AggregateSortObserver(boolean doClone, GenericAggregator[] aggsToProcess, 
1: 								 GenericAggregator[] aggsToInitialize,
1: 								 ExecRow execRow)
1: 	{
1: 		super(doClone, false, execRow, true);
1: 		this.aggsToProcess = aggsToProcess;
1: 		this.aggsToInitialize = aggsToInitialize;
1: 
1: 		/*
1: 		** We expect aggsToInitialize and aggsToProcess to
1: 		** be non null.  However, if it is deemed ok for them
1: 		** to be null, it shouldn't be too hard to add the
1: 		** extra null checks herein.
1: 		*/
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(aggsToInitialize != null, "aggsToInitialize argument to AggregateSortObserver is null");
1: 			SanityManager.ASSERT(aggsToProcess != null, "aggsToProcess argument to AggregateSortObserver is null");
1: 		}
1: 
1: 		if (aggsToInitialize.length > 0)
1: 		{
1: 			firstAggregatorColumn = aggsToInitialize[0].aggregatorColumnId;
1: 		} 
1: 	}
1: 
1: 	/**
1: 	 * Called prior to inserting a distinct sort
1: 	 * key.  
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining
1: 	 *
1: 	 * @return the row to be inserted by the sorter.  If null,
1: 	 *		then nothing is inserted by the sorter.  Distinct
1: 	 *		sorts will want to return null.
1: 	 *
1: 	 * @exception StandardException never thrown
1: 	 */
1: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor[] returnRow = 
1:             super.insertNonDuplicateKey(insertRow);
1: 
1: 		/*
1: 		** If we have an aggregator column that hasn't been
1: 		** initialized, then initialize the entire row now.	
1: 		*/
1: 		if (aggsToInitialize.length > 0 &&
0: 			((Storable)returnRow[firstAggregatorColumn]).isNull())
1: 		{
0: 			UserDataValue 		wrapper;	
1: 			for (int i = 0; i < aggsToInitialize.length; i++)
1: 			{
1: 				GenericAggregator aggregator = aggsToInitialize[i];
0: 				wrapper = ((UserDataValue)returnRow[aggregator.aggregatorColumnId]);
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					if (!wrapper.isNull())
1: 					{
1: 						SanityManager.THROWASSERT("during aggregate "+
1: 						"initialization, all wrappers expected to be empty; "+
1: 						"however, the wrapper for the following aggregate " +
1: 						"was not empty:" +aggregator+".  The value stored is "+
1: 						wrapper.getObject());
1: 					}
1: 				}
1: 				wrapper.setValue(aggregator.getAggregatorInstance());
1: 				aggregator.accumulate(returnRow, returnRow);
1: 			}
1: 		}
1: 
1: 		return returnRow;
1: 	
1: 	}	
1: 	/**
1: 	 * Called prior to inserting a duplicate sort
1: 	 * key.  We do aggregation here.
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining.  It is a duplicate
1: 	 * 		of existingRow.
1: 	 *
1: 	 * @param existingRow the row that is already in the
1: 	 * 		the sorter which is a duplicate of insertRow
1: 	 *
1: 	 * @exception StandardException never thrown
1: 	 */
1: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
1: 			throws StandardException
1: 	{
1: 		if (aggsToProcess.length == 0)
1: 		{
1: 			return null;
1: 		}
1: 
1: 		/*
1: 		** If the other row already has an aggregator, then
1: 		** we need to merge with it.  Otherwise, accumulate
1: 		** it.
1: 		*/
1: 		for (int i = 0; i < aggsToProcess.length; i++)
1: 		{
1: 			GenericAggregator aggregator = aggsToProcess[i];
0: 			if (((Storable)insertRow[aggregator.getColumnId()]).isNull())
1: 			{
1: 				aggregator.accumulate(insertRow, existingRow);
1: 			}
1: 			else
1: 			{
1: 				aggregator.merge(insertRow, existingRow);
1: 			}
1: 		}
1: 		return null;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.types.UserDataValue;
0: 
0: import org.apache.derby.iapi.types.CloneableObject;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This sort observer performs aggregation.
0:  *
0:  * @author jamie
0:  */
0: public class AggregateSortObserver extends BasicSortObserver
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	protected GenericAggregator[]	aggsToProcess;
0: 	protected GenericAggregator[]	aggsToInitialize;
0: 
0: 	private int firstAggregatorColumn;
0: 
0: 	/**
0: 	 * Simple constructor
0: 	 *
0: 	 * @param doClone If true, then rows that are retained
0: 	 *		by the sorter will be cloned.  This is needed
0: 	 *		if language is reusing row wrappers.
0: 	 *
0: 	 * @param aggsToProcess the array of aggregates that 
0: 	 *		need to be accumulated/merged in the sorter.
0: 	 *
0: 	 * @param aggsToInitialize the array of aggregates that
0: 	 *		need to be iniitialized as they are inserted
0: 	 *		into the sorter.  This may be different than
0: 	 *		aggsToProcess in the case where some distinct
0: 	 *		aggregates are dropped in the initial pass of
0: 	 *		a two phase aggregation for scalar or vector
0: 	 *		distinct aggregation.  The initialization process
0: 	 *		consists of replacing an empty UserValue with a new, 
0: 	 *		initialized aggregate of the appropriate type.
0: 	 *		Note that for each row, only the first aggregate
0: 	 *		in this list is checked to see whether initialization
0: 	 *		is needed.  If so, ALL aggregates are initialized;
0: 	 *		otherwise, NO aggregates are initialized.
0: 	 *
0: 	 * @param execRow	ExecRow to use as source of clone for store.
0: 	 */
0: 	public AggregateSortObserver(boolean doClone, GenericAggregator[] aggsToProcess, 
0: 								 GenericAggregator[] aggsToInitialize,
0: 								 ExecRow execRow)
0: 	{
0: 		super(doClone, false, execRow, true);
0: 		this.aggsToProcess = aggsToProcess;
0: 		this.aggsToInitialize = aggsToInitialize;
0: 
0: 		/*
0: 		** We expect aggsToInitialize and aggsToProcess to
0: 		** be non null.  However, if it is deemed ok for them
0: 		** to be null, it shouldn't be too hard to add the
0: 		** extra null checks herein.
0: 		*/
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(aggsToInitialize != null, "aggsToInitialize argument to AggregateSortObserver is null");
0: 			SanityManager.ASSERT(aggsToProcess != null, "aggsToProcess argument to AggregateSortObserver is null");
0: 		}
0: 
0: 		if (aggsToInitialize.length > 0)
0: 		{
0: 			firstAggregatorColumn = aggsToInitialize[0].aggregatorColumnId;
0: 		} 
0: 	}
0: 
0: 	/**
0: 	 * Called prior to inserting a distinct sort
0: 	 * key.  
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining
0: 	 *
0: 	 * @return the row to be inserted by the sorter.  If null,
0: 	 *		then nothing is inserted by the sorter.  Distinct
0: 	 *		sorts will want to return null.
0: 	 *
0: 	 * @exception StandardException never thrown
0: 	 */
0: 	public DataValueDescriptor[] insertNonDuplicateKey(DataValueDescriptor[] insertRow)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor[] returnRow = 
0:             super.insertNonDuplicateKey(insertRow);
0: 
0: 		/*
0: 		** If we have an aggregator column that hasn't been
0: 		** initialized, then initialize the entire row now.	
0: 		*/
0: 		if (aggsToInitialize.length > 0 &&
0: 			((Storable)returnRow[firstAggregatorColumn]).isNull())
0: 		{
0: 			UserDataValue 		wrapper;	
0: 			for (int i = 0; i < aggsToInitialize.length; i++)
0: 			{
0: 				GenericAggregator aggregator = aggsToInitialize[i];
0: 				wrapper = ((UserDataValue)returnRow[aggregator.aggregatorColumnId]);
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					if (!wrapper.isNull())
0: 					{
0: 						SanityManager.THROWASSERT("during aggregate "+
0: 						"initialization, all wrappers expected to be empty; "+
0: 						"however, the wrapper for the following aggregate " +
0: 						"was not empty:" +aggregator+".  The value stored is "+
0: 						wrapper.getObject());
0: 					}
0: 				}
0: 				wrapper.setValue(aggregator.getAggregatorInstance());
0: 				aggregator.accumulate(returnRow, returnRow);
0: 			}
0: 		}
0: 
0: 		return returnRow;
0: 	
0: 	}	
0: 	/**
0: 	 * Called prior to inserting a duplicate sort
0: 	 * key.  We do aggregation here.
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining.  It is a duplicate
0: 	 * 		of existingRow.
0: 	 *
0: 	 * @param existingRow the row that is already in the
0: 	 * 		the sorter which is a duplicate of insertRow
0: 	 *
0: 	 * @exception StandardException never thrown
0: 	 */
0: 	public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] insertRow, DataValueDescriptor[] existingRow) 
0: 			throws StandardException
0: 	{
0: 		if (aggsToProcess.length == 0)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		/*
0: 		** If the other row already has an aggregator, then
0: 		** we need to merge with it.  Otherwise, accumulate
0: 		** it.
0: 		*/
0: 		for (int i = 0; i < aggsToProcess.length; i++)
0: 		{
0: 			GenericAggregator aggregator = aggsToProcess[i];
0: 			if (((Storable)insertRow[aggregator.getColumnId()]).isNull())
0: 			{
0: 				aggregator.accumulate(insertRow, existingRow);
0: 			}
0: 			else
0: 			{
0: 				aggregator.merge(insertRow, existingRow);
0: 			}
0: 		}
0: 		return null;
0: 	}
0: }
============================================================================