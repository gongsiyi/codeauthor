1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Version.java,v 1.17 2007/02/20 00:07:22 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2004, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.NoSuchElementException;
1:a8b6921: import java.util.StringTokenizer;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Version identifier for bundles and packages.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * Version identifiers have four components.
1:a8b6921:  * <ol>
1:a8b6921:  * <li>Major version. A non-negative integer.</li>
1:a8b6921:  * <li>Minor version. A non-negative integer.</li>
1:a8b6921:  * <li>Micro version. A non-negative integer.</li>
1:a8b6921:  * <li>Qualifier. A text string. See <code>Version(String)</code> for the
1:a8b6921:  * format of the qualifier string.</li>
1:a8b6921:  * </ol>
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>Version</code> objects are immutable.
1:a8b6921:  * 
1:a8b6921:  * @since 1.3
1:a8b6921:  * @Immutable
1:a8b6921:  * @version $Revision: 1.17 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public class Version implements Comparable {
1:a8b6921: 	private final int			major;
1:a8b6921: 	private final int			minor;
1:a8b6921: 	private final int			micro;
1:a8b6921: 	private final String		qualifier;
1:a8b6921: 	private static final String	SEPARATOR		= ".";					//$NON-NLS-1$
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The empty version "0.0.0". Equivalent to calling
1:a8b6921: 	 * <code>new Version(0,0,0)</code>.
1:a8b6921: 	 */
1:a8b6921: 	public static final Version	emptyVersion	= new Version(0, 0, 0);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a version identifier from the specified numerical components.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The qualifier is set to the empty string.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param major Major component of the version identifier.
1:a8b6921: 	 * @param minor Minor component of the version identifier.
1:a8b6921: 	 * @param micro Micro component of the version identifier.
1:a8b6921: 	 * @throws IllegalArgumentException If the numerical components are
1:a8b6921: 	 *         negative.
1:a8b6921: 	 */
1:a8b6921: 	public Version(int major, int minor, int micro) {
1:a8b6921: 		this(major, minor, micro, null);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a version identifier from the specifed components.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param major Major component of the version identifier.
1:a8b6921: 	 * @param minor Minor component of the version identifier.
1:a8b6921: 	 * @param micro Micro component of the version identifier.
1:a8b6921: 	 * @param qualifier Qualifier component of the version identifier. If
1:a8b6921: 	 *        <code>null</code> is specified, then the qualifier will be set
1:a8b6921: 	 *        to the empty string.
1:a8b6921: 	 * @throws IllegalArgumentException If the numerical components are negative
1:a8b6921: 	 *         or the qualifier string is invalid.
1:a8b6921: 	 */
1:a8b6921: 	public Version(int major, int minor, int micro, String qualifier) {
1:a8b6921: 		if (qualifier == null) {
1:a8b6921: 			qualifier = ""; //$NON-NLS-1$
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		this.major = major;
1:a8b6921: 		this.minor = minor;
1:a8b6921: 		this.micro = micro;
1:a8b6921: 		this.qualifier = qualifier;
1:a8b6921: 		validate();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Created a version identifier from the specified string.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Here is the grammar for version strings.
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * version ::= major('.'minor('.'micro('.'qualifier)?)?)?
1:a8b6921: 	 * major ::= digit+
1:a8b6921: 	 * minor ::= digit+
1:a8b6921: 	 * micro ::= digit+
1:a8b6921: 	 * qualifier ::= (alpha|digit|'_'|'-')+
1:a8b6921: 	 * digit ::= [0..9]
1:a8b6921: 	 * alpha ::= [a..zA..Z]
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * There must be no whitespace in version.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param version String representation of the version identifier.
1:a8b6921: 	 * @throws IllegalArgumentException If <code>version</code> is improperly
1:a8b6921: 	 *         formatted.
1:a8b6921: 	 */
1:a8b6921: 	public Version(String version) {
1:a8b6921: 		int major = 0;
1:a8b6921: 		int minor = 0;
1:a8b6921: 		int micro = 0;
1:a8b6921: 		String qualifier = ""; //$NON-NLS-1$
1:a8b6921: 
1:a8b6921: 		try {
1:a8b6921: 			StringTokenizer st = new StringTokenizer(version, SEPARATOR, true);
1:a8b6921: 			major = Integer.parseInt(st.nextToken());
1:a8b6921: 
1:a8b6921: 			if (st.hasMoreTokens()) {
1:a8b6921: 				st.nextToken(); // consume delimiter
1:a8b6921: 				minor = Integer.parseInt(st.nextToken());
1:a8b6921: 
1:a8b6921: 				if (st.hasMoreTokens()) {
1:a8b6921: 					st.nextToken(); // consume delimiter
1:a8b6921: 					micro = Integer.parseInt(st.nextToken());
1:a8b6921: 
1:a8b6921: 					if (st.hasMoreTokens()) {
1:a8b6921: 						st.nextToken(); // consume delimiter
1:a8b6921: 						qualifier = st.nextToken();
1:a8b6921: 
1:a8b6921: 						if (st.hasMoreTokens()) {
1:a8b6921: 							throw new IllegalArgumentException("invalid format"); //$NON-NLS-1$
1:a8b6921: 						}
1:a8b6921: 					}
1:a8b6921: 				}
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		catch (NoSuchElementException e) {
1:a8b6921: 			throw new IllegalArgumentException("invalid format"); //$NON-NLS-1$
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		this.major = major;
1:a8b6921: 		this.minor = minor;
1:a8b6921: 		this.micro = micro;
1:a8b6921: 		this.qualifier = qualifier;
1:a8b6921: 		validate();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Called by the Version constructors to validate the version components.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws IllegalArgumentException If the numerical components are negative
1:a8b6921: 	 *         or the qualifier string is invalid.
1:a8b6921: 	 */
1:a8b6921: 	private void validate() {
1:a8b6921: 		if (major < 0) {
1:a8b6921: 			throw new IllegalArgumentException("negative major"); //$NON-NLS-1$
1:a8b6921: 		}
1:a8b6921: 		if (minor < 0) {
1:a8b6921: 			throw new IllegalArgumentException("negative minor"); //$NON-NLS-1$
1:a8b6921: 		}
1:a8b6921: 		if (micro < 0) {
1:a8b6921: 			throw new IllegalArgumentException("negative micro"); //$NON-NLS-1$
1:a8b6921: 		}
1:a8b6921: 		int length = qualifier.length();
1:a8b6921: 		for (int i = 0; i < length; i++) {
1:a8b6921: 			if ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-".indexOf(qualifier.charAt(i)) == -1) { //$NON-NLS-1$
1:a8b6921: 				throw new IllegalArgumentException("invalid qualifier"); //$NON-NLS-1$
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Parses a version identifier from the specified string.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * See <code>Version(String)</code> for the format of the version string.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param version String representation of the version identifier. Leading
1:a8b6921: 	 *        and trailing whitespace will be ignored.
1:a8b6921: 	 * @return A <code>Version</code> object representing the version
1:a8b6921: 	 *         identifier. If <code>version</code> is <code>null</code> or
1:a8b6921: 	 *         the empty string then <code>emptyVersion</code> will be
1:a8b6921: 	 *         returned.
1:a8b6921: 	 * @throws IllegalArgumentException If <code>version</code> is improperly
1:a8b6921: 	 *         formatted.
1:a8b6921: 	 */
1:a8b6921: 	public static Version parseVersion(String version) {
1:a8b6921: 		if (version == null) {
1:a8b6921: 			return emptyVersion;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		version = version.trim();
1:a8b6921: 		if (version.length() == 0) {
1:a8b6921: 			return emptyVersion;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return new Version(version);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the major component of this version identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The major component.
1:a8b6921: 	 */
1:a8b6921: 	public int getMajor() {
1:a8b6921: 		return major;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the minor component of this version identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The minor component.
1:a8b6921: 	 */
1:a8b6921: 	public int getMinor() {
1:a8b6921: 		return minor;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the micro component of this version identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The micro component.
1:a8b6921: 	 */
1:a8b6921: 	public int getMicro() {
1:a8b6921: 		return micro;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the qualifier component of this version identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The qualifier component.
1:a8b6921: 	 */
1:a8b6921: 	public String getQualifier() {
1:a8b6921: 		return qualifier;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the string representation of this version identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The format of the version string will be <code>major.minor.micro</code>
1:a8b6921: 	 * if qualifier is the empty string or
1:a8b6921: 	 * <code>major.minor.micro.qualifier</code> otherwise.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The string representation of this version identifier.
1:a8b6921: 	 */
1:a8b6921: 	public String toString() {
1:a8b6921: 		String base = major + SEPARATOR + minor + SEPARATOR + micro;
1:a8b6921: 		if (qualifier.length() == 0) { //$NON-NLS-1$
1:a8b6921: 			return base;
1:a8b6921: 		}
1:a8b6921: 		else {
1:a8b6921: 			return base + SEPARATOR + qualifier;
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a hash code value for the object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return An integer which is a hash code value for this object.
1:a8b6921: 	 */
1:a8b6921: 	public int hashCode() {
1:a8b6921: 		return (major << 24) + (minor << 16) + (micro << 8)
1:a8b6921: 				+ qualifier.hashCode();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Compares this <code>Version</code> object to another object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A version is considered to be <b>equal to </b> another version if the
1:a8b6921: 	 * major, minor and micro components are equal and the qualifier component
1:a8b6921: 	 * is equal (using <code>String.equals</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * @param object The <code>Version</code> object to be compared.
1:a8b6921: 	 * @return <code>true</code> if <code>object</code> is a
1:a8b6921: 	 *         <code>Version</code> and is equal to this object;
1:a8b6921: 	 *         <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean equals(Object object) {
1:a8b6921: 		if (object == this) { // quicktest
1:a8b6921: 			return true;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!(object instanceof Version)) {
1:a8b6921: 			return false;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		Version other = (Version) object;
1:a8b6921: 		return (major == other.major) && (minor == other.minor)
1:a8b6921: 				&& (micro == other.micro) && qualifier.equals(other.qualifier);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Compares this <code>Version</code> object to another object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A version is considered to be <b>less than </b> another version if its
1:a8b6921: 	 * major component is less than the other version's major component, or the
1:a8b6921: 	 * major components are equal and its minor component is less than the other
1:a8b6921: 	 * version's minor component, or the major and minor components are equal
1:a8b6921: 	 * and its micro component is less than the other version's micro component,
1:a8b6921: 	 * or the major, minor and micro components are equal and it's qualifier
1:a8b6921: 	 * component is less than the other version's qualifier component (using
1:a8b6921: 	 * <code>String.compareTo</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A version is considered to be <b>equal to</b> another version if the
1:a8b6921: 	 * major, minor and micro components are equal and the qualifier component
1:a8b6921: 	 * is equal (using <code>String.compareTo</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * @param object The <code>Version</code> object to be compared.
1:a8b6921: 	 * @return A negative integer, zero, or a positive integer if this object is
1:a8b6921: 	 *         less than, equal to, or greater than the specified
1:a8b6921: 	 *         <code>Version</code> object.
1:a8b6921: 	 * @throws ClassCastException If the specified object is not a
1:a8b6921: 	 *         <code>Version</code>.
1:a8b6921: 	 */
1:a8b6921: 	public int compareTo(Object object) {
1:a8b6921: 		if (object == this) { // quicktest
1:a8b6921: 			return 0;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		Version other = (Version) object;
1:a8b6921: 
1:a8b6921: 		int result = major - other.major;
1:a8b6921: 		if (result != 0) {
1:a8b6921: 			return result;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		result = minor - other.minor;
1:a8b6921: 		if (result != 0) {
1:a8b6921: 			return result;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		result = micro - other.micro;
1:a8b6921: 		if (result != 0) {
1:a8b6921: 			return result;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return qualifier.compareTo(other.qualifier);
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Version.java,v 1.17 2007/02/20 00:07:22 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2004, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.NoSuchElementException;
1: import java.util.StringTokenizer;
1: 
1: /**
1:  * Version identifier for bundles and packages.
1:  * 
1:  * <p>
1:  * Version identifiers have four components.
1:  * <ol>
1:  * <li>Major version. A non-negative integer.</li>
1:  * <li>Minor version. A non-negative integer.</li>
1:  * <li>Micro version. A non-negative integer.</li>
1:  * <li>Qualifier. A text string. See <code>Version(String)</code> for the
1:  * format of the qualifier string.</li>
1:  * </ol>
1:  * 
1:  * <p>
1:  * <code>Version</code> objects are immutable.
1:  * 
1:  * @since 1.3
1:  * @Immutable
1:  * @version $Revision: 1.17 $
1:  */
1: 
1: public class Version implements Comparable {
1: 	private final int			major;
1: 	private final int			minor;
1: 	private final int			micro;
1: 	private final String		qualifier;
1: 	private static final String	SEPARATOR		= ".";					//$NON-NLS-1$
1: 
1: 	/**
1: 	 * The empty version "0.0.0". Equivalent to calling
1: 	 * <code>new Version(0,0,0)</code>.
1: 	 */
1: 	public static final Version	emptyVersion	= new Version(0, 0, 0);
1: 
1: 	/**
1: 	 * Creates a version identifier from the specified numerical components.
1: 	 * 
1: 	 * <p>
1: 	 * The qualifier is set to the empty string.
1: 	 * 
1: 	 * @param major Major component of the version identifier.
1: 	 * @param minor Minor component of the version identifier.
1: 	 * @param micro Micro component of the version identifier.
1: 	 * @throws IllegalArgumentException If the numerical components are
1: 	 *         negative.
1: 	 */
1: 	public Version(int major, int minor, int micro) {
1: 		this(major, minor, micro, null);
1: 	}
1: 
1: 	/**
1: 	 * Creates a version identifier from the specifed components.
1: 	 * 
1: 	 * @param major Major component of the version identifier.
1: 	 * @param minor Minor component of the version identifier.
1: 	 * @param micro Micro component of the version identifier.
1: 	 * @param qualifier Qualifier component of the version identifier. If
1: 	 *        <code>null</code> is specified, then the qualifier will be set
1: 	 *        to the empty string.
1: 	 * @throws IllegalArgumentException If the numerical components are negative
1: 	 *         or the qualifier string is invalid.
1: 	 */
1: 	public Version(int major, int minor, int micro, String qualifier) {
1: 		if (qualifier == null) {
1: 			qualifier = ""; //$NON-NLS-1$
1: 		}
1: 
1: 		this.major = major;
1: 		this.minor = minor;
1: 		this.micro = micro;
1: 		this.qualifier = qualifier;
1: 		validate();
1: 	}
1: 
1: 	/**
1: 	 * Created a version identifier from the specified string.
1: 	 * 
1: 	 * <p>
1: 	 * Here is the grammar for version strings.
1: 	 * 
1: 	 * <pre>
1: 	 * version ::= major('.'minor('.'micro('.'qualifier)?)?)?
1: 	 * major ::= digit+
1: 	 * minor ::= digit+
1: 	 * micro ::= digit+
1: 	 * qualifier ::= (alpha|digit|'_'|'-')+
1: 	 * digit ::= [0..9]
1: 	 * alpha ::= [a..zA..Z]
1: 	 * </pre>
1: 	 * 
1: 	 * There must be no whitespace in version.
1: 	 * 
1: 	 * @param version String representation of the version identifier.
1: 	 * @throws IllegalArgumentException If <code>version</code> is improperly
1: 	 *         formatted.
1: 	 */
1: 	public Version(String version) {
1: 		int major = 0;
1: 		int minor = 0;
1: 		int micro = 0;
1: 		String qualifier = ""; //$NON-NLS-1$
1: 
1: 		try {
1: 			StringTokenizer st = new StringTokenizer(version, SEPARATOR, true);
1: 			major = Integer.parseInt(st.nextToken());
1: 
1: 			if (st.hasMoreTokens()) {
1: 				st.nextToken(); // consume delimiter
1: 				minor = Integer.parseInt(st.nextToken());
1: 
1: 				if (st.hasMoreTokens()) {
1: 					st.nextToken(); // consume delimiter
1: 					micro = Integer.parseInt(st.nextToken());
1: 
1: 					if (st.hasMoreTokens()) {
1: 						st.nextToken(); // consume delimiter
1: 						qualifier = st.nextToken();
1: 
1: 						if (st.hasMoreTokens()) {
1: 							throw new IllegalArgumentException("invalid format"); //$NON-NLS-1$
1: 						}
1: 					}
1: 				}
1: 			}
1: 		}
1: 		catch (NoSuchElementException e) {
1: 			throw new IllegalArgumentException("invalid format"); //$NON-NLS-1$
1: 		}
1: 
1: 		this.major = major;
1: 		this.minor = minor;
1: 		this.micro = micro;
1: 		this.qualifier = qualifier;
1: 		validate();
1: 	}
1: 
1: 	/**
1: 	 * Called by the Version constructors to validate the version components.
1: 	 * 
1: 	 * @throws IllegalArgumentException If the numerical components are negative
1: 	 *         or the qualifier string is invalid.
1: 	 */
1: 	private void validate() {
1: 		if (major < 0) {
1: 			throw new IllegalArgumentException("negative major"); //$NON-NLS-1$
1: 		}
1: 		if (minor < 0) {
1: 			throw new IllegalArgumentException("negative minor"); //$NON-NLS-1$
1: 		}
1: 		if (micro < 0) {
1: 			throw new IllegalArgumentException("negative micro"); //$NON-NLS-1$
1: 		}
1: 		int length = qualifier.length();
1: 		for (int i = 0; i < length; i++) {
1: 			if ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-".indexOf(qualifier.charAt(i)) == -1) { //$NON-NLS-1$
1: 				throw new IllegalArgumentException("invalid qualifier"); //$NON-NLS-1$
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Parses a version identifier from the specified string.
1: 	 * 
1: 	 * <p>
1: 	 * See <code>Version(String)</code> for the format of the version string.
1: 	 * 
1: 	 * @param version String representation of the version identifier. Leading
1: 	 *        and trailing whitespace will be ignored.
1: 	 * @return A <code>Version</code> object representing the version
1: 	 *         identifier. If <code>version</code> is <code>null</code> or
1: 	 *         the empty string then <code>emptyVersion</code> will be
1: 	 *         returned.
1: 	 * @throws IllegalArgumentException If <code>version</code> is improperly
1: 	 *         formatted.
1: 	 */
1: 	public static Version parseVersion(String version) {
1: 		if (version == null) {
1: 			return emptyVersion;
1: 		}
1: 
1: 		version = version.trim();
1: 		if (version.length() == 0) {
1: 			return emptyVersion;
1: 		}
1: 
1: 		return new Version(version);
1: 	}
1: 
1: 	/**
1: 	 * Returns the major component of this version identifier.
1: 	 * 
1: 	 * @return The major component.
1: 	 */
1: 	public int getMajor() {
1: 		return major;
1: 	}
1: 
1: 	/**
1: 	 * Returns the minor component of this version identifier.
1: 	 * 
1: 	 * @return The minor component.
1: 	 */
1: 	public int getMinor() {
1: 		return minor;
1: 	}
1: 
1: 	/**
1: 	 * Returns the micro component of this version identifier.
1: 	 * 
1: 	 * @return The micro component.
1: 	 */
1: 	public int getMicro() {
1: 		return micro;
1: 	}
1: 
1: 	/**
1: 	 * Returns the qualifier component of this version identifier.
1: 	 * 
1: 	 * @return The qualifier component.
1: 	 */
1: 	public String getQualifier() {
1: 		return qualifier;
1: 	}
1: 
1: 	/**
1: 	 * Returns the string representation of this version identifier.
1: 	 * 
1: 	 * <p>
1: 	 * The format of the version string will be <code>major.minor.micro</code>
1: 	 * if qualifier is the empty string or
1: 	 * <code>major.minor.micro.qualifier</code> otherwise.
1: 	 * 
1: 	 * @return The string representation of this version identifier.
1: 	 */
1: 	public String toString() {
1: 		String base = major + SEPARATOR + minor + SEPARATOR + micro;
1: 		if (qualifier.length() == 0) { //$NON-NLS-1$
1: 			return base;
1: 		}
1: 		else {
1: 			return base + SEPARATOR + qualifier;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Returns a hash code value for the object.
1: 	 * 
1: 	 * @return An integer which is a hash code value for this object.
1: 	 */
1: 	public int hashCode() {
1: 		return (major << 24) + (minor << 16) + (micro << 8)
1: 				+ qualifier.hashCode();
1: 	}
1: 
1: 	/**
1: 	 * Compares this <code>Version</code> object to another object.
1: 	 * 
1: 	 * <p>
1: 	 * A version is considered to be <b>equal to </b> another version if the
1: 	 * major, minor and micro components are equal and the qualifier component
1: 	 * is equal (using <code>String.equals</code>).
1: 	 * 
1: 	 * @param object The <code>Version</code> object to be compared.
1: 	 * @return <code>true</code> if <code>object</code> is a
1: 	 *         <code>Version</code> and is equal to this object;
1: 	 *         <code>false</code> otherwise.
1: 	 */
1: 	public boolean equals(Object object) {
1: 		if (object == this) { // quicktest
1: 			return true;
1: 		}
1: 
1: 		if (!(object instanceof Version)) {
1: 			return false;
1: 		}
1: 
1: 		Version other = (Version) object;
1: 		return (major == other.major) && (minor == other.minor)
1: 				&& (micro == other.micro) && qualifier.equals(other.qualifier);
1: 	}
1: 
1: 	/**
1: 	 * Compares this <code>Version</code> object to another object.
1: 	 * 
1: 	 * <p>
1: 	 * A version is considered to be <b>less than </b> another version if its
1: 	 * major component is less than the other version's major component, or the
1: 	 * major components are equal and its minor component is less than the other
1: 	 * version's minor component, or the major and minor components are equal
1: 	 * and its micro component is less than the other version's micro component,
1: 	 * or the major, minor and micro components are equal and it's qualifier
1: 	 * component is less than the other version's qualifier component (using
1: 	 * <code>String.compareTo</code>).
1: 	 * 
1: 	 * <p>
1: 	 * A version is considered to be <b>equal to</b> another version if the
1: 	 * major, minor and micro components are equal and the qualifier component
1: 	 * is equal (using <code>String.compareTo</code>).
1: 	 * 
1: 	 * @param object The <code>Version</code> object to be compared.
1: 	 * @return A negative integer, zero, or a positive integer if this object is
1: 	 *         less than, equal to, or greater than the specified
1: 	 *         <code>Version</code> object.
1: 	 * @throws ClassCastException If the specified object is not a
1: 	 *         <code>Version</code>.
1: 	 */
1: 	public int compareTo(Object object) {
1: 		if (object == this) { // quicktest
1: 			return 0;
1: 		}
1: 
1: 		Version other = (Version) object;
1: 
1: 		int result = major - other.major;
1: 		if (result != 0) {
1: 			return result;
1: 		}
1: 
1: 		result = minor - other.minor;
1: 		if (result != 0) {
1: 			return result;
1: 		}
1: 
1: 		result = micro - other.micro;
1: 		if (result != 0) {
1: 			return result;
1: 		}
1: 
1: 		return qualifier.compareTo(other.qualifier);
1: 	}
1: }
============================================================================