1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ReclaimSpace
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.PageTimeStamp;
1:eac0369: import org.apache.derby.iapi.store.raw.PageKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Post commit work to reclaim some space from the raw store.  This is a
1:eac0369: 	wrapper class for the real serviceable class who wraps this on top of
1:eac0369: 	itself so different things can be identified.
1:eac0369: */
1:eac0369: public final class ReclaimSpace implements Serviceable
1:eac0369: {
1:eac0369: 	private  boolean serviceASAP;
1:eac0369: 
1:eac0369: 	private  ContainerKey containerId;
1:eac0369: 	private  PageKey pageId;		// Not used for reclaiming container.
1:eac0369: 	private  RecordHandle headRowHandle; // Used for reclaiming overflow page
1:eac0369: 										 // and row reserved space.
1:eac0369: 
1:eac0369: 	// The following is used for reclaiming column chain only.
1:eac0369: 	private int  columnId;		// Which column in the row to reclaim.
1:eac0369: 	private long columnPageId;	// Where the column chain pointer
1:eac0369: 	private int  columnRecordId; // is pointed at.
1:eac0369: 	private PageTimeStamp timeStamp; // Time stamp of columnPageId to make sure
1:eac0369: 									 // the post commit work doesn't get
1:eac0369: 									 // exercised more then once.
1:eac0369: 
1:eac0369: 	private  int  attempts;
1:eac0369: 
1:eac0369: 	private  DataFactory processor;	// processor knows how to reclaim file space
1:eac0369: 
1:eac0369: 	private  int reclaim; // what is it we should be reclaiming 
1:eac0369: 	public static final int CONTAINER = 1;	// reclaim the entire container
1:eac0369: 	public static final int PAGE = 2; 		// reclaim an overflow page
1:eac0369: 	public static final int ROW_RESERVE = 3; // reclaim reserved space on a row
1:eac0369: 	public static final int COLUMN_CHAIN = 4; // reclaim a column chain
1:eac0369: 
1:eac0369: 
1:eac0369: 	private void initContainerInfo(ContainerKey containerId, int reclaim,
1:eac0369: 							  DataFactory processor, boolean serviceASAP)
1:eac0369: 	{
1:eac0369: 		this.containerId = containerId;
1:eac0369: 		this.reclaim = reclaim;
1:eac0369: 		this.attempts = 0;
1:eac0369: 
1:eac0369: 		this.processor = processor;
1:eac0369: 		this.serviceASAP = serviceASAP;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// reclaim container
1:eac0369: 	public ReclaimSpace(int reclaim, ContainerKey containerId, 
1:eac0369: 						DataFactory processor, boolean serviceASAP)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(reclaim == CONTAINER);
1:eac0369: 		initContainerInfo(containerId, reclaim, processor, serviceASAP);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// reclaim page - undo of insert into overflow page
1:eac0369: 	public ReclaimSpace(int reclaim, PageKey pageId,
1:eac0369: 						DataFactory processor, boolean serviceASAP)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(reclaim == PAGE);
1:eac0369: 		initContainerInfo(pageId.getContainerId(), reclaim, processor, serviceASAP);
1:eac0369: 
1:eac0369: 		this.pageId = pageId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// reclaim row reserved space
1:eac0369: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle, 
1:eac0369: 						DataFactory processor, boolean serviceASAP) 
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(reclaim == ROW_RESERVE);
1:eac0369: 
1:eac0369: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
1:eac0369: 
1:eac0369: 		this.headRowHandle = headRowHandle;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// reclaim column chain
1:eac0369: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle,
1:eac0369: 						int columnId, long ovPageId, int ovRecordId,
1:eac0369: 						PageTimeStamp timeStamp,
1:eac0369: 						DataFactory processor, boolean serviceASAP)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(reclaim == COLUMN_CHAIN);
1:eac0369: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
1:eac0369: 
1:eac0369: 		this.headRowHandle = headRowHandle;
1:eac0369: 		this.columnId = columnId;
1:eac0369: 		this.columnPageId = ovPageId;
1:eac0369: 		this.columnRecordId = ovRecordId;
1:eac0369: 		this.timeStamp = timeStamp;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Serviceable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public boolean serviceASAP()
1:eac0369: 	{
1:eac0369: 		return serviceASAP;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int performWork(ContextManager context) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(context != null, "context is null");
1:eac0369: 			SanityManager.ASSERT(processor != null, "processor is null");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return processor.reclaimSpace(this, context);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	// @return true, if this work needs to be done on a user thread immediately
1:eac0369: 	public boolean serviceImmediately()
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		//It's very important that we reclaim container space immediately
1:eac0369: 		//as part of post commit cleanup. Because typically could typically 
1:eac0369: 		//involve large amount of space freed and
1:eac0369: 		//we don't want conatiner reclaim requests lost if the server crashes
1:eac0369: 		//for some reasom before Container Reclaim requests could be
1:eac0369: 		//processed successfully by an asynchronous thread.
1:eac0369: 		//if(reclaim == CONTAINER)
1:eac0369: 		//	return true; else return false;
1:eac0369: 		return true;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class specific methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public final ContainerKey getContainerId()
1:eac0369: 	{
1:eac0369: 		return containerId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final PageKey getPageId()
1:eac0369: 	{
1:eac0369: 		return pageId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final RecordHandle getHeadRowHandle()
1:eac0369: 	{
1:eac0369: 		return headRowHandle;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int getColumnId()
1:eac0369: 	{
1:eac0369: 		return columnId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final long getColumnPageId()
1:eac0369: 	{
1:eac0369: 		return columnPageId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int getColumnRecordId()
1:eac0369: 	{
1:eac0369: 		return columnRecordId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final PageTimeStamp getPageTimeStamp()
1:eac0369: 	{
1:eac0369: 		return timeStamp;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int reclaimWhat()
1:eac0369: 	{
1:eac0369: 		return reclaim;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int incrAttempts()
1:eac0369: 	{
1:eac0369: 		return ++attempts;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// debug
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (reclaim == CONTAINER)
1:eac0369: 				return "Reclaim CONTAINER (" + containerId + ")";
1:eac0369: 
1:eac0369: 			if (reclaim == PAGE)
1:eac0369: 				return "Reclaim PAGE (" + pageId + ") head row at " + headRowHandle;
1:eac0369: 
1:eac0369: 			if (reclaim == ROW_RESERVE)
1:eac0369: 				return "Reclaim ROW_RESERVE (" + pageId + ")." + headRowHandle + ")";
1:eac0369: 
1:eac0369: 			if (reclaim == COLUMN_CHAIN)
1:eac0369: 				return "Reclaim COLUMN_CHAIN ("+ pageId + ").(" + headRowHandle
1:eac0369: 								  + "," + columnId + ") at (" + columnPageId +
1:eac0369: 								  "," + columnRecordId + ")";
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ReclaimSpace
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.PageTimeStamp;
1: import org.apache.derby.iapi.store.raw.PageKey;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: 
1: 
1: /**
1: 	Post commit work to reclaim some space from the raw store.  This is a
1: 	wrapper class for the real serviceable class who wraps this on top of
1: 	itself so different things can be identified.
1: */
1: public final class ReclaimSpace implements Serviceable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private  boolean serviceASAP;
1: 
1: 	private  ContainerKey containerId;
1: 	private  PageKey pageId;		// Not used for reclaiming container.
1: 	private  RecordHandle headRowHandle; // Used for reclaiming overflow page
1: 										 // and row reserved space.
1: 
1: 	// The following is used for reclaiming column chain only.
1: 	private int  columnId;		// Which column in the row to reclaim.
1: 	private long columnPageId;	// Where the column chain pointer
1: 	private int  columnRecordId; // is pointed at.
1: 	private PageTimeStamp timeStamp; // Time stamp of columnPageId to make sure
1: 									 // the post commit work doesn't get
1: 									 // exercised more then once.
1: 
1: 	private  int  attempts;
1: 
1: 	private  DataFactory processor;	// processor knows how to reclaim file space
1: 
1: 	private  int reclaim; // what is it we should be reclaiming 
1: 	public static final int CONTAINER = 1;	// reclaim the entire container
1: 	public static final int PAGE = 2; 		// reclaim an overflow page
1: 	public static final int ROW_RESERVE = 3; // reclaim reserved space on a row
1: 	public static final int COLUMN_CHAIN = 4; // reclaim a column chain
1: 
1: 
1: 	private void initContainerInfo(ContainerKey containerId, int reclaim,
1: 							  DataFactory processor, boolean serviceASAP)
1: 	{
1: 		this.containerId = containerId;
1: 		this.reclaim = reclaim;
1: 		this.attempts = 0;
1: 
1: 		this.processor = processor;
1: 		this.serviceASAP = serviceASAP;
1: 	}
1: 
1: 	// reclaim container
1: 	public ReclaimSpace(int reclaim, ContainerKey containerId, 
1: 						DataFactory processor, boolean serviceASAP)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(reclaim == CONTAINER);
1: 		initContainerInfo(containerId, reclaim, processor, serviceASAP);
1: 	}
1: 
1: 	// reclaim page - undo of insert into overflow page
1: 	public ReclaimSpace(int reclaim, PageKey pageId,
1: 						DataFactory processor, boolean serviceASAP)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(reclaim == PAGE);
1: 		initContainerInfo(pageId.getContainerId(), reclaim, processor, serviceASAP);
1: 
1: 		this.pageId = pageId;
1: 	}
1: 
1: 	// reclaim row reserved space
1: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle, 
1: 						DataFactory processor, boolean serviceASAP) 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(reclaim == ROW_RESERVE);
1: 
1: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
1: 
1: 		this.headRowHandle = headRowHandle;
1: 	}
1: 
1: 	// reclaim column chain
1: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle,
1: 						int columnId, long ovPageId, int ovRecordId,
1: 						PageTimeStamp timeStamp,
1: 						DataFactory processor, boolean serviceASAP)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(reclaim == COLUMN_CHAIN);
1: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
1: 
1: 		this.headRowHandle = headRowHandle;
1: 		this.columnId = columnId;
1: 		this.columnPageId = ovPageId;
1: 		this.columnRecordId = ovRecordId;
1: 		this.timeStamp = timeStamp;
1: 	}
1: 
1: 	/*
1: 	 * Serviceable methods
1: 	 */
1: 
1: 	public boolean serviceASAP()
1: 	{
1: 		return serviceASAP;
1: 	}
1: 
1: 	public int performWork(ContextManager context) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(context != null, "context is null");
1: 			SanityManager.ASSERT(processor != null, "processor is null");
1: 		}
1: 
1: 		return processor.reclaimSpace(this, context);
1: 	}
1: 
1: 
1: 	// @return true, if this work needs to be done on a user thread immediately
1: 	public boolean serviceImmediately()
1: 	{
1: 
1: 		//It's very important that we reclaim container space immediately
1: 		//as part of post commit cleanup. Because typically could typically 
1: 		//involve large amount of space freed and
1: 		//we don't want conatiner reclaim requests lost if the server crashes
1: 		//for some reasom before Container Reclaim requests could be
1: 		//processed successfully by an asynchronous thread.
1: 		//if(reclaim == CONTAINER)
1: 		//	return true; else return false;
1: 		return true;
1: 	}	
1: 
1: 
1: 	/*
1: 	 * class specific methods
1: 	 */
1: 
1: 	public final ContainerKey getContainerId()
1: 	{
1: 		return containerId;
1: 	}
1: 
1: 	public final PageKey getPageId()
1: 	{
1: 		return pageId;
1: 	}
1: 
1: 	public final RecordHandle getHeadRowHandle()
1: 	{
1: 		return headRowHandle;
1: 	}
1: 
1: 	public final int getColumnId()
1: 	{
1: 		return columnId;
1: 	}
1: 
1: 	public final long getColumnPageId()
1: 	{
1: 		return columnPageId;
1: 	}
1: 
1: 	public final int getColumnRecordId()
1: 	{
1: 		return columnRecordId;
1: 	}
1: 
1: 	public final PageTimeStamp getPageTimeStamp()
1: 	{
1: 		return timeStamp;
1: 	}
1: 
1: 	public final int reclaimWhat()
1: 	{
1: 		return reclaim;
1: 	}
1: 
1: 	public final int incrAttempts()
1: 	{
1: 		return ++attempts;
1: 	}
1: 
1: 	// debug
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (reclaim == CONTAINER)
1: 				return "Reclaim CONTAINER (" + containerId + ")";
1: 
1: 			if (reclaim == PAGE)
1: 				return "Reclaim PAGE (" + pageId + ") head row at " + headRowHandle;
1: 
1: 			if (reclaim == ROW_RESERVE)
1: 				return "Reclaim ROW_RESERVE (" + pageId + ")." + headRowHandle + ")";
1: 
1: 			if (reclaim == COLUMN_CHAIN)
1: 				return "Reclaim COLUMN_CHAIN ("+ pageId + ").(" + headRowHandle
1: 								  + "," + columnId + ") at (" + columnPageId +
1: 								  "," + columnRecordId + ")";
1: 		}
1: 		return null;
1: 
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.PageTimeStamp;
0: import org.apache.derby.iapi.store.raw.PageKey;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: 
0: 
0: /**
0: 	Post commit work to reclaim some space from the raw store.  This is a
0: 	wrapper class for the real serviceable class who wraps this on top of
0: 	itself so different things can be identified.
0: */
0: public final class ReclaimSpace implements Serviceable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private  boolean serviceASAP;
0: 
0: 	private  ContainerKey containerId;
0: 	private  PageKey pageId;		// Not used for reclaiming container.
0: 	private  RecordHandle headRowHandle; // Used for reclaiming overflow page
0: 										 // and row reserved space.
0: 
0: 	// The following is used for reclaiming column chain only.
0: 	private int  columnId;		// Which column in the row to reclaim.
0: 	private long columnPageId;	// Where the column chain pointer
0: 	private int  columnRecordId; // is pointed at.
0: 	private PageTimeStamp timeStamp; // Time stamp of columnPageId to make sure
0: 									 // the post commit work doesn't get
0: 									 // exercised more then once.
0: 
0: 	private  int  attempts;
0: 
0: 	private  DataFactory processor;	// processor knows how to reclaim file space
0: 
0: 	private  int reclaim; // what is it we should be reclaiming 
0: 	public static final int CONTAINER = 1;	// reclaim the entire container
0: 	public static final int PAGE = 2; 		// reclaim an overflow page
0: 	public static final int ROW_RESERVE = 3; // reclaim reserved space on a row
0: 	public static final int COLUMN_CHAIN = 4; // reclaim a column chain
0: 
0: 
0: 	private void initContainerInfo(ContainerKey containerId, int reclaim,
0: 							  DataFactory processor, boolean serviceASAP)
0: 	{
0: 		this.containerId = containerId;
0: 		this.reclaim = reclaim;
0: 		this.attempts = 0;
0: 
0: 		this.processor = processor;
0: 		this.serviceASAP = serviceASAP;
0: 	}
0: 
0: 	// reclaim container
0: 	public ReclaimSpace(int reclaim, ContainerKey containerId, 
0: 						DataFactory processor, boolean serviceASAP)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(reclaim == CONTAINER);
0: 		initContainerInfo(containerId, reclaim, processor, serviceASAP);
0: 	}
0: 
0: 	// reclaim page - undo of insert into overflow page
0: 	public ReclaimSpace(int reclaim, PageKey pageId,
0: 						DataFactory processor, boolean serviceASAP)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(reclaim == PAGE);
0: 		initContainerInfo(pageId.getContainerId(), reclaim, processor, serviceASAP);
0: 
0: 		this.pageId = pageId;
0: 	}
0: 
0: 	// reclaim row reserved space
0: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle, 
0: 						DataFactory processor, boolean serviceASAP) 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(reclaim == ROW_RESERVE);
0: 
0: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
0: 
0: 		this.headRowHandle = headRowHandle;
0: 	}
0: 
0: 	// reclaim column chain
0: 	public ReclaimSpace(int reclaim, RecordHandle headRowHandle,
0: 						int columnId, long ovPageId, int ovRecordId,
0: 						PageTimeStamp timeStamp,
0: 						DataFactory processor, boolean serviceASAP)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(reclaim == COLUMN_CHAIN);
0: 		initContainerInfo(headRowHandle.getContainerId(), reclaim, processor, serviceASAP);
0: 
0: 		this.headRowHandle = headRowHandle;
0: 		this.columnId = columnId;
0: 		this.columnPageId = ovPageId;
0: 		this.columnRecordId = ovRecordId;
0: 		this.timeStamp = timeStamp;
0: 	}
0: 
0: 	/*
0: 	 * Serviceable methods
0: 	 */
0: 
0: 	public boolean serviceASAP()
0: 	{
0: 		return serviceASAP;
0: 	}
0: 
0: 	public int performWork(ContextManager context) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(context != null, "context is null");
0: 			SanityManager.ASSERT(processor != null, "processor is null");
0: 		}
0: 
0: 		return processor.reclaimSpace(this, context);
0: 	}
0: 
0: 
0: 	// @return true, if this work needs to be done on a user thread immediately
0: 	public boolean serviceImmediately()
0: 	{
0: 
0: 		//It's very important that we reclaim container space immediately
0: 		//as part of post commit cleanup. Because typically could typically 
0: 		//involve large amount of space freed and
0: 		//we don't want conatiner reclaim requests lost if the server crashes
0: 		//for some reasom before Container Reclaim requests could be
0: 		//processed successfully by an asynchronous thread.
0: 		//if(reclaim == CONTAINER)
0: 		//	return true; else return false;
0: 		return true;
0: 	}	
0: 
0: 
0: 	/*
0: 	 * class specific methods
0: 	 */
0: 
0: 	public final ContainerKey getContainerId()
0: 	{
0: 		return containerId;
0: 	}
0: 
0: 	public final PageKey getPageId()
0: 	{
0: 		return pageId;
0: 	}
0: 
0: 	public final RecordHandle getHeadRowHandle()
0: 	{
0: 		return headRowHandle;
0: 	}
0: 
0: 	public final int getColumnId()
0: 	{
0: 		return columnId;
0: 	}
0: 
0: 	public final long getColumnPageId()
0: 	{
0: 		return columnPageId;
0: 	}
0: 
0: 	public final int getColumnRecordId()
0: 	{
0: 		return columnRecordId;
0: 	}
0: 
0: 	public final PageTimeStamp getPageTimeStamp()
0: 	{
0: 		return timeStamp;
0: 	}
0: 
0: 	public final int reclaimWhat()
0: 	{
0: 		return reclaim;
0: 	}
0: 
0: 	public final int incrAttempts()
0: 	{
0: 		return ++attempts;
0: 	}
0: 
0: 	// debug
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (reclaim == CONTAINER)
0: 				return "Reclaim CONTAINER (" + containerId + ")";
0: 
0: 			if (reclaim == PAGE)
0: 				return "Reclaim PAGE (" + pageId + ") head row at " + headRowHandle;
0: 
0: 			if (reclaim == ROW_RESERVE)
0: 				return "Reclaim ROW_RESERVE (" + pageId + ")." + headRowHandle + ")";
0: 
0: 			if (reclaim == COLUMN_CHAIN)
0: 				return "Reclaim COLUMN_CHAIN ("+ pageId + ").(" + headRowHandle
0: 								  + "," + columnId + ") at (" + columnPageId +
0: 								  "," + columnRecordId + ")";
0: 		}
0: 		return null;
0: 
0: 	}
0: 
0: }
============================================================================