1:0012545: /*
3:0012545: 
1:27628a0:    Derby - Class org.apache.derbyTesting.unitTests.junit.InputStreamUtilTest
1:0012545: 
1:0012545:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0012545:    contributor license agreements.  See the NOTICE file distributed with
1:0012545:    this work for additional information regarding copyright ownership.
1:0012545:    The ASF licenses this file to You under the Apache License, Version 2.0
1:0012545:    (the "License"); you may not use this file except in compliance with
1:0012545:    the License.  You may obtain a copy of the License at
1:0012545: 
1:0012545:       http://www.apache.org/licenses/LICENSE-2.0
1:0012545: 
1:0012545:    Unless required by applicable law or agreed to in writing, software
1:0012545:    distributed under the License is distributed on an "AS IS" BASIS,
1:0012545:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0012545:    See the License for the specific language governing permissions and
1:0012545:    limitations under the License.
1:0012545: 
1:0012545: */
1:0012545: package org.apache.derbyTesting.unitTests.junit;
1:0012545: 
1:0012545: import java.io.ByteArrayInputStream;
1:0012545: import java.io.EOFException;
1:0012545: import java.io.IOException;
1:0012545: import java.io.InputStream;
1:1ae02c9: import junit.framework.Test;
1:27628a0: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:0012545: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0012545: 
1:0012545: /**
1:27628a0:  * Test case for InputStreamUtil.
1:0012545:  */
1:27628a0: public class InputStreamUtilTest extends BaseTestCase {
1:0012545: 
1:27628a0:     public InputStreamUtilTest(String name) {
1:0012545:         super(name);
1:0012545:     }
1:0012545: 
1:0012545:     public void testNullStream() throws IOException{
1:0012545:         try{
1:27628a0:             InputStreamUtil.skipUntilEOF(null);
1:0012545:             fail("Null InputStream is accepted!");
1:0012545:         }catch (NullPointerException e) {
1:0012545:             assertTrue(true);
1:0012545:         }
1:0012545: 
1:0012545:         try{
1:27628a0:             InputStreamUtil.skipFully(null, 0);
1:0012545:             fail("Null InputStream is accepted!");
1:0012545:         }catch (NullPointerException e) {
1:0012545:             assertTrue(true);
1:0012545:         }
1:0012545:     }
1:0012545: 
1:0012545:     public void testSkipUtilEOFWithOddLength() throws IOException{
1:0012545:         int[] lengths = {0, 1};
1:0012545: 
1:0012545:         for(int i = 0; i < lengths.length; i++){
1:0012545:             int length = lengths[i];
1:0012545:             InputStream is = new ByteArrayInputStream(new byte[length]);
1:27628a0:             assertEquals(length, InputStreamUtil.skipUntilEOF(is));
1:0012545:         }
1:0012545:     }
1:0012545: 
1:0012545:     public void testSkipUtilEOF() throws IOException{
1:0012545:         int[] lengths = {1024, 1024 * 1024};
1:0012545: 
1:0012545:         for(int i = 0; i < lengths.length; i++){
1:0012545:             int length = lengths[i];
1:0012545:             InputStream is = new ByteArrayInputStream(new byte[length]);
1:27628a0:             assertEquals(length, InputStreamUtil.skipUntilEOF(is));
1:0012545:         }
1:0012545:     }
1:0012545: 
1:0012545:     public void testSkipFully() throws IOException{
1:0012545:         int length = 1024;
1:0012545: 
1:0012545:         InputStream is = new ByteArrayInputStream(new byte[length]);
1:27628a0:         InputStreamUtil.skipFully(is, length);
1:27628a0:         assertEquals(0, InputStreamUtil.skipUntilEOF(is));
1:0012545: 
1:0012545:         is = new ByteArrayInputStream(new byte[length]);
1:27628a0:         InputStreamUtil.skipFully(is, length - 1);
1:27628a0:         assertEquals(1, InputStreamUtil.skipUntilEOF(is));
1:0012545: 
1:0012545:         is = new ByteArrayInputStream(new byte[length]);
1:0012545:         try {
1:27628a0:             InputStreamUtil.skipFully(is, length + 1);
1:0012545:             fail("Should have Meet EOF!");
1:0012545:         } catch (EOFException e) {
1:0012545:             assertTrue(true);
1:0012545:         }
1:27628a0:         assertEquals(0, InputStreamUtil.skipUntilEOF(is));
1:0012545:     }
1:0012545: 
1:0012545:     /**
1:0012545:      * Returns a suite of tests.
1:0012545:      */
1:0012545:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(
1:1ae02c9:             InputStreamUtilTest.class, "InputStreamUtil tests");
1:0012545:     }
1:0012545: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
1:             InputStreamUtilTest.class, "InputStreamUtil tests");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:27628a0
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.InputStreamUtilTest
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:  * Test case for InputStreamUtil.
1: public class InputStreamUtilTest extends BaseTestCase {
1:     public InputStreamUtilTest(String name) {
1:             InputStreamUtil.skipUntilEOF(null);
1:             InputStreamUtil.skipFully(null, 0);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(length, InputStreamUtil.skipUntilEOF(is));
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(length, InputStreamUtil.skipUntilEOF(is));
/////////////////////////////////////////////////////////////////////////
1:         InputStreamUtil.skipFully(is, length);
1:         assertEquals(0, InputStreamUtil.skipUntilEOF(is));
1:         InputStreamUtil.skipFully(is, length - 1);
1:         assertEquals(1, InputStreamUtil.skipUntilEOF(is));
1:             InputStreamUtil.skipFully(is, length + 1);
1:         assertEquals(0, InputStreamUtil.skipUntilEOF(is));
0:         return new TestSuite(InputStreamUtilTest.class, "InputStreamUtil tests");
commit:0012545
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.unitTests.junit.StreamUtilTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
0: import org.apache.derby.iapi.util.StreamUtil;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
0:  * Test case for StreamUtil.
1:  */
0: public class StreamUtilTest extends BaseTestCase {
1: 
0:     public StreamUtilTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testNullStream() throws IOException{
1:         try{
0:             StreamUtil.skipFully(null);
1:             fail("Null InputStream is accepted!");
1:         }catch (NullPointerException e) {
1:             assertTrue(true);
1:         }
1: 
1:         try{
0:             StreamUtil.skipFully(null, 0);
1:             fail("Null InputStream is accepted!");
1:         }catch (NullPointerException e) {
1:             assertTrue(true);
1:         }
1:     }
1: 
1:     public void testSkipUtilEOFWithOddLength() throws IOException{
1:         int[] lengths = {0, 1};
1: 
1:         for(int i = 0; i < lengths.length; i++){
1:             int length = lengths[i];
1:             InputStream is = new ByteArrayInputStream(new byte[length]);
0:             assertEquals(length, StreamUtil.skipFully(is));
1:         }
1:     }
1: 
1:     public void testSkipUtilEOF() throws IOException{
1:         int[] lengths = {1024, 1024 * 1024};
1: 
1:         for(int i = 0; i < lengths.length; i++){
1:             int length = lengths[i];
1:             InputStream is = new ByteArrayInputStream(new byte[length]);
0:             assertEquals(length, StreamUtil.skipFully(is));
1:         }
1:     }
1: 
1:     public void testSkipFully() throws IOException{
1:         int length = 1024;
1: 
1:         InputStream is = new ByteArrayInputStream(new byte[length]);
0:         StreamUtil.skipFully(is, length);
0:         assertEquals(0, StreamUtil.skipFully(is));
1: 
1:         is = new ByteArrayInputStream(new byte[length]);
0:         StreamUtil.skipFully(is, length - 1);
0:         assertEquals(1, StreamUtil.skipFully(is));
1: 
1:         is = new ByteArrayInputStream(new byte[length]);
1:         try {
0:             StreamUtil.skipFully(is, length + 1);
1:             fail("Should have Meet EOF!");
1:         } catch (EOFException e) {
1:             assertTrue(true);
1:         }
0:         assertEquals(0, StreamUtil.skipFully(is));
1:     }
1: 
1:     /**
1:      * Returns a suite of tests.
1:      */
1:     public static Test suite() {
0:         return new TestSuite(StreamUtilTest.class, "StreamUtil tests");
1:     }
1: }
============================================================================