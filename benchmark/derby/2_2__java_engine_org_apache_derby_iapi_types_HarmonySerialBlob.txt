1:a2a0ff2: /*
1:a2a0ff2: 
1:96e3f0c:    Derby - Class org.apache.derby.iapi.types.HarmonySerialBlob
1:a2a0ff2: 
1:a2a0ff2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a2a0ff2:    contributor license agreements.  See the NOTICE file distributed with
1:a2a0ff2:    this work for additional information regarding copyright ownership.
1:a2a0ff2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a2a0ff2:    (the "License"); you may not use this file except in compliance with
1:a2a0ff2:    the License.  You may obtain a copy of the License at
1:a2a0ff2: 
1:a2a0ff2:       http://www.apache.org/licenses/LICENSE-2.0
1:a2a0ff2: 
1:a2a0ff2:    Unless required by applicable law or agreed to in writing, software
1:a2a0ff2:    distributed under the License is distributed on an "AS IS" BASIS,
1:a2a0ff2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2a0ff2:    See the License for the specific language governing permissions and
1:a2a0ff2:    limitations under the License.
1:a2a0ff2: 
1:a2a0ff2:  */
1:a2a0ff2: 
1:a2a0ff2: package org.apache.derby.iapi.types;
1:a2a0ff2: 
1:a2a0ff2: import java.io.ByteArrayInputStream;
1:a2a0ff2: import java.io.InputStream;
1:a2a0ff2: import java.io.OutputStream;
1:a2a0ff2: import java.io.Serializable;
1:a2a0ff2: import java.sql.Blob;
1:a2a0ff2: import java.sql.SQLException;
1:a2a0ff2: 
1:a2a0ff2: import org.apache.derby.iapi.reference.SQLState;
1:a2a0ff2: import org.apache.derby.iapi.error.StandardException;
1:a2a0ff2: 
1:a2a0ff2: /**
1:a2a0ff2:  * Copied from the Harmony project's implementation of javax.sql.rowset.serial.SerialBlob
1:a2a0ff2:  * at subversion revision 946981.
1:a2a0ff2:  */
1:a2a0ff2: public class HarmonySerialBlob implements Blob, Serializable, Cloneable {
1:a2a0ff2: 
1:a2a0ff2:     private static final long serialVersionUID = -8144641928112860441L;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private byte[] buf;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private Blob blob;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private long len;
1:a2a0ff2: 
1:a2a0ff2:     // required by serialized form
1:a2a0ff2:     private long origLen;
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Constructs an instance by the given <code>blob</code>
1:a2a0ff2:      * 
1:a2a0ff2:      * @param blob
1:a2a0ff2:      *            the given blob
6:a2a0ff2:      * @throws SQLException
1:f668d94:      *             if an error is encountered during serialization, or
1:a2a0ff2:      *             if <code>blob</code> is null
1:a2a0ff2:      */
1:a2a0ff2:     public HarmonySerialBlob(Blob blob) throws SQLException {
1:a2a0ff2:         if (blob == null) { throw new IllegalArgumentException(); }
1:a2a0ff2:         
1:a2a0ff2:         this.blob = blob;
1:a2a0ff2:         buf = blob.getBytes(1, (int) blob.length());
1:a2a0ff2:         len = buf.length;
1:a2a0ff2:         origLen = len;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Constructs an instance by the given <code>buf</code>
1:a2a0ff2:      * 
1:a2a0ff2:      * @param buf
1:a2a0ff2:      *            the given buffer
1:a2a0ff2:      */
1:7cfb7e6:     public HarmonySerialBlob(byte[] buf) {
1:a2a0ff2:         this.buf = new byte[buf.length];
1:a2a0ff2:         len = buf.length;
1:a2a0ff2:         origLen = len;
1:a2a0ff2:         System.arraycopy(buf, 0, this.buf, 0, (int) len);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Returns an input stream of this SerialObject.
1:a2a0ff2:      * 
1:a2a0ff2:      * @throws SQLException
2:a2a0ff2:      *             if an error is encountered
1:a2a0ff2:      */
1:a2a0ff2:     public InputStream getBinaryStream() throws SQLException {
1:a2a0ff2:         return new ByteArrayInputStream(buf);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Returns a copied array of this SerialObject, starting at the
1:a2a0ff2:      * <code> pos </code> with the given <code> length</code> number. If
1:a2a0ff2:      * <code> pos </code> + <code> length </code> - 1 is larger than the length
1:a2a0ff2:      * of this SerialObject array, the <code> length </code> will be shortened
1:a2a0ff2:      * to the length of array - <code>pos</code> + 1.
1:a2a0ff2:      * 
1:a2a0ff2:      * @param pos
1:a2a0ff2:      *            the starting position of the array to be copied.
1:a2a0ff2:      * @param length
1:a2a0ff2:      *            the total length of bytes to be copied
1:a2a0ff2:      * @throws SQLException
1:a2a0ff2:      *             if an error is encountered
1:a2a0ff2:      */
1:a2a0ff2:     public byte[] getBytes(long pos, int length) throws SQLException {
1:a2a0ff2: 
1:a2a0ff2:         if (pos < 1 || pos > len)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:a2a0ff2:         }
1:a2a0ff2:         if (length < 0)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:a2a0ff2:         }
1:a2a0ff2: 
1:a2a0ff2:         if (length > len - pos + 1) {
1:a2a0ff2:             length = (int) (len - pos + 1);
1:a2a0ff2:         }
1:a2a0ff2:         byte[] copiedArray = new byte[length];
1:a2a0ff2:         System.arraycopy(buf, (int) pos - 1, copiedArray, 0, length);
1:a2a0ff2:         return copiedArray;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Gets the number of bytes in this SerialBlob object.
1:a2a0ff2:      * 
1:a2a0ff2:      * @return an long value with the length of the SerialBlob in bytes
1:a2a0ff2:      * @throws SQLException
1:a2a0ff2:      *             if an error is encoutnered
1:a2a0ff2:      */
1:a2a0ff2:     public long length() throws SQLException {
1:a2a0ff2:         return len;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Search for the position in this Blob at which a specified pattern begins,
1:a2a0ff2:      * starting at a specified position within the Blob.
1:a2a0ff2:      * 
1:a2a0ff2:      * @param pattern
1:a2a0ff2:      *            a Blob containing the pattern of data to search for in this
1:a2a0ff2:      *            Blob
1:a2a0ff2:      * @param start
1:a2a0ff2:      *            the position within this Blob to start the search, where the
1:a2a0ff2:      *            first position in the Blob is 1
1:a2a0ff2:      * @return a long value with the position at which the pattern begins. -1 if
1:a2a0ff2:      *         the pattern is not found in this Blob.
1:a2a0ff2:      * @throws SQLException
1:f668d94:      *             if an error occurs accessing the Blob, or
1:a2a0ff2:      *             if an error is encountered
1:a2a0ff2:      */
1:a2a0ff2:     public long position(Blob pattern, long start) throws SQLException {
1:a2a0ff2:         byte[] patternBytes = pattern.getBytes(1, (int) pattern.length());
1:a2a0ff2:         return position(patternBytes, start);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Search for the position in this Blob at which the specified pattern
1:a2a0ff2:      * begins, starting at a specified position within the Blob.
1:a2a0ff2:      * 
1:a2a0ff2:      * @param pattern
1:a2a0ff2:      *            a byte array containing the pattern of data to search for in
1:a2a0ff2:      *            this Blob
1:a2a0ff2:      * @param start
1:a2a0ff2:      *            the position within this Blob to start the search, where the
1:a2a0ff2:      *            first position in the Blob is 1
1:a2a0ff2:      * @return a long value with the position at which the pattern begins. -1 if
1:a2a0ff2:      *         the pattern is not found in this Blob.
1:a2a0ff2:      * @throws SQLException
1:f668d94:      *             if an error is encountered, or
2:a2a0ff2:      *             if an error occurs accessing the Blob
1:a2a0ff2:      */
1:a2a0ff2:     public long position(byte[] pattern, long start) throws SQLException {
1:a2a0ff2:         if (start < 1 || len - (start - 1) < pattern.length) {
1:a2a0ff2:             return -1;
1:a2a0ff2:         }
1:a2a0ff2: 
1:a2a0ff2:         for (int i = (int) (start - 1); i <= (len - pattern.length); ++i) {
1:a2a0ff2:             if (match(buf, i, pattern)) {
1:a2a0ff2:                 return i + 1;
1:a2a0ff2:             }
1:a2a0ff2:         }
1:a2a0ff2:         return -1;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /*
1:a2a0ff2:      * Returns true if the bytes array contains exactly the same elements from
1:a2a0ff2:      * start position to start + subBytes.length as subBytes. Otherwise returns
1:a2a0ff2:      * false.
1:a2a0ff2:      */
1:a2a0ff2:     private boolean match(byte[] bytes, int start, byte[] subBytes) {
1:a2a0ff2:         for (int i = 0; i < subBytes.length;) {
1:a2a0ff2:             if (bytes[start++] != subBytes[i++]) {
1:a2a0ff2:                 return false;
1:a2a0ff2:             }
1:a2a0ff2:         }
1:a2a0ff2:         return true;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public OutputStream setBinaryStream(long pos) throws SQLException {
1:a2a0ff2:         if (blob == null) { throw new IllegalStateException(); }
1:a2a0ff2:         OutputStream os = blob.setBinaryStream(pos);
1:a2a0ff2:         if (os == null) { throw new IllegalStateException(); }
1:a2a0ff2:         return os;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public int setBytes(long pos, byte[] theBytes) throws SQLException {
1:a2a0ff2:         return setBytes(pos, theBytes, 0, theBytes.length);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public int setBytes(long pos, byte[] theBytes, int offset, int length)
1:a2a0ff2:             throws SQLException {
1:a2a0ff2:         if (pos < 1 || length < 0 || pos > (len - length + 1))
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:a2a0ff2:         }
1:a2a0ff2:         if (offset < 0 || length < 0 || offset > (theBytes.length - length))
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_INVALID_OFFSET, new Object[] {offset} );
1:a2a0ff2:         }
1:a2a0ff2:         System.arraycopy(theBytes, offset, buf, (int) pos - 1, length);
1:a2a0ff2:         return length;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public void truncate(long length) throws SQLException {
1:a2a0ff2:         if (length > this.len)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {len} );
1:a2a0ff2:         }
1:a2a0ff2:         buf = getBytes(1, (int) length);
1:a2a0ff2:         len = length;
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public void free() throws SQLException {
1:a2a0ff2:         throw new UnsupportedOperationException("Not supported");
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     public InputStream getBinaryStream(long pos, long length)
1:a2a0ff2:             throws SQLException {
1:a2a0ff2:         if (len < 0)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {len} );
1:a2a0ff2:         }
1:a2a0ff2:         if (length < 0)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:a2a0ff2:         }
1:a2a0ff2:         if (pos < 1 || pos + length > len)
1:a2a0ff2:         {
1:ce40a31:             throw makeSQLException( SQLState.POS_AND_LENGTH_GREATER_THAN_LOB, new Object[] {pos, length} );
1:a2a0ff2:         }
1:a2a0ff2:         return new ByteArrayInputStream(buf, (int) (pos - 1), (int) length);
1:a2a0ff2:     }
1:a2a0ff2: 
1:a2a0ff2:     /**
1:a2a0ff2:      * Create a SQLException from Derby message arguments.
1:a2a0ff2:      */
1:a2a0ff2:     public static SQLException makeSQLException( String messageID, Object[] args )
1:a2a0ff2:     {
1:a2a0ff2:         StandardException se = StandardException.newException( messageID, args );
1:a2a0ff2: 
1:a2a0ff2:         return new SQLException( se.getMessage(), se.getSQLState() );
1:a2a0ff2:     }
1:a2a0ff2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
/////////////////////////////////////////////////////////////////////////
1:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {pos} );
1:             throw makeSQLException( SQLState.BLOB_INVALID_OFFSET, new Object[] {offset} );
/////////////////////////////////////////////////////////////////////////
1:             throw makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {len} );
/////////////////////////////////////////////////////////////////////////
1:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {len} );
1:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {length} );
1:             throw makeSQLException( SQLState.POS_AND_LENGTH_GREATER_THAN_LOB, new Object[] {pos, length} );
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
1:     public HarmonySerialBlob(byte[] buf) {
commit:96e3f0c
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.HarmonySerialBlob
commit:a2a0ff2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.types.SQLClob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.io.Serializable;
1: import java.sql.Blob;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Copied from the Harmony project's implementation of javax.sql.rowset.serial.SerialBlob
1:  * at subversion revision 946981.
1:  */
1: public class HarmonySerialBlob implements Blob, Serializable, Cloneable {
1: 
1:     private static final long serialVersionUID = -8144641928112860441L;
1: 
1:     // required by serialized form
1:     private byte[] buf;
1: 
1:     // required by serialized form
1:     private Blob blob;
1: 
1:     // required by serialized form
1:     private long len;
1: 
1:     // required by serialized form
1:     private long origLen;
1: 
1:     /**
1:      * Constructs an instance by the given <code>blob</code>
1:      * 
1:      * @param blob
1:      *            the given blob
1:      * @throws SQLException
0:      *             if an error is encountered during serialization
1:      * @throws SQLException
1:      *             if <code>blob</code> is null
1:      */
1:     public HarmonySerialBlob(Blob blob) throws SQLException {
1:         if (blob == null) { throw new IllegalArgumentException(); }
1:         
1:         this.blob = blob;
1:         buf = blob.getBytes(1, (int) blob.length());
1:         len = buf.length;
1:         origLen = len;
1:     }
1: 
1:     /**
1:      * Constructs an instance by the given <code>buf</code>
1:      * 
1:      * @param buf
1:      *            the given buffer
1:      * @throws SQLException
0:      *             if an error is encountered during serialization
1:      * @throws SQLException
0:      *             if a SQL error is encountered
1:      */
0:     public HarmonySerialBlob(byte[] buf) throws SQLException {
1:         this.buf = new byte[buf.length];
1:         len = buf.length;
1:         origLen = len;
1:         System.arraycopy(buf, 0, this.buf, 0, (int) len);
1:     }
1: 
1:     /**
1:      * Returns an input stream of this SerialObject.
1:      * 
1:      * @throws SQLException
1:      *             if an error is encountered
1:      */
1:     public InputStream getBinaryStream() throws SQLException {
1:         return new ByteArrayInputStream(buf);
1:     }
1: 
1:     /**
1:      * Returns a copied array of this SerialObject, starting at the
1:      * <code> pos </code> with the given <code> length</code> number. If
1:      * <code> pos </code> + <code> length </code> - 1 is larger than the length
1:      * of this SerialObject array, the <code> length </code> will be shortened
1:      * to the length of array - <code>pos</code> + 1.
1:      * 
1:      * @param pos
1:      *            the starting position of the array to be copied.
1:      * @param length
1:      *            the total length of bytes to be copied
1:      * @throws SQLException
1:      *             if an error is encountered
1:      */
1:     public byte[] getBytes(long pos, int length) throws SQLException {
1: 
1:         if (pos < 1 || pos > len)
1:         {
0:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {new Long(pos)} );
1:         }
1:         if (length < 0)
1:         {
0:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {new Integer(length)} );
1:         }
1: 
1:         if (length > len - pos + 1) {
1:             length = (int) (len - pos + 1);
1:         }
1:         byte[] copiedArray = new byte[length];
1:         System.arraycopy(buf, (int) pos - 1, copiedArray, 0, length);
1:         return copiedArray;
1:     }
1: 
1:     /**
1:      * Gets the number of bytes in this SerialBlob object.
1:      * 
1:      * @return an long value with the length of the SerialBlob in bytes
1:      * @throws SQLException
1:      *             if an error is encoutnered
1:      */
1:     public long length() throws SQLException {
1:         return len;
1:     }
1: 
1:     /**
1:      * Search for the position in this Blob at which a specified pattern begins,
1:      * starting at a specified position within the Blob.
1:      * 
1:      * @param pattern
1:      *            a Blob containing the pattern of data to search for in this
1:      *            Blob
1:      * @param start
1:      *            the position within this Blob to start the search, where the
1:      *            first position in the Blob is 1
1:      * @return a long value with the position at which the pattern begins. -1 if
1:      *         the pattern is not found in this Blob.
1:      * @throws SQLException
1:      *             if an error occurs accessing the Blob
1:      * @throws SQLException
1:      *             if an error is encountered
1:      */
1:     public long position(Blob pattern, long start) throws SQLException {
1:         byte[] patternBytes = pattern.getBytes(1, (int) pattern.length());
1:         return position(patternBytes, start);
1:     }
1: 
1:     /**
1:      * Search for the position in this Blob at which the specified pattern
1:      * begins, starting at a specified position within the Blob.
1:      * 
1:      * @param pattern
1:      *            a byte array containing the pattern of data to search for in
1:      *            this Blob
1:      * @param start
1:      *            the position within this Blob to start the search, where the
1:      *            first position in the Blob is 1
1:      * @return a long value with the position at which the pattern begins. -1 if
1:      *         the pattern is not found in this Blob.
1:      * @throws SQLException
1:      *             if an error is encountered
1:      * @throws SQLException
1:      *             if an error occurs accessing the Blob
1:      */
1:     public long position(byte[] pattern, long start) throws SQLException {
1:         if (start < 1 || len - (start - 1) < pattern.length) {
1:             return -1;
1:         }
1: 
1:         for (int i = (int) (start - 1); i <= (len - pattern.length); ++i) {
1:             if (match(buf, i, pattern)) {
1:                 return i + 1;
1:             }
1:         }
1:         return -1;
1:     }
1: 
1:     /*
1:      * Returns true if the bytes array contains exactly the same elements from
1:      * start position to start + subBytes.length as subBytes. Otherwise returns
1:      * false.
1:      */
1:     private boolean match(byte[] bytes, int start, byte[] subBytes) {
1:         for (int i = 0; i < subBytes.length;) {
1:             if (bytes[start++] != subBytes[i++]) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     public OutputStream setBinaryStream(long pos) throws SQLException {
1:         if (blob == null) { throw new IllegalStateException(); }
1:         OutputStream os = blob.setBinaryStream(pos);
1:         if (os == null) { throw new IllegalStateException(); }
1:         return os;
1:     }
1: 
1:     public int setBytes(long pos, byte[] theBytes) throws SQLException {
1:         return setBytes(pos, theBytes, 0, theBytes.length);
1:     }
1: 
1:     public int setBytes(long pos, byte[] theBytes, int offset, int length)
1:             throws SQLException {
1:         if (pos < 1 || length < 0 || pos > (len - length + 1))
1:         {
0:             throw makeSQLException( SQLState.BLOB_BAD_POSITION, new Object[] {new Long(pos)} );
1:         }
1:         if (offset < 0 || length < 0 || offset > (theBytes.length - length))
1:         {
0:             throw makeSQLException( SQLState.BLOB_INVALID_OFFSET, new Object[] {new Integer(offset)} );
1:         }
1:         System.arraycopy(theBytes, offset, buf, (int) pos - 1, length);
1:         return length;
1:     }
1: 
1:     public void truncate(long length) throws SQLException {
1:         if (length > this.len)
1:         {
0:             throw makeSQLException( SQLState.BLOB_LENGTH_TOO_LONG, new Object[] {new Long(len)} );
1:         }
1:         buf = getBytes(1, (int) length);
1:         len = length;
1:     }
1: 
1:     public void free() throws SQLException {
1:         throw new UnsupportedOperationException("Not supported");
1:     }
1: 
1:     public InputStream getBinaryStream(long pos, long length)
1:             throws SQLException {
1:         if (len < 0)
1:         {
0:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {new Long(len)} );
1:         }
1:         if (length < 0)
1:         {
0:             throw makeSQLException( SQLState.BLOB_NONPOSITIVE_LENGTH, new Object[] {new Long(length)} );
1:         }
1:         if (pos < 1 || pos + length > len)
1:         {
0:             throw makeSQLException( SQLState.POS_AND_LENGTH_GREATER_THAN_LOB, new Object[] {new Long(pos), new Long(length)} );
1:         }
1:         return new ByteArrayInputStream(buf, (int) (pos - 1), (int) length);
1:     }
1: 
1:     /**
1:      * Create a SQLException from Derby message arguments.
1:      */
1:     public static SQLException makeSQLException( String messageID, Object[] args )
1:     {
1:         StandardException se = StandardException.newException( messageID, args );
1: 
1:         return new SQLException( se.getMessage(), se.getSQLState() );
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      *             if an error is encountered during serialization, or
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *             if an error occurs accessing the Blob, or
/////////////////////////////////////////////////////////////////////////
1:      *             if an error is encountered, or
============================================================================