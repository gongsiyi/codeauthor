1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.IndexLister
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
9:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
2:eac0369: import org.apache.derby.iapi.error.StandardException;
1:bc2c59e: import org.apache.derby.iapi.services.io.ArrayUtil;
1:bc2c59e: 
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This interface gathers up some tasty information about the indices on a
1:eac0369:  * table from the DataDictionary.
3:eac0369:  *
1:eac0369:  */
1:eac0369: public class IndexLister
2:eac0369: {
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	STATE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	private	TableDescriptor		tableDescriptor;
1:eac0369: 	private	IndexRowGenerator[]	indexRowGenerators;
1:eac0369: 	private	long[]				indexConglomerateNumbers;
1:eac0369: 	private String[]			indexNames;
1:eac0369: 	// the following 3 are the compact arrays, without duplicate indexes
1:eac0369: 	private IndexRowGenerator[]	distinctIndexRowGenerators;
1:eac0369: 	private	long[]				distinctIndexConglomerateNumbers;
1:eac0369: 	private String[]			distinctIndexNames;
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Make an IndexLister
1:eac0369: 	  *
1:eac0369: 	  *	@param	tableDescriptor	Describes the table in question.
1:eac0369: 	  *
1:eac0369: 	  */
1:eac0369: 	public	IndexLister( TableDescriptor	tableDescriptor )
1:eac0369: 	{
1:eac0369: 		this.tableDescriptor = tableDescriptor;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	INDEXLISTER METHODS
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  *	Returns an array of all the index row generators on a table.
1:eac0369: 	  *
1:eac0369: 	  *	@return	an array of index row generators
1:eac0369: 	  *
2:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public	IndexRowGenerator[]		getIndexRowGenerators()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( indexRowGenerators == null ) { getAllIndexes(); }
1:3f7581c:         return ArrayUtil.copy(indexRowGenerators);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  *	Returns an array of all the index conglomerate ids on a table.
1:eac0369: 	  *
1:eac0369: 	  *	@return	an array of index conglomerate ids
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369:     public	long[]		getIndexConglomerateNumbers()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( indexConglomerateNumbers == null ) { getAllIndexes(); }
1:bc2c59e: 		return	ArrayUtil.copy( indexConglomerateNumbers );
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  *	Returns an array of distinct index row generators on a table,
1:eac0369: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1:eac0369: 	  *
1:eac0369: 	  *	@return	an array of index row generators
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public	IndexRowGenerator[]		getDistinctIndexRowGenerators()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( distinctIndexRowGenerators == null ) { getAllIndexes(); }
1:3f7581c:         return ArrayUtil.copy(distinctIndexRowGenerators);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  *	Returns an array of distinct index conglomerate ids on a table.
1:eac0369: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1:eac0369: 	  *
1:eac0369: 	  *	@return	an array of index conglomerate ids
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369:     public	long[]		getDistinctIndexConglomerateNumbers()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( distinctIndexConglomerateNumbers == null ) { getAllIndexes(); }
1:bc2c59e: 		return	ArrayUtil.copy( distinctIndexConglomerateNumbers );
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  *	Returns an array of index names for all distinct indexes on a table.
1:eac0369: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1:eac0369: 	  *
2:eac0369: 	  *	@return	an array of index names
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369:     public	String[]		getDistinctIndexNames()	throws StandardException
1:eac0369: 	{
1:6048528: 		if ( distinctIndexNames == null ) { getAllIndexes(); }
1:6048528: 		return	ArrayUtil.copy( distinctIndexNames );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	MINIONS
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Reads all the indices on the table and populates arrays with the
1:eac0369: 	  *	corresponding index row generators and index conglomerate ids.
1:eac0369: 	  *
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	private void getAllIndexes()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		int			indexCount = 0;
1:eac0369: 
1:eac0369: 		ConglomerateDescriptor[] cds = 
1:eac0369: 			              tableDescriptor.getConglomerateDescriptors();
1:eac0369: 
1:eac0369: 		/* from one end of work space, we record distinct conglomerate
1:eac0369: 		 * numbers for comparison while we iterate; from the other end of
1:eac0369: 		 * work space, we record duplicate indexes' indexes in "cds" array,
1:eac0369: 		 * so that we can skip them in later round.
1:eac0369: 		 */
1:eac0369: 		long[] workSpace = new long[cds.length - 1];  // 1 heap
1:eac0369: 		int distinctIndexCount = 0, duplicateIndex = workSpace.length - 1;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < cds.length; i++)
1:eac0369: 		{
1:eac0369: 			// first count the number of indices.
1:eac0369: 			ConglomerateDescriptor cd = cds[i];
1:eac0369: 
1:eac0369: 			if ( ! cd.isIndex())
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			int k;
1:eac0369: 			long thisCongNum = cd.getConglomerateNumber();
1:eac0369: 
1:eac0369: 			for (k = 0; k < distinctIndexCount; k++)
1:eac0369: 			{
1:eac0369: 				if (workSpace[k] == thisCongNum)
1:eac0369: 				{
1:eac0369: 					workSpace[duplicateIndex--] = i;
1:eac0369: 					break;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			if (k == distinctIndexCount)			// first appearence
1:eac0369: 				workSpace[distinctIndexCount++] = thisCongNum;
1:eac0369: 
1:eac0369: 			indexCount++;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		indexRowGenerators = new IndexRowGenerator[ indexCount ];
1:eac0369: 		indexConglomerateNumbers = new long[ indexCount ];
1:eac0369: 		indexNames = new String[ indexCount ];
1:eac0369: 		distinctIndexRowGenerators = new IndexRowGenerator[ distinctIndexCount ];
1:eac0369: 		distinctIndexConglomerateNumbers = new long[ distinctIndexCount ];
1:eac0369: 		distinctIndexNames = new String[ distinctIndexCount ];
1:eac0369: 
1:eac0369: 		int duplicatePtr = workSpace.length - 1;
1:eac0369: 		for ( int i = 0, j = -1, k = -1; i < cds.length; i++ )
1:eac0369: 		{
1:eac0369: 			ConglomerateDescriptor cd = cds[i];
1:eac0369: 
1:eac0369: 			if ( ! cd.isIndex())
1:eac0369: 				continue;
1:eac0369: 
1:801cf0d:             indexRowGenerators[++j] = cd.getIndexDescriptor();
1:eac0369: 			indexConglomerateNumbers[j] = cd.getConglomerateNumber();
1:eac0369: 			if (!(cd.isConstraint()))
1:eac0369: 			{
1:eac0369: 				// only fill index name if it is not a constraint.
1:eac0369: 				indexNames[j] = cd.getConglomerateName();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (duplicatePtr > duplicateIndex && i == (int) workSpace[duplicatePtr])
1:eac0369: 				duplicatePtr--;
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				distinctIndexRowGenerators[++k] = indexRowGenerators[j];
1:eac0369: 				distinctIndexConglomerateNumbers[k] = indexConglomerateNumbers[j];
1:eac0369: 				distinctIndexNames[k] = indexNames[j];
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:6048528
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		if ( distinctIndexNames == null ) { getAllIndexes(); }
1: 		return	ArrayUtil.copy( distinctIndexNames );
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             indexRowGenerators[++j] = cd.getIndexDescriptor();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         return ArrayUtil.copy(indexRowGenerators);
/////////////////////////////////////////////////////////////////////////
1:         return ArrayUtil.copy(distinctIndexRowGenerators);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: 
/////////////////////////////////////////////////////////////////////////
0: 		return	(IndexRowGenerator[]) ArrayUtil.copy( indexRowGenerators );
/////////////////////////////////////////////////////////////////////////
1: 		return	ArrayUtil.copy( indexConglomerateNumbers );
/////////////////////////////////////////////////////////////////////////
0: 		return	ArrayUtil.copy( indexNames );
/////////////////////////////////////////////////////////////////////////
0: 		return	(IndexRowGenerator[]) ArrayUtil.copy( distinctIndexRowGenerators );
/////////////////////////////////////////////////////////////////////////
1: 		return	ArrayUtil.copy( distinctIndexConglomerateNumbers );
/////////////////////////////////////////////////////////////////////////
0: 		return	ArrayUtil.copy( indexNames );
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:dee279c
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.IndexLister
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.depend.Dependent;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Enumeration;
0: import java.util.Vector;
1: 
1: /**
1:  * This interface gathers up some tasty information about the indices on a
1:  * table from the DataDictionary.
1:  *
1:  */
1: public class IndexLister
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	STATE
1: 	//
1: 	////////////////////////////////////////////////////////////////////////
1: 
1: 	private	TableDescriptor		tableDescriptor;
1: 	private	IndexRowGenerator[]	indexRowGenerators;
1: 	private	long[]				indexConglomerateNumbers;
1: 	private String[]			indexNames;
1: 	// the following 3 are the compact arrays, without duplicate indexes
1: 	private IndexRowGenerator[]	distinctIndexRowGenerators;
1: 	private	long[]				distinctIndexConglomerateNumbers;
1: 	private String[]			distinctIndexNames;
1: 
1: 	////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Make an IndexLister
1: 	  *
1: 	  *	@param	tableDescriptor	Describes the table in question.
1: 	  *
1: 	  */
1: 	public	IndexLister( TableDescriptor	tableDescriptor )
1: 	{
1: 		this.tableDescriptor = tableDescriptor;
1: 	}
1: 
1: 
1: 	////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	INDEXLISTER METHODS
1: 	//
1: 	////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1: 	  *	Returns an array of all the index row generators on a table.
1: 	  *
1: 	  *	@return	an array of index row generators
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1: 	public	IndexRowGenerator[]		getIndexRowGenerators()
1: 					throws StandardException
1: 	{
1: 		if ( indexRowGenerators == null ) { getAllIndexes(); }
0: 		return	indexRowGenerators;
1: 	}
1: 
1:     /**
1: 	  *	Returns an array of all the index conglomerate ids on a table.
1: 	  *
1: 	  *	@return	an array of index conglomerate ids
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1:     public	long[]		getIndexConglomerateNumbers()
1: 					throws StandardException
1: 	{
1: 		if ( indexConglomerateNumbers == null ) { getAllIndexes(); }
0: 		return	indexConglomerateNumbers;
1: 	}
1: 
1:     /**
0: 	  *	Returns an array of all the index names on a table.
1: 	  *
1: 	  *	@return	an array of index names
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
0:     public	String[]		getIndexNames()	throws StandardException
1: 	{
0: 		if ( indexNames == null ) { getAllIndexes(); }
0: 		return	indexNames;
1: 	}
1: 
1:     /**
1: 	  *	Returns an array of distinct index row generators on a table,
1: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1: 	  *
1: 	  *	@return	an array of index row generators
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1: 	public	IndexRowGenerator[]		getDistinctIndexRowGenerators()
1: 					throws StandardException
1: 	{
1: 		if ( distinctIndexRowGenerators == null ) { getAllIndexes(); }
0: 		return	distinctIndexRowGenerators;
1: 	}
1: 
1:     /**
1: 	  *	Returns an array of distinct index conglomerate ids on a table.
1: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1: 	  *
1: 	  *	@return	an array of index conglomerate ids
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1:     public	long[]		getDistinctIndexConglomerateNumbers()
1: 					throws StandardException
1: 	{
1: 		if ( distinctIndexConglomerateNumbers == null ) { getAllIndexes(); }
0: 		return	distinctIndexConglomerateNumbers;
1: 	}
1: 
1:     /**
1: 	  *	Returns an array of index names for all distinct indexes on a table.
1: 	  * erasing entries for duplicate indexes (which share same conglomerate).
1: 	  *
1: 	  *	@return	an array of index names
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1:     public	String[]		getDistinctIndexNames()	throws StandardException
1: 	{
0: 		if ( indexNames == null ) { getAllIndexes(); }
0: 		return	indexNames;
1: 	}
1: 
1: 	////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	MINIONS
1: 	//
1: 	////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Reads all the indices on the table and populates arrays with the
1: 	  *	corresponding index row generators and index conglomerate ids.
1: 	  *
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1: 	private void getAllIndexes()
1: 					throws StandardException
1: 	{
1: 		int			indexCount = 0;
1: 
1: 		ConglomerateDescriptor[] cds = 
1: 			              tableDescriptor.getConglomerateDescriptors();
1: 
1: 		/* from one end of work space, we record distinct conglomerate
1: 		 * numbers for comparison while we iterate; from the other end of
1: 		 * work space, we record duplicate indexes' indexes in "cds" array,
1: 		 * so that we can skip them in later round.
1: 		 */
1: 		long[] workSpace = new long[cds.length - 1];  // 1 heap
1: 		int distinctIndexCount = 0, duplicateIndex = workSpace.length - 1;
1: 
1: 		for (int i = 0; i < cds.length; i++)
1: 		{
1: 			// first count the number of indices.
1: 			ConglomerateDescriptor cd = cds[i];
1: 
1: 			if ( ! cd.isIndex())
1: 				continue;
1: 
1: 			int k;
1: 			long thisCongNum = cd.getConglomerateNumber();
1: 
1: 			for (k = 0; k < distinctIndexCount; k++)
1: 			{
1: 				if (workSpace[k] == thisCongNum)
1: 				{
1: 					workSpace[duplicateIndex--] = i;
1: 					break;
1: 				}
1: 			}
1: 			if (k == distinctIndexCount)			// first appearence
1: 				workSpace[distinctIndexCount++] = thisCongNum;
1: 
1: 			indexCount++;
1: 		}
1: 
1: 		indexRowGenerators = new IndexRowGenerator[ indexCount ];
1: 		indexConglomerateNumbers = new long[ indexCount ];
1: 		indexNames = new String[ indexCount ];
1: 		distinctIndexRowGenerators = new IndexRowGenerator[ distinctIndexCount ];
1: 		distinctIndexConglomerateNumbers = new long[ distinctIndexCount ];
1: 		distinctIndexNames = new String[ distinctIndexCount ];
1: 
1: 		int duplicatePtr = workSpace.length - 1;
1: 		for ( int i = 0, j = -1, k = -1; i < cds.length; i++ )
1: 		{
1: 			ConglomerateDescriptor cd = cds[i];
1: 
1: 			if ( ! cd.isIndex())
1: 				continue;
1: 
0: 			indexRowGenerators[++j] = 
0: 				(IndexRowGenerator)cd.getIndexDescriptor();
1: 			indexConglomerateNumbers[j] = cd.getConglomerateNumber();
1: 			if (!(cd.isConstraint()))
1: 			{
1: 				// only fill index name if it is not a constraint.
1: 				indexNames[j] = cd.getConglomerateName();
1: 			}
1: 
1: 			if (duplicatePtr > duplicateIndex && i == (int) workSpace[duplicatePtr])
1: 				duplicatePtr--;
1: 			else
1: 			{
1: 				distinctIndexRowGenerators[++k] = indexRowGenerators[j];
1: 				distinctIndexConglomerateNumbers[k] = indexConglomerateNumbers[j];
1: 				distinctIndexNames[k] = indexNames[j];
1: 			}
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Enumeration;
0: import java.util.Vector;
0: 
0: /**
0:  * This interface gathers up some tasty information about the indices on a
0:  * table from the DataDictionary.
0:  *
0:  */
0: public class IndexLister
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	STATE
0: 	//
0: 	////////////////////////////////////////////////////////////////////////
0: 
0: 	private	TableDescriptor		tableDescriptor;
0: 	private	IndexRowGenerator[]	indexRowGenerators;
0: 	private	long[]				indexConglomerateNumbers;
0: 	private String[]			indexNames;
0: 	// the following 3 are the compact arrays, without duplicate indexes
0: 	private IndexRowGenerator[]	distinctIndexRowGenerators;
0: 	private	long[]				distinctIndexConglomerateNumbers;
0: 	private String[]			distinctIndexNames;
0: 
0: 	////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Make an IndexLister
0: 	  *
0: 	  *	@param	tableDescriptor	Describes the table in question.
0: 	  *
0: 	  */
0: 	public	IndexLister( TableDescriptor	tableDescriptor )
0: 	{
0: 		this.tableDescriptor = tableDescriptor;
0: 	}
0: 
0: 
0: 	////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	INDEXLISTER METHODS
0: 	//
0: 	////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0: 	  *	Returns an array of all the index row generators on a table.
0: 	  *
0: 	  *	@return	an array of index row generators
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0: 	public	IndexRowGenerator[]		getIndexRowGenerators()
0: 					throws StandardException
0: 	{
0: 		if ( indexRowGenerators == null ) { getAllIndexes(); }
0: 		return	indexRowGenerators;
0: 	}
0: 
0:     /**
0: 	  *	Returns an array of all the index conglomerate ids on a table.
0: 	  *
0: 	  *	@return	an array of index conglomerate ids
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	long[]		getIndexConglomerateNumbers()
0: 					throws StandardException
0: 	{
0: 		if ( indexConglomerateNumbers == null ) { getAllIndexes(); }
0: 		return	indexConglomerateNumbers;
0: 	}
0: 
0:     /**
0: 	  *	Returns an array of all the index names on a table.
0: 	  *
0: 	  *	@return	an array of index names
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	String[]		getIndexNames()	throws StandardException
0: 	{
0: 		if ( indexNames == null ) { getAllIndexes(); }
0: 		return	indexNames;
0: 	}
0: 
0:     /**
0: 	  *	Returns an array of distinct index row generators on a table,
0: 	  * erasing entries for duplicate indexes (which share same conglomerate).
0: 	  *
0: 	  *	@return	an array of index row generators
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0: 	public	IndexRowGenerator[]		getDistinctIndexRowGenerators()
0: 					throws StandardException
0: 	{
0: 		if ( distinctIndexRowGenerators == null ) { getAllIndexes(); }
0: 		return	distinctIndexRowGenerators;
0: 	}
0: 
0:     /**
0: 	  *	Returns an array of distinct index conglomerate ids on a table.
0: 	  * erasing entries for duplicate indexes (which share same conglomerate).
0: 	  *
0: 	  *	@return	an array of index conglomerate ids
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	long[]		getDistinctIndexConglomerateNumbers()
0: 					throws StandardException
0: 	{
0: 		if ( distinctIndexConglomerateNumbers == null ) { getAllIndexes(); }
0: 		return	distinctIndexConglomerateNumbers;
0: 	}
0: 
0:     /**
0: 	  *	Returns an array of index names for all distinct indexes on a table.
0: 	  * erasing entries for duplicate indexes (which share same conglomerate).
0: 	  *
0: 	  *	@return	an array of index names
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	String[]		getDistinctIndexNames()	throws StandardException
0: 	{
0: 		if ( indexNames == null ) { getAllIndexes(); }
0: 		return	indexNames;
0: 	}
0: 
0: 	////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	MINIONS
0: 	//
0: 	////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Reads all the indices on the table and populates arrays with the
0: 	  *	corresponding index row generators and index conglomerate ids.
0: 	  *
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0: 	private void getAllIndexes()
0: 					throws StandardException
0: 	{
0: 		int			indexCount = 0;
0: 
0: 		ConglomerateDescriptor[] cds = 
0: 			              tableDescriptor.getConglomerateDescriptors();
0: 
0: 		/* from one end of work space, we record distinct conglomerate
0: 		 * numbers for comparison while we iterate; from the other end of
0: 		 * work space, we record duplicate indexes' indexes in "cds" array,
0: 		 * so that we can skip them in later round.
0: 		 */
0: 		long[] workSpace = new long[cds.length - 1];  // 1 heap
0: 		int distinctIndexCount = 0, duplicateIndex = workSpace.length - 1;
0: 
0: 		for (int i = 0; i < cds.length; i++)
0: 		{
0: 			// first count the number of indices.
0: 			ConglomerateDescriptor cd = cds[i];
0: 
0: 			if ( ! cd.isIndex())
0: 				continue;
0: 
0: 			int k;
0: 			long thisCongNum = cd.getConglomerateNumber();
0: 
0: 			for (k = 0; k < distinctIndexCount; k++)
0: 			{
0: 				if (workSpace[k] == thisCongNum)
0: 				{
0: 					workSpace[duplicateIndex--] = i;
0: 					break;
0: 				}
0: 			}
0: 			if (k == distinctIndexCount)			// first appearence
0: 				workSpace[distinctIndexCount++] = thisCongNum;
0: 
0: 			indexCount++;
0: 		}
0: 
0: 		indexRowGenerators = new IndexRowGenerator[ indexCount ];
0: 		indexConglomerateNumbers = new long[ indexCount ];
0: 		indexNames = new String[ indexCount ];
0: 		distinctIndexRowGenerators = new IndexRowGenerator[ distinctIndexCount ];
0: 		distinctIndexConglomerateNumbers = new long[ distinctIndexCount ];
0: 		distinctIndexNames = new String[ distinctIndexCount ];
0: 
0: 		int duplicatePtr = workSpace.length - 1;
0: 		for ( int i = 0, j = -1, k = -1; i < cds.length; i++ )
0: 		{
0: 			ConglomerateDescriptor cd = cds[i];
0: 
0: 			if ( ! cd.isIndex())
0: 				continue;
0: 
0: 			indexRowGenerators[++j] = 
0: 				(IndexRowGenerator)cd.getIndexDescriptor();
0: 			indexConglomerateNumbers[j] = cd.getConglomerateNumber();
0: 			if (!(cd.isConstraint()))
0: 			{
0: 				// only fill index name if it is not a constraint.
0: 				indexNames[j] = cd.getConglomerateName();
0: 			}
0: 
0: 			if (duplicatePtr > duplicateIndex && i == (int) workSpace[duplicatePtr])
0: 				duplicatePtr--;
0: 			else
0: 			{
0: 				distinctIndexRowGenerators[++k] = indexRowGenerators[j];
0: 				distinctIndexConglomerateNumbers[k] = indexConglomerateNumbers[j];
0: 				distinctIndexNames[k] = indexNames[j];
0: 			}
0: 		}
0: 	}
0: }
============================================================================