1:45fdfa3: /*
1:55d3591: 
1:45fdfa3: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest
1:45fdfa3: 
1:45fdfa3: Licensed to the Apache Software Foundation (ASF) under one or more
1:45fdfa3: contributor license agreements.  See the NOTICE file distributed with
1:45fdfa3: this work for additional information regarding copyright ownership.
1:45fdfa3: The ASF licenses this file to You under the Apache License, Version 2.0
1:45fdfa3: (the "License"); you may not use this file except in compliance with
1:45fdfa3: the License.  You may obtain a copy of the License at
1:45fdfa3: 
1:45fdfa3: http://www.apache.org/licenses/LICENSE-2.0
1:45fdfa3: 
1:45fdfa3: Unless required by applicable law or agreed to in writing, software
1:45fdfa3: distributed under the License is distributed on an "AS IS" BASIS,
1:45fdfa3: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:45fdfa3: See the License for the specific language governing permissions and
1:45fdfa3: limitations under the License.
1:45fdfa3: 
1:45fdfa3: */
1:45fdfa3: 
1:2099e21: package org.apache.derbyTesting.functionTests.tests.lang;
1:45fdfa3: 
1:2099e21: import java.sql.Connection;
1:1ae02c9: import java.sql.ResultSet;
1:2099e21: import java.sql.SQLException;
1:2099e21: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:2099e21: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2099e21: import org.apache.derbyTesting.junit.JDBC;
1:2099e21: import org.apache.derbyTesting.junit.TestConfiguration;
9:2099e21: 
1:2099e21: /**
1:2099e21:  * Tests concerning the system catalogs.
1:2099e21:  * 
1:2099e21:  * Retaining comment from previous .sql test:
1:2099e21:  * RESOLVE - add selects from sysdepends when simplified
1:2099e21:  *
1:2099e21:  */
1:2099e21: public class SystemCatalogTest extends BaseJDBCTestCase {
1:2099e21: 
1:55d3591:     public SystemCatalogTest(String name) {
1:2099e21: 		super(name);
10:2099e21: 	}
1:2099e21: 	
1:2099e21: 	public static Test suite() {
1:2099e21: 		Test suite = TestConfiguration.defaultSuite(SystemCatalogTest.class);
1:2099e21: 		return TestConfiguration.singleUseDatabaseDecorator(suite);
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test that the user cannot execute any DDL statements on the system tables.
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testNoUserDDLOnSystemTables() throws SQLException {
1:2099e21: 	    Statement s = createStatement();
1:2099e21: 	    
1:761f2b8: 	    assertStatementError("X0Y56", s, "drop table sys.systables");
1:761f2b8: 	    assertStatementError("42X62", s, "drop index sys.sysaliases_index2");
1:761f2b8: 	    assertStatementError("42X62", s, "create index trash on sys.systables(tableid)");
1:761f2b8: 	    assertStatementError("42X62", s, "create table sys.usertable(c1 int)");
1:761f2b8: 	    assertStatementError("42X62", s, "create view sys.userview as select * from sys.systables");
1:761f2b8: 	    assertStatementError("42X62", s, "alter table sys.systables drop column tablename");
1:761f2b8: 	    assertStatementError("42X62", s, "alter table sys.systables add column foo int");
1:761f2b8: 	    assertStatementError("42X62", s, "alter table sys.systables alter column tablename null");
1:761f2b8: 	    assertStatementError("42X62", s, "alter table sys.systables drop primary key");
1:2099e21: 	    
1:761f2b8: 	    s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test that the system tables cannot be changed by various DML statements.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testSystemCatalogsNotUpdatable() throws SQLException{
1:2099e21: 		Connection c = getConnection();
1:2099e21: 		Statement s = c.createStatement();
1:2099e21: 		
1:2099e21: 	    c.setAutoCommit(false);
1:2099e21: 	    
10:2099e21: 	    try{
1:2099e21: 	    	s.executeUpdate("delete from sys.systables");
10:2099e21: 	    } catch (SQLException e)
10:2099e21: 	    {
1:2099e21: 	    	assertSQLState("42Y25", e);
1:2099e21: 	    }
1:2099e21: 	    
1:2099e21: 	    try{
1:2099e21: 	    	s.executeUpdate("update sys.systables set tablename = tablename || 'trash'");
1:2099e21: 	    } catch (SQLException e)
1:2099e21: 	    {
1:2099e21: 	    	assertSQLState("42Y25", e);
1:2099e21: 	    }
1:2099e21: 	    
1:2099e21: 	    try{
1:2099e21: 	    	s.executeUpdate("insert into sys.systables select * from sys.systables");
1:2099e21: 	    } catch (SQLException e)
1:2099e21: 	    {
1:2099e21: 	    	assertSQLState("42Y25", e);
1:2099e21: 	    }
1:2099e21: 	    
1:2099e21: 	    try{
1:2099e21: 	    	ResultSet rs = s.executeQuery("select tablename from sys.systables for update of tablename");
1:2099e21: 	    } catch (SQLException e)
1:2099e21: 	    {
1:2099e21: 	    	assertSQLState("42Y90", e);
1:2099e21: 	    }
1:2099e21: 	    
1:2099e21:         c.rollback();
1:2099e21: 	    c.setAutoCommit(true);
1:2099e21: 	    
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test various default store properties for the system tables.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testSystemCatalogStoreProperties() throws SQLException{
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		s.execute("create function gatp(SCH VARCHAR(128), TBL VARCHAR(128)) RETURNS VARCHAR(1000) EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllTableProperties' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:2099e21: 		s.execute("create function gaip(SCH VARCHAR(128), TBL VARCHAR(128)) RETURNS VARCHAR(1000) EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllIndexProperties' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:2099e21: 
1:2099e21: 		// get the properties for the heaps
1:2099e21: 		ResultSet rs = s.executeQuery("select tablename,gatp('SYS', tablename) from sys.systables order by tablename");
1:2099e21: 		boolean nonEmptyResultSet = false;
1:2099e21: 		String tablename = null;
1:2099e21: 		String sysdummy = "SYSDUMMY1";
1:2099e21: 		String heapResult = "{ derby.storage.initialPages=1, derby.storage.minimumRecordSize=12, derby.storage.pageReservedSpace=0, derby.storage.pageSize=4096, derby.storage.reusableRecordId=false }";
1:2099e21: 		while(rs.next()) {
1:2099e21: 			nonEmptyResultSet  = true;
1:2099e21: 			tablename = rs.getString(1);
1:2099e21: 			if (tablename.equals(sysdummy)) {
1:2099e21: 				assertTrue(rs.getString(2).startsWith("{  }"));
1:2099e21: 			} else {
1:2099e21: 				assertTrue(rs.getString(2).startsWith(heapResult));
1:2099e21: 			}
1:2099e21: 		}
1:2099e21: 		assertTrue(nonEmptyResultSet);
1:2099e21: 		rs.close();
1:2099e21: 				
1:2099e21: 		// get the properties for the indexes
1:2099e21: 		rs = s.executeQuery("select conglomeratename, gaip('SYS',	conglomeratename) from sys.sysconglomerates where isindex order by conglomeratename");
1:2099e21: 		nonEmptyResultSet = false;
1:2099e21: 		String indexResult = "{ derby.storage.initialPages=1, derby.storage.minimumRecordSize=1, derby.storage.pageReservedSpace=0, derby.storage.pageSize=4096, derby.storage.reusableRecordId=true }";
1:2099e21: 		while(rs.next()) {
1:2099e21: 			nonEmptyResultSet  = true;
1:2099e21: 			assertTrue(rs.getString(2).startsWith(indexResult));
1:2099e21: 		}
1:2099e21: 		assertTrue(nonEmptyResultSet);
1:2099e21: 	    rs.close();
1:2099e21: 	    s.close();
1:2099e21: 	}         
1:2099e21: 
1:2099e21: 	/**
1:2099e21: 	 * Test that each system table has a table type of "S".
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testSystemCatalogTableTypes() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		ResultSet rs = s.executeQuery("select TABLENAME, TABLETYPE from sys.systables order by tablename");
1:2099e21: 		
1:2099e21: 		boolean nonEmptyResultSet = false;
1:2099e21: 		while(rs.next()) {
1:2099e21: 			nonEmptyResultSet  = true;
1:2099e21: 			assertEquals("S", rs.getString(2));
1:2099e21: 		}
1:2099e21: 		assertTrue(nonEmptyResultSet);
1:2099e21: 		rs.close();
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Check that all the tables for their expected columns.
1:2099e21: 	 *
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testSystemCatalogColumns() throws SQLException {
1:2099e21: 		String [][] expected = {
1:2099e21: 				{"SYSALIASES", "ALIAS", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSALIASES", "ALIASID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSALIASES", "ALIASINFO", "8", "org.apache.derby.catalog.AliasInfo"},
1:2099e21: 				{"SYSALIASES", "ALIASTYPE", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSALIASES", "JAVACLASSNAME", "4", "LONG VARCHAR NOT NULL"},
1:2099e21: 				{"SYSALIASES", "NAMESPACE", "6", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSALIASES", "SCHEMAID", "3", "CHAR(36)"},
1:2099e21: 				{"SYSALIASES", "SPECIFICNAME", "9", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSALIASES", "SYSTEMALIAS", "7", "BOOLEAN NOT NULL"},
1:2099e21: 				{"SYSCHECKS", "CHECKDEFINITION", "2", "LONG VARCHAR NOT NULL"},
1:2099e21: 				{"SYSCHECKS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCHECKS", "REFERENCEDCOLUMNS", "3", "org.apache.derby.catalog.ReferencedColumns NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "COLPERMSID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "COLUMNS", "6", "org.apache.derby.iapi.services.io.FormatableBitSet NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "TABLEID", "4", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCOLPERMS", "TYPE", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSCOLUMNS", "AUTOINCREMENTINC", "9", "BIGINT"},
1:2099e21: 				{"SYSCOLUMNS", "AUTOINCREMENTSTART", "8", "BIGINT"},
1:2099e21: 				{"SYSCOLUMNS", "AUTOINCREMENTVALUE", "7", "BIGINT"},
1:2099e21: 				{"SYSCOLUMNS", "COLUMNDATATYPE", "4", "org.apache.derby.catalog.TypeDescriptor NOT NULL"},
1:2099e21: 				{"SYSCOLUMNS", "COLUMNDEFAULT", "5", "java.io.Serializable"},
1:2099e21: 				{"SYSCOLUMNS", "COLUMNDEFAULTID", "6", "CHAR(36)"},
1:2099e21: 				{"SYSCOLUMNS", "COLUMNNAME", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSCOLUMNS", "COLUMNNUMBER", "3", "INTEGER NOT NULL"},
1:2099e21: 				{"SYSCOLUMNS", "REFERENCEID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONGLOMERATES", "CONGLOMERATEID", "8", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONGLOMERATES", "CONGLOMERATENAME", "4", "VARCHAR(128)"},
1:2099e21: 				{"SYSCONGLOMERATES", "CONGLOMERATENUMBER", "3", "BIGINT NOT NULL"},
1:2099e21: 				{"SYSCONGLOMERATES", "DESCRIPTOR", "6", "org.apache.derby.catalog.IndexDescriptor"},
1:2099e21: 				{"SYSCONGLOMERATES", "ISCONSTRAINT", "7", "BOOLEAN"},
1:2099e21: 				{"SYSCONGLOMERATES", "ISINDEX", "5", "BOOLEAN NOT NULL"},
1:2099e21: 				{"SYSCONGLOMERATES", "SCHEMAID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONGLOMERATES", "TABLEID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "CONSTRAINTNAME", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "REFERENCECOUNT", "7", "INTEGER NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "SCHEMAID", "5", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "STATE", "6", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "TABLEID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSCONSTRAINTS", "TYPE", "4", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSDEPENDS", "DEPENDENTFINDER", "2", "org.apache.derby.catalog.DependableFinder NOT NULL"},
1:2099e21: 				{"SYSDEPENDS", "DEPENDENTID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSDEPENDS", "PROVIDERFINDER", "4", "org.apache.derby.catalog.DependableFinder NOT NULL"},
1:2099e21: 				{"SYSDEPENDS", "PROVIDERID", "3", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSDUMMY1", "IBMREQD", "1", "CHAR(1)"},
1:2099e21: 				{"SYSFILES", "FILEID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSFILES", "FILENAME", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSFILES", "GENERATIONID", "4", "BIGINT NOT NULL"},
1:2099e21: 				{"SYSFILES", "SCHEMAID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSFOREIGNKEYS", "CONGLOMERATEID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSFOREIGNKEYS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSFOREIGNKEYS", "DELETERULE", "4", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSFOREIGNKEYS", "KEYCONSTRAINTID", "3", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSFOREIGNKEYS", "UPDATERULE", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSKEYS", "CONGLOMERATEID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSKEYS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "GRANTEE", "6", "VARCHAR(128) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "GRANTOR", "5", "VARCHAR(128) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "ISGRANTABLE", "7", "CHAR(1) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "OBJECTID", "3", "CHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "OBJECTTYPE", "2", "VARCHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "PERMISSION", "4", "CHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSPERMS", "UUID", "1", "CHAR(36) NOT NULL"},
1:f717f79:                 {"SYSROLES", "GRANTEE", "3", "VARCHAR(128) NOT NULL"},
1:f717f79:                 {"SYSROLES", "GRANTOR", "4", "VARCHAR(128) NOT NULL"},
1:f717f79: 				{"SYSROLES", "ISDEF", "6", "CHAR(1) NOT NULL"},
1:f717f79: 				{"SYSROLES", "ROLEID", "2", "VARCHAR(128) NOT NULL"},
1:f717f79: 				{"SYSROLES", "UUID", "1", "CHAR(36) NOT NULL"},
1:f717f79: 				{"SYSROLES", "WITHADMINOPTION", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSROUTINEPERMS", "ALIASID", "4", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSROUTINEPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSROUTINEPERMS", "GRANTOPTION", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSROUTINEPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSROUTINEPERMS", "ROUTINEPERMSID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSCHEMAS", "AUTHORIZATIONID", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSSCHEMAS", "SCHEMAID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSCHEMAS", "SCHEMANAME", "2", "VARCHAR(128) NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "CURRENTVALUE", "5", "BIGINT"},
1:bb40bcb:                 {"SYSSEQUENCES", "CYCLEOPTION", "10", "CHAR(1) NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "INCREMENT", "9", "BIGINT NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "MAXIMUMVALUE", "8", "BIGINT NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "MINIMUMVALUE", "7", "BIGINT NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "SEQUENCEDATATYPE", "4", "org.apache.derby.catalog.TypeDescriptor NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "SEQUENCEID", "1", "CHAR(36) NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "SEQUENCENAME", "2", "VARCHAR(128) NOT NULL"},
1:bb40bcb:                 {"SYSSEQUENCES", "STARTVALUE", "6", "BIGINT NOT NULL"},                
1:2099e21: 				{"SYSSTATEMENTS", "COMPILATIONSCHEMAID", "8", "CHAR(36)"},
1:bb40bcb:                 {"SYSSTATEMENTS", "LASTCOMPILED", "7", "TIMESTAMP"},
1:2099e21: 				{"SYSSTATEMENTS", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSTATEMENTS", "STMTID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSTATEMENTS", "STMTNAME", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSSTATEMENTS", "TEXT", "6", "LONG VARCHAR NOT NULL"},
1:2099e21: 				{"SYSSTATEMENTS", "TYPE", "4", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSSTATEMENTS", "USINGTEXT", "9", "LONG VARCHAR"},
1:2099e21: 				{"SYSSTATEMENTS", "VALID", "5", "BOOLEAN NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "COLCOUNT", "7", "INTEGER NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "CREATIONTIMESTAMP", "4", "TIMESTAMP NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "REFERENCEID", "2", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "STATID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "STATISTICS", "8", "org.apache.derby.catalog.Statistics NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "TABLEID", "3", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "TYPE", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSSTATISTICS", "VALID", "6", "BOOLEAN NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "DELETEPRIV", "6", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "INSERTPRIV", "7", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "REFERENCESPRIV", "9", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "SELECTPRIV", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "TABLEID", "4", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "TABLEPERMSID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "TRIGGERPRIV", "10", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLEPERMS", "UPDATEPRIV", "8", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLES", "LOCKGRANULARITY", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTABLES", "SCHEMAID", "4", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTABLES", "TABLEID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTABLES", "TABLENAME", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSTABLES", "TABLETYPE", "3", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "ACTIONSTMTID", "11", "CHAR(36)"},
1:2099e21: 				{"SYSTRIGGERS", "CREATIONTIMESTAMP", "4", "TIMESTAMP NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "EVENT", "5", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "FIRINGTIME", "6", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "NEWREFERENCINGNAME", "17", "VARCHAR(128)"},
1:2099e21: 				{"SYSTRIGGERS", "OLDREFERENCINGNAME", "16", "VARCHAR(128)"},
1:2099e21: 				{"SYSTRIGGERS", "REFERENCEDCOLUMNS", "12", "org.apache.derby.catalog.ReferencedColumns"},
1:2099e21: 				{"SYSTRIGGERS", "REFERENCINGNEW", "15", "BOOLEAN"},
1:2099e21: 				{"SYSTRIGGERS", "REFERENCINGOLD", "14", "BOOLEAN"},
1:2099e21: 				{"SYSTRIGGERS", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "STATE", "8", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "TABLEID", "9", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "TRIGGERDEFINITION", "13", "LONG VARCHAR"},
1:2099e21: 				{"SYSTRIGGERS", "TRIGGERID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "TRIGGERNAME", "2", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSTRIGGERS", "TYPE", "7", "CHAR(1) NOT NULL"},
1:d9878ca:                 {"SYSTRIGGERS", "WHENCLAUSETEXT", "18", "LONG VARCHAR"},
1:2099e21: 				{"SYSTRIGGERS", "WHENSTMTID", "10", "CHAR(36)"},
1:aa609d5: 				{"SYSUSERS", "HASHINGSCHEME", "2", "VARCHAR(32672) NOT NULL"},
1:aa609d5: 				{"SYSUSERS", "LASTMODIFIED", "4", "TIMESTAMP NOT NULL"},
1:aa609d5: 				{"SYSUSERS", "PASSWORD", "3", "VARCHAR(32672) NOT NULL"},
1:aa609d5: 				{"SYSUSERS", "USERNAME", "1", "VARCHAR(128) NOT NULL"},
1:2099e21: 				{"SYSVIEWS", "CHECKOPTION", "3", "CHAR(1) NOT NULL"},
1:2099e21: 				{"SYSVIEWS", "COMPILATIONSCHEMAID", "4", "CHAR(36)"},
1:2099e21: 				{"SYSVIEWS", "TABLEID", "1", "CHAR(36) NOT NULL"},
1:2099e21: 				{"SYSVIEWS", "VIEWDEFINITION", "2", "LONG VARCHAR NOT NULL"}
1:2099e21: 		};
1:2099e21: 				
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		
1:2099e21: 		ResultSet rs = s.executeQuery("select TABLENAME, COLUMNNAME, COLUMNNUMBER, COLUMNDATATYPE from sys.systables t, sys.syscolumns c" +
1:2099e21: 				" where t.TABLEID=c.REFERENCEID order by TABLENAME, COLUMNNAME");
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 				                      
1:2099e21: 		s.close();
1:2099e21: 	
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	public void testSystemCatalogIndexes() throws SQLException{
1:2099e21: 		String [][] expected = 
1:2099e21: 		{
1:2099e21: 				{"SYSALIASES", "SYSALIASES_HEAP", "false"},
1:2099e21: 				{"SYSALIASES", "SYSALIASES_INDEX3", "true"},
1:2099e21: 				{"SYSALIASES", "SYSALIASES_INDEX2", "true"},
1:2099e21: 				{"SYSALIASES", "SYSALIASES_INDEX1", "true"},
1:2099e21: 				{"SYSCHECKS", "SYSCHECKS_HEAP", "false"},
1:2099e21: 				{"SYSCHECKS", "SYSCHECKS_INDEX1", "true"},
1:2099e21: 				{"SYSCOLPERMS", "SYSCOLPERMS_HEAP", "false"},
1:2099e21: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX3", "true"},
1:2099e21: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX2", "true"},
1:2099e21: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX1", "true"},
1:2099e21: 				{"SYSCOLUMNS", "SYSCOLUMNS_HEAP", "false"},
1:2099e21: 				{"SYSCOLUMNS", "SYSCOLUMNS_INDEX2", "true"},
1:2099e21: 				{"SYSCOLUMNS", "SYSCOLUMNS_INDEX1", "true"},
1:2099e21: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_HEAP", "false"},
1:2099e21: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX3", "true"},
1:2099e21: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX2", "true"},
1:2099e21: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX1", "true"},
1:2099e21: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_HEAP", "false"},
1:2099e21: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX3", "true"},
1:2099e21: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX2", "true"},
1:2099e21: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX1", "true"},
1:2099e21: 				{"SYSDEPENDS", "SYSDEPENDS_HEAP", "false"},
1:2099e21: 				{"SYSDEPENDS", "SYSDEPENDS_INDEX2", "true"},
1:2099e21: 				{"SYSDEPENDS", "SYSDEPENDS_INDEX1", "true"},
1:2099e21: 				{"SYSDUMMY1", "SYSDUMMY1_HEAP", "false"},
1:2099e21: 				{"SYSFILES", "SYSFILES_HEAP", "false"},
1:2099e21: 				{"SYSFILES", "SYSFILES_INDEX2", "true"},
1:2099e21: 				{"SYSFILES", "SYSFILES_INDEX1", "true"},
1:2099e21: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_HEAP", "false"},
1:2099e21: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_INDEX2", "true"},
1:2099e21: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_INDEX1", "true"},
1:2099e21: 				{"SYSKEYS", "SYSKEYS_HEAP", "false"},
1:2099e21: 				{"SYSKEYS", "SYSKEYS_INDEX1", "true"},
1:bb40bcb:                 {"SYSPERMS", "SYSPERMS_HEAP", "false"},
1:98c7520:                 {"SYSPERMS", "SYSPERMS_INDEX3", "true"},
1:bb40bcb:                 {"SYSPERMS", "SYSPERMS_INDEX2", "true"},
1:bb40bcb:                 {"SYSPERMS", "SYSPERMS_INDEX1", "true"},
1:ee59de8:                 {"SYSROLES", "SYSROLES_HEAP", "false"},
1:f717f79: 				{"SYSROLES", "SYSROLES_INDEX3", "true"},
1:ee59de8: 				{"SYSROLES", "SYSROLES_INDEX2", "true"},
1:ee59de8: 				{"SYSROLES", "SYSROLES_INDEX1", "true"},
1:bb40bcb:                 {"SYSROUTINEPERMS", "SYSROUTINEPERMS_HEAP", "false"},
1:2099e21: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX3", "true"},
1:2099e21: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX2", "true"},
1:2099e21: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX1", "true"},
1:2099e21: 				{"SYSSCHEMAS", "SYSSCHEMAS_HEAP", "false"},
1:2099e21: 				{"SYSSCHEMAS", "SYSSCHEMAS_INDEX2", "true"},
1:2099e21: 				{"SYSSCHEMAS", "SYSSCHEMAS_INDEX1", "true"},
1:bb40bcb:                 {"SYSSEQUENCES", "SYSSEQUENCES_HEAP", "false"},
1:bb40bcb:                 {"SYSSEQUENCES", "SYSSEQUENCES_INDEX2", "true"},
1:bb40bcb:                 {"SYSSEQUENCES", "SYSSEQUENCES_INDEX1", "true"},
1:bb40bcb:                 {"SYSSTATEMENTS", "SYSSTATEMENTS_HEAP", "false"},
1:2099e21: 				{"SYSSTATEMENTS", "SYSSTATEMENTS_INDEX2", "true"},
1:2099e21: 				{"SYSSTATEMENTS", "SYSSTATEMENTS_INDEX1", "true"},
1:2099e21: 				{"SYSSTATISTICS", "SYSSTATISTICS_HEAP", "false"},
1:2099e21: 				{"SYSSTATISTICS", "SYSSTATISTICS_INDEX1", "true"},
1:2099e21: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_HEAP", "false"},
1:2099e21: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX3", "true"},
1:2099e21: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX2", "true"},
1:2099e21: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX1", "true"},
1:2099e21: 				{"SYSTABLES", "SYSTABLES_HEAP", "false"},
1:2099e21: 				{"SYSTABLES", "SYSTABLES_INDEX2", "true"},
1:2099e21: 				{"SYSTABLES", "SYSTABLES_INDEX1", "true"},
1:2099e21: 				{"SYSTRIGGERS", "SYSTRIGGERS_HEAP", "false"},
1:2099e21: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX3", "true"},
1:2099e21: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX2", "true"},
1:2099e21: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX1", "true"},
1:aa609d5: 				{"SYSUSERS", "SYSUSERS_HEAP", "false"},
1:aa609d5: 				{"SYSUSERS", "SYSUSERS_INDEX1", "true"},
1:2099e21: 				{"SYSVIEWS", "SYSVIEWS_HEAP", "false"},
1:2099e21: 				{"SYSVIEWS", "SYSVIEWS_INDEX1", "true"},
1:2099e21: 			};
1:2099e21: 		
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		
1:2099e21: 		ResultSet rs = s.executeQuery("select TABLENAME, CONGLOMERATENAME, ISINDEX from sys.systables t, sys.sysconglomerates c"
1:2099e21: 				                      +  " where t.TABLEID=c.TABLEID order by TABLENAME, ISINDEX");
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 				                      
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Check that a newly created table and its columns appear in SYSTABLES and SYSCOLUMNS
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testNewTableInSystemCatalogs() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		
1:2099e21: 		s.execute("create table t (i int, s smallint)");
1:2099e21: 		
1:2099e21: 		ResultSet rs = s.executeQuery("select TABLETYPE from sys.systables where tablename = 'T'");
1:2099e21: 		JDBC.assertSingleValueResultSet(rs, "T");
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		rs = s.executeQuery("select TABLENAME, COLUMNNAME, COLUMNNUMBER, columndatatype from sys.systables t, sys.syscolumns c" +
1:2099e21: 				" where t.TABLEID=c.REFERENCEID and t.tablename = 'T' order by TABLENAME, COLUMNNAME");
1:2099e21:         String[][] expected = {{"T", "I", "1", "INTEGER"}, {"T", "S", "2", "SMALLINT"}};
1:2099e21:         JDBC.assertFullResultSet(rs,expected);
1:2099e21:         rs.close();
1:2099e21:         
1:2099e21:         rs = s.executeQuery("select TABLENAME, ISINDEX from sys.systables t, sys.sysconglomerates c where t.TABLEID=c.TABLEID and t.TABLENAME = 'T' order by TABLENAME, ISINDEX");
1:2099e21:         expected = new String[][] {{"T", "false"},};
1:2099e21:         JDBC.assertFullResultSet(rs,expected);
1:2099e21:         rs.close();
1:2099e21:         
1:2099e21:         s.execute("drop table t");
1:2099e21:         
1:2099e21:         s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test that table and column names over thirty characters are recorded
1:2099e21: 	 * properly in the system tables.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testOverThirtyCharsInTableName() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		
1:2099e21: 		s.execute("create table t234567890123456789012345678901234567890 (c234567890123456789012345678901234567890 int)");
1:2099e21: 		
1:2099e21: 		ResultSet rs = s.executeQuery("select TABLENAME from sys.systables where length(TABLENAME) > 30 order by tablename");
1:2099e21: 		JDBC.assertSingleValueResultSet(rs, "T234567890123456789012345678901234567890");
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		rs = s.executeQuery("select COLUMNNAME from sys.syscolumns where {fn length(COLUMNNAME)} > 30 order by columnname");
1:2099e21: 		JDBC.assertSingleValueResultSet(rs, "C234567890123456789012345678901234567890");
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("drop table t234567890123456789012345678901234567890");
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test that named constraints and unnamed constraints are recorded in the system tables properly.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testPrimaryAndUniqueKeysInSystemCatalogs() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		String getNamedConstraintsQuery = "select c.constraintname, c.type from sys.sysconstraints c, sys.systables t "
1:2099e21:             + "where c.tableid = t.tableid and not t.tablename like 'UNNAMED%' order by c.constraintname";
1:2099e21: 		
1:2099e21: 		s.execute("create table primkey1 (c1 int not null constraint prim1 primary key)");
1:2099e21: 		String [][] expected = new String[][] {{"PRIM1", "P"}};
1:2099e21: 		ResultSet rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected, true);
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("create table unnamed_primkey2 (c1 int not null primary key)");
1:2099e21: 		rs = s.executeQuery("select c.constraintname, c.type from sys.sysconstraints c, sys.systables t where c.tableid = t.tableid and t.tablename = 'UNNAMED_PRIMKEY2' order by c.constraintname");
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		assertEquals("P", rs.getString(2));
1:2099e21: 		assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21: 		rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("create table primkey3 (c1 int not null, c2 int not null, constraint prim3 primary key(c2, c1))");
1:2099e21: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}};
1:2099e21: 		rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 
1:2099e21: 		s.execute("create table uniquekey1 (c1 int not null constraint uniq1 unique)");
1:2099e21: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}, {"UNIQ1", "U"}};
1:2099e21: 		rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 
1:2099e21: 		s.execute("create table unnamed_uniquekey2 (c1 int not null unique)");
1:2099e21: 		rs = s.executeQuery("select c.constraintname, c.type from sys.sysconstraints c, sys.systables t where c.tableid = t.tableid and t.tablename = 'UNNAMED_UNIQUEKEY2' order by c.constraintname");
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		assertEquals("U", rs.getString(2));
1:2099e21: 		assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21:      	rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("create table uniquekey3 (c1 int not null, c2 int not null, constraint uniq3 unique(c2, c1))");
1:2099e21: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}, {"UNIQ1", "U"}, {"UNIQ3", "U"}};
1:2099e21: 		rs = s.executeQuery(getNamedConstraintsQuery);
1:2099e21: 		JDBC.assertFullResultSet(rs, expected);
1:2099e21: 		rs.close();
1:2099e21: 
1:2099e21: 	    s.execute("drop table primkey1");
1:2099e21: 	    s.execute("drop table unnamed_primkey2");
1:2099e21: 	    s.execute("drop table primkey3");
1:2099e21: 	    s.execute("drop table uniquekey1");
1:2099e21: 	    s.execute("drop table unnamed_uniquekey2");
1:2099e21: 	    s.execute("drop table uniquekey3");
1:55d3591: 	    
1:2099e21: 	    s.close();
1:2099e21: 	}
1:2099e21: 	
1:55d3591: 	/**
1:2099e21: 	 * Test that view creation is recorded in the system tables.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testViewsOfSystemCatalogs() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		s.execute("create table t (i int, s smallint)");
1:2099e21: 		s.execute("create table uniquekey3 (c1 int not null, c2 int not null, constraint uniq3 unique(c2, c1))");
1:2099e21: 		s.execute("create view dummyview as select * from t, uniquekey3");
1:2099e21: 		
1:2099e21: 		ResultSet rs = s.executeQuery("select tablename from sys.systables t, sys.sysviews v where t.tableid = v.tableid order by tablename");
1:2099e21: 		JDBC.assertSingleValueResultSet(rs, "DUMMYVIEW");
1:2099e21:         rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("drop view dummyview");
1:2099e21: 		s.execute("drop table t");
1:2099e21: 		s.execute("drop table uniquekey3");
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: 
1:2099e21: 	/**
1:55d3591: 	 * This test creates a table with all supported datatypes aqnd ensures 
1:55d3591: 	 * that bound embedded and network server return the identical datatypes
1:55d3591: 	 * for those datatypes. DERBY-5407
1:55d3591: 	 * @throws SQLException
1:55d3591: 	 */
1:55d3591: 	public void testColumnDatatypesOfAllDataTypesInSystemCatalogs() throws SQLException {
1:55d3591: 		int totalNumOfColumnDatatypes = 21;
1:55d3591: 		Statement s = createStatement();
1:55d3591: 		s.execute("create table allTypesTable (" +
1:55d3591: 			"    a01 bigint," +
1:55d3591: 			"    a02 blob,\n" +
1:55d3591: 			"    a03 char( 1 ),\n" +
1:55d3591: 			"    a04 char( 1 ) for bit data ,\n" +
1:55d3591: 			"    a05 clob,\n" +
1:55d3591: 			"    a06 date,\n" +
1:55d3591: 			"    a07 decimal,\n" +
1:55d3591: 			"    a08 double,\n" +
1:55d3591: 			"    a09 float,\n" +
1:55d3591: 			"    a10 int,\n" +
1:55d3591: 			"    a11 long varchar,\n" +
1:55d3591: 			"    a12 long varchar for bit data,\n" +
1:55d3591: 			"    a13 numeric,\n" +
1:55d3591: 			"    a14 real,\n" +
1:55d3591: 			"    a15 smallint,\n" +
1:55d3591: 			"    a16 time,\n" +
1:55d3591: 			"    a17 timestamp,\n" +
1:55d3591: 			"    a18 varchar(10),\n" +
1:55d3591: 			"    a19 varchar(10) for bit data,\n" +
1:55d3591: 			"    a20 xml,\n" +
1:55d3591: 			"    a21 boolean\n" +
1:55d3591:         	")");
1:55d3591: 		ResultSet rs = s.executeQuery("select columndatatype "+
1:55d3591: 			"from sys.systables, sys.syscolumns "+
1:55d3591: 			"where tablename='ALLTYPESTABLE' "+
1:55d3591: 			"and tableid=referenceid "+
1:55d3591: 			"order by columnname");
1:55d3591: 		for (int i=1; i<=totalNumOfColumnDatatypes; i++)
1:55d3591: 		{
1:55d3591: 			rs.next();
1:55d3591: 			switch(i)
1:55d3591: 			{
1:55d3591: 			case 1 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("BIGINT"));
1:55d3591: 				break;
1:55d3591: 			case 2 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("BLOB(2147483647)"));
1:55d3591: 				break;
1:55d3591: 			case 3 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("CHAR(1)"));
1:55d3591: 				break;
1:55d3591: 			case 4 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("CHAR (1) FOR BIT DATA"));
1:55d3591: 				break;
1:55d3591: 			case 5 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("CLOB(2147483647)"));
1:55d3591: 				break;
1:55d3591: 			case 6 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("DATE"));
1:55d3591: 				break;
1:55d3591: 			case 7 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("DECIMAL(5,0)"));
1:55d3591: 				break;
1:55d3591: 			case 8 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("DOUBLE"));
1:55d3591: 				break;
1:55d3591: 			case 9 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("DOUBLE"));
1:55d3591: 				break;
1:55d3591: 			case 10 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("INTEGER"));
1:55d3591: 				break;
1:55d3591: 			case 11 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("LONG VARCHAR"));
1:55d3591: 				break;
1:55d3591: 			case 12 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("LONG VARCHAR FOR BIT DATA"));
1:55d3591: 				break;
1:55d3591: 			case 13 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("NUMERIC(5,0)"));
1:55d3591: 				break;
1:55d3591: 			case 14 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("REAL"));
1:55d3591: 				break;
1:55d3591: 			case 15 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("SMALLINT"));
1:55d3591: 				break;
1:55d3591: 			case 16 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("TIME"));
1:55d3591: 				break;
1:55d3591: 			case 17 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("TIMESTAMP"));
1:55d3591: 				break;
1:55d3591: 			case 18 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("VARCHAR(10)"));
1:55d3591: 				break;
1:55d3591: 			case 19 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("VARCHAR (10) FOR BIT DATA"));
1:55d3591: 				break;
1:55d3591: 			case 20 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("XML"));
1:55d3591: 				break;
1:55d3591: 			case 21 :
1:55d3591: 				assertTrue(rs.getString(1).startsWith("BOOLEAN"));
1:55d3591: 				break;
1:55d3591: 			}
1:55d3591: 		}
1:55d3591: 		rs.close();
1:55d3591: 		s.execute("drop table ALLTYPESTABLE");
1:55d3591: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Check that column datatypes are reported correctly, both in
1:2099e21: 	 * embedded and client/server modes
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testColumnDatatypesInSystemCatalogs() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		
1:2099e21: 		s.execute("create table decimal_tab (dcol decimal(5,2), ncol numeric(5,2) default 1.0)");
1:2099e21: 		ResultSet rs = s.executeQuery("select columnname, columndatatype from sys.syscolumns where columnname IN ('DCOL', 'NCOL') order by columnname");
1:2099e21: 		//DCOL
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		assertTrue(rs.getString(2).startsWith("DECIMAL(5,2)"));
1:2099e21: 		//NCOL
1:2099e21: 		assertTrue(rs.next());		
1:2099e21: 		assertTrue(rs.getString(2).startsWith("NUMERIC(5,2)"));
1:2099e21: 		assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("create index decimal_tab_idx on decimal_tab(dcol)");
1:2099e21: 		rs = s.executeQuery("select conglomeratename, descriptor from sys.sysconglomerates where conglomeratename = 'DECIMAL_TAB_IDX' order by conglomeratename");
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		assertTrue(rs.getString(2).startsWith("BTREE (1)"));
1:2099e21: 		assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("create trigger t1 after update on decimal_tab for each row values 1");
1:2099e21: 		rs = s.executeQuery("select triggername, referencedcolumns from sys.systriggers order by triggername");
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		assertNull(rs.getString(2));
1:2099e21: 		assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.execute("drop trigger t1");
1:2099e21: 		s.execute("drop table decimal_tab");
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Test for fix of Derby-318, confirm that it is possible to select
1:2099e21: 	 * COLUMNDEFAULT from SYSCOLUMNS after a column that is generated by
1:2099e21: 	 * default has been added.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testAutoincrementColumnUpdated() throws SQLException{
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		s.executeUpdate("create table defaultAutoinc(autoinccol int generated by default as identity)");
1:2099e21: 		ResultSet rs = s.executeQuery("select COLUMNDEFAULT from SYS.SYSCOLUMNS where COLUMNNAME = 'AUTOINCCOL'");
1:2099e21: 		assertTrue(rs.next());
1:2099e21: 		// Before Derby-318, this next call would have failed with an NPE
1:2099e21: 	    Object o = rs.getObject(1);
1:2099e21: 	    if (! (o instanceof java.io.Serializable)) {
1:2099e21: 	    	fail("SystemCatalogTest: invalid Object type for SYSCOLUMNS.COLUMNDEFAULT");
1:2099e21: 	    }
1:2099e21: 	    assertFalse(rs.next());
1:2099e21: 		rs.close();
1:2099e21: 		
1:2099e21: 		s.executeUpdate("drop table defaultAutoinc");
1:2099e21: 		s.close();
1:2099e21: 		
1:2099e21: 	}
1:2099e21: 	
1:2099e21: 	/**
1:2099e21: 	 * Run SYSCS_UTIL.SYSCS_CHECK_TABLE on each system table.
1:2099e21: 	 * 
1:2099e21: 	 * @throws SQLException
1:2099e21: 	 */
1:2099e21: 	public void testCheckConsistencyOfSystemCatalogs() throws SQLException {
1:2099e21: 		Statement s = createStatement();
1:2099e21: 		ResultSet rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename)from sys.systables where tabletype = 'S' and tablename != 'SYSDUMMY1' order by tablename");
1:2099e21: 		
1:2099e21: 		boolean nonEmptyResultSet = false;
1:2099e21: 		while(rs.next()) {
1:2099e21: 			nonEmptyResultSet = true;
1:2099e21: 			assertEquals(rs.getInt(2), 1);
1:2099e21: 		}
1:2099e21: 		
1:2099e21: 		assertTrue(nonEmptyResultSet);
1:2099e21: 		rs.close();
1:2099e21: 		s.close();
1:2099e21: 	}
1:2099e21: }
1:2099e21: 
1:2099e21: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import junit.framework.Test;
commit:f717f79
/////////////////////////////////////////////////////////////////////////
1: 				{"SYSROLES", "GRANTEE", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSROLES", "GRANTOR", "4", "VARCHAR(128) NOT NULL"},
1: 				{"SYSROLES", "ISDEF", "6", "CHAR(1) NOT NULL"},
1: 				{"SYSROLES", "ROLEID", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSROLES", "UUID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSROLES", "WITHADMINOPTION", "5", "CHAR(1) NOT NULL"},
/////////////////////////////////////////////////////////////////////////
1: 				{"SYSROLES", "SYSROLES_INDEX3", "true"},
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
0: 				{"SYSROLES", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
0: 				{"SYSROLES", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
0: 				{"SYSROLES", "ISDEF", "5", "CHAR(1) NOT NULL"},
0: 				{"SYSROLES", "ROLEID", "1", "VARCHAR(128) NOT NULL"},
0: 				{"SYSROLES", "WITHADMINOPTION", "4", "CHAR(1) NOT NULL"},
/////////////////////////////////////////////////////////////////////////
1: 				{"SYSROLES", "SYSROLES_HEAP", "false"},
1: 				{"SYSROLES", "SYSROLES_INDEX2", "true"},
1: 				{"SYSROLES", "SYSROLES_INDEX1", "true"},
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d9878ca
/////////////////////////////////////////////////////////////////////////
1:                 {"SYSTRIGGERS", "WHENCLAUSETEXT", "18", "LONG VARCHAR"},
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:55d3591
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.TypeDescriptor;
0: import org.apache.derbyTesting.junit.DerbyVersion;
/////////////////////////////////////////////////////////////////////////
1:     public SystemCatalogTest(String name) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * This test creates a table with all supported datatypes aqnd ensures 
1: 	 * that bound embedded and network server return the identical datatypes
1: 	 * for those datatypes. DERBY-5407
1: 	 * @throws SQLException
1: 	 */
1: 	public void testColumnDatatypesOfAllDataTypesInSystemCatalogs() throws SQLException {
1: 		int totalNumOfColumnDatatypes = 21;
1: 		Statement s = createStatement();
1: 		s.execute("create table allTypesTable (" +
1: 			"    a01 bigint," +
1: 			"    a02 blob,\n" +
1: 			"    a03 char( 1 ),\n" +
1: 			"    a04 char( 1 ) for bit data ,\n" +
1: 			"    a05 clob,\n" +
1: 			"    a06 date,\n" +
1: 			"    a07 decimal,\n" +
1: 			"    a08 double,\n" +
1: 			"    a09 float,\n" +
1: 			"    a10 int,\n" +
1: 			"    a11 long varchar,\n" +
1: 			"    a12 long varchar for bit data,\n" +
1: 			"    a13 numeric,\n" +
1: 			"    a14 real,\n" +
1: 			"    a15 smallint,\n" +
1: 			"    a16 time,\n" +
1: 			"    a17 timestamp,\n" +
1: 			"    a18 varchar(10),\n" +
1: 			"    a19 varchar(10) for bit data,\n" +
1: 			"    a20 xml,\n" +
1: 			"    a21 boolean\n" +
1:         	")");
1: 		ResultSet rs = s.executeQuery("select columndatatype "+
1: 			"from sys.systables, sys.syscolumns "+
1: 			"where tablename='ALLTYPESTABLE' "+
1: 			"and tableid=referenceid "+
1: 			"order by columnname");
1: 		for (int i=1; i<=totalNumOfColumnDatatypes; i++)
1: 		{
1: 			rs.next();
1: 			switch(i)
1: 			{
1: 			case 1 :
1: 				assertTrue(rs.getString(1).startsWith("BIGINT"));
1: 				break;
1: 			case 2 :
1: 				assertTrue(rs.getString(1).startsWith("BLOB(2147483647)"));
1: 				break;
1: 			case 3 :
1: 				assertTrue(rs.getString(1).startsWith("CHAR(1)"));
1: 				break;
1: 			case 4 :
1: 				assertTrue(rs.getString(1).startsWith("CHAR (1) FOR BIT DATA"));
1: 				break;
1: 			case 5 :
1: 				assertTrue(rs.getString(1).startsWith("CLOB(2147483647)"));
1: 				break;
1: 			case 6 :
1: 				assertTrue(rs.getString(1).startsWith("DATE"));
1: 				break;
1: 			case 7 :
1: 				assertTrue(rs.getString(1).startsWith("DECIMAL(5,0)"));
1: 				break;
1: 			case 8 :
1: 				assertTrue(rs.getString(1).startsWith("DOUBLE"));
1: 				break;
1: 			case 9 :
1: 				assertTrue(rs.getString(1).startsWith("DOUBLE"));
1: 				break;
1: 			case 10 :
1: 				assertTrue(rs.getString(1).startsWith("INTEGER"));
1: 				break;
1: 			case 11 :
1: 				assertTrue(rs.getString(1).startsWith("LONG VARCHAR"));
1: 				break;
1: 			case 12 :
1: 				assertTrue(rs.getString(1).startsWith("LONG VARCHAR FOR BIT DATA"));
1: 				break;
1: 			case 13 :
1: 				assertTrue(rs.getString(1).startsWith("NUMERIC(5,0)"));
1: 				break;
1: 			case 14 :
1: 				assertTrue(rs.getString(1).startsWith("REAL"));
1: 				break;
1: 			case 15 :
1: 				assertTrue(rs.getString(1).startsWith("SMALLINT"));
1: 				break;
1: 			case 16 :
1: 				assertTrue(rs.getString(1).startsWith("TIME"));
1: 				break;
1: 			case 17 :
1: 				assertTrue(rs.getString(1).startsWith("TIMESTAMP"));
1: 				break;
1: 			case 18 :
1: 				assertTrue(rs.getString(1).startsWith("VARCHAR(10)"));
1: 				break;
1: 			case 19 :
1: 				assertTrue(rs.getString(1).startsWith("VARCHAR (10) FOR BIT DATA"));
1: 				break;
1: 			case 20 :
1: 				assertTrue(rs.getString(1).startsWith("XML"));
1: 				break;
1: 			case 21 :
1: 				assertTrue(rs.getString(1).startsWith("BOOLEAN"));
1: 				break;
1: 			}
1: 		}
1: 		rs.close();
1: 		s.execute("drop table ALLTYPESTABLE");
1: 	}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1: 				{"SYSUSERS", "HASHINGSCHEME", "2", "VARCHAR(32672) NOT NULL"},
1: 				{"SYSUSERS", "LASTMODIFIED", "4", "TIMESTAMP NOT NULL"},
1: 				{"SYSUSERS", "PASSWORD", "3", "VARCHAR(32672) NOT NULL"},
1: 				{"SYSUSERS", "USERNAME", "1", "VARCHAR(128) NOT NULL"},
/////////////////////////////////////////////////////////////////////////
1: 				{"SYSUSERS", "SYSUSERS_HEAP", "false"},
1: 				{"SYSUSERS", "SYSUSERS_INDEX1", "true"},
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1:                 {"SYSPERMS", "SYSPERMS_INDEX3", "true"},
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1:                 {"SYSPERMS", "GRANTEE", "6", "VARCHAR(128) NOT NULL"},
1:                 {"SYSPERMS", "GRANTOR", "5", "VARCHAR(128) NOT NULL"},
1:                 {"SYSPERMS", "ISGRANTABLE", "7", "CHAR(1) NOT NULL"},
1:                 {"SYSPERMS", "OBJECTID", "3", "CHAR(36) NOT NULL"},
1:                 {"SYSPERMS", "OBJECTTYPE", "2", "VARCHAR(36) NOT NULL"},
1:                 {"SYSPERMS", "PERMISSION", "4", "CHAR(36) NOT NULL"},
1:                 {"SYSPERMS", "UUID", "1", "CHAR(36) NOT NULL"},
0:                 {"SYSROLES", "GRANTEE", "3", "VARCHAR(128) NOT NULL"},
0:                 {"SYSROLES", "GRANTOR", "4", "VARCHAR(128) NOT NULL"},
/////////////////////////////////////////////////////////////////////////
1:                 {"SYSSEQUENCES", "CURRENTVALUE", "5", "BIGINT"},
1:                 {"SYSSEQUENCES", "CYCLEOPTION", "10", "CHAR(1) NOT NULL"},
1:                 {"SYSSEQUENCES", "INCREMENT", "9", "BIGINT NOT NULL"},
1:                 {"SYSSEQUENCES", "MAXIMUMVALUE", "8", "BIGINT NOT NULL"},
1:                 {"SYSSEQUENCES", "MINIMUMVALUE", "7", "BIGINT NOT NULL"},
1:                 {"SYSSEQUENCES", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1:                 {"SYSSEQUENCES", "SEQUENCEDATATYPE", "4", "org.apache.derby.catalog.TypeDescriptor NOT NULL"},
1:                 {"SYSSEQUENCES", "SEQUENCEID", "1", "CHAR(36) NOT NULL"},
1:                 {"SYSSEQUENCES", "SEQUENCENAME", "2", "VARCHAR(128) NOT NULL"},
1:                 {"SYSSEQUENCES", "STARTVALUE", "6", "BIGINT NOT NULL"},                
1:                 {"SYSSTATEMENTS", "LASTCOMPILED", "7", "TIMESTAMP"},
/////////////////////////////////////////////////////////////////////////
1:                 {"SYSPERMS", "SYSPERMS_HEAP", "false"},
1:                 {"SYSPERMS", "SYSPERMS_INDEX2", "true"},
1:                 {"SYSPERMS", "SYSPERMS_INDEX1", "true"},
0:                 {"SYSROLES", "SYSROLES_HEAP", "false"},
1:                 {"SYSROUTINEPERMS", "SYSROUTINEPERMS_HEAP", "false"},
1:                 {"SYSSEQUENCES", "SYSSEQUENCES_HEAP", "false"},
1:                 {"SYSSEQUENCES", "SYSSEQUENCES_INDEX2", "true"},
1:                 {"SYSSEQUENCES", "SYSSEQUENCES_INDEX1", "true"},
1:                 {"SYSSTATEMENTS", "SYSSTATEMENTS_HEAP", "false"},
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:761f2b8
/////////////////////////////////////////////////////////////////////////
1: 	    assertStatementError("X0Y56", s, "drop table sys.systables");
1: 	    assertStatementError("42X62", s, "drop index sys.sysaliases_index2");
1: 	    assertStatementError("42X62", s, "create index trash on sys.systables(tableid)");
1: 	    assertStatementError("42X62", s, "create table sys.usertable(c1 int)");
1: 	    assertStatementError("42X62", s, "create view sys.userview as select * from sys.systables");
1: 	    assertStatementError("42X62", s, "alter table sys.systables drop column tablename");
1: 	    assertStatementError("42X62", s, "alter table sys.systables add column foo int");
1: 	    assertStatementError("42X62", s, "alter table sys.systables alter column tablename null");
1: 	    assertStatementError("42X62", s, "alter table sys.systables drop primary key");
1: 	    s.close();
commit:45fdfa3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
commit:2099e21
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Tests concerning the system catalogs.
1:  * 
1:  * Retaining comment from previous .sql test:
1:  * RESOLVE - add selects from sysdepends when simplified
1:  *
1:  */
1: public class SystemCatalogTest extends BaseJDBCTestCase {
1: 
0: 	public SystemCatalogTest(String name) {
1: 		super(name);
1: 	}
1: 	
1: 	public static Test suite() {
1: 		Test suite = TestConfiguration.defaultSuite(SystemCatalogTest.class);
1: 		return TestConfiguration.singleUseDatabaseDecorator(suite);
1: 	}
1: 	
1: 	/**
1: 	 * Test that the user cannot execute any DDL statements on the system tables.
1: 	 * @throws SQLException
1: 	 */
1: 	public void testNoUserDDLOnSystemTables() throws SQLException {
1: 	    Statement s = createStatement();
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("drop table sys.systables");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("X0Y56", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("drop index sys.sysaliases_index2");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 		
1: 	    try{
0: 	    	s.executeUpdate("create index trash on sys.systables(tableid)");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("create table sys.usertable(c1 int)");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("create view sys.userview as select * from sys.systables");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("alter table sys.systables drop column tablename");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("alter table sys.systables add column foo int");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("alter table sys.systables alter column tablename null");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	    
1: 	    try{
0: 	    	s.executeUpdate("alter table sys.systables drop primary key");
1: 	    } catch (SQLException e)
1: 	    {
0: 	    	assertSQLState("42X62", e);
1: 	    }
1: 	}
1: 	
1: 	/**
1: 	 * Test that the system tables cannot be changed by various DML statements.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSystemCatalogsNotUpdatable() throws SQLException{
1: 		Connection c = getConnection();
1: 		Statement s = c.createStatement();
1: 		
1: 	    c.setAutoCommit(false);
1: 	    
1: 	    try{
1: 	    	s.executeUpdate("delete from sys.systables");
1: 	    } catch (SQLException e)
1: 	    {
1: 	    	assertSQLState("42Y25", e);
1: 	    }
1: 	    
1: 	    try{
1: 	    	s.executeUpdate("update sys.systables set tablename = tablename || 'trash'");
1: 	    } catch (SQLException e)
1: 	    {
1: 	    	assertSQLState("42Y25", e);
1: 	    }
1: 	    
1: 	    try{
1: 	    	s.executeUpdate("insert into sys.systables select * from sys.systables");
1: 	    } catch (SQLException e)
1: 	    {
1: 	    	assertSQLState("42Y25", e);
1: 	    }
1: 	    
1: 	    try{
1: 	    	ResultSet rs = s.executeQuery("select tablename from sys.systables for update of tablename");
1: 	    } catch (SQLException e)
1: 	    {
1: 	    	assertSQLState("42Y90", e);
1: 	    }
1: 	    
1:         c.rollback();
1: 	    c.setAutoCommit(true);
1: 	    
1: 	}
1: 	
1: 	/**
1: 	 * Test various default store properties for the system tables.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSystemCatalogStoreProperties() throws SQLException{
1: 		Statement s = createStatement();
1: 		s.execute("create function gatp(SCH VARCHAR(128), TBL VARCHAR(128)) RETURNS VARCHAR(1000) EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllTableProperties' LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 		s.execute("create function gaip(SCH VARCHAR(128), TBL VARCHAR(128)) RETURNS VARCHAR(1000) EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllIndexProperties' LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 
1: 		// get the properties for the heaps
1: 		ResultSet rs = s.executeQuery("select tablename,gatp('SYS', tablename) from sys.systables order by tablename");
1: 		boolean nonEmptyResultSet = false;
1: 		String tablename = null;
1: 		String sysdummy = "SYSDUMMY1";
1: 		String heapResult = "{ derby.storage.initialPages=1, derby.storage.minimumRecordSize=12, derby.storage.pageReservedSpace=0, derby.storage.pageSize=4096, derby.storage.reusableRecordId=false }";
1: 		while(rs.next()) {
1: 			nonEmptyResultSet  = true;
1: 			tablename = rs.getString(1);
1: 			if (tablename.equals(sysdummy)) {
1: 				assertTrue(rs.getString(2).startsWith("{  }"));
1: 			} else {
1: 				assertTrue(rs.getString(2).startsWith(heapResult));
1: 			}
1: 		}
1: 		assertTrue(nonEmptyResultSet);
1: 		rs.close();
1: 				
1: 		// get the properties for the indexes
1: 		rs = s.executeQuery("select conglomeratename, gaip('SYS',	conglomeratename) from sys.sysconglomerates where isindex order by conglomeratename");
1: 		nonEmptyResultSet = false;
1: 		String indexResult = "{ derby.storage.initialPages=1, derby.storage.minimumRecordSize=1, derby.storage.pageReservedSpace=0, derby.storage.pageSize=4096, derby.storage.reusableRecordId=true }";
1: 		while(rs.next()) {
1: 			nonEmptyResultSet  = true;
1: 			assertTrue(rs.getString(2).startsWith(indexResult));
1: 		}
1: 		assertTrue(nonEmptyResultSet);
1: 	    rs.close();
1: 	    s.close();
1: 	}         
1: 
1: 	/**
1: 	 * Test that each system table has a table type of "S".
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSystemCatalogTableTypes() throws SQLException {
1: 		Statement s = createStatement();
1: 		ResultSet rs = s.executeQuery("select TABLENAME, TABLETYPE from sys.systables order by tablename");
1: 		
1: 		boolean nonEmptyResultSet = false;
1: 		while(rs.next()) {
1: 			nonEmptyResultSet  = true;
1: 			assertEquals("S", rs.getString(2));
1: 		}
1: 		assertTrue(nonEmptyResultSet);
1: 		rs.close();
1: 		s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Check that all the tables for their expected columns.
1: 	 *
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSystemCatalogColumns() throws SQLException {
1: 		String [][] expected = {
1: 				{"SYSALIASES", "ALIAS", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSALIASES", "ALIASID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSALIASES", "ALIASINFO", "8", "org.apache.derby.catalog.AliasInfo"},
1: 				{"SYSALIASES", "ALIASTYPE", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSALIASES", "JAVACLASSNAME", "4", "LONG VARCHAR NOT NULL"},
1: 				{"SYSALIASES", "NAMESPACE", "6", "CHAR(1) NOT NULL"},
1: 				{"SYSALIASES", "SCHEMAID", "3", "CHAR(36)"},
1: 				{"SYSALIASES", "SPECIFICNAME", "9", "VARCHAR(128) NOT NULL"},
1: 				{"SYSALIASES", "SYSTEMALIAS", "7", "BOOLEAN NOT NULL"},
1: 				{"SYSCHECKS", "CHECKDEFINITION", "2", "LONG VARCHAR NOT NULL"},
1: 				{"SYSCHECKS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSCHECKS", "REFERENCEDCOLUMNS", "3", "org.apache.derby.catalog.ReferencedColumns NOT NULL"},
1: 				{"SYSCOLPERMS", "COLPERMSID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSCOLPERMS", "COLUMNS", "6", "org.apache.derby.iapi.services.io.FormatableBitSet NOT NULL"},
1: 				{"SYSCOLPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSCOLPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSCOLPERMS", "TABLEID", "4", "CHAR(36) NOT NULL"},
1: 				{"SYSCOLPERMS", "TYPE", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSCOLUMNS", "AUTOINCREMENTINC", "9", "BIGINT"},
1: 				{"SYSCOLUMNS", "AUTOINCREMENTSTART", "8", "BIGINT"},
1: 				{"SYSCOLUMNS", "AUTOINCREMENTVALUE", "7", "BIGINT"},
1: 				{"SYSCOLUMNS", "COLUMNDATATYPE", "4", "org.apache.derby.catalog.TypeDescriptor NOT NULL"},
1: 				{"SYSCOLUMNS", "COLUMNDEFAULT", "5", "java.io.Serializable"},
1: 				{"SYSCOLUMNS", "COLUMNDEFAULTID", "6", "CHAR(36)"},
1: 				{"SYSCOLUMNS", "COLUMNNAME", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSCOLUMNS", "COLUMNNUMBER", "3", "INTEGER NOT NULL"},
1: 				{"SYSCOLUMNS", "REFERENCEID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSCONGLOMERATES", "CONGLOMERATEID", "8", "CHAR(36) NOT NULL"},
1: 				{"SYSCONGLOMERATES", "CONGLOMERATENAME", "4", "VARCHAR(128)"},
1: 				{"SYSCONGLOMERATES", "CONGLOMERATENUMBER", "3", "BIGINT NOT NULL"},
1: 				{"SYSCONGLOMERATES", "DESCRIPTOR", "6", "org.apache.derby.catalog.IndexDescriptor"},
1: 				{"SYSCONGLOMERATES", "ISCONSTRAINT", "7", "BOOLEAN"},
1: 				{"SYSCONGLOMERATES", "ISINDEX", "5", "BOOLEAN NOT NULL"},
1: 				{"SYSCONGLOMERATES", "SCHEMAID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSCONGLOMERATES", "TABLEID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "CONSTRAINTNAME", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "REFERENCECOUNT", "7", "INTEGER NOT NULL"},
1: 				{"SYSCONSTRAINTS", "SCHEMAID", "5", "CHAR(36) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "STATE", "6", "CHAR(1) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "TABLEID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSCONSTRAINTS", "TYPE", "4", "CHAR(1) NOT NULL"},
1: 				{"SYSDEPENDS", "DEPENDENTFINDER", "2", "org.apache.derby.catalog.DependableFinder NOT NULL"},
1: 				{"SYSDEPENDS", "DEPENDENTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSDEPENDS", "PROVIDERFINDER", "4", "org.apache.derby.catalog.DependableFinder NOT NULL"},
1: 				{"SYSDEPENDS", "PROVIDERID", "3", "CHAR(36) NOT NULL"},
1: 				{"SYSDUMMY1", "IBMREQD", "1", "CHAR(1)"},
1: 				{"SYSFILES", "FILEID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSFILES", "FILENAME", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSFILES", "GENERATIONID", "4", "BIGINT NOT NULL"},
1: 				{"SYSFILES", "SCHEMAID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSFOREIGNKEYS", "CONGLOMERATEID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSFOREIGNKEYS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSFOREIGNKEYS", "DELETERULE", "4", "CHAR(1) NOT NULL"},
1: 				{"SYSFOREIGNKEYS", "KEYCONSTRAINTID", "3", "CHAR(36) NOT NULL"},
1: 				{"SYSFOREIGNKEYS", "UPDATERULE", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSKEYS", "CONGLOMERATEID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSKEYS", "CONSTRAINTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSROUTINEPERMS", "ALIASID", "4", "CHAR(36) NOT NULL"},
1: 				{"SYSROUTINEPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSROUTINEPERMS", "GRANTOPTION", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSROUTINEPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSROUTINEPERMS", "ROUTINEPERMSID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSSCHEMAS", "AUTHORIZATIONID", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSSCHEMAS", "SCHEMAID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSSCHEMAS", "SCHEMANAME", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSSTATEMENTS", "COMPILATIONSCHEMAID", "8", "CHAR(36)"},
0: 				{"SYSSTATEMENTS", "LASTCOMPILED", "7", "TIMESTAMP"},
1: 				{"SYSSTATEMENTS", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1: 				{"SYSSTATEMENTS", "STMTID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSSTATEMENTS", "STMTNAME", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSSTATEMENTS", "TEXT", "6", "LONG VARCHAR NOT NULL"},
1: 				{"SYSSTATEMENTS", "TYPE", "4", "CHAR(1) NOT NULL"},
1: 				{"SYSSTATEMENTS", "USINGTEXT", "9", "LONG VARCHAR"},
1: 				{"SYSSTATEMENTS", "VALID", "5", "BOOLEAN NOT NULL"},
1: 				{"SYSSTATISTICS", "COLCOUNT", "7", "INTEGER NOT NULL"},
1: 				{"SYSSTATISTICS", "CREATIONTIMESTAMP", "4", "TIMESTAMP NOT NULL"},
1: 				{"SYSSTATISTICS", "REFERENCEID", "2", "CHAR(36) NOT NULL"},
1: 				{"SYSSTATISTICS", "STATID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSSTATISTICS", "STATISTICS", "8", "org.apache.derby.catalog.Statistics NOT NULL"},
1: 				{"SYSSTATISTICS", "TABLEID", "3", "CHAR(36) NOT NULL"},
1: 				{"SYSSTATISTICS", "TYPE", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSSTATISTICS", "VALID", "6", "BOOLEAN NOT NULL"},
1: 				{"SYSTABLEPERMS", "DELETEPRIV", "6", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLEPERMS", "GRANTEE", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSTABLEPERMS", "GRANTOR", "3", "VARCHAR(128) NOT NULL"},
1: 				{"SYSTABLEPERMS", "INSERTPRIV", "7", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLEPERMS", "REFERENCESPRIV", "9", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLEPERMS", "SELECTPRIV", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLEPERMS", "TABLEID", "4", "CHAR(36) NOT NULL"},
1: 				{"SYSTABLEPERMS", "TABLEPERMSID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSTABLEPERMS", "TRIGGERPRIV", "10", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLEPERMS", "UPDATEPRIV", "8", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLES", "LOCKGRANULARITY", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSTABLES", "SCHEMAID", "4", "CHAR(36) NOT NULL"},
1: 				{"SYSTABLES", "TABLEID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSTABLES", "TABLENAME", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSTABLES", "TABLETYPE", "3", "CHAR(1) NOT NULL"},
1: 				{"SYSTRIGGERS", "ACTIONSTMTID", "11", "CHAR(36)"},
1: 				{"SYSTRIGGERS", "CREATIONTIMESTAMP", "4", "TIMESTAMP NOT NULL"},
1: 				{"SYSTRIGGERS", "EVENT", "5", "CHAR(1) NOT NULL"},
1: 				{"SYSTRIGGERS", "FIRINGTIME", "6", "CHAR(1) NOT NULL"},
1: 				{"SYSTRIGGERS", "NEWREFERENCINGNAME", "17", "VARCHAR(128)"},
1: 				{"SYSTRIGGERS", "OLDREFERENCINGNAME", "16", "VARCHAR(128)"},
1: 				{"SYSTRIGGERS", "REFERENCEDCOLUMNS", "12", "org.apache.derby.catalog.ReferencedColumns"},
1: 				{"SYSTRIGGERS", "REFERENCINGNEW", "15", "BOOLEAN"},
1: 				{"SYSTRIGGERS", "REFERENCINGOLD", "14", "BOOLEAN"},
1: 				{"SYSTRIGGERS", "SCHEMAID", "3", "CHAR(36) NOT NULL"},
1: 				{"SYSTRIGGERS", "STATE", "8", "CHAR(1) NOT NULL"},
1: 				{"SYSTRIGGERS", "TABLEID", "9", "CHAR(36) NOT NULL"},
1: 				{"SYSTRIGGERS", "TRIGGERDEFINITION", "13", "LONG VARCHAR"},
1: 				{"SYSTRIGGERS", "TRIGGERID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSTRIGGERS", "TRIGGERNAME", "2", "VARCHAR(128) NOT NULL"},
1: 				{"SYSTRIGGERS", "TYPE", "7", "CHAR(1) NOT NULL"},
1: 				{"SYSTRIGGERS", "WHENSTMTID", "10", "CHAR(36)"},
1: 				{"SYSVIEWS", "CHECKOPTION", "3", "CHAR(1) NOT NULL"},
1: 				{"SYSVIEWS", "COMPILATIONSCHEMAID", "4", "CHAR(36)"},
1: 				{"SYSVIEWS", "TABLEID", "1", "CHAR(36) NOT NULL"},
1: 				{"SYSVIEWS", "VIEWDEFINITION", "2", "LONG VARCHAR NOT NULL"}
1: 		};
1: 				
1: 		Statement s = createStatement();
1: 		
1: 		ResultSet rs = s.executeQuery("select TABLENAME, COLUMNNAME, COLUMNNUMBER, COLUMNDATATYPE from sys.systables t, sys.syscolumns c" +
1: 				" where t.TABLEID=c.REFERENCEID order by TABLENAME, COLUMNNAME");
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 				                      
1: 		s.close();
1: 	
1: 	}
1: 	
1: 	public void testSystemCatalogIndexes() throws SQLException{
1: 		String [][] expected = 
1: 		{
1: 				{"SYSALIASES", "SYSALIASES_HEAP", "false"},
1: 				{"SYSALIASES", "SYSALIASES_INDEX3", "true"},
1: 				{"SYSALIASES", "SYSALIASES_INDEX2", "true"},
1: 				{"SYSALIASES", "SYSALIASES_INDEX1", "true"},
1: 				{"SYSCHECKS", "SYSCHECKS_HEAP", "false"},
1: 				{"SYSCHECKS", "SYSCHECKS_INDEX1", "true"},
1: 				{"SYSCOLPERMS", "SYSCOLPERMS_HEAP", "false"},
1: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX3", "true"},
1: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX2", "true"},
1: 				{"SYSCOLPERMS", "SYSCOLPERMS_INDEX1", "true"},
1: 				{"SYSCOLUMNS", "SYSCOLUMNS_HEAP", "false"},
1: 				{"SYSCOLUMNS", "SYSCOLUMNS_INDEX2", "true"},
1: 				{"SYSCOLUMNS", "SYSCOLUMNS_INDEX1", "true"},
1: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_HEAP", "false"},
1: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX3", "true"},
1: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX2", "true"},
1: 				{"SYSCONGLOMERATES", "SYSCONGLOMERATES_INDEX1", "true"},
1: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_HEAP", "false"},
1: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX3", "true"},
1: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX2", "true"},
1: 				{"SYSCONSTRAINTS", "SYSCONSTRAINTS_INDEX1", "true"},
1: 				{"SYSDEPENDS", "SYSDEPENDS_HEAP", "false"},
1: 				{"SYSDEPENDS", "SYSDEPENDS_INDEX2", "true"},
1: 				{"SYSDEPENDS", "SYSDEPENDS_INDEX1", "true"},
1: 				{"SYSDUMMY1", "SYSDUMMY1_HEAP", "false"},
1: 				{"SYSFILES", "SYSFILES_HEAP", "false"},
1: 				{"SYSFILES", "SYSFILES_INDEX2", "true"},
1: 				{"SYSFILES", "SYSFILES_INDEX1", "true"},
1: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_HEAP", "false"},
1: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_INDEX2", "true"},
1: 				{"SYSFOREIGNKEYS", "SYSFOREIGNKEYS_INDEX1", "true"},
1: 				{"SYSKEYS", "SYSKEYS_HEAP", "false"},
1: 				{"SYSKEYS", "SYSKEYS_INDEX1", "true"},
0: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_HEAP", "false"},
1: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX3", "true"},
1: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX2", "true"},
1: 				{"SYSROUTINEPERMS", "SYSROUTINEPERMS_INDEX1", "true"},
1: 				{"SYSSCHEMAS", "SYSSCHEMAS_HEAP", "false"},
1: 				{"SYSSCHEMAS", "SYSSCHEMAS_INDEX2", "true"},
1: 				{"SYSSCHEMAS", "SYSSCHEMAS_INDEX1", "true"},
0: 				{"SYSSTATEMENTS", "SYSSTATEMENTS_HEAP", "false"},
1: 				{"SYSSTATEMENTS", "SYSSTATEMENTS_INDEX2", "true"},
1: 				{"SYSSTATEMENTS", "SYSSTATEMENTS_INDEX1", "true"},
1: 				{"SYSSTATISTICS", "SYSSTATISTICS_HEAP", "false"},
1: 				{"SYSSTATISTICS", "SYSSTATISTICS_INDEX1", "true"},
1: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_HEAP", "false"},
1: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX3", "true"},
1: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX2", "true"},
1: 				{"SYSTABLEPERMS", "SYSTABLEPERMS_INDEX1", "true"},
1: 				{"SYSTABLES", "SYSTABLES_HEAP", "false"},
1: 				{"SYSTABLES", "SYSTABLES_INDEX2", "true"},
1: 				{"SYSTABLES", "SYSTABLES_INDEX1", "true"},
1: 				{"SYSTRIGGERS", "SYSTRIGGERS_HEAP", "false"},
1: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX3", "true"},
1: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX2", "true"},
1: 				{"SYSTRIGGERS", "SYSTRIGGERS_INDEX1", "true"},
1: 				{"SYSVIEWS", "SYSVIEWS_HEAP", "false"},
1: 				{"SYSVIEWS", "SYSVIEWS_INDEX1", "true"},
1: 			};
1: 		
1: 		Statement s = createStatement();
1: 		
1: 		ResultSet rs = s.executeQuery("select TABLENAME, CONGLOMERATENAME, ISINDEX from sys.systables t, sys.sysconglomerates c"
1: 				                      +  " where t.TABLEID=c.TABLEID order by TABLENAME, ISINDEX");
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 				                      
1: 		s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Check that a newly created table and its columns appear in SYSTABLES and SYSCOLUMNS
1: 	 * @throws SQLException
1: 	 */
1: 	public void testNewTableInSystemCatalogs() throws SQLException {
1: 		Statement s = createStatement();
1: 		
1: 		s.execute("create table t (i int, s smallint)");
1: 		
1: 		ResultSet rs = s.executeQuery("select TABLETYPE from sys.systables where tablename = 'T'");
1: 		JDBC.assertSingleValueResultSet(rs, "T");
1: 		rs.close();
1: 		
1: 		rs = s.executeQuery("select TABLENAME, COLUMNNAME, COLUMNNUMBER, columndatatype from sys.systables t, sys.syscolumns c" +
1: 				" where t.TABLEID=c.REFERENCEID and t.tablename = 'T' order by TABLENAME, COLUMNNAME");
1:         String[][] expected = {{"T", "I", "1", "INTEGER"}, {"T", "S", "2", "SMALLINT"}};
1:         JDBC.assertFullResultSet(rs,expected);
1:         rs.close();
1:         
1:         rs = s.executeQuery("select TABLENAME, ISINDEX from sys.systables t, sys.sysconglomerates c where t.TABLEID=c.TABLEID and t.TABLENAME = 'T' order by TABLENAME, ISINDEX");
1:         expected = new String[][] {{"T", "false"},};
1:         JDBC.assertFullResultSet(rs,expected);
1:         rs.close();
1:         
1:         s.execute("drop table t");
1:         
1:         s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Test that table and column names over thirty characters are recorded
1: 	 * properly in the system tables.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testOverThirtyCharsInTableName() throws SQLException {
1: 		Statement s = createStatement();
1: 		
1: 		s.execute("create table t234567890123456789012345678901234567890 (c234567890123456789012345678901234567890 int)");
1: 		
1: 		ResultSet rs = s.executeQuery("select TABLENAME from sys.systables where length(TABLENAME) > 30 order by tablename");
1: 		JDBC.assertSingleValueResultSet(rs, "T234567890123456789012345678901234567890");
1: 		rs.close();
1: 		
1: 		rs = s.executeQuery("select COLUMNNAME from sys.syscolumns where {fn length(COLUMNNAME)} > 30 order by columnname");
1: 		JDBC.assertSingleValueResultSet(rs, "C234567890123456789012345678901234567890");
1: 		rs.close();
1: 		
1: 		s.execute("drop table t234567890123456789012345678901234567890");
1: 		s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Test that named constraints and unnamed constraints are recorded in the system tables properly.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testPrimaryAndUniqueKeysInSystemCatalogs() throws SQLException {
1: 		Statement s = createStatement();
1: 		String getNamedConstraintsQuery = "select c.constraintname, c.type from sys.sysconstraints c, sys.systables t "
1:             + "where c.tableid = t.tableid and not t.tablename like 'UNNAMED%' order by c.constraintname";
1: 		
1: 		s.execute("create table primkey1 (c1 int not null constraint prim1 primary key)");
1: 		String [][] expected = new String[][] {{"PRIM1", "P"}};
1: 		ResultSet rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected, true);
1: 		rs.close();
1: 		
1: 		s.execute("create table unnamed_primkey2 (c1 int not null primary key)");
1: 		rs = s.executeQuery("select c.constraintname, c.type from sys.sysconstraints c, sys.systables t where c.tableid = t.tableid and t.tablename = 'UNNAMED_PRIMKEY2' order by c.constraintname");
1: 		assertTrue(rs.next());
1: 		assertEquals("P", rs.getString(2));
1: 		assertFalse(rs.next());
1: 		rs.close();
1: 		rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 		
1: 		s.execute("create table primkey3 (c1 int not null, c2 int not null, constraint prim3 primary key(c2, c1))");
1: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}};
1: 		rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 
1: 		s.execute("create table uniquekey1 (c1 int not null constraint uniq1 unique)");
1: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}, {"UNIQ1", "U"}};
1: 		rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 
1: 		s.execute("create table unnamed_uniquekey2 (c1 int not null unique)");
1: 		rs = s.executeQuery("select c.constraintname, c.type from sys.sysconstraints c, sys.systables t where c.tableid = t.tableid and t.tablename = 'UNNAMED_UNIQUEKEY2' order by c.constraintname");
1: 		assertTrue(rs.next());
1: 		assertEquals("U", rs.getString(2));
1: 		assertFalse(rs.next());
1: 		rs.close();
1:      	rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 		
1: 		s.execute("create table uniquekey3 (c1 int not null, c2 int not null, constraint uniq3 unique(c2, c1))");
1: 		expected = new String[][] {{"PRIM1", "P"}, {"PRIM3", "P"}, {"UNIQ1", "U"}, {"UNIQ3", "U"}};
1: 		rs = s.executeQuery(getNamedConstraintsQuery);
1: 		JDBC.assertFullResultSet(rs, expected);
1: 		rs.close();
1: 
1: 	    s.execute("drop table primkey1");
1: 	    s.execute("drop table unnamed_primkey2");
1: 	    s.execute("drop table primkey3");
1: 	    s.execute("drop table uniquekey1");
1: 	    s.execute("drop table unnamed_uniquekey2");
1: 	    s.execute("drop table uniquekey3");
1: 	    
1: 	    s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Test that view creation is recorded in the system tables.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testViewsOfSystemCatalogs() throws SQLException {
1: 		Statement s = createStatement();
1: 		s.execute("create table t (i int, s smallint)");
1: 		s.execute("create table uniquekey3 (c1 int not null, c2 int not null, constraint uniq3 unique(c2, c1))");
1: 		s.execute("create view dummyview as select * from t, uniquekey3");
1: 		
1: 		ResultSet rs = s.executeQuery("select tablename from sys.systables t, sys.sysviews v where t.tableid = v.tableid order by tablename");
1: 		JDBC.assertSingleValueResultSet(rs, "DUMMYVIEW");
1:         rs.close();
1: 		
1: 		s.execute("drop view dummyview");
1: 		s.execute("drop table t");
1: 		s.execute("drop table uniquekey3");
1: 		s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Check that column datatypes are reported correctly, both in
1: 	 * embedded and client/server modes
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testColumnDatatypesInSystemCatalogs() throws SQLException {
1: 		Statement s = createStatement();
1: 		
1: 		s.execute("create table decimal_tab (dcol decimal(5,2), ncol numeric(5,2) default 1.0)");
1: 		ResultSet rs = s.executeQuery("select columnname, columndatatype from sys.syscolumns where columnname IN ('DCOL', 'NCOL') order by columnname");
1: 		//DCOL
1: 		assertTrue(rs.next());
1: 		assertTrue(rs.getString(2).startsWith("DECIMAL(5,2)"));
1: 		//NCOL
1: 		assertTrue(rs.next());		
1: 		assertTrue(rs.getString(2).startsWith("NUMERIC(5,2)"));
1: 		assertFalse(rs.next());
1: 		rs.close();
1: 		
1: 		s.execute("create index decimal_tab_idx on decimal_tab(dcol)");
1: 		rs = s.executeQuery("select conglomeratename, descriptor from sys.sysconglomerates where conglomeratename = 'DECIMAL_TAB_IDX' order by conglomeratename");
1: 		assertTrue(rs.next());
1: 		assertTrue(rs.getString(2).startsWith("BTREE (1)"));
1: 		assertFalse(rs.next());
1: 		rs.close();
1: 		
1: 		s.execute("create trigger t1 after update on decimal_tab for each row values 1");
1: 		rs = s.executeQuery("select triggername, referencedcolumns from sys.systriggers order by triggername");
1: 		assertTrue(rs.next());
1: 		assertNull(rs.getString(2));
1: 		assertFalse(rs.next());
1: 		rs.close();
1: 		
1: 		s.execute("drop trigger t1");
1: 		s.execute("drop table decimal_tab");
1: 		s.close();
1: 	}
1: 	
1: 	/**
1: 	 * Test for fix of Derby-318, confirm that it is possible to select
1: 	 * COLUMNDEFAULT from SYSCOLUMNS after a column that is generated by
1: 	 * default has been added.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testAutoincrementColumnUpdated() throws SQLException{
1: 		Statement s = createStatement();
1: 		s.executeUpdate("create table defaultAutoinc(autoinccol int generated by default as identity)");
1: 		ResultSet rs = s.executeQuery("select COLUMNDEFAULT from SYS.SYSCOLUMNS where COLUMNNAME = 'AUTOINCCOL'");
1: 		assertTrue(rs.next());
1: 		// Before Derby-318, this next call would have failed with an NPE
1: 	    Object o = rs.getObject(1);
1: 	    if (! (o instanceof java.io.Serializable)) {
1: 	    	fail("SystemCatalogTest: invalid Object type for SYSCOLUMNS.COLUMNDEFAULT");
1: 	    }
1: 	    assertFalse(rs.next());
1: 		rs.close();
1: 		
1: 		s.executeUpdate("drop table defaultAutoinc");
1: 		s.close();
1: 		
1: 	}
1: 	
1: 	/**
1: 	 * Run SYSCS_UTIL.SYSCS_CHECK_TABLE on each system table.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testCheckConsistencyOfSystemCatalogs() throws SQLException {
1: 		Statement s = createStatement();
1: 		ResultSet rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename)from sys.systables where tabletype = 'S' and tablename != 'SYSDUMMY1' order by tablename");
1: 		
1: 		boolean nonEmptyResultSet = false;
1: 		while(rs.next()) {
1: 			nonEmptyResultSet = true;
1: 			assertEquals(rs.getInt(2), 1);
1: 		}
1: 		
1: 		assertTrue(nonEmptyResultSet);
1: 		rs.close();
1: 		s.close();
1: 	}
1: }
1: 
1: 
============================================================================