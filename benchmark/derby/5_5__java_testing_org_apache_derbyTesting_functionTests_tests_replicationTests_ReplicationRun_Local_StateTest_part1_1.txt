1:40a554b: /*
1:84fa650:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1
1:84fa650:  
1:40a554b: Licensed to the Apache Software Foundation (ASF) under one or more
1:40a554b: contributor license agreements.  See the NOTICE file distributed with
1:40a554b: this work for additional information regarding copyright ownership.
1:40a554b: The ASF licenses this file to You under the Apache License, Version 2.0
1:40a554b: (the "License"); you may not use this file except in compliance with
1:40a554b: the License.  You may obtain a copy of the License at
1:84fa650:  
1:40a554b:    http://www.apache.org/licenses/LICENSE-2.0
1:84fa650:  
1:40a554b: Unless required by applicable law or agreed to in writing, software
1:40a554b: distributed under the License is distributed on an "AS IS" BASIS,
1:40a554b: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a554b: See the License for the specific language governing permissions and
1:40a554b: limitations under the License.
1:84fa650:  
1:40a554b:  */
1:40a554b: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:84fa650: 
1:40a554b: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:40a554b: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:84fa650: 
1:84fa650: 
1:40a554b: /**
1:40a554b:  * Run a replication test on localhost
1:40a554b:  * by using default values for master and slave hosts,
1:40a554b:  * and master and slave ports.
1:40a554b:  * 
1:40a554b:  */
18:40a554b: 
1:40a554b: public class ReplicationRun_Local_StateTest_part1_1 extends ReplicationRun
10:40a554b: {
1:8c9d41e:     final static String REPLICATION_DB_NOT_BOOTED              = "XRE11";
1:8c9d41e:     final static String REPLICATION_NOT_IN_SLAVE_MODE          = "XRE40";
1:8c9d41e:     final static String SLAVE_OPERATION_DENIED_WHILE_CONNECTED = "XRE41";
1:84fa650:     final static String REPLICATION_SLAVE_SHUTDOWN_OK          = "XRE42";
1:8c9d41e: 
1:40a554b:     /**
1:40a554b:      * Creates a new instance of ReplicationRun_Local_StateTest_part1
1:40a554b:      * 
1:40a554b:      * @param testcaseName Identifying the test.
1:40a554b:      */
1:40a554b:     public ReplicationRun_Local_StateTest_part1_1(String testcaseName)
1:40a554b:     {
1:40a554b:         super(testcaseName);
1:84fa650:     }
1:84fa650:         
1:40a554b:     public static Test suite()
1:40a554b:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_StateTest_part1_1 Suite");
1:dbe5dc3:         
1:40a554b:         suite.addTestSuite( ReplicationRun_Local_StateTest_part1_1.class );
1:40a554b:         
1:40a554b:         return SecurityManagerSetup.noSecurityManager(suite);
1:84fa650:     }
1:40a554b:     
1:40a554b:     //////////////////////////////////////////////////////////////
1:40a554b:     ////
1:40a554b:     //// The replication test framework (testReplication()):
1:40a554b:     //// a) "clean" replication run starting master and slave servers,
1:40a554b:     ////     preparing master and slave databases,
1:40a554b:     ////     starting and stopping replication and doing
1:40a554b:     ////     failover for a "normal"/"failure free" replication
1:40a554b:     ////     test run.
1:40a554b:     ////
1:40a554b:     //////////////////////////////////////////////////////////////
1:40a554b:     
1:40a554b:     public void testReplication_Local_StateTest_part1_1()
1:40a554b:     throws Exception
1:40a554b:     {
1:40a554b:         cleanAllTestHosts();
1:40a554b:         
1:40a554b:         initEnvironment();
1:40a554b:         
1:40a554b:        initMaster(masterServerHost,
1:40a554b:                 replicatedDb);
1:40a554b:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:40a554b:                 masterServerHost,
1:40a554b:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:40a554b:                 masterServerPort,
1:dbe5dc3:                 masterDbSubPath); // Distinguishing master/slave
1:40a554b:                 
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:40a554b:                 slaveServerHost,
1:40a554b:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:40a554b:                 slaveServerPort,
1:dbe5dc3:                 slaveDbSubPath); // Distinguishing master/slave
1:40a554b:         
1:40a554b:         startServerMonitor(slaveServerHost);
1:40a554b:         
1:40a554b:         bootMasterDatabase(jvmVersion,
1:40a554b:                 masterDatabasePath +FS+ masterDbSubPath,
1:40a554b:                 replicatedDb,
1:40a554b:                 masterServerHost, // Where the startreplication command must be given
1:40a554b:                 masterServerPort, // master server interface accepting client requests
1:40a554b:                 null // bootLoad, // The "test" to start when booting db.
1:40a554b:                 );
1:40a554b:                 
1:40a554b:         initSlave(slaveServerHost,
1:40a554b:                 jvmVersion,
1:40a554b:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:40a554b:                 
1:40a554b:         startSlave(jvmVersion, replicatedDb,
1:40a554b:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:40a554b:                 slaveServerPort,
1:40a554b:                 slaveServerHost, // for slaveReplInterface
1:40a554b:                 slaveReplPort,
1:40a554b:                 testClientHost);
1:40a554b:                 
1:40a554b:         // With master started above, next will fail! 
1:40a554b:         // Also seems failover will fail w/XRE21!
1:40a554b:         // Further testing: skipping next startMaster seems to 
1:40a554b:         // NOT remove failover failure!
1:40a554b:         /* TEMP: should be operational already - try skipping this. */
1:40a554b:         startMaster(jvmVersion, replicatedDb,
1:40a554b:                 masterServerHost, // Where the startMaster command must be given
1:40a554b:                 masterServerPort, // master server interface accepting client requests
1:40a554b:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:40a554b:                 slaveServerPort, // Not used since slave don't allow clients.
1:40a554b:                 slaveServerHost, // for slaveReplInterface
1:40a554b:                 slaveReplPort);
1:40a554b:          /* */
1:40a554b:         
1:40a554b: 
1:40a554b:         _testPostStartedMasterAndSlave_StopSlave(); // Not in a state to continue.
1:40a554b:                 
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:f910400:                 slaveServerHost, slaveServerPort);
1:40a554b:         
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:40a554b:                 masterServerHost, masterServerPort);
1:40a554b:         
12:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPostStartedMasterAndSlave_StopSlave()
1:dfbf41e:             throws Exception
1:40a554b:     {
1:40a554b:         // 1. stopSlave to slave with connection to master should fail.
1:dfbf41e:         util.DEBUG("1. testPostStartedMasterAndSlave_StopSlave");
1:dfbf41e: 
1:dfbf41e:         assertException(
1:dfbf41e:             stopSlave(slaveServerHost,
1:dfbf41e:                       slaveServerPort,
1:dfbf41e:                       slaveDatabasePath,
1:dfbf41e:                       replicatedDb,
1:dfbf41e:                       true),
1:dfbf41e:             SLAVE_OPERATION_DENIED_WHILE_CONNECTED);
1:dfbf41e: 
1:40a554b:         // Default replication test sequence still OK.
1:dfbf41e: 
1:40a554b:         // 2. stopSlave to a master server should fail:
1:dfbf41e:         util.DEBUG("2. testPostStartedMasterAndSlave_StopSlave");
1:dfbf41e: 
1:dfbf41e:         assertException(
1:dfbf41e:             stopSlave(masterServerHost,
1:dfbf41e:                       masterServerPort,
1:dfbf41e:                       masterDatabasePath,
1:dfbf41e:                       masterDbSubPath,
1:dfbf41e:                       replicatedDb,
1:dfbf41e:                       true),
1:dfbf41e:             REPLICATION_NOT_IN_SLAVE_MODE);
1:dfbf41e: 
1:40a554b:         // Default replication test sequence still OK.
1:dfbf41e: 
1:40a554b:         // Replication should still be up.
1:dfbf41e: 
1:40a554b:         // Take down master - slave connection:
1:40a554b:         killMaster(masterServerHost, masterServerPort);
1:dfbf41e: 
1:56c419e:         // 3.  stopSlave on slave should now result in an exception stating that
1:56c419e:         //     the slave database has been shutdown. A master shutdown results
1:56c419e:         //     in a behaviour that is similar to what happens when a stopMaster
1:56c419e:         //     is called.
1:dfbf41e:         util.DEBUG("3. testPostStartedMasterAndSlave_StopSlave");
1:40a554b: 
1:dfbf41e:         stopSlave(slaveServerHost,
1:dfbf41e:                   slaveServerPort,
1:dfbf41e:                   slaveDatabasePath,
1:dfbf41e:                   replicatedDb,
1:dfbf41e:                   false); // master server is dead
1:40a554b: 
1:40a554b:         // Default replication test sequence will NOT be OK after this point.
1:dfbf41e: 
1:dfbf41e:         // 4. Try a normal connection:
1:dfbf41e:         String db = slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb;
1:dfbf41e: 
1:dfbf41e:         String connectionURL = "jdbc:derby:"
1:dfbf41e:             + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:dfbf41e:             + db;
1:dfbf41e: 
1:dfbf41e:         util.DEBUG("4. testPostStartedMasterAndSlave_StopSlave: " +
1:dfbf41e:                    connectionURL);
1:dfbf41e: 
1:e94357a:         waitForConnect(100L, 10, db, slaveServerHost, slaveServerPort);
1:40a554b:     }
1:40a554b: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e94357a
/////////////////////////////////////////////////////////////////////////
1:         waitForConnect(100L, 10, db, slaveServerHost, slaveServerPort);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_StateTest_part1_1 Suite");
commit:dfbf41e
/////////////////////////////////////////////////////////////////////////
1:             throws Exception
1:         util.DEBUG("1. testPostStartedMasterAndSlave_StopSlave");
1: 
1:         assertException(
1:             stopSlave(slaveServerHost,
1:                       slaveServerPort,
1:                       slaveDatabasePath,
1:                       replicatedDb,
1:                       true),
1:             SLAVE_OPERATION_DENIED_WHILE_CONNECTED);
1: 
1: 
1:         util.DEBUG("2. testPostStartedMasterAndSlave_StopSlave");
1: 
1:         assertException(
1:             stopSlave(masterServerHost,
1:                       masterServerPort,
1:                       masterDatabasePath,
1:                       masterDbSubPath,
1:                       replicatedDb,
1:                       true),
1:             REPLICATION_NOT_IN_SLAVE_MODE);
1: 
1: 
1: 
1: 
1:         util.DEBUG("3. testPostStartedMasterAndSlave_StopSlave");
1:         stopSlave(slaveServerHost,
1:                   slaveServerPort,
1:                   slaveDatabasePath,
1:                   replicatedDb,
1:                   false); // master server is dead
1:         // 4. Try a normal connection:
1:         String db = slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb;
1: 
1:         String connectionURL = "jdbc:derby:"
1:             + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:             + db;
1: 
1:         util.DEBUG("4. testPostStartedMasterAndSlave_StopSlave: " +
1:                    connectionURL);
1: 
0:         try {
0:             DriverManager.getConnection(connectionURL).close();
0:             util.DEBUG("4. Connected as expected: " + connectionURL);
1: 
0:         } catch (SQLException se) {
0:             int ec = se.getErrorCode();
0:             String ss = se.getSQLState();
0:             String msg = ec + " " + ss + " " + se.getMessage();
0:             util.DEBUG("4. Unexpectedly failed to connect: " +
0:                        connectionURL +  " " + msg);
0:             assertTrue("Unexpectedly failed to connect: " +
0:                        connectionURL +  " " + msg, false);
commit:84fa650
/////////////////////////////////////////////////////////////////////////
1:     final static String REPLICATION_SLAVE_SHUTDOWN_OK          = "XRE42";
/////////////////////////////////////////////////////////////////////////
0:             throws InterruptedException, SQLException
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         // We use a loop below, to allow for intermediate states before the
0:         // expected final state.
0:         //
0:         // If we get here quick enough we see these error states (in order):
0:         //     a) SLAVE_OPERATION_DENIED_WHILE_CONNECTED
0:         //     b) REPLICATION_SLAVE_SHUTDOWN_OK
0:         //
0:         // The final end state is expected to be REPLICATION_DB_NOT_BOOTED.
0:         //
0:         SQLException gotEx = null;
0:         int tries = 20;
1: 
0:         while (tries-- > 0) {
0:             gotEx = null;
1: 
0:             try {
0:                 // From anywhere against slaveServerHost?
0:                 conn = DriverManager.getConnection(connectionURL); 
0:                 util.DEBUG("Unexpectedly connected: " + connectionURL);
0:                 assertTrue("Unexpectedly connected: " + connectionURL,false);
1: 
0:             } catch (SQLException se) {
0:                 if (se.getSQLState().
0:                         equals(SLAVE_OPERATION_DENIED_WHILE_CONNECTED)) {
0:                     // Try again, shutdown did not complete yet..
0:                     gotEx = se;
0:                     util.DEBUG
0:                         ("got SLAVE_OPERATION_DENIED_WHILE_CONNECTED, sleep");
0:                     Thread.sleep(1000L);
0:                     continue;
1: 
0:                 } else if (se.getSQLState().
0:                                equals(REPLICATION_SLAVE_SHUTDOWN_OK)) {
0:                     // Try again, shutdown started but did not complete yet.
0:                     gotEx = se;
0:                     util.DEBUG("got REPLICATION_SLAVE_SHUTDOWN_OK, sleep..");
0:                     Thread.sleep(1000L);
0:                     continue;
1: 
0:                 } else if (se.getSQLState().equals(REPLICATION_DB_NOT_BOOTED)) {
0:                     // All is fine, so proceed
0:                     util.DEBUG("Got REPLICATION_DB_NOT_BOOTED as expected");
0:                     stopSlaveCorrect = true;
0:                     break;
1: 
0:                 } else {
0:                     // Something else, so report.
0:                     gotEx = se;
0:                     break;
1:                 }
1:             }
1: 
0:         if (gotEx != null) {
0:             // We did not get what we expected as the final state
0:             // (REPLICATION_DB_NOT_BOOTED) in reasonable time, or we saw
0:             // something that is not a legal intermediate state, so we fail
0:             // now:
0:             throw gotEx;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:8c9d41e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1:     final static String REPLICATION_DB_NOT_BOOTED              = "XRE11";
1:     final static String REPLICATION_NOT_IN_SLAVE_MODE          = "XRE40";
1:     final static String SLAVE_OPERATION_DENIED_WHILE_CONNECTED = "XRE41";
1: 
/////////////////////////////////////////////////////////////////////////
0:             BaseJDBCTestCase.assertSQLState(
0:                 connectionURL + " failed: ",
0:                 SLAVE_OPERATION_DENIED_WHILE_CONNECTED,
0:                 se);
/////////////////////////////////////////////////////////////////////////
0:             BaseJDBCTestCase.assertSQLState(
0:                 connectionURL + " failed: ",
0:                 REPLICATION_NOT_IN_SLAVE_MODE,
0:                 se);
/////////////////////////////////////////////////////////////////////////
0:                        REPLICATION_DB_NOT_BOOTED);
0:             BaseJDBCTestCase.assertSQLState(
0:                 connectionURL + " failed: ",
0:                 REPLICATION_DB_NOT_BOOTED, 
0:                 se);
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Ole Solberg
-------------------------------------------------------------------------------
commit:f910400
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         waitForConnect(100L, 10, 
0:                 slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:                 slaveServerHost, slaveServerPort);
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:56c419e
/////////////////////////////////////////////////////////////////////////
1:         // 3.  stopSlave on slave should now result in an exception stating that
1:         //     the slave database has been shutdown. A master shutdown results
1:         //     in a behaviour that is similar to what happens when a stopMaster
1:         //     is called.
/////////////////////////////////////////////////////////////////////////
0:             util.DEBUG("3. Got "+msg + " Expected: " + 
0:                     SQLState.REPLICATION_DB_NOT_BOOTED);
0:                     SQLState.REPLICATION_DB_NOT_BOOTED.equals(ss));
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
1:                 masterDbSubPath); // Distinguishing master/slave
1:                 slaveDbSubPath); // Distinguishing master/slave
/////////////////////////////////////////////////////////////////////////
0:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
0:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
0:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
0:             util.DEBUG("3. Got "+msg + " Expected: " + SQLState.REPLICATION_SLAVE_SHUTDOWN_OK);
0:             assertTrue(connectionURL + " failed: " + msg, 
1:         
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.shared.common.reference.SQLState;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_StateTest_part1_1 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local_StateTest_part1
1:      * 
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_StateTest_part1_1(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:         
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_StateTest_part1_1 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_StateTest_part1_1.class );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1:     }
1:     
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
1:     public void testReplication_Local_StateTest_part1_1()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:        initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
0:                 masterDatabasePath +FS+ masterDbSubPath); // Distinguishing master/slave
1:                 
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:                 slaveServerPort,
0:                 slaveDatabasePath +FS+ slaveDbSubPath); // Distinguishing master/slave
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost, // Where the startreplication command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:                 
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:                 
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:                 slaveServerPort,
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort,
1:                 testClientHost);
1:                 
1:         // With master started above, next will fail! 
1:         // Also seems failover will fail w/XRE21!
1:         // Further testing: skipping next startMaster seems to 
1:         // NOT remove failover failure!
1:         /* TEMP: should be operational already - try skipping this. */
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, // Where the startMaster command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:                 slaveServerPort, // Not used since slave don't allow clients.
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort);
1:          /* */
1:         
1: 
1:         _testPostStartedMasterAndSlave_StopSlave(); // Not in a state to continue.
1:                 
1:         stopServer(jvmVersion, derbyVersion,
0:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1: 
1:     private void _testPostStartedMasterAndSlave_StopSlave()
0:     throws InterruptedException
1:     {
0:         String db = null;
0:         String connectionURL = null;  
0:         Connection conn = null;
1:         
1:         // 1. stopSlave to slave with connection to master should fail.
0:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
0:         connectionURL = "jdbc:derby:"  
0:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
0:                 + db
0:                 + ";stopSlave=true";
0:         util.DEBUG("1. testPostStartedMasterAndSlave_StopSlave: " + connectionURL);
0:         try
1:         {
0:             conn = DriverManager.getConnection(connectionURL);
0:             util.DEBUG("Unexpectdly connected as: " + connectionURL);
0:             assertTrue("Unexpectedly connected: " + connectionURL,false);
1:         }
0:         catch (SQLException se)
1:         {
0:             int ec = se.getErrorCode();
0:             String ss = se.getSQLState();
0:             String msg = ec + " " + ss + " " + se.getMessage();
0:             assertTrue("connectionURL +  failed: " + msg, 
0:                     SQLState.SLAVE_OPERATION_DENIED_WHILE_CONNECTED.equals(ss));
0:             util.DEBUG("1. Failed as expected: " + connectionURL +  " " + msg);
1:         }
1:         // Default replication test sequence still OK.
1:         
1:         // 2. stopSlave to a master server should fail:
0:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
0:         connectionURL = "jdbc:derby:"  
0:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
0:                 + db
0:                 + ";stopSlave=true";
0:         util.DEBUG("2. testPostStartedMasterAndSlave_StopSlave: " + connectionURL);
0:         try
1:         {
0:             conn = DriverManager.getConnection(connectionURL); // From anywhere against slaveServerHost?
0:             util.DEBUG("Unexpectdly connected as: " + connectionURL);
0:             // DERBY-???? - assertTrue("Unexpectedly connected: " + connectionURL,false);
1:        }
0:         catch (SQLException se)
1:         {
0:             int ec = se.getErrorCode();
0:             String ss = se.getSQLState();
0:             String msg = ec + " " + ss + " " + se.getMessage();
0:             // SSQLCODE: -1, SQLSTATE: XRE40
0:             assertTrue("connectionURL +  failed: " + msg, 
0:                     SQLState.REPLICATION_NOT_IN_SLAVE_MODE.equals(ss));
0:             util.DEBUG("2. Failed as expected: " + connectionURL +  " " + msg);
1:         }
1:         // Default replication test sequence still OK.
1:         
1:         // Replication should still be up.
1:         
1:         // Take down master - slave connection:
1:         killMaster(masterServerHost, masterServerPort);
0:         Thread.sleep(5000L); // TEMPORARY to see if slave sees that master is gone!
1:         
0:         // 3.  stopSlave on slave should now be allowed. Observe that the database shall be shutdown.
0:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
0:         connectionURL = "jdbc:derby:"  
0:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
0:                 + db
0:                 + ";stopSlave=true";
0:         boolean stopSlaveCorrect = false;
0:         util.DEBUG("3. testPostStartedMasterAndSlave_StopSlave: " + connectionURL);
0:         try
1:         {
0:             conn = DriverManager.getConnection(connectionURL); // From anywhere against slaveServerHost?
0:             util.DEBUG("Unexpectedly connected: " + connectionURL);
0:             assertTrue("Unexpectedly connected: " + connectionURL,false);
1:         }
0:         catch (SQLException se)
1:         {
0:             int ec = se.getErrorCode();
0:             String ss = se.getSQLState();
0:             String msg = ec + " " + ss + " " + se.getMessage();
0:             assertTrue("connectionURL +  failed: " + msg, 
0:                     SQLState.REPLICATION_SLAVE_SHUTDOWN_OK.equals(ss));
0:             util.DEBUG("3. Failed as expected: " + connectionURL +  " " + msg);
0:             stopSlaveCorrect = true;
1:         }
1:         // Default replication test sequence will NOT be OK after this point.
1:         
0:         if ( stopSlaveCorrect )
1:         {
0:             // 4. Try a normal connection:
0:             connectionURL = "jdbc:derby:"
0:                     + "//" + slaveServerHost + ":" + slaveServerPort + "/"
0:                     + db;
0:             util.DEBUG("4. testPostStartedMasterAndSlave_StopSlave: " + connectionURL);
0:             Thread.sleep(5000L); // TEMP FIX! To avoid 40000 08004 The connection was refused because the database ..../wombat was not found!
0:             try
1:             {
0:                 conn = DriverManager.getConnection(connectionURL);
0:                 util.DEBUG("4. Connected as expected: " + connectionURL);
1:             }
0:             catch (SQLException se)
1:             {
0:                 int ec = se.getErrorCode();
0:                 String ss = se.getSQLState();
0:                 String msg = ec + " " + ss + " " + se.getMessage();
0:                 util.DEBUG("4. Unexpectedly failed to connect: " + connectionURL +  " " + msg);
0:                 assertTrue("Unexpectedly failed to connect: " + connectionURL +  " " + msg, false);
0:                 // CURRENTLY FAILS W/ 40000 08004 The connection was refused because the database /home/os136789/Replication/testing/db_slave/wombat was not found.
1:             }
1:         }
1:     }
1: 
1:     
1: }
============================================================================