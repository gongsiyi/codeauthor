1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.ConglomerateFactory
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.conglomerate;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:888d12e: import org.apache.derby.iapi.store.access.AccessFactory;
1:eac0369: import org.apache.derby.iapi.store.access.ColumnOrdering;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:888d12e: import org.apache.derby.iapi.store.raw.PageKey;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   The factory interface for all conglomerate access methods.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface ConglomerateFactory extends MethodFactory
1:eac0369: {
1:eac0369: 
1:eac0369:     static final int    HEAP_FACTORY_ID     = 0x00;
1:eac0369:     static final int    BTREE_FACTORY_ID    = 0x01;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the conglomerate factory id.
1:eac0369:      * <p>
1:eac0369:      * Return a number in the range of 0-15 which identifies this factory.
1:eac0369:      * Code which names conglomerates depends on this range currently, but
1:eac0369:      * could be easily changed to handle larger ranges.   One hex digit seemed
1:eac0369:      * reasonable for the number of conglomerate types currently implemented
1:c6892a1:      * (heap, btree) and those that might be implemented in the future: gist,
1:eac0369:      * gist btree, gist rtree, hash, others? ).
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return an unique identifier used to the factory into the conglomid.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     int getConglomerateFactoryId();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Create the conglomerate and return a conglomerate object
1:eac0369: 	for it.  It is expected that the caller of this method will place the
1:eac0369:     the resulting object in the conglomerate directory.
1:eac0369: 
1:eac0369:     @param xact_mgr             transaction to perform the create in.
1:eac0369:     @param segment              segment to create the conglomerate in.
1:eac0369:     @param input_containerid    containerid to assign the container, or 
1:eac0369:                                 ContainerHandle.DEFAULT_ASSIGN_ID if you want
1:eac0369:                                 raw store to assign an id.
1:eac0369:     @param template             Template of row in the conglomerate.
1:eac0369: 	@param columnOrder          columns sort order for Index creation
1:b61f876:     @param collationIds         collation ids of columns in the conglomerate.
1:eac0369:     @param properties           Properties associated with the conglomerate.
1:eac0369: 
1:eac0369:  	@exception StandardException if the conglomerate could not be
1:eac0369: 	opened for some reason, or if an error occurred in one of
1:eac0369: 	the lower level modules.
1:eac0369: 	**/
1:eac0369: 	Conglomerate createConglomerate(
1:eac0369:     TransactionManager      xact_mgr,
1:eac0369:     int                     segment,
1:eac0369:     long                    input_containerid,
1:eac0369:     DataValueDescriptor[]   template,
1:eac0369: 	ColumnOrdering[]		columnOrder,
1:b61f876:     int[]                   collationIds,
1:eac0369:     Properties              properties,
1:eac0369: 	int						temporaryFlag)
1:eac0369:             throws StandardException;
1:eac0369:     /**
1:eac0369:      * Return Conglomerate object for conglomerate with container_key.
1:eac0369:      * <p>
1:eac0369:      * Return the Conglomerate Object.  This is implementation specific.
1:eac0369:      * Examples of what will be done is using the key to find the file where
1:eac0369:      * the conglomerate is located, and then executing implementation specific
1:eac0369:      * code to instantiate an object from reading a "special" row from a
1:eac0369:      * known location in the file.  In the btree case the btree conglomerate
1:eac0369:      * is stored as a column in the control row on the root page.
1:eac0369:      * <p>
1:eac0369:      * This operation is costly so it is likely an implementation using this
1:eac0369:      * will cache the conglomerate row in memory so that subsequent accesses
1:eac0369:      * need not perform this operation.
1:eac0369:      *
1:eac0369:      * @param xact_mgr      transaction to perform the create in.
1:eac0369:      * @param container_key The unique id of the existing conglomerate.
1:eac0369:      *
1:eac0369: 	 * @return An instance of the conglomerate.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     Conglomerate readConglomerate(
1:eac0369:     TransactionManager      xact_mgr,
1:eac0369:     ContainerKey            container_key)
1:eac0369: 		throws StandardException;
1:888d12e: 
1:888d12e: 
1:888d12e:     /**
1:888d12e:      * Interface to be called when an undo of an insert is processed.
1:888d12e:      * <p>
1:888d12e:      * Implementer of this class provides interface to be called by the raw
1:888d12e:      * store when an undo of an insert is processed.  Initial implementation
1:888d12e:      * will be by Access layer to queue space reclaiming events if necessary
1:888d12e:      * when a rows is logically "deleted" as part of undo of the original
1:888d12e:      * insert.  This undo can happen a lot for many applications if they
1:888d12e:      * generate expected and handled duplicate key errors.
1:888d12e:      * <p>
1:888d12e:      * Caller may decide to call or not based on deleted row count of the
1:888d12e:      * page, or if overflow rows/columns are present.
1:888d12e:      *
1:888d12e:      *
1:888d12e:      * @param access_factory    current access_factory of the aborted insert.
1:888d12e:      * @param xact              transaction that is being backed out.
1:888d12e:      * @param page_key          page key of the aborted insert.
1:888d12e:      *
1:888d12e:      * @exception  StandardException  Standard exception policy.
1:888d12e:      **/
1:888d12e:     public void insertUndoNotify(
1:888d12e:     AccessFactory       access_factory,
1:888d12e:     Transaction         xact,
1:888d12e:     PageKey             page_key)
1:888d12e:         throws StandardException;
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:888d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.raw.PageKey;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Interface to be called when an undo of an insert is processed.
1:      * <p>
1:      * Implementer of this class provides interface to be called by the raw
1:      * store when an undo of an insert is processed.  Initial implementation
1:      * will be by Access layer to queue space reclaiming events if necessary
1:      * when a rows is logically "deleted" as part of undo of the original
1:      * insert.  This undo can happen a lot for many applications if they
1:      * generate expected and handled duplicate key errors.
1:      * <p>
1:      * Caller may decide to call or not based on deleted row count of the
1:      * page, or if overflow rows/columns are present.
1:      *
1:      *
1:      * @param access_factory    current access_factory of the aborted insert.
1:      * @param xact              transaction that is being backed out.
1:      * @param page_key          page key of the aborted insert.
1:      *
1:      * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void insertUndoNotify(
1:     AccessFactory       access_factory,
1:     Transaction         xact,
1:     PageKey             page_key)
1:         throws StandardException;
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1:     @param collationIds         collation ids of columns in the conglomerate.
/////////////////////////////////////////////////////////////////////////
1:     int[]                   collationIds,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c6892a1
/////////////////////////////////////////////////////////////////////////
1:      * (heap, btree) and those that might be implemented in the future: gist,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.ConglomerateFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.conglomerate;
1: 
1: import java.util.Properties;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.ColumnOrdering;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1: 
1:   The factory interface for all conglomerate access methods.
1: 
1: **/
1: 
1: public interface ConglomerateFactory extends MethodFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     static final int    HEAP_FACTORY_ID     = 0x00;
1:     static final int    BTREE_FACTORY_ID    = 0x01;
1: 
1: 
1:     /**
1:      * Return the conglomerate factory id.
1:      * <p>
1:      * Return a number in the range of 0-15 which identifies this factory.
1:      * Code which names conglomerates depends on this range currently, but
1:      * could be easily changed to handle larger ranges.   One hex digit seemed
1:      * reasonable for the number of conglomerate types currently implemented
0:      * (heap, btree) and those that might be implmented in the future: gist, 
1:      * gist btree, gist rtree, hash, others? ).
1:      * <p>
1:      *
1: 	 * @return an unique identifier used to the factory into the conglomid.
1:      *
1:      **/
1:     int getConglomerateFactoryId();
1: 
1: 	/**
1: 	Create the conglomerate and return a conglomerate object
1: 	for it.  It is expected that the caller of this method will place the
1:     the resulting object in the conglomerate directory.
1: 
1:     @param xact_mgr             transaction to perform the create in.
1:     @param segment              segment to create the conglomerate in.
1:     @param input_containerid    containerid to assign the container, or 
1:                                 ContainerHandle.DEFAULT_ASSIGN_ID if you want
1:                                 raw store to assign an id.
1:     @param template             Template of row in the conglomerate.
1: 	@param columnOrder          columns sort order for Index creation
1:     @param properties           Properties associated with the conglomerate.
1: 
1:  	@exception StandardException if the conglomerate could not be
1: 	opened for some reason, or if an error occurred in one of
1: 	the lower level modules.
1: 	**/
1: 	Conglomerate createConglomerate(
1:     TransactionManager      xact_mgr,
1:     int                     segment,
1:     long                    input_containerid,
1:     DataValueDescriptor[]   template,
1: 	ColumnOrdering[]		columnOrder,
1:     Properties              properties,
1: 	int						temporaryFlag)
1:             throws StandardException;
1:     /**
1:      * Return Conglomerate object for conglomerate with container_key.
1:      * <p>
1:      * Return the Conglomerate Object.  This is implementation specific.
1:      * Examples of what will be done is using the key to find the file where
1:      * the conglomerate is located, and then executing implementation specific
1:      * code to instantiate an object from reading a "special" row from a
1:      * known location in the file.  In the btree case the btree conglomerate
1:      * is stored as a column in the control row on the root page.
1:      * <p>
1:      * This operation is costly so it is likely an implementation using this
1:      * will cache the conglomerate row in memory so that subsequent accesses
1:      * need not perform this operation.
1:      *
1:      * @param xact_mgr      transaction to perform the create in.
1:      * @param container_key The unique id of the existing conglomerate.
1:      *
1: 	 * @return An instance of the conglomerate.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     Conglomerate readConglomerate(
1:     TransactionManager      xact_mgr,
1:     ContainerKey            container_key)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.conglomerate;
0: 
0: import java.util.Properties;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: /**
0: 
0:   The factory interface for all conglomerate access methods.
0: 
0: **/
0: 
0: public interface ConglomerateFactory extends MethodFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     static final int    HEAP_FACTORY_ID     = 0x00;
0:     static final int    BTREE_FACTORY_ID    = 0x01;
0: 
0: 
0:     /**
0:      * Return the conglomerate factory id.
0:      * <p>
0:      * Return a number in the range of 0-15 which identifies this factory.
0:      * Code which names conglomerates depends on this range currently, but
0:      * could be easily changed to handle larger ranges.   One hex digit seemed
0:      * reasonable for the number of conglomerate types currently implemented
0:      * (heap, btree) and those that might be implmented in the future: gist, 
0:      * gist btree, gist rtree, hash, others? ).
0:      * <p>
0:      *
0: 	 * @return an unique identifier used to the factory into the conglomid.
0:      *
0:      **/
0:     int getConglomerateFactoryId();
0: 
0: 	/**
0: 	Create the conglomerate and return a conglomerate object
0: 	for it.  It is expected that the caller of this method will place the
0:     the resulting object in the conglomerate directory.
0: 
0:     @param xact_mgr             transaction to perform the create in.
0:     @param segment              segment to create the conglomerate in.
0:     @param input_containerid    containerid to assign the container, or 
0:                                 ContainerHandle.DEFAULT_ASSIGN_ID if you want
0:                                 raw store to assign an id.
0:     @param template             Template of row in the conglomerate.
0: 	@param columnOrder          columns sort order for Index creation
0:     @param properties           Properties associated with the conglomerate.
0: 
0:  	@exception StandardException if the conglomerate could not be
0: 	opened for some reason, or if an error occurred in one of
0: 	the lower level modules.
0: 	**/
0: 	Conglomerate createConglomerate(
0:     TransactionManager      xact_mgr,
0:     int                     segment,
0:     long                    input_containerid,
0:     DataValueDescriptor[]   template,
0: 	ColumnOrdering[]		columnOrder,
0:     Properties              properties,
0: 	int						temporaryFlag)
0:             throws StandardException;
0:     /**
0:      * Return Conglomerate object for conglomerate with container_key.
0:      * <p>
0:      * Return the Conglomerate Object.  This is implementation specific.
0:      * Examples of what will be done is using the key to find the file where
0:      * the conglomerate is located, and then executing implementation specific
0:      * code to instantiate an object from reading a "special" row from a
0:      * known location in the file.  In the btree case the btree conglomerate
0:      * is stored as a column in the control row on the root page.
0:      * <p>
0:      * This operation is costly so it is likely an implementation using this
0:      * will cache the conglomerate row in memory so that subsequent accesses
0:      * need not perform this operation.
0:      *
0:      * @param xact_mgr      transaction to perform the create in.
0:      * @param container_key The unique id of the existing conglomerate.
0:      *
0: 	 * @return An instance of the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     Conglomerate readConglomerate(
0:     TransactionManager      xact_mgr,
0:     ContainerKey            container_key)
0: 		throws StandardException;
0: }
============================================================================