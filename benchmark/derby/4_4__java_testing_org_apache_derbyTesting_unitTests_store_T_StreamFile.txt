1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_StreamFile
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.impl.store.raw.data.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextManager;
1:2bc809f: import org.apache.derby.iapi.services.locks.*;
1:2bc809f: import org.apache.derby.iapi.services.property.PropertyUtil;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.io.Storable;
1:2bc809f: import org.apache.derby.iapi.services.io.FormatIdOutputStream;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.store.raw.*;
1:2bc809f: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:2bc809f: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.DataValueDescriptor;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.reference.Property;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:2bc809f: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:2bc809f: 
1:2bc809f: import java.io.*;
1:a0dbbd7: import java.security.PrivilegedAction;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:a0dbbd7: import java.security.AccessController;
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	An Impl unittest for rawstore data that is based on the stream file
1:2bc809f: */
1:2bc809f: 
1:2bc809f: public class T_StreamFile extends T_MultiThreadedIterations {
1:2bc809f: 
1:2bc809f: 	private static final String testService = "streamFileTest";
1:2bc809f: 
1:2bc809f: 	static final String REC_001 = "McLaren";
1:2bc809f: 	static final String REC_002 = "Ferrari";
1:2bc809f: 	static final String REC_003 = "Benetton";
1:2bc809f: 	static final String REC_004 = "Prost";
1:2bc809f: 	static final String REC_005 = "Tyrell";
1:2bc809f: 	static final String REC_006 = "Derby, Natscape, Goatscape, the popular names";
1:2bc809f: 	static final String REC_007 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
1:2bc809f: 
1:2bc809f: 	static final String SP1 = "savepoint1";
1:2bc809f: 	static final String SP2 = "savepoint2";
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	static RawStoreFactory	factory;
1:2bc809f: 	static LockFactory lf;
1:2bc809f: 	static long commonContainer = -1;
1:2bc809f: 
1:2bc809f: 	static boolean testRollback; // initialize in start
1:2bc809f: 	static final String TEST_ROLLBACK_OFF = "derby.RawStore.RollbackTestOff";
1:2bc809f: 
1:2bc809f: 	private static ContextService contextService;
1:2bc809f: 	private T_Util t_util;
1:2bc809f: 
1:2bc809f: 	public T_StreamFile() {
1:2bc809f: 		super();
2:2bc809f: 	}
1:a0dbbd7: 
1:a0dbbd7: 	/**
1:2bc809f: 	  @exception StandardException cannot startup the context service
1:2bc809f: 	 */
1:2bc809f: 	public void boot(boolean create, Properties startParams)
1:2bc809f: 		 throws StandardException {
1:2bc809f: 		super.boot(create, startParams);
1:a0dbbd7: 		contextService = getContextService();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Methods required by T_Generic
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	protected String getModuleToTestProtocolName() {
1:2bc809f: 		return RawStoreFactory.MODULE;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Run the tests
1:2bc809f: 
1:2bc809f: 		@exception T_Fail Unexpected behaviour from the API
1:2bc809f: 	 */
1:2bc809f: 	protected void setupTest() throws T_Fail {
1:2bc809f: 		String rollbackOff = PropertyUtil.getSystemProperty(TEST_ROLLBACK_OFF);
1:2bc809f: 		testRollback = !Boolean.valueOf(rollbackOff).booleanValue();
1:2bc809f: 
1:2bc809f: 		// don't automatic boot this service if it gets left around
1:2bc809f: 		if (startParams == null) {
1:2bc809f: 			startParams = new Properties();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1:2bc809f: 		// remove the service directory to ensure a clean run
1:2bc809f: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1:2bc809f: 
1:2bc809f: 		// see if we are testing encryption
1:2bc809f: 		startParams = T_Util.setEncryptionParam(startParams);
1:2bc809f: 
1:2bc809f: 		try {
1:56c1dc2: 			factory = (RawStoreFactory) createPersistentService(getModuleToTestProtocolName(),
1:2bc809f: 								testService, startParams);
1:2bc809f: 			if (factory == null) {
1:2bc809f: 				throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " service not started.");
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			lf = factory.getLockFactory();
1:2bc809f: 			if (lf == null) {
1:2bc809f: 				throw T_Fail.testFailMsg("LockFactory.MODULE not found");
1:2bc809f: 			}
1:2bc809f: 		} catch (StandardException mse) {
1:2bc809f: 			throw T_Fail.exceptionFail(mse);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		t_util = new T_Util(factory, lf, contextService);
1:2bc809f: 		commonContainer = commonContainer();
1:2bc809f: 
1:2bc809f: 		return;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * T_MultiThreadedIteration method
1:2bc809f: 	 *
1:2bc809f: 	 * @exception T_Fail Unexpected behaviour from the API
1:2bc809f: 	 */
1:2bc809f: 	protected void joinSetupTest() throws T_Fail {
1:2bc809f: 
1:2bc809f: 		T_Fail.T_ASSERT(factory != null, "raw store factory not setup ");
1:2bc809f: 		T_Fail.T_ASSERT(contextService != null, "Context service not setup ");
1:2bc809f: 		T_Fail.T_ASSERT(commonContainer != -1, "common container not setup ");
1:2bc809f: 
1:2bc809f: 		t_util = new T_Util(factory, lf, contextService);
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected T_MultiThreadedIterations newTestObject() {
1:2bc809f: 		return new T_StreamFile();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  run the test
1:2bc809f: 
1:2bc809f: 	  @exception T_Fail Unexpected behaviour from the API
1:2bc809f: 	*/
1:2bc809f: 	protected void runTestSet() throws T_Fail {
1:2bc809f: 
1:2bc809f: 		// get a utility helper
1:2bc809f: 
1:2bc809f: 		ContextManager cm1 = contextService.newContextManager();
1:2bc809f: 		contextService.setCurrentContextManager(cm1);
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 
1:2bc809f: 			// boundry case: 1 row, 13 columns, string types
1:2bc809f: 			SF001(1, 13, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// boundry case: 1 rows, 1 null column, string types
1:2bc809f: 			SF001(1, 1, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// boundry case: 1000 rows, 1 null column, string types
1:2bc809f: 			SF001(1000, 1, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// boundry case: 1000 rows, 2 column (first null, second not null), string types
1:2bc809f: 			SF001(1000, 2, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// boundry case: 500 rows, 9 columns (first & last column null), string types
1:2bc809f: 			SF001(500, 9, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// 500 rows, 13 column, string type
1:2bc809f: 			SF001(500, 13, T_RowSource.STRING_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// test error condition
1:2bc809f: 			SF001(1000, 2, T_RowSource.STRING_ROW_TYPE, true);
1:2bc809f: 
1:2bc809f: 			// The following test tests externalizable types, but we currently don't support it.
1:2bc809f: 			// do, don't run the test yet.
1:2bc809f: 			// 100 rows, 5 column, Integer object type
1:2bc809f: 			//SF001(100, 5, T_RowSource.INTEGER_ROW_TYPE, false);
1:2bc809f: 			// 100 rows, 1 column, Integer object type
1:2bc809f: 			//SF001(100, 1, T_RowSource.INTEGER_ROW_TYPE, false);
1:2bc809f: 
1:2bc809f: 			// SF002() tests are used to check performance of the stream file.
1:2bc809f: 			// no need to run them regularly.
1:2bc809f: 			//SF002(0);
1:2bc809f: 			//SF002(1);
1:2bc809f: 
1:2bc809f: 		} catch (StandardException se) {
1:2bc809f: 
1:4c5c16b:             //Assume database is not active. DERBY-4856 thread dump
1:4c5c16b:             cm1.cleanupOnError(se, false);
1:2bc809f: 			throw T_Fail.exceptionFail(se);
1:2bc809f: 		}
1:2bc809f: 		finally {
1:2bc809f: 			contextService.resetCurrentContextManager(cm1);
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * create a container that all threads can use
1:2bc809f: 	 */
1:2bc809f: 	private long commonContainer() throws T_Fail {
1:2bc809f: 
1:2bc809f: 		ContextManager cm1 = contextService.newContextManager();
1:2bc809f: 		contextService.setCurrentContextManager(cm1);
1:2bc809f: 		long cid;
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			Transaction t = t_util.t_startTransaction();
1:2bc809f: 			cid = t_util.t_addContainer(t, 0);
1:2bc809f: 			t_util.t_commit(t);
1:2bc809f: 			t.close();
1:2bc809f: 		}
1:2bc809f: 		catch (StandardException se) {
1:2bc809f: 
1:4c5c16b:             //Assume database is not active. DERBY-4856 thread dump
1:4c5c16b:             cm1.cleanupOnError(se, false);
1:2bc809f: 			throw T_Fail.exceptionFail(se);
1:2bc809f: 		}
1:2bc809f: 		finally {
1:2bc809f: 			contextService.resetCurrentContextManager(cm1);
1:2bc809f: 		}
1:2bc809f: 		return cid;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * create a stream container load with rowCount number of rows.
1:2bc809f: 	 * fetch it all back, and check to make sure all rows are correct.
1:2bc809f: 	 */
1:2bc809f: 	protected void SF001(int rowCount, int columnCount, int columnType, boolean forceAbort)
1:2bc809f: 		throws StandardException, T_Fail {
1:2bc809f: 
1:2bc809f: 		Transaction t = t_util.t_startTransaction();
1:2bc809f: 
1:2bc809f: 		int segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1:2bc809f: 		Properties properties = new Properties();
1:2bc809f: 		properties.put(RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER, "16384");
1:2bc809f:  
1:2bc809f: 		// create row source
1:2bc809f: 		T_RowSource testRowSource = null;
1:2bc809f: 		if (forceAbort)
1:2bc809f: 			testRowSource = new T_RowSource(rowCount, columnCount, columnType, forceAbort, t);
1:a0dbbd7: 		else
1:2bc809f: 			testRowSource = new T_RowSource(rowCount, columnCount, columnType, forceAbort, null);
1:2bc809f: 
1:2bc809f: 		long startms = System.currentTimeMillis();
1:2bc809f: 
1:2bc809f: 		long containerId = t.addAndLoadStreamContainer(segmentId, properties, testRowSource);
1:2bc809f: 
1:2bc809f: 		long endms = System.currentTimeMillis();
1:2bc809f: 		long time = endms - startms;
1:2bc809f: 		REPORT("SF001 - write: " + time + "ms");
1:2bc809f: 
1:2bc809f: 		// open the container, and start fetching...
1:2bc809f: 		StreamContainerHandle scHandle = 
1:2bc809f:             t.openStreamContainer(segmentId, containerId, false);
1:2bc809f: 
1:2bc809f: 		// set up the template row
1:2bc809f: 		DataValueDescriptor template[] = null;
1:2bc809f: 		template = testRowSource.getTemplate();
1:2bc809f: 
1:2bc809f: 		DataValueDescriptor readRow[] = null;
1:2bc809f: 		readRow = testRowSource.getTemplate();
1:2bc809f: 		segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1:2bc809f: 		int fetchCount = 0;
1:2bc809f: 		startms = System.currentTimeMillis();
1:2bc809f: 		while (scHandle.fetchNext(readRow)) {
1:2bc809f: 			fetchCount++;
1:2bc809f: 			// check to make sure the row is what we inserted.
1:2bc809f: 			// this depends on T_RowSource generate identical rows.
1:2bc809f: 			if (!readRow.toString().equals(template.toString()))
1:2bc809f: 				throw T_Fail.testFailMsg("Record's value incorrect, expected :"
1:2bc809f: 					+ template.toString() + ": - got :" + readRow.toString());
1:2bc809f: 		}
1:2bc809f: 		endms = System.currentTimeMillis();
1:2bc809f: 		time = endms - startms;
1:2bc809f: 		// check to make sure we got the right number of rows.
1:2bc809f: 		if (fetchCount != rowCount)
1:2bc809f: 			throw T_Fail.testFailMsg("incorrect number of row fetched.  Expecting " + rowCount
1:2bc809f: 				+ " rows, got " + fetchCount + ", rows instead.");
1:2bc809f: 		REPORT("SF001 - fetch: " + time + "ms");
1:2bc809f: 
1:2bc809f: 		scHandle.close();
1:2bc809f: 
1:2bc809f: 		t_util.t_commit(t);
1:2bc809f: 		t.close();
1:2bc809f: 
1:2bc809f: 		PASS("SF001, rowCount = " + rowCount + ", columnCount = " + columnCount + ", clumn type: " + columnType);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// this test test the rowSource over head.
1:2bc809f: 	// when param set to 1, also gets the overhead for writeExternal for Storables
1:2bc809f: 	protected void SF002(int param) throws StandardException, T_Fail {
1:2bc809f: 
1:2bc809f: 		T_RowSource rowSource = new T_RowSource(500000, 13, 2, false, null);
1:2bc809f: 
1:2bc809f: 		DynamicByteArrayOutputStream out = new DynamicByteArrayOutputStream(16384);
1:2bc809f: 		FormatIdOutputStream logicalDataOut = new FormatIdOutputStream(out);
1:2bc809f: 
1:2bc809f: 		long startms = System.currentTimeMillis();
1:2bc809f: 		System.out.println("starting rowSource test, time: " + startms);
1:2bc809f: 		try {
1:2bc809f: 
1:2bc809f: 			FormatableBitSet validColumns = rowSource.getValidColumns();
1:2bc809f: 
1:2bc809f: 			int numberFields = 0;
1:2bc809f: 			if (validColumns != null) {
1:2bc809f: 				for (int i = validColumns.size() - 1; i >= 0; i--) {
1:2bc809f: 					if (validColumns.get(i)) {
1:2bc809f: 						numberFields = i + 1;
1:2bc809f: 						break;
1:2bc809f: 					}
1:2bc809f: 				}
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			DataValueDescriptor[] row = rowSource.getNextRowFromRowSource();
1:2bc809f: 			while (row != null) {
1:2bc809f: 				if (SanityManager.DEBUG) {
1:2bc809f: 					SanityManager.ASSERT(row != null, 
1:2bc809f: 										 "RowSource returned null");
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				int arrayPosition = -1;
1:2bc809f: 				for (int i = 0; i < numberFields; i++) {
1:2bc809f: 					// write each column out
1:2bc809f: 					if (validColumns.get(i)) {
1:2bc809f: 						arrayPosition++;
1:2bc809f: 						DataValueDescriptor column = row[arrayPosition];
1:2bc809f: 
1:2bc809f: 						if (param == 1) {
1:2bc809f: 							try {
1:2bc809f: 								Storable sColumn = (Storable) column;
1:2bc809f: 								if (!sColumn.isNull()) {
1:2bc809f: 									sColumn.writeExternal(logicalDataOut);
1:2bc809f: 									out.reset();
1:2bc809f: 								}
1:2bc809f: 							} catch (IOException ioe) {
1:2bc809f: 								throw T_Fail.exceptionFail(ioe);
1:2bc809f: 							}
1:2bc809f: 						}
1:2bc809f: 
1:2bc809f: 					}
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				row = rowSource.getNextRowFromRowSource();
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 		} finally {
1:2bc809f: 
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		long endms = System.currentTimeMillis();
1:2bc809f: 		long time2 = endms - startms;
1:2bc809f: 		if (param != 1)
1:2bc809f: 			System.out.println("ended rowSource test, time: " + endms
1:2bc809f: 				+ ", time spent = " + time2);
2:2bc809f: 		else
1:2bc809f: 			System.out.println("------ writeExternal called....\n ended rowSource test, time: " + endms
1:2bc809f: 				+ ", time spent = " + time2);
1:2bc809f: 		
1:2bc809f: 		PASS("SF002");
1:2bc809f: 	}
1:2bc809f:     
1:2bc809f:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
3:a0dbbd7:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ContextService>()
1:56c1dc2:              {
1:56c1dc2:                  public ContextService run()
1:56c1dc2:                  {
1:56c1dc2:                      return ContextService.getFactory();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object createPersistentService( final String factoryInterface, final String serviceName, final Properties properties ) 
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:a0dbbd7:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:a0dbbd7:                      {
1:56c1dc2:                          return Monitor.createPersistentService( factoryInterface, serviceName, properties );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:a0dbbd7: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 			factory = (RawStoreFactory) createPersistentService(getModuleToTestProtocolName(),
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ContextService>()
1:              {
1:                  public ContextService run()
1:                  {
1:                      return ContextService.getFactory();
1:                  }
1:              }
1:              );
1:     }
1: 
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object createPersistentService( final String factoryInterface, final String serviceName, final Properties properties ) 
1:         throws StandardException
1:     {
1:         try {
1:                  new PrivilegedExceptionAction<Object>()
1:                      public Object run()
1:                          throws StandardException
1:                          return Monitor.createPersistentService( factoryInterface, serviceName, properties );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: 		contextService = getContextService();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
0:         if ( System.getSecurityManager() == null )
1:         {
0:             return ContextService.getFactory();
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
0:                  new PrivilegedAction<ContextService>()
1:                  {
0:                      public ContextService run()
1:                      {
0:                          return ContextService.getFactory();
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Lily Wei
-------------------------------------------------------------------------------
commit:4c5c16b
/////////////////////////////////////////////////////////////////////////
1:             //Assume database is not active. DERBY-4856 thread dump
1:             cm1.cleanupOnError(se, false);
/////////////////////////////////////////////////////////////////////////
1:             //Assume database is not active. DERBY-4856 thread dump
1:             cm1.cleanupOnError(se, false);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_StreamFile
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.impl.store.raw.data.*;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.locks.*;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.services.io.FormatIdOutputStream;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.*;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
1: import java.io.*;
1: import java.util.Properties;
1: 
1: /**
1: 	An Impl unittest for rawstore data that is based on the stream file
1: */
1: 
1: public class T_StreamFile extends T_MultiThreadedIterations {
1: 
1: 	private static final String testService = "streamFileTest";
1: 
1: 	static final String REC_001 = "McLaren";
1: 	static final String REC_002 = "Ferrari";
1: 	static final String REC_003 = "Benetton";
1: 	static final String REC_004 = "Prost";
1: 	static final String REC_005 = "Tyrell";
1: 	static final String REC_006 = "Derby, Natscape, Goatscape, the popular names";
1: 	static final String REC_007 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
1: 
1: 	static final String SP1 = "savepoint1";
1: 	static final String SP2 = "savepoint2";
1: 
1: 
1: 	static RawStoreFactory	factory;
1: 	static LockFactory lf;
1: 	static long commonContainer = -1;
1: 
1: 	static boolean testRollback; // initialize in start
1: 	static final String TEST_ROLLBACK_OFF = "derby.RawStore.RollbackTestOff";
1: 
1: 	private static ContextService contextService;
1: 	private T_Util t_util;
1: 
1: 	public T_StreamFile() {
1: 		super();
1: 	}
1: 
1: 	/**
1: 	  @exception StandardException cannot startup the context service
1: 	 */
1: 	public void boot(boolean create, Properties startParams)
1: 		 throws StandardException {
1: 		super.boot(create, startParams);
0: 		contextService = ContextService.getFactory();
1: 	}
1: 
1: 
1: 	/*
1: 	** Methods required by T_Generic
1: 	*/
1: 
1: 	protected String getModuleToTestProtocolName() {
1: 		return RawStoreFactory.MODULE;
1: 	}
1: 
1: 
1: 	/**
1: 		Run the tests
1: 
1: 		@exception T_Fail Unexpected behaviour from the API
1: 	 */
1: 	protected void setupTest() throws T_Fail {
1: 		String rollbackOff = PropertyUtil.getSystemProperty(TEST_ROLLBACK_OFF);
1: 		testRollback = !Boolean.valueOf(rollbackOff).booleanValue();
1: 
1: 		// don't automatic boot this service if it gets left around
1: 		if (startParams == null) {
1: 			startParams = new Properties();
1: 		}
1: 
1: 		startParams.put(Property.NO_AUTO_BOOT, Boolean.TRUE.toString());
1: 		// remove the service directory to ensure a clean run
1: 		startParams.put(Property.DELETE_ON_CREATE, Boolean.TRUE.toString());
1: 
1: 		// see if we are testing encryption
1: 		startParams = T_Util.setEncryptionParam(startParams);
1: 
1: 		try {
0: 			factory = (RawStoreFactory) Monitor.createPersistentService(getModuleToTestProtocolName(),
1: 								testService, startParams);
1: 			if (factory == null) {
1: 				throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " service not started.");
1: 			}
1: 
1: 			lf = factory.getLockFactory();
1: 			if (lf == null) {
1: 				throw T_Fail.testFailMsg("LockFactory.MODULE not found");
1: 			}
1: 		} catch (StandardException mse) {
1: 			throw T_Fail.exceptionFail(mse);
1: 		}
1: 
1: 		t_util = new T_Util(factory, lf, contextService);
1: 		commonContainer = commonContainer();
1: 
1: 		return;
1: 	}
1: 
1: 
1: 	/**
1: 	 * T_MultiThreadedIteration method
1: 	 *
1: 	 * @exception T_Fail Unexpected behaviour from the API
1: 	 */
1: 	protected void joinSetupTest() throws T_Fail {
1: 
1: 		T_Fail.T_ASSERT(factory != null, "raw store factory not setup ");
1: 		T_Fail.T_ASSERT(contextService != null, "Context service not setup ");
1: 		T_Fail.T_ASSERT(commonContainer != -1, "common container not setup ");
1: 
1: 		t_util = new T_Util(factory, lf, contextService);
1: 
1: 	}
1: 
1: 	protected T_MultiThreadedIterations newTestObject() {
1: 		return new T_StreamFile();
1: 	}
1: 
1: 	/**
1: 	  run the test
1: 
1: 	  @exception T_Fail Unexpected behaviour from the API
1: 	*/
1: 	protected void runTestSet() throws T_Fail {
1: 
1: 		// get a utility helper
1: 
1: 		ContextManager cm1 = contextService.newContextManager();
1: 		contextService.setCurrentContextManager(cm1);
1: 
1: 		try {
1: 
1: 			// boundry case: 1 row, 13 columns, string types
1: 			SF001(1, 13, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// boundry case: 1 rows, 1 null column, string types
1: 			SF001(1, 1, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// boundry case: 1000 rows, 1 null column, string types
1: 			SF001(1000, 1, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// boundry case: 1000 rows, 2 column (first null, second not null), string types
1: 			SF001(1000, 2, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// boundry case: 500 rows, 9 columns (first & last column null), string types
1: 			SF001(500, 9, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// 500 rows, 13 column, string type
1: 			SF001(500, 13, T_RowSource.STRING_ROW_TYPE, false);
1: 
1: 			// test error condition
1: 			SF001(1000, 2, T_RowSource.STRING_ROW_TYPE, true);
1: 
1: 			// The following test tests externalizable types, but we currently don't support it.
1: 			// do, don't run the test yet.
1: 			// 100 rows, 5 column, Integer object type
1: 			//SF001(100, 5, T_RowSource.INTEGER_ROW_TYPE, false);
1: 			// 100 rows, 1 column, Integer object type
1: 			//SF001(100, 1, T_RowSource.INTEGER_ROW_TYPE, false);
1: 
1: 			// SF002() tests are used to check performance of the stream file.
1: 			// no need to run them regularly.
1: 			//SF002(0);
1: 			//SF002(1);
1: 
1: 		} catch (StandardException se) {
1: 
0: 			cm1.cleanupOnError(se);
1: 			throw T_Fail.exceptionFail(se);
1: 		}
1: 		finally {
1: 			contextService.resetCurrentContextManager(cm1);
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * create a container that all threads can use
1: 	 */
1: 	private long commonContainer() throws T_Fail {
1: 
1: 		ContextManager cm1 = contextService.newContextManager();
1: 		contextService.setCurrentContextManager(cm1);
1: 		long cid;
1: 
1: 		try {
1: 			Transaction t = t_util.t_startTransaction();
1: 			cid = t_util.t_addContainer(t, 0);
1: 			t_util.t_commit(t);
1: 			t.close();
1: 		}
1: 		catch (StandardException se) {
1: 
0: 			cm1.cleanupOnError(se);
1: 			throw T_Fail.exceptionFail(se);
1: 		}
1: 		finally {
1: 			contextService.resetCurrentContextManager(cm1);
1: 		}
1: 		return cid;
1: 	}
1: 
1: 	/*
1: 	 * create a stream container load with rowCount number of rows.
1: 	 * fetch it all back, and check to make sure all rows are correct.
1: 	 */
1: 	protected void SF001(int rowCount, int columnCount, int columnType, boolean forceAbort)
1: 		throws StandardException, T_Fail {
1: 
1: 		Transaction t = t_util.t_startTransaction();
1: 
1: 		int segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1: 		Properties properties = new Properties();
1: 		properties.put(RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER, "16384");
1:  
1: 		// create row source
1: 		T_RowSource testRowSource = null;
1: 		if (forceAbort)
1: 			testRowSource = new T_RowSource(rowCount, columnCount, columnType, forceAbort, t);
1: 		else
1: 			testRowSource = new T_RowSource(rowCount, columnCount, columnType, forceAbort, null);
1: 
1: 		long startms = System.currentTimeMillis();
1: 
1: 		long containerId = t.addAndLoadStreamContainer(segmentId, properties, testRowSource);
1: 
1: 		long endms = System.currentTimeMillis();
1: 		long time = endms - startms;
1: 		REPORT("SF001 - write: " + time + "ms");
1: 
1: 		// open the container, and start fetching...
1: 		StreamContainerHandle scHandle = 
1:             t.openStreamContainer(segmentId, containerId, false);
1: 
1: 		// set up the template row
1: 		DataValueDescriptor template[] = null;
1: 		template = testRowSource.getTemplate();
1: 
1: 		DataValueDescriptor readRow[] = null;
1: 		readRow = testRowSource.getTemplate();
1: 		segmentId = StreamContainerHandle.TEMPORARY_SEGMENT;
1: 		int fetchCount = 0;
1: 		startms = System.currentTimeMillis();
1: 		while (scHandle.fetchNext(readRow)) {
1: 			fetchCount++;
1: 			// check to make sure the row is what we inserted.
1: 			// this depends on T_RowSource generate identical rows.
1: 			if (!readRow.toString().equals(template.toString()))
1: 				throw T_Fail.testFailMsg("Record's value incorrect, expected :"
1: 					+ template.toString() + ": - got :" + readRow.toString());
1: 		}
1: 		endms = System.currentTimeMillis();
1: 		time = endms - startms;
1: 		// check to make sure we got the right number of rows.
1: 		if (fetchCount != rowCount)
1: 			throw T_Fail.testFailMsg("incorrect number of row fetched.  Expecting " + rowCount
1: 				+ " rows, got " + fetchCount + ", rows instead.");
1: 		REPORT("SF001 - fetch: " + time + "ms");
1: 
1: 		scHandle.close();
1: 
1: 		t_util.t_commit(t);
1: 		t.close();
1: 
1: 		PASS("SF001, rowCount = " + rowCount + ", columnCount = " + columnCount + ", clumn type: " + columnType);
1: 	}
1: 
1: 	// this test test the rowSource over head.
1: 	// when param set to 1, also gets the overhead for writeExternal for Storables
1: 	protected void SF002(int param) throws StandardException, T_Fail {
1: 
1: 		T_RowSource rowSource = new T_RowSource(500000, 13, 2, false, null);
1: 
1: 		DynamicByteArrayOutputStream out = new DynamicByteArrayOutputStream(16384);
1: 		FormatIdOutputStream logicalDataOut = new FormatIdOutputStream(out);
1: 
1: 		long startms = System.currentTimeMillis();
1: 		System.out.println("starting rowSource test, time: " + startms);
1: 		try {
1: 
1: 			FormatableBitSet validColumns = rowSource.getValidColumns();
1: 
1: 			int numberFields = 0;
1: 			if (validColumns != null) {
1: 				for (int i = validColumns.size() - 1; i >= 0; i--) {
1: 					if (validColumns.get(i)) {
1: 						numberFields = i + 1;
1: 						break;
1: 					}
1: 				}
1: 			}
1: 
1: 			DataValueDescriptor[] row = rowSource.getNextRowFromRowSource();
1: 			while (row != null) {
1: 				if (SanityManager.DEBUG) {
1: 					SanityManager.ASSERT(row != null, 
1: 										 "RowSource returned null");
1: 				}
1: 
1: 				int arrayPosition = -1;
1: 				for (int i = 0; i < numberFields; i++) {
1: 					// write each column out
1: 					if (validColumns.get(i)) {
1: 						arrayPosition++;
1: 						DataValueDescriptor column = row[arrayPosition];
1: 
1: 						if (param == 1) {
1: 							try {
1: 								Storable sColumn = (Storable) column;
1: 								if (!sColumn.isNull()) {
1: 									sColumn.writeExternal(logicalDataOut);
1: 									out.reset();
1: 								}
1: 							} catch (IOException ioe) {
1: 								throw T_Fail.exceptionFail(ioe);
1: 							}
1: 						}
1: 
1: 					}
1: 				}
1: 
1: 				row = rowSource.getNextRowFromRowSource();
1: 			}
1: 
1: 		} finally {
1: 
1: 		}
1: 
1: 		long endms = System.currentTimeMillis();
1: 		long time2 = endms - startms;
1: 		if (param != 1)
1: 			System.out.println("ended rowSource test, time: " + endms
1: 				+ ", time spent = " + time2);
1: 		else
1: 			System.out.println("------ writeExternal called....\n ended rowSource test, time: " + endms
1: 				+ ", time spent = " + time2);
1: 		
1: 		PASS("SF002");
1: 	}
1: }
============================================================================