1:1812ea8: /*
1:1812ea8:  
1:1812ea8:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemProperties
1:1812ea8:  
1:1812ea8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1812ea8:    contributor license agreements.  See the NOTICE file distributed with
1:1812ea8:    this work for additional information regarding copyright ownership.
1:1812ea8:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1812ea8:    (the "License"); you may not use this file except in compliance with
1:1812ea8:    the License.  You may obtain a copy of the License at
1:1812ea8:  
1:1812ea8:       http://www.apache.org/licenses/LICENSE-2.0
1:1812ea8:  
1:1812ea8:    Unless required by applicable law or agreed to in writing, software
1:1812ea8:    distributed under the License is distributed on an "AS IS" BASIS,
1:1812ea8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1812ea8:    See the License for the specific language governing permissions and
1:1812ea8:    limitations under the License.
1:1812ea8:  
1:1812ea8:  */
1:1812ea8: 
1:1812ea8: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:1812ea8: 
1:1812ea8: import java.io.File;
1:1812ea8: import java.security.AccessController;
1:537fdab: import java.sql.Connection;
1:1812ea8: import java.util.Properties;
1:1812ea8: 
1:537fdab: import javax.sql.PooledConnection;
1:537fdab: import javax.sql.XAConnection;
1:537fdab: 
1:1812ea8: import junit.framework.Test;
1:1812ea8: 
1:1812ea8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:537fdab: import org.apache.derbyTesting.junit.J2EEDataSource;
1:537fdab: import org.apache.derbyTesting.junit.JDBCDataSource;
1:1812ea8: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:1812ea8: import org.apache.derbyTesting.junit.TestConfiguration;
1:1812ea8: 
1:1812ea8: /** The test of the jvm properties for enabling client side tracing(DERBY-1275)
1:1812ea8:   */
1:1812ea8: public class ClientSideSystemPropertiesTest extends BaseJDBCTestCase { 
1:1812ea8: 	/** Establish a connection and that should start client side tracing
1:1812ea8:      *  because we have set the system properties to enable client side
1:1812ea8:      *  tracing. */
1:1812ea8:     public void testConnection() throws Exception {
1:537fdab:         Connection conn = openDefaultConnection();
1:537fdab:         conn.setAutoCommit(false);
1:537fdab:         checkTraceFileIsPresent();
1:537fdab:         conn.rollback();
1:537fdab:         conn.close();
1:537fdab:     }
1:537fdab: 
1:537fdab:     public void testClientDataSourceConnection() throws Exception {
1:537fdab:        Connection conn = JDBCDataSource.getDataSource().getConnection();
1:537fdab:        conn.setAutoCommit(false);
1:537fdab:        checkTraceFileIsPresent();
1:537fdab:        conn.rollback();
1:537fdab:        conn.close();
1:537fdab:     }
1:537fdab:     
1:537fdab:     public void testClientCPDataSourceConnection() throws Exception {
1:537fdab:         PooledConnection pconn = J2EEDataSource.getConnectionPoolDataSource().
1:537fdab:                 getPooledConnection(); 
1:537fdab:         Connection conn = pconn.getConnection();
1:537fdab:         conn.setAutoCommit(false);
1:537fdab:         checkTraceFileIsPresent();
1:537fdab:         conn.rollback();
1:537fdab:         conn.close();
1:537fdab:         pconn.close();
1:537fdab:      }
1:537fdab: 
1:537fdab:     public void testClientXADataSourceConnection() throws Exception {
1:537fdab:         XAConnection xaconn = J2EEDataSource.getXADataSource().
1:537fdab:                 getXAConnection();
1:537fdab:         Connection conn = xaconn.getConnection();
1:537fdab:         conn.setAutoCommit(false);
1:537fdab:         checkTraceFileIsPresent();
1:537fdab:         conn.close();
1:537fdab:         xaconn.close();
1:537fdab:      }
1:537fdab: 
1:537fdab:     
1:537fdab:     private void checkTraceFileIsPresent() {
1:1812ea8:         //Make sure the connection above created a trace file. This check is 
1:1812ea8:         //made in the privilege block below by looking inside the 
1:1812ea8:         //trace Directory and making sure the file count is greater than 0.
2:1812ea8:         AccessController.doPrivileged
1:9d44c9e: 		    (new java.security.PrivilegedAction<Void>(){
1:9d44c9e: 		    	public Void run(){
2:1812ea8: 		    		File dir = new File(getSystemProperty("derby.client.traceDirectory"));
2:1812ea8: 		    		int fileCounter = 0;
2:1812ea8:     	            File[] list = dir.listFiles();
2:1812ea8:     	            File tempFile;
2:1812ea8:     	            for (;fileCounter<list.length; fileCounter++)
2:1812ea8:     	            	tempFile = list[fileCounter];
1:1812ea8:     	            junit.framework.Assert.assertTrue(fileCounter>0);
2:1812ea8:     	            return null;
4:1812ea8:     		    }
1:1812ea8:     		}	 
2:1812ea8:     	    );
1:1812ea8:     }
1:1812ea8:     
1:1812ea8:     /** If the trace Directory doesn't exist then create one. If there is one
1:1812ea8:      *  already there, then delete everything under it. */
1:1812ea8:     protected void setUp() throws Exception
2:1812ea8:     {
1:1812ea8:     	AccessController.doPrivileged(
1:9d44c9e:     			new java.security.PrivilegedAction<Void>(){
1:9d44c9e:     				public Void run(){
1:1812ea8:     					File dir = new File(getSystemProperty("derby.client.traceDirectory"));
1:1812ea8:     					if (dir.exists() == false) //create the trace Directory
1:040b128:     						junit.framework.Assert.assertTrue(dir.mkdir() || dir.mkdirs());
1:1812ea8:     					else {//cleanup the trace Directory which already exists
1:1812ea8:     						int fileCounter = 0;
1:1812ea8:     						File[] list = dir.listFiles();
1:1812ea8:     						File tempFile;
1:1812ea8:     						for (;fileCounter<list.length; fileCounter++) {
1:1812ea8:     							tempFile = list[fileCounter];
1:537fdab:     							assertTrue(tempFile.delete());
1:1812ea8:         					}
1:1812ea8: 		        }
1:1812ea8: 	            return null;
1:1812ea8: 		    }
1:1812ea8: 		}	 
1:1812ea8: 	    );
1:1812ea8:     }
1:1812ea8:     
1:1812ea8:     /** Delete the trace Directory so that the test environment is clean for the
1:1812ea8:      *  next test run. */
1:1812ea8:     protected void tearDown() throws Exception
1:1812ea8:     {
1:1812ea8:         super.tearDown();
1:26ed4f9:         
1:26ed4f9:         removeDirectory(getSystemProperty("derby.client.traceDirectory"));
1:1812ea8:     }
1:1812ea8:     
1:1812ea8:     /* ------------------- end helper methods  -------------------------- */
1:1812ea8:     public ClientSideSystemPropertiesTest(String name) {
1:1812ea8:         super(name);
1:1812ea8:     }
1:1812ea8: 
1:1812ea8:     /*
1:1812ea8:      * Set the system properties related to client side tracing.
1:1812ea8:      */
1:1812ea8:     public static Test suite() {
1:1812ea8:         //Create the traceDirectory required by the tests in this class
1:1812ea8:     	Properties traceRelatedProperties = new Properties();
1:1812ea8:         traceRelatedProperties.setProperty("derby.client.traceLevel", "64");
1:1812ea8:         traceRelatedProperties.setProperty("derby.client.traceDirectory", "TraceDir");
1:1812ea8:         Test suite = TestConfiguration.clientServerSuite(ClientSideSystemPropertiesTest.class);
1:1812ea8:         return new SystemPropertyTestSetup(suite, traceRelatedProperties); 
1:1812ea8:     }
1:1812ea8:     
1:1812ea8: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:537fdab
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import javax.sql.PooledConnection;
1: import javax.sql.XAConnection;
1: 
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = openDefaultConnection();
1:         conn.setAutoCommit(false);
1:         checkTraceFileIsPresent();
1:         conn.rollback();
1:         conn.close();
1:     }
1: 
1:     public void testClientDataSourceConnection() throws Exception {
1:        Connection conn = JDBCDataSource.getDataSource().getConnection();
1:        conn.setAutoCommit(false);
1:        checkTraceFileIsPresent();
1:        conn.rollback();
1:        conn.close();
1:     }
1:     
1:     public void testClientCPDataSourceConnection() throws Exception {
1:         PooledConnection pconn = J2EEDataSource.getConnectionPoolDataSource().
1:                 getPooledConnection(); 
1:         Connection conn = pconn.getConnection();
1:         conn.setAutoCommit(false);
1:         checkTraceFileIsPresent();
1:         conn.rollback();
1:         conn.close();
1:         pconn.close();
1:      }
1: 
1:     public void testClientXADataSourceConnection() throws Exception {
1:         XAConnection xaconn = J2EEDataSource.getXADataSource().
1:                 getXAConnection();
1:         Connection conn = xaconn.getConnection();
1:         conn.setAutoCommit(false);
1:         checkTraceFileIsPresent();
1:         conn.close();
1:         xaconn.close();
1:      }
1: 
1:     
1:     private void checkTraceFileIsPresent() {
/////////////////////////////////////////////////////////////////////////
1:     							assertTrue(tempFile.delete());
commit:040b128
/////////////////////////////////////////////////////////////////////////
1:     						junit.framework.Assert.assertTrue(dir.mkdir() || dir.mkdirs());
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		    (new java.security.PrivilegedAction<Void>(){
1: 		    	public Void run(){
/////////////////////////////////////////////////////////////////////////
1:     			new java.security.PrivilegedAction<Void>(){
1:     				public Void run(){
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:26ed4f9
/////////////////////////////////////////////////////////////////////////
1:         
1:         removeDirectory(getSystemProperty("derby.client.traceDirectory"));
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:1812ea8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemProperties
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.File;
1: import java.security.AccessController;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /** The test of the jvm properties for enabling client side tracing(DERBY-1275)
1:   */
1: public class ClientSideSystemPropertiesTest extends BaseJDBCTestCase { 
1: 	/** Establish a connection and that should start client side tracing
1:      *  because we have set the system properties to enable client side
1:      *  tracing. */
1:     public void testConnection() throws Exception {
0:         getConnection().setAutoCommit(false);
1:         //Make sure the connection above created a trace file. This check is 
1:         //made in the privilege block below by looking inside the 
1:         //trace Directory and making sure the file count is greater than 0.
1:         AccessController.doPrivileged
0: 		    (new java.security.PrivilegedAction(){
0: 		    	public Object run(){
1: 		    		File dir = new File(getSystemProperty("derby.client.traceDirectory"));
1: 		    		int fileCounter = 0;
1:     	            File[] list = dir.listFiles();
1:     	            File tempFile;
1:     	            for (;fileCounter<list.length; fileCounter++)
1:     	            	tempFile = list[fileCounter];
1:     	            junit.framework.Assert.assertTrue(fileCounter>0);
1:     	            return null;
1:     		    }
1:     		}	 
1:     	    );
1:     }
1:     
1:     /** If the trace Directory doesn't exist then create one. If there is one
1:      *  already there, then delete everything under it. */
1:     protected void setUp() throws Exception
1:     {
1:     	AccessController.doPrivileged(
0:     			new java.security.PrivilegedAction(){
0:     				public Object run(){
1:     					File dir = new File(getSystemProperty("derby.client.traceDirectory"));
1:     					if (dir.exists() == false) //create the trace Directory
0:     						junit.framework.Assert.assertTrue(dir.mkdirs());
1:     					else {//cleanup the trace Directory which already exists
1:     						int fileCounter = 0;
1:     						File[] list = dir.listFiles();
1:     						File tempFile;
1:     						for (;fileCounter<list.length; fileCounter++) {
1:     							tempFile = list[fileCounter];
0:     							tempFile.delete();
1:         					}
1: 		        }
1: 	            return null;
1: 		    }
1: 		}	 
1: 	    );
1:     }
1:     
1:     /** Delete the trace Directory so that the test environment is clean for the
1:      *  next test run. */
1:     protected void tearDown() throws Exception
1:     {
1:         super.tearDown();
0:         //Making ClientSideSystemPropertiesTest class implement 
0:         //java.security.PrivilegedExceptionAction didn't work because compiler
0:         //kept getting confused between the run method in
0:         //java.security.PrivilegedExceptionAction and the run method in
0:         //junit.framework.TestCase
0:         //To get around this, I have created an inline class which implements
0:         //java.security.PrivilegedAction and implements the run method 
0:         //to delete the traceDirector and all the files under it.
1:     	AccessController.doPrivileged
0: 	    (new java.security.PrivilegedAction(){
0: 		    public Object run(){
1: 		        File dir = new File(getSystemProperty("derby.client.traceDirectory"));
1: 	    		int fileCounter = 0;
1: 	            File[] list = dir.listFiles();
1: 	            File tempFile;
0: 	            //delete all the files under trace Directory
1: 	            for (;fileCounter<list.length; fileCounter++)
1: 	            {
1: 	            	tempFile = list[fileCounter];
0: 	            	tempFile.delete();
1: 	            }
0: 	            //now delete the trace Directory
0: 				dir.delete();
1: 	            return null;
1: 		    }
1: 		}	 
1: 	    );
1:     }
1:     
1:     /* ------------------- end helper methods  -------------------------- */
1:     public ClientSideSystemPropertiesTest(String name) {
1:         super(name);
1:     }
1: 
1:     /*
1:      * Set the system properties related to client side tracing.
1:      */
1:     public static Test suite() {
1:         //Create the traceDirectory required by the tests in this class
1:     	Properties traceRelatedProperties = new Properties();
1:         traceRelatedProperties.setProperty("derby.client.traceLevel", "64");
1:         traceRelatedProperties.setProperty("derby.client.traceDirectory", "TraceDir");
1:         Test suite = TestConfiguration.clientServerSuite(ClientSideSystemPropertiesTest.class);
1:         return new SystemPropertyTestSetup(suite, traceRelatedProperties); 
1:     }
1:     
1: }
============================================================================