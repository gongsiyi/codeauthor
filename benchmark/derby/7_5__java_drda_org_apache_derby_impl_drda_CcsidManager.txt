1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.CcsidManager
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: package org.apache.derby.impl.drda;
1:eac0369: 
1:a1f0068: import java.nio.ByteBuffer;
1:a1f0068: 
1:eac0369: // Peforms character conversions.
1:eac0369: abstract class CcsidManager
1:eac0369: {
1:eac0369:   byte space; // ' ' character
1:eac0369:   byte dot;   // '.' character
1:eac0369: 
1:eac0369:   // Byte array used to convert numbers into
1:eac0369:   // bytes containing the character representation "value" for the particular ccsid.
1:eac0369:   byte[] numToCharRepresentation;
1:eac0369: 
1:816270f:   /* DRDA CCSID level for UTF8 */
1:9b816c6:   public static final int UTF8_CCSID = 1208;
1:9b816c6:   
1:eac0369:   CcsidManager (byte space, byte dot, byte[] numToCharRepresentation)
1:eac0369:   {
1:eac0369:     this.space = space;
1:eac0369:     this.dot = dot;
1:eac0369:     this.numToCharRepresentation = numToCharRepresentation;
1:eac0369:   }
1:eac0369: 
1:9b816c6:   /**
1:9b816c6:    * Returns the length in bytes for the String str using a particular ccsid.
1:9b816c6:    * @param str The Java String from which to obtain the length.
1:9b816c6:    * @return The length in bytes of the String str.
1:9b816c6:    */
1:9b816c6:   abstract int getByteLength (String str);
1:9b816c6:   
2:eac0369:   // Convert a Java String into bytes for a particular ccsid.
3:eac0369:   //
1:eac0369:   // @param sourceString A Java String to convert.
1:eac0369:   // @return A new byte array representing the String in a particular ccsid.
1:cdfb2d1:   abstract byte[] convertFromJavaString (String sourceString);
1:eac0369: 
1:eac0369: 
1:a1f0068:     /**
1:a1f0068:      * Convert a Java String into bytes for a particular ccsid.
1:a1f0068:      * The String is converted into a buffer provided by the caller.
1:a1f0068:      *
1:a1f0068:      * @param sourceString  A Java String to convert.
1:a1f0068:      * @param buffer        The buffer to convert the String into.
1:a1f0068:      */
1:cdfb2d1:     abstract void convertFromJavaString(String sourceString, ByteBuffer buffer);
1:eac0369: 
2:eac0369:   // Convert a byte array representing characters in a particular ccsid into a Java String.
1:eac0369:   //
2:eac0369:   // @param sourceBytes An array of bytes to be converted.
1:eac0369:   // @return String A new Java String Object created after conversion.
1:cdfb2d1:   abstract String convertToJavaString (byte[] sourceBytes);
1:eac0369: 
1:eac0369: 
1:cdfb2d1:   /**
1:cdfb2d1:    * Convert a byte array representing characters in a particular ccsid into a Java String.
1:cdfb2d1:    * 
1:cdfb2d1:    * Mind the fact that for certain encodings (e.g. UTF8), the offset and numToConvert
1:cdfb2d1:    * actually represent characters and 1 character does not always equal to 1 byte.
1:cdfb2d1:    * 
1:cdfb2d1:    * @param sourceBytes An array of bytes to be converted.
1:cdfb2d1:    * @param offset An offset indicating first byte to convert.
1:cdfb2d1:    * @param numToConvert The number of bytes to be converted.
1:cdfb2d1:    * @return A new Java String Object created after conversion.
1:cdfb2d1:    */
1:cdfb2d1:   abstract String convertToJavaString (byte[] sourceBytes, int offset, int numToConvert);
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:816270f
/////////////////////////////////////////////////////////////////////////
1:   /* DRDA CCSID level for UTF8 */
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:9b816c6
/////////////////////////////////////////////////////////////////////////
0:   /* DRDA CCSID levels for UTF8 and EBCDIC */
1:   public static final int UTF8_CCSID = 1208;
0:   public static final int EBCDIC_CCSID = 500;
1:   
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Returns the length in bytes for the String str using a particular ccsid.
1:    * @param str The Java String from which to obtain the length.
1:    * @return The length in bytes of the String str.
1:    */
1:   abstract int getByteLength (String str);
1:   
commit:cdfb2d1
/////////////////////////////////////////////////////////////////////////
1:   abstract byte[] convertFromJavaString (String sourceString);
/////////////////////////////////////////////////////////////////////////
1:     abstract void convertFromJavaString(String sourceString, ByteBuffer buffer);
1:   abstract String convertToJavaString (byte[] sourceBytes);
1:   /**
1:    * Convert a byte array representing characters in a particular ccsid into a Java String.
1:    * 
1:    * Mind the fact that for certain encodings (e.g. UTF8), the offset and numToConvert
1:    * actually represent characters and 1 character does not always equal to 1 byte.
1:    * 
1:    * @param sourceBytes An array of bytes to be converted.
1:    * @param offset An offset indicating first byte to convert.
1:    * @param numToConvert The number of bytes to be converted.
1:    * @return A new Java String Object created after conversion.
1:    */
1:   abstract String convertToJavaString (byte[] sourceBytes, int offset, int numToConvert);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a1f0068
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Convert a Java String into bytes for a particular ccsid.
1:      * The String is converted into a buffer provided by the caller.
1:      *
1:      * @param sourceString  A Java String to convert.
1:      * @param buffer        The buffer to convert the String into.
1:      */
0:     abstract void convertFromUCS2(String sourceString, ByteBuffer buffer);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.CcsidManager
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derby.impl.drda;
1: 
1: // Peforms character conversions.
1: abstract class CcsidManager
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0:   private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1:   byte space; // ' ' character
1:   byte dot;   // '.' character
1: 
1:   // Byte array used to convert numbers into
1:   // bytes containing the character representation "value" for the particular ccsid.
1:   byte[] numToCharRepresentation;
1: 
1:   CcsidManager (byte space, byte dot, byte[] numToCharRepresentation)
1:   {
1:     this.space = space;
1:     this.dot = dot;
1:     this.numToCharRepresentation = numToCharRepresentation;
1:   }
1: 
1: 
1:   // Convert a Java String into bytes for a particular ccsid.
1:   //
1:   // @param sourceString A Java String to convert.
1:   // @return A new byte array representing the String in a particular ccsid.
0:   abstract byte[] convertFromUCS2 (String sourceString);
1: 
1: 
1:   // Convert a Java String into bytes for a particular ccsid.
0:   // The String is converted into a buffer provided by the caller.
1:   //
0:   // @param sourceString  A Java String to convert.
0:   // @param buffer        The buffer to convert the String into.
0:   // @param offset        Offset in buffer to start putting output.
0:   // @return An int containing the buffer offset after conversion.
0:   abstract int convertFromUCS2 (String sourceString,
0:                                 byte[] buffer,
0:                                 int offset);
1: 
1:   // Convert a byte array representing characters in a particular ccsid into a Java String.
1:   //
1:   // @param sourceBytes An array of bytes to be converted.
1:   // @return String A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes);
1: 
1: 
1:   // Convert a byte array representing characters in a particular ccsid into a Java String.
1:   //
1:   // @param sourceBytes An array of bytes to be converted.
0:   // @param offset  An offset indicating first byte to convert.
0:   // @param numToConvert The number of bytes to be converted.
0:   // @return A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes, int offset, int numToConvert);
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derby.impl.drda;
0: 
0: // Peforms character conversions.
0: abstract class CcsidManager
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0:   private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0:   byte space; // ' ' character
0:   byte dot;   // '.' character
0: 
0:   // Byte array used to convert numbers into
0:   // bytes containing the character representation "value" for the particular ccsid.
0:   byte[] numToCharRepresentation;
0: 
0:   CcsidManager (byte space, byte dot, byte[] numToCharRepresentation)
0:   {
0:     this.space = space;
0:     this.dot = dot;
0:     this.numToCharRepresentation = numToCharRepresentation;
0:   }
0: 
0: 
0:   // Convert a Java String into bytes for a particular ccsid.
0:   //
0:   // @param sourceString A Java String to convert.
0:   // @return A new byte array representing the String in a particular ccsid.
0:   abstract byte[] convertFromUCS2 (String sourceString);
0: 
0: 
0:   // Convert a Java String into bytes for a particular ccsid.
0:   // The String is converted into a buffer provided by the caller.
0:   //
0:   // @param sourceString  A Java String to convert.
0:   // @param buffer        The buffer to convert the String into.
0:   // @param offset        Offset in buffer to start putting output.
0:   // @return An int containing the buffer offset after conversion.
0:   abstract int convertFromUCS2 (String sourceString,
0:                                 byte[] buffer,
0:                                 int offset);
0: 
0:   // Convert a byte array representing characters in a particular ccsid into a Java String.
0:   //
0:   // @param sourceBytes An array of bytes to be converted.
0:   // @return String A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes);
0: 
0: 
0:   // Convert a byte array representing characters in a particular ccsid into a Java String.
0:   //
0:   // @param sourceBytes An array of bytes to be converted.
0:   // @param offset  An offset indicating first byte to convert.
0:   // @param numToConvert The number of bytes to be converted.
0:   // @return A new Java String Object created after conversion.
0:   abstract String convertToUCS2 (byte[] sourceBytes, int offset, int numToConvert);
0: 
0: }
============================================================================