1:09ea7c0: /*
1:09ea7c0: 
1:ea36b42: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintMultiThreadedTest
1:09ea7c0: 
1:09ea7c0: Licensed to the Apache Software Foundation (ASF) under one or more
1:09ea7c0: contributor license agreements.  See the NOTICE file distributed with
1:09ea7c0: this work for additional information regarding copyright ownership.
1:09ea7c0: The ASF licenses this file to You under the Apache License, Version 2.0
1:09ea7c0: (the "License"); you may not use this file except in compliance with
1:09ea7c0: the License.  You may obtain a copy of the License at
1:09ea7c0: 
1:09ea7c0:    http://www.apache.org/licenses/LICENSE-2.0
1:09ea7c0: 
1:09ea7c0: Unless required by applicable law or agreed to in writing, software
1:09ea7c0: distributed under the License is distributed on an "AS IS" BASIS,
1:09ea7c0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09ea7c0: See the License for the specific language governing permissions and
1:09ea7c0: limitations under the License.
1:09ea7c0: 
1:09ea7c0: */
1:09ea7c0: 
1:09ea7c0: package org.apache.derbyTesting.functionTests.tests.lang;
1:09ea7c0: 
1:09ea7c0: import java.sql.Connection;
1:09ea7c0: import java.sql.PreparedStatement;
1:09ea7c0: import java.sql.Statement;
1:09ea7c0: import junit.framework.Test;
1:09ea7c0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:09ea7c0: import org.apache.derbyTesting.junit.TestConfiguration;
1:09ea7c0: 
1:09ea7c0: public class UniqueConstraintMultiThreadedTest extends BaseJDBCTestCase {
1:09ea7c0:     
1:09ea7c0:     public UniqueConstraintMultiThreadedTest() {
1:09ea7c0:         super ("Multi Threaded Unique Constraint Test");
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Deletes a record in a transaction and tries to insert the same 
1:09ea7c0:      * from a different transaction. Once second transaction goes on wait
1:8bc55f3:      * first transaction is committed or rolled back based on third
1:09ea7c0:      * param (boolean commit).
1:09ea7c0:      * 
1:09ea7c0:      * @param isolation1 isolation level for 1st thread
1:09ea7c0:      * @param isolation2 isolation level for 2nd thread
1:8bc55f3:      * @param commit whether or not to commit
1:09ea7c0:      */
1:09ea7c0:     private void executeThreads (int isolation1, int isolation2, 
1:09ea7c0:             boolean commit) throws Exception {
1:8bc55f3:         Connection con1 = openDefaultConnection();
1:09ea7c0:         con1.setTransactionIsolation(isolation1);
1:8bc55f3:         Connection con2 = openDefaultConnection();
1:09ea7c0:         try {
1:09ea7c0:             con2.setTransactionIsolation(isolation2);
1:09ea7c0:             DBOperations dbo1 = new DBOperations (con1, 5);
1:09ea7c0:             DBOperations dbo2 = new DBOperations (con2, 5);
1:09ea7c0:             dbo1.delete();
1:09ea7c0:             Thread t = new Thread (dbo2);
1:09ea7c0:             t.start();
1:09ea7c0:             //wait for 2 sec should be enough for dbo2 so on wait
1:09ea7c0:             t.sleep(2000);
1:09ea7c0:             if (commit) {
1:09ea7c0:                 dbo1.rollback();
1:09ea7c0:                 t.join();
1:09ea7c0:                 assertSQLState("isolation levels: " + isolation1
1:09ea7c0:                         + " " + isolation2, "23505", dbo2.getException());
1:09ea7c0:             }
1:09ea7c0:             else {
1:09ea7c0:                 dbo1.commit();
1:09ea7c0:                 t.join();
1:09ea7c0:                 assertNull("isolation levels: " + isolation1
1:09ea7c0:                         + " " + isolation2, dbo2.getException());
1:09ea7c0:             }
1:09ea7c0:             assertNull("unexpected failure: " + isolation1
1:09ea7c0:                         + " " + isolation2, dbo2.getUnexpectedException());
1:09ea7c0:         }
1:09ea7c0:         finally {
1:09ea7c0:             con1.commit();
1:09ea7c0:             con2.commit();
1:09ea7c0:             con1.close();
1:09ea7c0:             con2.close();
1:09ea7c0:         }
1:09ea7c0:         
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Test inserting a duplicate record while original is deleted in
1:8bc55f3:      * a transaction and later committed.
1:09ea7c0:      */
1:09ea7c0:     public void testLockingWithcommit () throws Exception {
1:09ea7c0:         for (int i = 0; i < 4; i++) {
1:09ea7c0:             for (int j = 0; j < 4; j++) {
1:09ea7c0:                 executeThreads((int) Math.pow(2,i),
1:09ea7c0:                         (int) Math.pow (2,j), true);
1:09ea7c0:             }
1:09ea7c0:         }        
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Test inserting a duplicate record while original is deleted in
1:8bc55f3:      * a transaction and later rolled back.
1:09ea7c0:      */
1:09ea7c0:     public void testLockingWithRollback () throws Exception {
1:09ea7c0:         for (int i = 0; i < 4; i++) {
1:09ea7c0:             for (int j = 0; j < 4; j++) {
1:09ea7c0:                 executeThreads((int) Math.pow (2,i),
1:09ea7c0:                         (int) Math.pow (2,j), false);
1:09ea7c0:             }
1:09ea7c0:         }
1:09ea7c0:     }
1:09ea7c0: 
1:09ea7c0:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("UniqueConstraintTest");
1:09ea7c0:         suite.addTest(TestConfiguration.embeddedSuite(UniqueConstraintMultiThreadedTest.class));
1:09ea7c0:         return suite;
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     protected void setUp() throws Exception {
1:8bc55f3:         Statement stmt = createStatement();
1:09ea7c0:         stmt.execute("create table tab1 (i integer)");
1:09ea7c0:         stmt.executeUpdate("alter table tab1 add constraint con1 unique (i)");
1:8bc55f3:         PreparedStatement ps = prepareStatement("insert into tab1 " +
1:09ea7c0:                 "values (?)");
1:09ea7c0:         for (int i = 0; i < 10; i++) {
1:09ea7c0:             ps.setInt(1, i);
1:09ea7c0:             ps.executeUpdate();
1:09ea7c0:         }
1:8bc55f3:         commit();
1:09ea7c0:     }
1:09ea7c0: 
1:09ea7c0:     protected void tearDown() throws java.lang.Exception {
1:8bc55f3:         dropTable("tab1");
1:8bc55f3:         super.tearDown();
1:09ea7c0:     }
1:09ea7c0: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("UniqueConstraintTest");
commit:ea36b42
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintMultiThreadedTest
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8bc55f3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * first transaction is committed or rolled back based on third
1:      * @param commit whether or not to commit
1:         Connection con1 = openDefaultConnection();
1:         Connection con2 = openDefaultConnection();
/////////////////////////////////////////////////////////////////////////
1:      * a transaction and later committed.
/////////////////////////////////////////////////////////////////////////
1:      * a transaction and later rolled back.
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = createStatement();
1:         PreparedStatement ps = prepareStatement("insert into tab1 " +
1:         commit();
1:         dropTable("tab1");
1:         super.tearDown();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:09ea7c0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintMultiThrededTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
0: import javax.sql.DataSource;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class UniqueConstraintMultiThreadedTest extends BaseJDBCTestCase {
1:     
0:     private DataSource ds;
1:     public UniqueConstraintMultiThreadedTest() {
1:         super ("Multi Threaded Unique Constraint Test");
1:     }
1:     
1:     /**
1:      * Deletes a record in a transaction and tries to insert the same 
1:      * from a different transaction. Once second transaction goes on wait
0:      * first trasnaction is commited or rolled back based on third 
1:      * param (boolean commit).
1:      * 
1:      * @param isolation1 isolation level for 1st thread
1:      * @param isolation2 isolation level for 2nd thread
0:      * @param commit wether to commit or commit
1:      */
1:     private void executeThreads (int isolation1, int isolation2, 
1:             boolean commit) throws Exception {
0:         Connection con1 = ds.getConnection();
1:         con1.setTransactionIsolation(isolation1);
0:         Connection con2 = ds.getConnection();
1:         try {
1:             con2.setTransactionIsolation(isolation2);
1:             DBOperations dbo1 = new DBOperations (con1, 5);
1:             DBOperations dbo2 = new DBOperations (con2, 5);
1:             dbo1.delete();
1:             Thread t = new Thread (dbo2);
1:             t.start();
1:             //wait for 2 sec should be enough for dbo2 so on wait
1:             t.sleep(2000);
1:             if (commit) {
1:                 dbo1.rollback();
1:                 t.join();
1:                 assertSQLState("isolation levels: " + isolation1
1:                         + " " + isolation2, "23505", dbo2.getException());
1:             }
1:             else {
1:                 dbo1.commit();
1:                 t.join();
1:                 assertNull("isolation levels: " + isolation1
1:                         + " " + isolation2, dbo2.getException());
1:             }
1:             assertNull("unexpected failure: " + isolation1
1:                         + " " + isolation2, dbo2.getUnexpectedException());
1:         }
1:         finally {
1:             con1.commit();
1:             con2.commit();
1:             con1.close();
1:             con2.close();
1:         }
1:         
1:     }
1:     
1:     /**
1:      * Test inserting a duplicate record while original is deleted in
0:      * a transaction and latter commited.
1:      */
1:     public void testLockingWithcommit () throws Exception {
0:         ds = JDBCDataSource.getDataSource();
1:         for (int i = 0; i < 4; i++) {
1:             for (int j = 0; j < 4; j++) {
1:                 executeThreads((int) Math.pow(2,i),
1:                         (int) Math.pow (2,j), true);
1:             }
1:         }        
1:     }
1:     
1:     /**
1:      * Test inserting a duplicate record while original is deleted in
0:      * a transaction and latter rolled back.
1:      */
1:     public void testLockingWithRollback () throws Exception {
0:         ds = JDBCDataSource.getDataSource();
1:         for (int i = 0; i < 4; i++) {
1:             for (int j = 0; j < 4; j++) {
1:                 executeThreads((int) Math.pow (2,i),
1:                         (int) Math.pow (2,j), false);
1:             }
1:         }
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("UniqueConstraintTest");
1:         suite.addTest(TestConfiguration.embeddedSuite(UniqueConstraintMultiThreadedTest.class));
1:         return suite;
1:     }
1:     
1:     protected void setUp() throws Exception {
0:         Connection con = getConnection();
0:         Statement stmt = con.createStatement();
1:         stmt.execute("create table tab1 (i integer)");
1:         stmt.executeUpdate("alter table tab1 add constraint con1 unique (i)");
0:         PreparedStatement ps = con.prepareStatement("insert into tab1 " +
1:                 "values (?)");
1:         for (int i = 0; i < 10; i++) {
1:             ps.setInt(1, i);
1:             ps.executeUpdate();
1:         }
0:         con.commit ();
1:     }
1: 
1:     protected void tearDown() throws java.lang.Exception {
0:         Connection con = getConnection();
0:         con.createStatement().executeUpdate("drop table tab1");
1:     }
1: }
============================================================================