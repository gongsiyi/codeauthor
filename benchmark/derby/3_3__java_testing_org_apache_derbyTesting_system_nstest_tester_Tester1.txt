1:b8d1d8a: /*
1:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester1
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.tester;
1:b8d1d8a: 
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * Tester1 - Threads that keep the connection to the database open forever
1:b8d1d8a:  */
1:b8d1d8a: public class Tester1 extends TesterObject {
1:b8d1d8a: 
1:b8d1d8a: 	// *******************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// Constructor. Get's the name of the thread running this for use in
1:b8d1d8a: 	// messages
1:b8d1d8a: 	//
1:b8d1d8a: 	// *******************************************************************************
1:b8d1d8a: 	public Tester1(String name) {
1:b8d1d8a: 		super(name);
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	// *********************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// This starts the acutal test operations. Overrides the startTesting() of
1:b8d1d8a: 	// parent.
1:b8d1d8a: 	// Tester1 profile -
1:e276048: 	// The connection to the database is open forever. This client will do 
1:e276048: 	// Insert/Update/Delete and simple Select queries over a small to medium 
1:e276048: 	// set of data determined randomly over MAX_LOW_STRESS_ROWS rows. 
1:e276048: 	// Autocommit is left on else too many deadlocks occur and the goal is to
1:e276048: 	// test the data flow and connection management of the network server, not
1:e276048: 	// the transaction management of the database.
1:b8d1d8a: 	//
1:b8d1d8a: 	// *********************************************************************************
1:b8d1d8a: 	public void startTesting() {
1:b8d1d8a: 
1:b8d1d8a: 		// this connection will remain open forever.
1:b8d1d8a: 		connex = getConnection();
1:b8d1d8a: 		if (connex == null) {
1:c043274: 			NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 					+ " could not get the database connection");
1:b8d1d8a: 			return; // quit
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		// set autocommit to false to keep transaction control in your hand
1:b8d1d8a: 		// Too many deadlocks amd locking issues if this is not commented out
1:b8d1d8a: 		try {
1:b8d1d8a: 			connex.setAutoCommit(false);
1:b8d1d8a: 		} catch (Exception e) {
1:c043274: 			NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 					+ "'s setAutoCommit() failed:");
1:b8d1d8a: 			printException("setting AutoCommit", e);
1:5a56bcc: 
1:5a56bcc:             // if you can't change the autocommit state, the connection is unusable.
1:5a56bcc:             // get out of here.
1:5a56bcc:             return;
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		// also set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED
1:e276048: 		// to reduce number of deadlocks
1:b8d1d8a: 		setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1:b8d1d8a: 
1:b8d1d8a: 		// The following loop will be done nstest.MAX_ITERATIONS times after
1:e276048: 		// which we exit the thread.
1:b8d1d8a: 		// Note that the same connection is used for each operation. The
1:e276048: 		// connection is only closed outside the loop. Since autocommit is on,
1:e276048: 		// we make an interation work over MAX_LOW_STRESS_ROWS number of rows.
1:e276048: 		// This thread could be made to pause (sleep) for a bit between each
1:e276048: 		// iteration.
1:b8d1d8a: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1:b8d1d8a: 
1:b8d1d8a: 			// Now loop through nstest.MAX_LOW_STRESS_ROWS number of times/rows
1:b8d1d8a: 			// before committing.
1:b8d1d8a: 			// Here, we do randomly do either insert/update/delete operations or
1:b8d1d8a: 			// one select
1:b8d1d8a: 			int rnum = (int) (Math.random() * 100) % 4; // returns 0, 1, 2, 3
1:b8d1d8a: 			switch (rnum) {
1:b8d1d8a: 			case 0: // do a select operation
1:b8d1d8a: 				try {
1:b8d1d8a: 					int numSelected = doSelectOperation(NsTest.MAX_LOW_STRESS_ROWS);
1:c043274: 					NsTest.logger.println(getThread_id() + " selected "
1:b8d1d8a: 							+ numSelected + " rows");
1:b8d1d8a: 				} catch (Exception e) {
1:c043274: 					NsTest.logger
1:b8d1d8a: 							.println("--> Isolation Level is TRANSACTION_READ_UNCOMMITTED, hence SHOULD NOT FAIL ********* doSelect in thread "
1:b8d1d8a: 									+ getThread_id() + " threw " + e);
1:b8d1d8a: 					printException("doSelectOperation()", e);
1:c043274:                     if ( NsTest.justCountErrors() ) { NsTest.printException( Tester1.class.getName(), e ); }
1:c043274: 					else { e.printStackTrace( NsTest.logger ); }
1:5a56bcc: 
1:5a56bcc:                     // if the connection is dead, there's no point in hanging around
1:5a56bcc:                     if ( NsTest.deadConnection( e ) ) { return; }
1:b8d1d8a: 				}
1:b8d1d8a: 				break;
1:b8d1d8a: 
1:b8d1d8a: 			case 1: // do Insert/Update/Delete operations
1:b8d1d8a: 			case 2: // do Insert/Update/Delete operations
1:b8d1d8a: 			case 3: // do Insert/Update/Delete operations
1:b8d1d8a: 				for (int j = 0; j < NsTest.MAX_LOW_STRESS_ROWS; j++) {
1:b8d1d8a: 					doIUDOperation();
1:5a56bcc:                     if ( deadConnection() ) { return; }
1:b8d1d8a: 				}
1:b8d1d8a: 				break;
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			// Letting this be even though autocommit is on so that if later on
1:e276048: 			// if we decide to turn autocommit off, this automatically takes
1:e276048:             // effect.
1:b8d1d8a: 			// commit
1:b8d1d8a: 			try {
1:b8d1d8a: 				connex.commit();
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger
1:b8d1d8a: 						.println("FAIL: " + getThread_id() + "'s commit() failed:");
1:b8d1d8a: 				printException("committing Xn in Tester1", e);
1:5a56bcc: 
1:5a56bcc:                 // if you can't commit, the connection is unusable.
1:5a56bcc:                 // get out of here.
1:5a56bcc:                 return;
1:b8d1d8a: 			}
1:b8d1d8a: 		}// end of for (int i=0;...)
1:b8d1d8a: 
1:b8d1d8a: 		// close the connection before the thread terminates
1:b8d1d8a: 		closeConnection();
1:c043274: 		NsTest.logger.println("Thread " + getThread_id()+ " is now terminating");
1:b8d1d8a: 
1:b8d1d8a: 	}//end of startTesting()
1:b8d1d8a: 
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5a56bcc
/////////////////////////////////////////////////////////////////////////
1: 
1:             // if you can't change the autocommit state, the connection is unusable.
1:             // get out of here.
1:             return;
/////////////////////////////////////////////////////////////////////////
1: 
1:                     // if the connection is dead, there's no point in hanging around
1:                     if ( NsTest.deadConnection( e ) ) { return; }
/////////////////////////////////////////////////////////////////////////
1:                     if ( deadConnection() ) { return; }
/////////////////////////////////////////////////////////////////////////
1: 
1:                 // if you can't commit, the connection is unusable.
1:                 // get out of here.
1:                 return;
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 			NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 			NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 					NsTest.logger.println(getThread_id() + " selected "
1: 					NsTest.logger
1:                     if ( NsTest.justCountErrors() ) { NsTest.printException( Tester1.class.getName(), e ); }
1: 					else { e.printStackTrace( NsTest.logger ); }
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println("Thread " + getThread_id()+ " is now terminating");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e276048
/////////////////////////////////////////////////////////////////////////
1: 	// The connection to the database is open forever. This client will do 
1: 	// Insert/Update/Delete and simple Select queries over a small to medium 
1: 	// set of data determined randomly over MAX_LOW_STRESS_ROWS rows. 
1: 	// Autocommit is left on else too many deadlocks occur and the goal is to
1: 	// test the data flow and connection management of the network server, not
1: 	// the transaction management of the database.
/////////////////////////////////////////////////////////////////////////
1: 		// to reduce number of deadlocks
1: 		// which we exit the thread.
1: 		// connection is only closed outside the loop. Since autocommit is on,
1: 		// we make an interation work over MAX_LOW_STRESS_ROWS number of rows.
1: 		// This thread could be made to pause (sleep) for a bit between each
1: 		// iteration.
/////////////////////////////////////////////////////////////////////////
1: 			// if we decide to turn autocommit off, this automatically takes
1:             // effect.
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester1
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.tester;
1: 
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * Tester1 - Threads that keep the connection to the database open forever
1:  */
1: public class Tester1 extends TesterObject {
1: 
1: 	// *******************************************************************************
1: 	//
1: 	// Constructor. Get's the name of the thread running this for use in
1: 	// messages
1: 	//
1: 	// *******************************************************************************
1: 	public Tester1(String name) {
1: 		super(name);
1: 	}
1: 
1: 	// *********************************************************************************
1: 	//
1: 	// This starts the acutal test operations. Overrides the startTesting() of
1: 	// parent.
1: 	// Tester1 profile -
0: 	// The connection to the database is open forever. This client
0: 	// will do Insert/Update/Delete and simple Select queries over
0: 	// a small to medium set of data determined randomly over
0: 	// MAX_LOW_STRESS_ROWS rows. Autocommit is left on else too many deadlocks
0: 	// occur and the
0: 	// goal is to test the data flow and connection management of the network
0: 	// server,
0: 	// not the transaction management of the database.
1: 	//
1: 	// *********************************************************************************
1: 	public void startTesting() {
1: 
1: 		// this connection will remain open forever.
1: 		connex = getConnection();
1: 		if (connex == null) {
0: 			System.out.println("FAIL: " + getThread_id()
1: 					+ " could not get the database connection");
1: 			return; // quit
1: 		}
1: 
1: 		// set autocommit to false to keep transaction control in your hand
1: 		// Too many deadlocks amd locking issues if this is not commented out
1: 		try {
1: 			connex.setAutoCommit(false);
1: 		} catch (Exception e) {
0: 			System.out.println("FAIL: " + getThread_id()
1: 					+ "'s setAutoCommit() failed:");
1: 			printException("setting AutoCommit", e);
1: 		}
1: 
1: 		// also set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED
0: 		// to reduce number of
0: 		// deadlocks
1: 		setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
1: 		// The following loop will be done nstest.MAX_ITERATIONS times after
0: 		// which we exit the thread
1: 		// Note that the same connection is used for each operation. The
0: 		// connection is only closed
0: 		// outside the loop. Since autocommit is on, we make an interation work
0: 		// over
0: 		// MAX_LOW_STRESS_ROWS number of rows. This thread could be made to
0: 		// pause (sleep) for a bit
0: 		// between each iteration.
1: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1: 
1: 			// Now loop through nstest.MAX_LOW_STRESS_ROWS number of times/rows
1: 			// before committing.
1: 			// Here, we do randomly do either insert/update/delete operations or
1: 			// one select
1: 			int rnum = (int) (Math.random() * 100) % 4; // returns 0, 1, 2, 3
1: 			switch (rnum) {
1: 			case 0: // do a select operation
1: 				try {
1: 					int numSelected = doSelectOperation(NsTest.MAX_LOW_STRESS_ROWS);
0: 					System.out.println(getThread_id() + " selected "
1: 							+ numSelected + " rows");
1: 				} catch (Exception e) {
0: 					System.out
1: 							.println("--> Isolation Level is TRANSACTION_READ_UNCOMMITTED, hence SHOULD NOT FAIL ********* doSelect in thread "
1: 									+ getThread_id() + " threw " + e);
1: 					printException("doSelectOperation()", e);
0: 					e.printStackTrace();
1: 				}
1: 				break;
1: 
1: 			case 1: // do Insert/Update/Delete operations
1: 			case 2: // do Insert/Update/Delete operations
1: 			case 3: // do Insert/Update/Delete operations
1: 				for (int j = 0; j < NsTest.MAX_LOW_STRESS_ROWS; j++) {
1: 					doIUDOperation();
1: 				}
1: 				break;
1: 			}
1: 
1: 			// Letting this be even though autocommit is on so that if later on
0: 			// if we decide to turn
0: 			// autocommit off, this automatically takes effect.
1: 			// commit
1: 			try {
1: 				connex.commit();
1: 			} catch (Exception e) {
0: 				System.out
1: 						.println("FAIL: " + getThread_id() + "'s commit() failed:");
1: 				printException("committing Xn in Tester1", e);
1: 			}
1: 		}// end of for (int i=0;...)
1: 
1: 		// close the connection before the thread terminates
1: 		closeConnection();
0: 		System.out.println("Thread " + getThread_id()+ " is now terminating");
1: 
1: 	}//end of startTesting()
1: 
1: }
============================================================================