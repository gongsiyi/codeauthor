1:df69fcc: /*
2:df69fcc: 
1:df69fcc:    Derby - Class nserverdemo.NsSampleClientThread
1:df69fcc: 
1:44e2455:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44e2455:    contributor license agreements.  See the NOTICE file distributed with
1:44e2455:    this work for additional information regarding copyright ownership.
1:44e2455:    The ASF licenses this file to You under the Apache License, Version 2.0
1:44e2455:    (the "License"); you may not use this file except in compliance with
1:44e2455:    the License.  You may obtain a copy of the License at
1:df69fcc: 
1:df69fcc:       http://www.apache.org/licenses/LICENSE-2.0
1:df69fcc: 
1:df69fcc:    Unless required by applicable law or agreed to in writing, software
1:df69fcc:    distributed under the License is distributed on an "AS IS" BASIS,
1:df69fcc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df69fcc:    See the License for the specific language governing permissions and
1:df69fcc:    limitations under the License.
1:df69fcc: 
1:df69fcc:  */
1:df69fcc: 
1:df69fcc: package nserverdemo;
1:df69fcc: 
1:df69fcc: import java.sql.DriverManager;
1:df69fcc: import java.sql.Statement;
1:df69fcc: import java.sql.ResultSet;
2:df69fcc: import java.sql.SQLException;
1:df69fcc: import java.io.PrintWriter;
2:df69fcc: import java.util.Properties;
1:df69fcc: import java.sql.PreparedStatement;
1:df69fcc: import java.sql.Connection;
1:df69fcc: import java.util.Random;
1:1695a5d: 
1:df69fcc: /**
1:df69fcc:  * NsSampleClientThread thread to perform the NsSampleWork
1:df69fcc:  */
1:df69fcc: public class NsSampleClientThread extends Thread {
1:df69fcc: 
1:df69fcc: 	protected int thread_id;
1:df69fcc: 	protected Properties properties;
1:df69fcc: 	protected PrintWriter pw;
1:df69fcc: 	protected String dbUrl;
1:df69fcc: 
1:df69fcc:   NsSampleClientThread(int id,String dbUrl, Properties properties,PrintWriter pw) {
1:df69fcc: 		this.thread_id=id;
1:df69fcc: 		this.dbUrl = dbUrl;
1:df69fcc: 		this.properties = properties;
1:df69fcc: 		this.pw = pw;
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc:    public void run() {
1:df69fcc: 	 System.out.println("[NsSampleClientThread] Thread id - "+this.thread_id + "; started.");
1:df69fcc: 	 NsSampleWork w = new NsSampleWork(this.thread_id,dbUrl,properties,pw);
1:df69fcc: 	 w.doWork();  // do all the NsSampleWork
1:df69fcc: 	 pw.println("[NsSampleClientThread] Thread id - "+this.thread_id+"; finished all tasks.");
1:df69fcc:    }
1:df69fcc: }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: /**
1:df69fcc:  * NsSampleWork class represents all the work done in the sample demo program.
1:df69fcc:  * It includes
1:df69fcc:  * getting a connection to the database, creating and loading of schema,
1:df69fcc:  * preparing and execution of SQL statements (insert, select, update, delete )
1:df69fcc:  */
1:df69fcc: class NsSampleWork {
1:df69fcc: 
1:df69fcc: 	protected int thread_id;
1:df69fcc: 	protected String dbUrl;
1:df69fcc: 	protected Properties properties;
1:df69fcc: 	PrintWriter pw;
1:df69fcc: 	PreparedStatement select = null;
1:df69fcc: 	PreparedStatement insert = null;
1:df69fcc: 	PreparedStatement delete = null;
1:df69fcc: 	PreparedStatement update = null;
1:df69fcc: 	PreparedStatement getMaxKey = null;
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	public static int counter=0;
1:ce40a31: 	static Integer lock = 0;
1:df69fcc: 	 /**
1:df69fcc: 	  * dbUrl is the database url to connect to
1:df69fcc: 	  */
1:df69fcc: 	 NsSampleWork(int id, String dbURL,Properties properties,PrintWriter pw) {
1:df69fcc: 		this.thread_id = id;
1:df69fcc: 		this.dbUrl = dbURL;
1:df69fcc: 		this.pw = pw;
1:df69fcc: 		this.properties = properties;
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  *	gets a database connection
1:df69fcc: 	  * If the dbUrl is trying to connect to the Derby NetNsSampleWork server using JCC
1:df69fcc: 	  * then the jcc driver must be already loaded before calling this method,
1:df69fcc: 	  * else there will be an error
1:df69fcc: 	  * return jcc connection if no error, else null
1:df69fcc: 	  */
1:df69fcc: 	 public Connection getConnection(String dbUrl, Properties properties) {
1:df69fcc: 		 Connection conn = null;
1:df69fcc: 		 try {
1:df69fcc: 			pw.println("[NsSampleWork] Thread id - "+thread_id + "; requests database connection, dbUrl ="+dbUrl);
1:df69fcc: 			conn = DriverManager.getConnection(dbUrl, properties);
1:df69fcc: 		  } catch (Exception e) {
1:df69fcc: 			 System.out.println("[NsSampleWork] Thread id - "+ thread_id + "; failed to get database connection. Exception thrown:");
1:df69fcc: 			 e.printStackTrace();
1:df69fcc: 		    }
1:df69fcc: 		  return conn;
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * set the connection to this isolation level
1:df69fcc: 	  */
1:df69fcc: 	 public void setIsolationLevel(Connection conn, int level) {
1:df69fcc: 		 try {
1:df69fcc: 			conn.setTransactionIsolation(level);
1:df69fcc: 		 } catch (Exception e) {
1:df69fcc: 			 pw.println("[NsSampleWork] Thread id - "+ thread_id +"; setIsolationLevel failed. Exception thrown: ");
1:df69fcc: 			 e.printStackTrace();
1:df69fcc: 		   }
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * close connection
1:df69fcc: 	  */
1:df69fcc: 	 public void closeConnection(Connection conn) {
1:df69fcc: 		 try {
1:df69fcc: 			if(conn != null)
1:df69fcc: 			 	conn.close();
1:df69fcc: 			pw.println("[NsSampleWork] Thread id - "+thread_id + "; closed connection to the database.");
1:df69fcc: 		 } catch (Exception e) {
1:df69fcc: 			 pw.println("[NsSampleWork] Thread id - "+thread_id + "; error when closing connection;"+ e);
1:df69fcc: 			 e.printStackTrace();
1:df69fcc: 		   }
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * prepare required sql statements
1:df69fcc: 	  */
1:df69fcc: 	 public void prepareStmts(Connection conn) {
1:df69fcc: 		 try {
1:df69fcc: 		 	select = conn.prepareStatement("select t_int,  t_char, t_float,t_key from SAMPLETBL where t_key = ?");
1:df69fcc: 		 	insert = conn.prepareStatement("insert into SAMPLETBL (t_int, t_char,t_float,t_key) values (?,?,?,?)");
1:df69fcc: 		 	update = conn.prepareStatement(" update SAMPLETBL set t_int = ? where t_key = ?");
1:df69fcc: 		 	delete = conn.prepareStatement("delete from SAMPLETBL where t_key = ?");
1:df69fcc: 		 	getMaxKey = conn.prepareStatement("select max(t_key) from SAMPLETBL");
1:df69fcc: 	 	} catch (Exception e) {
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 		  }
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * executing a select and retrieving the results
1:df69fcc: 	  * select the row with t_key value as 'selectWhat'
1:df69fcc: 	  */
1:df69fcc: 	 public int doSelectOperation(long selectWhat) {
1:df69fcc: 		 int numRowsSelected = 0;
1:df69fcc: 		 ResultSet rs = null;
1:df69fcc: 
1:df69fcc: 		 try {
1:df69fcc: 			 select.setLong(1,selectWhat);
1:df69fcc: 			 rs = select.executeQuery();
1:df69fcc: 
1:df69fcc: 			 while (rs.next()) {
1:df69fcc: 				 numRowsSelected++;
1:df69fcc: 
1:df69fcc: 				 int intVal = rs.getInt(1);
1:df69fcc: 				 String strVal = rs.getString(2);
1:df69fcc: 				 float floatVal = rs.getFloat(3);
1:df69fcc: 				 long longVal = rs.getLong(4); 	//t_key column
1:df69fcc: 
1:df69fcc: 				 pw.println("[NsSampleWork] Thread id - "+ thread_id +" selected "+numRowsSelected +" row ["+ intVal + ","
1:df69fcc: 				 			+ strVal +","+ floatVal +","+ longVal +"]");
1:df69fcc: 			 }
1:df69fcc: 		 } catch (Exception e) {
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 		   } finally {
1:df69fcc: 			   try {
1:df69fcc: 			 	if(rs != null)
1:df69fcc: 					rs.close();
1:df69fcc: 			   } catch (Exception e) {
1:df69fcc: 				   e.printStackTrace();
1:df69fcc: 			     }
1:df69fcc: 		     }
1:df69fcc: 		 return numRowsSelected;
1:df69fcc: 	 }
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  *  Opens a connection and executes DML (insert, select, update, delete) operations
1:df69fcc: 	  */
1:df69fcc: 	 public void doWork() {
1:df69fcc: 
1:df69fcc: 	   Connection conn = null;
1:df69fcc: 	   ResultSet rs = null;
1:df69fcc: 	   try {
1:df69fcc: 		 conn = getConnection(dbUrl,properties);
1:df69fcc: 
1:df69fcc: 		 if(conn == null)
1:df69fcc: 		 	throw new Exception("Failed to obtain connection!");
1:df69fcc: 
1:df69fcc: 		 conn.setAutoCommit(true);
1:df69fcc: 
1:df69fcc: 		 // Setting isolation level to read uncommitted, since this is a sample application.
1:df69fcc: 		 // Please set the isolation level depending on the requirements of your application
1:df69fcc: 		 setIsolationLevel(conn,Connection.TRANSACTION_READ_UNCOMMITTED);
1:df69fcc: 
1:df69fcc: 		 prepareStmts(conn);
1:df69fcc: 
1:df69fcc: 		 // Perform the DML operations
1:df69fcc: 		 for (int i=0; i<NsSample.ITERATIONS; i++) {
1:df69fcc: 			 // Choose between either a select or any one of (insert or update or delete ) operation
1:df69fcc: 			 int choice = (int) (Math.random() * 100) % 2;
1:df69fcc: 			 switch (choice) {
1:df69fcc: 				 case 0: { //select a row
1:df69fcc: 					rs = getMaxKey.executeQuery(); //gets max t_key value
1:df69fcc: 					long selectWhere = 0;
1:df69fcc: 					if(rs.next()) {
1:df69fcc: 						selectWhere = rs.getLong(1);
1:df69fcc: 					}
1:df69fcc: 					int numSelected = doSelectOperation(selectWhere);
1:df69fcc: 					break;
1:df69fcc: 				 }
1:df69fcc: 
1:df69fcc: 				 case 1: { //do an insert, update or delete
1:df69fcc: 					doIUDOperation();
1:df69fcc: 					break;
1:df69fcc: 				 }
1:df69fcc: 			 } //end of switch()
1:df69fcc: 		 }//enf of for()
1:df69fcc: 
1:df69fcc: 	   } catch(Exception e) {
1:df69fcc: 		   pw.println("[NsSampleWork] Thread id - "+ thread_id + "; error when performing dml operations; ");
1:df69fcc: 		   e.printStackTrace();
1:df69fcc: 	     } finally {
1:df69fcc: 		   	try {
1:df69fcc: 				if(rs != null)
1:df69fcc: 					rs.close();
1:df69fcc: 
1:df69fcc: 				closeConnection(conn);
1:df69fcc: 				cleanup();
1:df69fcc: 		    } catch(Exception ee) {
1:df69fcc: 			   pw.println("[NsSampleWork] Thread id - " + thread_id+"; error when cleaning up connection, resultset; exception is ");
1:df69fcc: 			   ee.printStackTrace();
1:df69fcc: 		      }
1:df69fcc: 	       }
1:df69fcc: 	 }//end of method doNsSampleWork()
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * close resources
1:df69fcc: 	 */
1:df69fcc: 	public void cleanup() {
1:df69fcc: 	  try{
1:df69fcc: 		if(select != null)
1:df69fcc: 			select.close();
1:df69fcc: 		if(insert != null)
1:df69fcc: 			insert.close();
1:df69fcc: 		if(delete != null)
1:df69fcc: 			delete.close();
1:df69fcc: 		if(update != null)
1:df69fcc: 			update.close();
1:df69fcc: 		if(getMaxKey != null)
1:df69fcc: 			getMaxKey.close();
1:df69fcc:   	  } catch (Exception e) {
1:df69fcc: 		  e.printStackTrace();
1:df69fcc: 	    }
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * Perform an insert or an update or delete operation
1:df69fcc: 	  */
1:df69fcc: 	 public void doIUDOperation() {
1:df69fcc: 		 int decide = (int) (Math.random() * 100) % 3;
1:df69fcc: 		 ResultSet rs = null;
1:df69fcc: 
1:df69fcc: 		 try {
1:df69fcc: 			switch (decide) {
1:df69fcc: 				 case 0: { //insert
1:df69fcc: 						int numInsert = insertRow(insert);
1:df69fcc: 						pw.println("[NsSampleWork] Thread id - "+thread_id+"; inserted "+numInsert+" row.");
1:df69fcc: 						break;
1:df69fcc: 				 }
1:df69fcc: 
1:df69fcc: 				 case 1: { //update
1:df69fcc: 						rs = getMaxKey.executeQuery();
1:df69fcc: 						long updateRow=0;
1:df69fcc: 						if(rs.next())
1:df69fcc: 							updateRow = rs.getLong(1);
1:df69fcc: 						int numUpdate = updateRow(update,updateRow);
1:df69fcc: 						System.out.println("[NsSampleWork] Thread id - "+thread_id+"; updated "+numUpdate+" row with t_key = " + updateRow);
1:df69fcc: 						break;
1:df69fcc: 				 }
1:df69fcc: 
1:df69fcc: 				 case 2: { //delete
1:df69fcc: 						rs = getMaxKey.executeQuery();
1:df69fcc: 						long deleteRow =0;
1:df69fcc: 						if(rs.next())
1:df69fcc: 							deleteRow = rs.getLong(1);
1:df69fcc: 						int numDelete = deleteRow(delete,deleteRow);
1:df69fcc: 						System.out.println("[NsSampleWork] Thread id - "+thread_id+"; deleted "+numDelete+" row with t_key = " + deleteRow);
1:df69fcc: 						break;
1:df69fcc: 				 }
1:df69fcc: 		 	}//end of switch()
1:df69fcc: 	 	} catch (Exception e) {
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 		  } finally {
1:df69fcc: 			  try {
1:df69fcc: 			  	if(rs != null)
1:df69fcc: 				  rs.close();
1:df69fcc: 			  } catch (Exception e) {
1:df69fcc: 				  e.printStackTrace();
1:df69fcc: 			    }
1:df69fcc: 		    }
1:df69fcc: 	 }//end of method doIUDOperation()
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * Create necessary schema if schema not already created
1:df69fcc: 	  */
1:df69fcc: 	 public static void checkAndCreateSchema(Connection conn,PrintWriter pw) {
1:df69fcc: 		Statement stmt = null;
1:df69fcc: 		ResultSet rs = null;
1:df69fcc: 
1:df69fcc: 		try	{
1:df69fcc: 			conn.setAutoCommit(true);
1:df69fcc: 		} catch (SQLException  se) {
1:df69fcc: 			pw.println("[NsSampleWork] Error when setting autocommit on connection; exception thrown: ");
1:df69fcc: 			se.printStackTrace();
1:df69fcc: 		  }
1:df69fcc: 
1:df69fcc: 		// Check for existence of schema by quering the catalog systables
1:df69fcc: 		try {
1:df69fcc: 			stmt = conn.createStatement();
1:df69fcc: 			rs = stmt.executeQuery("select tablename from sys.systables " +
1:df69fcc: 								" where tablename = 'SAMPLETBL'");
1:df69fcc: 			if (rs.next()) {
1:df69fcc: 				pw.println("[NsSampleWork] Table 'SAMPLETBL' already exists; no need to create schema again.");
1:df69fcc: 				return;
1:df69fcc: 			}
1:df69fcc: 		} catch (SQLException  se) {
1:df69fcc: 			pw.println("[NsSampleWork] Unable to query the metadata for existence of table SAMPLETBL; exception is "+se);
1:df69fcc: 			pw.println("[NsSampleWork] Exiting the application.");
1:df69fcc: 			se.printStackTrace();
1:df69fcc: 			System.exit(1);
1:df69fcc: 		  }
1:df69fcc: 
1:df69fcc: 		// Create the necessary table and indexes
1:df69fcc: 		try {
1:df69fcc: 			pw.println("[NsSampleWork] Begin creating table - SAMPLETBL and necessary indexes. ");
1:df69fcc: 			stmt.execute("create table SAMPLETBL (" +
1:df69fcc: 						  "t_int int," +
1:df69fcc: 						  "t_char char(15),"+
1:df69fcc: 						  "t_float float," +
1:df69fcc: 						  "t_key bigint )");
1:df69fcc: 			stmt.execute("create index t_char_idx on SAMPLETBL ( t_char)");
1:df69fcc: 			stmt.execute("create index t_float_idx on SAMPLETBL ( t_float)");
1:df69fcc: 			stmt.execute("create index t_key_idx on SAMPLETBL ( t_key )" );
1:df69fcc: 		} catch (Exception  e) {
1:df69fcc: 			pw.println("[NsSampleWork] Error when creating schema; exception is " + e.toString());
1:df69fcc: 			pw.println("[NsSampleWork] Exiting the application.");
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 			System.exit(1);
1:df69fcc: 		  } finally {
1:df69fcc: 			  try {
1:df69fcc: 			  	if(rs != null)
1:df69fcc: 				  rs.close();
1:df69fcc: 			  	if(stmt != null)
1:df69fcc: 				  stmt.close();
1:df69fcc: 			  } catch (Exception e) {
1:df69fcc: 				  e.printStackTrace();
1:df69fcc: 			    }
1:df69fcc: 			}
1:df69fcc: 	 }//end of method checkAndCreateSchema()
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	 /**
1:df69fcc: 	  * Loads schema , inserts 'rowsToInsert' number of rows into the table
1:df69fcc: 	  */
1:df69fcc: 	 public static void loadSchema(Connection conn,int rowsToInsert,PrintWriter pw)	 {
1:df69fcc: 		 int insertsRemaining = rowsToInsert;
1:df69fcc: 		 PreparedStatement ps=null;
1:df69fcc: 
1:df69fcc: 		 try {
1:df69fcc: 			ps = conn.prepareStatement("insert into SAMPLETBL (t_int, t_char,t_float,t_key) values (?,?,?,?)");
1:df69fcc: 			// Insert one row at a time
1:df69fcc: 			while (insertsRemaining-- >= 0)	{
1:df69fcc: 				 int numInserts = insertRow(ps);
1:df69fcc: 				 if (numInserts != 1)
1:df69fcc: 					pw.println("[NsSampleWork] Failed to insert row.");
1:df69fcc: 			 }
1:df69fcc: 		 } catch (Exception e) {
1:df69fcc: 			 pw.println("[NsSampleWork] Error when loading schema; exception is "+ e);
1:df69fcc: 			 e.printStackTrace();
1:df69fcc: 		   } finally {
1:df69fcc: 			  try {
1:df69fcc: 			   	if(ps != null)
1:df69fcc: 				  ps.close();
1:df69fcc: 			  } catch (Exception e) {
1:df69fcc: 				  e.printStackTrace();
1:df69fcc: 			    }
1:df69fcc: 		     }
1:df69fcc: 	 }//end of method loadSchema()
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 *	Generates random values and performs the inserts into the database
1:df69fcc: 	 */
1:df69fcc: 	public static int insertRow(PreparedStatement ps) {
1:df69fcc: 
1:df69fcc: 		int rowsAdded = 0;
1:df69fcc: 		try	{
1:df69fcc: 			// Generate random values for the datatypes in the sample table
1:df69fcc: 			Random rand = new Random();
1:df69fcc: 			int intVal = Math.abs(rand.nextInt()%1000);
1:df69fcc: 
1:df69fcc: 			String charVal = "Derby";
1:df69fcc: 
1:df69fcc: 			synchronized(lock) {
1:df69fcc: 				charVal += counter;
1:df69fcc: 				counter++;
1:df69fcc: 			}
1:df69fcc: 
1:df69fcc: 			// Set parameter values
1:df69fcc: 			ps.setInt(1, intVal);
1:df69fcc: 			ps.setString(2,charVal);
1:df69fcc: 			ps.setFloat(3, rand.nextFloat()*(float)Math.pow(10,Math.abs(rand.nextInt()%30)));
1:df69fcc: 			ps.setLong(4,rand.nextLong()%10000);
1:df69fcc: 			rowsAdded = ps.executeUpdate();
1:df69fcc: 			return rowsAdded;
1:df69fcc: 		} catch (Exception e) {
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 			return 0;
1:df69fcc: 		  }
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * update a row in the table
1:df69fcc: 	 * updateWhere	is the value of the t_key row which needs to be updated
1:df69fcc: 	 * return  number of rows updated
1:df69fcc: 	 */
1:df69fcc: 	public static int updateRow (PreparedStatement ps,long updateWhere) {
1:df69fcc: 		try	{
1:df69fcc: 		  int val=0;
1:df69fcc: 		  synchronized(lock) {
1:df69fcc: 			val = counter++;
1:df69fcc: 		  }
1:df69fcc: 		  ps.setInt(1,val);
1:df69fcc: 		  ps.setLong(2,updateWhere);
1:df69fcc: 		  return(ps.executeUpdate());
1:df69fcc: 		} catch (SQLException se) {
1:df69fcc: 			se.printStackTrace();
1:df69fcc: 			return 0;
1:df69fcc: 		  }
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	/**
1:df69fcc: 	 * Delete row from table
1:df69fcc: 	 * deleteRow is the value of the t_key of the row to be deleted
1:df69fcc: 	 * return number of rows deleted
1:df69fcc: 	 */
1:df69fcc: 	public static int deleteRow(PreparedStatement ps,long deleteRow) {
1:df69fcc: 		int rowsDeleted = 0;
1:df69fcc: 		try	{
1:df69fcc: 			ps.setLong(1, deleteRow);
1:df69fcc: 			rowsDeleted = ps.executeUpdate();
1:df69fcc: 			return rowsDeleted;
1:df69fcc: 		} catch(Exception e) {
1:df69fcc: 			e.printStackTrace();
1:df69fcc: 			return 0;
1:df69fcc: 		  }
1:df69fcc: 	}
1:df69fcc: 
1:df69fcc: }//end of class NsSampleWork
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 	static Integer lock = 0;
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:44e2455
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:df69fcc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class nserverdemo.NsSampleClientThread
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package nserverdemo;
1: 
1: import java.util.Properties;
1: import java.sql.SQLException;
1: import java.sql.DriverManager;
0: import java.io.IOException;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.io.PrintWriter;
1: import java.util.Properties;
1: import java.sql.PreparedStatement;
1: import java.sql.Connection;
1: import java.util.Random;
0: import java.lang.Math;
1: /**
1:  * NsSampleClientThread thread to perform the NsSampleWork
1:  */
1: public class NsSampleClientThread extends Thread {
1: 
1: 	protected int thread_id;
1: 	protected Properties properties;
1: 	protected PrintWriter pw;
1: 	protected String dbUrl;
1: 
1:   NsSampleClientThread(int id,String dbUrl, Properties properties,PrintWriter pw) {
1: 		this.thread_id=id;
1: 		this.dbUrl = dbUrl;
1: 		this.properties = properties;
1: 		this.pw = pw;
1: 	}
1: 
1:    public void run() {
1: 	 System.out.println("[NsSampleClientThread] Thread id - "+this.thread_id + "; started.");
1: 	 NsSampleWork w = new NsSampleWork(this.thread_id,dbUrl,properties,pw);
1: 	 w.doWork();  // do all the NsSampleWork
1: 	 pw.println("[NsSampleClientThread] Thread id - "+this.thread_id+"; finished all tasks.");
1:    }
1: }
1: 
1: 
1: 
1: /**
1:  * NsSampleWork class represents all the work done in the sample demo program.
1:  * It includes
1:  * getting a connection to the database, creating and loading of schema,
1:  * preparing and execution of SQL statements (insert, select, update, delete )
1:  */
1: class NsSampleWork {
1: 
1: 	protected int thread_id;
1: 	protected String dbUrl;
1: 	protected Properties properties;
1: 	PrintWriter pw;
1: 	PreparedStatement select = null;
1: 	PreparedStatement insert = null;
1: 	PreparedStatement delete = null;
1: 	PreparedStatement update = null;
1: 	PreparedStatement getMaxKey = null;
1: 
1: 
1: 
1: 	public static int counter=0;
0: 	static Integer lock = new Integer(0);
1: 	 /**
1: 	  * dbUrl is the database url to connect to
1: 	  */
1: 	 NsSampleWork(int id, String dbURL,Properties properties,PrintWriter pw) {
1: 		this.thread_id = id;
1: 		this.dbUrl = dbURL;
1: 		this.pw = pw;
1: 		this.properties = properties;
1: 	 }
1: 
1: 
1: 	 /**
1: 	  *	gets a database connection
1: 	  * If the dbUrl is trying to connect to the Derby NetNsSampleWork server using JCC
1: 	  * then the jcc driver must be already loaded before calling this method,
1: 	  * else there will be an error
1: 	  * return jcc connection if no error, else null
1: 	  */
1: 	 public Connection getConnection(String dbUrl, Properties properties) {
1: 		 Connection conn = null;
1: 		 try {
1: 			pw.println("[NsSampleWork] Thread id - "+thread_id + "; requests database connection, dbUrl ="+dbUrl);
1: 			conn = DriverManager.getConnection(dbUrl, properties);
1: 		  } catch (Exception e) {
1: 			 System.out.println("[NsSampleWork] Thread id - "+ thread_id + "; failed to get database connection. Exception thrown:");
1: 			 e.printStackTrace();
1: 		    }
1: 		  return conn;
1: 	 }
1: 
1: 
1: 	 /**
1: 	  * set the connection to this isolation level
1: 	  */
1: 	 public void setIsolationLevel(Connection conn, int level) {
1: 		 try {
1: 			conn.setTransactionIsolation(level);
1: 		 } catch (Exception e) {
1: 			 pw.println("[NsSampleWork] Thread id - "+ thread_id +"; setIsolationLevel failed. Exception thrown: ");
1: 			 e.printStackTrace();
1: 		   }
1: 	 }
1: 
1: 
1: 	 /**
1: 	  * close connection
1: 	  */
1: 	 public void closeConnection(Connection conn) {
1: 		 try {
1: 			if(conn != null)
1: 			 	conn.close();
1: 			pw.println("[NsSampleWork] Thread id - "+thread_id + "; closed connection to the database.");
1: 		 } catch (Exception e) {
1: 			 pw.println("[NsSampleWork] Thread id - "+thread_id + "; error when closing connection;"+ e);
1: 			 e.printStackTrace();
1: 		   }
1: 	 }
1: 
1: 
1: 	 /**
1: 	  * prepare required sql statements
1: 	  */
1: 	 public void prepareStmts(Connection conn) {
1: 		 try {
1: 		 	select = conn.prepareStatement("select t_int,  t_char, t_float,t_key from SAMPLETBL where t_key = ?");
1: 		 	insert = conn.prepareStatement("insert into SAMPLETBL (t_int, t_char,t_float,t_key) values (?,?,?,?)");
1: 		 	update = conn.prepareStatement(" update SAMPLETBL set t_int = ? where t_key = ?");
1: 		 	delete = conn.prepareStatement("delete from SAMPLETBL where t_key = ?");
1: 		 	getMaxKey = conn.prepareStatement("select max(t_key) from SAMPLETBL");
1: 	 	} catch (Exception e) {
1: 			e.printStackTrace();
1: 		  }
1: 	 }
1: 
1: 
1: 	 /**
1: 	  * executing a select and retrieving the results
1: 	  * select the row with t_key value as 'selectWhat'
1: 	  */
1: 	 public int doSelectOperation(long selectWhat) {
1: 		 int numRowsSelected = 0;
1: 		 ResultSet rs = null;
1: 
1: 		 try {
1: 			 select.setLong(1,selectWhat);
1: 			 rs = select.executeQuery();
1: 
1: 			 while (rs.next()) {
1: 				 numRowsSelected++;
1: 
1: 				 int intVal = rs.getInt(1);
1: 				 String strVal = rs.getString(2);
1: 				 float floatVal = rs.getFloat(3);
1: 				 long longVal = rs.getLong(4); 	//t_key column
1: 
1: 				 pw.println("[NsSampleWork] Thread id - "+ thread_id +" selected "+numRowsSelected +" row ["+ intVal + ","
1: 				 			+ strVal +","+ floatVal +","+ longVal +"]");
1: 			 }
1: 		 } catch (Exception e) {
1: 			e.printStackTrace();
1: 		   } finally {
1: 			   try {
1: 			 	if(rs != null)
1: 					rs.close();
1: 			   } catch (Exception e) {
1: 				   e.printStackTrace();
1: 			     }
1: 		     }
1: 		 return numRowsSelected;
1: 	 }
1: 
1: 
1: 	 /**
1: 	  *  Opens a connection and executes DML (insert, select, update, delete) operations
1: 	  */
1: 	 public void doWork() {
1: 
1: 	   Connection conn = null;
1: 	   ResultSet rs = null;
1: 	   try {
1: 		 conn = getConnection(dbUrl,properties);
1: 
1: 		 if(conn == null)
1: 		 	throw new Exception("Failed to obtain connection!");
1: 
1: 		 conn.setAutoCommit(true);
1: 
1: 		 // Setting isolation level to read uncommitted, since this is a sample application.
1: 		 // Please set the isolation level depending on the requirements of your application
1: 		 setIsolationLevel(conn,Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
1: 		 prepareStmts(conn);
1: 
1: 		 // Perform the DML operations
1: 		 for (int i=0; i<NsSample.ITERATIONS; i++) {
1: 			 // Choose between either a select or any one of (insert or update or delete ) operation
1: 			 int choice = (int) (Math.random() * 100) % 2;
1: 			 switch (choice) {
1: 				 case 0: { //select a row
1: 					rs = getMaxKey.executeQuery(); //gets max t_key value
1: 					long selectWhere = 0;
1: 					if(rs.next()) {
1: 						selectWhere = rs.getLong(1);
1: 					}
1: 					int numSelected = doSelectOperation(selectWhere);
1: 					break;
1: 				 }
1: 
1: 				 case 1: { //do an insert, update or delete
1: 					doIUDOperation();
1: 					break;
1: 				 }
1: 			 } //end of switch()
1: 		 }//enf of for()
1: 
1: 	   } catch(Exception e) {
1: 		   pw.println("[NsSampleWork] Thread id - "+ thread_id + "; error when performing dml operations; ");
1: 		   e.printStackTrace();
1: 	     } finally {
1: 		   	try {
1: 				if(rs != null)
1: 					rs.close();
1: 
1: 				closeConnection(conn);
1: 				cleanup();
1: 		    } catch(Exception ee) {
1: 			   pw.println("[NsSampleWork] Thread id - " + thread_id+"; error when cleaning up connection, resultset; exception is ");
1: 			   ee.printStackTrace();
1: 		      }
1: 	       }
1: 	 }//end of method doNsSampleWork()
1: 
1: 
1: 	/**
1: 	 * close resources
1: 	 */
1: 	public void cleanup() {
1: 	  try{
1: 		if(select != null)
1: 			select.close();
1: 		if(insert != null)
1: 			insert.close();
1: 		if(delete != null)
1: 			delete.close();
1: 		if(update != null)
1: 			update.close();
1: 		if(getMaxKey != null)
1: 			getMaxKey.close();
1:   	  } catch (Exception e) {
1: 		  e.printStackTrace();
1: 	    }
1: 	}
1: 
1: 
1: 	 /**
1: 	  * Perform an insert or an update or delete operation
1: 	  */
1: 	 public void doIUDOperation() {
1: 		 int decide = (int) (Math.random() * 100) % 3;
1: 		 ResultSet rs = null;
1: 
1: 		 try {
1: 			switch (decide) {
1: 				 case 0: { //insert
1: 						int numInsert = insertRow(insert);
1: 						pw.println("[NsSampleWork] Thread id - "+thread_id+"; inserted "+numInsert+" row.");
1: 						break;
1: 				 }
1: 
1: 				 case 1: { //update
1: 						rs = getMaxKey.executeQuery();
1: 						long updateRow=0;
1: 						if(rs.next())
1: 							updateRow = rs.getLong(1);
1: 						int numUpdate = updateRow(update,updateRow);
1: 						System.out.println("[NsSampleWork] Thread id - "+thread_id+"; updated "+numUpdate+" row with t_key = " + updateRow);
1: 						break;
1: 				 }
1: 
1: 				 case 2: { //delete
1: 						rs = getMaxKey.executeQuery();
1: 						long deleteRow =0;
1: 						if(rs.next())
1: 							deleteRow = rs.getLong(1);
1: 						int numDelete = deleteRow(delete,deleteRow);
1: 						System.out.println("[NsSampleWork] Thread id - "+thread_id+"; deleted "+numDelete+" row with t_key = " + deleteRow);
1: 						break;
1: 				 }
1: 		 	}//end of switch()
1: 	 	} catch (Exception e) {
1: 			e.printStackTrace();
1: 		  } finally {
1: 			  try {
1: 			  	if(rs != null)
1: 				  rs.close();
1: 			  } catch (Exception e) {
1: 				  e.printStackTrace();
1: 			    }
1: 		    }
1: 	 }//end of method doIUDOperation()
1: 
1: 
1: 	 /**
1: 	  * Create necessary schema if schema not already created
1: 	  */
1: 	 public static void checkAndCreateSchema(Connection conn,PrintWriter pw) {
1: 		Statement stmt = null;
1: 		ResultSet rs = null;
1: 
1: 		try	{
1: 			conn.setAutoCommit(true);
1: 		} catch (SQLException  se) {
1: 			pw.println("[NsSampleWork] Error when setting autocommit on connection; exception thrown: ");
1: 			se.printStackTrace();
1: 		  }
1: 
1: 		// Check for existence of schema by quering the catalog systables
1: 		try {
1: 			stmt = conn.createStatement();
1: 			rs = stmt.executeQuery("select tablename from sys.systables " +
1: 								" where tablename = 'SAMPLETBL'");
1: 			if (rs.next()) {
1: 				pw.println("[NsSampleWork] Table 'SAMPLETBL' already exists; no need to create schema again.");
1: 				return;
1: 			}
1: 		} catch (SQLException  se) {
1: 			pw.println("[NsSampleWork] Unable to query the metadata for existence of table SAMPLETBL; exception is "+se);
1: 			pw.println("[NsSampleWork] Exiting the application.");
1: 			se.printStackTrace();
1: 			System.exit(1);
1: 		  }
1: 
1: 		// Create the necessary table and indexes
1: 		try {
1: 			pw.println("[NsSampleWork] Begin creating table - SAMPLETBL and necessary indexes. ");
1: 			stmt.execute("create table SAMPLETBL (" +
1: 						  "t_int int," +
1: 						  "t_char char(15),"+
1: 						  "t_float float," +
1: 						  "t_key bigint )");
1: 			stmt.execute("create index t_char_idx on SAMPLETBL ( t_char)");
1: 			stmt.execute("create index t_float_idx on SAMPLETBL ( t_float)");
1: 			stmt.execute("create index t_key_idx on SAMPLETBL ( t_key )" );
1: 		} catch (Exception  e) {
1: 			pw.println("[NsSampleWork] Error when creating schema; exception is " + e.toString());
1: 			pw.println("[NsSampleWork] Exiting the application.");
1: 			e.printStackTrace();
1: 			System.exit(1);
1: 		  } finally {
1: 			  try {
1: 			  	if(rs != null)
1: 				  rs.close();
1: 			  	if(stmt != null)
1: 				  stmt.close();
1: 			  } catch (Exception e) {
1: 				  e.printStackTrace();
1: 			    }
1: 			}
1: 	 }//end of method checkAndCreateSchema()
1: 
1: 
1: 	 /**
1: 	  * Loads schema , inserts 'rowsToInsert' number of rows into the table
1: 	  */
1: 	 public static void loadSchema(Connection conn,int rowsToInsert,PrintWriter pw)	 {
1: 		 int insertsRemaining = rowsToInsert;
1: 		 PreparedStatement ps=null;
1: 
1: 		 try {
1: 			ps = conn.prepareStatement("insert into SAMPLETBL (t_int, t_char,t_float,t_key) values (?,?,?,?)");
1: 			// Insert one row at a time
1: 			while (insertsRemaining-- >= 0)	{
1: 				 int numInserts = insertRow(ps);
1: 				 if (numInserts != 1)
1: 					pw.println("[NsSampleWork] Failed to insert row.");
1: 			 }
1: 		 } catch (Exception e) {
1: 			 pw.println("[NsSampleWork] Error when loading schema; exception is "+ e);
1: 			 e.printStackTrace();
1: 		   } finally {
1: 			  try {
1: 			   	if(ps != null)
1: 				  ps.close();
1: 			  } catch (Exception e) {
1: 				  e.printStackTrace();
1: 			    }
1: 		     }
1: 	 }//end of method loadSchema()
1: 
1: 
1: 
1: 	/**
1: 	 *	Generates random values and performs the inserts into the database
1: 	 */
1: 	public static int insertRow(PreparedStatement ps) {
1: 
1: 		int rowsAdded = 0;
1: 		try	{
1: 			// Generate random values for the datatypes in the sample table
1: 			Random rand = new Random();
1: 			int intVal = Math.abs(rand.nextInt()%1000);
1: 
1: 			String charVal = "Derby";
1: 
1: 			synchronized(lock) {
1: 				charVal += counter;
1: 				counter++;
1: 			}
1: 
1: 			// Set parameter values
1: 			ps.setInt(1, intVal);
1: 			ps.setString(2,charVal);
1: 			ps.setFloat(3, rand.nextFloat()*(float)Math.pow(10,Math.abs(rand.nextInt()%30)));
1: 			ps.setLong(4,rand.nextLong()%10000);
1: 			rowsAdded = ps.executeUpdate();
1: 			return rowsAdded;
1: 		} catch (Exception e) {
1: 			e.printStackTrace();
1: 			return 0;
1: 		  }
1: 	}
1: 
1: 
1: 	/**
1: 	 * update a row in the table
1: 	 * updateWhere	is the value of the t_key row which needs to be updated
1: 	 * return  number of rows updated
1: 	 */
1: 	public static int updateRow (PreparedStatement ps,long updateWhere) {
1: 		try	{
1: 		  int val=0;
1: 		  synchronized(lock) {
1: 			val = counter++;
1: 		  }
1: 		  ps.setInt(1,val);
1: 		  ps.setLong(2,updateWhere);
1: 		  return(ps.executeUpdate());
1: 		} catch (SQLException se) {
1: 			se.printStackTrace();
1: 			return 0;
1: 		  }
1: 	}
1: 
1: 
1: 	/**
1: 	 * Delete row from table
1: 	 * deleteRow is the value of the t_key of the row to be deleted
1: 	 * return number of rows deleted
1: 	 */
1: 	public static int deleteRow(PreparedStatement ps,long deleteRow) {
1: 		int rowsDeleted = 0;
1: 		try	{
1: 			ps.setLong(1, deleteRow);
1: 			rowsDeleted = ps.executeUpdate();
1: 			return rowsDeleted;
1: 		} catch(Exception e) {
1: 			e.printStackTrace();
1: 			return 0;
1: 		  }
1: 	}
1: 
1: }//end of class NsSampleWork
commit:6f35451
/////////////////////////////////////////////////////////////////////////
0: 
0:    Derby - Class nserverdemo.NsSampleClientThread
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
commit:3288ee5
/////////////////////////////////////////////////////////////////////////
0: 	 public static void checkAndCreateSchema(Connection conn,PrintWriter pw) {
/////////////////////////////////////////////////////////////////////////
0: 	 public static void loadSchema(Connection conn,int rowsToInsert,PrintWriter pw)	 {
commit:67614ad
/////////////////////////////////////////////////////////////////////////
============================================================================