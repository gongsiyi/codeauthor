3:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode
1:1880322: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
5:eac0369:  */
19:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: 
1:4549ad4: abstract class BinaryLogicalOperatorNode extends BinaryOperatorNode
3:eac0369: {
1:eac0369: 	boolean	shortCircuitValue;
1:eac0369: 
1:3bb140c:     BinaryLogicalOperatorNode(
1:3bb140c:             ValueNode leftOperand,
1:3bb140c:             ValueNode rightOperand,
1:3bb140c:             String methodName,
1:3bb140c:             ContextManager cm) {
1:3bb140c:         super(leftOperand, rightOperand, methodName, methodName,
1:3bb140c:                 ClassName.BooleanDataValue, ClassName.BooleanDataValue, cm);
1:3bb140c:     }
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 	 * Bind this logical operator.  All that has to be done for binding
1:eac0369: 	 * a logical operator is to bind the operands, check that both operands
1:eac0369: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
2:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:4549ad4: 	{
1:eac0369: 		//following is to check if we have something like "? AND 1=1" or "2>1 OR ?" 
1:eac0369: 		if (leftOperand.isParameterNode() || rightOperand.isParameterNode())
1:870f7cd: 			throw StandardException.newException( SQLState.LANG_UNTYPED_PARAMETER_IN_WHERE_CLAUSE );
1:eac0369: 
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		return this;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that eliminateNots() did its job correctly.  Verify that
1:eac0369: 	 * there are no NotNodes above the top level comparison operators
1:eac0369: 	 * and boolean expressions.
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	boolean verifyEliminateNots()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.ASSERT)
1:eac0369: 		{
1:eac0369: 			return (leftOperand.verifyEliminateNots() &&
1:eac0369: 					rightOperand.verifyEliminateNots());
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for this logical binary operator.
1:4549ad4: 	 * This is used for AND and OR. the IsNode extends this class but
1:4549ad4: 	 * overrides generateExpression.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException
1:eac0369: 	{		
1:eac0369: 		/*
1:eac0369: 		** This generates the following code:
1:eac0369: 		**
1:16a9182: 		** (<leftOperand>.equals(shortCircuitValue) ?
1:4549ad4: 		**	 <leftOperand> :
1:4549ad4: 		**   <leftOperand>.<and/or>(<rightOperand>)
1:eac0369: 		**
1:eac0369: 		** The ?: operator accomplishes the short-circuiting.  We save the
1:16a9182: 		** value of the left operand on the stack so we don't have to evaluate
1:4549ad4: 		** it twice.
1:4549ad4: 		**
1:4549ad4: 		** The BooleanDataValue.{and,or} methods return an immutable BooleanDataValue
1:4549ad4: 		** and an immutable BooleanDataValue is returned by this generated code in
1:4549ad4: 		** the short circuit case.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** See whether the left operand equals the short-circuit value.
2:eac0369: 		** Generated code is:
1:eac0369: 		**		.equals(shortCircuitValue)
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		leftOperand.generateExpression(acb, mb);
1:1880322: 		// stack - left
1:1880322: 
1:1880322: 		// put an extra left of the stack for potential
1:1880322: 		// use in the else clause.
1:1880322: 		mb.dup();
1:1880322: 		// stack - left, left
2:eac0369: 		mb.push(shortCircuitValue);
1:1880322: 		// stack - left, left, shortcircuit
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", "boolean", 1);
1:1880322: 		// stack left, result
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Generate the if expression.  This is what accomplishes
1:eac0369: 		** short-circuiting.
1:eac0369: 		**
1:eac0369: 		** Generated code is:
1:eac0369: 		**
1:eac0369: 		**		<test for short circuiting> ?
1:4549ad4: 		**			<call to BooleanDataValue.getImmutable> : <call to operator method>
1:4549ad4: 		**
1:4549ad4: 		** For AND short circuiting shortcircuit value will be false, so that
1:4549ad4: 		** if left is false, no need to evaluate the right and the result will be false.
1:4549ad4: 		**
1:4549ad4: 		** For OR short circuiting shortcircuit value will be true, so that
1:4549ad4: 		** if left is true, no need to to evaluate the right and the result will be true.
1:4549ad4: 		**
1:4549ad4: 		** In both cases the result is the same as the left operand.
1:4549ad4: 		**
1:4549ad4: 		** TODO: Could short circuit when the left value is NULL as well. Then
1:4549ad4: 		** the result would be NULL in either case and still equal to the left value.
1:4549ad4: 		** This would require a different check on the conditional.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		mb.conditionalIf();
1:1880322: 		
1:1880322: 		// stack: left
1:4549ad4: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getImmutable",
1:4549ad4: 				ClassName.BooleanDataValue, 0);
1:1880322: 		
1:4549ad4: 		// stack: result (matching left)
1:eac0369: 
1:eac0369: 		mb.startElseCode();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Generate the return value if the left operand does not equal the
1:eac0369: 		** short-circuit value.  This is the call to "and" or "or".
1:eac0369: 		**
1:eac0369: 		** Generated code is:
1:eac0369: 		**
1:eac0369: 		**	<fieldx>.<methodName>(<rightOperand>)
1:eac0369: 		*/
1:1880322: 
1:1880322: 		// stack: left
1:eac0369: 
1:eac0369: 		rightOperand.generateExpression(acb, mb);
1:4549ad4: 
1:4549ad4: 		// stack: left, right
1:eac0369: 		mb.upCast(ClassName.BooleanDataValue);
1:eac0369: 
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, methodName, ClassName.BooleanDataValue, 1);
1:4549ad4: 		// stack: result(left op right)
1:1880322: 
1:eac0369: 		mb.completeConditional();
1:4549ad4: 		//	 stack: result
1:4549ad4: 
1:eac0369: 	}
1:1880322: 
1:eac0369: 	DataTypeDescriptor resolveLogicalBinaryOperator(
1:eac0369: 								DataTypeDescriptor leftType,
1:eac0369: 								DataTypeDescriptor rightType)
1:eac0369: 							throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( ( ! (leftType.getTypeId().isBooleanTypeId()) ) ||
1:eac0369: 			 ( ! (rightType.getTypeId().isBooleanTypeId()) ) )
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_BINARY_LOGICAL_NON_BOOLEAN);
1:eac0369: 		}
1:eac0369: 
1:32812bd: 		return leftType.getNullabilityType(
1:eac0369: 					leftType.isNullable() || rightType.isNullable());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:     BinaryLogicalOperatorNode(
1:             ValueNode leftOperand,
1:             ValueNode rightOperand,
1:             String methodName,
1:             ContextManager cm) {
1:         super(leftOperand, rightOperand, methodName, methodName,
1:                 ClassName.BooleanDataValue, ClassName.BooleanDataValue, cm);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
commit:870f7cd
/////////////////////////////////////////////////////////////////////////
1: 			throw StandardException.newException( SQLState.LANG_UNTYPED_PARAMETER_IN_WHERE_CLAUSE );
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ac12b1f
/////////////////////////////////////////////////////////////////////////
commit:32812bd
/////////////////////////////////////////////////////////////////////////
1: 		return leftType.getNullabilityType(
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
1: abstract class BinaryLogicalOperatorNode extends BinaryOperatorNode
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * This is used for AND and OR. the IsNode extends this class but
1: 	 * overrides generateExpression.
/////////////////////////////////////////////////////////////////////////
1: 	{		
1: 		**	 <leftOperand> :
1: 		**   <leftOperand>.<and/or>(<rightOperand>)
1: 		** it twice.
1: 		**
1: 		** The BooleanDataValue.{and,or} methods return an immutable BooleanDataValue
1: 		** and an immutable BooleanDataValue is returned by this generated code in
1: 		** the short circuit case.
/////////////////////////////////////////////////////////////////////////
1: 		**			<call to BooleanDataValue.getImmutable> : <call to operator method>
1: 		**
1: 		** For AND short circuiting shortcircuit value will be false, so that
1: 		** if left is false, no need to evaluate the right and the result will be false.
1: 		**
1: 		** For OR short circuiting shortcircuit value will be true, so that
1: 		** if left is true, no need to to evaluate the right and the result will be true.
1: 		**
1: 		** In both cases the result is the same as the left operand.
1: 		**
1: 		** TODO: Could short circuit when the left value is NULL as well. Then
1: 		** the result would be NULL in either case and still equal to the left value.
1: 		** This would require a different check on the conditional.
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getImmutable",
1: 				ClassName.BooleanDataValue, 0);
1: 		// stack: result (matching left)
/////////////////////////////////////////////////////////////////////////
1: 
1: 		// stack: left, right
1: 		// stack: result(left op right)
1: 		//	 stack: result
1: 
commit:16a9182
/////////////////////////////////////////////////////////////////////////
1: 		** (<leftOperand>.equals(shortCircuitValue) ?
0: 		**   <leftOperand>.<and/or>(<rightOperand>, nullability)
1: 		** value of the left operand on the stack so we don't have to evaluate
commit:1880322
/////////////////////////////////////////////////////////////////////////
1: 		// stack - left
1: 
1: 		// put an extra left of the stack for potential
1: 		// use in the else clause.
1: 		mb.dup();
1: 		// stack - left, left
1: 		// stack - left, left, shortcircuit
1: 		// stack left, result
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		// stack: left
1: 		
/////////////////////////////////////////////////////////////////////////
1: 
0: 		// stack: left, shortcircuit
0: 		// stack: left, dvf
/////////////////////////////////////////////////////////////////////////
1: 		// stack: left
1: 		
0: 		// we duplicate left here rather than just pop'ing left
0: 		// in the 'then' clause. pop'ing in the then clause
0: 		// breaks the current conditional implementation
0: 		// which is modeling a simple ? : operator.
0: 		// note that this will leave through either path
0: 		// an extra left on the stack after the conditional
0: 		mb.dup();
0: 		// stack left, left
0: 		// stack: left, left, right
0: 		// stack: left, result(left op right)
0: 		//	 stack: left, result
1: 		
0: 		// remove the extra left on the stack, see the
0: 		// comments in the else clause.
0: 		mb.swap();
0: 		// stack: result, left
0: 		mb.pop();
1: 		
0: 		// stack: result
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import java.lang.reflect.Modifier;
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.util.Vector;
1: 
0: public abstract class BinaryLogicalOperatorNode extends BinaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	boolean	shortCircuitValue;
1: 
1: 	/**
0: 	 * Initializer for a BinaryLogicalOperatorNode
1: 	 *
0: 	 * @param leftOperand	The left operand of the comparison
0: 	 * @param rightOperand	The right operand of the comparison
0: 	 * @param shortCircuitValue	The value which, if found on the left, means
0: 	 *							we don't have to evaluate the right.
0: 	 * @param methodName	The name of the method to call in the generated
0: 	 *						class.  In this case, it's actually an operator
0: 	 *						name.
1: 	 */
1: 
0: 	public void init(
0: 				Object	leftOperand,
0: 				Object	rightOperand,
0: 				Object		shortCircuitValue,
0: 				Object		methodName)
1: 	{
0: 		/* For logical operators, the operator and method names are the same */
0: 		super.init(leftOperand, rightOperand, methodName, methodName,
0: 				ClassName.BooleanDataValue, ClassName.BooleanDataValue);
0: 		this.shortCircuitValue = ((Boolean) shortCircuitValue).booleanValue();
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operands, check that both operands
1: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
1: 			throws StandardException
1: 	{
1: 		//following is to check if we have something like "? AND 1=1" or "2>1 OR ?" 
1: 		if (leftOperand.isParameterNode() || rightOperand.isParameterNode())
0: 			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
1: 
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that eliminateNots() did its job correctly.  Verify that
1: 	 * there are no NotNodes above the top level comparison operators
1: 	 * and boolean expressions.
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
1: 	boolean verifyEliminateNots()
1: 	{
1: 		if (SanityManager.ASSERT)
1: 		{
1: 			return (leftOperand.verifyEliminateNots() &&
1: 					rightOperand.verifyEliminateNots());
1: 		}
1: 		else
1: 		{
1: 			return true;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Do code generation for this logical binary operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 		throws StandardException
1: 	{
1: 		/*
1: 		** This generates the following code:
1: 		**
0: 		** (<fieldx> = <leftOperand>).equals(shortCircuitValue) ?
0: 		**	 <fieldy> = <shortCircuitValue, nullability> :
0: 		**   fieldx.<and/or>(<rightOperand>, nullability)
1: 		**
1: 		** The ?: operator accomplishes the short-circuiting.  We save the
0: 		** value of the left operand in a field so we don't have to evaluate
0: 		** it twice.  We save the return value of the getBoolean() call so
0: 		** we can re-use that object rather than allocate a new one every
0: 		** time this method is called.
1: 		*/
1: 
1: 		/*
0: 		** Save the evaluation of the left operand in a field.
1: 		** Generated code is:
0: 		**		(<fieldx> = <leftOperand>)
1: 		*/
0: 		LocalField leftOperandSaver = acb.newFieldDeclaration(Modifier.PRIVATE,
0: 												ClassName.BooleanDataValue);
1: 
1: 		/*
1: 		** See whether the left operand equals the short-circuit value.
1: 		** Generated code is:
1: 		**		.equals(shortCircuitValue)
1: 		*/
1: 
1: 		leftOperand.generateExpression(acb, mb);
0: 		mb.putField(leftOperandSaver);
1: 		mb.push(shortCircuitValue);
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", "boolean", 1);
1: 
1: 		/*
1: 		** Generate the if expression.  This is what accomplishes
1: 		** short-circuiting.
1: 		**
1: 		** Generated code is:
1: 		**
1: 		**		<test for short circuiting> ?
0: 		**			<call to getBooleanDataValue> : <call to operator method>
1: 		*/
1: 
1: 		mb.conditionalIf();
1: 
1: 		/*
0: 		** Generate the return value if the left operand equals the short-
0: 		** circuit value.  Generated code calls a static method in the
0: 		** boolean datatype implementation that allocates a new object
0: 		** if necessary, and re-uses the object if it already exists.
1: 		*/
0: 		LocalField reusableBoolean = acb.newFieldDeclaration(Modifier.PRIVATE,
0: 												ClassName.BooleanDataValue);
1: 
1: 		mb.push(shortCircuitValue);
0: 		acb.generateDataValue(mb, getTypeCompiler(), reusableBoolean);
1: 
1: 
1: 		mb.startElseCode();
1: 
1: 		/*
1: 		** Generate the return value if the left operand does not equal the
1: 		** short-circuit value.  This is the call to "and" or "or".
1: 		**
1: 		** Generated code is:
1: 		**
1: 		**	<fieldx>.<methodName>(<rightOperand>)
1: 		*/
1: 
0: 		mb.getField(leftOperandSaver);
1: 
1: 		rightOperand.generateExpression(acb, mb);
1: 		mb.upCast(ClassName.BooleanDataValue);
1: 
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, methodName, ClassName.BooleanDataValue, 1);
1: 
1: 		mb.completeConditional();
1: 	}
1: 
1: 	DataTypeDescriptor resolveLogicalBinaryOperator(
1: 								DataTypeDescriptor leftType,
1: 								DataTypeDescriptor rightType)
1: 							throws StandardException
1: 	{
1: 		if ( ( ! (leftType.getTypeId().isBooleanTypeId()) ) ||
1: 			 ( ! (rightType.getTypeId().isBooleanTypeId()) ) )
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_BINARY_LOGICAL_NON_BOOLEAN);
1: 		}
1: 
0: 		return new DataTypeDescriptor(leftType,
1: 					leftType.isNullable() || rightType.isNullable());
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
0: 		//following 2 ifs are to check if we have something like "+? AND 1=1" or "2>1 OR -?" ie -?/+? by themselves 
0: 		if ((leftOperand instanceof UnaryOperatorNode) &&
0: 				((UnaryOperatorNode)leftOperand).isUnaryMinusOrPlusWithParameter())
0: 			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
0: 		if ((rightOperand instanceof UnaryOperatorNode) &&
0: 				((UnaryOperatorNode)rightOperand).isUnaryMinusOrPlusWithParameter())
0: 			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import java.lang.reflect.Modifier;
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.util.Vector;
0: 
0: public abstract class BinaryLogicalOperatorNode extends BinaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean	shortCircuitValue;
0: 
0: 	/**
0: 	 * Initializer for a BinaryLogicalOperatorNode
0: 	 *
0: 	 * @param leftOperand	The left operand of the comparison
0: 	 * @param rightOperand	The right operand of the comparison
0: 	 * @param shortCircuitValue	The value which, if found on the left, means
0: 	 *							we don't have to evaluate the right.
0: 	 * @param methodName	The name of the method to call in the generated
0: 	 *						class.  In this case, it's actually an operator
0: 	 *						name.
0: 	 */
0: 
0: 	public void init(
0: 				Object	leftOperand,
0: 				Object	rightOperand,
0: 				Object		shortCircuitValue,
0: 				Object		methodName)
0: 	{
0: 		/* For logical operators, the operator and method names are the same */
0: 		super.init(leftOperand, rightOperand, methodName, methodName,
0: 				ClassName.BooleanDataValue, ClassName.BooleanDataValue);
0: 		this.shortCircuitValue = ((Boolean) shortCircuitValue).booleanValue();
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operands, check that both operands
0: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
0: 			throws StandardException
0: 	{
0: 		//following is to check if we have something like "? AND 1=1" or "2>1 OR ?" 
0: 		if (leftOperand.isParameterNode() || rightOperand.isParameterNode())
0: 			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
0: 
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that eliminateNots() did its job correctly.  Verify that
0: 	 * there are no NotNodes above the top level comparison operators
0: 	 * and boolean expressions.
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	boolean verifyEliminateNots()
0: 	{
0: 		if (SanityManager.ASSERT)
0: 		{
0: 			return (leftOperand.verifyEliminateNots() &&
0: 					rightOperand.verifyEliminateNots());
0: 		}
0: 		else
0: 		{
0: 			return true;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Do code generation for this logical binary operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 		throws StandardException
0: 	{
0: 		/*
0: 		** This generates the following code:
0: 		**
0: 		** (<fieldx> = <leftOperand>).equals(shortCircuitValue) ?
0: 		**	 <fieldy> = <shortCircuitValue, nullability> :
0: 		**   fieldx.<and/or>(<rightOperand>, nullability)
0: 		**
0: 		** The ?: operator accomplishes the short-circuiting.  We save the
0: 		** value of the left operand in a field so we don't have to evaluate
0: 		** it twice.  We save the return value of the getBoolean() call so
0: 		** we can re-use that object rather than allocate a new one every
0: 		** time this method is called.
0: 		*/
0: 
0: 		/*
0: 		** Save the evaluation of the left operand in a field.
0: 		** Generated code is:
0: 		**		(<fieldx> = <leftOperand>)
0: 		*/
0: 		LocalField leftOperandSaver = acb.newFieldDeclaration(Modifier.PRIVATE,
0: 												ClassName.BooleanDataValue);
0: 
0: 		/*
0: 		** See whether the left operand equals the short-circuit value.
0: 		** Generated code is:
0: 		**		.equals(shortCircuitValue)
0: 		*/
0: 
0: 		leftOperand.generateExpression(acb, mb);
0: 		mb.putField(leftOperandSaver);
0: 		mb.push(shortCircuitValue);
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", "boolean", 1);
0: 
0: 		/*
0: 		** Generate the if expression.  This is what accomplishes
0: 		** short-circuiting.
0: 		**
0: 		** Generated code is:
0: 		**
0: 		**		<test for short circuiting> ?
0: 		**			<call to getBooleanDataValue> : <call to operator method>
0: 		*/
0: 
0: 		mb.conditionalIf();
0: 
0: 		/*
0: 		** Generate the return value if the left operand equals the short-
0: 		** circuit value.  Generated code calls a static method in the
0: 		** boolean datatype implementation that allocates a new object
0: 		** if necessary, and re-uses the object if it already exists.
0: 		*/
0: 		LocalField reusableBoolean = acb.newFieldDeclaration(Modifier.PRIVATE,
0: 												ClassName.BooleanDataValue);
0: 
0: 		mb.push(shortCircuitValue);
0: 		acb.generateDataValue(mb, getTypeCompiler(), reusableBoolean);
0: 
0: 
0: 		mb.startElseCode();
0: 
0: 		/*
0: 		** Generate the return value if the left operand does not equal the
0: 		** short-circuit value.  This is the call to "and" or "or".
0: 		**
0: 		** Generated code is:
0: 		**
0: 		**	<fieldx>.<methodName>(<rightOperand>)
0: 		*/
0: 
0: 		mb.getField(leftOperandSaver);
0: 
0: 		rightOperand.generateExpression(acb, mb);
0: 		mb.upCast(ClassName.BooleanDataValue);
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, methodName, ClassName.BooleanDataValue, 1);
0: 
0: 		mb.completeConditional();
0: 	}
0: 
0: 	DataTypeDescriptor resolveLogicalBinaryOperator(
0: 								DataTypeDescriptor leftType,
0: 								DataTypeDescriptor rightType)
0: 							throws StandardException
0: 	{
0: 		if ( ( ! (leftType.getTypeId().isBooleanTypeId()) ) ||
0: 			 ( ! (rightType.getTypeId().isBooleanTypeId()) ) )
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_BINARY_LOGICAL_NON_BOOLEAN);
0: 		}
0: 
0: 		return new DataTypeDescriptor(leftType,
0: 					leftType.isNullable() || rightType.isNullable());
0: 	}
0: }
============================================================================