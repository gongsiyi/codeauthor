1:45ac509: /**
1:45ac509:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrecedenceTest
1:45ac509:  *
1:45ac509:  * Licensed to the Apache Software Foundation (ASF) under one
1:45ac509:  * or more contributor license agreements.  See the NOTICE file
1:45ac509:  * distributed with this work for additional information
1:45ac509:  * regarding copyright ownership.  The ASF licenses this file
1:45ac509:  * to you under the Apache License, Version 2.0 (the
1:45ac509:  * "License"); you may not use this file except in compliance
1:45ac509:  * with the License.  You may obtain a copy of the License at
1:45ac509:  *
1:45ac509:  *   http://www.apache.org/licenses/LICENSE-2.0
1:45ac509:  *
1:45ac509:  * Unless required by applicable law or agreed to in writing,
1:45ac509:  * software distributed under the License is distributed on an
1:45ac509:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:45ac509:  * KIND, either express or implied.  See the License for the
1:45ac509:  * specific language governing permissions and limitations
1:45ac509:  * under the License.
1:45ac509:  */
1:45ac509: package org.apache.derbyTesting.functionTests.tests.lang;
1:45ac509: 
1:45ac509: import java.sql.SQLException;
1:45ac509: import java.sql.Statement;
1:45ac509: 
1:45ac509: import junit.framework.Test;
1:45ac509: 
1:45ac509: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:45ac509: import org.apache.derbyTesting.junit.JDBC;
1:45ac509: import org.apache.derbyTesting.junit.TestConfiguration;
1:45ac509: 
1:45ac509: /**
1:45ac509:  * Test case for precedence.sql.It tests precedence of operators other than and,
1:45ac509:  * or, and not that return boolean.
1:45ac509:  */
1:45ac509: public class PrecedenceTest extends BaseJDBCTestCase {
1:45ac509: 
1:45ac509:     public PrecedenceTest(String name) {
1:45ac509:         super(name);
1:45ac509:     }
1:45ac509:     
1:45ac509:     public static Test suite(){
1:45ac509:         return TestConfiguration.defaultSuite(PrecedenceTest.class);
1:45ac509:     }
1:45ac509:     
1:45ac509:     public void testPrecedence() throws SQLException{
1:45ac509:     	String sql = "create table t1(c11 int)";
1:45ac509:     	Statement st = createStatement();
1:45ac509:     	st.executeUpdate(sql);
1:45ac509:     	
1:45ac509:     	sql = "insert into t1 values(1)";
1:45ac509:     	assertEquals(1, st.executeUpdate(sql));
1:45ac509:     	
1:45ac509:     	sql = "select c11 from t1 where 1 in (1,2,3) = (1=1)";
1:45ac509:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:45ac509:     	
1:45ac509:     	sql = "select c11 from t1 where 'acme widgets' " +
1:45ac509:     			"like 'acme%' in ('1=1')";
1:45ac509:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:45ac509:     	
1:45ac509:     	sql = "select c11 from t1 where 1 between -100 " +
1:45ac509:     			"and 100 is not null";
1:45ac509:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:45ac509:     	
1:45ac509:     	sql = "select c11 from t1 where exists(select *" +
1:45ac509:     			" from (values 1) as t) not in ('1=2')";
1:45ac509:     	JDBC.assertEmpty(st.executeQuery(sql));
1:45ac509:     	
1:45ac509:     	st.close();
1:45ac509:     }
1:45ac509: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:45ac509
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrecedenceTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for precedence.sql.It tests precedence of operators other than and,
1:  * or, and not that return boolean.
1:  */
1: public class PrecedenceTest extends BaseJDBCTestCase {
1: 
1:     public PrecedenceTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite(){
1:         return TestConfiguration.defaultSuite(PrecedenceTest.class);
1:     }
1:     
1:     public void testPrecedence() throws SQLException{
1:     	String sql = "create table t1(c11 int)";
1:     	Statement st = createStatement();
1:     	st.executeUpdate(sql);
1:     	
1:     	sql = "insert into t1 values(1)";
1:     	assertEquals(1, st.executeUpdate(sql));
1:     	
1:     	sql = "select c11 from t1 where 1 in (1,2,3) = (1=1)";
1:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:     	
1:     	sql = "select c11 from t1 where 'acme widgets' " +
1:     			"like 'acme%' in ('1=1')";
1:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:     	
1:     	sql = "select c11 from t1 where 1 between -100 " +
1:     			"and 100 is not null";
1:     	JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:     	
1:     	sql = "select c11 from t1 where exists(select *" +
1:     			" from (values 1) as t) not in ('1=2')";
1:     	JDBC.assertEmpty(st.executeQuery(sql));
1:     	
1:     	st.close();
1:     }
1: }
============================================================================