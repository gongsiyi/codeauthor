3:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropSchemaConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
12:eac0369: 
5:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:4112e91: import org.apache.derby.iapi.sql.Activation;
1:4112e91: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:d0b354e: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	DROP SCHEMA Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class DropSchemaConstantAction extends DDLConstantAction
3:eac0369: {
1:eac0369: 
1:eac0369: 
1:eac0369: 	private final String				schemaName;
1:eac0369: 
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a DROP TABLE statement.
1:eac0369: 	 *
1:eac0369: 	 *	@param	schemaName			Table name.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	DropSchemaConstantAction(String	schemaName)
1:eac0369: 	{
1:eac0369: 		this.schemaName = schemaName;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// OBJECT SHADOWS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "DROP SCHEMA " + schemaName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:d0b354e: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:d0b354e:         SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);
1:eac0369: 
1:6950a39:         sd.drop(lcc, activation);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d0b354e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1: 		TransactionController tc = lcc.getTransactionExecute();
/////////////////////////////////////////////////////////////////////////
1:         SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:6950a39
/////////////////////////////////////////////////////////////////////////
1:         sd.drop(lcc, activation);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4112e91
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, null, true);
0:         sd.drop(lcc);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropSchemaConstantAction
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	DROP SCHEMA Statement at Execution time.
1:  *
0:  *	@author jamie
1:  */
1: 
1: class DropSchemaConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 
1: 	private final String				schemaName;
1: 
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a DROP TABLE statement.
1: 	 *
1: 	 *	@param	schemaName			Table name.
1: 	 *
1: 	 */
1: 	DropSchemaConstantAction(String	schemaName)
1: 	{
1: 		this.schemaName = schemaName;
1: 	}
1: 
1: 	///////////////////////////////////////////////
1: 	//
1: 	// OBJECT SHADOWS
1: 	//
1: 	///////////////////////////////////////////////
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "DROP SCHEMA " + schemaName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
0: 		SchemaDescriptor	sd;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
0: 		sd = dd.getSchemaDescriptor(schemaName, null, true);
1: 
0:     //If user is attempting to drop SESSION schema and there is no physical SESSION schema, then throw an exception
0:     //Need to handle it this special way is because SESSION schema is also used for temporary tables. If there is no
0:     //physical SESSION schema, we internally generate an in-memory SESSION schema in order to support temporary tables
0:     //But there is no way for the user to access that in-memory SESSION schema. Following if will be true if there is
0:     //no physical SESSION schema and hence getSchemaDescriptor has returned an in-memory SESSION schema
0:     if (schemaName.equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME) && (sd != null) && (sd.getUUID() == null))
0: 			throw StandardException.newException(SQLState.LANG_SCHEMA_DOES_NOT_EXIST, schemaName);
1: 
1: 		/*
0: 		** Make sure the schema is empty.
0: 		** In the future we want to drop everything
0: 		** in the schema if it is CASCADE.
1: 		*/
0: 		if (!dd.isSchemaEmpty(sd))
1: 		{
0: 			throw StandardException.newException(SQLState.LANG_SCHEMA_NOT_EMPTY, schemaName);
1: 		} 
1: 
0: 		/* Prepare all dependents to invalidate.  (This is there chance
0: 		 * to say that they can't be invalidated.  For example, an open
0: 		 * cursor referencing a table/view that the user is attempting to
0: 		 * drop.) If no one objects, then invalidate any dependent objects.
0: 		 * We check for invalidation before we drop the table descriptor
0: 		 * since the table descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
1: 		 */
0: 		dm.invalidateFor(sd, DependencyManager.DROP_SCHEMA, lcc);
1: 
0: 		dd.dropSchemaDescriptor(schemaName, tc);
1: 
1: 		/*
0: 		** If we have dropped the current default schema,
0: 		** then we will set the default to null.  The
0: 		** LCC is free to set the new default schema to 
0: 	 	** some system defined default.
1: 		*/
0: 		sd = lcc.getDefaultSchema();
0: 		if ((sd != null) &&
0: 			schemaName.equals(sd.getSchemaName()))
1: 		{
0: 			lcc.setDefaultSchema((SchemaDescriptor)null);
1: 		}
1: 
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP SCHEMA Statement at Execution time.
0:  *
0:  *	@author jamie
0:  */
0: 
0: class DropSchemaConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 
0: 	private final String				schemaName;
0: 
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a DROP TABLE statement.
0: 	 *
0: 	 *	@param	schemaName			Table name.
0: 	 *
0: 	 */
0: 	DropSchemaConstantAction(String	schemaName)
0: 	{
0: 		this.schemaName = schemaName;
0: 	}
0: 
0: 	///////////////////////////////////////////////
0: 	//
0: 	// OBJECT SHADOWS
0: 	//
0: 	///////////////////////////////////////////////
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "DROP SCHEMA " + schemaName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		SchemaDescriptor	sd;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		sd = dd.getSchemaDescriptor(schemaName, null, true);
0: 
0:     //If user is attempting to drop SESSION schema and there is no physical SESSION schema, then throw an exception
0:     //Need to handle it this special way is because SESSION schema is also used for temporary tables. If there is no
0:     //physical SESSION schema, we internally generate an in-memory SESSION schema in order to support temporary tables
0:     //But there is no way for the user to access that in-memory SESSION schema. Following if will be true if there is
0:     //no physical SESSION schema and hence getSchemaDescriptor has returned an in-memory SESSION schema
0:     if (schemaName.equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME) && (sd != null) && (sd.getUUID() == null))
0: 			throw StandardException.newException(SQLState.LANG_SCHEMA_DOES_NOT_EXIST, schemaName);
0: 
0: 		/*
0: 		** Make sure the schema is empty.
0: 		** In the future we want to drop everything
0: 		** in the schema if it is CASCADE.
0: 		*/
0: 		if (!dd.isSchemaEmpty(sd))
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_SCHEMA_NOT_EMPTY, schemaName);
0: 		} 
0: 
0: 		/* Prepare all dependents to invalidate.  (This is there chance
0: 		 * to say that they can't be invalidated.  For example, an open
0: 		 * cursor referencing a table/view that the user is attempting to
0: 		 * drop.) If no one objects, then invalidate any dependent objects.
0: 		 * We check for invalidation before we drop the table descriptor
0: 		 * since the table descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
0: 		 */
0: 		dm.invalidateFor(sd, DependencyManager.DROP_SCHEMA, lcc);
0: 
0: 		dd.dropSchemaDescriptor(schemaName, tc);
0: 
0: 		/*
0: 		** If we have dropped the current default schema,
0: 		** then we will set the default to null.  The
0: 		** LCC is free to set the new default schema to 
0: 	 	** some system defined default.
0: 		*/
0: 		sd = lcc.getDefaultSchema();
0: 		if ((sd != null) &&
0: 			schemaName.equals(sd.getSchemaName()))
0: 		{
0: 			lcc.setDefaultSchema((SchemaDescriptor)null);
0: 		}
0: 
0: 	}
0: 
0: }
============================================================================