1:77de125: /*
1:77de125: 
1:eddb67d: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest
1:77de125: 
1:77de125: Licensed to the Apache Software Foundation (ASF) under one or more
1:77de125: contributor license agreements.  See the NOTICE file distributed with
1:77de125: this work for additional information regarding copyright ownership.
1:77de125: The ASF licenses this file to You under the Apache License, Version 2.0
1:77de125: (the "License"); you may not use this file except in compliance with
1:77de125: the License.  You may obtain a copy of the License at
1:77de125: 
1:77de125:    http://www.apache.org/licenses/LICENSE-2.0
1:77de125: 
1:77de125: Unless required by applicable law or agreed to in writing, software
1:77de125: distributed under the License is distributed on an "AS IS" BASIS,
1:77de125: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77de125: See the License for the specific language governing permissions and
1:77de125: limitations under the License.
1:77de125: 
1:77de125: */
1:77de125: 
1:77de125: 
1:77de125: 
1:77de125: package org.apache.derbyTesting.functionTests.tests.lang;
1:77de125: import java.sql.PreparedStatement;
1:77de125: import java.sql.SQLException;
1:77de125: import java.sql.Statement;
1:77de125: import java.sql.Types;
1:77de125: import junit.framework.Test;
1:77de125: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:77de125: import org.apache.derbyTesting.junit.JDBC;
1:77de125: import org.apache.derbyTesting.junit.TestConfiguration;
1:77de125: 	/**
1:77de125: 	 * This tests unary minus and unary plus as dynamic parameters in PreparedStatements.
1:77de125: 	 */
1:77de125: 
1:77de125: public class UnaryArithmeticParameterTest extends BaseJDBCTestCase {
1:77de125: 	/**
1:77de125:      * Public constructor required for running test as standalone JUnit.
1:77de125:      */
1:77de125: 	public UnaryArithmeticParameterTest(String name) {
1:77de125: 		super(name);
1:77de125: 	}
1:77de125: 	/**
1:77de125:      * Create a suite of tests.
1:77de125:      */
1:77de125: 	public static Test suite() {
1:1ae02c9:         // This test should not get run under jdk13 because it uses
1:1ae02c9:         // ParameterMetaData calls to ensure that the parameter type for
1:1ae02c9:         // dynamic parameter for unary minus and plus get set correctly from
1:1ae02c9:         // the context in which they are used.
1:1ae02c9:         if ( !JDBC.vmSupportsJDBC3()) {
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "empty UnaryArithmeticParameterTest - " +
1:1ae02c9:                 "supported only from JDBC3.0 and above");
1:1ae02c9:         } else {
1:1ae02c9:             return TestConfiguration.defaultSuite(
1:1ae02c9:                 UnaryArithmeticParameterTest.class);
1:77de125:         }
1:77de125: 	}
1:77de125: 	 /**
1:77de125:      * Set the fixture up with tables 
1:77de125:      */
1:77de125: 	protected void setUp() throws SQLException {
1:77de125: 		getConnection().setAutoCommit(false);
1:77de125: 		Statement stmt = createStatement();
1:77de125: 		stmt.executeUpdate("create table t1 (c11 int, c12 smallint, c13 double, c14 char(3))");
1:77de125: 		stmt.execute("insert into t1 values(1,1,1.1,'abc')");
1:77de125: 		stmt.execute("insert into t1 values(-1,-1,-1.0,'def')");
1:77de125: 		stmt.execute("create table t2 (c21 int)");
1:77de125: 		stmt.execute("insert into t2 values (-1),(-2)");
1:77de125: 		stmt.close();
1:77de125: 	}
1:77de125: 	/**
1:77de125:      * Tear-down the fixture by removing the tables
1:77de125:      */
1:77de125: 	protected void tearDown() throws Exception {
1:77de125: 		Statement stmt = createStatement();
1:77de125: 		stmt.executeUpdate("drop table t1");
1:77de125: 		stmt.executeUpdate("drop table t2");
1:77de125: 		stmt.close();
1:77de125: 		commit();
1:77de125: 		super.tearDown();
1:77de125: 	}
1:77de125: 	/**
1:77de125: 	 * Test using parameters with unary minus and unary plus
1:eddb67d: 	 * @throws Exception
1:77de125: 	 */
1:eddb67d: 		public void testParametersForUnaryMinusAndPlus() throws Exception {
1:77de125: 			PreparedStatement ps = prepareStatement("insert into t1 values(?,+?,-?,?)");
1:77de125: 			ps.setInt(1,3);
1:77de125: 			ps.setInt(2,3);
1:77de125: 			ps.setDouble(3,-3.1);
1:77de125: 			ps.setString(4,"ghi");
1:77de125: 			int[] expectedTypes={Types.INTEGER,Types.SMALLINT, Types.DOUBLE,Types.CHAR};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			ps.executeUpdate();
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,-1);
1:77de125: 			ps.setDouble(3,1.0);
1:77de125: 			ps.setString(4,"jkl");
1:77de125: 			ps.executeUpdate();
1:77de125: 			
1:77de125: 			ps = prepareStatement("select * from t1 where -? in (select c21 from t2)");
1:77de125: 			ps.setInt(1,1);
1:77de125: 			expectedTypes=new int[] {Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1:39b3237: 										{-1,-1,-1.0,new String("def")},
1:39b3237: 										{3,3,3.1,new String("ghi")},
1:39b3237: 										{-1,-1,-1.0,new String("jkl")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps =prepareStatement("select * from t1 where c11 = -? and c12 = +? and c13 = ?");
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			ps.setDouble(3,1.1);
1:77de125: 			expectedTypes= new int[]{Types.INTEGER, Types.SMALLINT,Types.DOUBLE};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			
1:77de125: 			ps.setShort(1,(short) 1);
1:77de125: 			ps.setInt(2,-1);		
1:77de125: 			ps.setInt(3,-1);
1:39b3237: 			expectedRows = new Object[][]{{-1,-1,-1.0,new String("def")},
1:39b3237: 										{-1,-1,-1.0,new String("jkl")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 			}
1:77de125: 		/**
1:77de125: 		 * Tests ABS function with Unary plus and Unary minus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testABSWithUnaryMinusAndPlus() throws Exception {
1:77de125: 			Statement s = createStatement();
1:77de125: 			s.execute("CREATE FUNCTION ABS_FUNCT(P1 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.abs' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:77de125: 			PreparedStatement ps = prepareStatement("select * from t1 where -? = abs_funct(+?)");
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1:39b3237: 										{-1,-1,-1.0,new String("def")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 			s.execute("Drop function ABS_FUNCT" );
1:77de125: 			s.close();
1:77de125: 		}	
1:77de125: 		/**
1:77de125: 		 * Tests MAX function with Unary plus and Unary minus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testMAXWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			Statement s = createStatement();
1:77de125: 			s.execute("CREATE FUNCTION MAX_CNI(P1 INT, P2 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.max' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:77de125: 			PreparedStatement ps = prepareStatement("select * from t1 where -? = max_cni(-5,-1)");
1:77de125: 			ps.setInt(1,1);
1:77de125: 			int[] expectedTypes= new int[]{Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1:39b3237: 					{-1,-1,-1.0,new String("def")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			
1:77de125: 			ps = prepareStatement("select * from t1 where -? = max_cni(-?,+?)");
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			ps.setInt(3,1);
1:77de125: 			expectedTypes= new int[]{Types.INTEGER,Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 
1:77de125: 			//Try the function again. But use, use sqrt(+?) & abs(-?) functions to send params
1:77de125: 			ps = prepareStatement("select * from t1 where -? = max_cni(abs(-?), sqrt(+?))");
1:77de125: 			ps.setInt(1,-2);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			ps.setInt(3,4);
1:77de125: 			expectedTypes=new int[]{Types.INTEGER,Types.DOUBLE,Types.DOUBLE};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 			s.execute("Drop function MAX_CNI" );
1:77de125: 			s.close();
1:77de125: 			}
1:77de125: 		/**
1:77de125: 		 * Tests BETWEEN with unary minus and unary plus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testBETWEENWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select * from t1 where c11 between -? and +?");
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests NOT IN with unary minus and unary plus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testNOTINWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select * from t1 where +? not in (-?, +?, 2, ?)");
1:77de125: 			ps.setInt(1,-11);
1:77de125: 			ps.setInt(2,1);
1:77de125: 			ps.setInt(3,1);
1:77de125: 			ps.setInt(4,4);
1:77de125: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER, Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1:39b3237: 										{-1,-1,-1.0,new String("def")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 						
1:77de125: 			ps = prepareStatement("select * from t1 where -? not in (select c21+? from t2)");
1:77de125: 			ps.setInt(1,1);
1:77de125: 			ps.setInt(2,2);
1:77de125: 			expectedTypes = new int[]{Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests operators with Unary plus and unary Minus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testOperatorsWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select * from t1 where +? < c12");
1:77de125: 			ps.setInt(1,0);
1:77de125: 			int[] expectedTypes=new int[]{Types.SMALLINT};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 
1:77de125: 			ps = prepareStatement("select * from t1 where -? = c11 + ?");
1:77de125: 			ps.setInt(1,2);
1:77de125: 			ps.setInt(2,-1);
1:77de125: 			expectedTypes = new int[]{Types.INTEGER,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:39b3237: 			expectedRows = new Object[][]{{-1,-1,-1.0,new String("def")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 
1:77de125: 			ps = prepareStatement("select * from t1 where c11 + ? = -?");
1:77de125: 			ps.setInt(1,-1);
1:77de125: 			ps.setInt(2,2);
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 
1:77de125: 			ps = prepareStatement("select * from t1 where c11 + c12 = -?");
1:77de125: 			ps.setInt(1,2);
1:77de125: 			expectedTypes= new int[]{Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests Casting with unary plus and unary minus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testCastWithUnaryMinusAndPlus()throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select cast(-? as smallint), cast(+? as int) from t1");
1:77de125: 			ps.setInt(1,2);
1:77de125: 			ps.setInt(2,2);
1:77de125: 			int[] expectedTypes= new int[]{Types.SMALLINT,Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			String [][] expectedRows = new String[][]{{"-2","2"},{"-2","2"}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests NullIf with unary minus and unary plus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testNullIfWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select nullif(-?,c11) from t1");
1:77de125: 			ps.setInt(1,22);
1:77de125: 			int[] expectedTypes= new int[]{Types.INTEGER};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			Object[][] expectedRows = new Object[][]{{new String("-22")},{new String("-22")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests SQRT with unary minus and unary plus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testSQRTWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps = prepareStatement("select sqrt(-?) from t1");
1:77de125: 			ps.setInt(1,-64);
1:77de125: 			int[] expectedTypes= new int[]{Types.DOUBLE};
1:77de125: 			JDBC.assertParameterTypes(ps,expectedTypes);
1:77de125: 			Object[][] expectedRows = new Object[][]{{new String("8.0")},{new String("8.0")}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Tests "select case when -?=c11 then -? else c12 end from t1"
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testSelectWithUnaryMinusAndPlus() throws Exception{
1:77de125: 			PreparedStatement ps =prepareStatement("select case when -?=c11 then -? else c12 end from t1");
1:77de125: 			ps.setInt(1,1);
1:77de125: 			ps.setInt(2,22);
1:77de125: 			int[] expectedTypes = new int[]{Types.INTEGER,Types.SMALLINT};
1:77de125: 			JDBC.assertParameterTypes(ps, expectedTypes);
1:39b3237: 			Object[][] expectedRows = new Object[][]{{1},{-22}};
1:77de125: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1:77de125: 			ps.close();
1:77de125: 		}
1:77de125: 		/**
1:77de125: 		 * Negative tests for unary minus and unary plus
1:eddb67d: 		 * @throws Exception
1:77de125: 		 */
1:eddb67d: 		public void testExpectedErrors() throws Exception{
1:77de125: 			assertCompileError("42X34","select * from t1 where c11 = any (select -? from t2)");
1:77de125: 			
1:77de125: 			// -?/+? at the beginning and/ at the end of where clause
1:77de125: 			assertCompileError("42X19","select * from t1 where -? and c11=c11 or +?");
1:77de125: 			
1:77de125: 			// -?/+? in like escape function
1:77de125: 			assertCompileError("42X37","select * from sys.systables where tablename like -? escape +?");
1:77de125: 			
1:77de125: 			// -?/+? in binary timestamp function
1:77de125: 			assertCompileError("42X37","select timestamp(-?,+?) from t1");
1:77de125: 			
1:77de125: 			// -? in unary timestamp function
1:77de125: 			assertCompileError("42X36","select timestamp(-?) from t1");
1:77de125: 			
1:77de125: 			// -? in views
1:77de125: 			assertCompileError("42X98","create view v1 as select * from t1 where c11 = -?");
1:77de125: 			
1:77de125: 			// -? in inner join
1:77de125: 			assertCompileError("42X37","select * from t1 inner join t1 as t333 on -?");
1:77de125: 			
1:77de125: 			// -? by itself in where clause
1:77de125: 			assertCompileError("42X19","select * from t1 where -?");
1:77de125: 			
1:77de125: 			// -? is null not allowed because is null allowed on char types only
1:77de125: 			assertCompileError("42X37","select * from t1 where -? is null");
1:77de125: 			
1:77de125: 			// unary plus parameters on both sides of / operator
1:77de125: 			assertCompileError("42X35","select * from t1 where c11 = ?/-?");
1:77de125: 			
1:77de125: 			// unary plus in || operation
1:77de125: 			assertCompileError("42X37","select c11 || +? from t1");
1:77de125: 			
1:77de125: 			// unary minus for char column
1:77de125: 			assertCompileError("42X37","select * from t1 where c14 = -?");
1:77de125: 			
1:77de125: 			// unary plus for char column
1:77de125: 			assertCompileError("42X37","select * from t1 where c14 like +?");
1:77de125: 			
1:77de125: 					
1:77de125: 		}
1:77de125: 	}
1:77de125: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1: 										{-1,-1,-1.0,new String("def")},
1: 										{3,3,3.1,new String("ghi")},
1: 										{-1,-1,-1.0,new String("jkl")}};
/////////////////////////////////////////////////////////////////////////
1: 			expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
1: 			expectedRows = new Object[][]{{-1,-1,-1.0,new String("def")},
1: 										{-1,-1,-1.0,new String("jkl")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1: 										{-1,-1,-1.0,new String("def")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1: 					{-1,-1,-1.0,new String("def")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")},
1: 										{-1,-1,-1.0,new String("def")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1,1,1.1,new String("abc")}};
/////////////////////////////////////////////////////////////////////////
1: 			expectedRows = new Object[][]{{-1,-1,-1.0,new String("def")}};
/////////////////////////////////////////////////////////////////////////
1: 			Object[][] expectedRows = new Object[][]{{1},{-22}};
commit:eddb67d
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest
/////////////////////////////////////////////////////////////////////////
1: 	 * @throws Exception
1: 		public void testParametersForUnaryMinusAndPlus() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testABSWithUnaryMinusAndPlus() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testMAXWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testBETWEENWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testNOTINWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testOperatorsWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testCastWithUnaryMinusAndPlus()throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testNullIfWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testSQRTWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testSelectWithUnaryMinusAndPlus() throws Exception{
/////////////////////////////////////////////////////////////////////////
1: 		 * @throws Exception
1: 		public void testExpectedErrors() throws Exception{
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         // This test should not get run under jdk13 because it uses
1:         // ParameterMetaData calls to ensure that the parameter type for
1:         // dynamic parameter for unary minus and plus get set correctly from
1:         // the context in which they are used.
1:         if ( !JDBC.vmSupportsJDBC3()) {
1:             return new BaseTestSuite(
1:                 "empty UnaryArithmeticParameterTest - " +
1:                 "supported only from JDBC3.0 and above");
1:         } else {
1:             return TestConfiguration.defaultSuite(
1:                 UnaryArithmeticParameterTest.class);
author:Jean T. Anderson
-------------------------------------------------------------------------------
commit:284ec4f
/////////////////////////////////////////////////////////////////////////
commit:77de125
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.unaryArithmeticParameterTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: 
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Types;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 	/**
1: 	 * This tests unary minus and unary plus as dynamic parameters in PreparedStatements.
0: 	 * @throws SQLException
1: 	 */
1: 
1: public class UnaryArithmeticParameterTest extends BaseJDBCTestCase {
1: 	/**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1: 	public UnaryArithmeticParameterTest(String name) {
1: 		super(name);
1: 	}
1: 	/**
1:      * Create a suite of tests.
1:      */
1: 	public static Test suite() {
0: 		// This test should not get run under jdk13 because it uses ParameterMetaData calls
0: 		// to ensure that the parameter type for dynamic parameter 
0: 		// for unary minus and plus get set correctly from the context in which they are used.
0: 		if ( !JDBC.vmSupportsJDBC3())
0:             return new TestSuite("empty UnaryArithmeticParameterTest - supported only from JDBC3.0 and above");
0:         else{
0:             	return   TestConfiguration.defaultSuite(UnaryArithmeticParameterTest.class);
1:         }
1: 	}
1: 	 /**
1:      * Set the fixture up with tables 
1:      */
1: 	protected void setUp() throws SQLException {
1: 		getConnection().setAutoCommit(false);
1: 		Statement stmt = createStatement();
1: 		stmt.executeUpdate("create table t1 (c11 int, c12 smallint, c13 double, c14 char(3))");
1: 		stmt.execute("insert into t1 values(1,1,1.1,'abc')");
1: 		stmt.execute("insert into t1 values(-1,-1,-1.0,'def')");
1: 		stmt.execute("create table t2 (c21 int)");
1: 		stmt.execute("insert into t2 values (-1),(-2)");
1: 		stmt.close();
1: 	}
1: 	/**
1:      * Tear-down the fixture by removing the tables
1:      */
1: 	protected void tearDown() throws Exception {
1: 		Statement stmt = createStatement();
1: 		stmt.executeUpdate("drop table t1");
1: 		stmt.executeUpdate("drop table t2");
1: 		stmt.close();
1: 		commit();
1: 		super.tearDown();
1: 	}
1: 	/**
1: 	 * Test using parameters with unary minus and unary plus
0: 	 * @throws SQLException
1: 	 */
0: 		public void testParametersForUnaryMinusAndPlus() throws SQLException {
1: 			PreparedStatement ps = prepareStatement("insert into t1 values(?,+?,-?,?)");
1: 			ps.setInt(1,3);
1: 			ps.setInt(2,3);
1: 			ps.setDouble(3,-3.1);
1: 			ps.setString(4,"ghi");
1: 			int[] expectedTypes={Types.INTEGER,Types.SMALLINT, Types.DOUBLE,Types.CHAR};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			ps.executeUpdate();
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,-1);
1: 			ps.setDouble(3,1.0);
1: 			ps.setString(4,"jkl");
1: 			ps.executeUpdate();
1: 			
1: 			ps = prepareStatement("select * from t1 where -? in (select c21 from t2)");
1: 			ps.setInt(1,1);
1: 			expectedTypes=new int[] {Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")},
0: 										{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")},
0: 										{new Integer(3),new Integer(3),new Double(3.1),new String("ghi")},
0: 										{new Integer(-1),new Integer(-1),new Double(-1.0),new String("jkl")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps =prepareStatement("select * from t1 where c11 = -? and c12 = +? and c13 = ?");
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,1);
1: 			ps.setDouble(3,1.1);
1: 			expectedTypes= new int[]{Types.INTEGER, Types.SMALLINT,Types.DOUBLE};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			
1: 			ps.setShort(1,(short) 1);
1: 			ps.setInt(2,-1);		
1: 			ps.setInt(3,-1);
0: 			expectedRows = new Object[][]{{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")},
0: 										{new Integer(-1),new Integer(-1),new Double(-1.0),new String("jkl")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 			}
1: 		/**
1: 		 * Tests ABS function with Unary plus and Unary minus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testABSWithUnaryMinusAndPlus() throws SQLException {
1: 			Statement s = createStatement();
1: 			s.execute("CREATE FUNCTION ABS_FUNCT(P1 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.abs' LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 			PreparedStatement ps = prepareStatement("select * from t1 where -? = abs_funct(+?)");
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,1);
1: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")},
0: 										{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 			s.execute("Drop function ABS_FUNCT" );
1: 			s.close();
1: 		}	
1: 		/**
1: 		 * Tests MAX function with Unary plus and Unary minus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testMAXWithUnaryMinusAndPlus() throws SQLException{
1: 			Statement s = createStatement();
1: 			s.execute("CREATE FUNCTION MAX_CNI(P1 INT, P2 INT) RETURNS INT CALLED ON NULL INPUT EXTERNAL NAME 'java.lang.Math.max' LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 			PreparedStatement ps = prepareStatement("select * from t1 where -? = max_cni(-5,-1)");
1: 			ps.setInt(1,1);
1: 			int[] expectedTypes= new int[]{Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")},
0: 					{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			
1: 			ps = prepareStatement("select * from t1 where -? = max_cni(-?,+?)");
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,1);
1: 			ps.setInt(3,1);
1: 			expectedTypes= new int[]{Types.INTEGER,Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 
1: 			//Try the function again. But use, use sqrt(+?) & abs(-?) functions to send params
1: 			ps = prepareStatement("select * from t1 where -? = max_cni(abs(-?), sqrt(+?))");
1: 			ps.setInt(1,-2);
1: 			ps.setInt(2,1);
1: 			ps.setInt(3,4);
1: 			expectedTypes=new int[]{Types.INTEGER,Types.DOUBLE,Types.DOUBLE};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 			s.execute("Drop function MAX_CNI" );
1: 			s.close();
1: 			}
1: 		/**
1: 		 * Tests BETWEEN with unary minus and unary plus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testBETWEENWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select * from t1 where c11 between -? and +?");
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,1);
1: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests NOT IN with unary minus and unary plus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testNOTINWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select * from t1 where +? not in (-?, +?, 2, ?)");
1: 			ps.setInt(1,-11);
1: 			ps.setInt(2,1);
1: 			ps.setInt(3,1);
1: 			ps.setInt(4,4);
1: 			int[] expectedTypes= new int[]{Types.INTEGER,Types.INTEGER, Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")},
0: 										{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 						
1: 			ps = prepareStatement("select * from t1 where -? not in (select c21+? from t2)");
1: 			ps.setInt(1,1);
1: 			ps.setInt(2,2);
1: 			expectedTypes = new int[]{Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests operators with Unary plus and unary Minus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testOperatorsWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select * from t1 where +? < c12");
1: 			ps.setInt(1,0);
1: 			int[] expectedTypes=new int[]{Types.SMALLINT};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer(1),new Integer(1),new Double(1.1),new String("abc")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 
1: 			ps = prepareStatement("select * from t1 where -? = c11 + ?");
1: 			ps.setInt(1,2);
1: 			ps.setInt(2,-1);
1: 			expectedTypes = new int[]{Types.INTEGER,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
0: 			expectedRows = new Object[][]{{new Integer(-1),new Integer(-1),new Double(-1.0),new String("def")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 
1: 			ps = prepareStatement("select * from t1 where c11 + ? = -?");
1: 			ps.setInt(1,-1);
1: 			ps.setInt(2,2);
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 
1: 			ps = prepareStatement("select * from t1 where c11 + c12 = -?");
1: 			ps.setInt(1,2);
1: 			expectedTypes= new int[]{Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests Casting with unary plus and unary minus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testCastWithUnaryMinusAndPlus()throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select cast(-? as smallint), cast(+? as int) from t1");
1: 			ps.setInt(1,2);
1: 			ps.setInt(2,2);
1: 			int[] expectedTypes= new int[]{Types.SMALLINT,Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			String [][] expectedRows = new String[][]{{"-2","2"},{"-2","2"}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests NullIf with unary minus and unary plus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testNullIfWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select nullif(-?,c11) from t1");
1: 			ps.setInt(1,22);
1: 			int[] expectedTypes= new int[]{Types.INTEGER};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			Object[][] expectedRows = new Object[][]{{new String("-22")},{new String("-22")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests SQRT with unary minus and unary plus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testSQRTWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps = prepareStatement("select sqrt(-?) from t1");
1: 			ps.setInt(1,-64);
1: 			int[] expectedTypes= new int[]{Types.DOUBLE};
1: 			JDBC.assertParameterTypes(ps,expectedTypes);
1: 			Object[][] expectedRows = new Object[][]{{new String("8.0")},{new String("8.0")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, true);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Tests "select case when -?=c11 then -? else c12 end from t1"
0: 		 * @throws SQLException
1: 		 */
0: 		public void testSelectWithUnaryMinusAndPlus() throws SQLException{
1: 			PreparedStatement ps =prepareStatement("select case when -?=c11 then -? else c12 end from t1");
1: 			ps.setInt(1,1);
1: 			ps.setInt(2,22);
1: 			int[] expectedTypes = new int[]{Types.INTEGER,Types.SMALLINT};
1: 			JDBC.assertParameterTypes(ps, expectedTypes);
0: 			Object[][] expectedRows = new Object[][]{{new Integer("1")},{new Integer("-22")}};
1: 			JDBC.assertFullResultSet(ps.executeQuery(), expectedRows, false);
1: 			ps.close();
1: 		}
1: 		/**
1: 		 * Negative tests for unary minus and unary plus
0: 		 * @throws SQLException
1: 		 */
0: 		public void testExpectedErrors() throws SQLException{
1: 			assertCompileError("42X34","select * from t1 where c11 = any (select -? from t2)");
1: 			
1: 			// -?/+? at the beginning and/ at the end of where clause
1: 			assertCompileError("42X19","select * from t1 where -? and c11=c11 or +?");
1: 			
1: 			// -?/+? in like escape function
1: 			assertCompileError("42X37","select * from sys.systables where tablename like -? escape +?");
1: 			
1: 			// -?/+? in binary timestamp function
1: 			assertCompileError("42X37","select timestamp(-?,+?) from t1");
1: 			
1: 			// -? in unary timestamp function
1: 			assertCompileError("42X36","select timestamp(-?) from t1");
1: 			
1: 			// -? in views
1: 			assertCompileError("42X98","create view v1 as select * from t1 where c11 = -?");
1: 			
1: 			// -? in inner join
1: 			assertCompileError("42X37","select * from t1 inner join t1 as t333 on -?");
1: 			
1: 			// -? by itself in where clause
1: 			assertCompileError("42X19","select * from t1 where -?");
1: 			
1: 			// -? is null not allowed because is null allowed on char types only
1: 			assertCompileError("42X37","select * from t1 where -? is null");
1: 			
1: 			// unary plus parameters on both sides of / operator
1: 			assertCompileError("42X35","select * from t1 where c11 = ?/-?");
1: 			
1: 			// unary plus in || operation
1: 			assertCompileError("42X37","select c11 || +? from t1");
1: 			
1: 			// unary minus for char column
1: 			assertCompileError("42X37","select * from t1 where c14 = -?");
1: 			
1: 			// unary plus for char column
1: 			assertCompileError("42X37","select * from t1 where c14 like +?");
1: 			
1: 					
1: 		}
1: 	}
1: 
============================================================================