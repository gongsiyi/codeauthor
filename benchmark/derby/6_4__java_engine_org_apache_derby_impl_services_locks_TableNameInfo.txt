1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.locks.TableNameInfo
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.locks;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:801cf0d: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:801cf0d: @SuppressWarnings("UseOfObsoleteCollectionType")
1:eac0369: public class TableNameInfo {
1:eac0369: 
1:eac0369: 	// things to look up table name etc
1:eac0369: 	private DataDictionary dd;
1:801cf0d: 
1:801cf0d:     // conglomId -> conglomerateDescriptor
1:801cf0d:     private Hashtable<Long, ConglomerateDescriptor> ddCache;
1:801cf0d: 
1:801cf0d:     // tableID UUID -> table descriptor
1:801cf0d:     private Hashtable<UUID, TableDescriptor> tdCache;
1:801cf0d: 
1:801cf0d:     private Hashtable<Long,TableDescriptor> tableCache;     // conglomId -> table descriptor
1:a15a470: 	private Hashtable<Long,String> indexCache;		// conglomId -> indexname
1:eac0369: 
1:eac0369: 	public TableNameInfo(LanguageConnectionContext lcc, boolean andIndex)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:a15a470: 		tableCache = new Hashtable<Long,TableDescriptor>(31);
1:eac0369: 		if (andIndex)
1:a15a470: 			indexCache = new Hashtable<Long,String>(13);
1:eac0369: 
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		dd = lcc.getDataDictionary();
1:eac0369: 		ddCache = dd.hashAllConglomerateDescriptorsByNumber(tc);
1:eac0369: 		tdCache = dd.hashAllTableDescriptorsByTableId(tc);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public String getTableName(Long conglomId) {
1:eac0369: 		if (conglomId == null)
1:eac0369: 			return "?";
1:eac0369: 
1:eac0369: 		// see if we have already seen this conglomerate
1:a15a470: 		TableDescriptor td = tableCache.get(conglomId);
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			// first time we see this conglomerate, get it from the
1:eac0369: 			// ddCache 
1:801cf0d:             ConglomerateDescriptor cd = ddCache.get(conglomId);
1:eac0369: 
1:eac0369:             if (cd != null)
1:eac0369:             {
1:eac0369:                 // conglomerateDescriptor is not null, this table is known
1:eac0369:                 // to the data dictionary
1:eac0369: 
1:801cf0d:                 td = tdCache.get(cd.getTableID());
1:eac0369:             }
1:eac0369: 
1:eac0369: 			if ((cd == null) || (td == null))
1:eac0369: 			{
1:eac0369: 				String name;
1:eac0369: 
1:eac0369: 				// this table is not know to the data dictionary.  This
1:eac0369: 				// can be caused by one of two reasons:  
1:eac0369: 				// 1. the table has just been dropped
1:eac0369: 				// 2. the table is an internal one that lives below
1:eac0369: 				// 		the data dictionary
1:eac0369: 				if (conglomId.longValue() > 20)
1:eac0369: 				{
1:eac0369: 					// table probably dropped!  
1:eac0369: 					name = "*** TRANSIENT_" + conglomId;
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					// I am hoping here that we won't create more than
1:eac0369: 					// 20 tables before starting the data dictionary!
1:eac0369: 
1:eac0369: 					// one of the internal tables -- HACK!!
1:eac0369: 					switch (conglomId.intValue())
1:eac0369: 					{
1:eac0369: 					case 0: 
1:eac0369: 						name = "*** INVALID CONGLOMERATE ***";
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 					case 1: 
1:eac0369: 						name = "ConglomerateDirectory";
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 					case 2: 
1:eac0369: 						name = "PropertyConglomerate";
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 					default:
1:eac0369: 						name = "*** INTERNAL TABLE " + conglomId;
1:eac0369: 						break;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				return name;
1:eac0369: 			}
1:eac0369: 
1:eac0369:             tableCache.put(conglomId, td);
1:eac0369: 
1:eac0369: 			if ((indexCache != null) && cd.isIndex())
1:eac0369: 				indexCache.put(conglomId, cd.getConglomerateName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return td.getName();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getTableType(Long conglomId) {
1:eac0369: 		if (conglomId == null)
1:eac0369: 			return "?";
1:eac0369: 
1:eac0369: 		String type;
1:eac0369: 
1:a15a470: 		TableDescriptor td = tableCache.get(conglomId);
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			switch(td.getTableType())
1:eac0369: 			{
1:eac0369: 			case TableDescriptor.BASE_TABLE_TYPE:
1:eac0369: 				type = "T";
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case TableDescriptor.SYSTEM_TABLE_TYPE:
1:eac0369: 				type = "S";
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			default: 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 					SanityManager.THROWASSERT("Illegal table type " +
1:eac0369: 						  td.getName() + " " + td.getTableType());
1:eac0369: 				type = "?";
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		} else if (conglomId.longValue() > 20)
1:eac0369: 		{
1:eac0369: 			type = "T";
1:eac0369: 		} else {
1:eac0369: 			type = "S";
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return type;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getIndexName(Long conglomId) {
1:eac0369: 		if (conglomId == null)
1:eac0369: 			return "?";
1:a15a470: 		return indexCache.get(conglomId);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: @SuppressWarnings("UseOfObsoleteCollectionType")
1: 
1:     // conglomId -> conglomerateDescriptor
1:     private Hashtable<Long, ConglomerateDescriptor> ddCache;
1: 
1:     // tableID UUID -> table descriptor
1:     private Hashtable<UUID, TableDescriptor> tdCache;
1: 
1:     private Hashtable<Long,TableDescriptor> tableCache;     // conglomId -> table descriptor
/////////////////////////////////////////////////////////////////////////
1:             ConglomerateDescriptor cd = ddCache.get(conglomId);
1:                 td = tdCache.get(cd.getTableID());
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
0: 	private Hashtable<Long,TableDescriptor> tableCache;		// conglomId -> table descriptor
1: 	private Hashtable<Long,String> indexCache;		// conglomId -> indexname
1: 		tableCache = new Hashtable<Long,TableDescriptor>(31);
1: 			indexCache = new Hashtable<Long,String>(13);
/////////////////////////////////////////////////////////////////////////
1: 		TableDescriptor td = tableCache.get(conglomId);
/////////////////////////////////////////////////////////////////////////
1: 		TableDescriptor td = tableCache.get(conglomId);
/////////////////////////////////////////////////////////////////////////
1: 		return indexCache.get(conglomId);
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.locks.TableNameInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import java.util.Hashtable;
1: 
1: public class TableNameInfo {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	// things to look up table name etc
1: 	private DataDictionary dd;
0: 	private Hashtable ddCache;			// conglomId -> conglomerateDescriptor
0: 	private Hashtable tdCache;			// tableID UUID -> table descriptor
0: 	private Hashtable tableCache;		// conglomId -> table descriptor
0: 	private Hashtable indexCache;		// conglomId -> indexname
1: 
1: 	public TableNameInfo(LanguageConnectionContext lcc, boolean andIndex)
1: 		throws StandardException {
1: 
0: 		tableCache = new Hashtable(31);
1: 		if (andIndex)
0: 			indexCache = new Hashtable(13);
1: 
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		dd = lcc.getDataDictionary();
1: 		ddCache = dd.hashAllConglomerateDescriptorsByNumber(tc);
1: 		tdCache = dd.hashAllTableDescriptorsByTableId(tc);
1: 	}
1: 
1: 
1: 	public String getTableName(Long conglomId) {
1: 		if (conglomId == null)
1: 			return "?";
1: 
1: 		// see if we have already seen this conglomerate
0: 		TableDescriptor td = (TableDescriptor) tableCache.get(conglomId);
1: 		if (td == null)
1: 		{
1: 			// first time we see this conglomerate, get it from the
1: 			// ddCache 
0: 			ConglomerateDescriptor cd =
0: 				(ConglomerateDescriptor)ddCache.get(conglomId);
1: 
1:             if (cd != null)
1:             {
1:                 // conglomerateDescriptor is not null, this table is known
1:                 // to the data dictionary
1: 
0:                 td = (TableDescriptor) tdCache.get(cd.getTableID());
1:             }
1: 
1: 			if ((cd == null) || (td == null))
1: 			{
1: 				String name;
1: 
1: 				// this table is not know to the data dictionary.  This
1: 				// can be caused by one of two reasons:  
1: 				// 1. the table has just been dropped
1: 				// 2. the table is an internal one that lives below
1: 				// 		the data dictionary
1: 				if (conglomId.longValue() > 20)
1: 				{
1: 					// table probably dropped!  
1: 					name = "*** TRANSIENT_" + conglomId;
1: 				}
1: 				else
1: 				{
1: 					// I am hoping here that we won't create more than
1: 					// 20 tables before starting the data dictionary!
1: 
1: 					// one of the internal tables -- HACK!!
1: 					switch (conglomId.intValue())
1: 					{
1: 					case 0: 
1: 						name = "*** INVALID CONGLOMERATE ***";
1: 						break;
1: 
1: 					case 1: 
1: 						name = "ConglomerateDirectory";
1: 						break;
1: 
1: 					case 2: 
1: 						name = "PropertyConglomerate";
1: 						break;
1: 
1: 					default:
1: 						name = "*** INTERNAL TABLE " + conglomId;
1: 						break;
1: 					}
1: 				}
1: 
1: 				return name;
1: 			}
1: 
1:             tableCache.put(conglomId, td);
1: 
1: 			if ((indexCache != null) && cd.isIndex())
1: 				indexCache.put(conglomId, cd.getConglomerateName());
1: 		}
1: 
1: 		return td.getName();
1: 	}
1: 
1: 	public String getTableType(Long conglomId) {
1: 		if (conglomId == null)
1: 			return "?";
1: 
1: 		String type;
1: 
0: 		TableDescriptor td = (TableDescriptor) tableCache.get(conglomId);
1: 		if (td != null)
1: 		{
1: 			switch(td.getTableType())
1: 			{
1: 			case TableDescriptor.BASE_TABLE_TYPE:
1: 				type = "T";
1: 				break;
1: 
1: 			case TableDescriptor.SYSTEM_TABLE_TYPE:
1: 				type = "S";
1: 				break;
1: 
1: 			default: 
1: 				if (SanityManager.DEBUG)
1: 					SanityManager.THROWASSERT("Illegal table type " +
1: 						  td.getName() + " " + td.getTableType());
1: 				type = "?";
1: 				break;
1: 			}
1: 		} else if (conglomId.longValue() > 20)
1: 		{
1: 			type = "T";
1: 		} else {
1: 			type = "S";
1: 		}
1: 
1: 		return type;
1: 	}
1: 
1: 	public String getIndexName(Long conglomId) {
1: 		if (conglomId == null)
1: 			return "?";
0: 		return (String) indexCache.get(conglomId);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.locks;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import java.util.Hashtable;
0: 
0: public class TableNameInfo {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	// things to look up table name etc
0: 	private DataDictionary dd;
0: 	private Hashtable ddCache;			// conglomId -> conglomerateDescriptor
0: 	private Hashtable tdCache;			// tableID UUID -> table descriptor
0: 	private Hashtable tableCache;		// conglomId -> table descriptor
0: 	private Hashtable indexCache;		// conglomId -> indexname
0: 
0: 	public TableNameInfo(LanguageConnectionContext lcc, boolean andIndex)
0: 		throws StandardException {
0: 
0: 		tableCache = new Hashtable(31);
0: 		if (andIndex)
0: 			indexCache = new Hashtable(13);
0: 
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		dd = lcc.getDataDictionary();
0: 		ddCache = dd.hashAllConglomerateDescriptorsByNumber(tc);
0: 		tdCache = dd.hashAllTableDescriptorsByTableId(tc);
0: 	}
0: 
0: 
0: 	public String getTableName(Long conglomId) {
0: 		if (conglomId == null)
0: 			return "?";
0: 
0: 		// see if we have already seen this conglomerate
0: 		TableDescriptor td = (TableDescriptor) tableCache.get(conglomId);
0: 		if (td == null)
0: 		{
0: 			// first time we see this conglomerate, get it from the
0: 			// ddCache 
0: 			ConglomerateDescriptor cd =
0: 				(ConglomerateDescriptor)ddCache.get(conglomId);
0: 
0:             if (cd != null)
0:             {
0:                 // conglomerateDescriptor is not null, this table is known
0:                 // to the data dictionary
0: 
0:                 td = (TableDescriptor) tdCache.get(cd.getTableID());
0:             }
0: 
0: 			if ((cd == null) || (td == null))
0: 			{
0: 				String name;
0: 
0: 				// this table is not know to the data dictionary.  This
0: 				// can be caused by one of two reasons:  
0: 				// 1. the table has just been dropped
0: 				// 2. the table is an internal one that lives below
0: 				// 		the data dictionary
0: 				if (conglomId.longValue() > 20)
0: 				{
0: 					// table probably dropped!  
0: 					name = "*** TRANSIENT_" + conglomId;
0: 				}
0: 				else
0: 				{
0: 					// I am hoping here that we won't create more than
0: 					// 20 tables before starting the data dictionary!
0: 
0: 					// one of the internal tables -- HACK!!
0: 					switch (conglomId.intValue())
0: 					{
0: 					case 0: 
0: 						name = "*** INVALID CONGLOMERATE ***";
0: 						break;
0: 
0: 					case 1: 
0: 						name = "ConglomerateDirectory";
0: 						break;
0: 
0: 					case 2: 
0: 						name = "PropertyConglomerate";
0: 						break;
0: 
0: 					default:
0: 						name = "*** INTERNAL TABLE " + conglomId;
0: 						break;
0: 					}
0: 				}
0: 
0: 				return name;
0: 			}
0: 
0:             tableCache.put(conglomId, td);
0: 
0: 			if ((indexCache != null) && cd.isIndex())
0: 				indexCache.put(conglomId, cd.getConglomerateName());
0: 		}
0: 
0: 		return td.getName();
0: 	}
0: 
0: 	public String getTableType(Long conglomId) {
0: 		if (conglomId == null)
0: 			return "?";
0: 
0: 		String type;
0: 
0: 		TableDescriptor td = (TableDescriptor) tableCache.get(conglomId);
0: 		if (td != null)
0: 		{
0: 			switch(td.getTableType())
0: 			{
0: 			case TableDescriptor.BASE_TABLE_TYPE:
0: 				type = "T";
0: 				break;
0: 
0: 			case TableDescriptor.SYSTEM_TABLE_TYPE:
0: 				type = "S";
0: 				break;
0: 
0: 			default: 
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.THROWASSERT("Illegal table type " +
0: 						  td.getName() + " " + td.getTableType());
0: 				type = "?";
0: 				break;
0: 			}
0: 		} else if (conglomId.longValue() > 20)
0: 		{
0: 			type = "T";
0: 		} else {
0: 			type = "S";
0: 		}
0: 
0: 		return type;
0: 	}
0: 
0: 	public String getIndexName(Long conglomId) {
0: 		if (conglomId == null)
0: 			return "?";
0: 		return (String) indexCache.get(conglomId);
0: 	}
0: }
============================================================================