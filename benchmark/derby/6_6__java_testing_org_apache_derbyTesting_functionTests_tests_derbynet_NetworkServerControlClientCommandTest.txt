1:637c1f9: /*
10:65eb19a: 
1:637c1f9: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest
1:ad60cd5: 
1:637c1f9: Licensed to the Apache Software Foundation (ASF) under one or more
1:637c1f9: contributor license agreements.  See the NOTICE file distributed with
1:637c1f9: this work for additional information regarding copyright ownership.
1:637c1f9: The ASF licenses this file to You under the Apache License, Version 2.0
1:637c1f9: (the "License"); you may not use this file except in compliance with
1:637c1f9: the License.  You may obtain a copy of the License at
1:65eb19a: 
1:637c1f9: http://www.apache.org/licenses/LICENSE-2.0
1:65eb19a: 
1:637c1f9: Unless required by applicable law or agreed to in writing, software
1:637c1f9: distributed under the License is distributed on an "AS IS" BASIS,
1:637c1f9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:637c1f9: See the License for the specific language governing permissions and
1:637c1f9: limitations under the License.
1:65eb19a: 
1:65eb19a: */
1:65eb19a: 
1:65eb19a: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:65eb19a: 
1:65eb19a: import java.io.IOException;
1:65eb19a: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:65eb19a: import org.apache.derbyTesting.junit.Derby;
1:1ae02c9: import org.apache.derbyTesting.junit.DerbyConstants;
1:65eb19a: import org.apache.derbyTesting.junit.JDBC;
1:65eb19a: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:65eb19a: import org.apache.derbyTesting.junit.TestConfiguration;
1:65eb19a: 
1:65eb19a: public class NetworkServerControlClientCommandTest extends BaseJDBCTestCase {
1:65eb19a: 
1:65eb19a:     public NetworkServerControlClientCommandTest(String name) {
1:65eb19a:         super(name);
1:a3e94cb:     }
1:a3e94cb:     
1:a3e94cb:     public void testPingWithoutArgs() throws InterruptedException, IOException {
1:a3e94cb:         if (!hasDefaultDerbyPortUsing()) {
1:a3e94cb:             /* If the port isn't the default one, we make sure that the test passes.
1:a3e94cb:              * The -p parameter isn't specified here.
1:a3e94cb:              * Changed to accomodate DERBY-4217
1:a3e94cb:              */
1:a3e94cb:             return;
1:a3e94cb:         }        
1:a3e94cb:         
1:a3e94cb:         String[] pingWithoutArgsCmd = new String[] {
1:a3e94cb:                 "org.apache.derby.drda.NetworkServerControl", "ping" };
1:a3e94cb:         
1:a3e94cb:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd); 
1:a3e94cb:         
1:a3e94cb:         assertSuccessfulPing(pingWithoutArgsCmd);                
1:a3e94cb:     }
1:a3e94cb:     
1:a3e94cb:     private boolean hasDefaultDerbyPortUsing() {
1:a3e94cb:         return TestConfiguration.getCurrent().getPort() ==
1:a3e94cb:                 DerbyConstants.DEFAULT_DERBY_PORT;
1:ad60cd5:     }
1:ad60cd5: 
1:a3e94cb:     /*
1:a3e94cb:      * English locale is neccessary for running on non-English Locale.
1:a3e94cb:      * See #Derby-4260
1:ad60cd5:      */
1:a3e94cb:     private String[] decorateCmdWithEnglishLocale(String[] cmd) {
1:a3e94cb:         String[] newCmd = new String[cmd.length + 1];
1:a3e94cb:         newCmd[0] = "-Dderby.ui.locale=en_US";
1:a3e94cb:         
1:a3e94cb:         System.arraycopy(cmd, 0, newCmd, 1, cmd.length);
1:a3e94cb:         
1:a3e94cb:         return newCmd;
1:a3e94cb:     }
1:a3e94cb:     
1:a3e94cb:     public void testPingWithDefinedHost() throws InterruptedException, IOException {
1:a3e94cb:         if (!hasDefaultDerbyPortUsing()) {
1:a3e94cb:             /* If the port isn't the default one, we make sure that the test passes.
1:a3e94cb:              * The -p parameter isn't specified here.
1:a3e94cb:              * Changed to accomodate DERBY-4217
1:a3e94cb:              */
1:a3e94cb:             return;
1:a3e94cb:         }        
1:a3e94cb:         
1:65eb19a:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:a3e94cb:         String[] pingWithoutArgsCmd = new String[] {
1:a3e94cb:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h", currentHost};
1:a3e94cb:                 
1:a3e94cb:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:a3e94cb:                 
1:a3e94cb:         assertSuccessfulPing(pingWithoutArgsCmd);
1:a3e94cb:     }
1:a3e94cb:     
1:a3e94cb:     public void testPingWithDefinedHostAndPort() throws InterruptedException, IOException {
1:65eb19a:         String currentPort = Integer.toString(TestConfiguration.getCurrent().getPort());
1:a3e94cb:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:a3e94cb:         String[] pingWithoutArgsCmd = new String[] {
2:65eb19a:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h",
1:65eb19a:                 currentHost, "-p", currentPort};
1:a3e94cb:         
1:a3e94cb:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:a3e94cb:         
1:a3e94cb:         assertSuccessfulPing(pingWithoutArgsCmd);
2:65eb19a:     }
1:65eb19a:     
1:a3e94cb:     public void testPingWithWrongHost() throws InterruptedException, IOException {
1:a3e94cb:         String[] pingWithoutArgsCmd = new String[] {
1:d4254d9:                 "org.apache.derby.drda.NetworkServerControl",
1:d4254d9:                 "ping", "-h", "nothere.invalid"};
1:a3e94cb:                 
1:a3e94cb:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:a3e94cb:                 
1:a3e94cb:         assertFailedPing(pingWithoutArgsCmd, "Unable to find host");
1:a3e94cb:     }
1:a3e94cb:     
1:a3e94cb:     public void testPingWithBogusPort() throws InterruptedException, IOException {
1:a3e94cb:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:43220cc:         String bogusPort = Integer.toString(
1:43220cc:                 TestConfiguration.getCurrent().getBogusPort());
1:a3e94cb:         String[] pingWithoutArgsCmd = new String[] {
1:a3e94cb:                 "org.apache.derby.drda.NetworkServerControl",
1:a3e94cb:                 "ping", "-h", currentHost, "-p", bogusPort};
1:a3e94cb:                 
1:a3e94cb:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:a3e94cb:                 
1:a3e94cb:         assertFailedPing(pingWithoutArgsCmd, "Could not connect to Derby Network Server");
1:a3e94cb:     }
1:a3e94cb:     
2:65eb19a:     /**
1:65eb19a:      * Execute ping command and verify that it completes successfully
1:65eb19a:      * @param pingCmd array of java arguments for ping command
1:65eb19a:      * @throws InterruptedException
1:65eb19a:      * @throws IOException
1:65eb19a:      */
1:65eb19a:     private void  assertSuccessfulPing(String[] pingCmd) throws InterruptedException, IOException {
1:044179c:         assertExecJavaCmdAsExpected(new String[] {"Connection obtained"}, pingCmd, 0);
1:65eb19a:     }
1:a3e94cb:     
1:65eb19a:     /**
1:65eb19a:      * Execute ping command and verify that it fails with the expected message
2:65eb19a:      * 
1:65eb19a:      * @param pingCmd array of java arguments for ping command
1:65eb19a:      * @param expectedMessage expected error message
1:65eb19a:      * @throws InterruptedException
1:65eb19a:      * @throws IOException
1:65eb19a:      */
1:65eb19a:     private void assertFailedPing(String[] pingCmd,String expectedMessage) throws InterruptedException, IOException {
1:044179c:         assertExecJavaCmdAsExpected(new String[] {expectedMessage}, pingCmd, 1);
1:65eb19a:     }
1:65eb19a:     
1:65eb19a: 
1:65eb19a:     public static Test suite() {
1:65eb19a: 
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("NetworkServerControlClientCommandTest");
1:65eb19a: 
1:a3e94cb:         // need network server so we can compare command output 
1:65eb19a:         // and we don't run on J2ME because java command is different.
1:a3e94cb:         if (!Derby.hasServer() ||
1:65eb19a:                 JDBC.vmSupportsJSR169())
1:65eb19a:             return suite;
1:a3e94cb:         
1:65eb19a:         Test test = TestConfiguration
1:65eb19a:                 .clientServerSuite(NetworkServerControlClientCommandTest.class);
1:65eb19a:         
1:65eb19a:         // no security manager because we exec a process and don't have permission for that.
1:65eb19a:         test = SecurityManagerSetup.noSecurityManager(test);
1:65eb19a:         suite.addTest(test);
1:a3e94cb:         
1:65eb19a:         return suite;
1:65eb19a:     }
1:65eb19a: 
1:65eb19a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DerbyConstants;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("NetworkServerControlClientCommandTest");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d4254d9
/////////////////////////////////////////////////////////////////////////
1:                 "org.apache.derby.drda.NetworkServerControl",
1:                 "ping", "-h", "nothere.invalid"};
commit:43220cc
/////////////////////////////////////////////////////////////////////////
1:         String bogusPort = Integer.toString(
1:                 TestConfiguration.getCurrent().getBogusPort());
commit:530c877
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.DerbyConstants;
/////////////////////////////////////////////////////////////////////////
0:         if (TestConfiguration.getCurrent().getPort() ==
0:                 DerbyConstants.DEFAULT_DERBY_PORT) {
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:a3e94cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     public void testPingWithoutArgs() throws InterruptedException, IOException {
1:         if (!hasDefaultDerbyPortUsing()) {
1:             /* If the port isn't the default one, we make sure that the test passes.
1:              * The -p parameter isn't specified here.
1:              * Changed to accomodate DERBY-4217
1:              */
1:             return;
1:         }        
1:         
1:         String[] pingWithoutArgsCmd = new String[] {
1:                 "org.apache.derby.drda.NetworkServerControl", "ping" };
1:         
1:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd); 
1:         
1:         assertSuccessfulPing(pingWithoutArgsCmd);                
1:     }
1:     
1:     private boolean hasDefaultDerbyPortUsing() {
1:         return TestConfiguration.getCurrent().getPort() ==
1:                 DerbyConstants.DEFAULT_DERBY_PORT;
1:     /*
1:      * English locale is neccessary for running on non-English Locale.
1:      * See #Derby-4260
1:     private String[] decorateCmdWithEnglishLocale(String[] cmd) {
1:         String[] newCmd = new String[cmd.length + 1];
1:         newCmd[0] = "-Dderby.ui.locale=en_US";
1:         
1:         System.arraycopy(cmd, 0, newCmd, 1, cmd.length);
1:         
1:         return newCmd;
1:     }
1:     
1:     public void testPingWithDefinedHost() throws InterruptedException, IOException {
1:         if (!hasDefaultDerbyPortUsing()) {
1:             /* If the port isn't the default one, we make sure that the test passes.
1:              * The -p parameter isn't specified here.
1:              * Changed to accomodate DERBY-4217
1:              */
1:             return;
1:         }        
1:         
1:         String[] pingWithoutArgsCmd = new String[] {
1:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h", currentHost};
1:                 
1:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:                 
1:         assertSuccessfulPing(pingWithoutArgsCmd);
1:     }
1:     
1:     public void testPingWithDefinedHostAndPort() throws InterruptedException, IOException {
1:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:         String[] pingWithoutArgsCmd = new String[] {
1:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:         
1:         assertSuccessfulPing(pingWithoutArgsCmd);
1:     
1:     public void testPingWithWrongHost() throws InterruptedException, IOException {
1:         String[] pingWithoutArgsCmd = new String[] {
0:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h", "nothere"};
1:                 
1:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:                 
1:         assertFailedPing(pingWithoutArgsCmd, "Unable to find host");
1:     }
1:     
1:     public void testPingWithBogusPort() throws InterruptedException, IOException {
1:         String currentHost = TestConfiguration.getCurrent().getHostName();
0:         String bogusPort = Integer.toString(
0:                 TestConfiguration.getCurrent().getBogusPort());
1:         String[] pingWithoutArgsCmd = new String[] {
1:                 "org.apache.derby.drda.NetworkServerControl",
1:                 "ping", "-h", currentHost, "-p", bogusPort};
1:                 
1:         pingWithoutArgsCmd = decorateCmdWithEnglishLocale(pingWithoutArgsCmd);
1:                 
1:         assertFailedPing(pingWithoutArgsCmd, "Could not connect to Derby Network Server");
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("NetworkServerControlClientCommandTest");        
1:         // need network server so we can compare command output 
1:         if (!Derby.hasServer() ||
1:         
1:         
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ad60cd5
/////////////////////////////////////////////////////////////////////////
0:         String bogusPort = Integer.toString(TestConfiguration.getCurrent().getPort()-1);
0:         String[] pingCmd3 = new String[] {"org.apache.derby.drda.NetworkServerControl",
0:                 "ping", "-h", currentHost};
1:         
0:         /* If the port isn't the default one, we make sure that these two tests pass.
0:          * The -p parameter isn't specified here.
0:          * Changed to accomodate DERBY-4217
1:          */
0:         if (TestConfiguration.getCurrent().getPort() == TestConfiguration.DEFAULT_PORT) {
0: 	        assertSuccessfulPing(pingCmd1);
0:             assertSuccessfulPing(pingCmd3);
1:         }
1:         
0:         "ping", "-h", currentHost, "-p", bogusPort};
commit:65eb19a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.Locale;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: public class NetworkServerControlClientCommandTest extends BaseJDBCTestCase {
1: 
1:     public NetworkServerControlClientCommandTest(String name) {
1:         super(name);
1: 
1:     }
1: 
1:     /**
0:      * Test various ping commands from the command line
1:      * 
0:      * @throws Exception
1:      */
0:     public void testPing() throws Exception {
1:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:         String currentPort = Integer.toString(TestConfiguration.getCurrent().getPort());
1:         
0:         String[] pingCmd1 = new String[] {
0:                 "org.apache.derby.drda.NetworkServerControl", "ping" };
0:         assertSuccessfulPing(pingCmd1);
1:       
0:         String[] pingCmd2 = new String[] {
1:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h",
1:                 currentHost, "-p", currentPort};
0:         assertSuccessfulPing(pingCmd2);
1:         
0:         String[] pingCmd3 = new String[] {"org.apache.derby.drda.NetworkServerControl",
0:         "ping", "-h", currentHost};
0:         assertSuccessfulPing(pingCmd3);
1:         
0:         String[] pingCmd4 = new String[] {
1:                 "org.apache.derby.drda.NetworkServerControl", "ping", "-h",
0:                 "nothere" };
0:         assertFailedPing(pingCmd4,"Unable to find host");
0:         String[] pingCmd5= new String[] {"org.apache.derby.drda.NetworkServerControl",
0:         "ping", "-h", currentHost, "-p", "9393"};
0:         assertFailedPing(pingCmd5,"Could not connect to Derby Network Server");
1: 
1:     }
1: 
1:     /**
1:      * Execute ping command and verify that it completes successfully
1:      * @param pingCmd array of java arguments for ping command
1:      * @throws InterruptedException
1:      * @throws IOException
1:      */
1:     private void  assertSuccessfulPing(String[] pingCmd) throws InterruptedException, IOException {
1:         
0:         InputStream is = Utilities.execJavaCmd(pingCmd, 0);
0:         byte[] b = new byte[80];
0:         is.read(b, 0, 80);
0:         String output = new String(b);
0:         assertTrue(output.startsWith("Connection obtained"));
1:         
1:     }
1:     /**
1:      * Execute ping command and verify that it fails with the expected message
1:      * 
1:      * @param pingCmd array of java arguments for ping command
1:      * @param expectedMessage expected error message
1:      * @throws InterruptedException
1:      * @throws IOException
1:      */
1:     private void assertFailedPing(String[] pingCmd,String expectedMessage) throws InterruptedException, IOException {
1:         
0:         InputStream is = Utilities.execJavaCmd(pingCmd, 1);
0:         byte[] b = new byte[80];
0:         is.read(b, 0, 80);
0:         String output = new String(b);
0:         assertTrue(output.startsWith(expectedMessage));
1:         
1:     }
1:     
1: 
1:     public static Test suite() {
1: 
0:         TestSuite suite = new TestSuite("NetworkServerControlClientCommandTest");
1:         
1: 
0:         // need network server, english locale so we can compare command output 
1:         // and we don't run on J2ME because java command is different.
0:         if (!Derby.hasServer() || !Locale.getDefault().getLanguage().equals("en") ||
1:                 JDBC.vmSupportsJSR169())
1:             return suite;
1:         Test test = TestConfiguration
1:                 .clientServerSuite(NetworkServerControlClientCommandTest.class);
1:         
1:         // no security manager because we exec a process and don't have permission for that.
1:         test = SecurityManagerSetup.noSecurityManager(test);
1:         suite.addTest(test);
1:         return suite;
1:     }
1: 
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:637c1f9
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest
0: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
0: 
1: http://www.apache.org/licenses/LICENSE-2.0
0: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
0: 
0: */
0: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:044179c
/////////////////////////////////////////////////////////////////////////
0: /*        InputStream is = Utilities.execJavaCmd(pingCmd, 0);
0: */
1:         assertExecJavaCmdAsExpected(new String[] {"Connection obtained"}, pingCmd, 0);
/////////////////////////////////////////////////////////////////////////
0:         /*InputStream is = Utilities.execJavaCmd(pingCmd, 1);
0:         assertTrue(output.startsWith(expectedMessage));*/
1:         assertExecJavaCmdAsExpected(new String[] {expectedMessage}, pingCmd, 1);
============================================================================