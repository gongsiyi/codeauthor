1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.SortObserver
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A SortObserver is an object that is used as a callback by the
1:eac0369:  * sorter.  It allows the sort client to do whatever they want
1:eac0369:  * from the context of a sort.  It contains 2 callback methods:
1:eac0369:  * <I>insertDuplicateKey()</I> and <I>insertNonDuplicateKey()</I>.  
1:eac0369:  * On each <I>SortController.insert()</I>, one or the other of these 
1:eac0369:  * methods will be called, depending on whether the given row has a
1:eac0369:  * key that has been seen before or not.
1:eac0369:  * <p>
1:eac0369:  * Some sample uses include:
1:eac0369:  * <UL><LI>
1:eac0369:  *
1:eac0369:  * <I>Sorts from Language</I>: Language typically recycles
1:eac0369:  * data type wrappers.  So the language layer uses SortObservers
1:eac0369:  * to clone rows that are kept by the sorter.  
1:eac0369:  * </LI>
1:eac0369:  *
1:eac0369:  * <LI>
1:eac0369:  * <I>Distinct sorts</I>: The sorter will call the sort observer
1:eac0369:  * each time it identifies a duplicate row.  Based on what the
1:eac0369:  * sort observer returns to the sorter, the sorter will either
1:eac0369:  * retain (insert) the duplicate row, or discard the duplicate
1:eac0369:  * row.  All you have to do to implement a distinct sort is to
1:eac0369:  * tell the sorter to discard the row (return null from <I>
1:eac0369:  * insertDuplicateKey()</I>).  Also, if you want to throw an 
1:eac0369:  * exception on a duplicate (e.g. create a unique index), you 
1:eac0369:  * can just throw an exception from your SortObserver.
1:eac0369:  * </LI>
1:eac0369:  *
1:eac0369:  * <LI>
1:eac0369:  * <I>Aggregates</I>: Vector (grouped) aggregates typically require
1:eac0369:  * a sort.  Language can use a SortObserver to perform aggregations
1:eac0369:  * as duplicate elements are encountered.  Scalar aggregates
1:eac0369:  * can also be computed using a SortObserver.
1:eac0369:  * </LI>
1:eac0369:  * </UL>
1:eac0369:  *
1:eac0369:  * These are possible uses only.  You, kind reader, may do whatever 
1:eac0369:  * you wish with this forgiving interface.
1:eac0369:  *
1:eac0369:  * @see SortController
1:eac0369:  *
1:eac0369:  **/
1:eac0369: public interface SortObserver
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a distinct sort
1:eac0369: 	 * key; in other words, the first time that a
1:eac0369: 	 * key is inserted into the sorter, this method
1:eac0369: 	 * is called.  Subsequent inserts with the same
1:eac0369: 	 * key generate a call to insertDuplicateKey()
1:eac0369: 	 * instead.
1:eac0369: 	 * <p>
1:eac0369: 	 * This method will most commonly be used to clone
1:eac0369: 	 * the row that is retained by the sorter, or possibly
1:eac0369: 	 * to do some initialization of that row.
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining
1:eac0369: 	 *
1:eac0369: 	 * @return the row to be inserted by the sorter.  If null,
1:eac0369: 	 *		then nothing is inserted by the sorter.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException either on unexpected exception,
1:eac0369: 	 * 		or on expected user error that is to percolate back
1:eac0369: 	 *		to the driver of the sort.
1:eac0369: 	 */
1:eac0369: 	DataValueDescriptor[] insertNonDuplicateKey(
1:eac0369:     DataValueDescriptor[] insertRow) 
1:eac0369: 		throws StandardException;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Called prior to inserting a duplicate sort
1:eac0369: 	 * key.   This method will typically be used
1:eac0369: 	 * to perform some aggregation on a row that is
1:eac0369: 	 * going to be discarded by the sorter.
1:eac0369: 	 *
1:eac0369: 	 * @param insertRow the current row that the sorter
1:eac0369: 	 * 		is on the verge of retaining.  It is a duplicate
1:eac0369: 	 * 		of existingRow.
1:eac0369: 	 *
1:eac0369: 	 * @param existingRow the row that is already in the
1:eac0369: 	 * 		the sorter which is a duplicate of insertRow
1:eac0369: 	 *
1:eac0369: 	 * @return the row to be inserted by the sorter.  If null,
1:eac0369: 	 *		then nothing is inserted by the sorter.  Distinct
1:eac0369: 	 *		sorts will want to return null.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException either on unexpected exception,
1:eac0369: 	 * 		or on expected user error that is to percolate back
1:eac0369: 	 *		to the driver of the sort.
1:eac0369: 	 */
1:eac0369: 	DataValueDescriptor[] insertDuplicateKey(
1:eac0369:     DataValueDescriptor[] insertRow, 
1:eac0369:     DataValueDescriptor[] existingRow) 
1:eac0369: 			throws StandardException;
1:eac0369: 
1:eac0369: 	public void addToFreeList(
1:eac0369:     DataValueDescriptor[]   objectArray, 
1:eac0369:     int                     maxFreeListSize);
1:eac0369: 
1:eac0369: 	public DataValueDescriptor[] getArrayClone()
1:eac0369: 		throws StandardException;
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:0c5bc3a:      * @return true if the index's constraint is deferrable. Any SortObserver
1:0c5bc3a:      * implementations that implement uniqueness checking need to keep track of
1:0c5bc3a:      * this information.
1:0c5bc3a:      */
1:0c5bc3a:     public boolean deferrable();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:0c5bc3a:      * @return true if constraint mode of the index's constraint is effectively
1:0c5bc3a:      * deferred. Any SortObserver
1:0c5bc3a:      * implementations that implement uniqueness checking need to keep track of
1:0c5bc3a:      * this information.
1:0c5bc3a:      */
1:0c5bc3a:     public boolean deferred();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:0c5bc3a:      * Will be called by sorters iff deferrable() and deferred() and
1:0c5bc3a:      * uniqueness violation, so implementations that sometimes return
1:0c5bc3a:      * true to these must implement this method to save duplicate
1:0c5bc3a:      * information till commit time.
1:0c5bc3a:      *
1:0c5bc3a:      * @param row data of offending key
1:0c5bc3a:      * @throws StandardException standard error policy
1:0c5bc3a:      */
1:0c5bc3a:     public void rememberDuplicate(DataValueDescriptor[] row)
1:0c5bc3a:             throws StandardException;
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:      * @return true if the index's constraint is deferrable. Any SortObserver
1:      * implementations that implement uniqueness checking need to keep track of
1:      * this information.
1:      */
1:     public boolean deferrable();
1: 
1:     /**
1:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:      * @return true if constraint mode of the index's constraint is effectively
1:      * deferred. Any SortObserver
1:      * implementations that implement uniqueness checking need to keep track of
1:      * this information.
1:      */
1:     public boolean deferred();
1: 
1:     /**
1:      * Overridden by subclasses that observe sorters with uniqueness checking.
1:      * Will be called by sorters iff deferrable() and deferred() and
1:      * uniqueness violation, so implementations that sometimes return
1:      * true to these must implement this method to save duplicate
1:      * information till commit time.
1:      *
1:      * @param row data of offending key
1:      * @throws StandardException standard error policy
1:      */
1:     public void rememberDuplicate(DataValueDescriptor[] row)
1:             throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.SortObserver
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * A SortObserver is an object that is used as a callback by the
1:  * sorter.  It allows the sort client to do whatever they want
1:  * from the context of a sort.  It contains 2 callback methods:
1:  * <I>insertDuplicateKey()</I> and <I>insertNonDuplicateKey()</I>.  
1:  * On each <I>SortController.insert()</I>, one or the other of these 
1:  * methods will be called, depending on whether the given row has a
1:  * key that has been seen before or not.
1:  * <p>
1:  * Some sample uses include:
1:  * <UL><LI>
1:  *
1:  * <I>Sorts from Language</I>: Language typically recycles
1:  * data type wrappers.  So the language layer uses SortObservers
1:  * to clone rows that are kept by the sorter.  
1:  * </LI>
1:  *
1:  * <LI>
1:  * <I>Distinct sorts</I>: The sorter will call the sort observer
1:  * each time it identifies a duplicate row.  Based on what the
1:  * sort observer returns to the sorter, the sorter will either
1:  * retain (insert) the duplicate row, or discard the duplicate
1:  * row.  All you have to do to implement a distinct sort is to
1:  * tell the sorter to discard the row (return null from <I>
1:  * insertDuplicateKey()</I>).  Also, if you want to throw an 
1:  * exception on a duplicate (e.g. create a unique index), you 
1:  * can just throw an exception from your SortObserver.
1:  * </LI>
1:  *
1:  * <LI>
1:  * <I>Aggregates</I>: Vector (grouped) aggregates typically require
1:  * a sort.  Language can use a SortObserver to perform aggregations
1:  * as duplicate elements are encountered.  Scalar aggregates
1:  * can also be computed using a SortObserver.
1:  * </LI>
1:  * </UL>
1:  *
1:  * These are possible uses only.  You, kind reader, may do whatever 
1:  * you wish with this forgiving interface.
1:  *
1:  * @see SortController
1:  *
1:  **/
1: public interface SortObserver
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	 * Called prior to inserting a distinct sort
1: 	 * key; in other words, the first time that a
1: 	 * key is inserted into the sorter, this method
1: 	 * is called.  Subsequent inserts with the same
1: 	 * key generate a call to insertDuplicateKey()
1: 	 * instead.
1: 	 * <p>
1: 	 * This method will most commonly be used to clone
1: 	 * the row that is retained by the sorter, or possibly
1: 	 * to do some initialization of that row.
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining
1: 	 *
1: 	 * @return the row to be inserted by the sorter.  If null,
1: 	 *		then nothing is inserted by the sorter.
1: 	 *
1: 	 * @exception StandardException either on unexpected exception,
1: 	 * 		or on expected user error that is to percolate back
1: 	 *		to the driver of the sort.
1: 	 */
1: 	DataValueDescriptor[] insertNonDuplicateKey(
1:     DataValueDescriptor[] insertRow) 
1: 		throws StandardException;
1: 	
1: 	/**
1: 	 * Called prior to inserting a duplicate sort
1: 	 * key.   This method will typically be used
1: 	 * to perform some aggregation on a row that is
1: 	 * going to be discarded by the sorter.
1: 	 *
1: 	 * @param insertRow the current row that the sorter
1: 	 * 		is on the verge of retaining.  It is a duplicate
1: 	 * 		of existingRow.
1: 	 *
1: 	 * @param existingRow the row that is already in the
1: 	 * 		the sorter which is a duplicate of insertRow
1: 	 *
1: 	 * @return the row to be inserted by the sorter.  If null,
1: 	 *		then nothing is inserted by the sorter.  Distinct
1: 	 *		sorts will want to return null.
1: 	 *
1: 	 * @exception StandardException either on unexpected exception,
1: 	 * 		or on expected user error that is to percolate back
1: 	 *		to the driver of the sort.
1: 	 */
1: 	DataValueDescriptor[] insertDuplicateKey(
1:     DataValueDescriptor[] insertRow, 
1:     DataValueDescriptor[] existingRow) 
1: 			throws StandardException;
1: 
1: 	public void addToFreeList(
1:     DataValueDescriptor[]   objectArray, 
1:     int                     maxFreeListSize);
1: 
1: 	public DataValueDescriptor[] getArrayClone()
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * A SortObserver is an object that is used as a callback by the
0:  * sorter.  It allows the sort client to do whatever they want
0:  * from the context of a sort.  It contains 2 callback methods:
0:  * <I>insertDuplicateKey()</I> and <I>insertNonDuplicateKey()</I>.  
0:  * On each <I>SortController.insert()</I>, one or the other of these 
0:  * methods will be called, depending on whether the given row has a
0:  * key that has been seen before or not.
0:  * <p>
0:  * Some sample uses include:
0:  * <UL><LI>
0:  *
0:  * <I>Sorts from Language</I>: Language typically recycles
0:  * data type wrappers.  So the language layer uses SortObservers
0:  * to clone rows that are kept by the sorter.  
0:  * </LI>
0:  *
0:  * <LI>
0:  * <I>Distinct sorts</I>: The sorter will call the sort observer
0:  * each time it identifies a duplicate row.  Based on what the
0:  * sort observer returns to the sorter, the sorter will either
0:  * retain (insert) the duplicate row, or discard the duplicate
0:  * row.  All you have to do to implement a distinct sort is to
0:  * tell the sorter to discard the row (return null from <I>
0:  * insertDuplicateKey()</I>).  Also, if you want to throw an 
0:  * exception on a duplicate (e.g. create a unique index), you 
0:  * can just throw an exception from your SortObserver.
0:  * </LI>
0:  *
0:  * <LI>
0:  * <I>Aggregates</I>: Vector (grouped) aggregates typically require
0:  * a sort.  Language can use a SortObserver to perform aggregations
0:  * as duplicate elements are encountered.  Scalar aggregates
0:  * can also be computed using a SortObserver.
0:  * </LI>
0:  * </UL>
0:  *
0:  * These are possible uses only.  You, kind reader, may do whatever 
0:  * you wish with this forgiving interface.
0:  *
0:  * @see SortController
0:  *
0:  **/
0: public interface SortObserver
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * Called prior to inserting a distinct sort
0: 	 * key; in other words, the first time that a
0: 	 * key is inserted into the sorter, this method
0: 	 * is called.  Subsequent inserts with the same
0: 	 * key generate a call to insertDuplicateKey()
0: 	 * instead.
0: 	 * <p>
0: 	 * This method will most commonly be used to clone
0: 	 * the row that is retained by the sorter, or possibly
0: 	 * to do some initialization of that row.
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining
0: 	 *
0: 	 * @return the row to be inserted by the sorter.  If null,
0: 	 *		then nothing is inserted by the sorter.
0: 	 *
0: 	 * @exception StandardException either on unexpected exception,
0: 	 * 		or on expected user error that is to percolate back
0: 	 *		to the driver of the sort.
0: 	 */
0: 	DataValueDescriptor[] insertNonDuplicateKey(
0:     DataValueDescriptor[] insertRow) 
0: 		throws StandardException;
0: 	
0: 	/**
0: 	 * Called prior to inserting a duplicate sort
0: 	 * key.   This method will typically be used
0: 	 * to perform some aggregation on a row that is
0: 	 * going to be discarded by the sorter.
0: 	 *
0: 	 * @param insertRow the current row that the sorter
0: 	 * 		is on the verge of retaining.  It is a duplicate
0: 	 * 		of existingRow.
0: 	 *
0: 	 * @param existingRow the row that is already in the
0: 	 * 		the sorter which is a duplicate of insertRow
0: 	 *
0: 	 * @return the row to be inserted by the sorter.  If null,
0: 	 *		then nothing is inserted by the sorter.  Distinct
0: 	 *		sorts will want to return null.
0: 	 *
0: 	 * @exception StandardException either on unexpected exception,
0: 	 * 		or on expected user error that is to percolate back
0: 	 *		to the driver of the sort.
0: 	 */
0: 	DataValueDescriptor[] insertDuplicateKey(
0:     DataValueDescriptor[] insertRow, 
0:     DataValueDescriptor[] existingRow) 
0: 			throws StandardException;
0: 
0: 	public void addToFreeList(
0:     DataValueDescriptor[]   objectArray, 
0:     int                     maxFreeListSize);
0: 
0: 	public DataValueDescriptor[] getArrayClone()
0: 		throws StandardException;
0: }
============================================================================