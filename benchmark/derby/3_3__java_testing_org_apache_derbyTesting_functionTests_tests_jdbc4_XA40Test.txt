1:7eed914: /*
2:7eed914:  *
1:f26c60c:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test
1:7eed914:  *
1:6e3dbab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:  * contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:  * this work for additional information regarding copyright ownership.
1:6e3dbab:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:  * (the "License"); you may not use this file except in compliance with
1:6e3dbab:  * the License.  You may obtain a copy of the License at
1:7eed914:  *
1:7eed914:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7eed914:  *
1:7eed914:  * Unless required by applicable law or agreed to in writing, 
1:7eed914:  * software distributed under the License is distributed on an 
1:7eed914:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:7eed914:  * either express or implied. See the License for the specific 
1:7eed914:  * language governing permissions and limitations under the License.
1:7eed914:  */
1:7eed914: 
1:7eed914: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:7eed914: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:8ed08b2: import org.apache.derbyTesting.junit.J2EEDataSource;
1:85038ef: import org.apache.derbyTesting.junit.JDBC;
1:ec5ae26: import org.apache.derbyTesting.junit.TestConfiguration;
1:7eed914: 
1:7eed914: import junit.framework.*;
1:7eed914: 
1:9206d5b: import java.lang.reflect.Method;
1:7eed914: import java.sql.*;
1:7eed914: 
1:7eed914: import javax.sql.XAConnection;
1:7eed914: import javax.sql.XADataSource;
1:7eed914: import javax.transaction.xa.XAResource;
1:7eed914: 
1:863daa0: import org.apache.derby.iapi.jdbc.BrokeredStatement;
1:863daa0: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
1:863daa0: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
1:7eed914: 
1:7eed914: 
1:7eed914: /**
1:7eed914:  * Test new methods added for XA in JDBC4.
1:7eed914:  */
1:7eed914: public class XA40Test extends BaseJDBCTestCase {
1:7eed914: 
1:7eed914:     /** Default XADataSource used by the tests. */
1:7eed914:     private XADataSource xads = null;
1:7eed914: 
1:7eed914:     /** Default XAConnection used by the tests. */
1:7eed914:     private XAConnection xac = null;
1:7eed914: 
1:7eed914:     /** Default XAResource used by the tests. */
1:7eed914:     private XAResource xar = null;
1:7eed914: 
1:7eed914:     /** Default Connection used by the tests. */
1:7eed914:     private Connection con = null;
1:7eed914:     
1:7eed914:     /**
1:7eed914:      * Create a new test with the given name.
1:7eed914:      *
1:7eed914:      * @param name name of the test.
1:7eed914:      */
1:7eed914:     public XA40Test(String name) {
1:7eed914:         super(name);
1:7eed914:     }
1:7eed914: 
1:7eed914:     /**
1:7eed914:      * Create default XADataSource, XAResource, XAConnection, and
1:7eed914:      * Connection for the tests.
1:7eed914:      *
2:7eed914:      * @throws SQLException if a database access exception occurs.
1:7eed914:      */
1:7eed914:     public void setUp() 
2:7eed914:         throws SQLException {
1:8ed08b2:         xads = J2EEDataSource.getXADataSource();
1:7eed914:         xac = xads.getXAConnection();
1:7eed914:         xar = xac.getXAResource();
1:7eed914:         con = xac.getConnection();
1:7eed914:         assertFalse("Connection must be open initially", con.isClosed());
1:7eed914:         con.setAutoCommit(false);
1:7eed914:     }
1:7eed914: 
1:7eed914:     /**
1:7eed914:      * Close default connection and XAConnection if necessary.
1:7eed914:      *
1:ec5ae26:      * @throws Exception if an exception occurs.
1:7eed914:      */
1:ec5ae26:     protected void tearDown() throws Exception {
1:7eed914:         // Close default connection
1:7eed914:         // Check if connection is open to avoid exception on rollback.
1:7eed914:         if (con != null && !con.isClosed()) {
1:7eed914:             // Abort changes that may have been done in the test.
1:7eed914:             // The test-method may however commit these itself.
1:7eed914:             con.rollback();
1:7eed914:             con.close();
1:7eed914:         }
1:7eed914:         if (xac != null) {
1:7eed914:             xac.close();
1:7eed914:         }
1:ec5ae26:         con = null;
1:ec5ae26:         xads = null;
1:ec5ae26:         xac = null;
1:ec5ae26:         xar = null;
1:ec5ae26:         super.tearDown();
1:7eed914:     }
1:7eed914: 
1:7eed914:     
1:7eed914:     /**
1:7eed914:      * Tests isPoolable(), setPoolable(boolean) and default
1:7eed914:      * poolability for Statement, (which for XA is actually a
1:7eed914:      * BrokeredStatement40 in embedded).
1:7eed914:      *
1:7eed914:      * @throws SQLException if a database access exception occurs.
1:7eed914:      */
1:7eed914:     public void testStatementPoolable() throws SQLException {
1:7eed914:         Statement s = con.createStatement();
1:7eed914:         if (usingEmbedded()) {
1:863daa0:             assertTrue("s must be an instance of BrokeredStatement, " +
1:7eed914:                        "but is " + s.getClass(), 
1:863daa0:                        (s instanceof BrokeredStatement));
1:7eed914:         }
1:7eed914:         assertFalse("Statement must not be poolable by default", 
1:7eed914:                     s.isPoolable()); 
1:7eed914:         s.setPoolable(true);
1:7eed914:         assertTrue("Statement must be poolable", s.isPoolable());
1:7eed914: 
1:7eed914:         s.setPoolable(false);
1:7eed914:         assertFalse("Statement cannot be poolable", s.isPoolable());
1:7eed914:     }
1:7eed914: 
1:7eed914:     /**
1:7eed914:      * Tests isPoolable() and setPoolable(boolean) for
1:7eed914:      * PreparedStatement, (which for XA is actually a
1:7eed914:      * BrokeredPreparedStatement40 in embedded).
1:7eed914:      *
1:7eed914:      * @throws SQLException if a database access exception occurs.
1:7eed914:      */
1:7eed914:     public void testPreparedStatementPoolable() throws SQLException {
1:7eed914:         PreparedStatement ps = 
1:7eed914:             con.prepareStatement("CREATE TABLE foo(i int)");
1:7eed914:         if (usingEmbedded()) {
1:7eed914:             assertTrue("ps must be an instance of " + 
1:863daa0:                        "BrokeredPreparedStatement, " +
1:7eed914:                        "but is " + ps.getClass(), 
1:863daa0:                        (ps instanceof BrokeredPreparedStatement));
1:7eed914:         }
1:7eed914:         assertTrue("PreparedStatement must be poolable by default", 
1:7eed914:                     ps.isPoolable()); 
1:7eed914:         ps.setPoolable(false);
1:7eed914:         assertFalse("PreparedStatement cannot be poolable", ps.isPoolable());
1:7eed914: 
1:7eed914:         ps.setPoolable(true);
1:7eed914:         assertTrue("PreparedStatement must be poolable", ps.isPoolable());
1:7eed914:     }
1:7eed914: 
1:7eed914:     /**
1:7eed914:      * Tests isPoolable() and setPoolable(boolean) and default
1:7eed914:      * poolability for CallableStatement (which for XA is actually a
1:7eed914:      * BrokeredCallableStatement40 in embedded).
1:7eed914:      *
1:7eed914:      * @throws SQLException if a database access exception occurs.
1:7eed914:      */
1:7eed914:     public void testCallableStatementPoolable() throws SQLException {
1:7eed914:         CallableStatement cs = 
1:7eed914:             con.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:7eed914:         if (usingEmbedded()) {
1:7eed914:             assertTrue("cs must be an instance of " + 
1:863daa0:                        "BrokeredCallableStatement, " +
1:7eed914:                        "but is " + cs.getClass(), 
1:863daa0:                        (cs instanceof BrokeredCallableStatement));
1:7eed914:         }
1:7eed914:         assertTrue("CallableStatement must be poolable by default", 
1:7eed914:                     cs.isPoolable()); 
1:7eed914:         cs.setPoolable(false);
1:7eed914:         assertFalse("CallableStatement cannot be poolable", cs.isPoolable());
1:7eed914: 
1:7eed914:         cs.setPoolable(true);
1:7eed914:         assertTrue("CallableStatement must be poolable", cs.isPoolable());
1:7eed914:     }
1:7eed914: 
1:7eed914:     /**
1:9206d5b:      * <p>
1:f26c60c:      * Test the JDBC 4.2 statement additions to brokered and logical statements.
1:f26c60c:      * </p>
1:f26c60c:      */
1:f26c60c:     public void testLargeUpdate_jdbc4_2() throws Exception
1:f26c60c:     {
1:f26c60c:         StatementTest.largeUpdate_jdbc4_2( con );
1:f26c60c:     }
1:7eed914: 
1:f26c60c:     /**
1:f26c60c:      * <p>
1:9206d5b:      * Test the JDBC 4.2 additions to brokered CallableStatements.
1:9206d5b:      * </p>
1:9206d5b:      */
1:9206d5b:     public void test_registerOutParameter_jdbc4_2() throws Exception
1:9206d5b:     {
1:85038ef:         if (JDBC.vmSupportsJDBC42())
1:9206d5b:         {
1:9206d5b:             Class<?>   klass = Class.forName( "org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42" );
1:9206d5b:             Method  method = klass.getMethod( "registerObjectTest", new Class<?>[] { Connection.class } );
1:7eed914: 
1:9206d5b:             method.invoke( null, new Object[] { con } );
1:9206d5b:         }
1:9206d5b:     }
1:7eed914: 
1:9206d5b:     /**
1:7eed914:      * Create test suite for XA40Test.
1:7eed914:      */
1:7eed914:     public static Test suite() {
1:8ed08b2:         return TestConfiguration.defaultSuite(XA40Test.class);
1:7eed914:     }
1:ec5ae26:     
1:7eed914: } // End class XA40Test
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:85038ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJDBC42())
commit:863daa0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.BrokeredStatement;
1: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
1: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("s must be an instance of BrokeredStatement, " +
1:                        (s instanceof BrokeredStatement));
/////////////////////////////////////////////////////////////////////////
1:                        "BrokeredPreparedStatement, " +
1:                        (ps instanceof BrokeredPreparedStatement));
/////////////////////////////////////////////////////////////////////////
1:                        "BrokeredCallableStatement, " +
1:                        (cs instanceof BrokeredCallableStatement));
commit:ec5ae26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception if an exception occurs.
1:     protected void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         con = null;
1:         xads = null;
1:         xac = null;
1:         xar = null;
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
0:         // This test will fail in client/server mode until DERBY-2047 is fixed.
0:         //return TestConfiguration.defaultSuite(XA40Test.class);
1: 
commit:57efc3c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.TestDataSourceFactory;
/////////////////////////////////////////////////////////////////////////
0:         xads = TestDataSourceFactory.getXADataSource();
commit:7eed914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class XA40Test
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: import junit.framework.*;
1: 
1: import java.sql.*;
1: 
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import javax.transaction.xa.XAResource;
1: 
0: import org.apache.derby.iapi.jdbc.BrokeredStatement40;
0: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40;
0: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement40;
1: 
1: 
1: /**
1:  * Test new methods added for XA in JDBC4.
1:  */
1: public class XA40Test extends BaseJDBCTestCase {
1: 
1:     /** Default XADataSource used by the tests. */
1:     private XADataSource xads = null;
1: 
1:     /** Default XAConnection used by the tests. */
1:     private XAConnection xac = null;
1: 
1:     /** Default XAResource used by the tests. */
1:     private XAResource xar = null;
1: 
1:     /** Default Connection used by the tests. */
1:     private Connection con = null;
1:     
1:     /**
1:      * Create a new test with the given name.
1:      *
1:      * @param name name of the test.
1:      */
1:     public XA40Test(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create default XADataSource, XAResource, XAConnection, and
1:      * Connection for the tests.
1:      *
1:      * @throws SQLException if a database access exception occurs.
1:      */
1:     public void setUp() 
1:         throws SQLException {
0:         xads = getXADataSource();
1:         xac = xads.getXAConnection();
1:         xar = xac.getXAResource();
1:         con = xac.getConnection();
1:         assertFalse("Connection must be open initially", con.isClosed());
1:         con.setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Close default connection and XAConnection if necessary.
1:      *
1:      * @throws SQLException if a database access exception occurs.
1:      */
0:     public void tearDown() 
1:         throws SQLException {
1:         // Close default connection
1:         // Check if connection is open to avoid exception on rollback.
1:         if (con != null && !con.isClosed()) {
1:             // Abort changes that may have been done in the test.
1:             // The test-method may however commit these itself.
1:             con.rollback();
1:             con.close();
1:         }
1:         if (xac != null) {
1:             xac.close();
1:         }
1:     }
1: 
1:     
1:     /**
1:      * Tests isPoolable(), setPoolable(boolean) and default
1:      * poolability for Statement, (which for XA is actually a
1:      * BrokeredStatement40 in embedded).
1:      *
1:      * @throws SQLException if a database access exception occurs.
1:      */
1:     public void testStatementPoolable() throws SQLException {
1:         Statement s = con.createStatement();
1:         if (usingEmbedded()) {
0:             assertTrue("s must be an instance of BrokeredStatement40, " + 
1:                        "but is " + s.getClass(), 
0:                        (s instanceof BrokeredStatement40));
1:         }
1:         assertFalse("Statement must not be poolable by default", 
1:                     s.isPoolable()); 
1:         s.setPoolable(true);
1:         assertTrue("Statement must be poolable", s.isPoolable());
1: 
1:         s.setPoolable(false);
1:         assertFalse("Statement cannot be poolable", s.isPoolable());
1:     }
1: 
1:     /**
1:      * Tests isPoolable() and setPoolable(boolean) for
1:      * PreparedStatement, (which for XA is actually a
1:      * BrokeredPreparedStatement40 in embedded).
1:      *
1:      * @throws SQLException if a database access exception occurs.
1:      */
1:     public void testPreparedStatementPoolable() throws SQLException {
1:         PreparedStatement ps = 
1:             con.prepareStatement("CREATE TABLE foo(i int)");
1:         if (usingEmbedded()) {
1:             assertTrue("ps must be an instance of " + 
0:                        "BrokeredPreparedStatement40, " + 
1:                        "but is " + ps.getClass(), 
0:                        (ps instanceof BrokeredPreparedStatement40));
1:         }
1:         assertTrue("PreparedStatement must be poolable by default", 
1:                     ps.isPoolable()); 
1:         ps.setPoolable(false);
1:         assertFalse("PreparedStatement cannot be poolable", ps.isPoolable());
1: 
1:         ps.setPoolable(true);
1:         assertTrue("PreparedStatement must be poolable", ps.isPoolable());
1:     }
1: 
1:     /**
1:      * Tests isPoolable() and setPoolable(boolean) and default
1:      * poolability for CallableStatement (which for XA is actually a
1:      * BrokeredCallableStatement40 in embedded).
1:      *
1:      * @throws SQLException if a database access exception occurs.
1:      */
1:     public void testCallableStatementPoolable() throws SQLException {
1:         CallableStatement cs = 
1:             con.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:         if (usingEmbedded()) {
1:             assertTrue("cs must be an instance of " + 
0:                        "BrokeredCallableStatement40, " + 
1:                        "but is " + cs.getClass(), 
0:                        (cs instanceof BrokeredCallableStatement40));
1:         }
1:         assertTrue("CallableStatement must be poolable by default", 
1:                     cs.isPoolable()); 
1:         cs.setPoolable(false);
1:         assertFalse("CallableStatement cannot be poolable", cs.isPoolable());
1: 
1:         cs.setPoolable(true);
1:         assertTrue("CallableStatement must be poolable", cs.isPoolable());
1:     }
1: 
1: 
1:     /**
1:      * Create test suite for XA40Test.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("XA40Test suite");
0:         // Decorate test suite with a TestSetup class.
0:         suite.addTest(new TestSuite(XA40Test.class));
1: 
0:         return suite;
1:     }
1:     
1: } // End class XA40Test
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9206d5b
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Test the JDBC 4.2 additions to brokered CallableStatements.
1:      * </p>
1:      */
1:     public void test_registerOutParameter_jdbc4_2() throws Exception
1:     {
0:         if ( isJava8() )
1:         {
1:             Class<?>   klass = Class.forName( "org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42" );
1:             Method  method = klass.getMethod( "registerObjectTest", new Class<?>[] { Connection.class } );
0: 
1:             method.invoke( null, new Object[] { con } );
1:         }
1:     }
0: 
1:     /**
commit:f26c60c
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test the JDBC 4.2 statement additions to brokered and logical statements.
1:      * </p>
1:      */
1:     public void testLargeUpdate_jdbc4_2() throws Exception
1:     {
1:         StatementTest.largeUpdate_jdbc4_2( con );
1:     }
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8ed08b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.J2EEDataSource;
/////////////////////////////////////////////////////////////////////////
1:         xads = J2EEDataSource.getXADataSource();
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(XA40Test.class);
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
============================================================================