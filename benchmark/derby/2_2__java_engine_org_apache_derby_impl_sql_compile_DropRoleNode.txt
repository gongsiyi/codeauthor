1:ee59de8: /*
4:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.compile.DropRoleNode
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.compile;
1:ee59de8: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ee59de8: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:ee59de8: import org.apache.derby.iapi.sql.conn.Authorizer;
1:ee59de8: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  * A DropRoleNode is the root of a QueryTree that represents
1:ee59de8:  * a DROP ROLE statement.
1:ee59de8:  *
1:ee59de8:  */
1:ee59de8: 
1:3bb140c: class DropRoleNode extends DDLStatementNode
1:ee59de8: {
1:ee59de8:     private String roleName;
1:ee59de8: 
1:ee59de8:     /**
1:3bb140c:      * Constructor for a DropRoleNode
1:ee59de8:      *
1:ee59de8:      * @param roleName      The name of the object being dropped
1:3bb140c:      * @param cm            Context manager
1:ee59de8:      *
1:ee59de8:      */
1:3bb140c:     DropRoleNode(String roleName, ContextManager cm) throws StandardException
1:ee59de8:     {
1:3bb140c:         super(null, cm);
1:3bb140c:         this.roleName = roleName;
1:ee59de8:     }
1:ee59de8: 
1:3bb140c:     @Override
1:ee59de8:     public void bindStatement() throws StandardException
1:ee59de8:     {
1:ee59de8:         CompilerContext cc = getCompilerContext();
1:ee59de8:         if (isPrivilegeCollectionRequired()) {
1:ee59de8:             cc.addRequiredRolePriv(roleName, Authorizer.DROP_ROLE_PRIV);
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:ee59de8:      * for how this should be done for tree printing.
1:ee59de8:      *
1:ee59de8:      * @return  This object as a String
1:ee59de8:      */
1:3bb140c:     @Override
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         if (SanityManager.DEBUG) {
1:ee59de8:             return super.toString() +
1:ee59de8:                 "roleName: " +  roleName + "\n";
1:ee59de8:         } else {
1:ee59de8:             return "";
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:3bb140c:     @Override
1:ee59de8:     public String statementToString()
1:ee59de8:     {
1:ee59de8:         return "DROP ROLE";
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // inherit generate() method from DDLStatementNode
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Create the Constant information that will drive the guts of Execution.
1:ee59de8:      *
1:ee59de8:      * @exception StandardException         Thrown on failure
1:ee59de8:      */
1:3bb140c:     @Override
1:ee59de8:     public ConstantAction   makeConstantAction() throws StandardException
1:ee59de8:     {
1:ee59de8:         return  getGenericConstantActionFactory().
1:ee59de8:             getDropRoleConstantAction(roleName);
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: class DropRoleNode extends DDLStatementNode
1:      * Constructor for a DropRoleNode
1:      * @param cm            Context manager
1:     DropRoleNode(String roleName, ContextManager cm) throws StandardException
1:         super(null, cm);
1:         this.roleName = roleName;
0:         setNodeType(C_NodeTypes.DROP_ROLE_NODE);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.DropRoleNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A DropRoleNode is the root of a QueryTree that represents
1:  * a DROP ROLE statement.
1:  *
1:  */
1: 
0: public class DropRoleNode extends DDLStatementNode
1: {
1:     private String roleName;
1: 
1:     /**
0:      * Initializer for a DropRoleNode
1:      *
1:      * @param roleName      The name of the object being dropped
1:      *
1:      */
0:     public void init(Object roleName)
0:         throws StandardException
1:     {
0:         initAndCheck(null);
0:         this.roleName = (String)roleName;
1:     }
1: 
1:     public void bindStatement() throws StandardException
1:     {
1:         CompilerContext cc = getCompilerContext();
1:         if (isPrivilegeCollectionRequired()) {
1:             cc.addRequiredRolePriv(roleName, Authorizer.DROP_ROLE_PRIV);
1:         }
1:     }
1: 
1:     /**
1:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:      * for how this should be done for tree printing.
1:      *
1:      * @return  This object as a String
1:      */
1: 
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG) {
1:             return super.toString() +
1:                 "roleName: " +  roleName + "\n";
1:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     public String statementToString()
1:     {
1:         return "DROP ROLE";
1:     }
1: 
1:     // inherit generate() method from DDLStatementNode
1: 
1:     /**
1:      * Create the Constant information that will drive the guts of Execution.
1:      *
1:      * @exception StandardException         Thrown on failure
1:      */
1:     public ConstantAction   makeConstantAction() throws StandardException
1:     {
1:         return  getGenericConstantActionFactory().
1:             getDropRoleConstantAction(roleName);
1:     }
1: }
============================================================================