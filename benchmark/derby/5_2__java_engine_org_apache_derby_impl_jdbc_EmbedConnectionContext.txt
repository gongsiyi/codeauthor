1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.EmbedConnectionContext
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: //depot/main/java/org.apache.derby.impl.jdbc/EmbedConnectionContext.java#24 - edit change 16899 (text)
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:eac0369: // This is the recommended super-class for all contexts.
1:eac0369: import org.apache.derby.iapi.services.context.ContextImpl;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.sql.conn.StatementContext;
1:eac0369: import org.apache.derby.iapi.jdbc.ConnectionContext;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:1ae0d7d: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:1ae0d7d: import java.security.AccessController;
1:1ae0d7d: import java.security.PrivilegedAction;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.util.Vector;
1:eac0369: import java.util.Enumeration;
2:eac0369: /**
1:eac0369:  */
1:824ca0b: class EmbedConnectionContext extends ContextImpl 
1:eac0369: 		implements ConnectionContext
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		We hold a soft reference to the connection so that when the application
1:eac0369: 		releases its reference to the Connection without closing it, its finalize
1:eac0369: 		method will be called, which will then close the connection. If a direct
1:eac0369: 		reference is used here, such a Connection will never be closed or garbage
1:eac0369: 		collected as modules hold onto the ContextManager and thus there would
1:eac0369: 		be a direct reference through this object.
1:eac0369: 	*/
1:71c8e86: 	private java.lang.ref.SoftReference<EmbedConnection>	connRef;
1:eac0369: 
1:eac0369: 
1:eac0369: 	EmbedConnectionContext(ContextManager cm, EmbedConnection conn) {
1:eac0369: 		super(cm, ConnectionContext.CONTEXT_ID);
1:eac0369: 
1:71c8e86: 		connRef = new java.lang.ref.SoftReference<EmbedConnection>(conn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void cleanupOnError(Throwable error) {
1:eac0369: 
1:eac0369: 		if (connRef == null)
1:eac0369: 			return;
1:eac0369: 
1:71c8e86: 		EmbedConnection conn = connRef.get();
1:eac0369: 
1:eac0369: 		if (error instanceof StandardException) {
1:eac0369: 
1:eac0369: 			StandardException se = (StandardException) error;
1:eac0369: 			if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY) {
1:eac0369: 
1:eac0369: 				// any error in auto commit mode that does not close the
1:eac0369: 				// session will cause a rollback, thus remvoing the need
1:eac0369: 				// for any commit. We could check this flag under autoCommit
1:eac0369: 				// being true but the flag is ignored when autoCommit is false
1:eac0369: 				// so why add the extra check
1:eac0369: 				if (conn != null) {
1:eac0369: 					conn.needCommit = false;
1:eac0369: 				}
1:eac0369: 				return;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// This may be a transaction without connection.
1:eac0369: 		if (conn != null)
1:eac0369: 			conn.setInactive(); // make the connection inactive & empty
1:eac0369: 
1:eac0369: 		connRef = null;
1:eac0369: 		popMe();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//public java.sql.Connection getEmbedConnection()
1:eac0369: 	//{
1:eac0369: 	///	return conn;
1:eac0369: 	//}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a connection equivalent to the call
1:eac0369: 		<PRE>
1:eac0369: 		DriverManager.getConnection("jdbc:default:connection");
1:eac0369: 		</PRE>
1:eac0369: 	*/
1:eac0369: 	public java.sql.Connection getNestedConnection(boolean internal) throws SQLException {
1:eac0369: 
1:71c8e86: 		EmbedConnection conn = connRef.get();
1:eac0369: 
1:eac0369: 		if ((conn == null) || conn.isClosed())
1:eac0369: 			throw Util.noCurrentConnection();
1:eac0369: 
1:eac0369: 		if (!internal) {
1:1ae0d7d: 			StatementContext sc = privilegedGetLCC( conn ).getStatementContext();
1:eac0369: 			if ((sc == null) || (sc.getSQLAllowed() < org.apache.derby.catalog.types.RoutineAliasInfo.MODIFIES_SQL_DATA))
1:eac0369: 				throw Util.noCurrentConnection();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return conn.getLocalDriver().getNewNestedConnection(conn);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a jdbc ResultSet based on the execution ResultSet.
1:eac0369: 	 *
1:eac0369: 	 * @param executionResultSet	a result set as gotten from execution
1:eac0369: 	 *	
1:eac0369: 	 */	
1:eac0369: 	public java.sql.ResultSet getResultSet
1:eac0369: 	(
1:eac0369: 		ResultSet 				executionResultSet
1:dfe1451: 	) throws SQLException
1:eac0369: 	{
1:71c8e86: 		EmbedConnection conn = connRef.get();
1:eac0369: 
1:eac0369: 		EmbedResultSet rs = conn.getLocalDriver().newEmbedResultSet(conn, executionResultSet, 
1:eac0369: 							false, (EmbedStatement) null, true);
1:eac0369: 		return rs;
1:eac0369: 	}
1:5b2b352: 
1:5b2b352:     /**
1:5b2b352:      * Process a ResultSet from a procedure to be a dynamic result,
1:5b2b352:      * but one that will be closed due to it being inaccessible. We cannot simply
1:5b2b352:      * close the ResultSet as it the nested connection that created
1:5b2b352:      * it might be closed, leading to its close method being a no-op.
1:5b2b352:      * This performs all the conversion (linking the ResultSet
1:5b2b352:      * to a valid connection) required but does not close
1:5b2b352:      * the ResultSet.
1:5b2b352:      * 
1:5b2b352:      *   @see EmbedStatement#processDynamicResult(EmbedConnection, java.sql.ResultSet, EmbedStatement)
1:5b2b352:      */
1:5b2b352:     public boolean processInaccessibleDynamicResult(java.sql.ResultSet resultSet) {
1:71c8e86:         EmbedConnection conn = connRef.get();
1:5b2b352:         if (conn == null)
1:5b2b352:             return false;
1:5b2b352:         
1:5b2b352:         // Pass in null as the Statement to own the ResultSet since
1:5b2b352:         // we don't have one since the dynamic result will be inaccessible.
1:5b2b352:         return EmbedStatement.processDynamicResult(conn, resultSet, null) != null;
1:5b2b352:     }
1:1ae0d7d:     
1:1ae0d7d:     /**
1:1ae0d7d:      * Private, privileged lookup of the lcc..
1:1ae0d7d:      */
1:1ae0d7d:     private LanguageConnectionContext privilegedGetLCC( final EmbedConnection conn )
1:1ae0d7d:     {
1:1ae0d7d:         return AccessController.doPrivileged
1:1ae0d7d:             (
1:1ae0d7d:              new PrivilegedAction<LanguageConnectionContext>()
1:1ae0d7d:              {
1:1ae0d7d:                  public LanguageConnectionContext run()
1:1ae0d7d:                  {
1:1ae0d7d:                      return conn.getLanguageConnection();
1:1ae0d7d:                  }
1:1ae0d7d:              }
1:1ae0d7d:              );
1:1ae0d7d:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1ae0d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 			StatementContext sc = privilegedGetLCC( conn ).getStatementContext();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Private, privileged lookup of the lcc..
1:      */
1:     private LanguageConnectionContext privilegedGetLCC( final EmbedConnection conn )
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<LanguageConnectionContext>()
1:              {
1:                  public LanguageConnectionContext run()
1:                  {
1:                      return conn.getLanguageConnection();
1:                  }
1:              }
1:              );
1:     }
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1: 	private java.lang.ref.SoftReference<EmbedConnection>	connRef;
1: 		connRef = new java.lang.ref.SoftReference<EmbedConnection>(conn);
/////////////////////////////////////////////////////////////////////////
1: 		EmbedConnection conn = connRef.get();
/////////////////////////////////////////////////////////////////////////
1: 		EmbedConnection conn = connRef.get();
/////////////////////////////////////////////////////////////////////////
1: 		EmbedConnection conn = connRef.get();
/////////////////////////////////////////////////////////////////////////
1:         EmbedConnection conn = connRef.get();
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:5b2b352
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Process a ResultSet from a procedure to be a dynamic result,
1:      * but one that will be closed due to it being inaccessible. We cannot simply
1:      * close the ResultSet as it the nested connection that created
1:      * it might be closed, leading to its close method being a no-op.
1:      * This performs all the conversion (linking the ResultSet
1:      * to a valid connection) required but does not close
1:      * the ResultSet.
1:      * 
1:      *   @see EmbedStatement#processDynamicResult(EmbedConnection, java.sql.ResultSet, EmbedStatement)
1:      */
1:     public boolean processInaccessibleDynamicResult(java.sql.ResultSet resultSet) {
0:         EmbedConnection conn = (EmbedConnection) connRef.get();
1:         if (conn == null)
1:             return false;
1:         
1:         // Pass in null as the Statement to own the ResultSet since
1:         // we don't have one since the dynamic result will be inaccessible.
1:         return EmbedStatement.processDynamicResult(conn, resultSet, null) != null;
1:     }
commit:824ca0b
/////////////////////////////////////////////////////////////////////////
1: class EmbedConnectionContext extends ContextImpl 
commit:dfe1451
/////////////////////////////////////////////////////////////////////////
1: 	) throws SQLException
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.EmbedConnectionContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: //depot/main/java/org.apache.derby.impl.jdbc/EmbedConnectionContext.java#24 - edit change 16899 (text)
1: package org.apache.derby.impl.jdbc;
1: 
1: // This is the recommended super-class for all contexts.
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.sql.conn.StatementContext;
1: import org.apache.derby.iapi.jdbc.ConnectionContext;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import java.sql.SQLException;
1: import java.util.Vector;
1: import java.util.Enumeration;
1: /**
0: 	@author djd
1:  */
0: public class EmbedConnectionContext extends ContextImpl 
1: 		implements ConnectionContext
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		We hold a soft reference to the connection so that when the application
1: 		releases its reference to the Connection without closing it, its finalize
1: 		method will be called, which will then close the connection. If a direct
1: 		reference is used here, such a Connection will never be closed or garbage
1: 		collected as modules hold onto the ContextManager and thus there would
1: 		be a direct reference through this object.
1: 	*/
0: 	private java.lang.ref.SoftReference	connRef;
1: 
1: 
1: 	EmbedConnectionContext(ContextManager cm, EmbedConnection conn) {
1: 		super(cm, ConnectionContext.CONTEXT_ID);
1: 
0: 		connRef = new java.lang.ref.SoftReference(conn);
1: 	}
1: 
1: 	public void cleanupOnError(Throwable error) {
1: 
1: 		if (connRef == null)
1: 			return;
1: 
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
1: 
1: 		if (error instanceof StandardException) {
1: 
1: 			StandardException se = (StandardException) error;
1: 			if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY) {
1: 
1: 				// any error in auto commit mode that does not close the
1: 				// session will cause a rollback, thus remvoing the need
1: 				// for any commit. We could check this flag under autoCommit
1: 				// being true but the flag is ignored when autoCommit is false
1: 				// so why add the extra check
1: 				if (conn != null) {
1: 					conn.needCommit = false;
1: 				}
1: 				return;
1: 			}
1: 		}
1: 
1: 		// This may be a transaction without connection.
1: 		if (conn != null)
1: 			conn.setInactive(); // make the connection inactive & empty
1: 
1: 		connRef = null;
1: 		popMe();
1: 	}
1: 
1: 	//public java.sql.Connection getEmbedConnection()
1: 	//{
1: 	///	return conn;
1: 	//}
1: 
1: 	/**
1: 		Get a connection equivalent to the call
1: 		<PRE>
1: 		DriverManager.getConnection("jdbc:default:connection");
1: 		</PRE>
1: 	*/
1: 	public java.sql.Connection getNestedConnection(boolean internal) throws SQLException {
1: 
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
1: 
1: 		if ((conn == null) || conn.isClosed())
1: 			throw Util.noCurrentConnection();
1: 
1: 		if (!internal) {
0: 			StatementContext sc = conn.getLanguageConnection().getStatementContext();
1: 			if ((sc == null) || (sc.getSQLAllowed() < org.apache.derby.catalog.types.RoutineAliasInfo.MODIFIES_SQL_DATA))
1: 				throw Util.noCurrentConnection();
1: 		}
1: 
1: 		return conn.getLocalDriver().getNewNestedConnection(conn);
1: 	}
1: 
1: 	/**
1: 	 * Get a jdbc ResultSet based on the execution ResultSet.
1: 	 *
1: 	 * @param executionResultSet	a result set as gotten from execution
1: 	 *	
1: 	 */	
1: 	public java.sql.ResultSet getResultSet
1: 	(
1: 		ResultSet 				executionResultSet
0: 	)
1: 	{
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
1: 
1: 		EmbedResultSet rs = conn.getLocalDriver().newEmbedResultSet(conn, executionResultSet, 
1: 							false, (EmbedStatement) null, true);
1: 		return rs;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: //depot/main/java/org.apache.derby.impl.jdbc/EmbedConnectionContext.java#24 - edit change 16899 (text)
0: package org.apache.derby.impl.jdbc;
0: 
0: // This is the recommended super-class for all contexts.
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.conn.StatementContext;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import java.sql.SQLException;
0: import java.util.Vector;
0: import java.util.Enumeration;
0: /**
0: 	@author djd
0:  */
0: public class EmbedConnectionContext extends ContextImpl 
0: 		implements ConnectionContext
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		We hold a soft reference to the connection so that when the application
0: 		releases its reference to the Connection without closing it, its finalize
0: 		method will be called, which will then close the connection. If a direct
0: 		reference is used here, such a Connection will never be closed or garbage
0: 		collected as modules hold onto the ContextManager and thus there would
0: 		be a direct reference through this object.
0: 	*/
0: 	private java.lang.ref.SoftReference	connRef;
0: 
0: 
0: 	EmbedConnectionContext(ContextManager cm, EmbedConnection conn) {
0: 		super(cm, ConnectionContext.CONTEXT_ID);
0: 
0: 		connRef = new java.lang.ref.SoftReference(conn);
0: 	}
0: 
0: 	public void cleanupOnError(Throwable error) {
0: 
0: 		if (connRef == null)
0: 			return;
0: 
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
0: 
0: 		if (error instanceof StandardException) {
0: 
0: 			StandardException se = (StandardException) error;
0: 			if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY) {
0: 
0: 				// any error in auto commit mode that does not close the
0: 				// session will cause a rollback, thus remvoing the need
0: 				// for any commit. We could check this flag under autoCommit
0: 				// being true but the flag is ignored when autoCommit is false
0: 				// so why add the extra check
0: 				if (conn != null) {
0: 					conn.needCommit = false;
0: 				}
0: 				return;
0: 			}
0: 		}
0: 
0: 		// This may be a transaction without connection.
0: 		if (conn != null)
0: 			conn.setInactive(); // make the connection inactive & empty
0: 
0: 		connRef = null;
0: 		popMe();
0: 	}
0: 
0: 	//public java.sql.Connection getEmbedConnection()
0: 	//{
0: 	///	return conn;
0: 	//}
0: 
0: 	/**
0: 		Get a connection equivalent to the call
0: 		<PRE>
0: 		DriverManager.getConnection("jdbc:default:connection");
0: 		</PRE>
0: 	*/
0: 	public java.sql.Connection getNestedConnection(boolean internal) throws SQLException {
0: 
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
0: 
0: 		if ((conn == null) || conn.isClosed())
0: 			throw Util.noCurrentConnection();
0: 
0: 		if (!internal) {
0: 			StatementContext sc = conn.getLanguageConnection().getStatementContext();
0: 			if ((sc == null) || (sc.getSQLAllowed() < org.apache.derby.catalog.types.RoutineAliasInfo.MODIFIES_SQL_DATA))
0: 				throw Util.noCurrentConnection();
0: 		}
0: 
0: 		return conn.getLocalDriver().getNewNestedConnection(conn);
0: 	}
0: 
0: 	/**
0: 	 * Get a jdbc ResultSet based on the execution ResultSet.
0: 	 *
0: 	 * @param executionResultSet	a result set as gotten from execution
0: 	 *	
0: 	 */	
0: 	public java.sql.ResultSet getResultSet
0: 	(
0: 		ResultSet 				executionResultSet
0: 	)
0: 	{
0: 		EmbedConnection conn = (EmbedConnection) connRef.get();
0: 
0: 		EmbedResultSet rs = conn.getLocalDriver().newEmbedResultSet(conn, executionResultSet, 
0: 							false, (EmbedStatement) null, true);
0: 		return rs;
0: 	}
0: }
============================================================================