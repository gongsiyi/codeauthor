1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.util.PropertyUtil
1:7ecc1f2: 
1:11ec54f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11ec54f:    contributor license agreements.  See the NOTICE file distributed with
1:11ec54f:    this work for additional information regarding copyright ownership.
1:11ec54f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:11ec54f:    (the "License"); you may not use this file except in compliance with
1:11ec54f:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.util;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:221abb6: import java.util.Arrays;
1:221abb6: import java.util.Collections;
1:221abb6: import java.util.Set;
1:eac0369: 
1:eac0369: public class PropertyUtil {
1:eac0369: 	
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	  *	Sorts a property list and turns the sorted list into a string.
2:eac0369: 	  *
1:eac0369: 	  *	@param	list	property list to sort
1:eac0369: 	  *
1:eac0369: 	  *	@return	a string version of the sorted list
1:eac0369: 	  */
1:eac0369: 	public	static	String	sortProperties( Properties list )
4:eac0369: 	{
1:eac0369: 		// stringify them with no indentation
1:eac0369: 		return sortProperties(list, null);
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Sorts property list and print out each key=value pair prepended with 
1:eac0369: 	 * specific indentation.  If indent is null, do not prepend with
1:eac0369: 	 * indentation. 
1:eac0369: 	 *
1:eac0369: 	 * The output string shows up in two styles, style 1 looks like
1:eac0369: 	 * { key1=value1, key2=value2, key3=value3 }
1:eac0369: 	 *
1:eac0369: 	 * style 2 looks like
1:eac0369: 	 *		key1=value1
1:eac0369: 	 *		key2=value2
1:eac0369: 	 *		key3=value3
1:eac0369: 	 * where indent goes between the new line and the keys
1:eac0369: 	 *
1:eac0369: 	 * To get style 1, pass in a null indent
1:eac0369: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
1:eac0369: 	 * the key value)
1:eac0369: 	 */
1:eac0369: 	public	static	String	sortProperties( Properties list, String indent )
1:eac0369: 	{
1:221abb6:         // Get all property names, including any defaults.
1:221abb6:         Set<String> names = (list == null)
1:221abb6:                 ? Collections.<String>emptySet()
1:221abb6:                 : list.stringPropertyNames();
1:221abb6:         String[] array = names.toArray(new String[names.size()]);
1:eac0369: 
1:221abb6:         // now sort the array
1:221abb6:         Arrays.sort(array);
1:eac0369: 
1:eac0369: 		// now stringify the array
1:221abb6:         StringBuilder buffer = new StringBuilder();
1:eac0369: 		if (indent == null)
1:eac0369: 			buffer.append( "{ " );
1:eac0369: 
1:221abb6:         for ( int ictr = 0; ictr < array.length; ictr++ )
1:eac0369: 		{
1:eac0369: 			if ( ictr > 0 && indent == null)
1:eac0369: 				buffer.append( ", " );
1:eac0369: 
1:221abb6:             String key = array[ ictr ];
1:eac0369: 
1:eac0369: 			if (indent != null)
1:eac0369: 				buffer.append( indent );
1:eac0369: 
1:eac0369: 			buffer.append( key ); buffer.append( "=" );
1:eac0369: 
1:221abb6:             String value = list.getProperty( key, "MISSING_VALUE" );
1:eac0369: 			buffer.append( value );
1:eac0369: 
1:eac0369: 			if (indent != null)
1:eac0369: 				buffer.append( "\n" );
1:eac0369: 
1:eac0369: 		}
1:eac0369: 		if (indent == null)
1:eac0369: 			buffer.append( " }" );
1:eac0369: 
1:eac0369: 		return	buffer.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Copy a set of properties from one Property to another.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param src_prop  Source set of properties to copy from.
1:eac0369:      * @param dest_prop Dest Properties to copy into.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public static void copyProperties(Properties src_prop, Properties dest_prop)
1:eac0369:     {
1:221abb6:         for (String key : src_prop.stringPropertyNames())
1:eac0369:         {
1:eac0369:             dest_prop.put(key, src_prop.get(key));
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * Read a set of properties from the received input stream, strip
1:eac0369: 	 * off any excess white space that exists in those property values,
1:eac0369: 	 * and then add those newly-read properties to the received
1:eac0369: 	 * Properties object; not explicitly removing the whitespace here can
1:eac0369: 	 * lead to problems.
1:eac0369: 	 *
1:eac0369: 	 * This method exists because of the manner in which the jvm reads
1:eac0369: 	 * properties from file--extra spaces are ignored after a _key_, but
1:eac0369: 	 * if they exist at the _end_ of a property decl line (i.e. as part
1:eac0369: 	 * of a _value_), they are preserved, as outlined in the Java API:
1:eac0369: 	 *
1:eac0369: 	 * "Any whitespace after the key is skipped; if the first non-
1:eac0369: 	 * whitespace character after the key is = or :, then it is ignored
1:eac0369:  	 * and any whitespace characters after it are also skipped. All
1:eac0369: 	 * remaining characters on the line become part of the associated
1:eac0369: 	 * element string."
1:eac0369: 	 *
1:6b50965: 	 * @param	iStr An input stream from which the new properties are to be
1:eac0369: 	 *  loaded (should already be initialized).
1:6b50965: 	 * @param prop A set of properties to which the properties from
1:eac0369: 	 *  iStr will be added (should already be initialized).
1:eac0369: 	 * properties loaded from 'iStr' (with the extra whitespace (if any)
1:eac0369: 	 *  removed from all values), will be returned via the parameter.
1:eac0369: 	 *
1:eac0369: 	 **/
1:eac0369: 	public static void loadWithTrimmedValues(InputStream iStr,
1:eac0369: 		Properties prop) throws IOException {
1:eac0369: 
1:eac0369: 		if ((iStr == null) || (prop == null)) {
1:eac0369: 		// shouldn't happen; just ignore this call and return.
2:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Else, load the properties from the received input stream.
1:eac0369: 		Properties p = new Properties();
1:eac0369: 		p.load(iStr);
1:eac0369: 
1:eac0369: 		// Now, trim off any excess whitespace, if any, and then
1:eac0369: 		// add the properties from file to the received Properties
1:eac0369: 		// set.
1:221abb6:         for (String tmpKey : p.stringPropertyNames()) {
1:eac0369: 		// get the value, trim off the whitespace, then store it
1:eac0369: 		// in the received properties object.
1:eac0369: 			String tmpValue = p.getProperty(tmpKey);
1:eac0369: 			tmpValue = tmpValue.trim();
1:eac0369: 			prop.put(tmpKey, tmpValue);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:221abb6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:         // Get all property names, including any defaults.
1:         Set<String> names = (list == null)
1:                 ? Collections.<String>emptySet()
1:                 : list.stringPropertyNames();
1:         String[] array = names.toArray(new String[names.size()]);
1:         // now sort the array
1:         Arrays.sort(array);
1:         StringBuilder buffer = new StringBuilder();
1:         for ( int ictr = 0; ictr < array.length; ictr++ )
1:             String key = array[ ictr ];
1:             String value = list.getProperty( key, "MISSING_VALUE" );
/////////////////////////////////////////////////////////////////////////
1:         for (String key : src_prop.stringPropertyNames())
/////////////////////////////////////////////////////////////////////////
1:         for (String tmpKey : p.stringPropertyNames()) {
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11ec54f
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	iStr An input stream from which the new properties are to be
1: 	 * @param prop A set of properties to which the properties from
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.util.PropertyUtil
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.util;
1: 
1: import java.util.Properties;
0: import java.util.Enumeration;
1: import java.io.InputStream;
1: import java.io.IOException;
1: 
1: public class PropertyUtil {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 
1: 	//////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Sorts a property list and turns the sorted list into a string.
1: 	  *
1: 	  *	@param	list	property list to sort
1: 	  *
1: 	  *	@return	a string version of the sorted list
1: 	  */
1: 	public	static	String	sortProperties( Properties list )
1: 	{
1: 		// stringify them with no indentation
1: 		return sortProperties(list, null);
1: 	}
1: 
1: 	/**
1: 	 * Sorts property list and print out each key=value pair prepended with 
1: 	 * specific indentation.  If indent is null, do not prepend with
1: 	 * indentation. 
1: 	 *
1: 	 * The output string shows up in two styles, style 1 looks like
1: 	 * { key1=value1, key2=value2, key3=value3 }
1: 	 *
1: 	 * style 2 looks like
1: 	 *		key1=value1
1: 	 *		key2=value2
1: 	 *		key3=value3
1: 	 * where indent goes between the new line and the keys
1: 	 *
1: 	 * To get style 1, pass in a null indent
1: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
1: 	 * the key value)
1: 	 */
1: 	public	static	String	sortProperties( Properties list, String indent )
1: 	{
0: 		int				size = list == null ? 0 : list.size();
0: 		int				count = 0;
0: 		String[]		array = new String[size];
0: 		String			key;
0: 		String			value;
0: 		StringBuffer	buffer;
1: 
0: 		// Calculate the number of properties in the property list and
0: 		// build an array of all the property names.
0: 		// We need to go thru the enumeration because Properties has a
0: 		// recursive list of defaults.
0: 		if (list != null)
1: 		{
0: 			for (Enumeration propertyNames = list.propertyNames();
0: 				 propertyNames.hasMoreElements(); )
1: 			{
0: 				if (count == size)
1: 				{
0: 					// need to expand the array
0: 					size = size*2;
0: 					String[] expandedArray = new String[size];
0: 					System.arraycopy(array, 0, expandedArray, 0, count);
0: 					array = expandedArray;
1: 				}
0: 				key = (String) propertyNames.nextElement();
0: 				array[ count++ ] = key;
1: 			}
1: 
0: 			// now sort the array
0: 			java.util.Arrays.sort(array, 0, count);
1: 		}
1: 
1: 		// now stringify the array
0: 		buffer = new StringBuffer();
1: 		if (indent == null)
1: 			buffer.append( "{ " );
1: 
0: 		for ( int ictr = 0; ictr < count; ictr++ )
1: 		{
1: 			if ( ictr > 0 && indent == null)
1: 				buffer.append( ", " );
1: 
0: 			key = array[ ictr ];
1: 
1: 			if (indent != null)
1: 				buffer.append( indent );
1: 
1: 			buffer.append( key ); buffer.append( "=" );
1: 
0: 			value = list.getProperty( key, "MISSING_VALUE" );
1: 			buffer.append( value );
1: 
1: 			if (indent != null)
1: 				buffer.append( "\n" );
1: 
1: 		}
1: 		if (indent == null)
1: 			buffer.append( " }" );
1: 
1: 		return	buffer.toString();
1: 	}
1: 
1:     /**
1:      * Copy a set of properties from one Property to another.
1:      * <p>
1:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1:      * @param src_prop  Source set of properties to copy from.
1:      * @param dest_prop Dest Properties to copy into.
1:      *
1:      **/
1:     public static void copyProperties(Properties src_prop, Properties dest_prop)
1:     {
0:         for (Enumeration propertyNames = src_prop.propertyNames();
0:              propertyNames.hasMoreElements(); )
1:         {
0:             Object key = propertyNames.nextElement();
1:             dest_prop.put(key, src_prop.get(key));
1:         }
1:     }
1: 
1: 	/** 
1: 	 * Read a set of properties from the received input stream, strip
1: 	 * off any excess white space that exists in those property values,
1: 	 * and then add those newly-read properties to the received
1: 	 * Properties object; not explicitly removing the whitespace here can
1: 	 * lead to problems.
1: 	 *
1: 	 * This method exists because of the manner in which the jvm reads
1: 	 * properties from file--extra spaces are ignored after a _key_, but
1: 	 * if they exist at the _end_ of a property decl line (i.e. as part
1: 	 * of a _value_), they are preserved, as outlined in the Java API:
1: 	 *
1: 	 * "Any whitespace after the key is skipped; if the first non-
1: 	 * whitespace character after the key is = or :, then it is ignored
1:  	 * and any whitespace characters after it are also skipped. All
1: 	 * remaining characters on the line become part of the associated
1: 	 * element string."
1: 	 *
0: 	 * @iStr: An input stream from which the new properties are to be
1: 	 *  loaded (should already be initialized).
0: 	 * @param prop: A set of properties to which the properties from
1: 	 *  iStr will be added (should already be initialized).
0: 	 * @return A final properties set consisting of 'prop' plus all
1: 	 * properties loaded from 'iStr' (with the extra whitespace (if any)
1: 	 *  removed from all values), will be returned via the parameter.
1: 	 *
1: 	 **/
1: 	public static void loadWithTrimmedValues(InputStream iStr,
1: 		Properties prop) throws IOException {
1: 
1: 		if ((iStr == null) || (prop == null)) {
1: 		// shouldn't happen; just ignore this call and return.
1: 			return;
1: 		}
1: 
1: 		// Else, load the properties from the received input stream.
1: 		Properties p = new Properties();
1: 		p.load(iStr);
1: 
1: 		// Now, trim off any excess whitespace, if any, and then
1: 		// add the properties from file to the received Properties
1: 		// set.
0: 		for (Enumeration propKeys = p.propertyNames();
0: 		  propKeys.hasMoreElements();) {
1: 		// get the value, trim off the whitespace, then store it
1: 		// in the received properties object.
0: 			String tmpKey = (String)propKeys.nextElement();
1: 			String tmpValue = p.getProperty(tmpKey);
1: 			tmpValue = tmpValue.trim();
1: 			prop.put(tmpKey, tmpValue);
1: 		}
1: 
1: 		return;
1: 
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.util;
0: 
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.io.InputStream;
0: import java.io.IOException;
0: 
0: public class PropertyUtil {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 
0: 	//////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Sorts a property list and turns the sorted list into a string.
0: 	  *
0: 	  *	@param	list	property list to sort
0: 	  *
0: 	  *	@return	a string version of the sorted list
0: 	  */
0: 	public	static	String	sortProperties( Properties list )
0: 	{
0: 		// stringify them with no indentation
0: 		return sortProperties(list, null);
0: 	}
0: 
0: 	/**
0: 	 * Sorts property list and print out each key=value pair prepended with 
0: 	 * specific indentation.  If indent is null, do not prepend with
0: 	 * indentation. 
0: 	 *
0: 	 * The output string shows up in two styles, style 1 looks like
0: 	 * { key1=value1, key2=value2, key3=value3 }
0: 	 *
0: 	 * style 2 looks like
0: 	 *		key1=value1
0: 	 *		key2=value2
0: 	 *		key3=value3
0: 	 * where indent goes between the new line and the keys
0: 	 *
0: 	 * To get style 1, pass in a null indent
0: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
0: 	 * the key value)
0: 	 */
0: 	public	static	String	sortProperties( Properties list, String indent )
0: 	{
0: 		int				size = list == null ? 0 : list.size();
0: 		int				count = 0;
0: 		String[]		array = new String[size];
0: 		String			key;
0: 		String			value;
0: 		StringBuffer	buffer;
0: 
0: 		// Calculate the number of properties in the property list and
0: 		// build an array of all the property names.
0: 		// We need to go thru the enumeration because Properties has a
0: 		// recursive list of defaults.
0: 		if (list != null)
0: 		{
0: 			for (Enumeration propertyNames = list.propertyNames();
0: 				 propertyNames.hasMoreElements(); )
0: 			{
0: 				if (count == size)
0: 				{
0: 					// need to expand the array
0: 					size = size*2;
0: 					String[] expandedArray = new String[size];
0: 					System.arraycopy(array, 0, expandedArray, 0, count);
0: 					array = expandedArray;
0: 				}
0: 				key = (String) propertyNames.nextElement();
0: 				array[ count++ ] = key;
0: 			}
0: 
0: 			// now sort the array
0: 			java.util.Arrays.sort(array, 0, count);
0: 		}
0: 
0: 		// now stringify the array
0: 		buffer = new StringBuffer();
0: 		if (indent == null)
0: 			buffer.append( "{ " );
0: 
0: 		for ( int ictr = 0; ictr < count; ictr++ )
0: 		{
0: 			if ( ictr > 0 && indent == null)
0: 				buffer.append( ", " );
0: 
0: 			key = array[ ictr ];
0: 
0: 			if (indent != null)
0: 				buffer.append( indent );
0: 
0: 			buffer.append( key ); buffer.append( "=" );
0: 
0: 			value = list.getProperty( key, "MISSING_VALUE" );
0: 			buffer.append( value );
0: 
0: 			if (indent != null)
0: 				buffer.append( "\n" );
0: 
0: 		}
0: 		if (indent == null)
0: 			buffer.append( " }" );
0: 
0: 		return	buffer.toString();
0: 	}
0: 
0:     /**
0:      * Copy a set of properties from one Property to another.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param src_prop  Source set of properties to copy from.
0:      * @param dest_prop Dest Properties to copy into.
0:      *
0:      **/
0:     public static void copyProperties(Properties src_prop, Properties dest_prop)
0:     {
0:         for (Enumeration propertyNames = src_prop.propertyNames();
0:              propertyNames.hasMoreElements(); )
0:         {
0:             Object key = propertyNames.nextElement();
0:             dest_prop.put(key, src_prop.get(key));
0:         }
0:     }
0: 
0: 	/** 
0: 	 * Read a set of properties from the received input stream, strip
0: 	 * off any excess white space that exists in those property values,
0: 	 * and then add those newly-read properties to the received
0: 	 * Properties object; not explicitly removing the whitespace here can
0: 	 * lead to problems.
0: 	 *
0: 	 * This method exists because of the manner in which the jvm reads
0: 	 * properties from file--extra spaces are ignored after a _key_, but
0: 	 * if they exist at the _end_ of a property decl line (i.e. as part
0: 	 * of a _value_), they are preserved, as outlined in the Java API:
0: 	 *
0: 	 * "Any whitespace after the key is skipped; if the first non-
0: 	 * whitespace character after the key is = or :, then it is ignored
0:  	 * and any whitespace characters after it are also skipped. All
0: 	 * remaining characters on the line become part of the associated
0: 	 * element string."
0: 	 *
0: 	 * @iStr: An input stream from which the new properties are to be
0: 	 *  loaded (should already be initialized).
0: 	 * @param prop: A set of properties to which the properties from
0: 	 *  iStr will be added (should already be initialized).
0: 	 * @return A final properties set consisting of 'prop' plus all
0: 	 * properties loaded from 'iStr' (with the extra whitespace (if any)
0: 	 *  removed from all values), will be returned via the parameter.
0: 	 *
0: 	 **/
0: 	public static void loadWithTrimmedValues(InputStream iStr,
0: 		Properties prop) throws IOException {
0: 
0: 		if ((iStr == null) || (prop == null)) {
0: 		// shouldn't happen; just ignore this call and return.
0: 			return;
0: 		}
0: 
0: 		// Else, load the properties from the received input stream.
0: 		Properties p = new Properties();
0: 		p.load(iStr);
0: 
0: 		// Now, trim off any excess whitespace, if any, and then
0: 		// add the properties from file to the received Properties
0: 		// set.
0: 		for (Enumeration propKeys = p.propertyNames();
0: 		  propKeys.hasMoreElements();) {
0: 		// get the value, trim off the whitespace, then store it
0: 		// in the received properties object.
0: 			String tmpKey = (String)propKeys.nextElement();
0: 			String tmpValue = p.getProperty(tmpKey);
0: 			tmpValue = tmpValue.trim();
0: 			prop.put(tmpKey, tmpValue);
0: 		}
0: 
0: 		return;
0: 
0: 	}
0: }
0: 
============================================================================