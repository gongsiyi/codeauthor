1:7ddacaa: /*
2:7ddacaa: 
1:7ddacaa:    Derby - Class org.apache.derbyTesting.functionTests.store.BackupPathTests
1:7ddacaa: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:7ddacaa: 
1:7ddacaa:       http://www.apache.org/licenses/LICENSE-2.0
1:7ddacaa: 
1:7ddacaa:    Unless required by applicable law or agreed to in writing, software
1:7ddacaa:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ddacaa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ddacaa:    See the License for the specific language governing permissions and
1:7ddacaa:    limitations under the License.
1:7ddacaa: 
1:7ddacaa:  */
1:7ddacaa: 
1:7ddacaa: package org.apache.derbyTesting.functionTests.tests.store;
1:7ddacaa: 
1:7ddacaa: import java.sql.Connection;
1:7ddacaa: import java.sql.SQLException;
1:7ddacaa: import java.sql.Statement;
1:7ddacaa: import java.sql.CallableStatement;
1:7ddacaa: import java.io.File;
1:7ddacaa: import org.apache.derby.tools.ij;
1:7ddacaa: 
1:7ddacaa: /*
1:7ddacaa:  * This class tests online backup with various types of paths.
1:7ddacaa:  * 1 ) backup path is same as a database directory. This should fail backup
1:7ddacaa:  *     can not be made onto a database directory. (DERBY-304 bug).
1:7ddacaa:  * 2 ) backup path is a sub directory in the database. 
1:7ddacaa:  * 3 ) Redo backup with same path as in second case.
1:7ddacaa:  * 4 ) backup path is absolute path.
1:7ddacaa: 
1:7ddacaa:  * If the path refers to some sub directory inside a database, backup 
1:7ddacaa:  * will succeed because there is no easy way to catch this weird case,
1:7ddacaa:  * especially if the backup path refers to another database directory.  
1:7ddacaa:  *
1:7ddacaa:  *
1:7ddacaa:  * @version 1.0
1:7ddacaa:  */
1:7ddacaa: 
1:7ddacaa: public class BackupPathTests
1:7ddacaa: {
1:7ddacaa:     
1:7ddacaa:     public static void main(String[] argv) throws Throwable 
1:7ddacaa:     {
1:7ddacaa:         try {
1:7ddacaa: 
1:7ddacaa:             ij.getPropertyArg(argv); 
1:7ddacaa:             Connection conn = ij.startJBMS();
1:7ddacaa:             conn.setAutoCommit(true);
1:7ddacaa:             
1:7ddacaa:             Statement stmt = conn.createStatement();
1:7ddacaa:             //install a jar, so that there is a jar directory under the db.
1:7ddacaa:             stmt.execute(
1:7ddacaa:                      "call sqlj.install_jar(" + 
1:7ddacaa:                      "'extin/brtestjar.jar', 'math_routines', 0)");
1:7ddacaa: 
1:7ddacaa:             stmt.close();
1:7ddacaa: 
1:7ddacaa:             logMsg("Begin Backup Path Tests");
1:7ddacaa:             String derbyHome = System.getProperty("derby.system.home");
1:7ddacaa:             String dbHome = derbyHome + File.separator + "wombat" ; 
1:7ddacaa: 
1:7ddacaa:             logMsg("case1 : try Backup with backup path as database dir");
1:7ddacaa:             try {
1:7ddacaa:                 performBackup(conn, dbHome);
1:7ddacaa:             } catch(SQLException sqle) {
1:7ddacaa:                 // expected to fail with following error code. 
1:7ddacaa:                 if (sqle.getSQLState() != null && 
1:7ddacaa:                     sqle.getSQLState().equals("XSRSC")) {
1:7ddacaa:                     logMsg("Backup in to a database dir failed");
1:7ddacaa:                 } else {
1:7ddacaa:                     throw sqle;
1:7ddacaa:                 }
1:7ddacaa:             }
1:7ddacaa:             
1:7ddacaa:             logMsg("End test case1");
1:7ddacaa:             logMsg("case2 : Backup with backup path as database jar dir");
1:7ddacaa:             String jarDir = dbHome + File.separator + "jar";
1:7ddacaa:             performBackup(conn, jarDir);
1:7ddacaa:             logMsg("End test case 2");
1:7ddacaa: 
1:7ddacaa:             logMsg("case 3: Backup again into the same db jar dir location");
1:7ddacaa:             performBackup(conn, jarDir);
1:7ddacaa:             logMsg("End test case 3");
1:7ddacaa: 
1:7ddacaa:             logMsg("case 4: Backup using an absolute path");
1:7ddacaa:             String absBackupPath = 
1:7ddacaa:                 new File("extinout/backupPathTests").getAbsolutePath();
1:7ddacaa:             performBackup(conn, absBackupPath); 
1:7ddacaa:             logMsg("End test case 4");
1:7ddacaa:             conn.close();
1:7ddacaa:             logMsg("End Backup Path Tests");
1:7ddacaa: 
1:7ddacaa:         } catch (SQLException sqle) {
1:7ddacaa:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:7ddacaa:                                                                     sqle);
1:7ddacaa:             sqle.printStackTrace(System.out);
1:7ddacaa:         }
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa: 
1:7ddacaa:     private static void performBackup(Connection conn, 
1:7ddacaa:                                       String backupPath) 
1:7ddacaa:         throws SQLException
1:7ddacaa:     {
1:7ddacaa:         CallableStatement backupStmt = 	
1:7ddacaa:             conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:7ddacaa:         backupStmt.setString(1, backupPath);
1:7ddacaa:         backupStmt.execute();
1:7ddacaa:         backupStmt.close();
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa:     
1:7ddacaa:     /**
1:7ddacaa:      * Write message to the standard output.
1:7ddacaa:      */
1:7ddacaa:     private static void logMsg(String   str)	{
1:7ddacaa:         System.out.println(str);
1:7ddacaa:     }
1:7ddacaa: 
1:7ddacaa: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7ddacaa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.BackupPathTests
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.CallableStatement;
1: import java.io.File;
1: import org.apache.derby.tools.ij;
1: 
1: /*
1:  * This class tests online backup with various types of paths.
1:  * 1 ) backup path is same as a database directory. This should fail backup
1:  *     can not be made onto a database directory. (DERBY-304 bug).
1:  * 2 ) backup path is a sub directory in the database. 
1:  * 3 ) Redo backup with same path as in second case.
1:  * 4 ) backup path is absolute path.
1: 
1:  * If the path refers to some sub directory inside a database, backup 
1:  * will succeed because there is no easy way to catch this weird case,
1:  * especially if the backup path refers to another database directory.  
1:  *
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  */
1: 
1: public class BackupPathTests
1: {
1:     
1:     public static void main(String[] argv) throws Throwable 
1:     {
1:         try {
1: 
1:             ij.getPropertyArg(argv); 
1:             Connection conn = ij.startJBMS();
1:             conn.setAutoCommit(true);
1:             
1:             Statement stmt = conn.createStatement();
1:             //install a jar, so that there is a jar directory under the db.
1:             stmt.execute(
1:                      "call sqlj.install_jar(" + 
1:                      "'extin/brtestjar.jar', 'math_routines', 0)");
1: 
1:             stmt.close();
1: 
1:             logMsg("Begin Backup Path Tests");
1:             String derbyHome = System.getProperty("derby.system.home");
1:             String dbHome = derbyHome + File.separator + "wombat" ; 
1: 
1:             logMsg("case1 : try Backup with backup path as database dir");
1:             try {
1:                 performBackup(conn, dbHome);
1:             } catch(SQLException sqle) {
1:                 // expected to fail with following error code. 
1:                 if (sqle.getSQLState() != null && 
1:                     sqle.getSQLState().equals("XSRSC")) {
1:                     logMsg("Backup in to a database dir failed");
1:                 } else {
1:                     throw sqle;
1:                 }
1:             }
1:             
1:             logMsg("End test case1");
1:             logMsg("case2 : Backup with backup path as database jar dir");
1:             String jarDir = dbHome + File.separator + "jar";
1:             performBackup(conn, jarDir);
1:             logMsg("End test case 2");
1: 
1:             logMsg("case 3: Backup again into the same db jar dir location");
1:             performBackup(conn, jarDir);
1:             logMsg("End test case 3");
1: 
1:             logMsg("case 4: Backup using an absolute path");
1:             String absBackupPath = 
1:                 new File("extinout/backupPathTests").getAbsolutePath();
1:             performBackup(conn, absBackupPath); 
1:             logMsg("End test case 4");
1:             conn.close();
1:             logMsg("End Backup Path Tests");
1: 
1:         } catch (SQLException sqle) {
1:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:                                                                     sqle);
1:             sqle.printStackTrace(System.out);
1:         }
1:     }
1: 
1: 
1:     private static void performBackup(Connection conn, 
1:                                       String backupPath) 
1:         throws SQLException
1:     {
1:         CallableStatement backupStmt = 	
1:             conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:         backupStmt.setString(1, backupPath);
1:         backupStmt.execute();
1:         backupStmt.close();
1:     }
1: 
1:     
1:     /**
1:      * Write message to the standard output.
1:      */
1:     private static void logMsg(String   str)	{
1:         System.out.println(str);
1:     }
1: 
1: }
commit:c10c404
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.BackupPathTests
0: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: import java.sql.CallableStatement;
0: import java.io.File;
0: import org.apache.derby.tools.ij;
0: 
0: /*
0:  * This class tests online backup with various types of paths.
0:  * 1 ) backup path is same as a database directory. This should fail backup
0:  *     can not be made onto a database directory. (DERBY-304 bug).
0:  * 2 ) backup path is a sub directory in the database. 
0:  * 3 ) Redo backup with same path as in second case.
0:  * 4 ) backup path is absolute path.
0: 
0:  * If the path refers to some sub directory inside a database, backup 
0:  * will succeed because there is no easy way to catch this weird case,
0:  * especially if the backup path refers to another database directory.  
0:  *
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  */
0: 
0: public class BackupPathTests
0: {
0:     
0:     public static void main(String[] argv) throws Throwable 
0:     {
0:         try {
0: 
0:             ij.getPropertyArg(argv); 
0:             Connection conn = ij.startJBMS();
0:             conn.setAutoCommit(true);
0:             
0:             Statement stmt = conn.createStatement();
0:             //install a jar, so that there is a jar directory under the db.
0:             stmt.execute(
0:                      "call sqlj.install_jar(" + 
0:                      "'extin/brtestjar.jar', 'math_routines', 0)");
0: 
0:             stmt.close();
0: 
0:             logMsg("Begin Backup Path Tests");
0:             String derbyHome = System.getProperty("derby.system.home");
0:             String dbHome = derbyHome + File.separator + "wombat" ; 
0: 
0:             logMsg("case1 : try Backup with backup path as database dir");
0:             try {
0:                 performBackup(conn, dbHome);
0:             } catch(SQLException sqle) {
0:                 // expected to fail with following error code. 
0:                 if (sqle.getSQLState() != null && 
0:                     sqle.getSQLState().equals("XSRSC")) {
0:                     logMsg("Backup in to a database dir failed");
0:                 } else {
0:                     throw sqle;
0:                 }
0:             }
0:             
0:             logMsg("End test case1");
0:             logMsg("case2 : Backup with backup path as database jar dir");
0:             String jarDir = dbHome + File.separator + "jar";
0:             performBackup(conn, jarDir);
0:             logMsg("End test case 2");
0: 
0:             logMsg("case 3: Backup again into the same db jar dir location");
0:             performBackup(conn, jarDir);
0:             logMsg("End test case 3");
0: 
0:             logMsg("case 4: Backup using an absolute path");
0:             String absBackupPath = 
0:                 new File("extinout/backupPathTests").getAbsolutePath();
0:             performBackup(conn, absBackupPath); 
0:             logMsg("End test case 4");
0:             conn.close();
0:             logMsg("End Backup Path Tests");
0: 
0:         } catch (SQLException sqle) {
0:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
0:                                                                     sqle);
0:             sqle.printStackTrace(System.out);
0:         }
0:     }
0: 
0: 
0:     private static void performBackup(Connection conn, 
0:                                       String backupPath) 
0:         throws SQLException
0:     {
0:         CallableStatement backupStmt = 	
0:             conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
0:         backupStmt.setString(1, backupPath);
0:         backupStmt.execute();
0:         backupStmt.close();
0:     }
0: 
0:     
0:     /**
0:      * Write message to the standard output.
0:      */
0:     private static void logMsg(String   str)	{
0:         System.out.println(str);
0:     }
0: 
0: }
============================================================================