1:fe77ca5: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.TimestampOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package	org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:3bb140c: import java.sql.Types;
1:3bb140c: import java.util.List;
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: import org.apache.derby.iapi.reference.ClassName;
1:fe77ca5: import org.apache.derby.iapi.reference.SQLState;
1:fe77ca5: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * The TimestampOperatorNode class implements the timestamp( date, time) function.
1:fe77ca5:  */
1:fe77ca5: 
1:3bb140c: class TimestampOperatorNode extends BinaryOperatorNode
1:fe77ca5: {
1:fe77ca5: 
1:fe77ca5:     /**
1:3bb140c:      * Constructor for a TimestampOperatorNode.
1:fe77ca5:      *
1:fe77ca5:      * @param date The date
1:fe77ca5:      * @param time The time
1:3bb140c:      * @param cm   The context manager
1:fe77ca5:      */
1:fe77ca5: 
1:3bb140c:     TimestampOperatorNode(ValueNode date,
1:3bb140c:                           ValueNode time,
1:3bb140c:                           ContextManager cm)
1:fe77ca5:     {
1:3bb140c:         super(cm);
1:3bb140c:         leftOperand = date;
1:3bb140c:         rightOperand = time;
1:fe77ca5:         operator = "timestamp";
1:fe77ca5:         methodName = "getTimestamp";
1:fe77ca5:     }
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Bind this expression.  This means binding the sub-expressions,
1:fe77ca5: 	 * as well as figuring out what the return type is for this expression.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param fromList		The FROM list for the query this
1:fe77ca5: 	 *				expression is in, for binding columns.
1:fe77ca5: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The new top of the expression tree.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:fe77ca5: 			throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 		leftOperand = leftOperand.bindExpression(fromList, subqueryList, 
1:09c2697:             aggregates);
1:fe77ca5: 		rightOperand = rightOperand.bindExpression(fromList, subqueryList, 
1:09c2697:             aggregates);
1:fe77ca5: 
1:d5bc20f: 		//Set the type if there is a parameter involved here 
1:7c5fbc4: 		if (leftOperand.requiresTypeFromContext()) {
1:d5bc20f: 			leftOperand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.DATE));
1:7c5fbc4: 		}
1:d5bc20f: 		//Set the type if there is a parameter involved here 
1:7c5fbc4: 		if (rightOperand.requiresTypeFromContext()) {
1:d5bc20f: 			rightOperand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIME));
1:7c5fbc4: 		}
1:d5bc20f: 
1:d5bc20f: 		TypeId leftTypeId = leftOperand.getTypeId();
1:fe77ca5:         TypeId rightTypeId = rightOperand.getTypeId();
1:d5bc20f:         if( !(leftOperand.requiresTypeFromContext() || leftTypeId.isStringTypeId() || leftTypeId.getJDBCTypeId() == Types.DATE))
1:fe77ca5:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1:fe77ca5:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
1:d5bc20f:         if( !(rightOperand.requiresTypeFromContext() || rightTypeId.isStringTypeId() || rightTypeId.getJDBCTypeId() == Types.TIME))
1:fe77ca5:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1:fe77ca5:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
1:fe77ca5:         setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIMESTAMP));
1:fe77ca5: 		return genSQLJavaSQLTree();
1:fe77ca5: 	} // end of bindExpression
1:fe77ca5: 
1:fe77ca5:     /**
1:fe77ca5: 	 * Do code generation for this binary operator.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:fe77ca5: 	 * @param mb	The method the code to place the code
1:fe77ca5: 	 *
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:fe77ca5: 		throws StandardException
1:fe77ca5: 	{
1:fe77ca5:         acb.pushDataValueFactory(mb);
1:fe77ca5: 		leftOperand.generateExpression(acb, mb);
1:fe77ca5:         mb.cast( ClassName.DataValueDescriptor);
1:fe77ca5: 		rightOperand.generateExpression(acb, mb);
1:fe77ca5:         mb.cast( ClassName.DataValueDescriptor);
1:fe77ca5:         mb.callMethod( VMOpcode.INVOKEINTERFACE, null, methodName, ClassName.DateTimeDataValue, 2);
1:fe77ca5:     } // end of generateExpression
1:fe77ca5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import java.util.List;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: class TimestampOperatorNode extends BinaryOperatorNode
1:      * Constructor for a TimestampOperatorNode.
1:      * @param cm   The context manager
1:     TimestampOperatorNode(ValueNode date,
1:                           ValueNode time,
1:                           ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.TIMESTAMP_OPERATOR_NODE);
1:         leftOperand = date;
1:         rightOperand = time;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:             aggregates);
1:             aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:35cdd9b
/////////////////////////////////////////////////////////////////////////
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
0: 			//collation of ? operand should be same as the compilation schema
0: 			leftOperand.setCollationUsingCompilationSchema(
0: 			//collation of ? operand should be same as the compilation schema
0: 			rightOperand.setCollationUsingCompilationSchema(
commit:7c5fbc4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
1: 		if (leftOperand.requiresTypeFromContext()) {
0: 			//collation of ? operand should be same as the current schema
0: 			leftOperand.getTypeServices().setCollationDerivation(
0: 					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 			leftOperand.getTypeServices().setCollationType(
0: 					getLanguageConnectionContext().getDefaultSchema()
0: 							.getCollationType());
1: 		}
1: 		if (rightOperand.requiresTypeFromContext()) {
0: 			//collation of ? operand should be same as the current schema
0: 			rightOperand.getTypeServices().setCollationDerivation(
0: 					StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 			rightOperand.getTypeServices().setCollationType(
0: 					getLanguageConnectionContext().getDefaultSchema()
0: 							.getCollationType());
1: 		}
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 		//Set the type if there is a parameter involved here 
0: 		if (leftOperand.requiresTypeFromContext())
1: 			leftOperand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.DATE));
1: 		//Set the type if there is a parameter involved here 
0: 		if (rightOperand.requiresTypeFromContext())
1: 			rightOperand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIME));
1: 
1: 		TypeId leftTypeId = leftOperand.getTypeId();
1:         if( !(leftOperand.requiresTypeFromContext() || leftTypeId.isStringTypeId() || leftTypeId.getJDBCTypeId() == Types.DATE))
1:         if( !(rightOperand.requiresTypeFromContext() || rightTypeId.isStringTypeId() || rightTypeId.getJDBCTypeId() == Types.TIME))
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.TimestampOperatorNode
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * The TimestampOperatorNode class implements the timestamp( date, time) function.
1:  */
1: 
0: public class TimestampOperatorNode extends BinaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1:     /**
0:      * Initailizer for a TimestampOperatorNode.
1:      *
1:      * @param date The date
1:      * @param time The time
1:      */
1: 
0:     public void init( Object date,
0:                       Object time)
1:     {
0:         leftOperand = (ValueNode) date;
0:         rightOperand = (ValueNode) time;
1:         operator = "timestamp";
1:         methodName = "getTimestamp";
1:     }
1: 
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
1: 			throws StandardException
1: 	{
1: 		leftOperand = leftOperand.bindExpression(fromList, subqueryList, 
0: 			aggregateVector);
1: 		rightOperand = rightOperand.bindExpression(fromList, subqueryList, 
0: 			aggregateVector);
1: 
0:         TypeId leftTypeId = leftOperand.getTypeId();
1:         TypeId rightTypeId = rightOperand.getTypeId();
0:         if( !(leftTypeId.isStringTypeId() || leftTypeId.getJDBCTypeId() == Types.DATE || leftOperand.isParameterNode()))
1:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
0:         if( !(rightTypeId.isStringTypeId() || rightTypeId.getJDBCTypeId() == Types.TIME || rightOperand.isParameterNode()))
1:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
1:         setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIMESTAMP));
1: 		return genSQLJavaSQLTree();
1: 	} // end of bindExpression
1: 
1:     /**
1: 	 * Do code generation for this binary operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 		throws StandardException
1: 	{
1:         acb.pushDataValueFactory(mb);
1: 		leftOperand.generateExpression(acb, mb);
1:         mb.cast( ClassName.DataValueDescriptor);
1: 		rightOperand.generateExpression(acb, mb);
1:         mb.cast( ClassName.DataValueDescriptor);
1:         mb.callMethod( VMOpcode.INVOKEINTERFACE, null, methodName, ClassName.DateTimeDataValue, 2);
1:     } // end of generateExpression
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * The TimestampOperatorNode class implements the timestamp( date, time) function.
0:  */
0: 
0: public class TimestampOperatorNode extends BinaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     /**
0:      * Initailizer for a TimestampOperatorNode.
0:      *
0:      * @param date The date
0:      * @param time The time
0:      */
0: 
0:     public void init( Object date,
0:                       Object time)
0:     {
0:         leftOperand = (ValueNode) date;
0:         rightOperand = (ValueNode) time;
0:         operator = "timestamp";
0:         methodName = "getTimestamp";
0:     }
0: 
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
0: 			throws StandardException
0: 	{
0: 		leftOperand = leftOperand.bindExpression(fromList, subqueryList, 
0: 			aggregateVector);
0: 		rightOperand = rightOperand.bindExpression(fromList, subqueryList, 
0: 			aggregateVector);
0: 
0:         TypeId leftTypeId = leftOperand.getTypeId();
0:         TypeId rightTypeId = rightOperand.getTypeId();
0:         if( !(leftTypeId.isStringTypeId() || leftTypeId.getJDBCTypeId() == Types.DATE || leftOperand.isParameterNode()))
0:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
0:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
0:         if( !(rightTypeId.isStringTypeId() || rightTypeId.getJDBCTypeId() == Types.TIME || rightOperand.isParameterNode()))
0:             throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
0:                                                  operator, leftTypeId.getSQLTypeName(), rightTypeId.getSQLTypeName());
0:         setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIMESTAMP));
0: 		return genSQLJavaSQLTree();
0: 	} // end of bindExpression
0: 
0:     /**
0: 	 * Do code generation for this binary operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 		throws StandardException
0: 	{
0:         acb.pushDataValueFactory(mb);
0: 		leftOperand.generateExpression(acb, mb);
0:         mb.cast( ClassName.DataValueDescriptor);
0: 		rightOperand.generateExpression(acb, mb);
0:         mb.cast( ClassName.DataValueDescriptor);
0:         mb.callMethod( VMOpcode.INVOKEINTERFACE, null, methodName, ClassName.DateTimeDataValue, 2);
0:     } // end of generateExpression
0: }
============================================================================