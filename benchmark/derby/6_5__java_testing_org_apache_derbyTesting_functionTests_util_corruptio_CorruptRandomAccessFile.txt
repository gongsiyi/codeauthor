1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile
1:aaea357: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.util.corruptio;
1:aaea357: import org.apache.derby.io.StorageRandomAccessFile;
1:aaea357: import java.io.IOException;
1:aaea357: import java.io.File;
1:aaea357: 
1:aaea357: 
1:aaea357: /**
1:aaea357:  * This class provides a proxy implementation of the StorageRandomAccess File
1:aaea357:  * interface.  It is used by CorruptDiskStorageFactory to instrument the database engine 
1:aaea357:  * i/o for testing puproses. How the i/o operation are corrupted is based on the values
1:aaea357:  * set in the instance of the Singleton CorruptibleIo class by the tests.
1:aaea357:  * Methods in this class functon similar to java.io.RandomAccessFile except
1:aaea357:  * when modified to perform the corruptios.
1:aaea357:  *
1:aaea357:  * @version 1.0
1:aaea357:  * @see java.io.RandomAccessFile
1:aaea357:  * @see StorageRandomAccessFile
1:aaea357:  */
1:aaea357: public class CorruptRandomAccessFile implements StorageRandomAccessFile
1:aaea357: {
1:aaea357: 
1:aaea357: 	private StorageRandomAccessFile realRaf;
1:aaea357: 	private CorruptibleIo cbio;
1:aaea357: 	private File realFile;
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Construct a CorruptRandomAccessFile
1:aaea357:      *
1:aaea357:      * @param raf  The real random access file to which  calls are delegated fro
1:aaea357:      *              this proxy class.
1:aaea357:      */
1:aaea357:     CorruptRandomAccessFile(StorageRandomAccessFile raf, File realFile)
1:aaea357:     {
1:aaea357: 		this.realRaf = raf;
1:aaea357: 		cbio =  CorruptibleIo.getInstance();
1:aaea357: 		this.realFile = realFile;
1:aaea357:     }
1:aaea357: 
1:5cf7a46:     public  CorruptRandomAccessFile clone()
1:5cf7a46:     {
1:5cf7a46:         return new CorruptRandomAccessFile( realRaf.clone(), realFile );
1:5cf7a46:     }
1:5cf7a46: 
1:aaea357: 	
1:aaea357: 	/**
1:aaea357:      * Closes this file.
1:aaea357:      */
1:aaea357:     public void close() throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Get the current offset in this file.
1:aaea357:      */
1:aaea357:     public long getFilePointer() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.getFilePointer();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Gets the length of this file.
1:aaea357:      */
1:aaea357:     public long length() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.length();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Set the file pointer. 
1:aaea357:      */
1:aaea357:     public void seek(long newFilePointer) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.seek(newFilePointer);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Sets the length of this file, either extending or truncating it.
1:aaea357:      */
1:aaea357:     public void setLength(long newLength) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.setLength(newLength);
1:aaea357: 	}
1:aaea357:     
1:aaea357:     /**
1:aaea357:      * Force any changes out to the persistent store. 
1:aaea357:      */
1:a552fe6:     public void sync() throws IOException
1:aaea357: 	{
1:2d8c0d3:         realRaf.sync();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/*** Following functions Implement DataInput interfaces ****/
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Reads some bytes from an input  stream into the byte array.
1:aaea357:      */
1:aaea357:     public void readFully(byte b[]) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.readFully(b);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      *
1:aaea357:      * Reads the specified number of  bytes from an input stream.
1:aaea357:      */
1:aaea357:     public void readFully(byte b[], int off, int len) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.readFully(b , off, len);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * skip over <code>nBytes</code> bytes of data 
1:aaea357:      */
1:aaea357:     public int skipBytes(int nBytes) throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.skipBytes(nBytes);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Reads a  byte and returns true if the byte is not zero
1:aaea357: 	 * otherwise false. 
1:aaea357:      */
1:aaea357:     public boolean readBoolean() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readBoolean();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns one input byte from the stream.
1:aaea357:      */
1:aaea357:     public byte readByte() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readByte();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Reads one input byte in the unsigned form. 
1:aaea357:      */
1:aaea357:     public int readUnsignedByte() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readUnsignedByte();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns a short  value from the stream. 
1:aaea357:      */
1:aaea357:     public short readShort() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readShort();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357: 	 * returns unsigned short.
1:aaea357:      */
1:aaea357:     public int readUnsignedShort() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readUnsignedShort();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357: 	 * returns a char value from the stream.
1:aaea357:      */
1:aaea357:     public char readChar() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readChar();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357: 	 * returns an Int from the stream.
1:aaea357:      */
1:aaea357:     public int readInt() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readInt();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357: 	 * returns a long from the stream.
1:aaea357:      */
1:aaea357:     public long readLong() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readLong();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns a float from the stream. 
1:aaea357:      */
1:aaea357:     public float readFloat() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readFloat();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns a double from the stream.
1:aaea357:      */
1:aaea357:     public double readDouble() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readDouble();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns the next line of text from the input stream.
1:aaea357:      */
1:aaea357:     public String readLine() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readLine();
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * returns a string that has been encoded using in the  UTF-8 format.
1:aaea357:      */
1:aaea357:     public String readUTF() throws IOException
1:aaea357: 	{
1:aaea357: 		return realRaf.readUTF();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/* Proxy Implementation of DataOutput interface */ 	   
1:aaea357: 
1:aaea357: 	/**
1:aaea357:      * Writes an int to the output stream .
1:aaea357:      */
1:aaea357:     public void write(int b) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.write(b);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes all the bytes in array to the stream.
1:aaea357:      */
1:aaea357:     public void write(byte b[]) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.write(b);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes specified number bytes from array to the stream.
1:aaea357: 	 * If the corruption flags are enabled, byte array
1:aaea357: 	 * is corrupted before doing the real write.
1:aaea357:      */
1:aaea357:     public void write(byte b[], int off, int len) throws IOException
1:aaea357: 	{
1:aaea357: 		if (cbio.isCorruptibleFile(realFile)){
1:aaea357: 			//corrupt the input byte array
1:aaea357: 			cbio.corrupt(b , off, len);
1:aaea357: 		}
1:aaea357: 		realRaf.write(b, off, len);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a boolean value to this output stream.
1:aaea357:      */
1:aaea357:     public void writeBoolean(boolean value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeBoolean(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes to  the eight low-order bits of ant int.
1:aaea357:      *
1:aaea357:      */
1:aaea357:     public void writeByte(int value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeByte(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a short value to the output stream  
1:aaea357:      */
1:aaea357:     public void writeShort(int value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeShort(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a char value to the output stream.
1:aaea357: 	 *
1:aaea357:      * @param      value   the <code>char</code> value to be written.
1:aaea357:      * @exception  IOException  if an I/O error occurs.
1:aaea357:      */
1:aaea357:     public void writeChar(int value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeChar(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes an int value to the output stream.
1:aaea357:      */
1:aaea357:     public void writeInt(int value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeInt(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a long  value to the output stream.
1:aaea357:      */
1:aaea357:     public void writeLong(long value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeLong(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a float value to the output stream.
1:aaea357:      */
1:aaea357:     public void writeFloat(float value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeFloat(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a a double value to the stream.
1:aaea357:      */
1:aaea357:     public void writeDouble(double value) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeDouble(value);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes a string as bytes to the stream.
1:aaea357:      */
1:aaea357:     public void writeBytes(String str) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeBytes(str);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes  the string to the stream.
1:aaea357:      */
1:aaea357:     public void writeChars(String str) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeChars(str);
1:aaea357: 	}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Writes the string in the utf format. 
1:aaea357:      */
1:aaea357:     public void writeUTF(String str) throws IOException
1:aaea357: 	{
1:aaea357: 		realRaf.writeUTF(str);
1:aaea357: 	}
1:aaea357: 
1:b2b30ec:     /**
1:b2b30ec:      * Reads up to <code>len</code> bytes of data from this file into an
1:b2b30ec:      * array of bytes. This method blocks until at least one byte of input
1:b2b30ec:      * is available.
1:b2b30ec:      * <p>
1:b2b30ec:      *
1:b2b30ec:      *
1:b2b30ec:      * @param b     the buffer into which the data is read.
1:b2b30ec:      * @param off   the start offset in array <code>b</code>
1:b2b30ec:      *                   at which the data is written.
1:b2b30ec:      * @param len   the maximum number of bytes read.
1:b2b30ec:      * @return the total number of bytes read into the buffer, or
1:b2b30ec:      *             <code>-1</code> if there is no more data because the end of
1:b2b30ec:      *             the file has been reached.
1:b2b30ec:      * @exception IOException If the first byte cannot be read for any reason
1:b2b30ec:      * other than end of file, or if the random access file has been closed, or
1:b2b30ec:      * if some other I/O error occurs.
1:b2b30ec:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
1:b2b30ec:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:b2b30ec:      * <code>len</code> is negative, or <code>len</code> is greater than
1:b2b30ec:      * <code>b.length - off</code>
1:b2b30ec:      */
1:b2b30ec:     public int read(byte[] b, int off, int len) throws IOException {
1:b2b30ec:         return realRaf.read (b, off, len);
1:b2b30ec:     }
1:aaea357: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1:     public  CorruptRandomAccessFile clone()
1:     {
1:         return new CorruptRandomAccessFile( realRaf.clone(), realFile );
1:     }
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2d8c0d3
/////////////////////////////////////////////////////////////////////////
1:         realRaf.sync();
commit:a552fe6
/////////////////////////////////////////////////////////////////////////
1:     public void sync() throws IOException
0: 		realRaf.sync();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Reads up to <code>len</code> bytes of data from this file into an
1:      * array of bytes. This method blocks until at least one byte of input
1:      * is available.
1:      * <p>
1:      *
1:      *
1:      * @param b     the buffer into which the data is read.
1:      * @param off   the start offset in array <code>b</code>
1:      *                   at which the data is written.
1:      * @param len   the maximum number of bytes read.
1:      * @return the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the file has been reached.
1:      * @exception IOException If the first byte cannot be read for any reason
1:      * other than end of file, or if the random access file has been closed, or
1:      * if some other I/O error occurs.
1:      * @exception NullPointerException If <code>b</code> is <code>null</code>.
1:      * @exception IndexOutOfBoundsException If <code>off</code> is negative,
1:      * <code>len</code> is negative, or <code>len</code> is greater than
1:      * <code>b.length - off</code>
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         return realRaf.read (b, off, len);
1:     }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.corruptio;
1: import org.apache.derby.io.StorageRandomAccessFile;
1: import java.io.IOException;
1: import java.io.File;
1: 
1: 
1: /**
1:  * This class provides a proxy implementation of the StorageRandomAccess File
1:  * interface.  It is used by CorruptDiskStorageFactory to instrument the database engine 
1:  * i/o for testing puproses. How the i/o operation are corrupted is based on the values
1:  * set in the instance of the Singleton CorruptibleIo class by the tests.
1:  * Methods in this class functon similar to java.io.RandomAccessFile except
1:  * when modified to perform the corruptios.
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  * @see java.io.RandomAccessFile
1:  * @see StorageRandomAccessFile
1:  */
1: public class CorruptRandomAccessFile implements StorageRandomAccessFile
1: {
1: 
1: 	private StorageRandomAccessFile realRaf;
1: 	private CorruptibleIo cbio;
1: 	private File realFile;
1: 
1:     /**
1:      * Construct a CorruptRandomAccessFile
1:      *
1:      * @param raf  The real random access file to which  calls are delegated fro
1:      *              this proxy class.
1:      */
1:     CorruptRandomAccessFile(StorageRandomAccessFile raf, File realFile)
1:     {
1: 		this.realRaf = raf;
1: 		cbio =  CorruptibleIo.getInstance();
1: 		this.realFile = realFile;
1:     }
1: 
1: 	
1: 	/**
1:      * Closes this file.
1:      */
1:     public void close() throws IOException
1: 	{
1: 		realRaf.close();
1: 	}
1: 
1:     /**
1:      * Get the current offset in this file.
1:      */
1:     public long getFilePointer() throws IOException
1: 	{
1: 		return realRaf.getFilePointer();
1: 	}
1: 
1:     /**
1:      * Gets the length of this file.
1:      */
1:     public long length() throws IOException
1: 	{
1: 		return realRaf.length();
1: 	}
1: 
1:     /**
1:      * Set the file pointer. 
1:      */
1:     public void seek(long newFilePointer) throws IOException
1: 	{
1: 		realRaf.seek(newFilePointer);
1: 	}
1: 
1:     /**
1:      * Sets the length of this file, either extending or truncating it.
1:      */
1:     public void setLength(long newLength) throws IOException
1: 	{
1: 		realRaf.setLength(newLength);
1: 	}
1:     
1:     /**
1:      * Force any changes out to the persistent store. 
1:      */
0:     public void sync( boolean metaData) throws IOException
1: 	{
0: 		realRaf.sync(metaData);
1: 	}
1: 
1: 
1: 	/*** Following functions Implement DataInput interfaces ****/
1: 
1:     /**
1:      * Reads some bytes from an input  stream into the byte array.
1:      */
1:     public void readFully(byte b[]) throws IOException
1: 	{
1: 		realRaf.readFully(b);
1: 	}
1: 
1:     /**
1:      *
1:      * Reads the specified number of  bytes from an input stream.
1:      */
1:     public void readFully(byte b[], int off, int len) throws IOException
1: 	{
1: 		realRaf.readFully(b , off, len);
1: 	}
1: 
1:     /**
1:      * skip over <code>nBytes</code> bytes of data 
1:      */
1:     public int skipBytes(int nBytes) throws IOException
1: 	{
1: 		return realRaf.skipBytes(nBytes);
1: 	}
1: 
1:     /**
1:      * Reads a  byte and returns true if the byte is not zero
1: 	 * otherwise false. 
1:      */
1:     public boolean readBoolean() throws IOException
1: 	{
1: 		return realRaf.readBoolean();
1: 	}
1: 
1:     /**
1:      * returns one input byte from the stream.
1:      */
1:     public byte readByte() throws IOException
1: 	{
1: 		return realRaf.readByte();
1: 	}
1: 
1:     /**
1:      * Reads one input byte in the unsigned form. 
1:      */
1:     public int readUnsignedByte() throws IOException
1: 	{
1: 		return realRaf.readUnsignedByte();
1: 	}
1: 
1:     /**
1:      * returns a short  value from the stream. 
1:      */
1:     public short readShort() throws IOException
1: 	{
1: 		return realRaf.readShort();
1: 	}
1: 
1:     /**
1: 	 * returns unsigned short.
1:      */
1:     public int readUnsignedShort() throws IOException
1: 	{
1: 		return realRaf.readUnsignedShort();
1: 	}
1: 
1:     /**
1: 	 * returns a char value from the stream.
1:      */
1:     public char readChar() throws IOException
1: 	{
1: 		return realRaf.readChar();
1: 	}
1: 
1:     /**
1: 	 * returns an Int from the stream.
1:      */
1:     public int readInt() throws IOException
1: 	{
1: 		return realRaf.readInt();
1: 	}
1: 
1:     /**
1: 	 * returns a long from the stream.
1:      */
1:     public long readLong() throws IOException
1: 	{
1: 		return realRaf.readLong();
1: 	}
1: 
1:     /**
1:      * returns a float from the stream. 
1:      */
1:     public float readFloat() throws IOException
1: 	{
1: 		return realRaf.readFloat();
1: 	}
1: 
1:     /**
1:      * returns a double from the stream.
1:      */
1:     public double readDouble() throws IOException
1: 	{
1: 		return realRaf.readDouble();
1: 	}
1: 
1:     /**
1:      * returns the next line of text from the input stream.
1:      */
1:     public String readLine() throws IOException
1: 	{
1: 		return realRaf.readLine();
1: 	}
1: 
1:     /**
1:      * returns a string that has been encoded using in the  UTF-8 format.
1:      */
1:     public String readUTF() throws IOException
1: 	{
1: 		return realRaf.readUTF();
1: 	}
1: 
1: 
1: 	/* Proxy Implementation of DataOutput interface */ 	   
1: 
1: 	/**
1:      * Writes an int to the output stream .
1:      */
1:     public void write(int b) throws IOException
1: 	{
1: 		realRaf.write(b);
1: 	}
1: 
1:     /**
1:      * Writes all the bytes in array to the stream.
1:      */
1:     public void write(byte b[]) throws IOException
1: 	{
1: 		realRaf.write(b);
1: 	}
1: 
1:     /**
1:      * Writes specified number bytes from array to the stream.
1: 	 * If the corruption flags are enabled, byte array
1: 	 * is corrupted before doing the real write.
1:      */
1:     public void write(byte b[], int off, int len) throws IOException
1: 	{
1: 		if (cbio.isCorruptibleFile(realFile)){
1: 			//corrupt the input byte array
1: 			cbio.corrupt(b , off, len);
1: 		}
1: 		realRaf.write(b, off, len);
1: 	}
1: 
1:     /**
1:      * Writes a boolean value to this output stream.
1:      */
1:     public void writeBoolean(boolean value) throws IOException
1: 	{
1: 		realRaf.writeBoolean(value);
1: 	}
1: 
1:     /**
1:      * Writes to  the eight low-order bits of ant int.
1:      *
1:      */
1:     public void writeByte(int value) throws IOException
1: 	{
1: 		realRaf.writeByte(value);
1: 	}
1: 
1:     /**
1:      * Writes a short value to the output stream  
1:      */
1:     public void writeShort(int value) throws IOException
1: 	{
1: 		realRaf.writeShort(value);
1: 	}
1: 
1:     /**
1:      * Writes a char value to the output stream.
1: 	 *
1:      * @param      value   the <code>char</code> value to be written.
1:      * @exception  IOException  if an I/O error occurs.
1:      */
1:     public void writeChar(int value) throws IOException
1: 	{
1: 		realRaf.writeChar(value);
1: 	}
1: 
1:     /**
1:      * Writes an int value to the output stream.
1:      */
1:     public void writeInt(int value) throws IOException
1: 	{
1: 		realRaf.writeInt(value);
1: 	}
1: 
1:     /**
1:      * Writes a long  value to the output stream.
1:      */
1:     public void writeLong(long value) throws IOException
1: 	{
1: 		realRaf.writeLong(value);
1: 	}
1: 
1:     /**
1:      * Writes a float value to the output stream.
1:      */
1:     public void writeFloat(float value) throws IOException
1: 	{
1: 		realRaf.writeFloat(value);
1: 	}
1: 
1:     /**
1:      * Writes a a double value to the stream.
1:      */
1:     public void writeDouble(double value) throws IOException
1: 	{
1: 		realRaf.writeDouble(value);
1: 	}
1: 
1:     /**
1:      * Writes a string as bytes to the stream.
1:      */
1:     public void writeBytes(String str) throws IOException
1: 	{
1: 		realRaf.writeBytes(str);
1: 	}
1: 
1:     /**
1:      * Writes  the string to the stream.
1:      */
1:     public void writeChars(String str) throws IOException
1: 	{
1: 		realRaf.writeChars(str);
1: 	}
1: 
1:     /**
1:      * Writes the string in the utf format. 
1:      */
1:     public void writeUTF(String str) throws IOException
1: 	{
1: 		realRaf.writeUTF(str);
1: 	}
1: 
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3755119
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.util.corruptio;
0: import org.apache.derby.io.StorageRandomAccessFile;
0: import java.io.IOException;
0: import java.io.File;
0: 
0: 
0: /**
0:  * This class provides a proxy implementation of the StorageRandomAccess File
0:  * interface.  It is used by CorruptDiskStorageFactory to instrument the database engine 
0:  * i/o for testing puproses. How the i/o operation are corrupted is based on the values
0:  * set in the instance of the Singleton CorruptibleIo class by the tests.
0:  * Methods in this class functon similar to java.io.RandomAccessFile except
0:  * when modified to perform the corruptios.
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  * @see java.io.RandomAccessFile
0:  * @see StorageRandomAccessFile
0:  */
0: public class CorruptRandomAccessFile implements StorageRandomAccessFile
0: {
0: 
0: 	private StorageRandomAccessFile realRaf;
0: 	private CorruptibleIo cbio;
0: 	private File realFile;
0: 
0:     /**
0:      * Construct a CorruptRandomAccessFile
0:      *
0:      * @param raf  The real random access file to which  calls are delegated fro
0:      *              this proxy class.
0:      */
0:     CorruptRandomAccessFile(StorageRandomAccessFile raf, File realFile)
0:     {
0: 		this.realRaf = raf;
0: 		cbio =  CorruptibleIo.getInstance();
0: 		this.realFile = realFile;
0:     }
0: 
0: 	
0: 	/**
0:      * Closes this file.
0:      */
0:     public void close() throws IOException
0: 	{
0: 		realRaf.close();
0: 	}
0: 
0:     /**
0:      * Get the current offset in this file.
0:      */
0:     public long getFilePointer() throws IOException
0: 	{
0: 		return realRaf.getFilePointer();
0: 	}
0: 
0:     /**
0:      * Gets the length of this file.
0:      */
0:     public long length() throws IOException
0: 	{
0: 		return realRaf.length();
0: 	}
0: 
0:     /**
0:      * Set the file pointer. 
0:      */
0:     public void seek(long newFilePointer) throws IOException
0: 	{
0: 		realRaf.seek(newFilePointer);
0: 	}
0: 
0:     /**
0:      * Sets the length of this file, either extending or truncating it.
0:      */
0:     public void setLength(long newLength) throws IOException
0: 	{
0: 		realRaf.setLength(newLength);
0: 	}
0:     
0:     /**
0:      * Force any changes out to the persistent store. 
0:      */
0:     public void sync( boolean metaData) throws IOException
0: 	{
0: 		realRaf.sync(metaData);
0: 	}
0: 
0: 
0: 	/*** Following functions Implement DataInput interfaces ****/
0: 
0:     /**
0:      * Reads some bytes from an input  stream into the byte array.
0:      */
0:     public void readFully(byte b[]) throws IOException
0: 	{
0: 		realRaf.readFully(b);
0: 	}
0: 
0:     /**
0:      *
0:      * Reads the specified number of  bytes from an input stream.
0:      */
0:     public void readFully(byte b[], int off, int len) throws IOException
0: 	{
0: 		realRaf.readFully(b , off, len);
0: 	}
0: 
0:     /**
0:      * skip over <code>nBytes</code> bytes of data 
0:      */
0:     public int skipBytes(int nBytes) throws IOException
0: 	{
0: 		return realRaf.skipBytes(nBytes);
0: 	}
0: 
0:     /**
0:      * Reads a  byte and returns true if the byte is not zero
0: 	 * otherwise false. 
0:      */
0:     public boolean readBoolean() throws IOException
0: 	{
0: 		return realRaf.readBoolean();
0: 	}
0: 
0:     /**
0:      * returns one input byte from the stream.
0:      */
0:     public byte readByte() throws IOException
0: 	{
0: 		return realRaf.readByte();
0: 	}
0: 
0:     /**
0:      * Reads one input byte in the unsigned form. 
0:      */
0:     public int readUnsignedByte() throws IOException
0: 	{
0: 		return realRaf.readUnsignedByte();
0: 	}
0: 
0:     /**
0:      * returns a short  value from the stream. 
0:      */
0:     public short readShort() throws IOException
0: 	{
0: 		return realRaf.readShort();
0: 	}
0: 
0:     /**
0: 	 * returns unsigned short.
0:      */
0:     public int readUnsignedShort() throws IOException
0: 	{
0: 		return realRaf.readUnsignedShort();
0: 	}
0: 
0:     /**
0: 	 * returns a char value from the stream.
0:      */
0:     public char readChar() throws IOException
0: 	{
0: 		return realRaf.readChar();
0: 	}
0: 
0:     /**
0: 	 * returns an Int from the stream.
0:      */
0:     public int readInt() throws IOException
0: 	{
0: 		return realRaf.readInt();
0: 	}
0: 
0:     /**
0: 	 * returns a long from the stream.
0:      */
0:     public long readLong() throws IOException
0: 	{
0: 		return realRaf.readLong();
0: 	}
0: 
0:     /**
0:      * returns a float from the stream. 
0:      */
0:     public float readFloat() throws IOException
0: 	{
0: 		return realRaf.readFloat();
0: 	}
0: 
0:     /**
0:      * returns a double from the stream.
0:      */
0:     public double readDouble() throws IOException
0: 	{
0: 		return realRaf.readDouble();
0: 	}
0: 
0:     /**
0:      * returns the next line of text from the input stream.
0:      */
0:     public String readLine() throws IOException
0: 	{
0: 		return realRaf.readLine();
0: 	}
0: 
0:     /**
0:      * returns a string that has been encoded using in the  UTF-8 format.
0:      */
0:     public String readUTF() throws IOException
0: 	{
0: 		return realRaf.readUTF();
0: 	}
0: 
0: 
0: 	/* Proxy Implementation of DataOutput interface */ 	   
0: 
0: 	/**
0:      * Writes an int to the output stream .
0:      */
0:     public void write(int b) throws IOException
0: 	{
0: 		realRaf.write(b);
0: 	}
0: 
0:     /**
0:      * Writes all the bytes in array to the stream.
0:      */
0:     public void write(byte b[]) throws IOException
0: 	{
0: 		realRaf.write(b);
0: 	}
0: 
0:     /**
0:      * Writes specified number bytes from array to the stream.
0: 	 * If the corruption flags are enabled, byte array
0: 	 * is corrupted before doing the real write.
0:      */
0:     public void write(byte b[], int off, int len) throws IOException
0: 	{
0: 		if (cbio.isCorruptibleFile(realFile)){
0: 			//corrupt the input byte array
0: 			cbio.corrupt(b , off, len);
0: 		}
0: 		realRaf.write(b, off, len);
0: 	}
0: 
0:     /**
0:      * Writes a boolean value to this output stream.
0:      */
0:     public void writeBoolean(boolean value) throws IOException
0: 	{
0: 		realRaf.writeBoolean(value);
0: 	}
0: 
0:     /**
0:      * Writes to  the eight low-order bits of ant int.
0:      *
0:      */
0:     public void writeByte(int value) throws IOException
0: 	{
0: 		realRaf.writeByte(value);
0: 	}
0: 
0:     /**
0:      * Writes a short value to the output stream  
0:      */
0:     public void writeShort(int value) throws IOException
0: 	{
0: 		realRaf.writeShort(value);
0: 	}
0: 
0:     /**
0:      * Writes a char value to the output stream.
0: 	 *
0:      * @param      value   the <code>char</code> value to be written.
0:      * @exception  IOException  if an I/O error occurs.
0:      */
0:     public void writeChar(int value) throws IOException
0: 	{
0: 		realRaf.writeChar(value);
0: 	}
0: 
0:     /**
0:      * Writes an int value to the output stream.
0:      */
0:     public void writeInt(int value) throws IOException
0: 	{
0: 		realRaf.writeInt(value);
0: 	}
0: 
0:     /**
0:      * Writes a long  value to the output stream.
0:      */
0:     public void writeLong(long value) throws IOException
0: 	{
0: 		realRaf.writeLong(value);
0: 	}
0: 
0:     /**
0:      * Writes a float value to the output stream.
0:      */
0:     public void writeFloat(float value) throws IOException
0: 	{
0: 		realRaf.writeFloat(value);
0: 	}
0: 
0:     /**
0:      * Writes a a double value to the stream.
0:      */
0:     public void writeDouble(double value) throws IOException
0: 	{
0: 		realRaf.writeDouble(value);
0: 	}
0: 
0:     /**
0:      * Writes a string as bytes to the stream.
0:      */
0:     public void writeBytes(String str) throws IOException
0: 	{
0: 		realRaf.writeBytes(str);
0: 	}
0: 
0:     /**
0:      * Writes  the string to the stream.
0:      */
0:     public void writeChars(String str) throws IOException
0: 	{
0: 		realRaf.writeChars(str);
0: 	}
0: 
0:     /**
0:      * Writes the string in the utf format. 
0:      */
0:     public void writeUTF(String str) throws IOException
0: 	{
0: 		realRaf.writeUTF(str);
0: 	}
0: 
0: }
============================================================================