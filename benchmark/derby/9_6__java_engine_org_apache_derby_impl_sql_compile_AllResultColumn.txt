1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.AllResultColumn
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * An AllResultColumn represents a "*" result column in a SELECT
1:eac0369:  * statement.  It gets replaced with the appropriate set of columns
1:eac0369:  * at bind time.
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class AllResultColumn extends ResultColumn
2:eac0369: {
1:eac0369: 	private TableName		tableName;
1:eac0369: 
1:3bb140c:     AllResultColumn(TableName tableName, ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.tableName = tableName;
1:3bb140c:     }
1:eac0369: 	/** 
1:eac0369: 	 * Return the full table name qualification for this node
1:eac0369: 	 *
1:eac0369: 	 * @return Full table name qualification as a String
1:eac0369: 	 */
1:3bb140c:     String getFullTableName()
1:eac0369: 	{
1:eac0369: 		if (tableName == null)
1:eac0369: 		{
1:eac0369: 			return null;
2:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return tableName.getFullTableName();
1:eac0369: 		}
1:eac0369: 	}
1:c83a399: 
1:eac0369: 	/**
1:eac0369: 	 * Make a copy of this ResultColumn in a new ResultColumn
1:eac0369: 	 *
1:eac0369: 	 * @return	A new ResultColumn with the same contents as this one
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ResultColumn cloneMe() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:b0456a0: 			SanityManager.ASSERT(getColumnDescriptor() == null,
1:eac0369: 					"columnDescriptor is expected to be non-null");
1:eac0369: 		}
1:c83a399: 
1:3bb140c:         return new AllResultColumn(tableName, getContextManager());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:3bb140c:     @Override
1:c83a399:     public TableName getTableNameObject() {
1:c83a399:         return tableName;
1:c83a399:     }
1:69f8afa: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (tableName != null) {
1:69f8afa:             tableName = (TableName) tableName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b0456a0
/////////////////////////////////////////////////////////////////////////
1: 			SanityManager.ASSERT(getColumnDescriptor() == null,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (tableName != null) {
1:             tableName = (TableName) tableName.accept(v);
1:         }
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class AllResultColumn extends ResultColumn
1:     AllResultColumn(TableName tableName, ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.ALL_RESULT_COLUMN);
1:         this.tableName = tableName;
1:     }
1:     String getFullTableName()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         return new AllResultColumn(tableName, getContextManager());
1:     @Override
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c83a399
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public TableName getTableNameObject() {
1:         return tableName;
1:     }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.AllResultColumn
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * An AllResultColumn represents a "*" result column in a SELECT
1:  * statement.  It gets replaced with the appropriate set of columns
1:  * at bind time.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class AllResultColumn extends ResultColumn
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private TableName		tableName;
1: 
1: 	/**
0: 	 * This initializer is for use in the parser for a "*".
1: 	 * 
0: 	 * @param tableName	Dot expression qualifying "*"
1: 	 *
0: 	 * @return	The newly constructed AllResultColumn
1: 	 */
0: 	public void init(Object tableName)
1: 	{
0: 		this.tableName = (TableName) tableName;
1: 	}
1: 
1: 	/** 
1: 	 * Return the full table name qualification for this node
1: 	 *
1: 	 * @return Full table name qualification as a String
1: 	 */
0: 	public String getFullTableName()
1: 	{
1: 		if (tableName == null)
1: 		{
1: 			return null;
1: 		}
1: 		else
1: 		{
1: 			return tableName.getFullTableName();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Make a copy of this ResultColumn in a new ResultColumn
1: 	 *
1: 	 * @return	A new ResultColumn with the same contents as this one
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ResultColumn cloneMe() throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(columnDescriptor == null,
1: 					"columnDescriptor is expected to be non-null");
1: 		}
1: 
0: 		return (ResultColumn) getNodeFactory().getNode(
0: 									C_NodeTypes.ALL_RESULT_COLUMN,
0: 									tableName,
0: 									getContextManager());
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * An AllResultColumn represents a "*" result column in a SELECT
0:  * statement.  It gets replaced with the appropriate set of columns
0:  * at bind time.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class AllResultColumn extends ResultColumn
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private TableName		tableName;
0: 
0: 	/**
0: 	 * This initializer is for use in the parser for a "*".
0: 	 * 
0: 	 * @param tableName	Dot expression qualifying "*"
0: 	 *
0: 	 * @return	The newly constructed AllResultColumn
0: 	 */
0: 	public void init(Object tableName)
0: 	{
0: 		this.tableName = (TableName) tableName;
0: 	}
0: 
0: 	/** 
0: 	 * Return the full table name qualification for this node
0: 	 *
0: 	 * @return Full table name qualification as a String
0: 	 */
0: 	public String getFullTableName()
0: 	{
0: 		if (tableName == null)
0: 		{
0: 			return null;
0: 		}
0: 		else
0: 		{
0: 			return tableName.getFullTableName();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Make a copy of this ResultColumn in a new ResultColumn
0: 	 *
0: 	 * @return	A new ResultColumn with the same contents as this one
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ResultColumn cloneMe() throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(columnDescriptor == null,
0: 					"columnDescriptor is expected to be non-null");
0: 		}
0: 
0: 		return (ResultColumn) getNodeFactory().getNode(
0: 									C_NodeTypes.ALL_RESULT_COLUMN,
0: 									tableName,
0: 									getContextManager());
0: 	}
0: }
============================================================================