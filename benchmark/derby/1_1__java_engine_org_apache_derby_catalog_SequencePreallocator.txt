1:311ee54: /*
1:311ee54: 
1:311ee54:    Derby - Class org.apache.derby.catalog.SequencePreallocator
1:311ee54: 
1:311ee54:    Licensed to the Apache Software Foundation (ASF) under one or more
1:311ee54:    contributor license agreements.  See the NOTICE file distributed with
1:311ee54:    this work for additional information regarding copyright ownership.
1:311ee54:    The ASF licenses this file to You under the Apache License, Version 2.0
1:311ee54:    (the "License"); you may not use this file except in compliance with
1:311ee54:    the License.  You may obtain a copy of the License at
1:311ee54: 
1:311ee54:       http://www.apache.org/licenses/LICENSE-2.0
1:311ee54: 
1:311ee54:    Unless required by applicable law or agreed to in writing, software
1:311ee54:    distributed under the License is distributed on an "AS IS" BASIS,
1:311ee54:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:311ee54:    See the License for the specific language governing permissions and
1:311ee54:    limitations under the License.
1:311ee54: 
1:311ee54:  */
1:311ee54: 
1:311ee54: package org.apache.derby.catalog;
1:311ee54: 
1:311ee54: import java.sql.SQLException;
1:311ee54: 
1:311ee54: /**
1:311ee54:  * <p>
1:c69fcab:  * Logic to determine how many values to pre-allocate for a sequence.
1:c69fcab:  * By default, Derby boosts concurrency by pre-allocating ranges of numbers for sequences.
1:311ee54:  * During orderly database shutdown, the unused numbers are reclaimed so that shutdown will
1:311ee54:  * not create holes in the sequences.  However, holes may appear if the application fails to shut
1:311ee54:  * down its databases before the JVM exits.
1:311ee54:  * </p>
1:311ee54:  *
1:311ee54:  * <p>
1:c69fcab:  * Logic in this class is called every time Derby needs to pre-allocate a new range of sequence
1:311ee54:  * values. Users can override Derby's default behavior by writing their own implementation of this
1:311ee54:  * interface and then setting the following Derby property:
1:311ee54:  * </p>
1:311ee54:  *
1:311ee54:  * <pre>
1:311ee54:  *  -Dderby.language.sequence.preallocator=com.acme.MySequencePreallocator
1:311ee54:  * </pre>
1:311ee54:  *
1:311ee54:  * <p>
1:311ee54:  * Classes which implement this interface must also provide a public 0-arg constructor so
1:c69fcab:  * that Derby can instantiate them. Derby will instantiate a SequencePreallocator for every sequence.
1:311ee54:  * </p>
1:311ee54:  *
1:311ee54:  */
1:311ee54: public  interface   SequencePreallocator
1:311ee54: {
1:311ee54:     /**
1:311ee54:      * <p>
1:311ee54:      * This method returns the size of the next pre-allocated range for the specified
1:c69fcab:      * sequence. Names are case-sensitive, as specified in CREATE SEQUENCE
1:311ee54:      * and CREATE TABLE statements.
1:311ee54:      * </p>
1:311ee54:      *
1:c69fcab:      * @param schemaName Name of schema holding the sequence.
1:c69fcab:      * @param sequenceName Specific name of the sequence.
1:311ee54:      */
1:311ee54:     public  int nextRangeSize
1:311ee54:         (
1:311ee54:          String schemaName,
1:311ee54:          String sequenceName
1:311ee54:          );
1:311ee54:     
1:311ee54: }
1:311ee54: 
1:311ee54: 
1:311ee54: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c69fcab
/////////////////////////////////////////////////////////////////////////
1:  * Logic to determine how many values to pre-allocate for a sequence.
1:  * By default, Derby boosts concurrency by pre-allocating ranges of numbers for sequences.
1:  * Logic in this class is called every time Derby needs to pre-allocate a new range of sequence
/////////////////////////////////////////////////////////////////////////
1:  * that Derby can instantiate them. Derby will instantiate a SequencePreallocator for every sequence.
/////////////////////////////////////////////////////////////////////////
1:      * sequence. Names are case-sensitive, as specified in CREATE SEQUENCE
1:      * @param schemaName Name of schema holding the sequence.
1:      * @param sequenceName Specific name of the sequence.
commit:311ee54
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.SequencePreallocator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: import java.sql.SQLException;
1: 
1: /**
1:  * <p>
0:  * Logic to determine how many values to pre-allocate for an identity column or sequence.
0:  * By default, Derby boosts concurrency by pre-allocating ranges of numbers for identity columns and sequences.
1:  * During orderly database shutdown, the unused numbers are reclaimed so that shutdown will
1:  * not create holes in the sequences.  However, holes may appear if the application fails to shut
1:  * down its databases before the JVM exits.
1:  * </p>
1:  *
1:  * <p>
0:  * Logic in this class is called every time Derby needs to pre-allocate a new range of identity/sequence
1:  * values. Users can override Derby's default behavior by writing their own implementation of this
1:  * interface and then setting the following Derby property:
1:  * </p>
1:  *
1:  * <pre>
1:  *  -Dderby.language.sequence.preallocator=com.acme.MySequencePreallocator
1:  * </pre>
1:  *
1:  * <p>
1:  * Classes which implement this interface must also provide a public 0-arg constructor so
0:  * that Derby can instantiate them. Derby will instantiate a SequencePreallocator for each identity
0:  * column and sequence.
1:  * </p>
1:  *
1:  */
1: public  interface   SequencePreallocator
1: {
1:     /**
1:      * <p>
1:      * This method returns the size of the next pre-allocated range for the specified
0:      * identity column or sequence. Names are case-sensitive, as specified in CREATE SEQUENCE
1:      * and CREATE TABLE statements.
1:      * </p>
1:      *
0:      * @param schemaName Name of schema holding the sequence or identity-laden table.
0:      * @param sequenceName Specific name of the sequence or identity-laden table.
1:      */
1:     public  int nextRangeSize
1:         (
1:          String schemaName,
1:          String sequenceName
1:          );
1:     
1: }
1: 
1: 
1: 
============================================================================