1:2277df2: /*
3:2277df2: 
1:fbf176c:    Derby - Class org.apache.derby.optional.api.LuceneUtils
1:2277df2: 
1:2277df2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2277df2:    contributor license agreements.  See the NOTICE file distributed with
1:2277df2:    this work for additional information regarding copyright ownership.
1:2277df2:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2277df2:    (the "License"); you may not use this file except in compliance with
1:2277df2:    the License.  You may obtain a copy of the License at
1:2277df2: 
1:2277df2:       http://www.apache.org/licenses/LICENSE-2.0
1:2277df2: 
1:2277df2:    Unless required by applicable law or agreed to in writing, software
1:2277df2:    distributed under the License is distributed on an "AS IS" BASIS,
1:2277df2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2277df2:    See the License for the specific language governing permissions and
1:2277df2:    limitations under the License.
1:2277df2: 
1:2277df2:  */
1:2277df2: 
1:fbf176c: package org.apache.derby.optional.api;
1:2277df2: 
1:2277df2: import java.lang.reflect.Constructor;
1:2277df2: import java.lang.reflect.InvocationTargetException;
1:2277df2: import java.sql.SQLException;
1:2277df2: import java.util.HashMap;
1:2277df2: import java.util.Locale;
1:2277df2: 
1:2277df2: import org.apache.lucene.analysis.Analyzer;
1:2277df2: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1:a4e6298: import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;
1:0b71ff5: import org.apache.lucene.queryparser.classic.QueryParser;
1:2277df2: import org.apache.lucene.util.Version;
1:2277df2: 
1:a4e6298: import org.apache.derby.iapi.error.PublicAPI;
1:a4e6298: import org.apache.derby.iapi.error.StandardException;
1:2277df2: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:2277df2: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:2277df2: 
1:2277df2: /**
1:2277df2:  * <p>
1:2277df2:  * Utility methods for the Lucene optional tool.
1:2277df2:  * </p>
1:2277df2:  */
1:2277df2: public abstract class LuceneUtils
4:2277df2: {
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2:     //
1:2277df2:     //  CONSTANTS
1:2277df2:     //
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2: 
1:a4e6298:     public  static  final   String  TEXT_FIELD_NAME = "luceneTextField";
1:a4e6298: 
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2:     //
1:2277df2:     //  STATE
1:2277df2:     //
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2: 
1:2277df2:     /** Map of Analyzers keyed by language code */
1:2277df2:     private static  HashMap<String,Class<? extends Analyzer>>   _analyzerClasses;
1:2277df2:     static
1:2277df2:     {
1:2277df2:         _analyzerClasses = new HashMap<String,Class<? extends Analyzer>>();
1:2277df2: 
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.ar.ArabicAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.hy.ArmenianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.eu.BasqueAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.br.BrazilianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.bg.BulgarianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.ca.CatalanAnalyzer.class );
1:2277df2:         // deprecated, use StandardAnalyzer instead: storeAnalyzerClass( org.apache.lucene.analysis.cn.ChineseAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.cz.CzechAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.da.DanishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.nl.DutchAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.en.EnglishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.fi.FinnishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.fr.FrenchAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.gl.GalicianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.de.GermanAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.el.GreekAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.hi.HindiAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.hu.HungarianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.id.IndonesianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.ga.IrishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.it.ItalianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.lv.LatvianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.no.NorwegianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.fa.PersianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.pt.PortugueseAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.ro.RomanianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.ru.RussianAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.es.SpanishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.sv.SwedishAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.th.ThaiAnalyzer.class );
1:2277df2:         storeAnalyzerClass( org.apache.lucene.analysis.tr.TurkishAnalyzer.class );
3:2277df2:     }
1:a4e6298: 
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2:     //
1:2277df2:     //  PUBLIC BEHAVIOR
1:2277df2:     //
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2: 
1:2277df2:     /** Get the version of the Lucene library on the classpath. */
1:2277df2:     @SuppressWarnings("deprecation")
1:2277df2:     public  static  Version currentVersion()
1:a4e6298:     {
1:2277df2:         Version retval = null;
1:2277df2: 
1:2277df2:         // the current version is the highest one
1:2277df2:         for ( Version current : Version.values() )
1:a4e6298:         {
1:2277df2:             if ( current == Version.LUCENE_CURRENT ) { continue; }
1:2277df2:             
1:2277df2:             if ( retval == null ) { retval = current; }
2:2277df2:             else
1:2277df2:             {
1:2277df2:                 if ( current.onOrAfter( retval ) ) { retval = current; }
1:a4e6298:             }
1:2277df2:         }
1:2277df2:         
1:2277df2:         return retval;
1:2277df2:     }
1:2277df2: 
1:2277df2:     /**
1:2277df2:      * <p>
1:2277df2:      * Get the default Analyzer associated with the database Locale.
1:2277df2:      * </p>
1:2277df2:      */
1:2277df2:     public  static  Analyzer    defaultAnalyzer()
1:a4e6298:         throws SQLException
1:2277df2:     {
1:2277df2:         return getAnalyzerForLocale( ConnectionUtil.getCurrentLCC().getDatabase().getLocale() );
1:2277df2:     }
1:2277df2:     
1:2277df2:     /**
1:2277df2:      * <p>
1:2277df2:      * Get the Analyzer associated with the given Locale.
1:2277df2:      * </p>
1:2277df2:      */
1:2277df2:     public  static  Analyzer    getAnalyzerForLocale( Locale locale )
1:a4e6298:         throws SQLException
1:2277df2:     {
1:2277df2:         String          language = locale.getLanguage();
1:2277df2: 
1:a4e6298:         try {
1:a4e6298:             Class<? extends Analyzer>   analyzerClass = _analyzerClasses.get( language );
1:2277df2:         
1:a4e6298:             if ( analyzerClass == null )    { return standardAnalyzer(); }
1:a4e6298:             else
1:a4e6298:             {
1:a4e6298:                 Constructor<? extends Analyzer> constructor = analyzerClass.getConstructor( Version.class );
1:2277df2: 
1:a4e6298:                 return constructor.newInstance( currentVersion() );
1:a4e6298:             }
1:2277df2:         }
1:6b8ad38:         catch (IllegalAccessException iae) { throw ToolUtilities.wrap( iae ); }
1:6b8ad38:         catch (InstantiationException ie)   { throw ToolUtilities.wrap( ie ); }
1:6b8ad38:         catch (InvocationTargetException ite)   { throw ToolUtilities.wrap( ite ); }
1:6b8ad38:         catch (NoSuchMethodException nsme)  { throw ToolUtilities.wrap( nsme ); }
1:2277df2:     }
1:2277df2: 
1:2277df2:     /**
1:2277df2:      * <p>
1:2277df2:      * Get the StandardAnalyzer for parsing text.
1:2277df2:      * </p>
1:2277df2:      */
1:2277df2:     public  static  Analyzer    standardAnalyzer()
1:2277df2:     {
1:2277df2:         return new StandardAnalyzer( currentVersion() );
1:2277df2:     }
1:2277df2:     
1:0b71ff5:     /**
1:0b71ff5:      * <p>
1:0b71ff5:      * Get the default, classic QueryParser.
1:0b71ff5:      * </p>
1:0b71ff5:      */
1:0b71ff5:     public  static  QueryParser defaultQueryParser
1:0b71ff5:         (
1:0b71ff5:          Version version,
1:a4e6298:          String[] fieldNames,
1:0b71ff5:          Analyzer analyzer
1:0b71ff5:          )
1:0b71ff5:     {
1:a4e6298:         return new MultiFieldQueryParser( version, fieldNames, analyzer );
1:a4e6298:     }
1:a4e6298:     
1:a4e6298:     /**
1:a4e6298:      * <p>
1:a4e6298:      * Get the default index descriptor. This has a single field named TEXT,
1:a4e6298:      * a defaultAnalyzer() and a defaultQueryParser().
1:a4e6298:      * </p>
1:a4e6298:      */
1:a4e6298:     public  static  LuceneIndexDescriptor   defaultIndexDescriptor()
1:a4e6298:     {
1:a4e6298:         return new DefaultIndexDescriptor();
1:0b71ff5:     }
1:0b71ff5:     
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2:     //
1:2277df2:     //  MINIONS
1:2277df2:     //
1:2277df2:     /////////////////////////////////////////////////////////////////
1:2277df2: 
1:2277df2:     /** Store an Analyzer class in the HashMap of Analyzers, keyed by language code */
1:2277df2:     private static  void    storeAnalyzerClass( Class<? extends Analyzer> analyzerClass )
1:2277df2:     {
1:2277df2:         _analyzerClasses.put( getLanguageCode( analyzerClass ), analyzerClass );
1:2277df2:     }
1:2277df2: 
1:2277df2:     /**
1:2277df2:      * <p>
1:2277df2:      * Get the language code for a Lucene Analyzer. Each of the Analyzers
1:2277df2:      * lives in a package whose last leg is the language code.
1:2277df2:      * </p>
1:2277df2:      */
1:2277df2:     private static  String  getLanguageCode( Class<? extends Analyzer> analyzerClass )
1:2277df2:     {
1:2277df2:         String  className = analyzerClass.getName();
1:2277df2:         String  packageName = className.substring( 0, className.lastIndexOf( "." ) );
1:2277df2:         String  languageCode = packageName.substring( packageName.lastIndexOf( "." ) + 1, packageName.length() );
1:2277df2: 
1:2277df2:         return languageCode;
1:a4e6298:     }
1:a4e6298: 
1:a4e6298:     /////////////////////////////////////////////////////////////////
1:a4e6298:     //
1:a4e6298:     //  NESTED CLASSES
1:a4e6298:     //
1:a4e6298:     /////////////////////////////////////////////////////////////////
1:a4e6298: 
1:a4e6298:     /** The default LuceneIndexDescriptor */
1:a4e6298:     public  static  class   DefaultIndexDescriptor  implements LuceneIndexDescriptor
1:a4e6298:     {
1:a4e6298:         public  DefaultIndexDescriptor()    {}
1:a4e6298: 
1:a4e6298:         /** Return the default array of field names { TEXT_FIELD_NAME }. */
1:a4e6298:         public  String[]    getFieldNames() { return new String[] { TEXT_FIELD_NAME }; }
1:a4e6298: 
1:a4e6298:         /** Return LuceneUtils.defaultAnalyzer() */
1:a4e6298:         public Analyzer getAnalyzer()   throws SQLException
1:a4e6298:         { return LuceneUtils.defaultAnalyzer(); }
1:a4e6298: 
1:a4e6298:         /**
1:a4e6298:          * Return LuceneUtils.defaultQueryParser(  LuceneUtils.currentVersion(), getFieldNames(), getAnalyzer() ).
1:a4e6298:          */
1:a4e6298:         public  QueryParser getQueryParser()
1:a4e6298:             throws SQLException
1:a4e6298:         {
1:a4e6298:             return LuceneUtils.defaultQueryParser
1:a4e6298:                 (
1:a4e6298:                  LuceneUtils.currentVersion(),
1:a4e6298:                  getFieldNames(),
1:a4e6298:                  getAnalyzer()
1:a4e6298:                  );
1:a4e6298:         }
1:a4e6298:     }
1:a4e6298:     
1:2277df2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
/////////////////////////////////////////////////////////////////////////
1:         catch (IllegalAccessException iae) { throw ToolUtilities.wrap( iae ); }
1:         catch (InstantiationException ie)   { throw ToolUtilities.wrap( ie ); }
1:         catch (InvocationTargetException ite)   { throw ToolUtilities.wrap( ite ); }
1:         catch (NoSuchMethodException nsme)  { throw ToolUtilities.wrap( nsme ); }
/////////////////////////////////////////////////////////////////////////
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   String  TEXT_FIELD_NAME = "luceneTextField";
1: 
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
1:         try {
1:             Class<? extends Analyzer>   analyzerClass = _analyzerClasses.get( language );
1:             if ( analyzerClass == null )    { return standardAnalyzer(); }
1:             else
1:             {
1:                 Constructor<? extends Analyzer> constructor = analyzerClass.getConstructor( Version.class );
1:                 return constructor.newInstance( currentVersion() );
1:             }
0:         catch (IllegalAccessException iae) { throw wrap( iae ); }
0:         catch (InstantiationException ie)   { throw wrap( ie ); }
0:         catch (InvocationTargetException ite)   { throw wrap( ite ); }
0:         catch (NoSuchMethodException nsme)  { throw wrap( nsme ); }
/////////////////////////////////////////////////////////////////////////
1:          String[] fieldNames,
1:         return new MultiFieldQueryParser( version, fieldNames, analyzer );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get the default index descriptor. This has a single field named TEXT,
1:      * a defaultAnalyzer() and a defaultQueryParser().
1:      * </p>
1:      */
1:     public  static  LuceneIndexDescriptor   defaultIndexDescriptor()
1:     {
1:         return new DefaultIndexDescriptor();
/////////////////////////////////////////////////////////////////////////
0:     /** Wrap an external exception */
0:     private  static  SQLException    wrap( Throwable t )
1:     {
0:         return sqlException( StandardException.plainWrapException( t ) );
1:     }
1:     
0:     /** Turn a StandardException into a SQLException */
0:     private  static  SQLException    sqlException( StandardException se )
1:     {
0:         return PublicAPI.wrapStandardException( se );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  NESTED CLASSES
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /** The default LuceneIndexDescriptor */
1:     public  static  class   DefaultIndexDescriptor  implements LuceneIndexDescriptor
1:     {
1:         public  DefaultIndexDescriptor()    {}
1: 
1:         /** Return the default array of field names { TEXT_FIELD_NAME }. */
1:         public  String[]    getFieldNames() { return new String[] { TEXT_FIELD_NAME }; }
1: 
1:         /** Return LuceneUtils.defaultAnalyzer() */
1:         public Analyzer getAnalyzer()   throws SQLException
1:         { return LuceneUtils.defaultAnalyzer(); }
1: 
1:         /**
1:          * Return LuceneUtils.defaultQueryParser(  LuceneUtils.currentVersion(), getFieldNames(), getAnalyzer() ).
1:          */
1:         public  QueryParser getQueryParser()
1:             throws SQLException
1:         {
1:             return LuceneUtils.defaultQueryParser
1:                 (
1:                  LuceneUtils.currentVersion(),
1:                  getFieldNames(),
1:                  getAnalyzer()
1:                  );
1:         }
1:     }
1:     
commit:0b71ff5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.queryparser.classic.QueryParser;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Get the default, classic QueryParser.
1:      * </p>
1:      */
1:     public  static  QueryParser defaultQueryParser
1:         (
1:          Version version,
0:          String fieldName,
1:          Analyzer analyzer
1:          )
1:     {
0:         return new QueryParser( version, fieldName, analyzer );
1:     }
1:     
commit:fbf176c
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.optional.api.LuceneUtils
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.optional.api;
commit:2277df2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.optional.LuceneUtils
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: package org.apache.derby.optional;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: import java.util.Locale;
1: 
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1: import org.apache.lucene.util.Version;
1: 
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: /**
1:  * <p>
1:  * Utility methods for the Lucene optional tool.
1:  * </p>
1:  */
1: public abstract class LuceneUtils
1: {
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /** Map of Analyzers keyed by language code */
1:     private static  HashMap<String,Class<? extends Analyzer>>   _analyzerClasses;
1:     static
1:     {
1:         _analyzerClasses = new HashMap<String,Class<? extends Analyzer>>();
1: 
1:         storeAnalyzerClass( org.apache.lucene.analysis.ar.ArabicAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.hy.ArmenianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.eu.BasqueAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.br.BrazilianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.bg.BulgarianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.ca.CatalanAnalyzer.class );
1:         // deprecated, use StandardAnalyzer instead: storeAnalyzerClass( org.apache.lucene.analysis.cn.ChineseAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.cz.CzechAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.da.DanishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.nl.DutchAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.en.EnglishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.fi.FinnishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.fr.FrenchAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.gl.GalicianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.de.GermanAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.el.GreekAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.hi.HindiAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.hu.HungarianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.id.IndonesianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.ga.IrishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.it.ItalianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.lv.LatvianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.no.NorwegianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.fa.PersianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.pt.PortugueseAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.ro.RomanianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.ru.RussianAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.es.SpanishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.sv.SwedishAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.th.ThaiAnalyzer.class );
1:         storeAnalyzerClass( org.apache.lucene.analysis.tr.TurkishAnalyzer.class );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  PUBLIC BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /** Get the version of the Lucene library on the classpath. */
1:     @SuppressWarnings("deprecation")
1:     public  static  Version currentVersion()
1:     {
1:         Version retval = null;
1: 
1:         // the current version is the highest one
1:         for ( Version current : Version.values() )
1:         {
1:             if ( current == Version.LUCENE_CURRENT ) { continue; }
1:             
1:             if ( retval == null ) { retval = current; }
1:             else
1:             {
1:                 if ( current.onOrAfter( retval ) ) { retval = current; }
1:             }
1:         }
1:         
1:         return retval;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the default Analyzer associated with the database Locale.
1:      * </p>
1:      */
1:     public  static  Analyzer    defaultAnalyzer()
0:         throws IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException, SQLException
1:     {
1:         return getAnalyzerForLocale( ConnectionUtil.getCurrentLCC().getDatabase().getLocale() );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get the Analyzer associated with the given Locale.
1:      * </p>
1:      */
1:     public  static  Analyzer    getAnalyzerForLocale( Locale locale )
0:         throws IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException
1:     {
1:         String          language = locale.getLanguage();
1: 
0:         Class<? extends Analyzer>   analyzerClass = _analyzerClasses.get( language );
1:         
0:         if ( analyzerClass == null )    { return standardAnalyzer(); }
1:         else
1:         {
0:             Constructor<? extends Analyzer> constructor = analyzerClass.getConstructor( Version.class );
1: 
0:             return constructor.newInstance( currentVersion() );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the StandardAnalyzer for parsing text.
1:      * </p>
1:      */
1:     public  static  Analyzer    standardAnalyzer()
1:     {
1:         return new StandardAnalyzer( currentVersion() );
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////
1: 
1:     /** Store an Analyzer class in the HashMap of Analyzers, keyed by language code */
1:     private static  void    storeAnalyzerClass( Class<? extends Analyzer> analyzerClass )
1:     {
1:         _analyzerClasses.put( getLanguageCode( analyzerClass ), analyzerClass );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get the language code for a Lucene Analyzer. Each of the Analyzers
1:      * lives in a package whose last leg is the language code.
1:      * </p>
1:      */
1:     private static  String  getLanguageCode( Class<? extends Analyzer> analyzerClass )
1:     {
1:         String  className = analyzerClass.getName();
1:         String  packageName = className.substring( 0, className.lastIndexOf( "." ) );
1:         String  languageCode = packageName.substring( packageName.lastIndexOf( "." ) + 1, packageName.length() );
1: 
1:         return languageCode;
1:     }
1: 
1: }
============================================================================