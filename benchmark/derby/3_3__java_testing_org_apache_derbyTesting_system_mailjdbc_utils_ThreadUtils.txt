1:9bbe2e4: /*
1:9bbe2e4:  * 
1:9bbe2e4:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils
1:9bbe2e4:  * 
1:9bbe2e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bbe2e4:  * contributor license agreements. See the NOTICE file distributed with this
1:9bbe2e4:  * work for additional information regarding copyright ownership. The ASF
1:9bbe2e4:  * licenses this file to You under the Apache License, Version 2.0 (the
1:9bbe2e4:  * "License"); you may not use this file except in compliance with the License.
1:9bbe2e4:  * You may obtain a copy of the License at
1:9bbe2e4:  * 
1:9bbe2e4:  * http://www.apache.org/licenses/LICENSE-2.0
1:9bbe2e4:  * 
1:9bbe2e4:  * Unless required by applicable law or agreed to in writing, software
1:9bbe2e4:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:9bbe2e4:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:9bbe2e4:  * License for the specific language governing permissions and limitations under
1:9bbe2e4:  * the License.
1:9bbe2e4:  *  
1:9bbe2e4:  */
1:9bbe2e4: package org.apache.derbyTesting.system.mailjdbc.utils;
1:9bbe2e4: /**
1:9bbe2e4:  * This class is used to keep the threads in an ArrayList and starts them 
1:9bbe2e4:  * also checks whether the thread is alive or sleeping
1:9bbe2e4:  */
1:9bbe2e4: import java.util.ArrayList;
1:9bbe2e4: 
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.tasks.Backup;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.tasks.Browse;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.tasks.Purge;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.tasks.Refresh;
1:9bbe2e4: 
1:9bbe2e4: public class ThreadUtils {
1:9d44c9e: 	private static ArrayList<Thread> userThreads = new ArrayList<Thread>();
1:9bbe2e4: 
1:a216dfd: 	public static ThreadUtils threadutil = new ThreadUtils();
1:9bbe2e4: 
1:9bbe2e4: 	//constructor which will start the threads
1:9bbe2e4: 	public static void startThreads() {
1:a216dfd: 		threadutil.run();
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public void run() {
1:9bbe2e4: 		Thread t = null;
1:9bbe2e4: 		try {
1:9bbe2e4: 			//Starting Refresh Thread
1:9bbe2e4: 			t = new Refresh("Refresh Thread");
1:9bbe2e4: 			t.start();
2:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1:9bbe2e4: 			userThreads.add(t);
1:9bbe2e4: 			//Starting browsing thread
1:9bbe2e4: 			t = new Browse("Browsing Thread");
1:9bbe2e4: 			t.start();
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1:9bbe2e4: 			userThreads.add(t);
1:9bbe2e4: 			//Starting Purge Thread
1:9bbe2e4: 			t = new Purge("Purging Thread");
1:a216dfd: 			int sleep_time = (int) 150000; //Due the cascade constriant
1:a216dfd: 									      // This is the number that
1:a216dfd: 										  // make sure insert attachment has been finished
1:9bbe2e4: 			Thread.sleep(sleep_time);
1:9bbe2e4: 			t.start();
1:a216dfd: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName() + " with 150000 sleep time");
1:9bbe2e4: 			userThreads.add(t);
1:9bbe2e4: 			//Starting Backup Thread
1:9bbe2e4: 			t = new Backup("Backup Thread");
1:9bbe2e4: 			t.start();
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1:9bbe2e4: 			userThreads.add(t);
1:9bbe2e4: 			sleep_time = (int) (Math.random() * 15000);
1:9bbe2e4: 			Thread.sleep(sleep_time);
1:9bbe2e4: 		} catch (Exception e) {
1:9bbe2e4: 			MailJdbc.logAct
1:9bbe2e4: 					.logMsg(LogFile.ERROR
1:9bbe2e4: 							+ "Exception while starting the threads: "
1:9bbe2e4: 							+ e.getMessage());
1:9bbe2e4: 		}
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public static synchronized boolean isThreadRunning(String name) {
1:9bbe2e4: 		//checks and returns true is the Refresh thread is active
1:9bbe2e4: 		if (name.equalsIgnoreCase("Refresh Thread")) {
1:9bbe2e4: 			Refresh rt = (Refresh) userThreads.get(0);
1:9bbe2e4: 			return rt.isRunning();
1:9bbe2e4: 		} else
1:9bbe2e4: 			return false;
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public static synchronized Thread getThread(String name) {
1:9bbe2e4: 		if (name.equalsIgnoreCase("Refresh Thread")) {
1:9bbe2e4: 			return (Refresh) userThreads.get(0);
1:a216dfd: 		} if (name.equalsIgnoreCase("Purging Thread")) {
1:a216dfd: 			return (Purge) userThreads.get(2);
1:9bbe2e4: 		} else {
1:9bbe2e4: 			return null;
1:9bbe2e4: 		}
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public ThreadUtils getInstance() {
1:a216dfd: 		return threadutil;
1:9bbe2e4: 	}
1:9bbe2e4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1: 	private static ArrayList<Thread> userThreads = new ArrayList<Thread>();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a216dfd
/////////////////////////////////////////////////////////////////////////
1: 	public static ThreadUtils threadutil = new ThreadUtils();
1: 		threadutil.run();
/////////////////////////////////////////////////////////////////////////
1: 			int sleep_time = (int) 150000; //Due the cascade constriant
1: 									      // This is the number that
1: 										  // make sure insert attachment has been finished
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName() + " with 150000 sleep time");
/////////////////////////////////////////////////////////////////////////
1: 		} if (name.equalsIgnoreCase("Purging Thread")) {
1: 			return (Purge) userThreads.get(2);
1: 		return threadutil;
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9bbe2e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  *  
1:  */
1: package org.apache.derbyTesting.system.mailjdbc.utils;
1: /**
1:  * This class is used to keep the threads in an ArrayList and starts them 
1:  * also checks whether the thread is alive or sleeping
1:  */
1: import java.util.ArrayList;
1: 
1: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1: import org.apache.derbyTesting.system.mailjdbc.tasks.Backup;
1: import org.apache.derbyTesting.system.mailjdbc.tasks.Browse;
1: import org.apache.derbyTesting.system.mailjdbc.tasks.Purge;
1: import org.apache.derbyTesting.system.mailjdbc.tasks.Refresh;
1: 
1: public class ThreadUtils {
0: 	private static ArrayList userThreads = new ArrayList();
1: 
0: 	public static ThreadUtils util = new ThreadUtils();
1: 
1: 	//constructor which will start the threads
1: 	public static void startThreads() {
0: 		util.run();
1: 	}
1: 
1: 	public void run() {
1: 		Thread t = null;
1: 		try {
1: 			//Starting Refresh Thread
1: 			t = new Refresh("Refresh Thread");
1: 			t.start();
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1: 			userThreads.add(t);
1: 			//Starting browsing thread
1: 			t = new Browse("Browsing Thread");
1: 			t.start();
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1: 			userThreads.add(t);
1: 			//Starting Purge Thread
1: 			t = new Purge("Purging Thread");
0: 			int sleep_time = (int) (Math.random() * 500);//TODO : Change this
0: 														 // number to a
0: 														 // meaningful one)
1: 			Thread.sleep(sleep_time);
1: 			t.start();
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1: 			userThreads.add(t);
1: 			//Starting Backup Thread
1: 			t = new Backup("Backup Thread");
1: 			t.start();
1: 			MailJdbc.logAct.logMsg(LogFile.INFO + "Started: " + t.getName());
1: 			userThreads.add(t);
1: 			sleep_time = (int) (Math.random() * 15000);
1: 			Thread.sleep(sleep_time);
1: 		} catch (Exception e) {
1: 			MailJdbc.logAct
1: 					.logMsg(LogFile.ERROR
1: 							+ "Exception while starting the threads: "
1: 							+ e.getMessage());
1: 		}
1: 	}
1: 
1: 	public static synchronized boolean isThreadRunning(String name) {
1: 		//checks and returns true is the Refresh thread is active
1: 		if (name.equalsIgnoreCase("Refresh Thread")) {
1: 			Refresh rt = (Refresh) userThreads.get(0);
1: 			return rt.isRunning();
1: 		} else
1: 			return false;
1: 	}
1: 
1: 	public static synchronized Thread getThread(String name) {
1: 		if (name.equalsIgnoreCase("Refresh Thread")) {
1: 			return (Refresh) userThreads.get(0);
1: 		} else {
1: 			return null;
1: 		}
1: 	}
1: 
1: 	public ThreadUtils getInstance() {
0: 		return util;
1: 	}
1: }
============================================================================