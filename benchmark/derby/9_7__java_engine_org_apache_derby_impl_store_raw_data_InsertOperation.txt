1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.InsertOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.PageKey;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
2:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: 
2:eac0369: /**	
1:eac0369: 	Represents an insert of a record onto a page.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_INSERT
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	insert a row onto a page
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		LogicalPageOperation the superclass
1:eac0369: 		doMeSlot(CompressedInt) which slot to operate on
1:eac0369: 		insertFlat(byte)		to undo with purge or with delete
1:eac0369: 
1:eac0369: 		OptionalData	The after image of the row to be inserted.
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369:     @see Page#insertAtSlot
1:eac0369: */
1:eac0369: public final class InsertOperation extends LogicalPageOperation 
1:eac0369: {
1:eac0369: 
1:eac0369: 	protected int			doMeSlot;	// insert slot - only valid during doMe()
1:eac0369: 	protected byte			insertFlag;	// see page insertFlag
1:eac0369: 	
1:eac0369: 	/** next column that need to be inserted. */
1:eac0369: 	transient protected int			startColumn; 
1:eac0369: 
1:eac0369: 	transient protected ByteArray preparedLog;
1:eac0369: 
1:eac0369: 	// yyz: revisit later, whether we need preparedLog, maybe everything will be prepared...
1:3546404:     InsertOperation(
1:eac0369:     RawTransaction              t, 
1:eac0369:     BasePage                    page, 
1:eac0369:     int                         slot, 
1:eac0369:     int                         recordId,
1:eac0369:     Object[]       row, 
1:eac0369:     FormatableBitSet                     validColumns,
1:eac0369:     LogicalUndo                 undo, 
1:eac0369:     byte                        insertFlag, 
1:eac0369:     int                         startColumn, 
1:eac0369:     boolean                     isLongColumn,
1:eac0369:     int                         realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream      logBuffer, 
1:eac0369:     int                         realSpaceOnPage, 
1:eac0369:     int                         overflowThreshold) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		super(page, undo, recordId);
1:eac0369: 
1:eac0369: 		this.doMeSlot = slot;
1:eac0369: 		this.insertFlag = insertFlag;
1:eac0369: 		this.startColumn = startColumn;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			writeOptionalDataToBuffer(t, logBuffer, row, validColumns,
1:eac0369: 				isLongColumn, realStartColumn, realSpaceOnPage, overflowThreshold);
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public InsertOperation() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		CompressedNumber.writeInt(out, doMeSlot);
1:eac0369: 		out.writeByte(insertFlag);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		doMeSlot = CompressedNumber.readInt(in);
1:eac0369: 		insertFlag = in.readByte();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_INSERT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	  
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		this.page.storeRecord(instant, doMeSlot, true, in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PageOperation methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undo the insert by simply marking the just inserted record as deleted.
1:eac0369: 		All logical undo logic has already been taken care of by generateUndo.
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 
1:eac0369: 		@see LogicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		int slot = 
1:eac0369:             undoPage.findRecordById(undoRecordId, Page.FIRST_SLOT_NUMBER);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			// if the record Id has changed, the page had better changed
1:eac0369: 			// this can only happen during recovery since in run time undo,
1:eac0369: 			// this resetRecordHandle gets called and this object have the new
1:eac0369: 			// page number and recordId
1:eac0369: 			if (undoRecordId != this.recordId)
1:eac0369: 				if (undoPage.getPageNumber() == getPageId().getPageNumber())
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"recordId changed from " + this.recordId +
1:eac0369: 						" to " + undoRecordId +
1:eac0369: 						" but page number did not change " +
1:eac0369: 						undoPage.getPageNumber());
1:eac0369: 
1:eac0369: 			if (slot == -1)
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"recordId " +
1:eac0369: 					undoRecordId +
1:eac0369: 					" not found on page " +
1:eac0369: 					undoPage.getPageNumber());
1:eac0369: 		}
1:eac0369: 
1:888d12e:         RawTransaction rxact = (RawTransaction)xact;
1:888d12e: 
1:eac0369: 		if ((insertFlag & Page.INSERT_UNDO_WITH_PURGE) != 0)
1:eac0369: 		{
1:eac0369: 			undoPage.purgeRecord(CLRInstant, slot, undoRecordId);
1:eac0369: 
1:eac0369: 
1:eac0369: 			// If we purged the last row off an overflow page, reclaim that
1:eac0369: 			// page - we have to do this post transaction termination because we
1:eac0369: 			// are underneath the log right now and cannot interrupt the log
1:eac0369: 			// stream.
1:eac0369: 			if (rxact.handlesPostTerminationWork() &&
1:eac0369: 				undoPage.isOverflowPage() && undoPage.recordCount() == 0)
1:eac0369: 			{
1:eac0369: 				ReclaimSpace work = 
1:888d12e: 					new ReclaimSpace(
1:888d12e:                             ReclaimSpace.PAGE, 
1:888d12e:                             (PageKey)undoPage.getIdentity(),
1:888d12e:                             rxact.getDataFactory(), 
1:888d12e:                             true /* service ASAP */);
1:888d12e: 
1:eac0369: 				rxact.addPostTerminationWork(work);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			undoPage.setDeleteStatus(CLRInstant, slot, true);
1:888d12e: 
1:888d12e: 
1:888d12e: 			if (rxact.handlesPostTerminationWork() && 
1:888d12e:                 !undoPage.isOverflowPage())
1:888d12e:             {
1:888d12e:                 if (undoPage.shouldReclaimSpace(
1:888d12e:                         undoPage.getPageNumber() == 1 ? 1 : 0, slot))
1:888d12e:                 {
1:888d12e:                     ((BaseDataFileFactory) rxact.getDataFactory()).insertUndoNotify(
1:888d12e:                         rxact,
1:888d12e:                         undoPage.getPageKey());
1:888d12e:                 }
1:888d12e:             }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		undoPage.setAuxObject(null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * LogicalUndoable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Restore the row stored in the optional data of the log record.
1:eac0369: 
1:eac0369: 		@exception IOException error reading from log stream
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
1:eac0369: 		throws StandardException, IOException
1:eac0369: 
1:eac0369: 	{
1:eac0369: 		Page p = null;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			// the optional data is written by the page in the same format it
1:eac0369: 			// stores record on the page, 
1:eac0369: 			// only a page knows how to restore a logged row back to a storable row
1:eac0369: 			// first get the page where the insert went even though the row may no
1:eac0369: 			// longer be there
1:eac0369: 			p = getContainer().getPage(getPageId().getPageNumber());
1:eac0369: 
1:eac0369: 			((BasePage)p).restoreRecordFromStream(in, row);
1:eac0369: 
1:eac0369: 		} finally {
1:eac0369: 
1:eac0369: 			if (p != null) {
1:eac0369: 				p.unlatch();
1:eac0369: 				p = null;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * method to support BeforeImageLogging
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
1:eac0369: 
1:eac0369: 			if ( ! getPageId().equals(undoPage.getPageId()))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								"restoreMe cannot restore to a different page. "
1:eac0369: 								 + "doMe page:" + getPageId() + " undoPage:" + 
1:eac0369: 								 undoPage.getPageId());
1:eac0369: 			if (slot != doMeSlot)
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								"restoreMe cannot restore to a different slot. "
1:eac0369: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
1:eac0369: 								 slot + " recordId:" + recordId);
1:eac0369: 		}
1:eac0369: 		insertFlag |= Page.INSERT_UNDO_WITH_PURGE;
1:eac0369: 
1:eac0369: 		// undo the insert with purge.
1:eac0369: 		undoMe(xact, undoPage, recordId, CLRinstant, in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 		methods to support prepared log
1:eac0369: 		
1:eac0369: 		the following two methods should not be called during recover
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (this.preparedLog);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public int getNextStartColumn()
1:eac0369: 	{
1:eac0369: 		return (this.startColumn);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		Writes out the row that is to be inserted as the optional data.
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectOutput
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	*/
1:eac0369: 	private void writeOptionalDataToBuffer(
1:eac0369:     RawTransaction          t, 
1:eac0369:     DynamicByteArrayOutputStream  logBuffer,
1:eac0369:     Object[]   row, 
1:eac0369:     FormatableBitSet                 validColumns, 
1:eac0369:     boolean                 isLongColumn,
1:eac0369:     int                     realStartColumn, 
1:eac0369:     int                     realSpaceOnPage, 
1:eac0369:     int                     overflowThreshold)
1:eac0369: 		throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(this.page != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DynamicByteArrayOutputStream localLogBuffer = null;
1:eac0369: 		if (logBuffer != null) {
1:eac0369: 			localLogBuffer = (DynamicByteArrayOutputStream) logBuffer;
1:eac0369: 		} else {
1:eac0369: 			realStartColumn = -1;
1:eac0369: 			realSpaceOnPage = -1;
1:eac0369: 			localLogBuffer = t.getLogBuffer();
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		if (isLongColumn) {
1:eac0369: 			this.startColumn = this.page.logLongColumn(doMeSlot, recordId,
1:eac0369: 				row[0], localLogBuffer);
1:eac0369: 		} else {
1:eac0369: 			this.startColumn = this.page.logRow(doMeSlot, true, recordId,
1:eac0369: 				row, validColumns, localLogBuffer, this.startColumn, insertFlag,
1:eac0369: 				realStartColumn, realSpaceOnPage, overflowThreshold);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int optionalDataStart = localLogBuffer.getBeginPosition();
1:eac0369: 		int optionalDataLength = localLogBuffer.getPosition() - optionalDataStart;
1:eac0369: 
1:eac0369: 		this.preparedLog = new ByteArray (localLogBuffer.getByteArray(), optionalDataStart,
1:eac0369: 			optionalDataLength);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 			"Insert : " +
1:eac0369: 			" Slot=" + doMeSlot +
1:eac0369: 			" recordId=" + recordId;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:888d12e
/////////////////////////////////////////////////////////////////////////
1:         RawTransaction rxact = (RawTransaction)xact;
1: 
/////////////////////////////////////////////////////////////////////////
1: 					new ReclaimSpace(
1:                             ReclaimSpace.PAGE, 
1:                             (PageKey)undoPage.getIdentity(),
1:                             rxact.getDataFactory(), 
1:                             true /* service ASAP */);
1: 
1: 
1: 
1: 			if (rxact.handlesPostTerminationWork() && 
1:                 !undoPage.isOverflowPage())
1:             {
1:                 if (undoPage.shouldReclaimSpace(
1:                         undoPage.getPageNumber() == 1 ? 1 : 0, slot))
1:                 {
1:                     ((BaseDataFileFactory) rxact.getDataFactory()).insertUndoNotify(
1:                         rxact,
1:                         undoPage.getPageKey());
1:                 }
1:             }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     InsertOperation(
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_INSERT
1: 	@derby.purpose	insert a row onto a page
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.InsertOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: import org.apache.derby.impl.store.raw.data.ReclaimSpace;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.store.raw.PageKey;
0: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: 
1: /**	
1: 	Represents an insert of a record onto a page.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_INSERT
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	insert a row onto a page
0: 	@upgrade
0: 	@disk_layout
1: 		LogicalPageOperation the superclass
1: 		doMeSlot(CompressedInt) which slot to operate on
1: 		insertFlat(byte)		to undo with purge or with delete
1: 
1: 		OptionalData	The after image of the row to be inserted.
0: 	@end_format
1: 	</PRE>
1:     @see Page#insertAtSlot
1: */
1: public final class InsertOperation extends LogicalPageOperation 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected int			doMeSlot;	// insert slot - only valid during doMe()
1: 	protected byte			insertFlag;	// see page insertFlag
1: 	
1: 	/** next column that need to be inserted. */
1: 	transient protected int			startColumn; 
1: 
1: 	transient protected ByteArray preparedLog;
1: 
1: 	// yyz: revisit later, whether we need preparedLog, maybe everything will be prepared...
0: 	public InsertOperation(
1:     RawTransaction              t, 
1:     BasePage                    page, 
1:     int                         slot, 
1:     int                         recordId,
1:     Object[]       row, 
1:     FormatableBitSet                     validColumns,
1:     LogicalUndo                 undo, 
1:     byte                        insertFlag, 
1:     int                         startColumn, 
1:     boolean                     isLongColumn,
1:     int                         realStartColumn, 
1:     DynamicByteArrayOutputStream      logBuffer, 
1:     int                         realSpaceOnPage, 
1:     int                         overflowThreshold) 
1: 		throws StandardException
1: 	{
1: 		super(page, undo, recordId);
1: 
1: 		this.doMeSlot = slot;
1: 		this.insertFlag = insertFlag;
1: 		this.startColumn = startColumn;
1: 
1: 		try {
1: 			writeOptionalDataToBuffer(t, logBuffer, row, validColumns,
1: 				isLongColumn, realStartColumn, realSpaceOnPage, overflowThreshold);
1: 		} catch (IOException ioe) {
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public InsertOperation() { super(); }
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeInt(out, doMeSlot);
1: 		out.writeByte(insertFlag);
1: 
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		doMeSlot = CompressedNumber.readInt(in);
1: 		insertFlag = in.readByte();
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_INSERT;
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	  
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		this.page.storeRecord(instant, doMeSlot, true, in);
1: 	}
1: 
1: 	/*
1: 	 * PageOperation methods
1: 	 */
1: 
1: 	/**
1: 		Undo the insert by simply marking the just inserted record as deleted.
1: 		All logical undo logic has already been taken care of by generateUndo.
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 
1: 		@see LogicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		int slot = 
1:             undoPage.findRecordById(undoRecordId, Page.FIRST_SLOT_NUMBER);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			// if the record Id has changed, the page had better changed
1: 			// this can only happen during recovery since in run time undo,
1: 			// this resetRecordHandle gets called and this object have the new
1: 			// page number and recordId
1: 			if (undoRecordId != this.recordId)
1: 				if (undoPage.getPageNumber() == getPageId().getPageNumber())
1: 					SanityManager.THROWASSERT(
1: 						"recordId changed from " + this.recordId +
1: 						" to " + undoRecordId +
1: 						" but page number did not change " +
1: 						undoPage.getPageNumber());
1: 
1: 			if (slot == -1)
1: 				SanityManager.THROWASSERT(
1: 					"recordId " +
1: 					undoRecordId +
1: 					" not found on page " +
1: 					undoPage.getPageNumber());
1: 		}
1: 
1: 		if ((insertFlag & Page.INSERT_UNDO_WITH_PURGE) != 0)
1: 		{
1: 			undoPage.purgeRecord(CLRInstant, slot, undoRecordId);
1: 
0: 			RawTransaction rxact = (RawTransaction)xact;
1: 
1: 			// If we purged the last row off an overflow page, reclaim that
1: 			// page - we have to do this post transaction termination because we
1: 			// are underneath the log right now and cannot interrupt the log
1: 			// stream.
1: 			if (rxact.handlesPostTerminationWork() &&
1: 				undoPage.isOverflowPage() && undoPage.recordCount() == 0)
1: 			{
1: 				ReclaimSpace work = 
0: 					new ReclaimSpace(ReclaimSpace.PAGE, (PageKey)undoPage.getIdentity(),
0: 									 rxact.getDataFactory(), true /* service ASAP */);
1: 				rxact.addPostTerminationWork(work);
1: 			}
1: 		}
1: 		else
1: 		{
1: 			undoPage.setDeleteStatus(CLRInstant, slot, true);
1: 		}
1: 
1: 		undoPage.setAuxObject(null);
1: 	}
1: 
1: 	/*
1: 	 * LogicalUndoable methods
1: 	 */
1: 
1: 
1: 	/**
1: 		Restore the row stored in the optional data of the log record.
1: 
1: 		@exception IOException error reading from log stream
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
1: 		throws StandardException, IOException
1: 
1: 	{
1: 		Page p = null;
1: 
1: 		try {
1: 			// the optional data is written by the page in the same format it
1: 			// stores record on the page, 
1: 			// only a page knows how to restore a logged row back to a storable row
1: 			// first get the page where the insert went even though the row may no
1: 			// longer be there
1: 			p = getContainer().getPage(getPageId().getPageNumber());
1: 
1: 			((BasePage)p).restoreRecordFromStream(in, row);
1: 
1: 		} finally {
1: 
1: 			if (p != null) {
1: 				p.unlatch();
1: 				p = null;
1: 			}
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * method to support BeforeImageLogging
1: 	 */
1: 
1: 	/**
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 
1: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1: 		 throws StandardException, IOException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
1: 
1: 			if ( ! getPageId().equals(undoPage.getPageId()))
1: 				SanityManager.THROWASSERT(
1: 								"restoreMe cannot restore to a different page. "
1: 								 + "doMe page:" + getPageId() + " undoPage:" + 
1: 								 undoPage.getPageId());
1: 			if (slot != doMeSlot)
1: 				SanityManager.THROWASSERT(
1: 								"restoreMe cannot restore to a different slot. "
1: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
1: 								 slot + " recordId:" + recordId);
1: 		}
1: 		insertFlag |= Page.INSERT_UNDO_WITH_PURGE;
1: 
1: 		// undo the insert with purge.
1: 		undoMe(xact, undoPage, recordId, CLRinstant, in);
1: 	}
1: 
1: 	/*
1: 		methods to support prepared log
1: 		
1: 		the following two methods should not be called during recover
1: 	*/
1: 
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (this.preparedLog);
1: 	}
1: 
1: 
1: 	public int getNextStartColumn()
1: 	{
1: 		return (this.startColumn);
1: 	}
1: 	
1: 	/**
1: 		Writes out the row that is to be inserted as the optional data.
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectOutput
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	*/
1: 	private void writeOptionalDataToBuffer(
1:     RawTransaction          t, 
1:     DynamicByteArrayOutputStream  logBuffer,
1:     Object[]   row, 
1:     FormatableBitSet                 validColumns, 
1:     boolean                 isLongColumn,
1:     int                     realStartColumn, 
1:     int                     realSpaceOnPage, 
1:     int                     overflowThreshold)
1: 		throws StandardException, IOException
1: 	{
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(this.page != null);
1: 		}
1: 
1: 		DynamicByteArrayOutputStream localLogBuffer = null;
1: 		if (logBuffer != null) {
1: 			localLogBuffer = (DynamicByteArrayOutputStream) logBuffer;
1: 		} else {
1: 			realStartColumn = -1;
1: 			realSpaceOnPage = -1;
1: 			localLogBuffer = t.getLogBuffer();
1: 		}
1: 		
1: 		if (isLongColumn) {
1: 			this.startColumn = this.page.logLongColumn(doMeSlot, recordId,
1: 				row[0], localLogBuffer);
1: 		} else {
1: 			this.startColumn = this.page.logRow(doMeSlot, true, recordId,
1: 				row, validColumns, localLogBuffer, this.startColumn, insertFlag,
1: 				realStartColumn, realSpaceOnPage, overflowThreshold);
1: 		}
1: 
1: 		int optionalDataStart = localLogBuffer.getBeginPosition();
1: 		int optionalDataLength = localLogBuffer.getPosition() - optionalDataStart;
1: 
1: 		this.preparedLog = new ByteArray (localLogBuffer.getByteArray(), optionalDataStart,
1: 			optionalDataLength);
1: 	}
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 			"Insert : " +
1: 			" Slot=" + doMeSlot +
1: 			" recordId=" + recordId;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: import org.apache.derby.impl.store.raw.data.ReclaimSpace;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.store.raw.PageKey;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: 
0: /**	
0: 	Represents an insert of a record onto a page.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_INSERT
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	insert a row onto a page
0: 	@upgrade
0: 	@disk_layout
0: 		LogicalPageOperation the superclass
0: 		doMeSlot(CompressedInt) which slot to operate on
0: 		insertFlat(byte)		to undo with purge or with delete
0: 
0: 		OptionalData	The after image of the row to be inserted.
0: 	@end_format
0: 	</PRE>
0:     @see Page#insertAtSlot
0: */
0: public final class InsertOperation extends LogicalPageOperation 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected int			doMeSlot;	// insert slot - only valid during doMe()
0: 	protected byte			insertFlag;	// see page insertFlag
0: 	
0: 	/** next column that need to be inserted. */
0: 	transient protected int			startColumn; 
0: 
0: 	transient protected ByteArray preparedLog;
0: 
0: 	// yyz: revisit later, whether we need preparedLog, maybe everything will be prepared...
0: 	public InsertOperation(
0:     RawTransaction              t, 
0:     BasePage                    page, 
0:     int                         slot, 
0:     int                         recordId,
0:     Object[]       row, 
0:     FormatableBitSet                     validColumns,
0:     LogicalUndo                 undo, 
0:     byte                        insertFlag, 
0:     int                         startColumn, 
0:     boolean                     isLongColumn,
0:     int                         realStartColumn, 
0:     DynamicByteArrayOutputStream      logBuffer, 
0:     int                         realSpaceOnPage, 
0:     int                         overflowThreshold) 
0: 		throws StandardException
0: 	{
0: 		super(page, undo, recordId);
0: 
0: 		this.doMeSlot = slot;
0: 		this.insertFlag = insertFlag;
0: 		this.startColumn = startColumn;
0: 
0: 		try {
0: 			writeOptionalDataToBuffer(t, logBuffer, row, validColumns,
0: 				isLongColumn, realStartColumn, realSpaceOnPage, overflowThreshold);
0: 		} catch (IOException ioe) {
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public InsertOperation() { super(); }
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, doMeSlot);
0: 		out.writeByte(insertFlag);
0: 
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		doMeSlot = CompressedNumber.readInt(in);
0: 		insertFlag = in.readByte();
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_INSERT;
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	  
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		this.page.storeRecord(instant, doMeSlot, true, in);
0: 	}
0: 
0: 	/*
0: 	 * PageOperation methods
0: 	 */
0: 
0: 	/**
0: 		Undo the insert by simply marking the just inserted record as deleted.
0: 		All logical undo logic has already been taken care of by generateUndo.
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 
0: 		@see LogicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage, int undoRecordId,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		int slot = 
0:             undoPage.findRecordById(undoRecordId, Page.FIRST_SLOT_NUMBER);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			// if the record Id has changed, the page had better changed
0: 			// this can only happen during recovery since in run time undo,
0: 			// this resetRecordHandle gets called and this object have the new
0: 			// page number and recordId
0: 			if (undoRecordId != this.recordId)
0: 				if (undoPage.getPageNumber() == getPageId().getPageNumber())
0: 					SanityManager.THROWASSERT(
0: 						"recordId changed from " + this.recordId +
0: 						" to " + undoRecordId +
0: 						" but page number did not change " +
0: 						undoPage.getPageNumber());
0: 
0: 			if (slot == -1)
0: 				SanityManager.THROWASSERT(
0: 					"recordId " +
0: 					undoRecordId +
0: 					" not found on page " +
0: 					undoPage.getPageNumber());
0: 		}
0: 
0: 		if ((insertFlag & Page.INSERT_UNDO_WITH_PURGE) != 0)
0: 		{
0: 			undoPage.purgeRecord(CLRInstant, slot, undoRecordId);
0: 
0: 			RawTransaction rxact = (RawTransaction)xact;
0: 
0: 			// If we purged the last row off an overflow page, reclaim that
0: 			// page - we have to do this post transaction termination because we
0: 			// are underneath the log right now and cannot interrupt the log
0: 			// stream.
0: 			if (rxact.handlesPostTerminationWork() &&
0: 				undoPage.isOverflowPage() && undoPage.recordCount() == 0)
0: 			{
0: 				ReclaimSpace work = 
0: 					new ReclaimSpace(ReclaimSpace.PAGE, (PageKey)undoPage.getIdentity(),
0: 									 rxact.getDataFactory(), true /* service ASAP */);
0: 				rxact.addPostTerminationWork(work);
0: 			}
0: 		}
0: 		else
0: 		{
0: 			undoPage.setDeleteStatus(CLRInstant, slot, true);
0: 		}
0: 
0: 		undoPage.setAuxObject(null);
0: 	}
0: 
0: 	/*
0: 	 * LogicalUndoable methods
0: 	 */
0: 
0: 
0: 	/**
0: 		Restore the row stored in the optional data of the log record.
0: 
0: 		@exception IOException error reading from log stream
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
0: 		throws StandardException, IOException
0: 
0: 	{
0: 		Page p = null;
0: 
0: 		try {
0: 			// the optional data is written by the page in the same format it
0: 			// stores record on the page, 
0: 			// only a page knows how to restore a logged row back to a storable row
0: 			// first get the page where the insert went even though the row may no
0: 			// longer be there
0: 			p = getContainer().getPage(getPageId().getPageNumber());
0: 
0: 			((BasePage)p).restoreRecordFromStream(in, row);
0: 
0: 		} finally {
0: 
0: 			if (p != null) {
0: 				p.unlatch();
0: 				p = null;
0: 			}
0: 		}
0: 	}
0: 
0: 	/*
0: 	 * method to support BeforeImageLogging
0: 	 */
0: 
0: 	/**
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 
0: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
0: 		 throws StandardException, IOException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
0: 
0: 			if ( ! getPageId().equals(undoPage.getPageId()))
0: 				SanityManager.THROWASSERT(
0: 								"restoreMe cannot restore to a different page. "
0: 								 + "doMe page:" + getPageId() + " undoPage:" + 
0: 								 undoPage.getPageId());
0: 			if (slot != doMeSlot)
0: 				SanityManager.THROWASSERT(
0: 								"restoreMe cannot restore to a different slot. "
0: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
0: 								 slot + " recordId:" + recordId);
0: 		}
0: 		insertFlag |= Page.INSERT_UNDO_WITH_PURGE;
0: 
0: 		// undo the insert with purge.
0: 		undoMe(xact, undoPage, recordId, CLRinstant, in);
0: 	}
0: 
0: 	/*
0: 		methods to support prepared log
0: 		
0: 		the following two methods should not be called during recover
0: 	*/
0: 
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (this.preparedLog);
0: 	}
0: 
0: 
0: 	public int getNextStartColumn()
0: 	{
0: 		return (this.startColumn);
0: 	}
0: 	
0: 	/**
0: 		Writes out the row that is to be inserted as the optional data.
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectOutput
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	*/
0: 	private void writeOptionalDataToBuffer(
0:     RawTransaction          t, 
0:     DynamicByteArrayOutputStream  logBuffer,
0:     Object[]   row, 
0:     FormatableBitSet                 validColumns, 
0:     boolean                 isLongColumn,
0:     int                     realStartColumn, 
0:     int                     realSpaceOnPage, 
0:     int                     overflowThreshold)
0: 		throws StandardException, IOException
0: 	{
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(this.page != null);
0: 		}
0: 
0: 		DynamicByteArrayOutputStream localLogBuffer = null;
0: 		if (logBuffer != null) {
0: 			localLogBuffer = (DynamicByteArrayOutputStream) logBuffer;
0: 		} else {
0: 			realStartColumn = -1;
0: 			realSpaceOnPage = -1;
0: 			localLogBuffer = t.getLogBuffer();
0: 		}
0: 		
0: 		if (isLongColumn) {
0: 			this.startColumn = this.page.logLongColumn(doMeSlot, recordId,
0: 				row[0], localLogBuffer);
0: 		} else {
0: 			this.startColumn = this.page.logRow(doMeSlot, true, recordId,
0: 				row, validColumns, localLogBuffer, this.startColumn, insertFlag,
0: 				realStartColumn, realSpaceOnPage, overflowThreshold);
0: 		}
0: 
0: 		int optionalDataStart = localLogBuffer.getBeginPosition();
0: 		int optionalDataLength = localLogBuffer.getPosition() - optionalDataStart;
0: 
0: 		this.preparedLog = new ByteArray (localLogBuffer.getByteArray(), optionalDataStart,
0: 			optionalDataLength);
0: 	}
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 			"Insert : " +
0: 			" Slot=" + doMeSlot +
0: 			" recordId=" + recordId;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: }
============================================================================