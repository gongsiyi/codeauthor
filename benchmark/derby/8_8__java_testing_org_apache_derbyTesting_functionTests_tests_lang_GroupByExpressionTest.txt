1:01217c2: /*
1:01217c2: 
1:01217c2:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest
1:01217c2: 
1:01217c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:01217c2:    contributor license agreements.  See the NOTICE file distributed with
1:01217c2:    this work for additional information regarding copyright ownership.
1:01217c2:    The ASF licenses this file to You under the Apache License, Version 2.0
1:01217c2:    (the "License"); you may not use this file except in compliance with
1:01217c2:    the License.  You may obtain a copy of the License at
1:01217c2: 
1:01217c2:       http://www.apache.org/licenses/LICENSE-2.0
1:01217c2: 
1:01217c2:    Unless required by applicable law or agreed to in writing, software
1:01217c2:    distributed under the License is distributed on an "AS IS" BASIS,
1:01217c2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01217c2:    See the License for the specific language governing permissions and
1:01217c2:    limitations under the License.
1:01217c2: 
1:01217c2:  */
1:01217c2: 
1:01217c2: package org.apache.derbyTesting.functionTests.tests.lang;
1:01217c2: 
1:01217c2: import java.sql.PreparedStatement;
1:01217c2: import java.sql.ResultSet;
1:79db9c5: import java.sql.SQLException;
1:01217c2: import java.sql.Statement;
1:01217c2: import junit.extensions.TestSetup;
1:01217c2: import junit.framework.Test;
1:01217c2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:79db9c5: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:01217c2: 
1:01217c2: public class GroupByExpressionTest extends BaseJDBCTestCase
2:01217c2: {
1:01217c2: 
1:79db9c5: 	private static String[] TABLES = { 
1:79db9c5:         "create table test (c1 int, c2 int, c3 int, c4 int)",
1:79db9c5:         "create table coal (vc1 varchar(2), vc2 varchar(2))",
1:79db9c5:          
1:01217c2:             "create table alltypes (i int, s smallint, l bigint, " +
1:01217c2:             "c char(10), v varchar(50), lvc long varchar, " +
1:01217c2:             " d double precision, r real, " + 
1:01217c2:             " dt date, t time, ts timestamp, " +
1:01217c2:             " b char(2) for bit data, bv varchar(8) for bit data, " +
1:79db9c5:             " lbv long varchar for bit data, dc decimal(5,2))",
1:79db9c5:         "create table t1 (c1 varchar(30))",
1:79db9c5:         "create table t2 (c1 varchar(10))",
1:79db9c5:         "create table t3 (c1 int, c2 int)"
1:1d4b49f:     };
1:1d4b49f: 
1:79db9c5:     private static String[] FUNCTIONS = {
1:79db9c5:         "create function r() returns double external name " +
1:79db9c5:             "'java.lang.Math.random' language java parameter style java"};
1:01217c2:     
1:01217c2:     /** 
1:01217c2:      * Basic test case. Checks functionality with simple arithmetic expressions
1:01217c2:      */
1:01217c2:     public void testSimpleExpressions() throws Exception
1:01217c2:     {
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q1",
1:01217c2:                 "select c1,c2,sum(c3) from test group by c2,c1",
1:01217c2:                 new int[][] {
1:01217c2:                         {1,10,100},
1:01217c2:                         {2,10,100},
1:01217c2:                         {1,11,100},
1:01217c2:                         {2,11,202}});
1:01217c2: 
1:01217c2:         verifyQueryResults(
1:d5ef906:                 "Q1_2",
1:d5ef906:                 "select c1,c2,sum(c3) from test group by c2,c1 having c1=1 and c2=10 and sum(c3) > 40",
1:d5ef906:                 new int[][] {
1:d5ef906:                         {1,10,100}});
1:01217c2: 
1:d5ef906:         verifyQueryResults(
1:01217c2:                 "Q2",
1:01217c2:                 "select c1+c2, sum(c3) from test group by c1,c2",
1:01217c2:                 new int[][] {
1:01217c2:                         {11, 100},
1:01217c2:                         {12, 100}, 
1:01217c2:                         {12, 100}, 
1:01217c2:                         {13, 202}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q3",
1:01217c2:                 "select c1+c2, sum(c3) from test group by c1+c2",
1:01217c2:                 new int[][] {
1:01217c2:                         {11, 100}, 
1:01217c2:                         {12, 200}, 
1:01217c2:                         {13, 202}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q4",
1:01217c2:                 "select (c1+c2)+1, sum(c3) from test group by c1+c2",
1:01217c2:                 new int[][] {
1:01217c2:                         {12, 100}, 
1:01217c2:                         {13, 200}, 
1:01217c2:                         {14, 202}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q5",
1:01217c2:                 "select (c1+c2), sum(c3)+(c1+c2) from test group by c1+c2",
1:01217c2:                 new int[][] {
1:01217c2:                         {11,111},
1:01217c2:                         {12,212},
1:01217c2:                         {13,215}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q6",
1:01217c2:                 "select c2-c1, c1+c2, count(*) from test group by c1+c2, c2-c1",
1:01217c2:                 new int[][] {
1:01217c2:                         {9,11,1},
1:01217c2:                         {8,12,1},
1:01217c2:                         {10,12,1},
1:01217c2:                         {9,13,2}});
1:01217c2: 
1:d5ef906:         // having clause with expression. same as last query with an additional restriction.
1:d5ef906:         verifyQueryResults(
1:d5ef906:                 "Q6b",
1:d5ef906:                 "select c2-c1, c1+c2, count(*) from test group by c1+c2, c2-c1 having (c2-c1)+count(*)>10",
1:d5ef906:                 new int[][] {
1:d5ef906:                         {10,12,1},
1:d5ef906:                         {9,13,2}});
4:01217c2:     }
1:01217c2:     
1:31d80c0:     /**
1:97e996c:      * DERBY-4202 Aggregates not allowed in group by
1:97e996c:      * @throws Exception
1:97e996c:      */
1:97e996c:     public void testDerby4402AggregateInGroupBy() throws Exception
1:97e996c:     {
1:97e996c:     	assertCompileError(
1:97e996c:                 "42Y26", "select c1 from test group by sum(c3)");
1:97e996c:     	assertCompileError(
1:97e996c:                 "42Y26", "select c1 from test group by (c1+sum(c3))");
1:97e996c:     }
1:97e996c:     
1:97e996c:     /**
1:31d80c0:      * queries which combine compound expressions and simple column refs.
1:31d80c0:      */
1:31d80c0:     public void testDerby3094Expressions() throws Exception
1:31d80c0:     {
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q1",
1:31d80c0:                 "select c1+c2, sum(c3) from test group by c1+c2, c1",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {11, 100}, 
1:31d80c0:                         {12, 100},  // c1=1, c2=11
1:31d80c0:                         {12, 100},  // c1=2, c2=10
1:31d80c0:                         {13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q2",
1:31d80c0:                 "select c1+c2, sum(c3) from test group by c1, c1+c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {11, 100}, 
1:31d80c0:                         {12, 100},  // c1=1, c2=11
1:31d80c0:                         {12, 100},  // c1=2, c2=10
1:31d80c0:                         {13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q3",
1:31d80c0:                 "select c1, c1+c2 from test group by c1, c1+c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 11}, 
1:31d80c0:                         {1, 12},
1:31d80c0:                         {2, 12},
1:31d80c0:                         {2, 13}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q4",
1:31d80c0:                 "select c1+c2, sum(c3) from test group by c1+c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {11, 100}, 
1:31d80c0:                         {12, 200},
1:31d80c0:                         {13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q5",
1:31d80c0:                 "select c1,c2,c1+c2,sum(c3) from test group by c1,c2,c1+c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 10, 11, 100},
1:31d80c0:                         {1, 11, 12, 100},
1:31d80c0:                         {2, 10, 12, 100},
1:31d80c0:                         {2, 11, 13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q6",
1:31d80c0:                 "select c1,c2,sum(c3) from test group by c2, c1",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 10, 100},
1:31d80c0:                         {2, 10, 100},
1:31d80c0:                         {1, 11, 100},
1:31d80c0:                         {2, 11, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q7",
1:31d80c0:                 "select c1 as c2, sum(c3) from test group by c1,c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 100},
1:31d80c0:                         {1, 100},
1:31d80c0:                         {2, 100},
1:31d80c0:                         {2, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q8",
1:31d80c0:                 "select c1 as c2, sum(c3) from test group by c1",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 200},
1:31d80c0:                         {2, 302}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q9",
1:31d80c0:             "select c1+c2, sum(c3) from test group by c1+c2 having c1+c2 > 11",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {12, 200},
1:31d80c0:                         {13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q10",
1:31d80c0:             "select c1+c2, sum(c3) from test " +
1:31d80c0:                      "group by c1, c1+c2 having c1+c2 > 11",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {12, 100},
1:31d80c0:                         {12, 100},
1:31d80c0:                         {13, 202}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q11",
1:31d80c0:                 "select c1*((c1+c2)/2), count(*) from test " +
1:31d80c0:                 " group by (c1+c2),  c1*((c1+c2)/2)",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {5, 1},
1:31d80c0:                         {6, 1},
1:31d80c0:                         {12, 1},
1:31d80c0:                         {12, 2}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q12",
1:31d80c0:                 "select c1, c1+c2, (c1+c2)+c3, count(*) from test " +
1:31d80c0:                 " group by c1, c1+c2, (c1+c2)+c3",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {1, 11, 111, 1},
1:31d80c0:                         {1, 12, 112, 1},
1:31d80c0:                         {2, 12, 112, 1},
1:31d80c0:                         {2, 13, 114, 2}});
1:31d80c0:         verifyQueryResults(
1:31d80c0:                 "Q13",
1:31d80c0:                 "select (c1+c2)+c3, count(*) from test " +
1:31d80c0:                 " group by c3, c1+c2",
1:31d80c0:                 new int[][] {
1:31d80c0:                         {111, 1},
1:31d80c0:                         {112, 2},
1:31d80c0:                         {114, 2}});
1:31d80c0:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1+c2, sum(c3) from test group by c1");
1:31d80c0:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1,c2, sum(c3) from test group by c1+c2,c1");
1:31d80c0:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1+c2, sum(c3) from test group by 1");
1:31d80c0:         assertCompileError(
1:31d80c0:             "42X04", "select c1+c2 as expr, sum(c3) from test group by expr");
1:31d80c0:         assertCompileError(
1:31d80c0:             "42X04", "select c1 as c1a, c2, sum(c3) from test group by c1a,c2");
1:31d80c0:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1 as c2, sum(c3) from test group by c2");
1:31d80c0:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)");
1:31d80c0:     }
1:01217c2:     
1:01217c2:     public void testSubSelect() throws Exception
1:01217c2:     {
1:01217c2:         /* query with a group by on a subselect */
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q1",
1:01217c2:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a",
1:01217c2:                 new int[][] {
1:01217c2:                         {3,23}, {4,35}});
1:01217c2:         
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q2",
1:01217c2:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a+1",
1:01217c2:                 new int[][] {
1:01217c2:                         {3,23}, {4,35}});
1:01217c2: 
1:01217c2:         verifyQueryResults(
1:d5ef906:                 "Q2",
1:d5ef906:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a+1 having a+1 > 3",
1:d5ef906:                 new int[][] {{4,35}});
1:01217c2:         
1:d5ef906:         verifyQueryResults(
1:01217c2:                 "Q3",
1:01217c2:                 "select b/2,sum(a) from " +
1:01217c2:                 "(select c1+1 a, max(c2) b from test group by c1+1) t " +
1:01217c2:                 "group by b/2",
1:01217c2:                 new int[][] {{5,5}});
1:01217c2: 
1:01217c2:     }
1:01217c2:     
1:01217c2: 
1:01217c2:     public void testMiscExpressions() throws Exception
1:01217c2:     {
1:01217c2:         // cast
1:01217c2:         verifyQueryResults(
1:01217c2:                 "cast",
1:01217c2:                 "select (cast (c1 as char(2))), count(*) from test " +
1:01217c2:                 " group by (cast (c1 as char(2)))",
1:01217c2:                 new Object[][] {
1:39b3237:                         {"1 ", 2}, 
1:39b3237:                         {"2 ", 3}});
1:01217c2:         
1:01217c2:         // coalesce
1:01217c2:         verifyQueryResults(
1:01217c2:                 "coalesce",
1:01217c2:                 "select (coalesce(vc1,vc2)), count(*) from coal " +
1:01217c2:                 " group by (coalesce(vc1,vc2))",
1:39b3237:                 new Object[][] {{"1", 2}, {"2", 1}});
1:01217c2:         // concat
1:01217c2:         verifyQueryResults(
1:01217c2:                 "concat",
1:01217c2:                 "select c||v, count(*) from alltypes group by c||v",
1:01217c2:                 new Object[][] {
1:39b3237:                         {"duplicate noone is here", 1},
1:39b3237:                         {"duplicate this is duplicated", 13},
1:39b3237:                         {"goodbye   this is duplicated", 1}});
1:01217c2:         // conditional.
1:01217c2:         verifyQueryResults(
1:01217c2:                 "cond",
1:01217c2:                 "select (case when c1 = 1 then 2 else 1 end), sum(c2) from test " +
1:01217c2:                 " group by (case when c1 = 1 then 2 else 1 end)",
1:01217c2:                 new int[][] {{1,32}, {2, 21}});
1:01217c2:         
1:9871768:         // Conditional Derby-2230.
1:9871768:         verifyQueryResults(
1:9871768:                 "cond",
1:9871768:                 "select case when 1 = 1 then 'z' else substr('abc',1,1) end from test",
1:9871768:                 new String[][] {{"z"}});
1:9871768: 
1:01217c2:         // length
1:01217c2:         verifyQueryResults(
1:01217c2:                 "length",
1:01217c2:                 "select length(v), count(*) from alltypes group by length(v)",
1:01217c2:                 new int[][] {{13,1},{18,14}});
1:01217c2:         
1:01217c2:         // current time. ignore the value of current time. 
1:01217c2:         // just make sure we can group by it and get the right results for
1:01217c2:         // the aggregate.
1:01217c2:         verifyQueryResults(
1:01217c2:                 "current_time",
1:01217c2:                 "select co from " +
1:01217c2:                 "(select current_time ct, count(*) co from test t1, test t2, test t3 group by current_time) t",
1:01217c2:                 new int[][] {{125}});
1:01217c2:         // concat + substr
1:01217c2:         verifyQueryResults(
1:01217c2:                 "concat+substr",
1:01217c2:                 "select substr(c||v, 1, 4), count(*) from alltypes group by substr(c||v, 1, 4)",
1:01217c2:                 new Object[][] {
1:39b3237:                         {"dupl", 14},
1:39b3237:                         {"good", 1}});
1:01217c2: 
1:1d4b49f:         // DERBY-2008 
1:1d4b49f:         // substr (2-args)
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "substr-Q1",
1:1d4b49f:                 "select substr(c1, 3) from t1 group by substr(c1, 3)",
1:1d4b49f:                 new String[][] { {"03-12-08"},
1:1d4b49f:                                  {"28-09-21"} });
1:1d4b49f:         // substr (3-args)
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "substr-Q2",
1:1d4b49f:                 "select substr(c1, 3, 4) from t1 group by substr(c1, 3, 4)",
1:1d4b49f:                 new String[][] { {"03-1"},
1:1d4b49f:                                  {"28-0"} });
1:1d4b49f: 
1:1d4b49f:         // ltrim
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "ltrim",
1:1d4b49f:                 "select ltrim(c1) from t2 group by ltrim(c1)",
1:1d4b49f:                 new String[][] { {"123 "},
1:1d4b49f:                                  {"abc "} });
1:1d4b49f: 
1:1d4b49f:         // rtrim
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "rtrim",
1:1d4b49f:                 "select rtrim(c1) from t2 group by rtrim(c1)",
1:1d4b49f:                 new String[][] { {"123"},
1:1d4b49f:                                  {"abc"} });
1:1d4b49f:         
1:d5ef906:        // rtrim in having clause as well.
1:d5ef906:         verifyQueryResults(
1:d5ef906:                 "rtrim_having",
1:d5ef906:                 "select rtrim(c1) from t2 group by rtrim(c1) having rtrim(c1) like 'ab%'",
1:d5ef906:                 new String[][] { {"abc"} });
1:01217c2:         
1:01217c2: 
1:1d4b49f:         // locate (2-args)
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "locate-Q1",
1:1d4b49f:                 "select locate(c1, 'abc') from t2 group by locate(c1, 'abc')",
1:1d4b49f:                 new int[][] { { 0 }, 
1:1d4b49f:                               { 1 } });
1:1d4b49f: 
1:1d4b49f:         // locate (3-args)
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "locate-Q2",
1:1d4b49f:                 "select locate(c1, 'abc', 1) from t2 group by locate(c1, 'abc',1)",
1:1d4b49f:                 new int[][] { { 0 }, 
1:1d4b49f:                               { 1 } });
1:1d4b49f:         
1:1d4b49f:         // cast with NULL
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "cast-Q2",
1:1d4b49f:                 "select (cast (NULL as INTEGER)) from t2 group by (cast (NULL as INTEGER))",
1:1d4b49f:                 new Object[][] { { null } } );
1:1d4b49f: 
1:1d4b49f:         // DERBY-2014
1:1d4b49f:         // nullif
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "nullif-Q1",
1:1d4b49f:                 "select nullif(c1,c1) from t3 group by nullif(c1,c1)",
1:1d4b49f:                 new Object[][] { { null } } );
1:1d4b49f: 
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "nullif-Q2",
1:1d4b49f:                 "select nullif(c1,c2) from t3 group by nullif(c1,c2)",
1:39b3237:                 new Object[][] { { 5 }, 
1:1d4b49f:                                  { null } });
1:1d4b49f: 
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "nullif-Q3",
1:1d4b49f:                 "select nullif(c1,10) from t3 group by nullif(c1,10)",
1:39b3237:                 new Object[][] { { 1 },
1:39b3237:                                  { 2 },
1:39b3237:                                  { 3 },
1:39b3237:                                  { 5 },
1:1d4b49f:                                  { null } });
1:1d4b49f: 
1:1d4b49f:         verifyQueryResults(
1:1d4b49f:                 "nullif-Q4",
1:1d4b49f:                 "select nullif(1,c1) from t3 group by nullif(1,c1)",
1:39b3237:                 new Object[][] { { 1 }, 
1:1d4b49f:                                  { null } });
1:01217c2:     }
1:01217c2:     
1:01217c2:     public void testExtractOperator() throws Exception
1:01217c2:     {
1:01217c2:         verifyQueryResults(
1:01217c2:                 "year",
1:01217c2:                 "select year(dt), count(*) from alltypes group by year(dt)",
1:01217c2:                 new int[][] {{1992, 15}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "month",
1:01217c2:                 "select month(dt), count(*) from alltypes group by month(dt)",
1:01217c2:                 new int[][] {{1,5},{2,6},{3,4}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "day",
1:01217c2:                 "select day(dt), count(*) from alltypes group by day(dt)",
1:01217c2:                 new int[][] {{1,3},{2,3},{3,3},{4,3},{5,2},{6,1}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "hour",
1:01217c2:                 "select hour(t), count(*) from alltypes group by hour(t)",
1:01217c2:                 new int[][] {{12, 15}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "hour2",
1:01217c2:                 "select hour(ts), count(*) from alltypes group by hour(ts)",
1:01217c2:                 new int[][] {{12,15}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "minute",
1:01217c2:                 "select minute(ts), count(*) from alltypes group by minute(ts)",
1:01217c2:                 new int[][] {{30,14},{55,1}});
1:01217c2:         verifyQueryResults(
1:01217c2:                 "second",
1:01217c2:                 "select second(t), count(*) from alltypes group by second(t)",
1:01217c2:                 new int[][]{
1:01217c2:                         {30,2},{31,1},{32,1},{33,1},{34,1},{35,1},
1:01217c2:                         {36,1},{37,1},{38,1},{39,1},{40,1},{41,1},
1:01217c2:                         {42,1},{55,1}});
1:01217c2:     }
1:01217c2:     
1:01217c2:     /**
1:01217c2:      * Check that duplicate columns are now allowed in group by's. Earlier
1:01217c2:      * (pre 883), derby would flag an error.
1:01217c2:      *
1:01217c2:      */
1:01217c2:     public void testDuplicateColumns() throws Exception
1:01217c2:     {
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q1",
1:01217c2:                 "select c1, sum(c2) from test group by c1,c1",
1:01217c2:                 new int[][]{ {1,21}, {2,32}});
1:01217c2:         
1:01217c2:         verifyQueryResults(
1:01217c2:                 "Q2",
1:01217c2:                 "select c1, c1, sum(c2) from test group by c1,c1",
1:01217c2:                 new int[][]{ {1,1,21}, {2,2,32}});
1:01217c2:     }
1:01217c2:     /**
1:01217c2:      * Negative tests. These queries should not compile at all.
1:01217c2:      */
1:01217c2:     public void testNegative()
1:01217c2:     {
1:01217c2:         // disallow java function 
1:01217c2:         assertCompileError(
1:01217c2:                 "42Y30", "select r(), count(*) from test group by r()");
1:96e7da9:         
1:96e7da9:         assertCompileError(
1:96e7da9:                 "42Y30", "select count(*) from test group by r()");
1:01217c2:         // invalid grouping expression.
1:01217c2:         assertCompileError(
1:f2220fd:                 "42Y36", "select c1+1, count(*) from test group by c1+2");
1:01217c2:         
1:01217c2:         // again invalid grouping expression because cast type is different.
1:01217c2:         assertCompileError(
1:f2220fd:                 "42Y36", "select (cast (c as char(2))), count(*) " +
1:01217c2:                 " from alltypes group by (cast (c as char(3)))");
1:01217c2: 
1:01217c2:         // same column name, same table but different tablenumber in the query
1:01217c2:         assertCompileError(
1:f2220fd:                 "42Y36", 
1:01217c2:                 "select t1.c1, count(*) from test t1, test t2 " + 
1:01217c2:                 " group by t2.c1");
1:01217c2:         // ternary operator, not equivalent test.
1:01217c2:         assertCompileError(
1:f2220fd:                 "42Y36",
1:01217c2:                 "select substr(c, 3, 4) from alltypes group by substr(v, 3, 4)");
1:1d4b49f: 
1:1d4b49f:         // DERBY-2008
1:1d4b49f:         // invalid grouping expression 
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select substr(c1, 3, 4) from t1 group by substr(c1, 3)");
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select substr(c1, 3) from t1 group by substr(c1, 3, 4)");
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select locate(c1, 'abc') from t2 group by locate(c1, 'abc',3)");
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc')");
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc',3)");
1:1d4b49f: 
1:1d4b49f:         // DERBY-2014
1:1d4b49f:         // invalid grouping expression
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select nullif(c1,c2) from t3 group by nullif(c2,c1)");
1:1d4b49f:         assertCompileError(
1:f2220fd:                 "42Y36",
1:1d4b49f:                 "select nullif(c1,100) from t3 group by nullif(c1,200)");
1:1d4b49f: 
1:01217c2:         // aggregates in group by list.
1:01217c2:         assertCompileError(
1:01217c2:                 "42Y26",
1:01217c2:                 "select 1, max(c1) from test group by max(c1)");
1:01217c2:     }
1:01217c2:     /* --------------------- begin helper methods -------------------- */
1:01217c2:     
1:01217c2:     private Object[] intRow(int[] expected)
1:01217c2:     {
1:01217c2:         Object[] arr = new Object[expected.length];
1:01217c2:         for (int i = 0; i < expected.length; i++)
1:01217c2:         {
1:39b3237:             arr[i] = expected[i];
1:01217c2:         }
1:01217c2:         return arr;
1:01217c2:     }
1:01217c2:     
1:01217c2:     private void verifyQueryResults(
1:01217c2:             String assertString, String query, Object[][] golden)
1:01217c2:         throws Exception
1:01217c2:     {
1:01217c2: 
1:01217c2:         PreparedStatement ps = prepareStatement(query);
1:01217c2:         ResultSet rs = ps.executeQuery();
1:01217c2:         for (int i = 0; i < golden.length; i++)
1:01217c2:         {
1:01217c2:             assertTrue(
1:01217c2:                     "Not enough rows. Expected " + golden.length + 
1:01217c2:                     " but found " + i, 
1:01217c2:                     rs.next());
1:01217c2: 
1:01217c2:             assertRow(assertString + ":Row:" + i, rs, golden[i]);
1:01217c2:         }
1:01217c2:         rs.close();
1:01217c2:         ps.close();
1:01217c2:     }
1:01217c2:     
1:01217c2:     private void verifyQueryResults(
1:01217c2:             String assertString, String query, int[][] golden) 
1:01217c2:         throws Exception
1:01217c2:     {
1:01217c2:         PreparedStatement ps = prepareStatement(query);
1:01217c2:         ResultSet rs = ps.executeQuery();
1:01217c2:         for (int i = 0; i < golden.length; i++)
1:01217c2:         {
1:01217c2:             assertTrue(
1:01217c2:                 "Not enough rows. Expected " + golden.length + 
1:01217c2:                 " but found " + i, 
1:01217c2:                 rs.next());
1:01217c2:             assertRow(assertString + ":Row:" + i, rs, intRow(golden[i]));
1:01217c2:         }
1:01217c2:         assertFalse("more rows than expected", rs.next());
1:01217c2:         rs.close();
1:01217c2:         ps.close();
1:01217c2:     }
1:01217c2:     
1:01217c2:     public void    assertRow(
1:01217c2:             String assertString, ResultSet rs, Object[] expectedRow)
1:01217c2:         throws Exception
1:01217c2:     {
1:01217c2:         int        count = expectedRow.length;
1:01217c2:         
1:01217c2:         for ( int i = 0; i < count; i++ )
1:01217c2:         {
1:01217c2:             int    columnNumber = i + 1;
1:01217c2:             Object expected = expectedRow[i];
1:01217c2:             Object actual = rs.getObject(columnNumber);
1:01217c2:             assertEquals(assertString + ":Column number ", expected, actual);
1:01217c2:         }
1:01217c2:     }
1:01217c2: 
1:01217c2:     /* ------------------- end helper methods  -------------------------- */ 
1:01217c2:     public GroupByExpressionTest(String name)
1:01217c2:     {
1:01217c2:         super(name);
1:01217c2:     }
1:01217c2:     
1:01217c2:     public static Test suite()
1:01217c2:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("GROUP BY expression tests");
1:01217c2:         suite.addTestSuite(GroupByExpressionTest.class);
1:01217c2:         
1:79db9c5:         TestSetup wrapper = new CleanDatabaseTestSetup(suite) { 
1:79db9c5:         	protected void decorateSQL(Statement s) throws SQLException
1:01217c2:             { 
2:01217c2:                 for (int i = 0; i < TABLES.length; i++) {
1:79db9c5:                     s.execute(TABLES[i]);
1:01217c2:                 }
2:01217c2:                 for (int i = 0; i < FUNCTIONS.length; i++) {
1:79db9c5:                     s.execute(FUNCTIONS[i]);
1:01217c2:                 }
1:01217c2:                 
1:01217c2:                 s.execute("insert into test values (1, 10, 100, 1000)");
1:01217c2:                 s.execute("insert into test values (1, 11, 100, 1001)");
1:01217c2:                 s.execute("insert into test values (2, 10, 100, 1000)");
1:01217c2:                 s.execute("insert into test values (2, 11, 101, 1001)");
1:01217c2:                 s.execute("insert into test values (2, 11, 101, 1000)");
1:01217c2:                 
1:01217c2:                 s.execute("insert into coal values ('1', '2')");
1:01217c2:                 s.execute("insert into coal values (null, '2')");
1:01217c2:                 s.execute("insert into coal values ('1', null)");
1:01217c2:                 
1:01217c2:                 s.execute(
1:01217c2:                     "insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     "'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     "200.0e0, 200.0e0, " + 
1:01217c2:                     " date('1992-01-01'), time('12:30:30'), " + 
1:01217c2:                     " timestamp('1992-01-01 12:30:30'), " +
1:01217c2:                     "X'12af', x'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute(
1:01217c2:                     "insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, "  +
1:01217c2:                     " date('1992-01-02'), time('12:30:31'), " + 
1:01217c2:                     "timestamp('1992-01-02 12:30:31'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:01217c2:                 s.execute(
1:01217c2:                     "insert into alltypes values (1, 100, 1000000, " +
1:01217c2:                     "'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +  
1:01217c2:                     " date('1992-01-03'), time('12:30:32'), " + 
1:01217c2:                     " timestamp('1992-01-03 12:30:32'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:01217c2:                 s.execute(
1:01217c2:                     "insert into alltypes values (0, 200, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-01-04'), time('12:30:33'), " + 
1:01217c2:                     " timestamp('1992-01-04 12:30:33'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 222.22)");
1:01217c2:                 s.execute(
1:01217c2:                     "insert into alltypes values (0, 100, 2000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0,  " +
1:01217c2:                     " date('1992-01-05'), time('12:30:34'), " + 
1:01217c2:                     " timestamp('1992-01-05 12:30:34'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 222.22)");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'goodbye', 'this is duplicated', 'also duplicated', "  +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-02-01'), time('12:30:35'), " + 
1:01217c2:                     " timestamp('1992-02-01 12:30:35'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'noone is here', 'jimmie noone was here', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-02-02'), time('12:30:36'), " + 
1:01217c2:                     " timestamp('1992-02-02 12:30:36'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-02-03'), time('12:30:37'), " + 
1:01217c2:                     " timestamp('1992-02-03 12:30:37'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 100.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-02-04'), time('12:30:38'), " + 
1:01217c2:                     " timestamp('1992-02-04 12:30:38'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 100.0e0, " +
1:01217c2:                     " date('1992-02-05'), time('12:30:39'), " + 
1:01217c2:                     " timestamp('1992-02-05 12:30:39'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-02-06'), time('12:30:40'), " + 
1:01217c2:                     " timestamp('1992-02-06 12:30:40'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-03-01'), time('12:55:55'), " + 
1:01217c2:                     "timestamp('1992-03-01 12:30:30'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-03-02'), time('12:30:30'), " + 
1:01217c2:                     "timestamp('1992-03-02 12:55:55'), " +
1:01217c2:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-03-03'), time('12:30:41'), " + 
1:01217c2:                     " timestamp('1992-03-03 12:30:41'), " +
1:01217c2:                     " X'ffff', X'0000111100001111', X'1234', 111.11) ");
1:01217c2:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:01217c2:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:01217c2:                     " 200.0e0, 200.0e0, " +
1:01217c2:                     " date('1992-03-04'), time('12:30:42'), " + 
1:01217c2:                     " timestamp('1992-03-04 12:30:42'), " +
1:01217c2:                     " X'12af', X'1111111111111111', X'1234', 111.11) " );
1:1d4b49f: 
1:1d4b49f:                 s.execute("insert into t1 values ('1928-09-21'), ('1903-12-08')");
1:1d4b49f:                 s.execute("insert into t2 values '123 ', 'abc ', '123', 'abc'") ;
1:1d4b49f:                 s.execute("insert into t3 values (1,1), (2,2), (2,2), (3,3), (null, null), (5,100)");
1:1d4b49f: 
1:01217c2:               }
1:01217c2:             }; 
1:01217c2:         return wrapper;
1:01217c2:     }
1:01217c2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:                         {"1 ", 2}, 
1:                         {"2 ", 3}});
1:                 new Object[][] {{"1", 2}, {"2", 1}});
1:                         {"duplicate noone is here", 1},
1:                         {"duplicate this is duplicated", 13},
1:                         {"goodbye   this is duplicated", 1}});
/////////////////////////////////////////////////////////////////////////
1:                         {"dupl", 14},
1:                         {"good", 1}});
/////////////////////////////////////////////////////////////////////////
1:                 new Object[][] { { 5 }, 
1:                 new Object[][] { { 1 },
1:                                  { 2 },
1:                                  { 3 },
1:                                  { 5 },
1:                 new Object[][] { { 1 }, 
/////////////////////////////////////////////////////////////////////////
1:             arr[i] = expected[i];
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("GROUP BY expression tests");
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:97e996c
/////////////////////////////////////////////////////////////////////////
1:      * DERBY-4202 Aggregates not allowed in group by
1:      * @throws Exception
1:      */
1:     public void testDerby4402AggregateInGroupBy() throws Exception
1:     {
1:     	assertCompileError(
1:                 "42Y26", "select c1 from test group by sum(c3)");
1:     	assertCompileError(
1:                 "42Y26", "select c1 from test group by (c1+sum(c3))");
1:     }
1:     
1:     /**
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:f2220fd
/////////////////////////////////////////////////////////////////////////
1:                 "42Y36", "select c1+c2, sum(c3) from test group by c1");
1:                 "42Y36", "select c1,c2, sum(c3) from test group by c1+c2,c1");
1:                 "42Y36", "select c1+c2, sum(c3) from test group by 1");
1:                 "42Y36", "select c1 as c2, sum(c3) from test group by c2");
1:                 "42Y36", "select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)");
/////////////////////////////////////////////////////////////////////////
1:                 "42Y36", "select c1+1, count(*) from test group by c1+2");
1:                 "42Y36", "select (cast (c as char(2))), count(*) " +
1:                 "42Y36", 
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
1:                 "42Y36",
commit:31d80c0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * queries which combine compound expressions and simple column refs.
1:      */
1:     public void testDerby3094Expressions() throws Exception
1:     {
1:         verifyQueryResults(
1:                 "Q1",
1:                 "select c1+c2, sum(c3) from test group by c1+c2, c1",
1:                 new int[][] {
1:                         {11, 100}, 
1:                         {12, 100},  // c1=1, c2=11
1:                         {12, 100},  // c1=2, c2=10
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q2",
1:                 "select c1+c2, sum(c3) from test group by c1, c1+c2",
1:                 new int[][] {
1:                         {11, 100}, 
1:                         {12, 100},  // c1=1, c2=11
1:                         {12, 100},  // c1=2, c2=10
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q3",
1:                 "select c1, c1+c2 from test group by c1, c1+c2",
1:                 new int[][] {
1:                         {1, 11}, 
1:                         {1, 12},
1:                         {2, 12},
1:                         {2, 13}});
1:         verifyQueryResults(
1:                 "Q4",
1:                 "select c1+c2, sum(c3) from test group by c1+c2",
1:                 new int[][] {
1:                         {11, 100}, 
1:                         {12, 200},
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q5",
1:                 "select c1,c2,c1+c2,sum(c3) from test group by c1,c2,c1+c2",
1:                 new int[][] {
1:                         {1, 10, 11, 100},
1:                         {1, 11, 12, 100},
1:                         {2, 10, 12, 100},
1:                         {2, 11, 13, 202}});
1:         verifyQueryResults(
1:                 "Q6",
1:                 "select c1,c2,sum(c3) from test group by c2, c1",
1:                 new int[][] {
1:                         {1, 10, 100},
1:                         {2, 10, 100},
1:                         {1, 11, 100},
1:                         {2, 11, 202}});
1:         verifyQueryResults(
1:                 "Q7",
1:                 "select c1 as c2, sum(c3) from test group by c1,c2",
1:                 new int[][] {
1:                         {1, 100},
1:                         {1, 100},
1:                         {2, 100},
1:                         {2, 202}});
1:         verifyQueryResults(
1:                 "Q8",
1:                 "select c1 as c2, sum(c3) from test group by c1",
1:                 new int[][] {
1:                         {1, 200},
1:                         {2, 302}});
1:         verifyQueryResults(
1:                 "Q9",
1:             "select c1+c2, sum(c3) from test group by c1+c2 having c1+c2 > 11",
1:                 new int[][] {
1:                         {12, 200},
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q10",
1:             "select c1+c2, sum(c3) from test " +
1:                      "group by c1, c1+c2 having c1+c2 > 11",
1:                 new int[][] {
1:                         {12, 100},
1:                         {12, 100},
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q11",
1:                 "select c1*((c1+c2)/2), count(*) from test " +
1:                 " group by (c1+c2),  c1*((c1+c2)/2)",
1:                 new int[][] {
1:                         {5, 1},
1:                         {6, 1},
1:                         {12, 1},
1:                         {12, 2}});
1:         verifyQueryResults(
1:                 "Q12",
1:                 "select c1, c1+c2, (c1+c2)+c3, count(*) from test " +
1:                 " group by c1, c1+c2, (c1+c2)+c3",
1:                 new int[][] {
1:                         {1, 11, 111, 1},
1:                         {1, 12, 112, 1},
1:                         {2, 12, 112, 1},
1:                         {2, 13, 114, 2}});
1:         verifyQueryResults(
1:                 "Q13",
1:                 "select (c1+c2)+c3, count(*) from test " +
1:                 " group by c3, c1+c2",
1:                 new int[][] {
1:                         {111, 1},
1:                         {112, 2},
1:                         {114, 2}});
1:         assertCompileError(
0:                 "42Y30", "select c1+c2, sum(c3) from test group by c1");
1:         assertCompileError(
0:                 "42Y30", "select c1,c2, sum(c3) from test group by c1+c2,c1");
1:         assertCompileError(
0:                 "42Y30", "select c1+c2, sum(c3) from test group by 1");
1:         assertCompileError(
1:             "42X04", "select c1+c2 as expr, sum(c3) from test group by expr");
1:         assertCompileError(
1:             "42X04", "select c1 as c1a, c2, sum(c3) from test group by c1a,c2");
1:         assertCompileError(
0:                 "42Y30", "select c1 as c2, sum(c3) from test group by c2");
1:         assertCompileError(
0:                 "42Y30", "select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)");
1:     }
commit:1d4b49f
/////////////////////////////////////////////////////////////////////////
0: 	private static String[][] TABLES = { 
/////////////////////////////////////////////////////////////////////////
0:             " lbv long varchar for bit data, dc decimal(5,2))"},
0:         {"t1", "create table t1 (c1 varchar(30))"},
0:         {"t2", "create table t2 (c1 varchar(10))"},
0:         {"t3", "create table t3 (c1 int, c2 int)"}
1:     };
1: 
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-2008 
1:         // substr (2-args)
1:         verifyQueryResults(
1:                 "substr-Q1",
1:                 "select substr(c1, 3) from t1 group by substr(c1, 3)",
1:                 new String[][] { {"03-12-08"},
1:                                  {"28-09-21"} });
1:         // substr (3-args)
1:         verifyQueryResults(
1:                 "substr-Q2",
1:                 "select substr(c1, 3, 4) from t1 group by substr(c1, 3, 4)",
1:                 new String[][] { {"03-1"},
1:                                  {"28-0"} });
1: 
1:         // ltrim
1:         verifyQueryResults(
1:                 "ltrim",
1:                 "select ltrim(c1) from t2 group by ltrim(c1)",
1:                 new String[][] { {"123 "},
1:                                  {"abc "} });
1: 
1:         // rtrim
1:         verifyQueryResults(
1:                 "rtrim",
1:                 "select rtrim(c1) from t2 group by rtrim(c1)",
1:                 new String[][] { {"123"},
1:                                  {"abc"} });
1: 
1:         // locate (2-args)
1:         verifyQueryResults(
1:                 "locate-Q1",
1:                 "select locate(c1, 'abc') from t2 group by locate(c1, 'abc')",
1:                 new int[][] { { 0 }, 
1:                               { 1 } });
1: 
1:         // locate (3-args)
1:         verifyQueryResults(
1:                 "locate-Q2",
1:                 "select locate(c1, 'abc', 1) from t2 group by locate(c1, 'abc',1)",
1:                 new int[][] { { 0 }, 
1:                               { 1 } });
1:         
1:         // cast with NULL
1:         verifyQueryResults(
1:                 "cast-Q2",
1:                 "select (cast (NULL as INTEGER)) from t2 group by (cast (NULL as INTEGER))",
1:                 new Object[][] { { null } } );
1: 
1:         // DERBY-2014
1:         // nullif
1:         verifyQueryResults(
1:                 "nullif-Q1",
1:                 "select nullif(c1,c1) from t3 group by nullif(c1,c1)",
1:                 new Object[][] { { null } } );
1: 
1:         verifyQueryResults(
1:                 "nullif-Q2",
1:                 "select nullif(c1,c2) from t3 group by nullif(c1,c2)",
0:                 new Object[][] { { new Integer(5) }, 
1:                                  { null } });
1: 
1:         verifyQueryResults(
1:                 "nullif-Q3",
1:                 "select nullif(c1,10) from t3 group by nullif(c1,10)",
0:                 new Object[][] { { new Integer(1) },
0:                                  { new Integer(2) },
0:                                  { new Integer(3) },
0:                                  { new Integer(5) },
1:                                  { null } });
1: 
1:         verifyQueryResults(
1:                 "nullif-Q4",
1:                 "select nullif(1,c1) from t3 group by nullif(1,c1)",
0:                 new Object[][] { { new Integer(1) }, 
1:                                  { null } });
/////////////////////////////////////////////////////////////////////////
1: 
1:         // DERBY-2008
1:         // invalid grouping expression 
1:         assertCompileError(
0:                 "42Y30",
1:                 "select substr(c1, 3, 4) from t1 group by substr(c1, 3)");
1:         assertCompileError(
0:                 "42Y30",
1:                 "select substr(c1, 3) from t1 group by substr(c1, 3, 4)");
1:         assertCompileError(
0:                 "42Y30",
1:                 "select locate(c1, 'abc') from t2 group by locate(c1, 'abc',3)");
1:         assertCompileError(
0:                 "42Y30",
1:                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc')");
1:         assertCompileError(
0:                 "42Y30",
1:                 "select locate(c1, 'abc',2) from t2 group by locate(c1, 'abc',3)");
1: 
1:         // DERBY-2014
1:         // invalid grouping expression
1:         assertCompileError(
0:                 "42Y30",
1:                 "select nullif(c1,c2) from t3 group by nullif(c2,c1)");
1:         assertCompileError(
0:                 "42Y30",
1:                 "select nullif(c1,100) from t3 group by nullif(c1,200)");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 s.execute("insert into t1 values ('1928-09-21'), ('1903-12-08')");
1:                 s.execute("insert into t2 values '123 ', 'abc ', '123', 'abc'") ;
1:                 s.execute("insert into t3 values (1,1), (2,2), (2,2), (3,3), (null, null), (5,100)");
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:96e7da9
/////////////////////////////////////////////////////////////////////////
1:         
1:         assertCompileError(
1:                 "42Y30", "select count(*) from test group by r()");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9871768
/////////////////////////////////////////////////////////////////////////
1:         // Conditional Derby-2230.
1:         verifyQueryResults(
1:                 "cond",
1:                 "select case when 1 = 1 then 'z' else substr('abc',1,1) end from test",
1:                 new String[][] {{"z"}});
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c7f3642
/////////////////////////////////////////////////////////////////////////
commit:79db9c5
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 	private static String[] TABLES = { 
1:         "create table test (c1 int, c2 int, c3 int, c4 int)",
1:         "create table coal (vc1 varchar(2), vc2 varchar(2))",
1:          
1:             " lbv long varchar for bit data, dc decimal(5,2))",
1:         "create table t1 (c1 varchar(30))",
1:         "create table t2 (c1 varchar(10))",
1:         "create table t3 (c1 int, c2 int)"
1:     private static String[] FUNCTIONS = {
1:         "create function r() returns double external name " +
1:             "'java.lang.Math.random' language java parameter style java"};
/////////////////////////////////////////////////////////////////////////
1:         TestSetup wrapper = new CleanDatabaseTestSetup(suite) { 
1:         	protected void decorateSQL(Statement s) throws SQLException
1:                     s.execute(TABLES[i]);
1:                     s.execute(FUNCTIONS[i]);
/////////////////////////////////////////////////////////////////////////
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("GROUP BY expression tests");
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: 
1: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: 
1: public class GroupByExpressionTest extends BaseJDBCTestCase
1: {
1: 
0:     private static String[][] TABLES = { 
0:         {"test", "create table test (c1 int, c2 int, c3 int, c4 int)"},
0:         {"coal", "create table coal (vc1 varchar(2), vc2 varchar(2))"},
0:         {"alltypes", 
1:             "create table alltypes (i int, s smallint, l bigint, " +
1:             "c char(10), v varchar(50), lvc long varchar, " +
1:             " d double precision, r real, " + 
1:             " dt date, t time, ts timestamp, " +
1:             " b char(2) for bit data, bv varchar(8) for bit data, " +
0:             " lbv long varchar for bit data, dc decimal(5,2))"}};
0:     private static String[][] FUNCTIONS = {
0:         {"r", "create function r() returns double external name " +
0:             "'java.lang.Math.random' language java parameter style java"}};
1:     
1:     /** 
1:      * Basic test case. Checks functionality with simple arithmetic expressions
1:      */
1:     public void testSimpleExpressions() throws Exception
1:     {
1:         verifyQueryResults(
1:                 "Q1",
1:                 "select c1,c2,sum(c3) from test group by c2,c1",
1:                 new int[][] {
1:                         {1,10,100},
1:                         {2,10,100},
1:                         {1,11,100},
1:                         {2,11,202}});
1: 
1:         verifyQueryResults(
1:                 "Q2",
1:                 "select c1+c2, sum(c3) from test group by c1,c2",
1:                 new int[][] {
1:                         {11, 100},
1:                         {12, 100}, 
1:                         {12, 100}, 
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q3",
1:                 "select c1+c2, sum(c3) from test group by c1+c2",
1:                 new int[][] {
1:                         {11, 100}, 
1:                         {12, 200}, 
1:                         {13, 202}});
1:         verifyQueryResults(
1:                 "Q4",
1:                 "select (c1+c2)+1, sum(c3) from test group by c1+c2",
1:                 new int[][] {
1:                         {12, 100}, 
1:                         {13, 200}, 
1:                         {14, 202}});
1:         verifyQueryResults(
1:                 "Q5",
1:                 "select (c1+c2), sum(c3)+(c1+c2) from test group by c1+c2",
1:                 new int[][] {
1:                         {11,111},
1:                         {12,212},
1:                         {13,215}});
1:         verifyQueryResults(
1:                 "Q6",
1:                 "select c2-c1, c1+c2, count(*) from test group by c1+c2, c2-c1",
1:                 new int[][] {
1:                         {9,11,1},
1:                         {8,12,1},
1:                         {10,12,1},
1:                         {9,13,2}});
1:     }
1:     
1:     
1:     public void testSubSelect() throws Exception
1:     {
1:         /* query with a group by on a subselect */
1:         verifyQueryResults(
1:                 "Q1",
1:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a",
1:                 new int[][] {
1:                         {3,23}, {4,35}});
1:         
1:         verifyQueryResults(
1:                 "Q2",
1:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a+1",
1:                 new int[][] {
1:                         {3,23}, {4,35}});
1:         
1:         verifyQueryResults(
1:                 "Q3",
1:                 "select b/2,sum(a) from " +
1:                 "(select c1+1 a, max(c2) b from test group by c1+1) t " +
1:                 "group by b/2",
1:                 new int[][] {{5,5}});
1:     }
1:     
1: 
1:     public void testMiscExpressions() throws Exception
1:     {
1:         // cast
1:         verifyQueryResults(
1:                 "cast",
1:                 "select (cast (c1 as char(2))), count(*) from test " +
1:                 " group by (cast (c1 as char(2)))",
1:                 new Object[][] {
0:                         {"1 ", new Integer(2)}, 
0:                         {"2 ", new Integer(3)}});
1:         
1:         // coalesce
1:         verifyQueryResults(
1:                 "coalesce",
1:                 "select (coalesce(vc1,vc2)), count(*) from coal " +
1:                 " group by (coalesce(vc1,vc2))",
0:                 new Object[][] {{"1", new Integer(2)}, {"2", new Integer(1)}});
1:         // concat
1:         verifyQueryResults(
1:                 "concat",
1:                 "select c||v, count(*) from alltypes group by c||v",
1:                 new Object[][] {
0:                         {"duplicate noone is here", new Integer(1)},
0:                         {"duplicate this is duplicated", new Integer(13)},
0:                         {"goodbye   this is duplicated", new Integer(1)}});
1:         // conditional.
1:         verifyQueryResults(
1:                 "cond",
1:                 "select (case when c1 = 1 then 2 else 1 end), sum(c2) from test " +
1:                 " group by (case when c1 = 1 then 2 else 1 end)",
1:                 new int[][] {{1,32}, {2, 21}});
1:         
1:         // length
1:         verifyQueryResults(
1:                 "length",
1:                 "select length(v), count(*) from alltypes group by length(v)",
1:                 new int[][] {{13,1},{18,14}});
1:         
1:         // current time. ignore the value of current time. 
1:         // just make sure we can group by it and get the right results for
1:         // the aggregate.
1:         verifyQueryResults(
1:                 "current_time",
1:                 "select co from " +
1:                 "(select current_time ct, count(*) co from test t1, test t2, test t3 group by current_time) t",
1:                 new int[][] {{125}});
1:         // concat + substr
1:         verifyQueryResults(
1:                 "concat+substr",
1:                 "select substr(c||v, 1, 4), count(*) from alltypes group by substr(c||v, 1, 4)",
1:                 new Object[][] {
0:                         {"dupl", new Integer(14)},
0:                         {"good", new Integer(1)}});
1: 
1:     }
1:     
1:     public void testExtractOperator() throws Exception
1:     {
1:         verifyQueryResults(
1:                 "year",
1:                 "select year(dt), count(*) from alltypes group by year(dt)",
1:                 new int[][] {{1992, 15}});
1:         verifyQueryResults(
1:                 "month",
1:                 "select month(dt), count(*) from alltypes group by month(dt)",
1:                 new int[][] {{1,5},{2,6},{3,4}});
1:         verifyQueryResults(
1:                 "day",
1:                 "select day(dt), count(*) from alltypes group by day(dt)",
1:                 new int[][] {{1,3},{2,3},{3,3},{4,3},{5,2},{6,1}});
1:         verifyQueryResults(
1:                 "hour",
1:                 "select hour(t), count(*) from alltypes group by hour(t)",
1:                 new int[][] {{12, 15}});
1:         verifyQueryResults(
1:                 "hour2",
1:                 "select hour(ts), count(*) from alltypes group by hour(ts)",
1:                 new int[][] {{12,15}});
1:         verifyQueryResults(
1:                 "minute",
1:                 "select minute(ts), count(*) from alltypes group by minute(ts)",
1:                 new int[][] {{30,14},{55,1}});
1:         verifyQueryResults(
1:                 "second",
1:                 "select second(t), count(*) from alltypes group by second(t)",
1:                 new int[][]{
1:                         {30,2},{31,1},{32,1},{33,1},{34,1},{35,1},
1:                         {36,1},{37,1},{38,1},{39,1},{40,1},{41,1},
1:                         {42,1},{55,1}});
1:     }
1:     
1:     /**
1:      * Check that duplicate columns are now allowed in group by's. Earlier
1:      * (pre 883), derby would flag an error.
1:      *
1:      */
1:     public void testDuplicateColumns() throws Exception
1:     {
1:         verifyQueryResults(
1:                 "Q1",
1:                 "select c1, sum(c2) from test group by c1,c1",
1:                 new int[][]{ {1,21}, {2,32}});
1:         
1:         verifyQueryResults(
1:                 "Q2",
1:                 "select c1, c1, sum(c2) from test group by c1,c1",
1:                 new int[][]{ {1,1,21}, {2,2,32}});
1:     }
1:     /**
1:      * Negative tests. These queries should not compile at all.
1:      */
1:     public void testNegative()
1:     {
1:         // disallow java function 
1:         assertCompileError(
1:                 "42Y30", "select r(), count(*) from test group by r()");
1: 
1:         // invalid grouping expression.
1:         assertCompileError(
0:                 "42Y30", "select c1+1, count(*) from test group by c1+2");
1:         
1:         // again invalid grouping expression because cast type is different.
1:         assertCompileError(
0:                 "42Y30", "select (cast (c as char(2))), count(*) " +
1:                 " from alltypes group by (cast (c as char(3)))");
1: 
1:         // same column name, same table but different tablenumber in the query
1:         assertCompileError(
0:                 "42Y30", 
1:                 "select t1.c1, count(*) from test t1, test t2 " + 
1:                 " group by t2.c1");
1:         // ternary operator, not equivalent test.
1:         assertCompileError(
0:                 "42Y30",
1:                 "select substr(c, 3, 4) from alltypes group by substr(v, 3, 4)");
1:         // aggregates in group by list.
1:         assertCompileError(
1:                 "42Y26",
1:                 "select 1, max(c1) from test group by max(c1)");
1:     }
1:     /* --------------------- begin helper methods -------------------- */
1:     
1:     private Object[] intRow(int[] expected)
1:     {
1:         Object[] arr = new Object[expected.length];
1:         for (int i = 0; i < expected.length; i++)
1:         {
0:             arr[i] = new Integer(expected[i]);
1:         }
1:         return arr;
1:     }
1:     
1:     private void verifyQueryResults(
1:             String assertString, String query, Object[][] golden)
1:         throws Exception
1:     {
1: 
1:         PreparedStatement ps = prepareStatement(query);
1:         ResultSet rs = ps.executeQuery();
1:         for (int i = 0; i < golden.length; i++)
1:         {
1:             assertTrue(
1:                     "Not enough rows. Expected " + golden.length + 
1:                     " but found " + i, 
1:                     rs.next());
1: 
1:             assertRow(assertString + ":Row:" + i, rs, golden[i]);
1:         }
1:         rs.close();
1:         ps.close();
1:     }
1:     
1:     private void verifyQueryResults(
1:             String assertString, String query, int[][] golden) 
1:         throws Exception
1:     {
1:         PreparedStatement ps = prepareStatement(query);
1:         ResultSet rs = ps.executeQuery();
1:         for (int i = 0; i < golden.length; i++)
1:         {
1:             assertTrue(
1:                 "Not enough rows. Expected " + golden.length + 
1:                 " but found " + i, 
1:                 rs.next());
1:             assertRow(assertString + ":Row:" + i, rs, intRow(golden[i]));
1:         }
1:         assertFalse("more rows than expected", rs.next());
1:         rs.close();
1:         ps.close();
1:     }
1:     
1:     public void    assertRow(
1:             String assertString, ResultSet rs, Object[] expectedRow)
1:         throws Exception
1:     {
1:         int        count = expectedRow.length;
1:         
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             int    columnNumber = i + 1;
1:             Object expected = expectedRow[i];
1:             Object actual = rs.getObject(columnNumber);
1:             assertEquals(assertString + ":Column number ", expected, actual);
1:         }
1:     }
1: 
1:     /* ------------------- end helper methods  -------------------------- */ 
1:     public GroupByExpressionTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite();
1:         suite.addTestSuite(GroupByExpressionTest.class);
1:         
0:         TestSetup wrapper = new BaseJDBCTestSetup(suite) { 
0:             public void setUp() throws Exception
1:             { 
0:                 Connection c = getConnection();
0:                 c.setAutoCommit(false);
0:                 Statement s = c.createStatement();
1:                 for (int i = 0; i < TABLES.length; i++) {
0:                     s.execute(TABLES[i][1]);
1:                 }
1:                 for (int i = 0; i < FUNCTIONS.length; i++) {
0:                     s.execute(FUNCTIONS[i][1]);
1:                 }
1:                 
1:                 s.execute("insert into test values (1, 10, 100, 1000)");
1:                 s.execute("insert into test values (1, 11, 100, 1001)");
1:                 s.execute("insert into test values (2, 10, 100, 1000)");
1:                 s.execute("insert into test values (2, 11, 101, 1001)");
1:                 s.execute("insert into test values (2, 11, 101, 1000)");
1:                 
1:                 s.execute("insert into coal values ('1', '2')");
1:                 s.execute("insert into coal values (null, '2')");
1:                 s.execute("insert into coal values ('1', null)");
1:                 
1:                 s.execute(
1:                     "insert into alltypes values (0, 100, 1000000, " +
1:                     "'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     "200.0e0, 200.0e0, " + 
1:                     " date('1992-01-01'), time('12:30:30'), " + 
1:                     " timestamp('1992-01-01 12:30:30'), " +
1:                     "X'12af', x'0000111100001111', X'1234', 111.11) ");
1:                 s.execute(
1:                     "insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, "  +
1:                     " date('1992-01-02'), time('12:30:31'), " + 
1:                     "timestamp('1992-01-02 12:30:31'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:                 s.execute(
1:                     "insert into alltypes values (1, 100, 1000000, " +
1:                     "'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +  
1:                     " date('1992-01-03'), time('12:30:32'), " + 
1:                     " timestamp('1992-01-03 12:30:32'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:                 s.execute(
1:                     "insert into alltypes values (0, 200, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-01-04'), time('12:30:33'), " + 
1:                     " timestamp('1992-01-04 12:30:33'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 222.22)");
1:                 s.execute(
1:                     "insert into alltypes values (0, 100, 2000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0,  " +
1:                     " date('1992-01-05'), time('12:30:34'), " + 
1:                     " timestamp('1992-01-05 12:30:34'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 222.22)");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'goodbye', 'this is duplicated', 'also duplicated', "  +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-02-01'), time('12:30:35'), " + 
1:                     " timestamp('1992-02-01 12:30:35'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'noone is here', 'jimmie noone was here', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-02-02'), time('12:30:36'), " + 
1:                     " timestamp('1992-02-02 12:30:36'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-02-03'), time('12:30:37'), " + 
1:                     " timestamp('1992-02-03 12:30:37'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11)");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 100.0e0, 200.0e0, " +
1:                     " date('1992-02-04'), time('12:30:38'), " + 
1:                     " timestamp('1992-02-04 12:30:38'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 100.0e0, " +
1:                     " date('1992-02-05'), time('12:30:39'), " + 
1:                     " timestamp('1992-02-05 12:30:39'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-02-06'), time('12:30:40'), " + 
1:                     " timestamp('1992-02-06 12:30:40'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-03-01'), time('12:55:55'), " + 
1:                     "timestamp('1992-03-01 12:30:30'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-03-02'), time('12:30:30'), " + 
1:                     "timestamp('1992-03-02 12:55:55'), " +
1:                     " X'12af', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-03-03'), time('12:30:41'), " + 
1:                     " timestamp('1992-03-03 12:30:41'), " +
1:                     " X'ffff', X'0000111100001111', X'1234', 111.11) ");
1:                 s.execute("insert into alltypes values (0, 100, 1000000, " +
1:                     " 'duplicate', 'this is duplicated', 'also duplicated', " +
1:                     " 200.0e0, 200.0e0, " +
1:                     " date('1992-03-04'), time('12:30:42'), " + 
1:                     " timestamp('1992-03-04 12:30:42'), " +
1:                     " X'12af', X'1111111111111111', X'1234', 111.11) " );
1:                 
0:                 s.close();
0:                 c.commit();
0:                 c.close();
1:               }
0:             protected void tearDown() throws Exception 
1:             { 
0:                 Connection c = getConnection();
0:                 c.setAutoCommit(false);
0:                 Statement s = c.createStatement();
1:                 
1:                 for (int i = 0; i < TABLES.length; i++) {
0:                     s.execute("drop table " + TABLES[i][0]);
1:                 }
1:                 for (int i = 0; i < FUNCTIONS.length; i++) {
0:                     s.execute("drop function " + FUNCTIONS[i][0]);
1:                 }
1:                 
0:                 c.commit();
0:                 super.tearDown();
1:             }
1:             }; 
1:         return wrapper;
1:     }
1: }
author:Army
-------------------------------------------------------------------------------
commit:d5ef906
/////////////////////////////////////////////////////////////////////////
1:                 "Q1_2",
1:                 "select c1,c2,sum(c3) from test group by c2,c1 having c1=1 and c2=10 and sum(c3) > 40",
1:                 new int[][] {
1:                         {1,10,100}});
0: 
1:         verifyQueryResults(
/////////////////////////////////////////////////////////////////////////
0: 
1:         // having clause with expression. same as last query with an additional restriction.
1:         verifyQueryResults(
1:                 "Q6b",
1:                 "select c2-c1, c1+c2, count(*) from test group by c1+c2, c2-c1 having (c2-c1)+count(*)>10",
1:                 new int[][] {
1:                         {10,12,1},
1:                         {9,13,2}});
/////////////////////////////////////////////////////////////////////////
0: 
1:         verifyQueryResults(
1:                 "Q2",
1:                 "select a+1, sum(b) from (select c1+1  a , c2+1 b from test) t group by a+1 having a+1 > 3",
1:                 new int[][] {{4,35}});
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         
1:        // rtrim in having clause as well.
1:         verifyQueryResults(
1:                 "rtrim_having",
1:                 "select rtrim(c1) from t2 group by rtrim(c1) having rtrim(c1) like 'ab%'",
1:                 new String[][] { {"abc"} });
0:         
============================================================================