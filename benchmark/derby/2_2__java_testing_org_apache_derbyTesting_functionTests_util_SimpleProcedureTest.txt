1:ecd2625: /*
2:ecd2625: 
1:ecd2625: Derby - Class org.apache.derbyTesting.functionTests.util.SimpleProcedureTest
1:ecd2625: 
1:15651f5: Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5: contributor license agreements.  See the NOTICE file distributed with
1:15651f5: this work for additional information regarding copyright ownership.
1:15651f5: The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5: (the "License"); you may not use this file except in compliance with
1:15651f5: the License.  You may obtain a copy of the License at
1:ecd2625: 
1:ecd2625:    http://www.apache.org/licenses/LICENSE-2.0
1:ecd2625: 
1:ecd2625: Unless required by applicable law or agreed to in writing, software
1:ecd2625: distributed under the License is distributed on an "AS IS" BASIS,
1:ecd2625: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ecd2625: See the License for the specific language governing permissions and
1:ecd2625: limitations under the License.
1:ecd2625: 
1:ecd2625: */
1:ecd2625: package org.apache.derbyTesting.functionTests.util;
1:ecd2625: 
1:ecd2625: import java.sql.Date;
1:ecd2625: import java.sql.Time;
1:ecd2625: import java.sql.Timestamp;
1:ecd2625: 
1:ecd2625: /**
1:ecd2625:  * Procedures to be used with J2ME/CDC/FP and JSR169
1:ecd2625:  */
1:ecd2625: 
1:ecd2625: public class SimpleProcedureTest {
1:ecd2625: 
1:ecd2625: 	/*
1:ecd2625: 	** Procedures for parameter mapping testing.
1:ecd2625: 	*/
1:ecd2625: 
1:ecd2625: 	public static void pmap(short in, short[] inout, short[] out) {
1:ecd2625: 
1:ecd2625: 		inout[0] += 6;
1:ecd2625: 		out[0] = 77;
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(int in, int[] inout, int[] out) {
1:ecd2625: 		inout[0] += 9;
1:ecd2625: 		out[0] = 88;
1:ecd2625: 
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(long in, long[] inout, long[] out) {
1:ecd2625: 		inout[0] += 8;
1:ecd2625: 		out[0] = 99;
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(float in, float[] inout, float[] out) {
1:ecd2625: 		inout[0] += 9.9f;
1:ecd2625: 		out[0] = 88.8f;
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(double in, double[] inout, double[] out) {
1:ecd2625: 		inout[0] += 3.9;
1:ecd2625: 		out[0] = 66.8;
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(byte[] in, byte[][] inout, byte[][] out) {
1:ecd2625: 
1:ecd2625: 		inout[0][2] = 0x56;
1:ecd2625: 		out[0] = new byte[4];
1:ecd2625: 		out[0][0] = (byte) 0x09;
1:ecd2625: 		out[0][1] = (byte) 0xfe;
1:ecd2625: 		out[0][2] = (byte) 0xed;
1:ecd2625: 		out[0][3] = (byte) 0x02;
1:ecd2625: 
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(Date in, Date[] inout, Date[] out) {
1:ecd2625: 
1:ecd2625: 		inout[0] = java.sql.Date.valueOf("2004-03-08");
1:ecd2625: 		out[0] = java.sql.Date.valueOf("2005-03-08");
1:ecd2625: 
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(Time in, Time[] inout, Time[] out) {
1:ecd2625: 		inout[0] = java.sql.Time.valueOf("19:44:42");
1:ecd2625: 		out[0] = java.sql.Time.valueOf("20:44:42");
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(Timestamp in, Timestamp[] inout, Timestamp[] out) {
1:ecd2625: 
1:ecd2625: 		inout[0] = java.sql.Timestamp.valueOf("2004-03-12 21:14:24.938222433");
1:ecd2625: 		out[0] = java.sql.Timestamp.valueOf("2004-04-12 04:25:26.462983731");
1:ecd2625: 	}
1:ecd2625: 	public static void pmap(String in, String[] inout, String[] out) {
1:ecd2625: 		inout[0] = inout[0].trim().concat("P2-PMAP");
1:ecd2625: 		out[0] = "P3-PMAP";
1:ecd2625: 	}
1:ecd2625: 	
1:ecd2625: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ecd2625
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.util.SimpleProcedureTest
1: 
0: Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.sql.Date;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: 
1: /**
1:  * Procedures to be used with J2ME/CDC/FP and JSR169
1:  */
1: 
1: public class SimpleProcedureTest {
1: 
1: 	/*
1: 	** Procedures for parameter mapping testing.
1: 	*/
1: 
1: 	public static void pmap(short in, short[] inout, short[] out) {
1: 
1: 		inout[0] += 6;
1: 		out[0] = 77;
1: 	}
1: 	public static void pmap(int in, int[] inout, int[] out) {
1: 		inout[0] += 9;
1: 		out[0] = 88;
1: 
1: 	}
1: 	public static void pmap(long in, long[] inout, long[] out) {
1: 		inout[0] += 8;
1: 		out[0] = 99;
1: 	}
1: 	public static void pmap(float in, float[] inout, float[] out) {
1: 		inout[0] += 9.9f;
1: 		out[0] = 88.8f;
1: 	}
1: 	public static void pmap(double in, double[] inout, double[] out) {
1: 		inout[0] += 3.9;
1: 		out[0] = 66.8;
1: 	}
1: 	public static void pmap(byte[] in, byte[][] inout, byte[][] out) {
1: 
1: 		inout[0][2] = 0x56;
1: 		out[0] = new byte[4];
1: 		out[0][0] = (byte) 0x09;
1: 		out[0][1] = (byte) 0xfe;
1: 		out[0][2] = (byte) 0xed;
1: 		out[0][3] = (byte) 0x02;
1: 
1: 	}
1: 	public static void pmap(Date in, Date[] inout, Date[] out) {
1: 
1: 		inout[0] = java.sql.Date.valueOf("2004-03-08");
1: 		out[0] = java.sql.Date.valueOf("2005-03-08");
1: 
1: 	}
1: 	public static void pmap(Time in, Time[] inout, Time[] out) {
1: 		inout[0] = java.sql.Time.valueOf("19:44:42");
1: 		out[0] = java.sql.Time.valueOf("20:44:42");
1: 	}
1: 	public static void pmap(Timestamp in, Timestamp[] inout, Timestamp[] out) {
1: 
1: 		inout[0] = java.sql.Timestamp.valueOf("2004-03-12 21:14:24.938222433");
1: 		out[0] = java.sql.Timestamp.valueOf("2004-04-12 04:25:26.462983731");
1: 	}
1: 	public static void pmap(String in, String[] inout, String[] out) {
1: 		inout[0] = inout[0].trim().concat("P2-PMAP");
1: 		out[0] = "P3-PMAP";
1: 	}
1: 	
1: }
============================================================================