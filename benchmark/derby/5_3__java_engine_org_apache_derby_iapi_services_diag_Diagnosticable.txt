1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.diag.Diagnosticable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.diag;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   The Diagnosticable class implements the Diagnostics protocol, and can
1:eac0369:   be used as the parent class for all other Diagnosticable objects.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface Diagnosticable
1:eac0369: {
1:eac0369: 	/*
1:eac0369: 	** Methods of Diagnosticable
1:eac0369: 	*/
1:eac0369:     public void init(Object obj);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Default implementation of diagnostic on the object.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a string with whatever diagnostic information
1:eac0369:      * you would like to provide about this associated object passed in
1:eac0369:      * the init() call.
1:eac0369:      * <p>
1:eac0369:      * This routine should be overriden by a real implementation of the
1:eac0369:      * diagnostic information you would like to provide.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A string with diagnostic information about the object.
1:eac0369:      *
1:3fd26f3:      * @exception StandardException  Standard Derby exception policy
1:eac0369:      **/
1:eac0369:     public String diag() throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Default implementation of detail diagnostic on the object.
1:eac0369:      * <p>
1:eac0369:      * This interface provides a way for an object to pass back pieces of
1:eac0369:      * information as requested by the caller.  The information is passed
1:eac0369:      * back and forth through the properties argument.  It is expected that
1:eac0369:      * the caller knows what kind of information to ask for, and correctly
1:eac0369:      * handles the situation when the diagnostic object can't provide the
1:eac0369:      * information.
1:eac0369:      * <p>
1:eac0369:      * As an example assume an object TABLE exists, and that we have created
1:eac0369:      * an object D_TABLE that knows how to return the number of pages in the
1:eac0369:      * TABLE object.  The code to get that information out would looks something
1:eac0369:      * like the following:
1:eac0369:      * <p>
1:eac0369:      * print_num_pages(Object table)
1:eac0369:      * {
1:eac0369:      *     Properties prop = new Properties();
1:eac0369:      *     prop.put(Page.DIAG_NUM_PAGES,        "");
1:eac0369:      *
1:eac0369:      *     DiagnosticUtil.findDiagnostic(table).diag_detail(prop);
1:eac0369:      *
1:eac0369:      *     System.out.println(
1:eac0369:      *        "number of pages = " + prop.getProperty(Page.DIAG_NUM_PAGES));
1:eac0369:      * }
1:eac0369:      * <p>
1:eac0369:      * This routine should be overriden if there is detail diagnostics to
1:eac0369:      * be provided by a real implementation.
1:eac0369:      * <p>
1:eac0369:      *
1:3fd26f3:      * @exception StandardException  Standard Derby exception policy
1:eac0369:      **/
1:eac0369:     public void diag_detail(Properties prop) throws StandardException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException  Standard Derby exception policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException  Standard Derby exception policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.diag.Diagnosticable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.diag
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.diag;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1:   The Diagnosticable class implements the Diagnostics protocol, and can
1:   be used as the parent class for all other Diagnosticable objects.
1: 
1: **/
1: 
1: public interface Diagnosticable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/*
1: 	** Methods of Diagnosticable
1: 	*/
1:     public void init(Object obj);
1: 
1:     /**
1:      * Default implementation of diagnostic on the object.
1:      * <p>
1:      * This routine returns a string with whatever diagnostic information
1:      * you would like to provide about this associated object passed in
1:      * the init() call.
1:      * <p>
1:      * This routine should be overriden by a real implementation of the
1:      * diagnostic information you would like to provide.
1:      * <p>
1:      *
1: 	 * @return A string with diagnostic information about the object.
1:      *
0:      * @exception StandardException  Standard cloudscape exception policy
1:      **/
1:     public String diag() throws StandardException;
1: 
1:     /**
1:      * Default implementation of detail diagnostic on the object.
1:      * <p>
1:      * This interface provides a way for an object to pass back pieces of
1:      * information as requested by the caller.  The information is passed
1:      * back and forth through the properties argument.  It is expected that
1:      * the caller knows what kind of information to ask for, and correctly
1:      * handles the situation when the diagnostic object can't provide the
1:      * information.
1:      * <p>
1:      * As an example assume an object TABLE exists, and that we have created
1:      * an object D_TABLE that knows how to return the number of pages in the
1:      * TABLE object.  The code to get that information out would looks something
1:      * like the following:
1:      * <p>
1:      * print_num_pages(Object table)
1:      * {
1:      *     Properties prop = new Properties();
1:      *     prop.put(Page.DIAG_NUM_PAGES,        "");
1:      *
1:      *     DiagnosticUtil.findDiagnostic(table).diag_detail(prop);
1:      *
1:      *     System.out.println(
1:      *        "number of pages = " + prop.getProperty(Page.DIAG_NUM_PAGES));
1:      * }
1:      * <p>
1:      * This routine should be overriden if there is detail diagnostics to
1:      * be provided by a real implementation.
1:      * <p>
1:      *
0:      * @exception StandardException  Standard cloudscape exception policy
1:      **/
1:     public void diag_detail(Properties prop) throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.diag
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.diag;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0:   The Diagnosticable class implements the Diagnostics protocol, and can
0:   be used as the parent class for all other Diagnosticable objects.
0: 
0: **/
0: 
0: public interface Diagnosticable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/*
0: 	** Methods of Diagnosticable
0: 	*/
0:     public void init(Object obj);
0: 
0:     /**
0:      * Default implementation of diagnostic on the object.
0:      * <p>
0:      * This routine returns a string with whatever diagnostic information
0:      * you would like to provide about this associated object passed in
0:      * the init() call.
0:      * <p>
0:      * This routine should be overriden by a real implementation of the
0:      * diagnostic information you would like to provide.
0:      * <p>
0:      *
0: 	 * @return A string with diagnostic information about the object.
0:      *
0:      * @exception StandardException  Standard cloudscape exception policy
0:      **/
0:     public String diag() throws StandardException;
0: 
0:     /**
0:      * Default implementation of detail diagnostic on the object.
0:      * <p>
0:      * This interface provides a way for an object to pass back pieces of
0:      * information as requested by the caller.  The information is passed
0:      * back and forth through the properties argument.  It is expected that
0:      * the caller knows what kind of information to ask for, and correctly
0:      * handles the situation when the diagnostic object can't provide the
0:      * information.
0:      * <p>
0:      * As an example assume an object TABLE exists, and that we have created
0:      * an object D_TABLE that knows how to return the number of pages in the
0:      * TABLE object.  The code to get that information out would looks something
0:      * like the following:
0:      * <p>
0:      * print_num_pages(Object table)
0:      * {
0:      *     Properties prop = new Properties();
0:      *     prop.put(Page.DIAG_NUM_PAGES,        "");
0:      *
0:      *     DiagnosticUtil.findDiagnostic(table).diag_detail(prop);
0:      *
0:      *     System.out.println(
0:      *        "number of pages = " + prop.getProperty(Page.DIAG_NUM_PAGES));
0:      * }
0:      * <p>
0:      * This routine should be overriden if there is detail diagnostics to
0:      * be provided by a real implementation.
0:      * <p>
0:      *
0:      * @exception StandardException  Standard cloudscape exception policy
0:      **/
0:     public void diag_detail(Properties prop) throws StandardException;
0: }
============================================================================