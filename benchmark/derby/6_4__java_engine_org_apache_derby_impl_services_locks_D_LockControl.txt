1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.locks.D_LockControl
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.locks;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.diag.Diagnosticable;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.List;
1:eac0369: import java.util.Iterator;
1:eac0369: 
2:eac0369: /**
1:eac0369: **/
1:eac0369: 
1:eac0369: public class D_LockControl implements Diagnosticable
1:eac0369: {
1:eac0369:     protected LockControl control;
1:eac0369: 
1:eac0369:     public D_LockControl()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Private/Protected methods of This class: */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Diagnosticable
1:eac0369: 	*/
1:eac0369:     public void init(Object obj)
1:eac0369:     {
1:eac0369:         control = (LockControl) obj;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public String diag()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369: 		StringBuffer sb = new StringBuffer(1024);
1:eac0369: 
1:eac0369: 		sb.append("LockControl:\n  granted list: ");
1:eac0369: 
1:eac0369:         int i = 0;
1:eac0369: 
1:eac0369: 		Object firstGrant = control.getFirstGrant();
1:eac0369: 		if (firstGrant != null) {
1:eac0369: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(firstGrant));
1:eac0369: 				i++;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		List granted = control.getGranted();
1:eac0369: 		
1:eac0369: 		if (granted != null) {
1:eac0369: 			for (Iterator dli = granted.iterator(); dli.hasNext(); )
1:eac0369: 			{
1:eac0369: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(dli.next()));
1:eac0369: 				i++;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369:         sb.append("\n  waiting list:");
1:eac0369: 
1:eac0369: 		List waiting = control.getWaiting();
1:eac0369: 
1:eac0369:         int num_waiting = 0;
1:eac0369: 
1:eac0369:         if (waiting != null)
1:eac0369:         {
1:eac0369: 			for (Iterator dli = waiting.iterator(); dli.hasNext(); )
1:eac0369:             {
1:eac0369:                 sb.append(
1:eac0369:                     "\n    w[" + num_waiting + "]:" + 
1:eac0369:                     DiagnosticUtil.toDiagString(dli.next()));
1:eac0369: 
1:eac0369:                 num_waiting++;
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (num_waiting == 0)
1:eac0369:             sb.append("    no waiting locks.");
1:eac0369:  
1:eac0369: 		return sb.toString();
1:eac0369:     }
1:eac0369: 	public void diag_detail(Properties prop) {}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Static routines that were in SinglePool
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/*
1:eac0369: 	** Debugging routines
1:eac0369: 	*/
1:eac0369: 
1:3c1f634: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1:3c1f634: 						  Object group, Lockable ref, Object qualifier,
1:3c1f634: 						  int timeout) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
1:eac0369:                 debugLockString(
1:3c1f634:                     compatibilitySpace, group, ref, qualifier, timeout));
1:eac0369: 		}
1:eac0369: 	}
1:3c1f634: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1:3c1f634: 						  Object group) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
1:3c1f634: 					debugLockString(compatibilitySpace, group));
1:eac0369: 		}
1:eac0369: 	}
1:3c1f634: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1:3c1f634: 						  Object group, Lockable ref) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
1:3c1f634: 					debugLockString(compatibilitySpace, group, ref));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:3c1f634: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1:3c1f634: 								  Object group) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			StringBuffer sb = new StringBuffer("");
1:eac0369: 
1:3c1f634: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
1:eac0369: 			debugAppendObject(sb, " Group=", group);
1:eac0369: 
1:eac0369: 			debugAddThreadInfo(sb);
1:eac0369: 
1:eac0369: 			return sb.toString();
1:eac0369: 
1:eac0369: 		} else {
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3c1f634: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1:3c1f634: 								  Object group, Lockable ref) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			StringBuffer sb = new StringBuffer("");
1:eac0369: 
1:eac0369: 			debugAppendObject(sb, " Lockable ", ref);
1:3c1f634: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
1:eac0369: 			debugAppendObject(sb, " Group=", group);
1:eac0369: 
1:eac0369: 			debugAddThreadInfo(sb);
1:eac0369: 
1:eac0369: 			return sb.toString();
1:eac0369: 
1:eac0369: 		} else {
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:3c1f634: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1:3c1f634: 								  Object group, Lockable ref,
1:3c1f634: 								  Object qualifier, int timeout) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			StringBuffer sb = new StringBuffer("");
1:eac0369: 
1:eac0369: 			debugAppendObject(sb, " Lockable ", ref);
1:eac0369: 			debugAppendObject(sb, " Qualifier=", qualifier);
1:3c1f634: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
1:eac0369: 			debugAppendObject(sb, " Group=", group);
1:eac0369: 
1:eac0369: 			if (timeout >= 0) {
1:eac0369: 				sb.append(" Timeout(ms)=");
1:eac0369: 				sb.append(timeout);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			debugAddThreadInfo(sb);
1:eac0369: 
1:eac0369: 
1:eac0369: 			return sb.toString();
1:eac0369: 
1:eac0369: 		} else {
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	static void debugAddThreadInfo(StringBuffer sb) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE_ADD_THREAD_INFO)) {
1:eac0369: 				debugAppendObject(sb, " Thread=", Thread.currentThread());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	static void debugAppendObject(StringBuffer sb, String desc, Object item) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			sb.append(desc);
1:eac0369: 
1:eac0369: 			if (item != null)
1:eac0369: 				sb.append(item.toString());
1:eac0369: 			else
1:eac0369: 				sb.append("<null>");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1: 						  Object group, Lockable ref, Object qualifier,
1: 						  int timeout) {
1:                     compatibilitySpace, group, ref, qualifier, timeout));
1: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1: 						  Object group) {
1: 					debugLockString(compatibilitySpace, group));
1: 	static void debugLock(String type, CompatibilitySpace compatibilitySpace,
1: 						  Object group, Lockable ref) {
1: 					debugLockString(compatibilitySpace, group, ref));
1: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1: 								  Object group) {
1: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
/////////////////////////////////////////////////////////////////////////
1: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1: 								  Object group, Lockable ref) {
1: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
/////////////////////////////////////////////////////////////////////////
1: 	static String debugLockString(CompatibilitySpace compatibilitySpace,
1: 								  Object group, Lockable ref,
1: 								  Object qualifier, int timeout) {
/////////////////////////////////////////////////////////////////////////
1: 			debugAppendObject(sb, " CompatibilitySpace=", compatibilitySpace);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.locks.D_LockControl
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import org.apache.derby.iapi.services.diag.Diagnosticable;
1: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: import java.util.Properties;
1: import java.util.List;
1: import java.util.Iterator;
1: 
1: /**
1: **/
1: 
1: public class D_LockControl implements Diagnosticable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     protected LockControl control;
1: 
1:     public D_LockControl()
1:     {
1:     }
1: 
1:     /* Private/Protected methods of This class: */
1: 
1: 	/*
1: 	** Methods of Diagnosticable
1: 	*/
1:     public void init(Object obj)
1:     {
1:         control = (LockControl) obj;
1:     }
1: 
1:     /**
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public String diag()
1:         throws StandardException
1:     {
1: 		StringBuffer sb = new StringBuffer(1024);
1: 
1: 		sb.append("LockControl:\n  granted list: ");
1: 
1:         int i = 0;
1: 
1: 		Object firstGrant = control.getFirstGrant();
1: 		if (firstGrant != null) {
1: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(firstGrant));
1: 				i++;
1: 			}
1: 
1: 		List granted = control.getGranted();
1: 		
1: 		if (granted != null) {
1: 			for (Iterator dli = granted.iterator(); dli.hasNext(); )
1: 			{
1: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(dli.next()));
1: 				i++;
1: 			}
1: 		}
1: 
1: 
1:         sb.append("\n  waiting list:");
1: 
1: 		List waiting = control.getWaiting();
1: 
1:         int num_waiting = 0;
1: 
1:         if (waiting != null)
1:         {
1: 			for (Iterator dli = waiting.iterator(); dli.hasNext(); )
1:             {
1:                 sb.append(
1:                     "\n    w[" + num_waiting + "]:" + 
1:                     DiagnosticUtil.toDiagString(dli.next()));
1: 
1:                 num_waiting++;
1:             }
1:         }
1: 
1:         if (num_waiting == 0)
1:             sb.append("    no waiting locks.");
1:  
1: 		return sb.toString();
1:     }
1: 	public void diag_detail(Properties prop) {}
1: 
1: 	/*
1: 	** Static routines that were in SinglePool
1: 	*/
1: 
1: 	
1: 	/*
1: 	** Debugging routines
1: 	*/
1: 
0: 	static void debugLock(String type, Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
1:                 debugLockString(
0:                     compatabilitySpace, group, ref, qualifier, timeout));
1: 		}
1: 	}
0: 	static void debugLock(String type, Object compatabilitySpace, Object group) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
0: 					debugLockString(compatabilitySpace, group));
1: 		}
1: 	}
0: 	static void debugLock(String type, Object compatabilitySpace, Object group, Lockable ref) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
0: 					debugLockString(compatabilitySpace, group, ref));
1: 		}
1: 	}
1: 
1: 
0: 	static String debugLockString(Object compatabilitySpace, Object group) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			StringBuffer sb = new StringBuffer("");
1: 
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
1: 			debugAppendObject(sb, " Group=", group);
1: 
1: 			debugAddThreadInfo(sb);
1: 
1: 			return sb.toString();
1: 
1: 		} else {
1: 			return null;
1: 		}
1: 	}
1: 
0: 	static String debugLockString(Object compatabilitySpace, Object group, Lockable ref) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			StringBuffer sb = new StringBuffer("");
1: 
1: 			debugAppendObject(sb, " Lockable ", ref);
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
1: 			debugAppendObject(sb, " Group=", group);
1: 
1: 			debugAddThreadInfo(sb);
1: 
1: 			return sb.toString();
1: 
1: 		} else {
1: 			return null;
1: 		}
1: 	}
1: 
1: 
0: 	static String debugLockString(Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			StringBuffer sb = new StringBuffer("");
1: 
1: 			debugAppendObject(sb, " Lockable ", ref);
1: 			debugAppendObject(sb, " Qualifier=", qualifier);
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
1: 			debugAppendObject(sb, " Group=", group);
1: 
1: 			if (timeout >= 0) {
1: 				sb.append(" Timeout(ms)=");
1: 				sb.append(timeout);
1: 			}
1: 
1: 			debugAddThreadInfo(sb);
1: 
1: 
1: 			return sb.toString();
1: 
1: 		} else {
1: 			return null;
1: 		}
1: 	}
1: 
1: 	static void debugAddThreadInfo(StringBuffer sb) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE_ADD_THREAD_INFO)) {
1: 				debugAppendObject(sb, " Thread=", Thread.currentThread());
1: 			}
1: 		}
1: 	}
1: 
1: 	static void debugAppendObject(StringBuffer sb, String desc, Object item) {
1: 		if (SanityManager.DEBUG) {
1: 
1: 			sb.append(desc);
1: 
1: 			if (item != null)
1: 				sb.append(item.toString());
1: 			else
1: 				sb.append("<null>");
1: 		}
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.locks;
0: 
0: import org.apache.derby.iapi.services.diag.Diagnosticable;
0: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.locks.Lockable;
0: 
0: import java.util.Properties;
0: import java.util.List;
0: import java.util.Iterator;
0: 
0: /**
0: **/
0: 
0: public class D_LockControl implements Diagnosticable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     protected LockControl control;
0: 
0:     public D_LockControl()
0:     {
0:     }
0: 
0:     /* Private/Protected methods of This class: */
0: 
0: 	/*
0: 	** Methods of Diagnosticable
0: 	*/
0:     public void init(Object obj)
0:     {
0:         control = (LockControl) obj;
0:     }
0: 
0:     /**
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public String diag()
0:         throws StandardException
0:     {
0: 		StringBuffer sb = new StringBuffer(1024);
0: 
0: 		sb.append("LockControl:\n  granted list: ");
0: 
0:         int i = 0;
0: 
0: 		Object firstGrant = control.getFirstGrant();
0: 		if (firstGrant != null) {
0: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(firstGrant));
0: 				i++;
0: 			}
0: 
0: 		List granted = control.getGranted();
0: 		
0: 		if (granted != null) {
0: 			for (Iterator dli = granted.iterator(); dli.hasNext(); )
0: 			{
0: 				sb.append("\n    g[" + i + "]:" + DiagnosticUtil.toDiagString(dli.next()));
0: 				i++;
0: 			}
0: 		}
0: 
0: 
0:         sb.append("\n  waiting list:");
0: 
0: 		List waiting = control.getWaiting();
0: 
0:         int num_waiting = 0;
0: 
0:         if (waiting != null)
0:         {
0: 			for (Iterator dli = waiting.iterator(); dli.hasNext(); )
0:             {
0:                 sb.append(
0:                     "\n    w[" + num_waiting + "]:" + 
0:                     DiagnosticUtil.toDiagString(dli.next()));
0: 
0:                 num_waiting++;
0:             }
0:         }
0: 
0:         if (num_waiting == 0)
0:             sb.append("    no waiting locks.");
0:  
0: 		return sb.toString();
0:     }
0: 	public void diag_detail(Properties prop) {}
0: 
0: 	/*
0: 	** Static routines that were in SinglePool
0: 	*/
0: 
0: 	
0: 	/*
0: 	** Debugging routines
0: 	*/
0: 
0: 	static void debugLock(String type, Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
0:                 debugLockString(
0:                     compatabilitySpace, group, ref, qualifier, timeout));
0: 		}
0: 	}
0: 	static void debugLock(String type, Object compatabilitySpace, Object group) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
0: 					debugLockString(compatabilitySpace, group));
0: 		}
0: 	}
0: 	static void debugLock(String type, Object compatabilitySpace, Object group, Lockable ref) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			SanityManager.DEBUG(Constants.LOCK_TRACE, type +
0: 					debugLockString(compatabilitySpace, group, ref));
0: 		}
0: 	}
0: 
0: 
0: 	static String debugLockString(Object compatabilitySpace, Object group) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			StringBuffer sb = new StringBuffer("");
0: 
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
0: 			debugAppendObject(sb, " Group=", group);
0: 
0: 			debugAddThreadInfo(sb);
0: 
0: 			return sb.toString();
0: 
0: 		} else {
0: 			return null;
0: 		}
0: 	}
0: 
0: 	static String debugLockString(Object compatabilitySpace, Object group, Lockable ref) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			StringBuffer sb = new StringBuffer("");
0: 
0: 			debugAppendObject(sb, " Lockable ", ref);
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
0: 			debugAppendObject(sb, " Group=", group);
0: 
0: 			debugAddThreadInfo(sb);
0: 
0: 			return sb.toString();
0: 
0: 		} else {
0: 			return null;
0: 		}
0: 	}
0: 
0: 
0: 	static String debugLockString(Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			StringBuffer sb = new StringBuffer("");
0: 
0: 			debugAppendObject(sb, " Lockable ", ref);
0: 			debugAppendObject(sb, " Qualifier=", qualifier);
0: 			debugAppendObject(sb, " CompatabilitySpace=", compatabilitySpace);
0: 			debugAppendObject(sb, " Group=", group);
0: 
0: 			if (timeout >= 0) {
0: 				sb.append(" Timeout(ms)=");
0: 				sb.append(timeout);
0: 			}
0: 
0: 			debugAddThreadInfo(sb);
0: 
0: 
0: 			return sb.toString();
0: 
0: 		} else {
0: 			return null;
0: 		}
0: 	}
0: 
0: 	static void debugAddThreadInfo(StringBuffer sb) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 			if (SanityManager.DEBUG_ON(Constants.LOCK_TRACE_ADD_THREAD_INFO)) {
0: 				debugAppendObject(sb, " Thread=", Thread.currentThread());
0: 			}
0: 		}
0: 	}
0: 
0: 	static void debugAppendObject(StringBuffer sb, String desc, Object item) {
0: 		if (SanityManager.DEBUG) {
0: 
0: 			sb.append(desc);
0: 
0: 			if (item != null)
0: 				sb.append(item.toString());
0: 			else
0: 				sb.append("<null>");
0: 		}
0: 	}
0: }
0: 
============================================================================