1:eac0369: /*
17:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CLOBTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:44fad02: import org.apache.derby.iapi.types.StringDataValue;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This class implements TypeCompiler for the SQL LOB types.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:4469400: public class CLOBTypeCompiler extends BaseTypeCompiler
1:61070a6: {
1:eac0369:         /**
1:eac0369:          * Tell whether this type (LOB) can be converted to the given type.
1:eac0369:          *
1:eac0369:          * @see TypeCompiler#convertible
1:eac0369:          */
1:eac0369:         public boolean convertible(TypeId otherType, 
1:eac0369: 								   boolean forDataTypeFunction)
5:eac0369:         {
1:eac0369:             // allow casting to any string
1:07d1108:             return (otherType.isStringTypeId() || otherType.isBooleanTypeId()) ;
1:eac0369: 
5:eac0369:         }
1:eac0369: 
1:1e9e925:         /**
1:eac0369:          * Tell whether this type (CLOB) is compatible with the given type.
1:44fad02:          *
2:eac0369:          * @param otherType     The TypeId of the other type.
1:1e9e925:          */
1:eac0369: 		public boolean compatible(TypeId otherType)
1:eac0369: 		{
1:eac0369: 				return convertible(otherType,false);
1:eac0369: 		}
1:eac0369: 
1:1e9e925: 	    /**
1:eac0369:          * Tell whether this type (LOB) can be stored into from the given type.
1:eac0369:          *
1:eac0369:          * @param otherType     The TypeId of the other type.
1:eac0369:          * @param cf            A ClassFactory
1:1e9e925:          */
1:eac0369: 
1:eac0369:         public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369:         {
1:07d1108:             // no automatic conversions at store time--but booleans and string
1:eac0369: 			// literals (or values of type CHAR/VARCHAR) are STORABLE
1:eac0369:             // as clobs, even if the two types can't be COMPARED.
1:07d1108:             return (otherType.isStringTypeId() || otherType.isBooleanTypeId()) ;
1:eac0369:         }
1:eac0369: 
1:eac0369:         /** @see TypeCompiler#interfaceName */
1:eac0369:         public String interfaceName()
1:eac0369:         {
1:eac0369:             return ClassName.StringDataValue;
1:eac0369:         }
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:eac0369:          */
1:eac0369: 
1:eac0369:         public String getCorrespondingPrimitiveTypeName() {
1:eac0369:             int formatId = getStoredFormatIdFromTypeId();
1:eac0369:             switch (formatId) {
1:eac0369:                 case StoredFormatIds.CLOB_TYPE_ID:  return "java.sql.Clob";
1:eac0369:                 default:
1:eac0369:                     if (SanityManager.DEBUG)
1:eac0369:                         SanityManager.THROWASSERT("unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
1:eac0369:                     return null;
1:ba7683c:             }
1:ba7683c:         }
1:ba7683c: 
1:eac0369:         /**
1:eac0369:          * @see TypeCompiler#getCastToCharWidth
1:eac0369:          */
1:eac0369:         public int getCastToCharWidth(DataTypeDescriptor dts)
1:ba7683c:         {
1:eac0369:                 return dts.getMaximumWidth();
1:eac0369:         }
1:ba7683c: 
1:44fad02:         String nullMethodName() {
1:eac0369:             int formatId = getStoredFormatIdFromTypeId();
1:eac0369:             switch (formatId) {
1:eac0369:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getNullClob";
1:eac0369:                 default:
1:eac0369:                     if (SanityManager.DEBUG)
1:eac0369:                         SanityManager.THROWASSERT("unexpected formatId in nullMethodName() - " + formatId);
1:eac0369:                     return null;
1:eac0369:             }
1:eac0369:         }
1:44fad02: 
1:3bb140c:         @Override
1:44fad02:         String dataValueMethodName()
1:ba7683c:         {
1:eac0369:             int formatId = getStoredFormatIdFromTypeId();
1:eac0369:             switch (formatId) {
1:eac0369:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getClobDataValue";
1:eac0369:                 default:
1:eac0369:                     if (SanityManager.DEBUG)
1:eac0369:                         SanityManager.THROWASSERT("unexpected formatId in dataValueMethodName() - " + formatId);
1:eac0369:                     return null;
1:eac0369:                 }
1:eac0369:         }
1:eac0369:         
1:eac0369:         /**
1:44fad02:          * Push the collation type if it is not COLLATION_TYPE_UCS_BASIC.
1:eac0369:          * 
1:44fad02:          * @param collationType Collation type of character values.
1:44fad02:          * @return true collationType will be pushed, false collationType will be ignored.
1:eac0369:          */
1:3bb140c:         @Override
1:44fad02:         boolean pushCollationForDataValue(int collationType)
1:44fad02:         {
1:44fad02:             return collationType != StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:44fad02:         }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class CLOBTypeCompiler extends BaseTypeCompiler
commit:07d1108
/////////////////////////////////////////////////////////////////////////
1:             return (otherType.isStringTypeId() || otherType.isBooleanTypeId()) ;
/////////////////////////////////////////////////////////////////////////
1:             // no automatic conversions at store time--but booleans and string
1:             return (otherType.isStringTypeId() || otherType.isBooleanTypeId()) ;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: class CLOBTypeCompiler extends BaseTypeCompiler
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:111785f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:869152f
/////////////////////////////////////////////////////////////////////////
0:     	/** @see TypeCompiler#generateDataValue(ExpressionClassBuilder, MethodBuilder, int, String, LocalField) */
0:     	public void generateDataValue(
0:     			ExpressionClassBuilder eb,
0: 				MethodBuilder mb, int collationType,
0:     		super.generateDataValue(eb, mb, collationType, className, field);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType, className);
0:     	/** @see TypeCompiler#generateNull(ExpressionClassBuilder, MethodBuilder, int, String)*/
0:     	public void generateNull(
0:     			ExpressionClassBuilder eb,
0: 				MethodBuilder mb, int collationType, 
0:     		super.generateNull(eb, mb, collationType, className);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType, className);
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     	/** @see TypeCompiler#generateDataValue(MethodBuilder, int, String, LocalField) */
0:     	public void generateDataValue(MethodBuilder mb, int collationType,
0:     			String className, LocalField field)
1:     	{
0:     		super.generateDataValue(mb, collationType, className, field);
0:     		generateCollationSensitiveDataValue(mb, collationType, className);
1:     	}
1: 
0:     	/** @see TypeCompiler#generateNull(MethodBuilder, int, String) */
0:     	public void generateNull(MethodBuilder mb, int collationType, 
0:     			String className)
1:     	{
0:     		super.generateNull(mb, collationType, className);
0:     		generateCollationSensitiveDataValue(mb, collationType, className);
1:     	}
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a1aaa63
/////////////////////////////////////////////////////////////////////////
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
1:         String nullMethodName() {
/////////////////////////////////////////////////////////////////////////
1:         String dataValueMethodName()
/////////////////////////////////////////////////////////////////////////
1:         
1:          * Push the collation type if it is not COLLATION_TYPE_UCS_BASIC.
1:          * 
1:          * @param collationType Collation type of character values.
1:          * @return true collationType will be pushed, false collationType will be ignored.
1:         boolean pushCollationForDataValue(int collationType)
1:         {
1:             return collationType != StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:         }
commit:1e9e925
/////////////////////////////////////////////////////////////////////////
1:         /**
0:          * Augment the parent's method by ensuring the generated
0:          * value is setup for collation if required.
0:          * @see BaseTypeCompiler#generateCollationSensitiveDataValue(ExpressionClassBuilder, MethodBuilder, int)
1:          */
/////////////////////////////////////////////////////////////////////////
1:         /**
0:          * Augment the parent's method by ensuring the generated
0:          * value is setup for collation if required.
0:          * @see BaseTypeCompiler#generateCollationSensitiveDataValue(ExpressionClassBuilder, MethodBuilder, int)
1:          */
0:         public void generateNull(
commit:a57c280
/////////////////////////////////////////////////////////////////////////
0:     			LocalField field)
0:     		super.generateDataValue(eb, mb, collationType, field);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType);
0: 				MethodBuilder mb, int collationType)
0:     		super.generateNull(eb, mb, collationType);
0:     		generateCollationSensitiveDataValue(eb, mb, collationType);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CLOBTypeCompiler
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
1: {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
1: /**
1:  * This class implements TypeCompiler for the SQL LOB types.
1:  *
0:  * @author Jonas S Karlsson
1:  */
1: 
0: public class CLOBTypeCompiler extends BaseTypeCompiler
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1:         /**
0:          * Tell whether this type (LOB) can be compared to the given type.
0:          * Clobs are not comparable.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
1:         {
0: 			return false;
1:         }
1: 
1: 
1:         /**
1:          * Tell whether this type (LOB) can be converted to the given type.
1:          *
1:          * @see TypeCompiler#convertible
1:          */
1:         public boolean convertible(TypeId otherType, 
1: 								   boolean forDataTypeFunction)
1:         {
1:             // allow casting to any string
0:             return (otherType.isStringTypeId()) ;
1: 
1:         }
1: 
1:         /**
1:          * Tell whether this type (CLOB) is compatible with the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 		public boolean compatible(TypeId otherType)
1: 		{
1: 				return convertible(otherType,false);
1: 		}
1: 
1: 	    /**
1:          * Tell whether this type (LOB) can be stored into from the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          * @param cf            A ClassFactory
1:          */
1: 
1:         public boolean storable(TypeId otherType, ClassFactory cf)
1:         {
0:             // no automatic conversions at store time--but string
1: 			// literals (or values of type CHAR/VARCHAR) are STORABLE
1:             // as clobs, even if the two types can't be COMPARED.
0:             return (otherType.isStringTypeId()) ;
1:         }
1: 
1:         /** @see TypeCompiler#interfaceName */
1:         public String interfaceName()
1:         {
1:             return ClassName.StringDataValue;
1:         }
1: 
1:         /**
1:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:          */
1: 
1:         public String getCorrespondingPrimitiveTypeName() {
1:             int formatId = getStoredFormatIdFromTypeId();
1:             switch (formatId) {
1:                 case StoredFormatIds.CLOB_TYPE_ID:  return "java.sql.Clob";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "java.sql.Clob";
1:                 default:
1:                     if (SanityManager.DEBUG)
1:                         SanityManager.THROWASSERT("unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
1:                     return null;
1:             }
1:         }
1: 
0:         public String getMatchingNationalCharTypeName()
1:         {
0:             return TypeId.NCLOB_NAME;
1:         }
1: 
1:         /**
1:          * @see TypeCompiler#getCastToCharWidth
1:          */
1:         public int getCastToCharWidth(DataTypeDescriptor dts)
1:         {
1:                 return dts.getMaximumWidth();
1:         }
1: 
0:         protected String nullMethodName() {
1:             int formatId = getStoredFormatIdFromTypeId();
1:             switch (formatId) {
1:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getNullClob";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "getNullNClob";
1:                 default:
1:                     if (SanityManager.DEBUG)
1:                         SanityManager.THROWASSERT("unexpected formatId in nullMethodName() - " + formatId);
1:                     return null;
1:             }
1:         }
1: 
0:         protected String dataValueMethodName()
1:         {
1:             int formatId = getStoredFormatIdFromTypeId();
1:             switch (formatId) {
1:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getClobDataValue";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "getNClobDataValue";
1:                 default:
1:                     if (SanityManager.DEBUG)
1:                         SanityManager.THROWASSERT("unexpected formatId in dataValueMethodName() - " + formatId);
1:                     return null;
1:                 }
1:         }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL LOB types.
0:  *
0:  * @author Jonas S Karlsson
0:  */
0: 
0: public class CLOBTypeCompiler extends BaseTypeCompiler
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0:         /**
0:          * Tell whether this type (LOB) can be compared to the given type.
0:          * Clobs are not comparable.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
0:         {
0: 			return false;
0:         }
0: 
0: 
0:         /**
0:          * Tell whether this type (LOB) can be converted to the given type.
0:          *
0:          * @see TypeCompiler#convertible
0:          */
0:         public boolean convertible(TypeId otherType, 
0: 								   boolean forDataTypeFunction)
0:         {
0:             // allow casting to any string
0:             return (otherType.isStringTypeId()) ;
0: 
0:         }
0: 
0:         /**
0:          * Tell whether this type (CLOB) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 		public boolean compatible(TypeId otherType)
0: 		{
0: 				return convertible(otherType,false);
0: 		}
0: 
0: 	    /**
0:          * Tell whether this type (LOB) can be stored into from the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
0:          */
0: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
0:         {
0:             // no automatic conversions at store time--but string
0: 			// literals (or values of type CHAR/VARCHAR) are STORABLE
0:             // as clobs, even if the two types can't be COMPARED.
0:             return (otherType.isStringTypeId()) ;
0:         }
0: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
0:         {
0:             return ClassName.StringDataValue;
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0:          */
0: 
0:         public String getCorrespondingPrimitiveTypeName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.CLOB_TYPE_ID:  return "java.sql.Clob";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "java.sql.Clob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
0:                     return null;
0:             }
0:         }
0: 
0:         public String getMatchingNationalCharTypeName()
0:         {
0:             return TypeId.NCLOB_NAME;
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCastToCharWidth
0:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
0:         {
0:                 return dts.getMaximumWidth();
0:         }
0: 
0:         protected String nullMethodName() {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getNullClob";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "getNullNClob";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in nullMethodName() - " + formatId);
0:                     return null;
0:             }
0:         }
0: 
0:         protected String dataValueMethodName()
0:         {
0:             int formatId = getStoredFormatIdFromTypeId();
0:             switch (formatId) {
0:                 case StoredFormatIds.CLOB_TYPE_ID:  return "getClobDataValue";
0:                 case StoredFormatIds.NCLOB_TYPE_ID: return "getNClobDataValue";
0:                 default:
0:                     if (SanityManager.DEBUG)
0:                         SanityManager.THROWASSERT("unexpected formatId in dataValueMethodName() - " + formatId);
0:                     return null;
0:                 }
0:         }
0: }
============================================================================