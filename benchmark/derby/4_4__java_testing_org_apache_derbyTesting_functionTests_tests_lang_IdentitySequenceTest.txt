1:7fd0c6e: /*
3:7fd0c6e: 
1:7fd0c6e:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IdentitySequenceTest
1:7fd0c6e: 
1:7fd0c6e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7fd0c6e:    contributor license agreements.  See the NOTICE file distributed with
1:7fd0c6e:    this work for additional information regarding copyright ownership.
1:7fd0c6e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7fd0c6e:    (the "License"); you may not use this file except in compliance with
1:7fd0c6e:    the License.  You may obtain a copy of the License at
1:7fd0c6e: 
1:7fd0c6e:      http://www.apache.org/licenses/LICENSE-2.0
1:7fd0c6e: 
1:7fd0c6e:    Unless required by applicable law or agreed to in writing, software
1:7fd0c6e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7fd0c6e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fd0c6e:    See the License for the specific language governing permissions and
1:7fd0c6e:    limitations under the License.
1:7fd0c6e: 
1:7fd0c6e:  */
1:7fd0c6e: 
1:7fd0c6e: package org.apache.derbyTesting.functionTests.tests.lang;
1:7fd0c6e: 
1:7fd0c6e: import java.sql.Connection;
1:7fd0c6e: import java.sql.PreparedStatement;
1:7fd0c6e: import java.sql.ResultSet;
1:7fd0c6e: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:7fd0c6e: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:7fd0c6e: 
1:7fd0c6e: /**
1:7fd0c6e:  * Test for identity columns backed by sequence generators.
1:7fd0c6e:  */
1:7fd0c6e: public class IdentitySequenceTest extends GeneratedColumnsHelper
1:7fd0c6e: {
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // CONSTANTS
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:7fd0c6e:     private static  final   String  BAD_NEXT_VALUE = "42XAR";
1:7fd0c6e:     private static  final   String  TABLE_DOESNT_HAVE_IDENTITY = "X0X81";
1:7fd0c6e: 
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // STATE
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // CONSTRUCTOR
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:7fd0c6e:     /**
1:7fd0c6e:      * Create a new instance.
1:7fd0c6e:      */
1:7fd0c6e: 
1:7fd0c6e:     public IdentitySequenceTest( String name )
1:7fd0c6e:     {
1:7fd0c6e:         super(name);
1:7fd0c6e:     }
1:7fd0c6e: 
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // JUnit BEHAVIOR
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:7fd0c6e: 
1:7fd0c6e:     /**
1:7fd0c6e:      * Construct top level suite in this JUnit test
1:7fd0c6e:      */
1:7fd0c6e:     public static Test suite()
1:7fd0c6e:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite();
1:7fd0c6e: 
1:7fd0c6e:         Test    cleanTest = new CleanDatabaseTestSetup
1:7fd0c6e:             (
1:7fd0c6e:              TestConfiguration.embeddedSuite( IdentitySequenceTest.class )
1:7fd0c6e:              );
1:7fd0c6e: 
1:7fd0c6e:         suite.addTest( cleanTest );
1:7fd0c6e:         
1:7fd0c6e:         return suite;
1:7fd0c6e:     }
1:7fd0c6e: 
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // TESTS
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:8612b0b:     /**
1:8612b0b:      * <p>
1:7fd0c6e:      * Test catalog changes.
1:7fd0c6e:      * </p>
1:7fd0c6e:      */
1:7fd0c6e:     public  void    test_001_catalog()
1:7fd0c6e:         throws Exception
1:7fd0c6e:     {
1:7fd0c6e:         Connection  conn = getConnection();
1:7fd0c6e: 
1:7fd0c6e:         goodStatement
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:              "create table T1_01_IST\n" +
1:7fd0c6e:              "(\n" +
1:7fd0c6e:              "    a int generated always as identity ( start with 10, increment by 20 ),\n" +
1:7fd0c6e:              "    b int\n" +
1:7fd0c6e:              ")\n"
1:7fd0c6e:              );
1:a180287:         String  sequenceName = getIdentitySequenceName( conn, "T1_01_IST" );
1:7fd0c6e: 
1:7fd0c6e:         // sequence should be in SYS, its name should be based on the table id,
1:7fd0c6e:         // and its start/stop/max/min/cycle values should be correct.
1:7fd0c6e: 
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "20", "N" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e: 
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T1_01_IST' )",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "10" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e: 
1:7fd0c6e:         // should not be able to issue a NEXT VALUE on the sequence generator which backs the identity column
2:7fd0c6e:         expectCompilationError
1:7fd0c6e:             ( conn, BAD_NEXT_VALUE, "values ( next value for sys.\"" + sequenceName + "\" )" );
1:7fd0c6e: 
1:7fd0c6e:         // alter the identity column and observe that the sequence generator changes
1:a180287:         goodStatement( conn, "alter table T1_01_IST alter column a set increment by 15" );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "15", "N" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:a180287:         goodStatement( conn, "alter table T1_01_IST alter column a restart with 500" );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "SYS", sequenceName, "500", "500", "-2147483648", "2147483647", "15", "N" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e:         
1:7fd0c6e:         // system sequence should disappear when the table is dropped
1:a180287:         goodStatement( conn, "drop table T1_01_IST" );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][] {},
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e: 
1:b5392db:         // can add an identity column to a table (DERBY-3888)
1:a180287:         goodStatement( conn, "create table T2_01_IST( b int )" );
1:b5392db:         goodStatement( conn,
1:a180287:               "alter table T2_01_IST add column a int generated always as identity ( start with 10, increment by 20 )" );
1:b5392db:         goodStatement( conn, "drop table T2_01_IST" );
1:7fd0c6e: 
1:7fd0c6e:         // dropping an identity column should drop the sequence generator too
1:7fd0c6e:         goodStatement
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:              "create table T3_03_IST\n" +
1:7fd0c6e:              "(\n" +
1:7fd0c6e:              "    a int generated always as identity ( start with 10, increment by 20 ),\n" +
1:7fd0c6e:              "    b int\n" +
1:7fd0c6e:              ")\n"
1:7fd0c6e:              );
1:a180287:         sequenceName = getIdentitySequenceName( conn, "T3_03_IST" );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "20", "N" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T3_03_IST' )",
1:7fd0c6e:              new String[][]
1:7fd0c6e:              {
1:7fd0c6e:                  { "10" },
1:7fd0c6e:              },
1:7fd0c6e:              false
1:7fd0c6e:              );
1:a180287:         goodStatement( conn, "alter table T3_03_IST drop column a" );
1:7fd0c6e:         assertResults
1:7fd0c6e:             (
1:7fd0c6e:              conn,
1:a180287:             "select\n" +
1:a180287:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:a180287:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:a180287:             "from sys.syssequences s, sys.sysschemas c\n" +
1:a180287:             "where s.schemaID = c.schemaID\n" +
1:a180287:              "and s.sequenceName = '" + sequenceName + "'",
1:7fd0c6e:              new String[][] {},
1:7fd0c6e:              false
1:7fd0c6e:              );
1:7fd0c6e:         expectExecutionError
1:7fd0c6e:             ( conn, TABLE_DOESNT_HAVE_IDENTITY,
1:a180287:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T3_03_IST' )"
1:7fd0c6e:               );
1:7fd0c6e:     }
1:7fd0c6e:     
1:a180287:     /**
1:a180287:      * <p>
1:a180287:      * Test ALTER TABLE behavior.
1:a180287:      * </p>
1:a180287:      */
1:a180287:     public  void    test_002_alterTable()
1:a180287:         throws Exception
1:a180287:     {
1:a180287:         Connection  conn = getConnection();
1:a180287: 
1:a180287:         //
1:a180287:         // Test that changing the increment value for an identity
1:a180287:         // column does not affect its current value. See DERBY-6579.
1:a180287:         //
1:a180287:         goodStatement( conn, "create table t1_002( a int, b int generated always as identity )" );
1:a180287:         goodStatement( conn, "insert into t1_002( a ) values ( 100 ), ( 200 )" );
1:a180287:         goodStatement( conn, "alter table t1_002 alter b set increment by 10" );
1:a180287:         goodStatement( conn, "insert into t1_002( a ) values ( 300 ), ( 400 )" );
1:a180287:         assertResults
1:a180287:             (
1:a180287:              conn,
1:a180287:              "select * from t1_002 order by a",
1:a180287:              new String[][]
1:a180287:              {
1:a180287:                  { "100", "1" },
1:a180287:                  { "200", "2" },
1:a180287:                  { "300", "3" },
1:a180287:                  { "400", "13" },
1:a180287:              },
1:a180287:              false
1:a180287:              );
1:a180287: 
1:a180287:         goodStatement( conn, "drop table t1_002" );
1:a180287:         goodStatement( conn, "create table t1_002( a int, b int generated always as identity )" );
1:a180287:         goodStatement( conn, "insert into t1_002( a ) values ( 100 ), ( 200 )" );
1:a180287:         goodStatement( conn, "delete from t1_002 where a = 200" );
1:a180287:         goodStatement( conn, "alter table t1_002 alter b set increment by 10" );
1:a180287:         goodStatement( conn, "insert into t1_002( a ) values ( 300 ), ( 400 )" );
1:a180287:         assertResults
1:a180287:             (
1:a180287:              conn,
1:a180287:              "select * from t1_002 order by a",
1:a180287:              new String[][]
1:a180287:              {
1:a180287:                  { "100", "1" },
1:a180287:                  { "300", "3" },
1:a180287:                  { "400", "13" },
1:a180287:              },
1:a180287:              false
1:a180287:              );
1:a180287: 
1:a180287:         // now restart the identity column at a later number
1:a180287:         goodStatement( conn, "alter table t1_002 alter b restart with 1000" );
1:a180287:         goodStatement( conn, "insert into t1_002( a ) values ( 500 ), ( 600 )" );
1:a180287:         assertResults
1:a180287:             (
1:a180287:              conn,
1:a180287:              "select * from t1_002 order by a",
1:a180287:              new String[][]
1:a180287:              {
1:a180287:                  { "100", "1" },
1:a180287:                  { "300", "3" },
1:a180287:                  { "400", "13" },
1:a180287:                  { "500", "1000" },
1:a180287:                  { "600", "1010" },
1:a180287:              },
1:a180287:              false
1:a180287:              );
1:a180287:     }
1:a180287: 
1:7fd0c6e:     /**
1:7fd0c6e:      * <p>
1:8612b0b:      * Test that too much contention on an identity column raises a LOCK_TIMEOUT.
1:8612b0b:      * </p>
1:8612b0b:      */
1:8612b0b:     public  void    test_003_identityTimeout()
1:8612b0b:         throws Exception
1:8612b0b:     {
1:8612b0b:         Connection  conn = getConnection();
1:8612b0b: 
1:8612b0b:         goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.locks.waitTimeout', '1' )" );
1:8612b0b:         goodStatement( conn, "create table t_timeout( a int generated always as identity, b int )" );
1:8612b0b:         conn.setAutoCommit( false );
1:8612b0b: 
1:8612b0b:         try {
1:8612b0b:             PreparedStatement   ps = chattyPrepare( conn, "select count(*) from sys.syssequences with rs\n" );
1:8612b0b:             getScalarInteger( ps );
1:8612b0b:             expectExecutionError( conn, LOCK_TIMEOUT, "insert into t_timeout( b ) values ( 1 )" );
1:8612b0b:         }
1:8612b0b:         finally
1:8612b0b:         {
1:8612b0b:             conn.setAutoCommit( true );
1:8612b0b:             goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.locks.waitTimeout', '60' )" );
1:8612b0b:         }
1:8612b0b:     }
1:d055adb: 
1:d055adb: 	    /**
1:d055adb:      * <p>
1:d055adb:      * Tests for newly added cycle option in DERBY-6852.
1:d055adb:      * </p>
1:d055adb:      */
1:d055adb:     public  void    testcycleOption()
1:d055adb:         throws Exception
1:d055adb:     {
1:d055adb:         Connection  conn = getConnection();
1:d055adb: 
1:d055adb:         
1:d055adb:         // Test the restart value and syntax of identity column without COMMA. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647 INCREMENT BY 2 CYCLE) , b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb:                  { "-2147483646", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb:         goodStatement( conn, "drop table t" );
1:d055adb: 		// Test the restart value and syntax of identity column with COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647, INCREMENT BY 2, CYCLE) , b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb:                  { "-2147483646", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Only Start with. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "47", "1" },
1:d055adb:                  { "48", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Start with and increment by without COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47 INCREMENT BY 3), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "47", "1" },
1:d055adb:                  { "50", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Start with and increment by with COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47, INCREMENT BY 3), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "47", "1" },
1:d055adb:                  { "50", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Start with and increment by with COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47, INCREMENT BY 3), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "47", "1" },
1:d055adb:                  { "50", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Start with and cycle with COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647, CYCLE), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb: 				 { "-2147483647", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb:         goodStatement( conn, "drop table t" );
1:d055adb: 		//Start with and cycle without COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647 CYCLE), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb: 				 { "-2147483647", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb:  		goodStatement( conn, "drop table t" );
1:d055adb: 		//increment by. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "1", "1" },
1:d055adb:                  { "4", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//increment by with COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3, CYCLE), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "1", "1" },
1:d055adb:                  { "4", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//increment by without COMMA. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3, CYCLE), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "1", "1" },
1:d055adb:                  { "4", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Cycle. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(CYCLE), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "1", "1" },
1:d055adb:                  { "2", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		//Changing the order of the identity column options. 
1:d055adb: 		goodStatement( conn, "create table t( a int generated always as identity(increment by 4 start with 4), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "4", "1" },
1:d055adb:                  { "8", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		// Changing the order of identity column options. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(CYCLE START WITH 2147483647 INCREMENT BY 2 ) , b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb:                  { "-2147483646", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		// With comma and without comma. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647, increment by 7 cycle) , b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "2147483647", "1" },
1:d055adb:                  { "-2147483648", "2" },
1:d055adb:                  { "-2147483641", "3" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		// Changing the order of identity column options. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(cycle , increment by 4), b int)" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "1", "1" },
1:d055adb:                  { "5", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		goodStatement( conn, "drop table t" );
1:d055adb: 		// () should be an error 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity ())" );
1:d055adb: 
1:d055adb: 		// Missing "with". 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity (start 47))" );
1:d055adb: 	
1:d055adb: 		// Missing "by". 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity (increment 4))" );
1:d055adb: 
1:d055adb: 		// Redundant cycle
1:d055adb:         expectCompilationError( conn,"42XAJ" ,"create table t(a int generated by default as identity (cycle cycle))" );
1:d055adb: 		
1:d055adb: 		// Redundant start with  
1:d055adb:         expectCompilationError( conn,"42XAJ" ,"create table t( a int generated by default as identity(start with 4 start with 8))" );
1:d055adb: 
1:d055adb: 		// Syntax error. 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity(start with 4 , , , cycle))" );
1:d055adb: 
1:d055adb: 		// Syntax error. 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity(no cycle))" );
1:d055adb: 
1:d055adb: 		// try to exceed the maximum value without cycle option. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647, increment by 4), b int)" );
1:d055adb:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 		// Syntax error. 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated always as identity(START WITH, 47))" );
1:d055adb: 		
1:d055adb: 		// Syntax error. 
1:d055adb:         expectCompilationError( conn,"42X01" ,"create table t( a int generated always as identity(START WITH 47 ,))" );
1:d055adb: 
1:d055adb: 		// Does not support cycle option after altering the table. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647 cycle), b int)" );
1:d055adb: 	goodStatement( conn, "alter table t alter column a set increment by 4" );
1:d055adb:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 		// Alter table works fine without cycling with cycle option in the syntax.
1:d055adb: 	goodStatement( conn, "create table t( a int generated always as identity(start with 7 increment by 2 cycle), b int)" );
1:d055adb: 	goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb: 	goodStatement( conn, "alter table t alter column a set increment by 4" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 3 ), ( 4 )" );
1:d055adb: 	assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "7", "1" },
1:d055adb:                  { "9", "2" },
1:d055adb: 		 { "11", "3" },
1:d055adb:                  { "15", "4" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 		// Does not support cycle option after altering the table. 
1:d055adb:         goodStatement( conn, "create table t( a int generated always as identity(increment by 2 cycle), b int)" );
1:d055adb: 	goodStatement( conn, "alter table t alter column a restart with 2147483647" );
1:d055adb:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 		// Alter table works fine without cycling with cycle option in the syntax.
1:d055adb: 	goodStatement( conn, "create table t( a int generated always as identity(start with 7 increment by 2 cycle), b int)" );
1:d055adb: 	goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:d055adb: 	goodStatement( conn, "alter table t alter column a restart with 50" );
1:d055adb:         goodStatement( conn, "insert into t( b ) values ( 3 ), ( 4 )" );
1:d055adb: 	assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select * from t",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "7", "1" },
1:d055adb:                  { "9", "2" },
1:d055adb: 		 { "50", "3" },
1:d055adb:                  { "52", "4" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 	goodStatement( conn, "create table t( A_6852 int generated always as identity(start with 7 increment by 2 cycle))" );
1:d055adb: 		//SELECT from sys.syscolumns with cycle option
1:d055adb: 	assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "7", "7", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table t" );
1:d055adb: 		//SELECT from sys.syscolumns without cycle option
1:d055adb: 	goodStatement( conn, "create table T_6852( A_6852 int generated always as identity(start with 7 increment by 2))" );
1:d055adb: 
1:d055adb: 	assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:              "select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "7", "7", "2" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 		//SELECT from sys.syssequences without cycle option
1:d055adb:         String  sequenceName = getIdentitySequenceName( conn, "T_6852" );
1:d055adb: 
1:d055adb:         // sequence should be in SYS, its name should be based on the table id,
1:d055adb:         // and its start/stop/max/min/cycle values should be correct.
1:d055adb: 
1:d055adb:         assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:             "select\n" +
1:d055adb:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:d055adb:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:d055adb:             "from sys.syssequences s, sys.sysschemas c\n" +
1:d055adb:             "where s.schemaID = c.schemaID\n" +
1:d055adb:              "and s.sequenceName = '" + sequenceName + "'",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "SYS", sequenceName, "7", "7", "-2147483648", "2147483647", "2", "N" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 
1:d055adb: 	goodStatement( conn, "drop table T_6852" );
1:d055adb: 		//SELECT from sys.syssequences with cycle option
1:d055adb: 	goodStatement( conn, "create table T_6852( A_6852 int generated always as identity(start with 7 increment by 2 cycle))" );
1:d055adb: 
1:d055adb:         sequenceName = getIdentitySequenceName( conn, "T_6852" );
1:d055adb: 	assertResults
1:d055adb:             (
1:d055adb:              conn,
1:d055adb:             "select\n" +
1:d055adb:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:d055adb:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:d055adb:             "from sys.syssequences s, sys.sysschemas c\n" +
1:d055adb:             "where s.schemaID = c.schemaID\n" +
1:d055adb:              "and s.sequenceName = '" + sequenceName + "'",
1:d055adb:              new String[][]
1:d055adb:              {
1:d055adb:                  { "SYS", sequenceName, "7", "7", "-2147483648", "2147483647", "2", "Y" },
1:d055adb:              },
1:d055adb:              false
1:d055adb:              );
1:d055adb: 	
1:d055adb: 	goodStatement( conn, "drop table T_6852" );
1:d055adb:   
1:d055adb:     }
1:d055adb: 
1:8612b0b:     /** Get a scalar integer result from a query */
1:8612b0b:     private int getScalarInteger( PreparedStatement ps ) throws Exception
1:8612b0b:     {
1:8612b0b:         ResultSet rs = ps.executeQuery();
1:8612b0b:         rs.next();
1:8612b0b:         int retval = rs.getInt( 1 );
1:8612b0b: 
1:8612b0b:         rs.close();
1:8612b0b:         ps.close();
1:8612b0b: 
1:8612b0b:         return retval;
1:8612b0b:     }
1:8612b0b: 
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e:     //
1:7fd0c6e:     // MINIONS
1:7fd0c6e:     //
1:7fd0c6e:     ///////////////////////////////////////////////////////////////////////////////////
1:7fd0c6e: 
1:a180287:     public  static String  getIdentitySequenceName( Connection conn, String tableName )
1:7fd0c6e:         throws Exception
1:7fd0c6e:     {
1:a180287:         PreparedStatement   ps = conn.prepareStatement( "select tableID from sys.systables where tablename = ?" );
1:7fd0c6e:         ps.setString( 1, tableName.toUpperCase() );
1:7fd0c6e:         ResultSet   rs = ps.executeQuery();
1:7fd0c6e:         rs.next();
1:7fd0c6e:         String  uuidString = rs.getString( 1 );
1:7fd0c6e:         rs.close();
1:7fd0c6e:         ps.close();
1:7fd0c6e: 
1:7fd0c6e:         return uuidToSequenceName( uuidString );
1:7fd0c6e:     }
1:7fd0c6e: 
1:7fd0c6e:     public  static  String  uuidToSequenceName( String uuidString )
1:7fd0c6e:     {
1:7fd0c6e:         return "U" + uuidString.replace( "-", "X" );
1:7fd0c6e:     }
1:7fd0c6e: 
1:7fd0c6e:     
1:7fd0c6e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:d055adb
/////////////////////////////////////////////////////////////////////////
1: 
1: 	    /**
1:      * <p>
1:      * Tests for newly added cycle option in DERBY-6852.
1:      * </p>
1:      */
1:     public  void    testcycleOption()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         
1:         // Test the restart value and syntax of identity column without COMMA. 
1:         goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647 INCREMENT BY 2 CYCLE) , b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1:                  { "-2147483646", "3" },
1:              },
1:              false
1:              );
1:         goodStatement( conn, "drop table t" );
1: 		// Test the restart value and syntax of identity column with COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647, INCREMENT BY 2, CYCLE) , b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1:                  { "-2147483646", "3" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Only Start with. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "47", "1" },
1:                  { "48", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Start with and increment by without COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47 INCREMENT BY 3), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "47", "1" },
1:                  { "50", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Start with and increment by with COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47, INCREMENT BY 3), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "47", "1" },
1:                  { "50", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Start with and increment by with COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 47, INCREMENT BY 3), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "47", "1" },
1:                  { "50", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Start with and cycle with COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647, CYCLE), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1: 				 { "-2147483647", "3" },
1:              },
1:              false
1:              );
1: 
1:         goodStatement( conn, "drop table t" );
1: 		//Start with and cycle without COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(START WITH 2147483647 CYCLE), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1: 				 { "-2147483647", "3" },
1:              },
1:              false
1:              );
1: 
1:  		goodStatement( conn, "drop table t" );
1: 		//increment by. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "1", "1" },
1:                  { "4", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//increment by with COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3, CYCLE), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "1", "1" },
1:                  { "4", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//increment by without COMMA. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(INCREMENT BY 3, CYCLE), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "1", "1" },
1:                  { "4", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Cycle. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(CYCLE), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "1", "1" },
1:                  { "2", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		//Changing the order of the identity column options. 
1: 		goodStatement( conn, "create table t( a int generated always as identity(increment by 4 start with 4), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "4", "1" },
1:                  { "8", "2" },
1:              },
1:              false
1:              );
1: 		goodStatement( conn, "drop table t" );
1: 		// Changing the order of identity column options. 
1:         goodStatement( conn, "create table t( a int generated always as identity(CYCLE START WITH 2147483647 INCREMENT BY 2 ) , b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1:                  { "-2147483646", "3" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		// With comma and without comma. 
1:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647, increment by 7 cycle) , b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 ), ( 3 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "2147483647", "1" },
1:                  { "-2147483648", "2" },
1:                  { "-2147483641", "3" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		// Changing the order of identity column options. 
1:         goodStatement( conn, "create table t( a int generated always as identity(cycle , increment by 4), b int)" );
1:         goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "1", "1" },
1:                  { "5", "2" },
1:              },
1:              false
1:              );
1: 
1: 		goodStatement( conn, "drop table t" );
1: 		// () should be an error 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity ())" );
1: 
1: 		// Missing "with". 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity (start 47))" );
1: 	
1: 		// Missing "by". 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity (increment 4))" );
1: 
1: 		// Redundant cycle
1:         expectCompilationError( conn,"42XAJ" ,"create table t(a int generated by default as identity (cycle cycle))" );
1: 		
1: 		// Redundant start with  
1:         expectCompilationError( conn,"42XAJ" ,"create table t( a int generated by default as identity(start with 4 start with 8))" );
1: 
1: 		// Syntax error. 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity(start with 4 , , , cycle))" );
1: 
1: 		// Syntax error. 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated by default as identity(no cycle))" );
1: 
1: 		// try to exceed the maximum value without cycle option. 
1:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647, increment by 4), b int)" );
1:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 		// Syntax error. 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated always as identity(START WITH, 47))" );
1: 		
1: 		// Syntax error. 
1:         expectCompilationError( conn,"42X01" ,"create table t( a int generated always as identity(START WITH 47 ,))" );
1: 
1: 		// Does not support cycle option after altering the table. 
1:         goodStatement( conn, "create table t( a int generated always as identity(start with 2147483647 cycle), b int)" );
1: 	goodStatement( conn, "alter table t alter column a set increment by 4" );
1:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 		// Alter table works fine without cycling with cycle option in the syntax.
1: 	goodStatement( conn, "create table t( a int generated always as identity(start with 7 increment by 2 cycle), b int)" );
1: 	goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1: 	goodStatement( conn, "alter table t alter column a set increment by 4" );
1:         goodStatement( conn, "insert into t( b ) values ( 3 ), ( 4 )" );
1: 	assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "7", "1" },
1:                  { "9", "2" },
1: 		 { "11", "3" },
1:                  { "15", "4" },
1:              },
1:              false
1:              );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 		// Does not support cycle option after altering the table. 
1:         goodStatement( conn, "create table t( a int generated always as identity(increment by 2 cycle), b int)" );
1: 	goodStatement( conn, "alter table t alter column a restart with 2147483647" );
1:         expectExecutionError( conn,"2200H" ,"insert into t( b ) values ( 1 ), ( 2 )" );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 		// Alter table works fine without cycling with cycle option in the syntax.
1: 	goodStatement( conn, "create table t( a int generated always as identity(start with 7 increment by 2 cycle), b int)" );
1: 	goodStatement( conn, "insert into t( b ) values ( 1 ), ( 2 )" );
1: 	goodStatement( conn, "alter table t alter column a restart with 50" );
1:         goodStatement( conn, "insert into t( b ) values ( 3 ), ( 4 )" );
1: 	assertResults
1:             (
1:              conn,
1:              "select * from t",
1:              new String[][]
1:              {
1:                  { "7", "1" },
1:                  { "9", "2" },
1: 		 { "50", "3" },
1:                  { "52", "4" },
1:              },
1:              false
1:              );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 	goodStatement( conn, "create table t( A_6852 int generated always as identity(start with 7 increment by 2 cycle))" );
1: 		//SELECT from sys.syscolumns with cycle option
1: 	assertResults
1:             (
1:              conn,
1:              "select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'",
1:              new String[][]
1:              {
1:                  { "7", "7", "2" },
1:              },
1:              false
1:              );
1: 
1: 	goodStatement( conn, "drop table t" );
1: 		//SELECT from sys.syscolumns without cycle option
1: 	goodStatement( conn, "create table T_6852( A_6852 int generated always as identity(start with 7 increment by 2))" );
1: 
1: 	assertResults
1:             (
1:              conn,
1:              "select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'",
1:              new String[][]
1:              {
1:                  { "7", "7", "2" },
1:              },
1:              false
1:              );
1: 
1: 		//SELECT from sys.syssequences without cycle option
1:         String  sequenceName = getIdentitySequenceName( conn, "T_6852" );
1: 
1:         // sequence should be in SYS, its name should be based on the table id,
1:         // and its start/stop/max/min/cycle values should be correct.
1: 
1:         assertResults
1:             (
1:              conn,
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "7", "7", "-2147483648", "2147483647", "2", "N" },
1:              },
1:              false
1:              );
1: 
1: 	goodStatement( conn, "drop table T_6852" );
1: 		//SELECT from sys.syssequences with cycle option
1: 	goodStatement( conn, "create table T_6852( A_6852 int generated always as identity(start with 7 increment by 2 cycle))" );
1: 
1:         sequenceName = getIdentitySequenceName( conn, "T_6852" );
1: 	assertResults
1:             (
1:              conn,
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "7", "7", "-2147483648", "2147483647", "2", "Y" },
1:              },
1:              false
1:              );
1: 	
1: 	goodStatement( conn, "drop table T_6852" );
1:   
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b5392db
/////////////////////////////////////////////////////////////////////////
1:         // can add an identity column to a table (DERBY-3888)
1:         goodStatement( conn,
1:         goodStatement( conn, "drop table T2_01_IST" );
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8612b0b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test that too much contention on an identity column raises a LOCK_TIMEOUT.
1:      * </p>
1:      */
1:     public  void    test_003_identityTimeout()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.locks.waitTimeout', '1' )" );
1:         goodStatement( conn, "create table t_timeout( a int generated always as identity, b int )" );
1:         conn.setAutoCommit( false );
1: 
1:         try {
1:             PreparedStatement   ps = chattyPrepare( conn, "select count(*) from sys.syssequences with rs\n" );
1:             getScalarInteger( ps );
1:             expectExecutionError( conn, LOCK_TIMEOUT, "insert into t_timeout( b ) values ( 1 )" );
1:         }
1:         finally
1:         {
1:             conn.setAutoCommit( true );
1:             goodStatement( conn, "call syscs_util.syscs_set_database_property( 'derby.locks.waitTimeout', '60' )" );
1:         }
1:     }
1:     /** Get a scalar integer result from a query */
1:     private int getScalarInteger( PreparedStatement ps ) throws Exception
1:     {
1:         ResultSet rs = ps.executeQuery();
1:         rs.next();
1:         int retval = rs.getInt( 1 );
1: 
1:         rs.close();
1:         ps.close();
1: 
1:         return retval;
1:     }
1: 
commit:a180287
/////////////////////////////////////////////////////////////////////////
1:              "create table T1_01_IST\n" +
1:         String  sequenceName = getIdentitySequenceName( conn, "T1_01_IST" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
/////////////////////////////////////////////////////////////////////////
1:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T1_01_IST' )",
/////////////////////////////////////////////////////////////////////////
1:         goodStatement( conn, "alter table T1_01_IST alter column a set increment by 15" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
1:         goodStatement( conn, "alter table T1_01_IST alter column a restart with 500" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
/////////////////////////////////////////////////////////////////////////
1:         goodStatement( conn, "drop table T1_01_IST" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
1:         goodStatement( conn, "create table T2_01_IST( b int )" );
1:               "alter table T2_01_IST add column a int generated always as identity ( start with 10, increment by 20 )" );
1:              "create table T3_03_IST\n" +
1:         sequenceName = getIdentitySequenceName( conn, "T3_03_IST" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
/////////////////////////////////////////////////////////////////////////
1:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T3_03_IST' )",
1:         goodStatement( conn, "alter table T3_03_IST drop column a" );
1:             "select\n" +
1:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
1:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
1:             "from sys.syssequences s, sys.sysschemas c\n" +
1:             "where s.schemaID = c.schemaID\n" +
1:              "and s.sequenceName = '" + sequenceName + "'",
1:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T3_03_IST' )"
1:     /**
1:      * <p>
1:      * Test ALTER TABLE behavior.
1:      * </p>
1:      */
1:     public  void    test_002_alterTable()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         //
1:         // Test that changing the increment value for an identity
1:         // column does not affect its current value. See DERBY-6579.
1:         //
1:         goodStatement( conn, "create table t1_002( a int, b int generated always as identity )" );
1:         goodStatement( conn, "insert into t1_002( a ) values ( 100 ), ( 200 )" );
1:         goodStatement( conn, "alter table t1_002 alter b set increment by 10" );
1:         goodStatement( conn, "insert into t1_002( a ) values ( 300 ), ( 400 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t1_002 order by a",
1:              new String[][]
1:              {
1:                  { "100", "1" },
1:                  { "200", "2" },
1:                  { "300", "3" },
1:                  { "400", "13" },
1:              },
1:              false
1:              );
1: 
1:         goodStatement( conn, "drop table t1_002" );
1:         goodStatement( conn, "create table t1_002( a int, b int generated always as identity )" );
1:         goodStatement( conn, "insert into t1_002( a ) values ( 100 ), ( 200 )" );
1:         goodStatement( conn, "delete from t1_002 where a = 200" );
1:         goodStatement( conn, "alter table t1_002 alter b set increment by 10" );
1:         goodStatement( conn, "insert into t1_002( a ) values ( 300 ), ( 400 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t1_002 order by a",
1:              new String[][]
1:              {
1:                  { "100", "1" },
1:                  { "300", "3" },
1:                  { "400", "13" },
1:              },
1:              false
1:              );
1: 
1:         // now restart the identity column at a later number
1:         goodStatement( conn, "alter table t1_002 alter b restart with 1000" );
1:         goodStatement( conn, "insert into t1_002( a ) values ( 500 ), ( 600 )" );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t1_002 order by a",
1:              new String[][]
1:              {
1:                  { "100", "1" },
1:                  { "300", "3" },
1:                  { "400", "13" },
1:                  { "500", "1000" },
1:                  { "600", "1010" },
1:              },
1:              false
1:              );
1:     }
1: 
1:     public  static String  getIdentitySequenceName( Connection conn, String tableName )
1:         PreparedStatement   ps = conn.prepareStatement( "select tableID from sys.systables where tablename = ?" );
commit:7fd0c6e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IdentitySequenceTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.Decorator;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * Test for identity columns backed by sequence generators.
1:  */
1: public class IdentitySequenceTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  BAD_NEXT_VALUE = "42XAR";
1:     private static  final   String  TABLE_DOESNT_HAVE_IDENTITY = "X0X81";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public IdentitySequenceTest( String name )
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite();
1: 
1:         Test    cleanTest = new CleanDatabaseTestSetup
1:             (
1:              TestConfiguration.embeddedSuite( IdentitySequenceTest.class )
1:              );
1: 
1:         suite.addTest( cleanTest );
1:         
1:         return suite;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test catalog changes.
1:      * </p>
1:      */
1:     public  void    test_001_catalog()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         goodStatement
1:             (
1:              conn,
0:              "create table t1_01\n" +
1:              "(\n" +
1:              "    a int generated always as identity ( start with 10, increment by 20 ),\n" +
1:              "    b int\n" +
1:              ")\n"
1:              );
0:         String  sequenceName = getIdentitySequenceName( conn, "t1_01" );
1: 
1:         // sequence should be in SYS, its name should be based on the table id,
1:         // and its start/stop/max/min/cycle values should be correct.
0:         String  sequenceStats =
0:             "select\n" +
0:             "    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n" +
0:             "    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n" +
0:             "from sys.syssequences s, sys.sysschemas c\n" +
0:             "where s.schemaID = c.schemaID\n";
1: 
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "20", "N" },
1:              },
1:              false
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
0:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T1_01' )",
1:              new String[][]
1:              {
1:                  { "10" },
1:              },
1:              false
1:              );
1: 
1:         // should not be able to issue a NEXT VALUE on the sequence generator which backs the identity column
1:         expectCompilationError
1:             ( conn, BAD_NEXT_VALUE, "values ( next value for sys.\"" + sequenceName + "\" )" );
1: 
1:         // alter the identity column and observe that the sequence generator changes
0:         goodStatement( conn, "alter table t1_01 alter column a set increment by 15" );
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "15", "N" },
1:              },
1:              false
1:              );
0:         goodStatement( conn, "alter table t1_01 alter column a restart with 500" );
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "500", "500", "-2147483648", "2147483647", "15", "N" },
1:              },
1:              false
1:              );
1:         
1:         // system sequence should disappear when the table is dropped
0:         goodStatement( conn, "drop table t1_01" );
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][] {},
1:              false
1:              );
1: 
0:         // can't add an identity column to a table
0:         goodStatement( conn, "create table t2_01( b int )" );
1:         expectCompilationError
0:             ( conn, CANT_ADD_IDENTITY,
0:               "alter table t2_01 add column a int generated always as identity ( start with 10, increment by 20 )" );
1: 
1:         // dropping an identity column should drop the sequence generator too
1:         goodStatement
1:             (
1:              conn,
0:              "create table t1_03\n" +
1:              "(\n" +
1:              "    a int generated always as identity ( start with 10, increment by 20 ),\n" +
1:              "    b int\n" +
1:              ")\n"
1:              );
0:         sequenceName = getIdentitySequenceName( conn, "t1_03" );
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][]
1:              {
1:                  { "SYS", sequenceName, "10", "10", "-2147483648", "2147483647", "20", "N" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
0:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T1_03' )",
1:              new String[][]
1:              {
1:                  { "10" },
1:              },
1:              false
1:              );
0:         goodStatement( conn, "alter table t1_03 drop column a" );
1:         assertResults
1:             (
1:              conn,
0:              sequenceStats,
1:              new String[][] {},
1:              false
1:              );
1:         expectExecutionError
1:             ( conn, TABLE_DOESNT_HAVE_IDENTITY,
0:              "values syscs_util.syscs_peek_at_identity( 'APP', 'T1_03' )"
1:               );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private String  getIdentitySequenceName( Connection conn, String tableName )
1:         throws Exception
1:     {
0:         PreparedStatement   ps = chattyPrepare
0:             ( conn, "select tableID from sys.systables where tablename = ?" );
1:         ps.setString( 1, tableName.toUpperCase() );
1:         ResultSet   rs = ps.executeQuery();
1:         rs.next();
1:         String  uuidString = rs.getString( 1 );
1:         rs.close();
1:         ps.close();
1: 
1:         return uuidToSequenceName( uuidString );
1:     }
1: 
1:     public  static  String  uuidToSequenceName( String uuidString )
1:     {
1:         return "U" + uuidString.replace( "-", "X" );
1:     }
1: 
1:     
1: }
============================================================================