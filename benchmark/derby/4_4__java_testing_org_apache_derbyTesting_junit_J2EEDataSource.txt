1:8ed08b2: /*
1:8ed08b2:  *
1:eddb67d:  * Derby - Class org.apache.derbyTesting.junit.J2EEDataSource
1:8ed08b2:  *
1:8ed08b2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8ed08b2:  * contributor license agreements.  See the NOTICE file distributed with
1:8ed08b2:  * this work for additional information regarding copyright ownership.
1:8ed08b2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8ed08b2:  * (the "License"); you may not use this file except in compliance with
1:8ed08b2:  * the License.  You may obtain a copy of the License at
1:8ed08b2:  *
1:8ed08b2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8ed08b2:  *
1:8ed08b2:  * Unless required by applicable law or agreed to in writing, 
1:8ed08b2:  * software distributed under the License is distributed on an 
1:8ed08b2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:8ed08b2:  * either express or implied. See the License for the specific 
1:8ed08b2:  * language governing permissions and limitations under the License.
1:8ed08b2:  */
1:8ed08b2: package org.apache.derbyTesting.junit;
1:8ed08b2: 
1:8ed08b2: import java.util.HashMap;
1:8ed08b2: 
1:8ed08b2: import javax.sql.ConnectionPoolDataSource;
1:8ed08b2: import javax.sql.XADataSource;
1:8ed08b2: 
1:8ed08b2: /**
1:8ed08b2:  * Utility methods related to J2EE JDBC DataSource objects.
1:8ed08b2:  * Separated out from JDBCDataSource to ensure that no
1:8ed08b2:  * ClassNotFoundExceptions are thrown with JSR169.
1:8ed08b2:  *
1:8ed08b2:  */
1:8ed08b2: public class J2EEDataSource {
1:8ed08b2:     
1:8ed08b2:     /**
1:e5ddb68:      * Return a new DataSource corresponding to the current
1:8ed08b2:      * configuration. The getPooledConnection() method is configured
1:8ed08b2:      * to use the user name and password from the configuration.
1:8ed08b2:      */
1:8ed08b2:     public static javax.sql.ConnectionPoolDataSource getConnectionPoolDataSource()
1:8ed08b2:     {
1:8ed08b2:         return getConnectionPoolDataSource(TestConfiguration.getCurrent(), (HashMap) null);
1:8ed08b2:     }
1:8ed08b2:     /**
1:8ed08b2:      * Create a new DataSource object setup from the passed in TestConfiguration.
1:8ed08b2:      * The getPooledConnection() method is configured
1:8ed08b2:      * to use the user name and password from the configuration.
1:8ed08b2:      */
1:8ed08b2:     static ConnectionPoolDataSource getConnectionPoolDataSource(
1:8ed08b2:             TestConfiguration config,
1:8ed08b2:             HashMap beanProperties)
1:8ed08b2:     {
1:8ed08b2:         if (beanProperties == null)
1:8ed08b2:              beanProperties = JDBCDataSource.getDataSourceProperties(config);
1:8ed08b2:         
1:8ed08b2:         String dataSourceClass = config.getJDBCClient().getConnectionPoolDataSourceClassName();
1:8ed08b2:         
1:8ed08b2:         return (ConnectionPoolDataSource) JDBCDataSource.getDataSourceObject(
1:8ed08b2:                 dataSourceClass, beanProperties);
1:8ed08b2:     }
1:8ed08b2:     
1:8ed08b2:     /**
1:e5ddb68:      * Return a new XA DataSource corresponding to the current
1:8ed08b2:      * configuration. The getXAConnection() method is configured
1:8ed08b2:      * to use the user name and password from the configuration.
1:8ed08b2:      */
1:8ed08b2:     public static XADataSource getXADataSource()
1:8ed08b2:     {
1:8ed08b2:         return getXADataSource(TestConfiguration.getCurrent(), (HashMap) null);
1:8ed08b2:     }
1:bb29639:     
1:bb29639:     
1:8ed08b2:     /**
1:bb29639:      * Set a bean property for a data source. This code can be used
1:bb29639:      * on any data source type.
1:bb29639:      * @param ds DataSource to have property set
1:bb29639:      * @param property name of property.
1:bb29639:      * @param value Value, type is derived from value's class.
1:bb29639:      */
1:bb29639:     public static void setBeanProperty(Object ds, String property, Object value) {
1:bb29639:        // reuse code from JDBCDataSource
1:bb29639:         JDBCDataSource.setBeanProperty(ds, property, value);
1:8ed08b2:     }
1:bb29639:     
1:bb29639:     /**
1:8ed08b2:      * Create a new DataSource object setup from the passed in TestConfiguration.
1:8ed08b2:      * The getXAConnection() method is configured
1:8ed08b2:      * to use the user name and password from the configuration.
1:8ed08b2:      */
1:8ed08b2:     static XADataSource getXADataSource(TestConfiguration config,
1:8ed08b2:             HashMap beanProperties)
1:8ed08b2:     {
1:8ed08b2:         if (beanProperties == null)
1:8ed08b2:              beanProperties = JDBCDataSource.getDataSourceProperties(config);
1:8ed08b2:         
1:8ed08b2:         String dataSourceClass = config.getJDBCClient().getXADataSourceClassName();
1:8ed08b2:         
1:8ed08b2:         return (XADataSource) JDBCDataSource.getDataSourceObject(
1:8ed08b2:                 dataSourceClass, beanProperties);
1:8269b78:     }
1:8ed08b2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:8269b78
/////////////////////////////////////////////////////////////////////////
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eddb67d
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.junit.J2EEDataSource
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e5ddb68
/////////////////////////////////////////////////////////////////////////
1:      * Return a new DataSource corresponding to the current
/////////////////////////////////////////////////////////////////////////
1:      * Return a new XA DataSource corresponding to the current
commit:8ed08b2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class org.apache.derbyTesting.junit.JDBCDataSource
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.util.HashMap;
1: 
1: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.XADataSource;
1: 
1: /**
1:  * Utility methods related to J2EE JDBC DataSource objects.
1:  * Separated out from JDBCDataSource to ensure that no
1:  * ClassNotFoundExceptions are thrown with JSR169.
1:  *
1:  */
1: public class J2EEDataSource {
1:     
1:     /**
0:      * Return a DataSource corresponding to the current
1:      * configuration. The getPooledConnection() method is configured
1:      * to use the user name and password from the configuration.
1:      */
1:     public static javax.sql.ConnectionPoolDataSource getConnectionPoolDataSource()
1:     {
1:         return getConnectionPoolDataSource(TestConfiguration.getCurrent(), (HashMap) null);
1:     }
1:     /**
1:      * Create a new DataSource object setup from the passed in TestConfiguration.
1:      * The getPooledConnection() method is configured
1:      * to use the user name and password from the configuration.
1:      */
1:     static ConnectionPoolDataSource getConnectionPoolDataSource(
1:             TestConfiguration config,
1:             HashMap beanProperties)
1:     {
1:         if (beanProperties == null)
1:              beanProperties = JDBCDataSource.getDataSourceProperties(config);
1:         
1:         String dataSourceClass = config.getJDBCClient().getConnectionPoolDataSourceClassName();
1:         
1:         return (ConnectionPoolDataSource) JDBCDataSource.getDataSourceObject(
1:                 dataSourceClass, beanProperties);
1:     }
1:     
1:     /**
0:      * Return an XA DataSource corresponding to the current
1:      * configuration. The getXAConnection() method is configured
1:      * to use the user name and password from the configuration.
1:      */
1:     public static XADataSource getXADataSource()
1:     {
1:         return getXADataSource(TestConfiguration.getCurrent(), (HashMap) null);
1:     }
1:     /**
1:      * Create a new DataSource object setup from the passed in TestConfiguration.
1:      * The getXAConnection() method is configured
1:      * to use the user name and password from the configuration.
1:      */
1:     static XADataSource getXADataSource(TestConfiguration config,
1:             HashMap beanProperties)
1:     {
1:         if (beanProperties == null)
1:              beanProperties = JDBCDataSource.getDataSourceProperties(config);
1:         
1:         String dataSourceClass = config.getJDBCClient().getXADataSourceClassName();
1:         
1:         return (XADataSource) JDBCDataSource.getDataSourceObject(
1:                 dataSourceClass, beanProperties);
1:     }
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:bb29639
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     /**
1:      * Set a bean property for a data source. This code can be used
1:      * on any data source type.
1:      * @param ds DataSource to have property set
1:      * @param property name of property.
1:      * @param value Value, type is derived from value's class.
1:      */
1:     public static void setBeanProperty(Object ds, String property, Object value) {
1:        // reuse code from JDBCDataSource
1:         JDBCDataSource.setBeanProperty(ds, property, value);
0:     }
1:     
============================================================================