3:59a5a70: /**
1:59a5a70:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest
1:59a5a70:  *  
1:59a5a70:  * Licensed to the Apache Software Foundation (ASF) under one
1:59a5a70:  * or more contributor license agreements.  See the NOTICE file
1:59a5a70:  * distributed with this work for additional information
1:59a5a70:  * regarding copyright ownership.  The ASF licenses this file
1:59a5a70:  * to you under the Apache License, Version 2.0 (the
1:59a5a70:  * "License"); you may not use this file except in compliance
1:59a5a70:  * with the License.  You may obtain a copy of the License at
1:59a5a70:  *
1:59a5a70:  *   http://www.apache.org/licenses/LICENSE-2.0
1:59a5a70:  *
1:59a5a70:  * Unless required by applicable law or agreed to in writing,
1:59a5a70:  * software distributed under the License is distributed on an
1:59a5a70:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:59a5a70:  * KIND, either express or implied.  See the License for the
1:59a5a70:  * specific language governing permissions and limitations
1:59a5a70:  * under the License.
3:59a5a70:  */
11:59a5a70: 
1:59a5a70: package org.apache.derbyTesting.functionTests.tests.lang;
1:59a5a70: 
1:59a5a70: import java.io.File;
1:59a5a70: import java.security.AccessControlException;
1:59a5a70: import java.sql.CallableStatement;
1:1ae02c9: import java.sql.Connection;
1:59a5a70: import java.sql.SQLException;
1:59a5a70: import junit.framework.Test;
1:59a5a70: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:530c877: import org.apache.derbyTesting.junit.DerbyConstants;
1:59a5a70: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:59a5a70: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:59a5a70: import org.apache.derbyTesting.junit.TestConfiguration;
1:59a5a70: 
1:59a5a70: /**
1:59a5a70:  * Test the dynamic reloading of the security policy file while the
1:59a5a70:  * engine is still running.
1:59a5a70:  */
1:59a5a70: public class SecurityPolicyReloadingTest extends BaseJDBCTestCase {
1:59a5a70: 
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
3:59a5a70:     //
1:59a5a70:     // CONSTANTS
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     private static  final   String  RELOADABLE_INITIAL_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.initial.policy";
1:59a5a70:     private static  final   String  RELOADABLE_MODIFIED_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.modified.policy";
1:59a5a70:     private static  final   String  UNRELOADABLE_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.unreloadable.policy";
1:59a5a70:     private static  final   String  TARGET_POLICY = "server.policy";
1:59a5a70: 
1:59a5a70:     private static  final   String  NON_DBO_USER = "NON_DBO_USER";
1:59a5a70:     private static  final   String  PASSWORD_TOKEN = "PASSWORD_TOKEN";
1:59a5a70:     
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // INNER CLASSES
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // STATE
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // CONSTRUCTORS
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     public  SecurityPolicyReloadingTest
1:59a5a70:         (
1:59a5a70:          )
6:59a5a70:     {
1:59a5a70:         super( "testPolicyReloading" );
6:59a5a70:     }
1:59a5a70: 
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // JUnit MACHINERY
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     public static Test suite()
1:59a5a70:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("SecurityPolicyReloadingTest");
1:59a5a70: 
1:58a3f06:         // The reloaded policy requires restricted property-reading permissions,
1:58a3f06:         // which is easy to do if you can subdivide the protection domains by
1:58a3f06:         // jar file but is not easy to do with all of the testing and server
1:58a3f06:         // classes jumbled together in the same class tree.
1:58a3f06:         if ( !TestConfiguration.loadingFromJars() ) { return suite; }
1:58a3f06: 
1:59a5a70:         suite.addTest( decorateTest() );
1:59a5a70: 
1:59a5a70:         return suite;
1:59a5a70:     }
1:59a5a70: 
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // TEST DECORATION
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     /**
1:59a5a70:      * Add decorators to a test run. Context is established in the reverse order
1:59a5a70:      * that decorators are declared here. That is, decorators compose in reverse
1:59a5a70:      * order. The order of the setup methods is:
1:59a5a70:      *
1:59a5a70:      * <ul>
1:59a5a70:      * <li>Copy security policy to visible location.</li>
1:59a5a70:      * <li>Setup authorization-enabling properties.</li>
1:59a5a70:      * <li>Install a security manager.</li>
1:59a5a70:      * <li>Run the tests.</li>
1:59a5a70:      * </ul>
1:59a5a70:      */
1:59a5a70:     private static Test decorateTest()
1:59a5a70:     {
1:b32256d:         Test test = new SecurityPolicyReloadingTest();
1:59a5a70: 
1:59a5a70:         //
1:59a5a70:         // Install a security manager using the initial policy file.
1:59a5a70:         //
1:b32256d:         test = new SecurityManagerSetup(test, makeServerPolicyName());
1:59a5a70:         
1:59a5a70:         //
1:59a5a70:         // Set up authorization with a DBO and non-DBO user
1:59a5a70:         //
1:59a5a70:         test = TestConfiguration.sqlAuthorizationDecorator
1:59a5a70:             (
1:59a5a70:              test,
1:59a5a70:              new String[] { NON_DBO_USER },
1:59a5a70:              PASSWORD_TOKEN
1:59a5a70:              );
1:59a5a70:         
1:59a5a70:         //
1:59a5a70:         // Copy over the initial policy file we want to use.
1:59a5a70:         //
1:59a5a70:         test = new SupportFilesSetup
1:59a5a70:             (
1:59a5a70:              test,
1:59a5a70:              null,
1:b32256d:              new String[] { getSourcePolicy() },
1:59a5a70:              null,
1:b32256d:              new String[] { makeTargetPolicyStub() }
1:59a5a70:              );
1:59a5a70: 
1:739bf87:         // No need to run with default testing policy file because we install our 
1:739bf87:         // own initial policy file.
1:739bf87:         test = SecurityManagerSetup.noSecurityManager(test);
1:59a5a70:         return test;
1:59a5a70:     }
1:59a5a70: 
1:59a5a70:         
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // JUnit TESTS
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     
1:59a5a70:     /**
1:59a5a70:      * Verify that policy file reloading is allowed and forbidden as expected.
1:59a5a70:      */
1:59a5a70:     public void testPolicyReloading()
4:59a5a70:         throws Exception
1:59a5a70:     {
1:59a5a70:         //getTestConfiguration().setVerbosity( true );
1:59a5a70: 
1:59a5a70:         doPolicyReloadingIsGranted();
1:59a5a70:         doPolicyReloadingIsNotGranted();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     ////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // getPolicy() PRIVILEGE GRANTED
1:59a5a70:     //
1:59a5a70:     ////////////////////////////////////////////////////
1:59a5a70:     
1:59a5a70:     /**
1:59a5a70:      * Verify that the DBA has the power to reload the security policy file and
1:59a5a70:      * that a non-DBA does not have this power.
1:59a5a70:      */
1:59a5a70:     private void doPolicyReloadingIsGranted()
1:59a5a70:         throws Exception
1:59a5a70:     {
1:59a5a70:         dbaTest();
1:59a5a70:         nonDbaTest();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     /**
1:59a5a70:      * Verify that the DBA has the power to reload the security policy file.
1:59a5a70:      */
1:59a5a70:     private void dbaTest()
1:59a5a70:         throws Exception
1:59a5a70:     {
1:530c877:         Connection  conn = openUserConnection( DerbyConstants.TEST_DBO );
1:59a5a70: 
1:59a5a70:         assertTrue( "Initially, should be able to read property.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         // Now prove that the DBO can reload the policy file.
1:59a5a70:         changePolicyFile( conn, RELOADABLE_MODIFIED_SOURCE_POLICY, true, null );
1:59a5a70:         assertFalse( "Policy file changed. Should not be able to read the property.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         // Return to initial policy file.
1:59a5a70:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, true, null );
1:59a5a70:         assertTrue( "Reverted to initial policy. Should be able to read the property again.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         conn.close();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     /**
1:59a5a70:      * Verify that the non-DBA does not have the power to reload the security policy file.
1:59a5a70:      */
1:59a5a70:     private void nonDbaTest()
1:59a5a70:         throws Exception
1:59a5a70:     {
1:8f3b0b9:         String          reservedToDBO = "42504";
1:59a5a70:         Connection  conn = openUserConnection( NON_DBO_USER );
1:59a5a70: 
1:59a5a70:         assertTrue( "Initially, should be able to read property.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         // Now prove that the non-DBO can't reload the policy file.
1:59a5a70:         changePolicyFile( conn, RELOADABLE_MODIFIED_SOURCE_POLICY, false, reservedToDBO );
1:59a5a70:         assertTrue( "Policy file not changed. Should still be able to read the property.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         // Return to initial policy file.
1:59a5a70:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, false, reservedToDBO );
1:59a5a70:         assertTrue( "Reverted to initial policy. Should still be able to read the property again.", canReadProperty() );
1:59a5a70: 
1:59a5a70:         conn.close();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     /////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // getPolicy() IS NOT GRANTED
1:59a5a70:     //
1:59a5a70:     /////////////////////////////////////////////
1:59a5a70:     
1:59a5a70:     /**
1:59a5a70:      * Verify that even the DBA can't reload the policy file if getPolicy() has
1:59a5a70:      * not been granted.
1:59a5a70:      */
1:59a5a70:     private void doPolicyReloadingIsNotGranted()
1:59a5a70:         throws Exception
1:59a5a70:     {
1:59a5a70:         String          insufficientPrivilege = "XK000";
1:530c877:         Connection  conn = openUserConnection( DerbyConstants.TEST_DBO );
1:59a5a70: 
1:59a5a70:         // First change to a policy which does not permit policy reloading
1:59a5a70:         changePolicyFile( conn, UNRELOADABLE_SOURCE_POLICY, true, null );
1:59a5a70: 
1:59a5a70:         // Verify that we get an exception when we try to reload the policy file.
1:59a5a70:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, false, insufficientPrivilege );
1:59a5a70: 
1:59a5a70:         conn.close();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // Object OVERLOADS
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70: 
1:59a5a70:     public String toString()
1:59a5a70:     {
1:59a5a70:         StringBuffer    buffer = new StringBuffer();
1:59a5a70: 
1:59a5a70:         buffer.append( "SecurityPolicyReloadingTest( " );
1:59a5a70:         buffer.append( " )" );
1:59a5a70: 
1:59a5a70:         return buffer.toString();
1:59a5a70:     }
1:59a5a70:     
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:     //
1:59a5a70:     // MINIONS
1:59a5a70:     //
1:59a5a70:     ///////////////////////////////////////////////////////////////////////////////////
1:59a5a70:      
1:59a5a70:     /**
1:59a5a70:      * Return true if we have sufficient privilege to read a special property.
1:59a5a70:      */
1:59a5a70:     private boolean canReadProperty()
1:59a5a70:         throws Exception
1:59a5a70:     {
1:892e782:         try {
1:3f5c48a:             getSystemProperty("SecurityPolicyReloadingTest.property");
1:59a5a70:             return true;
1:59a5a70:         }
1:59a5a70:         catch (AccessControlException ace) { return false; }
1:59a5a70:     }
1:59a5a70: 
1:59a5a70:     /**
1:59a5a70:      * Try to change the policy file.
1:59a5a70:      */
1:59a5a70:     private void changePolicyFile( Connection conn, String newPolicyFileName, boolean shouldSucceed, String expectedSQLState )
1:59a5a70:         throws Exception
1:59a5a70:     {
1:59a5a70:         boolean     reloaded = true;
1:59a5a70:         
1:59a5a70:         writePolicyFile( newPolicyFileName );
1:59a5a70: 
1:59a5a70:         CallableStatement   cs = conn.prepareCall( "call SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY()" );
1:59a5a70: 
1:59a5a70:         try {
1:59a5a70:             cs.execute();
1:59a5a70:         }
1:59a5a70:         catch (SQLException se)
1:59a5a70:         {
1:59a5a70:             reloaded = false;
1:59a5a70: 
1:59a5a70:             assertSQLState( expectedSQLState, se );
1:59a5a70:         }
1:59a5a70:     
1:59a5a70:         assertEquals( shouldSucceed, reloaded );
1:59a5a70:     }
1:59a5a70: 
1:59a5a70:     /**
1:59a5a70:      * Write a new policy file.
1:59a5a70:      */
1:59a5a70:     private void writePolicyFile( String newPolicyFileName )
1:59a5a70:         throws Exception
1:59a5a70:     {
1:59a5a70:         SupportFilesSetup.privCopyFiles
1:59a5a70:              (
1:59a5a70:               SupportFilesSetup.EXTINOUT,
1:59a5a70:               new String[] { newPolicyFileName },
1:59a5a70:               new String[] { makeTargetPolicyStub() }
1:59a5a70:              );
1:59a5a70:    }
1:59a5a70: 
1:59a5a70:     /**
1:59a5a70:      * Construct the name of the server policy file.
1:59a5a70:      */
1:b32256d:     private static String makeServerPolicyName()
1:59a5a70:     {
1:59a5a70:         try {
1:892e782:             String  userDir = getSystemProperty( "user.dir" );
1:892e782:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + makeTargetPolicyStub();
1:892e782:             File      file = new File( fileName );
1:b32256d:             return file.toURI().toURL().toExternalForm();
1:892e782:         }
1:892e782:         catch (Exception e)
1:892e782:         {
1:892e782:             System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
1:892e782: 
1:892e782:             return null;
1:892e782:         }
1:59a5a70:     }
1:892e782: 
1:59a5a70:     /**
1:59a5a70:      * Get the stub name (no directory spec) for the server policy file we create.
1:59a5a70:      */
1:b32256d:     private static String makeTargetPolicyStub()
1:59a5a70:     {
1:59a5a70:         return TARGET_POLICY;
1:59a5a70:    }
1:59a5a70: 
1:59a5a70:     /**
1:59a5a70:      * Get the source file which has the correct permissions.
1:59a5a70:      */
1:b32256d:     private static String getSourcePolicy()
1:59a5a70:     {
1:59a5a70:         return RELOADABLE_INITIAL_SOURCE_POLICY;
1:59a5a70:     }
1:59a5a70:     
1:59a5a70: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("SecurityPolicyReloadingTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             getSystemProperty("SecurityPolicyReloadingTest.property");
commit:b32256d
/////////////////////////////////////////////////////////////////////////
1:         Test test = new SecurityPolicyReloadingTest();
1:         test = new SecurityManagerSetup(test, makeServerPolicyName());
/////////////////////////////////////////////////////////////////////////
1:              new String[] { getSourcePolicy() },
1:              new String[] { makeTargetPolicyStub() }
/////////////////////////////////////////////////////////////////////////
1:     private static String makeServerPolicyName()
1:             return file.toURI().toURL().toExternalForm();
/////////////////////////////////////////////////////////////////////////
1:     private static String makeTargetPolicyStub()
/////////////////////////////////////////////////////////////////////////
1:     private static String getSourcePolicy()
commit:8f3b0b9
/////////////////////////////////////////////////////////////////////////
1:         String          reservedToDBO = "42504";
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:afe4dfd
/////////////////////////////////////////////////////////////////////////
commit:530c877
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DerbyConstants;
/////////////////////////////////////////////////////////////////////////
1:         Connection  conn = openUserConnection( DerbyConstants.TEST_DBO );
/////////////////////////////////////////////////////////////////////////
1:         Connection  conn = openUserConnection( DerbyConstants.TEST_DBO );
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:739bf87
/////////////////////////////////////////////////////////////////////////
1:         // No need to run with default testing policy file because we install our 
1:         // own initial policy file.
1:         test = SecurityManagerSetup.noSecurityManager(test);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:892e782
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String  userDir = getSystemProperty( "user.dir" );
1:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + makeTargetPolicyStub();
1:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
1:         catch (Exception e)
1:         {
1:             System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
1: 
1:             return null;
1:         }
commit:58a3f06
/////////////////////////////////////////////////////////////////////////
1:         // The reloaded policy requires restricted property-reading permissions,
1:         // which is easy to do if you can subdivide the protection domains by
1:         // jar file but is not easy to do with all of the testing and server
1:         // classes jumbled together in the same class tree.
1:         if ( !TestConfiguration.loadingFromJars() ) { return suite; }
1: 
commit:59a5a70
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.security.AccessControlException;
0: import java.security.AccessController;
0: import java.security.PrivilegedExceptionAction;
0: import java.sql.Connection;
1: import java.sql.CallableStatement;
1: import java.sql.SQLException;
1: 
1: import junit.framework.Test;
0: import junit.extensions.TestSetup;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test the dynamic reloading of the security policy file while the
1:  * engine is still running.
1:  */
1: public class SecurityPolicyReloadingTest extends BaseJDBCTestCase {
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  RELOADABLE_INITIAL_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.initial.policy";
1:     private static  final   String  RELOADABLE_MODIFIED_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.modified.policy";
1:     private static  final   String  UNRELOADABLE_SOURCE_POLICY = "functionTests/tests/lang/SecurityPolicyReloadingTest.unreloadable.policy";
1:     private static  final   String  TARGET_POLICY = "server.policy";
1: 
1:     private static  final   String  NON_DBO_USER = "NON_DBO_USER";
1:     private static  final   String  PASSWORD_TOKEN = "PASSWORD_TOKEN";
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // INNER CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     public  static  class   PropReadingAction   implements PrivilegedExceptionAction
1:     {
0:         private final   String  _propName;
1:         
0:         public     PropReadingAction( String propName )
1:         {
0:             _propName = propName;
1:         }
1: 
1:         //
0:         // This will throw an AccessControlException if we don't have
0:         // privilege to read the property.
1:         //
0:         public  Object  run()
1:         throws Exception
1:         {
0:             return System.getProperty( _propName );
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  SecurityPolicyReloadingTest
1:         (
1:          )
1:     {
1:         super( "testPolicyReloading" );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit MACHINERY
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public static Test suite()
1:     {
0:         TestSuite       suite = new TestSuite("SecurityPolicyReloadingTest");
1: 
1:         suite.addTest( decorateTest() );
1: 
1:         return suite;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TEST DECORATION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Add decorators to a test run. Context is established in the reverse order
1:      * that decorators are declared here. That is, decorators compose in reverse
1:      * order. The order of the setup methods is:
1:      *
1:      * <ul>
1:      * <li>Copy security policy to visible location.</li>
1:      * <li>Setup authorization-enabling properties.</li>
1:      * <li>Install a security manager.</li>
1:      * <li>Run the tests.</li>
1:      * </ul>
1:      */
1:     private static Test decorateTest()
1:     {
0:         SecurityPolicyReloadingTest undecoratedTest = new SecurityPolicyReloadingTest();
0:         Test                                        test = undecoratedTest;
1: 
1:         //
1:         // Install a security manager using the initial policy file.
1:         //
0:         test = new SecurityManagerSetup( test, undecoratedTest.makeServerPolicyName() );
1:         
1:         //
1:         // Set up authorization with a DBO and non-DBO user
1:         //
1:         test = TestConfiguration.sqlAuthorizationDecorator
1:             (
1:              test,
1:              new String[] { NON_DBO_USER },
1:              PASSWORD_TOKEN
1:              );
1:         
1:         //
1:         // Copy over the initial policy file we want to use.
1:         //
1:         test = new SupportFilesSetup
1:             (
1:              test,
1:              null,
0:              new String[] { undecoratedTest.getSourcePolicy() },
1:              null,
0:              new String[] { undecoratedTest.makeTargetPolicyStub() }
1:              );
1: 
1:         return test;
1:     }
1: 
1:         
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Verify that policy file reloading is allowed and forbidden as expected.
1:      */
1:     public void testPolicyReloading()
1:         throws Exception
1:     {
1:         //getTestConfiguration().setVerbosity( true );
1: 
1:         doPolicyReloadingIsGranted();
1:         doPolicyReloadingIsNotGranted();
1:     }
1:     
1:     ////////////////////////////////////////////////////
1:     //
1:     // getPolicy() PRIVILEGE GRANTED
1:     //
1:     ////////////////////////////////////////////////////
1:     
1:     /**
1:      * Verify that the DBA has the power to reload the security policy file and
1:      * that a non-DBA does not have this power.
1:      */
1:     private void doPolicyReloadingIsGranted()
1:         throws Exception
1:     {
1:         dbaTest();
1:         nonDbaTest();
1:     }
1:     
1:     /**
1:      * Verify that the DBA has the power to reload the security policy file.
1:      */
1:     private void dbaTest()
1:         throws Exception
1:     {
0:         Connection  conn = openUserConnection( TestConfiguration.TEST_DBO );
1: 
1:         assertTrue( "Initially, should be able to read property.", canReadProperty() );
1: 
1:         // Now prove that the DBO can reload the policy file.
1:         changePolicyFile( conn, RELOADABLE_MODIFIED_SOURCE_POLICY, true, null );
1:         assertFalse( "Policy file changed. Should not be able to read the property.", canReadProperty() );
1: 
1:         // Return to initial policy file.
1:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, true, null );
1:         assertTrue( "Reverted to initial policy. Should be able to read the property again.", canReadProperty() );
1: 
1:         conn.close();
1:     }
1:     
1:     /**
1:      * Verify that the non-DBA does not have the power to reload the security policy file.
1:      */
1:     private void nonDbaTest()
1:         throws Exception
1:     {
0:         String          reservedToDBO = "2850A";
1:         Connection  conn = openUserConnection( NON_DBO_USER );
1: 
1:         assertTrue( "Initially, should be able to read property.", canReadProperty() );
1: 
1:         // Now prove that the non-DBO can't reload the policy file.
1:         changePolicyFile( conn, RELOADABLE_MODIFIED_SOURCE_POLICY, false, reservedToDBO );
1:         assertTrue( "Policy file not changed. Should still be able to read the property.", canReadProperty() );
1: 
1:         // Return to initial policy file.
1:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, false, reservedToDBO );
1:         assertTrue( "Reverted to initial policy. Should still be able to read the property again.", canReadProperty() );
1: 
1:         conn.close();
1:     }
1:     
1:     /////////////////////////////////////////////
1:     //
1:     // getPolicy() IS NOT GRANTED
1:     //
1:     /////////////////////////////////////////////
1:     
1:     /**
1:      * Verify that even the DBA can't reload the policy file if getPolicy() has
1:      * not been granted.
1:      */
1:     private void doPolicyReloadingIsNotGranted()
1:         throws Exception
1:     {
1:         String          insufficientPrivilege = "XK000";
0:         Connection  conn = openUserConnection( TestConfiguration.TEST_DBO );
1: 
1:         // First change to a policy which does not permit policy reloading
1:         changePolicyFile( conn, UNRELOADABLE_SOURCE_POLICY, true, null );
1: 
1:         // Verify that we get an exception when we try to reload the policy file.
1:         changePolicyFile( conn, RELOADABLE_INITIAL_SOURCE_POLICY, false, insufficientPrivilege );
1: 
1:         conn.close();
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Object OVERLOADS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
1:         StringBuffer    buffer = new StringBuffer();
1: 
1:         buffer.append( "SecurityPolicyReloadingTest( " );
1:         buffer.append( " )" );
1: 
1:         return buffer.toString();
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:      
1:     /**
1:      * Return true if we have sufficient privilege to read a special property.
1:      */
1:     private boolean canReadProperty()
1:         throws Exception
1:     {
1:         try {
0:             String  propValue = readProperty( "SecurityPolicyReloadingTest.property" );
1: 
1:             return true;
1:         }
1:         catch (AccessControlException ace) { return false; }
1:     }
1: 
1:     /**
0:      * Read a system property.
1:      */
0:     public  static   String readProperty( String propName )
1:         throws Exception
1:     {
0:         PropReadingAction   action = new PropReadingAction( propName );
1:         
0:         return (String) AccessController.doPrivileged( action );
1:     }
1: 
1:     /**
0:      * A handy method for debugging.
1:      */
0:     public static void sleep( long numberOfSeconds )
1:         throws Exception
1:     {
0:         Thread.currentThread().sleep( numberOfSeconds * (1000L) );
1:     }
1: 
1:     /**
1:      * Try to change the policy file.
1:      */
1:     private void changePolicyFile( Connection conn, String newPolicyFileName, boolean shouldSucceed, String expectedSQLState )
1:         throws Exception
1:     {
1:         boolean     reloaded = true;
1:         
1:         writePolicyFile( newPolicyFileName );
1: 
1:         CallableStatement   cs = conn.prepareCall( "call SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY()" );
1: 
1:         try {
1:             cs.execute();
1:         }
1:         catch (SQLException se)
1:         {
1:             reloaded = false;
1: 
1:             assertSQLState( expectedSQLState, se );
1:         }
1:     
1:         assertEquals( shouldSucceed, reloaded );
1:     }
1: 
1:     /**
1:      * Write a new policy file.
1:      */
1:     private void writePolicyFile( String newPolicyFileName )
1:         throws Exception
1:     {
1:         SupportFilesSetup.privCopyFiles
1:              (
1:               SupportFilesSetup.EXTINOUT,
1:               new String[] { newPolicyFileName },
1:               new String[] { makeTargetPolicyStub() }
1:              );
1:    }
1: 
1:     /**
1:      * Construct the name of the server policy file.
1:      */
0:     private String makeServerPolicyName()
1:     {
0:         return  SupportFilesSetup.EXTINOUT + File.separator + makeTargetPolicyStub();
1:     }
1: 
1:     /**
1:      * Get the stub name (no directory spec) for the server policy file we create.
1:      */
0:     private String makeTargetPolicyStub()
1:     {
1:         return TARGET_POLICY;
1:    }
1: 
1:     /**
1:      * Get the source file which has the correct permissions.
1:      */
0:     private String getSourcePolicy()
1:     {
1:         return RELOADABLE_INITIAL_SOURCE_POLICY;
1:     }
1:     
1: }
============================================================================