1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.IndexSetChanger
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:   Perform Index maintenace associated with DML operations for a table's
1:eac0369:   indexes.
1:eac0369:   */
1:ca6ed17: class IndexSetChanger
1:eac0369: {
1:eac0369: 	//
1:eac0369: 	//Index row generators.
1:eac0369: 	IndexRowGenerator[] irgs;
1:eac0369: 	//
1:eac0369: 	//Index conglomerate ids. indexCIDS[ix] is the conglomerate id
1:eac0369: 	//for the index with IndexRowGenerator irgs[ix].
1:eac0369: 	long[] indexCIDS;
1:eac0369: 	private DynamicCompiledOpenConglomInfo[] indexDCOCIs;
1:eac0369: 	private StaticCompiledOpenConglomInfo[] indexSCOCIs;
1:eac0369: 	String[] indexNames;
1:eac0369: 	ConglomerateController baseCC;
1:eac0369: 	FormatableBitSet		baseRowReadMap;
1:eac0369: 
1:eac0369: 	// TransactionController for management of temporary conglomerates
1:eac0369: 	TransactionController tc;
1:eac0369: 
1:eac0369: 	TemporaryRowHolderImpl rowHolder;
1:eac0369: 
1:eac0369: 	IndexChanger[] indexChangers;
1:eac0369: 
1:eac0369: 	// Lock mode for the indexes
1:eac0369: 	private int lockMode;
1:eac0369: 
1:eac0369: 	//Set on open.
1:eac0369: 	boolean[] fixOnUpdate;
1:eac0369: 	
1:eac0369: 	boolean isOpen = false;
1:eac0369: 	
1:eac0369: 	//
1:eac0369: 	//Name for the set of no indexes
1:eac0369: 	private static final int NO_INDEXES 		= 0;
1:eac0369: 	//
1:eac0369: 	//Name for the set of indexes we change on a update operation
1:eac0369: 	private static final int UPDATE_INDEXES  	= 1;
1:eac0369: 	//
1:eac0369: 	//Name for the set of all indexes.
1:eac0369: 	private static final int ALL_INDEXES		= 2;
1:eac0369: 	
1:eac0369: 	//
1:eac0369: 	//To start, no indexes are open.
1:eac0369: 	private int whatIsOpen = NO_INDEXES;
1:eac0369: 
1:eac0369: 	private int isolationLevel;
1:48d2629: 	private final Activation activation;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Create a new IndexSetChanger
1:eac0369: 
1:eac0369: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1:eac0369: 	    positions in this array as local id's for indexes.
1:eac0369: 	  @param indexCIDS the conglomerate ids for the table's indexes.
1:eac0369: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1:eac0369: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1:eac0369: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param baseCC a ConglomerateController for the base table.
1:eac0369: 	  @param tc	a TransactionController for managing temporary conglomerates
1:eac0369: 	  @param lockMode	The lock mode (granularity) for the indexes.
1:eac0369: 	  @param baseRowReadMap Map of columns read in.  1 based.
1:eac0369: 	  @param isolationLevel	Isolation level to use
1:eac0369: 	  @param activation	Current activation
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public IndexSetChanger(IndexRowGenerator[] irgs,
1:eac0369: 						   long[] indexCIDS,
1:eac0369: 						   StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:eac0369: 						   DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1:eac0369: 						   String[] indexNames,
1:eac0369: 						   ConglomerateController baseCC,
1:eac0369: 						   TransactionController tc,
1:eac0369: 						   int lockMode,
1:eac0369: 						   FormatableBitSet baseRowReadMap,
1:eac0369: 						   int isolationLevel,
1:eac0369: 						   Activation activation)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		this.irgs = irgs;
1:eac0369: 		this.indexCIDS = indexCIDS;
1:eac0369: 		this.indexSCOCIs = indexSCOCIs;
1:eac0369: 		this.indexDCOCIs = indexDCOCIs;
1:eac0369: 		this.indexNames = indexNames;
1:eac0369: 		this.baseCC = baseCC;
1:eac0369: 		this.tc = tc;
1:eac0369: 		this.lockMode = lockMode;
1:eac0369: 		this.baseRowReadMap = baseRowReadMap;
1:eac0369: 		this.isolationLevel = isolationLevel;
1:eac0369: 		this.activation = activation;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(indexCIDS != null, "indexCIDS is null");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		indexChangers = new IndexChanger[irgs.length];
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	  Open this IndexSetchanger.
1:eac0369: 
1:eac0369: 	  @param fixOnUpdate indicates which indexes to correct due
1:eac0369: 	    to an update. The entries in this array must be in the
1:eac0369: 		same order as the entries in the irgs array that was
1:eac0369: 		passed to the constructor.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void open(boolean[] fixOnUpdate)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		    SanityManager.ASSERT( ! isOpen, "IndexSetChanger already open");
1:eac0369: 
1:eac0369: 		this.fixOnUpdate = fixOnUpdate;
1:eac0369: 		isOpen = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the row holder for all underlying changers to use.
1:eac0369: 	 * If the row holder is set, underlying changers  wont bother 
1:eac0369: 	 * saving copies of rows needed for deferred
1:eac0369: 	 * processing.  Also, it will never close the
1:eac0369: 	 * passed in rowHolder.
2:eac0369: 	 *
1:eac0369: 	 * @param rowHolder	the row holder
1:eac0369: 	 */
1:eac0369: 	public void setRowHolder(TemporaryRowHolderImpl rowHolder)
1:eac0369: 	{
1:eac0369: 		this.rowHolder = rowHolder;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Open the indexes that must be fixed if they are not already
1:eac0369: 	  open.
1:eac0369: 
1:eac0369: 	  @param whatToOpen must be one of ALL_INDEXES or UPDATE_INDEXES.
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	private void openIndexes(int whatToOpen)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		    SanityManager.ASSERT( isOpen, "IndexSetChanger closed");
1:eac0369: 
1:eac0369: 		if (whatIsOpen >= whatToOpen) return;
1:eac0369: 			
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 		{
1:eac0369: 			if (whatToOpen == UPDATE_INDEXES &&
1:eac0369: 				!fixOnUpdate[ix])
1:eac0369: 				continue;
1:eac0369: 			
1:eac0369: 			/* Instantiate an index changer, if it doesn't exist,
1:eac0369: 			 * otherwise we propagate the CC for the heap to
1:eac0369: 			 * the index changer.
1:eac0369: 			 */
1:eac0369: 			if (indexChangers[ix] == null)
1:eac0369: 			{
1:eac0369: 				/* DataDictionary doesn't have compiled info. */
1:eac0369: 				indexChangers[ix] =
1:eac0369: 					new IndexChanger(irgs[ix],
1:eac0369: 									 indexCIDS[ix],
1:eac0369: 									 (indexSCOCIs == null) ? 
1:eac0369: 										 (StaticCompiledOpenConglomInfo) null :
1:eac0369: 											indexSCOCIs[ix],
1:eac0369: 									 (indexDCOCIs == null) ? 
1:eac0369: 										 (DynamicCompiledOpenConglomInfo) null :
1:eac0369: 											indexDCOCIs[ix],
1:eac0369: 									 (indexNames == null) ? null : 
1:eac0369: 									                        indexNames[ix],
1:eac0369: 									 baseCC,
1:eac0369: 									 tc,
1:eac0369: 									 lockMode,
1:eac0369: 									 baseRowReadMap,
1:eac0369: 									 isolationLevel,
1:eac0369: 									 activation);
1:eac0369: 				indexChangers[ix].setRowHolder(rowHolder);
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				indexChangers[ix].setBaseCC(baseCC);
1:eac0369: 			}
1:eac0369: 			indexChangers[ix].open();
1:eac0369: 		}
1:eac0369: 		whatIsOpen = whatToOpen;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Perform index maintenance associated with deleting a row
1:eac0369: 	  from a table.
1:eac0369: 
1:eac0369: 	  @param baseRow the deleted row.
1:eac0369: 	  @param baseRowLocation the deleted row's base conglomerate
1:eac0369: 	     location
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void delete(ExecRow baseRow,
1:eac0369: 					   RowLocation baseRowLocation)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		openIndexes(ALL_INDEXES);
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 			indexChangers[ix].delete(baseRow,baseRowLocation);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Perform index maintenance associated with insering a row
1:eac0369: 	  into a table.
1:eac0369: 
1:eac0369: 	  @param baseRow the row.
1:eac0369: 	  @param baseRowLocation the row's base conglomerate
1:eac0369: 	     location
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void insert(ExecRow baseRow,
1:eac0369: 					   RowLocation baseRowLocation)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		openIndexes(ALL_INDEXES);
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 			indexChangers[ix].insert(baseRow,baseRowLocation);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Perform index maintenance associated with updating a row
1:eac0369: 	  in a table.
1:eac0369: 
1:eac0369: 	  @param oldBaseRow the old image of the row.
1:eac0369: 	  @param newBaseRow the new image of the row.
1:eac0369: 	  @param baseRowLocation the row's base conglomerate
1:eac0369: 	     location
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void update(ExecRow oldBaseRow,
1:eac0369: 					   ExecRow newBaseRow,
1:eac0369: 					   RowLocation baseRowLocation)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		openIndexes(UPDATE_INDEXES);
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 			if (fixOnUpdate[ix])
1:eac0369: 				indexChangers[ix].update(oldBaseRow,
1:eac0369: 										 newBaseRow,
1:eac0369: 										 baseRowLocation);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Propagate the heap's ConglomerateController to
1:eac0369: 	 * all of the underlying index changers.
1:eac0369: 	 *
1:eac0369: 	 * @param baseCC	The heap's ConglomerateController.
1:eac0369: 	 */
1:eac0369: 	public void setBaseCC(ConglomerateController baseCC)
1:eac0369: 	{
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 		{
1:eac0369: 			if (indexChangers[ix] != null)
1:eac0369: 			{
1:eac0369: 				indexChangers[ix].setBaseCC(baseCC);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.baseCC = baseCC;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Finish processing the changes for this IndexSetChanger.  This means
1:eac0369: 	  doing the deferred inserts for updates of unique indexes.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void finish()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 		{
1:eac0369: 			if (indexChangers[ix] != null)
1:eac0369: 			{
1:eac0369: 				indexChangers[ix].finish();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	/**
1:eac0369: 	  Close this IndexSetChanger.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void close()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		whatIsOpen = NO_INDEXES;
1:eac0369: 		for (int ix = 0; ix < indexChangers.length; ix++)
1:eac0369: 		{
1:eac0369: 			if (indexChangers[ix] != null)
1:eac0369: 			{
1:eac0369: 				indexChangers[ix].close();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		fixOnUpdate = null;
1:eac0369: 		isOpen = false;
1:eac0369: 		rowHolder = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Create a string describing the state of this IndexSetChanger
1:eac0369: 	  */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String whatIsOpen_s = null;
1:eac0369: 			switch (whatIsOpen)
1:eac0369: 			{
1:eac0369: 			case NO_INDEXES:
1:eac0369: 				whatIsOpen_s = "No open indexes ";
1:eac0369: 				break;
1:eac0369: 			case UPDATE_INDEXES:
1:eac0369: 				whatIsOpen_s = "Update indexes open ";
1:eac0369: 				break;
1:eac0369: 			case ALL_INDEXES:
1:eac0369: 				whatIsOpen_s = "All indexes open ";
1:eac0369: 				break;
1:eac0369: 			default:
1:eac0369: 				SanityManager.THROWASSERT("bad whatIsOpen value "+whatIsOpen);
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			String fixOnUpdate_s = "fixOnUpdate=(";
1:eac0369: 			for (int ix = 0; ix < fixOnUpdate.length; ix++)
1:eac0369: 			{
1:eac0369: 				if (ix > 0)
1:eac0369: 					fixOnUpdate_s+=",";
1:eac0369: 
1:eac0369:                 fixOnUpdate_s += fixOnUpdate[ix];
1:eac0369: 			}
1:eac0369: 			fixOnUpdate_s +=")";
1:eac0369: 
1:eac0369: 			String indexDesc_s = "\n";
1:eac0369: 			for (int ix = 0; ix < indexCIDS.length; ix++)
1:eac0369: 			{
1:eac0369: 				if (indexChangers[ix] == null)
1:eac0369: 					indexDesc_s += "    Index["+ix+"] cid="+
1:eac0369: 						indexCIDS[ix]+" closed. \n";
1:eac0369:                 else
1:eac0369: 					indexDesc_s +=
1:eac0369: 						"    "+
1:eac0369: 						indexChangers[ix].toString() + "\n";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			return "IndexSetChanger: "+
1:eac0369: 				whatIsOpen_s+
1:eac0369: 				fixOnUpdate_s+
1:eac0369: 				indexDesc_s;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1: class IndexSetChanger
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:48d2629
/////////////////////////////////////////////////////////////////////////
1: 	private final Activation activation;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.IndexSetChanger
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1:   Perform Index maintenace associated with DML operations for a table's
1:   indexes.
1:   */
0: public class IndexSetChanger
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	//
1: 	//Index row generators.
1: 	IndexRowGenerator[] irgs;
1: 	//
1: 	//Index conglomerate ids. indexCIDS[ix] is the conglomerate id
1: 	//for the index with IndexRowGenerator irgs[ix].
1: 	long[] indexCIDS;
1: 	private DynamicCompiledOpenConglomInfo[] indexDCOCIs;
1: 	private StaticCompiledOpenConglomInfo[] indexSCOCIs;
1: 	String[] indexNames;
1: 	ConglomerateController baseCC;
1: 	FormatableBitSet		baseRowReadMap;
1: 
1: 	// TransactionController for management of temporary conglomerates
1: 	TransactionController tc;
1: 
1: 	TemporaryRowHolderImpl rowHolder;
1: 
1: 	IndexChanger[] indexChangers;
1: 
1: 	// Lock mode for the indexes
1: 	private int lockMode;
1: 
1: 	//Set on open.
1: 	boolean[] fixOnUpdate;
1: 	
1: 	boolean isOpen = false;
1: 	
1: 	//
1: 	//Name for the set of no indexes
1: 	private static final int NO_INDEXES 		= 0;
1: 	//
1: 	//Name for the set of indexes we change on a update operation
1: 	private static final int UPDATE_INDEXES  	= 1;
1: 	//
1: 	//Name for the set of all indexes.
1: 	private static final int ALL_INDEXES		= 2;
1: 	
1: 	//
1: 	//To start, no indexes are open.
1: 	private int whatIsOpen = NO_INDEXES;
1: 
1: 	private int isolationLevel;
0: 	private Activation activation;
1: 
1: 	/**
1: 	  Create a new IndexSetChanger
1: 
1: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1: 	    positions in this array as local id's for indexes.
1: 	  @param indexCIDS the conglomerate ids for the table's indexes.
1: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param baseCC a ConglomerateController for the base table.
1: 	  @param tc	a TransactionController for managing temporary conglomerates
1: 	  @param lockMode	The lock mode (granularity) for the indexes.
1: 	  @param baseRowReadMap Map of columns read in.  1 based.
1: 	  @param isolationLevel	Isolation level to use
1: 	  @param activation	Current activation
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public IndexSetChanger(IndexRowGenerator[] irgs,
1: 						   long[] indexCIDS,
1: 						   StaticCompiledOpenConglomInfo[] indexSCOCIs,
1: 						   DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1: 						   String[] indexNames,
1: 						   ConglomerateController baseCC,
1: 						   TransactionController tc,
1: 						   int lockMode,
1: 						   FormatableBitSet baseRowReadMap,
1: 						   int isolationLevel,
1: 						   Activation activation)
1: 		 throws StandardException
1: 	{
1: 		this.irgs = irgs;
1: 		this.indexCIDS = indexCIDS;
1: 		this.indexSCOCIs = indexSCOCIs;
1: 		this.indexDCOCIs = indexDCOCIs;
1: 		this.indexNames = indexNames;
1: 		this.baseCC = baseCC;
1: 		this.tc = tc;
1: 		this.lockMode = lockMode;
1: 		this.baseRowReadMap = baseRowReadMap;
1: 		this.isolationLevel = isolationLevel;
1: 		this.activation = activation;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(indexCIDS != null, "indexCIDS is null");
1: 		}
1: 
1: 		indexChangers = new IndexChanger[irgs.length];
1: 	}
1: 	
1: 	/**
1: 	  Open this IndexSetchanger.
1: 
1: 	  @param fixOnUpdate indicates which indexes to correct due
1: 	    to an update. The entries in this array must be in the
1: 		same order as the entries in the irgs array that was
1: 		passed to the constructor.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void open(boolean[] fixOnUpdate)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		    SanityManager.ASSERT( ! isOpen, "IndexSetChanger already open");
1: 
1: 		this.fixOnUpdate = fixOnUpdate;
1: 		isOpen = true;
1: 	}
1: 
1: 	/**
1: 	 * Set the row holder for all underlying changers to use.
1: 	 * If the row holder is set, underlying changers  wont bother 
1: 	 * saving copies of rows needed for deferred
1: 	 * processing.  Also, it will never close the
1: 	 * passed in rowHolder.
1: 	 *
1: 	 * @param rowHolder	the row holder
1: 	 */
1: 	public void setRowHolder(TemporaryRowHolderImpl rowHolder)
1: 	{
1: 		this.rowHolder = rowHolder;
1: 	}
1: 
1: 	/**
1: 	  Open the indexes that must be fixed if they are not already
1: 	  open.
1: 
1: 	  @param whatToOpen must be one of ALL_INDEXES or UPDATE_INDEXES.
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	private void openIndexes(int whatToOpen)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		    SanityManager.ASSERT( isOpen, "IndexSetChanger closed");
1: 
1: 		if (whatIsOpen >= whatToOpen) return;
1: 			
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 		{
1: 			if (whatToOpen == UPDATE_INDEXES &&
1: 				!fixOnUpdate[ix])
1: 				continue;
1: 			
1: 			/* Instantiate an index changer, if it doesn't exist,
1: 			 * otherwise we propagate the CC for the heap to
1: 			 * the index changer.
1: 			 */
1: 			if (indexChangers[ix] == null)
1: 			{
1: 				/* DataDictionary doesn't have compiled info. */
1: 				indexChangers[ix] =
1: 					new IndexChanger(irgs[ix],
1: 									 indexCIDS[ix],
1: 									 (indexSCOCIs == null) ? 
1: 										 (StaticCompiledOpenConglomInfo) null :
1: 											indexSCOCIs[ix],
1: 									 (indexDCOCIs == null) ? 
1: 										 (DynamicCompiledOpenConglomInfo) null :
1: 											indexDCOCIs[ix],
1: 									 (indexNames == null) ? null : 
1: 									                        indexNames[ix],
1: 									 baseCC,
1: 									 tc,
1: 									 lockMode,
1: 									 baseRowReadMap,
1: 									 isolationLevel,
1: 									 activation);
1: 				indexChangers[ix].setRowHolder(rowHolder);
1: 			}
1: 			else
1: 			{
1: 				indexChangers[ix].setBaseCC(baseCC);
1: 			}
1: 			indexChangers[ix].open();
1: 		}
1: 		whatIsOpen = whatToOpen;
1: 	}
1: 
1: 	/**
1: 	  Perform index maintenance associated with deleting a row
1: 	  from a table.
1: 
1: 	  @param baseRow the deleted row.
1: 	  @param baseRowLocation the deleted row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void delete(ExecRow baseRow,
1: 					   RowLocation baseRowLocation)
1: 		 throws StandardException
1: 	{
1: 		openIndexes(ALL_INDEXES);
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 			indexChangers[ix].delete(baseRow,baseRowLocation);
1: 	}
1: 
1: 	/**
1: 	  Perform index maintenance associated with insering a row
1: 	  into a table.
1: 
1: 	  @param baseRow the row.
1: 	  @param baseRowLocation the row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void insert(ExecRow baseRow,
1: 					   RowLocation baseRowLocation)
1: 		 throws StandardException
1: 	{
1: 		openIndexes(ALL_INDEXES);
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 			indexChangers[ix].insert(baseRow,baseRowLocation);
1: 	}
1: 
1: 	/**
1: 	  Perform index maintenance associated with updating a row
1: 	  in a table.
1: 
1: 	  @param oldBaseRow the old image of the row.
1: 	  @param newBaseRow the new image of the row.
1: 	  @param baseRowLocation the row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void update(ExecRow oldBaseRow,
1: 					   ExecRow newBaseRow,
1: 					   RowLocation baseRowLocation)
1: 		 throws StandardException
1: 	{
1: 		openIndexes(UPDATE_INDEXES);
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 			if (fixOnUpdate[ix])
1: 				indexChangers[ix].update(oldBaseRow,
1: 										 newBaseRow,
1: 										 baseRowLocation);
1: 	}
1: 
1: 	/**
1: 	 * Propagate the heap's ConglomerateController to
1: 	 * all of the underlying index changers.
1: 	 *
1: 	 * @param baseCC	The heap's ConglomerateController.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setBaseCC(ConglomerateController baseCC)
1: 	{
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 		{
1: 			if (indexChangers[ix] != null)
1: 			{
1: 				indexChangers[ix].setBaseCC(baseCC);
1: 			}
1: 		}
1: 		this.baseCC = baseCC;
1: 	}
1: 
1: 	/**
1: 	  Finish processing the changes for this IndexSetChanger.  This means
1: 	  doing the deferred inserts for updates of unique indexes.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	 */
1: 	public void finish()
1: 		throws StandardException
1: 	{
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 		{
1: 			if (indexChangers[ix] != null)
1: 			{
1: 				indexChangers[ix].finish();
1: 			}
1: 		}
1: 	}
1: 		
1: 	/**
1: 	  Close this IndexSetChanger.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void close()
1: 		throws StandardException
1: 	{
1: 		whatIsOpen = NO_INDEXES;
1: 		for (int ix = 0; ix < indexChangers.length; ix++)
1: 		{
1: 			if (indexChangers[ix] != null)
1: 			{
1: 				indexChangers[ix].close();
1: 			}
1: 		}
1: 		fixOnUpdate = null;
1: 		isOpen = false;
1: 		rowHolder = null;
1: 	}
1: 
1: 	/**
1: 	  Create a string describing the state of this IndexSetChanger
1: 	  */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String whatIsOpen_s = null;
1: 			switch (whatIsOpen)
1: 			{
1: 			case NO_INDEXES:
1: 				whatIsOpen_s = "No open indexes ";
1: 				break;
1: 			case UPDATE_INDEXES:
1: 				whatIsOpen_s = "Update indexes open ";
1: 				break;
1: 			case ALL_INDEXES:
1: 				whatIsOpen_s = "All indexes open ";
1: 				break;
1: 			default:
1: 				SanityManager.THROWASSERT("bad whatIsOpen value "+whatIsOpen);
1: 				break;
1: 			}
1: 
1: 			String fixOnUpdate_s = "fixOnUpdate=(";
1: 			for (int ix = 0; ix < fixOnUpdate.length; ix++)
1: 			{
1: 				if (ix > 0)
1: 					fixOnUpdate_s+=",";
1: 
1:                 fixOnUpdate_s += fixOnUpdate[ix];
1: 			}
1: 			fixOnUpdate_s +=")";
1: 
1: 			String indexDesc_s = "\n";
1: 			for (int ix = 0; ix < indexCIDS.length; ix++)
1: 			{
1: 				if (indexChangers[ix] == null)
1: 					indexDesc_s += "    Index["+ix+"] cid="+
1: 						indexCIDS[ix]+" closed. \n";
1:                 else
1: 					indexDesc_s +=
1: 						"    "+
1: 						indexChangers[ix].toString() + "\n";
1: 			}
1: 
1: 			return "IndexSetChanger: "+
1: 				whatIsOpen_s+
1: 				fixOnUpdate_s+
1: 				indexDesc_s;
1: 		}
1: 
1: 		return null;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0:   Perform Index maintenace associated with DML operations for a table's
0:   indexes.
0:   */
0: public class IndexSetChanger
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	//
0: 	//Index row generators.
0: 	IndexRowGenerator[] irgs;
0: 	//
0: 	//Index conglomerate ids. indexCIDS[ix] is the conglomerate id
0: 	//for the index with IndexRowGenerator irgs[ix].
0: 	long[] indexCIDS;
0: 	private DynamicCompiledOpenConglomInfo[] indexDCOCIs;
0: 	private StaticCompiledOpenConglomInfo[] indexSCOCIs;
0: 	String[] indexNames;
0: 	ConglomerateController baseCC;
0: 	FormatableBitSet		baseRowReadMap;
0: 
0: 	// TransactionController for management of temporary conglomerates
0: 	TransactionController tc;
0: 
0: 	TemporaryRowHolderImpl rowHolder;
0: 
0: 	IndexChanger[] indexChangers;
0: 
0: 	// Lock mode for the indexes
0: 	private int lockMode;
0: 
0: 	//Set on open.
0: 	boolean[] fixOnUpdate;
0: 	
0: 	boolean isOpen = false;
0: 	
0: 	//
0: 	//Name for the set of no indexes
0: 	private static final int NO_INDEXES 		= 0;
0: 	//
0: 	//Name for the set of indexes we change on a update operation
0: 	private static final int UPDATE_INDEXES  	= 1;
0: 	//
0: 	//Name for the set of all indexes.
0: 	private static final int ALL_INDEXES		= 2;
0: 	
0: 	//
0: 	//To start, no indexes are open.
0: 	private int whatIsOpen = NO_INDEXES;
0: 
0: 	private int isolationLevel;
0: 	private Activation activation;
0: 
0: 	/**
0: 	  Create a new IndexSetChanger
0: 
0: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
0: 	    positions in this array as local id's for indexes.
0: 	  @param indexCIDS the conglomerate ids for the table's indexes.
0: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
0: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
0: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param baseCC a ConglomerateController for the base table.
0: 	  @param tc	a TransactionController for managing temporary conglomerates
0: 	  @param lockMode	The lock mode (granularity) for the indexes.
0: 	  @param baseRowReadMap Map of columns read in.  1 based.
0: 	  @param isolationLevel	Isolation level to use
0: 	  @param activation	Current activation
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public IndexSetChanger(IndexRowGenerator[] irgs,
0: 						   long[] indexCIDS,
0: 						   StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 						   DynamicCompiledOpenConglomInfo[] indexDCOCIs,
0: 						   String[] indexNames,
0: 						   ConglomerateController baseCC,
0: 						   TransactionController tc,
0: 						   int lockMode,
0: 						   FormatableBitSet baseRowReadMap,
0: 						   int isolationLevel,
0: 						   Activation activation)
0: 		 throws StandardException
0: 	{
0: 		this.irgs = irgs;
0: 		this.indexCIDS = indexCIDS;
0: 		this.indexSCOCIs = indexSCOCIs;
0: 		this.indexDCOCIs = indexDCOCIs;
0: 		this.indexNames = indexNames;
0: 		this.baseCC = baseCC;
0: 		this.tc = tc;
0: 		this.lockMode = lockMode;
0: 		this.baseRowReadMap = baseRowReadMap;
0: 		this.isolationLevel = isolationLevel;
0: 		this.activation = activation;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(indexCIDS != null, "indexCIDS is null");
0: 		}
0: 
0: 		indexChangers = new IndexChanger[irgs.length];
0: 	}
0: 	
0: 	/**
0: 	  Open this IndexSetchanger.
0: 
0: 	  @param fixOnUpdate indicates which indexes to correct due
0: 	    to an update. The entries in this array must be in the
0: 		same order as the entries in the irgs array that was
0: 		passed to the constructor.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void open(boolean[] fixOnUpdate)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		    SanityManager.ASSERT( ! isOpen, "IndexSetChanger already open");
0: 
0: 		this.fixOnUpdate = fixOnUpdate;
0: 		isOpen = true;
0: 	}
0: 
0: 	/**
0: 	 * Set the row holder for all underlying changers to use.
0: 	 * If the row holder is set, underlying changers  wont bother 
0: 	 * saving copies of rows needed for deferred
0: 	 * processing.  Also, it will never close the
0: 	 * passed in rowHolder.
0: 	 *
0: 	 * @param rowHolder	the row holder
0: 	 */
0: 	public void setRowHolder(TemporaryRowHolderImpl rowHolder)
0: 	{
0: 		this.rowHolder = rowHolder;
0: 	}
0: 
0: 	/**
0: 	  Open the indexes that must be fixed if they are not already
0: 	  open.
0: 
0: 	  @param whatToOpen must be one of ALL_INDEXES or UPDATE_INDEXES.
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	private void openIndexes(int whatToOpen)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		    SanityManager.ASSERT( isOpen, "IndexSetChanger closed");
0: 
0: 		if (whatIsOpen >= whatToOpen) return;
0: 			
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 		{
0: 			if (whatToOpen == UPDATE_INDEXES &&
0: 				!fixOnUpdate[ix])
0: 				continue;
0: 			
0: 			/* Instantiate an index changer, if it doesn't exist,
0: 			 * otherwise we propagate the CC for the heap to
0: 			 * the index changer.
0: 			 */
0: 			if (indexChangers[ix] == null)
0: 			{
0: 				/* DataDictionary doesn't have compiled info. */
0: 				indexChangers[ix] =
0: 					new IndexChanger(irgs[ix],
0: 									 indexCIDS[ix],
0: 									 (indexSCOCIs == null) ? 
0: 										 (StaticCompiledOpenConglomInfo) null :
0: 											indexSCOCIs[ix],
0: 									 (indexDCOCIs == null) ? 
0: 										 (DynamicCompiledOpenConglomInfo) null :
0: 											indexDCOCIs[ix],
0: 									 (indexNames == null) ? null : 
0: 									                        indexNames[ix],
0: 									 baseCC,
0: 									 tc,
0: 									 lockMode,
0: 									 baseRowReadMap,
0: 									 isolationLevel,
0: 									 activation);
0: 				indexChangers[ix].setRowHolder(rowHolder);
0: 			}
0: 			else
0: 			{
0: 				indexChangers[ix].setBaseCC(baseCC);
0: 			}
0: 			indexChangers[ix].open();
0: 		}
0: 		whatIsOpen = whatToOpen;
0: 	}
0: 
0: 	/**
0: 	  Perform index maintenance associated with deleting a row
0: 	  from a table.
0: 
0: 	  @param baseRow the deleted row.
0: 	  @param baseRowLocation the deleted row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void delete(ExecRow baseRow,
0: 					   RowLocation baseRowLocation)
0: 		 throws StandardException
0: 	{
0: 		openIndexes(ALL_INDEXES);
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 			indexChangers[ix].delete(baseRow,baseRowLocation);
0: 	}
0: 
0: 	/**
0: 	  Perform index maintenance associated with insering a row
0: 	  into a table.
0: 
0: 	  @param baseRow the row.
0: 	  @param baseRowLocation the row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void insert(ExecRow baseRow,
0: 					   RowLocation baseRowLocation)
0: 		 throws StandardException
0: 	{
0: 		openIndexes(ALL_INDEXES);
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 			indexChangers[ix].insert(baseRow,baseRowLocation);
0: 	}
0: 
0: 	/**
0: 	  Perform index maintenance associated with updating a row
0: 	  in a table.
0: 
0: 	  @param oldBaseRow the old image of the row.
0: 	  @param newBaseRow the new image of the row.
0: 	  @param baseRowLocation the row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void update(ExecRow oldBaseRow,
0: 					   ExecRow newBaseRow,
0: 					   RowLocation baseRowLocation)
0: 		 throws StandardException
0: 	{
0: 		openIndexes(UPDATE_INDEXES);
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 			if (fixOnUpdate[ix])
0: 				indexChangers[ix].update(oldBaseRow,
0: 										 newBaseRow,
0: 										 baseRowLocation);
0: 	}
0: 
0: 	/**
0: 	 * Propagate the heap's ConglomerateController to
0: 	 * all of the underlying index changers.
0: 	 *
0: 	 * @param baseCC	The heap's ConglomerateController.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setBaseCC(ConglomerateController baseCC)
0: 	{
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 		{
0: 			if (indexChangers[ix] != null)
0: 			{
0: 				indexChangers[ix].setBaseCC(baseCC);
0: 			}
0: 		}
0: 		this.baseCC = baseCC;
0: 	}
0: 
0: 	/**
0: 	  Finish processing the changes for this IndexSetChanger.  This means
0: 	  doing the deferred inserts for updates of unique indexes.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	 */
0: 	public void finish()
0: 		throws StandardException
0: 	{
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 		{
0: 			if (indexChangers[ix] != null)
0: 			{
0: 				indexChangers[ix].finish();
0: 			}
0: 		}
0: 	}
0: 		
0: 	/**
0: 	  Close this IndexSetChanger.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void close()
0: 		throws StandardException
0: 	{
0: 		whatIsOpen = NO_INDEXES;
0: 		for (int ix = 0; ix < indexChangers.length; ix++)
0: 		{
0: 			if (indexChangers[ix] != null)
0: 			{
0: 				indexChangers[ix].close();
0: 			}
0: 		}
0: 		fixOnUpdate = null;
0: 		isOpen = false;
0: 		rowHolder = null;
0: 	}
0: 
0: 	/**
0: 	  Create a string describing the state of this IndexSetChanger
0: 	  */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String whatIsOpen_s = null;
0: 			switch (whatIsOpen)
0: 			{
0: 			case NO_INDEXES:
0: 				whatIsOpen_s = "No open indexes ";
0: 				break;
0: 			case UPDATE_INDEXES:
0: 				whatIsOpen_s = "Update indexes open ";
0: 				break;
0: 			case ALL_INDEXES:
0: 				whatIsOpen_s = "All indexes open ";
0: 				break;
0: 			default:
0: 				SanityManager.THROWASSERT("bad whatIsOpen value "+whatIsOpen);
0: 				break;
0: 			}
0: 
0: 			String fixOnUpdate_s = "fixOnUpdate=(";
0: 			for (int ix = 0; ix < fixOnUpdate.length; ix++)
0: 			{
0: 				if (ix > 0)
0: 					fixOnUpdate_s+=",";
0: 
0:                 fixOnUpdate_s += fixOnUpdate[ix];
0: 			}
0: 			fixOnUpdate_s +=")";
0: 
0: 			String indexDesc_s = "\n";
0: 			for (int ix = 0; ix < indexCIDS.length; ix++)
0: 			{
0: 				if (indexChangers[ix] == null)
0: 					indexDesc_s += "    Index["+ix+"] cid="+
0: 						indexCIDS[ix]+" closed. \n";
0:                 else
0: 					indexDesc_s +=
0: 						"    "+
0: 						indexChangers[ix].toString() + "\n";
0: 			}
0: 
0: 			return "IndexSetChanger: "+
0: 				whatIsOpen_s+
0: 				fixOnUpdate_s+
0: 				indexDesc_s;
0: 		}
0: 
0: 		return null;
0: 	}
0: }
============================================================================