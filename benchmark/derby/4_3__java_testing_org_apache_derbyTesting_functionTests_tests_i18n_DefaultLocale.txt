1:ccae4bc: /*
6:ccae4bc: 
1:ccae4bc:    Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale
1:ccae4bc: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:ccae4bc: 
1:ccae4bc:       http://www.apache.org/licenses/LICENSE-2.0
1:ccae4bc: 
1:ccae4bc:    Unless required by applicable law or agreed to in writing, software
1:ccae4bc:    distributed under the License is distributed on an "AS IS" BASIS,
1:ccae4bc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ccae4bc:    See the License for the specific language governing permissions and
1:ccae4bc:    limitations under the License.
1:ccae4bc: 
1:ccae4bc:  */
1:ccae4bc: 
1:ccae4bc: package org.apache.derbyTesting.functionTests.tests.i18n;
1:ccae4bc: 
1:ccae4bc: import java.sql.SQLException;
1:c393694: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:ccae4bc: 
1:ccae4bc: public class DefaultLocale { 
1:ccae4bc: 
1:ccae4bc: 	static String savedLocale;
1:ccae4bc: 
1:ccae4bc: 	static {
1:ccae4bc: 		savedLocale=java.util.Locale.getDefault().toString();
1:38b2dd4: 		setDefaultLocale("rr", "TT");
1:ccae4bc: 	}
1:ccae4bc: 
1:ccae4bc: 
2:ccae4bc: 	// used in messageLocale test
1:ccae4bc: 	public static void checkDefaultLocale() throws SQLException
1:ccae4bc: 	{
1:ccae4bc: 		String defLocale = java.util.Locale.getDefault().toString();
1:ccae4bc: 		//System.out.println(defLocale);
1:ccae4bc: 		if (!defLocale.equals("rr_TT"))
1:ccae4bc: 			throw new SQLException("wrong_locale");
1:ccae4bc: 	}
1:ccae4bc: 
1:ccae4bc: 	// used in urlLocale test
1:ccae4bc: 	public static void checkRDefaultLocale() throws SQLException
1:ccae4bc: 	{
1:1dd059d: 		String dbLocale = org.apache.derby.iapi.db.Factory.getDatabaseOfConnection().getLocale().toString();
1:1dd059d: 		//System.out.println(savedLocale);
1:1dd059d: 		//System.out.println(dbLocale);
1:1dd059d: 		if (!savedLocale.equals(dbLocale))
1:ccae4bc: 			throw new SQLException("wrong_locale");
1:ccae4bc: 	}
1:ccae4bc: 
1:1dd059d: 	// used in urlLocale test and messageLocale test
1:ccae4bc: 	public static void checkDatabaseLocale(String Locale) throws SQLException
1:ccae4bc: 	{
1:ccae4bc: 		String dbLocale = org.apache.derby.iapi.db.Factory.getDatabaseOfConnection().getLocale().toString();
1:ccae4bc: 		//System.out.println(dbLocale + "-");
1:ccae4bc: 		//System.out.println(Locale + "-");
1:ccae4bc: 		if (!dbLocale.toUpperCase().equals(Locale.toUpperCase().trim()))
1:ccae4bc: 			throw new SQLException("wrong locale");
1:ccae4bc: 	}
1:ccae4bc: 
1:ccae4bc: 	// used in messageLocale test
1:38b2dd4: 	public static void setDefaultLocale(final String Locale, final String Code)
1:ccae4bc: 	{
1:38b2dd4: 		// needs to run in a privileged block as it will be
1:38b2dd4: 		// called through a SQL statement and thus a generated
1:38b2dd4: 		// class. The generated class on the stack has no permissions
1:38b2dd4: 		// granted to it. Needs write permission on user.language
1:c393694:         LocaleTestSetup.setDefaultLocale(
1:c393694:                 new java.util.Locale(Locale.trim(), Code.trim()));
1:ccae4bc: 	}
1:ccae4bc: 
1:ccae4bc: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         LocaleTestSetup.setDefaultLocale(
1:                 new java.util.Locale(Locale.trim(), Code.trim()));
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:1dd059d
/////////////////////////////////////////////////////////////////////////
1: 		String dbLocale = org.apache.derby.iapi.db.Factory.getDatabaseOfConnection().getLocale().toString();
1: 		//System.out.println(savedLocale);
1: 		//System.out.println(dbLocale);
1: 		if (!savedLocale.equals(dbLocale))
1: 	// used in urlLocale test and messageLocale test
commit:ccae4bc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale
1: 
0:    Copyright 2000, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
0: import java.util.Locale;
1: 
0: import java.sql.DriverManager;
0: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: public class DefaultLocale { 
1: 
1: 	static String savedLocale;
1: 
1: 	static {
1: 		savedLocale=java.util.Locale.getDefault().toString();
0: 		Locale.setDefault(new Locale("rr", "TT"));
1: 	}
1: 
1: 
1: 	// used in messageLocale test
1: 	public static void checkDefaultLocale() throws SQLException
1: 	{
0: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
1: 		String defLocale = java.util.Locale.getDefault().toString();
1: 		//System.out.println(defLocale);
1: 		if (!defLocale.equals("rr_TT"))
1: 			throw new SQLException("wrong_locale");
1: 	}
1: 
1: 	// used in urlLocale test
1: 	public static void checkRDefaultLocale() throws SQLException
1: 	{
0: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
0: 		System.out.println(savedLocale);
0: 		if (!savedLocale.equals("en_US"))
1: 			throw new SQLException("wrong_locale");
1: 	}
1: 
1: 	// used in messageLocale test
1: 	public static void checkDatabaseLocale(String Locale) throws SQLException
1: 	{
0: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
1: 		String dbLocale = org.apache.derby.iapi.db.Factory.getDatabaseOfConnection().getLocale().toString();
1: 		//System.out.println(dbLocale + "-");
1: 		//System.out.println(Locale + "-");
1: 		if (!dbLocale.toUpperCase().equals(Locale.toUpperCase().trim()))
1: 			throw new SQLException("wrong locale");
1: 	}
1: 
1: 	// used in messageLocale test
0: 	public static void setDefaultLocale(String Locale, String Code) throws SQLException
1: 	{
0: 		Connection conn = DriverManager.getConnection("jdbc:default:connection");
0: 		java.util.Locale.setDefault(new java.util.Locale(Locale.trim(),Code.trim()));
1: 	}
1: 
1: 
1: 
1: 
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:39aa8c4
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:38b2dd4
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 		setDefaultLocale("rr", "TT");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public static void setDefaultLocale(final String Locale, final String Code)
1: 		// needs to run in a privileged block as it will be
1: 		// called through a SQL statement and thus a generated
1: 		// class. The generated class on the stack has no permissions
1: 		// granted to it. Needs write permission on user.language
0: 		AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
0:             	java.util.Locale.setDefault(new java.util.Locale(Locale.trim(),Code.trim()));
0:                 return null; // nothing to return
0:             }
0:         });		
0: 		
============================================================================