1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.RefTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class implements TypeCompiler for the SQL REF datatype.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:4469400: public class RefTypeCompiler extends BaseTypeCompiler
2:eac0369: {
1:eac0369: 	/** @see TypeCompiler#getCorrespondingPrimitiveTypeName */
1:eac0369: 	public String getCorrespondingPrimitiveTypeName()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("getCorrespondingPrimitiveTypeName not implemented for SQLRef");
1:eac0369: 		return null;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCastToCharWidth
1:eac0369: 	 */
1:eac0369: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT( "getCastToCharWidth not implemented for SQLRef");
1:eac0369: 		return 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#convertible */
1:eac0369: 	public boolean convertible(TypeId otherType, 
1:eac0369: 							   boolean forDataTypeFunction)
1:eac0369: 	{
2:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether this type is compatible with the given type.
1:eac0369: 	 *
1:eac0369: 	 * @see TypeCompiler#compatible */
1:eac0369: 	public boolean compatible(TypeId otherType)
1:eac0369: 	{
1:eac0369: 		return convertible(otherType,false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#storable */
1:eac0369: 	public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369: 	{
1:eac0369: 		return otherType.isRefTypeId();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#interfaceName */
1:eac0369: 	public String interfaceName()
1:eac0369: 	{
1:eac0369: 		return ClassName.RefDataValue;
1:eac0369: 	}
1:eac0369: 
1:44fad02: 	String nullMethodName()
1:eac0369: 	{
1:eac0369: 		return "getNullRef";
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class RefTypeCompiler extends BaseTypeCompiler
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class RefTypeCompiler extends BaseTypeCompiler
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: 	String nullMethodName()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.RefTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.types.RefDataValue;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: 
1: /**
1:  * This class implements TypeCompiler for the SQL REF datatype.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class RefTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/** @see TypeCompiler#getCorrespondingPrimitiveTypeName */
1: 	public String getCorrespondingPrimitiveTypeName()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("getCorrespondingPrimitiveTypeName not implemented for SQLRef");
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCastToCharWidth
1: 	 */
1: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT( "getCastToCharWidth not implemented for SQLRef");
1: 		return 0;
1: 	}
1: 
1: 	/** @see TypeCompiler#convertible */
1: 	public boolean convertible(TypeId otherType, 
1: 							   boolean forDataTypeFunction)
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Tell whether this type is compatible with the given type.
1: 	 *
1: 	 * @see TypeCompiler#compatible */
1: 	public boolean compatible(TypeId otherType)
1: 	{
1: 		return convertible(otherType,false);
1: 	}
1: 
1: 
0: 	/** @see TypeCompiler#comparable */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/** @see TypeCompiler#storable */
1: 	public boolean storable(TypeId otherType, ClassFactory cf)
1: 	{
1: 		return otherType.isRefTypeId();
1: 	}
1: 
1: 	/** @see TypeCompiler#interfaceName */
1: 	public String interfaceName()
1: 	{
1: 		return ClassName.RefDataValue;
1: 	}
1: 
0: 	protected String nullMethodName()
1: 	{
1: 		return "getNullRef";
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.types.RefDataValue;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL REF datatype.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class RefTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/** @see TypeCompiler#getCorrespondingPrimitiveTypeName */
0: 	public String getCorrespondingPrimitiveTypeName()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("getCorrespondingPrimitiveTypeName not implemented for SQLRef");
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCastToCharWidth
0: 	 */
0: 	public int getCastToCharWidth(DataTypeDescriptor dts)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT( "getCastToCharWidth not implemented for SQLRef");
0: 		return 0;
0: 	}
0: 
0: 	/** @see TypeCompiler#convertible */
0: 	public boolean convertible(TypeId otherType, 
0: 							   boolean forDataTypeFunction)
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Tell whether this type is compatible with the given type.
0: 	 *
0: 	 * @see TypeCompiler#compatible */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		return convertible(otherType,false);
0: 	}
0: 
0: 
0: 	/** @see TypeCompiler#comparable */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/** @see TypeCompiler#storable */
0: 	public boolean storable(TypeId otherType, ClassFactory cf)
0: 	{
0: 		return otherType.isRefTypeId();
0: 	}
0: 
0: 	/** @see TypeCompiler#interfaceName */
0: 	public String interfaceName()
0: 	{
0: 		return ClassName.RefDataValue;
0: 	}
0: 
0: 	protected String nullMethodName()
0: 	{
0: 		return "getNullRef";
0: 	}
0: }
============================================================================