1:ae2d0e5: /**
1:ae2d0e5:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DB2IsolationLevelsTest
1:ae2d0e5:  *
1:ae2d0e5:  * Licensed to the Apache Software Foundation (ASF) under one
1:ae2d0e5:  * or more contributor license agreements.  See the NOTICE file
1:ae2d0e5:  * distributed with this work for additional information
1:ae2d0e5:  * regarding copyright ownership.  The ASF licenses this file
1:ae2d0e5:  * to you under the Apache License, Version 2.0 (the
1:ae2d0e5:  * "License"); you may not use this file except in compliance
1:ae2d0e5:  * with the License.  You may obtain a copy of the License at
1:ae2d0e5:  *
1:ae2d0e5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ae2d0e5:  *
1:ae2d0e5:  * Unless required by applicable law or agreed to in writing,
1:ae2d0e5:  * software distributed under the License is distributed on an
1:ae2d0e5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ae2d0e5:  * KIND, either express or implied.  See the License for the
1:ae2d0e5:  * specific language governing permissions and limitations
1:ae2d0e5:  * under the License.
1:ae2d0e5:  */
1:ae2d0e5: package org.apache.derbyTesting.functionTests.tests.lang;
1:ae2d0e5: 
1:ae2d0e5: import java.sql.PreparedStatement;
1:ae2d0e5: import java.sql.ResultSet;
1:ae2d0e5: import java.sql.SQLException;
1:ae2d0e5: import java.sql.Statement;
1:ae2d0e5: import junit.framework.Test;
1:ae2d0e5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:ae2d0e5: import org.apache.derbyTesting.junit.JDBC;
1:ae2d0e5: import org.apache.derbyTesting.junit.SQLUtilities;
1:ae2d0e5: import org.apache.derbyTesting.junit.TestConfiguration;
1:ae2d0e5: 
1:ae2d0e5: 
1:ae2d0e5: public final class DB2IsolationLevelsTest extends BaseJDBCTestCase {
1:ae2d0e5: 
1:ae2d0e5:     /**
1:ae2d0e5:      * Public constructor required for running test as standalone JUnit.
1:ae2d0e5:      */
1:ae2d0e5:     public DB2IsolationLevelsTest(String name)
1:ae2d0e5:     {
1:ae2d0e5:         super(name);
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     public static Test suite()
1:ae2d0e5:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("DB2IsolationLevelsTest Test");
1:1ae02c9: 
1:ae2d0e5:         suite.addTest(TestConfiguration.defaultSuite(
1:ae2d0e5:                 DB2IsolationLevelsTest.class));
1:ae2d0e5:         return suite;
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     @Override
1:ae2d0e5:     public void setUp() throws Exception {
1:ae2d0e5:         super.setUp();
1:ae2d0e5:         // Create a table
1:ae2d0e5:         createStatement().executeUpdate(
1:ae2d0e5:             "create table t1(c1 int not null constraint asdf primary key)");
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     @Override
1:ae2d0e5:     public void tearDown() throws Exception {
1:ae2d0e5:         createStatement().executeUpdate("drop table t1");
1:ae2d0e5:         super.tearDown();
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     public void test_DB2IsolationLevelsTest() throws Exception
1:ae2d0e5:     {
1:ae2d0e5:         final Statement st = createStatement();
1:ae2d0e5:         final PreparedStatement ps =
1:ae2d0e5:                 prepareStatement("values current isolation");
1:ae2d0e5: 
1:ae2d0e5:         setAutoCommit(false);
1:ae2d0e5:         st.executeUpdate("call syscs_util.syscs_set_runtimestatistics(1)");
1:ae2d0e5:         st.executeUpdate("insert into t1 values 1");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation default: (CS) read committed
1:ae2d0e5:          */
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "read committed isolation level using instantaneous share " +
1:ae2d0e5:             "row locking chosen by the optimizer");
1:ae2d0e5:         assertIsolation(ps, "CS");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: RR (serializable)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation RR");
1:ae2d0e5:         assertIsolation(ps, "RR");
1:ae2d0e5:         // Rollback should find nothing to do
1:ae2d0e5:         rollback();
1:ae2d0e5: 
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "serializable isolation level using share table locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Set isolation back to default
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation reset");
1:ae2d0e5:         assertIsolation(ps, " ");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: CS (read committed)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation read committed");
1:ae2d0e5:         assertIsolation(ps, "CS");
1:ae2d0e5:         // rollback should find nothing to undo
1:ae2d0e5:         rollback();
1:ae2d0e5: 
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "read committed isolation level using instantaneous share " +
1:ae2d0e5:             "row locking chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Set isolation back to default
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation to reset");
1:ae2d0e5:         assertIsolation(ps, " ");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: RS (read committed)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set current isolation = RS");
1:ae2d0e5:         assertIsolation(ps, "RS");
1:ae2d0e5:         // rollback should find nothing to undo
1:ae2d0e5:         rollback();
1:ae2d0e5: 
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "repeatable read isolation level using share row locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Set isolation back to default
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation reset");
1:ae2d0e5:         assertIsolation(ps, " ");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: UR (dirty read)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation = dirty read");
1:ae2d0e5:         assertIsolation(ps, "UR");
1:ae2d0e5:         // rollback should find nothing to undo
1:ae2d0e5:         rollback();
1:ae2d0e5: 
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "read uncommitted isolation level using share row locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: RR (serializable)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation serializable");
1:ae2d0e5:         assertIsolation(ps, "RR");
1:ae2d0e5: 
1:ae2d0e5:         /*
1:ae2d0e5:          * Override session serializable (RR) with read committed (CS)
1:ae2d0e5:          * on statement level
1:ae2d0e5:          */
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1 with CS"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "read committed isolation level using instantaneous share " +
1:ae2d0e5:             "row locking chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: CS (read committed)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation cursor stability");
1:ae2d0e5:         assertIsolation(ps, "CS");
1:ae2d0e5: 
1:ae2d0e5:         /*
1:ae2d0e5:          * Override session read committed (CS) with serializable (RR)
1:ae2d0e5:          * on statement level
1:ae2d0e5:          */
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1 with RR"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "serializable isolation level using share table locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: RR (serializable)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set isolation serializable");
1:ae2d0e5:         assertIsolation(ps, "RR");
1:ae2d0e5:         /*
1:ae2d0e5:          * Override session RR (serializable) with repeatable read (RS)
1:ae2d0e5:          * on statement level
1:ae2d0e5:          */
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1 with RS"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "repeatable read isolation level using share row locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Session isolation: CS (read committed)
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("set current isolation to read committed");
1:ae2d0e5:         assertIsolation(ps, "CS");
1:ae2d0e5:         /*
1:ae2d0e5:          * Override session CS (read committed) with UR (read uncommitted)
1:ae2d0e5:          * on statement level
1:ae2d0e5:          */
1:ae2d0e5:         assertQueryResult(st.executeQuery("select * from t1 with ur"));
1:ae2d0e5:         assertPlan(
1:ae2d0e5:             st,
1:ae2d0e5:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:ae2d0e5:             "read uncommitted isolation level using share row locking " +
1:ae2d0e5:             "chosen by the optimizer");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Unknown isolation levels: expect syntax errors
1:ae2d0e5:          */
1:ae2d0e5:         final String e = "42X01"; // syntax error
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with rw");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with dirty read");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with read uncommitted");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with read committed");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with cursor stability");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with repeatable read");
1:ae2d0e5:         assertStatementError(e, st, "select * from t1 with serializable");
1:ae2d0e5: 
1:ae2d0e5:         /* -----------------------------------------------------------------
1:ae2d0e5:          * Check the db2 isolation levels can be used as identifiers
1:ae2d0e5:          */
1:ae2d0e5:         st.executeUpdate("create table db2iso(cs int, rr int, ur int, rs int)");
1:ae2d0e5:         ResultSet rs = st.executeQuery("select cs, rr, ur, rs from db2iso");
1:ae2d0e5:         JDBC.assertEmpty(rs);
1:ae2d0e5:         rollback();
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     private void assertQueryResult(ResultSet rs) throws SQLException {
1:ae2d0e5:         JDBC.assertColumnNames(rs, new String [] {"C1"});
1:ae2d0e5:         JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1:ae2d0e5:         rs.close();
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     private void assertPlan(Statement s, String expected)
1:ae2d0e5:             throws SQLException {
1:ae2d0e5:         SQLUtilities.getRuntimeStatisticsParser(s).
1:ae2d0e5:             assertSequence(new String[]{expected});
1:ae2d0e5:     }
1:ae2d0e5: 
1:ae2d0e5:     private void assertIsolation(PreparedStatement p, String expected)
1:ae2d0e5:             throws SQLException {
1:ae2d0e5:         ResultSet rs = p.executeQuery();
1:ae2d0e5:         JDBC.assertColumnNames(rs, new String [] {"1"});
1:ae2d0e5:         JDBC.assertFullResultSet(rs, new String [][]{{expected}}, true);
1:ae2d0e5:         rs.close();
1:ae2d0e5:     }
1:ae2d0e5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("DB2IsolationLevelsTest Test");
1: 
commit:ae2d0e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DB2IsolationLevelsTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: public final class DB2IsolationLevelsTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public DB2IsolationLevelsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("DB2IsolationLevelsTest Test");
1:         suite.addTest(TestConfiguration.defaultSuite(
1:                 DB2IsolationLevelsTest.class));
1:         return suite;
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         // Create a table
1:         createStatement().executeUpdate(
1:             "create table t1(c1 int not null constraint asdf primary key)");
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         createStatement().executeUpdate("drop table t1");
1:         super.tearDown();
1:     }
1: 
1:     public void test_DB2IsolationLevelsTest() throws Exception
1:     {
1:         final Statement st = createStatement();
1:         final PreparedStatement ps =
1:                 prepareStatement("values current isolation");
1: 
1:         setAutoCommit(false);
1:         st.executeUpdate("call syscs_util.syscs_set_runtimestatistics(1)");
1:         st.executeUpdate("insert into t1 values 1");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation default: (CS) read committed
1:          */
1:         assertQueryResult(st.executeQuery("select * from t1"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "read committed isolation level using instantaneous share " +
1:             "row locking chosen by the optimizer");
1:         assertIsolation(ps, "CS");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: RR (serializable)
1:          */
1:         st.executeUpdate("set isolation RR");
1:         assertIsolation(ps, "RR");
1:         // Rollback should find nothing to do
1:         rollback();
1: 
1:         assertQueryResult(st.executeQuery("select * from t1"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "serializable isolation level using share table locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Set isolation back to default
1:          */
1:         st.executeUpdate("set isolation reset");
1:         assertIsolation(ps, " ");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: CS (read committed)
1:          */
1:         st.executeUpdate("set isolation read committed");
1:         assertIsolation(ps, "CS");
1:         // rollback should find nothing to undo
1:         rollback();
1: 
1:         assertQueryResult(st.executeQuery("select * from t1"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "read committed isolation level using instantaneous share " +
1:             "row locking chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Set isolation back to default
1:          */
1:         st.executeUpdate("set isolation to reset");
1:         assertIsolation(ps, " ");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: RS (read committed)
1:          */
1:         st.executeUpdate("set current isolation = RS");
1:         assertIsolation(ps, "RS");
1:         // rollback should find nothing to undo
1:         rollback();
1: 
1:         assertQueryResult(st.executeQuery("select * from t1"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "repeatable read isolation level using share row locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Set isolation back to default
1:          */
1:         st.executeUpdate("set isolation reset");
1:         assertIsolation(ps, " ");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: UR (dirty read)
1:          */
1:         st.executeUpdate("set isolation = dirty read");
1:         assertIsolation(ps, "UR");
1:         // rollback should find nothing to undo
1:         rollback();
1: 
1:         assertQueryResult(st.executeQuery("select * from t1"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "read uncommitted isolation level using share row locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: RR (serializable)
1:          */
1:         st.executeUpdate("set isolation serializable");
1:         assertIsolation(ps, "RR");
1: 
1:         /*
1:          * Override session serializable (RR) with read committed (CS)
1:          * on statement level
1:          */
1:         assertQueryResult(st.executeQuery("select * from t1 with CS"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "read committed isolation level using instantaneous share " +
1:             "row locking chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: CS (read committed)
1:          */
1:         st.executeUpdate("set isolation cursor stability");
1:         assertIsolation(ps, "CS");
1: 
1:         /*
1:          * Override session read committed (CS) with serializable (RR)
1:          * on statement level
1:          */
1:         assertQueryResult(st.executeQuery("select * from t1 with RR"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "serializable isolation level using share table locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: RR (serializable)
1:          */
1:         st.executeUpdate("set isolation serializable");
1:         assertIsolation(ps, "RR");
1:         /*
1:          * Override session RR (serializable) with repeatable read (RS)
1:          * on statement level
1:          */
1:         assertQueryResult(st.executeQuery("select * from t1 with RS"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "repeatable read isolation level using share row locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Session isolation: CS (read committed)
1:          */
1:         st.executeUpdate("set current isolation to read committed");
1:         assertIsolation(ps, "CS");
1:         /*
1:          * Override session CS (read committed) with UR (read uncommitted)
1:          * on statement level
1:          */
1:         assertQueryResult(st.executeQuery("select * from t1 with ur"));
1:         assertPlan(
1:             st,
1:             "Index Scan ResultSet for T1 using constraint ASDF at " +
1:             "read uncommitted isolation level using share row locking " +
1:             "chosen by the optimizer");
1: 
1:         /* -----------------------------------------------------------------
1:          * Unknown isolation levels: expect syntax errors
1:          */
1:         final String e = "42X01"; // syntax error
1:         assertStatementError(e, st, "select * from t1 with rw");
1:         assertStatementError(e, st, "select * from t1 with dirty read");
1:         assertStatementError(e, st, "select * from t1 with read uncommitted");
1:         assertStatementError(e, st, "select * from t1 with read committed");
1:         assertStatementError(e, st, "select * from t1 with cursor stability");
1:         assertStatementError(e, st, "select * from t1 with repeatable read");
1:         assertStatementError(e, st, "select * from t1 with serializable");
1: 
1:         /* -----------------------------------------------------------------
1:          * Check the db2 isolation levels can be used as identifiers
1:          */
1:         st.executeUpdate("create table db2iso(cs int, rr int, ur int, rs int)");
1:         ResultSet rs = st.executeQuery("select cs, rr, ur, rs from db2iso");
1:         JDBC.assertEmpty(rs);
1:         rollback();
1:     }
1: 
1:     private void assertQueryResult(ResultSet rs) throws SQLException {
1:         JDBC.assertColumnNames(rs, new String [] {"C1"});
1:         JDBC.assertFullResultSet(rs, new String [][]{{"1"}}, true);
1:         rs.close();
1:     }
1: 
1:     private void assertPlan(Statement s, String expected)
1:             throws SQLException {
1:         SQLUtilities.getRuntimeStatisticsParser(s).
1:             assertSequence(new String[]{expected});
1:     }
1: 
1:     private void assertIsolation(PreparedStatement p, String expected)
1:             throws SQLException {
1:         ResultSet rs = p.executeQuery();
1:         JDBC.assertColumnNames(rs, new String [] {"1"});
1:         JDBC.assertFullResultSet(rs, new String [][]{{expected}}, true);
1:         rs.close();
1:     }
1: }
============================================================================