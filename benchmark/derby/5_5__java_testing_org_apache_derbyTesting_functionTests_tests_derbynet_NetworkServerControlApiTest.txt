1:5028317: /*
19:5028317: 
1:5028317:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest
1:45680ff: 
1:5028317:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5028317:    contributor license agreements.  See the NOTICE file distributed with
1:5028317:    this work for additional information regarding copyright ownership.
1:5028317:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5028317:    (the "License"); you may not use this file except in compliance with
1:5028317:    the License.  You may obtain a copy of the License at
1:45680ff: 
1:5028317:       http://www.apache.org/licenses/LICENSE-2.0
1:5028317: 
1:5028317:    Unless required by applicable law or agreed to in writing, software
1:5028317:    distributed under the License is distributed on an "AS IS" BASIS,
1:5028317:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5028317:    See the License for the specific language governing permissions and
1:5028317:    limitations under the License.
1:5028317: 
2:5028317:  */
1:5028317: 
1:5028317: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:5028317: 
1:5028317: import java.io.File;
1:65eb19a: import java.net.InetAddress;
1:65eb19a: import java.net.UnknownHostException;
1:5028317: import java.security.AccessController;
1:5028317: import java.security.PrivilegedActionException;
1:5028317: import java.security.PrivilegedExceptionAction;
1:45680ff: import java.sql.Connection;
1:45680ff: import java.sql.SQLException;
1:45680ff: import java.util.Properties;
1:5028317: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.drda.NetworkServerControl;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.Derby;
1:1ae02c9: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:45680ff: 
1:5028317: public class NetworkServerControlApiTest extends BaseJDBCTestCase {
1:5028317: 
1:badaed7:     private static final String NON_ASCII_USER = "bj\u00F8rn";
1:badaed7:     private static final String NON_ASCII_PASSWORD = "l\u00F8yndom";
1:badaed7: 
1:b32256d:     private static final String POLICY_FILE_NAME =
1:b32256d:             "org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.policy";
1:5028317:     
1:5028317:     public NetworkServerControlApiTest(String name) {
1:5028317:         super(name);
1:5028317:        
7:5028317:     }
1:45680ff: 
1:5028317:     /** Test NetworkServerControl API.
1:5028317:      *  Right now it tests only the trace command for DERBY-3110.
1:5028317:      *  TODO: Add tests for other API calls.
1:5028317:      */
1:45680ff:     
1:31fad6a:     /**
1:9f61c8b:      *   Test other commands. These should all give a helpful error and the
1:9f61c8b:      *   usage message
1:5028317:      */
1:6698807:     public void test_01_WrongUsage() throws Exception
3:5028317:     {
1:9f61c8b:         final String nsc = "org.apache.derby.drda.NetworkServerControl";
1:9f61c8b:         // we'll assume that we get the full message if we get 'Usage'
1:9f61c8b:         // because sometimes, the message gets returned with carriage return,
1:9f61c8b:         // and sometimes it doesn't, checking for two different parts...
1:9f61c8b:         final String usage = "Usage: ";
1:6698807: 
1:9f61c8b:         // no arguments
1:9f61c8b:         String[] cmd = new String[] {nsc};
1:9f61c8b:         assertExecJavaCmdAsExpected(new String[] 
1:9f61c8b:             {"No command given.", usage}, cmd, 1);
1:5028317: 
1:9f61c8b:         // some option but no command
1:9f61c8b:         cmd = new String[] {nsc, "-h", "localhost"};
1:9f61c8b:         assertExecJavaCmdAsExpected(new String[] 
1:9f61c8b:             {"No command given.", usage}, cmd, 1);
1:5028317: 
1:9f61c8b:         // unknown command
1:9f61c8b:         cmd = new String[] {nsc, "unknowncmd"};
1:9f61c8b:         assertExecJavaCmdAsExpected(new String[] 
1:9f61c8b:             {"Command unknowncmd is unknown.", usage}, cmd, 1);
1:5028317: 
1:9f61c8b:         // unknown option
1:9f61c8b:         cmd = new String[] {nsc, "-unknownarg"};
1:9f61c8b:         assertExecJavaCmdAsExpected(new String[] 
1:9f61c8b:             {"Argument -unknownarg is unknown.", usage}, cmd, 1);
1:5028317: 
1:9f61c8b:         // wrong number of arguments
1:9f61c8b:         cmd = new String[] {nsc, "ping", "arg1"};
1:9f61c8b:         assertExecJavaCmdAsExpected(new String[] 
1:9f61c8b:             {"Invalid number of arguments for command ping.", usage}, cmd, 1);
1:5028317:     }
1:5028317:     
1:45680ff:      /** 
1:5028317:      * @throws Exception
1:5028317:      */
1:6698807:     public void test_02_TraceCommands() throws Exception
1:5028317:     {
1:65eb19a:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:5028317:         String derbySystemHome = getSystemProperty("derby.system.home");
1:5028317:         nsctrl.setTraceDirectory(derbySystemHome);
1:65eb19a:        
1:5028317:         nsctrl.trace(true);
1:5028317:         nsctrl.ping();
1:5028317:         assertTrue(fileExists(derbySystemHome+"/Server3.trace"));
1:5028317:         nsctrl.trace(false);
1:65eb19a:         
1:5028317:         // now try on a directory where we don't have permission
1:5028317:         // this won't actually cause a failure until we turn on tracing.
1:5028317:         // assume we don't have permission to write to root.
1:5028317:         nsctrl.setTraceDirectory("/");
1:7d10f01:         
1:5028317:         // attempt to turn on tracing to location where we don't have permisson
3:5028317:         try {
1:5028317:             nsctrl.trace(true);
1:5028317:             fail("Should have gotten an exception turning on tracing");
1:5028317:         } catch (Exception e) {
1:5028317:             // expected exception
1:5028317:         }
1:5028317:         // make sure we can still ping
1:5028317:         nsctrl.ping();
1:5028317:     
1:5028317:                         
1:5028317:     }
1:5028317:     
1:65eb19a:     /**
1:45680ff:      * Test tracing with system properties if we have no permission
1:45680ff:      * to write to the trace directory. Make sure we can still 
1:45680ff:      * get a connection.  Trace directory set to "/" in test setup.
1:45680ff:      * 
1:45680ff:      */
1:45680ff:     public void xtestTraceSystemPropertiesNoPermission() throws SQLException{
1:45680ff:         // our connection should go through fine and there should be an
1:45680ff:         // exception in the derby.log.
1:45680ff:         //access denied (java.io.FilePermission \\ read). I verified 
1:45680ff:         // this manually when creating this fixture but do not know 
1:45680ff:         // how to check in the test.
1:45680ff:         assertEquals(getSystemProperty("derby.drda.traceAll"),"true");
1:45680ff:         assertEquals(getSystemProperty("derby.drda.traceDirectory"),"/");
1:45680ff:         Connection conn = getConnection();
1:45680ff:         assertFalse(conn.getMetaData().isReadOnly());
1:45680ff:     }
1:45680ff:     
1:45680ff:     /**
1:45680ff:      * Test tracing with system properties when we have permissions
1:45680ff:      * to write to the trace directory. 
1:45680ff:      * Check that the tracing file is there.
1:45680ff:      * 
1:45680ff:      */
1:45680ff:     public void xtestTraceSystemPropertiesHasPermission() throws SQLException{
1:45680ff:         String derbysystemhome = getSystemProperty("derby.system.home");
1:45680ff:         assertEquals(getSystemProperty("derby.drda.traceAll"),"true");
1:45680ff:         assertEquals(getSystemProperty("derby.drda.traceDirectory"),derbysystemhome + "/trace");
1:45680ff:         Connection conn = getConnection();
1:45680ff:         assertFalse(conn.getMetaData().isReadOnly());
1:45680ff:         assertTrue(fileExists(derbysystemhome+"/trace/Server1.trace"));
1:45680ff:     }
1:badaed7: 
1:badaed7:     /**
1:badaed7:      * Run the shutdown command with credentials that contain non-ASCII
1:badaed7:      * characters. Regression test case for DERBY-6457.
1:badaed7:      */
1:badaed7:     public void xtestShutdownWithNonASCIICredentials() throws Exception {
1:badaed7:         NetworkServerControl control =
1:badaed7:                 NetworkServerTestSetup.getNetworkServerControl();
1:badaed7: 
1:badaed7:         // Verify that the server is up.
1:badaed7:         NetworkServerTestSetup.pingForServerStart(control);
1:badaed7: 
1:badaed7:         // Shut down the server with the default credentials, which contain
1:badaed7:         // non-ASCII characters. See NON_ASCII_USER and NON_ASCII_PASSWORD.
1:badaed7:         // This call used to hang forever before DERBY-6457 was fixed.
1:badaed7:         control.shutdown();
1:badaed7: 
1:badaed7:         // Verify that the server is down.
1:badaed7:         NetworkServerTestSetup.pingForServerUp(control, null, false);
1:badaed7:     }
1:badaed7: 
2:5028317:     /**
1:65eb19a:      * Test NetworkServerControl ping command.
1:65eb19a:      * @throws Exception
1:65eb19a:      */
1:6698807:     public void test_03_Ping() throws Exception
1:65eb19a:     {
1:65eb19a:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:45680ff:         
1:65eb19a:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:65eb19a:         nsctrl.ping();
1:45680ff:         
1:65eb19a:         // Note:Cannot test ping with unknown host because it fails in
1:65eb19a:         // InetAddress.getByName()
1:65eb19a:         
1:65eb19a:         nsctrl = new NetworkServerControl(privInetAddressGetByName(currentHost), 9393);
1:65eb19a:         try {        
1:65eb19a:         	nsctrl.ping();
1:65eb19a:         	fail("Should not have been able to ping on port 9393");
1:65eb19a:         }catch (Exception e){
1:65eb19a:         	// expected exception
1:65eb19a:         }
1:65eb19a:     }
1:65eb19a:     
1:65eb19a:     /**
1:31fad6a:      * Wraps InitAddress.getByName in privilege block.
1:31fad6a:      *
1:31fad6a:      * @param host host to resolve
1:31fad6a:      * @return InetAddress of host
1:31fad6a:      */
1:31fad6a:     private InetAddress privInetAddressGetByName(final String host)
1:31fad6a:             throws UnknownHostException {
1:65eb19a:         try {
1:31fad6a:             return AccessController.doPrivileged(
1:31fad6a:                     new PrivilegedExceptionAction<InetAddress>() {
1:31fad6a:                 public InetAddress run() throws UnknownHostException {
1:31fad6a:                     return InetAddress.getByName(host);
1:31fad6a:                 }
1:31fad6a:             });
1:5028317:         } catch (PrivilegedActionException pae) {
1:31fad6a:             throw (UnknownHostException) pae.getCause();
1:31fad6a:         }
1:65eb19a:     }
1:31fad6a: 
1:31fad6a:     private boolean fileExists(String filename) {
1:31fad6a:         return PrivilegedFileOpsForTests.exists(new File(filename));
1:65eb19a:     }
1:65eb19a:     
1:5028317:     /**
1:5028317:      * Add decorators to a test run. Context is established in the reverse order
1:5028317:      * that decorators are declared here. That is, decorators compose in reverse
1:5028317:      * order. The order of the setup methods is:
1:65eb19a:      *
1:5028317:      * <ul>
1:5028317:      * <li>Copy security policy to visible location.</li>
1:5028317:      * <li>Install a security manager.</li>
1:5028317:      * <li>Run the tests.</li>
1:5028317:      * </ul>
1:65eb19a:      */
1:5028317:     private static Test decorateTest()
1:65eb19a:     {
1:6698807:         Test test = TestConfiguration.clientServerDecorator(
1:1ae02c9:                 new BaseTestSuite(NetworkServerControlApiTest.class));
3:5028317:         //
1:5028317:         // Install a security manager using the initial policy file.
1:5028317:         //
1:b32256d:         return new SecurityManagerSetup(test, POLICY_FILE_NAME);
1:65eb19a:     }
1:65eb19a:     
1:5028317:     public static Test suite()
1:5028317:     {
1:65eb19a:         
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("NetworkServerControlApiTest");
1:65eb19a:         
1:5028317:         // Need derbynet.jar in the classpath!
1:5028317:         if (!Derby.hasServer())
1:5028317:             return suite;
1:45680ff:         suite.addTest(decorateTest());
1:ec64ae8:         
1:45680ff:         suite = decorateSystemPropertyTests(suite);
1:badaed7: 
1:badaed7:         suite.addTest(decorateShutdownTest(
1:badaed7:                 "xtestShutdownWithNonASCIICredentials",
1:badaed7:                 NON_ASCII_USER, NON_ASCII_PASSWORD));
1:badaed7: 
1:45680ff:         return suite;
1:45680ff:     }
1:ec64ae8: 
1:1ae02c9:     private static BaseTestSuite decorateSystemPropertyTests(
1:1ae02c9:         BaseTestSuite suite) {
1:1ae02c9: 
1:45680ff:         Properties traceProps = new Properties();
1:45680ff:         traceProps.put("derby.drda.traceDirectory","/");
1:45680ff:         traceProps.put("derby.drda.traceAll","true");
1:45680ff:         suite.addTest(new SystemPropertyTestSetup(TestConfiguration.clientServerDecorator(
1:45680ff:                 new NetworkServerControlApiTest("xtestTraceSystemPropertiesNoPermission")),
1:45680ff:                     traceProps));
1:45680ff:         
1:45680ff:         Properties traceProps2 = new Properties();
1:45680ff:         
1:45680ff:         traceProps2.put("derby.drda.traceDirectory",getSystemProperty("derby.system.home") + "/trace");
1:45680ff:         traceProps2.put("derby.drda.traceAll","true");
1:45680ff:         suite.addTest(new SystemPropertyTestSetup(TestConfiguration.clientServerDecorator(
1:45680ff:                 new NetworkServerControlApiTest("xtestTraceSystemPropertiesHasPermission")),
1:45680ff:                     traceProps2));
1:45680ff:         
1:45680ff:         return suite;
1:5028317:     }
1:65eb19a: 
1:badaed7:     /**
1:badaed7:      * Decorate a test case that will attempt to shut down a network server
1:badaed7:      * using the supplied credentials. The network server will run with
1:badaed7:      * authentication enabled.
1:badaed7:      *
1:badaed7:      * @param testName name of the test case to decorate
1:badaed7:      * @param user the user that should attempt to shut down the server
1:badaed7:      * @param password the password to be used when shutting down the server
1:badaed7:      * @return the decorated test case
1:badaed7:      */
1:badaed7:     private static Test decorateShutdownTest(String testName,
1:badaed7:                                              String user, String password) {
1:badaed7:         Properties props = new Properties();
1:badaed7:         props.setProperty("derby.connection.requireAuthentication", "true");
1:badaed7:         props.setProperty("derby.authentication.provider", "BUILTIN");
1:badaed7:         props.setProperty("derby.user." + user, password);
1:badaed7: 
1:badaed7:         Test test = new NetworkServerControlApiTest(testName);
1:badaed7:         test = TestConfiguration.clientServerDecorator(test);
1:badaed7:         test = new SystemPropertyTestSetup(test, props, true);
1:badaed7:         test = TestConfiguration.changeUserDecorator(test, user, password);
1:badaed7:         return test;
1:badaed7:     }
1:badaed7: 
1:ec64ae8:      // test fixtures from maxthreads
1:6698807:     public void test_04_MaxThreads_0() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd1 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "0","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         // test maxthreads 0
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]
1:ec64ae8:                 {"Max threads changed to 0."}, maxthreadsCmd1, 0);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_05_MaxThreads_Neg1() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd2 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "-1", "-h", "localhost", "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         String host = TestUtil.getHostName();
1:ec64ae8:         maxthreadsCmd2[4] = host;
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 0."}, maxthreadsCmd2, 0);
1:ec64ae8:         //test maxthreads -1
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:ec64ae8:     /**
1:ec64ae8:      * Calling with -12 should fail.
1:ec64ae8:      * @throws Exception
1:ec64ae8:      */
1:6698807:     public void test_06_MaxThreads_Neg12() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),
1:ad60cd5:                     TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd3 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "-12","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         //test maxthreads -12
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{
1:ec64ae8:                 "Invalid value, -12, for maxthreads.",
1:ec64ae8:                 "Usage: NetworkServerControl <commands>",
1:ec64ae8:                 "Commands:",
1:62d63f6:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:62d63f6:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:62d63f6:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:ec64ae8:         }, maxthreadsCmd3, 1);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_07_MaxThreads_2147483647() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd4 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "2147483647","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 2147483647."}, maxthreadsCmd4, 0);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 2147483647, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_08_MaxThreads_9000() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "9000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 9000."}, maxthreadsCmd5, 0);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 9000, maxValue);
1:ec64ae8:     }
1:1316d29: 
1:ec64ae8:     /**
1:ec64ae8:      * Calling with 'a' causes a NFE which results in an error.
1:ec64ae8:      * @throws Exception
1:ec64ae8:      */
1:6698807:     public void test_09_MaxThreads_Invalid() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         String[] maxthreadsCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "maxthreads", "10000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 10000."}, maxthreadsCmd5, 0);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 10000, maxValue);
1:ec64ae8: 
1:ec64ae8:         String[] maxthreadsCmd6 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ec64ae8:                 "maxthreads", "a"};
1:ec64ae8:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, a, for maxthreads.",
1:ec64ae8:                 "Usage: NetworkServerControl <commands>",
1:ec64ae8:                 "Commands:",
1:62d63f6:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:62d63f6:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:62d63f6:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",}, maxthreadsCmd6, 1);
1:ec64ae8: 
1:ec64ae8: 
1:ec64ae8:         maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 10000, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_10_MaxThreadsCallable_0() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         server.setMaxThreads(0);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_11_MaxThreadsCallable_Neg1() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         server.setMaxThreads(-1);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:ec64ae8:     /**
1:ec64ae8:      * Test should throw an exception.
1:ec64ae8:      * @throws Exception
1:ec64ae8:      */
1:6698807:     public void test_12_MaxThreadsCallable_Neg12() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         try {
1:ec64ae8:             server.setMaxThreads(-2);
1:ec64ae8:             fail("Should have thrown an exception with 'DRDA_InvalidValue.U:Invalid value, -2, for maxthreads.'");
1:ec64ae8:         } catch (Exception e) {
1:ec64ae8:             assertEquals("DRDA_InvalidValue.U:Invalid value, -2, for maxthreads.", e.getMessage());
1:ec64ae8:         }
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_13_MaxThreadsCallable_2147483647() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         server.setMaxThreads(2147483647);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 2147483647, maxValue);
1:ec64ae8:     }
1:ec64ae8: 
1:6698807:     public void test_14_MaxThreadsCallable_9000() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:ec64ae8:         server.setMaxThreads(9000);
1:ec64ae8:         int maxValue = server.getMaxThreads();
1:ec64ae8:         assertEquals("Fail! Max threads value incorrect!", 9000, maxValue);
1:ec64ae8:     }
1:5028317: 
1:1316d29:       // timeslice test fixtures
1:6698807:     public void test_15_TimeSlice_0() throws Exception {
1:1316d29:         int value = 0;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd1 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "0","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 0."}, timesliceCmd1, 0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_16_TimeSlice_Neg1() throws Exception {
1:1316d29:         int value = 0;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd2 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "-1", "-h", "localhost", "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         String host = TestUtil.getHostName();
1:1316d29:         timesliceCmd2[4] = host;
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 0."}, timesliceCmd2, 0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_17_TimeSlice_Neg12() throws Exception {
1:1316d29:         int value = 0;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd3 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "-12","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, -12, for timeslice.",
1:1316d29:                 "Usage: NetworkServerControl <commands> ",
1:1316d29:                 "Commands:",
1:62d63f6:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:62d63f6:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:62d63f6:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]"}, timesliceCmd3, 1);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_18_TimeSlice_2147483647() throws Exception {
1:1316d29:         int value = 2147483647;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd4 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "2147483647","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 2147483647."}, timesliceCmd4, 0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_19_TimeSlice_9000() throws Exception {
1:1316d29:         int value = 9000;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "9000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 9000."}, timesliceCmd5, 0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_20_TimeSlice_a() throws Exception {
1:1316d29:         int value = 8000;
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         String[] timesliceCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:ad60cd5:                 "timeslice", "8000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 8000."}, timesliceCmd5, 0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:         String[] timesliceCmd6 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:1316d29:                 "timeslice", "a"};
1:1316d29:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, a, for timeslice.",
1:1316d29:                 "Usage: NetworkServerControl <commands> ",
1:1316d29:                 "Commands:",
1:62d63f6:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:62d63f6:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:62d63f6:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:0325a5d:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:62d63f6:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]"}, timesliceCmd6, 1);
1:1316d29:         timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_21_TimeSliceCallable_0() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         int value = 0;
1:1316d29:         server.setTimeSlice(0);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_22_TimeSliceCallable_Neg1() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         int value = 0;
1:1316d29:         server.setTimeSlice(-1);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_23_TimeSliceCallable_Neg2() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         int value = 0;
1:1316d29:         try {
1:1316d29:             server.setTimeSlice(-2);
1:1316d29:         } catch (Exception e) {
1:1316d29:             assertTrue(e.getMessage().indexOf("Invalid value") != -1); 
1:1316d29:         }
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_24_TimeSliceCallable_2147483647() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         int value = 2147483647;
1:1316d29:         server.setTimeSlice(2147483647);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:1316d29: 
1:6698807:     public void test_25_TimeSliceCallable_9000() throws Exception {
1:ad60cd5:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:1316d29:         int value = 9000;
1:1316d29:         server.setTimeSlice(9000);
1:1316d29:         int timeSliceValue = server.getTimeSlice();
1:1316d29:         assertEquals(value, timeSliceValue);
1:1316d29:     }
1:5028317: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:                 new BaseTestSuite(NetworkServerControlApiTest.class));
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("NetworkServerControlApiTest");
/////////////////////////////////////////////////////////////////////////
1:     private static BaseTestSuite decorateSystemPropertyTests(
1:         BaseTestSuite suite) {
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:badaed7
/////////////////////////////////////////////////////////////////////////
1:     private static final String NON_ASCII_USER = "bj\u00F8rn";
1:     private static final String NON_ASCII_PASSWORD = "l\u00F8yndom";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Run the shutdown command with credentials that contain non-ASCII
1:      * characters. Regression test case for DERBY-6457.
1:      */
1:     public void xtestShutdownWithNonASCIICredentials() throws Exception {
1:         NetworkServerControl control =
1:                 NetworkServerTestSetup.getNetworkServerControl();
1: 
1:         // Verify that the server is up.
1:         NetworkServerTestSetup.pingForServerStart(control);
1: 
1:         // Shut down the server with the default credentials, which contain
1:         // non-ASCII characters. See NON_ASCII_USER and NON_ASCII_PASSWORD.
1:         // This call used to hang forever before DERBY-6457 was fixed.
1:         control.shutdown();
1: 
1:         // Verify that the server is down.
1:         NetworkServerTestSetup.pingForServerUp(control, null, false);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         suite.addTest(decorateShutdownTest(
1:                 "xtestShutdownWithNonASCIICredentials",
1:                 NON_ASCII_USER, NON_ASCII_PASSWORD));
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Decorate a test case that will attempt to shut down a network server
1:      * using the supplied credentials. The network server will run with
1:      * authentication enabled.
1:      *
1:      * @param testName name of the test case to decorate
1:      * @param user the user that should attempt to shut down the server
1:      * @param password the password to be used when shutting down the server
1:      * @return the decorated test case
1:      */
1:     private static Test decorateShutdownTest(String testName,
1:                                              String user, String password) {
1:         Properties props = new Properties();
1:         props.setProperty("derby.connection.requireAuthentication", "true");
1:         props.setProperty("derby.authentication.provider", "BUILTIN");
1:         props.setProperty("derby.user." + user, password);
1: 
1:         Test test = new NetworkServerControlApiTest(testName);
1:         test = TestConfiguration.clientServerDecorator(test);
1:         test = new SystemPropertyTestSetup(test, props, true);
1:         test = TestConfiguration.changeUserDecorator(test, user, password);
1:         return test;
1:     }
1: 
commit:b32256d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String POLICY_FILE_NAME =
1:             "org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.policy";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new SecurityManagerSetup(test, POLICY_FILE_NAME);
commit:31fad6a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Wraps InitAddress.getByName in privilege block.
1:      *
1:      * @param host host to resolve
1:      * @return InetAddress of host
1:      */
1:     private InetAddress privInetAddressGetByName(final String host)
1:             throws UnknownHostException {
1:             return AccessController.doPrivileged(
1:                     new PrivilegedExceptionAction<InetAddress>() {
1:                 public InetAddress run() throws UnknownHostException {
1:                     return InetAddress.getByName(host);
1:                 }
1:             });
1:             throw (UnknownHostException) pae.getCause();
1:     }
1: 
1:     private boolean fileExists(String filename) {
1:         return PrivilegedFileOpsForTests.exists(new File(filename));
commit:6698807
/////////////////////////////////////////////////////////////////////////
1:     public void test_01_WrongUsage() throws Exception
/////////////////////////////////////////////////////////////////////////
1:     public void test_02_TraceCommands() throws Exception
/////////////////////////////////////////////////////////////////////////
1:     public void test_03_Ping() throws Exception
/////////////////////////////////////////////////////////////////////////
1: 
0:         // Use a fixed ordering of the test cases. Some of the test cases set
0:         // properties that will be seen by subsequent test cases, but only if
0:         // they run in one particular order. Also, some test cases depend on
0:         // the exact connection number, which can only be guaranteed if we
0:         // know exactly how many connections have been established so far, and
0:         // then we need a stable ordering of the test cases.
1:         Test test = TestConfiguration.clientServerDecorator(
0:                 TestConfiguration.orderedSuite(
0:                         NetworkServerControlApiTest.class));
/////////////////////////////////////////////////////////////////////////
1:     public void test_04_MaxThreads_0() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_05_MaxThreads_Neg1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_06_MaxThreads_Neg12() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_07_MaxThreads_2147483647() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_08_MaxThreads_9000() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_09_MaxThreads_Invalid() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_10_MaxThreadsCallable_0() throws Exception {
1:     public void test_11_MaxThreadsCallable_Neg1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_12_MaxThreadsCallable_Neg12() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_13_MaxThreadsCallable_2147483647() throws Exception {
1:     public void test_14_MaxThreadsCallable_9000() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_15_TimeSlice_0() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_16_TimeSlice_Neg1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_17_TimeSlice_Neg12() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_18_TimeSlice_2147483647() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_19_TimeSlice_9000() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_20_TimeSlice_a() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_21_TimeSliceCallable_0() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_22_TimeSliceCallable_Neg1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_23_TimeSliceCallable_Neg2() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_24_TimeSliceCallable_2147483647() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_25_TimeSliceCallable_9000() throws Exception {
commit:a02269e
/////////////////////////////////////////////////////////////////////////
0:                 "logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
/////////////////////////////////////////////////////////////////////////
0:                 "logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
/////////////////////////////////////////////////////////////////////////
0:                 "logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
/////////////////////////////////////////////////////////////////////////
0:                 "logconnections {on|off} [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0325a5d
/////////////////////////////////////////////////////////////////////////
1:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
/////////////////////////////////////////////////////////////////////////
1:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
/////////////////////////////////////////////////////////////////////////
1:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
/////////////////////////////////////////////////////////////////////////
1:                 "logconnections { on|off } [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "trace { on|off } [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
commit:62d63f6
/////////////////////////////////////////////////////////////////////////
1:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "logconnections {on|off} [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
/////////////////////////////////////////////////////////////////////////
1:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "logconnections {on|off} [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]",}, maxthreadsCmd6, 1);
/////////////////////////////////////////////////////////////////////////
1:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "logconnections {on|off} [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]"}, timesliceCmd3, 1);
/////////////////////////////////////////////////////////////////////////
1:                 "start [-h <host>] [-p <port number>] [-noSecurityManager] [-ssl <ssl mode>]",
1:                 "shutdown [-h <host>][-p <port number>] [-ssl <ssl mode>] [-user <username>] [-password <password>]",
1:                 "ping [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "sysinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "runtimeinfo [-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "logconnections {on|off} [-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "maxthreads <max>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "timeslice <milliseconds>[-h <host>][-p <port number>] [-ssl <ssl mode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <port number>] [-ssl <ssl mode>]",
1:                 "tracedirectory <trace directory>[-h <host>][-p <port number>] [-ssl <ssl mode>]"}, timesliceCmd6, 1);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ad60cd5
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "0","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "-1", "-h", "localhost", "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),
1:                     TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "-12","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "2147483647","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "9000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "maxthreads", "10000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "0","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "-1", "-h", "localhost", "-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "-12","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "2147483647","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "9000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
1:                 "timeslice", "8000","-p", String.valueOf(TestConfiguration.getCurrent().getPort())};
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
commit:1316d29
/////////////////////////////////////////////////////////////////////////
1: 
1:       // timeslice test fixtures
0:     public void testTimeSlice_0() throws Exception {
1:         int value = 0;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd1 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "0"};
1:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 0."}, timesliceCmd1, 0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSlice_Neg1() throws Exception {
1:         int value = 0;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd2 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "-1", "-h", "localhost", "-p", "1527"};
1:         String host = TestUtil.getHostName();
1:         timesliceCmd2[4] = host;
1:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 0."}, timesliceCmd2, 0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSlice_Neg12() throws Exception {
1:         int value = 0;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd3 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "-12"};
1:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, -12, for timeslice.",
1:                 "Usage: NetworkServerControl <commands> ",
1:                 "Commands:",
0:                 "start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]",
0:                 "shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]",
0:                 "ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]"}, timesliceCmd3, 1);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSlice_2147483647() throws Exception {
1:         int value = 2147483647;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd4 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "2147483647"};
1:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 2147483647."}, timesliceCmd4, 0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSlice_9000() throws Exception {
1:         int value = 9000;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "9000"};
1:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 9000."}, timesliceCmd5, 0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSlice_a() throws Exception {
1:         int value = 8000;
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] timesliceCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "timeslice", "8000"};
1:         assertExecJavaCmdAsExpected(new String[]{"Time slice changed to 8000."}, timesliceCmd5, 0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:         String[] timesliceCmd6 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:                 "timeslice", "a"};
1:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, a, for timeslice.",
1:                 "Usage: NetworkServerControl <commands> ",
1:                 "Commands:",
0:                 "start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]",
0:                 "shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]",
0:                 "ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]"}, timesliceCmd6, 1);
1:         timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSliceCallable_0() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         int value = 0;
1:         server.setTimeSlice(0);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSliceCallable_Neg1() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         int value = 0;
1:         server.setTimeSlice(-1);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSliceCallable_Neg2() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         int value = 0;
1:         try {
1:             server.setTimeSlice(-2);
1:         } catch (Exception e) {
1:             assertTrue(e.getMessage().indexOf("Invalid value") != -1); 
1:         }
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSliceCallable_2147483647() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         int value = 2147483647;
1:         server.setTimeSlice(2147483647);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
1: 
0:     public void testTimeSliceCallable_9000() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         int value = 9000;
1:         server.setTimeSlice(9000);
1:         int timeSliceValue = server.getTimeSlice();
1:         assertEquals(value, timeSliceValue);
1:     }
commit:ec64ae8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
/////////////////////////////////////////////////////////////////////////
1: 
1:      // test fixtures from maxthreads
0:     public void testMaxThreads_0() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd1 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "0"};
1:         // test maxthreads 0
1:         assertExecJavaCmdAsExpected(new String[]
1:                 {"Max threads changed to 0."}, maxthreadsCmd1, 0);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:     }
1: 
0:     public void testMaxThreads_Neg1() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd2 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "-1", "-h", "localhost", "-p", "1527"};
1:         String host = TestUtil.getHostName();
1:         maxthreadsCmd2[4] = host;
1:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 0."}, maxthreadsCmd2, 0);
1:         //test maxthreads -1
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:     }
1: 
1:     /**
1:      * Calling with -12 should fail.
1:      * @throws Exception
1:      */
0:     public void testMaxThreads_Neg12() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd3 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "-12"};
1:         //test maxthreads -12
1:         assertExecJavaCmdAsExpected(new String[]{
1:                 "Invalid value, -12, for maxthreads.",
1:                 "Usage: NetworkServerControl <commands>",
1:                 "Commands:",
0:                 "start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]",
0:                 "shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]",
0:                 "ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
1:         }, maxthreadsCmd3, 1);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:     }
1: 
0:     public void testMaxThreads_2147483647() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd4 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "2147483647"};
1:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 2147483647."}, maxthreadsCmd4, 0);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 2147483647, maxValue);
1:     }
1: 
0:     public void testMaxThreads_9000() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "9000"};
1:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 9000."}, maxthreadsCmd5, 0);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 9000, maxValue);
1:     }
1: 
1:     /**
1:      * Calling with 'a' causes a NFE which results in an error.
1:      * @throws Exception
1:      */
0:     public void testMaxThreads_Invalid() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         String[] maxthreadsCmd5 = new String[]{"org.apache.derby.drda.NetworkServerControl",
0:                 "maxthreads", "10000"};
1:         assertExecJavaCmdAsExpected(new String[]{"Max threads changed to 10000."}, maxthreadsCmd5, 0);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 10000, maxValue);
1: 
1:         String[] maxthreadsCmd6 = new String[]{"org.apache.derby.drda.NetworkServerControl",
1:                 "maxthreads", "a"};
1:         assertExecJavaCmdAsExpected(new String[]{"Invalid value, a, for maxthreads.",
1:                 "Usage: NetworkServerControl <commands>",
1:                 "Commands:",
0:                 "start [-h <host>] [-p <portnumber>] [-noSecurityManager] [-ssl <sslmode>]",
0:                 "shutdown [-h <host>][-p <portnumber>] [-ssl <sslmode>] [-user <username>] [-password <password>]",
0:                 "ping [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "sysinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "runtimeinfo [-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "maxthreads <max>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "timeslice <milliseconds>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "trace {on|off} [-s <session id>][-h <host>][-p <portnumber>] [-ssl <sslmode>]",
0:                 "tracedirectory <traceDirectory>[-h <host>][-p <portnumber>] [-ssl <sslmode>]",}, maxthreadsCmd6, 1);
1: 
1: 
1:         maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 10000, maxValue);
1:     }
1: 
0:     public void testMaxThreadsCallable_0() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         server.setMaxThreads(0);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:     }
1: 
0:     public void testMaxThreadsCallable_Neg1() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         server.setMaxThreads(-1);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 0, maxValue);
1:     }
1: 
1:     /**
1:      * Test should throw an exception.
1:      * @throws Exception
1:      */
0:     public void testMaxThreadsCallable_Neg12() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         try {
1:             server.setMaxThreads(-2);
1:             fail("Should have thrown an exception with 'DRDA_InvalidValue.U:Invalid value, -2, for maxthreads.'");
1:         } catch (Exception e) {
1:             assertEquals("DRDA_InvalidValue.U:Invalid value, -2, for maxthreads.", e.getMessage());
1:         }
1:     }
1: 
0:     public void testMaxThreadsCallable_2147483647() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         server.setMaxThreads(2147483647);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 2147483647, maxValue);
1:     }
1: 
0:     public void testMaxThreadsCallable_9000() throws Exception {
0:         NetworkServerControl server = new NetworkServerControl();
1:         server.setMaxThreads(9000);
1:         int maxValue = server.getMaxThreads();
1:         assertEquals("Fail! Max threads value incorrect!", 9000, maxValue);
1:     }
commit:45680ff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: 
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Test tracing with system properties if we have no permission
1:      * to write to the trace directory. Make sure we can still 
1:      * get a connection.  Trace directory set to "/" in test setup.
1:      * 
1:      */
1:     public void xtestTraceSystemPropertiesNoPermission() throws SQLException{
1:         // our connection should go through fine and there should be an
1:         // exception in the derby.log.
1:         //access denied (java.io.FilePermission \\ read). I verified 
1:         // this manually when creating this fixture but do not know 
1:         // how to check in the test.
1:         assertEquals(getSystemProperty("derby.drda.traceAll"),"true");
1:         assertEquals(getSystemProperty("derby.drda.traceDirectory"),"/");
1:         Connection conn = getConnection();
1:         assertFalse(conn.getMetaData().isReadOnly());
1:     }
1:     
1:     /**
1:      * Test tracing with system properties when we have permissions
1:      * to write to the trace directory. 
1:      * Check that the tracing file is there.
1:      * 
1:      */
1:     public void xtestTraceSystemPropertiesHasPermission() throws SQLException{
1:         String derbysystemhome = getSystemProperty("derby.system.home");
1:         assertEquals(getSystemProperty("derby.drda.traceAll"),"true");
1:         assertEquals(getSystemProperty("derby.drda.traceDirectory"),derbysystemhome + "/trace");
1:         Connection conn = getConnection();
1:         assertFalse(conn.getMetaData().isReadOnly());
1:         assertTrue(fileExists(derbysystemhome+"/trace/Server1.trace"));
1:     }
1:     
1:     
/////////////////////////////////////////////////////////////////////////
1:        
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(decorateTest());
1:         suite = decorateSystemPropertyTests(suite);
1:                     
1:         return suite;
1:     }
1: 
0:     private static TestSuite decorateSystemPropertyTests(TestSuite suite) {
1:         Properties traceProps = new Properties();
1:         traceProps.put("derby.drda.traceDirectory","/");
1:         traceProps.put("derby.drda.traceAll","true");
1:         suite.addTest(new SystemPropertyTestSetup(TestConfiguration.clientServerDecorator(
1:                 new NetworkServerControlApiTest("xtestTraceSystemPropertiesNoPermission")),
1:                     traceProps));
1:         
1:         Properties traceProps2 = new Properties();
1:         
1:         traceProps2.put("derby.drda.traceDirectory",getSystemProperty("derby.system.home") + "/trace");
1:         traceProps2.put("derby.drda.traceAll","true");
1:         suite.addTest(new SystemPropertyTestSetup(TestConfiguration.clientServerDecorator(
1:                 new NetworkServerControlApiTest("xtestTraceSystemPropertiesHasPermission")),
1:                     traceProps2));
1:         
1:         return suite;
commit:65eb19a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
0: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test NetworkServerControl ping command.
1:      * @throws Exception
1:      */
0:     public void testPing() throws Exception
1:     {
1:         String currentHost = TestConfiguration.getCurrent().getHostName();
1:         
1:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:         nsctrl.ping();
1:         
1:         // Note:Cannot test ping with unknown host because it fails in
1:         // InetAddress.getByName()
1:         
1:         nsctrl = new NetworkServerControl(privInetAddressGetByName(currentHost), 9393);
1:         try {        
1:         	nsctrl.ping();
1:         	fail("Should not have been able to ping on port 9393");
1:         }catch (Exception e){
1:         	// expected exception
1:         }
1:     }
1:     
1:         /**
0:          * Wraps InitAddress.getByName in privilege block.
1:          * 
0:          * @param host  host to resolve
0:          * @return InetAddress of host
0:          * @throws UnknownHostException
1:          */
0:         private InetAddress privInetAddressGetByName(final String host) throws UnknownHostException
1:         {
0:             InetAddress inetAddr = null;
1:             try {
0:                 inetAddr = (InetAddress) AccessController
0:                     .doPrivileged(new PrivilegedExceptionAction() {
0:                         public Object run() throws UnknownHostException {
0:                             return InetAddress.getByName(host);
1:                         }
0:                     });
0:             } catch (PrivilegedActionException pe) {
0:                 Exception e = pe.getException();
0:                 if (e instanceof UnknownHostException)
0:                     throw (UnknownHostException) e;
0:                 else
0:                     throw (SecurityException) e;
1:             }
0:         return inetAddr;
1:             
1:         }
1:         
1:         
1:     
1:     
commit:7d10f01
/////////////////////////////////////////////////////////////////////////
0: import java.security.Policy;
0: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1:        
commit:5028317
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import org.apache.derby.drda.NetworkServerControl;
0: import org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest;
0: import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.Derby;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: import java.io.File;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: public class NetworkServerControlApiTest extends BaseJDBCTestCase {
1: 
0:     private static String POLICY_FILE_NAME="functionTests/tests/derbynet/NetworkServerControlApiTest.policy";
0:     private static String TARGET_POLICY_FILE_NAME="server.policy";
1:     
1:     public NetworkServerControlApiTest(String name) {
1:         super(name);
1:        
1:     }
1: 
1:     /** Test NetworkServerControl API.
1:      *  Right now it tests only the trace command for DERBY-3110.
1:      *  TODO: Add tests for other API calls.
1:      */
1:     
1:     
1:      /** 
1:      * @throws Exception
1:      */
0:     public void testTraceCommands() throws Exception
1:     {
0:         NetworkServerControl nsctrl = new NetworkServerControl();
1:         String derbySystemHome = getSystemProperty("derby.system.home");
1:         nsctrl.setTraceDirectory(derbySystemHome);
1:         nsctrl.trace(true);
1:         nsctrl.ping();
1:         assertTrue(fileExists(derbySystemHome+"/Server3.trace"));
1:         nsctrl.trace(false);
1:         
1:         // now try on a directory where we don't have permission
1:         // this won't actually cause a failure until we turn on tracing.
1:         // assume we don't have permission to write to root.
1:         nsctrl.setTraceDirectory("/");
1:         
1:         // attempt to turn on tracing to location where we don't have permisson
1:         try {
1:             nsctrl.trace(true);
1:             fail("Should have gotten an exception turning on tracing");
1:         } catch (Exception e) {
1:             // expected exception
1:         }
1:         // make sure we can still ping
1:         nsctrl.ping();
1:     
1:                         
1:     }
1: 
0:     private boolean fileExists(String filename) {
0:         final File file = new File(filename);
1:         try {
0:             return ((Boolean)AccessController.doPrivileged(
0:                 new PrivilegedExceptionAction() {
0:                     public Object run() throws SecurityException {
0:                         return new Boolean(file.exists());
1:                     }
0:                 })).booleanValue();
1:         } catch (PrivilegedActionException pae) {
0:             throw (SecurityException)pae.getException();
1:         }
1:         
1:     }
1:     
1:     /**
0:      * Construct the name of the server policy file.
1:      */
0:     private String makeServerPolicyName()
1:     {
1:         try {
0:             String  userDir = getSystemProperty( "user.dir" );
0:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e)
1:         {
0:             System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
1: 
0:             return null;
1:         }
1:     }
1:     
1:     
1:     /**
1:      * Add decorators to a test run. Context is established in the reverse order
1:      * that decorators are declared here. That is, decorators compose in reverse
1:      * order. The order of the setup methods is:
0:      *
1:      * <ul>
1:      * <li>Copy security policy to visible location.</li>
1:      * <li>Install a security manager.</li>
1:      * <li>Run the tests.</li>
1:      * </ul>
1:      */
1:     private static Test decorateTest()
1:     {
1:         
0:         String serverPolicyName = new NetworkServerControlApiTest("test").makeServerPolicyName();
0:         Test test = TestConfiguration.clientServerSuite(NetworkServerControlApiTest.class);
1:         //
1:         // Install a security manager using the initial policy file.
1:         //
0:         test = new SecurityManagerSetup( test,serverPolicyName );
1:         
1:         
1:         //
0:         // Copy over the policy file we want to use.
1:         //
0:         test = new SupportFilesSetup
0:             (
0:              test,
0:              null,
0:              new String[] { POLICY_FILE_NAME },
0:              null,
0:              new String[] { TARGET_POLICY_FILE_NAME}
0:              );
1: 
0:         return test;
1:     }
1:     
1:     public static Test suite()
1:     {
1:         
0:         TestSuite suite = new TestSuite("NetworkServerControlApiTest");
1:         
1:         // Need derbynet.jar in the classpath!
1:         if (!Derby.hasServer())
1:             return suite;
1:         
0:         return decorateTest();
1:     }
1: }
author:Thomas Nielsen
-------------------------------------------------------------------------------
commit:9f61c8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      *   Test other commands. These should all give a helpful error and the
1:      *   usage message
0:      */
0:     public void testWrongUsage() throws Exception
0:     {
1:         final String nsc = "org.apache.derby.drda.NetworkServerControl";
1:         // we'll assume that we get the full message if we get 'Usage'
1:         // because sometimes, the message gets returned with carriage return,
1:         // and sometimes it doesn't, checking for two different parts...
1:         final String usage = "Usage: ";
0: 
1:         // no arguments
1:         String[] cmd = new String[] {nsc};
1:         assertExecJavaCmdAsExpected(new String[] 
1:             {"No command given.", usage}, cmd, 1);
0: 
1:         // some option but no command
1:         cmd = new String[] {nsc, "-h", "localhost"};
1:         assertExecJavaCmdAsExpected(new String[] 
1:             {"No command given.", usage}, cmd, 1);
0: 
1:         // unknown command
1:         cmd = new String[] {nsc, "unknowncmd"};
1:         assertExecJavaCmdAsExpected(new String[] 
1:             {"Command unknowncmd is unknown.", usage}, cmd, 1);
0: 
1:         // unknown option
1:         cmd = new String[] {nsc, "-unknownarg"};
1:         assertExecJavaCmdAsExpected(new String[] 
1:             {"Argument -unknownarg is unknown.", usage}, cmd, 1);
0: 
1:         // wrong number of arguments
1:         cmd = new String[] {nsc, "ping", "arg1"};
1:         assertExecJavaCmdAsExpected(new String[] 
1:             {"Invalid number of arguments for command ping.", usage}, cmd, 1);
0:     }
============================================================================