1:b8d1d8a: /*
1:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester2
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.tester;
1:b8d1d8a: 
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * Tester2 - Threads that frequently opens and closed based on a random choice of number
1:b8d1d8a:  */
1:b8d1d8a: public class Tester2 extends TesterObject {
1:b8d1d8a: 
1:b8d1d8a: 	//*******************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// Constructor. Get's the name of the thread running this for use in messages
1:b8d1d8a: 	//
1:b8d1d8a: 	//*******************************************************************************
1:b8d1d8a: 	public Tester2(String name) {
1:b8d1d8a: 		super(name);
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 
1:b8d1d8a: 	//**************************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// This starts the acutal test operations.  Overrides the startTesting() of parent.
1:b8d1d8a: 	// Tester2 profile -
1:b8d1d8a: 	//     The connection is frequently opened and closed based on
1:b8d1d8a: 	//     a random choice between 1 and MAX_OPERATIONS_PER_CONN number of
1:b8d1d8a: 	//     transaction batches committed by this client type.  This client will
1:b8d1d8a: 	//     do Insert/Update/Delete and simple Select queries over a
1:b8d1d8a: 	//     small to medium set of data determined randomly over MAX_LOW_STRESS_ROWS rows.
1:b8d1d8a: 	//
1:b8d1d8a: 	//***************************************************************************************
1:b8d1d8a: 	public void startTesting() {
1:b8d1d8a: 
1:b8d1d8a: 		//The following loop will be done nstest.MAX_ITERATIONS times after which we exit the thread
1:b8d1d8a: 		// Note that the connection is frequently opened & closed.  Autocommit is left on, so
1:b8d1d8a: 		// per connection, we make MAX_OPERATIONS_PER_CONN number of transaction batches
1:b8d1d8a: 		// Each transaction batch works over MAX_LOW_STRESS_ROWS number of rows, with each row working
1:b8d1d8a: 		// as one transaction (since autocommit is on)
1:b8d1d8a: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1:b8d1d8a: 
1:b8d1d8a: 			//the connection will now open. It closes at the end of the loop
1:b8d1d8a: 			connex = getConnection();
1:b8d1d8a: 			if (connex == null) {
1:c043274: 				NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 						+ " could not get database connection");
1:b8d1d8a: 				return; //quit
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			//set autocommit to false to keep transaction control in your hand
1:b8d1d8a: 			//Too many deadlocks amd locking issues if this is not commented out
1:b8d1d8a: 			try {
1:b8d1d8a: 				connex.setAutoCommit(false);
1:b8d1d8a: 			} catch (Exception e) {
1:c043274: 				NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 						+ "'s setAutoCommit() failed:");
1:b8d1d8a: 				printException("setting AutoCommit in Tester2", e);
1:5a56bcc:                 
1:5a56bcc:                 // if you can't change the autocommit state, the connection is unusable.
1:5a56bcc:                 // get out of here.
1:5a56bcc:                 return;
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			//also set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to reduce number of
1:b8d1d8a: 			// deadlocks
1:b8d1d8a: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1:b8d1d8a: 
1:b8d1d8a: 			//Now do MAX_OPERATIONS_PER_CONN transaction batches within this connection
1:b8d1d8a: 			for (int numOp = 1; numOp < NsTest.MAX_OPERATIONS_PER_CONN; numOp++) {
1:b8d1d8a: 
1:b8d1d8a: 				//Now loop through nstest.MAX_LOW_STRESS_ROWS number of times/rows
1:b8d1d8a: 				// Here, we do randomly do either insert/update/delete operations or one select
1:b8d1d8a: 				int rnum = (int) (Math.random() * 100) % 4; //returns 0, 1, 2, 3
1:b8d1d8a: 
1:b8d1d8a: 				switch (rnum) {
1:b8d1d8a: 				case 0: //do a select operation
1:b8d1d8a: 					try {
1:b8d1d8a: 						int numSelected = doSelectOperation(NsTest.MAX_LOW_STRESS_ROWS);
1:c043274: 						NsTest.logger.println(getThread_id() + " selected "
1:b8d1d8a: 								+ numSelected + " rows");
1:b8d1d8a: 					} catch (Exception e) {
1:c043274: 						NsTest.logger.println("doSelect in thread " + getThread_id()
1:b8d1d8a: 								+ " threw ");
1:b8d1d8a: 						printException("doSelectOperation() in Tester2", e);
1:b8d1d8a: 					}
1:b8d1d8a: 					break;
1:b8d1d8a: 
1:b8d1d8a: 				case 1: //do Insert/Update/Delete operations
1:b8d1d8a: 				case 2: //do Insert/Update/Delete operations
1:b8d1d8a: 				case 3: //do Insert/Update/Delete operations
1:b8d1d8a: 					for (int j = 0; j < NsTest.MAX_LOW_STRESS_ROWS; j++) {
1:b8d1d8a: 						doIUDOperation();
1:b8d1d8a: 					}
1:b8d1d8a: 					break;
1:b8d1d8a: 				}
1:b8d1d8a: 
1:b8d1d8a: 				//Letting this be even though autocommit is on so that if later on if we decide to turn
1:b8d1d8a: 				// autocommit off, this automatically takes effect.
1:b8d1d8a: 				//commit
1:b8d1d8a: 				try {
1:b8d1d8a: 					connex.commit();
1:b8d1d8a: 				} catch (Exception e) {
1:c043274: 					NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 							+ "'s commit() failed:");
1:b8d1d8a: 					printException("committing Xn in Tester2", e);
1:5a56bcc:                     
1:5a56bcc:                     // if you can't commit, the connection is unusable.
1:5a56bcc:                     // get out of here.
1:5a56bcc:                     return;
1:b8d1d8a: 				}
1:b8d1d8a: 			}//end of for(int numOp=1...)
1:b8d1d8a: 
1:b8d1d8a: 			//close the connection for the next iteration
1:b8d1d8a: 			closeConnection();
1:b8d1d8a: 
1:b8d1d8a: 		}//end of for (int i=0;...)
1:b8d1d8a: 
1:c043274: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
1:b8d1d8a: 
1:b8d1d8a: 	}//end of startTesting()
1:b8d1d8a: 
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5a56bcc
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 // if you can't change the autocommit state, the connection is unusable.
1:                 // get out of here.
1:                 return;
/////////////////////////////////////////////////////////////////////////
1:                     
1:                     // if you can't commit, the connection is unusable.
1:                     // get out of here.
1:                     return;
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 						NsTest.logger.println(getThread_id() + " selected "
1: 						NsTest.logger.println("doSelect in thread " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 					NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.tester.Tester2
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.tester;
1: 
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * Tester2 - Threads that frequently opens and closed based on a random choice of number
1:  */
1: public class Tester2 extends TesterObject {
1: 
1: 	//*******************************************************************************
1: 	//
1: 	// Constructor. Get's the name of the thread running this for use in messages
1: 	//
1: 	//*******************************************************************************
1: 	public Tester2(String name) {
1: 		super(name);
1: 	}
1: 
1: 
1: 	//**************************************************************************************
1: 	//
1: 	// This starts the acutal test operations.  Overrides the startTesting() of parent.
1: 	// Tester2 profile -
1: 	//     The connection is frequently opened and closed based on
1: 	//     a random choice between 1 and MAX_OPERATIONS_PER_CONN number of
1: 	//     transaction batches committed by this client type.  This client will
1: 	//     do Insert/Update/Delete and simple Select queries over a
1: 	//     small to medium set of data determined randomly over MAX_LOW_STRESS_ROWS rows.
1: 	//
1: 	//***************************************************************************************
1: 	public void startTesting() {
1: 
1: 		//The following loop will be done nstest.MAX_ITERATIONS times after which we exit the thread
1: 		// Note that the connection is frequently opened & closed.  Autocommit is left on, so
1: 		// per connection, we make MAX_OPERATIONS_PER_CONN number of transaction batches
1: 		// Each transaction batch works over MAX_LOW_STRESS_ROWS number of rows, with each row working
1: 		// as one transaction (since autocommit is on)
1: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1: 
1: 			//the connection will now open. It closes at the end of the loop
1: 			connex = getConnection();
1: 			if (connex == null) {
0: 				System.out.println("FAIL: " + getThread_id()
1: 						+ " could not get database connection");
1: 				return; //quit
1: 			}
1: 
1: 			//set autocommit to false to keep transaction control in your hand
1: 			//Too many deadlocks amd locking issues if this is not commented out
1: 			try {
1: 				connex.setAutoCommit(false);
1: 			} catch (Exception e) {
0: 				System.out.println("FAIL: " + getThread_id()
1: 						+ "'s setAutoCommit() failed:");
1: 				printException("setting AutoCommit in Tester2", e);
1: 			}
1: 
1: 			//also set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to reduce number of
1: 			// deadlocks
1: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
1: 			//Now do MAX_OPERATIONS_PER_CONN transaction batches within this connection
1: 			for (int numOp = 1; numOp < NsTest.MAX_OPERATIONS_PER_CONN; numOp++) {
1: 
1: 				//Now loop through nstest.MAX_LOW_STRESS_ROWS number of times/rows
1: 				// Here, we do randomly do either insert/update/delete operations or one select
1: 				int rnum = (int) (Math.random() * 100) % 4; //returns 0, 1, 2, 3
1: 
1: 				switch (rnum) {
1: 				case 0: //do a select operation
1: 					try {
1: 						int numSelected = doSelectOperation(NsTest.MAX_LOW_STRESS_ROWS);
0: 						System.out.println(getThread_id() + " selected "
1: 								+ numSelected + " rows");
1: 					} catch (Exception e) {
0: 						System.out.println("doSelect in thread " + getThread_id()
1: 								+ " threw ");
1: 						printException("doSelectOperation() in Tester2", e);
1: 					}
1: 					break;
1: 
1: 				case 1: //do Insert/Update/Delete operations
1: 				case 2: //do Insert/Update/Delete operations
1: 				case 3: //do Insert/Update/Delete operations
1: 					for (int j = 0; j < NsTest.MAX_LOW_STRESS_ROWS; j++) {
1: 						doIUDOperation();
1: 					}
1: 					break;
1: 				}
1: 
1: 				//Letting this be even though autocommit is on so that if later on if we decide to turn
1: 				// autocommit off, this automatically takes effect.
1: 				//commit
1: 				try {
1: 					connex.commit();
1: 				} catch (Exception e) {
0: 					System.out.println("FAIL: " + getThread_id()
1: 							+ "'s commit() failed:");
1: 					printException("committing Xn in Tester2", e);
1: 				}
1: 			}//end of for(int numOp=1...)
1: 
1: 			//close the connection for the next iteration
1: 			closeConnection();
1: 
1: 		}//end of for (int i=0;...)
1: 
0: 		System.out.println("Thread " + getThread_id() + " is now terminating");
1: 
1: 	}//end of startTesting()
1: 
1: }
============================================================================