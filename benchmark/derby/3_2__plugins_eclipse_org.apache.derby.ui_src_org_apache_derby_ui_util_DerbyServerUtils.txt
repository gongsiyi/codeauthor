1:aaea357: /*
2:aaea357: 
1:aaea357: 	Derby - Class org.apache.derby.ui.util.DerbyServerUtils
1:aaea357: 	
1:23683f1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1:23683f1: 	contributor license agreements.  See the NOTICE file distributed with
1:23683f1: 	this work for additional information regarding copyright ownership.
1:23683f1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1:23683f1: 	(the "License"); you may not use this file except in compliance with
1:23683f1: 	the License.  You may obtain a copy of the License at
1:aaea357: 	
1:aaea357: 	   http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 	
1:aaea357: 	Unless required by applicable law or agreed to in writing, software
1:aaea357: 	distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357: 	See the License for the specific language governing permissions and
1:aaea357: 	limitations under the License.
1:aaea357: 
1:aaea357: */
1:aaea357: 
1:aaea357: package org.apache.derby.ui.util;
1:aaea357: 
1:aaea357: //import org.apache.ui.decorator.DerbyRunningDecorator;
1:aaea357: 
1:aaea357: import java.sql.SQLException;
1:aaea357: import java.util.HashMap;
1:aaea357: import java.util.Iterator;
1:aaea357: 
1:aaea357: import org.apache.derby.ui.common.CommonNames;
1:aaea357: import org.apache.derby.ui.common.Messages;
1:aaea357: import org.apache.derby.ui.decorate.DerbyIsRunningDecorator;
1:aaea357: import org.apache.derby.ui.properties.DerbyProperties;
1:aaea357: import org.eclipse.core.resources.IProject;
1:aaea357: import org.eclipse.core.resources.IResourceChangeEvent;
1:aaea357: import org.eclipse.core.resources.IResourceChangeListener;
1:aaea357: import org.eclipse.core.resources.IWorkspace;
1:aaea357: import org.eclipse.core.resources.ResourcesPlugin;
1:aaea357: import org.eclipse.core.runtime.CoreException;
1:aaea357: import org.eclipse.core.runtime.IStatus;
1:aaea357: import org.eclipse.core.runtime.QualifiedName;
1:aaea357: import org.eclipse.debug.core.DebugEvent;
1:aaea357: import org.eclipse.debug.core.DebugPlugin;
1:aaea357: import org.eclipse.debug.core.IDebugEventSetListener;
1:aaea357: import org.eclipse.debug.core.ILaunch;
1:aaea357: import org.eclipse.debug.core.model.IProcess;
1:aaea357: import org.eclipse.jdt.core.IJavaProject;
1:aaea357: import org.eclipse.jface.dialogs.MessageDialog;
1:aaea357: import org.eclipse.swt.SWTException;
1:aaea357: import org.eclipse.swt.widgets.Shell;
1:aaea357: 
1:aaea357: 
1:aaea357: 
1:aaea357: public class DerbyServerUtils {
1:aaea357: 	
1:aaea357: 	//Singleton Class
1:aaea357: 	private static DerbyServerUtils dsUtils = new DerbyServerUtils();
1:aaea357: 	private HashMap servers = new HashMap();
1:aaea357:  
1:aaea357:     private DerbyServerUtils() {
1:aaea357:         super();
1:aaea357:     }
1:aaea357: 
1:aaea357: 	public static DerbyServerUtils getDefault() {
1:aaea357: 		if (dsUtils == null)
1:aaea357: 			dsUtils = new DerbyServerUtils();
1:aaea357: 		return dsUtils;
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	// listener for DebugEvents, to know if a server was stopped by the client
1:aaea357: 	// or died by itself
1:aaea357: 	 
1:aaea357: 	private IDebugEventSetListener listener = new IDebugEventSetListener() {
1:aaea357: 	    public void handleDebugEvents(DebugEvent[] events) {
1:aaea357: 	    	// type of event was a terminate...
1:aaea357: 	    	if(events.length>0){
1:aaea357: 				if (events[0].getKind() == DebugEvent.TERMINATE) {
1:aaea357: 					Object source = events[0].getSource();
1:aaea357: 					if (source instanceof IProcess) {
1:aaea357: 						// check for Derby Network Servre process.
1:aaea357: 						Object proj = servers.get(source);
1:aaea357: 						if (proj != null) {
1:aaea357: 							try {
1:aaea357: 								//remove it from the hashmap, update the ui
1:aaea357: 								servers.remove(source);
1:aaea357: 								if(proj instanceof IJavaProject){
1:aaea357: 									setRunning(((IJavaProject)proj).getProject(), null);
1:aaea357: 								}else if(proj instanceof IProject){
1:aaea357: 									setRunning((IProject)proj,null);
1:aaea357: 								}
1:aaea357: 							}
1:aaea357: 							catch (CoreException ce) {
1:aaea357: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+ce, IStatus.ERROR);
1:aaea357: 							}catch(Exception e){
1:aaea357: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+e, IStatus.ERROR);
1:aaea357: 							}
1:aaea357: 						}
1:aaea357: 					}
1:aaea357: 				}
1:aaea357: 	    	}
1:aaea357: 	    }
1:aaea357: 	};
1:aaea357: 
1:aaea357: 	private IResourceChangeListener rlistener = new IResourceChangeListener() {
1:aaea357: 	      public void resourceChanged(IResourceChangeEvent event){
1:aaea357: 	         if(event.getType()==IResourceChangeEvent.PRE_CLOSE){
1:aaea357: 	         	try{
1:aaea357: 	         		if(event.getResource().getProject().isNatureEnabled(CommonNames.DERBY_NATURE)){
1:aaea357: 	         			if(getRunning(event.getResource().getProject())){
1:aaea357: 	         				stopDerbyServer(event.getResource().getProject());
1:aaea357: 	         			}
1:aaea357: 	         		}
1:aaea357: 	         	}catch(SWTException swe){
1:aaea357: 	         		//The SWTException is thrown during the Shell creation
1:aaea357: 	         		//Logger.log("Exception shutting down "+swe,IStatus.ERROR);
1:aaea357: 	         		//e.printStackTrace();
1:aaea357: 	         	}catch(Exception e){
1:aaea357: 	         		Logger.log("Exception shutting down "+e,IStatus.ERROR);
1:aaea357: 	         	}
1:aaea357: 	         }
1:aaea357: 	      }
1:aaea357: 	   };
1:aaea357: 
1:aaea357: 	public boolean getRunning(IProject proj) throws CoreException {
1:aaea357: 		Object value = proj.getSessionProperty(new QualifiedName(CommonNames.UI_PATH, CommonNames.ISRUNNING));
1:aaea357: 		
1:aaea357: 		return value != null;
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	public void setRunning(IProject proj, Boolean value) throws CoreException {
1:aaea357: 		try{
1:aaea357: 			if (value != null && value.equals(Boolean.FALSE)){
1:aaea357: 				value = null;
1:aaea357: 			}
1:aaea357: 			if(proj.isOpen()){
1:aaea357: 				proj.setSessionProperty(new QualifiedName(CommonNames.UI_PATH,CommonNames.ISRUNNING ),value);
1:aaea357: 			}
1:aaea357: 		}catch(Exception e){
1:aaea357: 			Logger.log("DerbyServerUtils.setRunning() error: "+e, IStatus.ERROR);	
1:aaea357: 			
1:aaea357: 		}
1:aaea357: 		DerbyIsRunningDecorator.performUpdateDecor(proj);
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public void startDerbyServer( IProject proj) throws CoreException {
1:aaea357: 		String args = CommonNames.START_DERBY_SERVER;
1:aaea357: 		String vmargs="";
1:aaea357: 		DerbyProperties dprop=new DerbyProperties(proj);
1:aaea357: 		//Starts the server as a Java app
1:aaea357: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
1:aaea357: 		
1:aaea357: 		//Set Derby System Home from the Derby Properties
1:aaea357: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1:aaea357: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1:aaea357: 		}
1:aaea357: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.START_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
1:aaea357: 		ILaunch launch = DerbyUtils.launch(proj, procName ,		
1:aaea357: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs, CommonNames.START_DERBY_SERVER);
1:aaea357: 		IProcess ip=launch.getProcesses()[0];
1:aaea357: 		//set a name to be seen in the Console list
1:aaea357: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1:aaea357: 		
1:aaea357: 		// saves the mapping between (server) process and project
1:aaea357: 		//servers.put(launch.getProcesses()[0], proj);
1:aaea357: 		servers.put(ip, proj);
1:aaea357: 		// register a listener to listen, when this process is finished
1:aaea357: 		DebugPlugin.getDefault().addDebugEventListener(listener);
1:aaea357: 		//Add resource listener
1:aaea357: 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
1:aaea357: 		
1:aaea357: 		workspace.addResourceChangeListener(rlistener);
1:aaea357: 		setRunning(proj, Boolean.TRUE);
1:aaea357: 		Shell shell = new Shell();
1:aaea357: 		MessageDialog.openInformation(
1:aaea357: 			shell,
1:aaea357: 			CommonNames.PLUGIN_NAME,
1:aaea357: 			Messages.D_NS_ATTEMPT_STARTED+dprop.getPort()+".");
1:aaea357: 
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	public void stopDerbyServer( IProject proj) throws CoreException, ClassNotFoundException, SQLException {
1:aaea357: 		String args = CommonNames.SHUTDOWN_DERBY_SERVER;
1:aaea357: 		String vmargs="";
1:aaea357: 		DerbyProperties dprop=new DerbyProperties(proj);
1:aaea357: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
1:aaea357: 		
1:aaea357: 		//	Set Derby System Home from the Derby Properties
1:aaea357: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1:aaea357: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1:aaea357: 		}
1:aaea357: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.SHUTDOWN_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
1:aaea357: 		
1:aaea357: 		// starts the server as a Java app
1:aaea357: 		ILaunch launch = DerbyUtils.launch(proj, procName,
1:aaea357: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs,CommonNames.SHUTDOWN_DERBY_SERVER);
1:aaea357: 		IProcess ip=launch.getProcesses()[0];
1:aaea357: 		
1:aaea357: 		//set a name to be seen in the Console list
1:aaea357: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1:aaea357: 		
1:aaea357: 		//update the objectState
1:aaea357: 		setRunning(proj, Boolean.FALSE);
1:aaea357: 		if(proj.isOpen()){
1:aaea357: 			Shell shell = new Shell();
1:aaea357: 			MessageDialog.openInformation(
1:aaea357: 			shell,
1:aaea357: 			CommonNames.PLUGIN_NAME,
1:aaea357: 			Messages.D_NS_ATTEMPT_STOPPED+dprop.getPort()+"." );
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 	public void shutdownAllServers() {
1:aaea357: 		Iterator it = servers.values().iterator();
1:aaea357: 		while (it.hasNext()) {
1:aaea357: 			try {
1:aaea357: 				stopDerbyServer((IProject)it.next());
1:aaea357: 			}
1:aaea357: 			catch (Exception e) {
1:aaea357: 				Logger.log("DerbyServerUtils.shutdownServers",IStatus.ERROR);
1:aaea357: 				Logger.log(SelectionUtil.getStatusMessages(e), IStatus.ERROR);
1:aaea357: 			}
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: }
============================================================================
author:Jean T. Anderson
-------------------------------------------------------------------------------
commit:23683f1
/////////////////////////////////////////////////////////////////////////
1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1: 	contributor license agreements.  See the NOTICE file distributed with
1: 	this work for additional information regarding copyright ownership.
1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1: 	(the "License"); you may not use this file except in compliance with
1: 	the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: 	Derby - Class org.apache.derby.ui.util.DerbyServerUtils
1: 	
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
1: 	
1: 	   http://www.apache.org/licenses/LICENSE-2.0
1: 	
1: 	Unless required by applicable law or agreed to in writing, software
1: 	distributed under the License is distributed on an "AS IS" BASIS,
1: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: 	See the License for the specific language governing permissions and
1: 	limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.ui.util;
1: 
1: //import org.apache.ui.decorator.DerbyRunningDecorator;
1: 
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
1: import org.apache.derby.ui.common.CommonNames;
1: import org.apache.derby.ui.common.Messages;
1: import org.apache.derby.ui.decorate.DerbyIsRunningDecorator;
1: import org.apache.derby.ui.properties.DerbyProperties;
1: import org.eclipse.core.resources.IProject;
1: import org.eclipse.core.resources.IResourceChangeEvent;
1: import org.eclipse.core.resources.IResourceChangeListener;
1: import org.eclipse.core.resources.IWorkspace;
1: import org.eclipse.core.resources.ResourcesPlugin;
1: import org.eclipse.core.runtime.CoreException;
1: import org.eclipse.core.runtime.IStatus;
1: import org.eclipse.core.runtime.QualifiedName;
1: import org.eclipse.debug.core.DebugEvent;
1: import org.eclipse.debug.core.DebugPlugin;
1: import org.eclipse.debug.core.IDebugEventSetListener;
1: import org.eclipse.debug.core.ILaunch;
1: import org.eclipse.debug.core.model.IProcess;
1: import org.eclipse.jdt.core.IJavaProject;
1: import org.eclipse.jface.dialogs.MessageDialog;
1: import org.eclipse.swt.SWTException;
1: import org.eclipse.swt.widgets.Shell;
1: 
1: 
1: 
1: public class DerbyServerUtils {
1: 	
1: 	//Singleton Class
1: 	private static DerbyServerUtils dsUtils = new DerbyServerUtils();
1: 	private HashMap servers = new HashMap();
1:  
1:     private DerbyServerUtils() {
1:         super();
1:     }
1: 
1: 	public static DerbyServerUtils getDefault() {
1: 		if (dsUtils == null)
1: 			dsUtils = new DerbyServerUtils();
1: 		return dsUtils;
1: 	}
1: 	
1: 	// listener for DebugEvents, to know if a server was stopped by the client
1: 	// or died by itself
1: 	 
1: 	private IDebugEventSetListener listener = new IDebugEventSetListener() {
1: 	    public void handleDebugEvents(DebugEvent[] events) {
1: 	    	// type of event was a terminate...
1: 	    	if(events.length>0){
1: 				if (events[0].getKind() == DebugEvent.TERMINATE) {
1: 					Object source = events[0].getSource();
1: 					if (source instanceof IProcess) {
1: 						// check for Derby Network Servre process.
1: 						Object proj = servers.get(source);
1: 						if (proj != null) {
1: 							try {
1: 								//remove it from the hashmap, update the ui
1: 								servers.remove(source);
1: 								if(proj instanceof IJavaProject){
1: 									setRunning(((IJavaProject)proj).getProject(), null);
1: 								}else if(proj instanceof IProject){
1: 									setRunning((IProject)proj,null);
1: 								}
1: 							}
1: 							catch (CoreException ce) {
1: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+ce, IStatus.ERROR);
1: 							}catch(Exception e){
1: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+e, IStatus.ERROR);
1: 							}
1: 						}
1: 					}
1: 				}
1: 	    	}
1: 	    }
1: 	};
1: 
1: 	private IResourceChangeListener rlistener = new IResourceChangeListener() {
1: 	      public void resourceChanged(IResourceChangeEvent event){
1: 	         if(event.getType()==IResourceChangeEvent.PRE_CLOSE){
1: 	         	try{
1: 	         		if(event.getResource().getProject().isNatureEnabled(CommonNames.DERBY_NATURE)){
1: 	         			if(getRunning(event.getResource().getProject())){
1: 	         				stopDerbyServer(event.getResource().getProject());
1: 	         			}
1: 	         		}
1: 	         	}catch(SWTException swe){
1: 	         		//The SWTException is thrown during the Shell creation
1: 	         		//Logger.log("Exception shutting down "+swe,IStatus.ERROR);
1: 	         		//e.printStackTrace();
1: 	         	}catch(Exception e){
1: 	         		Logger.log("Exception shutting down "+e,IStatus.ERROR);
1: 	         	}
1: 	         }
1: 	      }
1: 	   };
1: 
1: 	public boolean getRunning(IProject proj) throws CoreException {
1: 		Object value = proj.getSessionProperty(new QualifiedName(CommonNames.UI_PATH, CommonNames.ISRUNNING));
1: 		
1: 		return value != null;
1: 	}
1: 	
1: 	public void setRunning(IProject proj, Boolean value) throws CoreException {
1: 		try{
1: 			if (value != null && value.equals(Boolean.FALSE)){
1: 				value = null;
1: 			}
1: 			if(proj.isOpen()){
1: 				proj.setSessionProperty(new QualifiedName(CommonNames.UI_PATH,CommonNames.ISRUNNING ),value);
1: 			}
1: 		}catch(Exception e){
1: 			Logger.log("DerbyServerUtils.setRunning() error: "+e, IStatus.ERROR);	
1: 			
1: 		}
1: 		DerbyIsRunningDecorator.performUpdateDecor(proj);
1: 	}
1: 
1: 	public void startDerbyServer( IProject proj) throws CoreException {
1: 		String args = CommonNames.START_DERBY_SERVER;
1: 		String vmargs="";
1: 		DerbyProperties dprop=new DerbyProperties(proj);
1: 		//Starts the server as a Java app
1: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
1: 		
1: 		//Set Derby System Home from the Derby Properties
1: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1: 		}
1: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.START_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
1: 		ILaunch launch = DerbyUtils.launch(proj, procName ,		
1: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs, CommonNames.START_DERBY_SERVER);
1: 		IProcess ip=launch.getProcesses()[0];
1: 		//set a name to be seen in the Console list
1: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1: 		
1: 		// saves the mapping between (server) process and project
1: 		//servers.put(launch.getProcesses()[0], proj);
1: 		servers.put(ip, proj);
1: 		// register a listener to listen, when this process is finished
1: 		DebugPlugin.getDefault().addDebugEventListener(listener);
1: 		//Add resource listener
1: 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
1: 		
1: 		workspace.addResourceChangeListener(rlistener);
1: 		setRunning(proj, Boolean.TRUE);
1: 		Shell shell = new Shell();
1: 		MessageDialog.openInformation(
1: 			shell,
1: 			CommonNames.PLUGIN_NAME,
1: 			Messages.D_NS_ATTEMPT_STARTED+dprop.getPort()+".");
1: 
1: 	}
1: 
1: 	public void stopDerbyServer( IProject proj) throws CoreException, ClassNotFoundException, SQLException {
1: 		String args = CommonNames.SHUTDOWN_DERBY_SERVER;
1: 		String vmargs="";
1: 		DerbyProperties dprop=new DerbyProperties(proj);
1: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
1: 		
1: 		//	Set Derby System Home from the Derby Properties
1: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
1: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
1: 		}
1: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.SHUTDOWN_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
1: 		
1: 		// starts the server as a Java app
1: 		ILaunch launch = DerbyUtils.launch(proj, procName,
1: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs,CommonNames.SHUTDOWN_DERBY_SERVER);
1: 		IProcess ip=launch.getProcesses()[0];
1: 		
1: 		//set a name to be seen in the Console list
1: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
1: 		
1: 		//update the objectState
1: 		setRunning(proj, Boolean.FALSE);
1: 		if(proj.isOpen()){
1: 			Shell shell = new Shell();
1: 			MessageDialog.openInformation(
1: 			shell,
1: 			CommonNames.PLUGIN_NAME,
1: 			Messages.D_NS_ATTEMPT_STOPPED+dprop.getPort()+"." );
1: 		}
1: 	}
1: 	public void shutdownAllServers() {
1: 		Iterator it = servers.values().iterator();
1: 		while (it.hasNext()) {
1: 			try {
1: 				stopDerbyServer((IProject)it.next());
1: 			}
1: 			catch (Exception e) {
1: 				Logger.log("DerbyServerUtils.shutdownServers",IStatus.ERROR);
1: 				Logger.log(SelectionUtil.getStatusMessages(e), IStatus.ERROR);
1: 			}
1: 		}
1: 	}
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:00daaff
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0: 	Derby - Class org.apache.derby.ui.util.DerbyServerUtils
0: 	
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
0: 	
0: 	   http://www.apache.org/licenses/LICENSE-2.0
0: 	
0: 	Unless required by applicable law or agreed to in writing, software
0: 	distributed under the License is distributed on an "AS IS" BASIS,
0: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: 	See the License for the specific language governing permissions and
0: 	limitations under the License.
0: 
0: */
0: 
0: package org.apache.derby.ui.util;
0: 
0: //import org.apache.ui.decorator.DerbyRunningDecorator;
0: 
0: import java.sql.SQLException;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: 
0: import org.apache.derby.ui.common.CommonNames;
0: import org.apache.derby.ui.common.Messages;
0: import org.apache.derby.ui.decorate.DerbyIsRunningDecorator;
0: import org.apache.derby.ui.properties.DerbyProperties;
0: import org.eclipse.core.resources.IProject;
0: import org.eclipse.core.resources.IResourceChangeEvent;
0: import org.eclipse.core.resources.IResourceChangeListener;
0: import org.eclipse.core.resources.IWorkspace;
0: import org.eclipse.core.resources.ResourcesPlugin;
0: import org.eclipse.core.runtime.CoreException;
0: import org.eclipse.core.runtime.IStatus;
0: import org.eclipse.core.runtime.QualifiedName;
0: import org.eclipse.debug.core.DebugEvent;
0: import org.eclipse.debug.core.DebugPlugin;
0: import org.eclipse.debug.core.IDebugEventSetListener;
0: import org.eclipse.debug.core.ILaunch;
0: import org.eclipse.debug.core.model.IProcess;
0: import org.eclipse.jdt.core.IJavaProject;
0: import org.eclipse.jface.dialogs.MessageDialog;
0: import org.eclipse.swt.SWTException;
0: import org.eclipse.swt.widgets.Shell;
0: 
0: 
0: 
0: public class DerbyServerUtils {
0: 	
0: 	//Singleton Class
0: 	private static DerbyServerUtils dsUtils = new DerbyServerUtils();
0: 	private HashMap servers = new HashMap();
0:  
0:     private DerbyServerUtils() {
0:         super();
0:     }
0: 
0: 	public static DerbyServerUtils getDefault() {
0: 		if (dsUtils == null)
0: 			dsUtils = new DerbyServerUtils();
0: 		return dsUtils;
0: 	}
0: 	
0: 	// listener for DebugEvents, to know if a server was stopped by the client
0: 	// or died by itself
0: 	 
0: 	private IDebugEventSetListener listener = new IDebugEventSetListener() {
0: 	    public void handleDebugEvents(DebugEvent[] events) {
0: 	    	// type of event was a terminate...
0: 	    	if(events.length>0){
0: 				if (events[0].getKind() == DebugEvent.TERMINATE) {
0: 					Object source = events[0].getSource();
0: 					if (source instanceof IProcess) {
0: 						// check for Derby Network Servre process.
0: 						Object proj = servers.get(source);
0: 						if (proj != null) {
0: 							try {
0: 								//remove it from the hashmap, update the ui
0: 								servers.remove(source);
0: 								if(proj instanceof IJavaProject){
0: 									setRunning(((IJavaProject)proj).getProject(), null);
0: 								}else if(proj instanceof IProject){
0: 									setRunning((IProject)proj,null);
0: 								}
0: 							}
0: 							catch (CoreException ce) {
0: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+ce, IStatus.ERROR);
0: 							}catch(Exception e){
0: 								Logger.log("DerbyServerTracker.handleDebugEvents: "+e, IStatus.ERROR);
0: 							}
0: 						}
0: 					}
0: 				}
0: 	    	}
0: 	    }
0: 	};
0: 
0: 	private IResourceChangeListener rlistener = new IResourceChangeListener() {
0: 	      public void resourceChanged(IResourceChangeEvent event){
0: 	         if(event.getType()==IResourceChangeEvent.PRE_CLOSE){
0: 	         	try{
0: 	         		if(event.getResource().getProject().isNatureEnabled(CommonNames.DERBY_NATURE)){
0: 	         			if(getRunning(event.getResource().getProject())){
0: 	         				stopDerbyServer(event.getResource().getProject());
0: 	         			}
0: 	         		}
0: 	         	}catch(SWTException swe){
0: 	         		//The SWTException is thrown during the Shell creation
0: 	         		//Logger.log("Exception shutting down "+swe,IStatus.ERROR);
0: 	         		//e.printStackTrace();
0: 	         	}catch(Exception e){
0: 	         		Logger.log("Exception shutting down "+e,IStatus.ERROR);
0: 	         	}
0: 	         }
0: 	      }
0: 	   };
0: 
0: 	public boolean getRunning(IProject proj) throws CoreException {
0: 		Object value = proj.getSessionProperty(new QualifiedName(CommonNames.UI_PATH, CommonNames.ISRUNNING));
0: 		
0: 		return value != null;
0: 	}
0: 	
0: 	public void setRunning(IProject proj, Boolean value) throws CoreException {
0: 		try{
0: 			if (value != null && value.equals(Boolean.FALSE)){
0: 				value = null;
0: 			}
0: 			if(proj.isOpen()){
0: 				proj.setSessionProperty(new QualifiedName(CommonNames.UI_PATH,CommonNames.ISRUNNING ),value);
0: 			}
0: 		}catch(Exception e){
0: 			Logger.log("DerbyServerUtils.setRunning() error: "+e, IStatus.ERROR);	
0: 			
0: 		}
0: 		DerbyIsRunningDecorator.performUpdateDecor(proj);
0: 	}
0: 
0: 	public void startDerbyServer( IProject proj) throws CoreException {
0: 		String args = CommonNames.START_DERBY_SERVER;
0: 		String vmargs="";
0: 		DerbyProperties dprop=new DerbyProperties(proj);
0: 		//Starts the server as a Java app
0: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
0: 		
0: 		//Set Derby System Home from the Derby Properties
0: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
0: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
0: 		}
0: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.START_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
0: 		ILaunch launch = DerbyUtils.launch(proj, procName ,		
0: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs, CommonNames.START_DERBY_SERVER);
0: 		IProcess ip=launch.getProcesses()[0];
0: 		//set a name to be seen in the Console list
0: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
0: 		
0: 		// saves the mapping between (server) process and project
0: 		//servers.put(launch.getProcesses()[0], proj);
0: 		servers.put(ip, proj);
0: 		// register a listener to listen, when this process is finished
0: 		DebugPlugin.getDefault().addDebugEventListener(listener);
0: 		//Add resource listener
0: 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
0: 		
0: 		workspace.addResourceChangeListener(rlistener);
0: 		setRunning(proj, Boolean.TRUE);
0: 		Shell shell = new Shell();
0: 		MessageDialog.openInformation(
0: 			shell,
0: 			CommonNames.PLUGIN_NAME,
0: 			Messages.D_NS_ATTEMPT_STARTED+dprop.getPort()+".");
0: 
0: 	}
0: 
0: 	public void stopDerbyServer( IProject proj) throws CoreException, ClassNotFoundException, SQLException {
0: 		String args = CommonNames.SHUTDOWN_DERBY_SERVER;
0: 		String vmargs="";
0: 		DerbyProperties dprop=new DerbyProperties(proj);
0: 		args+=" -h "+dprop.getHost()+ " -p "+dprop.getPort();
0: 		
0: 		//	Set Derby System Home from the Derby Properties
0: 		if((dprop.getSystemHome()!=null)&& !(dprop.getSystemHome().equals(""))){
0: 			vmargs=CommonNames.D_SYSTEM_HOME+dprop.getSystemHome();
0: 		}
0: 		String procName="["+proj.getName()+"] - "+CommonNames.DERBY_SERVER+" "+CommonNames.SHUTDOWN_DERBY_SERVER+" ("+dprop.getHost()+ ", "+dprop.getPort()+")";
0: 		
0: 		// starts the server as a Java app
0: 		ILaunch launch = DerbyUtils.launch(proj, procName,
0: 		CommonNames.DERBY_SERVER_CLASS, args, vmargs,CommonNames.SHUTDOWN_DERBY_SERVER);
0: 		IProcess ip=launch.getProcesses()[0];
0: 		
0: 		//set a name to be seen in the Console list
0: 		ip.setAttribute(IProcess.ATTR_PROCESS_LABEL,procName);
0: 		
0: 		//update the objectState
0: 		setRunning(proj, Boolean.FALSE);
0: 		if(proj.isOpen()){
0: 			Shell shell = new Shell();
0: 			MessageDialog.openInformation(
0: 			shell,
0: 			CommonNames.PLUGIN_NAME,
0: 			Messages.D_NS_ATTEMPT_STOPPED+dprop.getPort()+"." );
0: 		}
0: 	}
0: 	public void shutdownAllServers() {
0: 		Iterator it = servers.values().iterator();
0: 		while (it.hasNext()) {
0: 			try {
0: 				stopDerbyServer((IProject)it.next());
0: 			}
0: 			catch (Exception e) {
0: 				Logger.log("DerbyServerUtils.shutdownServers",IStatus.ERROR);
0: 				Logger.log(SelectionUtil.getStatusMessages(e), IStatus.ERROR);
0: 			}
0: 		}
0: 	}
0: 
0: }
============================================================================