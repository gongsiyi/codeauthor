1:fe77ca5: /*
2:fe77ca5: 
1:985fc85:    Derby - Class org.apache.derby.tools.URLCheck
1:985fc85: 
1:3dc2ce4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3dc2ce4:    contributor license agreements.  See the NOTICE file distributed with
1:3dc2ce4:    this work for additional information regarding copyright ownership.
1:3dc2ce4:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3dc2ce4:    (the "License"); you may not use this file except in compliance with
1:3dc2ce4:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
1:985fc85: 
2:fe77ca5:  */
1:fe77ca5: 
1:6813da0: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.reference.Attribute;
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:fe77ca5: import java.util.Vector;
1:fe77ca5: import java.util.Properties;
1:fe77ca5: import java.util.Enumeration;
1:fe77ca5: import java.util.StringTokenizer;
1:fe77ca5: import java.lang.reflect.Field;
1:fe77ca5: import java.sql.SQLException;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * This class takes a string used for a connection URL and checks for
1:fe77ca5:  * correctness.
1:fe77ca5:  * To turn off output in ij, use the command line
1:fe77ca5:  * property of -DURLCheck=false.
1:fe77ca5:  *
1:fe77ca5:  * param anURL	 The URL used to connect to a database.
1:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public class URLCheck {
1:fe77ca5: 
1:16d3334:   private   Vector<AttributeHolder> attributes;
1:16d3334:   private   static Vector<String> booleanAttributes;
1:fe77ca5:   //Need so that AppUI class does not get garbage collected
1:7e79830:   private   LocalizedResource langUtil = LocalizedResource.getInstance();
1:16d3334:   private   Vector<String> validProps;
1:fe77ca5: 
1:fe77ca5:   public URLCheck(String anURL) {
1:fe77ca5: 
1:fe77ca5:     try {
1:fe77ca5:       //Initialize the AppUI class
1:fe77ca5: 
1:fe77ca5:       //Parse the URL string into properties.
1:fe77ca5:       Properties props = getAttributes(anURL, new Properties());
1:fe77ca5:       check();
1:fe77ca5:     }
1:fe77ca5:     catch (Exception ex) {
1:fe77ca5:       ex.printStackTrace();
1:fe77ca5:     }
1:fe77ca5:   }
1:fe77ca5:  
1:fe77ca5: 
1:fe77ca5:   public static void main(String[] args) {
1:fe77ca5:     if (args.length > 0) {
1:fe77ca5:       //Get the first argument passed in.
1:fe77ca5:       URLCheck aCheck = new URLCheck(args[0]);
1:fe77ca5:     }
1:fe77ca5:   }
1:fe77ca5:   public void check(){
1:16d3334:     Enumeration<AttributeHolder> e = attributes.elements();
1:df9af89:     while (e.hasMoreElements()) {
1:16d3334:       AttributeHolder anAttribute = e.nextElement();
1:fe77ca5:       //The check for duplicate must be done at the URLCheck level
1:fe77ca5:       //and not by each specific attribute.  Only URLCheck knowns about
1:fe77ca5:       //all of the attributes and names.
1:fe77ca5:       checkForDuplicate(anAttribute);
1:fe77ca5:       //Have each attribute check as much about themself as possible.
1:fe77ca5:       anAttribute.check( validProps);
1:fe77ca5:     }
1:fe77ca5:   }
1:fe77ca5:   public void checkForDuplicate(AttributeHolder anAttribute){
1:16d3334:     Enumeration<AttributeHolder> e = attributes.elements();
1:df9af89:     while (e.hasMoreElements()) {
1:16d3334:       AttributeHolder aHolder = e.nextElement();
1:fe77ca5:       //If a duplicate is found, make sure that the message is only shown
1:fe77ca5:       //once for each attribute.
1:fe77ca5:       if (anAttribute != aHolder && anAttribute.getName().equals(aHolder.getName())) {
1:fe77ca5:         anAttribute.addError(langUtil.getTextMessage("TL_dupAtt"));
1:fe77ca5:       }
1:fe77ca5:     }
1:fe77ca5: 
1:fe77ca5:   }
1:fe77ca5: 	public Properties getAttributes(String url, Properties props) throws Exception {
1:fe77ca5: 		
1:fe77ca5: 		String protocol = "";
1:fe77ca5: 
1:0bbfdac:         if( url.startsWith( "jdbc:derby:net:") ||
1:0bbfdac: 			url.startsWith( "jdbc:derby://"))
1:fe77ca5: 		{
1:fe77ca5:             validProps = null;
1:fe77ca5: 		}
1:fe77ca5:         else if( url.startsWith( "jdbc:derby:"))
1:fe77ca5: 		{
1:fe77ca5: 			protocol = "jdbc:derby:";
1:3abc7d4:             validProps = getValidDerbyProps();
1:fe77ca5: 		}
1:fe77ca5:         else
1:fe77ca5:             validProps = null;
1:fe77ca5: 
1:fe77ca5: 		
1:fe77ca5: 		//Parse the url into attributes and put them in a Properties object.
1:fe77ca5: 		StringTokenizer st = new StringTokenizer(url.substring(protocol.length()), ";:\"");
1:16d3334: 		attributes = new Vector<AttributeHolder>();
1:fe77ca5: 		while (st.hasMoreTokens()) {
1:fe77ca5:       AttributeHolder anAttribute = new AttributeHolder();
1:fe77ca5:       String anAtt = "";
1:fe77ca5:       String aValue = "";
1:fe77ca5: 	  String aToken = st.nextToken();
1:fe77ca5:       //The "=" is the seperator between key and value.
1:fe77ca5: 	  int eqPos = aToken.indexOf('=');
1:fe77ca5: 	  if (eqPos == -1) {
1:fe77ca5: 		  //If there is no "=" this is not an attribute
1:fe77ca5: 		  continue;
1:fe77ca5:       }
1:fe77ca5:       else {
1:fe77ca5:         anAtt = (aToken.substring(0, eqPos)).trim();
1:fe77ca5:         aValue = (aToken.substring(eqPos + 1)).trim();
1:fe77ca5: 
1:fe77ca5:       }
1:fe77ca5:       anAttribute.setName(anAtt);
1:fe77ca5:       anAttribute.setValue(aValue);
1:fe77ca5:       anAttribute.setToken(aToken);
1:fe77ca5:       attributes.addElement(anAttribute);
1:fe77ca5:       props.put(anAtt, aToken);
1:fe77ca5: 	}
1:fe77ca5: 		return props;
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334:   public static Vector<String> getBooleanAttributes(){
1:fe77ca5:     if (booleanAttributes == null) {
1:16d3334:       booleanAttributes = new Vector<String>();
1:fe77ca5: 		  booleanAttributes.addElement(Attribute.DATA_ENCRYPTION);
1:fe77ca5: 		  booleanAttributes.addElement(Attribute.CREATE_ATTR);
1:fe77ca5: 		  booleanAttributes.addElement(Attribute.SHUTDOWN_ATTR);
1:fe77ca5: 		  booleanAttributes.addElement(Attribute.UPGRADE_ATTR);
1:fe77ca5:     }
1:fe77ca5:     return booleanAttributes;
1:fe77ca5:   }
1:fe77ca5: 
1:16d3334:     private static Vector<String> validDerbyProps;
1:16d3334:     private Vector<String> getValidDerbyProps()
1:fe77ca5:     {
1:3abc7d4:         if( validDerbyProps == null)
1:fe77ca5:         {
1:fe77ca5:             try
1:fe77ca5:             {
1:16d3334:                 Vector<String> props = new Vector<String>();
1:fe77ca5:                 Class att = Attribute.class;
1:fe77ca5:                 //Use reflection to get the list of valid keys from the Attribute class.
1:fe77ca5:                 //The Attribute class is an interface and therefore all the field
1:fe77ca5:                 //for it are public.
1:fe77ca5:                 Field[] fields = att.getFields();
1:fe77ca5:                 for (int i = 0; i < fields.length; i++)
1:fe77ca5:                 {
1:fe77ca5:                     Field aField = (Field)fields[i];
1:16d3334:                     props.addElement( (String) aField.get(att));
1:fe77ca5:                 }
1:3abc7d4:                 validDerbyProps = props;
1:fe77ca5:             }
1:fe77ca5:             catch (Exception ex)
1:fe77ca5:             {
1:fe77ca5:                 ex.printStackTrace();
1:fe77ca5:             }
1:fe77ca5:         }
1:3abc7d4:         return validDerbyProps;
1:3abc7d4:     } // end of getValidDerbyProps
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1:   private   Vector<AttributeHolder> attributes;
1:   private   static Vector<String> booleanAttributes;
1:   private   Vector<String> validProps;
/////////////////////////////////////////////////////////////////////////
1:     Enumeration<AttributeHolder> e = attributes.elements();
1:       AttributeHolder anAttribute = e.nextElement();
/////////////////////////////////////////////////////////////////////////
1:     Enumeration<AttributeHolder> e = attributes.elements();
1:       AttributeHolder aHolder = e.nextElement();
/////////////////////////////////////////////////////////////////////////
1: 		attributes = new Vector<AttributeHolder>();
/////////////////////////////////////////////////////////////////////////
1:   public static Vector<String> getBooleanAttributes(){
1:       booleanAttributes = new Vector<String>();
/////////////////////////////////////////////////////////////////////////
1:     private static Vector<String> validDerbyProps;
1:     private Vector<String> getValidDerbyProps()
1:                 Vector<String> props = new Vector<String>();
/////////////////////////////////////////////////////////////////////////
1:                     props.addElement( (String) aField.get(att));
commit:7e79830
/////////////////////////////////////////////////////////////////////////
0:   private   Vector attributes;
0:   private   static Vector booleanAttributes;
1:   private   LocalizedResource langUtil = LocalizedResource.getInstance();
0:   private   Vector validProps;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6813da0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.ij;
commit:3dc2ce4
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:             validProps = getValidDerbyProps();
/////////////////////////////////////////////////////////////////////////
0:     private static Vector validDerbyProps;
0:     private Vector getValidDerbyProps()
1:         if( validDerbyProps == null)
/////////////////////////////////////////////////////////////////////////
1:                 validDerbyProps = props;
1:         return validDerbyProps;
1:     } // end of getValidDerbyProps
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
1:         if( url.startsWith( "jdbc:derby:net:") ||
1: 			url.startsWith( "jdbc:derby://"))
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:df9af89
/////////////////////////////////////////////////////////////////////////
0:     Enumeration e = attributes.elements();
1:     while (e.hasMoreElements()) {
0:       AttributeHolder anAttribute = (AttributeHolder)e.nextElement();
/////////////////////////////////////////////////////////////////////////
0:     Enumeration e = attributes.elements();
1:     while (e.hasMoreElements()) {
0:       AttributeHolder aHolder = (AttributeHolder)e.nextElement();
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.tools.URLCheck
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.tools
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.tools;
1: 
1: import org.apache.derby.iapi.reference.Attribute;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.impl.tools.ij.AttributeHolder;
1: import java.util.Vector;
1: import java.util.Properties;
1: import java.util.Enumeration;
1: import java.util.StringTokenizer;
1: import java.lang.reflect.Field;
1: import java.sql.SQLException;
1: 
1: /**
1:  * This class takes a string used for a connection URL and checks for
1:  * correctness.
1:  * To turn off output in ij, use the command line
1:  * property of -DURLCheck=false.
1:  *
1:  * param anURL	 The URL used to connect to a database.
1:  *
1:  */
1: 
1: public class URLCheck {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
0:   public Vector attributes;
0:   public static Vector booleanAttributes;
1:   //Need so that AppUI class does not get garbage collected
0:   LocalizedResource langUtil = LocalizedResource.getInstance();
0:   Vector validProps;
1: 
1:   public URLCheck(String anURL) {
1: 
1:     try {
1:       //Initialize the AppUI class
1: 
1:       //Parse the URL string into properties.
1:       Properties props = getAttributes(anURL, new Properties());
1:       check();
1:     }
1:     catch (Exception ex) {
1:       ex.printStackTrace();
1:     }
1:   }
1:  
1: 
1:   public static void main(String[] args) {
1:     if (args.length > 0) {
1:       //Get the first argument passed in.
1:       URLCheck aCheck = new URLCheck(args[0]);
1:     }
1:   }
1:   public void check(){
0:     Enumeration enum = attributes.elements();
0:     while (enum.hasMoreElements()) {
0:       AttributeHolder anAttribute = (AttributeHolder)enum.nextElement();
1:       //The check for duplicate must be done at the URLCheck level
1:       //and not by each specific attribute.  Only URLCheck knowns about
1:       //all of the attributes and names.
1:       checkForDuplicate(anAttribute);
1:       //Have each attribute check as much about themself as possible.
1:       anAttribute.check( validProps);
1:     }
1:   }
1:   public void checkForDuplicate(AttributeHolder anAttribute){
0:     Enumeration enum = attributes.elements();
0:     while (enum.hasMoreElements()) {
0:       AttributeHolder aHolder = (AttributeHolder)enum.nextElement();
1:       //If a duplicate is found, make sure that the message is only shown
1:       //once for each attribute.
1:       if (anAttribute != aHolder && anAttribute.getName().equals(aHolder.getName())) {
1:         anAttribute.addError(langUtil.getTextMessage("TL_dupAtt"));
1:       }
1:     }
1: 
1:   }
1: 	public Properties getAttributes(String url, Properties props) throws Exception {
1: 		
1: 		String protocol = "";
1: 
0:         if( url.startsWith( "jdbc:derby:net:"))
1: 		{
1:             validProps = null;
1: 		}
1:         else if( url.startsWith( "jdbc:derby:"))
1: 		{
1: 			protocol = "jdbc:derby:";
0:             validProps = getValidCloudscapeProps();
1: 		}
1:         else
1:             validProps = null;
1: 
1: 		
1: 		//Parse the url into attributes and put them in a Properties object.
1: 		StringTokenizer st = new StringTokenizer(url.substring(protocol.length()), ";:\"");
0: 		attributes = new Vector();
1: 		while (st.hasMoreTokens()) {
1:       AttributeHolder anAttribute = new AttributeHolder();
1:       String anAtt = "";
1:       String aValue = "";
1: 	  String aToken = st.nextToken();
1:       //The "=" is the seperator between key and value.
1: 	  int eqPos = aToken.indexOf('=');
1: 	  if (eqPos == -1) {
1: 		  //If there is no "=" this is not an attribute
1: 		  continue;
1:       }
1:       else {
1:         anAtt = (aToken.substring(0, eqPos)).trim();
1:         aValue = (aToken.substring(eqPos + 1)).trim();
1: 
1:       }
1:       anAttribute.setName(anAtt);
1:       anAttribute.setValue(aValue);
1:       anAttribute.setToken(aToken);
1:       attributes.addElement(anAttribute);
1:       props.put(anAtt, aToken);
1: 	}
1: 		return props;
1: 	}
1: 
0:   public static Vector getBooleanAttributes(){
1:     if (booleanAttributes == null) {
0:       booleanAttributes = new Vector();
1: 		  booleanAttributes.addElement(Attribute.DATA_ENCRYPTION);
1: 		  booleanAttributes.addElement(Attribute.CREATE_ATTR);
1: 		  booleanAttributes.addElement(Attribute.SHUTDOWN_ATTR);
1: 		  booleanAttributes.addElement(Attribute.UPGRADE_ATTR);
1:     }
1:     return booleanAttributes;
1:   }
1: 
0:     private static Vector validCloudscapeProps;
0:     private Vector getValidCloudscapeProps()
1:     {
0:         if( validCloudscapeProps == null)
1:         {
1:             try
1:             {
0:                 Vector props = new Vector();
1:                 Class att = Attribute.class;
1:                 //Use reflection to get the list of valid keys from the Attribute class.
1:                 //The Attribute class is an interface and therefore all the field
1:                 //for it are public.
1:                 Field[] fields = att.getFields();
1:                 for (int i = 0; i < fields.length; i++)
1:                 {
1:                     Field aField = (Field)fields[i];
0:                     props.addElement(aField.get(att));
1:                 }
0:                 validCloudscapeProps = props;
1:             }
1:             catch (Exception ex)
1:             {
1:                 ex.printStackTrace();
1:             }
1:         }
0:         return validCloudscapeProps;
0:     } // end of getValidCloudscapeProps
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.tools
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.tools;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.impl.tools.ij.AttributeHolder;
0: import java.util.Vector;
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.util.StringTokenizer;
0: import java.lang.reflect.Field;
0: import java.sql.SQLException;
0: 
0: /**
0:  * This class takes a string used for a connection URL and checks for
0:  * correctness.
0:  * To turn off output in ij, use the command line
0:  * property of -DURLCheck=false.
0:  *
0:  * param anURL	 The URL used to connect to a database.
0:  *
0:  */
0: 
0: public class URLCheck {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:   public Vector attributes;
0:   public static Vector booleanAttributes;
0:   //Need so that AppUI class does not get garbage collected
0:   LocalizedResource langUtil = LocalizedResource.getInstance();
0:   Vector validProps;
0: 
0:   public URLCheck(String anURL) {
0: 
0:     try {
0:       //Initialize the AppUI class
0: 
0:       //Parse the URL string into properties.
0:       Properties props = getAttributes(anURL, new Properties());
0:       check();
0:     }
0:     catch (Exception ex) {
0:       ex.printStackTrace();
0:     }
0:   }
0:  
0: 
0:   public static void main(String[] args) {
0:     if (args.length > 0) {
0:       //Get the first argument passed in.
0:       URLCheck aCheck = new URLCheck(args[0]);
0:     }
0:   }
0:   public void check(){
0:     Enumeration enum = attributes.elements();
0:     while (enum.hasMoreElements()) {
0:       AttributeHolder anAttribute = (AttributeHolder)enum.nextElement();
0:       //The check for duplicate must be done at the URLCheck level
0:       //and not by each specific attribute.  Only URLCheck knowns about
0:       //all of the attributes and names.
0:       checkForDuplicate(anAttribute);
0:       //Have each attribute check as much about themself as possible.
0:       anAttribute.check( validProps);
0:     }
0:   }
0:   public void checkForDuplicate(AttributeHolder anAttribute){
0:     Enumeration enum = attributes.elements();
0:     while (enum.hasMoreElements()) {
0:       AttributeHolder aHolder = (AttributeHolder)enum.nextElement();
0:       //If a duplicate is found, make sure that the message is only shown
0:       //once for each attribute.
0:       if (anAttribute != aHolder && anAttribute.getName().equals(aHolder.getName())) {
0:         anAttribute.addError(langUtil.getTextMessage("TL_dupAtt"));
0:       }
0:     }
0: 
0:   }
0: 	public Properties getAttributes(String url, Properties props) throws Exception {
0: 		
0: 		String protocol = "";
0: 
0:         if( url.startsWith( "jdbc:derby:net:"))
0: 		{
0:             validProps = null;
0: 		}
0:         else if( url.startsWith( "jdbc:derby:"))
0: 		{
0: 			protocol = "jdbc:derby:";
0:             validProps = getValidCloudscapeProps();
0: 		}
0:         else
0:             validProps = null;
0: 
0: 		
0: 		//Parse the url into attributes and put them in a Properties object.
0: 		StringTokenizer st = new StringTokenizer(url.substring(protocol.length()), ";:\"");
0: 		attributes = new Vector();
0: 		while (st.hasMoreTokens()) {
0:       AttributeHolder anAttribute = new AttributeHolder();
0:       String anAtt = "";
0:       String aValue = "";
0: 	  String aToken = st.nextToken();
0:       //The "=" is the seperator between key and value.
0: 	  int eqPos = aToken.indexOf('=');
0: 	  if (eqPos == -1) {
0: 		  //If there is no "=" this is not an attribute
0: 		  continue;
0:       }
0:       else {
0:         anAtt = (aToken.substring(0, eqPos)).trim();
0:         aValue = (aToken.substring(eqPos + 1)).trim();
0: 
0:       }
0:       anAttribute.setName(anAtt);
0:       anAttribute.setValue(aValue);
0:       anAttribute.setToken(aToken);
0:       attributes.addElement(anAttribute);
0:       props.put(anAtt, aToken);
0: 	}
0: 		return props;
0: 	}
0: 
0:   public static Vector getBooleanAttributes(){
0:     if (booleanAttributes == null) {
0:       booleanAttributes = new Vector();
0: 		  booleanAttributes.addElement(Attribute.DATA_ENCRYPTION);
0: 		  booleanAttributes.addElement(Attribute.CREATE_ATTR);
0: 		  booleanAttributes.addElement(Attribute.SHUTDOWN_ATTR);
0: 		  booleanAttributes.addElement(Attribute.UPGRADE_ATTR);
0:     }
0:     return booleanAttributes;
0:   }
0: 
0:     private static Vector validCloudscapeProps;
0:     private Vector getValidCloudscapeProps()
0:     {
0:         if( validCloudscapeProps == null)
0:         {
0:             try
0:             {
0:                 Vector props = new Vector();
0:                 Class att = Attribute.class;
0:                 //Use reflection to get the list of valid keys from the Attribute class.
0:                 //The Attribute class is an interface and therefore all the field
0:                 //for it are public.
0:                 Field[] fields = att.getFields();
0:                 for (int i = 0; i < fields.length; i++)
0:                 {
0:                     Field aField = (Field)fields[i];
0:                     props.addElement(aField.get(att));
0:                 }
0:                 validCloudscapeProps = props;
0:             }
0:             catch (Exception ex)
0:             {
0:                 ex.printStackTrace();
0:             }
0:         }
0:         return validCloudscapeProps;
0:     } // end of getValidCloudscapeProps
0: 
0: }
============================================================================