1:09bee7d: /*
1:09bee7d: 
1:09bee7d:    Derby - Class org.apache.derby.impl.sql.execute.AlterConstraintConstantAction
1:09bee7d: 
1:09bee7d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:09bee7d:    contributor license agreements.  See the NOTICE file distributed with
1:09bee7d:    this work for additional information regarding copyright ownership.
1:09bee7d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:09bee7d:    (the "License"); you may not use this file except in compliance with
1:09bee7d:    the License.  You may obtain a copy of the License at
1:09bee7d: 
1:09bee7d:       http://www.apache.org/licenses/LICENSE-2.0
1:09bee7d: 
1:09bee7d:    Unless required by applicable law or agreed to in writing, software
1:09bee7d:    distributed under the License is distributed on an "AS IS" BASIS,
1:09bee7d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09bee7d:    See the License for the specific language governing permissions and
1:09bee7d:    limitations under the License.
1:09bee7d: 
1:09bee7d:  */
1:09bee7d: 
1:09bee7d: package org.apache.derby.impl.sql.execute;
1:09bee7d: 
1:09bee7d: import org.apache.derby.catalog.UUID;
1:09bee7d: import org.apache.derby.iapi.error.StandardException;
1:09bee7d: import org.apache.derby.iapi.reference.SQLState;
1:09bee7d: import org.apache.derby.iapi.services.property.PropertyUtil;
1:09bee7d: import org.apache.derby.iapi.sql.Activation;
1:09bee7d: import org.apache.derby.iapi.sql.StatementType;
1:09bee7d: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:09bee7d: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:09bee7d: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:09bee7d: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:09bee7d: import org.apache.derby.iapi.store.access.TransactionController;
1:09bee7d: import org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;
1:09bee7d: import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
1:09bee7d: 
1:09bee7d: /**
1:09bee7d:  *  This class  describes actions that are ALWAYS performed for a
1:09bee7d:  *  alter constraint at Execution time.
1:09bee7d:  */
1:09bee7d: 
1:09bee7d: public class AlterConstraintConstantAction extends ConstraintConstantAction
1:09bee7d: {
1:09bee7d: 
1:09bee7d:     private String constraintSchemaName;
1:09bee7d:     boolean[] characteristics;
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      *  Constructor.
1:09bee7d:      *
1:09bee7d:      *  @param constraintName           The constraint name.
1:09bee7d:      *  @param constraintSchemaName     The schema that constraint lives in.
1:09bee7d:      *  @param characteristics          The (presumably) altered enforcement
1:09bee7d:      *                                  characteristics.
1:09bee7d:      *  @param tableName                Table name.
1:09bee7d:      *  @param tableId                  The UUID of table.
1:09bee7d:      *  @param tableSchemaName          The schema that table lives in.
1:09bee7d:      *  @param indexAction              IndexConstantAction for constraint
1:09bee7d:      */
1:09bee7d:     AlterConstraintConstantAction(
1:09bee7d:                        String               constraintName,
1:09bee7d:                        String               constraintSchemaName,
1:09bee7d:                        boolean[]            characteristics,
1:09bee7d:                        String               tableName,
1:09bee7d:                        UUID                 tableId,
1:09bee7d:                        String               tableSchemaName,
1:09bee7d:                        IndexConstantAction indexAction)
1:09bee7d:     {
1:09bee7d:         super(constraintName, DataDictionary.DROP_CONSTRAINT, tableName,
1:09bee7d:               tableId, tableSchemaName, indexAction);
1:09bee7d: 
1:09bee7d:         this.constraintSchemaName = constraintSchemaName;
1:09bee7d:         this.characteristics = characteristics.clone();
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     @Override
1:09bee7d:     public  String  toString()
1:09bee7d:     {
1:09bee7d:         // Do not put this under SanityManager.DEBUG - it is needed for
1:09bee7d:         // error reporting.
1:09bee7d:         String ss = constraintSchemaName == null ? schemaName : constraintSchemaName;
1:09bee7d:         return "ALTER CONSTRAINT " + ss + "." + constraintName;
1:09bee7d:     }
1:09bee7d: 
1:09bee7d:     /**
1:09bee7d:      *  This is the guts of the Execution-time logic for ALTER CONSTRAINT.
1:09bee7d:      *
1:09bee7d:      *  @see ConstantAction#executeConstantAction
1:09bee7d:      *
1:09bee7d:      * @exception StandardException     Thrown on failure
1:09bee7d:      */
1:09bee7d:     public void executeConstantAction(
1:09bee7d:             Activation activation ) throws StandardException {
1:09bee7d: 
1:09bee7d:         final LanguageConnectionContext lcc =
1:09bee7d:                 activation.getLanguageConnectionContext();
1:09bee7d:         final DataDictionary dd = lcc.getDataDictionary();
1:09bee7d:         final DependencyManager dm = dd.getDependencyManager();
1:09bee7d:         final TransactionController tc = lcc.getTransactionExecute();
1:09bee7d: 
1:09bee7d: 
1:09bee7d:         /*
1:09bee7d:         ** Inform the data dictionary that we are about to write to it.
1:09bee7d:         ** There are several calls to data dictionary "get" methods here
1:09bee7d:         ** that might be done in "read" mode in the data dictionary, but
1:09bee7d:         ** it seemed safer to do this whole operation in "write" mode.
1:09bee7d:         **
1:09bee7d:         ** We tell the data dictionary we're done writing at the end of
1:09bee7d:         ** the transaction.
1:09bee7d:         */
1:09bee7d:         dd.startWriting(lcc);
1:09bee7d: 
1:09bee7d:         final TableDescriptor td = dd.getTableDescriptor(tableId);
1:09bee7d: 
1:09bee7d:         if (td == null)
1:09bee7d:         {
1:09bee7d:             throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1:09bee7d:         }
1:09bee7d: 
1:09bee7d:         /* Table gets locked in AlterTableConstantAction */
1:09bee7d: 
1:09bee7d:         /*
1:09bee7d:         ** If the schema descriptor is null, then
1:09bee7d:         ** we must have just read ourselves in.
1:09bee7d:         ** So we will get the corresponding schema
1:09bee7d:         ** descriptor from the data dictionary.
1:09bee7d:         */
1:09bee7d: 
1:09bee7d:         SchemaDescriptor tdSd = td.getSchemaDescriptor();
1:09bee7d:         SchemaDescriptor constraintSd = constraintSchemaName == null
1:09bee7d:                 ? tdSd
1:09bee7d:                 : dd.getSchemaDescriptor(constraintSchemaName, tc, true);
1:09bee7d: 
1:09bee7d: 
1:09bee7d:         /* Get the constraint descriptor for the index, along
1:09bee7d:          * with an exclusive row lock on the row in sys.sysconstraints
1:09bee7d:          * in order to ensure that no one else compiles against the
1:09bee7d:          * index.
1:09bee7d:          */
1:09bee7d:         final ConstraintDescriptor conDesc =
1:09bee7d:                 dd.getConstraintDescriptorByName(td, constraintSd, constraintName, true);
1:09bee7d: 
1:09bee7d: 
1:09bee7d:         if (conDesc == null) {
1:09bee7d:             throw StandardException.newException(
1:09bee7d:                     SQLState.LANG_DROP_OR_ALTER_NON_EXISTING_CONSTRAINT,
1:09bee7d:                      constraintSd.getSchemaName() + "."+ constraintName,
1:09bee7d:                     td.getQualifiedName());
1:09bee7d:         }
1:09bee7d: 
1:09bee7d:         if (characteristics[2] != ConstraintDefinitionNode.ENFORCED_DEFAULT) {
1:0c5bc3a:             dd.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11,
1:0c5bc3a:                             "DEFERRED CONSTRAINTS");
1:0c5bc3a: 
1:831e54e:             if (constraintType == DataDictionary.FOREIGNKEY_CONSTRAINT ||
1:831e54e:                 constraintType == DataDictionary.NOTNULL_CONSTRAINT ||
1:831e54e:                 !characteristics[2] /* not enforced */) {
1:831e54e: 
1:831e54e:                 // Remove when feature DERBY-532 is completed
1:831e54e:                 if (!PropertyUtil.getSystemProperty(
1:0c5bc3a:                         "derby.constraintsTesting", "false").equals("true")) {
1:831e54e:                     throw StandardException.newException(
1:831e54e:                         SQLState.NOT_IMPLEMENTED,
1:09bee7d:                         "non-default enforcement");
1:831e54e:                 }
1:09bee7d:             }
1:09bee7d:         }
1:09bee7d: 
1:09bee7d:         // The first two characteristics are unused during ALTER CONSTRAINT; only
1:09bee7d:         // enforcement can change.
1:09bee7d:         conDesc.setEnforced(characteristics[2]);
1:09bee7d: 
1:09bee7d:         int[] colsToSet = new int[1];
1:09bee7d:         colsToSet[0] = SYSCONSTRAINTSRowFactory.SYSCONSTRAINTS_STATE;
1:09bee7d:         dd.updateConstraintDescriptor(conDesc, conDesc.getUUID(), colsToSet, tc);
1:09bee7d:     }
1:09bee7d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
commit:831e54e
/////////////////////////////////////////////////////////////////////////
1:             if (constraintType == DataDictionary.FOREIGNKEY_CONSTRAINT ||
0:                 constraintType == DataDictionary.CHECK_CONSTRAINT ||
1:                 constraintType == DataDictionary.NOTNULL_CONSTRAINT ||
1:                 !characteristics[2] /* not enforced */) {
1: 
1:                 // Remove when feature DERBY-532 is completed
1:                 if (!PropertyUtil.getSystemProperty(
1:                     throw StandardException.newException(
1:                         SQLState.NOT_IMPLEMENTED,
1:                 }
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:             dd.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11,
1:                             "DEFERRED CONSTRAINTS");
1: 
0:             if (!PropertyUtil.getSystemProperty(
1:                         "derby.constraintsTesting", "false").equals("true")) {
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.AlterConstraintConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.StatementType;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;
1: import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
1: 
1: /**
1:  *  This class  describes actions that are ALWAYS performed for a
1:  *  alter constraint at Execution time.
1:  */
1: 
1: public class AlterConstraintConstantAction extends ConstraintConstantAction
1: {
1: 
1:     private String constraintSchemaName;
1:     boolean[] characteristics;
1: 
1:     /**
1:      *  Constructor.
1:      *
1:      *  @param constraintName           The constraint name.
1:      *  @param constraintSchemaName     The schema that constraint lives in.
1:      *  @param characteristics          The (presumably) altered enforcement
1:      *                                  characteristics.
1:      *  @param tableName                Table name.
1:      *  @param tableId                  The UUID of table.
1:      *  @param tableSchemaName          The schema that table lives in.
1:      *  @param indexAction              IndexConstantAction for constraint
1:      */
1:     AlterConstraintConstantAction(
1:                        String               constraintName,
1:                        String               constraintSchemaName,
1:                        boolean[]            characteristics,
1:                        String               tableName,
1:                        UUID                 tableId,
1:                        String               tableSchemaName,
1:                        IndexConstantAction indexAction)
1:     {
1:         super(constraintName, DataDictionary.DROP_CONSTRAINT, tableName,
1:               tableId, tableSchemaName, indexAction);
1: 
1:         this.constraintSchemaName = constraintSchemaName;
1:         this.characteristics = characteristics.clone();
1:     }
1: 
1:     @Override
1:     public  String  toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1:         String ss = constraintSchemaName == null ? schemaName : constraintSchemaName;
1:         return "ALTER CONSTRAINT " + ss + "." + constraintName;
1:     }
1: 
1:     /**
1:      *  This is the guts of the Execution-time logic for ALTER CONSTRAINT.
1:      *
1:      *  @see ConstantAction#executeConstantAction
1:      *
1:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction(
1:             Activation activation ) throws StandardException {
1: 
1:         final LanguageConnectionContext lcc =
1:                 activation.getLanguageConnectionContext();
1:         final DataDictionary dd = lcc.getDataDictionary();
1:         final DependencyManager dm = dd.getDependencyManager();
1:         final TransactionController tc = lcc.getTransactionExecute();
1: 
1: 
1:         /*
1:         ** Inform the data dictionary that we are about to write to it.
1:         ** There are several calls to data dictionary "get" methods here
1:         ** that might be done in "read" mode in the data dictionary, but
1:         ** it seemed safer to do this whole operation in "write" mode.
1:         **
1:         ** We tell the data dictionary we're done writing at the end of
1:         ** the transaction.
1:         */
1:         dd.startWriting(lcc);
1: 
1:         final TableDescriptor td = dd.getTableDescriptor(tableId);
1: 
1:         if (td == null)
1:         {
1:             throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1:         }
1: 
1:         /* Table gets locked in AlterTableConstantAction */
1: 
1:         /*
1:         ** If the schema descriptor is null, then
1:         ** we must have just read ourselves in.
1:         ** So we will get the corresponding schema
1:         ** descriptor from the data dictionary.
1:         */
1: 
1:         SchemaDescriptor tdSd = td.getSchemaDescriptor();
1:         SchemaDescriptor constraintSd = constraintSchemaName == null
1:                 ? tdSd
1:                 : dd.getSchemaDescriptor(constraintSchemaName, tc, true);
1: 
1: 
1:         /* Get the constraint descriptor for the index, along
1:          * with an exclusive row lock on the row in sys.sysconstraints
1:          * in order to ensure that no one else compiles against the
1:          * index.
1:          */
1:         final ConstraintDescriptor conDesc =
1:                 dd.getConstraintDescriptorByName(td, constraintSd, constraintName, true);
1: 
1: 
1:         if (conDesc == null) {
1:             throw StandardException.newException(
1:                     SQLState.LANG_DROP_OR_ALTER_NON_EXISTING_CONSTRAINT,
1:                      constraintSd.getSchemaName() + "."+ constraintName,
1:                     td.getQualifiedName());
1:         }
1: 
1:         if (characteristics[2] != ConstraintDefinitionNode.ENFORCED_DEFAULT) {
0:             // Remove when feature DERBY-532 is completed
0:             if (!PropertyUtil.getSystemProperty("derby.constraintsTesting",
0:                     tableName).equals("true")) {
0:                 throw StandardException.newException(SQLState.NOT_IMPLEMENTED,
1:                         "non-default enforcement");
1:             }
1:         }
1: 
1:         // The first two characteristics are unused during ALTER CONSTRAINT; only
1:         // enforcement can change.
1:         conDesc.setEnforced(characteristics[2]);
1: 
1:         int[] colsToSet = new int[1];
1:         colsToSet[0] = SYSCONSTRAINTSRowFactory.SYSCONSTRAINTS_STATE;
1:         dd.updateConstraintDescriptor(conDesc, conDesc.getUUID(), colsToSet, tc);
1:     }
1: }
============================================================================