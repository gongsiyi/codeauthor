1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
12:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:30fa79b: import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:d7f7457: import org.apache.derby.iapi.services.compiler.LocalField;
1:d7f7457: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:4469400: public class UserDefinedTypeCompiler extends BaseTypeCompiler
2:eac0369: {
1:eac0369: 	/* TypeCompiler methods */
1:eac0369: 
3:eac0369: 	/**
1:30fa79b: 	 * Right now, casting is not allowed from one user defined type
1:30fa79b:      * to another.
3:eac0369: 	 *
1:eac0369: 	 * @param otherType 
1:eac0369: 	 * @param forDataTypeFunction
1:eac0369: 	 * @return true if otherType is convertible to this type, else false.
1:eac0369: 	 * 
1:eac0369: 	 *@see TypeCompiler#convertible
1:eac0369: 	 */
1:eac0369: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1:eac0369: 	{
1:30fa79b:         if ( getTypeId().getBaseTypeId().isAnsiUDT() )
1:30fa79b:         {
1:30fa79b:             if ( !otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
1:30fa79b:             
1:30fa79b:             UserDefinedTypeIdImpl thisTypeID = (UserDefinedTypeIdImpl) getTypeId().getBaseTypeId();
1:30fa79b:             UserDefinedTypeIdImpl thatTypeID = (UserDefinedTypeIdImpl) otherType.getBaseTypeId();
1:30fa79b:             
1:30fa79b:             return thisTypeID.getSQLTypeName().equals( thatTypeID.getSQLTypeName() );
1:30fa79b:         }
1:30fa79b:         
1:eac0369: 		/*
1:30fa79b: 		** We are a non-ANSI user defined type, we are
1:eac0369: 		** going to have to let the client find out
1:eac0369: 		** the hard way.
1:eac0369: 		*/
2:eac0369: 		return true;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	 /** @see TypeCompiler#compatible */
1:eac0369: 	public boolean compatible(TypeId otherType)
1:eac0369: 	{
1:eac0369: 		return convertible(otherType, false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:30fa79b:      * ANSI UDTs can only be stored into values of exactly their own
1:30fa79b:      * type. This restriction can be lifted when we implement the
1:30fa79b:      * ANSI subclassing clauses.
1:30fa79b:      *
1:30fa79b: 	 * Old-style User types are storable into other user types that they
1:eac0369: 	 * are assignable to. The other type must be a subclass of
1:eac0369: 	 * this type, or implement this type as one of its interfaces.
1:eac0369: 	 *
1:eac0369: 	 * @param otherType the type of the instance to store into this type.
2:eac0369: 	 * @param cf		A ClassFactory
1:eac0369: 	 * @return true if otherType is storable into this type, else false.
1:eac0369: 	 */
1:eac0369: 	public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369: 	{
1:30fa79b:         if ( !otherType.isUserDefinedTypeId() ) { return false; }
1:30fa79b: 
1:30fa79b:         UserDefinedTypeIdImpl thisTypeID = (UserDefinedTypeIdImpl) getTypeId().getBaseTypeId();
1:30fa79b:         UserDefinedTypeIdImpl thatTypeID = (UserDefinedTypeIdImpl) otherType.getBaseTypeId();
1:30fa79b: 
1:30fa79b:         if ( thisTypeID.isAnsiUDT() != thatTypeID.isAnsiUDT() ) { return false; }
1:30fa79b: 
1:30fa79b:         if ( thisTypeID.isAnsiUDT() )
1:30fa79b:         {
1:30fa79b:             return thisTypeID.getSQLTypeName().equals( thatTypeID.getSQLTypeName() );
1:30fa79b:         }
1:30fa79b:         
1:eac0369: 		return cf.getClassInspector().assignableTo(
1:eac0369: 			   otherType.getCorrespondingJavaTypeName(),
2:eac0369: 			   getTypeId().getCorrespondingJavaTypeName());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#interfaceName */
1:eac0369: 	public String interfaceName()
1:eac0369: 	{
1:eac0369: 		return ClassName.UserDataValue;
1:eac0369: 	}
1:eac0369: 			
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String getCorrespondingPrimitiveTypeName()
1:eac0369: 	{
1:eac0369: 		return getTypeId().getCorrespondingJavaTypeName();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCastToCharWidth
1:eac0369: 	 */
1:eac0369: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1:eac0369: 	{
1:eac0369: 		// This is the maximum maximum width for user types
1:eac0369: 		return -1;
1:eac0369: 	}
1:eac0369: 
1:44fad02: 	String nullMethodName()
1:eac0369: 	{
1:eac0369: 		return "getNullObject";
1:eac0369: 	}
1:d7f7457: 
1:3bb140c:     @Override
1:a1aaa63: 	public void generateDataValue(MethodBuilder mb, int collationType,
1:a57c280: 			LocalField field)
1:d7f7457: 	{
1:d7f7457: 		// cast the value to an object for method resolution
1:d7f7457: 		mb.upCast("java.lang.Object");
1:d7f7457: 
1:a1aaa63: 		super.generateDataValue(mb, collationType, field);
1:d7f7457: 	}
1:d7f7457: 
1:d7f7457: 		
1:d7f7457: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class UserDefinedTypeCompiler extends BaseTypeCompiler
commit:30fa79b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
/////////////////////////////////////////////////////////////////////////
1: 	 * Right now, casting is not allowed from one user defined type
1:      * to another.
/////////////////////////////////////////////////////////////////////////
1:         if ( getTypeId().getBaseTypeId().isAnsiUDT() )
1:         {
1:             if ( !otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
1:             
1:             UserDefinedTypeIdImpl thisTypeID = (UserDefinedTypeIdImpl) getTypeId().getBaseTypeId();
1:             UserDefinedTypeIdImpl thatTypeID = (UserDefinedTypeIdImpl) otherType.getBaseTypeId();
1:             
1:             return thisTypeID.getSQLTypeName().equals( thatTypeID.getSQLTypeName() );
1:         }
1:         
1: 		** We are a non-ANSI user defined type, we are
/////////////////////////////////////////////////////////////////////////
1:      * ANSI UDTs can only be stored into values of exactly their own
1:      * type. This restriction can be lifted when we implement the
1:      * ANSI subclassing clauses.
1:      *
1: 	 * Old-style User types are storable into other user types that they
1:         if ( !otherType.isUserDefinedTypeId() ) { return false; }
1: 
1:         UserDefinedTypeIdImpl thisTypeID = (UserDefinedTypeIdImpl) getTypeId().getBaseTypeId();
1:         UserDefinedTypeIdImpl thatTypeID = (UserDefinedTypeIdImpl) otherType.getBaseTypeId();
1: 
1:         if ( thisTypeID.isAnsiUDT() != thatTypeID.isAnsiUDT() ) { return false; }
1: 
1:         if ( thisTypeID.isAnsiUDT() )
1:         {
1:             return thisTypeID.getSQLTypeName().equals( thatTypeID.getSQLTypeName() );
1:         }
1:         
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class UserDefinedTypeCompiler extends BaseTypeCompiler
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a1aaa63
/////////////////////////////////////////////////////////////////////////
1: 	public void generateDataValue(MethodBuilder mb, int collationType,
1: 		super.generateDataValue(mb, collationType, field);
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: 	String nullMethodName()
commit:1e9e925
/////////////////////////////////////////////////////////////////////////
commit:a57c280
/////////////////////////////////////////////////////////////////////////
1: 			LocalField field)
0: 		super.generateDataValue(eb, mb, collationType, field);
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public void generateDataValue(MethodBuilder mb,
0: 										LocalField field)
1: 	{
1: 		// cast the value to an object for method resolution
1: 		mb.upCast("java.lang.Object");
1: 
0: 		super.generateDataValue(mb, field);
1: 	}
1: 
1: 		
1: 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
1: 
0: public class UserDefinedTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/* TypeCompiler methods */
1: 
1: 	/**
0: 	 * User types are comparable to other user types only if
0: 	 * (for now) they are the same type and are being used to
0: 	 * implement some JDBC type.  This is sufficient for
0: 	 * date/time types; it may be generalized later for e.g.
0: 	 * comparison of any user type with one of its subtypes.
1: 	 *
0: 	 * @param otherType the type of the instance to compare with this type.
0: 	 * @param forEquals True if this is an = or <> comparison, false
0: 	 *					otherwise.
1: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is comparable to this type, else false.
1: 	 */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
1: 	{
0: 		if (forEquals)
1: 			return true;
1: 
0: 		try {
0: 			Class thisClass = cf.getClassInspector().getClass(
1: 									getTypeId().getCorrespondingJavaTypeName());
1: 
0: 			return java.lang.Comparable.class.isAssignableFrom(thisClass);
1: 
0: 		} catch (ClassNotFoundException cnfe) {
0: 			return false;
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * User types are convertible to other user types only if
0: 	 * (for now) they are the same type and are being used to
0: 	 * implement some JDBC type.  This is sufficient for
0: 	 * date/time types; it may be generalized later for e.g.
0: 	 * comparison of any user type with one of its subtypes.
1: 	 *
1: 	 * @param otherType 
1: 	 * @param forDataTypeFunction
1: 	 * @return true if otherType is convertible to this type, else false.
1: 	 * 
1: 	 *@see TypeCompiler#convertible
1: 	 */
1: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1: 	{
1: 		/*
0: 		** We are a user defined type, we are
1: 		** going to have to let the client find out
1: 		** the hard way.
1: 		*/
1: 		return true;
1: 	}
1: 
1: 	 /** @see TypeCompiler#compatible */
1: 	public boolean compatible(TypeId otherType)
1: 	{
1: 		return convertible(otherType, false);
1: 	}
1: 
1: 	/**
0: 	 * User types are storable into other user types that they
1: 	 * are assignable to. The other type must be a subclass of
1: 	 * this type, or implement this type as one of its interfaces.
1: 	 *
0: 	 * Built-in types are also storable into user types when the built-in
0: 	 * type's corresponding Java type is assignable to the user type.
1: 	 *
1: 	 * @param otherType the type of the instance to store into this type.
1: 	 * @param cf		A ClassFactory
1: 	 * @return true if otherType is storable into this type, else false.
1: 	 */
1: 	public boolean storable(TypeId otherType, ClassFactory cf)
1: 	{
1: 		return cf.getClassInspector().assignableTo(
1: 			   otherType.getCorrespondingJavaTypeName(),
1: 			   getTypeId().getCorrespondingJavaTypeName());
1: 	}
1: 
1: 	/** @see TypeCompiler#interfaceName */
1: 	public String interfaceName()
1: 	{
1: 		return ClassName.UserDataValue;
1: 	}
1: 			
1: 	/**
1: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1: 	 */
1: 
1: 	public String getCorrespondingPrimitiveTypeName()
1: 	{
1: 		return getTypeId().getCorrespondingJavaTypeName();
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCastToCharWidth
1: 	 */
1: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1: 	{
1: 		// This is the maximum maximum width for user types
1: 		return -1;
1: 	}
1: 
0: 	protected String nullMethodName()
1: 	{
1: 		return "getNullObject";
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:869152f
/////////////////////////////////////////////////////////////////////////
0: 	/** @see TypeCompiler#generateDataValue(ExpressionClassBuilder, MethodBuilder, int, String, LocalField) */
0: 	public void generateDataValue(ExpressionClassBuilder eb, MethodBuilder mb, int collationType,
0: 		super.generateDataValue(eb, mb, collationType, className, field);
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
0: 	public void generateDataValue(MethodBuilder mb, int collationType,
0: 			String className, LocalField field)
0: 		super.generateDataValue(mb, collationType, className, field);
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: 
0: public class UserDefinedTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/* TypeCompiler methods */
0: 
0: 	/**
0: 	 * User types are comparable to other user types only if
0: 	 * (for now) they are the same type and are being used to
0: 	 * implement some JDBC type.  This is sufficient for
0: 	 * date/time types; it may be generalized later for e.g.
0: 	 * comparison of any user type with one of its subtypes.
0: 	 *
0: 	 * @param otherType the type of the instance to compare with this type.
0: 	 * @param forEquals True if this is an = or <> comparison, false
0: 	 *					otherwise.
0: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is comparable to this type, else false.
0: 	 */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
0: 	{
0: 		if (forEquals)
0: 			return true;
0: 
0: 		try {
0: 			Class thisClass = cf.getClassInspector().getClass(
0: 									getTypeId().getCorrespondingJavaTypeName());
0: 
0: 			return java.lang.Comparable.class.isAssignableFrom(thisClass);
0: 
0: 		} catch (ClassNotFoundException cnfe) {
0: 			return false;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * User types are convertible to other user types only if
0: 	 * (for now) they are the same type and are being used to
0: 	 * implement some JDBC type.  This is sufficient for
0: 	 * date/time types; it may be generalized later for e.g.
0: 	 * comparison of any user type with one of its subtypes.
0: 	 *
0: 	 * @param otherType 
0: 	 * @param forDataTypeFunction
0: 	 * @return true if otherType is convertible to this type, else false.
0: 	 * 
0: 	 *@see TypeCompiler#convertible
0: 	 */
0: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
0: 	{
0: 		/*
0: 		** We are a user defined type, we are
0: 		** going to have to let the client find out
0: 		** the hard way.
0: 		*/
0: 		return true;
0: 	}
0: 
0: 	 /** @see TypeCompiler#compatible */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		return convertible(otherType, false);
0: 	}
0: 
0: 	/**
0: 	 * User types are storable into other user types that they
0: 	 * are assignable to. The other type must be a subclass of
0: 	 * this type, or implement this type as one of its interfaces.
0: 	 *
0: 	 * Built-in types are also storable into user types when the built-in
0: 	 * type's corresponding Java type is assignable to the user type.
0: 	 *
0: 	 * @param otherType the type of the instance to store into this type.
0: 	 * @param cf		A ClassFactory
0: 	 * @return true if otherType is storable into this type, else false.
0: 	 */
0: 	public boolean storable(TypeId otherType, ClassFactory cf)
0: 	{
0: 		return cf.getClassInspector().assignableTo(
0: 			   otherType.getCorrespondingJavaTypeName(),
0: 			   getTypeId().getCorrespondingJavaTypeName());
0: 	}
0: 
0: 	/** @see TypeCompiler#interfaceName */
0: 	public String interfaceName()
0: 	{
0: 		return ClassName.UserDataValue;
0: 	}
0: 			
0: 	/**
0: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0: 	 */
0: 
0: 	public String getCorrespondingPrimitiveTypeName()
0: 	{
0: 		return getTypeId().getCorrespondingJavaTypeName();
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCastToCharWidth
0: 	 */
0: 	public int getCastToCharWidth(DataTypeDescriptor dts)
0: 	{
0: 		// This is the maximum maximum width for user types
0: 		return -1;
0: 	}
0: 
0: 	protected String nullMethodName()
0: 	{
0: 		return "getNullObject";
0: 	}
0: }
============================================================================