1:b611394: /*
2:b611394: 
1:b611394:    Derby - Class org.apache.derbyTesting.functionTests.tests.memory.MultiByteClobTest
1:b611394:    Licensed to the Apache Software Foundation (ASF) under one
1:b611394:    or more contributor license agreements.  See the NOTICE file
1:b611394:    distributed with this work for additional information
1:b611394:    regarding copyright ownership.  The ASF licenses this file
1:b611394:    to you under the Apache License, Version 2.0 (the
1:b611394:    "License"); you may not use this file except in compliance
1:b611394:    with the License.  You may obtain a copy of the License at
1:b611394: 
1:b611394:      http://www.apache.org/licenses/LICENSE-2.0
1:b611394: 
1:b611394:    Unless required by applicable law or agreed to in writing,
1:b611394:    software distributed under the License is distributed on an
1:b611394:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b611394:    KIND, either express or implied.  See the License for the
1:b611394:    specific language governing permissions and limitations
1:b611394:    under the License.
1:b611394: 
4:b611394:  */
1:b611394: 
1:b611394: package org.apache.derbyTesting.functionTests.tests.memory;
1:b611394: 
1:1ae02c9: import java.io.IOException;
1:1ae02c9: import java.io.Reader;
1:b611394: import java.sql.PreparedStatement;
1:b611394: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:b611394: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:b611394: 
3:b611394: /**
1:b611394:  * Test for small and larg clobs with multibyte characters.
1:b611394:  */
1:b611394: public class MultiByteClobTest extends BaseJDBCTestCase {
1:b611394: 
1:b611394:     private static final int LONG_CLOB_LENGTH = 9000000;
1:b611394:     private static final int SHORT_CLOB_LENGTH = 100;
1:b611394:     private static final String LONG_CLOB_LENGTH_STRING = "9000000";
1:b611394:     private static final String SHORT_CLOB_LENGTH_STRING = "100";
1:b611394: 
1:b611394:     /**
1:b611394:      * Create a test case with the given name.
4:b611394:      *
1:b611394:      * @param name of the test case.
1:b611394:      */
1:b611394:     public MultiByteClobTest(String name) {
1:b611394:         super(name);
4:b611394:     }
1:b611394: 
1:b611394:     public void testSmallMultiByteCharLob() throws SQLException, IOException {
1:b611394:         setAutoCommit(false);
1:b611394:         Statement s = createStatement();
1:b611394:         
1:b611394:         PreparedStatement ps = prepareStatement("INSERT INTO MB_CLOBTABLE VALUES(?,?)");
1:b611394:         // We allocate 16MB for the test so use something bigger than that.
1:b611394:         ps.setInt(1,1);
1:b611394:         LoopingAlphabetReader reader = new LoopingAlphabetReader(SHORT_CLOB_LENGTH, CharAlphabet.cjkSubset());
1:b611394: 
1:b611394:         ps.setCharacterStream(2, reader, SHORT_CLOB_LENGTH);
1:b611394:         ps.executeUpdate();
1:b611394: 
1:b611394:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM MB_CLOBTABLE" +
1:b611394:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:b611394:         rs.next();
1:b611394:         assertEquals(SHORT_CLOB_LENGTH_STRING, rs.getString(2));
1:b611394:         // make sure we can still access the clob after getting length.
1:b611394:         // It should be ok because we reset the stream
1:b611394:         Reader rsReader = rs.getCharacterStream(3);
1:b611394:         int len= 0;
1:b611394:         char[] buf = new char[32672];
1:b611394:         for (;;)  {
1:b611394:                 int size = rsReader.read(buf);
1:b611394:                 if (size == -1)
1:b611394:                         break;
1:b611394:                 len += size;
1:b611394:                 int expectedValue = ((len -1) % 12) + '\u4E00';
1:b611394:                 if (size != 0)
1:b611394:                     assertEquals(expectedValue,buf[size -1]);
1:b611394:         }
1:b611394:         assertEquals(SHORT_CLOB_LENGTH, len);
1:b611394:         rs.close();
1:b611394:         // Select just length without selecting the clob.
1:b611394:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM MB_CLOBTABLE " +
1:b611394:                 "ORDER BY K");
1:b611394:         JDBC.assertFullResultSet(rs, new String [][] {{"1",SHORT_CLOB_LENGTH_STRING}});
1:b611394:     }
1:b611394: 
1:b611394:     public void testLargeMultiByteCharLob() throws SQLException, IOException {
1:b611394:         setAutoCommit(false);
1:b611394:         Statement s = createStatement();
1:b611394: 
1:b611394:         PreparedStatement ps = prepareStatement("INSERT INTO MB_CLOBTABLE VALUES(?,?)");
1:b611394:         // We allocate 16MB for the test so use something bigger than that.
1:b611394:         ps.setInt(1,1);
1:b611394:         LoopingAlphabetReader reader = new LoopingAlphabetReader(LONG_CLOB_LENGTH, CharAlphabet.cjkSubset());
1:b611394: 
1:b611394:         ps.setCharacterStream(2, reader, LONG_CLOB_LENGTH);
1:b611394:         ps.executeUpdate();
1:b611394: 
1:b611394:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM MB_CLOBTABLE" +
1:b611394:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:b611394:         rs.next();
1:b611394:         assertEquals(LONG_CLOB_LENGTH_STRING, rs.getString(2));
1:b611394:         // make sure we can still access the clob after getting length.
1:b611394:         // It should be ok because we reset the stream
1:b611394:         Reader rsReader = rs.getCharacterStream(3);
1:b611394:         int len= 0;
1:b611394:         char[] buf = new char[32672];
1:b611394:         for (;;)  {
1:b611394:                 int size = rsReader.read(buf);
1:b611394:                 if (size == -1)
1:b611394:                         break;
1:b611394:                 len += size;
1:b611394:                 int expectedValue = ((len -1) % 12) + '\u4E00';
1:b611394:                 if (size != 0)
1:b611394:                     assertEquals(expectedValue,buf[size -1]);
1:b611394:         }
1:b611394:         assertEquals(LONG_CLOB_LENGTH, len);
1:b611394:         rs.close();
1:b611394:         // Select just length without selecting the clob.
1:b611394:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM MB_CLOBTABLE " +
1:b611394:                 "ORDER BY K");
1:b611394:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_CLOB_LENGTH_STRING}});
1:b611394:     }
1:b611394: 
1:b611394:     /**
1:f696701:      * Runs the test fixtures in embedded and client.
1:f696701:      *
1:f696701:      * @return test suite
1:f696701:      */
1:f696701:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("MultiByteClobTest");
1:f696701:         suite.addTest(baseSuite("MultiByteClobTest:embedded"));
1:9a8eb75:         suite.addTest(TestConfiguration
1:9a8eb75:             .clientServerDecorator(baseSuite("MultiByteClobTest:client")));
1:f696701:         Properties p = new Properties();
1:f696701:         // use small pageCacheSize so we don't run out of memory on the insert.
1:f696701:         p.setProperty("derby.storage.pageCacheSize", "100");
1:f696701:         return new SystemPropertyTestSetup(suite,p);
1:f696701:     }
1:b611394: 
1:f696701:     /**
1:f696701:      * Base suite of tests that will run in both embedded and client.
1:f696701:      *
1:f696701:      * @param name name for the suite.
1:f696701:      */
1:f696701:     private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:f696701:         suite.addTestSuite(MultiByteClobTest.class);
1:f696701:         return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
1:f696701:                 .setLockTimeouts(suite, 2, 4)) {
1:b611394: 
1:f696701:             /**
1:f696701:              * Creates the tables used in the test cases.
1:f696701:              *
1:f696701:              * @exception java.sql.SQLException
1:f696701:              *                if a database error occurs
1:f696701:              */
1:f696701:             protected void decorateSQL(Statement stmt) throws SQLException {
1:f696701:                 stmt.execute("CREATE TABLE MB_CLOBTABLE " +
1:f696701:                         "(K INT CONSTRAINT PK PRIMARY KEY, C CLOB(" +
1:f696701:                         LONG_CLOB_LENGTH + "))");
1:f696701:             }
1:f696701:         };
1:f696701:     }
1:b611394: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.Reader;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("MultiByteClobTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9a8eb75
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(TestConfiguration
1:             .clientServerDecorator(baseSuite("MultiByteClobTest:client")));
commit:f696701
/////////////////////////////////////////////////////////////////////////
1:      * Runs the test fixtures in embedded and client.
1:      *
1:      * @return test suite
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("MultiByteClobTest");
1:         suite.addTest(baseSuite("MultiByteClobTest:embedded"));
0:         // Disable for client for now. Client clob is inordinately slow.
0:         //suite.addTest(TestConfiguration
0:         //    .clientServerDecorator(baseSuite("MultiByteClobTest:client")));
1:         Properties p = new Properties();
1:         // use small pageCacheSize so we don't run out of memory on the insert.
1:         p.setProperty("derby.storage.pageCacheSize", "100");
1:         return new SystemPropertyTestSetup(suite,p);
1:     }
1:     /**
1:      * Base suite of tests that will run in both embedded and client.
1:      *
1:      * @param name name for the suite.
1:      */
1:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(MultiByteClobTest.class);
1:         return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
1:                 .setLockTimeouts(suite, 2, 4)) {
1:             /**
1:              * Creates the tables used in the test cases.
1:              *
1:              * @exception java.sql.SQLException
1:              *                if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 stmt.execute("CREATE TABLE MB_CLOBTABLE " +
1:                         "(K INT CONSTRAINT PK PRIMARY KEY, C CLOB(" +
1:                         LONG_CLOB_LENGTH + "))");
1:             }
1:         };
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b611394
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memory.MultiByteClobTest
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
0: import org.apache.derbyTesting.junit.*;
0: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
0: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import java.sql.Statement;
0: import java.sql.SQLException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.util.Properties;
0: import java.io.Reader;
0: import java.io.IOException;
1: 
1: /**
1:  * Test for small and larg clobs with multibyte characters.
1:  */
1: public class MultiByteClobTest extends BaseJDBCTestCase {
1: 
1:     private static final int LONG_CLOB_LENGTH = 9000000;
1:     private static final int SHORT_CLOB_LENGTH = 100;
1:     private static final String LONG_CLOB_LENGTH_STRING = "9000000";
1:     private static final String SHORT_CLOB_LENGTH_STRING = "100";
1: 
1:     /**
1:      * Create a test case with the given name.
1:      *
1:      * @param name of the test case.
1:      */
1:     public MultiByteClobTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testSmallMultiByteCharLob() throws SQLException, IOException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         
1:         PreparedStatement ps = prepareStatement("INSERT INTO MB_CLOBTABLE VALUES(?,?)");
1:         // We allocate 16MB for the test so use something bigger than that.
1:         ps.setInt(1,1);
1:         LoopingAlphabetReader reader = new LoopingAlphabetReader(SHORT_CLOB_LENGTH, CharAlphabet.cjkSubset());
1: 
1:         ps.setCharacterStream(2, reader, SHORT_CLOB_LENGTH);
1:         ps.executeUpdate();
1: 
1:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM MB_CLOBTABLE" +
1:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:         rs.next();
1:         assertEquals(SHORT_CLOB_LENGTH_STRING, rs.getString(2));
1:         // make sure we can still access the clob after getting length.
1:         // It should be ok because we reset the stream
1:         Reader rsReader = rs.getCharacterStream(3);
1:         int len= 0;
1:         char[] buf = new char[32672];
1:         for (;;)  {
1:                 int size = rsReader.read(buf);
1:                 if (size == -1)
1:                         break;
1:                 len += size;
1:                 int expectedValue = ((len -1) % 12) + '\u4E00';
1:                 if (size != 0)
1:                     assertEquals(expectedValue,buf[size -1]);
1:         }
1:         assertEquals(SHORT_CLOB_LENGTH, len);
1:         rs.close();
1:         // Select just length without selecting the clob.
1:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM MB_CLOBTABLE " +
1:                 "ORDER BY K");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1",SHORT_CLOB_LENGTH_STRING}});
1:     }
1: 
1:     public void testLargeMultiByteCharLob() throws SQLException, IOException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1: 
1:         PreparedStatement ps = prepareStatement("INSERT INTO MB_CLOBTABLE VALUES(?,?)");
1:         // We allocate 16MB for the test so use something bigger than that.
1:         ps.setInt(1,1);
1:         LoopingAlphabetReader reader = new LoopingAlphabetReader(LONG_CLOB_LENGTH, CharAlphabet.cjkSubset());
1: 
1:         ps.setCharacterStream(2, reader, LONG_CLOB_LENGTH);
1:         ps.executeUpdate();
1: 
1:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM MB_CLOBTABLE" +
1:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:         rs.next();
1:         assertEquals(LONG_CLOB_LENGTH_STRING, rs.getString(2));
1:         // make sure we can still access the clob after getting length.
1:         // It should be ok because we reset the stream
1:         Reader rsReader = rs.getCharacterStream(3);
1:         int len= 0;
1:         char[] buf = new char[32672];
1:         for (;;)  {
1:                 int size = rsReader.read(buf);
1:                 if (size == -1)
1:                         break;
1:                 len += size;
1:                 int expectedValue = ((len -1) % 12) + '\u4E00';
1:                 if (size != 0)
1:                     assertEquals(expectedValue,buf[size -1]);
1:         }
1:         assertEquals(LONG_CLOB_LENGTH, len);
1:         rs.close();
1:         // Select just length without selecting the clob.
1:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM MB_CLOBTABLE " +
1:                 "ORDER BY K");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_CLOB_LENGTH_STRING}});
1:     }
1: 
1:     /**
0: 	 * Runs the test fixtures in embedded and client.
1: 	 *
0: 	 * @return test suite
1: 	 */
0: 	public static Test suite() {
0: 		TestSuite suite = new TestSuite("MultiByteClobTest");
0: 		suite.addTest(baseSuite("MultiByteClobTest:embedded"));
0:                 // Disable for client for now. Client clob is inordinately slow.
0: 		//suite.addTest(TestConfiguration
0: 		//		.clientServerDecorator(baseSuite("MultiByteClobTest:client")));
0:                 Properties p = new Properties();
0:                 // use small pageCacheSize so we don't run out of memory on the insert.
0:                 p.setProperty("derby.storage.pageCacheSize", "100");
0:                 return new SystemPropertyTestSetup(suite,p);	
1: 	}
1: 
1: 	/**
0: 	 * Base suite of tests that will run in both embedded and client.
1: 	 *
0: 	 * @param name
0: 	 *            Name for the suite.
1: 	 */
0: 	private static Test baseSuite(String name) {
0: 		TestSuite suite = new TestSuite(name);
0: 		suite.addTestSuite(MultiByteClobTest.class);
0: 		return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
0: 				.setLockTimeouts(suite, 2, 4)) {
1: 
1: 			/**
0: 			 * Creates the tables used in the test cases.
1: 			 *
0: 			 * @exception java.sql.SQLException
0: 			 *                if a database error occurs
1: 			 */
0: 			protected void decorateSQL(Statement stmt) throws SQLException {
0: 				stmt.execute("CREATE TABLE MB_CLOBTABLE (K INT CONSTRAINT PK PRIMARY KEY, C CLOB(" + LONG_CLOB_LENGTH + "))");
1: 			}
0: 		};
1: 	}
1: }
============================================================================