1:c96b799: /* Derby - Class org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest
1:c96b799:  *
1:c96b799:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c96b799:  * contributor license agreements.  See the NOTICE file distributed with
1:c96b799:  * this work for additional information regarding copyright ownership.
1:c96b799:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c96b799:  * (the "License"); you may not use this file ecept in compliance with
1:c96b799:  * the License.  You may obtain a copy of the License at
1:c96b799:  *
1:c96b799:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c96b799:  *
1:c96b799:  * Unless required by applicable law or agreed to in writing, 
1:c96b799:  * software distributed under the License is distributed on an 
1:c96b799:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:c96b799:  * either express or implied. See the License for the specific 
1:c96b799:  * language governing permissions and limitations under the License.
1:c96b799:  */
4:c96b799: 
1:c96b799: package org.apache.derbyTesting.functionTests.tests.lang;
1:c96b799: 
1:c96b799: import java.sql.CallableStatement;
1:c96b799: import java.sql.Connection;
1:1ae02c9: import java.sql.DriverManager;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:c96b799: import java.sql.SQLException;
1:c96b799: import java.sql.Statement;
1:c96b799: import junit.framework.Test;
1:c96b799: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c96b799: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:6a88161: import org.apache.derbyTesting.junit.TestConfiguration;
1:c96b799: 
1:c96b799: /**
1:c96b799:  * Test hold cursor after commit
1:c96b799:  */
1:c96b799: public class HoldCursorTest extends BaseJDBCTestCase {
1:c96b799: 	/**
1:c96b799:      * Public constructor required for running test as standalone JUnit.
1:c96b799:      */
1:c96b799: 	public HoldCursorTest(String name) {
1:c96b799: 		super(name);
3:c96b799: 	}
1:c96b799: 	/**
1:c96b799:      * Create a suite of tests.
1:c96b799:      */
1:6a88161:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("HoldCursorTest");
1:6a88161: 
1:6a88161:         suite.addTest(baseSuite(true));
1:6a88161:         suite.addTest(baseSuite(false));
1:6a88161: 
1:c96b799:         return suite;
1:c96b799:     }
1:c96b799: 
1:6a88161:     private static Test baseSuite(boolean embeddedMode) {
1:6a88161:         String name = "HoldCursorTest:" + (embeddedMode ? "embedded" : "client");
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:c96b799: 
1:c96b799:         // Add tests that every JVM jdk1.4 or above should be able to run.
1:c96b799:         suite.addTestSuite(HoldCursorTest.class);
1:6a88161: 
1:c96b799:         if (!JDBC.vmSupportsJSR169()) {
1:c96b799:              suite.addTest (new HoldCursorTest("StatementsInProcedureTest"));
1:6a88161:         }
1:c96b799: 
1:6a88161:         Test test = suite;
1:6a88161: 
1:6a88161:         if (!embeddedMode) {
1:6a88161:             test = TestConfiguration.clientServerDecorator(suite);
1:6a88161:         }
1:6a88161: 
1:6a88161:         return new CleanDatabaseTestSetup(test);
1:c96b799:     }
1:6a88161: 
1:c96b799:     /**
1:c96b799:      * Set the fixture up with tables and insert rows .
1:c96b799:      */
1:c96b799: 	protected void setUp() throws SQLException {
1:c96b799: 		getConnection().setAutoCommit(false);
1:c96b799: 		Statement stmt = createStatement();
1:c96b799: 		final int stringLength = 400;
1:c96b799: 	    stmt.executeUpdate("CREATE TABLE T1 (c11 int, c12 int, junk varchar(" +
1:c96b799: 	                       stringLength + "))");
1:c96b799: 	    PreparedStatement insertStmt = prepareStatement("INSERT INTO T1 VALUES(?,1,?)");
1:c96b799: 	    // We need to ensure that there is more data in the table than the
1:c96b799: 	    // client can fetch in one message (about 32K). Otherwise, the
1:c96b799: 	    // cursor might be closed on the server and we are not testing the
1:c96b799: 	    // same thing in embedded mode and client/server mode.
1:c96b799: 	    final int rows = 40000 / stringLength;
1:c96b799: 	    StringBuffer buff = new StringBuffer(stringLength);
1:c96b799: 	    for (int i = 0; i < stringLength; i++) {
1:c96b799: 	        buff.append(" ");
1:c96b799: 	    }
1:c96b799: 	    for (int i = 1; i <= rows; i++) {
1:c96b799: 	        insertStmt.setInt(1, i);
1:c96b799: 	        insertStmt.setString(2, buff.toString());
1:c96b799: 	        insertStmt.executeUpdate();
1:c96b799: 	    }
1:c96b799: 	    insertStmt.close();
1:c96b799: 	    stmt.executeUpdate( "CREATE TABLE T2 (c21 int, c22 int)" );
1:c96b799: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,1)");
1:c96b799: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,2)");
1:c96b799: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,3)");
1:c96b799: 	    stmt.execute("create table testtable1 (id integer, vc varchar(100))");
1:c96b799: 	    stmt.execute("insert into testtable1 values (11, 'testtable1-one'), (12, 'testtable1-two')");
1:c96b799: 	    stmt.execute("create table testtable2 (id integer, vc varchar(100))");
1:c96b799: 	    stmt.execute("insert into testtable2 values (21, 'testtable2-one'), (22, 'testtable2-two')");
1:c96b799: 	    stmt.execute("create procedure MYPROC() language java parameter style java external name " +
1:c96b799: 	    				"'org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testProc' result sets 2");
1:c96b799: 	    stmt.executeUpdate("Create table bug4385 (i int not null primary key, c int generated always as identity)");
1:c96b799: 	    stmt.close();
1:c96b799: 	    commit();		
1:c96b799: 	}
1:c96b799: 	/**
1:c96b799: 	 * Drop tables for clean up
1:c96b799: 	 */
1:c96b799: 	protected void tearDown() throws Exception {
1:c96b799: 		Statement stmt = createStatement();
1:c96b799: 		stmt.executeUpdate( "DROP PROCEDURE MYPROC" );
1:c96b799: 	    stmt.executeUpdate( "DROP TABLE T1" );
1:c96b799: 	    stmt.executeUpdate( "DROP TABLE T2" );
1:c96b799: 	    stmt.executeUpdate( "DROP TABLE testtable1" );
1:c96b799: 	    stmt.executeUpdate( "DROP TABLE testtable2" );
1:c96b799: 	    stmt.executeUpdate( "DROP TABLE BUG4385" );
1:c96b799: 	    stmt.close();
1:c96b799: 	    stmt.close();
1:c96b799: 		commit();
1:c96b799: 		super.tearDown();
1:c96b799: 	}
1:c96b799: 	/**
1:c96b799: 	 * test cursor holdability after commit on multi table query
1:c96b799: 	 * @throws Exception
1:c96b799: 	 */
1:c96b799: 	 public void testHoldCursorOnMultiTableQuery() throws Exception
1:c96b799: 	  {
1:c96b799: 	    ResultSet	rs;
1:c96b799: 	    Statement s = createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT );
1:c96b799: 
1:c96b799: 	    //open a cursor with multiple rows resultset
1:c96b799: 	    rs = s.executeQuery("select t1.c11, t2.c22 from t1, t2 where t1.c11=t2.c21");
1:c96b799: 	    rs.next();
1:c96b799: 	    assertEquals("1", rs.getString(2));
1:c96b799: 	    commit();
1:c96b799: 	    rs.next(); //because holdability is true, should be able to navigate the cursor after commit
1:c96b799: 	    assertEquals("2", rs.getString(2));
1:c96b799: 	    rs.close();
1:c96b799: 	 }
1:c96b799: 	 /**
1:c96b799: 	  * Test Chaging isolation levels with and without held curosors
1:c96b799: 	  * @throws Exception
1:c96b799: 	  */
1:c96b799: 	 public void testIsolationLevelChange() throws Exception
1:c96b799: 	  {
1:c96b799: 	     ResultSet	rs;
1:c96b799: 	    //set current isolation to read committed
1:c96b799: 	    setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
1:c96b799: 	    Statement s = createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,ResultSet.HOLD_CURSORS_OVER_COMMIT );
1:c96b799: 	    //open a cursor with multiple rows resultset
1:c96b799: 	    rs = s.executeQuery("select * from t1");
1:c96b799: 	    rs.next();
1:c96b799: 
1:c96b799: 	    //Changing to different isolation from the current isolation for connection
1:c96b799: 	    //will give an exception because there are held cursors
1:c96b799: 		assertIsolationError("X0X03",Connection.TRANSACTION_SERIALIZABLE);
1:c96b799: 
1:c96b799: 	    //Close open cursors and then try changing to different isolation.
1:c96b799: 	    //It should work.
1:c96b799: 	    rs.close();
1:c96b799: 	    setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:c96b799: 
1:c96b799: 		// set the default holdability for the Connection and try setting the isolation level
1:c96b799: 		setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 		setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
1:c96b799: 		createStatement().executeUpdate("SET ISOLATION RS");
1:c96b799: 
1:c96b799: 			// test for bug4385 - internal ResultSets were being re-used incorrectly
1:c96b799: 			// will occur in with JDBC 2.0,1.2 but the first statement I found that
1:c96b799: 			// failed was an insert with generated keys.
1:c96b799: 			
1:c96b799: 		PreparedStatement ps = prepareStatement("insert into bug4385(i) values(?)", Statement.RETURN_GENERATED_KEYS);
1:c96b799: 		ps.setInt(1, 199);
1:c96b799: 		ps.executeUpdate();
1:c96b799: 		assertGetIntEquals(1,1,ps.getGeneratedKeys());
1:c96b799: 		rs.close();
1:c96b799: 		
1:c96b799: 		ps.setInt(1, 299);
1:c96b799: 		ps.executeUpdate();
1:c96b799: 		assertGetIntEquals(1,2,ps.getGeneratedKeys());
1:c96b799: 		rs.close();
1:c96b799: 		ps.close();
1:c96b799: 		rollback();
1:c96b799: 
1:c96b799: 	    //switch back to default isolation & holdability
1:c96b799: 		setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:c96b799: 		setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
1:c96b799: 	 }
1:c96b799: 	 /**
1:c96b799: 	     * Test that drop table cannot be performed when there is an open
1:c96b799: 	     * cursor on that table.
1:c96b799: 	     *
1:c96b799: 	     * @exception SQLException 
1:c96b799: 	     */
1:c96b799: 	    public void testDropTable() throws SQLException {
1:c96b799: 	        setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 	        final String dropTable = "DROP TABLE T1";
1:c96b799: 	        Statement stmt1 = createStatement();
1:c96b799: 	        Statement stmt2 = createStatement();
1:c96b799: 	        ResultSet rs = stmt1.executeQuery("SELECT * FROM T1");
1:c96b799: 	        rs.next();
1:c96b799: 	        assertStatementError("X0X95", stmt2,dropTable);
1:c96b799: 	        
1:c96b799: 	        //	dropping t1 should fail because there is an open cursor on t1
1:c96b799: 	        assertStatementError("X0X95", stmt2,dropTable);
1:c96b799: 	        commit();
1:c96b799: 	        
1:c96b799: 	        // cursors are held over commit, so dropping should still fail
1:c96b799: 	        assertStatementError("X0X95", stmt2,dropTable);
1:c96b799: 	        rs.close();
1:c96b799: 
1:c96b799: 	        // cursor is closed, so this one should succeed
1:c96b799: 	        stmt2.executeUpdate(dropTable);
1:c96b799: 	        stmt1.close();
1:c96b799: 	        stmt2.close();
1:c96b799: 	        rollback();
1:c96b799: 	    }
1:c96b799: 	    /**
1:c96b799: 	     * set connection holdability and test holdability of statements inside and outside procedures
1:c96b799: 		 * test that holdability of statements always overrides holdability of connection
1:c96b799: 	     * @throws SQLException
1:c96b799: 	     */
1:c96b799: 		public void testHoldabilityOverCommit() throws SQLException{
1:c96b799: 				testStatements(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 				testStatements(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:c96b799: 		}
1:c96b799: 		
1:c96b799: 		public void StatementsInProcedureTest()throws SQLException{
1:c96b799: 			StatementsInProcedure(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 			StatementsInProcedure(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:c96b799: 		}
1:c96b799: 		
1:c96b799: 		/**
1:c96b799: 		 * test holdability of statements outside procedures
1:c96b799: 		 * @param holdability
1:c96b799: 		 * @throws SQLException
1:c96b799: 		 */
1:c96b799: 		public void testStatements(int holdability) throws SQLException{
1:c96b799: 			setHoldability(holdability);
1:c96b799: 			//HOLD_CURSORS_OVER_COMMIT
1:c96b799: 			Statement st1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1:c96b799: 						ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 			ResultSet rs1 = st1.executeQuery("select * from testtable1");
1:c96b799: 			rs1.next();
1:c96b799: 			assertEquals(11,rs1.getInt(1));
1:c96b799: 			
1:c96b799: 			commit();
1:c96b799: 			rs1.next();
1:c96b799: 			assertEquals(12,rs1.getInt(1));
1:c96b799: 			st1.close();
1:c96b799: 			
1:c96b799: 			//CLOSE_CURSORS_AT_COMMIT
1:c96b799: 			Statement st2 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1:c96b799: 						ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:c96b799: 			ResultSet rs2 = st2.executeQuery("select * from testtable2");
1:c96b799: 			rs2.next();
1:c96b799: 			assertEquals(21,rs2.getInt(1));
1:c96b799: 			commit();
1:c96b799: 			assertNextError("XCL16",rs2);
1:c96b799: 			st2.close();
1:c96b799: 			rs1.close();
1:c96b799: 			rs2.close();
1:c96b799: 		 }
1:c96b799: 		
1:c96b799: 		/**
1:c96b799: 		 * test holdability of statements in procedures
1:c96b799: 		 * @param holdability
1:c96b799: 		 * @throws SQLException
1:c96b799: 		 */
1:c96b799: 		public void StatementsInProcedure(int holdability) throws SQLException{
1:c96b799: 			setHoldability(holdability);
1:c96b799: 			CallableStatement cs1 = prepareCall("call MYPROC()");
1:c96b799: 			cs1.execute();
1:c96b799: 			ResultSet rs2 = cs1.getResultSet();
1:c96b799: 			rs2.next();
1:c96b799: 			assertEquals(11,rs2.getInt(1));
1:c96b799: 			rs2.next();
1:c96b799: 			assertEquals(12,rs2.getInt(1));
1:c96b799: 			
1:c96b799: 			CallableStatement cs2 = prepareCall("call MYPROC()");
1:c96b799: 			cs2.execute();
1:c96b799: 			commit();
1:c96b799: 			ResultSet rs1 = cs2.getResultSet();
1:c96b799: 			rs1.next();
1:c96b799: 			assertEquals(11,rs1.getInt(1));
1:c96b799: 			if(rs1.next())
1:c96b799: 				assertEquals(12,rs1.getInt(1));
1:c96b799: 			else
1:c96b799: 				assertNull(rs1);
1:c96b799: 			cs1.close();
1:c96b799: 			cs2.close();
1:c96b799: 			rs1.close();
1:c96b799: 			rs2.close();
1:c96b799: 		}
1:c96b799: 		/**
1:c96b799: 		 * Test for drop table after closing the cursor
1:c96b799: 		 * @throws SQLException
1:c96b799: 		 */
1:c96b799: 		public void testCloseCursor()throws SQLException
1:c96b799: 	{
1:c96b799: 		// Run this test on one large table (T1) where the network
1:c96b799: 		// server won't close the cursor implicitly, and on one small
1:c96b799: 		// table (T2) where the network server will close the cursor
1:c96b799: 		// implicitly.
1:c96b799: 		final String[] tables = { "T1", "T2" };
1:c96b799: 		Statement stmt1 = createStatement();
1:c96b799: 		Statement stmt2 = createStatement();
1:c96b799: 		for (int i = 0; i < tables.length; i++) {
1:c96b799: 			String table = tables[i];
1:c96b799: 			ResultSet rs = stmt1.executeQuery("SELECT * FROM " + table);
1:c96b799: 			rs.next();
1:c96b799: 			rs.close();
1:c96b799: 			// Cursor is closed, so this should succeed. If the cursor
1:c96b799: 			// is open, it will fail because a table cannot be
1:c96b799: 			// dropped when there are open cursors depending on it.
1:c96b799: 			stmt2.executeUpdate("DROP TABLE " + table);
1:c96b799: 		}
1:c96b799: 		stmt1.close();
1:c96b799: 		stmt2.close();
1:c96b799: 		rollback();
1:c96b799: 	}
1:c96b799: 	/**
1:c96b799: 	  * Assert that the changing isolation throws
1:c96b799: 	  * an SQLException with the expected state.
1:c96b799: 	  * @param sqlState
1:c96b799: 	  * @param level
1:c96b799: 	  */
1:c96b799: 	    public void assertIsolationError(String sqlState, int level) {
1:c96b799: 
1:c96b799: 	        try {
1:c96b799: 	        	getConnection().setTransactionIsolation(level);
1:c96b799: 	            fail("expected compile error: " + sqlState);
1:c96b799: 	        } catch (SQLException se) {
1:c96b799: 	            assertSQLState(sqlState, se);
1:c96b799: 	        }
1:c96b799: 	    }
1:c96b799: 	    /**
1:c96b799: 	     * Utility method to create a Statement using the connection
1:c96b799: 	     * returned by getConnection.
1:c96b799: 	     * @param resultSetType
1:c96b799: 	     * @param resultSetConcurrency
1:c96b799: 	     * @param resultSetHoldability
1:87f528d: 	     * @return Statement with desired holdability set
1:c96b799: 	     * @throws SQLException
1:c96b799: 	     */
1:c96b799: 	    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
1:c96b799: 	    {
1:c96b799: 	        return getConnection().createStatement(resultSetType, resultSetConcurrency,resultSetHoldability);
1:c96b799: 	    }
1:c96b799: 	    /**
1:c96b799: 	     * Utility method to set Transaction Isolation
1:c96b799: 	     * @param level
1:c96b799: 	     * @throws SQLException
1:c96b799: 	     */
1:c96b799: 	    public void setTransactionIsolation(int level) throws SQLException
1:c96b799: 	    {
1:c96b799: 	    	getConnection().setTransactionIsolation(level);
1:c96b799: 	    }
1:c96b799: 	    /**
1:c96b799: 	     * Utility method to set Holdability
1:c96b799: 	     * @param holdability
1:c96b799: 	     * @throws SQLException
1:c96b799: 	     */
1:c96b799: 	    public void setHoldability(int holdability) throws SQLException
1:c96b799: 	    {
1:c96b799: 	    	getConnection().setHoldability(holdability);
1:c96b799: 	    }
1:c96b799: 	    /**
1:c96b799: 	     * Perform getInt(position) with expected error
1:c96b799: 	     * @param position
1:c96b799: 	     * @param expected
1:c96b799: 	     * @param rs
1:c96b799: 	     */
1:c96b799: 	    public static void assertGetIntEquals(int position,int expected,ResultSet rs)
1:c96b799: 	    {
1:c96b799: 	    	try{
1:c96b799: 	    	while(rs.next()){
1:c96b799: 	    	if(expected==rs.getInt(position))
1:c96b799: 	    		return;
1:c96b799: 	    	else 
1:c96b799: 	    		fail("Wrong value returned: "+ rs.getInt(position));
1:c96b799: 	    	}
1:c96b799: 	    }catch(SQLException se){
1:c96b799: 	    	se.printStackTrace();
1:c96b799: 	    		
1:c96b799: 	    	}
1:c96b799: 	    	
1:c96b799: 	    }
1:c96b799: 	     /**
1:c96b799: 	     * Java method for stored procedure
1:c96b799: 	     * @param rs1
1:c96b799: 	     * @param rs2
1:c96b799: 	     * @throws Exception
1:c96b799: 	     */
1:c96b799: 	    public static void testProc(ResultSet[] rs1, ResultSet[] rs2) throws Exception
1:c96b799: 		{
1:c96b799: 			Connection conn = DriverManager.getConnection("jdbc:default:connection");
1:c96b799: 
1:c96b799: 			//HOLD_CURSORS_OVER_COMMIT
1:c96b799: 			Statement st1 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1:c96b799: 						ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:c96b799: 			rs1[0] = st1.executeQuery("select * from testtable1");
1:c96b799: 
1:c96b799: 			//CLOSE_CURSORS_AT_COMMIT
1:c96b799: 			Statement st2 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1:c96b799: 						ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:c96b799: 			rs2[0] = st2.executeQuery("select * from testtable2");
1:c96b799: 
1:c96b799: 		}
1:c96b799: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("HoldCursorTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6a88161
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite() {
1: 
1:         suite.addTest(baseSuite(true));
1:         suite.addTest(baseSuite(false));
1: 
1:     private static Test baseSuite(boolean embeddedMode) {
1:         String name = "HoldCursorTest:" + (embeddedMode ? "embedded" : "client");
1: 
1:         }
1:         Test test = suite;
1: 
1:         if (!embeddedMode) {
1:             test = TestConfiguration.clientServerDecorator(suite);
1:         }
1: 
1:         return new CleanDatabaseTestSetup(test);
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:87f528d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	     * @return Statement with desired holdability set
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c96b799
/////////////////////////////////////////////////////////////////////////
1: /* Derby - Class org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file ecept in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.PreparedStatement;
1: import java.sql.CallableStatement;
0: import java.sql.ResultSet;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.DriverManager;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Test hold cursor after commit
1:  */
1: public class HoldCursorTest extends BaseJDBCTestCase {
1: 	/**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1: 	public HoldCursorTest(String name) {
1: 		super(name);
1: 	}
1: 	/**
1:      * Create a suite of tests.
1:      */
1: 	
1: 	
0: 	  public static Test suite() {
0: 		  if ( !JDBC.vmSupportsJDBC3())
0: 	            return new TestSuite("empty HoldCursorTest - supported only from JDBC3.0 and above");
0: 	        else{
0:         TestSuite suite = new TestSuite("HoldCursorTest");
0:         suite.addTest(baseSuite("HoldCursorTest:embedded"));
0:         suite.addTest(baseSuite("HoldCursorTest:client"));
1:         return suite;
1: 	        }
1:     }
0:     private static Test baseSuite(String name) {
1: 
0:         TestSuite suite = new TestSuite(name);
1: 
1:         // Add tests that every JVM jdk1.4 or above should be able to run.
1:         suite.addTestSuite(HoldCursorTest.class);
1:         if (!JDBC.vmSupportsJSR169()) {
1:              suite.addTest (new HoldCursorTest("StatementsInProcedureTest"));
1: 
1:            }
0:         return new CleanDatabaseTestSetup(suite); 
1:     }
1:     /**
1:      * Set the fixture up with tables and insert rows .
1:      */
1: 	protected void setUp() throws SQLException {
1: 		getConnection().setAutoCommit(false);
1: 		Statement stmt = createStatement();
1: 		final int stringLength = 400;
1: 	    stmt.executeUpdate("CREATE TABLE T1 (c11 int, c12 int, junk varchar(" +
1: 	                       stringLength + "))");
1: 	    PreparedStatement insertStmt = prepareStatement("INSERT INTO T1 VALUES(?,1,?)");
1: 	    // We need to ensure that there is more data in the table than the
1: 	    // client can fetch in one message (about 32K). Otherwise, the
1: 	    // cursor might be closed on the server and we are not testing the
1: 	    // same thing in embedded mode and client/server mode.
1: 	    final int rows = 40000 / stringLength;
1: 	    StringBuffer buff = new StringBuffer(stringLength);
1: 	    for (int i = 0; i < stringLength; i++) {
1: 	        buff.append(" ");
1: 	    }
1: 	    for (int i = 1; i <= rows; i++) {
1: 	        insertStmt.setInt(1, i);
1: 	        insertStmt.setString(2, buff.toString());
1: 	        insertStmt.executeUpdate();
1: 	    }
1: 	    insertStmt.close();
1: 	    stmt.executeUpdate( "CREATE TABLE T2 (c21 int, c22 int)" );
1: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,1)");
1: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,2)");
1: 	    stmt.executeUpdate("INSERT INTO T2 VALUES(1,3)");
1: 	    stmt.execute("create table testtable1 (id integer, vc varchar(100))");
1: 	    stmt.execute("insert into testtable1 values (11, 'testtable1-one'), (12, 'testtable1-two')");
1: 	    stmt.execute("create table testtable2 (id integer, vc varchar(100))");
1: 	    stmt.execute("insert into testtable2 values (21, 'testtable2-one'), (22, 'testtable2-two')");
1: 	    stmt.execute("create procedure MYPROC() language java parameter style java external name " +
1: 	    				"'org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testProc' result sets 2");
1: 	    stmt.executeUpdate("Create table bug4385 (i int not null primary key, c int generated always as identity)");
1: 	    stmt.close();
1: 	    commit();		
1: 	}
1: 	/**
1: 	 * Drop tables for clean up
1: 	 */
1: 	protected void tearDown() throws Exception {
1: 		Statement stmt = createStatement();
1: 		stmt.executeUpdate( "DROP PROCEDURE MYPROC" );
1: 	    stmt.executeUpdate( "DROP TABLE T1" );
1: 	    stmt.executeUpdate( "DROP TABLE T2" );
1: 	    stmt.executeUpdate( "DROP TABLE testtable1" );
1: 	    stmt.executeUpdate( "DROP TABLE testtable2" );
1: 	    stmt.executeUpdate( "DROP TABLE BUG4385" );
1: 	    stmt.close();
1: 	    stmt.close();
1: 		commit();
1: 		super.tearDown();
1: 	}
1: 	/**
1: 	 * test cursor holdability after commit on multi table query
1: 	 * @throws Exception
1: 	 */
1: 	 public void testHoldCursorOnMultiTableQuery() throws Exception
1: 	  {
1: 	    ResultSet	rs;
1: 	    Statement s = createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT );
1: 
1: 	    //open a cursor with multiple rows resultset
1: 	    rs = s.executeQuery("select t1.c11, t2.c22 from t1, t2 where t1.c11=t2.c21");
1: 	    rs.next();
1: 	    assertEquals("1", rs.getString(2));
1: 	    commit();
1: 	    rs.next(); //because holdability is true, should be able to navigate the cursor after commit
1: 	    assertEquals("2", rs.getString(2));
1: 	    rs.close();
1: 	 }
1: 	 /**
1: 	  * Test Chaging isolation levels with and without held curosors
1: 	  * @throws Exception
1: 	  */
1: 	 public void testIsolationLevelChange() throws Exception
1: 	  {
1: 	     ResultSet	rs;
1: 	    //set current isolation to read committed
1: 	    setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
1: 	    Statement s = createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,ResultSet.HOLD_CURSORS_OVER_COMMIT );
1: 	    //open a cursor with multiple rows resultset
1: 	    rs = s.executeQuery("select * from t1");
1: 	    rs.next();
1: 
1: 	    //Changing to different isolation from the current isolation for connection
1: 	    //will give an exception because there are held cursors
1: 		assertIsolationError("X0X03",Connection.TRANSACTION_SERIALIZABLE);
1: 
1: 	    //Close open cursors and then try changing to different isolation.
1: 	    //It should work.
1: 	    rs.close();
1: 	    setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1: 
1: 		// set the default holdability for the Connection and try setting the isolation level
1: 		setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 		setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 		createStatement().executeUpdate("SET ISOLATION RS");
1: 
1: 			// test for bug4385 - internal ResultSets were being re-used incorrectly
1: 			// will occur in with JDBC 2.0,1.2 but the first statement I found that
1: 			// failed was an insert with generated keys.
1: 			
1: 		PreparedStatement ps = prepareStatement("insert into bug4385(i) values(?)", Statement.RETURN_GENERATED_KEYS);
1: 		ps.setInt(1, 199);
1: 		ps.executeUpdate();
1: 		assertGetIntEquals(1,1,ps.getGeneratedKeys());
1: 		rs.close();
1: 		
1: 		ps.setInt(1, 299);
1: 		ps.executeUpdate();
1: 		assertGetIntEquals(1,2,ps.getGeneratedKeys());
1: 		rs.close();
1: 		ps.close();
1: 		rollback();
1: 
1: 	    //switch back to default isolation & holdability
1: 		setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 		setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
1: 	 }
1: 	 /**
1: 	     * Test that drop table cannot be performed when there is an open
1: 	     * cursor on that table.
1: 	     *
1: 	     * @exception SQLException 
1: 	     */
1: 	    public void testDropTable() throws SQLException {
1: 	        setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 	        final String dropTable = "DROP TABLE T1";
1: 	        Statement stmt1 = createStatement();
1: 	        Statement stmt2 = createStatement();
1: 	        ResultSet rs = stmt1.executeQuery("SELECT * FROM T1");
1: 	        rs.next();
1: 	        assertStatementError("X0X95", stmt2,dropTable);
1: 	        
1: 	        //	dropping t1 should fail because there is an open cursor on t1
1: 	        assertStatementError("X0X95", stmt2,dropTable);
1: 	        commit();
1: 	        
1: 	        // cursors are held over commit, so dropping should still fail
1: 	        assertStatementError("X0X95", stmt2,dropTable);
1: 	        rs.close();
1: 
1: 	        // cursor is closed, so this one should succeed
1: 	        stmt2.executeUpdate(dropTable);
1: 	        stmt1.close();
1: 	        stmt2.close();
1: 	        rollback();
1: 	    }
1: 	    /**
1: 	     * set connection holdability and test holdability of statements inside and outside procedures
1: 		 * test that holdability of statements always overrides holdability of connection
1: 	     * @throws SQLException
1: 	     */
1: 		public void testHoldabilityOverCommit() throws SQLException{
1: 				testStatements(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 				testStatements(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 		}
1: 		
1: 		public void StatementsInProcedureTest()throws SQLException{
1: 			StatementsInProcedure(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 			StatementsInProcedure(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 		}
1: 		
1: 		/**
1: 		 * test holdability of statements outside procedures
1: 		 * @param holdability
1: 		 * @throws SQLException
1: 		 */
1: 		public void testStatements(int holdability) throws SQLException{
1: 			setHoldability(holdability);
1: 			//HOLD_CURSORS_OVER_COMMIT
1: 			Statement st1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1: 						ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 			ResultSet rs1 = st1.executeQuery("select * from testtable1");
1: 			rs1.next();
1: 			assertEquals(11,rs1.getInt(1));
1: 			
1: 			commit();
1: 			rs1.next();
1: 			assertEquals(12,rs1.getInt(1));
1: 			st1.close();
1: 			
1: 			//CLOSE_CURSORS_AT_COMMIT
1: 			Statement st2 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1: 						ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 			ResultSet rs2 = st2.executeQuery("select * from testtable2");
1: 			rs2.next();
1: 			assertEquals(21,rs2.getInt(1));
1: 			commit();
1: 			assertNextError("XCL16",rs2);
1: 			st2.close();
1: 			rs1.close();
1: 			rs2.close();
1: 		 }
1: 		
1: 		/**
1: 		 * test holdability of statements in procedures
1: 		 * @param holdability
1: 		 * @throws SQLException
1: 		 */
1: 		public void StatementsInProcedure(int holdability) throws SQLException{
1: 			setHoldability(holdability);
1: 			CallableStatement cs1 = prepareCall("call MYPROC()");
1: 			cs1.execute();
1: 			ResultSet rs2 = cs1.getResultSet();
1: 			rs2.next();
1: 			assertEquals(11,rs2.getInt(1));
1: 			rs2.next();
1: 			assertEquals(12,rs2.getInt(1));
1: 			
1: 			CallableStatement cs2 = prepareCall("call MYPROC()");
1: 			cs2.execute();
1: 			commit();
1: 			ResultSet rs1 = cs2.getResultSet();
1: 			rs1.next();
1: 			assertEquals(11,rs1.getInt(1));
1: 			if(rs1.next())
1: 				assertEquals(12,rs1.getInt(1));
1: 			else
1: 				assertNull(rs1);
1: 			cs1.close();
1: 			cs2.close();
1: 			rs1.close();
1: 			rs2.close();
1: 		}
1: 		/**
1: 		 * Test for drop table after closing the cursor
1: 		 * @throws SQLException
1: 		 */
1: 		public void testCloseCursor()throws SQLException
1: 	{
1: 		// Run this test on one large table (T1) where the network
1: 		// server won't close the cursor implicitly, and on one small
1: 		// table (T2) where the network server will close the cursor
1: 		// implicitly.
1: 		final String[] tables = { "T1", "T2" };
1: 		Statement stmt1 = createStatement();
1: 		Statement stmt2 = createStatement();
1: 		for (int i = 0; i < tables.length; i++) {
1: 			String table = tables[i];
1: 			ResultSet rs = stmt1.executeQuery("SELECT * FROM " + table);
1: 			rs.next();
1: 			rs.close();
1: 			// Cursor is closed, so this should succeed. If the cursor
1: 			// is open, it will fail because a table cannot be
1: 			// dropped when there are open cursors depending on it.
1: 			stmt2.executeUpdate("DROP TABLE " + table);
1: 		}
1: 		stmt1.close();
1: 		stmt2.close();
1: 		rollback();
1: 	}
1: 	/**
1: 	  * Assert that the changing isolation throws
1: 	  * an SQLException with the expected state.
1: 	  * @param sqlState
1: 	  * @param level
1: 	  */
1: 	    public void assertIsolationError(String sqlState, int level) {
1: 
1: 	        try {
1: 	        	getConnection().setTransactionIsolation(level);
1: 	            fail("expected compile error: " + sqlState);
1: 	        } catch (SQLException se) {
1: 	            assertSQLState(sqlState, se);
1: 	        }
1: 	    }
1: 	    /**
1: 	     * Utility method to create a Statement using the connection
1: 	     * returned by getConnection.
1: 	     * @param resultSetType
1: 	     * @param resultSetConcurrency
1: 	     * @param resultSetHoldability
0: 	     * @return
1: 	     * @throws SQLException
1: 	     */
1: 	    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
1: 	    {
1: 	        return getConnection().createStatement(resultSetType, resultSetConcurrency,resultSetHoldability);
1: 	    }
1: 	    /**
1: 	     * Utility method to set Transaction Isolation
1: 	     * @param level
1: 	     * @throws SQLException
1: 	     */
1: 	    public void setTransactionIsolation(int level) throws SQLException
1: 	    {
1: 	    	getConnection().setTransactionIsolation(level);
1: 	    }
1: 	    /**
1: 	     * Utility method to set Holdability
1: 	     * @param holdability
1: 	     * @throws SQLException
1: 	     */
1: 	    public void setHoldability(int holdability) throws SQLException
1: 	    {
1: 	    	getConnection().setHoldability(holdability);
1: 	    }
1: 	    /**
1: 	     * Perform getInt(position) with expected error
1: 	     * @param position
1: 	     * @param expected
1: 	     * @param rs
1: 	     */
1: 	    public static void assertGetIntEquals(int position,int expected,ResultSet rs)
1: 	    {
1: 	    	try{
1: 	    	while(rs.next()){
1: 	    	if(expected==rs.getInt(position))
1: 	    		return;
1: 	    	else 
1: 	    		fail("Wrong value returned: "+ rs.getInt(position));
1: 	    	}
1: 	    }catch(SQLException se){
1: 	    	se.printStackTrace();
1: 	    		
1: 	    	}
1: 	    	
1: 	    }
1: 	     /**
1: 	     * Java method for stored procedure
1: 	     * @param rs1
1: 	     * @param rs2
1: 	     * @throws Exception
1: 	     */
1: 	    public static void testProc(ResultSet[] rs1, ResultSet[] rs2) throws Exception
1: 		{
1: 			Connection conn = DriverManager.getConnection("jdbc:default:connection");
1: 
1: 			//HOLD_CURSORS_OVER_COMMIT
1: 			Statement st1 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1: 						ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 			rs1[0] = st1.executeQuery("select * from testtable1");
1: 
1: 			//CLOSE_CURSORS_AT_COMMIT
1: 			Statement st2 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ,
1: 						ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 			rs2[0] = st2.executeQuery("select * from testtable2");
1: 
1: 		}
1: }
============================================================================