1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.ReaderToAscii
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.Reader;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	ReaderToAscii converts Reader (with characters) to a stream of ASCII characters.
1:eac0369: */
1:eac0369: public final class ReaderToAscii extends InputStream
1:eac0369: {
1:eac0369: 
1:eac0369: 	private final Reader data;
1:eac0369: 	private char[]	conv;
1:eac0369: 	private boolean closed;
1:eac0369: 
1:eac0369: 	public ReaderToAscii(Reader data) 
1:eac0369: 	{
1:eac0369: 		this.data = data;
1:eac0369: 		if (!(data instanceof UTF8Reader))
1:eac0369: 			conv = new char[256];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int read() throws IOException
1:eac0369: 	{
1:eac0369: 		if (closed)
1:eac0369: 			throw new IOException();
1:eac0369: 
1:eac0369: 		int c = data.read();
1:eac0369: 		if (c == -1)
1:eac0369: 			return -1;
1:eac0369: 
1:eac0369: 		if (c <= 255)
1:eac0369: 			return c & 0xFF;
1:eac0369: 		else
1:eac0369: 			return '?'; // Question mark - out of range character.
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int read(byte[] buf, int off, int len) throws IOException
1:eac0369: 	{
1:eac0369: 		if (closed)
1:eac0369: 			throw new IOException();
1:eac0369: 
1:eac0369: 		if (data instanceof UTF8Reader) {
1:eac0369: 
1:eac0369: 			return ((UTF8Reader) data).readAsciiInto(buf, off, len);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (len > conv.length)
1:eac0369: 			len = conv.length;
1:eac0369: 
1:eac0369: 		len = data.read(conv, 0, len);
1:eac0369: 		if (len == -1)
1:eac0369: 			return -1;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < len; i++) {
1:eac0369: 			char c = conv[i];
1:eac0369: 
1:eac0369: 			byte cb;
1:eac0369: 			if (c <= 255)
1:eac0369: 				cb = (byte) c;
1:eac0369: 			else
1:eac0369: 				cb = (byte) '?'; // Question mark - out of range character.
1:eac0369: 				
1:eac0369: 			buf[off++] = cb;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return len;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long skip(long len) throws IOException {
1:eac0369: 		if (closed)
1:eac0369: 			throw new IOException();
1:eac0369: 
1:eac0369: 		return data.skip(len);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void close() throws IOException
1:eac0369: 	{
1:eac0369: 		if (!closed) {
1:eac0369: 			closed = true;
1:eac0369: 			data.close();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:49912a9
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.ReaderToAscii
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.io.IOException;
0: import java.sql.SQLException;
1: 
1: /**
1: 	ReaderToAscii converts Reader (with characters) to a stream of ASCII characters.
1: */
1: public final class ReaderToAscii extends InputStream
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	private final Reader data;
1: 	private char[]	conv;
1: 	private boolean closed;
1: 
1: 	public ReaderToAscii(Reader data) 
1: 	{
1: 		this.data = data;
1: 		if (!(data instanceof UTF8Reader))
1: 			conv = new char[256];
1: 	}
1: 
1: 	public int read() throws IOException
1: 	{
1: 		if (closed)
1: 			throw new IOException();
1: 
1: 		int c = data.read();
1: 		if (c == -1)
1: 			return -1;
1: 
1: 		if (c <= 255)
1: 			return c & 0xFF;
1: 		else
1: 			return '?'; // Question mark - out of range character.
1: 	}
1: 
1: 	public int read(byte[] buf, int off, int len) throws IOException
1: 	{
1: 		if (closed)
1: 			throw new IOException();
1: 
1: 		if (data instanceof UTF8Reader) {
1: 
1: 			return ((UTF8Reader) data).readAsciiInto(buf, off, len);
1: 		}
1: 
1: 		if (len > conv.length)
1: 			len = conv.length;
1: 
1: 		len = data.read(conv, 0, len);
1: 		if (len == -1)
1: 			return -1;
1: 
1: 		for (int i = 0; i < len; i++) {
1: 			char c = conv[i];
1: 
1: 			byte cb;
1: 			if (c <= 255)
1: 				cb = (byte) c;
1: 			else
1: 				cb = (byte) '?'; // Question mark - out of range character.
1: 				
1: 			buf[off++] = cb;
1: 		}
1: 
1: 		return len;
1: 	}
1: 
1: 	public long skip(long len) throws IOException {
1: 		if (closed)
1: 			throw new IOException();
1: 
1: 		return data.skip(len);
1: 	}
1: 
1: 	public void close() throws IOException
1: 	{
1: 		if (!closed) {
1: 			closed = true;
1: 			data.close();
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import java.io.InputStream;
0: import java.io.Reader;
0: import java.io.IOException;
0: import java.sql.SQLException;
0: 
0: /**
0: 	ReaderToAscii converts Reader (with characters) to a stream of ASCII characters.
0: */
0: public final class ReaderToAscii extends InputStream
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	private final Reader data;
0: 	private char[]	conv;
0: 	private boolean closed;
0: 
0: 	public ReaderToAscii(Reader data) 
0: 	{
0: 		this.data = data;
0: 		if (!(data instanceof UTF8Reader))
0: 			conv = new char[256];
0: 	}
0: 
0: 	public int read() throws IOException
0: 	{
0: 		if (closed)
0: 			throw new IOException();
0: 
0: 		int c = data.read();
0: 		if (c == -1)
0: 			return -1;
0: 
0: 		if (c <= 255)
0: 			return c & 0xFF;
0: 		else
0: 			return '?'; // Question mark - out of range character.
0: 	}
0: 
0: 	public int read(byte[] buf, int off, int len) throws IOException
0: 	{
0: 		if (closed)
0: 			throw new IOException();
0: 
0: 		if (data instanceof UTF8Reader) {
0: 
0: 			return ((UTF8Reader) data).readAsciiInto(buf, off, len);
0: 		}
0: 
0: 		if (len > conv.length)
0: 			len = conv.length;
0: 
0: 		len = data.read(conv, 0, len);
0: 		if (len == -1)
0: 			return -1;
0: 
0: 		for (int i = 0; i < len; i++) {
0: 			char c = conv[i];
0: 
0: 			byte cb;
0: 			if (c <= 255)
0: 				cb = (byte) c;
0: 			else
0: 				cb = (byte) '?'; // Question mark - out of range character.
0: 				
0: 			buf[off++] = cb;
0: 		}
0: 
0: 		return len;
0: 	}
0: 
0: 	public long skip(long len) throws IOException {
0: 		if (closed)
0: 			throw new IOException();
0: 
0: 		return data.skip(len);
0: 	}
0: 
0: 	public void close() throws IOException
0: 	{
0: 		if (!closed) {
0: 			closed = true;
0: 			data.close();
0: 		}
0: 	}
0: }
============================================================================