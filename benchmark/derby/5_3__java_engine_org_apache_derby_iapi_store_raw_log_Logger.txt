1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.log.Logger
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw.log;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: public interface Logger {
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Log the loggable operation under the context of the transaction and then
1:eac0369: 		apply the operation to the RawStore.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		Before you call this method, make sure that the Loggable's doMe
1:eac0369: 		method will succeed.  This method will go ahead and send the log record
1:eac0369: 		to disk, and once it does that, then doMe cannot fail or the system
1:eac0369: 		will be shut down and recovery may fail.  So it is <B> very important 
1:eac0369: 		</B> to make sure that every resource you need for the loggable's doMe
1:eac0369: 		method, such as disk space, has be acquired or accounted for before
1:eac0369: 		calling logAndDo.
1:eac0369: 
1:eac0369: 		@param xact		the transaction that is affecting the change
1:eac0369: 		@param operation	the loggable operation that describes the change
1:eac0369: 		@return LogInstant that is the LogInstant of the loggable operation 
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	   */ 
1:eac0369: 	public LogInstant logAndDo(RawTransaction xact, Loggable operation)
1:eac0369: 		 throws StandardException; 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Log the compensation operation under the context of the transaction 
1:eac0369:         and then apply the undo to the RawStore.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		Before you call this method, make sure that the Compensation's doMe
1:eac0369: 		method will succeed.  This method will go ahead and send the log record
1:eac0369: 		to disk, and once it does that, then doMe cannot fail or the system
1:eac0369: 		will be shut down and recovery may fail.  So it is <B> very important 
1:eac0369: 		</B> to make sure that every resource you need for the Compensation's 
1:eac0369:         doMe method, such as disk space, has be acquired or accounted for before
1:eac0369: 		calling logAndUnDo.
1:eac0369: 
1:eac0369: 		@param xact		the transaction that is affecting the undo
1:eac0369: 		@param operation	the compensation operation
1:eac0369: 		@param undoInstant	the logInstant of the change that is to be undone
1:eac0369: 		@param in			optional data
1:eac0369: 
1:eac0369: 		@return LogInstant that is the LogInstant of the compensation operation
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	   */ 
1:eac0369: 	public LogInstant logAndUndo(RawTransaction xact,
1:eac0369: 								 Compensation operation, LogInstant undoInstant,
1:eac0369: 								 LimitObjectInput in)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Flush all unwritten log record up to the log instance indicated to disk.
1:eac0369: 
1:eac0369: 		@param where flush log up to here
1:eac0369: 
1:eac0369: 		@exception StandardException cannot flush due to sync error
1:eac0369: 	*/
1:eac0369: 	public void flush(LogInstant where) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Flush all unwritten log to disk
1:eac0369: 
1:eac0369: 		@exception StandardException cannot flush due to sync error
1:eac0369: 	*/
1:eac0369: 	public void flushAll() throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * During recovery re-prepare a transaction.
1:eac0369:      * <p>
1:eac0369:      * After redo() and undo(), this routine is called on all outstanding 
1:eac0369:      * in-doubt (prepared) transactions.  This routine re-acquires all 
1:eac0369:      * logical write locks for operations in the xact, and then modifies
1:eac0369:      * the transaction table entry to make the transaction look as if it
1:eac0369:      * had just been prepared following startup after recovery.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param t             is the transaction performing the re-prepare
1:eac0369:      * @param undoId        is the transaction ID to be re-prepared
1:eac0369:      * @param undoStopAt    is where the log instant (inclusive) where the 
1:eac0369:      *                      re-prepare should stop.
1:eac0369:      * @param undoStartAt   is the log instant (inclusive) where re-prepare 
1:eac0369:      *                      should begin, this is normally the log instant of 
1:eac0369:      *                      the last log record of the transaction that is to 
1:eac0369:      *                      be re-prepare.  If null, then re-prepare starts 
1:eac0369:      *                      from the end of the log.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public void reprepare(
1:eac0369:     RawTransaction  t,
1:eac0369:     TransactionId   undoId,
1:eac0369:     LogInstant      undoStopAt,
1:eac0369:     LogInstant      undoStartAt) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Undo transaction.
1:eac0369: 
1:eac0369: 	  @param t is the transaction performing the rollback
1:eac0369: 	  @param undoId is the transaction ID to be rolled back
1:eac0369: 	  @param undoStopAt is where the log instant (inclusive) where 
1:eac0369: 				the rollback should stop.
1:eac0369: 	  @param undoStartAt is the log instant (inclusive) where rollback
1:eac0369: 				should begin, this is normally the log instant of 
1:eac0369: 				the last log record of the transaction that is 
1:eac0369: 				to be rolled back.  
1:eac0369: 				If null, then rollback starts from the end of the log.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	  */
1:eac0369: 	public void undo(RawTransaction t,
1:eac0369: 					 TransactionId undoId,
1:eac0369: 					 LogInstant undoStopAt,
1:eac0369: 					 LogInstant undoStartAt) throws StandardException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.log.Logger
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw.log;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: 
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: public interface Logger {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Log the loggable operation under the context of the transaction and then
1: 		apply the operation to the RawStore.
1: 
1: 		<BR>
1: 		Before you call this method, make sure that the Loggable's doMe
1: 		method will succeed.  This method will go ahead and send the log record
1: 		to disk, and once it does that, then doMe cannot fail or the system
1: 		will be shut down and recovery may fail.  So it is <B> very important 
1: 		</B> to make sure that every resource you need for the loggable's doMe
1: 		method, such as disk space, has be acquired or accounted for before
1: 		calling logAndDo.
1: 
1: 		@param xact		the transaction that is affecting the change
1: 		@param operation	the loggable operation that describes the change
1: 		@return LogInstant that is the LogInstant of the loggable operation 
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	   */ 
1: 	public LogInstant logAndDo(RawTransaction xact, Loggable operation)
1: 		 throws StandardException; 
1: 
1: 	/**
1: 		Log the compensation operation under the context of the transaction 
1:         and then apply the undo to the RawStore.
1: 
1: 		<BR>
1: 		Before you call this method, make sure that the Compensation's doMe
1: 		method will succeed.  This method will go ahead and send the log record
1: 		to disk, and once it does that, then doMe cannot fail or the system
1: 		will be shut down and recovery may fail.  So it is <B> very important 
1: 		</B> to make sure that every resource you need for the Compensation's 
1:         doMe method, such as disk space, has be acquired or accounted for before
1: 		calling logAndUnDo.
1: 
1: 		@param xact		the transaction that is affecting the undo
1: 		@param operation	the compensation operation
1: 		@param undoInstant	the logInstant of the change that is to be undone
1: 		@param in			optional data
1: 
1: 		@return LogInstant that is the LogInstant of the compensation operation
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	   */ 
1: 	public LogInstant logAndUndo(RawTransaction xact,
1: 								 Compensation operation, LogInstant undoInstant,
1: 								 LimitObjectInput in)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Flush all unwritten log record up to the log instance indicated to disk.
1: 
1: 		@param where flush log up to here
1: 
1: 		@exception StandardException cannot flush due to sync error
1: 	*/
1: 	public void flush(LogInstant where) throws StandardException;
1: 
1: 
1: 	/**
1: 		Flush all unwritten log to disk
1: 
1: 		@exception StandardException cannot flush due to sync error
1: 	*/
1: 	public void flushAll() throws StandardException;
1: 
1:     /**
1:      * During recovery re-prepare a transaction.
1:      * <p>
1:      * After redo() and undo(), this routine is called on all outstanding 
1:      * in-doubt (prepared) transactions.  This routine re-acquires all 
1:      * logical write locks for operations in the xact, and then modifies
1:      * the transaction table entry to make the transaction look as if it
1:      * had just been prepared following startup after recovery.
1:      * <p>
1:      *
1:      * @param t             is the transaction performing the re-prepare
1:      * @param undoId        is the transaction ID to be re-prepared
1:      * @param undoStopAt    is where the log instant (inclusive) where the 
1:      *                      re-prepare should stop.
1:      * @param undoStartAt   is the log instant (inclusive) where re-prepare 
1:      *                      should begin, this is normally the log instant of 
1:      *                      the last log record of the transaction that is to 
1:      *                      be re-prepare.  If null, then re-prepare starts 
1:      *                      from the end of the log.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public void reprepare(
1:     RawTransaction  t,
1:     TransactionId   undoId,
1:     LogInstant      undoStopAt,
1:     LogInstant      undoStartAt) 
1:         throws StandardException;
1: 
1: 	/**
1: 	  Undo transaction.
1: 
1: 	  @param t is the transaction performing the rollback
1: 	  @param undoId is the transaction ID to be rolled back
1: 	  @param undoStopAt is where the log instant (inclusive) where 
1: 				the rollback should stop.
1: 	  @param undoStartAt is the log instant (inclusive) where rollback
1: 				should begin, this is normally the log instant of 
1: 				the last log record of the transaction that is 
1: 				to be rolled back.  
1: 				If null, then rollback starts from the end of the log.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	  */
1: 	public void undo(RawTransaction t,
1: 					 TransactionId undoId,
1: 					 LogInstant undoStopAt,
1: 					 LogInstant undoStartAt) throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw.log;
0: 
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: 
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: public interface Logger {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Log the loggable operation under the context of the transaction and then
0: 		apply the operation to the RawStore.
0: 
0: 		<BR>
0: 		Before you call this method, make sure that the Loggable's doMe
0: 		method will succeed.  This method will go ahead and send the log record
0: 		to disk, and once it does that, then doMe cannot fail or the system
0: 		will be shut down and recovery may fail.  So it is <B> very important 
0: 		</B> to make sure that every resource you need for the loggable's doMe
0: 		method, such as disk space, has be acquired or accounted for before
0: 		calling logAndDo.
0: 
0: 		@param xact		the transaction that is affecting the change
0: 		@param operation	the loggable operation that describes the change
0: 		@return LogInstant that is the LogInstant of the loggable operation 
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	   */ 
0: 	public LogInstant logAndDo(RawTransaction xact, Loggable operation)
0: 		 throws StandardException; 
0: 
0: 	/**
0: 		Log the compensation operation under the context of the transaction 
0:         and then apply the undo to the RawStore.
0: 
0: 		<BR>
0: 		Before you call this method, make sure that the Compensation's doMe
0: 		method will succeed.  This method will go ahead and send the log record
0: 		to disk, and once it does that, then doMe cannot fail or the system
0: 		will be shut down and recovery may fail.  So it is <B> very important 
0: 		</B> to make sure that every resource you need for the Compensation's 
0:         doMe method, such as disk space, has be acquired or accounted for before
0: 		calling logAndUnDo.
0: 
0: 		@param xact		the transaction that is affecting the undo
0: 		@param operation	the compensation operation
0: 		@param undoInstant	the logInstant of the change that is to be undone
0: 		@param in			optional data
0: 
0: 		@return LogInstant that is the LogInstant of the compensation operation
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	   */ 
0: 	public LogInstant logAndUndo(RawTransaction xact,
0: 								 Compensation operation, LogInstant undoInstant,
0: 								 LimitObjectInput in)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Flush all unwritten log record up to the log instance indicated to disk.
0: 
0: 		@param where flush log up to here
0: 
0: 		@exception StandardException cannot flush due to sync error
0: 	*/
0: 	public void flush(LogInstant where) throws StandardException;
0: 
0: 
0: 	/**
0: 		Flush all unwritten log to disk
0: 
0: 		@exception StandardException cannot flush due to sync error
0: 	*/
0: 	public void flushAll() throws StandardException;
0: 
0:     /**
0:      * During recovery re-prepare a transaction.
0:      * <p>
0:      * After redo() and undo(), this routine is called on all outstanding 
0:      * in-doubt (prepared) transactions.  This routine re-acquires all 
0:      * logical write locks for operations in the xact, and then modifies
0:      * the transaction table entry to make the transaction look as if it
0:      * had just been prepared following startup after recovery.
0:      * <p>
0:      *
0:      * @param t             is the transaction performing the re-prepare
0:      * @param undoId        is the transaction ID to be re-prepared
0:      * @param undoStopAt    is where the log instant (inclusive) where the 
0:      *                      re-prepare should stop.
0:      * @param undoStartAt   is the log instant (inclusive) where re-prepare 
0:      *                      should begin, this is normally the log instant of 
0:      *                      the last log record of the transaction that is to 
0:      *                      be re-prepare.  If null, then re-prepare starts 
0:      *                      from the end of the log.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public void reprepare(
0:     RawTransaction  t,
0:     TransactionId   undoId,
0:     LogInstant      undoStopAt,
0:     LogInstant      undoStartAt) 
0:         throws StandardException;
0: 
0: 	/**
0: 	  Undo transaction.
0: 
0: 	  @param t is the transaction performing the rollback
0: 	  @param undoId is the transaction ID to be rolled back
0: 	  @param undoStopAt is where the log instant (inclusive) where 
0: 				the rollback should stop.
0: 	  @param undoStartAt is the log instant (inclusive) where rollback
0: 				should begin, this is normally the log instant of 
0: 				the last log record of the transaction that is 
0: 				to be rolled back.  
0: 				If null, then rollback starts from the end of the log.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	  */
0: 	public void undo(RawTransaction t,
0: 					 TransactionId undoId,
0: 					 LogInstant undoStopAt,
0: 					 LogInstant undoStartAt) throws StandardException;
0: }
============================================================================