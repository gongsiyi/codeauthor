1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.VarbitConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.sql.Types;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:eac0369: public final class VarbitConstantNode extends BitConstantNode
2:eac0369: {
1:2706d1f:     // Allowed kinds
1:2706d1f:     final static int K_VAR = 0;
1:2706d1f:     final static int K_LONGVAR = 1;
1:2706d1f:     final static int K_BLOB = 2;
1:2706d1f: 
1:2706d1f:     /**
1:2706d1f:      * This class is used to hold logically different objects for
1:2706d1f:      * space efficiency. {@code kind} represents the logical object
1:2706d1f:      * type. See also {@link ValueNode#isSameNodeKind}.
1:2706d1f:      */
1:2706d1f:     final int kind;
1:2706d1f: 
1:3bb140c:     /**
1:3bb140c:      * Construct constant node for one of VARBINARY, LONG VARBINARY and
1:3bb140c:      * BLOB types.
1:3bb140c:      * @param t the type for which we want a constant node
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     VarbitConstantNode(TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, cm);
1:eac0369: 
1:3bb140c:         switch (t.getJDBCTypeId()) {
1:3bb140c:             case Types.VARBINARY:
1:2706d1f:                 kind = K_VAR;
1:3bb140c:                 break;
1:3bb140c:             case Types.LONGVARBINARY:
1:2706d1f:                 kind = K_LONGVAR;
1:3bb140c:                 break;
1:3bb140c:             case Types.BLOB:
1:2706d1f:                 kind = K_BLOB;
1:3bb140c:                 break;
1:3bb140c:             default:
1:3bb140c:                 if (SanityManager.DEBUG) {
1:3bb140c:                     SanityManager.NOTREACHED();
1:3bb140c:                 }
1:2706d1f:                 kind = -1;
1:3bb140c:         }
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     VarbitConstantNode(
1:3bb140c:             String hexValue,
1:3bb140c:             int bitLength,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(hexValue, bitLength, cm);
1:2706d1f:         kind = K_VAR;
1:2706d1f:     }
1:2706d1f: 
1:2706d1f:     @Override
1:2706d1f:     boolean isSameNodeKind(ValueNode o) {
1:2706d1f:         return super.isSameNodeKind(o) && ((VarbitConstantNode)o).kind == kind;
1:3bb140c:     }
2:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
1:     // Allowed kinds
1:     final static int K_VAR = 0;
1:     final static int K_LONGVAR = 1;
1:     final static int K_BLOB = 2;
1: 
1:     /**
1:      * This class is used to hold logically different objects for
1:      * space efficiency. {@code kind} represents the logical object
1:      * type. See also {@link ValueNode#isSameNodeKind}.
1:      */
1:     final int kind;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 kind = K_VAR;
1:                 kind = K_LONGVAR;
1:                 kind = K_BLOB;
1:                 kind = -1;
/////////////////////////////////////////////////////////////////////////
1:         kind = K_VAR;
1:     }
1: 
1:     @Override
1:     boolean isSameNodeKind(ValueNode o) {
1:         return super.isSameNodeKind(o) && ((VarbitConstantNode)o).kind == kind;
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.TypeId;
1:     /**
1:      * Construct constant node for one of VARBINARY, LONG VARBINARY and
1:      * BLOB types.
1:      * @param t the type for which we want a constant node
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     VarbitConstantNode(TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, cm);
0:         int nodeType = 0;
1:         switch (t.getJDBCTypeId()) {
1:             case Types.VARBINARY:
0:                 nodeType = C_NodeTypes.VARBIT_CONSTANT_NODE;
1:                 break;
1:             case Types.LONGVARBINARY:
0:                 nodeType = C_NodeTypes.LONGVARBIT_CONSTANT_NODE;
1:                 break;
1:             case Types.BLOB:
0:                 nodeType = C_NodeTypes.BLOB_CONSTANT_NODE;
1:                 break;
1:             default:
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.NOTREACHED();
1:                 }
1:         }
0:         setNodeType(nodeType);
1:     }
1: 
1:     VarbitConstantNode(
1:             String hexValue,
1:             int bitLength,
1:             ContextManager cm) throws StandardException {
1:         super(hexValue, bitLength, cm);
0:         setNodeType(C_NodeTypes.VARBIT_CONSTANT_NODE);
1:     }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * @param arg1  The TypeId for the type of the node OR A Bit containing the value of the constant
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.VarbitConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
1: 
1: 
1: import java.sql.Types;
1: 
1: public final class VarbitConstantNode extends BitConstantNode
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a VarbitConstantNode.
0: 	 *
0: 	 * @param arg1  The TypeId for the type of the node
0: 	 *
0: 	 * - OR -
0: 	 *
0: 	 * @param arg1	A Bit containing the value of the constant
0: 	 *
0: 	 * @exception StandardException
1: 	 */
1: 
0: 	public void init(
0: 						Object arg1)
0: 		throws StandardException
1: 	{
0: 		init(
0: 					arg1,
0: 					Boolean.TRUE,
0: 					ReuseFactory.getInteger(0));
1: 
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
0: 
0: 
0: import java.sql.Types;
0: 
0: public final class VarbitConstantNode extends BitConstantNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a VarbitConstantNode.
0: 	 *
0: 	 * @param arg1  The TypeId for the type of the node
0: 	 *
0: 	 * - OR -
0: 	 *
0: 	 * @param arg1	A Bit containing the value of the constant
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 
0: 	public void init(
0: 						Object arg1)
0: 		throws StandardException
0: 	{
0: 		init(
0: 					arg1,
0: 					Boolean.TRUE,
0: 					ReuseFactory.getInteger(0));
0: 
0: 	}
0: }
============================================================================