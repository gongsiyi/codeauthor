1:b7730e4: /*
2:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor
1:b7730e4: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.iapi.sql.dictionary;
1:b7730e4: 
1:2d2e717: import org.apache.derby.catalog.UUID;
1:2d2e717: import org.apache.derby.iapi.error.StandardException;
1:2d2e717: import org.apache.derby.iapi.sql.depend.Provider;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: 
1:b7730e4: /**
1:b7730e4:  * This class is used by rows in the SYS.SYSTABLEPERMS, SYS.SYSCOLPERMS, and SYS.SYSROUTINEPERMS
1:b7730e4:  * system tables.
1:b7730e4:  */
1:2d2e717: public abstract class PermissionsDescriptor extends TupleDescriptor 
1:2d2e717: 	implements Cloneable, Provider
1:b7730e4: {
1:2d2e717: 	protected UUID oid;
1:af88421: 	private String grantee;
1:af88421: 	private final String grantor;
1:b7730e4: 
1:4eece41: 	PermissionsDescriptor( DataDictionary dd,
1:b7730e4: 								  String grantee,
1:b7730e4: 								  String grantor)
1:b7730e4: 	{
1:b7730e4: 		super (dd);
1:b7730e4: 		this.grantee = grantee;
1:b7730e4: 		this.grantor = grantor;
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public Object clone()
1:b7730e4: 	{
1:b7730e4: 		try
1:b7730e4: 		{
1:b7730e4: 			return super.clone();
1:b7730e4: 		}
1:b7730e4: 		catch( java.lang.CloneNotSupportedException cnse)
1:b7730e4: 		{
1:b7730e4: 			if( SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Could not clone a " +
1:e7d2a42: 										  getClass().getName(), cnse);
1:b7730e4: 			return null;
1:b7730e4: 		}
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	public abstract int getCatalogNumber();
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 * @return true iff the key part of this permissions descriptor equals the key part of another permissions
1:b7730e4: 	 *		 descriptor.
1:b7730e4: 	 */
1:b7730e4: 	protected boolean keyEquals( PermissionsDescriptor other)
1:b7730e4: 	{
1:b7730e4: 		return grantee.equals( other.grantee);
1:b7730e4: 	}
1:b7730e4: 		   
1:b7730e4: 	/**
1:b7730e4: 	 * @return the hashCode for the key part of this permissions descriptor
1:b7730e4: 	 */
1:b7730e4: 	protected int keyHashCode()
1:b7730e4: 	{
1:b7730e4: 		return grantee.hashCode();
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	public void setGrantee( String grantee)
1:b7730e4: 	{
1:b7730e4: 		this.grantee = grantee;
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	/*----- getter functions for rowfactory ------*/
1:af88421: 	public final String getGrantee() { return grantee;}
1:af88421: 	public final String getGrantor() { return grantor;}
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Gets the UUID of the table.
1:2d2e717: 	 *
1:2d2e717: 	 * @return	The UUID of the table.
1:2d2e717: 	 */
1:2d2e717: 	public UUID	getUUID() { return oid;}
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Sets the UUID of the table
1:2d2e717: 	 *
1:2d2e717: 	 * @param oid	The UUID of the table to be set in the descriptor
1:2d2e717: 	 */
1:2d2e717: 	public void setUUID(UUID oid) {	this.oid = oid;}
1:2d2e717: 	
1:2d2e717: 	/**
1:2d2e717: 	 * This method checks if the passed authorization id is same as the owner 
1:2d2e717: 	 * of the object on which this permission is defined. This method gets
1:2d2e717: 	 * called by create view/constraint/trigger to see if this permission 
1:2d2e717: 	 * needs to be saved in dependency system for the view/constraint/trigger. 
1:2d2e717: 	 * If the same user is the owner of the the object being accessed and the 
1:2d2e717: 	 * newly created object, then no need to keep this privilege dependency 
1:2d2e717: 	 *
1:2d2e717: 	 * @return boolean	If passed authorization id is owner of the table
1:2d2e717: 	 */
1:2d2e717: 	public abstract boolean checkOwner(String authorizationId) throws StandardException;
1:2d2e717: 
1:2d2e717: 	//////////////////////////////////////////////
1:2d2e717: 	//
1:2d2e717: 	// PROVIDER INTERFACE
1:2d2e717: 	//
1:2d2e717: 	////////////////////////////////////////////////////////////////////
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Get the provider's UUID
1:2d2e717: 	 *
1:2d2e717: 	 * @return 	The provider's UUID
1:2d2e717: 	 */
1:2d2e717: 	public UUID getObjectID()
1:2d2e717: 	{
1:2d2e717: 		return oid;
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Is this provider persistent?  A stored dependency will be required
1:2d2e717: 	 * if both the dependent and provider are persistent.
1:2d2e717: 	 *
1:2d2e717: 	 * @return boolean              Whether or not this provider is persistent.
1:2d2e717: 	 */
1:2d2e717: 	public boolean isPersistent()
1:2d2e717: 	{
1:2d2e717: 		return true;
1:2d2e717: 	}
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Could not clone a " +
1: 										  getClass().getName(), cnse);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:af88421
/////////////////////////////////////////////////////////////////////////
1: 	private String grantee;
1: 	private final String grantor;
/////////////////////////////////////////////////////////////////////////
1: 	public final String getGrantee() { return grantee;}
1: 	public final String getGrantor() { return grantor;}
commit:4eece41
/////////////////////////////////////////////////////////////////////////
0: 	private final String grantee;
0: 	private String grantor;
1: 	PermissionsDescriptor( DataDictionary dd,
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.depend.Provider;
/////////////////////////////////////////////////////////////////////////
1: public abstract class PermissionsDescriptor extends TupleDescriptor 
1: 	implements Cloneable, Provider
1: 	protected UUID oid;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Gets the UUID of the table.
1: 	 *
1: 	 * @return	The UUID of the table.
1: 	 */
1: 	public UUID	getUUID() { return oid;}
1: 
1: 	/**
1: 	 * Sets the UUID of the table
1: 	 *
1: 	 * @param oid	The UUID of the table to be set in the descriptor
1: 	 */
1: 	public void setUUID(UUID oid) {	this.oid = oid;}
1: 	
1: 	/**
1: 	 * This method checks if the passed authorization id is same as the owner 
1: 	 * of the object on which this permission is defined. This method gets
1: 	 * called by create view/constraint/trigger to see if this permission 
1: 	 * needs to be saved in dependency system for the view/constraint/trigger. 
1: 	 * If the same user is the owner of the the object being accessed and the 
1: 	 * newly created object, then no need to keep this privilege dependency 
1: 	 *
1: 	 * @return boolean	If passed authorization id is owner of the table
1: 	 */
1: 	public abstract boolean checkOwner(String authorizationId) throws StandardException;
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// PROVIDER INTERFACE
1: 	//
1: 	////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the provider's UUID
1: 	 *
1: 	 * @return 	The provider's UUID
1: 	 */
1: 	public UUID getObjectID()
1: 	{
1: 		return oid;
1: 	}
1: 
1: 	/**
1: 	 * Is this provider persistent?  A stored dependency will be required
1: 	 * if both the dependent and provider are persistent.
1: 	 *
1: 	 * @return boolean              Whether or not this provider is persistent.
1: 	 */
1: 	public boolean isPersistent()
1: 	{
1: 		return true;
1: 	}
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This class is used by rows in the SYS.SYSTABLEPERMS, SYS.SYSCOLPERMS, and SYS.SYSROUTINEPERMS
1:  * system tables.
1:  */
0: public abstract class PermissionsDescriptor extends TupleDescriptor implements Cloneable
1: {
0: 	protected String grantee;
0: 	protected String grantor;
1: 
0: 	public PermissionsDescriptor( DataDictionary dd,
1: 								  String grantee,
1: 								  String grantor)
1: 	{
1: 		super (dd);
1: 		this.grantee = grantee;
1: 		this.grantor = grantor;
1: 	}
1: 
1: 	public Object clone()
1: 	{
1: 		try
1: 		{
1: 			return super.clone();
1: 		}
1: 		catch( java.lang.CloneNotSupportedException cnse)
1: 		{
1: 			if( SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT( "Could not clone a " + getClass().getName());
1: 			return null;
1: 		}
1: 	}
1: 	
1: 	public abstract int getCatalogNumber();
1: 
1: 	/**
1: 	 * @return true iff the key part of this permissions descriptor equals the key part of another permissions
1: 	 *		 descriptor.
1: 	 */
1: 	protected boolean keyEquals( PermissionsDescriptor other)
1: 	{
1: 		return grantee.equals( other.grantee);
1: 	}
1: 		   
1: 	/**
1: 	 * @return the hashCode for the key part of this permissions descriptor
1: 	 */
1: 	protected int keyHashCode()
1: 	{
1: 		return grantee.hashCode();
1: 	}
1: 	
1: 	public void setGrantee( String grantee)
1: 	{
1: 		this.grantee = grantee;
1: 	}
1: 	
1: 	/*----- getter functions for rowfactory ------*/
0: 	public String getGrantee() { return grantee;}
0: 	public String getGrantor() { return grantor;}
1: }
============================================================================