1:521b4d2: /*
1:521b4d2:  * Class org.apache.derbyTesting.functionTests.tests.lang.TruncateTableAndOnlineBackupTest
1:521b4d2:  *
1:521b4d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:521b4d2:  * or more contributor license agreements.  See the NOTICE file
1:521b4d2:  * distributed with this work for additional information
1:521b4d2:  * regarding copyright ownership.  The ASF licenses this file
1:521b4d2:  * to you under the Apache License, Version 2.0 (the
1:521b4d2:  * "License"); you may not use this file except in compliance
1:521b4d2:  * with the License.  You may obtain a copy of the License at
1:521b4d2:  *
1:521b4d2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:521b4d2:  *
1:521b4d2:  * Unless required by applicable law or agreed to in writing,
1:521b4d2:  * software distributed under the License is distributed on an
1:521b4d2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:521b4d2:  * KIND, either express or implied.  See the License for the
1:521b4d2:  * specific language governing permissions and limitations
1:521b4d2:  * under the License.
2:521b4d2:  */
7:521b4d2: 
1:521b4d2: package org.apache.derbyTesting.functionTests.tests.lang;
1:521b4d2: 
1:521b4d2: import java.io.File;
1:521b4d2: import java.sql.CallableStatement;
1:521b4d2: import java.sql.Connection;
1:521b4d2: import java.sql.PreparedStatement;
1:521b4d2: import java.sql.ResultSet;
1:521b4d2: import java.sql.SQLException;
1:521b4d2: import java.sql.Statement;
1:521b4d2: import javax.sql.DataSource;
1:521b4d2: import junit.framework.Test;
1:521b4d2: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:521b4d2: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1:521b4d2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:521b4d2: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:521b4d2: import org.apache.derbyTesting.junit.JDBC;
1:521b4d2: import org.apache.derbyTesting.junit.JDBCDataSource;
1:521b4d2: import org.apache.derbyTesting.junit.TestConfiguration;
1:521b4d2: 
2:521b4d2: /**
1:521b4d2:  * Tests interaction of TRUNCATE TABLE and Online Backup.
1:521b4d2:  * See also DERBY-5213
1:521b4d2:  * The test needs to test:
1:521b4d2:  * o uncommitted truncate table followed by online backup; 
1:521b4d2:  *   then access the backup copy and access the table.
1:521b4d2:  *   expected behavior: should see the old data.
1:521b4d2:  * o uncommitted truncate table, followed by online backup that keeps logs,
1:521b4d2:  *   then commit the truncate, then access the table in the backup. 
1:521b4d2:  *   expected behavior: should see old data in backup.
1:521b4d2:  */
1:521b4d2: 
1:521b4d2: public class TruncateTableAndOnlineBackupTest  extends BaseJDBCTestCase {
1:521b4d2:     
1:521b4d2:     static String home = null; // derby.system.home
1:521b4d2:     final static String dbName = "TTOB_db";
1:521b4d2: //    final static String dbName2 = dbName + "2";
1:521b4d2:     final static String backupDir = "TTOB_backup";
1:898c8da:         
1:521b4d2:     public TruncateTableAndOnlineBackupTest(String name) {
1:521b4d2:         super(name);
3:521b4d2:     }
1:521b4d2: 
1:521b4d2:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("TruncateTableAndOnlineBackupTest");
1:1ae02c9: 
1:521b4d2:         suite.addTest(baseSuite("TruncateTableAndOnlineBackupTest:Embedded"));
1:521b4d2:         //suite.addTest(TestConfiguration
1:521b4d2:         //        .clientServerDecorator(baseSuite("TruncateTableAndOnlineBackupTest:Client")));
1:521b4d2:         return TestConfiguration.singleUseDatabaseDecorator(suite,
1:521b4d2:                 dbName);
1:521b4d2: 
1:521b4d2:         //return suite;
1:521b4d2:     }
1:521b4d2:     
1:521b4d2:     protected static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:521b4d2:         suite.addTestSuite(TruncateTableAndOnlineBackupTest.class);
1:898c8da:         return new CleanDatabaseTestSetup(suite); 
1:521b4d2:     }
1:521b4d2:     
1:521b4d2:     public void setUp() throws Exception {
1:521b4d2:         getConnection();
1:521b4d2:         home = getSystemProperty("derby.system.home");
1:898c8da: 
1:898c8da:         Statement stmt = createStatement();
1:898c8da:         stmt.executeUpdate("create table truncable(i int)");
1:898c8da:         PreparedStatement ps = getConnection().prepareStatement(
1:898c8da:                 "insert into truncable values (?)");
1:898c8da: 
1:898c8da:         // insert some data
1:898c8da:         getConnection().setAutoCommit(false);
1:898c8da:         for (int i=1; i <= 1000; i++) {
1:898c8da:             ps.setInt(1,i);
1:898c8da:             ps.executeUpdate();
1:898c8da:         }
1:898c8da:         getConnection().commit();
1:521b4d2:     }
1:521b4d2:     
1:898c8da:     /*
1:898c8da:      * Drop the table truncable that was created in setUp().
1:898c8da:      */
1:898c8da:     public void tearDown() throws Exception
1:898c8da:     {
1:898c8da:         getConnection().createStatement().execute("drop table truncable");
1:898c8da:         super.tearDown();
1:898c8da:     }
1:521b4d2: 
1:521b4d2:     /*  uncommitted truncate table followed by online backup; 
1:521b4d2:      *  then access the backup copy and access the table.
1:521b4d2:      *  expected behavior: should see the old data.
1:521b4d2:      */
1:521b4d2:     public void testUncommittedTruncateBasicBackup() throws Exception {
1:521b4d2: 
1:521b4d2:         setAutoCommit(false);
1:521b4d2:         Statement s = createStatement();
1:521b4d2: 
1:521b4d2:         // check...we should have 1000 rows
1:521b4d2:         JDBC.assertFullResultSet(
1:521b4d2:                 s.executeQuery("select count(*) from truncable"),
1:521b4d2:                 new String[][]{{"1000"}});
1:521b4d2: 
1:521b4d2:         // truncate the table, but do not commit
1:521b4d2:         s.executeUpdate("truncate table truncable");
1:521b4d2: 
1:521b4d2:         // check...we should have no rows
1:521b4d2:         ResultSet rs = s.executeQuery("select * from truncable");
1:521b4d2:         JDBC.assertEmpty(rs);
1:521b4d2:         
1:521b4d2:         CallableStatement cs = prepareCall
1:521b4d2:             ("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:521b4d2:         String fullBackupDir = home + "/" + backupDir;
1:521b4d2:         cs.setString(1, fullBackupDir);
1:521b4d2:         cs.execute();
1:521b4d2: 
1:521b4d2:         // check contents of table in backup dir
1:521b4d2: 
1:521b4d2:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName);
1:521b4d2:         final Connection con2 = ds2.getConnection();
1:521b4d2:         Statement s2 = con2.createStatement();
1:521b4d2:         // check...we should have 1000 rows because truncate table was not committed
1:521b4d2:         JDBC.assertFullResultSet(
1:521b4d2:                 s2.executeQuery("select count(*) from truncable"),
1:521b4d2:                 new String[][]{{"1000"}});
1:521b4d2: 
1:521b4d2:         con2.close();
1:521b4d2: 
1:521b4d2:         // close down both
1:521b4d2:         final DataSource[] srcs =
1:521b4d2:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:521b4d2:                     JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName)};
1:521b4d2: 
1:521b4d2:         for (int i=0; i < srcs.length; i++) {
1:521b4d2:             JDBCDataSource.setBeanProperty(
1:521b4d2:                     srcs[i], "connectionAttributes", "shutdown=true");
1:521b4d2: 
1:521b4d2:             try {
1:521b4d2:                 srcs[i].getConnection();
1:521b4d2:                 fail("shutdown failed: expected exception");
1:521b4d2:             } catch (SQLException e) {
1:521b4d2:                 assertSQLState(
1:521b4d2:                     "database shutdown",
1:521b4d2:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:521b4d2:                     e);
1:521b4d2:             }
1:521b4d2:         }
1:521b4d2: 
1:521b4d2:         assertDirectoryDeleted(new File(fullBackupDir));
1:521b4d2:     }
1:898c8da: 
1:521b4d2:     /*   uncommitted truncate table, followed by online backup that keeps logs,
1:521b4d2:      *   then commit the truncate, then access the table in the backup. 
1:521b4d2:      *   expected behavior: should see old data in backup.
1:521b4d2:      */
1:521b4d2:     public void testUncommittedTruncateBackupEnableLog() throws Exception {
1:898c8da: 
1:521b4d2:         setAutoCommit(false);
1:521b4d2:         Statement s = createStatement();
1:521b4d2: 
1:521b4d2:         // check...we should have 1000 rows
1:521b4d2:         JDBC.assertFullResultSet(
1:521b4d2:                 s.executeQuery("select count(*) from truncable"),
1:521b4d2:                 new String[][]{{"1000"}});
1:521b4d2: 
1:521b4d2:         // truncate the table, but do not commit
1:521b4d2:         s.executeUpdate("truncate table truncable");
1:521b4d2: 
1:521b4d2:         // check...we should have no rows
1:521b4d2:         ResultSet rs = s.executeQuery("select * from truncable");
1:521b4d2:         JDBC.assertEmpty(rs);
1:521b4d2:         
1:521b4d2:         CallableStatement cs = prepareCall
1:521b4d2:             ("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(?,1)");
1:521b4d2:         String fullBackupDir = home + "/" + backupDir;
1:521b4d2:         cs.setString(1, fullBackupDir);
1:521b4d2:         cs.execute();
1:521b4d2: 
1:521b4d2:         // now commit - this will commit the truncate table
1:521b4d2:         commit();
1:521b4d2:         
1:521b4d2:         // check contents of table in backup dir
1:521b4d2:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName);
1:521b4d2:         final Connection con2 = ds2.getConnection();
1:521b4d2:         Statement s2 = con2.createStatement();
1:521b4d2:         // we should have 1000 rows because truncate table was not committed
1:521b4d2:         JDBC.assertFullResultSet(
1:521b4d2:                 s2.executeQuery("select count(*) from truncable"),
1:521b4d2:                 new String[][]{{"1000"}});
1:521b4d2:         con2.close();
1:521b4d2: 
1:521b4d2:         // backup again, to a different dir
1:521b4d2:         String fullBackupDir2=fullBackupDir+"2";
1:521b4d2:         cs.setString(1, fullBackupDir2);
1:521b4d2:         cs.execute();
1:521b4d2: 
1:521b4d2:         // connect to the second backed up database, but this time,
1:521b4d2:         // we should not have any rows.
1:521b4d2:         final DataSource ds3 = JDBCDataSource.getDataSource(fullBackupDir2+"/"+dbName);
1:521b4d2:         final Connection con3 = ds3.getConnection();
1:521b4d2:         Statement s3 = con3.createStatement();
1:521b4d2:         rs = s3.executeQuery("select * from truncable");
1:521b4d2:         JDBC.assertEmpty(rs);
1:521b4d2: 
1:521b4d2:         // close down all
1:521b4d2:         final DataSource[] srcs =
1:521b4d2:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:521b4d2:                     JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName),
1:521b4d2:                     JDBCDataSource.getDataSource(fullBackupDir2+"/"+dbName)};
1:521b4d2: 
1:521b4d2:         for (int i=0; i < srcs.length; i++) {
1:521b4d2:             JDBCDataSource.setBeanProperty(
1:521b4d2:                     srcs[i], "connectionAttributes", "shutdown=true");
1:521b4d2: 
1:521b4d2:             try {
1:521b4d2:                 srcs[i].getConnection();
1:521b4d2:                 fail("shutdown failed: expected exception");
1:521b4d2:             } catch (SQLException e) {
1:521b4d2:                 assertSQLState(
1:521b4d2:                     "database shutdown",
1:521b4d2:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:521b4d2:                     e);
1:521b4d2:             }
1:521b4d2:         }
1:521b4d2: 
1:521b4d2:         assertDirectoryDeleted(new File(fullBackupDir));
1:521b4d2:         assertDirectoryDeleted(new File(fullBackupDir2));
1:521b4d2:     }    
1:898c8da:     
1:898c8da:     /*  uncommitted truncate table followed by online backup; 
1:898c8da:      *  then access the backup copy and access the table.
1:898c8da:      *  expected behavior: should see the old data.
1:898c8da:      */
1:898c8da:     public void testTruncateFreezeUnfreeze() throws Exception {
1:898c8da: 
1:898c8da:         setAutoCommit(false);
1:898c8da:         Statement s = createStatement();
1:898c8da: 
1:898c8da:         // check...we should have 1000 rows
1:898c8da:         JDBC.assertFullResultSet(
1:898c8da:                 s.executeQuery("select count(*) from truncable"),
1:898c8da:                 new String[][]{{"1000"}});
1:898c8da: 
1:898c8da:         // truncate the table, but do not commit
1:898c8da:         s.executeUpdate("truncate table truncable");
1:521b4d2: 
1:898c8da:         // check...we should have no rows
1:898c8da:         ResultSet rs = s.executeQuery("select * from truncable");
1:898c8da:         JDBC.assertEmpty(rs);
1:521b4d2: 
1:898c8da:         // freeze the database
1:898c8da:         s.execute("call syscs_util.syscs_freeze_database()");
1:898c8da: 
1:898c8da:         // Now copy the database directory
1:898c8da:         String fullBackupDir = backupDir + "2";
1:898c8da:         File DbDir = new File(home, dbName);
1:898c8da:         File fullBackupDbDir = new File(home, fullBackupDir );
1:898c8da:         PrivilegedFileOpsForTests.copy(DbDir, fullBackupDbDir);
1:898c8da:         
1:898c8da:         // At this point, writing to the original database is blocked.
1:898c8da:         // Try to read from the original database. Should work, we should still
1:898c8da:         // be connected, and read access is allowed during the freeze.
1:898c8da:         rs = s.executeQuery("select * from truncable");
1:898c8da:         JDBC.assertEmpty(rs);
1:898c8da: 
1:898c8da:         // connect to backed-up database
1:898c8da:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir);
1:898c8da:         final Connection con2 = ds2.getConnection();
1:898c8da:         Statement s2 = con2.createStatement();
1:898c8da:         // check...we should have 1000 rows because truncate table was not committed
1:898c8da:         // before the freeze and copy
1:898c8da:         JDBC.assertFullResultSet(
1:898c8da:                 s2.executeQuery("select count(*) from truncable"),
1:898c8da:                 new String[][]{{"1000"}});
1:898c8da: 
1:898c8da:         // unfreeze our original database
1:898c8da:         s.execute("call syscs_util.syscs_unfreeze_database()");
1:898c8da: 
1:898c8da:         // ensure we can read and write now.
1:898c8da:         rs = s.executeQuery("select * from truncable");
1:898c8da:         JDBC.assertEmpty(rs);
1:898c8da:         s.executeUpdate("insert into truncable values(2001)");
1:898c8da:         JDBC.assertFullResultSet(
1:898c8da:                 s.executeQuery("select count(*) from truncable"),
1:898c8da:                 new String[][]{{"1"}});
1:898c8da: 
1:898c8da:         // rollback, should rollback the truncate - then 
1:898c8da:         // select again from the org db - should have 1000 rows again instead of 1
1:898c8da:         // then select again from the backup db, should still have 1000 rows.
1:898c8da:         rollback();
1:898c8da:         JDBC.assertFullResultSet(
1:898c8da:                 s.executeQuery("select count(*) from truncable"),
1:898c8da:                 new String[][]{{"1000"}});
1:898c8da:         JDBC.assertFullResultSet(
1:898c8da:                 s2.executeQuery("select count(*) from truncable"),
1:898c8da:                 new String[][]{{"1000"}});
1:898c8da: 
1:898c8da:         s2.close();
1:898c8da:         con2.close();
1:898c8da: 
1:898c8da:         // close down both databases
1:898c8da:         final DataSource[] srcs =
1:898c8da:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:898c8da:                 ds2};
1:898c8da: 
1:898c8da:         for (int i=0; i < srcs.length; i++) {
1:898c8da:             JDBCDataSource.setBeanProperty(
1:898c8da:                     srcs[i], "connectionAttributes", "shutdown=true");
1:898c8da:             try {
1:898c8da:                 srcs[i].getConnection();
1:898c8da:                 fail("shutdown failed: expected exception");
1:898c8da:             } catch (SQLException e) {
1:898c8da:                 assertSQLState(
1:898c8da:                     "database shutdown",
1:898c8da:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:898c8da:                     e);
1:898c8da:             }
1:898c8da:         }
1:898c8da: 
1:898c8da:         assertDirectoryDeleted(new File(home + "/"+fullBackupDir));
1:898c8da:     }    
1:521b4d2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("TruncateTableAndOnlineBackupTest");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:898c8da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(suite); 
1: 
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("create table truncable(i int)");
1:         PreparedStatement ps = getConnection().prepareStatement(
1:                 "insert into truncable values (?)");
1: 
1:         // insert some data
1:         getConnection().setAutoCommit(false);
1:         for (int i=1; i <= 1000; i++) {
1:             ps.setInt(1,i);
1:             ps.executeUpdate();
1:         }
1:         getConnection().commit();
1:     /*
1:      * Drop the table truncable that was created in setUp().
1:      */
1:     public void tearDown() throws Exception
1:     {
1:         getConnection().createStatement().execute("drop table truncable");
1:         super.tearDown();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     /*  uncommitted truncate table followed by online backup; 
1:      *  then access the backup copy and access the table.
1:      *  expected behavior: should see the old data.
1:      */
1:     public void testTruncateFreezeUnfreeze() throws Exception {
1: 
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1: 
1:         // check...we should have 1000 rows
1:         JDBC.assertFullResultSet(
1:                 s.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         // truncate the table, but do not commit
1:         s.executeUpdate("truncate table truncable");
1: 
1:         // check...we should have no rows
1:         ResultSet rs = s.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1: 
1:         // freeze the database
1:         s.execute("call syscs_util.syscs_freeze_database()");
1: 
1:         // Now copy the database directory
1:         String fullBackupDir = backupDir + "2";
1:         File DbDir = new File(home, dbName);
1:         File fullBackupDbDir = new File(home, fullBackupDir );
1:         PrivilegedFileOpsForTests.copy(DbDir, fullBackupDbDir);
1:         
1:         // At this point, writing to the original database is blocked.
1:         // Try to read from the original database. Should work, we should still
1:         // be connected, and read access is allowed during the freeze.
1:         rs = s.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1: 
1:         // connect to backed-up database
1:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir);
1:         final Connection con2 = ds2.getConnection();
1:         Statement s2 = con2.createStatement();
1:         // check...we should have 1000 rows because truncate table was not committed
1:         // before the freeze and copy
1:         JDBC.assertFullResultSet(
1:                 s2.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         // unfreeze our original database
1:         s.execute("call syscs_util.syscs_unfreeze_database()");
1: 
1:         // ensure we can read and write now.
1:         rs = s.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1:         s.executeUpdate("insert into truncable values(2001)");
1:         JDBC.assertFullResultSet(
1:                 s.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1"}});
1: 
1:         // rollback, should rollback the truncate - then 
1:         // select again from the org db - should have 1000 rows again instead of 1
1:         // then select again from the backup db, should still have 1000 rows.
1:         rollback();
1:         JDBC.assertFullResultSet(
1:                 s.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1:         JDBC.assertFullResultSet(
1:                 s2.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         s2.close();
1:         con2.close();
1: 
1:         // close down both databases
1:         final DataSource[] srcs =
1:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:                 ds2};
1: 
1:         for (int i=0; i < srcs.length; i++) {
1:             JDBCDataSource.setBeanProperty(
1:                     srcs[i], "connectionAttributes", "shutdown=true");
1:             try {
1:                 srcs[i].getConnection();
1:                 fail("shutdown failed: expected exception");
1:             } catch (SQLException e) {
1:                 assertSQLState(
1:                     "database shutdown",
1:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:                     e);
1:             }
1:         }
1: 
1:         assertDirectoryDeleted(new File(home + "/"+fullBackupDir));
1:     }    
commit:521b4d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Class org.apache.derbyTesting.functionTests.tests.lang.TruncateTableAndOnlineBackupTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.net.URL;
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.functionTests.util.SQLStateConstants;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests interaction of TRUNCATE TABLE and Online Backup.
1:  * See also DERBY-5213
1:  * The test needs to test:
1:  * o uncommitted truncate table followed by online backup; 
1:  *   then access the backup copy and access the table.
1:  *   expected behavior: should see the old data.
1:  * o uncommitted truncate table, followed by online backup that keeps logs,
1:  *   then commit the truncate, then access the table in the backup. 
1:  *   expected behavior: should see old data in backup.
1:  */
1: 
1: public class TruncateTableAndOnlineBackupTest  extends BaseJDBCTestCase {
1:     
1:     static String home = null; // derby.system.home
1:     final static String dbName = "TTOB_db";
1: //    final static String dbName2 = dbName + "2";
1:     final static String backupDir = "TTOB_backup";
1:     
0:     // TODO: figure out if we need this
0:     final public static int NEGATIVE = 0; // expected check outcome set
0:     final public static int POSITIVE = 1;
0:     final public static int UNKNOWN = 2;
1:     
1:     public TruncateTableAndOnlineBackupTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("TruncateTableAndOnlineBackupTest");
1:         suite.addTest(baseSuite("TruncateTableAndOnlineBackupTest:Embedded"));
1:         //suite.addTest(TestConfiguration
1:         //        .clientServerDecorator(baseSuite("TruncateTableAndOnlineBackupTest:Client")));
1:         return TestConfiguration.singleUseDatabaseDecorator(suite,
1:                 dbName);
1: 
1:         //return suite;
1:     }
1:     
1:     protected static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(TruncateTableAndOnlineBackupTest.class);
0:         return new CleanDatabaseTestSetup(suite) {
1:             /**
0:              * Creates the table used in the test cases.
0:              * @exception SQLException if a database error occurs
1:              */
0:             protected void decorateSQL(Statement stmt) throws SQLException {
0:                 stmt.executeUpdate("create table truncable(i int)");
0:                 PreparedStatement ps = getConnection().prepareStatement(
0:                     "insert into truncable values (?)");
1: 
0:                 // insert some data
0:                 getConnection().setAutoCommit(false);
0:                 for (int i=1; i <= 1000; i++) {
0:                     ps.setInt(1,i);
0:                     ps.executeUpdate();
1:                 }
0:                 getConnection().commit();
1:             }
0:         };
1:     }
1:     
1:     public void setUp() throws Exception {
1:         getConnection();
1:         home = getSystemProperty("derby.system.home");
1:     }
1:     
1: 
1:     /*  uncommitted truncate table followed by online backup; 
1:      *  then access the backup copy and access the table.
1:      *  expected behavior: should see the old data.
1:      */
1:     public void testUncommittedTruncateBasicBackup() throws Exception {
1: 
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1: 
1:         // check...we should have 1000 rows
1:         JDBC.assertFullResultSet(
1:                 s.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         // truncate the table, but do not commit
1:         s.executeUpdate("truncate table truncable");
1: 
1:         // check...we should have no rows
1:         ResultSet rs = s.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1:         
1:         CallableStatement cs = prepareCall
1:             ("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:         String fullBackupDir = home + "/" + backupDir;
1:         cs.setString(1, fullBackupDir);
1:         cs.execute();
1: 
1:         // check contents of table in backup dir
1: 
1:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName);
1:         final Connection con2 = ds2.getConnection();
1:         Statement s2 = con2.createStatement();
1:         // check...we should have 1000 rows because truncate table was not committed
1:         JDBC.assertFullResultSet(
1:                 s2.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         con2.close();
1: 
1:         // close down both
1:         final DataSource[] srcs =
1:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:                     JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName)};
1: 
1:         for (int i=0; i < srcs.length; i++) {
1:             JDBCDataSource.setBeanProperty(
1:                     srcs[i], "connectionAttributes", "shutdown=true");
1: 
1:             try {
1:                 srcs[i].getConnection();
1:                 fail("shutdown failed: expected exception");
1:             } catch (SQLException e) {
1:                 assertSQLState(
1:                     "database shutdown",
1:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:                     e);
1:             }
1:         }
1: 
1:         assertDirectoryDeleted(new File(fullBackupDir));
1:     }
1: 
1:     /*   uncommitted truncate table, followed by online backup that keeps logs,
1:      *   then commit the truncate, then access the table in the backup. 
1:      *   expected behavior: should see old data in backup.
1:      */
1:     public void testUncommittedTruncateBackupEnableLog() throws Exception {
1: 
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1: 
1:         // check...we should have 1000 rows
1:         JDBC.assertFullResultSet(
1:                 s.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1: 
1:         // truncate the table, but do not commit
1:         s.executeUpdate("truncate table truncable");
1: 
1:         // check...we should have no rows
1:         ResultSet rs = s.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1:         
1:         CallableStatement cs = prepareCall
1:             ("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(?,1)");
1:         String fullBackupDir = home + "/" + backupDir;
1:         cs.setString(1, fullBackupDir);
1:         cs.execute();
1: 
1:         // now commit - this will commit the truncate table
1:         commit();
1:         
1:         // check contents of table in backup dir
1:         final DataSource ds2 = JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName);
1:         final Connection con2 = ds2.getConnection();
1:         Statement s2 = con2.createStatement();
1:         // we should have 1000 rows because truncate table was not committed
1:         JDBC.assertFullResultSet(
1:                 s2.executeQuery("select count(*) from truncable"),
1:                 new String[][]{{"1000"}});
1:         con2.close();
1: 
1:         // backup again, to a different dir
1:         String fullBackupDir2=fullBackupDir+"2";
1:         cs.setString(1, fullBackupDir2);
1:         cs.execute();
1: 
1:         // connect to the second backed up database, but this time,
1:         // we should not have any rows.
1:         final DataSource ds3 = JDBCDataSource.getDataSource(fullBackupDir2+"/"+dbName);
1:         final Connection con3 = ds3.getConnection();
1:         Statement s3 = con3.createStatement();
1:         rs = s3.executeQuery("select * from truncable");
1:         JDBC.assertEmpty(rs);
1: 
1:         // close down all
1:         final DataSource[] srcs =
1:                 new DataSource[] {JDBCDataSource.getDataSource(),
1:                     JDBCDataSource.getDataSource(fullBackupDir+"/"+dbName),
1:                     JDBCDataSource.getDataSource(fullBackupDir2+"/"+dbName)};
1: 
1:         for (int i=0; i < srcs.length; i++) {
1:             JDBCDataSource.setBeanProperty(
1:                     srcs[i], "connectionAttributes", "shutdown=true");
1: 
1:             try {
1:                 srcs[i].getConnection();
1:                 fail("shutdown failed: expected exception");
1:             } catch (SQLException e) {
1:                 assertSQLState(
1:                     "database shutdown",
1:                     SQLStateConstants.CONNECTION_EXCEPTION_CONNECTION_FAILURE,
1:                     e);
1:             }
1:         }
1: 
1:         assertDirectoryDeleted(new File(fullBackupDir));
1:         assertDirectoryDeleted(new File(fullBackupDir2));
1:     }    
1: }
============================================================================