1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BitConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.sql.Types;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.types.BitDataValue;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:3bb140c: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: 
1:3bb140c: class BitConstantNode extends ConstantNode
4:eac0369: {
1:3bb140c:     /**
1:3bb140c:      * @param t The TypeId for the type of the node
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     BitConstantNode(TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, true, 0, cm);
1:3bb140c:     }
1:eac0369: 
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * @param hexString hexadecimally coded bit string
1:3bb140c:      * @param bitLength desired length of the bit string
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     BitConstantNode(String hexString, int bitLength, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(TypeId.getBuiltInTypeId(Types.BINARY), false, bitLength, cm);
1:3bb140c:         byte[] nv = StringUtil.fromHexString(hexString, 0, hexString.length());
1:3bb140c:         BitDataValue dvd = getDataValueFactory().getBitDataValue(nv);
1:eac0369: 		dvd.setWidth(bitLength, 0, false);
1:eac0369: 
1:3bb140c:         setValue(dvd);
1:3bb140c:     }
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 	 * Return an Object representing the bind time value of this
1:eac0369: 	 * expression tree.  If the expression tree does not evaluate to
1:eac0369: 	 * a constant at bind time then we return null.
1:eac0369: 	 * This is useful for bind time resolution of VTIs.
1:eac0369: 	 * RESOLVE: What do we do for primitives?
9:eac0369: 	 *
1:eac0369: 	 * @return	An Object representing the bind time value of this expression tree.
1:eac0369: 	 *			(null if not a bind time constant.)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	Object getConstantValueAsObject()
4:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return value.getBytes();
6:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This generates the proper constant.  It is implemented
1:eac0369: 	 * by every specific constant node (e.g. IntConstantNode).
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		byte[] bytes = value.getBytes();
1:eac0369: 
1:eac0369: 		String hexLiteral = org.apache.derby.iapi.util.StringUtil.toHexString(bytes, 0, bytes.length);
1:eac0369: 
1:eac0369: 		mb.push(hexLiteral);
2:eac0369: 		mb.push(0);
1:eac0369: 		mb.push(hexLiteral.length());
1:eac0369: 
1:eac0369: 		mb.callMethod(VMOpcode.INVOKESTATIC, "org.apache.derby.iapi.util.StringUtil", "fromHexString",
1:eac0369: 						"byte[]", 3);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.util.StringUtil;
1: class BitConstantNode extends ConstantNode
1:     /**
1:      * @param t The TypeId for the type of the node
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     BitConstantNode(TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, true, 0, cm);
0:         setNodeType(C_NodeTypes.BIT_CONSTANT_NODE);
1:     }
1:     /**
1:      * @param hexString hexadecimally coded bit string
1:      * @param bitLength desired length of the bit string
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     BitConstantNode(String hexString, int bitLength, ContextManager cm)
1:             throws StandardException {
1:         super(TypeId.getBuiltInTypeId(Types.BINARY), false, bitLength, cm);
0:         setNodeType(C_NodeTypes.BIT_CONSTANT_NODE);
1:         byte[] nv = StringUtil.fromHexString(hexString, 0, hexString.length());
1:         BitDataValue dvd = getDataValueFactory().getBitDataValue(nv);
1:         setValue(dvd);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ef158f2
/////////////////////////////////////////////////////////////////////////
commit:806114c
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BitConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.types.BitDataValue;
1: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.sql.Types;
1: 
0: public class BitConstantNode extends ConstantNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	private int bitLength;
1: 
1: 
1: 	/**
0: 	 * Initializer for a BitConstantNode.
1: 	 *
0: 	 * @param arg1	A Bit containing the value of the constant
1: 	 *
0: 	 * - OR -
1: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
1: 	 *
0: 	 * @exception StandardException
1: 	 */
1: 
0: 	public void init(
0: 					Object arg1)
1: 		throws StandardException
1: 	{
0: 		super.init(
0: 					arg1,
0: 					Boolean.TRUE,
0: 					ReuseFactory.getInteger(0));
1: 	}
1: 
0: 	public void init(
0: 					Object arg1, Object arg2)
1: 		throws StandardException
1: 	{
0: 		String a1 = (String) arg1;
1: 
0: 		byte[] nv = org.apache.derby.iapi.util.StringUtil.fromHexString(a1, 0, a1.length()); 
1: 
0: 		Integer bitLengthO = (Integer) arg2;
0: 		bitLength = bitLengthO.intValue();
1: 
0: 		init(
0: 			TypeId.getBuiltInTypeId(Types.BINARY),
0: 			Boolean.FALSE,
0: 			bitLengthO);
1: 
0: 		org.apache.derby.iapi.types.BitDataValue dvd = getDataValueFactory().getBitDataValue(nv);
1: 
1: 		dvd.setWidth(bitLength, 0, false);
1: 
0: 		setValue(dvd);
1: 	}
1: 
1: 	/**
0: 	 * Initializer for non-numeric types.  Needed for our subclasses
1: 	 *
0: 	 * @param typeCompilationFactory	The factory to get the
0: 	 *									DataTypeServicesFactory from
0: 	 * @param typeId	The Type ID of the datatype
0: 	 * @param nullable	True means the constant is nullable
0: 	 * @param maximumWidth	The maximum number of bytes in the data value
1: 	 *
0: 	 * @exception StandardException
1: 	 */
0: 	public void init(
0: 			Object typeId,
0: 			Object nullable,
0: 			Object maximumWidth)
1: 		throws StandardException
1: 	{
0: 		init(
0: 					typeId,
0: 					ReuseFactory.getInteger(0),
0: 					ReuseFactory.getInteger(0),
0: 					nullable,
0: 					maximumWidth);
1: 	}
1: 
1: 
1: 	/**
1: 	 * Return an Object representing the bind time value of this
1: 	 * expression tree.  If the expression tree does not evaluate to
1: 	 * a constant at bind time then we return null.
1: 	 * This is useful for bind time resolution of VTIs.
1: 	 * RESOLVE: What do we do for primitives?
1: 	 *
1: 	 * @return	An Object representing the bind time value of this expression tree.
1: 	 *			(null if not a bind time constant.)
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	Object getConstantValueAsObject()
1: 		throws StandardException
1: 	{
1: 		return value.getBytes();
1: 	}
1: 
1: 	/**
1: 	 * This generates the proper constant.  It is implemented
1: 	 * by every specific constant node (e.g. IntConstantNode).
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
0: 	 * @return		The compiled Expression, 
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1: 		throws StandardException
1: 	{
1: 		byte[] bytes = value.getBytes();
1: 
1: 		String hexLiteral = org.apache.derby.iapi.util.StringUtil.toHexString(bytes, 0, bytes.length);
1: 
1: 		mb.push(hexLiteral);
1: 		mb.push(0);
1: 		mb.push(hexLiteral.length());
1: 
1: 		mb.callMethod(VMOpcode.INVOKESTATIC, "org.apache.derby.iapi.util.StringUtil", "fromHexString",
1: 						"byte[]", 3);
1: 	}
1: 
1: 	
0: 	void setConstantWidth(ExpressionClassBuilder acb, MethodBuilder mb) {
0: 		if ((bitLength % 8) != 0) {
0: 			// temp for binary types.
0: 			mb.cast("org.apache.derby.iapi.types.VariableSizeDataValue");
0: 			mb.push(bitLength);
1: 			mb.push(0);
0: 			mb.push(false);
0: 			mb.callMethod(VMOpcode.INVOKEINTERFACE, null, "setWidth", "org.apache.derby.iapi.types.DataValueDescriptor", 3);
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * @param arg1	A Bit containing the value of the constant OR The TypeId for the type of the node
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.sql.Types;
0: 
0: public class BitConstantNode extends ConstantNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private int bitLength;
0: 
0: 
0: 	/**
0: 	 * Initializer for a BitConstantNode.
0: 	 *
0: 	 * @param arg1	A Bit containing the value of the constant
0: 	 *
0: 	 * - OR -
0: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 
0: 	public void init(
0: 					Object arg1)
0: 		throws StandardException
0: 	{
0: 		super.init(
0: 					arg1,
0: 					Boolean.TRUE,
0: 					ReuseFactory.getInteger(0));
0: 	}
0: 
0: 	public void init(
0: 					Object arg1, Object arg2)
0: 		throws StandardException
0: 	{
0: 		String a1 = (String) arg1;
0: 
0: 		byte[] nv = org.apache.derby.iapi.util.StringUtil.fromHexString(a1, 0, a1.length()); 
0: 
0: 		Integer bitLengthO = (Integer) arg2;
0: 		bitLength = bitLengthO.intValue();
0: 
0: 		init(
0: 			TypeId.getBuiltInTypeId(Types.BINARY),
0: 			Boolean.FALSE,
0: 			bitLengthO);
0: 
0: 		org.apache.derby.iapi.types.BitDataValue dvd = getDataValueFactory().getBitDataValue(nv);
0: 
0: 		dvd.setWidth(bitLength, 0, false);
0: 
0: 		setValue(dvd);
0: 	}
0: 
0: 	/**
0: 	 * Initializer for non-numeric types.  Needed for our subclasses
0: 	 *
0: 	 * @param typeCompilationFactory	The factory to get the
0: 	 *									DataTypeServicesFactory from
0: 	 * @param typeId	The Type ID of the datatype
0: 	 * @param nullable	True means the constant is nullable
0: 	 * @param maximumWidth	The maximum number of bytes in the data value
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(
0: 			Object typeId,
0: 			Object nullable,
0: 			Object maximumWidth)
0: 		throws StandardException
0: 	{
0: 		init(
0: 					typeId,
0: 					ReuseFactory.getInteger(0),
0: 					ReuseFactory.getInteger(0),
0: 					nullable,
0: 					maximumWidth);
0: 	}
0: 
0: 
0: 	/**
0: 	 * Return an Object representing the bind time value of this
0: 	 * expression tree.  If the expression tree does not evaluate to
0: 	 * a constant at bind time then we return null.
0: 	 * This is useful for bind time resolution of VTIs.
0: 	 * RESOLVE: What do we do for primitives?
0: 	 *
0: 	 * @return	An Object representing the bind time value of this expression tree.
0: 	 *			(null if not a bind time constant.)
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	Object getConstantValueAsObject()
0: 		throws StandardException
0: 	{
0: 		return value.getBytes();
0: 	}
0: 
0: 	/**
0: 	 * This generates the proper constant.  It is implemented
0: 	 * by every specific constant node (e.g. IntConstantNode).
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 * @return		The compiled Expression, 
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
0: 		throws StandardException
0: 	{
0: 		byte[] bytes = value.getBytes();
0: 
0: 		String hexLiteral = org.apache.derby.iapi.util.StringUtil.toHexString(bytes, 0, bytes.length);
0: 
0: 		mb.push(hexLiteral);
0: 		mb.push(0);
0: 		mb.push(hexLiteral.length());
0: 
0: 		mb.callMethod(VMOpcode.INVOKESTATIC, "org.apache.derby.iapi.util.StringUtil", "fromHexString",
0: 						"byte[]", 3);
0: 	}
0: 
0: 	
0: 	void setConstantWidth(ExpressionClassBuilder acb, MethodBuilder mb) {
0: 		if ((bitLength % 8) != 0) {
0: 			// temp for binary types.
0: 			mb.cast("org.apache.derby.iapi.types.VariableSizeDataValue");
0: 			mb.push(bitLength);
0: 			mb.push(0);
0: 			mb.push(false);
0: 			mb.callMethod(VMOpcode.INVOKEINTERFACE, null, "setWidth", "org.apache.derby.iapi.types.DataValueDescriptor", 3);
0: 		}
0: 	}
0: }
============================================================================