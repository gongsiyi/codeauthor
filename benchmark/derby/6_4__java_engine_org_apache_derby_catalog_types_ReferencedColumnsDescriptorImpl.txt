1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: 
1:eac0369: 
1:57465ef: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.catalog.ReferencedColumns;
1:eac0369: 
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:a6f9586: /**
1:a6f9586:  * For triggers, ReferencedColumnsDescriptorImpl object has 3 possibilites
1:a6f9586:  * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1:a6f9586:  *   is null - meaning the trigger is defined on specific columns but trigger 
1:a6f9586:  *   action does not reference any column through old/new transient variables. 
1:a6f9586:  *   Another reason for referencedColumnsInTriggerAction to be null(even though
1:a6f9586:  *   trigger action does reference columns though old/new transient variables 
1:a6f9586:  *   would be that we are in soft-upgrade mode for pre-10.7 databases and 
1:a6f9586:  *   hence we do not want to write anything about 
1:a6f9586:  *   referencedColumnsInTriggerAction for backward compatibility (DERBY-1482).
1:a6f9586:  *   eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1:a6f9586:  * 2)referencedColumns is null but referencedColumnsInTriggerAction is not null 
1:a6f9586:  *   - meaning the trigger is not defined on specific columns but trigger 
1:a6f9586:  *   action references column through old/new transient variables
1:a6f9586:  *   eg create trigger tr1 after update on t1 referencing old as oldt 
1:a6f9586:  *      for each row values(oldt.id); 
1:a6f9586:  * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1:a6f9586:  *   meaning the trigger is defined on specific columns and trigger action
1:a6f9586:  *   references column through old/new transient variables
1:a6f9586:  *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1:a6f9586:  *      for each row values(oldt.id); 
1:a6f9586:  */
1:eac0369: public class ReferencedColumnsDescriptorImpl
1:eac0369: 	implements ReferencedColumns, Formatable
4:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private int[] referencedColumns;
1:a6f9586: 	private int[] referencedColumnsInTriggerAction;
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Constructor for an ReferencedColumnsDescriptorImpl
1:eac0369: 	 *
1:eac0369: 	 * @param referencedColumns The array of referenced columns.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns)
1:eac0369: 	{
1:57465ef: 		this.referencedColumns = ArrayUtil.copy( referencedColumns );
5:eac0369: 	}
1:a6f9586: 
1:a6f9586: 	/**
1:a6f9586: 	 * Constructor for an ReferencedColumnsDescriptorImpl
1:a6f9586: 	 *
1:a6f9586: 	 * @param referencedColumns The array of referenced columns.
1:a6f9586: 	 * @param referencedColumnsInTriggerAction The array of referenced columns
1:a6f9586: 	 *   in trigger action through old/new transition variables.
1:a6f9586: 	 */
1:a6f9586: 
1:a6f9586: 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns,
1:a6f9586: 			int[] referencedColumnsInTriggerAction)
1:a6f9586: 	{
1:57465ef: 		this.referencedColumns = ArrayUtil.copy( referencedColumns );
1:57465ef: 		this.referencedColumnsInTriggerAction = ArrayUtil.copy( referencedColumnsInTriggerAction );
1:a6f9586: 	}
1:a6f9586: 
1:eac0369: 	/** Zero-argument constructor for Formatable interface */
1:eac0369: 	public ReferencedColumnsDescriptorImpl()
1:eac0369: 	{
1:a6f9586: 	}	
1:a6f9586: 	/**
1:eac0369: 	* @see ReferencedColumns#getReferencedColumnPositions
1:eac0369: 	*/
1:eac0369: 	public int[] getReferencedColumnPositions()
1:eac0369: 	{
1:57465ef: 		return ArrayUtil.copy( referencedColumns );
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:a6f9586: 	* @see ReferencedColumns#getTriggerActionReferencedColumnPositions
1:a6f9586: 	*/
1:a6f9586: 	public int[] getTriggerActionReferencedColumnPositions()
1:a6f9586: 	{
1:57465ef: 		return ArrayUtil.copy( referencedColumnsInTriggerAction );
1:a6f9586: 	}
1:eac0369: 
1:eac0369: 	/* Externalizable interface */
1:eac0369: 
1:eac0369: 	/**
1:a6f9586: 	 * For triggers, 3 possible scenarios
1:a6f9586: 	 * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1:a6f9586: 	 * is null - then following will get read
1:a6f9586: 	 *   referencedColumns.length
1:a6f9586: 	 *   individual elements from referencedColumns arrary
1:a6f9586: 	 *   eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1:a6f9586: 	 * 2)referencedColumns is null but referencedColumnsInTriggerAction is not 
1:a6f9586: 	 * null - then following will get read
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   referencedColumnsInTriggerAction.length
1:a6f9586: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1:a6f9586: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1:a6f9586: 	 *      for each row values(oldt.id); 
1:a6f9586: 	 * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1:a6f9586: 	 *   then following will get read
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   referencedColumns.length
1:a6f9586: 	 *   individual elements from referencedColumns arrary
1:a6f9586: 	 *   referencedColumnsInTriggerAction.length
1:a6f9586: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1:a6f9586: 	 *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1:a6f9586: 	 *      for each row values(oldt.id); 
1:a6f9586: 	 *      
1:a6f9586: 	 *  Scenario 1 for triggers is possible for all different releases of dbs
1:a6f9586: 	 *  ie both pre-10.7 and 10.7(and higher). But scenarios 2 and 3 are only
1:a6f9586: 	 *  possible with database at 10.7 or higher releases. Prior to 10.7, we
1:a6f9586: 	 *  did not collect any trigger action column info and hence
1:a6f9586: 	 *  referencedColumnsInTriggerAction will always be null for triggers
1:a6f9586: 	 *  created prior to 10.7 release. 
1:a6f9586: 	 *      
1:eac0369: 	 * @see java.io.Externalizable#readExternal
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException	Thrown on read error
1:eac0369: 	 */
1:a6f9586: 	public void readExternal(ObjectInput in) throws IOException 
1:eac0369: 	{
1:a6f9586: 	        int rcLength; 
1:a6f9586: 	        int versionNumber = in.readInt(); 
1:a6f9586: 
1:a6f9586:         	//A negative value for versionNumber means that the trigger
1:a6f9586:         	//action has column references through old/new transient
1:a6f9586:         	//variables. This will never happen with triggers created
1:a6f9586:         	//prior to 10.7 because prior to 10.7, we did not collect
1:a6f9586:         	//such information about trigger action columns. 
1:a6f9586: 	        if ( versionNumber < 0 ) {
1:a6f9586: 	        	//Now, check if there any trigger columns identified for
1:a6f9586: 	        	//this trigger.
1:a6f9586: 	            rcLength = in.readInt(); 
1:a6f9586: 	            if ( rcLength < 0 ) { 
1:a6f9586: 	            	//No trigger columns selected for this trigger. This is
1:a6f9586: 	            	//trigger scenario 2(as described in method level comments)
1:a6f9586: 	                rcLength = 0;
1:a6f9586: 	            } else {
1:a6f9586: 	            	//This trigger has both trigger columns and trigger action
1:a6f9586: 	            	//columns. This is trigger scenario 3(as described in
1:a6f9586: 	            	//method level comments)
1:a6f9586: 	                referencedColumns = new int[rcLength];
1:a6f9586: 	            }
1:a6f9586: 	        } else { 
1:a6f9586: 	        	//this trigger only has trigger columns saved on the disc.
1:a6f9586: 	        	//This is trigger scenario 1(as described in method level
1:a6f9586: 	        	//comments)
1:a6f9586: 	            rcLength = versionNumber; 
1:a6f9586: 	            referencedColumns = new int[rcLength]; 
1:a6f9586: 	        } 
1:a6f9586: 	         
1:a6f9586: 	        for (int i = 0; i < rcLength; i++) 
1:a6f9586: 	        { 
1:a6f9586: 	            //if we are in this loop, then it means that this trigger has
1:a6f9586: 	        	//been defined on specific columns.
1:a6f9586: 	            referencedColumns[i] = in.readInt(); 
1:a6f9586: 	        } 
1:a6f9586: 
1:a6f9586: 	        if ( versionNumber < 0 ) 
1:a6f9586: 	        { 
1:a6f9586: 	        	//As mentioned earlier, a negative value for versionNumber
1:a6f9586: 	        	//means that this trigger action references columns through
1:a6f9586: 	        	//old/new transient variables.
1:a6f9586: 	            int rctaLength = in.readInt(); 
1:a6f9586: 
1:a6f9586: 	            referencedColumnsInTriggerAction = new int[rctaLength];
1:a6f9586: 	            for (int i = 0; i < rctaLength; i++) 
1:a6f9586: 	            { 
1:a6f9586: 	                referencedColumnsInTriggerAction[i] = in.readInt(); 
1:a6f9586: 	            } 
1:a6f9586: 	        } 
1:a6f9586: 	} 
1:eac0369: 
1:eac0369: 	/**
1:a6f9586: 	 * For triggers, 3 possible scenarios
1:a6f9586: 	 * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1:a6f9586: 	 * is null - then following gets written
1:a6f9586: 	 *   referencedColumns.length
1:a6f9586: 	 *   individual elements from referencedColumns arrary
1:a6f9586: 	 *   
1:a6f9586: 	 * eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1:a6f9586: 	 * This can also happen for a trigger like following if the database is
1:a6f9586: 	 * at pre-10.7 level. This is for backward compatibility reasons because
1:a6f9586: 	 * pre-10.7 releases do not collect/work with trigger action column info
1:a6f9586: 	 * in system table. That functionality has been added starting 10.7 release
1:a6f9586: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1:a6f9586: 	 *      for each row values(oldt.id); 
1:a6f9586: 	 * 2)referencedColumns is null but referencedColumnsInTriggerAction is not 
1:a6f9586: 	 * null - then following gets written
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   referencedColumnsInTriggerAction.length
1:a6f9586: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1:a6f9586: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1:a6f9586: 	 *      for each row values(oldt.id); 
1:a6f9586: 	 * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1:a6f9586: 	 *   then following gets written
1:a6f9586: 	 *   -1
1:a6f9586: 	 *   referencedColumns.length
1:a6f9586: 	 *   individual elements from referencedColumns arrary
1:a6f9586: 	 *   referencedColumnsInTriggerAction.length
1:a6f9586: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1:a6f9586: 	 *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1:a6f9586: 	 *      for each row values(oldt.id); 
1:a6f9586: 	 *      
1:eac0369: 	 * @see java.io.Externalizable#writeExternal
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException	Thrown on write error
1:eac0369: 	 */
1:a6f9586: 	public void writeExternal(ObjectOutput out) throws IOException 
1:a6f9586: 	{ 
1:a6f9586: 		//null value for referencedColumnsInTriggerAction means one of 2 cases
1:a6f9586: 		//1)We are working in soft-upgrade mode dealing with databases lower
1:a6f9586: 		//than 10.7. Prior to 10.7 release, we did not keep track of trigger
1:a6f9586: 		//action columns
1:a6f9586: 		//2)We are working with 10.7(and higher) release database and the
1:a6f9586: 		//trigger action does not reference any column through old/new
1:a6f9586: 		//transient variables
1:a6f9586: 
1:a6f9586: 		//versionNumber will be -1 if referencedColumnsInTriggerAction is not
1:a6f9586: 		//null, meaning, we are dealing with 10.7 and higher release database
1:a6f9586: 		//and the trigger has referenced columns in trigger action through
1:a6f9586: 		//old/new transient variables. Otherwise, versionNumber will be the
1:a6f9586: 		//length of the arrary referencedColumns. This arrary holds the columns
1:a6f9586: 		//on which trigger is defined. The detailed meaning of these 2 arrays
1:a6f9586: 		//is described at the class level comments(towards the beginning of
1:a6f9586: 		//this class.
1:a6f9586:         int versionNumber = referencedColumnsInTriggerAction == null ? referencedColumns.length : -1; 
1:a6f9586: 
1:a6f9586:         if ( versionNumber < 0 ) { 
1:a6f9586: 	        out.writeInt( versionNumber ); 
1:a6f9586:         	//If we are here, then it means that trigger action references 
1:a6f9586:         	//columns through old/new transient variables. 
1:a6f9586:         	//First we will check if there are any trigger columns selected
1:a6f9586:         	//for this trigger. If yes, we will write information about 
1:a6f9586:         	//trigger columns and if not, then we will write -1 to indicate 
1:a6f9586:         	//that there are no trigger columns selected.
1:a6f9586:         	//After that, we will write info about trigger action columns.
1:a6f9586:             if ( referencedColumns != null ) { 
1:a6f9586:             	writeReferencedColumns(out);
1:a6f9586:             } else {
1:a6f9586:                 out.writeInt(versionNumber);
1:a6f9586:             }
1:a6f9586:             //Write info about trigger action columns referenced through 
1:a6f9586:             //old/new transient variables
1:a6f9586:             out.writeInt(referencedColumnsInTriggerAction.length); 
1:a6f9586:             for (int i = 0; i < referencedColumnsInTriggerAction.length; i++) 
1:a6f9586:             { 
1:a6f9586:                 out.writeInt(referencedColumnsInTriggerAction[i]); 
1:a6f9586:             } 
1:a6f9586:         } else {
1:a6f9586:         	//If we are here, then it means there are no references in 
1:a6f9586:         	//trigger action to old/new transient variables. But, three are
1:a6f9586:         	//trigger columns selected for this trigger. Write info about 
1:a6f9586:         	//trigger columns
1:a6f9586:         	writeReferencedColumns(out);
1:a6f9586:         }	         
1:a6f9586: 	} 
1:a6f9586: 	private void writeReferencedColumns(ObjectOutput out) throws IOException 
1:a6f9586: 	{ 
1:a6f9586:     	//trigger is defined on select columns. Write info about those columns
1:a6f9586:         out.writeInt( referencedColumns.length ); 
1:a6f9586:         for (int i = 0; i < referencedColumns.length; i++) 
1:a6f9586:         { 
1:a6f9586:             out.writeInt(referencedColumns[i]); 
1:a6f9586:         } 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* TypedFormat interface */
1:eac0369: 	public int getTypeFormatId()
1:eac0369: 	{
1:eac0369: 		return StoredFormatIds.REFERENCED_COLUMNS_DESCRIPTOR_IMPL_V01_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see java.lang.Object#toString
1:eac0369: 	  */
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:a6f9586: 		if (referencedColumns == null)
1:a6f9586: 			return "NULL";
1:a6f9586: 		
1:eac0369: 		StringBuffer sb = new StringBuffer(60);
1:eac0369: 
1:eac0369: 		sb.append('(');
1:eac0369: 		for (int index = 0; index < referencedColumns.length; index++)
1:eac0369: 		{
1:eac0369: 			if (index > 0)
1:eac0369: 				sb.append(',');
1:eac0369: 			sb.append(String.valueOf(referencedColumns[index]));
1:eac0369: 
1:eac0369: 		}
1:eac0369: 		sb.append(')');
1:eac0369: 		return sb.toString();
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:57465ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 		this.referencedColumns = ArrayUtil.copy( referencedColumns );
/////////////////////////////////////////////////////////////////////////
1: 		this.referencedColumns = ArrayUtil.copy( referencedColumns );
1: 		this.referencedColumnsInTriggerAction = ArrayUtil.copy( referencedColumnsInTriggerAction );
/////////////////////////////////////////////////////////////////////////
1: 		return ArrayUtil.copy( referencedColumns );
/////////////////////////////////////////////////////////////////////////
1: 		return ArrayUtil.copy( referencedColumnsInTriggerAction );
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a6f9586
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * For triggers, ReferencedColumnsDescriptorImpl object has 3 possibilites
1:  * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1:  *   is null - meaning the trigger is defined on specific columns but trigger 
1:  *   action does not reference any column through old/new transient variables. 
1:  *   Another reason for referencedColumnsInTriggerAction to be null(even though
1:  *   trigger action does reference columns though old/new transient variables 
1:  *   would be that we are in soft-upgrade mode for pre-10.7 databases and 
1:  *   hence we do not want to write anything about 
1:  *   referencedColumnsInTriggerAction for backward compatibility (DERBY-1482).
1:  *   eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1:  * 2)referencedColumns is null but referencedColumnsInTriggerAction is not null 
1:  *   - meaning the trigger is not defined on specific columns but trigger 
1:  *   action references column through old/new transient variables
1:  *   eg create trigger tr1 after update on t1 referencing old as oldt 
1:  *      for each row values(oldt.id); 
1:  * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1:  *   meaning the trigger is defined on specific columns and trigger action
1:  *   references column through old/new transient variables
1:  *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1:  *      for each row values(oldt.id); 
1:  */
/////////////////////////////////////////////////////////////////////////
1: 	private int[] referencedColumnsInTriggerAction;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Constructor for an ReferencedColumnsDescriptorImpl
1: 	 *
1: 	 * @param referencedColumns The array of referenced columns.
1: 	 * @param referencedColumnsInTriggerAction The array of referenced columns
1: 	 *   in trigger action through old/new transition variables.
1: 	 */
1: 
1: 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns,
1: 			int[] referencedColumnsInTriggerAction)
1: 	{
0: 		this.referencedColumns = referencedColumns;
0: 		this.referencedColumnsInTriggerAction = referencedColumnsInTriggerAction;
1: 	}
1: 
1: 	}	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	* @see ReferencedColumns#getTriggerActionReferencedColumnPositions
1: 	*/
1: 	public int[] getTriggerActionReferencedColumnPositions()
1: 	{
0: 		return referencedColumnsInTriggerAction;
1: 	}
1: 	 * For triggers, 3 possible scenarios
1: 	 * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1: 	 * is null - then following will get read
1: 	 *   referencedColumns.length
1: 	 *   individual elements from referencedColumns arrary
1: 	 *   eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1: 	 * 2)referencedColumns is null but referencedColumnsInTriggerAction is not 
1: 	 * null - then following will get read
1: 	 *   -1
1: 	 *   -1
1: 	 *   referencedColumnsInTriggerAction.length
1: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1: 	 *      for each row values(oldt.id); 
1: 	 * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1: 	 *   then following will get read
1: 	 *   -1
1: 	 *   referencedColumns.length
1: 	 *   individual elements from referencedColumns arrary
1: 	 *   referencedColumnsInTriggerAction.length
1: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1: 	 *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1: 	 *      for each row values(oldt.id); 
1: 	 *      
1: 	 *  Scenario 1 for triggers is possible for all different releases of dbs
1: 	 *  ie both pre-10.7 and 10.7(and higher). But scenarios 2 and 3 are only
1: 	 *  possible with database at 10.7 or higher releases. Prior to 10.7, we
1: 	 *  did not collect any trigger action column info and hence
1: 	 *  referencedColumnsInTriggerAction will always be null for triggers
1: 	 *  created prior to 10.7 release. 
1: 	 *      
1: 	public void readExternal(ObjectInput in) throws IOException 
1: 	        int rcLength; 
1: 	        int versionNumber = in.readInt(); 
1: 
1:         	//A negative value for versionNumber means that the trigger
1:         	//action has column references through old/new transient
1:         	//variables. This will never happen with triggers created
1:         	//prior to 10.7 because prior to 10.7, we did not collect
1:         	//such information about trigger action columns. 
1: 	        if ( versionNumber < 0 ) {
1: 	        	//Now, check if there any trigger columns identified for
1: 	        	//this trigger.
1: 	            rcLength = in.readInt(); 
1: 	            if ( rcLength < 0 ) { 
1: 	            	//No trigger columns selected for this trigger. This is
1: 	            	//trigger scenario 2(as described in method level comments)
1: 	                rcLength = 0;
1: 	            } else {
1: 	            	//This trigger has both trigger columns and trigger action
1: 	            	//columns. This is trigger scenario 3(as described in
1: 	            	//method level comments)
1: 	                referencedColumns = new int[rcLength];
1: 	            }
1: 	        } else { 
1: 	        	//this trigger only has trigger columns saved on the disc.
1: 	        	//This is trigger scenario 1(as described in method level
1: 	        	//comments)
1: 	            rcLength = versionNumber; 
1: 	            referencedColumns = new int[rcLength]; 
1: 	        } 
1: 	         
1: 	        for (int i = 0; i < rcLength; i++) 
1: 	        { 
1: 	            //if we are in this loop, then it means that this trigger has
1: 	        	//been defined on specific columns.
1: 	            referencedColumns[i] = in.readInt(); 
1: 	        } 
1: 
1: 	        if ( versionNumber < 0 ) 
1: 	        { 
1: 	        	//As mentioned earlier, a negative value for versionNumber
1: 	        	//means that this trigger action references columns through
1: 	        	//old/new transient variables.
1: 	            int rctaLength = in.readInt(); 
1: 
1: 	            referencedColumnsInTriggerAction = new int[rctaLength];
1: 	            for (int i = 0; i < rctaLength; i++) 
1: 	            { 
1: 	                referencedColumnsInTriggerAction[i] = in.readInt(); 
1: 	            } 
1: 	        } 
1: 	} 
1: 	 * For triggers, 3 possible scenarios
1: 	 * 1)referencedColumns is not null but referencedColumnsInTriggerAction
1: 	 * is null - then following gets written
1: 	 *   referencedColumns.length
1: 	 *   individual elements from referencedColumns arrary
1: 	 *   
1: 	 * eg create trigger tr1 after update of c1 on t1 for each row values(1); 
1: 	 * This can also happen for a trigger like following if the database is
1: 	 * at pre-10.7 level. This is for backward compatibility reasons because
1: 	 * pre-10.7 releases do not collect/work with trigger action column info
1: 	 * in system table. That functionality has been added starting 10.7 release
1: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1: 	 *      for each row values(oldt.id); 
1: 	 * 2)referencedColumns is null but referencedColumnsInTriggerAction is not 
1: 	 * null - then following gets written
1: 	 *   -1
1: 	 *   -1
1: 	 *   referencedColumnsInTriggerAction.length
1: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1: 	 *   eg create trigger tr1 after update on t1 referencing old as oldt 
1: 	 *      for each row values(oldt.id); 
1: 	 * 3)referencedColumns and referencedColumnsInTriggerAction are not null -
1: 	 *   then following gets written
1: 	 *   -1
1: 	 *   referencedColumns.length
1: 	 *   individual elements from referencedColumns arrary
1: 	 *   referencedColumnsInTriggerAction.length
1: 	 *   individual elements from referencedColumnsInTriggerAction arrary
1: 	 *   eg create trigger tr1 after update of c1 on t1 referencing old as oldt 
1: 	 *      for each row values(oldt.id); 
1: 	 *      
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{ 
1: 		//null value for referencedColumnsInTriggerAction means one of 2 cases
1: 		//1)We are working in soft-upgrade mode dealing with databases lower
1: 		//than 10.7. Prior to 10.7 release, we did not keep track of trigger
1: 		//action columns
1: 		//2)We are working with 10.7(and higher) release database and the
1: 		//trigger action does not reference any column through old/new
1: 		//transient variables
1: 
1: 		//versionNumber will be -1 if referencedColumnsInTriggerAction is not
1: 		//null, meaning, we are dealing with 10.7 and higher release database
1: 		//and the trigger has referenced columns in trigger action through
1: 		//old/new transient variables. Otherwise, versionNumber will be the
1: 		//length of the arrary referencedColumns. This arrary holds the columns
1: 		//on which trigger is defined. The detailed meaning of these 2 arrays
1: 		//is described at the class level comments(towards the beginning of
1: 		//this class.
1:         int versionNumber = referencedColumnsInTriggerAction == null ? referencedColumns.length : -1; 
1: 
1:         if ( versionNumber < 0 ) { 
1: 	        out.writeInt( versionNumber ); 
1:         	//If we are here, then it means that trigger action references 
1:         	//columns through old/new transient variables. 
1:         	//First we will check if there are any trigger columns selected
1:         	//for this trigger. If yes, we will write information about 
1:         	//trigger columns and if not, then we will write -1 to indicate 
1:         	//that there are no trigger columns selected.
1:         	//After that, we will write info about trigger action columns.
1:             if ( referencedColumns != null ) { 
1:             	writeReferencedColumns(out);
1:             } else {
1:                 out.writeInt(versionNumber);
1:             }
1:             //Write info about trigger action columns referenced through 
1:             //old/new transient variables
1:             out.writeInt(referencedColumnsInTriggerAction.length); 
1:             for (int i = 0; i < referencedColumnsInTriggerAction.length; i++) 
1:             { 
1:                 out.writeInt(referencedColumnsInTriggerAction[i]); 
1:             } 
1:         } else {
1:         	//If we are here, then it means there are no references in 
1:         	//trigger action to old/new transient variables. But, three are
1:         	//trigger columns selected for this trigger. Write info about 
1:         	//trigger columns
1:         	writeReferencedColumns(out);
1:         }	         
1: 	} 
1: 	private void writeReferencedColumns(ObjectOutput out) throws IOException 
1: 	{ 
1:     	//trigger is defined on select columns. Write info about those columns
1:         out.writeInt( referencedColumns.length ); 
1:         for (int i = 0; i < referencedColumns.length; i++) 
1:         { 
1:             out.writeInt(referencedColumns[i]); 
1:         } 
/////////////////////////////////////////////////////////////////////////
1: 		if (referencedColumns == null)
1: 			return "NULL";
1: 		
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.ReferencedColumns;
1: 
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: 
1: public class ReferencedColumnsDescriptorImpl
1: 	implements ReferencedColumns, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private int[] referencedColumns;
1: 
1: 	/**
1: 	 * Constructor for an ReferencedColumnsDescriptorImpl
1: 	 *
1: 	 * @param referencedColumns The array of referenced columns.
1: 	 */
1: 
1: 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns)
1: 	{
0: 		this.referencedColumns = referencedColumns;
1: 	}
1: 
1: 	/** Zero-argument constructor for Formatable interface */
1: 	public ReferencedColumnsDescriptorImpl()
1: 	{
1: 	}
1: 	/**
1: 	* @see ReferencedColumns#getReferencedColumnPositions
1: 	*/
1: 	public int[] getReferencedColumnPositions()
1: 	{
0: 		return referencedColumns;
1: 	}
1: 
1: 	/* Externalizable interface */
1: 
1: 	/**
1: 	 * @see java.io.Externalizable#readExternal
1: 	 *
1: 	 * @exception IOException	Thrown on read error
1: 	 */
0: 	public void readExternal(ObjectInput in) throws IOException
1: 	{
0: 		int rcLength = in.readInt();
0: 		referencedColumns = new int[rcLength];
0: 		for (int i = 0; i < rcLength; i++)
1: 		{
0: 			referencedColumns[i] = in.readInt();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see java.io.Externalizable#writeExternal
1: 	 *
1: 	 * @exception IOException	Thrown on write error
1: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
0: 		out.writeInt(referencedColumns.length);
0: 		for (int i = 0; i < referencedColumns.length; i++)
1: 		{
0: 			out.writeInt(referencedColumns[i]);
1: 		}
1: 	}
1: 
1: 	/* TypedFormat interface */
1: 	public int getTypeFormatId()
1: 	{
1: 		return StoredFormatIds.REFERENCED_COLUMNS_DESCRIPTOR_IMPL_V01_ID;
1: 	}
1: 
1: 	/**
1: 	  @see java.lang.Object#toString
1: 	  */
1: 	public String	toString()
1: 	{
1: 		StringBuffer sb = new StringBuffer(60);
1: 
1: 		sb.append('(');
1: 		for (int index = 0; index < referencedColumns.length; index++)
1: 		{
1: 			if (index > 0)
1: 				sb.append(',');
1: 			sb.append(String.valueOf(referencedColumns[index]));
1: 
1: 		}
1: 		sb.append(')');
1: 		return sb.toString();
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: 
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.ReferencedColumns;
0: 
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: 
0: public class ReferencedColumnsDescriptorImpl
0: 	implements ReferencedColumns, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private int[] referencedColumns;
0: 
0: 	/**
0: 	 * Constructor for an ReferencedColumnsDescriptorImpl
0: 	 *
0: 	 * @param referencedColumns The array of referenced columns.
0: 	 */
0: 
0: 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns)
0: 	{
0: 		this.referencedColumns = referencedColumns;
0: 	}
0: 
0: 	/** Zero-argument constructor for Formatable interface */
0: 	public ReferencedColumnsDescriptorImpl()
0: 	{
0: 	}
0: 	/**
0: 	* @see ReferencedColumns#getReferencedColumnPositions
0: 	*/
0: 	public int[] getReferencedColumnPositions()
0: 	{
0: 		return referencedColumns;
0: 	}
0: 
0: 	/* Externalizable interface */
0: 
0: 	/**
0: 	 * @see java.io.Externalizable#readExternal
0: 	 *
0: 	 * @exception IOException	Thrown on read error
0: 	 */
0: 	public void readExternal(ObjectInput in) throws IOException
0: 	{
0: 		int rcLength = in.readInt();
0: 		referencedColumns = new int[rcLength];
0: 		for (int i = 0; i < rcLength; i++)
0: 		{
0: 			referencedColumns[i] = in.readInt();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see java.io.Externalizable#writeExternal
0: 	 *
0: 	 * @exception IOException	Thrown on write error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(referencedColumns.length);
0: 		for (int i = 0; i < referencedColumns.length; i++)
0: 		{
0: 			out.writeInt(referencedColumns[i]);
0: 		}
0: 	}
0: 
0: 	/* TypedFormat interface */
0: 	public int getTypeFormatId()
0: 	{
0: 		return StoredFormatIds.REFERENCED_COLUMNS_DESCRIPTOR_IMPL_V01_ID;
0: 	}
0: 
0: 	/**
0: 	  @see java.lang.Object#toString
0: 	  */
0: 	public String	toString()
0: 	{
0: 		StringBuffer sb = new StringBuffer(60);
0: 
0: 		sb.append('(');
0: 		for (int index = 0; index < referencedColumns.length; index++)
0: 		{
0: 			if (index > 0)
0: 				sb.append(',');
0: 			sb.append(String.valueOf(referencedColumns[index]));
0: 
0: 		}
0: 		sb.append(')');
0: 		return sb.toString();
0: 	}
0: }
============================================================================