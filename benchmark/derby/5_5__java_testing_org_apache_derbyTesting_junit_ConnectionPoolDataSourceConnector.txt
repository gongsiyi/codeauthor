1:50ce77a: /*
1:50ce77a:  *
1:50ce77a:  * Derby - Class org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector
1:50ce77a:  *
1:50ce77a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:50ce77a:  * contributor license agreements.  See the NOTICE file distributed with
1:50ce77a:  * this work for additional information regarding copyright ownership.
1:50ce77a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:50ce77a:  * (the "License"); you may not use this file except in compliance with
1:50ce77a:  * the License.  You may obtain a copy of the License at
1:50ce77a:  *
1:50ce77a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:50ce77a:  *
1:50ce77a:  * Unless required by applicable law or agreed to in writing, 
1:50ce77a:  * software distributed under the License is distributed on an 
1:50ce77a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:50ce77a:  * either express or implied. See the License for the specific 
1:50ce77a:  * language governing permissions and limitations under the License.
1:50ce77a:  */
1:50ce77a: package org.apache.derbyTesting.junit;
1:50ce77a: 
1:50ce77a: import java.sql.Connection;
1:50ce77a: import java.sql.SQLException;
1:2510115: import java.util.Collections;
1:50ce77a: import java.util.HashMap;
1:2510115: import java.util.Map;
1:47f286f: import java.util.Properties;
1:50ce77a: 
1:50ce77a: import javax.sql.ConnectionPoolDataSource;
1:50ce77a: 
1:50ce77a: import junit.framework.AssertionFailedError;
1:51e6268: import org.apache.derby.shared.common.sanity.SanityManager;
1:50ce77a: 
1:50ce77a: /**
1:50ce77a:  * Connection factory using javax.sql.ConnectionPoolDataSource.
1:50ce77a:  * <p>
1:50ce77a:  * Connections are obtained by calling
1:50ce77a:  * <code>getPooledConnection.getConnection()</code>, and statement pooling is
1:50ce77a:  * enabled.
1:50ce77a:  */
1:50ce77a: public class ConnectionPoolDataSourceConnector implements Connector {
1:50ce77a:     
1:50ce77a:     private TestConfiguration config;
1:50ce77a:     /**
1:50ce77a:      * DataSource that maps to the database for the
1:50ce77a:      * configuration. The no-arg getPooledConnection() method
1:50ce77a:      * maps to the default user and password for the
1:50ce77a:      * configuration.
1:50ce77a:      */
1:50ce77a:     private ConnectionPoolDataSource ds;
1:50ce77a: 
1:50ce77a:     public void setConfiguration(TestConfiguration config) {
1:50ce77a:         
1:50ce77a:         this.config = config;
1:50ce77a:         ds = J2EEDataSource.getConnectionPoolDataSource(config, (HashMap) null);
1:4a515d8: 
1:50ce77a:         // Enable statement pooling by default.
1:4a515d8:         enableStatementPooling(ds);
1:4a515d8: 
1:4a515d8:         // NOTE: Any other setup of the data source that gets added here,
1:4a515d8:         // probably also needs to be added to singleUseDS(). Otherwise, that
1:4a515d8:         // setup won't be performed on data sources that are used to create
1:4a515d8:         // or shut down a database.
1:4a515d8: 
1:4a515d8:     }
1:4a515d8: 
1:4a515d8:     /**
1:4a515d8:      * Enable statement pooling on the specified data source.
1:4a515d8:      */
1:4a515d8:     private static void enableStatementPooling(ConnectionPoolDataSource ds) {
1:50ce77a:         // Note that this does not automatically test the pooling itself, but it
1:50ce77a:         // should test basic JDBC operations on the logical wrapper classes.
1:50ce77a:         try {
1:39b3237:             J2EEDataSource.setBeanProperty(ds, "maxStatements", 2);
1:50ce77a:         } catch (AssertionFailedError afe) {
1:50ce77a:             // Ignore this, it will fail later if it is an actual error.
1:50ce77a:             // An assertion error will be thrown every time until statement
1:50ce77a:             // pooling (or merely the property maxStatement) is implemented in
1:50ce77a:             // the embedded ConnectionPoolDataSource class.
1:50ce77a:         }
1:50ce77a:     }
1:50ce77a: 
1:50ce77a:     public Connection openConnection() throws SQLException {
1:50ce77a:         try {
1:50ce77a:             return ds.getPooledConnection().getConnection();
1:50ce77a:         } catch (SQLException e) {
1:50ce77a:             // Expected state for database not found.
1:50ce77a:             // For the client the generic 08004 is returned,
1:50ce77a:             // will just retry on that.
1:50ce77a:             String expectedState = 
1:50ce77a:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1:50ce77a: 
1:50ce77a:             // If there is a database not found exception
1:50ce77a:             // then retry the connection request with
1:50ce77a:             // a new DataSource with the createDtabase property set.
1:50ce77a:             if (!expectedState.equals(e.getSQLState()))
1:50ce77a:                 throw e;
1:47f286f:             return singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) ).
2:50ce77a:                    getPooledConnection().getConnection(); 
1:50ce77a:        }
1:50ce77a:     }
1:50ce77a: 
1:50ce77a:     public Connection openConnection(String databaseName) throws SQLException {
1:50ce77a:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:50ce77a:         try {
1:50ce77a:             return ds.getPooledConnection().getConnection();
1:50ce77a:         } catch (SQLException e) {
1:50ce77a:             // Expected state for database not found.
1:50ce77a:             // For the client the generic 08004 is returned,
1:50ce77a:             // will just retry on that.
1:50ce77a:             String expectedState = 
1:50ce77a:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1:50ce77a: 
1:50ce77a:             // If there is a database not found exception
1:50ce77a:             // then retry the connection request with
1:50ce77a:             // a new DataSource with the createDtabase property set.
1:50ce77a:             if (!expectedState.equals(e.getSQLState()))
1:50ce77a:                 throw e;
1:39c64b8:             ConnectionPoolDataSource tmpDs =
1:47f286f:                     singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) );
1:50ce77a:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:50ce77a:             return tmpDs.getPooledConnection().getConnection();
1:50ce77a:        }
1:50ce77a:     }
1:50ce77a: 
1:50ce77a:     public Connection openConnection(String user, String password)
3:50ce77a:             throws SQLException {
1:50ce77a:         try {
1:50ce77a:             return ds.getPooledConnection(user, password).getConnection();
1:50ce77a:         } catch (SQLException e) {
1:50ce77a:             // If there is a database not found exception
1:50ce77a:             // then retry the connection request with
1:50ce77a:             // a new DataSource with the createDatabase property set.
1:50ce77a:             if (!"XJ004".equals(e.getSQLState()))
1:50ce77a:                 throw e;
1:47f286f:             return singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) ).
1:50ce77a:                    getPooledConnection(user, password).getConnection(); 
1:50ce77a:        }
1:50ce77a:     }
1:50ce77a: 
1:50ce77a:     public Connection openConnection(String databaseName,
1:50ce77a:                                      String user,
1:50ce77a:                                      String password)
1:47f286f:             throws SQLException
1:47f286f:     {
1:47f286f:         return openConnection( databaseName, user, password, null );
1:47f286f:     }
1:47f286f:     
1:47f286f:     public  Connection openConnection
1:47f286f:         (String databaseName, String user, String password, Properties connectionProperties)
1:47f286f:          throws SQLException
1:47f286f:     {
1:50ce77a:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:50ce77a:         try {
1:50ce77a:             return ds.getPooledConnection(user, password).getConnection();
1:50ce77a:         } catch (SQLException e) {
1:50ce77a:             // If there is a database not found exception
1:50ce77a:             // then retry the connection request with
1:50ce77a:             // a new DataSource with the createDatabase property set.
1:50ce77a:             if (!"XJ004".equals(e.getSQLState()))
1:50ce77a:                 throw e;
1:2510115:             HashMap<String, Object> hm =
1:2510115:                     DataSourceConnector.makeCreateDBAttributes( config );
1:2510115:             DataSourceConnector.copyProperties(connectionProperties, hm);
1:47f286f:             ConnectionPoolDataSource tmpDs = singleUseDS( hm );
1:50ce77a:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:50ce77a:             return tmpDs.getPooledConnection(user, password).getConnection(); 
1:50ce77a:        }
1:50ce77a:     }
1:50ce77a: 
1:50ce77a:     public void shutDatabase() throws SQLException {
1:47f286f:         singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) ).
1:eb47230:                 getPooledConnection().getConnection();
1:eb47230:         config.waitForShutdownComplete(getDatabaseName());
1:50ce77a:     }
1:50ce77a: 
1:51e6268:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:51e6268:         if (SanityManager.DEBUG) {
1:51e6268:              // "false" only used with driver manager
1:51e6268:             SanityManager.ASSERT(deregisterDriver);
1:51e6268:         }
1:51e6268: 
2:50ce77a:         ConnectionPoolDataSource tmpDs =
1:47f286f:                 singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) );
1:39c64b8:         JDBCDataSource.setBeanProperty(tmpDs, "databaseName", "");
1:39c64b8:         tmpDs.getPooledConnection();
1:50ce77a:     }
1:50ce77a:     
1:25c1e7b:     public void setLoginTimeout( int seconds ) throws SQLException
1:25c1e7b:     {
1:25c1e7b:         ds.setLoginTimeout( seconds );
1:25c1e7b:     }
1:25c1e7b:     
1:25c1e7b:     public int getLoginTimeout() throws SQLException
1:25c1e7b:     {
1:25c1e7b:         return ds.getLoginTimeout();
1:25c1e7b:     }
1:25c1e7b:     
1:eb47230:     public String getDatabaseName() {
1:eb47230:         String databaseName=null;
1:eb47230:         try {
1:eb47230:             // get the physical database name
1:eb47230:             databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
1:eb47230:         } catch (Exception e) {
1:eb47230:             e.printStackTrace();
1:eb47230:         }
1:eb47230:         return databaseName;
1:eb47230:     }
1:eb47230:     
1:50ce77a:     /**
1:50ce77a:      * Get a connection from a single use ConnectionPoolDataSource configured
1:50ce77a:      * from the configuration but with the passed in property set.
1:50ce77a:      */
1:47f286f:     private ConnectionPoolDataSource singleUseDS( HashMap hm )
1:47f286f:        throws SQLException
1:47f286f:     {
1:50ce77a:         ConnectionPoolDataSource sds =
1:50ce77a:                 J2EEDataSource.getConnectionPoolDataSource(config, hm);
1:4a515d8: 
1:4a515d8:         // Enable statement pooling by default for single-use data sources
1:4a515d8:         // too, just like it's enabled for the default data source in
1:4a515d8:         // setConfiguration().
1:4a515d8:         enableStatementPooling(sds);
1:4a515d8: 
1:50ce77a:         return sds;
1:50ce77a:     }
1:50ce77a: 
1:50ce77a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             J2EEDataSource.setBeanProperty(ds, "maxStatements", 2);
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:     public void setLoginTimeout( int seconds ) throws SQLException
1:     {
1:         ds.setLoginTimeout( seconds );
1:     }
1:     
1:     public int getLoginTimeout() throws SQLException
1:     {
1:         return ds.getLoginTimeout();
1:     }
1:     
commit:47f286f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:             return singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) ).
/////////////////////////////////////////////////////////////////////////
1:                     singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) );
/////////////////////////////////////////////////////////////////////////
1:             return singleUseDS( DataSourceConnector.makeCreateDBAttributes( config ) ).
/////////////////////////////////////////////////////////////////////////
1:             throws SQLException
1:     {
1:         return openConnection( databaseName, user, password, null );
1:     }
1:     
1:     public  Connection openConnection
1:         (String databaseName, String user, String password, Properties connectionProperties)
1:          throws SQLException
1:     {
/////////////////////////////////////////////////////////////////////////
0:             HashMap hm = DataSourceConnector.makeCreateDBAttributes( config );
0:             if ( connectionProperties != null ) { hm.putAll( connectionProperties ); }
1:             ConnectionPoolDataSource tmpDs = singleUseDS( hm );
1:         singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) ).
1:                 singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) );
/////////////////////////////////////////////////////////////////////////
1:     private ConnectionPoolDataSource singleUseDS( HashMap hm )
1:        throws SQLException
1:     {
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51e6268
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:         if (SanityManager.DEBUG) {
1:              // "false" only used with driver manager
1:             SanityManager.ASSERT(deregisterDriver);
1:         }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:             HashMap<String, Object> hm =
1:                     DataSourceConnector.makeCreateDBAttributes( config );
1:             DataSourceConnector.copyProperties(connectionProperties, hm);
commit:4a515d8
/////////////////////////////////////////////////////////////////////////
1: 
1:         enableStatementPooling(ds);
1: 
1:         // NOTE: Any other setup of the data source that gets added here,
1:         // probably also needs to be added to singleUseDS(). Otherwise, that
1:         // setup won't be performed on data sources that are used to create
1:         // or shut down a database.
1: 
1:     }
1: 
1:     /**
1:      * Enable statement pooling on the specified data source.
1:      */
1:     private static void enableStatementPooling(ConnectionPoolDataSource ds) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Enable statement pooling by default for single-use data sources
1:         // too, just like it's enabled for the default data source in
1:         // setConfiguration().
1:         enableStatementPooling(sds);
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:eb47230
/////////////////////////////////////////////////////////////////////////
1:                 getPooledConnection().getConnection();
1:         config.waitForShutdownComplete(getDatabaseName());
/////////////////////////////////////////////////////////////////////////
1:     public String getDatabaseName() {
1:         String databaseName=null;
1:         try {
1:             // get the physical database name
1:             databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:         return databaseName;
1:     }
1:     
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:39c64b8
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource tmpDs =
0:                 singleUseDS("shutdownDatabase", "shutdown");
1:         JDBCDataSource.setBeanProperty(tmpDs, "databaseName", "");
1:         tmpDs.getPooledConnection();
commit:50ce77a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: 
1: import javax.sql.ConnectionPoolDataSource;
1: 
0: import junit.framework.Assert;
1: import junit.framework.AssertionFailedError;
1: 
1: /**
1:  * Connection factory using javax.sql.ConnectionPoolDataSource.
1:  * <p>
1:  * Connections are obtained by calling
1:  * <code>getPooledConnection.getConnection()</code>, and statement pooling is
1:  * enabled.
1:  */
1: public class ConnectionPoolDataSourceConnector implements Connector {
1:     
1:     private TestConfiguration config;
1:     /**
1:      * DataSource that maps to the database for the
1:      * configuration. The no-arg getPooledConnection() method
1:      * maps to the default user and password for the
1:      * configuration.
1:      */
1:     private ConnectionPoolDataSource ds;
1: 
1:     public void setConfiguration(TestConfiguration config) {
1:         
1:         this.config = config;
1:         ds = J2EEDataSource.getConnectionPoolDataSource(config, (HashMap) null);
1:         // Enable statement pooling by default.
1:         // Note that this does not automatically test the pooling itself, but it
1:         // should test basic JDBC operations on the logical wrapper classes.
1:         try {
0:             J2EEDataSource.setBeanProperty(ds, "maxStatements", new Integer(2));
1:         } catch (AssertionFailedError afe) {
1:             // Ignore this, it will fail later if it is an actual error.
1:             // An assertion error will be thrown every time until statement
1:             // pooling (or merely the property maxStatement) is implemented in
1:             // the embedded ConnectionPoolDataSource class.
1:         }
1:     }
1: 
1:     public Connection openConnection() throws SQLException {
1:         try {
1:             return ds.getPooledConnection().getConnection();
1:         } catch (SQLException e) {
1:             // Expected state for database not found.
1:             // For the client the generic 08004 is returned,
1:             // will just retry on that.
1:             String expectedState = 
1:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1: 
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDtabase property set.
1:             if (!expectedState.equals(e.getSQLState()))
1:                 throw e;
0:             return singleUseDS("createDatabase", "create").
1:                    getPooledConnection().getConnection(); 
1:        }
1:     }
1: 
1:     public Connection openConnection(String databaseName) throws SQLException {
1:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:         try {
1:             return ds.getPooledConnection().getConnection();
1:         } catch (SQLException e) {
1:             // Expected state for database not found.
1:             // For the client the generic 08004 is returned,
1:             // will just retry on that.
1:             String expectedState = 
1:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1: 
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDtabase property set.
1:             if (!expectedState.equals(e.getSQLState()))
1:                 throw e;
1:             ConnectionPoolDataSource tmpDs =
0:                     singleUseDS("createDatabase", "create");
1:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:             return tmpDs.getPooledConnection().getConnection();
1:        }
1:     }
1: 
1:     public Connection openConnection(String user, String password)
1:             throws SQLException {
1:         try {
1:             return ds.getPooledConnection(user, password).getConnection();
1:         } catch (SQLException e) {
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDatabase property set.
1:             if (!"XJ004".equals(e.getSQLState()))
1:                 throw e;
0:             return singleUseDS("createDatabase", "create").
1:                    getPooledConnection(user, password).getConnection(); 
1:        }
1:     }
1: 
1:     public Connection openConnection(String databaseName,
1:                                      String user,
1:                                      String password)
1:             throws SQLException {
1:         JDBCDataSource.setBeanProperty(ds, "databaseName", databaseName);
1:         try {
1:             return ds.getPooledConnection(user, password).getConnection();
1:         } catch (SQLException e) {
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a new DataSource with the createDatabase property set.
1:             if (!"XJ004".equals(e.getSQLState()))
1:                 throw e;
1:             ConnectionPoolDataSource tmpDs =
0:                     singleUseDS("createDatabase", "create");
1:             JDBCDataSource.setBeanProperty(tmpDs, "databaseName", databaseName);
1:             return tmpDs.getPooledConnection(user, password).getConnection(); 
1:        }
1:     }
1: 
1:     public void shutDatabase() throws SQLException {
0:         singleUseDS("shutdownDatabase", "shutdown").
1:                 getPooledConnection().getConnection();     
1:     }
1: 
0:     public void shutEngine() throws SQLException {
0:         Assert.fail("shutdown engine not implemened");
1:     }
1:     
1:     /**
1:      * Get a connection from a single use ConnectionPoolDataSource configured
1:      * from the configuration but with the passed in property set.
1:      */
0:     private ConnectionPoolDataSource singleUseDS(String property, String value)
1:        throws SQLException {
0:         HashMap hm = JDBCDataSource.getDataSourceProperties(config);
0:         hm.put(property, value);
1:         ConnectionPoolDataSource sds =
1:                 J2EEDataSource.getConnectionPoolDataSource(config, hm);
1:         return sds;
1:     }
1: 
1: }
============================================================================