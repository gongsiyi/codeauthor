1:7d788ea: /**
1:7d788ea:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SynonymTest
1:7d788ea:  *  
1:7d788ea:  * Licensed to the Apache Software Foundation (ASF) under one
1:7d788ea:  * or more contributor license agreements.  See the NOTICE file
1:7d788ea:  * distributed with this work for additional information
1:7d788ea:  * regarding copyright ownership.  The ASF licenses this file
1:7d788ea:  * to you under the Apache License, Version 2.0 (the
1:7d788ea:  * "License"); you may not use this file except in compliance
1:7d788ea:  * with the License.  You may obtain a copy of the License at
1:7d788ea:  *
1:7d788ea:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7d788ea:  *
1:7d788ea:  * Unless required by applicable law or agreed to in writing,
1:7d788ea:  * software distributed under the License is distributed on an
1:7d788ea:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7d788ea:  * KIND, either express or implied.  See the License for the
1:7d788ea:  * specific language governing permissions and limitations
1:7d788ea:  * under the License.
1:7d788ea:  */
1:7d788ea: package org.apache.derbyTesting.functionTests.tests.lang;
1:7d788ea: 
1:be72b14: import java.sql.DatabaseMetaData;
1:1ae02c9: import java.sql.ResultSet;
1:7d788ea: import java.sql.SQLException;
1:7d788ea: import java.sql.Statement;
1:7d788ea: import junit.framework.Test;
1:7d788ea: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:190e523: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:98ec83e: import org.apache.derbyTesting.junit.JDBC;
1:7d788ea: 
1:7d788ea: /**
1:7d788ea:  * Synonym testing using junit
1:7d788ea:  */
1:7d788ea: public class SynonymTest extends BaseJDBCTestCase {
1:7d788ea: 
1:7d788ea:     /**
1:7d788ea:      * Basic constructor.
1:7d788ea:      */
1:7d788ea:     public SynonymTest(String name) {
1:7d788ea:         super(name);
1:7d788ea:     }
1:7d788ea: 
1:7d788ea:     /**
1:7d788ea:      * Create a suite of tests.
1:7d788ea:      */
1:7d788ea:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite(SynonymTest.class, "SynonymTest");
1:1ae02c9: 
1:190e523:         return new CleanDatabaseTestSetup(suite);
1:7d788ea:     }
1:7d788ea: 
1:7d788ea:     /**
1:7d788ea:      * The test makes sure that we correctly throw dependency exception when
1:7d788ea:      * user requests to drop a synonym which has dependent objects on it. Once
1:7d788ea:      * the dependency is removed, we should be able to drop the synonym.
1:7d788ea:      * @throws SQLException
1:7d788ea:      */
1:7d788ea:     public void testViewDependency() throws SQLException {
1:7d788ea:         Statement stmt = createStatement();  
1:7d788ea:         stmt.executeUpdate("create synonym mySyn for sys.systables");
1:7d788ea:         stmt.executeUpdate("create view v1 as select * from mySyn");
1:7d788ea:         stmt.executeUpdate("create view v2 as select * from v1");
1:7d788ea:         // Drop synonym should fail since it is used in two views.
1:7d788ea:         assertStatementError("X0Y23", stmt, "drop synonym mySyn");
1:7d788ea:         stmt.executeUpdate("drop view v2");
1:7d788ea:         // fails still because of view v1's dependency
1:7d788ea:         assertStatementError("X0Y23", stmt, "drop synonym mySyn");
1:7d788ea:         stmt.executeUpdate("drop view v1");
1:7d788ea:         stmt.executeUpdate("drop synonym mySyn");
1:7d788ea:         stmt.close();
1:7d788ea:     }
1:7d788ea: 
1:190e523:     /**
1:be72b14:      * DERBY-5244 DatabaseMetaData.getColumns(null, null, tableName, null) 
1:be3da0b:      * 	does not return the columns meta for a SYNONYM. This is because for
1:be3da0b:      *  synonyms, we do not add any rows in SYSCOLUMNS. But the metadata query 
1:be3da0b:      *  for DatabaseMetaData.getColumns() looks at SYSCOLUMNS to get the 
1:be3da0b:      *  resultset. Views and Tables do not have problems because we do keep
1:be3da0b:      *  their columns information in SYSCOLUMNS.
1:be72b14:      * 
1:be72b14:      * Test DatabaseMetaData.getColumns call on synonyms
1:be72b14:      *
1:be72b14:      * This test confirms the behavior noticed in DERBY-5244.
1:be72b14:      */
1:be72b14:     public void testMetaDataCallOnSynonymsDERBY5244()
1:be72b14:         throws SQLException
1:be72b14:     {
1:be72b14:             Statement st = createStatement();
1:be72b14:             st.executeUpdate("create table t1Derby5422 "+
1:be72b14:             		"( c11 int not null, c12 char(2) )");
1:be72b14:             //Create a synonym on table t1Derby5422
1:be72b14:             st.executeUpdate("create synonym s1Derby5422 for t1Derby5422");
1:be3da0b:             st.executeUpdate("create view v1Derby5422 as select * from t1Derby5422");
1:be72b14:             
1:be72b14:             //Verify that the synonym has been created successfully by
1:be72b14:             // doing a select from it
1:be72b14:             ResultSet rs = st.executeQuery("select * from S1DERBY5422");
1:be72b14:             JDBC.assertEmpty(rs);
1:be72b14:             DatabaseMetaData dbmd = getConnection().getMetaData();
1:be72b14:             //Derby can find metadata info for the base table
1:be72b14:             rs = dbmd.getColumns(null, null, "T1DERBY5422", null);
1:be72b14:             JDBC.assertDrainResultsHasData(rs);
1:be3da0b:             //Derby can find metadata info for the view
1:be3da0b:             rs = dbmd.getColumns(null, null, "V1DERBY5422", null);
1:be3da0b:             JDBC.assertDrainResultsHasData(rs);
1:be72b14:             //But Derby does not locate the metadata info for synonym
1:be72b14:             rs = dbmd.getColumns(null, null, "S1DERBY5422", null);
1:be72b14:             JDBC.assertEmpty(rs);
1:be72b14:     }
1:be72b14: 
1:be72b14:     /**
1:190e523:      * Test that synonyms are dereferenced properly for a searched DELETE.
1:190e523:      *
1:190e523:      * This test verifies that DERBY-4110 is fixed.
1:190e523:      */
1:190e523:     public void testSynonymsInSearchedDeleteDERBY4110()
1:190e523:         throws SQLException
1:190e523:     {
1:190e523:         Statement st = createStatement();
1:190e523:         st.executeUpdate("create schema test1");
1:190e523:         st.executeUpdate("create schema test2");
1:190e523:         st.executeUpdate("create table test1.t1 ( id bigint not null )");
1:190e523:         st.executeUpdate("insert into test1.t1 values (1),(2)");
1:190e523:         st.executeUpdate("create synonym test2.t1 for test1.t1");
1:190e523:         st.executeUpdate("create unique index idx4110 on test1.t1 (id)");
1:190e523:         st.executeUpdate("set schema test2");
1:190e523:         st.executeUpdate("delete from t1 where id = 2"); // DERBY-4110 here
1:190e523:         st.executeUpdate("drop synonym test2.t1");
1:190e523:         st.executeUpdate("drop table test1.t1");
1:190e523:         st.executeUpdate("drop schema test2 restrict");
1:190e523:         st.executeUpdate("drop schema test1 restrict");
1:7d788ea:     }
1:7d788ea: 
1:98ec83e:     /**
1:98ec83e:      * Verify the fix for DERBY-5168. SynonymAliasInfo.toString() used to
1:98ec83e:      * return a value with incorrect syntax if the synonym referred to a
1:98ec83e:      * table that had a double quote character either in its name or in the
1:98ec83e:      * schema name.
1:98ec83e:      */
1:98ec83e:     public void testSynonymsForTablesWithDoubleQuotes() throws SQLException {
1:98ec83e:         setAutoCommit(false);
1:98ec83e:         Statement s = createStatement();
1:98ec83e:         s.execute("create schema \"\"\"\"");
1:98ec83e:         s.execute("create table \"\"\"\".\"\"\"\" (x int)");
1:98ec83e:         s.execute("create synonym derby_5168_synonym for \"\"\"\".\"\"\"\"");
2:98ec83e: 
1:98ec83e:         // We can exercise SynonymAliasInfo.toString() by reading the ALIASINFO
1:98ec83e:         // column in SYS.SYSALIASES. This assert used to fail before the fix.
1:98ec83e:         JDBC.assertSingleValueResultSet(
1:98ec83e:             s.executeQuery(
1:98ec83e:                 "select aliasinfo from sys.sysaliases " +
1:98ec83e:                 "where alias = 'DERBY_5168_SYNONYM'"),
1:98ec83e:             "\"\"\"\".\"\"\"\"");
1:98ec83e:     }
1:190e523: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite(SynonymTest.class, "SynonymTest");
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:be3da0b
/////////////////////////////////////////////////////////////////////////
1:      * 	does not return the columns meta for a SYNONYM. This is because for
1:      *  synonyms, we do not add any rows in SYSCOLUMNS. But the metadata query 
1:      *  for DatabaseMetaData.getColumns() looks at SYSCOLUMNS to get the 
1:      *  resultset. Views and Tables do not have problems because we do keep
1:      *  their columns information in SYSCOLUMNS.
/////////////////////////////////////////////////////////////////////////
1:             st.executeUpdate("create view v1Derby5422 as select * from t1Derby5422");
/////////////////////////////////////////////////////////////////////////
1:             //Derby can find metadata info for the view
1:             rs = dbmd.getColumns(null, null, "V1DERBY5422", null);
1:             JDBC.assertDrainResultsHasData(rs);
commit:be72b14
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DatabaseMetaData;
0: import java.sql.ResultSet;
/////////////////////////////////////////////////////////////////////////
1:      * DERBY-5244 DatabaseMetaData.getColumns(null, null, tableName, null) 
0:      * 	does not return the columns meta for a SYNONYM
1:      * 
1:      * Test DatabaseMetaData.getColumns call on synonyms
1:      *
1:      * This test confirms the behavior noticed in DERBY-5244.
1:      */
1:     public void testMetaDataCallOnSynonymsDERBY5244()
1:         throws SQLException
1:     {
1:             Statement st = createStatement();
1:             st.executeUpdate("create table t1Derby5422 "+
1:             		"( c11 int not null, c12 char(2) )");
1:             //Create a synonym on table t1Derby5422
1:             st.executeUpdate("create synonym s1Derby5422 for t1Derby5422");
1:             
1:             //Verify that the synonym has been created successfully by
1:             // doing a select from it
1:             ResultSet rs = st.executeQuery("select * from S1DERBY5422");
1:             JDBC.assertEmpty(rs);
1:             DatabaseMetaData dbmd = getConnection().getMetaData();
1:             //Derby can find metadata info for the base table
1:             rs = dbmd.getColumns(null, null, "T1DERBY5422", null);
1:             JDBC.assertDrainResultsHasData(rs);
1:             //But Derby does not locate the metadata info for synonym
1:             rs = dbmd.getColumns(null, null, "S1DERBY5422", null);
1:             JDBC.assertEmpty(rs);
1:     }
1: 
1:     /**
commit:7d788ea
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.SynonymTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: /**
1:  * Synonym testing using junit
1:  */
1: public class SynonymTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Basic constructor.
1:      */
1:     public SynonymTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite(SynonymTest.class, "SynonymTest");
0:         return suite;
1:     }
1: 
1:     /**
1:      * The test makes sure that we correctly throw dependency exception when
1:      * user requests to drop a synonym which has dependent objects on it. Once
1:      * the dependency is removed, we should be able to drop the synonym.
1:      * @throws SQLException
1:      */
1:     public void testViewDependency() throws SQLException {
1:         Statement stmt = createStatement();  
1:         stmt.executeUpdate("create synonym mySyn for sys.systables");
1:         stmt.executeUpdate("create view v1 as select * from mySyn");
1:         stmt.executeUpdate("create view v2 as select * from v1");
1:         // Drop synonym should fail since it is used in two views.
1:         assertStatementError("X0Y23", stmt, "drop synonym mySyn");
1:         stmt.executeUpdate("drop view v2");
1:         // fails still because of view v1's dependency
1:         assertStatementError("X0Y23", stmt, "drop synonym mySyn");
1:         stmt.executeUpdate("drop view v1");
1:         stmt.executeUpdate("drop synonym mySyn");
1:         stmt.close();
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:98ec83e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Verify the fix for DERBY-5168. SynonymAliasInfo.toString() used to
1:      * return a value with incorrect syntax if the synonym referred to a
1:      * table that had a double quote character either in its name or in the
1:      * schema name.
1:      */
1:     public void testSynonymsForTablesWithDoubleQuotes() throws SQLException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.execute("create schema \"\"\"\"");
1:         s.execute("create table \"\"\"\".\"\"\"\" (x int)");
1:         s.execute("create synonym derby_5168_synonym for \"\"\"\".\"\"\"\"");
1: 
1:         // We can exercise SynonymAliasInfo.toString() by reading the ALIASINFO
1:         // column in SYS.SYSALIASES. This assert used to fail before the fix.
1:         JDBC.assertSingleValueResultSet(
1:             s.executeQuery(
1:                 "select aliasinfo from sys.sysaliases " +
1:                 "where alias = 'DERBY_5168_SYNONYM'"),
1:             "\"\"\"\".\"\"\"\"");
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:190e523
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         return new CleanDatabaseTestSetup(suite);
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Test that synonyms are dereferenced properly for a searched DELETE.
1:      *
1:      * This test verifies that DERBY-4110 is fixed.
1:      */
1:     public void testSynonymsInSearchedDeleteDERBY4110()
1:         throws SQLException
1:     {
1:         Statement st = createStatement();
1:         st.executeUpdate("create schema test1");
1:         st.executeUpdate("create schema test2");
1:         st.executeUpdate("create table test1.t1 ( id bigint not null )");
1:         st.executeUpdate("insert into test1.t1 values (1),(2)");
1:         st.executeUpdate("create synonym test2.t1 for test1.t1");
1:         st.executeUpdate("create unique index idx4110 on test1.t1 (id)");
1:         st.executeUpdate("set schema test2");
1:         st.executeUpdate("delete from t1 where id = 2"); // DERBY-4110 here
1:         st.executeUpdate("drop synonym test2.t1");
1:         st.executeUpdate("drop table test1.t1");
1:         st.executeUpdate("drop schema test2 restrict");
1:         st.executeUpdate("drop schema test1 restrict");
1:     }
============================================================================