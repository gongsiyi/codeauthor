2:95a483d: /*
14:95a483d: 
1:95a483d:    Derby - Class org.apache.derby.impl.sql.compile.GenerationClauseNode
1:95a483d: 
1:95a483d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:95a483d:    contributor license agreements.  See the NOTICE file distributed with
1:95a483d:    this work for additional information regarding copyright ownership.
1:95a483d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:95a483d:    (the "License"); you may not use this file except in compliance with
1:95a483d:    the License.  You may obtain a copy of the License at
1:95a483d: 
1:95a483d:       http://www.apache.org/licenses/LICENSE-2.0
1:95a483d: 
1:95a483d:    Unless required by applicable law or agreed to in writing, software
1:95a483d:    distributed under the License is distributed on an "AS IS" BASIS,
1:95a483d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:95a483d:    See the License for the specific language governing permissions and
1:95a483d:    limitations under the License.
1:95a483d: 
1:95a483d:  */
1:95a483d: 
1:95a483d: package	org.apache.derby.impl.sql.compile;
1:95a483d: 
1:c0a807c: import java.util.List;
1:95a483d: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:b737f16: import org.apache.derby.iapi.sql.compile.Visitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.depend.ProviderList;
1:95a483d: 
1:95a483d: /**
1:95a483d:  * This node describes a Generation Clause in a column definition.
1:95a483d:  *
1:95a483d:  */
1:3bb140c: class GenerationClauseNode extends ValueNode
1:95a483d: {
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:95a483d:     // CONSTANTS
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:95a483d:     // STATE
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d:     private ValueNode _generationExpression;
1:95a483d:     private String      _expressionText;
1:95a483d: 
1:95a483d:     private ValueNode _boundExpression;
1:95a483d: 	private ProviderList _apl;
1:95a483d: 
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:3bb140c:     // CONSTRUCTOR
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d: 
1:3bb140c:     GenerationClauseNode( ValueNode generationExpression,
1:3bb140c:                           String expressionText,
1:3bb140c:                           ContextManager cm)
1:95a483d:     {
1:3bb140c:         super(cm);
1:3bb140c:         _generationExpression = generationExpression;
1:3bb140c:         _expressionText = expressionText;
1:95a483d: 	}
1:95a483d: 
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:95a483d:     //  ACCESSORS
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d:     /** Get the defining text of this generation clause */
1:95a483d:     public  String  getExpressionText() { return _expressionText; }
1:95a483d:     
1:95a483d: 	/** Set the auxiliary provider list. */
1:95a483d: 	void setAuxiliaryProviderList(ProviderList apl) { _apl = apl; }
1:95a483d: 
1:95a483d: 	/** Return the auxiliary provider list. */
1:3bb140c:     ProviderList getAuxiliaryProviderList() { return _apl; }
1:95a483d: 
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:95a483d:     // QueryTreeNode BEHAVIOR
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d: 	/**
1:95a483d: 	 * Binding the generation clause.
1:95a483d: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression
1:71c8e86:         ( FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:95a483d:         throws StandardException
1:95a483d: 	{
1:09c2697:         _boundExpression = _generationExpression.bindExpression( fromList, subqueryList, aggregates );
1:95a483d: 
1:95a483d:         return _boundExpression;
1:95a483d: 	}
1:95a483d: 
1:95a483d: 	/**
1:95a483d: 	 * Generate code for this node.
1:95a483d: 	 *
1:95a483d: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:95a483d: 	 * @param mb	The method the code to place the code
1:95a483d: 	 *
1:95a483d: 	 * @exception StandardException		Thrown on error
1:95a483d: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:95a483d: 									throws StandardException
1:95a483d: 	{
1:95a483d:         throw StandardException.newException( SQLState.HEAP_UNIMPLEMENTED_FEATURE );
1:95a483d: 	}
1:7168d7d: 
1:2706d1f:     boolean isEquivalent(ValueNode other)
1:95a483d: 		throws StandardException
1:95a483d:     {
1:2706d1f:         if (! isSameNodeKind(other)) {
1:2706d1f:             return false;
1:2706d1f:         }
1:95a483d: 
1:95a483d:         GenerationClauseNode    that = (GenerationClauseNode) other;
1:95a483d: 
1:95a483d:         return this._generationExpression.isEquivalent( that._generationExpression );
1:95a483d:     }
1:7168d7d:     
1:7168d7d: 	/**
1:c0a807c: 	 * Return a list of columns referenced in the generation expression.
1:7168d7d: 	 *
1:7168d7d: 	 * @exception StandardException		Thrown on error
1:7168d7d: 	 */
1:a6d25cd:     public List<ColumnReference> findReferencedColumns()
1:7168d7d:         throws StandardException
1:7168d7d:     {
1:a6d25cd:         CollectNodesVisitor<ColumnReference> visitor =
1:a6d25cd:             new CollectNodesVisitor<ColumnReference>(ColumnReference.class);
1:7168d7d: 
1:7168d7d:         _generationExpression.accept( visitor );
1:7168d7d: 
1:c0a807c:         return visitor.getList();
1:7168d7d:     }
1:7168d7d: 
1:b737f16:     /**
1:b737f16:      * Accept the visitor for all visitable children of this node.
1:b737f16:      *
1:b737f16:      * @param v the visitor
1:b737f16:      *
1:b737f16:      * @exception StandardException on error
1:b737f16:      */
1:b737f16:     @Override
1:b737f16:     void acceptChildren(Visitor v) throws StandardException {
1:b737f16: 
1:b737f16:         super.acceptChildren(v);
1:b737f16: 
1:b737f16:         if (_generationExpression != null) {
1:b737f16:             _generationExpression = (ValueNode)_generationExpression.accept(v);
1:b737f16:         }
1:b737f16: 
1:b737f16:         if (_boundExpression != null) {
1:b737f16:             _boundExpression = (ValueNode)_boundExpression.accept(v);
1:b737f16:         }
1:b737f16:     }
1:b737f16: 
1:b737f16:     /*
1:95a483d: 		Stringify.
1:95a483d: 	 */
1:3bb140c:     @Override
1:95a483d: 	public String toString()
1:95a483d:     {
1:c9a1206:         return
1:c9a1206:             "expressionText: GENERATED ALWAYS AS ( " +
1:c9a1206:             _expressionText + " )\n" +
1:c9a1206:             super.toString();
1:95a483d: 	}
1:c9a1206:         
1:95a483d: 
1:c9a1206:     /**
1:c9a1206: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:c9a1206: 	 * how tree printing is supposed to work.
1:c9a1206: 	 *
1:c9a1206: 	 * @param depth		The depth of this node in the tree
1:c9a1206: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:c9a1206: 	{
1:c9a1206: 		if (SanityManager.DEBUG)
1:c9a1206: 		{
1:c9a1206: 			super.printSubNodes(depth);
1:c9a1206: 
1:c9a1206:             printLabel(depth, "generationExpression: ");
1:c9a1206:             _generationExpression.treePrint(depth + 1);
1:c9a1206: 
1:c9a1206:             if (_boundExpression != null) {
1:c9a1206:                 printLabel(depth, "boundExpression. ");
1:c9a1206:                 _boundExpression.treePrint(depth + 1);
1:c9a1206:             }
1:c9a1206: 		}
1:c9a1206: 	}
1:c9a1206: 
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d:     //
1:95a483d:     // MINIONS
1:95a483d:     //
1:95a483d:     ///////////////////////////////////////////////////////////////////////////////////
1:95a483d: 
1:95a483d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b737f16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Accept the visitor for all visitable children of this node.
1:      *
1:      * @param v the visitor
1:      *
1:      * @exception StandardException on error
1:      */
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1: 
1:         super.acceptChildren(v);
1: 
1:         if (_generationExpression != null) {
1:             _generationExpression = (ValueNode)_generationExpression.accept(v);
1:         }
1: 
1:         if (_boundExpression != null) {
1:             _boundExpression = (ValueNode)_boundExpression.accept(v);
1:         }
1:     }
1: 
1:     /*
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode other)
1:         if (! isSameNodeKind(other)) {
1:             return false;
1:         }
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.depend.ProviderList;
1: class GenerationClauseNode extends ValueNode
/////////////////////////////////////////////////////////////////////////
1:     // CONSTRUCTOR
1:     GenerationClauseNode( ValueNode generationExpression,
1:                           String expressionText,
1:                           ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.GENERATION_CLAUSE_NODE);
1:         _generationExpression = generationExpression;
1:         _expressionText = expressionText;
/////////////////////////////////////////////////////////////////////////
1:     ProviderList getAuxiliaryProviderList() { return _apl; }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1:         return
1:             "expressionText: GENERATED ALWAYS AS ( " +
1:             _expressionText + " )\n" +
1:             super.toString();
1: 
1:     /**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 */
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
1:             printLabel(depth, "generationExpression: ");
1:             _generationExpression.treePrint(depth + 1);
1: 
1:             if (_boundExpression != null) {
1:                 printLabel(depth, "boundExpression. ");
1:                 _boundExpression.treePrint(depth + 1);
1:             }
1: 		}
1: 	}
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a6d25cd
/////////////////////////////////////////////////////////////////////////
1:     public List<ColumnReference> findReferencedColumns()
1:         CollectNodesVisitor<ColumnReference> visitor =
1:             new CollectNodesVisitor<ColumnReference>(ColumnReference.class);
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression
0:         ( FromList fromList, SubqueryList subqueryList, List aggregates)
1:         _boundExpression = _generationExpression.bindExpression( fromList, subqueryList, aggregates );
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ( FromList fromList, SubqueryList subqueryList, List aggregateVector )
commit:c0a807c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 	 * Return a list of columns referenced in the generation expression.
0:     public List findReferencedColumns()
1:         return visitor.getList();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         ( FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
commit:7168d7d
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Return a vector of columns referenced in the generation expression.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0:     public Vector findReferencedColumns()
1:         throws StandardException
1:     {
0:         CollectNodesVisitor visitor = new CollectNodesVisitor( ColumnReference.class );
1: 
1:         _generationExpression.accept( visitor );
1: 
0:         Vector result = visitor.getList();
1: 
0:         if ( result == null ) { result = new Vector(); }
1: 
0:         return result;
1:     }
1: 
commit:15b837e
/////////////////////////////////////////////////////////////////////////
0:         return "GENERATED ALWAYS AS ( " + _expressionText + " )";
commit:95a483d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.GenerationClauseNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.sql.depend.ProviderList;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0:  import org.apache.derby.iapi.store.access.Qualifier;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import java.lang.reflect.Modifier;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node describes a Generation Clause in a column definition.
1:  *
1:  */
0: public class GenerationClauseNode extends ValueNode
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private ValueNode _generationExpression;
1:     private String      _expressionText;
1: 
1:     private ValueNode _boundExpression;
1: 	private ProviderList _apl;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
0:     // INITIALIZATION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
0: 	public void init( Object generationExpression, Object expressionText )
1:     {
0:         _generationExpression = (ValueNode) generationExpression;
0:         _expressionText = (String) expressionText;
1: 	}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     //  ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the defining text of this generation clause */
1:     public  String  getExpressionText() { return _expressionText; }
1:     
1: 	/** Set the auxiliary provider list. */
1: 	void setAuxiliaryProviderList(ProviderList apl) { _apl = apl; }
1: 
1: 	/** Return the auxiliary provider list. */
0: 	public ProviderList getAuxiliaryProviderList() { return _apl; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // QueryTreeNode BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Binding the generation clause.
1: 	 */
0: 	public ValueNode bindExpression
0:         ( FromList fromList, SubqueryList subqueryList, Vector	aggregateVector )
1:         throws StandardException
1: 	{
0:         _boundExpression = _generationExpression.bindExpression( fromList, subqueryList, aggregateVector );
1: 
1:         return _boundExpression;
1: 	}
1: 
1: 	/**
1: 	 * Generate code for this node.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1:         throw StandardException.newException( SQLState.HEAP_UNIMPLEMENTED_FEATURE );
1: 	}
1: 
0: 	protected boolean isEquivalent(ValueNode other)
1: 		throws StandardException
1:     {
0:         if ( !( other instanceof GenerationClauseNode) ) { return false; }
1: 
1:         GenerationClauseNode    that = (GenerationClauseNode) other;
1: 
1:         return this._generationExpression.isEquivalent( that._generationExpression );
1:     }
1:     
1: 	/*
1: 		Stringify.
1: 	 */
1: 	public String toString()
1:     {
0:         return "GENERATED ALWAYS( " + _expressionText + " )";
1: 	}
1:         
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: }
============================================================================