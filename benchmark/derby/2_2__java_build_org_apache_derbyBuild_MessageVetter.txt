1:a02269e: /*
1:a02269e: 
1:a02269e:    Derby - Class org.apache.derbyBuild.MessageVetter
1:a02269e: 
1:a02269e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a02269e:    contributor license agreements.  See the NOTICE file distributed with
1:a02269e:    this work for additional information regarding copyright ownership.
1:a02269e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:a02269e:    (the "License"); you may not use this file except in compliance with
1:a02269e:    the License.  You may obtain a copy of the License at
1:a02269e: 
1:a02269e:       http://www.apache.org/licenses/LICENSE-2.0
1:a02269e: 
1:a02269e:    Unless required by applicable law or agreed to in writing, software
1:a02269e:    distributed under the License is distributed on an "AS IS" BASIS,
1:a02269e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a02269e:    See the License for the specific language governing permissions and
1:a02269e:    limitations under the License.
1:a02269e: 
1:a02269e:  */
1:a02269e: 
1:a02269e: package org.apache.derbyBuild;
1:a02269e: 
1:a02269e: import java.io.File;
1:a02269e: import java.io.FileFilter;
1:a02269e: import java.io.FileInputStream;
1:a02269e: import java.io.IOException;
1:a02269e: import java.text.MessageFormat;
1:a02269e: import java.util.Enumeration;
1:a02269e: import java.util.HashSet;
1:a02269e: import java.util.Properties;
1:a02269e: import java.util.Set;
1:a02269e: import java.util.regex.Pattern;
1:a02269e: 
1:a02269e: /**
1:a02269e:  * Class that checks the message files for common problems.
1:a02269e:  */
1:a02269e: public class MessageVetter {
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * <p>
1:a02269e:      * Check all the message translations in the specified directories for
1:a02269e:      * common problems. Assume that all properties files in the directories
1:a02269e:      * are message translations.
1:a02269e:      * </p>
1:a02269e:      *
1:a02269e:      * <p>
1:a02269e:      * If a problem is found, an error will be raised.
1:a02269e:      * </p>
1:a02269e:      *
1:a02269e:      * @param args names of the directories to check
1:a02269e:      */
1:a02269e:     public static void main(String[] args) throws IOException {
1:a02269e:         FileFilter filter = new FileFilter() {
1:a02269e:             public boolean accept(File pathname) {
1:a02269e:                 return pathname.getName().endsWith(".properties");
1:a02269e:             }
1:a02269e:         };
1:a02269e:         for (String directory : args) {
1:a02269e:             for (File file : new File(directory).listFiles(filter)) {
1:a02269e:                 new MessageVetter(file).vet();
1:a02269e:             }
1:a02269e:         }
1:a02269e:     }
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * A regular expression that matches a single-quote character that is
1:a02269e:      * neither preceeded nor followed by another single-quote character. Used
1:a02269e:      * by {@link #checkSingleQuotes(java.lang.String, java.lang.String)} to
1:a02269e:      * verify that messages contain two single-quotes in order to produce a
1:a02269e:      * single apostrophe (dictated by {@code java.text.MessageFormat}).
1:a02269e:      */
1:a02269e:     private static final Pattern LONE_QUOTE_PATTERN =
1:a02269e:             Pattern.compile("^'[^']|[^']'[^']|[^']'$");
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * A regular expression that matches a single-quote character that have
1:a02269e:      * no adjacent single-quote or curly brace character. Used by
1:a02269e:      * {@link #checkSingleQuotes(java.lang.String, java.lang.String)} to
1:a02269e:      * verify that all single-quotes are either correctly formatted apostrophes
1:a02269e:      * or used for quoting curly braces, as required by
1:a02269e:      * {@code java.text.MessageFormat}.
1:a02269e:      */
1:a02269e:     private static final Pattern LONE_QUOTE_ALLOWED_PATTERN =
1:a02269e:             Pattern.compile("^'[^'{}]|[^'{}]'[^'{}]|[^'{}]'$");
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * A set of message identifiers in whose messages single-quotes may legally
1:a02269e:      * appear with no adjacent single-quote character. This will be messages
1:a02269e:      * where the single-quotes are needed to quote curly braces that should
1:a02269e:      * appear literally in the message text.
1:a02269e:      */
1:a02269e:     private static final Set<String> LONE_QUOTE_ALLOWED = new HashSet<String>();
1:a02269e:     static {
1:a02269e:         // The IJ help text contains curly braces that need quoting.
1:a02269e:         LONE_QUOTE_ALLOWED.add("IJ_HelpText");
1:a02269e:         // Some of the DRDA usage messages contain the text {on|off}, which
1:a02269e:         // needs quoting.
1:a02269e:         LONE_QUOTE_ALLOWED.add("DRDA_Usage8.I");
1:a02269e:         LONE_QUOTE_ALLOWED.add("DRDA_Usage11.I");
1:ac112f7:         LONE_QUOTE_ALLOWED.add("PE_HelpText");
1:a02269e:     }
1:a02269e: 
1:a02269e:     /** The message file to check. */
1:a02269e:     private final File file;
1:a02269e: 
1:a02269e:     /** The properties found in the message file. */
1:a02269e:     private final Properties properties;
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * Create a new {@code MessageVetter} instance.
1:a02269e:      *
1:a02269e:      * @param file the file with the messages to check
1:a02269e:      * @throws IOException if the file cannot be loaded
1:a02269e:      */
1:a02269e:     private MessageVetter(File file) throws IOException {
1:a02269e:         this.file = file;
1:a02269e:         properties = new Properties();
1:6e934c5:         FileInputStream in = new FileInputStream(file);
1:6e934c5:         try {
1:6e934c5:             properties.load(in);
1:6e934c5:         } finally {
1:6e934c5:             in.close();
1:6e934c5:         }
1:a02269e:     }
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * Vet the messages in this file. An error will be raised if an
1:a02269e:      * ill-formatted message is found.
1:a02269e:      */
1:a02269e:     private void vet() {
1:a02269e:         Enumeration e = properties.propertyNames();
1:a02269e:         while (e.hasMoreElements()) {
1:a02269e:             String key = (String) e.nextElement();
1:a02269e:             String message = properties.getProperty(key);
1:a02269e:             vetMessage(key, message);
1:a02269e:         }
1:a02269e:     }
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * Vet a specific message. Raise an error if it is not well-formed.
1:a02269e:      *
1:a02269e:      * @param key the message identifier
1:a02269e:      * @param message the message format specifier
1:a02269e:      */
1:a02269e:     private void vetMessage(String key, String message) {
1:a02269e:         checkSingleQuotes(key, message);
1:a02269e:         checkValidMessageFormat(key, message);
1:a02269e:     }
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * Check that single-quote characters are doubled, as required by
1:a02269e:      * {@code java.text.MessageFormat}. Raise an error otherwise.
1:a02269e:      *
1:a02269e:      * @param key the message identifier
1:a02269e:      * @param message the message format specifier
1:a02269e:      */
1:a02269e:     private void checkSingleQuotes(String key, String message) {
1:a02269e:         Pattern p;
1:a02269e: 
1:a02269e:         if (LONE_QUOTE_ALLOWED.contains(key)) {
1:a02269e:             // In some messages we allow lone single-quote characters, but
1:a02269e:             // only if they are used to quote curly braces. Use a regular
1:a02269e:             // expression that finds all single-quotes that aren't adjacent to
1:a02269e:             // another single-quote or a curly brace character.
1:a02269e:             p = LONE_QUOTE_ALLOWED_PATTERN;
1:a02269e:         } else {
1:a02269e:             // Otherwise, we don't allow lone single-quote characters at all.
1:a02269e:             p = LONE_QUOTE_PATTERN;
1:a02269e:         }
1:a02269e: 
1:a02269e:         if (p.matcher(message).find()) {
1:a02269e:             throw new AssertionError("Lone single-quote in message " + key +
1:a02269e:                     " in " + file + ".\nThis is OK if it is used for quoting " +
1:a02269e:                     "special characters in the message. If this is what the " +
1:a02269e:                     "character is used for, add an exception in " +
1:a02269e:                     getClass().getName() + ".LONE_QUOTE_ALLOWED.");
1:a02269e:         }
1:a02269e:     }
1:a02269e: 
1:a02269e:     /**
1:a02269e:      * Check that a message format specifier is valid. Raise an error if it
1:a02269e:      * is not.
1:a02269e:      *
1:a02269e:      * @param key the message identifier
1:a02269e:      * @param message the message format specifier
1:a02269e:      */
1:a02269e:     private void checkValidMessageFormat(String key, String message) {
1:a02269e:         try {
1:a02269e:             // See if a MessageFormat instance can be produced based on this
1:a02269e:             // message format specifier.
1:a02269e:             new MessageFormat(message);
1:a02269e:         } catch (Exception e) {
1:a02269e:             AssertionError ae = new AssertionError(
1:a02269e:                     "Message " + key + " in " + file + " isn't a valid " +
1:a02269e:                     "java.text.MessageFormat pattern.");
1:a02269e:             ae.initCause(e);
1:a02269e:             throw ae;
1:a02269e:         }
1:a02269e:     }
1:a02269e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:ac112f7
/////////////////////////////////////////////////////////////////////////
1:         LONE_QUOTE_ALLOWED.add("PE_HelpText");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6e934c5
/////////////////////////////////////////////////////////////////////////
1:         FileInputStream in = new FileInputStream(file);
1:         try {
1:             properties.load(in);
1:         } finally {
1:             in.close();
1:         }
commit:a02269e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.MessageVetter
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.text.MessageFormat;
1: import java.util.Enumeration;
1: import java.util.HashSet;
1: import java.util.Properties;
1: import java.util.Set;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  * Class that checks the message files for common problems.
1:  */
1: public class MessageVetter {
1: 
1:     /**
1:      * <p>
1:      * Check all the message translations in the specified directories for
1:      * common problems. Assume that all properties files in the directories
1:      * are message translations.
1:      * </p>
1:      *
1:      * <p>
1:      * If a problem is found, an error will be raised.
1:      * </p>
1:      *
1:      * @param args names of the directories to check
1:      */
1:     public static void main(String[] args) throws IOException {
1:         FileFilter filter = new FileFilter() {
1:             public boolean accept(File pathname) {
1:                 return pathname.getName().endsWith(".properties");
1:             }
1:         };
1:         for (String directory : args) {
1:             for (File file : new File(directory).listFiles(filter)) {
1:                 new MessageVetter(file).vet();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * A regular expression that matches a single-quote character that is
1:      * neither preceeded nor followed by another single-quote character. Used
1:      * by {@link #checkSingleQuotes(java.lang.String, java.lang.String)} to
1:      * verify that messages contain two single-quotes in order to produce a
1:      * single apostrophe (dictated by {@code java.text.MessageFormat}).
1:      */
1:     private static final Pattern LONE_QUOTE_PATTERN =
1:             Pattern.compile("^'[^']|[^']'[^']|[^']'$");
1: 
1:     /**
1:      * A regular expression that matches a single-quote character that have
1:      * no adjacent single-quote or curly brace character. Used by
1:      * {@link #checkSingleQuotes(java.lang.String, java.lang.String)} to
1:      * verify that all single-quotes are either correctly formatted apostrophes
1:      * or used for quoting curly braces, as required by
1:      * {@code java.text.MessageFormat}.
1:      */
1:     private static final Pattern LONE_QUOTE_ALLOWED_PATTERN =
1:             Pattern.compile("^'[^'{}]|[^'{}]'[^'{}]|[^'{}]'$");
1: 
1:     /**
1:      * A set of message identifiers in whose messages single-quotes may legally
1:      * appear with no adjacent single-quote character. This will be messages
1:      * where the single-quotes are needed to quote curly braces that should
1:      * appear literally in the message text.
1:      */
1:     private static final Set<String> LONE_QUOTE_ALLOWED = new HashSet<String>();
1:     static {
1:         // The IJ help text contains curly braces that need quoting.
1:         LONE_QUOTE_ALLOWED.add("IJ_HelpText");
1:         // Some of the DRDA usage messages contain the text {on|off}, which
1:         // needs quoting.
1:         LONE_QUOTE_ALLOWED.add("DRDA_Usage8.I");
1:         LONE_QUOTE_ALLOWED.add("DRDA_Usage11.I");
1:     }
1: 
1:     /** The message file to check. */
1:     private final File file;
1: 
1:     /** The properties found in the message file. */
1:     private final Properties properties;
1: 
1:     /**
1:      * Create a new {@code MessageVetter} instance.
1:      *
1:      * @param file the file with the messages to check
1:      * @throws IOException if the file cannot be loaded
1:      */
1:     private MessageVetter(File file) throws IOException {
1:         this.file = file;
1:         properties = new Properties();
0:         properties.load(new FileInputStream(file));
1:     }
1: 
1:     /**
1:      * Vet the messages in this file. An error will be raised if an
1:      * ill-formatted message is found.
1:      */
1:     private void vet() {
1:         Enumeration e = properties.propertyNames();
1:         while (e.hasMoreElements()) {
1:             String key = (String) e.nextElement();
1:             String message = properties.getProperty(key);
1:             vetMessage(key, message);
1:         }
1:     }
1: 
1:     /**
1:      * Vet a specific message. Raise an error if it is not well-formed.
1:      *
1:      * @param key the message identifier
1:      * @param message the message format specifier
1:      */
1:     private void vetMessage(String key, String message) {
1:         checkSingleQuotes(key, message);
1:         checkValidMessageFormat(key, message);
1:     }
1: 
1:     /**
1:      * Check that single-quote characters are doubled, as required by
1:      * {@code java.text.MessageFormat}. Raise an error otherwise.
1:      *
1:      * @param key the message identifier
1:      * @param message the message format specifier
1:      */
1:     private void checkSingleQuotes(String key, String message) {
1:         Pattern p;
1: 
1:         if (LONE_QUOTE_ALLOWED.contains(key)) {
1:             // In some messages we allow lone single-quote characters, but
1:             // only if they are used to quote curly braces. Use a regular
1:             // expression that finds all single-quotes that aren't adjacent to
1:             // another single-quote or a curly brace character.
1:             p = LONE_QUOTE_ALLOWED_PATTERN;
1:         } else {
1:             // Otherwise, we don't allow lone single-quote characters at all.
1:             p = LONE_QUOTE_PATTERN;
1:         }
1: 
1:         if (p.matcher(message).find()) {
1:             throw new AssertionError("Lone single-quote in message " + key +
1:                     " in " + file + ".\nThis is OK if it is used for quoting " +
1:                     "special characters in the message. If this is what the " +
1:                     "character is used for, add an exception in " +
1:                     getClass().getName() + ".LONE_QUOTE_ALLOWED.");
1:         }
1:     }
1: 
1:     /**
1:      * Check that a message format specifier is valid. Raise an error if it
1:      * is not.
1:      *
1:      * @param key the message identifier
1:      * @param message the message format specifier
1:      */
1:     private void checkValidMessageFormat(String key, String message) {
1:         try {
1:             // See if a MessageFormat instance can be produced based on this
1:             // message format specifier.
1:             new MessageFormat(message);
1:         } catch (Exception e) {
1:             AssertionError ae = new AssertionError(
1:                     "Message " + key + " in " + file + " isn't a valid " +
1:                     "java.text.MessageFormat pattern.");
1:             ae.initCause(e);
1:             throw ae;
1:         }
1:     }
1: }
============================================================================