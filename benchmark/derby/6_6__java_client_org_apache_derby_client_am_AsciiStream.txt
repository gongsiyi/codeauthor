1:33776ff: /*
6:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.AsciiStream
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.am;
1:8ecffdd: 
1:69e3d06: import java.io.IOException;
1:69e3d06: import java.io.InputStream;
1:69e3d06: import java.io.Reader;
1:8ecffdd: import java.io.StringReader;
1:8ecffdd: 
1:0326967: class AsciiStream extends InputStream {
1:69e3d06:     private Reader reader_;
1:70f7692:     private String materializedString_;
1:70f7692:     private int charsRead_ = 0;
1:6eb29f6:     
1:0326967:     AsciiStream(String materializedString){
1:6eb29f6:         this(materializedString,new StringReader(materializedString));
1:6eb29f6:     }
1:6eb29f6:     
1:69e3d06:     public AsciiStream(String materializedString, Reader reader) {
1:70f7692:         reader_ = reader;
1:70f7692:         materializedString_ = materializedString;
1:8ecffdd:     }
1:8ecffdd: 
1:69e3d06:     public int read() throws IOException {
1:70f7692:         int oneChar = reader_.read();
1:70f7692:         ++charsRead_;
1:70f7692:         if (oneChar != -1) // if not eos
1:70f7692:         {
1:6eb29f6:         if(oneChar <= 0x00ff)
1:6eb29f6:             return oneChar;
1:6eb29f6:         else
1:6eb29f6:             return 0x003f;
1:6eb29f6:         
1:70f7692:         } else {
1:70f7692:             return -1; // end of stream
1:70f7692:         }
1:70f7692:     }
1:8ecffdd: 
1:70f7692:     public int available() {
1:70f7692:         return materializedString_.length() - charsRead_;
1:70f7692:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class AsciiStream extends InputStream {
1:     AsciiStream(String materializedString){
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
0: public class AsciiStream extends InputStream {
1:     private Reader reader_;
/////////////////////////////////////////////////////////////////////////
1:     public AsciiStream(String materializedString, Reader reader) {
1:     public int read() throws IOException {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
1:     
0:     public AsciiStream(String materializedString){
1:         this(materializedString,new StringReader(materializedString));
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         if(oneChar <= 0x00ff)
1:             return oneChar;
1:         else
1:             return 0x003f;
1:         
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:8ecffdd
/////////////////////////////////////////////////////////////////////////
1: import java.io.StringReader;
1: 
1: 	
0: 	public AsciiStream(String materializedString){
0: 		this(materializedString,new StringReader(materializedString));
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		if(oneChar <= 0x00ff)
0: 			return oneChar;
0: 		else
0: 			return 0x003f;
1: 		
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class AsciiStream extends java.io.InputStream {
0:     private java.io.Reader reader_;
1:     private String materializedString_;
1:     private int charsRead_ = 0;
0:     public AsciiStream(String materializedString, java.io.Reader reader) {
1:         reader_ = reader;
1:         materializedString_ = materializedString;
1:     }
0:     public int read() throws java.io.IOException {
1:         int oneChar = reader_.read();
1:         ++charsRead_;
1:         if (oneChar != -1) // if not eos
1:         {
0:             return 0x00ff & oneChar;
1:         } else {
1:             return -1; // end of stream
1:         }
1:     }
1:     public int available() {
1:         return materializedString_.length() - charsRead_;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.AsciiStream
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.am;
1: 
0: public class AsciiStream extends java.io.InputStream
0: {
0:   private java.io.Reader reader_;
0:   private String materializedString_; 
0:   private int charsRead_ = 0;
1: 
0:   public AsciiStream (String materializedString, java.io.Reader reader)
0:   {
0:     reader_ = reader;
0:     materializedString_ = materializedString;
0:   }
1: 
0:    public int read () throws java.io.IOException
0:   {
0:     int oneChar = reader_.read();
0:     ++charsRead_;
0:     if (oneChar != -1) // if not eos
0:       return 0x00ff & oneChar;
0:     else
0:       return -1; // end of stream
0:   }
1: 
0:   public int available()
0:   {
0:     return materializedString_.length() - charsRead_;
0:   }
0: }
============================================================================