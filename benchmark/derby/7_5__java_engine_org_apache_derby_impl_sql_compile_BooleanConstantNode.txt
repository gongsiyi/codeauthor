1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BooleanConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizable;
1:4309044: import org.apache.derby.iapi.types.SQLBoolean;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: public final class BooleanConstantNode extends ConstantNode
1:31342ae: {
1:eac0369: 	/* Cache actual value to save overhead and
1:eac0369: 	 * throws clauses.
1:eac0369: 	 */
1:eac0369: 	boolean booleanValue;
1:eac0369: 	boolean unknownValue;
1:31342ae: 
1:3bb140c:     /**
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     BooleanConstantNode(ContextManager cm) throws StandardException {
1:eac0369: 		/*
1:eac0369: 		** RESOLVE: The length is fixed at 1, even for nulls.
1:eac0369: 		** Is that OK?
1:eac0369: 		*/
1:3bb140c:         // Fill in the type information in the parent ValueNode
1:3bb140c:         super(TypeId.BOOLEAN_ID, true, 1, cm);
1:3bb140c:         setValue( null );
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     BooleanConstantNode(boolean value, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(TypeId.BOOLEAN_ID, false, 1, cm);
1:3bb140c:         super.setValue(new SQLBoolean(value));
1:3bb140c:         this.booleanValue = value;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     BooleanConstantNode(TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, true, 0, cm);
1:3bb140c:         this.unknownValue = true;
1:3bb140c:     }
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 	 * Return the value from this BooleanConstantNode
5:eac0369: 	 *
1:eac0369: 	 * @return	The value of this BooleanConstantNode.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	//public boolean	getBoolean()
1:eac0369: 	//{
1:eac0369: 	//	return booleanValue;
1:eac0369: 	//}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the length
1:eac0369: 	 *
1:eac0369: 	 * @return	The length of the value this node represents
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	//public int	getLength() throws StandardException
1:eac0369: 	//{
1:eac0369: 	//	return value.getLength();
1:eac0369: 	//}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return an Object representing the bind time value of this
1:eac0369: 	 * expression tree.  If the expression tree does not evaluate to
1:eac0369: 	 * a constant at bind time then we return null.
1:eac0369: 	 * This is useful for bind time resolution of VTIs.
1:eac0369: 	 * RESOLVE: What do we do for primitives?
1:eac0369: 	 *
1:eac0369: 	 * @return	An Object representing the bind time value of this expression tree.
1:eac0369: 	 *			(null if not a bind time constant.)
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	Object getConstantValueAsObject()
5:eac0369: 	{
1:eac0369: 		return booleanValue ? Boolean.TRUE : Boolean.FALSE;
1:31342ae: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the value as a string.
1:eac0369: 	 *
1:eac0369: 	 * @return The value as a string.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	String getValueAsString()
1:eac0369: 	{
1:eac0369: 		if (booleanValue)
1:eac0369: 		{
1:eac0369: 			return "true";
5:eac0369: 		}
2:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "false";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this represent a true constant.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not this node represents a true constant.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	boolean isBooleanTrue()
1:eac0369: 	{
1:eac0369: 		return (booleanValue && !unknownValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this represent a false constant.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not this node represents a false constant.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	boolean isBooleanFalse()
1:eac0369: 	{
1:eac0369: 		return (!booleanValue && !unknownValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The default selectivity for value nodes is 50%.  This is overridden
1:eac0369: 	 * in specific cases, such as the RelationalOperators.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public double selectivity(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		if (isBooleanTrue())
1:eac0369: 		{
1:eac0369: 			return 1.0;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return 0.0;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1:eac0369: 	 * still could be NotNodes left in the tree.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 	{
1:eac0369: 		if (! underNotNode)
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		booleanValue = !booleanValue;
1:4309044: 		super.setValue(new SQLBoolean(booleanValue));
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This generates the proper constant.  It is implemented
1:eac0369: 	 * by every specific constant node (e.g. IntConstantNode).
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 	{
1:eac0369: 		mb.push(booleanValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the value in this ConstantNode.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void setValue(DataValueDescriptor value)
1:eac0369: 	{
1:eac0369: 		super.setValue( value);
2:eac0369:         unknownValue = true;
1:eac0369:         try
1:eac0369:         {
1:eac0369:             if( value != null && value.isNotNull().getBoolean())
1:eac0369:             {
1:eac0369:                 booleanValue = value.getBoolean();
1:eac0369:                 unknownValue = false;
1:eac0369:             }
1:eac0369:         }
1:eac0369:         catch( StandardException se){}
1:eac0369: 	} // end of setValue
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     BooleanConstantNode(ContextManager cm) throws StandardException {
1:         // Fill in the type information in the parent ValueNode
1:         super(TypeId.BOOLEAN_ID, true, 1, cm);
0:         setNodeType(C_NodeTypes.BOOLEAN_CONSTANT_NODE);
1:         setValue( null );
1:     }
1:     BooleanConstantNode(boolean value, ContextManager cm)
1:             throws StandardException {
1:         super(TypeId.BOOLEAN_ID, false, 1, cm);
0:         setNodeType(C_NodeTypes.BOOLEAN_CONSTANT_NODE);
1:         super.setValue(new SQLBoolean(value));
1:         this.booleanValue = value;
1:     }
1:     BooleanConstantNode(TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, true, 0, cm);
0:         setNodeType(C_NodeTypes.BOOLEAN_CONSTANT_NODE);
1:         this.unknownValue = true;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void setValue(DataValueDescriptor value)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:31342ae
/////////////////////////////////////////////////////////////////////////
0: 		if ( arg1 == null )
1: 		{
0: 			/* Fill in the type information in the parent ValueNode */
0: 			super.init(TypeId.BOOLEAN_ID,
0: 			 Boolean.TRUE,
0: 			 ReuseFactory.getInteger(1));
1: 
0:             setValue( null );
1: 		}
0: 		else if ( arg1 instanceof Boolean )
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLBoolean;
/////////////////////////////////////////////////////////////////////////
1: 			super.setValue(new SQLBoolean(booleanValue));
/////////////////////////////////////////////////////////////////////////
0: 		super.setValue(new SQLBoolean(booleanValue));
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * @param arg1	A boolean containing the value of the constant OR The TypeId for the type of the node
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BooleanConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.compile.Optimizable;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import java.sql.Types;
1: 
1: public final class BooleanConstantNode extends ConstantNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Cache actual value to save overhead and
1: 	 * throws clauses.
1: 	 */
1: 	boolean booleanValue;
1: 	boolean unknownValue;
1: 
1: 	/**
0: 	 * Initializer for a BooleanConstantNode.
1: 	 *
0: 	 * @param arg1	A boolean containing the value of the constant
0: 	 * @param arg1	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
1: 	 *
0: 	 * - OR -
1: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
1: 	 *
0: 	 * @exception StandardException
1: 	 */
0: 	public void init(
0: 					Object arg1)
0: 		throws StandardException
1: 	{
1: 		/*
1: 		** RESOLVE: The length is fixed at 1, even for nulls.
1: 		** Is that OK?
1: 		*/
1: 
0: 		if (arg1 instanceof Boolean)
1: 		{
0: 			/* Fill in the type information in the parent ValueNode */
0: 			super.init(TypeId.BOOLEAN_ID,
0: 			 Boolean.FALSE,
0: 			 ReuseFactory.getInteger(1));
1: 
0: 			booleanValue = ((Boolean) arg1).booleanValue();
0: 			super.setValue(getDataValueFactory().getDataValue(booleanValue));
1: 		}
1: 		else
1: 		{
0: 			super.init(
0: 				arg1,
0: 				Boolean.TRUE,
0: 				ReuseFactory.getInteger(0));
1: 			unknownValue = true;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Return the value from this BooleanConstantNode
1: 	 *
1: 	 * @return	The value of this BooleanConstantNode.
1: 	 *
1: 	 */
1: 
1: 	//public boolean	getBoolean()
1: 	//{
1: 	//	return booleanValue;
1: 	//}
1: 
1: 	/**
1: 	 * Return the length
1: 	 *
1: 	 * @return	The length of the value this node represents
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	//public int	getLength() throws StandardException
1: 	//{
1: 	//	return value.getLength();
1: 	//}
1: 
1: 	/**
1: 	 * Return an Object representing the bind time value of this
1: 	 * expression tree.  If the expression tree does not evaluate to
1: 	 * a constant at bind time then we return null.
1: 	 * This is useful for bind time resolution of VTIs.
1: 	 * RESOLVE: What do we do for primitives?
1: 	 *
1: 	 * @return	An Object representing the bind time value of this expression tree.
1: 	 *			(null if not a bind time constant.)
1: 	 *
1: 	 */
1: 	Object getConstantValueAsObject()
1: 	{
1: 		return booleanValue ? Boolean.TRUE : Boolean.FALSE;
1: 	}
1: 
1: 	/**
1: 	 * Return the value as a string.
1: 	 *
1: 	 * @return The value as a string.
1: 	 *
1: 	 */
1: 	String getValueAsString()
1: 	{
1: 		if (booleanValue)
1: 		{
1: 			return "true";
1: 		}
1: 		else
1: 		{
1: 			return "false";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Does this represent a true constant.
1: 	 *
1: 	 * @return Whether or not this node represents a true constant.
1: 	 */
1: 	boolean isBooleanTrue()
1: 	{
1: 		return (booleanValue && !unknownValue);
1: 	}
1: 
1: 	/**
1: 	 * Does this represent a false constant.
1: 	 *
1: 	 * @return Whether or not this node represents a false constant.
1: 	 */
1: 	boolean isBooleanFalse()
1: 	{
1: 		return (!booleanValue && !unknownValue);
1: 	}
1: 
1: 	/**
1: 	 * The default selectivity for value nodes is 50%.  This is overridden
1: 	 * in specific cases, such as the RelationalOperators.
1: 	 */
1: 	public double selectivity(Optimizable optTable)
1: 	{
1: 		if (isBooleanTrue())
1: 		{
1: 			return 1.0;
1: 		}
1: 		else
1: 		{
1: 			return 0.0;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1: 	 * still could be NotNodes left in the tree.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 	{
1: 		if (! underNotNode)
1: 		{
1: 			return this;
1: 		}
1: 
1: 		booleanValue = !booleanValue;
0: 		super.setValue(getDataValueFactory().getDataValue(booleanValue));
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * This generates the proper constant.  It is implemented
1: 	 * by every specific constant node (e.g. IntConstantNode).
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
1: 	 */
1: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1: 	{
1: 		mb.push(booleanValue);
1: 	}
1: 
1: 	/**
1: 	 * Set the value in this ConstantNode.
1: 	 */
0: 	public void setValue(DataValueDescriptor value)
1: 	{
1: 		super.setValue( value);
1:         unknownValue = true;
1:         try
1:         {
1:             if( value != null && value.isNotNull().getBoolean())
1:             {
1:                 booleanValue = value.getBoolean();
1:                 unknownValue = false;
1:             }
1:         }
1:         catch( StandardException se){}
1: 	} // end of setValue
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.util.ReuseFactory;
0: import java.sql.Types;
0: 
0: public final class BooleanConstantNode extends ConstantNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Cache actual value to save overhead and
0: 	 * throws clauses.
0: 	 */
0: 	boolean booleanValue;
0: 	boolean unknownValue;
0: 
0: 	/**
0: 	 * Initializer for a BooleanConstantNode.
0: 	 *
0: 	 * @param arg1	A boolean containing the value of the constant
0: 	 * @param arg1	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
0: 	 *
0: 	 * - OR -
0: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(
0: 					Object arg1)
0: 		throws StandardException
0: 	{
0: 		/*
0: 		** RESOLVE: The length is fixed at 1, even for nulls.
0: 		** Is that OK?
0: 		*/
0: 
0: 		if (arg1 instanceof Boolean)
0: 		{
0: 			/* Fill in the type information in the parent ValueNode */
0: 			super.init(TypeId.BOOLEAN_ID,
0: 			 Boolean.FALSE,
0: 			 ReuseFactory.getInteger(1));
0: 
0: 			booleanValue = ((Boolean) arg1).booleanValue();
0: 			super.setValue(getDataValueFactory().getDataValue(booleanValue));
0: 		}
0: 		else
0: 		{
0: 			super.init(
0: 				arg1,
0: 				Boolean.TRUE,
0: 				ReuseFactory.getInteger(0));
0: 			unknownValue = true;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return the value from this BooleanConstantNode
0: 	 *
0: 	 * @return	The value of this BooleanConstantNode.
0: 	 *
0: 	 */
0: 
0: 	//public boolean	getBoolean()
0: 	//{
0: 	//	return booleanValue;
0: 	//}
0: 
0: 	/**
0: 	 * Return the length
0: 	 *
0: 	 * @return	The length of the value this node represents
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	//public int	getLength() throws StandardException
0: 	//{
0: 	//	return value.getLength();
0: 	//}
0: 
0: 	/**
0: 	 * Return an Object representing the bind time value of this
0: 	 * expression tree.  If the expression tree does not evaluate to
0: 	 * a constant at bind time then we return null.
0: 	 * This is useful for bind time resolution of VTIs.
0: 	 * RESOLVE: What do we do for primitives?
0: 	 *
0: 	 * @return	An Object representing the bind time value of this expression tree.
0: 	 *			(null if not a bind time constant.)
0: 	 *
0: 	 */
0: 	Object getConstantValueAsObject()
0: 	{
0: 		return booleanValue ? Boolean.TRUE : Boolean.FALSE;
0: 	}
0: 
0: 	/**
0: 	 * Return the value as a string.
0: 	 *
0: 	 * @return The value as a string.
0: 	 *
0: 	 */
0: 	String getValueAsString()
0: 	{
0: 		if (booleanValue)
0: 		{
0: 			return "true";
0: 		}
0: 		else
0: 		{
0: 			return "false";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Does this represent a true constant.
0: 	 *
0: 	 * @return Whether or not this node represents a true constant.
0: 	 */
0: 	boolean isBooleanTrue()
0: 	{
0: 		return (booleanValue && !unknownValue);
0: 	}
0: 
0: 	/**
0: 	 * Does this represent a false constant.
0: 	 *
0: 	 * @return Whether or not this node represents a false constant.
0: 	 */
0: 	boolean isBooleanFalse()
0: 	{
0: 		return (!booleanValue && !unknownValue);
0: 	}
0: 
0: 	/**
0: 	 * The default selectivity for value nodes is 50%.  This is overridden
0: 	 * in specific cases, such as the RelationalOperators.
0: 	 */
0: 	public double selectivity(Optimizable optTable)
0: 	{
0: 		if (isBooleanTrue())
0: 		{
0: 			return 1.0;
0: 		}
0: 		else
0: 		{
0: 			return 0.0;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
0: 	 * still could be NotNodes left in the tree.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 	{
0: 		if (! underNotNode)
0: 		{
0: 			return this;
0: 		}
0: 
0: 		booleanValue = !booleanValue;
0: 		super.setValue(getDataValueFactory().getDataValue(booleanValue));
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * This generates the proper constant.  It is implemented
0: 	 * by every specific constant node (e.g. IntConstantNode).
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 */
0: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
0: 	{
0: 		mb.push(booleanValue);
0: 	}
0: 
0: 	/**
0: 	 * Set the value in this ConstantNode.
0: 	 */
0: 	public void setValue(DataValueDescriptor value)
0: 	{
0: 		super.setValue( value);
0:         unknownValue = true;
0:         try
0:         {
0:             if( value != null && value.isNotNull().getBoolean())
0:             {
0:                 booleanValue = value.getBoolean();
0:                 unknownValue = false;
0:             }
0:         }
0:         catch( StandardException se){}
0: 	} // end of setValue
0: }
============================================================================