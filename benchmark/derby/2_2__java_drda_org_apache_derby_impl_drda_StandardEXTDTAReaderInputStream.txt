1:fefd864: /*
1:fefd864:    Derby - Class org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream
5:fefd864: 
1:fefd864:    Licensed to the Apache Software Foundation (ASF) under one
1:fefd864:    or more contributor license agreements.  See the NOTICE file
1:fefd864:    distributed with this work for additional information
1:fefd864:    regarding copyright ownership.  The ASF licenses this file
1:fefd864:    to you under the Apache License, Version 2.0 (the
1:fefd864:    "License"); you may not use this file except in compliance
1:fefd864:    with the License.  You may obtain a copy of the License at
1:fefd864:    
1:fefd864:    http://www.apache.org/licenses/LICENSE-2.0
1:fefd864:    
1:fefd864:    Unless required by applicable law or agreed to in writing,
1:fefd864:    software distributed under the License is distributed on an
1:fefd864:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fefd864:    KIND, either express or implied.  See the License for the
1:fefd864:    specific language governing permissions and limitations
1:fefd864:    under the License.
1:fefd864: */
1:fefd864: package org.apache.derby.impl.drda;
1:cf5cebf: 
1:fefd864: import java.io.ByteArrayInputStream;
1:fefd864: import java.io.IOException;
1:cf5cebf: import java.io.InputStream;
1:fefd864: 
1:fefd864: /**
1:fefd864:  * Implementation of InputStream which get EXTDTA from the DDMReader.
1:fefd864:  * This class can be used to stream LOBs from Network client to the
1:fefd864:  * Network server.
1:fefd864:  */
1:fefd864: final class StandardEXTDTAReaderInputStream extends EXTDTAReaderInputStream 
3:fefd864: {
1:fefd864:     /**
1:cf5cebf:      * Constructor.
1:cf5cebf:      *
1:fefd864:      * @param reader The reader to get data from
1:cf5cebf:      * @param readStatusByte whether or not to read the trailing Derby-specific
1:cf5cebf:      *      EXTDTA stream status byte
1:fefd864:      * @exception DRDAProtocolException if thrown while initializing current 
1:fefd864:      *                                  buffer.
1:fefd864:      */
1:cf5cebf:     StandardEXTDTAReaderInputStream(final DDMReader reader,
1:cf5cebf:                                     boolean readStatusByte)
1:fefd864:         throws DRDAProtocolException
1:fefd864:     {
1:cf5cebf:         super(false, readStatusByte);
1:fefd864:         this.reader = reader;
1:cf5cebf:         // Exclude the status byte in the byte count.
1:cf5cebf:         if (readStatusByte) {
1:cf5cebf:             this.remainingBytes = reader.getDdmLength() -1;
1:cf5cebf:         } else {
1:cf5cebf:             this.remainingBytes = reader.getDdmLength();
1:cf5cebf:         }
1:cf5cebf:         this.length = remainingBytes;
1:cf5cebf:         // Make sure we read the product specific extension byte off the wire.
1:cf5cebf:         // It will be read here if the value fits into a single DSS.
1:fefd864:         this.currentBuffer = 
1:cf5cebf:             reader.readLOBInitStream(remainingBytes + (readStatusByte ? 1 : 0));
4:fefd864:     }
1:fefd864: 
1:fefd864:     /**
1:fefd864:      * Reads the next byte of data from the input stream.
1:fefd864:      * 
1:fefd864:      * <p> This subclass of InputStream implements this method by reading
1:fefd864:      * the next byte from the current buffer. If there is more data,
1:fefd864:      * it will be requested a new buffer from the DDMReader.
1:fefd864:      *
1:fefd864:      * @return     the next byte of data, or <code>-1</code> if the end of the
1:fefd864:      *             stream is reached.
1:fefd864:      * @exception  IOException  if an I/O error occurs.
1:fefd864:      * @see        java.io.InputStream#read()
1:fefd864:      */
1:fefd864:     public final int read() 
1:cf5cebf:             throws IOException {
1:cf5cebf:         // Reuse the other read method for simplicity.
1:cf5cebf:         byte[] b = new byte[1];
1:cf5cebf:         int read = read(b);
1:cf5cebf:         return (read == 1 ? b[0] : -1);
1:fefd864:     }
1:cf5cebf: 
1:fefd864:     /**
1:fefd864:      * Reads up to <code>len</code> bytes of data from the input stream into
1:fefd864:      * an array of bytes.  An attempt is made to read as many as
1:fefd864:      * <code>len</code> bytes, but a smaller number may be read, possibly
1:fefd864:      * zero. The number of bytes actually read is returned as an integer.
1:fefd864:      *
1:fefd864:      * This subclass implements this method by calling this method on the 
1:fefd864:      * current buffer, which is an instance of ByteArrayInputStream. If the
1:fefd864:      * current buffer does not have any data, it will be requested a new
1:fefd864:      * buffer from the DDMReader.
1:fefd864:      *
1:fefd864:      * @param      b     the buffer into which the data is read.
1:fefd864:      * @param      off   the start offset in array <code>b</code>
1:fefd864:      *                   at which the data is written.
1:fefd864:      * @param      len   the maximum number of bytes to read.
1:fefd864:      * @return     the total number of bytes read into the buffer, or
1:fefd864:      *             <code>-1</code> if there is no more data because the end of
1:fefd864:      *             the stream has been reached.
1:fefd864:      * @exception  IOException  if an I/O error occurs.
1:fefd864:      * @exception  NullPointerException  if <code>b</code> is <code>null</code>.
1:fefd864:      * @see        java.io.InputStream#read(byte[], int, int)
1:fefd864:      */
1:fefd864:     public final int read(final byte[] b,
1:fefd864:                           final int off,
1:cf5cebf:                           int len) 
3:fefd864:         throws IOException
1:fefd864:     {
2:fefd864:         if (remainingBytes <= 0) {
3:fefd864:             return -1;
1:fefd864:         }
1:cf5cebf:         // Adjust length to avoid reading the trailing status byte.
1:cf5cebf:         len = (int)Math.min(remainingBytes, (long)len);
1:fefd864:         int val = currentBuffer.read(b, off, len);
2:fefd864:         if (val < 0) {
1:cf5cebf:             nextBuffer();
1:fefd864:             val = currentBuffer.read(b, off, len);
1:fefd864:         }
1:cf5cebf:         // If we are reading the last data byte, check the status byte.
1:cf5cebf:         if (readStatusByte && val == remainingBytes) {
1:cf5cebf:             if (currentBuffer.available() == 0) {
1:cf5cebf:                 // Fetch the last buffer (containing only the status byte).
1:cf5cebf:                 nextBuffer();
1:cf5cebf:             }
1:cf5cebf:             checkStatus(currentBuffer.read());
1:cf5cebf:             // Sanity check.
1:cf5cebf:             if (currentBuffer.read() != -1) {
1:cf5cebf:                 throw new IllegalStateException(
1:cf5cebf:                         "Remaining bytes in buffer after status byte");
1:cf5cebf:             }
1:cf5cebf:         }
1:fefd864:         remainingBytes -= val;
2:fefd864:         return val;
1:fefd864:     }
1:fefd864: 
1:fefd864:     /**
1:fefd864:      * Returns the number of bytes that can be read (or skipped over) from
1:fefd864:      * this input stream without blocking by the next caller of a method for
1:fefd864:      * this input stream.  
1:fefd864:      *
1:fefd864:      * <p> This subclass implements this method by calling available on 
1:fefd864:      *     the current buffer, which is a ByteInputStreamReader.
1:fefd864:      *
1:fefd864:      * @return     the number of bytes that can be read from this input stream
1:fefd864:      *             without blocking.     
1:fefd864:      */
1:fefd864:     public final int available() 
1:fefd864:     {
1:fefd864:         if (remainingBytes <= 0) {
1:fefd864:             return 0;
1:fefd864:         }
1:cf5cebf:         int inBuffer = currentBuffer.available();
1:cf5cebf:         // Adjust for the status byte if required.
1:cf5cebf:         if (readStatusByte && inBuffer > remainingBytes) {
1:cf5cebf:             inBuffer--;
1:cf5cebf:         }
1:cf5cebf:         return inBuffer;
1:fefd864:     }
1:fefd864: 
1:fefd864:     /**
1:cf5cebf:      * Returns the number of bytes returned by this stream.
1:cf5cebf:      * <p>
1:cf5cebf:      * The length includes data which has been already read at the invocation
1:cf5cebf:      * time, but doesn't include any meta data (like the Derby-specific
1:cf5cebf:      * EXTDTA status byte).
1:cf5cebf:      *
1:cf5cebf:      * @return The number of bytes that will be returned by this stream.
1:fefd864:      */
1:fefd864:     final long getLength() 
1:fefd864:     {
1:fefd864:         return length;
1:fefd864:     }
1:fefd864:     
1:fefd864:     /**
1:cf5cebf:      * Fetches the next buffer.
1:cf5cebf:      *
1:cf5cebf:      * @throws IOException if fetching the buffer fails
1:fefd864:      */
1:cf5cebf:     private void nextBuffer()
1:cf5cebf:             throws IOException {
1:cf5cebf:         // Make sure we read the status byte off the wire if it was sent.
1:cf5cebf:         long wireBytes = readStatusByte ? remainingBytes +1 : remainingBytes;
1:cf5cebf:         currentBuffer = reader.readLOBContinuationStream(wireBytes);
1:fefd864:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Cleans up and closes the stream.
1:cf5cebf:      */
1:cf5cebf:     protected void onClientSideStreamingError() {
1:cf5cebf:         // Clean state and return -1 on subsequent calls.
1:cf5cebf:         // The status byte is the last byte, so no need to drain the source.
1:cf5cebf:         currentBuffer = null;
1:cf5cebf:         remainingBytes = -1;
1:cf5cebf:     }
1:cf5cebf: 
1:fefd864:     /** Length of stream */
1:fefd864:     private final long length;
1:fefd864:     
1:fefd864:     /** DDMReader. Used to get more data. */
1:fefd864:     private final DDMReader reader;
1:cf5cebf: 
1:fefd864:     /** Remaining bytes in stream */
1:fefd864:     private long remainingBytes;
1:cf5cebf: 
1:fefd864:     /** Current data buffer */
1:fefd864:     private ByteArrayInputStream currentBuffer;
1:fefd864: 
1:fefd864: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf5cebf
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1:      * Constructor.
1:      *
1:      * @param readStatusByte whether or not to read the trailing Derby-specific
1:      *      EXTDTA stream status byte
1:     StandardEXTDTAReaderInputStream(final DDMReader reader,
1:                                     boolean readStatusByte)
1:         super(false, readStatusByte);
1:         // Exclude the status byte in the byte count.
1:         if (readStatusByte) {
1:             this.remainingBytes = reader.getDdmLength() -1;
1:         } else {
1:             this.remainingBytes = reader.getDdmLength();
1:         }
1:         this.length = remainingBytes;
1:         // Make sure we read the product specific extension byte off the wire.
1:         // It will be read here if the value fits into a single DSS.
1:             reader.readLOBInitStream(remainingBytes + (readStatusByte ? 1 : 0));
/////////////////////////////////////////////////////////////////////////
1:             throws IOException {
1:         // Reuse the other read method for simplicity.
1:         byte[] b = new byte[1];
1:         int read = read(b);
1:         return (read == 1 ? b[0] : -1);
1: 
/////////////////////////////////////////////////////////////////////////
1:                           int len) 
1:         // Adjust length to avoid reading the trailing status byte.
1:         len = (int)Math.min(remainingBytes, (long)len);
1:             nextBuffer();
1:         // If we are reading the last data byte, check the status byte.
1:         if (readStatusByte && val == remainingBytes) {
1:             if (currentBuffer.available() == 0) {
1:                 // Fetch the last buffer (containing only the status byte).
1:                 nextBuffer();
1:             }
1:             checkStatus(currentBuffer.read());
1:             // Sanity check.
1:             if (currentBuffer.read() != -1) {
1:                 throw new IllegalStateException(
1:                         "Remaining bytes in buffer after status byte");
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:         int inBuffer = currentBuffer.available();
1:         // Adjust for the status byte if required.
1:         if (readStatusByte && inBuffer > remainingBytes) {
1:             inBuffer--;
1:         }
1:         return inBuffer;
1:      * Returns the number of bytes returned by this stream.
1:      * <p>
1:      * The length includes data which has been already read at the invocation
1:      * time, but doesn't include any meta data (like the Derby-specific
1:      * EXTDTA status byte).
1:      *
1:      * @return The number of bytes that will be returned by this stream.
/////////////////////////////////////////////////////////////////////////
1:      * Fetches the next buffer.
1:      *
1:      * @throws IOException if fetching the buffer fails
1:     private void nextBuffer()
1:             throws IOException {
1:         // Make sure we read the status byte off the wire if it was sent.
1:         long wireBytes = readStatusByte ? remainingBytes +1 : remainingBytes;
1:         currentBuffer = reader.readLOBContinuationStream(wireBytes);
1: 
1:     /**
1:      * Cleans up and closes the stream.
1:      */
1:     protected void onClientSideStreamingError() {
1:         // Clean state and return -1 on subsequent calls.
1:         // The status byte is the last byte, so no need to drain the source.
1:         currentBuffer = null;
1:         remainingBytes = -1;
1:     }
1: 
1: 
1: 
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:fefd864
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1:    
1:    http://www.apache.org/licenses/LICENSE-2.0
1:    
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: */
1: package org.apache.derby.impl.drda;
0: import java.io.InputStream;
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: 
1: /**
1:  * Implementation of InputStream which get EXTDTA from the DDMReader.
1:  * This class can be used to stream LOBs from Network client to the
1:  * Network server.
1:  */
1: final class StandardEXTDTAReaderInputStream extends EXTDTAReaderInputStream 
1: {
1:     /**
0:      * Constructor
1:      * @param reader The reader to get data from
1:      * @exception DRDAProtocolException if thrown while initializing current 
1:      *                                  buffer.
1:      */
0:     StandardEXTDTAReaderInputStream(final DDMReader reader) 
1:         throws DRDAProtocolException
1:     {
0:         super();
1:         this.reader = reader;
0:         this.length = reader.getDdmLength();        
0:         this.remainingBytes = length;
1:         this.currentBuffer = 
0:             reader.readLOBInitStream(remainingBytes);
1:     }
1: 
1:     /**
1:      * Reads the next byte of data from the input stream.
1:      * 
1:      * <p> This subclass of InputStream implements this method by reading
1:      * the next byte from the current buffer. If there is more data,
1:      * it will be requested a new buffer from the DDMReader.
1:      *
1:      * @return     the next byte of data, or <code>-1</code> if the end of the
1:      *             stream is reached.
1:      * @exception  IOException  if an I/O error occurs.
1:      * @see        java.io.InputStream#read()
1:      */
1:     public final int read() 
1:         throws IOException
1:     {
1:         if (remainingBytes <= 0) {
1:             return -1;
1:         }
0:         int val = (currentBuffer == null) ? -1 : currentBuffer.read();
1:         if (val < 0) {
0:             val = refreshCurrentBuffer();
1:         }
0:         remainingBytes--;
1:         return val;
1:     }
1:     
1:     /**
1:      * Reads up to <code>len</code> bytes of data from the input stream into
1:      * an array of bytes.  An attempt is made to read as many as
1:      * <code>len</code> bytes, but a smaller number may be read, possibly
1:      * zero. The number of bytes actually read is returned as an integer.
1:      *
1:      * This subclass implements this method by calling this method on the 
1:      * current buffer, which is an instance of ByteArrayInputStream. If the
1:      * current buffer does not have any data, it will be requested a new
1:      * buffer from the DDMReader.
1:      *
1:      * @param      b     the buffer into which the data is read.
1:      * @param      off   the start offset in array <code>b</code>
1:      *                   at which the data is written.
1:      * @param      len   the maximum number of bytes to read.
1:      * @return     the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the stream has been reached.
1:      * @exception  IOException  if an I/O error occurs.
1:      * @exception  NullPointerException  if <code>b</code> is <code>null</code>.
1:      * @see        java.io.InputStream#read(byte[], int, int)
1:      */
1:     public final int read(final byte[] b,
1:                           final int off,
0:                           final int len) 
1:         throws IOException
1:     {
1:         if (remainingBytes <= 0) {
1:             return -1;
1:         }
1:         int val = currentBuffer.read(b, off, len);
1:         if (val < 0) {
0:             currentBuffer = 
0:                 reader.readLOBContinuationStream(remainingBytes);
1:             val = currentBuffer.read(b, off, len);
1:         }
1:         remainingBytes -= val;
1:         return val;
1:     }
1: 
1:     /**
1:      * Returns the number of bytes that can be read (or skipped over) from
1:      * this input stream without blocking by the next caller of a method for
1:      * this input stream.  
1:      *
1:      * <p> This subclass implements this method by calling available on 
1:      *     the current buffer, which is a ByteInputStreamReader.
1:      *
1:      * @return     the number of bytes that can be read from this input stream
1:      *             without blocking.     
1:      */
1:     public final int available() 
1:     {
1:         if (remainingBytes <= 0) {
1:             return 0;
1:         }
0:         return currentBuffer.available();
1:     }
1: 
1:     /**
0:      * Return the length if this stream. The length includes data which has 
0:      * been read.
0:      * @return length of this stream.
1:      */
1:     final long getLength() 
1:     {
1:         return length;
1:     }
1:     
1:     /**
0:      * Refresh the current buffer from the DDMReader
0:      * @exception IOException if there is a IOException when
0:      *                        refreshing the buffer from DDMReader
0:      * @return the next byte of data, or <code>-1</code> if the end of the
0:      *         stream is reached.
1:      */
0:     private int refreshCurrentBuffer() 
1:         throws IOException
1:     {
0:         if (remainingBytes > 0) {
0:             currentBuffer = 
0:                 reader.readLOBContinuationStream(remainingBytes);
0:             return currentBuffer.read();
0:         } else {
1:             return -1;
1:         }
1:     }
1:     
1:     /** Length of stream */
1:     private final long length;
1:     
1:     /** DDMReader. Used to get more data. */
1:     private final DDMReader reader;
1:     
1:     /** Remaining bytes in stream */
1:     private long remainingBytes;
1:     
1:     /** Current data buffer */
1:     private ByteArrayInputStream currentBuffer;
1: 
1: }
============================================================================