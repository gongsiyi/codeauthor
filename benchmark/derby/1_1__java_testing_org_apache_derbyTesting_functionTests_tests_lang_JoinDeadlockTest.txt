1:86db097: /**
1:86db097:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JoinDeadlockTest
1:86db097:  *
1:86db097:  * Licensed to the Apache Software Foundation (ASF) under one
1:86db097:  * or more contributor license agreements.  See the NOTICE file
1:86db097:  * distributed with this work for additional information
1:86db097:  * regarding copyright ownership.  The ASF licenses this file
1:86db097:  * to you under the Apache License, Version 2.0 (the
1:86db097:  * "License"); you may not use this file except in compliance
1:86db097:  * with the License.  You may obtain a copy of the License at
1:86db097:  *
1:86db097:  *   http://www.apache.org/licenses/LICENSE-2.0
1:86db097:  *
1:86db097:  * Unless required by applicable law or agreed to in writing,
1:86db097:  * software distributed under the License is distributed on an
1:86db097:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:86db097:  * KIND, either express or implied.  See the License for the
1:86db097:  * specific language governing permissions and limitations
1:86db097:  * under the License.
1:86db097:  */
1:86db097: 
1:86db097: package org.apache.derbyTesting.functionTests.tests.lang;
1:86db097: 
1:86db097: import java.sql.Connection;
1:86db097: import java.sql.ResultSet;
1:86db097: import java.sql.SQLException;
1:86db097: import java.sql.Statement;
1:86db097: import java.util.Properties;
1:86db097: import junit.framework.Test;
1:86db097: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:86db097: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:86db097: import org.apache.derbyTesting.junit.TestConfiguration;
1:86db097: 
1:86db097: 
1:86db097: public final class JoinDeadlockTest extends  BaseJDBCTestCase {
1:86db097:     /**
1:86db097:      * Public constructor required for running test as standalone JUnit.
1:86db097:      * @param name test name
1:86db097:      */
1:86db097:     public JoinDeadlockTest(String name)
1:86db097:     {
1:86db097:         super(name);
1:86db097:     }
1:86db097: 
1:86db097:     public static Test suite()
1:86db097:     {
1:86db097:         final Properties systemProperties = new Properties();
1:86db097:         systemProperties.setProperty("derby.locks.waitTimeout", "7");
1:86db097:         systemProperties.setProperty("derby.locks.deadlockTimeout", "5");
1:86db097: 
1:86db097:         return new SystemPropertyTestSetup(
1:86db097:                 TestConfiguration.defaultSuite(JoinDeadlockTest.class),
1:86db097:                 systemProperties, 
1:86db097:                 true);
1:86db097:     }
1:86db097: 
1:86db097:     public void testJoinDeadlock() throws Exception
1:86db097:     {
1:86db097:         Statement st = createStatement();
1:86db097:         
1:86db097:         try {
1:86db097:             Connection c2 = openDefaultConnection();
1:86db097:             setAutoCommit(false);
1:86db097:             c2.setAutoCommit(false);
1:86db097:             
1:86db097:             // user 1 for bug 1573
1:86db097:             // a deadlock when reopening a join gets an assertion
1:86db097:             // violation in close()
1:86db097:             st.executeUpdate("create table outer1(c1 int)");
1:86db097:             st.executeUpdate("create index o1_i1 on outer1(c1)");
1:86db097:             st.executeUpdate("insert into outer1 (c1) values 1, 2");
1:86db097:             commit();
1:86db097:             st.executeUpdate("create table inner1(c1 int, c2 char(254))");
1:86db097:             st.executeUpdate("create index i1_i1 on inner1(c1)");
1:86db097:             st.executeUpdate("insert into inner1 (c1) values 1, 2");
1:86db097:             commit();
1:86db097:             st.executeUpdate("create table inner2(c1 int, c2 char(254))");
1:86db097:             st.executeUpdate("create index i2_i1 on inner2(c1)");
1:86db097:             st.executeUpdate("insert into inner2 (c1) values 1, 2");
1:86db097:             commit();
1:86db097:             
1:86db097:             // this user will get lock timeout in subquery on 2nd next
1:86db097:             ResultSet c1_rs = st.executeQuery(
1:86db097:                     "select * from outer1 where c1 <= (select count(*) " + 
1:86db097:                             "from inner1, inner2 where outer1.c1 = outer1.c1)");
1:86db097:             c1_rs.next();
1:86db097:             assertEquals(c1_rs.getString(1), "1");
1:86db097:             
1:86db097:             Statement c2_st = c2.createStatement();
1:86db097:             c2_st.executeUpdate("update inner1 set c1 = c1 where c1 = 1");
1:86db097:             
1:86db097:             try {
1:86db097:                 c1_rs.next();
1:86db097:             } catch (SQLException e) {
1:86db097:                 assertSQLState("40XL1", e);
1:86db097:             }
1:86db097: 
1:86db097:             c2.rollback();
1:86db097:             c2.close();
1:86db097:         } finally {
1:86db097:             // cleanup
1:86db097:             dontThrow(st, "drop table outer1");
1:86db097:             dontThrow(st, "drop table inner1");
1:86db097:             dontThrow(st, "drop table inner2");
1:86db097:             commit();
1:86db097:         }
1:86db097:     }
1:86db097: 
1:86db097: 
1:86db097:     private void dontThrow(Statement st, String stm) {
1:86db097:         try {
1:86db097:             st.executeUpdate(stm);
1:86db097:         } catch (SQLException e) {
1:86db097:             // ignore, best effort here
1:86db097:             println("\"" + stm+ "\" failed");
1:86db097:         }
1:86db097:     }
1:86db097: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:86db097
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JoinDeadlockTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: public final class JoinDeadlockTest extends  BaseJDBCTestCase {
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public JoinDeadlockTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         final Properties systemProperties = new Properties();
1:         systemProperties.setProperty("derby.locks.waitTimeout", "7");
1:         systemProperties.setProperty("derby.locks.deadlockTimeout", "5");
1: 
1:         return new SystemPropertyTestSetup(
1:                 TestConfiguration.defaultSuite(JoinDeadlockTest.class),
1:                 systemProperties, 
1:                 true);
1:     }
1: 
1:     public void testJoinDeadlock() throws Exception
1:     {
1:         Statement st = createStatement();
1:         
1:         try {
1:             Connection c2 = openDefaultConnection();
1:             setAutoCommit(false);
1:             c2.setAutoCommit(false);
1:             
1:             // user 1 for bug 1573
1:             // a deadlock when reopening a join gets an assertion
1:             // violation in close()
1:             st.executeUpdate("create table outer1(c1 int)");
1:             st.executeUpdate("create index o1_i1 on outer1(c1)");
1:             st.executeUpdate("insert into outer1 (c1) values 1, 2");
1:             commit();
1:             st.executeUpdate("create table inner1(c1 int, c2 char(254))");
1:             st.executeUpdate("create index i1_i1 on inner1(c1)");
1:             st.executeUpdate("insert into inner1 (c1) values 1, 2");
1:             commit();
1:             st.executeUpdate("create table inner2(c1 int, c2 char(254))");
1:             st.executeUpdate("create index i2_i1 on inner2(c1)");
1:             st.executeUpdate("insert into inner2 (c1) values 1, 2");
1:             commit();
1:             
1:             // this user will get lock timeout in subquery on 2nd next
1:             ResultSet c1_rs = st.executeQuery(
1:                     "select * from outer1 where c1 <= (select count(*) " + 
1:                             "from inner1, inner2 where outer1.c1 = outer1.c1)");
1:             c1_rs.next();
1:             assertEquals(c1_rs.getString(1), "1");
1:             
1:             Statement c2_st = c2.createStatement();
1:             c2_st.executeUpdate("update inner1 set c1 = c1 where c1 = 1");
1:             
1:             try {
1:                 c1_rs.next();
1:             } catch (SQLException e) {
1:                 assertSQLState("40XL1", e);
1:             }
1: 
1:             c2.rollback();
1:             c2.close();
1:         } finally {
1:             // cleanup
1:             dontThrow(st, "drop table outer1");
1:             dontThrow(st, "drop table inner1");
1:             dontThrow(st, "drop table inner2");
1:             commit();
1:         }
1:     }
1: 
1: 
1:     private void dontThrow(Statement st, String stm) {
1:         try {
1:             st.executeUpdate(stm);
1:         } catch (SQLException e) {
1:             // ignore, best effort here
1:             println("\"" + stm+ "\" failed");
1:         }
1:     }
1: }
============================================================================