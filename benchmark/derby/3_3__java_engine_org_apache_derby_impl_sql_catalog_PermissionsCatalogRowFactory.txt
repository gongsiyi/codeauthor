1:b7730e4: /*
4:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermissionsCatalogRowFactory
1:b7730e4: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4:       http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
2:b7730e4:  */
1:b7730e4: 
1:55f1cc9: package org.apache.derby.impl.sql.catalog;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: import org.apache.derby.iapi.reference.Limits;
1:b7730e4: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:55f1cc9: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:b7730e4: import org.apache.derby.iapi.types.DataValueDescriptor;
1:b7730e4: import org.apache.derby.iapi.types.DataValueFactory;
1:b7730e4: import org.apache.derby.iapi.types.RowLocation;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:b7730e4: import org.apache.derby.iapi.types.StringDataValue;
1:b7730e4: 
1:55f1cc9: abstract class PermissionsCatalogRowFactory extends CatalogRowFactory
1:b7730e4: {
1:6870e87:     PermissionsCatalogRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:b7730e4:     {
1:6870e87:         super(uuidf,ef,dvf);
1:b7730e4:     }
1:b7730e4: 
1:55f1cc9:     DataValueDescriptor getAuthorizationID( String value)
1:b7730e4:     {
1:eb47bdb:         return new SQLVarchar(value);
1:b7730e4:     }
1:b7730e4: 
1:55f1cc9:     DataValueDescriptor getNullAuthorizationID()
1:b7730e4:     {
1:eb47bdb:         return new SQLVarchar();
1:b7730e4:     }
1:b7730e4: 
2:b7730e4:     /**
1:b7730e4:      * Extract an internal authorization ID from a row.
1:b7730e4:      *
1:b7730e4:      * @param row
1:b7730e4:      * @param columnPos 1 based
1:b7730e4:      *
1:b7730e4:      * @return The internal authorization ID
1:b7730e4:      */
1:55f1cc9:     String getAuthorizationID( ExecRow row, int columnPos)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         return row.getColumn( columnPos).getString();
1:b7730e4:     }
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Build an index key row from a permission descriptor. A key row does not include the RowLocation column.
1:b7730e4:      *
1:b7730e4:      * @param indexNumber
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:55f1cc9:     abstract ExecIndexRow buildIndexKeyRow( int indexNumber,
1:b7730e4:                                                    PermissionsDescriptor perm)
1:b7730e4:         throws StandardException;
1:7a1a699: 
1:7a1a699:     /**
1:b7730e4:      * Or a set of permissions in with a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return The number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:55f1cc9:     abstract int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException;
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Remove a set of permissions from a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:55f1cc9:     abstract int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException;
1:b7730e4: 
1:b7730e4:     /**
1:7a1a699:      * Set the uuid of the passed permission descriptor to the uuid of the row
1:7a1a699:      * from the system table. DataDictionary will make this call before calling 
1:7a1a699:      * the dependency manager to send invalidation messages to the objects 
1:7a1a699:      * dependent on the permission descriptor's uuid.
1:7a1a699:      * 
1:7a1a699:      * @param row The row from the system table for the passed permission descriptor
1:7a1a699:      * @param perm Permission descriptor
1:7a1a699:      * @throws StandardException
1:7a1a699:      */
1:55f1cc9:     abstract void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException;
1:b7730e4: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     PermissionsCatalogRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:         super(uuidf,ef,dvf);
commit:082459a
/////////////////////////////////////////////////////////////////////////
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1:         return new SQLVarchar(value);
1:         return new SQLVarchar();
commit:55f1cc9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
/////////////////////////////////////////////////////////////////////////
1: abstract class PermissionsCatalogRowFactory extends CatalogRowFactory
0:     static final String AUTHORIZATION_ID_TYPE = "VARCHAR";
0:     static final boolean AUTHORIZATION_ID_IS_BUILTIN_TYPE = true;
0:     static final int AUTHORIZATION_ID_LENGTH = Limits.MAX_IDENTIFIER_LENGTH;
0:     PermissionsCatalogRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
1:     DataValueDescriptor getAuthorizationID( String value)
1:     DataValueDescriptor getNullAuthorizationID()
/////////////////////////////////////////////////////////////////////////
1:     String getAuthorizationID( ExecRow row, int columnPos)
/////////////////////////////////////////////////////////////////////////
1:     abstract ExecIndexRow buildIndexKeyRow( int indexNumber,
/////////////////////////////////////////////////////////////////////////
1:     abstract int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
/////////////////////////////////////////////////////////////////////////
1:     abstract int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
/////////////////////////////////////////////////////////////////////////
1:     abstract void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException;
commit:7a1a699
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the uuid of the passed permission descriptor to the uuid of the row
1:      * from the system table. DataDictionary will make this call before calling 
1:      * the dependency manager to send invalidation messages to the objects 
1:      * dependent on the permission descriptor's uuid.
1:      * 
1:      * @param row The row from the system table for the passed permission descriptor
1:      * @param perm Permission descriptor
1:      * @throws StandardException
1:      */
0:     abstract public void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:0c25a63
/////////////////////////////////////////////////////////////////////////
0:     public static final int AUTHORIZATION_ID_LENGTH = Limits.MAX_IDENTIFIER_LENGTH;
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermissionsCatalogRowFactory
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Limits;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.StringDataValue;
1: 
0: public abstract class PermissionsCatalogRowFactory extends CatalogRowFactory
1: {
0:     public static final String AUTHORIZATION_ID_TYPE = "VARCHAR";
0:     public static final boolean AUTHORIZATION_ID_IS_BUILTIN_TYPE = true;
0:     public static final int AUTHORIZATION_ID_LENGTH = Limits.DB2_MAX_USERID_LENGTH;
1: 
0:     public PermissionsCatalogRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                         boolean convertIdToLower)
1:     {
0:         super(uuidf,ef,dvf,convertIdToLower);
1:     }
1: 
0:     protected DataValueDescriptor getAuthorizationID( String value)
1:     {
0:         return getDataValueFactory().getVarcharDataValue( value);
1:     }
1: 
0:     protected DataValueDescriptor getNullAuthorizationID()
1:     {
0:         return getDataValueFactory().getNullVarchar( (StringDataValue) null);
1:     }
1: 
1:     /**
1:      * Extract an internal authorization ID from a row.
1:      *
1:      * @param row
1:      * @param columnPos 1 based
1:      *
1:      * @return The internal authorization ID
1:      */
0:     protected String getAuthorizationID( ExecRow row, int columnPos)
1:         throws StandardException
1:     {
1:         return row.getColumn( columnPos).getString();
1:     }
1:     
1:     /**
0:      * @return the index number of the primary key index.
1:      */
0:     public abstract int getPrimaryIndexNumber();
1: 
1:     /**
1:      * Build an index key row from a permission descriptor. A key row does not include the RowLocation column.
1:      *
1:      * @param indexNumber
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
0:      * @param rowLocation
1:      *
1:      * @exception StandardException standard error policy
1:      */
0:     public abstract ExecIndexRow buildIndexKeyRow( int indexNumber,
1:                                                    PermissionsDescriptor perm)
1:         throws StandardException;
1: 
1:     /**
1:      * Or a set of permissions in with a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return The number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
0:     abstract public int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException;
1: 
1:     /**
1:      * Remove a set of permissions from a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
0:     abstract public int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException;
1: }
============================================================================