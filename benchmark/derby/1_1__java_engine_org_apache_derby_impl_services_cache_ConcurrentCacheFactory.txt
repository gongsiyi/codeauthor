1:73a34db: /*
1:73a34db: 
1:73a34db:    Derby - Class org.apache.derby.impl.services.cache.ConcurrentCacheFactory
1:73a34db: 
1:73a34db:    Licensed to the Apache Software Foundation (ASF) under one or more
1:73a34db:    contributor license agreements.  See the NOTICE file distributed with
1:73a34db:    this work for additional information regarding copyright ownership.
1:73a34db:    The ASF licenses this file to you under the Apache License, Version 2.0
1:73a34db:    (the "License"); you may not use this file except in compliance with
1:73a34db:    the License.  You may obtain a copy of the License at
1:73a34db: 
1:73a34db:       http://www.apache.org/licenses/LICENSE-2.0
1:73a34db: 
1:73a34db:    Unless required by applicable law or agreed to in writing, software
1:73a34db:    distributed under the License is distributed on an "AS IS" BASIS,
1:73a34db:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:73a34db:    See the License for the specific language governing permissions and
1:73a34db:    limitations under the License.
1:73a34db: 
1:73a34db:  */
1:73a34db: 
1:73a34db: package org.apache.derby.impl.services.cache;
1:73a34db: 
1:73a34db: import org.apache.derby.iapi.services.cache.CacheFactory;
1:73a34db: import org.apache.derby.iapi.services.cache.CacheManager;
1:73a34db: import org.apache.derby.iapi.services.cache.CacheableFactory;
1:73a34db: 
1:73a34db: /**
1:73a34db:  * Factory class which creates cache manager instances based on the
1:73a34db:  * <code>ConcurrentCache</code> implementation.
1:73a34db:  */
1:73a34db: public class ConcurrentCacheFactory implements CacheFactory {
1:73a34db:     /**
1:73a34db:      * Create a new <code>ConcurrentCache</code> instance.
1:73a34db:      *
1:73a34db:      * @param holderFactory factory which creates <code>Cacheable</code>s
1:73a34db:      * @param name name of the cache
1:d7a1ddd:      * @param initialSize initial capacity of the cache (number of objects)
1:73a34db:      * @param maximumSize maximum size of the cache (number of objects)
1:73a34db:      * @return a <code>ConcurrentCache</code> instance
1:73a34db:      */
1:73a34db:     public CacheManager newCacheManager(CacheableFactory holderFactory,
1:73a34db:                                         String name,
1:73a34db:                                         int initialSize, int maximumSize) {
1:d7a1ddd:         return new ConcurrentCache(holderFactory, name,
1:d7a1ddd:                                    initialSize, maximumSize);
1:73a34db:     }
1:73a34db: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d7a1ddd
/////////////////////////////////////////////////////////////////////////
1:      * @param initialSize initial capacity of the cache (number of objects)
1:         return new ConcurrentCache(holderFactory, name,
1:                                    initialSize, maximumSize);
commit:7a816cb
/////////////////////////////////////////////////////////////////////////
0:         // TODO - use the initial size
0:         return new ConcurrentCache(holderFactory, name, maximumSize);
commit:73a34db
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.cache.ConcurrentCacheFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.cache;
1: 
1: import org.apache.derby.iapi.services.cache.CacheFactory;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: import org.apache.derby.iapi.services.cache.CacheableFactory;
1: 
1: /**
1:  * Factory class which creates cache manager instances based on the
1:  * <code>ConcurrentCache</code> implementation.
1:  */
1: public class ConcurrentCacheFactory implements CacheFactory {
1:     /**
1:      * Create a new <code>ConcurrentCache</code> instance.
1:      *
1:      * @param holderFactory factory which creates <code>Cacheable</code>s
1:      * @param name name of the cache
0:      * @param initialSize initial size of the cache (number of objects)
1:      * @param maximumSize maximum size of the cache (number of objects)
1:      * @return a <code>ConcurrentCache</code> instance
1:      */
1:     public CacheManager newCacheManager(CacheableFactory holderFactory,
1:                                         String name,
1:                                         int initialSize, int maximumSize) {
0:         return new ConcurrentCache(holderFactory, name);
1:     }
1: }
============================================================================