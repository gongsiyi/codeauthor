3:e3e3ca3: /*
1:e3e3ca3: 
1:e3e3ca3:    Derby - Class org.apache.derby.jdbc.AutoloadedDriver
1:e3e3ca3: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:e3e3ca3: 
1:e3e3ca3:       http://www.apache.org/licenses/LICENSE-2.0
1:e3e3ca3: 
1:e3e3ca3:    Unless required by applicable law or agreed to in writing, software
1:e3e3ca3:    distributed under the License is distributed on an "AS IS" BASIS,
1:e3e3ca3:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3e3ca3:    See the License for the specific language governing permissions and
1:e3e3ca3:    limitations under the License.
1:e3e3ca3: 
2:e3e3ca3:  */
1:e3e3ca3: 
1:e3e3ca3: package org.apache.derby.jdbc;
1:e3e3ca3: 
1:e3e3ca3: import java.sql.DriverManager;
1:e3e3ca3: import java.sql.Driver;
1:e3e3ca3: import java.sql.Connection;
1:e3e3ca3: import java.sql.DriverPropertyInfo;
1:e3e3ca3: import java.sql.SQLException;
1:eec86ed: import java.sql.SQLFeatureNotSupportedException;
1:e3e3ca3: 
1:8251716: import java.security.AccessControlException;
1:8d5db17: import java.security.AccessController;
1:8d5db17: import java.security.PrivilegedActionException;
1:8d5db17: import java.security.PrivilegedExceptionAction;
1:e3e3ca3: import java.util.Properties;
1:eec86ed: import java.util.logging.Logger;
1:e3e3ca3: 
1:e3e3ca3: import org.apache.derby.iapi.reference.MessageId;
1:3bf98e0: import org.apache.derby.iapi.reference.SQLState;
1:e3e3ca3: import org.apache.derby.iapi.services.i18n.MessageService;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:8251716: import org.apache.derby.iapi.services.monitor.Monitor;
1:3bf98e0: import org.apache.derby.impl.jdbc.Util;
1:e3e3ca3: 
1:e3e3ca3: 
1:e3e3ca3: /**
1:83deb87:    This is the dummy driver which is registered with the DriverManager and
1:645c78d:    which is autoloaded by JDBC4. Loading this class will NOT automatically
1:645c78d:    boot the Derby engine, but it will register this class as a valid
1:645c78d:    Driver with the DriverManager.
1:e3e3ca3:    Instead, the engine boots lazily when you ask for a
1:e3e3ca3:    Connection. Alternatively, you can force the engine to boot as follows:
1:e3e3ca3: 
1:e3e3ca3:    	 <PRE>
1:e3e3ca3: 	 Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1:e3e3ca3: 
1:e3e3ca3: 	 // or
1:e3e3ca3: 
1:e3e3ca3:      new org.apache.derby.jdbc.EmbeddedDriver();
1:e3e3ca3: 
1:e3e3ca3:     
1:e3e3ca3: 	</PRE>
1:e3e3ca3: */
1:e3e3ca3: public class AutoloadedDriver implements Driver
2:e3e3ca3: {
1:e3e3ca3: 	// This flag is set if the engine is forcibly brought down.
1:e3e3ca3: 	private	static	boolean	_engineForcedDown = false;
1:e3e3ca3: 	
1:e3e3ca3: 
1:c341df0:     // This is the driver that memorizes the autoloadeddriver (DERBY-2905)
1:8d5db17:     private static AutoloadedDriver _autoloadedDriver;
1:c341df0: 
1:09869c6: 	//
1:e3e3ca3: 	// This is the driver that's specific to the JDBC level we're running at.
1:e3e3ca3: 	// It's the module which boots the whole Derby engine.
1:09869c6: 	//
1:e3e3ca3: 	private	static	Driver	_driverModule;
1:e3e3ca3: 	
1:e3e3ca3: 	static
1:09869c6: 	{
1:09869c6:             registerMe( new AutoloadedDriver() );
1:09869c6: 	}
1:09869c6: 
1:09869c6: 	protected static void   registerMe( AutoloadedDriver me )
1:09869c6: 	{
1:09869c6: 		try {
1:09869c6:             _autoloadedDriver = me;
1:45cb2df:             DriverManager.registerDriver( _autoloadedDriver );
1:09869c6: 		}
1:e3e3ca3: 		catch (SQLException se)
1:e3e3ca3: 		{
1:e3e3ca3: 			String	message = MessageService.getTextMessage
1:e3e3ca3: 				(MessageId.JDBC_DRIVER_REGISTER_ERROR, se.getMessage() );
1:e3e3ca3: 
1:e3e3ca3: 			throw new IllegalStateException( message );
1:09869c6: 		}
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3: 	/*
1:e3e3ca3: 	** Methods from java.sql.Driver.
1:e3e3ca3: 	*/
1:e3e3ca3: 	/**
1:e3e3ca3: 		Accept anything that starts with <CODE>jdbc:derby:</CODE>.
1:e3e3ca3: 		@exception SQLException if a database-access error occurs.
1:e3e3ca3:     @see java.sql.Driver
1:e3e3ca3: 	*/
1:e3e3ca3: 	public boolean acceptsURL(String url) throws SQLException {
1:e3e3ca3: 
3:e3e3ca3: 		//
1:e3e3ca3: 		// We don't want to accidentally boot the engine just because
1:e3e3ca3: 		// the application is looking for a connection from some other
1:e3e3ca3: 		// driver.
1:e3e3ca3: 		//
1:906808e: 		return !_engineForcedDown && InternalDriver.embeddedDriverAcceptsURL(url);
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3:    
1:e3e3ca3: 	/**
1:e3e3ca3: 		Connect to the URL if possible
1:e3e3ca3: 		@exception SQLException illegal url or problem with connectiong
1:e3e3ca3:     @see java.sql.Driver
1:e3e3ca3:   */
1:e3e3ca3: 	public Connection connect(String url, Properties info)
1:e3e3ca3: 		throws SQLException
1:e3e3ca3: 	{
1:e3e3ca3: 		//
1:e3e3ca3: 		// This pretty piece of logic compensates for the following behavior
1:e3e3ca3: 		// of the DriverManager: When asked to get a Connection, the
1:e3e3ca3: 		// DriverManager cycles through all of its autoloaded drivers, looking
1:e3e3ca3: 		// for one which will return a Connection. Without this pretty logic,
1:e3e3ca3: 		// the embedded driver module will be booted by any request for
1:e3e3ca3: 		// a connection which cannot be satisfied by drivers ahead of us
1:e3e3ca3: 		// in the list.
1:e3e3ca3: 		if (!InternalDriver.embeddedDriverAcceptsURL(url)) { return null; }
1:e3e3ca3: 
1:e3e3ca3: 		return getDriverModule().connect(url, info);
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3:   /**
1:e3e3ca3:    * Returns an array of DriverPropertyInfo objects describing possible properties.
1:e3e3ca3:     @exception SQLException if a database-access error occurs.
1:e3e3ca3:     @see java.sql.Driver
1:e3e3ca3:    */
1:e3e3ca3: 	public  DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
1:e3e3ca3: 		throws SQLException
1:e3e3ca3: 	{
1:e3e3ca3: 		return getDriverModule().getPropertyInfo(url, info);
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3:     /**
1:e3e3ca3:      * Returns the driver's major version number. 
1:e3e3ca3:      @see java.sql.Driver
1:e3e3ca3:      */
1:e3e3ca3: 	public int getMajorVersion() {
1:e3e3ca3: 		try {
1:e3e3ca3: 			return (getDriverModule().getMajorVersion());
1:e3e3ca3: 		}
1:e3e3ca3: 		catch (SQLException se) {
1:e3e3ca3: 			return 0;
1:e3e3ca3: 		}
1:e3e3ca3: 	}
1:e3e3ca3:     /**
1:e3e3ca3:      * Returns the driver's minor version number.
1:e3e3ca3:      @see java.sql.Driver
1:e3e3ca3:      */
1:e3e3ca3: 	public int getMinorVersion() {
1:e3e3ca3: 		try {
1:e3e3ca3: 			return (getDriverModule().getMinorVersion());
1:e3e3ca3: 		}
1:e3e3ca3: 		catch (SQLException se) {
1:e3e3ca3: 			return 0;
1:e3e3ca3: 		}
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3:   /**
1:e3e3ca3:    * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
1:e3e3ca3:      @see java.sql.Driver
1:e3e3ca3:    */
1:e3e3ca3: 	public boolean jdbcCompliant() {
1:e3e3ca3: 		try {
1:e3e3ca3: 			return (getDriverModule().jdbcCompliant());
1:e3e3ca3: 		}
1:e3e3ca3: 		catch (SQLException se) {
1:e3e3ca3: 			return false;
1:e3e3ca3: 		}
1:e3e3ca3: 	}
1:e3e3ca3: 
1:eec86ed:     ////////////////////////////////////////////////////////////////////
1:eec86ed:     //
1:eec86ed:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:eec86ed:     //
1:eec86ed:     ////////////////////////////////////////////////////////////////////
1:eec86ed: 
1:eec86ed:     public  Logger getParentLogger() throws SQLFeatureNotSupportedException
1:eec86ed:     {
1:eec86ed:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:eec86ed:     }
1:eec86ed:     
1:e3e3ca3: 	///////////////////////////////////////////////////////////////////////
1:e3e3ca3: 	//
1:e3e3ca3: 	// Support for booting and shutting down the engine.
1:e3e3ca3: 	//
1:e3e3ca3: 	///////////////////////////////////////////////////////////////////////
1:e3e3ca3: 
1:e3e3ca3: 	/*
1:e3e3ca3: 	** Retrieve the driver which is specific to our JDBC level.
1:e3e3ca3: 	** We defer real work to this specific driver.
1:e3e3ca3: 	*/
1:906808e: 	static	Driver getDriverModule() throws SQLException {
1:e3e3ca3: 
1:45cb2df: 		if ( _engineForcedDown && (_autoloadedDriver == null))
1:e3e3ca3: 		{
1:3bf98e0: 			// Driver not registered
1:3bf98e0:             throw Util.generateCsSQLException( SQLState.CORE_JDBC_DRIVER_UNREGISTERED );
1:e3e3ca3: 		}
1:e3e3ca3: 
1:e3e3ca3: 		if ( !isBooted() ) { EmbeddedDriver.boot(); }
1:e3e3ca3: 
1:e3e3ca3: 		return _driverModule;
1:e3e3ca3: 	}
1:e3e3ca3: 	
1:c341df0: 	/**
1:e3e3ca3: 	** Record which driver module actually booted.
1:45cb2df: 	*  @param driver the driver register to DriverManager is not AutoloadedDriver
1:45cb2df: 	**/
1:906808e: 	static	void	registerDriverModule( Driver driver )
1:e3e3ca3: 	{
1:e3e3ca3: 		_driverModule = driver;
1:e3e3ca3: 		_engineForcedDown = false;
1:e3e3ca3: 		
1:e3e3ca3:         try {
1:57af2a5:             if (_autoloadedDriver == null) {
1:c341df0:                 //Support JDBC 4 or higher (DERBY-2905)
1:c341df0:                 _autoloadedDriver = makeAutoloadedDriver();
1:57af2a5:                 DriverManager.registerDriver(_autoloadedDriver);
1:e3e3ca3:             }
1:45cb2df:         } catch (SQLException e) {
1:45cb2df:             if (SanityManager.DEBUG)
1:45cb2df:                 SanityManager.THROWASSERT(e);
1:e3e3ca3:         }
1:e3e3ca3: 	}
1:e3e3ca3: 	
1:57af2a5: 	/**
1:45cb2df: 	** Unregister the driver and the AutoloadedDriver if exists. 
1:45cb2df: 	*  This happens when the engine is forcibly shut down.
1:45cb2df: 	*  
1:45cb2df: 	**/
1:906808e: 	static	void	unregisterDriverModule()
1:e3e3ca3: 	{
1:e3e3ca3: 		_engineForcedDown = true;
1:c341df0:         try {
1:57af2a5:             // deregister is false if user set deregister=false attribute (DERBY-2905)
1:a6532d0:             if (InternalDriver.getDeregister() && _autoloadedDriver != null) {
1:8d5db17:                 deregisterDriver(_autoloadedDriver);
1:45cb2df:                 _autoloadedDriver = null;
1:c341df0:             }
1:8d5db17: 
1:8d5db17:             // DERBY-5085, need to restore the default value
1:8d5db17:             InternalDriver.setDeregister(true);
1:8d5db17: 
1:e3e3ca3:             _driverModule = null;
1:45cb2df:         } catch (SQLException e) {
1:45cb2df:             if (SanityManager.DEBUG)
1:45cb2df:                 SanityManager.THROWASSERT(e);
1:e3e3ca3:         }
1:57af2a5: 	}
1:8d5db17: 
1:8d5db17:     private static void deregisterDriver(final AutoloadedDriver driver)
1:8d5db17:             throws SQLException {
1:8d5db17:         // DERBY-6224: DriverManager.deregisterDriver() requires a special
1:8d5db17:         // permission in JDBC 4.2 and later. Call it in a privileged block
1:8d5db17:         // so that the permission doesn't have to be granted to code that
1:8d5db17:         // invokes engine shutdown.
1:8d5db17:         try {
1:8d5db17:             AccessController.doPrivileged(
1:8d5db17:                     new PrivilegedExceptionAction<Void>() {
1:8d5db17:                 public Void run() throws SQLException {
1:8d5db17:                     // Requires SQLPermission("deregisterDriver")
1:8d5db17:                     DriverManager.deregisterDriver(driver);
1:8d5db17:                     return null;
1:8d5db17:                 }
1:8d5db17:             });
1:8d5db17:         } catch (PrivilegedActionException pae) {
1:8d5db17:             throw (SQLException) pae.getCause();
1:8251716:         } catch (AccessControlException ace) {
1:8251716:             // Since no permission was needed for deregisterDriver() before
1:8251716:             // Java 8, applications may be surprised to find that engine
1:8251716:             // shutdown fails because of it. For backward compatibility,
1:8251716:             // don't fail shutdown if the permission is missing. Instead,
1:8251716:             // log a message saying the driver could not be deregistered.
1:8251716:             Monitor.logTextMessage(MessageId.CONN_DEREGISTER_NOT_PERMITTED);
1:8251716:             Monitor.logThrowable(ace);
1:8d5db17:         }
1:8d5db17:     }
1:e3e3ca3: 
1:e3e3ca3: 	/*
1:e3e3ca3: 	** Return true if the engine has been booted.
1:e3e3ca3: 	*/
1:e3e3ca3: 	private	static	boolean	isBooted()
1:e3e3ca3: 	{
1:e3e3ca3: 		return ( _driverModule != null );
1:e3e3ca3: 	}
1:e3e3ca3: 	
1:57af2a5:     /**
1:595307e:      * Load the most capable driver available.
1:c341df0:      * But if the vm level doesn't support it, then we fall
1:595307e:      * back on a lower-level driver.
1:c341df0:      * @return AutoloadedDriver 
1:e3e3ca3:      */
1:c341df0:     private static AutoloadedDriver makeAutoloadedDriver() 
1:595307e:     {
1:595307e:         // Currently, there's only one driver, and it supports all the JDBC
1:595307e:         // levels that Derby supports. Return an instance of it.
1:c341df0:         return new AutoloadedDriver(); 
1:e3e3ca3:     } 
1:c341df0: }
1:e3e3ca3: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:5e5b949
/////////////////////////////////////////////////////////////////////////
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1:      * Load the most capable driver available.
1:      * back on a lower-level driver.
1:     {
1:         // Currently, there's only one driver, and it supports all the JDBC
1:         // levels that Derby supports. Return an instance of it.
commit:8251716
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessControlException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.Monitor;
/////////////////////////////////////////////////////////////////////////
1:         } catch (AccessControlException ace) {
1:             // Since no permission was needed for deregisterDriver() before
1:             // Java 8, applications may be surprised to find that engine
1:             // shutdown fails because of it. For backward compatibility,
1:             // don't fail shutdown if the permission is missing. Instead,
1:             // log a message saying the driver could not be deregistered.
1:             Monitor.logTextMessage(MessageId.CONN_DEREGISTER_NOT_PERMITTED);
1:             Monitor.logThrowable(ace);
commit:8d5db17
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:     private static AutoloadedDriver _autoloadedDriver;
/////////////////////////////////////////////////////////////////////////
1:                 deregisterDriver(_autoloadedDriver);
1: 
1:             // DERBY-5085, need to restore the default value
1:             InternalDriver.setDeregister(true);
1: 
1: 
1:     private static void deregisterDriver(final AutoloadedDriver driver)
1:             throws SQLException {
1:         // DERBY-6224: DriverManager.deregisterDriver() requires a special
1:         // permission in JDBC 4.2 and later. Call it in a privileged block
1:         // so that the permission doesn't have to be granted to code that
1:         // invokes engine shutdown.
1:         try {
1:             AccessController.doPrivileged(
1:                     new PrivilegedExceptionAction<Void>() {
1:                 public Void run() throws SQLException {
1:                     // Requires SQLPermission("deregisterDriver")
1:                     DriverManager.deregisterDriver(driver);
1:                     return null;
1:                 }
1:             });
1:         } catch (PrivilegedActionException pae) {
1:             throw (SQLException) pae.getCause();
1:         }
1:     }
commit:a6532d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (InternalDriver.getDeregister() && _autoloadedDriver != null) {
0:                 InternalDriver.setDeregister(true);
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     public  Logger getParentLogger() throws SQLFeatureNotSupportedException
1:     {
1:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:     }
1:     
commit:3bf98e0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.impl.jdbc.Util;
/////////////////////////////////////////////////////////////////////////
1: 			// Driver not registered
1:             throw Util.generateCsSQLException( SQLState.CORE_JDBC_DRIVER_UNREGISTERED );
commit:09869c6
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             //
0:             // We'd rather load this slightly more capable driver.
0:             // But if the vm level doesn't support it, then we fall
0:             // back on the JDBC3 level driver.
1:             //
0:             Class.forName( "org.apache.derby.jdbc.AutoloadedDriver40" );
1:         }
0:         catch (Throwable e)
1:         {
1:             registerMe( new AutoloadedDriver() );
1:         }
1: 	}
1: 
1: 	protected static void   registerMe( AutoloadedDriver me )
1: 	{
1:             _autoloadedDriver = me;
commit:83deb87
/////////////////////////////////////////////////////////////////////////
1:    This is the dummy driver which is registered with the DriverManager and
0:    which is autoloaded by JDBC4. Loading this class will NOT automatically boot the Derby engine.
commit:e3e3ca3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.jdbc.AutoloadedDriver
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import java.sql.DriverManager;
1: import java.sql.Driver;
1: import java.sql.Connection;
1: import java.sql.DriverPropertyInfo;
1: import java.sql.SQLException;
1: 
0: import java.io.PrintStream;
1: import java.util.Properties;
1: 
1: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.reference.Attribute;
1: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.jdbc.JDBCBoot;
1: 
1: 
1: /**
0:    This is the dummy driver which is autoloaded under JDBC4 and registered with
0:    the DriverManager. Loading this class will NOT automatically boot the Derby engine.
1:    Instead, the engine boots lazily when you ask for a
1:    Connection. Alternatively, you can force the engine to boot as follows:
1: 
1:    	 <PRE>
1: 	 Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1: 
1: 	 // or
1: 
1:      new org.apache.derby.jdbc.EmbeddedDriver();
1: 
1:     
1: 	</PRE>
1: */
1: public class AutoloadedDriver implements Driver
1: {
1: 	// This flag is set if the engine is forcibly brought down.
1: 	private	static	boolean	_engineForcedDown = false;
1: 	
1: 	//
1: 	// This is the driver that's specific to the JDBC level we're running at.
1: 	// It's the module which boots the whole Derby engine.
1: 	//
1: 	private	static	Driver	_driverModule;
1: 	
1: 	static
1: 	{
1: 		try {
0: 			DriverManager.registerDriver( new AutoloadedDriver() );
1: 		}
1: 		catch (SQLException se)
1: 		{
1: 			String	message = MessageService.getTextMessage
1: 				(MessageId.JDBC_DRIVER_REGISTER_ERROR, se.getMessage() );
1: 
1: 			throw new IllegalStateException( message );
1: 		}
1: 	}
1: 
1: 	/*
1: 	** Methods from java.sql.Driver.
1: 	*/
1: 	/**
1: 		Accept anything that starts with <CODE>jdbc:derby:</CODE>.
1: 		@exception SQLException if a database-access error occurs.
1:     @see java.sql.Driver
1: 	*/
1: 	public boolean acceptsURL(String url) throws SQLException {
1: 
1: 		//
1: 		// We don't want to accidentally boot the engine just because
1: 		// the application is looking for a connection from some other
1: 		// driver.
1: 		//
0: 		return ( isBooted() && InternalDriver.embeddedDriverAcceptsURL(url) );
1: 	}
1: 
1:    
1: 	/**
1: 		Connect to the URL if possible
1: 		@exception SQLException illegal url or problem with connectiong
1:     @see java.sql.Driver
1:   */
1: 	public Connection connect(String url, Properties info)
1: 		throws SQLException
1: 	{
1: 		//
1: 		// This pretty piece of logic compensates for the following behavior
1: 		// of the DriverManager: When asked to get a Connection, the
1: 		// DriverManager cycles through all of its autoloaded drivers, looking
1: 		// for one which will return a Connection. Without this pretty logic,
1: 		// the embedded driver module will be booted by any request for
1: 		// a connection which cannot be satisfied by drivers ahead of us
1: 		// in the list.
1: 		if (!InternalDriver.embeddedDriverAcceptsURL(url)) { return null; }
1: 
1: 		return getDriverModule().connect(url, info);
1: 	}
1: 
1:   /**
1:    * Returns an array of DriverPropertyInfo objects describing possible properties.
1:     @exception SQLException if a database-access error occurs.
1:     @see java.sql.Driver
1:    */
1: 	public  DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
1: 		throws SQLException
1: 	{
1: 		return getDriverModule().getPropertyInfo(url, info);
1: 	}
1: 
1:     /**
1:      * Returns the driver's major version number. 
1:      @see java.sql.Driver
1:      */
1: 	public int getMajorVersion() {
1: 		try {
1: 			return (getDriverModule().getMajorVersion());
1: 		}
1: 		catch (SQLException se) {
1: 			return 0;
1: 		}
1: 	}
1:     /**
1:      * Returns the driver's minor version number.
1:      @see java.sql.Driver
1:      */
1: 	public int getMinorVersion() {
1: 		try {
1: 			return (getDriverModule().getMinorVersion());
1: 		}
1: 		catch (SQLException se) {
1: 			return 0;
1: 		}
1: 	}
1: 
1:   /**
1:    * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
1:      @see java.sql.Driver
1:    */
1: 	public boolean jdbcCompliant() {
1: 		try {
1: 			return (getDriverModule().jdbcCompliant());
1: 		}
1: 		catch (SQLException se) {
1: 			return false;
1: 		}
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	// Support for booting and shutting down the engine.
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/*
1: 	** Retrieve the driver which is specific to our JDBC level.
1: 	** We defer real work to this specific driver.
1: 	*/
0: 	public static	Driver getDriverModule() throws SQLException {
1: 
0: 		if ( _engineForcedDown )
1: 		{
0: 			// Driver not registered 
0: 			throw new SQLException
0: 				(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
1: 		}
1: 
1: 		if ( !isBooted() ) { EmbeddedDriver.boot(); }
1: 
1: 		return _driverModule;
1: 	}
1: 	
1: 	/*
1: 	** Record which driver module actually booted.
1: 	*/
0: 	protected	static	void	registerDriverModule( Driver driver )
1: 	{
1: 		_driverModule = driver;
1: 		_engineForcedDown = false;
1: 	}
1: 	
1: 	/*
0: 	** Unregister the driver. This happens when the engine is
0: 	** forcibly shut down.
1: 	*/
0: 	protected	static	void	unregisterDriverModule()
1: 	{
1: 		_driverModule = null;
1: 		_engineForcedDown = true;
1: 	}
1: 	
1: 
1: 	/*
1: 	** Return true if the engine has been booted.
1: 	*/
1: 	private	static	boolean	isBooted()
1: 	{
1: 		return ( _driverModule != null );
1: 	}
1: 	
1: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8b6fe4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
author:Lily Wei
-------------------------------------------------------------------------------
commit:07c2cfc
/////////////////////////////////////////////////////////////////////////
0:                 //DERBY 5085, need to restore the default value
0:                 deregister = true;
commit:c341df0
/////////////////////////////////////////////////////////////////////////
1:     // This is the driver that memorizes the autoloadeddriver (DERBY-2905)
0:     // This flag is true unless the deregister attribute has been set to
0:     // false by the user (DERBY-2905)
/////////////////////////////////////////////////////////////////////////
1:                 //Support JDBC 4 or higher (DERBY-2905)
1:                 _autoloadedDriver = makeAutoloadedDriver();
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * load slightly more capable driver if possible.
1:      * But if the vm level doesn't support it, then we fall
0:      * back on the JDBC3 level driver.
1:      * @return AutoloadedDriver 
0:      */
1:     private static AutoloadedDriver makeAutoloadedDriver() 
0:     { 
1:         try { 
0:             return (AutoloadedDriver) Class.forName( "org.apache.derby.jdbc.AutoloadedDriver40" ).newInstance(); 
1:         } 
0:         catch (Throwable t) {} 
1: 
1:         return new AutoloadedDriver(); 
1:     } 
commit:57af2a5
/////////////////////////////////////////////////////////////////////////
0:     //This flag is set is deregister attribute is set by user, 
0:     //default is true (DERBY-2905)
0:     private static boolean deregister = true;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (_autoloadedDriver == null) {
0:                 _autoloadedDriver = new AutoloadedDriver();
1:                 DriverManager.registerDriver(_autoloadedDriver);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             // deregister is false if user set deregister=false attribute (DERBY-2905)
0:             if (deregister && _autoloadedDriver != null) {
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @param theValue set the deregister value
0:      */
0:     public static void setDeregister(boolean theValue) {
0:         AutoloadedDriver.deregister = theValue;
0:     }
0: 
1:     /**
0:      * @return the deregister value
0:      */
0:     public static boolean getDeregister() {
0:         return deregister;
0:     }
0: 
commit:45cb2df
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
0:     // This flag is set if AutoloadedDriver exists
0:     private static boolean activeautoloadeddriver = false;
0: 
0:     //This is the driver that memorizes the autoloadeddriver (DERBY-2905)
0:     private static Driver _autoloadedDriver;
0: 
/////////////////////////////////////////////////////////////////////////
0:             _autoloadedDriver = new AutoloadedDriver();
1:             DriverManager.registerDriver( _autoloadedDriver );
0:             activeautoloadeddriver = true;
/////////////////////////////////////////////////////////////////////////
1: 		if ( _engineForcedDown && (_autoloadedDriver == null))
/////////////////////////////////////////////////////////////////////////
0: 	/**
1: 	*  @param driver the driver register to DriverManager is not AutoloadedDriver
1: 	**/
0: 		
0:         try {
0:             if (!activeautoloadeddriver)
0:                 DriverManager.registerDriver(_driverModule);
1:         } catch (SQLException e) {
1:             if (SanityManager.DEBUG)
1:                 SanityManager.THROWASSERT(e);
0:         }
0: 	/**
1: 	** Unregister the driver and the AutoloadedDriver if exists. 
1: 	*  This happens when the engine is forcibly shut down.
1: 	*  
1: 	**/
0:         try {
0:             if (activeautoloadeddriver) {
0:                 DriverManager.deregisterDriver(_autoloadedDriver);
0:                 activeautoloadeddriver = false;
1:                 _autoloadedDriver = null;
0:             } else {
0:                 DriverManager.deregisterDriver(_driverModule);
0:             }
0:             _driverModule = null;
1:         } catch (SQLException e) {
1:             if (SanityManager.DEBUG)
1:                 SanityManager.THROWASSERT(e);
0:         }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:645c78d
/////////////////////////////////////////////////////////////////////////
1:    which is autoloaded by JDBC4. Loading this class will NOT automatically
1:    boot the Derby engine, but it will register this class as a valid
1:    Driver with the DriverManager.
commit:906808e
/////////////////////////////////////////////////////////////////////////
1: 		return !_engineForcedDown && InternalDriver.embeddedDriverAcceptsURL(url);
/////////////////////////////////////////////////////////////////////////
1: 	static	Driver getDriverModule() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 	static	void	registerDriverModule( Driver driver )
/////////////////////////////////////////////////////////////////////////
1: 	static	void	unregisterDriverModule()
commit:c6148c9
/////////////////////////////////////////////////////////////////////////
0: 		return InternalDriver.embeddedDriverAcceptsURL(url);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================