1:eac0369: /*
21:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.InputStreamUtil
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:27628a0:  */
1:27628a0: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.*;
1:eac0369: 
3:27628a0: /**
1:eac0369: 	Utility methods for InputStream that are stand-ins for
1:eac0369: 	a small subset of DataInput methods. This avoids pushing
1:eac0369: 	a DataInputStream just to get this functionality.
1:27628a0: */
1:2aa32e8: public final class InputStreamUtil {
1:2aa32e8:     private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Read an unsigned byte from an InputStream, throwing an EOFException
1:2aa32e8: 		if the end of the input is reached.
1:2aa32e8: 
1:2aa32e8: 		@exception IOException if an I/O error occurs.
1:2aa32e8: 		@exception EOFException if the end of the stream is reached
1:2aa32e8: 
1:2aa32e8: 		@see DataInput#readUnsignedByte
1:2aa32e8: 	
1:2aa32e8: 	*/
1:2aa32e8: 	public static int readUnsignedByte(InputStream in) throws IOException {
1:2aa32e8: 		int b = in.read();
1:2aa32e8: 		if (b < 0)
1:2aa32e8: 			throw new EOFException();
1:2aa32e8: 
1:2aa32e8: 		return b;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Read a number of bytes into an array.
1:2aa32e8: 
1:2aa32e8: 		@exception IOException if an I/O error occurs.
1:2aa32e8: 		@exception EOFException if the end of the stream is reached
1:2aa32e8: 
1:2aa32e8: 		@see DataInput#readFully
1:2aa32e8: 
1:2aa32e8: 	*/
1:2aa32e8: 	public static void readFully(InputStream in, byte b[],
1:2aa32e8:                                  int offset,
1:2aa32e8:                                  int len) throws IOException
1:2aa32e8: 	{
1:2aa32e8: 		do {
1:2aa32e8: 			int bytesRead = in.read(b, offset, len);
1:2aa32e8: 			if (bytesRead < 0)
1:2aa32e8: 				throw new EOFException();
1:2aa32e8: 			len -= bytesRead;
1:2aa32e8: 			offset += bytesRead;
1:2aa32e8: 		} while (len != 0);
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Read a number of bytes into an array.
1:2aa32e8:         Keep reading in a loop until len bytes are read or EOF is reached or
1:2aa32e8:         an exception is thrown. Return the number of bytes read.
1:2aa32e8:         (InputStream.read(byte[],int,int) does not guarantee to read len bytes
1:2aa32e8:          even if it can do so without reaching EOF or raising an exception.)
1:2aa32e8: 
1:2aa32e8: 		@exception IOException if an I/O error occurs.
1:2aa32e8: 	*/
1:2aa32e8: 	public static int readLoop(InputStream in,
1:2aa32e8:                                 byte b[],
1:2aa32e8:                                 int offset,
1:2aa32e8:                                 int len)
1:2aa32e8:         throws IOException
1:2aa32e8: 	{
1:2aa32e8:         int firstOffset = offset;
1:2aa32e8: 		do {
1:2aa32e8: 			int bytesRead = in.read(b, offset, len);
1:2aa32e8: 			if (bytesRead <= 0)
1:2aa32e8:                 break;
1:2aa32e8: 			len -= bytesRead;
1:2aa32e8: 			offset += bytesRead;
1:2aa32e8: 		} while (len != 0);
1:2aa32e8:         return offset - firstOffset;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8:     /**
1:2aa32e8:      * Skips until EOF, returns number of bytes skipped.
1:2aa32e8:      * @param is
1:2aa32e8:      *      InputStream to be skipped.
1:2aa32e8:      * @return
1:2aa32e8:      *      number of bytes skipped in fact.
1:2aa32e8:      * @throws IOException
1:2aa32e8:      *      if IOException occurs. It doesn't contain EOFException.
1:2aa32e8:      * @throws NullPointerException
1:2aa32e8:      *      if the param 'is' equals null.
1:2aa32e8:      */
1:2aa32e8:     public static long skipUntilEOF(InputStream is) throws IOException {
1:2aa32e8:         if(is == null)
1:2aa32e8:             throw new NullPointerException();
1:2aa32e8: 
1:2aa32e8:         long bytes = 0;
1:2aa32e8:         while(true){
1:2aa32e8:             long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);
1:2aa32e8:             bytes += r;
1:2aa32e8:             if(r < SKIP_FRAGMENT_SIZE)
1:2aa32e8:                 return bytes;
1:2aa32e8:         }
1:2aa32e8:     }
1:2aa32e8: 
1:2aa32e8:     /**
1:2aa32e8:      * Skips requested number of bytes,
1:2aa32e8:      * throws EOFException if there is too few bytes in the stream.
1:2aa32e8:      * @param is
1:2aa32e8:      *      InputStream to be skipped.
1:2aa32e8:      * @param skippedBytes
1:dbed020:      *      number of bytes to skip. if skippedBytes &gl;= zero, do nothing.
1:2aa32e8:      * @throws EOFException
1:2aa32e8:      *      if EOF meets before requested number of bytes are skipped.
1:2aa32e8:      * @throws IOException
1:2aa32e8:      *      if IOException occurs. It doesn't contain EOFException.
1:2aa32e8:      * @throws NullPointerException
1:2aa32e8:      *      if the param 'is' equals null.
1:2aa32e8:      */
1:2aa32e8:     public static void skipFully(InputStream is, long skippedBytes)
1:2aa32e8:     throws IOException {
1:2aa32e8:         if(is == null)
1:2aa32e8:             throw new NullPointerException();
1:2aa32e8: 
1:2aa32e8:         if(skippedBytes <= 0)
1:2aa32e8:             return;
1:2aa32e8: 
1:2aa32e8:         long bytes = skipPersistent(is, skippedBytes);
1:2aa32e8: 
1:2aa32e8:         if(bytes < skippedBytes)
1:2aa32e8:             throw new EOFException();
1:2aa32e8:     }
1:2aa32e8: 
1:2aa32e8:     /**
1:2aa32e8:      * Tries harder to skip the requested number of bytes.
1:2aa32e8:      * <p>
1:2aa32e8:      * Note that even if the method fails to skip the requested number of bytes,
1:2aa32e8:      * it will not throw an exception. If this happens, the caller can be sure
1:2aa32e8:      * that end-of-stream has been reached.
1:2aa32e8:      *
1:2aa32e8:      * @param in byte stream
1:2aa32e8:      * @param bytesToSkip the number of bytes to skip
1:2aa32e8:      * @return The number of bytes skipped.
1:2aa32e8:      * @throws IOException if reading from the stream fails
1:2aa32e8:      */
1:2aa32e8:     public static final long skipPersistent(InputStream in, long bytesToSkip)
1:2aa32e8:     throws IOException {
1:2aa32e8:         long skipped = 0;
1:2aa32e8:         while (skipped < bytesToSkip) {
1:2aa32e8:             long skippedNow = in.skip(bytesToSkip - skipped);
1:2aa32e8:             if (skippedNow == 0) {
1:2aa32e8:                 if (in.read() == -1) {
1:2aa32e8:                     // EOF, return what we have and leave it up to caller to
1:2aa32e8:                     // decide what to do about it.
1:2aa32e8:                     break;
1:2aa32e8:                 } else {
1:2aa32e8:                     skippedNow = 1; // Added to count below.
1:2aa32e8:                 }
1:2aa32e8:             }
1:2aa32e8:             skipped += skippedNow;
1:2aa32e8:         }
1:2aa32e8:         return skipped;
1:2aa32e8:     }
1:2aa32e8: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      *      number of bytes to skip. if skippedBytes &gl;= zero, do nothing.
commit:2aa32e8
/////////////////////////////////////////////////////////////////////////
1: public final class InputStreamUtil {
1:     private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
1: 
1: 	/**
1: 		Read an unsigned byte from an InputStream, throwing an EOFException
1: 		if the end of the input is reached.
1: 
1: 		@exception IOException if an I/O error occurs.
1: 		@exception EOFException if the end of the stream is reached
1: 
1: 		@see DataInput#readUnsignedByte
1: 	
1: 	*/
1: 	public static int readUnsignedByte(InputStream in) throws IOException {
1: 		int b = in.read();
1: 		if (b < 0)
1: 			throw new EOFException();
1: 
1: 		return b;
1: 	}
1: 
1: 	/**
1: 		Read a number of bytes into an array.
1: 
1: 		@exception IOException if an I/O error occurs.
1: 		@exception EOFException if the end of the stream is reached
1: 
1: 		@see DataInput#readFully
1: 
1: 	*/
1: 	public static void readFully(InputStream in, byte b[],
1:                                  int offset,
1:                                  int len) throws IOException
1: 	{
1: 		do {
1: 			int bytesRead = in.read(b, offset, len);
1: 			if (bytesRead < 0)
1: 				throw new EOFException();
1: 			len -= bytesRead;
1: 			offset += bytesRead;
1: 		} while (len != 0);
1: 	}
1: 
1: 
1: 	/**
1: 		Read a number of bytes into an array.
1:         Keep reading in a loop until len bytes are read or EOF is reached or
1:         an exception is thrown. Return the number of bytes read.
1:         (InputStream.read(byte[],int,int) does not guarantee to read len bytes
1:          even if it can do so without reaching EOF or raising an exception.)
1: 
1: 		@exception IOException if an I/O error occurs.
1: 	*/
1: 	public static int readLoop(InputStream in,
1:                                 byte b[],
1:                                 int offset,
1:                                 int len)
1:         throws IOException
1: 	{
1:         int firstOffset = offset;
1: 		do {
1: 			int bytesRead = in.read(b, offset, len);
1: 			if (bytesRead <= 0)
1:                 break;
1: 			len -= bytesRead;
1: 			offset += bytesRead;
1: 		} while (len != 0);
1:         return offset - firstOffset;
1: 	}
1: 
1:     /**
1:      * Skips until EOF, returns number of bytes skipped.
1:      * @param is
1:      *      InputStream to be skipped.
1:      * @return
1:      *      number of bytes skipped in fact.
1:      * @throws IOException
1:      *      if IOException occurs. It doesn't contain EOFException.
1:      * @throws NullPointerException
1:      *      if the param 'is' equals null.
1:      */
1:     public static long skipUntilEOF(InputStream is) throws IOException {
1:         if(is == null)
1:             throw new NullPointerException();
1: 
1:         long bytes = 0;
1:         while(true){
1:             long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);
1:             bytes += r;
1:             if(r < SKIP_FRAGMENT_SIZE)
1:                 return bytes;
1:         }
1:     }
1: 
1:     /**
1:      * Skips requested number of bytes,
1:      * throws EOFException if there is too few bytes in the stream.
1:      * @param is
1:      *      InputStream to be skipped.
1:      * @param skippedBytes
0:      *      number of bytes to skip. if skippedBytes <= zero, do nothing.
1:      * @throws EOFException
1:      *      if EOF meets before requested number of bytes are skipped.
1:      * @throws IOException
1:      *      if IOException occurs. It doesn't contain EOFException.
1:      * @throws NullPointerException
1:      *      if the param 'is' equals null.
1:      */
1:     public static void skipFully(InputStream is, long skippedBytes)
1:     throws IOException {
1:         if(is == null)
1:             throw new NullPointerException();
1: 
1:         if(skippedBytes <= 0)
1:             return;
1: 
1:         long bytes = skipPersistent(is, skippedBytes);
1: 
1:         if(bytes < skippedBytes)
1:             throw new EOFException();
1:     }
1: 
1:     /**
1:      * Tries harder to skip the requested number of bytes.
1:      * <p>
1:      * Note that even if the method fails to skip the requested number of bytes,
1:      * it will not throw an exception. If this happens, the caller can be sure
1:      * that end-of-stream has been reached.
1:      *
1:      * @param in byte stream
1:      * @param bytesToSkip the number of bytes to skip
1:      * @return The number of bytes skipped.
1:      * @throws IOException if reading from the stream fails
1:      */
1:     public static final long skipPersistent(InputStream in, long bytesToSkip)
1:     throws IOException {
1:         long skipped = 0;
1:         while (skipped < bytesToSkip) {
1:             long skippedNow = in.skip(bytesToSkip - skipped);
1:             if (skippedNow == 0) {
1:                 if (in.read() == -1) {
1:                     // EOF, return what we have and leave it up to caller to
1:                     // decide what to do about it.
1:                     break;
1:                 } else {
1:                     skippedNow = 1; // Added to count below.
1:                 }
1:             }
1:             skipped += skippedNow;
1:         }
1:         return skipped;
1:     }
1: }
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
0: public final class InputStreamUtil extends org.apache.derby.shared.common.io.InputStreamUtil
0: {}
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:27628a0
/////////////////////////////////////////////////////////////////////////
0:     private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Skips until EOF, returns number of bytes skipped.
0:      * @param is
0:      *      InputStream to be skipped.
0:      * @return
0:      *      number of bytes skipped in fact.
0:      * @throws IOException
0:      *      if IOException occurs. It doesn't contain EOFException.
0:      * @throws NullPointerException
0:      *      if the param 'is' equals null.
1:      */
0:     public static long skipUntilEOF(InputStream is) throws IOException {
0:         if(is == null)
0:             throw new NullPointerException();
0:         long bytes = 0;
0:         while(true){
0:             long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);
0:             bytes += r;
0:             if(r < SKIP_FRAGMENT_SIZE)
0:                 return bytes;
0:         }
0:     }
1:     /**
0:      * Skips requested number of bytes,
0:      * throws EOFException if there is too few bytes in the stream.
0:      * @param is
0:      *      InputStream to be skipped.
0:      * @param skippedBytes
0:      *      number of bytes to skip. if skippedBytes <= zero, do nothing.
0:      * @throws EOFException
0:      *      if EOF meets before requested number of bytes are skipped.
0:      * @throws IOException
0:      *      if IOException occurs. It doesn't contain EOFException.
0:      * @throws NullPointerException
0:      *      if the param 'is' equals null.
1:      */
0:     public static void skipFully(InputStream is, long skippedBytes)
0:     throws IOException {
0:         if(is == null)
0:             throw new NullPointerException();
0:         if(skippedBytes <= 0)
0:             return;
0:         long bytes = skipPersistent(is, skippedBytes);
0:         if(bytes < skippedBytes)
0:             throw new EOFException();
0:     }
1: 
1:     /**
0:      * Tries harder to skip the requested number of bytes.
0:      * <p>
0:      * Note that even if the method fails to skip the requested number of bytes,
0:      * it will not throw an exception. If this happens, the caller can be sure
0:      * that end-of-stream has been reached.
0:      *
0:      * @param in byte stream
0:      * @param bytesToSkip the number of bytes to skip
0:      * @return The number of bytes skipped.
0:      * @throws IOException if reading from the stream fails
1:      */
0:     public static final long skipPersistent(InputStream in, long bytesToSkip)
0:     throws IOException {
0:         long skipped = 0;
0:         while (skipped < bytesToSkip) {
0:             long skippedNow = in.skip(bytesToSkip - skipped);
0:             if (skippedNow == 0) {
0:                 if (in.read() == -1) {
0:                     // EOF, return what we have and leave it up to caller to
0:                     // decide what to do about it.
0:                     break;
0:                 } else {
0:                     skippedNow = 1; // Added to count below.
0:                 }
0:             }
0:             skipped += skippedNow;
0:         }
0:         return skipped;
0:     }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.InputStreamUtil
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
0:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.*;
1: 
0: /**
1: 	Utility methods for InputStream that are stand-ins for
1: 	a small subset of DataInput methods. This avoids pushing
1: 	a DataInputStream just to get this functionality.
0: */
0: public final class InputStreamUtil {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
0: 	/**
0: 		Read an unsigned byte from an InputStream, throwing an EOFException
0: 		if the end of the input is reached.
1: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
1: 
0: 		@see DataInput#readUnsignedByte
1: 	
0: 	*/
0: 	public static int readUnsignedByte(InputStream in) throws IOException {
0: 		int b = in.read();
0: 		if (b < 0)
0: 			throw new EOFException();
1: 
0: 		return b;
0: 	}
1: 
0: 	/**
0: 		Read a number of bytes into an array.
1: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
1: 
0: 		@see DataInput#readFully
1: 
0: 	*/
0: 	public static void readFully(InputStream in, byte b[],
0:                                  int offset,
0:                                  int len) throws IOException
0: 	{
0: 		do {
0: 			int bytesRead = in.read(b, offset, len);
0: 			if (bytesRead < 0)
0: 				throw new EOFException();
0: 			len -= bytesRead;
0: 			offset += bytesRead;
0: 		} while (len != 0);
0: 	}
1: 
1: 
0: 	/**
0: 		Read a number of bytes into an array.
0:         Keep reading in a loop until len bytes are read or EOF is reached or
0:         an exception is thrown. Return the number of bytes read.
0:         (InputStream.read(byte[],int,int) does not guarantee to read len bytes
0:          even if it can do so without reaching EOF or raising an exception.)
1: 
0: 		@exception IOException if an I/O error occurs.
0: 	*/
0: 	public static int readLoop(InputStream in,
0:                                 byte b[],
0:                                 int offset,
0:                                 int len)
0:         throws IOException
0: 	{
0:         int firstOffset = offset;
0: 		do {
0: 			int bytesRead = in.read(b, offset, len);
0: 			if (bytesRead <= 0)
0:                 break;
0: 			len -= bytesRead;
0: 			offset += bytesRead;
0: 		} while (len != 0);
0:         return offset - firstOffset;
0: 	}
1: 
1: 
0: 	/**
0: 		Skip a number of bytes in the stream. Note that this version takes and returns
0: 		a long instead of the int used by skipBytes.
1: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
1: 
0: 		@see DataInput#skipBytes
0: 	*/
0: 	public static long skipBytes(InputStream in, long n) throws IOException {
1: 
0: 		while (n > 0) {
0: 			//System.out.println(" skip n = " + n);
0: 			long delta = in.skip(n);
0: 			//System.out.println(" skipped = " + delta);
0: 			if (delta < 0)
0: 				throw new EOFException();
0: 			n -= delta;
0: 		}
1: 
0: 		return n;
0: 	}
0: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.*;
0: 
0: /**
0: 	Utility methods for InputStream that are stand-ins for
0: 	a small subset of DataInput methods. This avoids pushing
0: 	a DataInputStream just to get this functionality.
0: */
0: public final class InputStreamUtil {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Read an unsigned byte from an InputStream, throwing an EOFException
0: 		if the end of the input is reached.
0: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
0: 
0: 		@see DataInput#readUnsignedByte
0: 	
0: 	*/
0: 	public static int readUnsignedByte(InputStream in) throws IOException {
0: 		int b = in.read();
0: 		if (b < 0)
0: 			throw new EOFException();
0: 
0: 		return b;
0: 	}
0: 
0: 	/**
0: 		Read a number of bytes into an array.
0: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
0: 
0: 		@see DataInput#readFully
0: 
0: 	*/
0: 	public static void readFully(InputStream in, byte b[],
0:                                  int offset,
0:                                  int len) throws IOException
0: 	{
0: 		do {
0: 			int bytesRead = in.read(b, offset, len);
0: 			if (bytesRead < 0)
0: 				throw new EOFException();
0: 			len -= bytesRead;
0: 			offset += bytesRead;
0: 		} while (len != 0);
0: 	}
0: 
0: 
0: 	/**
0: 		Read a number of bytes into an array.
0:         Keep reading in a loop until len bytes are read or EOF is reached or
0:         an exception is thrown. Return the number of bytes read.
0:         (InputStream.read(byte[],int,int) does not guarantee to read len bytes
0:          even if it can do so without reaching EOF or raising an exception.)
0: 
0: 		@exception IOException if an I/O error occurs.
0: 	*/
0: 	public static int readLoop(InputStream in,
0:                                 byte b[],
0:                                 int offset,
0:                                 int len)
0:         throws IOException
0: 	{
0:         int firstOffset = offset;
0: 		do {
0: 			int bytesRead = in.read(b, offset, len);
0: 			if (bytesRead <= 0)
0:                 break;
0: 			len -= bytesRead;
0: 			offset += bytesRead;
0: 		} while (len != 0);
0:         return offset - firstOffset;
0: 	}
0: 
0: 
0: 	/**
0: 		Skip a number of bytes in the stream. Note that this version takes and returns
0: 		a long instead of the int used by skipBytes.
0: 
0: 		@exception IOException if an I/O error occurs.
0: 		@exception EOFException if the end of the stream is reached
0: 
0: 		@see DataInput#skipBytes
0: 	*/
0: 	public static long skipBytes(InputStream in, long n) throws IOException {
0: 
0: 		while (n > 0) {
0: 			//System.out.println(" skip n = " + n);
0: 			long delta = in.skip(n);
0: 			//System.out.println(" skipped = " + delta);
0: 			if (delta < 0)
0: 				throw new EOFException();
0: 			n -= delta;
0: 		}
0: 
0: 		return n;
0: 	}
0: }
============================================================================