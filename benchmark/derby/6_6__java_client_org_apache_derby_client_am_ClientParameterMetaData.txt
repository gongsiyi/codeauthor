1:33776ff: /*
6:33776ff: 
1:69e3d06:    Derby - Class org.apache.derby.client.am.ClientParameterMetaData
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import java.sql.ParameterMetaData;
1:d506170: import java.sql.SQLException;
1:5ef7a0d: import org.apache.derby.shared.common.reference.SQLState;
1:d506170: 
1:33776ff: // Parameter meta data as used internally by the driver is always a column meta data instance.
1:33776ff: // We will only create instances of this class when getParameterMetaData() is called.
1:33776ff: // This class simply wraps a column meta data instance.
1:33776ff: //
1:33776ff: // Once we go to JDK 1.4 as runtime pre-req, we can extend ColumnMetaData and new up ParameterMetaData instances directly,
1:33776ff: // and we won't have to wrap column meta data instances directly.
1:33776ff: 
1:69e3d06: public class ClientParameterMetaData implements ParameterMetaData {
1:0326967:     private ColumnMetaData columnMetaData_;
1:33776ff: 
1:69e3d06:     public ClientParameterMetaData(ColumnMetaData columnMetaData) {
1:70f7692:         columnMetaData_ = columnMetaData;
9:70f7692:     }
1:33776ff: 
1:d506170:     public int getParameterCount() throws SQLException {
1:70f7692:         return columnMetaData_.columns_;
1:70f7692:     }
1:33776ff: 
1:d506170:     public int getParameterType(int param) throws SQLException {
1:70f7692:         return columnMetaData_.getColumnType(param);
1:70f7692:     }
1:33776ff: 
1:d506170:     public String getParameterTypeName(int param) throws SQLException {
1:70f7692:         return columnMetaData_.getColumnTypeName(param);
1:70f7692:     }
1:33776ff: 
1:d506170:     public String getParameterClassName(int param) throws SQLException {
1:70f7692:         return columnMetaData_.getColumnClassName(param);
1:70f7692:     }
1:33776ff: 
1:d506170:     public int getParameterMode(int param) throws SQLException {
1:d506170:         try
1:d506170:         {
1:d506170:             columnMetaData_.checkForValidColumnIndex(param);
1:69e3d06: 
1:69e3d06:             if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:69e3d06:                 ParameterMetaData.parameterModeUnknown) {
1:69e3d06:                 return ParameterMetaData.parameterModeUnknown;
1:69e3d06: 
1:69e3d06:             } else if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:69e3d06:                        ParameterMetaData.parameterModeIn) {
1:69e3d06:                 return ParameterMetaData.parameterModeIn;
1:69e3d06: 
1:69e3d06:             } else if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:69e3d06:                        ParameterMetaData.parameterModeOut) {
1:69e3d06:                 return ParameterMetaData.parameterModeOut;
1:69e3d06: 
1:d506170:             } else {
1:69e3d06:                 return ParameterMetaData.parameterModeInOut;
1:d506170:             }
1:d506170:         }
1:d506170:         catch ( SqlException se )
1:d506170:         {
1:d506170:             throw se.getSQLException();
1:70f7692:         }
1:70f7692:     }
1:33776ff: 
1:d506170:     public int isNullable(int param) throws SQLException {
1:70f7692:         return columnMetaData_.isNullable(param);
1:70f7692:     }
1:33776ff: 
1:d506170:     public boolean isSigned(int param) throws SQLException {
1:70f7692:         return columnMetaData_.isSigned(param);
1:70f7692:     }
1:70f7692: 
1:d506170:     public int getPrecision(int param) throws SQLException {
1:70f7692:         return columnMetaData_.getPrecision(param);
1:70f7692:     }
1:70f7692: 
1:d506170:     public int getScale(int param) throws SQLException {
1:70f7692:         return columnMetaData_.getScale(param);
1:70f7692:     }
1:33776ff: 
1:5ef7a0d:     // JDBC 4.0 java.sql.Wrapper interface methods
1:5ef7a0d: 
1:5ef7a0d:     /**
1:5ef7a0d:      * Check whether this instance wraps an object that implements the interface
1:5ef7a0d:      * specified by {@code iface}.
1:5ef7a0d:      *
1:5ef7a0d:      * @param iface a class defining an interface
1:5ef7a0d:      * @return {@code true} if this instance implements {@code iface}, or
1:5ef7a0d:      * {@code false} otherwise
1:5ef7a0d:      * @throws SQLException if an error occurs while determining if this
1:5ef7a0d:      * instance implements {@code iface}
1:5ef7a0d:      */
1:5ef7a0d:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:5ef7a0d:         return iface.isInstance(this);
1:5ef7a0d:     }
1:5ef7a0d: 
1:5ef7a0d:     /**
1:5ef7a0d:      * Returns {@code this} if this class implements the specified interface.
1:5ef7a0d:      *
1:5ef7a0d:      * @param  iface a class defining an interface
1:5ef7a0d:      * @return an object that implements the interface
1:5ef7a0d:      * @throws SQLException if no object is found that implements the
1:5ef7a0d:      * interface
1:5ef7a0d:      */
1:5ef7a0d:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:5ef7a0d:         try {
1:5ef7a0d:             return iface.cast(this);
1:5ef7a0d:         } catch (ClassCastException cce) {
1:5ef7a0d:             throw new SqlException(null,
1:5ef7a0d:                     new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
1:5ef7a0d:                     iface).getSQLException();
1:5ef7a0d:         }
1:5ef7a0d:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     private ColumnMetaData columnMetaData_;
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.client.am.ClientParameterMetaData
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ParameterMetaData;
/////////////////////////////////////////////////////////////////////////
1: public class ClientParameterMetaData implements ParameterMetaData {
1:     public ClientParameterMetaData(ColumnMetaData columnMetaData) {
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:                 ParameterMetaData.parameterModeUnknown) {
1:                 return ParameterMetaData.parameterModeUnknown;
1: 
1:             } else if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:                        ParameterMetaData.parameterModeIn) {
1:                 return ParameterMetaData.parameterModeIn;
1: 
1:             } else if (columnMetaData_.sqlxParmmode_[param - 1] ==
1:                        ParameterMetaData.parameterModeOut) {
1:                 return ParameterMetaData.parameterModeOut;
1: 
1:                 return ParameterMetaData.parameterModeInOut;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5ef7a0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:     // JDBC 4.0 java.sql.Wrapper interface methods
1: 
1:     /**
1:      * Check whether this instance wraps an object that implements the interface
1:      * specified by {@code iface}.
1:      *
1:      * @param iface a class defining an interface
1:      * @return {@code true} if this instance implements {@code iface}, or
1:      * {@code false} otherwise
1:      * @throws SQLException if an error occurs while determining if this
1:      * instance implements {@code iface}
1:      */
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         return iface.isInstance(this);
1:     }
1: 
1:     /**
1:      * Returns {@code this} if this class implements the specified interface.
1:      *
1:      * @param  iface a class defining an interface
1:      * @return an object that implements the interface
1:      * @throws SQLException if no object is found that implements the
1:      * interface
1:      */
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         try {
1:             return iface.cast(this);
1:         } catch (ClassCastException cce) {
1:             throw new SqlException(null,
1:                     new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
1:                     iface).getSQLException();
1:         }
1:     }
commit:960054b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d506170
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public int getParameterCount() throws SQLException {
1:     public int getParameterType(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public String getParameterTypeName(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public String getParameterClassName(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public int getParameterMode(int param) throws SQLException {
1:         try
1:         {
0:             if (escapedProcedureCallWithResult_) {
0:                 param--;
0:                 if (param == 0) {
0:                     return java.sql.ParameterMetaData.parameterModeOut;
1:                 }
1:             }
1:             columnMetaData_.checkForValidColumnIndex(param);
0:             if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeUnknown) {
0:                 return java.sql.ParameterMetaData.parameterModeUnknown;
0:             } else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeIn) {
0:                 return java.sql.ParameterMetaData.parameterModeIn;
0:             } else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeOut) {
1:             } else {
0:                 return java.sql.ParameterMetaData.parameterModeInOut;
1:         catch ( SqlException se )
1:         {
1:             throw se.getSQLException();
1:     public int isNullable(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSigned(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public int getPrecision(int param) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public int getScale(int param) throws SQLException {
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class ParameterMetaData implements java.sql.ParameterMetaData {
0:     ColumnMetaData columnMetaData_;
0:     // This is false unless for parameterMetaData for a call statement with return clause
0:     boolean escapedProcedureCallWithResult_ = false;
0:     public ParameterMetaData(ColumnMetaData columnMetaData) {
1:         columnMetaData_ = columnMetaData;
0:     public int getParameterCount() throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             return columnMetaData_.columns_++;
1:         }
1:         return columnMetaData_.columns_;
0:     public int getParameterType(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return java.sql.Types.INTEGER;
1:             }
1:         }
1:         return columnMetaData_.getColumnType(param);
0:     public String getParameterTypeName(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return "INTEGER";
1:             }
1:         }
1:         return columnMetaData_.getColumnTypeName(param);
0:     public String getParameterClassName(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return "java.lang.Integer";
1:             }
1:         }
1:         return columnMetaData_.getColumnClassName(param);
0:     public int getParameterMode(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return java.sql.ParameterMetaData.parameterModeOut;
1:             }
1:         }
0:         columnMetaData_.checkForValidColumnIndex(param);
0:         if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeUnknown) {
0:             return java.sql.ParameterMetaData.parameterModeUnknown;
0:         } else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeIn) {
0:             return java.sql.ParameterMetaData.parameterModeIn;
0:         } else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeOut) {
0:             return java.sql.ParameterMetaData.parameterModeOut;
0:         } else {
0:             return java.sql.ParameterMetaData.parameterModeInOut;
1:         }
0:     public int isNullable(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return java.sql.ResultSetMetaData.columnNoNulls;
1:             }
1:         }
1:         return columnMetaData_.isNullable(param);
0:     public boolean isSigned(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return true;
1:             }
1:         }
1:         return columnMetaData_.isSigned(param);
1: 
0:     public int getPrecision(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return 10;
1:             }
1:         }
1:         return columnMetaData_.getPrecision(param);
1:     }
1: 
0:     public int getScale(int param) throws SqlException {
0:         if (escapedProcedureCallWithResult_) {
0:             param--;
0:             if (param == 0) {
0:                 return 0;
1:             }
1:         }
1:         return columnMetaData_.getScale(param);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.client.am.ParameterMetaData
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: // Parameter meta data as used internally by the driver is always a column meta data instance.
1: // We will only create instances of this class when getParameterMetaData() is called.
1: // This class simply wraps a column meta data instance.
1: //
1: // Once we go to JDK 1.4 as runtime pre-req, we can extend ColumnMetaData and new up ParameterMetaData instances directly,
1: // and we won't have to wrap column meta data instances directly.
0: public class ParameterMetaData implements java.sql.ParameterMetaData
0: {
0:   ColumnMetaData columnMetaData_;
1: 
0:   // This is false unless for parameterMetaData for a call statement with return clause
0:   boolean escapedProcedureCallWithResult_ = false;
1: 
0:   public ParameterMetaData (ColumnMetaData columnMetaData)
0:   {
0:     columnMetaData_ = columnMetaData;
0:   }
1: 
0:   public int getParameterCount () throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:       return columnMetaData_.columns_++;
0:     return columnMetaData_.columns_;
0:   }
1: 
0:   public int getParameterType (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return java.sql.Types.INTEGER;
0:     }
0:      return columnMetaData_.getColumnType (param);
0:   }
1: 
0:   public String getParameterTypeName (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return "INTEGER";
0:     }
0:     return columnMetaData_.getColumnTypeName (param);
0:   }
1: 
0:   public String getParameterClassName (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return "java.lang.Integer";
0:     }
0:     return columnMetaData_.getColumnClassName (param);
0:   }
1: 
0:   public int getParameterMode (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return java.sql.ParameterMetaData.parameterModeOut;
0:     }
0:     columnMetaData_.checkForValidColumnIndex (param);
0:     if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeUnknown)
0:       return java.sql.ParameterMetaData.parameterModeUnknown;
0:     else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeIn)
0:       return java.sql.ParameterMetaData.parameterModeIn;
0:     else if (columnMetaData_.sqlxParmmode_[param - 1] == java.sql.ParameterMetaData.parameterModeOut)
0:       return java.sql.ParameterMetaData.parameterModeOut;
0:     else
0:       return java.sql.ParameterMetaData.parameterModeInOut;
0:   }
1: 
0:   public int isNullable (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return java.sql.ResultSetMetaData.columnNoNulls;
0:     }
0:     return columnMetaData_.isNullable (param);
0:   }
1: 
0:   public boolean isSigned (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return true;
0:     }
0:     return columnMetaData_.isSigned (param);
0:   }
1: 
0:   public int getPrecision (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return 10;
0:     }
0:     return columnMetaData_.getPrecision (param);
0:   }
1: 
0:   public int getScale (int param) throws SqlException
0:   {
0:     if (escapedProcedureCallWithResult_)
0:     {
0:       param--;
0:       if (param == 0)
0:         return 0;
0:     }
0:     return columnMetaData_.getScale (param);
0:   }
1: 
0: }
1: 
1: 
============================================================================