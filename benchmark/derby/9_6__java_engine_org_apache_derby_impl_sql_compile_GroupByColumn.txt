1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.GroupByColumn
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
20:eac0369: 
7:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:e671fc7: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:7a9ce7e: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
7:eac0369: /**
1:eac0369:  * A GroupByColumn is a column in the GROUP BY clause.
9:eac0369:  *
1:eac0369:  */
1:3bb140c: class GroupByColumn extends OrderedColumn
8:eac0369: {
1:01217c2: 	private ValueNode columnExpression;
1:01217c2: 	
1:eac0369: 	/**
1:3bb140c:      * Constructor.
1:eac0369: 	 *
1:eac0369: 	 * @param colRef	The ColumnReference for the grouping column
1:3bb140c:      * @param cm        The context manager
1:eac0369: 	 */
1:3bb140c:     GroupByColumn(ValueNode colRef,
1:3bb140c:                   ContextManager cm)
1:eac0369: 	{
1:3bb140c:         super(cm);
1:3bb140c:         this.columnExpression = colRef;
9:eac0369: 	}
1:7a9ce7e: 
1:eac0369: 	/**
1:eac0369: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:eac0369: 	 * how tree printing is supposed to work.
1:eac0369: 	 *
1:eac0369: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:eac0369: 	{
2:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			super.printSubNodes(depth);
1:01217c2: 
1:01217c2: 			if (columnExpression != null)
1:eac0369: 			{
1:c9a1206: 				printLabel(depth, "columnExpression: ");
1:01217c2: 				columnExpression.treePrint(depth + 1);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of this column
1:eac0369: 	 *
1:eac0369: 	 * @return	The name of this column
1:eac0369: 	 */
1:3bb140c:     String getColumnName()
1:eac0369: 	{
1:01217c2: 		return columnExpression.getColumnName();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this grouping column.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The FROM list to use for binding
1:eac0369: 	 * @param subqueryList		The SubqueryList we are building as we hit
1:eac0369: 	 *							SubqueryNodes.
1:09c2697:      * @param aggregates        The aggregate list we build as we hit
1:eac0369: 	 *							AggregateNodes.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	Thrown on error
1:eac0369: 	 */
1:09c2697:     void bindExpression(
1:eac0369: 			FromList fromList, 
1:eac0369: 			SubqueryList subqueryList,
1:71c8e86:             List<AggregateNode> aggregates)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Bind the ColumnReference to the FromList */
1:e671fc7:         int previousReliability = orReliability( CompilerContext.GROUP_BY_RESTRICTION );
1:3bb140c:         columnExpression = columnExpression.bindExpression(fromList,
1:eac0369: 							  subqueryList,
1:09c2697:                               aggregates);
1:e671fc7:         getCompilerContext().setReliability( previousReliability );
1:eac0369: 
1:eac0369: 		// Verify that we can group on the column
1:01217c2: 		if (columnExpression.isParameterNode()) 
1:01217c2: 		{
1:01217c2: 			throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST,
1:01217c2: 					columnExpression);
1:01217c2: 		}
1:eac0369: 		/*
1:eac0369: 		 * Do not check to see if we can map user types
1:eac0369: 		 * to built-in types.  The ability to do so does
1:eac0369: 		 * not mean that ordering will work.  In fact,
1:eac0369: 		 * as of version 2.0, ordering does not work on
1:eac0369: 		 * user types.
1:eac0369: 		 */
1:01217c2: 		TypeId ctid = columnExpression.getTypeId();
1:eac0369: 		if (! ctid.orderable(getClassFactory()))
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION, 
1:eac0369: 							ctid.getSQLTypeName());
1:01217c2: 		}
1:eac0369: 	}
1:01217c2: 
1:3bb140c:     ValueNode getColumnExpression()
1:01217c2: 	{
1:01217c2: 		return columnExpression;
1:01217c2: 	}
1:01217c2: 
1:3bb140c:     void setColumnExpression(ValueNode cexpr)
1:01217c2: 	{
1:01217c2: 		this.columnExpression = cexpr;
1:7a9ce7e: 		
1:7a9ce7e: 	}
1:7a9ce7e: 
1:7a9ce7e: 	/**
1:dd2f5a8: 	 * Accept the visitor for all visitable children of this node.
1:7a9ce7e: 	 *
1:7a9ce7e: 	 * @param v the visitor
1:7a9ce7e: 	 *
1:7a9ce7e: 	 * @exception StandardException on error
1:7a9ce7e: 	 */
1:3bb140c:     @Override
1:dd2f5a8: 	void acceptChildren(Visitor v)
1:7a9ce7e: 		throws StandardException {
1:7a9ce7e: 
1:dd2f5a8: 		super.acceptChildren(v);
1:7a9ce7e: 
1:7a9ce7e: 		if (columnExpression != null) {
1:7a9ce7e: 			columnExpression = (ValueNode)columnExpression.accept(v);
1:7a9ce7e: 		}
1:7a9ce7e: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: class GroupByColumn extends OrderedColumn
1:      * Constructor.
1:      * @param cm        The context manager
1:     GroupByColumn(ValueNode colRef,
1:                   ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.GROUP_BY_COLUMN);
1:         this.columnExpression = colRef;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     String getColumnName()
/////////////////////////////////////////////////////////////////////////
1:         columnExpression = columnExpression.bindExpression(fromList,
/////////////////////////////////////////////////////////////////////////
1:     ValueNode getColumnExpression()
1:     void setColumnExpression(ValueNode cexpr)
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.
1: 	 *
1: 	 * @param v the visitor
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public Visitable accept(Visitor v)
1: 		throws StandardException {
1: 
0: 		Visitable returnNode = v.visit(this);
1: 
0: 		if (v.skipChildren(this)) {
0: 			return returnNode;
1: 		}
1: 
1: 		if (columnExpression != null) {
1: 			columnExpression = (ValueNode)columnExpression.accept(v);
1: 		}
1: 
0: 		return returnNode;
1: 	}
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				printLabel(depth, "columnExpression: ");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:             List<AggregateNode> aggregates)
commit:e671fc7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
/////////////////////////////////////////////////////////////////////////
1:         int previousReliability = orReliability( CompilerContext.GROUP_BY_RESTRICTION );
1:         getCompilerContext().setReliability( previousReliability );
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list we build as we hit
1:     void bindExpression(
0:             List aggregates)
1:                               aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			List aggregateVector)
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Accept the visitor for all visitable children of this node.
1: 	void acceptChildren(Visitor v)
1: 		super.acceptChildren(v);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: 	private ValueNode columnExpression;
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		this.columnExpression = (ValueNode)colRef;
/////////////////////////////////////////////////////////////////////////
0: 			return "Column Expression: "+columnExpression+super.toString();
/////////////////////////////////////////////////////////////////////////
1: 			if (columnExpression != null)
1: 				columnExpression.treePrint(depth + 1);
/////////////////////////////////////////////////////////////////////////
1: 		return columnExpression.getColumnName();
/////////////////////////////////////////////////////////////////////////
0: 		columnExpression = (ValueNode) columnExpression.bindExpression(fromList,
1: 		if (columnExpression.isParameterNode()) 
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST,
1: 					columnExpression);
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		TypeId ctid = columnExpression.getTypeId();
1: 
0: 	public ValueNode getColumnExpression() 
1: 	{
1: 		return columnExpression;
1: 	}
1: 
0: 	public void setColumnExpression(ValueNode cexpr) 
1: 	{
1: 		this.columnExpression = cexpr;
1: 		
1: 	}
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.GroupByColumn
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * A GroupByColumn is a column in the GROUP BY clause.
1:  *
0:  * @author jerry
1:  */
0: public class GroupByColumn extends OrderedColumn 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private ColumnReference	colRef;
1: 
1: 	/**
0: 	 * Initializer.
1: 	 *
1: 	 * @param colRef	The ColumnReference for the grouping column
1: 	 */
0: 	public void init(Object colRef) 
1: 	{
0: 		this.colRef = (ColumnReference) colRef;
1: 	}
1: 
1: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
1: 	 *
0: 	 * @return	This object as a String
1: 	 */
0: 	public String toString() 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return "Column Reference: "+colRef+super.toString();
1: 		}
0: 		else
1: 		{
0: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
0: 			if (colRef != null)
1: 			{
0: 				printLabel(depth, "colRef: ");
0: 				colRef.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the name of this column
1: 	 *
1: 	 * @return	The name of this column
1: 	 */
0: 	public String getColumnName() 
1: 	{
0: 		return colRef.getColumnName();
1: 	}
1: 
1: 	/**
0: 	 * Get the ColumnReference from this GroupByColumn.
1: 	 *
0: 	 * @return ColumnReference	The ColumnReference from this node.
1: 	 */
0: 	public ColumnReference getColumnReference()
1: 	{
0: 		return colRef;
1: 	}
1: 
1: 	/**
0: 	 * Set the ColumnReference for this GroupByColumn.
1: 	 *
0: 	 * @param colRef	The new ColumnReference for this node.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setColumnReference(ColumnReference colRef)
1: 	{
0: 		this.colRef = colRef;
1: 	}
1: 
1: 	/**
0: 	 * Get the table number for this GroupByColumn.
1: 	 *
0: 	 * @return	int The table number for this GroupByColumn
1: 	 */
1: 
0: 	public int getTableNumber()
1: 	{
0: 		return colRef.getTableNumber();
1: 	}
1: 
1: 	/**
0: 	 * Get the source this GroupByColumn
1: 	 *
0: 	 * @return	The source of this GroupByColumn
1: 	 */
1: 
0: 	public ResultColumn getSource()
1: 	{
0: 		return colRef.getSource();
1: 	}
1: 
1: 	/**
1: 	 * Bind this grouping column.
1: 	 *
1: 	 * @param fromList			The FROM list to use for binding
1: 	 * @param subqueryList		The SubqueryList we are building as we hit
1: 	 *							SubqueryNodes.
0: 	 * @param aggregateVector	The aggregate vector we build as we hit 
1: 	 *							AggregateNodes.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException	Thrown on error
1: 	 */
1: 
0: 	public void bindExpression(
1: 			FromList fromList, 
1: 			SubqueryList subqueryList,
0: 			Vector	aggregateVector) 
1: 				throws StandardException
1: 	{
1: 		/* Bind the ColumnReference to the FromList */
0: 		colRef = (ColumnReference) colRef.bindExpression(fromList,
1: 							  subqueryList,
0: 							  aggregateVector);
1: 
1: 		// Verify that we can group on the column
1: 
1: 		/*
1: 		 * Do not check to see if we can map user types
1: 		 * to built-in types.  The ability to do so does
1: 		 * not mean that ordering will work.  In fact,
1: 		 * as of version 2.0, ordering does not work on
1: 		 * user types.
1: 		 */
0: 		TypeId ctid = colRef.getTypeId();
1: 		if (! ctid.orderable(getClassFactory()))
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION, 
1: 							ctid.getSQLTypeName());
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * A GroupByColumn is a column in the GROUP BY clause.
0:  *
0:  * @author jerry
0:  */
0: public class GroupByColumn extends OrderedColumn 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private ColumnReference	colRef;
0: 
0: 	/**
0: 	 * Initializer.
0: 	 *
0: 	 * @param colRef	The ColumnReference for the grouping column
0: 	 */
0: 	public void init(Object colRef) 
0: 	{
0: 		this.colRef = (ColumnReference) colRef;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 	public String toString() 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "Column Reference: "+colRef+super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			super.printSubNodes(depth);
0: 
0: 			if (colRef != null)
0: 			{
0: 				printLabel(depth, "colRef: ");
0: 				colRef.treePrint(depth + 1);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the name of this column
0: 	 *
0: 	 * @return	The name of this column
0: 	 */
0: 	public String getColumnName() 
0: 	{
0: 		return colRef.getColumnName();
0: 	}
0: 
0: 	/**
0: 	 * Get the ColumnReference from this GroupByColumn.
0: 	 *
0: 	 * @return ColumnReference	The ColumnReference from this node.
0: 	 */
0: 	public ColumnReference getColumnReference()
0: 	{
0: 		return colRef;
0: 	}
0: 
0: 	/**
0: 	 * Set the ColumnReference for this GroupByColumn.
0: 	 *
0: 	 * @param colRef	The new ColumnReference for this node.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setColumnReference(ColumnReference colRef)
0: 	{
0: 		this.colRef = colRef;
0: 	}
0: 
0: 	/**
0: 	 * Get the table number for this GroupByColumn.
0: 	 *
0: 	 * @return	int The table number for this GroupByColumn
0: 	 */
0: 
0: 	public int getTableNumber()
0: 	{
0: 		return colRef.getTableNumber();
0: 	}
0: 
0: 	/**
0: 	 * Get the source this GroupByColumn
0: 	 *
0: 	 * @return	The source of this GroupByColumn
0: 	 */
0: 
0: 	public ResultColumn getSource()
0: 	{
0: 		return colRef.getSource();
0: 	}
0: 
0: 	/**
0: 	 * Bind this grouping column.
0: 	 *
0: 	 * @param fromList			The FROM list to use for binding
0: 	 * @param subqueryList		The SubqueryList we are building as we hit
0: 	 *							SubqueryNodes.
0: 	 * @param aggregateVector	The aggregate vector we build as we hit 
0: 	 *							AggregateNodes.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException	Thrown on error
0: 	 */
0: 
0: 	public void bindExpression(
0: 			FromList fromList, 
0: 			SubqueryList subqueryList,
0: 			Vector	aggregateVector) 
0: 				throws StandardException
0: 	{
0: 		/* Bind the ColumnReference to the FromList */
0: 		colRef = (ColumnReference) colRef.bindExpression(fromList,
0: 							  subqueryList,
0: 							  aggregateVector);
0: 
0: 		// Verify that we can group on the column
0: 
0: 		/*
0: 		 * Do not check to see if we can map user types
0: 		 * to built-in types.  The ability to do so does
0: 		 * not mean that ordering will work.  In fact,
0: 		 * as of version 2.0, ordering does not work on
0: 		 * user types.
0: 		 */
0: 		TypeId ctid = colRef.getTypeId();
0: 		if (! ctid.orderable(getClassFactory()))
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION, 
0: 							ctid.getSQLTypeName());
0: 		}
0: 	}
0: }
============================================================================