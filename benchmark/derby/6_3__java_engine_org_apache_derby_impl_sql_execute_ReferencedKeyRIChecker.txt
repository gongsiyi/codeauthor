1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:18a6fb2: import java.util.Enumeration;
1:4cc0287: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:9179199: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:4cc0287: import org.apache.derby.iapi.sql.Activation;
1:4cc0287: import org.apache.derby.iapi.sql.StatementType;
1:4cc0287: import org.apache.derby.iapi.sql.StatementUtil;
1:4cc0287: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:4cc0287: import org.apache.derby.iapi.sql.execute.ExecRow;
1:18a6fb2: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:18a6fb2: import org.apache.derby.iapi.store.access.KeyHasher;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:9179199: import org.apache.derby.iapi.types.DataValueDescriptor;
1:18a6fb2: import org.apache.derby.iapi.types.SQLLongint;
1:4cc0287: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A Referential Integrity checker for a change
1:eac0369:  * to a referenced key (primary or unique).   Makes
1:eac0369:  * sure that all the referenced key row is not
1:eac0369:  * referenced by any of its foreign keys.  see 
1:eac0369:  * ForeignKeyRIChecker for the code that validates
1:eac0369:  * changes to foreign keys.
1:eac0369:  */
1:eac0369: public class ReferencedKeyRIChecker extends GenericRIChecker
1:eac0369: {
1:9179199:     private ScanController refKeyIndexScan = null;
1:18a6fb2: 
1:18a6fb2:     /**
1:18a6fb2:      * Key mapping used when storing referenced (PK, unique) keys under
1:18a6fb2:      * deferred row processing and deferred key constraint (PK, unique).
1:18a6fb2:      */
1:18a6fb2:     private final DataValueDescriptor[] refKey =
1:18a6fb2:             new DataValueDescriptor[numColumns];
1:18a6fb2: 
1:18a6fb2:     /**
1:18a6fb2:      * We save away keys with a counter in this hash table, so we know how many
1:18a6fb2:      * instances of a key (duplicates) have been deleted/modified, cf usage
1:18a6fb2:      * in {@link #postCheck()}. Initialized on demand.
1:18a6fb2:      */
1:18a6fb2:     private BackingStoreHashtable deletedKeys = null;
1:9179199: 
1:eac0369: 	/**
1:4cc0287:      * @param lcc       the language connection context
1:eac0369: 	 * @param tc		the xact controller
1:6b50965: 	 * @param fkinfo	the foreign key information 
2:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:4cc0287:     ReferencedKeyRIChecker(LanguageConnectionContext lcc,
1:4cc0287:                            TransactionController tc,
1:4cc0287:                            FKInfo fkinfo) throws StandardException
1:eac0369: 	{
1:4cc0287:         super(lcc, tc, fkinfo);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (fkInfo.type != FKInfo.REFERENCED_KEY)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+
1:eac0369: 					" for a ReferencedKeyRIChecker");
1:eac0369: 			}
1:eac0369: 		} 
1:eac0369: 	}
1:18a6fb2: 
1:45da2f5: 	/**
1:eac0369: 	 * Check that the row either has a null column(s), or
1:eac0369: 	 * has no corresponding foreign keys.
1:eac0369: 	 * <p> 
1:eac0369: 	 * If a foreign key is found, an exception is thrown.
1:eac0369: 	 * If not, the scan is closed.
1:eac0369: 	 *
1:001fd9f:      * @param a     the activation
1:eac0369: 	 * @param row	the row to check
1:4cc0287:      * @param restrictCheckOnly
1:18a6fb2:      *              {@code true} if the check is relevant only for RESTRICTED
1:18a6fb2:      *              referential action.
1:18a6fb2:      * @param deferredRowReq
1:18a6fb2:      *              For referenced keys: The required number of duplicates that
1:18a6fb2:      *              need to be present. Only used if {@code postCheck==false}.
1:18a6fb2:      *
1:eac0369: 	 * @exception StandardException on unexpected error, or
1:eac0369: 	 *		on a primary/unique key violation
1:eac0369: 	 */
1:9179199:     @Override
1:4cc0287:     void doCheck(Activation a,
1:4cc0287:                  ExecRow row,
1:18a6fb2:                  boolean restrictCheckOnly,
1:18a6fb2:                  int deferredRowReq) throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If any of the columns are null, then the
1:eac0369: 		** check always succeeds.
1:eac0369: 		*/
1:eac0369: 		if (isAnyFieldNull(row))
1:eac0369: 		{
1:9179199: 			return;
1:eac0369: 		}
1:eac0369: 
1:9179199:         if (fkInfo.refConstraintIsDeferrable) {
1:9179199:             // We may have more than one row if the referenced constraint is
1:9179199:             // deferred, if so, all is good: no foreign key constraints can be
1:9179199:             // violated. DERBY-6559
1:9179199:             if (lcc.isEffectivelyDeferred(
1:9179199:                     lcc.getCurrentSQLSessionContext(a),
1:f6d02c9:                     fkInfo.refConstraintID)) {
1:45da2f5:                 if (restrictCheckOnly) {
1:18a6fb2:                     rememberKey(row);
1:45da2f5:                     return;
1:18a6fb2:                 } else {
1:18a6fb2:                     // It *is* a deferred constraint and it is *not* a deferred
1:18a6fb2:                     // rows code path, so go see if we have enough rows
1:18a6fb2:                     if (isDuplicated(row, deferredRowReq)) {
1:18a6fb2:                         return;
1:18a6fb2:                     }
1:9179199:                 }
1:9179199:             }
1:9179199:         }
1:9179199: 
1:eac0369: 		/*
1:eac0369: 		** Otherwise, should be no rows found.
1:eac0369: 	 	** Check each conglomerate.
1:eac0369: 		*/
1:eac0369: 		ScanController scan;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < fkInfo.fkConglomNumbers.length; i++)
1:eac0369: 		{
1:eac0369: 			
1:eac0369: 			if(restrictCheckOnly)
1:eac0369: 			{
1:eac0369: 				if(fkInfo.raRules[i] != StatementType.RA_RESTRICT)
1:eac0369: 					continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			scan = getScanController(fkInfo.fkConglomNumbers[i], fkScocis[i], fkDcocis[i], row);
1:eac0369: 			if (scan.next())
1:eac0369: 			{
1:eac0369: 				close();
1:eac0369: 
1:4cc0287:                 final UUID fkId = fkInfo.fkIds[i];
1:4cc0287: 
1:4cc0287:                 // Only considering deferring if we don't have RESTRICT, i.e.
1:4cc0287:                 // NO ACTION. CASCADE and SET NULL handled elsewhere.
1:4cc0287:                 if (fkInfo.deferrable[i] &&
1:4cc0287:                     fkInfo.raRules[i] != StatementType.RA_RESTRICT &&
1:4cc0287:                         lcc.isEffectivelyDeferred(
1:4cc0287:                                 lcc.getCurrentSQLSessionContext(a), fkId)) {
1:4cc0287:                     deferredRowsHashTable =
1:4cc0287:                             DeferredConstraintsMemory.rememberFKViolation(
1:4cc0287:                                     lcc,
1:4cc0287:                                     deferredRowsHashTable,
1:4cc0287:                                     fkInfo.fkIds[i],
1:4cc0287:                                     indexQualifierRow.getRowArray(),
1:4cc0287:                                     fkInfo.schemaName,
1:4cc0287:                                     fkInfo.tableName);
1:9179199:                 } else {
1:4cc0287: 
1:4cc0287:                     StandardException se = StandardException.newException(
1:4cc0287:                             SQLState.LANG_FK_VIOLATION,
1:4cc0287:                             fkInfo.fkConstraintNames[i],
1:4cc0287:                             fkInfo.tableName,
1:4cc0287:                             StatementUtil.typeName(fkInfo.stmtType),
1:4cc0287:                             RowUtil.toString(row, fkInfo.colArray));
1:4cc0287: 
1:4cc0287:                     throw se;
1:4cc0287:                 }
1:eac0369: 			}
1:eac0369: 			/*
1:eac0369: 			** Move off of the current row to release any locks.
1:eac0369: 			*/
1:eac0369: 			scan.next();
1:eac0369: 		}
1:eac0369: 	}
1:9179199: 
1:eac0369: 
1:eac0369:     /**
1:45da2f5:      * Remember the deletion of this key, it may cause a RESTRICT
1:45da2f5:      * foreign key violation, cf. logic in @{link #postCheck}.
1:45da2f5:      * @param rememberRow
1:45da2f5:      * @throws StandardException
1:45da2f5:      */
1:18a6fb2:     private void rememberKey(ExecRow rememberRow) throws StandardException {
1:18a6fb2:         if (deletedKeys == null) {
1:18a6fb2:             // key: all columns (these are index rows, or a row containing a
1:18a6fb2:             // row location)
1:18a6fb2:             identityMap = new int[numColumns];
1:18a6fb2: 
1:18a6fb2:             for (int i = 0; i < numColumns; i++) {
1:18a6fb2:                 identityMap[i] = i;
1:18a6fb2:             }
1:18a6fb2: 
1:18a6fb2:             deletedKeys = new BackingStoreHashtable(
1:18a6fb2:                     tc,
1:18a6fb2:                     null,
1:18a6fb2:                     identityMap,
1:18a6fb2:                     true, // remove duplicates: no need for more copies:
1:18a6fb2:                     // one is enough to know what to look for on commit
1:18a6fb2:                     -1,
1:18a6fb2:                     HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:18a6fb2:                     HashScanResultSet.DEFAULT_INITIAL_CAPACITY,
1:18a6fb2:                     HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:18a6fb2:                     false,
1:18a6fb2:                     false);
1:18a6fb2: 
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         DataValueDescriptor[] row = rememberRow.getRowArray();
1:18a6fb2:         for (int i = 0; i < numColumns; i++) {
1:18a6fb2:             refKey[i] = row[fkInfo.colArray[i] - 1];
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         Object hashKey = KeyHasher.buildHashKey(refKey, identityMap);
1:18a6fb2: 
1:18a6fb2:         DataValueDescriptor[] savedRow =
1:18a6fb2:                 (DataValueDescriptor[])deletedKeys.remove(hashKey);
1:18a6fb2: 
1:18a6fb2:         if (savedRow == null) {
1:18a6fb2:             savedRow = new DataValueDescriptor[numColumns + 1];
1:18a6fb2:             System.arraycopy(refKey, 0, savedRow, 0, numColumns);
1:18a6fb2:             savedRow[numColumns] = new SQLLongint(1);
1:18a6fb2:         } else {
1:18a6fb2:             savedRow[numColumns] = new SQLLongint(
1:18a6fb2:                 ((SQLLongint)savedRow[numColumns]).getLong() + 1);
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         deletedKeys.putRow(false, savedRow, null);
1:18a6fb2:     }
1:18a6fb2: 
1:18a6fb2:     /**
1:18a6fb2:      * Check that we have at least one more row in the referenced
1:45da2f5:      * table table containing a key than the number of projected deletes of that
1:45da2f5:      * key. Only used when the referenced constraint id deferred and with
1:45da2f5:      * RESTRICT mode
1:18a6fb2:      *
1:18a6fb2:      * @throws StandardException Standard error policy
1:18a6fb2:      */
1:18a6fb2:     public void postCheck() throws StandardException
1:18a6fb2:     {
1:18a6fb2:         if (!fkInfo.refConstraintIsDeferrable) {
1:18a6fb2:             return;
1:18a6fb2:         }
1:18a6fb2: 
1:45da2f5:         int indexOfFirstRestrict = -1;
1:45da2f5: 
1:45da2f5:         for (int i = 0; i < fkInfo.fkConglomNumbers.length; i++) {
1:45da2f5:             if (fkInfo.raRules[i] == StatementType.RA_RESTRICT) {
1:45da2f5:                 indexOfFirstRestrict = i;
1:45da2f5:                 break;
1:45da2f5:             }
1:45da2f5:         }
1:45da2f5: 
1:45da2f5:         if (indexOfFirstRestrict == -1) {
1:45da2f5:             return;
1:45da2f5:         }
1:45da2f5: 
1:18a6fb2:         if (deletedKeys != null) {
1:18a6fb2:             final Enumeration<?> e = deletedKeys.elements();
1:18a6fb2: 
1:18a6fb2:             while (e.hasMoreElements()) {
1:18a6fb2:                 final DataValueDescriptor[] row =
1:18a6fb2:                         (DataValueDescriptor[])e.nextElement();
1:18a6fb2:                 final DataValueDescriptor[] key =
1:18a6fb2:                         new DataValueDescriptor[row.length - 1];
1:18a6fb2:                 System.arraycopy(row, 0, key, 0, key.length);
1:18a6fb2: 
1:18a6fb2:                 // The number of times this key is to be deleted,
1:18a6fb2:                 // we need at least one more if for Fk constraint to hold.
1:18a6fb2:                 final long requiredCount = row[row.length - 1].getLong() + 1;
1:18a6fb2: 
1:18a6fb2:                 if (!isDuplicated(key, requiredCount)) {
1:18a6fb2:                     int[] oneBasedIdentityMap = new int[numColumns];
1:18a6fb2: 
1:18a6fb2:                     for (int i = 0; i < numColumns; i++) {
1:bedbcf2:                         // Column numbers are numbered from 1 and
1:18a6fb2:                         // call to RowUtil.toString below expects that
1:18a6fb2:                         // convention.
1:18a6fb2:                         oneBasedIdentityMap[i] = i + 1;
1:18a6fb2:                     }
1:18a6fb2: 
1:18a6fb2:                     StandardException se = StandardException.newException(
1:18a6fb2:                             SQLState.LANG_FK_VIOLATION,
1:45da2f5:                             fkInfo.fkConstraintNames[indexOfFirstRestrict],
1:18a6fb2:                             fkInfo.tableName,
1:18a6fb2:                             StatementUtil.typeName(fkInfo.stmtType),
1:18a6fb2:                             RowUtil.toString(row, oneBasedIdentityMap));
1:18a6fb2:                     throw se;
1:18a6fb2:                 }
1:18a6fb2:             }
1:18a6fb2:         }
1:18a6fb2:     }
1:18a6fb2: 
1:18a6fb2: 
1:18a6fb2:     private boolean isDuplicated(ExecRow row, int deferredRowReq)
1:9179199:             throws StandardException {
1:9179199:         final DataValueDescriptor[] indexRowArray = row.getRowArray();
1:9179199: 
1:9179199:         for (int i = 0; i < numColumns; i++)
1:9179199:         {
1:18a6fb2:             // map the columns into the PK form
1:9179199:             refKey[i] = indexRowArray[fkInfo.colArray[i] - 1];
1:9179199:         }
1:9179199: 
1:18a6fb2:         return isDuplicated(refKey, deferredRowReq);
1:18a6fb2:     }
1:18a6fb2: 
1:18a6fb2: 
1:18a6fb2:     private boolean isDuplicated(DataValueDescriptor[] key, long deferredRowReq)
1:18a6fb2:             throws StandardException {
1:9179199:         if (refKeyIndexScan == null) {
1:9179199:             refKeyIndexScan = tc.openScan(
1:9179199:                     fkInfo.refConglomNumber,
1:9179199:                     false,                  // no hold over commit
1:9179199:                     0,                      // read only
1:9179199:                     TransactionController.MODE_RECORD,
1:9179199:                                             // record locking
1:72446ed: 
1:72446ed:                     // Use repeatable read here, since we rely on the row being
1:72446ed:                     // present till we commit if we accept this row as being
1:72446ed:                     // the one the upholds the constraint when we delete ours.
1:72446ed:                     TransactionController.ISOLATION_REPEATABLE_READ,
1:72446ed: 
1:9179199:                     (FormatableBitSet)null, // retrieve all fields
1:72446ed:                     key,                    // startKeyValue
1:9179199:                     ScanController.GE,      // startSearchOp
1:9179199:                     null,                   // qualified
1:72446ed:                     key,                    // stopKeyValue
1:9179199:                     ScanController.GT);     // stopSearchOp
1:9179199:         } else {
1:9179199:             refKeyIndexScan.reopenScan(
1:72446ed:                       key,                  // startKeyValue
1:72446ed:                       ScanController.GE,    // startSearchOp
1:72446ed:                       null,                 // qualifier
1:72446ed:                       key,                  // stopKeyValue
1:72446ed:                       ScanController.GT);   // stopSearchOp
1:9179199:         }
1:18a6fb2: 
1:9179199: 
1:18a6fb2:         boolean foundRow = refKeyIndexScan.next();
1:18a6fb2: 
1:18a6fb2:         while (--deferredRowReq > 0 && foundRow) {
1:18a6fb2:             foundRow =refKeyIndexScan.next();
1:9179199:         }
1:9179199: 
1:18a6fb2:         if (deferredRowReq == 0 && foundRow) {
1:18a6fb2:             return true;
1:18a6fb2:         } else {
1:18a6fb2:             return false;
1:18a6fb2:         }
1:9179199:     }
1:9179199: 
1:9179199:     /**
1:18a6fb2:      * Clean up all scan controllers and other resources
1:9179199:      *
1:9179199:      * @exception StandardException on error
1:9179199:      */
1:18a6fb2:     @Override
1:9179199:     void close()
1:9179199:         throws StandardException {
1:9179199: 
1:9179199:         if (refKeyIndexScan != null) {
1:9179199:             refKeyIndexScan.close();
1:9179199:             refKeyIndexScan = null;
1:9179199:         }
1:9179199: 
1:18a6fb2:         if (deletedKeys != null) {
1:18a6fb2:             deletedKeys.close();
1:18a6fb2:             deletedKeys = null;
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         identityMap = null;
1:18a6fb2: 
1:9179199:         super.close();
1:9179199:     }
1:9179199: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1:                     fkInfo.refConstraintID)) {
/////////////////////////////////////////////////////////////////////////
commit:72446ed
/////////////////////////////////////////////////////////////////////////
1: 
1:                     // Use repeatable read here, since we rely on the row being
1:                     // present till we commit if we accept this row as being
1:                     // the one the upholds the constraint when we delete ours.
1:                     TransactionController.ISOLATION_REPEATABLE_READ,
1: 
1:                     key,                    // startKeyValue
1:                     key,                    // stopKeyValue
1:                       key,                  // startKeyValue
1:                       ScanController.GE,    // startSearchOp
1:                       null,                 // qualifier
1:                       key,                  // stopKeyValue
1:                       ScanController.GT);   // stopSearchOp
commit:bedbcf2
/////////////////////////////////////////////////////////////////////////
1:                         // Column numbers are numbered from 1 and
commit:45da2f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 if (restrictCheckOnly) {
1:                     return;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Remember the deletion of this key, it may cause a RESTRICT
1:      * foreign key violation, cf. logic in @{link #postCheck}.
1:      * @param rememberRow
1:      * @throws StandardException
1:      */
/////////////////////////////////////////////////////////////////////////
1:      * table table containing a key than the number of projected deletes of that
1:      * key. Only used when the referenced constraint id deferred and with
1:      * RESTRICT mode
/////////////////////////////////////////////////////////////////////////
1:         int indexOfFirstRestrict = -1;
1: 
1:         for (int i = 0; i < fkInfo.fkConglomNumbers.length; i++) {
1:             if (fkInfo.raRules[i] == StatementType.RA_RESTRICT) {
1:                 indexOfFirstRestrict = i;
1:                 break;
1:             }
1:         }
1: 
1:         if (indexOfFirstRestrict == -1) {
1:             return;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                             fkInfo.fkConstraintNames[indexOfFirstRestrict],
commit:18a6fb2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.store.access.KeyHasher;
1: import org.apache.derby.iapi.types.SQLLongint;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Key mapping used when storing referenced (PK, unique) keys under
1:      * deferred row processing and deferred key constraint (PK, unique).
1:      */
1:     private final DataValueDescriptor[] refKey =
1:             new DataValueDescriptor[numColumns];
1: 
1:     /**
1:      * We save away keys with a counter in this hash table, so we know how many
1:      * instances of a key (duplicates) have been deleted/modified, cf usage
1:      * in {@link #postCheck()}. Initialized on demand.
1:      */
1:     private BackingStoreHashtable deletedKeys = null;
/////////////////////////////////////////////////////////////////////////
1:      *              {@code true} if the check is relevant only for RESTRICTED
1:      *              referential action.
0:      * @param postCheck
0:      *              For referenced keys: if {@code true}, rows are not yet
0:      *              deleted, so do the check in the case of deferred PK later.
1:      * @param deferredRowReq
1:      *              For referenced keys: The required number of duplicates that
1:      *              need to be present. Only used if {@code postCheck==false}.
1:      *
1:                  boolean restrictCheckOnly,
0:                  boolean postCheck,
1:                  int deferredRowReq) throws StandardException
/////////////////////////////////////////////////////////////////////////
0:                 if (postCheck) {
1:                     rememberKey(row);
1:                 } else {
1:                     // It *is* a deferred constraint and it is *not* a deferred
1:                     // rows code path, so go see if we have enough rows
1:                     if (isDuplicated(row, deferredRowReq)) {
1:                         return;
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void rememberKey(ExecRow rememberRow) throws StandardException {
1:         if (deletedKeys == null) {
1:             // key: all columns (these are index rows, or a row containing a
1:             // row location)
1:             identityMap = new int[numColumns];
1: 
1:             for (int i = 0; i < numColumns; i++) {
1:                 identityMap[i] = i;
1:             }
1: 
1:             deletedKeys = new BackingStoreHashtable(
1:                     tc,
1:                     null,
1:                     identityMap,
1:                     true, // remove duplicates: no need for more copies:
1:                     // one is enough to know what to look for on commit
1:                     -1,
1:                     HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:                     HashScanResultSet.DEFAULT_INITIAL_CAPACITY,
1:                     HashScanResultSet.DEFAULT_MAX_CAPACITY,
1:                     false,
1:                     false);
1: 
1:         }
1: 
1:         DataValueDescriptor[] row = rememberRow.getRowArray();
1:         for (int i = 0; i < numColumns; i++) {
1:             refKey[i] = row[fkInfo.colArray[i] - 1];
1:         }
1: 
1:         Object hashKey = KeyHasher.buildHashKey(refKey, identityMap);
1: 
1:         DataValueDescriptor[] savedRow =
1:                 (DataValueDescriptor[])deletedKeys.remove(hashKey);
1: 
1:         if (savedRow == null) {
1:             savedRow = new DataValueDescriptor[numColumns + 1];
1:             System.arraycopy(refKey, 0, savedRow, 0, numColumns);
1:             savedRow[numColumns] = new SQLLongint(1);
1:         } else {
1:             savedRow[numColumns] = new SQLLongint(
1:                 ((SQLLongint)savedRow[numColumns]).getLong() + 1);
1:         }
1: 
1:         deletedKeys.putRow(false, savedRow, null);
1:     }
1: 
1:     /**
1:      * Check that we have at least one more row in the referenced
0:      * table table containing a key than the number of seen deletes of that key.
0:      * Only used when the referenced constraint id deferred.
1:      *
1:      * @throws StandardException Standard error policy
1:      */
1:     public void postCheck() throws StandardException
1:     {
1:         if (!fkInfo.refConstraintIsDeferrable) {
1:             return;
1:         }
1: 
1:         if (deletedKeys != null) {
1:             final Enumeration<?> e = deletedKeys.elements();
1: 
1:             while (e.hasMoreElements()) {
1:                 final DataValueDescriptor[] row =
1:                         (DataValueDescriptor[])e.nextElement();
1:                 final DataValueDescriptor[] key =
1:                         new DataValueDescriptor[row.length - 1];
1:                 System.arraycopy(row, 0, key, 0, key.length);
1: 
1:                 // The number of times this key is to be deleted,
1:                 // we need at least one more if for Fk constraint to hold.
1:                 final long requiredCount = row[row.length - 1].getLong() + 1;
1: 
1:                 if (!isDuplicated(key, requiredCount)) {
1:                     int[] oneBasedIdentityMap = new int[numColumns];
1: 
1:                     for (int i = 0; i < numColumns; i++) {
0:                         // Column numbers are numbere from 1 and
1:                         // call to RowUtil.toString below expects that
1:                         // convention.
1:                         oneBasedIdentityMap[i] = i + 1;
1:                     }
1: 
1:                     StandardException se = StandardException.newException(
1:                             SQLState.LANG_FK_VIOLATION,
0:                             fkInfo.fkConstraintNames[0],
1:                             fkInfo.tableName,
1:                             StatementUtil.typeName(fkInfo.stmtType),
1:                             RowUtil.toString(row, oneBasedIdentityMap));
1:                     throw se;
1:                 }
1:             }
1:         }
1:     }
1: 
1: 
1:     private boolean isDuplicated(ExecRow row, int deferredRowReq)
1:             // map the columns into the PK form
1:         return isDuplicated(refKey, deferredRowReq);
1:     }
1: 
1: 
1:     private boolean isDuplicated(DataValueDescriptor[] key, long deferredRowReq)
1:             throws StandardException {
/////////////////////////////////////////////////////////////////////////
0:                     key,                 // startKeyValue
0:                     key,                 // stopKeyValue
0:                       key,             // startKeyValue
0:                       key,             // stopKeyValue
1: 
1:         boolean foundRow = refKeyIndexScan.next();
1: 
1:         while (--deferredRowReq > 0 && foundRow) {
1:             foundRow =refKeyIndexScan.next();
1:         if (deferredRowReq == 0 && foundRow) {
1:             return true;
1:         } else {
1:             return false;
1:         }
1:      * Clean up all scan controllers and other resources
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         if (deletedKeys != null) {
1:             deletedKeys.close();
1:             deletedKeys = null;
1:         }
1: 
1:         identityMap = null;
1: 
commit:9179199
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private ScanController refKeyIndexScan = null;
0:     private DataValueDescriptor[] refKey = new DataValueDescriptor[numColumns];
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         if (fkInfo.refConstraintIsDeferrable) {
1:             // We may have more than one row if the referenced constraint is
1:             // deferred, if so, all is good: no foreign key constraints can be
1:             // violated. DERBY-6559
1:             if (lcc.isEffectivelyDeferred(
1:                     lcc.getCurrentSQLSessionContext(a),
0:                     fkInfo.refConglomNumber)) {
0:                 // It *is* deferred, go see if we have more than one row
0:                 if (isDuplicated(row)) {
1:                     return;
1:                 }
1:             }
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     private boolean isDuplicated(ExecRow row)
1:             throws StandardException {
1:         final DataValueDescriptor[] indexRowArray = row.getRowArray();
1: 
1:         for (int i = 0; i < numColumns; i++)
1:         {
1:             refKey[i] = indexRowArray[fkInfo.colArray[i] - 1];
1:         }
1: 
1:         if (refKeyIndexScan == null) {
1:             refKeyIndexScan = tc.openScan(
1:                     fkInfo.refConglomNumber,
1:                     false,                  // no hold over commit
1:                     0,                      // read only
1:                     TransactionController.MODE_RECORD,
1:                                             // record locking
0:                     TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK,
1:                     (FormatableBitSet)null, // retrieve all fields
0:                     refKey,                 // startKeyValue
1:                     ScanController.GE,      // startSearchOp
1:                     null,                   // qualified
0:                     refKey,                 // stopKeyValue
1:                     ScanController.GT);     // stopSearchOp
1:         } else {
1:             refKeyIndexScan.reopenScan(
0:                       refKey,             // startKeyValue
0:                       ScanController.GE,  // startSearchOp
0:                       null,               // qualifier
0:                       refKey,             // stopKeyValue
0:                       ScanController.GT); // stopSearchOp
1:         }
1: 
0:         if (refKeyIndexScan.next()) {
0:             if (refKeyIndexScan.next()) {
0:                 // two matching rows found, all ok
0:                 return true;
0:             } // else exactly one row contains key
1:         } else {
0:             // No rows contain key
1:         }
1: 
0:         return false;
1:     }
1: 
1:     /**
0:      * Clean up all scan controllers
1:      *
1:      * @exception StandardException on error
1:      */
1:     void close()
1:         throws StandardException {
1: 
1:         if (refKeyIndexScan != null) {
1:             refKeyIndexScan.close();
1:             refKeyIndexScan = null;
1:         }
1: 
1:         super.close();
1:     }
1: 
commit:001fd9f
/////////////////////////////////////////////////////////////////////////
1:      * @param a     the activation
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.StatementType;
1: import org.apache.derby.iapi.sql.StatementUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:      * @param lcc       the language connection context
1:     ReferencedKeyRIChecker(LanguageConnectionContext lcc,
1:                            TransactionController tc,
1:                            FKInfo fkinfo) throws StandardException
1:         super(lcc, tc, fkinfo);
/////////////////////////////////////////////////////////////////////////
0:      * @para, a     the activation
1:      * @param restrictCheckOnly
1:     void doCheck(Activation a,
1:                  ExecRow row,
0:                  boolean restrictCheckOnly) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:                 final UUID fkId = fkInfo.fkIds[i];
1: 
1:                 // Only considering deferring if we don't have RESTRICT, i.e.
1:                 // NO ACTION. CASCADE and SET NULL handled elsewhere.
1:                 if (fkInfo.deferrable[i] &&
1:                     fkInfo.raRules[i] != StatementType.RA_RESTRICT &&
1:                         lcc.isEffectivelyDeferred(
1:                                 lcc.getCurrentSQLSessionContext(a), fkId)) {
1:                     deferredRowsHashTable =
1:                             DeferredConstraintsMemory.rememberFKViolation(
1:                                     lcc,
1:                                     deferredRowsHashTable,
0:                                     fkInfo.fkConglomNumbers[i],
0:                                     fkInfo.refConglomNumber,
1:                                     fkInfo.fkIds[i],
1:                                     indexQualifierRow.getRowArray(),
1:                                     fkInfo.schemaName,
1:                                     fkInfo.tableName);
0:                 } else {
1: 
1:                     StandardException se = StandardException.newException(
1:                             SQLState.LANG_FK_VIOLATION,
1:                             fkInfo.fkConstraintNames[i],
1:                             fkInfo.tableName,
1:                             StatementUtil.typeName(fkInfo.stmtType),
1:                             RowUtil.toString(row, fkInfo.colArray));
1: 
1:                     throw se;
1:                 }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param fkinfo	the foreign key information 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.StatementUtil;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.sql.StatementType;
1: 
1: /**
1:  * A Referential Integrity checker for a change
1:  * to a referenced key (primary or unique).   Makes
1:  * sure that all the referenced key row is not
1:  * referenced by any of its foreign keys.  see 
1:  * ForeignKeyRIChecker for the code that validates
1:  * changes to foreign keys.
1:  */
1: public class ReferencedKeyRIChecker extends GenericRIChecker
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	ReferencedKeyRIChecker(TransactionController tc, FKInfo fkinfo)
0: 		throws StandardException
1: 	{
0: 		super(tc, fkinfo);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (fkInfo.type != FKInfo.REFERENCED_KEY)
1: 			{
1: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+
1: 					" for a ReferencedKeyRIChecker");
1: 			}
1: 		} 
1: 	}
1: 
1: 	/**
1: 	 * Check that the row either has a null column(s), or
1: 	 * has no corresponding foreign keys.
1: 	 * <p> 
1: 	 * If a foreign key is found, an exception is thrown.
1: 	 * If not, the scan is closed.
1: 	 *
1: 	 * @param row	the row to check
1: 	 *
1: 	 * @exception StandardException on unexpected error, or
1: 	 *		on a primary/unique key violation
1: 	 */
0: 	void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
1: 	{
1: 		/*
1: 		** If any of the columns are null, then the
1: 		** check always succeeds.
1: 		*/
1: 		if (isAnyFieldNull(row))
1: 		{
0: 			return;
1: 		}
1: 
1: 		/*
1: 		** Otherwise, should be no rows found.
1: 	 	** Check each conglomerate.
1: 		*/
1: 		ScanController scan;
1: 
1: 		for (int i = 0; i < fkInfo.fkConglomNumbers.length; i++)
1: 		{
1: 			
1: 			if(restrictCheckOnly)
1: 			{
1: 				if(fkInfo.raRules[i] != StatementType.RA_RESTRICT)
1: 					continue;
1: 			}
1: 
1: 			scan = getScanController(fkInfo.fkConglomNumbers[i], fkScocis[i], fkDcocis[i], row);
1: 			if (scan.next())
1: 			{
1: 				close();
0: 				StandardException se = StandardException.newException(SQLState.LANG_FK_VIOLATION, fkInfo.fkConstraintNames[i],
0: 										fkInfo.tableName,
0: 										StatementUtil.typeName(fkInfo.stmtType),
0: 										RowUtil.toString(row, fkInfo.colArray));
1: 
0: 				throw se;
1: 			}
1: 			/*
1: 			** Move off of the current row to release any locks.
1: 			*/
1: 			scan.next();
1: 		}
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.StatementUtil;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: /**
0:  * A Referential Integrity checker for a change
0:  * to a referenced key (primary or unique).   Makes
0:  * sure that all the referenced key row is not
0:  * referenced by any of its foreign keys.  see 
0:  * ForeignKeyRIChecker for the code that validates
0:  * changes to foreign keys.
0:  */
0: public class ReferencedKeyRIChecker extends GenericRIChecker
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	ReferencedKeyRIChecker(TransactionController tc, FKInfo fkinfo)
0: 		throws StandardException
0: 	{
0: 		super(tc, fkinfo);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (fkInfo.type != FKInfo.REFERENCED_KEY)
0: 			{
0: 				SanityManager.THROWASSERT("invalid type "+fkInfo.type+
0: 					" for a ReferencedKeyRIChecker");
0: 			}
0: 		} 
0: 	}
0: 
0: 	/**
0: 	 * Check that the row either has a null column(s), or
0: 	 * has no corresponding foreign keys.
0: 	 * <p> 
0: 	 * If a foreign key is found, an exception is thrown.
0: 	 * If not, the scan is closed.
0: 	 *
0: 	 * @param row	the row to check
0: 	 *
0: 	 * @exception StandardException on unexpected error, or
0: 	 *		on a primary/unique key violation
0: 	 */
0: 	void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
0: 	{
0: 		/*
0: 		** If any of the columns are null, then the
0: 		** check always succeeds.
0: 		*/
0: 		if (isAnyFieldNull(row))
0: 		{
0: 			return;
0: 		}
0: 
0: 		/*
0: 		** Otherwise, should be no rows found.
0: 	 	** Check each conglomerate.
0: 		*/
0: 		ScanController scan;
0: 
0: 		for (int i = 0; i < fkInfo.fkConglomNumbers.length; i++)
0: 		{
0: 			
0: 			if(restrictCheckOnly)
0: 			{
0: 				if(fkInfo.raRules[i] != StatementType.RA_RESTRICT)
0: 					continue;
0: 			}
0: 
0: 			scan = getScanController(fkInfo.fkConglomNumbers[i], fkScocis[i], fkDcocis[i], row);
0: 			if (scan.next())
0: 			{
0: 				close();
0: 				StandardException se = StandardException.newException(SQLState.LANG_FK_VIOLATION, fkInfo.fkConstraintNames[i],
0: 										fkInfo.tableName,
0: 										StatementUtil.typeName(fkInfo.stmtType),
0: 										RowUtil.toString(row, fkInfo.colArray));
0: 
0: 				throw se;
0: 			}
0: 			/*
0: 			** Move off of the current row to release any locks.
0: 			*/
0: 			scan.next();
0: 		}
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
============================================================================