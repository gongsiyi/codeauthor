1:6c0fb2b: /**
1:6c0fb2b:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest
1:6c0fb2b:  *  
1:6c0fb2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:6c0fb2b:  * or more contributor license agreements.  See the NOTICE file
1:6c0fb2b:  * distributed with this work for additional information
1:6c0fb2b:  * regarding copyright ownership.  The ASF licenses this file
1:6c0fb2b:  * to you under the Apache License, Version 2.0 (the
1:6c0fb2b:  * "License"); you may not use this file except in compliance
1:6c0fb2b:  * with the License.  You may obtain a copy of the License at
1:6c0fb2b:  *
1:6c0fb2b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6c0fb2b:  *
1:6c0fb2b:  * Unless required by applicable law or agreed to in writing,
1:6c0fb2b:  * software distributed under the License is distributed on an
1:6c0fb2b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6c0fb2b:  * KIND, either express or implied.  See the License for the
1:6c0fb2b:  * specific language governing permissions and limitations
1:6c0fb2b:  * under the License.
2:6c0fb2b:  */
1:6c0fb2b: package org.apache.derbyTesting.functionTests.tests.lang;
17:6c0fb2b: 
1:6c0fb2b: import java.sql.Connection;
1:6c0fb2b: import java.sql.PreparedStatement;
1:6c0fb2b: import java.sql.ResultSet;
1:6c0fb2b: import java.sql.SQLException;
1:6c0fb2b: import java.sql.Statement;
1:6c0fb2b: import java.sql.Types;
1:6c0fb2b: import junit.framework.Test;
1:6c0fb2b: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:6c0fb2b: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f2a8dbd: import org.apache.derbyTesting.junit.JDBC;
1:6c0fb2b: 
1:6c0fb2b: /**
1:6c0fb2b:  * Test the JDBC TIMESTAMPADD and TIMESTAMPDIFF escape functions.
1:6c0fb2b:  *
1:6c0fb2b:  * Things to test:
1:6c0fb2b:  *   + Test each interval type with timestamp, date, and time inputs.
1:6c0fb2b:  *   + Test diff with all 9 combinations of datetime input types (timestamp - timestamp, timestamp - date, etc).
1:6c0fb2b:  *   + Test PreparedStatements with parameters, '?', in each argument, and Statements. (Statements are prepared
1:6c0fb2b:  *     internally so we do not also have to test PrepardStatements without parameters).
1:6c0fb2b:  *   + Test with null inputs.
1:6c0fb2b:  *   + Test with input string that is convertible to timestamp.
1:6c0fb2b:  *   + Test with invalid interval type.
1:6c0fb2b:  *   + Test with invalid arguments in the date time arguments.
1:6c0fb2b:  *   + Test TIMESTAMPADD with an invalid type in the count argument.
1:6c0fb2b:  *   + Test overflow cases.
1:6c0fb2b:  */
1:6c0fb2b: public class TimestampArithTest extends BaseJDBCTestCase {
1:6c0fb2b: 	
1:6c0fb2b: 	/** Abstract class that factors out all the common code for the timestamps tests. */
1:cbce560: 	private static abstract class OneTest {
1:6c0fb2b: 		final int interval; // FRAC_SECOND_INTERVAL, SECOND_INTERVAL, ... or
1:6c0fb2b: 		final String expectedSQLState; // Null if no SQLException is expected
1:6c0fb2b: 		final String expectedMsg; // Null if no SQLException is expected
1:6c0fb2b: 		String sql;
1:6c0fb2b: 
1:6c0fb2b: 		OneTest(int interval, String expectedSQLState, String expectedMsg) {
1:6c0fb2b: 			this.interval = interval;
1:6c0fb2b: 			this.expectedSQLState = expectedSQLState;
1:6c0fb2b: 			this.expectedMsg = expectedMsg;
7:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		void runTest() throws SQLException {
1:6c0fb2b: 			ResultSet rs = null;
1:6c0fb2b: 			
1:6c0fb2b: 			sql = composeSQL();		
4:6c0fb2b: 			try {
1:6c0fb2b: 				rs = stmt.executeQuery(sql);
1:6c0fb2b: 				checkResultSet(rs, sql);
1:6c0fb2b: 				if (expectedSQLState != null) {
1:6c0fb2b: 					fail("Statement '" + sql + "' did not generate an exception");
1:6c0fb2b: 				}				
1:6c0fb2b: 			} catch (SQLException sqle) {
1:6c0fb2b: 				if (expectedSQLState == null) {
1:f2a8dbd:                     fail("Unexpected exception from statement '" + sql + "'",
1:f2a8dbd:                          sqle);
1:6c0fb2b: 				}
1:6c0fb2b: 				assertSQLState("Incorrect SQLState from statement '" + sql + "'", expectedSQLState, sqle);
1:6c0fb2b: 			} 
1:6c0fb2b: 			if (rs != null) {
1:6c0fb2b: 			        rs.close();
1:6c0fb2b: 				rs = null;
1:6c0fb2b: 			}
1:6c0fb2b: 
1:6c0fb2b: 			try {
1:6c0fb2b: 				rs = executePS();
1:6c0fb2b: 				checkResultSet(rs, sql);
1:6c0fb2b: 				if (expectedSQLState != null) {
1:6c0fb2b: 					fail("Prepared Statement '" + sql + "' did not generate an exception");
1:6c0fb2b: 				}
1:6c0fb2b: 			} catch (SQLException sqle) {
1:6c0fb2b: 				if (expectedSQLState == null) {
1:f2a8dbd:                     fail("Unexpected exception from prepared statement '" +
1:f2a8dbd:                          sql + "'", sqle);
1:6c0fb2b: 				}
1:6c0fb2b: 				assertSQLState("Incorrect SQLState from prepared statement '" + sql + "'", expectedSQLState, sqle);
1:6c0fb2b: 			} 
1:6c0fb2b: 			if (rs != null) {
1:6c0fb2b:                             rs.close();
1:6c0fb2b:                             rs = null;
1:6c0fb2b: 			}
1:6c0fb2b: 		} 
1:6c0fb2b: 
1:6c0fb2b: 		private void checkResultSet(ResultSet rs, String sql) throws SQLException {
1:6c0fb2b: 			assertTrue("'" + sql + "' did not return any rows.", rs.next());
1:6c0fb2b: 			checkResultRow(rs, sql);
1:6c0fb2b: 			assertFalse("'" + sql + "' returned more than one row.", rs.next());
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		abstract String composeSQL();
1:6c0fb2b: 		abstract void checkResultRow(ResultSet rs, String sql) throws SQLException;
1:6c0fb2b: 		abstract ResultSet executePS() throws SQLException;
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:cbce560: 	private static class OneDiffTest extends OneTest {
1:6c0fb2b: 		private final java.util.Date ts1;
1:6c0fb2b: 		private final java.util.Date ts2;
1:6c0fb2b: 		private final int expectedDiff;
1:6c0fb2b: 		protected boolean expectNull;
1:6c0fb2b: 		
1:6c0fb2b: 		OneDiffTest(int interval, java.util.Date ts1, java.util.Date ts2,
1:6c0fb2b: 				int expectedDiff, String expectedSQLState, String expectedMsg) {
1:6c0fb2b: 			super(interval, expectedSQLState, expectedMsg);
1:6c0fb2b: 			this.ts1 = ts1;
1:6c0fb2b: 			this.ts2 = ts2;
1:6c0fb2b: 			this.expectedDiff = expectedDiff;
1:6c0fb2b: 			expectNull = (ts1 == null) || (ts2 == null);
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		void checkResultRow(ResultSet rs, String sql) throws SQLException {
1:6c0fb2b: 			int actualDiff = rs.getInt(1);
1:6c0fb2b: 			assertFalse("Unexpected null result from '" + sql + "'.", rs.wasNull() && !expectNull);
1:6c0fb2b: 			assertFalse("Expected null result from '" + sql + "'.", !rs.wasNull() && expectNull);
1:6c0fb2b: 			assertEquals("Unexpected result from '" + sql + "'.", expectedDiff, actualDiff);			
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		String composeSQL() {
1:6c0fb2b: 			return composeSqlStr("DIFF", interval, dateTimeToLiteral(ts1),
1:6c0fb2b: 					dateTimeToLiteral(ts2));
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		ResultSet executePS() throws SQLException {
1:6c0fb2b: 			setDateTime(tsDiffPS[interval], 1, ts1);
1:6c0fb2b: 			setDateTime(tsDiffPS[interval], 2, ts2);
1:6c0fb2b: 			return tsDiffPS[interval].executeQuery();
1:6c0fb2b: 		}		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:cbce560: 	private static class OneStringDiffTest extends OneDiffTest {
1:6c0fb2b: 		private final String ts1;
1:6c0fb2b: 		private final String ts2;
1:6c0fb2b: 		
1:6c0fb2b: 		OneStringDiffTest(int interval, String ts1, String ts2,
1:6c0fb2b: 				int expectedDiff, String expectedSQLState, String expectedMsg) {
1:6c0fb2b: 			super(interval, (java.util.Date) null, (java.util.Date) null,
1:6c0fb2b: 					expectedDiff, expectedSQLState, expectedMsg);
1:6c0fb2b: 			this.ts1 = ts1;
1:6c0fb2b: 			this.ts2 = ts2;
1:6c0fb2b: 			expectNull = (ts1 == null) || (ts2 == null);
1:6c0fb2b: 		}
1:6c0fb2b: 		
1:6c0fb2b: 		String composeSQL() {
1:6c0fb2b: 			return composeSqlStr("DIFF", interval, dateTimeToLiteral(ts1),
1:6c0fb2b: 					dateTimeToLiteral(ts2));
1:6c0fb2b: 		}
1:6c0fb2b: 		
1:6c0fb2b: 		ResultSet executePS() throws SQLException {
1:6c0fb2b: 			tsDiffPS[interval].setString(1, ts1);
1:6c0fb2b: 			tsDiffPS[interval].setString(2, ts2);
1:6c0fb2b: 			return tsDiffPS[interval].executeQuery();
1:6c0fb2b: 		}		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:cbce560: 	private static class OneAddTest extends OneTest {
1:6c0fb2b: 		private final java.util.Date ts;
1:6c0fb2b: 		final int count;
1:6c0fb2b: 		final java.sql.Timestamp expected;
1:6c0fb2b: 		
1:6c0fb2b: 		OneAddTest(int interval, int count, java.util.Date ts,
1:6c0fb2b: 				java.sql.Timestamp expected, String expectedSQLState,
1:6c0fb2b: 				String expectedMsg) {
1:6c0fb2b: 			super(interval, expectedSQLState, expectedMsg);
1:6c0fb2b: 			this.count = count;
1:6c0fb2b: 			this.ts = ts;
1:6c0fb2b: 			this.expected = expected;
1:6c0fb2b: 		}
1:6c0fb2b: 		
1:6c0fb2b: 		String composeSQL() {
1:6c0fb2b: 			return composeSqlStr("ADD", interval, String.valueOf(count),
1:6c0fb2b: 					dateTimeToLiteral(ts));
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		void checkResultRow(ResultSet rs, String sql) throws SQLException {
1:6c0fb2b: 			java.sql.Timestamp actual = rs.getTimestamp(1);
1:6c0fb2b: 			assertFalse("Unexpected null result from '" + sql + "'.", (rs.wasNull() || actual == null) && expected != null);
1:6c0fb2b: 			assertFalse("Expected null result from '" + sql + "'.", !(rs.wasNull() || actual == null) && expected == null);
1:6c0fb2b: 			assertEquals("Unexpected result from '" + sql + "'.", expected, actual);
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		ResultSet executePS() throws SQLException {
1:6c0fb2b: 			tsAddPS[interval].setInt(1, count);
1:6c0fb2b: 			setDateTime(tsAddPS[interval], 2, ts);
1:6c0fb2b: 			return tsAddPS[interval].executeQuery();
1:6c0fb2b: 		}		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:cbce560: 	private static class OneStringAddTest extends OneAddTest {
1:6c0fb2b: 		private final String ts;
1:6c0fb2b: 
1:6c0fb2b: 		OneStringAddTest(int interval, int count, String ts,
1:6c0fb2b: 				java.sql.Timestamp expected, String expectedSQLState,
1:6c0fb2b: 				String expectedMsg) {
1:6c0fb2b: 			super(interval, count, (java.util.Date) null, expected,
1:6c0fb2b: 					expectedSQLState, expectedMsg);
1:6c0fb2b: 			this.ts = ts;
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		String composeSQL() {
1:6c0fb2b: 			return composeSqlStr("ADD", interval, String.valueOf(count),
1:6c0fb2b: 					dateTimeToLiteral(ts));
1:6c0fb2b: 		}
1:6c0fb2b: 
1:6c0fb2b: 		ResultSet executePS() throws SQLException {
1:6c0fb2b: 			tsAddPS[interval].setInt(1, count);
1:6c0fb2b: 			tsAddPS[interval].setString(2, ts);
1:6c0fb2b: 			return tsAddPS[interval].executeQuery();
1:6c0fb2b: 		}		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:cbce560:     private static final int FRAC_SECOND_INTERVAL = 0;
1:cbce560:     private static final int SECOND_INTERVAL = 1;
1:cbce560:     private static final int MINUTE_INTERVAL = 2;
1:cbce560:     private static final int HOUR_INTERVAL = 3;
1:cbce560:     private static final int DAY_INTERVAL = 4;
1:cbce560:     private static final int WEEK_INTERVAL = 5;
1:cbce560:     private static final int MONTH_INTERVAL = 6;
1:cbce560:     private static final int QUARTER_INTERVAL = 7;
1:cbce560:     private static final int YEAR_INTERVAL = 8;
1:cbce560: 
1:6c0fb2b: 	/** timestamp - timestamp */
1:cbce560: 	private static final OneDiffTest[] diffBetweenTsTests = {
1:6c0fb2b: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-10 08:25:00.000001"), 1000, null, null),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:01"), ts("2005-05-10 08:25:00"), -1, null, null),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:00.1"), ts("2005-05-10 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-10 08:26:00"), 60, null, null),
1:6c0fb2b: 			new OneDiffTest(MINUTE_INTERVAL, ts("2005-05-11 08:25:00"), ts("2005-05-10 08:25:00"), -24 * 60, null, null),
1:6c0fb2b: 			new OneDiffTest(HOUR_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-11 08:25:00"), 24, null, null),
1:6c0fb2b: 			new OneDiffTest(DAY_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-11 08:25:00"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(DAY_INTERVAL, ts("2005-05-10 08:25:01"), ts("2005-05-11 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(WEEK_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-03-01 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(MONTH_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-03-23 08:25:00"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(MONTH_INTERVAL, ts("2005-02-23 08:25:01"), ts("2005-03-23 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(QUARTER_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-05-23 08:25:00"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(QUARTER_INTERVAL, ts("2005-02-23 08:25:01"), ts("2005-05-23 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(YEAR_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-05-23 08:25:00"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(YEAR_INTERVAL, ts("2005-02-23 08:25:00"), ts("2006-02-23 08:25:00"), 1, null, null)			
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:6c0fb2b: 	/** timestamp - date */
1:cbce560: 	private static final OneDiffTest[] diffBetweenTsAndDateTests = {
1:6c0fb2b: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), dt("2004-05-10"), -123456000, null, null),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, ts("2004-05-10 08:25:01"), dt("2004-05-10"), -(1 + 60 * (25 + 60 * 8)), null, null),
1:6c0fb2b: 			new OneDiffTest(MINUTE_INTERVAL, ts("2004-05-11 08:25:00"), dt("2004-05-10"), -(24 * 60 + 8 * 60 + 25), null, null),
1:6c0fb2b: 			new OneDiffTest(HOUR_INTERVAL, ts("2004-02-28 08:25:00"), dt("2004-03-01"), 39, null, null),
1:6c0fb2b: 			new OneDiffTest(DAY_INTERVAL, ts("2004-05-10 08:25:00"), dt("2004-05-11"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(WEEK_INTERVAL, ts("2004-02-23 00:00:00"), dt("2004-03-01"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(MONTH_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-03-24"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(QUARTER_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-05-24"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(YEAR_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-05-23"), 0, null, null)
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:6c0fb2b: 	/** date - timestamp */
1:cbce560: 	private static final OneDiffTest[] diffBetweenDateAndTsTests = {
1:6c0fb2b: 			new OneDiffTest(FRAC_SECOND_INTERVAL, dt("2004-05-10"), ts("2004-05-10 00:00:00.123456"), 123456000, null, null),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, dt("2004-05-10"), ts("2004-05-09 23:59:00"), -60, null, null),
1:6c0fb2b: 			new OneDiffTest(MINUTE_INTERVAL, dt("2004-05-10"), ts("2004-05-11 08:25:00"), 24 * 60 + 8 * 60 + 25, null, null),
1:6c0fb2b: 			new OneDiffTest(HOUR_INTERVAL, dt("2005-03-01"), ts("2005-02-28 08:25:00"), -15, null, null),
1:6c0fb2b: 			new OneDiffTest(DAY_INTERVAL, dt("2004-05-10"), ts("2004-05-11 08:25:00"), 1, null, null),
1:6c0fb2b: 			new OneDiffTest(WEEK_INTERVAL, dt("2004-03-01"), ts("2004-02-23 00:00:00"), -1, null, null),
1:6c0fb2b: 			new OneDiffTest(MONTH_INTERVAL, dt("2005-03-24"), ts("2004-02-23 08:25:00"), -13, null, null),
1:6c0fb2b: 			new OneDiffTest(QUARTER_INTERVAL, dt("2004-05-23"), ts("2004-02-23 08:25:01"), 0, null, null),
1:6c0fb2b: 			new OneDiffTest(YEAR_INTERVAL, dt("2004-05-23"), ts("2003-02-23 08:25:00"), -1, null, null)
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:6c0fb2b: 	/** timestamp + timestamp */
1:cbce560: 	private static final OneAddTest[] addBetweenTsTests = {
1:6c0fb2b: 			new OneAddTest(FRAC_SECOND_INTERVAL, 1000, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:55:00.000001"), null, null),
1:6c0fb2b: 			new OneAddTest(SECOND_INTERVAL, 60, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:56:00"), null, null),
1:6c0fb2b: 			new OneAddTest(MINUTE_INTERVAL, -1, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:54:00"), null, null),
1:6c0fb2b: 			new OneAddTest(HOUR_INTERVAL, 2, ts("2005-05-11 15:55:00"), ts("2005-05-11 17:55:00"), null, null),
1:6c0fb2b: 			new OneAddTest(DAY_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-05-12 15:55:00"), null, null),
1:6c0fb2b: 			new OneAddTest(WEEK_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-05-18 15:55:00"), null, null),
1:6c0fb2b: 			new OneAddTest(MONTH_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-06-11 15:55:00"), null, null),
1:6c0fb2b: 			new OneAddTest(QUARTER_INTERVAL, 1, ts("2005-10-11 15:55:00"), ts("2006-01-11 15:55:00"), null, null),
1:6c0fb2b: 			new OneAddTest(YEAR_INTERVAL, -10, ts("2005-10-11 15:55:00"), ts("1995-10-11 15:55:00"), null, null)
1:6c0fb2b: 	}; 
1:6c0fb2b: 	
1:6c0fb2b: 	/** date + timestamp */
1:cbce560: 	private static final OneAddTest[] addBetweenDateAndTsTests = {
1:6c0fb2b: 			// following gives an error with J2ME j9_foundation 1.1 (DERBY-2225):
1:6c0fb2b: 			new OneAddTest(FRAC_SECOND_INTERVAL, -1000, dt("2005-05-11"), ts("2005-05-10 23:59:59.999999"), null, null),
1:6c0fb2b: 			new OneAddTest(SECOND_INTERVAL, 60, dt("2005-05-11"), ts("2005-05-11 00:01:00"), null, null),
1:6c0fb2b: 			new OneAddTest(MINUTE_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-11 00:01:00"), null, null),
1:6c0fb2b: 			new OneAddTest(HOUR_INTERVAL, -2, dt("2005-05-11"), ts("2005-05-10 22:00:00"), null, null),
1:6c0fb2b: 			new OneAddTest(DAY_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-12 00:00:00"), null, null),
1:6c0fb2b: 			new OneAddTest(WEEK_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-18 00:00:00"), null, null),
1:6c0fb2b: 			new OneAddTest(MONTH_INTERVAL, -1, dt("2005-03-29"), ts("2005-02-28 00:00:00"), null, null),
1:6c0fb2b: 			new OneAddTest(QUARTER_INTERVAL, -2, dt("2005-05-05"), ts("2004-11-05 00:00:00"), null, null),
1:6c0fb2b: 			new OneAddTest(YEAR_INTERVAL, 2, dt("2005-05-05"), ts("2007-05-05 00:00:00"), null, null)			
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:cbce560: 	private static final OneStringDiffTest[] diffBetweenStringTests = {
1:6c0fb2b: 			new OneStringDiffTest(SECOND_INTERVAL, "2005-05-10 08:25:00", "2005-05-10 08:26:00", 60, null, null)
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:cbce560: 	private static final OneStringAddTest[] addBetweenStringTests = {
1:6c0fb2b: 			new OneStringAddTest(DAY_INTERVAL, 1, "2005-05-11 15:55:00", ts("2005-05-12 15:55:00"), null, null)		
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:6c0fb2b: 	/** check overflow conditions */
1:cbce560: 	private static final OneTest[] overflowTests = {
1:6c0fb2b: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), ts("2004-05-10 00:00:10.123456"), 0, "22003",
1:6c0fb2b: 					"The resulting value is outside the range for the data type INTEGER."),
1:6c0fb2b: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), ts("2005-05-10 00:00:00.123456"), 0, "22003",
1:6c0fb2b: 					"The resulting value is outside the range for the data type INTEGER."),
1:6c0fb2b: 			new OneDiffTest(SECOND_INTERVAL, ts("1904-05-10 00:00:00"),	ts("2205-05-10 00:00:00"), 0, "22003",
1:6c0fb2b: 					"The resulting value is outside the range for the data type INTEGER."),
1:6c0fb2b: 			new OneAddTest(YEAR_INTERVAL, 99999, ts("2004-05-10 00:00:00.123456"), null, "22003",
1:6c0fb2b: 					"The resulting value is outside the range for the data type TIMESTAMP.") 			
1:6c0fb2b: 	};
1:6c0fb2b: 	
1:cbce560:     private static final String[][] invalid = {
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SECOND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)})", "42X01",
1:6c0fb2b:          "Syntax error: Encountered \"SECOND\" at line 1, column 28."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( , CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)})", "42X01",
1:6c0fb2b:          "Syntax error: Encountered \",\" at line 1, column 28."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 5)})", "42X01",
1:6c0fb2b:          "Syntax error: Encountered \",\" at line 1, column 80."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP, 'x')})", "42X45",
1:6c0fb2b:          "CHAR is an invalid type for argument number 3 of TIMESTAMPDIFF."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, 'x', CURRENT_TIMESTAMP)})", "42X45",
1:6c0fb2b:          "CHAR is an invalid type for argument number 2 of TIMESTAMPDIFF."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP)})", "42X01",
1:6c0fb2b:          "Syntax error: Encountered \")\" at line 1, column 61."},
1:6c0fb2b:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND)})", "42X01",
1:6c0fb2b:          "Syntax error: Encountered \")\" at line 1, column 42."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( x, 1, CURRENT_TIMESTAMP)})", "42X01",
1:6c0fb2b:            "Syntax error: Encountered \"x\" at line 1, column 27."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, CURRENT_DATE, CURRENT_TIMESTAMP)})", "42X45",
1:6c0fb2b:            "DATE is an invalid type for argument number 2 of TIMESTAMPADD."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 'XX', CURRENT_TIMESTAMP)})", "42X45",
1:6c0fb2b:            "CHAR is an invalid type for argument number 2 of TIMESTAMPADD."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1.1, CURRENT_TIMESTAMP)})", "42X45",
1:6c0fb2b:            "DECIMAL is an invalid type for argument number 2 of TIMESTAMPADD."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1, 2.1)})", "42X45",
1:6c0fb2b:            "DECIMAL is an invalid type for argument number 3 of TIMESTAMPADD."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1, 'XX')})", "42X45",
1:6c0fb2b:            "CHAR is an invalid type for argument number 3 of TIMESTAMPADD."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1)})", "42X01",
1:6c0fb2b:            "Syntax error: Encountered \")\" at line 1, column 44."},
1:6c0fb2b:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND)})", "42X01",
1:6c0fb2b:            "Syntax error: Encountered \")\" at line 1, column 41."}
1:6c0fb2b:     };
1:6c0fb2b: 
1:6c0fb2b: 	private static final String[] intervalJdbcNames = { "SQL_TSI_FRAC_SECOND",
1:6c0fb2b: 		"SQL_TSI_SECOND", "SQL_TSI_MINUTE", "SQL_TSI_HOUR", "SQL_TSI_DAY",
1:6c0fb2b: 		"SQL_TSI_WEEK", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_YEAR" };
1:6c0fb2b:     
1:6c0fb2b:     private static Statement stmt;
1:6c0fb2b: 	private static PreparedStatement[] tsAddPS = new PreparedStatement[intervalJdbcNames.length];
1:6c0fb2b: 	private static PreparedStatement[] tsDiffPS = new PreparedStatement[intervalJdbcNames.length];
1:6c0fb2b: 
1:6c0fb2b: 	/**
1:6c0fb2b: 	 * Basic constructor.
1:6c0fb2b: 	 */
1:6c0fb2b: 	public TimestampArithTest(String name) {
1:6c0fb2b: 		super(name);
1:6c0fb2b: 	}
1:6c0fb2b: 
1:6c0fb2b: 	protected void initializeConnection(Connection conn) throws SQLException {
1:6c0fb2b: 		conn.setAutoCommit(false);		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public static Test suite() {
1:1ae02c9:         return new BaseJDBCTestSetup(
1:1ae02c9:             new BaseTestSuite(
1:1ae02c9:                 TimestampArithTest.class, "TimestampArithTest")) {
1:6c0fb2b: 
1:6c0fb2b: 			protected void setUp() throws Exception {
1:6c0fb2b: 				super.setUp();
1:6c0fb2b: 
1:6c0fb2b: 				for (int i = 0; i < intervalJdbcNames.length; i++) {
1:6c0fb2b: 					tsAddPS[i] = getConnection().prepareStatement(
1:6c0fb2b: 							composeSqlStr("ADD", i, "?", "?"));
1:6c0fb2b: 					tsDiffPS[i] = getConnection().prepareStatement(
1:6c0fb2b: 							composeSqlStr("DIFF", i, "?", "?"));
1:6c0fb2b: 				}
1:6c0fb2b: 
1:6c0fb2b: 				stmt = getConnection().createStatement();
1:6c0fb2b: 			}
1:cbce560: 
1:cbce560:             protected void tearDown() throws Exception {
1:cbce560:                 closeAll(tsAddPS);
1:cbce560:                 tsAddPS = null;
1:cbce560:                 closeAll(tsDiffPS);
1:cbce560:                 tsDiffPS = null;
1:cbce560:                 stmt.close();
1:cbce560:                 stmt = null;
1:cbce560:                 super.tearDown();
1:cbce560:             }
1:6c0fb2b: 		};
1:6c0fb2b: 	}
1:cbce560: 
1:cbce560:     /** Close all statements in an array. */
1:cbce560:     private static void closeAll(Statement[] statements) throws SQLException {
1:cbce560:         for (int i = 0; i < statements.length; i++) {
1:cbce560:             statements[i].close();
1:cbce560:         }
1:cbce560:     }
1:6c0fb2b: 	
1:6c0fb2b: 	public void testDiffBetweenTimestamp() throws SQLException {
1:6c0fb2b: 		getConnection();
1:6c0fb2b: 		
1:6c0fb2b: 		for (int i = 0; i < diffBetweenTsTests.length; i++) {
1:6c0fb2b: 			diffBetweenTsTests[i].runTest();
1:6c0fb2b: 		}
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testDiffBetweenTimestampAndDate() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < diffBetweenTsAndDateTests.length; i++) {
1:6c0fb2b: 			diffBetweenTsAndDateTests[i].runTest();
1:6c0fb2b: 		}		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testDiffBetweenDateAndTimestamp() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < diffBetweenDateAndTsTests.length; i++) {
1:6c0fb2b: 			diffBetweenDateAndTsTests[i].runTest();
1:6c0fb2b: 		}				
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testAddBetweenTimestamp() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < addBetweenTsTests.length; i++) {
1:6c0fb2b: 			addBetweenTsTests[i].runTest();
1:6c0fb2b: 		}						
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testAddBetweenDateAndTimestamps() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < addBetweenDateAndTsTests.length; i++) {
1:6c0fb2b: 			addBetweenDateAndTsTests[i].runTest();
1:6c0fb2b: 		}								
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testDiffBetweenString() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < diffBetweenStringTests.length; i++) {
1:6c0fb2b: 			diffBetweenStringTests[i].runTest();
1:6c0fb2b: 		}										
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testAddBetweenString() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < addBetweenStringTests.length; i++) {
1:6c0fb2b: 			addBetweenStringTests[i].runTest();
1:6c0fb2b: 		}												
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testOverflow() throws SQLException {
1:6c0fb2b: 		for (int i = 0; i < overflowTests.length; i++) {
1:6c0fb2b: 			overflowTests[i].runTest();
1:6c0fb2b: 		}														
1:6c0fb2b: 	}
1:6c0fb2b: 
1:6c0fb2b: 	/**
1:6c0fb2b: 	 * Tests null inputs, each position, each type.
1:6c0fb2b: 	 * 
1:6c0fb2b: 	 * @throws SQLException
1:6c0fb2b: 	 */
1:6c0fb2b: 	public void testNullInputs() throws SQLException {		
1:6c0fb2b:         tsDiffPS[HOUR_INTERVAL].setTimestamp(1, ts( "2005-05-11 15:26:00"));
1:6c0fb2b:         tsDiffPS[HOUR_INTERVAL].setNull(2, Types.TIMESTAMP);
1:6c0fb2b: 
1:f2a8dbd:         // TIMESTAMPDIFF with null timestamp in third argument
1:f2a8dbd:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1:f2a8dbd: 
1:f2a8dbd:         // TIMESTAMPDIFF with null date in third argument
1:f2a8dbd:         tsDiffPS[HOUR_INTERVAL].setNull(2, Types.DATE);
1:f2a8dbd:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1:f2a8dbd: 
1:f2a8dbd:         // TIMESTAMPDIFF with null timestamp in second argument
1:6c0fb2b:         tsDiffPS[HOUR_INTERVAL].setTimestamp(2, ts( "2005-05-11 15:26:00"));
1:6c0fb2b:         tsDiffPS[HOUR_INTERVAL].setNull(1, Types.TIMESTAMP);
1:f2a8dbd:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1:6c0fb2b: 
1:f2a8dbd:         // TIMESTAMPDIFF with null date in second argument
1:f2a8dbd:         tsDiffPS[HOUR_INTERVAL].setNull(1, Types.DATE);
1:f2a8dbd:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1:f2a8dbd: 
1:f2a8dbd:         // TIMESTAMPADD with null integer in second argument
1:6c0fb2b:         tsAddPS[MINUTE_INTERVAL].setTimestamp(2, ts( "2005-05-11 15:26:00"));
1:6c0fb2b:         tsAddPS[MINUTE_INTERVAL].setNull(1, Types.INTEGER);
1:f2a8dbd:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
1:6c0fb2b: 
1:f2a8dbd:         // TIMESTAMPADD with null timestamp in third argument
1:6c0fb2b:         tsAddPS[MINUTE_INTERVAL].setInt(1, 1);
1:6c0fb2b:         tsAddPS[MINUTE_INTERVAL].setNull(2, Types.TIMESTAMP);
1:f2a8dbd:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
1:f2a8dbd: 
1:f2a8dbd:         // TIMESTAMPADD with null date in third argument
1:6c0fb2b:         tsAddPS[MINUTE_INTERVAL].setNull(2, Types.DATE);
1:f2a8dbd:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
1:6c0fb2b: 	}
1:6c0fb2b: 
1:6c0fb2b: 	public void testInvalidLengths() throws SQLException {
2:6c0fb2b: 		ResultSet rs;
1:6c0fb2b: 		
1:6c0fb2b: 		for (int i = 0; i < invalid.length; i++) {			
1:6c0fb2b: 			try {
1:6c0fb2b: 				rs = stmt.executeQuery(invalid[i][0]);
1:6c0fb2b: 				rs.next();
1:6c0fb2b: 				fail(invalid[i][0] + " did not throw an exception.");
1:6c0fb2b: 			} catch (SQLException sqle) {
1:6c0fb2b: 				assertSQLState("Unexpected SQLState from " + invalid[i][0], invalid[i][1], sqle);
1:6c0fb2b: 			}
1:6c0fb2b: 		}
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	public void testInvalidArgTypes() throws SQLException {
1:39b3237:         expectException( tsDiffPS[ HOUR_INTERVAL], ts( "2005-05-21 15:26:00"), 2.0, "XCL12",
1:6c0fb2b:                 "TIMESTAMPDIFF with double ts2");
1:39b3237:         expectException( tsDiffPS[ HOUR_INTERVAL], 2.0, ts( "2005-05-11 15:26:00"), "XCL12",
1:6c0fb2b:                 "TIMESTAMPDIFF with double ts1");
1:39b3237:         expectException( tsAddPS[ MINUTE_INTERVAL], 1, -1, "XCL12",
1:6c0fb2b:                 "TIMESTAMPADD with int ts");
1:6c0fb2b:         expectException( tsAddPS[ MINUTE_INTERVAL], ts( "2005-05-11 15:26:00"), ts( "2005-05-11 15:26:00"), "XCL12",
1:6c0fb2b:                 "TIMESTAMPADD with timestamp count");		
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	private static void expectException(PreparedStatement ps, Object obj1, Object obj2, 
1:6c0fb2b: 			String expectedSQLState, String label) {
1:6c0fb2b: 		 ResultSet rs;
1:6c0fb2b: 		
1:6c0fb2b:         try {
1:6c0fb2b:         	ps.setObject(1, obj1);
1:6c0fb2b: 			ps.setObject(2, obj2);
2:6c0fb2b: 			rs = ps.executeQuery();
1:6c0fb2b: 			rs.next();
1:6c0fb2b: 			fail(label + " did not throw an exception.");			
1:6c0fb2b: 		} catch (SQLException sqle) {
1:6c0fb2b: 			assertSQLState("Unexpected SQLState from " + label, expectedSQLState, sqle);
1:6c0fb2b: 		}
1:6c0fb2b: 	}
1:f2a8dbd: 
1:f2a8dbd:     private static void expectNullResult(PreparedStatement ps)
1:f2a8dbd:             throws SQLException {
1:f2a8dbd:         JDBC.assertSingleValueResultSet(ps.executeQuery(), null);
1:f2a8dbd:     }
1:6c0fb2b: 
1:6c0fb2b: 	private static String dateTimeToLiteral(Object ts) {
1:6c0fb2b: 		if (ts instanceof java.sql.Timestamp)
1:6c0fb2b: 			return "{ts '" + ((java.sql.Timestamp) ts).toString() + "'}";
1:6c0fb2b: 		else if (ts instanceof java.sql.Time)
1:6c0fb2b: 			return "{t '" + ((java.sql.Time) ts).toString() + "'}";
1:6c0fb2b: 		else if (ts instanceof java.sql.Date)
1:6c0fb2b: 			return "{d '" + ((java.sql.Date) ts).toString() + "'}";
1:6c0fb2b: 		else if (ts instanceof String)
1:6c0fb2b: 			return "TIMESTAMP( '" + ((String) ts) + "')";
1:6c0fb2b: 		else
1:6c0fb2b: 			return ts.toString();
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	private static String composeSqlStr(String fn, int interval, String parm1, String parm2) {
1:6c0fb2b: 		return "values( {fn TIMESTAMP" + fn + "( "
1:6c0fb2b: 				+ intervalJdbcNames[interval] + ", " + parm1 + "," + parm2
1:6c0fb2b: 				+ ")})";
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	private static void setDateTime(PreparedStatement ps, int parameterIdx,
1:6c0fb2b: 			java.util.Date dateTime) throws SQLException {
1:6c0fb2b: 		if (dateTime instanceof java.sql.Timestamp)
1:6c0fb2b: 			ps.setTimestamp(parameterIdx, (java.sql.Timestamp) dateTime);
1:6c0fb2b: 		else if (dateTime instanceof java.sql.Date)
1:6c0fb2b: 			ps.setDate(parameterIdx, (java.sql.Date) dateTime);
1:6c0fb2b: 		else if (dateTime instanceof java.sql.Time)
1:6c0fb2b: 			ps.setTime(parameterIdx, (java.sql.Time) dateTime);
1:6c0fb2b: 		else
1:6c0fb2b: 			ps.setTimestamp(parameterIdx, (java.sql.Timestamp) dateTime);
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	private static java.sql.Timestamp ts(String s) {
1:6c0fb2b: 		// Timestamp format must be yyyy-mm-dd hh:mm:ss.fffffffff
1:6c0fb2b: 		if (s.length() < 29) {
1:6c0fb2b: 			// Pad out the fraction with zeros
1:6c0fb2b: 			StringBuffer sb = new StringBuffer(s);
1:6c0fb2b: 			if (s.length() == 19)
1:6c0fb2b: 				sb.append('.');
1:6c0fb2b: 			while (sb.length() < 29)
4:6c0fb2b: 				sb.append('0');
1:6c0fb2b: 			s = sb.toString();
1:6c0fb2b: 		}
1:f2a8dbd:         return java.sql.Timestamp.valueOf(s);
1:6c0fb2b: 	}
1:6c0fb2b: 	
1:6c0fb2b: 	private static java.sql.Date dt(String s) {
1:6c0fb2b: 		return java.sql.Date.valueOf(s);
1:6c0fb2b: 	}
1:6c0fb2b: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         expectException( tsDiffPS[ HOUR_INTERVAL], ts( "2005-05-21 15:26:00"), 2.0, "XCL12",
1:         expectException( tsDiffPS[ HOUR_INTERVAL], 2.0, ts( "2005-05-11 15:26:00"), "XCL12",
1:         expectException( tsAddPS[ MINUTE_INTERVAL], 1, -1, "XCL12",
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseJDBCTestSetup(
1:             new BaseTestSuite(
1:                 TimestampArithTest.class, "TimestampArithTest")) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cbce560
/////////////////////////////////////////////////////////////////////////
1: 	private static abstract class OneTest {
/////////////////////////////////////////////////////////////////////////
1: 	private static class OneDiffTest extends OneTest {
/////////////////////////////////////////////////////////////////////////
1: 	private static class OneStringDiffTest extends OneDiffTest {
/////////////////////////////////////////////////////////////////////////
1: 	private static class OneAddTest extends OneTest {
/////////////////////////////////////////////////////////////////////////
1: 	private static class OneStringAddTest extends OneAddTest {
/////////////////////////////////////////////////////////////////////////
1:     private static final int FRAC_SECOND_INTERVAL = 0;
1:     private static final int SECOND_INTERVAL = 1;
1:     private static final int MINUTE_INTERVAL = 2;
1:     private static final int HOUR_INTERVAL = 3;
1:     private static final int DAY_INTERVAL = 4;
1:     private static final int WEEK_INTERVAL = 5;
1:     private static final int MONTH_INTERVAL = 6;
1:     private static final int QUARTER_INTERVAL = 7;
1:     private static final int YEAR_INTERVAL = 8;
1: 
1: 	private static final OneDiffTest[] diffBetweenTsTests = {
/////////////////////////////////////////////////////////////////////////
1: 	private static final OneDiffTest[] diffBetweenTsAndDateTests = {
/////////////////////////////////////////////////////////////////////////
1: 	private static final OneDiffTest[] diffBetweenDateAndTsTests = {
/////////////////////////////////////////////////////////////////////////
1: 	private static final OneAddTest[] addBetweenTsTests = {
/////////////////////////////////////////////////////////////////////////
1: 	private static final OneAddTest[] addBetweenDateAndTsTests = {
/////////////////////////////////////////////////////////////////////////
1: 	private static final OneStringDiffTest[] diffBetweenStringTests = {
1: 	private static final OneStringAddTest[] addBetweenStringTests = {
1: 	private static final OneTest[] overflowTests = {
/////////////////////////////////////////////////////////////////////////
1:     private static final String[][] invalid = {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:             protected void tearDown() throws Exception {
1:                 closeAll(tsAddPS);
1:                 tsAddPS = null;
1:                 closeAll(tsDiffPS);
1:                 tsDiffPS = null;
1:                 stmt.close();
1:                 stmt = null;
1:                 super.tearDown();
1:             }
1: 
1:     /** Close all statements in an array. */
1:     private static void closeAll(Statement[] statements) throws SQLException {
1:         for (int i = 0; i < statements.length; i++) {
1:             statements[i].close();
1:         }
1:     }
commit:f2a8dbd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:                     fail("Unexpected exception from statement '" + sql + "'",
1:                          sqle);
/////////////////////////////////////////////////////////////////////////
1:                     fail("Unexpected exception from prepared statement '" +
1:                          sql + "'", sqle);
/////////////////////////////////////////////////////////////////////////
1:         // TIMESTAMPDIFF with null timestamp in third argument
1:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1: 
1:         // TIMESTAMPDIFF with null date in third argument
1:         tsDiffPS[HOUR_INTERVAL].setNull(2, Types.DATE);
1:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1: 
1:         // TIMESTAMPDIFF with null timestamp in second argument
1:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1:         // TIMESTAMPDIFF with null date in second argument
1:         tsDiffPS[HOUR_INTERVAL].setNull(1, Types.DATE);
1:         expectNullResult(tsDiffPS[HOUR_INTERVAL]);
1: 
1:         // TIMESTAMPADD with null integer in second argument
1:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
1:         // TIMESTAMPADD with null timestamp in third argument
1:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
1: 
1:         // TIMESTAMPADD with null date in third argument
1:         expectNullResult(tsAddPS[MINUTE_INTERVAL]);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static void expectNullResult(PreparedStatement ps)
1:             throws SQLException {
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(), null);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         return java.sql.Timestamp.valueOf(s);
commit:677364f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6c0fb2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Types;
0: import java.util.Calendar;
0: import java.util.GregorianCalendar;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: 
1: /**
1:  * Test the JDBC TIMESTAMPADD and TIMESTAMPDIFF escape functions.
1:  *
1:  * Things to test:
1:  *   + Test each interval type with timestamp, date, and time inputs.
1:  *   + Test diff with all 9 combinations of datetime input types (timestamp - timestamp, timestamp - date, etc).
1:  *   + Test PreparedStatements with parameters, '?', in each argument, and Statements. (Statements are prepared
1:  *     internally so we do not also have to test PrepardStatements without parameters).
1:  *   + Test with null inputs.
1:  *   + Test with input string that is convertible to timestamp.
1:  *   + Test with invalid interval type.
1:  *   + Test with invalid arguments in the date time arguments.
1:  *   + Test TIMESTAMPADD with an invalid type in the count argument.
1:  *   + Test overflow cases.
1:  */
1: public class TimestampArithTest extends BaseJDBCTestCase {
1: 	
1: 	/** Abstract class that factors out all the common code for the timestamps tests. */
0: 	private abstract class OneTest {
1: 		final int interval; // FRAC_SECOND_INTERVAL, SECOND_INTERVAL, ... or
1: 		final String expectedSQLState; // Null if no SQLException is expected
1: 		final String expectedMsg; // Null if no SQLException is expected
1: 		String sql;
1: 
1: 		OneTest(int interval, String expectedSQLState, String expectedMsg) {
1: 			this.interval = interval;
1: 			this.expectedSQLState = expectedSQLState;
1: 			this.expectedMsg = expectedMsg;
1: 		}
1: 
1: 		void runTest() throws SQLException {
1: 			ResultSet rs = null;
1: 			
1: 			sql = composeSQL();		
1: 			try {
1: 				rs = stmt.executeQuery(sql);
1: 				checkResultSet(rs, sql);
1: 				if (expectedSQLState != null) {
1: 					fail("Statement '" + sql + "' did not generate an exception");
1: 				}				
1: 			} catch (SQLException sqle) {
1: 				if (expectedSQLState == null) {
0: 					printStackTrace(sqle);
0: 					fail("Unexpected exception from statement '" + sql + "'");
1: 				}
1: 				assertSQLState("Incorrect SQLState from statement '" + sql + "'", expectedSQLState, sqle);
1: 			} 
1: 			if (rs != null) {
1: 			        rs.close();
1: 				rs = null;
1: 			}
1: 
1: 			try {
1: 				rs = executePS();
1: 				checkResultSet(rs, sql);
1: 				if (expectedSQLState != null) {
1: 					fail("Prepared Statement '" + sql + "' did not generate an exception");
1: 				}
1: 			} catch (SQLException sqle) {
1: 				if (expectedSQLState == null) {
0: 					printStackTrace(sqle);
0: 					fail("Unexpected exception from prepared statement '" + sql + "'");
1: 				}
1: 				assertSQLState("Incorrect SQLState from prepared statement '" + sql + "'", expectedSQLState, sqle);
1: 			} 
1: 			if (rs != null) {
1:                             rs.close();
1:                             rs = null;
1: 			}
1: 		} 
1: 
1: 		private void checkResultSet(ResultSet rs, String sql) throws SQLException {
1: 			assertTrue("'" + sql + "' did not return any rows.", rs.next());
1: 			checkResultRow(rs, sql);
1: 			assertFalse("'" + sql + "' returned more than one row.", rs.next());
1: 		}
1: 
1: 		abstract String composeSQL();
1: 		abstract void checkResultRow(ResultSet rs, String sql) throws SQLException;
1: 		abstract ResultSet executePS() throws SQLException;
1: 	}
1: 	
0: 	private class OneDiffTest extends OneTest {
1: 		private final java.util.Date ts1;
1: 		private final java.util.Date ts2;
1: 		private final int expectedDiff;
1: 		protected boolean expectNull;
1: 		
1: 		OneDiffTest(int interval, java.util.Date ts1, java.util.Date ts2,
1: 				int expectedDiff, String expectedSQLState, String expectedMsg) {
1: 			super(interval, expectedSQLState, expectedMsg);
1: 			this.ts1 = ts1;
1: 			this.ts2 = ts2;
1: 			this.expectedDiff = expectedDiff;
1: 			expectNull = (ts1 == null) || (ts2 == null);
1: 		}
1: 
1: 		void checkResultRow(ResultSet rs, String sql) throws SQLException {
1: 			int actualDiff = rs.getInt(1);
1: 			assertFalse("Unexpected null result from '" + sql + "'.", rs.wasNull() && !expectNull);
1: 			assertFalse("Expected null result from '" + sql + "'.", !rs.wasNull() && expectNull);
1: 			assertEquals("Unexpected result from '" + sql + "'.", expectedDiff, actualDiff);			
1: 		}
1: 
1: 		String composeSQL() {
1: 			return composeSqlStr("DIFF", interval, dateTimeToLiteral(ts1),
1: 					dateTimeToLiteral(ts2));
1: 		}
1: 
1: 		ResultSet executePS() throws SQLException {
1: 			setDateTime(tsDiffPS[interval], 1, ts1);
1: 			setDateTime(tsDiffPS[interval], 2, ts2);
1: 			return tsDiffPS[interval].executeQuery();
1: 		}		
1: 	}
1: 	
0: 	private class OneStringDiffTest extends OneDiffTest {
1: 		private final String ts1;
1: 		private final String ts2;
1: 		
1: 		OneStringDiffTest(int interval, String ts1, String ts2,
1: 				int expectedDiff, String expectedSQLState, String expectedMsg) {
1: 			super(interval, (java.util.Date) null, (java.util.Date) null,
1: 					expectedDiff, expectedSQLState, expectedMsg);
1: 			this.ts1 = ts1;
1: 			this.ts2 = ts2;
1: 			expectNull = (ts1 == null) || (ts2 == null);
1: 		}
1: 		
1: 		String composeSQL() {
1: 			return composeSqlStr("DIFF", interval, dateTimeToLiteral(ts1),
1: 					dateTimeToLiteral(ts2));
1: 		}
1: 		
1: 		ResultSet executePS() throws SQLException {
1: 			tsDiffPS[interval].setString(1, ts1);
1: 			tsDiffPS[interval].setString(2, ts2);
1: 			return tsDiffPS[interval].executeQuery();
1: 		}		
1: 	}
1: 	
0: 	private class OneAddTest extends OneTest {
1: 		private final java.util.Date ts;
1: 		final int count;
1: 		final java.sql.Timestamp expected;
1: 		
1: 		OneAddTest(int interval, int count, java.util.Date ts,
1: 				java.sql.Timestamp expected, String expectedSQLState,
1: 				String expectedMsg) {
1: 			super(interval, expectedSQLState, expectedMsg);
1: 			this.count = count;
1: 			this.ts = ts;
1: 			this.expected = expected;
1: 		}
1: 		
1: 		String composeSQL() {
1: 			return composeSqlStr("ADD", interval, String.valueOf(count),
1: 					dateTimeToLiteral(ts));
1: 		}
1: 
1: 		void checkResultRow(ResultSet rs, String sql) throws SQLException {
1: 			java.sql.Timestamp actual = rs.getTimestamp(1);
1: 			assertFalse("Unexpected null result from '" + sql + "'.", (rs.wasNull() || actual == null) && expected != null);
1: 			assertFalse("Expected null result from '" + sql + "'.", !(rs.wasNull() || actual == null) && expected == null);
1: 			assertEquals("Unexpected result from '" + sql + "'.", expected, actual);
1: 		}
1: 
1: 		ResultSet executePS() throws SQLException {
1: 			tsAddPS[interval].setInt(1, count);
1: 			setDateTime(tsAddPS[interval], 2, ts);
1: 			return tsAddPS[interval].executeQuery();
1: 		}		
1: 	}
1: 	
0: 	private class OneStringAddTest extends OneAddTest {
1: 		private final String ts;
1: 
1: 		OneStringAddTest(int interval, int count, String ts,
1: 				java.sql.Timestamp expected, String expectedSQLState,
1: 				String expectedMsg) {
1: 			super(interval, count, (java.util.Date) null, expected,
1: 					expectedSQLState, expectedMsg);
1: 			this.ts = ts;
1: 		}
1: 
1: 		String composeSQL() {
1: 			return composeSqlStr("ADD", interval, String.valueOf(count),
1: 					dateTimeToLiteral(ts));
1: 		}
1: 
1: 		ResultSet executePS() throws SQLException {
1: 			tsAddPS[interval].setInt(1, count);
1: 			tsAddPS[interval].setString(2, ts);
1: 			return tsAddPS[interval].executeQuery();
1: 		}		
1: 	}
1: 	
1: 	/** timestamp - timestamp */
0: 	private final OneDiffTest[] diffBetweenTsTests = {
1: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-10 08:25:00.000001"), 1000, null, null),
1: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:01"), ts("2005-05-10 08:25:00"), -1, null, null),
1: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:00.1"), ts("2005-05-10 08:25:00"), 0, null, null),
1: 			new OneDiffTest(SECOND_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-10 08:26:00"), 60, null, null),
1: 			new OneDiffTest(MINUTE_INTERVAL, ts("2005-05-11 08:25:00"), ts("2005-05-10 08:25:00"), -24 * 60, null, null),
1: 			new OneDiffTest(HOUR_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-11 08:25:00"), 24, null, null),
1: 			new OneDiffTest(DAY_INTERVAL, ts("2005-05-10 08:25:00"), ts("2005-05-11 08:25:00"), 1, null, null),
1: 			new OneDiffTest(DAY_INTERVAL, ts("2005-05-10 08:25:01"), ts("2005-05-11 08:25:00"), 0, null, null),
1: 			new OneDiffTest(WEEK_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-03-01 08:25:00"), 0, null, null),
1: 			new OneDiffTest(MONTH_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-03-23 08:25:00"), 1, null, null),
1: 			new OneDiffTest(MONTH_INTERVAL, ts("2005-02-23 08:25:01"), ts("2005-03-23 08:25:00"), 0, null, null),
1: 			new OneDiffTest(QUARTER_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-05-23 08:25:00"), 1, null, null),
1: 			new OneDiffTest(QUARTER_INTERVAL, ts("2005-02-23 08:25:01"), ts("2005-05-23 08:25:00"), 0, null, null),
1: 			new OneDiffTest(YEAR_INTERVAL, ts("2005-02-23 08:25:00"), ts("2005-05-23 08:25:00"), 0, null, null),
1: 			new OneDiffTest(YEAR_INTERVAL, ts("2005-02-23 08:25:00"), ts("2006-02-23 08:25:00"), 1, null, null)			
1: 	};
1: 	
1: 	/** timestamp - date */
0: 	private final OneDiffTest[] diffBetweenTsAndDateTests = {
1: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), dt("2004-05-10"), -123456000, null, null),
1: 			new OneDiffTest(SECOND_INTERVAL, ts("2004-05-10 08:25:01"), dt("2004-05-10"), -(1 + 60 * (25 + 60 * 8)), null, null),
1: 			new OneDiffTest(MINUTE_INTERVAL, ts("2004-05-11 08:25:00"), dt("2004-05-10"), -(24 * 60 + 8 * 60 + 25), null, null),
1: 			new OneDiffTest(HOUR_INTERVAL, ts("2004-02-28 08:25:00"), dt("2004-03-01"), 39, null, null),
1: 			new OneDiffTest(DAY_INTERVAL, ts("2004-05-10 08:25:00"), dt("2004-05-11"), 0, null, null),
1: 			new OneDiffTest(WEEK_INTERVAL, ts("2004-02-23 00:00:00"), dt("2004-03-01"), 1, null, null),
1: 			new OneDiffTest(MONTH_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-03-24"), 1, null, null),
1: 			new OneDiffTest(QUARTER_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-05-24"), 1, null, null),
1: 			new OneDiffTest(YEAR_INTERVAL, ts("2004-02-23 08:25:00"), dt("2004-05-23"), 0, null, null)
1: 	};
1: 	
1: 	/** date - timestamp */
0: 	private final OneDiffTest[] diffBetweenDateAndTsTests = {
1: 			new OneDiffTest(FRAC_SECOND_INTERVAL, dt("2004-05-10"), ts("2004-05-10 00:00:00.123456"), 123456000, null, null),
1: 			new OneDiffTest(SECOND_INTERVAL, dt("2004-05-10"), ts("2004-05-09 23:59:00"), -60, null, null),
1: 			new OneDiffTest(MINUTE_INTERVAL, dt("2004-05-10"), ts("2004-05-11 08:25:00"), 24 * 60 + 8 * 60 + 25, null, null),
1: 			new OneDiffTest(HOUR_INTERVAL, dt("2005-03-01"), ts("2005-02-28 08:25:00"), -15, null, null),
1: 			new OneDiffTest(DAY_INTERVAL, dt("2004-05-10"), ts("2004-05-11 08:25:00"), 1, null, null),
1: 			new OneDiffTest(WEEK_INTERVAL, dt("2004-03-01"), ts("2004-02-23 00:00:00"), -1, null, null),
1: 			new OneDiffTest(MONTH_INTERVAL, dt("2005-03-24"), ts("2004-02-23 08:25:00"), -13, null, null),
1: 			new OneDiffTest(QUARTER_INTERVAL, dt("2004-05-23"), ts("2004-02-23 08:25:01"), 0, null, null),
1: 			new OneDiffTest(YEAR_INTERVAL, dt("2004-05-23"), ts("2003-02-23 08:25:00"), -1, null, null)
1: 	};
1: 	
1: 	/** timestamp + timestamp */
0: 	private final OneAddTest[] addBetweenTsTests = {
1: 			new OneAddTest(FRAC_SECOND_INTERVAL, 1000, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:55:00.000001"), null, null),
1: 			new OneAddTest(SECOND_INTERVAL, 60, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:56:00"), null, null),
1: 			new OneAddTest(MINUTE_INTERVAL, -1, ts("2005-05-11 15:55:00"), ts("2005-05-11 15:54:00"), null, null),
1: 			new OneAddTest(HOUR_INTERVAL, 2, ts("2005-05-11 15:55:00"), ts("2005-05-11 17:55:00"), null, null),
1: 			new OneAddTest(DAY_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-05-12 15:55:00"), null, null),
1: 			new OneAddTest(WEEK_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-05-18 15:55:00"), null, null),
1: 			new OneAddTest(MONTH_INTERVAL, 1, ts("2005-05-11 15:55:00"), ts("2005-06-11 15:55:00"), null, null),
1: 			new OneAddTest(QUARTER_INTERVAL, 1, ts("2005-10-11 15:55:00"), ts("2006-01-11 15:55:00"), null, null),
1: 			new OneAddTest(YEAR_INTERVAL, -10, ts("2005-10-11 15:55:00"), ts("1995-10-11 15:55:00"), null, null)
1: 	}; 
1: 	
1: 	/** date + timestamp */
0: 	private final OneAddTest[] addBetweenDateAndTsTests = {
1: 			// following gives an error with J2ME j9_foundation 1.1 (DERBY-2225):
1: 			new OneAddTest(FRAC_SECOND_INTERVAL, -1000, dt("2005-05-11"), ts("2005-05-10 23:59:59.999999"), null, null),
1: 			new OneAddTest(SECOND_INTERVAL, 60, dt("2005-05-11"), ts("2005-05-11 00:01:00"), null, null),
1: 			new OneAddTest(MINUTE_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-11 00:01:00"), null, null),
1: 			new OneAddTest(HOUR_INTERVAL, -2, dt("2005-05-11"), ts("2005-05-10 22:00:00"), null, null),
1: 			new OneAddTest(DAY_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-12 00:00:00"), null, null),
1: 			new OneAddTest(WEEK_INTERVAL, 1, dt("2005-05-11"), ts("2005-05-18 00:00:00"), null, null),
1: 			new OneAddTest(MONTH_INTERVAL, -1, dt("2005-03-29"), ts("2005-02-28 00:00:00"), null, null),
1: 			new OneAddTest(QUARTER_INTERVAL, -2, dt("2005-05-05"), ts("2004-11-05 00:00:00"), null, null),
1: 			new OneAddTest(YEAR_INTERVAL, 2, dt("2005-05-05"), ts("2007-05-05 00:00:00"), null, null)			
1: 	};
1: 	
0: 	private final OneStringDiffTest[] diffBetweenStringTests = {
1: 			new OneStringDiffTest(SECOND_INTERVAL, "2005-05-10 08:25:00", "2005-05-10 08:26:00", 60, null, null)
1: 	};
1: 	
0: 	private final OneStringAddTest[] addBetweenStringTests = {
1: 			new OneStringAddTest(DAY_INTERVAL, 1, "2005-05-11 15:55:00", ts("2005-05-12 15:55:00"), null, null)		
1: 	};
1: 	
1: 	/** check overflow conditions */
0: 	private final OneTest[] overflowTests = {
1: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), ts("2004-05-10 00:00:10.123456"), 0, "22003",
1: 					"The resulting value is outside the range for the data type INTEGER."),
1: 			new OneDiffTest(FRAC_SECOND_INTERVAL, ts("2004-05-10 00:00:00.123456"), ts("2005-05-10 00:00:00.123456"), 0, "22003",
1: 					"The resulting value is outside the range for the data type INTEGER."),
1: 			new OneDiffTest(SECOND_INTERVAL, ts("1904-05-10 00:00:00"),	ts("2205-05-10 00:00:00"), 0, "22003",
1: 					"The resulting value is outside the range for the data type INTEGER."),
1: 			new OneAddTest(YEAR_INTERVAL, 99999, ts("2004-05-10 00:00:00.123456"), null, "22003",
1: 					"The resulting value is outside the range for the data type TIMESTAMP.") 			
1: 	};
1: 	
0:     private final String[][] invalid = {
1:         {"values( {fn TIMESTAMPDIFF( SECOND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)})", "42X01",
1:          "Syntax error: Encountered \"SECOND\" at line 1, column 28."},
1:         {"values( {fn TIMESTAMPDIFF( , CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)})", "42X01",
1:          "Syntax error: Encountered \",\" at line 1, column 28."},
1:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 5)})", "42X01",
1:          "Syntax error: Encountered \",\" at line 1, column 80."},
1:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP, 'x')})", "42X45",
1:          "CHAR is an invalid type for argument number 3 of TIMESTAMPDIFF."},
1:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, 'x', CURRENT_TIMESTAMP)})", "42X45",
1:          "CHAR is an invalid type for argument number 2 of TIMESTAMPDIFF."},
1:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND, CURRENT_TIMESTAMP)})", "42X01",
1:          "Syntax error: Encountered \")\" at line 1, column 61."},
1:         {"values( {fn TIMESTAMPDIFF( SQL_TSI_SECOND)})", "42X01",
1:          "Syntax error: Encountered \")\" at line 1, column 42."},
1:         {"values( {fn TIMESTAMPADD( x, 1, CURRENT_TIMESTAMP)})", "42X01",
1:            "Syntax error: Encountered \"x\" at line 1, column 27."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, CURRENT_DATE, CURRENT_TIMESTAMP)})", "42X45",
1:            "DATE is an invalid type for argument number 2 of TIMESTAMPADD."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 'XX', CURRENT_TIMESTAMP)})", "42X45",
1:            "CHAR is an invalid type for argument number 2 of TIMESTAMPADD."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1.1, CURRENT_TIMESTAMP)})", "42X45",
1:            "DECIMAL is an invalid type for argument number 2 of TIMESTAMPADD."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1, 2.1)})", "42X45",
1:            "DECIMAL is an invalid type for argument number 3 of TIMESTAMPADD."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1, 'XX')})", "42X45",
1:            "CHAR is an invalid type for argument number 3 of TIMESTAMPADD."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND, 1)})", "42X01",
1:            "Syntax error: Encountered \")\" at line 1, column 44."},
1:         {"values( {fn TIMESTAMPADD( SQL_TSI_SECOND)})", "42X01",
1:            "Syntax error: Encountered \")\" at line 1, column 41."}
1:     };
1: 
1: 	private static final String[] intervalJdbcNames = { "SQL_TSI_FRAC_SECOND",
1: 		"SQL_TSI_SECOND", "SQL_TSI_MINUTE", "SQL_TSI_HOUR", "SQL_TSI_DAY",
1: 		"SQL_TSI_WEEK", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_YEAR" };
1:     
1:     private static Statement stmt;
1: 	private static PreparedStatement[] tsAddPS = new PreparedStatement[intervalJdbcNames.length];
1: 	private static PreparedStatement[] tsDiffPS = new PreparedStatement[intervalJdbcNames.length];
1: 
0:     private static final int FRAC_SECOND_INTERVAL = 0;
0: 	private static final int SECOND_INTERVAL = 1;
0: 	private static final int MINUTE_INTERVAL = 2;
0: 	private static final int HOUR_INTERVAL = 3;
0: 	private static final int DAY_INTERVAL = 4;
0: 	private static final int WEEK_INTERVAL = 5;
0: 	private static final int MONTH_INTERVAL = 6;
0: 	private static final int QUARTER_INTERVAL = 7;
0: 	private static final int YEAR_INTERVAL = 8;
1: 	
0: 	private static final int ONE_BILLION = 1000000000;
1: 	 
0: 	private static String TODAY;
0: 	private static String TOMORROW;
0: 	private static String YEAR_FROM_TOMORROW;
0: 	private static String YEAR_FROM_TODAY;
0: 	private static String YESTERDAY;
0: 	private static String WEEK_FROM_TODAY;
1: 		
1: 	/**
1: 	 * Basic constructor.
1: 	 */
1: 	public TimestampArithTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);		
1: 	}
1: 	
1: 	public static Test suite() {
0: 		return new BaseJDBCTestSetup(new TestSuite(TimestampArithTest.class,
0: 				"TimestampArithTest")) {
1: 
1: 			protected void setUp() throws Exception {
0: 				Calendar calendar = Calendar.getInstance();
1: 
1: 				super.setUp();
1: 
0: 				/*
0: 				 * Make sure that we are not so close to midnight that TODAY
0: 				 * might be yesterday before we are finished using it.
1: 				 */
0: 				while (calendar.get(Calendar.HOUR) == 23
0: 						&& calendar.get(Calendar.MINUTE) >= 58) {
1: 					try {
0: 						Thread.sleep((60 - calendar.get(Calendar.SECOND)) * 1000);
0: 					} catch (InterruptedException ie) {
0: 						// ignore it
1: 					}
1: 				}
1: 
0: 				TODAY = isoFormatDate(calendar);
0: 				calendar.add(Calendar.DATE, -1);
0: 				YESTERDAY = isoFormatDate(calendar);
0: 				calendar.add(Calendar.DATE, 2);
0: 				TOMORROW = isoFormatDate(calendar);
0: 				calendar.add(Calendar.YEAR, 1);
0: 				YEAR_FROM_TOMORROW = isoFormatDate(calendar);
0: 				calendar.add(Calendar.DATE, -1);
0: 				YEAR_FROM_TODAY = isoFormatDate(calendar);
0: 				calendar.add(Calendar.YEAR, -1); // today
0: 				calendar.add(Calendar.DATE, 7);
0: 				WEEK_FROM_TODAY = isoFormatDate(calendar);
1: 
1: 				for (int i = 0; i < intervalJdbcNames.length; i++) {
1: 					tsAddPS[i] = getConnection().prepareStatement(
1: 							composeSqlStr("ADD", i, "?", "?"));
1: 					tsDiffPS[i] = getConnection().prepareStatement(
1: 							composeSqlStr("DIFF", i, "?", "?"));
1: 				}
1: 
1: 				stmt = getConnection().createStatement();
1: 			}
1: 		};
1: 	}
1: 	
1: 	public void testDiffBetweenTimestamp() throws SQLException {
1: 		getConnection();
1: 		
1: 		for (int i = 0; i < diffBetweenTsTests.length; i++) {
1: 			diffBetweenTsTests[i].runTest();
1: 		}
1: 	}
1: 	
1: 	public void testDiffBetweenTimestampAndDate() throws SQLException {
1: 		for (int i = 0; i < diffBetweenTsAndDateTests.length; i++) {
1: 			diffBetweenTsAndDateTests[i].runTest();
1: 		}		
1: 	}
1: 	
1: 	public void testDiffBetweenDateAndTimestamp() throws SQLException {
1: 		for (int i = 0; i < diffBetweenDateAndTsTests.length; i++) {
1: 			diffBetweenDateAndTsTests[i].runTest();
1: 		}				
1: 	}
1: 	
1: 	public void testAddBetweenTimestamp() throws SQLException {
1: 		for (int i = 0; i < addBetweenTsTests.length; i++) {
1: 			addBetweenTsTests[i].runTest();
1: 		}						
1: 	}
1: 	
1: 	public void testAddBetweenDateAndTimestamps() throws SQLException {
1: 		for (int i = 0; i < addBetweenDateAndTsTests.length; i++) {
1: 			addBetweenDateAndTsTests[i].runTest();
1: 		}								
1: 	}
1: 	
1: 	public void testDiffBetweenString() throws SQLException {
1: 		for (int i = 0; i < diffBetweenStringTests.length; i++) {
1: 			diffBetweenStringTests[i].runTest();
1: 		}										
1: 	}
1: 	
1: 	public void testAddBetweenString() throws SQLException {
1: 		for (int i = 0; i < addBetweenStringTests.length; i++) {
1: 			addBetweenStringTests[i].runTest();
1: 		}												
1: 	}
1: 	
1: 	public void testOverflow() throws SQLException {
1: 		for (int i = 0; i < overflowTests.length; i++) {
1: 			overflowTests[i].runTest();
1: 		}														
1: 	}
1: 
1: 	/**
1: 	 * Tests null inputs, each position, each type.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testNullInputs() throws SQLException {		
1:         tsDiffPS[HOUR_INTERVAL].setTimestamp(1, ts( "2005-05-11 15:26:00"));
1:         tsDiffPS[HOUR_INTERVAL].setNull(2, Types.TIMESTAMP);
0:         expectNullResult(tsDiffPS[HOUR_INTERVAL], "TIMESTAMPDIFF with null timestamp in third argument");
1:         
0:         tsDiffPS[HOUR_INTERVAL].setNull(2, Types.DATE);
0:         expectNullResult(tsDiffPS[HOUR_INTERVAL], "TIMESTAMPDIFF with null date in third argument");
1: 
1:         tsDiffPS[HOUR_INTERVAL].setTimestamp(2, ts( "2005-05-11 15:26:00"));
1:         tsDiffPS[HOUR_INTERVAL].setNull(1, Types.TIMESTAMP);
0:         expectNullResult(tsDiffPS[HOUR_INTERVAL], "TIMESTAMPDIFF with null timestamp in second argument");
1:         
0:         tsDiffPS[HOUR_INTERVAL].setNull(1, Types.DATE);
0:         expectNullResult(tsDiffPS[HOUR_INTERVAL], "TIMESTAMPDIFF with null date in second argument");
1: 
1:         tsAddPS[MINUTE_INTERVAL].setTimestamp(2, ts( "2005-05-11 15:26:00"));
1:         tsAddPS[MINUTE_INTERVAL].setNull(1, Types.INTEGER);
0:         expectNullResult(tsAddPS[MINUTE_INTERVAL], "TIMESTAMPADD with null integer in second argument");
1: 
1:         tsAddPS[MINUTE_INTERVAL].setInt(1, 1);
1:         tsAddPS[MINUTE_INTERVAL].setNull(2, Types.TIMESTAMP);
0:         expectNullResult(tsAddPS[MINUTE_INTERVAL], "TIMESTAMPADD with null timestamp in third argument");
1:         
1:         tsAddPS[MINUTE_INTERVAL].setNull(2, Types.DATE);
0:         expectNullResult(tsAddPS[MINUTE_INTERVAL], "TIMESTAMPADD with null date in third argument");
1: 	}
1: 
1: 	public void testInvalidLengths() throws SQLException {
1: 		ResultSet rs;
1: 		
1: 		for (int i = 0; i < invalid.length; i++) {			
1: 			try {
1: 				rs = stmt.executeQuery(invalid[i][0]);
1: 				rs.next();
1: 				fail(invalid[i][0] + " did not throw an exception.");
1: 			} catch (SQLException sqle) {
1: 				assertSQLState("Unexpected SQLState from " + invalid[i][0], invalid[i][1], sqle);
1: 			}
1: 		}
1: 	}
1: 	
1: 	public void testInvalidArgTypes() throws SQLException {
0:         expectException( tsDiffPS[ HOUR_INTERVAL], ts( "2005-05-21 15:26:00"), new Double( 2.0), "XCL12",
1:                 "TIMESTAMPDIFF with double ts2");
0:         expectException( tsDiffPS[ HOUR_INTERVAL], new Double( 2.0), ts( "2005-05-11 15:26:00"), "XCL12",
1:                 "TIMESTAMPDIFF with double ts1");
0:         expectException( tsAddPS[ MINUTE_INTERVAL], new Integer(1), new Integer(-1), "XCL12",
1:                 "TIMESTAMPADD with int ts");
1:         expectException( tsAddPS[ MINUTE_INTERVAL], ts( "2005-05-11 15:26:00"), ts( "2005-05-11 15:26:00"), "XCL12",
1:                 "TIMESTAMPADD with timestamp count");		
1: 	}
1: 	
1: 	private static void expectException(PreparedStatement ps, Object obj1, Object obj2, 
1: 			String expectedSQLState, String label) {
1: 		 ResultSet rs;
1: 		
1:         try {
1:         	ps.setObject(1, obj1);
1: 			ps.setObject(2, obj2);
1: 			rs = ps.executeQuery();
1: 			rs.next();
1: 			fail(label + " did not throw an exception.");			
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("Unexpected SQLState from " + label, expectedSQLState, sqle);
1: 		}
1: 	}
1: 		
0: 	private static void expectNullResult(PreparedStatement ps, String label) {
1: 		ResultSet rs;
1: 		try {
1: 			rs = ps.executeQuery();
0: 		    assertTrue(label + " returned no rows.", rs.next());
0: 			assertNull(label + " did not return null.", rs.getObject(1));			
0: 		} catch (SQLException e) {	
0: 			printStackTrace(e);
0: 			fail("Unexpected SQL exception from " + label); 
1: 		}
1: 	}
1: 
0: 	private static String isoFormatDate(Calendar cal) {
0: 		StringBuffer sb = new StringBuffer();
0: 		String s = String.valueOf(cal.get(Calendar.YEAR));
0: 		for (int i = s.length(); i < 4; i++)
1: 			sb.append('0');
0: 		sb.append(s);
0: 		sb.append('-');
1: 
0: 		s = String.valueOf(cal.get(Calendar.MONTH) + 1);
0: 		for (int i = s.length(); i < 2; i++)
1: 			sb.append('0');
0: 		sb.append(s);
0: 		sb.append('-');
1: 
0: 		s = String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
0: 		for (int i = s.length(); i < 2; i++)
1: 			sb.append('0');
0: 		sb.append(s);
1: 
0: 		return sb.toString();
1: 	}
1: 	
1: 	private static String dateTimeToLiteral(Object ts) {
1: 		if (ts instanceof java.sql.Timestamp)
1: 			return "{ts '" + ((java.sql.Timestamp) ts).toString() + "'}";
1: 		else if (ts instanceof java.sql.Time)
1: 			return "{t '" + ((java.sql.Time) ts).toString() + "'}";
1: 		else if (ts instanceof java.sql.Date)
1: 			return "{d '" + ((java.sql.Date) ts).toString() + "'}";
1: 		else if (ts instanceof String)
1: 			return "TIMESTAMP( '" + ((String) ts) + "')";
1: 		else
1: 			return ts.toString();
1: 	}
1: 	
1: 	private static String composeSqlStr(String fn, int interval, String parm1, String parm2) {
1: 		return "values( {fn TIMESTAMP" + fn + "( "
1: 				+ intervalJdbcNames[interval] + ", " + parm1 + "," + parm2
1: 				+ ")})";
1: 	}
1: 	
1: 	private static void setDateTime(PreparedStatement ps, int parameterIdx,
1: 			java.util.Date dateTime) throws SQLException {
1: 		if (dateTime instanceof java.sql.Timestamp)
1: 			ps.setTimestamp(parameterIdx, (java.sql.Timestamp) dateTime);
1: 		else if (dateTime instanceof java.sql.Date)
1: 			ps.setDate(parameterIdx, (java.sql.Date) dateTime);
1: 		else if (dateTime instanceof java.sql.Time)
1: 			ps.setTime(parameterIdx, (java.sql.Time) dateTime);
1: 		else
1: 			ps.setTimestamp(parameterIdx, (java.sql.Timestamp) dateTime);
1: 	}
1: 	
1: 	private static java.sql.Timestamp ts(String s) {
1: 		// Timestamp format must be yyyy-mm-dd hh:mm:ss.fffffffff
1: 		if (s.length() < 29) {
1: 			// Pad out the fraction with zeros
1: 			StringBuffer sb = new StringBuffer(s);
1: 			if (s.length() == 19)
1: 				sb.append('.');
1: 			while (sb.length() < 29)
1: 				sb.append('0');
1: 			s = sb.toString();
1: 		}
1: 		try {
0: 			return java.sql.Timestamp.valueOf(s);
0: 		} catch (Exception e) {
0: 			System.out.println(s + " is not a proper timestamp string.");
0: 			System.out.println(e.getClass().getName() + ": " + e.getMessage());
0: 			e.printStackTrace();
0: 			System.exit(1);
0: 			return null;
1: 		}
1: 	}
1: 	
1: 	private static java.sql.Date dt(String s) {
1: 		return java.sql.Date.valueOf(s);
1: 	}
1: }
============================================================================