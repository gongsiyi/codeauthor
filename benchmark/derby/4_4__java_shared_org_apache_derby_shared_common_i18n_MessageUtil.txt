1:daecc5d: /*
1:daecc5d:    Derby - Class org.apache.derby.common.i18n.MessageUtil
6:daecc5d:  
1:1e21fc4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1e21fc4:    contributor license agreements.  See the NOTICE file distributed with
1:1e21fc4:    this work for additional information regarding copyright ownership.
1:1e21fc4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1e21fc4:    (the "License"); you may not use this file except in compliance with
1:1e21fc4:    the License.  You may obtain a copy of the License at
1:daecc5d:  
1:daecc5d:       http://www.apache.org/licenses/LICENSE-2.0
1:daecc5d:  
1:daecc5d:    Unless required by applicable law or agreed to in writing, software
1:daecc5d:    distributed under the License is distributed on an "AS IS" BASIS,
1:daecc5d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:daecc5d:    See the License for the specific language governing permissions and
1:daecc5d:    limitations under the License.
1:daecc5d:  
1:daecc5d:  */
1:daecc5d: package org.apache.derby.shared.common.i18n;
1:daecc5d: 
1:daecc5d: import org.apache.derby.shared.common.error.ExceptionSeverity;
1:59d98b8: import org.apache.derby.shared.common.sanity.SanityManager;
1:daecc5d: import java.util.Locale;
1:daecc5d: import java.util.ResourceBundle;
1:daecc5d: import java.util.MissingResourceException;
1:daecc5d: import java.text.MessageFormat;
1:daecc5d: 
1:daecc5d: /**
1:daecc5d:  * Class comments here
1:daecc5d:  */
1:daecc5d: public class MessageUtil
6:daecc5d: {    
1:daecc5d:     public static final Locale US = new Locale("en", "US");
1:daecc5d:             
1:daecc5d:     /** 
1:daecc5d:      *  The name of the resource bundle we are using to load
1:daecc5d:      *  messages
1:daecc5d:      */
1:daecc5d:     private String resourceBundleName;
1:daecc5d:     
1:daecc5d:     /**
1:daecc5d:      * Create an instance of MessageUtil with a specific resource
1:daecc5d:      * bundle. This assumes the default locale, which is just fine for
1:daecc5d:      * users of this class other than the engine (which potentially has
1:daecc5d:      * a different locale and a different resource bundle for each
1:daecc5d:      * invocation of getCompleteMessage().
1:daecc5d:      *
1:daecc5d:      * @param resourceBundleName
1:daecc5d:      *      The base name of the resource bundle to use.
1:daecc5d:      */
1:daecc5d:     public MessageUtil(String resourceBundleName)
1:daecc5d:     {
1:daecc5d:         this.resourceBundleName = resourceBundleName;
5:daecc5d:     }
1:daecc5d:     
1:1f18dc3:     /**
1:1f18dc3:      * Get a message with default locale.
1:1f18dc3:      */
1:1f18dc3:     public String getTextMessage(String messageID, Object... args) {
1:1f18dc3:         return getCompleteMessage(messageID, args);
1:daecc5d:     }
1:daecc5d:     
1:daecc5d:     /** 
1:daecc5d:      * Instance method to get the complete message, using the
1:daecc5d:      * provided resource bundle name as specified when this
1:daecc5d:      * instance was constructed
1:daecc5d:      *
1:daecc5d:      * If for some reason the message could not be found, we return a
1:daecc5d:      * default message using the message arguments
1:daecc5d:      */
1:daecc5d:     public String getCompleteMessage(String messageID, Object[] args)
1:daecc5d:     {
1:daecc5d:         return getCompleteMessage(messageID, resourceBundleName, args);
1:daecc5d:     }
1:daecc5d:     
1:daecc5d:     /**
1:daecc5d:      * Generic routine to get a message with any number of arguments.
1:daecc5d:      * 
1:daecc5d:      * Looks in the provided resource bundle for the message, using the
1:daecc5d:      * specified locale and then the US locale.  
1:daecc5d:      * 
1:daecc5d:      * @param locale
1:daecc5d:      *      The locale to use when looking for the message.  If the message
1:daecc5d:      *      is not found using this locale, we attempt to find it using the
1:daecc5d:      *      US locale (our default).
1:daecc5d:      * 
1:daecc5d:      * @param resourceBundleName
1:daecc5d:      *      The base name for the resource bundle to use. 
1:daecc5d:      * 
1:daecc5d:      * @param messageId  
1:daecc5d:      *      The message identifier for this message
1:daecc5d:      * 
1:daecc5d:      * @param arguments
1:daecc5d:      *      The arguments for the message
1:daecc5d:      * 
1:daecc5d:      * @param composeDefault
1:daecc5d:      *      If this is true, this method will compose a default message if
1:daecc5d:      *      the message could not be found in the
1:daecc5d:      *      provided resource bundles.  If it is false, this method will
1:daecc5d:      *      throw a MissingResourceException if the message could not be
1:daecc5d:      *      found.
1:daecc5d:      * 
1:daecc5d:      * @return
1:daecc5d:      *      The message for the given message id, with arguments
1:daecc5d:      *      substituted.
1:daecc5d:      * 
1:fe2476a:      * @throws MissingResourceException
1:daecc5d:      *      If the message could not be found and the 
1:daecc5d:      *      <code>composeDefault</code> parameter was set to false.  
1:daecc5d:      */
1:daecc5d:     public static String getCompleteMessage(Locale locale, 
1:daecc5d:         String resourceBundleName, String messageId, Object[] arguments, 
1:daecc5d:         boolean composeDefault) throws MissingResourceException
1:daecc5d:     {
1:daecc5d:         try
1:daecc5d:         {
1:daecc5d:             return formatMessage(
1:daecc5d:                 ResourceBundle.getBundle(resourceBundleName, locale), messageId,
1:daecc5d:                 arguments, false);
1:daecc5d:         }
1:daecc5d:         catch ( MissingResourceException mre )
1:daecc5d:         {
1:daecc5d:             // Try the US locale.  Use composeDefault to indicate whether
1:daecc5d:             // we should compose a default message or throw an exception if
1:daecc5d:             // the message still is not found.
1:daecc5d:             return formatMessage(
1:daecc5d:                     ResourceBundle.getBundle(resourceBundleName, US), 
1:daecc5d:                     messageId, arguments, composeDefault);
1:daecc5d:         }
1:daecc5d:     }
1:daecc5d:     
1:daecc5d:     /**
1:daecc5d:      * This is a wrapper for the getCompleteMessage workhorse routine
1:daecc5d:      * using some obvious defaults, particularly for non-engine subsystems
1:daecc5d:      * that only ever use the default locale.
1:daecc5d:      * 
1:daecc5d:      * Get a message using the default locale.  If the message is not found 
1:daecc5d:      * with the default locale, use the US locale.   Do this both for the
1:daecc5d:      * common bundle and the parent bundle.
1:daecc5d:      * 
1:daecc5d:      * If the message is not found in common or in the parent resource
1:daecc5d:      * bundle, return a default message composed of the message arguments.
1:daecc5d:      * 
1:daecc5d:      * @param messageId
1:daecc5d:      *      The id to use to look up the message
1:daecc5d:      * 
1:daecc5d:      * @param resourceBundleName
1:daecc5d:      *      The base name of the resource bundle to use.
1:daecc5d:      * 
1:daecc5d:      * @param arguments
1:daecc5d:      *      The arguments to the message
1:daecc5d:      */
1:daecc5d:     public static String getCompleteMessage(String messageId,
1:daecc5d:         String resourceBundleName, Object[] arguments) 
1:daecc5d:         throws MissingResourceException
1:daecc5d:     {
1:daecc5d:         return getCompleteMessage(Locale.getDefault(), resourceBundleName,
1:daecc5d:             messageId, arguments, true);
1:daecc5d:     }
1:daecc5d:     
1:daecc5d:     /**
1:daecc5d:      * Format a message given a resource bundle and a message id.
1:daecc5d:      * <p>
1:daecc5d:      * The arguments to the messages are passed via an object array. The objects
1:daecc5d:      * in the array WILL be changed by this class. The caller should NOT get the
1:daecc5d:      * object back from this array.
1:daecc5d:      *
1:daecc5d:      * @param bundle
1:daecc5d:      *      The resource bundle to use to look for the message
1:daecc5d:      *
1:daecc5d:      * @param messageId
1:daecc5d:      *      The message id to use for the message
1:daecc5d:      *
1:daecc5d:      * @param arguments
1:daecc5d:      *      The arguments for the message
1:daecc5d:      *
1:daecc5d:      * @param composeDefault
1:daecc5d:      *      Indicates whether a default message should be composed if
1:daecc5d:      *      the message can't be found in the resource bundle.
1:daecc5d:      *      <p>
1:daecc5d:      *      If composeDefault is false, this method will
1:daecc5d:      *      throw a MissingResourceException if the message could not be
1:daecc5d:      *      found.
1:daecc5d:      *      <p>
1:daecc5d:      *      If composeDefault is true, then if the message id is not found in
1:daecc5d:      *      the given bundle, this method composes and returns as helpful a 
1:daecc5d:      *      message as possible in the format "UNKNOWN : [arg1], [arg2], ..."
1:daecc5d:      */
1:daecc5d:     public static String formatMessage(ResourceBundle bundle, String messageId, 
1:daecc5d:         Object[] arguments, boolean composeDefault) {
1:daecc5d: 
1:daecc5d:         String message = null;
1:59d98b8:         String badArgsMessage = null;
1:daecc5d:         
1:daecc5d:         if (arguments == null)
1:daecc5d:             arguments = new Object[0];
1:daecc5d: 
1:daecc5d:         if (bundle != null) {
1:daecc5d: 
1:daecc5d:             try {
1:daecc5d:                 message = bundle.getString(messageId);
1:59d98b8:                 
1:59d98b8:                 
1:59d98b8:                 // Ensure that the right number of arguments are passed in.
1:59d98b8:                 if ( SanityManager.DEBUG )
1:59d98b8:                 {
1:59d98b8:                     int numExpected = countParams(message);
1:59d98b8:                     SanityManager.ASSERT(numExpected == arguments.length,
1:59d98b8:                         "Number of parameters expected for message id " +
1:1d87ff4:                         messageId + " (" + numExpected +
1:59d98b8:                         ") does not match number of arguments received (" +
1:59d98b8:                         arguments.length + ")");
1:59d98b8:                 }
1:daecc5d: 
1:daecc5d:                 try {
1:daecc5d:                     return MessageFormat.format(message, arguments);
1:daecc5d:                 }
1:daecc5d:                 catch (IllegalArgumentException iae) {
1:a53b758:                     if ( !composeDefault || SanityManager.DEBUG )
1:59d98b8:                         throw iae;
1:daecc5d:                 }
1:daecc5d:                 catch (NullPointerException npe) {
1:daecc5d:                     //
1:daecc5d:                     //null arguments cause a NullPointerException. 
1:daecc5d:                     //This improves reporting.
1:a53b758:                     if ( !composeDefault  || SanityManager.DEBUG )
1:59d98b8:                         throw npe;
1:daecc5d:                 }
1:daecc5d: 
1:daecc5d:             } catch (MissingResourceException mre) {
1:daecc5d:                 // caller will try and handle the last chance
1:a53b758:                 if (!composeDefault )
1:daecc5d:                     throw mre;
1:daecc5d:             } 
1:daecc5d:         }
1:daecc5d: 
1:59d98b8:         return composeDefaultMessage("UNKNOWN MESSAGE, id " + messageId, arguments);
1:59d98b8:     }
1:59d98b8:     
1:59d98b8:     /**
1:59d98b8:      * Count the number of substituation parameters in the message
1:59d98b8:      */
1:59d98b8:     private static int countParams(String message)
1:59d98b8:     {
1:59d98b8:         boolean openFound = false;
1:59d98b8:         int numparams = 0;
1:59d98b8:         
1:59d98b8:         for ( int i = 0 ; i < message.length() ; i++ )
1:59d98b8:         {
1:59d98b8:             char ch = message.charAt(i);
1:59d98b8:             if ( ch == '{' ) {
1:59d98b8:                 openFound = true;
1:59d98b8:             }
1:59d98b8:             
1:59d98b8:             if ( ch == '}' && openFound )
1:59d98b8:             {
1:59d98b8:                 numparams++;
1:59d98b8:                 openFound = false;
1:59d98b8:             }
1:59d98b8:         }
1:59d98b8:         
1:59d98b8:         return numparams;
1:daecc5d:     }
1:daecc5d: 
1:daecc5d:     /**
1:daecc5d:      * Compose a default message so that the user at least gets
1:daecc5d:      * *something* useful rather than just a MissingResourceException,
1:daecc5d:      * which is particularly unhelpful
1:daecc5d:      *
1:daecc5d:      * @param message
1:daecc5d:      *      The message to start with, which often is null
1:daecc5d:      *
1:daecc5d:      * @param arguments
1:daecc5d:      *      The arguments to the message.  
1:daecc5d:      */
1:daecc5d:     public static String composeDefaultMessage(String message, Object[] arguments)
1:daecc5d:     {
1:59d98b8:         if (message == null)
1:daecc5d:         {
1:daecc5d:             message = "UNKNOWN";
1:daecc5d:         }
1:daecc5d:         
1:daecc5d:         StringBuffer sb = new StringBuffer(message);
1:daecc5d:         
1:daecc5d:         if ( arguments == null )
1:daecc5d:         {
1:daecc5d:             return sb.toString();
1:daecc5d:         }
1:daecc5d: 
1:daecc5d:         sb.append(" : ");
1:daecc5d:         int len = arguments.length;
1:daecc5d: 
1:daecc5d:         for (int i=0; i < len; i++) {
1:daecc5d:             // prepend a comma to all but the first
1:daecc5d:             if (i > 0)
1:daecc5d:                 sb.append(", ");
1:daecc5d: 
1:daecc5d:             sb.append('[');
1:daecc5d:             sb.append(i);
1:daecc5d:             sb.append("] ");
1:daecc5d:             if (arguments[i] == null)
1:daecc5d:                 sb.append("null");
1:daecc5d:             else
1:daecc5d:                 sb.append(arguments[i].toString());
1:daecc5d:         }
1:daecc5d: 
1:daecc5d:         return sb.toString();        
1:daecc5d:     }
1:daecc5d: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1f18dc3
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get a message with default locale.
1:      */
1:     public String getTextMessage(String messageID, Object... args) {
1:         return getCompleteMessage(messageID, args);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1e21fc4
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:1d87ff4
/////////////////////////////////////////////////////////////////////////
1:                         messageId + " (" + numExpected +
commit:a53b758
/////////////////////////////////////////////////////////////////////////
1:                     if ( !composeDefault || SanityManager.DEBUG )
1:                     if ( !composeDefault  || SanityManager.DEBUG )
1:                 if (!composeDefault )
commit:59d98b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:         String badArgsMessage = null;
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 
1:                 // Ensure that the right number of arguments are passed in.
1:                 if ( SanityManager.DEBUG )
1:                 {
1:                     int numExpected = countParams(message);
1:                     SanityManager.ASSERT(numExpected == arguments.length,
1:                         "Number of parameters expected for message id " +
0:                         messageId + "(" + numExpected +
1:                         ") does not match number of arguments received (" +
1:                         arguments.length + ")");
1:                 }
0:                     if ( !composeDefault )
1:                         throw iae;
0:                     if ( !composeDefault )
1:                         throw npe;
/////////////////////////////////////////////////////////////////////////
1:         return composeDefaultMessage("UNKNOWN MESSAGE, id " + messageId, arguments);
1:     }
1:     
1:     /**
1:      * Count the number of substituation parameters in the message
1:      */
1:     private static int countParams(String message)
1:     {
1:         boolean openFound = false;
1:         int numparams = 0;
1:         
1:         for ( int i = 0 ; i < message.length() ; i++ )
1:         {
1:             char ch = message.charAt(i);
1:             if ( ch == '{' ) {
1:                 openFound = true;
1:             }
1:             
1:             if ( ch == '}' && openFound )
1:             {
1:                 numparams++;
1:                 openFound = false;
1:             }
1:         }
1:         
1:         return numparams;
/////////////////////////////////////////////////////////////////////////
1:         if (message == null)
commit:daecc5d
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.common.i18n.MessageUtil
1:  
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: package org.apache.derby.shared.common.i18n;
1: 
1: import org.apache.derby.shared.common.error.ExceptionSeverity;
1: import java.util.Locale;
1: import java.util.ResourceBundle;
1: import java.util.MissingResourceException;
1: import java.text.MessageFormat;
1: 
1: /**
1:  * Class comments here
1:  */
1: public class MessageUtil
1: {    
1:     public static final Locale US = new Locale("en", "US");
1:             
1:     /** 
1:      *  The name of the resource bundle we are using to load
1:      *  messages
1:      */
1:     private String resourceBundleName;
1:     
1:     /**
1:      * Create an instance of MessageUtil with a specific resource
1:      * bundle. This assumes the default locale, which is just fine for
1:      * users of this class other than the engine (which potentially has
1:      * a different locale and a different resource bundle for each
1:      * invocation of getCompleteMessage().
1:      *
1:      * @param resourceBundleName
1:      *      The base name of the resource bundle to use.
1:      */
1:     public MessageUtil(String resourceBundleName)
1:     {
1:         this.resourceBundleName = resourceBundleName;
1:     }
1:     
0:     /** Get a message with default locale - no arguments */
0:        public String getTextMessage(String messageID) 
1:     {
0:         return getCompleteMessage(messageID, (Object[]) null);
1:     }
1:     
0:     /** Get a message with default locale - one argument */
0:     public String getTextMessage(String messageID, Object a1) 
1:     {
0:         return getCompleteMessage(messageID, new Object[]{a1});
1:     }
1:     
0:     /** Get a message with default locale - two arguments */
0:     public String getTextMessage(String messageID, Object a1, Object a2) 
1:     {
0:         return getCompleteMessage(messageID, new Object[]{a1, a2});
1:     }
1:     
0:     /** Get a message with default locale - three arguments */
0:     public String getTextMessage(String messageID, Object a1, Object a2, 
0:         Object a3) 
1:     {
0:         return getCompleteMessage(messageID, new Object[]{a1, a2, a3});
1:     }
1:     
0:     /** Get a message with default locale - four arguments */
0:     public String getTextMessage(String messageID, Object a1, Object a2, 
0:         Object a3, Object a4) 
1:     {
0:         return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});
1:     }
1:     
1:     /** 
1:      * Instance method to get the complete message, using the
1:      * provided resource bundle name as specified when this
1:      * instance was constructed
1:      *
1:      * If for some reason the message could not be found, we return a
1:      * default message using the message arguments
1:      */
1:     public String getCompleteMessage(String messageID, Object[] args)
1:     {
1:         return getCompleteMessage(messageID, resourceBundleName, args);
1:     }
1:     
1:     /**
1:      * Generic routine to get a message with any number of arguments.
1:      * 
1:      * Looks in the provided resource bundle for the message, using the
1:      * specified locale and then the US locale.  
1:      * 
1:      * @param locale
1:      *      The locale to use when looking for the message.  If the message
1:      *      is not found using this locale, we attempt to find it using the
1:      *      US locale (our default).
1:      * 
1:      * @param resourceBundleName
1:      *      The base name for the resource bundle to use. 
1:      * 
1:      * @param messageId  
1:      *      The message identifier for this message
1:      * 
1:      * @param arguments
1:      *      The arguments for the message
1:      * 
1:      * @param composeDefault
1:      *      If this is true, this method will compose a default message if
1:      *      the message could not be found in the
1:      *      provided resource bundles.  If it is false, this method will
1:      *      throw a MissingResourceException if the message could not be
1:      *      found.
1:      * 
1:      * @return
1:      *      The message for the given message id, with arguments
1:      *      substituted.
1:      * 
0:      * @throw MissingResourceException
1:      *      If the message could not be found and the 
1:      *      <code>composeDefault</code> parameter was set to false.  
1:      */
1:     public static String getCompleteMessage(Locale locale, 
1:         String resourceBundleName, String messageId, Object[] arguments, 
1:         boolean composeDefault) throws MissingResourceException
1:     {
1:         try
1:         {
1:             return formatMessage(
1:                 ResourceBundle.getBundle(resourceBundleName, locale), messageId,
1:                 arguments, false);
1:         }
1:         catch ( MissingResourceException mre )
1:         {
1:             // Try the US locale.  Use composeDefault to indicate whether
1:             // we should compose a default message or throw an exception if
1:             // the message still is not found.
1:             return formatMessage(
1:                     ResourceBundle.getBundle(resourceBundleName, US), 
1:                     messageId, arguments, composeDefault);
1:         }
1:     }
1:     
1:     /**
1:      * This is a wrapper for the getCompleteMessage workhorse routine
1:      * using some obvious defaults, particularly for non-engine subsystems
1:      * that only ever use the default locale.
1:      * 
1:      * Get a message using the default locale.  If the message is not found 
1:      * with the default locale, use the US locale.   Do this both for the
1:      * common bundle and the parent bundle.
1:      * 
1:      * If the message is not found in common or in the parent resource
1:      * bundle, return a default message composed of the message arguments.
1:      * 
1:      * @param messageId
1:      *      The id to use to look up the message
1:      * 
1:      * @param resourceBundleName
1:      *      The base name of the resource bundle to use.
1:      * 
1:      * @param arguments
1:      *      The arguments to the message
1:      */
1:     public static String getCompleteMessage(String messageId,
1:         String resourceBundleName, Object[] arguments) 
1:         throws MissingResourceException
1:     {
1:         return getCompleteMessage(Locale.getDefault(), resourceBundleName,
1:             messageId, arguments, true);
1:     }
1:     
1:     /**
1:      * Format a message given a resource bundle and a message id.
1:      * <p>
1:      * The arguments to the messages are passed via an object array. The objects
1:      * in the array WILL be changed by this class. The caller should NOT get the
1:      * object back from this array.
1:      *
1:      * @param bundle
1:      *      The resource bundle to use to look for the message
1:      *
1:      * @param messageId
1:      *      The message id to use for the message
1:      *
1:      * @param arguments
1:      *      The arguments for the message
1:      *
1:      * @param composeDefault
1:      *      Indicates whether a default message should be composed if
1:      *      the message can't be found in the resource bundle.
1:      *      <p>
1:      *      If composeDefault is false, this method will
1:      *      throw a MissingResourceException if the message could not be
1:      *      found.
1:      *      <p>
1:      *      If composeDefault is true, then if the message id is not found in
1:      *      the given bundle, this method composes and returns as helpful a 
1:      *      message as possible in the format "UNKNOWN : [arg1], [arg2], ..."
1:      */
1:     public static String formatMessage(ResourceBundle bundle, String messageId, 
1:         Object[] arguments, boolean composeDefault) {
1: 
1:         String message = null;
1:         
1:         if (arguments == null)
1:             arguments = new Object[0];
1: 
1:         if (bundle != null) {
1: 
1:             try {
1:                 message = bundle.getString(messageId);
1: 
1:                 try {
1:                     return MessageFormat.format(message, arguments);
1:                 }
1:                 catch (IllegalArgumentException iae) {
1:                 }
1:                 catch (NullPointerException npe) {
1:                     //
1:                     //null arguments cause a NullPointerException. 
1:                     //This improves reporting.
1:                 }
1: 
1:             } catch (MissingResourceException mre) {
1:                 // caller will try and handle the last chance
0:                 if (!composeDefault)
1:                     throw mre;
1:             } 
1:         }
1: 
0:         return composeDefaultMessage(messageId, arguments);
1:     }
1: 
1:     /**
1:      * Compose a default message so that the user at least gets
1:      * *something* useful rather than just a MissingResourceException,
1:      * which is particularly unhelpful
1:      *
1:      * @param message
1:      *      The message to start with, which often is null
1:      *
1:      * @param arguments
1:      *      The arguments to the message.  
1:      */
1:     public static String composeDefaultMessage(String message, Object[] arguments)
1:     {
0:            if (message == null)
1:         {
1:             message = "UNKNOWN";
1:         }
1:         
1:         StringBuffer sb = new StringBuffer(message);
1:         
1:         if ( arguments == null )
1:         {
1:             return sb.toString();
1:         }
1: 
1:         sb.append(" : ");
1:         int len = arguments.length;
1: 
1:         for (int i=0; i < len; i++) {
1:             // prepend a comma to all but the first
1:             if (i > 0)
1:                 sb.append(", ");
1: 
1:             sb.append('[');
1:             sb.append(i);
1:             sb.append("] ");
1:             if (arguments[i] == null)
1:                 sb.append("null");
1:             else
1:                 sb.append(arguments[i].toString());
1:         }
1: 
1:         return sb.toString();        
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:fe2476a
/////////////////////////////////////////////////////////////////////////
1:      * @throws MissingResourceException
============================================================================