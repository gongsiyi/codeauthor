1:ee0904b: /*
1:ee0904b:  
1:ee0904b:  Derby - Class org.apache.derbyTesting.system.langtest.query.GenericQuery;
1:ee0904b:  
1:ee0904b:  Licensed to the Apache Software Foundation (ASF) under one or more
1:ee0904b:  contributor license agreements.  See the NOTICE file distributed with
1:ee0904b:  this work for additional information regarding copyright ownership.
1:ee0904b:  The ASF licenses this file to You under the Apache License, Version 2.0
1:ee0904b:  (the "License"); you may not use this file except in compliance with
1:ee0904b:  the License.  You may obtain a copy of the License at
1:ee0904b:  
1:ee0904b:  http://www.apache.org/licenses/LICENSE-2.0
1:ee0904b:  
1:ee0904b:  Unless required by applicable law or agreed to in writing, software
1:ee0904b:  distributed under the License is distributed on an "AS IS" BASIS,
1:ee0904b:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee0904b:  See the License for the specific language governing permissions and
1:ee0904b:  limitations under the License.
1:ee0904b:  
1:ee0904b:  */
1:ee0904b: package org.apache.derbyTesting.system.optimizer.query;
1:ee0904b: 
1:ee0904b: import java.sql.Connection;
1:ee0904b: import java.sql.PreparedStatement;
1:ee0904b: import java.sql.ResultSet;
1:ee0904b: import java.sql.ResultSetMetaData;
1:ee0904b: import java.sql.SQLException;
1:ee0904b: import java.sql.Statement;
1:ee0904b: import java.util.ArrayList;
1:ee0904b: import java.util.Enumeration;
1:ee0904b: import java.util.Properties;
1:ee0904b: 
1:ee0904b: import org.apache.derbyTesting.system.optimizer.StaticValues;
1:ee0904b: import org.apache.derbyTesting.system.optimizer.utils.TestUtils;
1:ee0904b: /**
1:ee0904b:  * 
1:ee0904b:  * Class GenericQuery: The generic class that is extended by the Query classes or instantiated
1:ee0904b:  * when the 'query.list' of custom queries is provided
1:ee0904b:  *
1:ee0904b:  */
1:ee0904b: 
1:ee0904b: 
1:ee0904b: 
1:ee0904b: public  class GenericQuery {
1:ee0904b: 	protected String description="Custom Test Query";
1:ee0904b: 	protected Connection conn=null;
1:9d44c9e: 	protected ArrayList<String> queries = new ArrayList<String>();
1:9d44c9e: 	protected ArrayList<String[]> prepStmtRunResults = new ArrayList<String[]>(); //times using PreparedStatement
1:9d44c9e: 	protected ArrayList<String[]> stmtRunResults = new ArrayList<String[]>(); //times using Statement
1:ee0904b: 	protected int[] rowsExpected=null; //add rows expected
1:ee0904b: 	
1:ee0904b: 	public void setConnection(Connection con){
1:ee0904b: 		conn=con;
1:ee0904b: 	}
1:ee0904b: 	public  void generateQueries(){
1:ee0904b: 		
1:ee0904b: 	}
1:ee0904b: 	public void generateQueries(Properties prop){
1:ee0904b: 		Enumeration qenum=prop.keys();
1:ee0904b: 		while(qenum.hasMoreElements()){
1:ee0904b: 			String queryName=(String)qenum.nextElement();
1:9d44c9e: 			queries.add(prop.getProperty(queryName));
1:ee0904b: 		}
1:ee0904b: 	}
1:ee0904b: 		
1:ee0904b: 	public String getDescription(){
1:ee0904b: 		return description;
1:ee0904b: 	}
1:2b0fe66: 	public void  executeQueries(boolean prepare,boolean verbose) throws SQLException{
1:ee0904b: 		rowsExpected=new int[queries.size()]; //initialize the array with correct size
1:ee0904b: 		String query="";
1:ee0904b: 		if(prepare){	
1:2b0fe66: 			if (verbose)
1:2b0fe66: 				System.out.println("=====================> Using java.sql.PreparedStatement <====================");					
1:ee0904b: 		}else{
1:2b0fe66: 			if (verbose)
1:2b0fe66: 				System.out.println("=====================> Using java.sql.Statement <====================");
1:ee0904b: 			
1:ee0904b: 		}
1:ee0904b: 		try{
1:ee0904b: 			for(int k=0;k<queries.size();k++){
1:ee0904b: 				
1:9d44c9e: 				query = queries.get(k);
1:ee0904b: 				String [] times=new String [StaticValues.ITER];
1:ee0904b: 				int rowsReturned=0;
1:ee0904b: 				for (int i=0;i<StaticValues.ITER;i++){ 
1:ee0904b: 					
1:ee0904b: 					Statement stmt=null;
1:ee0904b: 					ResultSet rs=null;
1:ee0904b: 					PreparedStatement pstmt=null;
1:ee0904b: 					if(prepare){	
1:ee0904b: 						pstmt=conn.prepareStatement(query);					
1:ee0904b: 					}else{
1:ee0904b: 						stmt=conn.createStatement();
1:ee0904b: 						
1:ee0904b: 					}
1:ee0904b: 					long start=System.currentTimeMillis();
1:ee0904b: 					if(prepare)
1:ee0904b: 						rs=pstmt.executeQuery();
1:ee0904b: 					else
1:ee0904b: 						rs=stmt.executeQuery(query);
1:ee0904b: 					ResultSetMetaData rsmd=rs.getMetaData();
1:ee0904b: 					int totalCols=rsmd.getColumnCount();
1:ee0904b: 					
1:ee0904b: 					while(rs.next()){
1:ee0904b: 						String row="";
1:ee0904b: 						for(int j=1;j<=totalCols;j++){
1:ee0904b: 							row+=rs.getString(j)+" | ";
1:ee0904b: 						}
1:ee0904b: 						rowsReturned++;
1:ee0904b: 					}
1:ee0904b: 					long time_taken=(System.currentTimeMillis() - start);
1:2b0fe66: 					if (verbose){
1:2b0fe66: 						System.out.println("Time required to execute:");
1:2b0fe66: 						System.out.println(query);
1:2b0fe66: 						System.out.println("Total Rows returned = "+rowsReturned);
1:ee0904b: 					
1:2b0fe66: 						System.out.println("==> "+time_taken+" milliseconds "+" OR "+TestUtils.getTime(time_taken));
1:2b0fe66: 					}
1:b8dd632: 					times[i]=TestUtils.getTime(time_taken);
1:ee0904b: 					rs.close();
1:ee0904b: 					if(prepare){
1:ee0904b: 						pstmt.close();
1:ee0904b: 					}else{
1:ee0904b: 						stmt.close();
1:ee0904b: 					}
1:ee0904b: 					rowsExpected[k]=rowsReturned;//add expected rows for respective queries
1:ee0904b: 					rowsReturned=0;
1:ee0904b: 				}//end for loop to run StaticValues.ITER times
1:ee0904b: 				
1:ee0904b: 				if(prepare){	
1:ee0904b: 					prepStmtRunResults.add(times);
1:ee0904b: 				}else{
1:ee0904b: 					stmtRunResults.add(times);
1:ee0904b: 				}
1:ee0904b: 				
1:ee0904b: 			}
1:ee0904b: 		}catch(SQLException sqe){
1:ee0904b: 			throw new SQLException("Failed query:\n "+query+"\n SQLState= "+sqe.getSQLState()+"\n ErrorCode= "+sqe.getErrorCode()+"\n Message= "+sqe.getMessage());
1:ee0904b: 		}
1:ee0904b: 	}
1:9d44c9e: 	public ArrayList<String[]> getPrepStmtRunResults() {
1:ee0904b: 		return prepStmtRunResults;
1:ee0904b: 	}
1:9d44c9e: 	public ArrayList<String[]> getStmtRunResults() {
1:ee0904b: 		return stmtRunResults;
1:ee0904b: 	}
1:ee0904b: 	public int getRowsExpected(int index) {
1:ee0904b: 		return rowsExpected[index];
1:ee0904b: 	}
1:ee0904b: 	public ArrayList getQueries() {
1:ee0904b: 		return queries;
1:ee0904b: 	}
1:ee0904b: 	
1:ee0904b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1: 	protected ArrayList<String> queries = new ArrayList<String>();
1: 	protected ArrayList<String[]> prepStmtRunResults = new ArrayList<String[]>(); //times using PreparedStatement
1: 	protected ArrayList<String[]> stmtRunResults = new ArrayList<String[]>(); //times using Statement
/////////////////////////////////////////////////////////////////////////
1: 			queries.add(prop.getProperty(queryName));
/////////////////////////////////////////////////////////////////////////
1: 				query = queries.get(k);
/////////////////////////////////////////////////////////////////////////
1: 	public ArrayList<String[]> getPrepStmtRunResults() {
1: 	public ArrayList<String[]> getStmtRunResults() {
commit:b8dd632
/////////////////////////////////////////////////////////////////////////
1: 					times[i]=TestUtils.getTime(time_taken);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2b0fe66
/////////////////////////////////////////////////////////////////////////
1: 	public void  executeQueries(boolean prepare,boolean verbose) throws SQLException{
1: 			if (verbose)
1: 				System.out.println("=====================> Using java.sql.PreparedStatement <====================");					
1: 			if (verbose)
1: 				System.out.println("=====================> Using java.sql.Statement <====================");
/////////////////////////////////////////////////////////////////////////
1: 					if (verbose){
1: 						System.out.println("Time required to execute:");
1: 						System.out.println(query);
1: 						System.out.println("Total Rows returned = "+rowsReturned);
1: 						System.out.println("==> "+time_taken+" milliseconds "+" OR "+TestUtils.getTime(time_taken));
0: 							times[i]=TestUtils.getTime(time_taken);
1: 					}
author:Army
-------------------------------------------------------------------------------
commit:ee0904b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.langtest.query.GenericQuery;
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.system.optimizer.query;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: import org.apache.derbyTesting.system.optimizer.StaticValues;
1: import org.apache.derbyTesting.system.optimizer.utils.TestUtils;
1: /**
1:  * 
1:  * Class GenericQuery: The generic class that is extended by the Query classes or instantiated
1:  * when the 'query.list' of custom queries is provided
1:  *
1:  */
1: 
1: 
1: 
1: public  class GenericQuery {
1: 	protected String description="Custom Test Query";
1: 	protected Connection conn=null;
0: 	protected ArrayList queries=new ArrayList(); 
0: 	protected ArrayList prepStmtRunResults=new ArrayList(); //times using PreparedStatement
0: 	protected ArrayList stmtRunResults=new ArrayList(); //times using Statement
1: 	protected int[] rowsExpected=null; //add rows expected
1: 	
1: 	public void setConnection(Connection con){
1: 		conn=con;
1: 	}
1: 	public  void generateQueries(){
1: 		
1: 	}
1: 	public void generateQueries(Properties prop){
1: 		Enumeration qenum=prop.keys();
1: 		while(qenum.hasMoreElements()){
1: 			String queryName=(String)qenum.nextElement();
0: 			queries.add(prop.get(queryName));
1: 		}
1: 	}
1: 		
1: 	public String getDescription(){
1: 		return description;
1: 	}
0: 	public void  executeQueries(boolean prepare) throws SQLException{
1: 		rowsExpected=new int[queries.size()]; //initialize the array with correct size
1: 		String query="";
1: 		if(prepare){	
0: 			System.out.println("=====================> Using java.sql.PreparedStatement <====================");					
1: 		}else{
0: 			System.out.println("=====================> Using java.sql.Statement <====================");
1: 			
1: 		}
1: 		try{
1: 			for(int k=0;k<queries.size();k++){
1: 				
0: 				query=(String)queries.get(k);
1: 				String [] times=new String [StaticValues.ITER];
1: 				int rowsReturned=0;
1: 				for (int i=0;i<StaticValues.ITER;i++){ 
1: 					
1: 					Statement stmt=null;
1: 					ResultSet rs=null;
1: 					PreparedStatement pstmt=null;
1: 					if(prepare){	
1: 						pstmt=conn.prepareStatement(query);					
1: 					}else{
1: 						stmt=conn.createStatement();
1: 						
1: 					}
1: 					long start=System.currentTimeMillis();
1: 					if(prepare)
1: 						rs=pstmt.executeQuery();
1: 					else
1: 						rs=stmt.executeQuery(query);
1: 					ResultSetMetaData rsmd=rs.getMetaData();
1: 					int totalCols=rsmd.getColumnCount();
1: 					
1: 					while(rs.next()){
1: 						String row="";
1: 						for(int j=1;j<=totalCols;j++){
1: 							row+=rs.getString(j)+" | ";
1: 						}
1: 						rowsReturned++;
1: 					}
1: 					long time_taken=(System.currentTimeMillis() - start);
0: 					System.out.println("Time required to execute:");
0: 					System.out.println(query);
0: 					System.out.println("Total Rows returned = "+rowsReturned);
1: 					
0: 					System.out.println("==> "+time_taken+" milliseconds "+" OR "+TestUtils.getTime(time_taken));
0: 					times[i]=TestUtils.getTime(time_taken);
1: 					rs.close();
1: 					if(prepare){
1: 						pstmt.close();
1: 					}else{
1: 						stmt.close();
1: 					}
1: 					rowsExpected[k]=rowsReturned;//add expected rows for respective queries
1: 					rowsReturned=0;
1: 				}//end for loop to run StaticValues.ITER times
1: 				
1: 				if(prepare){	
1: 					prepStmtRunResults.add(times);
1: 				}else{
1: 					stmtRunResults.add(times);
1: 				}
1: 				
1: 			}
1: 		}catch(SQLException sqe){
1: 			throw new SQLException("Failed query:\n "+query+"\n SQLState= "+sqe.getSQLState()+"\n ErrorCode= "+sqe.getErrorCode()+"\n Message= "+sqe.getMessage());
1: 		}
1: 	}
0: 	public ArrayList getPrepStmtRunResults() {
1: 		return prepStmtRunResults;
1: 	}
0: 	public ArrayList getStmtRunResults() {
1: 		return stmtRunResults;
1: 	}
1: 	public int getRowsExpected(int index) {
1: 		return rowsExpected[index];
1: 	}
1: 	public ArrayList getQueries() {
1: 		return queries;
1: 	}
1: 	
1: }
============================================================================