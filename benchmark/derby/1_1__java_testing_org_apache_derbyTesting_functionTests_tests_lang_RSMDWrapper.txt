1:23e89eb: /*
1:23e89eb: 
1:23e89eb:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RSMDWrapper
1:23e89eb: 
1:23e89eb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:23e89eb:    contributor license agreements.  See the NOTICE file distributed with
1:23e89eb:    this work for additional information regarding copyright ownership.
1:23e89eb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:23e89eb:    (the "License"); you may not use this file except in compliance with
1:23e89eb:    the License.  You may obtain a copy of the License at
1:23e89eb: 
1:23e89eb:      http://www.apache.org/licenses/LICENSE-2.0
1:23e89eb: 
1:23e89eb:    Unless required by applicable law or agreed to in writing, software
1:23e89eb:    distributed under the License is distributed on an "AS IS" BASIS,
1:23e89eb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:23e89eb:    See the License for the specific language governing permissions and
1:23e89eb:    limitations under the License.
1:23e89eb: 
1:23e89eb:  */
1:23e89eb: package org.apache.derbyTesting.functionTests.tests.lang;
1:23e89eb: 
1:23e89eb: import java.lang.reflect.Method;
1:23e89eb: import java.sql.Connection;
1:23e89eb: import java.sql.DriverManager;
1:23e89eb: import java.sql.PreparedStatement;
1:23e89eb: import java.sql.ResultSet;
1:23e89eb: import java.sql.ResultSetMetaData;
1:23e89eb: import java.sql.SQLException;
1:23e89eb: import java.sql.Types;
1:23e89eb: 
1:23e89eb: import org.apache.derby.vti.StringColumnVTI;
1:23e89eb: 
1:23e89eb: /**
1:23e89eb:  * <p>
1:23e89eb:  * Table function wrapping the result set meta data for a query.
1:23e89eb:  * </p>
1:23e89eb:  */
1:23e89eb: public class RSMDWrapper extends StringColumnVTI
1:23e89eb: {
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // CONSTANTS
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     private static final String[] COLUMN_NAMES = new String[]
1:23e89eb:     {
1:23e89eb:         "getCatalogName",
1:23e89eb:         "getColumnClassName",
1:23e89eb:         "getColumnDisplaySize",
1:23e89eb:         "getColumnLabel",
1:23e89eb:         "getColumnName",
1:23e89eb:         "getColumnType",
1:23e89eb:         "getColumnTypeName",
1:23e89eb:         "getPrecision",
1:23e89eb:         "getScale",
1:23e89eb:         "getSchemaName",
1:23e89eb:         "getTableName",
1:23e89eb:         "isAutoIncrement",
1:23e89eb:         "isCaseSensitive",
1:23e89eb:         "isCurrency",
1:23e89eb:         "isDefinitelyWritable",
1:23e89eb:         "isNullable",
1:23e89eb:         "isReadOnly",
1:23e89eb:         "isSearchable",
1:23e89eb:         "isSigned",
1:23e89eb:         "isWritable",
1:23e89eb:     };
1:23e89eb: 
1:23e89eb:     private static final int[] COLUMN_TYPES = new int[]
1:23e89eb:     {
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.INTEGER,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.INTEGER,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.INTEGER,
1:23e89eb:         Types.INTEGER,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.VARCHAR,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.INTEGER,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:         Types.BOOLEAN,
1:23e89eb:     };
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // STATE
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     private Method[] _methods;
1:23e89eb:     private ResultSetMetaData _rsmd;
1:23e89eb:     private int _rowCount;
1:23e89eb:     private int _currentRow;
1:23e89eb:     private Integer _currentRowNumber;
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // TABLE FUNCTION
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     /**
1:23e89eb:      * <p>
1:23e89eb:      * This is the method which is registered as a table function.
1:23e89eb:      * </p>
1:23e89eb:      */
1:23e89eb:     public static ResultSet getResultSetMetaData( String query )
1:23e89eb:         throws Exception
1:23e89eb:     {
1:23e89eb:         return new RSMDWrapper( DriverManager.getConnection( "jdbc:default:connection" ), query );
1:23e89eb:     }
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // CONSTRUCTOR
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     public RSMDWrapper( Connection conn, String query ) throws Exception
1:23e89eb:     {
1:23e89eb:         super( COLUMN_NAMES );
1:23e89eb: 
1:23e89eb:         loadMethods();
1:23e89eb: 
1:23e89eb:         PreparedStatement ps = conn.prepareStatement( query );
1:23e89eb:         ResultSet rs = ps.executeQuery();
1:23e89eb: 
1:23e89eb:         _rsmd = rs.getMetaData();
1:23e89eb:         _rowCount = _rsmd.getColumnCount();
1:23e89eb:         _currentRow = 0;
1:23e89eb: 
1:23e89eb:         rs.close();
1:23e89eb:         ps.close();
1:23e89eb:     }
1:23e89eb:     private void loadMethods() throws Exception
1:23e89eb:     {
1:23e89eb:         int count = COLUMN_NAMES.length;
1:23e89eb: 
1:23e89eb:         _methods = new Method[ count ];
1:23e89eb: 
1:23e89eb:         for ( int i = 0; i < count; i++ )
1:23e89eb:         {
1:23e89eb:             _methods[ i ] = ResultSetMetaData.class.getMethod( COLUMN_NAMES[ i ], Integer.TYPE );
1:23e89eb:         }
1:23e89eb:     }
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // IMPLEMENTATIONS OF ABSTRACT METHODS
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     public boolean next() throws SQLException
1:23e89eb:     {
1:23e89eb:         if ( _currentRow >= _rowCount ) { return false; }
1:23e89eb: 
1:23e89eb:         _currentRow++;
1:39b3237:         _currentRowNumber = _currentRow;
1:23e89eb:         
1:23e89eb:         return true;
1:23e89eb:     }
1:23e89eb:     public void close()
1:23e89eb:     {
1:23e89eb:         _rsmd = null;
1:23e89eb:     }
1:23e89eb:     public ResultSetMetaData getMetaData() { return null; }
1:23e89eb: 
1:23e89eb:     protected  String  getRawColumn( int columnNumber ) throws SQLException
1:23e89eb:     {
1:23e89eb:         int zeroIdx = columnNumber - 1;
1:23e89eb:         Method method = _methods[ zeroIdx ];
1:23e89eb: 
1:23e89eb:         Object result = null;
1:23e89eb: 
1:23e89eb:         try {
1:23e89eb:             result = method.invoke( _rsmd, _currentRowNumber );
1:23e89eb:         }
1:23e89eb:         catch (Exception e)
1:23e89eb:         {
1:23e89eb:             e.printStackTrace();
1:23e89eb:             throw new SQLException( "Could not invoke method '" + method + "'" );
1:23e89eb:         }
1:23e89eb: 
1:23e89eb:         int columnType = COLUMN_TYPES[ zeroIdx ];
1:23e89eb:         switch( columnType )
1:23e89eb:         {
1:23e89eb:             case Types.VARCHAR: return (String) result;
1:23e89eb:             case Types.INTEGER: return ((Integer) result).toString();
1:23e89eb:             case Types.BOOLEAN: return ((Boolean) result).toString();
1:23e89eb:             default: throw new SQLException( "Unknown data type: " + columnType );
1:23e89eb:         }
1:23e89eb:     }
1:23e89eb: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         _currentRowNumber = _currentRow;
commit:23e89eb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RSMDWrapper
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.lang.reflect.Method;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: 
1: import org.apache.derby.vti.StringColumnVTI;
1: 
1: /**
1:  * <p>
1:  * Table function wrapping the result set meta data for a query.
1:  * </p>
1:  */
1: public class RSMDWrapper extends StringColumnVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final String[] COLUMN_NAMES = new String[]
1:     {
1:         "getCatalogName",
1:         "getColumnClassName",
1:         "getColumnDisplaySize",
1:         "getColumnLabel",
1:         "getColumnName",
1:         "getColumnType",
1:         "getColumnTypeName",
1:         "getPrecision",
1:         "getScale",
1:         "getSchemaName",
1:         "getTableName",
1:         "isAutoIncrement",
1:         "isCaseSensitive",
1:         "isCurrency",
1:         "isDefinitelyWritable",
1:         "isNullable",
1:         "isReadOnly",
1:         "isSearchable",
1:         "isSigned",
1:         "isWritable",
1:     };
1: 
1:     private static final int[] COLUMN_TYPES = new int[]
1:     {
1:         Types.VARCHAR,
1:         Types.VARCHAR,
1:         Types.INTEGER,
1:         Types.VARCHAR,
1:         Types.VARCHAR,
1:         Types.INTEGER,
1:         Types.VARCHAR,
1:         Types.INTEGER,
1:         Types.INTEGER,
1:         Types.VARCHAR,
1:         Types.VARCHAR,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:         Types.INTEGER,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:         Types.BOOLEAN,
1:     };
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private Method[] _methods;
1:     private ResultSetMetaData _rsmd;
1:     private int _rowCount;
1:     private int _currentRow;
1:     private Integer _currentRowNumber;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TABLE FUNCTION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * This is the method which is registered as a table function.
1:      * </p>
1:      */
1:     public static ResultSet getResultSetMetaData( String query )
1:         throws Exception
1:     {
1:         return new RSMDWrapper( DriverManager.getConnection( "jdbc:default:connection" ), query );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public RSMDWrapper( Connection conn, String query ) throws Exception
1:     {
1:         super( COLUMN_NAMES );
1: 
1:         loadMethods();
1: 
1:         PreparedStatement ps = conn.prepareStatement( query );
1:         ResultSet rs = ps.executeQuery();
1: 
1:         _rsmd = rs.getMetaData();
1:         _rowCount = _rsmd.getColumnCount();
1:         _currentRow = 0;
1: 
1:         rs.close();
1:         ps.close();
1:     }
1:     private void loadMethods() throws Exception
1:     {
1:         int count = COLUMN_NAMES.length;
1: 
1:         _methods = new Method[ count ];
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             _methods[ i ] = ResultSetMetaData.class.getMethod( COLUMN_NAMES[ i ], Integer.TYPE );
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // IMPLEMENTATIONS OF ABSTRACT METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean next() throws SQLException
1:     {
1:         if ( _currentRow >= _rowCount ) { return false; }
1: 
1:         _currentRow++;
0:         _currentRowNumber = new Integer( _currentRow );
1:         
1:         return true;
1:     }
1:     public void close()
1:     {
1:         _rsmd = null;
1:     }
1:     public ResultSetMetaData getMetaData() { return null; }
1: 
1:     protected  String  getRawColumn( int columnNumber ) throws SQLException
1:     {
1:         int zeroIdx = columnNumber - 1;
1:         Method method = _methods[ zeroIdx ];
1: 
1:         Object result = null;
1: 
1:         try {
1:             result = method.invoke( _rsmd, _currentRowNumber );
1:         }
1:         catch (Exception e)
1:         {
1:             e.printStackTrace();
1:             throw new SQLException( "Could not invoke method '" + method + "'" );
1:         }
1: 
1:         int columnType = COLUMN_TYPES[ zeroIdx ];
1:         switch( columnType )
1:         {
1:             case Types.VARCHAR: return (String) result;
1:             case Types.INTEGER: return ((Integer) result).toString();
1:             case Types.BOOLEAN: return ((Boolean) result).toString();
1:             default: throw new SQLException( "Unknown data type: " + columnType );
1:         }
1:     }
1: }
============================================================================