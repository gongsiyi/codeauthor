1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
4:eac0369: /**
1:eac0369:  *	This class  describes compiled constants that are passed into
1:eac0369:  *	Updatable VTIResultSets.
5:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class UpdatableVTIConstantAction extends WriteCursorConstantAction
2:eac0369: {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. But it is NOT used
1:eac0369:  	**	across either major or minor releases.  It is only
1:eac0369: 	** 	written persistently in stored prepared statements, 
1:eac0369: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1:eac0369: 	**	ITS read/writeExternal.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	public int[]	changedColumnIds;
1:eac0369: 
1:eac0369:     public int statementType;
1:eac0369:     
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	UpdatableVTIConstantAction() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for an updatable VTI statement.
1:eac0369: 	 *
1:09bee7d:      * @param statementType             Statement type, cf.
1:09bee7d:      * {@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
1:eac0369: 	 * @param deferred					Whether or not to do operation in deferred mode
1:eac0369:      * @param changedColumnIds Array of ids of changed columns
1:eac0369: 	 *
1:eac0369: 	 */
1:ca6ed17:     UpdatableVTIConstantAction(int statementType,
1:09bee7d:                                boolean deferred,
1:09bee7d:                                int[] changedColumnIds)
1:eac0369: 	{
1:eac0369: 		super(0, 
1:eac0369: 			  null,
1:eac0369: 			  null, 
1:eac0369: 			  null, 
1:eac0369: 			  null,
1:eac0369: 			  null, 
1:eac0369: 			  deferred	, 
1:eac0369: 			  null,
1:eac0369: 			  null,
1:eac0369: 			  0,
1:eac0369: 			  null,	
1:eac0369: 			  null,
1:eac0369: 			  null,
1:eac0369: 			  null,
1:eac0369: 			  null,
1:eac0369: 			  // singleRowSource, irrelevant
1:01632c2: 			  false,
1:01632c2: 			  false // not under a MERGE statement
1:eac0369: 			  );
1:eac0369:         this.statementType = statementType;
1:eac0369:         this.changedColumnIds = changedColumnIds;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.UPDATABLE_VTI_CONSTANT_ACTION_V01_ID; }
1:eac0369: 
1:eac0369: 	// CLASS METHODS
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1: 			  false,
1: 			  false // not under a MERGE statement
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:      * @param statementType             Statement type, cf.
1:      * {@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
1:                                boolean deferred,
1:                                int[] changedColumnIds)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1:     UpdatableVTIConstantAction(int statementType,
commit:959fef2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9cd47dc
/////////////////////////////////////////////////////////////////////////
commit:b771bbc
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: 
0: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.io.Serializable;
1: 
0: import java.sql.PreparedStatement;
0: import java.sql.SQLException;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  *	This class  describes compiled constants that are passed into
1:  *	Updatable VTIResultSets.
1:  *
0:  *	@author Jerry Brenner
1:  */
1: 
1: public class UpdatableVTIConstantAction extends WriteCursorConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. But it is NOT used
1:  	**	across either major or minor releases.  It is only
1: 	** 	written persistently in stored prepared statements, 
1: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1: 	**	ITS read/writeExternal.
1: 	**
1: 	********************************************************/
1: 
1: 	public int[]	changedColumnIds;
1: 
1:     public int statementType;
1:     
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1:     public	UpdatableVTIConstantAction() { super(); }
1: 
1: 	/**
1: 	 *	Make the ConstantAction for an updatable VTI statement.
1: 	 *
1: 	 * @param deferred					Whether or not to do operation in deferred mode
1:      * @param changedColumnIds Array of ids of changed columns
1: 	 *
1: 	 */
0: 	public	UpdatableVTIConstantAction( int statementType,
0:                                         boolean deferred,
0:                                         int[] changedColumnIds)
1: 	{
1: 		super(0, 
1: 			  null,
1: 			  null, 
1: 			  null, 
1: 			  null,
1: 			  null, 
1: 			  deferred	, 
1: 			  null,
1: 			  null,
1: 			  0,
1: 			  null,	
1: 			  null,
0: 			  (ExecRow)null, // never need to pass in a heap row
1: 			  null,
1: 			  null,
1: 			  null,
1: 			  // singleRowSource, irrelevant
0: 			  false
1: 			  );
1:         this.statementType = statementType;
1:         this.changedColumnIds = changedColumnIds;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 	/**
0: 	 * Does this constant action modify the passed in table
0: 	 * uuid?  By modify we mean add or drop things tied to
0: 	 * this table (e.g. index, trigger, constraint).  Things
0: 	 * like views or spses that reference this table don't
0: 	 * count.
1: 	 *
0: 	 * @param tableId on error
1: 	 *
1: 	 */
0: 	public boolean modifiesTableId(UUID tableId)
1: 	{
0: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.UPDATABLE_VTI_CONSTANT_ACTION_V01_ID; }
1: 
1: 
1: 	/**
0: 	 *	NOP routine. The work is done in subclass.
1: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
0: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 		throws StandardException { }
1: 
1: 	// CLASS METHODS
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: 
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.io.Serializable;
0: 
0: import java.sql.PreparedStatement;
0: import java.sql.SQLException;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  *	This class  describes compiled constants that are passed into
0:  *	Updatable VTIResultSets.
0:  *
0:  *	@author Jerry Brenner
0:  */
0: 
0: public class UpdatableVTIConstantAction extends WriteCursorConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. But it is NOT used
0:  	**	across either major or minor releases.  It is only
0: 	** 	written persistently in stored prepared statements, 
0: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
0: 	**	ITS read/writeExternal.
0: 	**
0: 	********************************************************/
0: 
0: 	public int[]	changedColumnIds;
0: 
0:     public int statementType;
0:     
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	UpdatableVTIConstantAction() { super(); }
0: 
0: 	/**
0: 	 *	Make the ConstantAction for an updatable VTI statement.
0: 	 *
0: 	 * @param deferred					Whether or not to do operation in deferred mode
0:      * @param changedColumnIds Array of ids of changed columns
0: 	 *
0: 	 */
0: 	public	UpdatableVTIConstantAction( int statementType,
0:                                         boolean deferred,
0:                                         int[] changedColumnIds)
0: 	{
0: 		super(0, 
0: 			  null,
0: 			  null, 
0: 			  null, 
0: 			  null,
0: 			  null, 
0: 			  deferred	, 
0: 			  null,
0: 			  null,
0: 			  0,
0: 			  null,	
0: 			  null,
0: 			  (ExecRow)null, // never need to pass in a heap row
0: 			  null,
0: 			  null,
0: 			  null,
0: 			  // singleRowSource, irrelevant
0: 			  false
0: 			  );
0:         this.statementType = statementType;
0:         this.changedColumnIds = changedColumnIds;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 	/**
0: 	 * Does this constant action modify the passed in table
0: 	 * uuid?  By modify we mean add or drop things tied to
0: 	 * this table (e.g. index, trigger, constraint).  Things
0: 	 * like views or spses that reference this table don't
0: 	 * count.
0: 	 *
0: 	 * @param tableId on error
0: 	 *
0: 	 */
0: 	public boolean modifiesTableId(UUID tableId)
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.UPDATABLE_VTI_CONSTANT_ACTION_V01_ID; }
0: 
0: 
0: 	/**
0: 	 *	NOP routine. The work is done in subclass.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 		throws StandardException { }
0: 
0: 	// CLASS METHODS
0: 
0: }
============================================================================