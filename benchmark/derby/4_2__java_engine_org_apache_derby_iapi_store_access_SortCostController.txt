1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.SortCostController
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The SortCostController interface provides methods that an access client
1:eac0369: (most likely the system optimizer) can use to get sorter's estimated cost of
1:eac0369: various operations on the SortController.
1:eac0369: <p>
1:eac0369: @see TransactionController#openSortCost
1:eac0369: @see TransactionController#createSort
1:eac0369: @see RowCountable
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: public interface SortCostController
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Close the controller.
1:eac0369:      * <p>
1:eac0369:      * Close the open controller.  This method always succeeds, and never 
1:eac0369:      * throws any exceptions. Callers must not use the StoreCostController 
1:eac0369:      * after closing it; they are strongly advised to clear
1:eac0369:      * out the StoreCostController reference after closing.
1:eac0369:      * <p>
1:eac0369:      **/
1:eac0369:     void close();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Calculate the cost of a sort.
1:eac0369:      * <p>
1:eac0369:      * The cost of a sort includes the time spent in the sorter inserting
1:eac0369:      * the rows into the sort, and the time spent in the sorter returning the
1:eac0369:      * rows.  Note that it does not include the cost of scanning the rows from
1:eac0369:      * the source table, for insert into the sort.
1:eac0369:      * <p>
1:eac0369:      * Arguments to getSortCost(), should be the same as those to be passed to
1:eac0369:      * TransactionController.createSort().
1:eac0369:      *
1:eac0369:      * @param template        A row which is prototypical for the sort.  All
1:eac0369:      *                        rows inserted into the sort controller must have 
1:eac0369: 	 *                        exactly the same number of columns as the 
1:eac0369:      *                        template row.  Every column in an inserted row
1:eac0369:      *                        must have the same type as the corresponding
1:eac0369:      *                        column in the template.
1:eac0369:      *
1:eac0369:      * @param columnOrdering  An array which specifies which columns 
1:eac0369:      *                        participate in ordering - see interface 
1:eac0369:      *                        ColumnOrdering for details.  The column
1:eac0369:      *                        referenced in the 0th columnOrdering object is
1:eac0369:      *                        compared first, then the 1st, etc.
1:eac0369:      *
1:eac0369:      * @param alreadyInOrder  Indicates that the rows inserted into the sort
1:eac0369:      *                        controller will already be in order.  This is used
1:eac0369: 	 *                        to perform aggregation only.
1:eac0369:      * 
1:eac0369:      * @param estimatedInputRows   The number of rows that the caller estimates
1:eac0369:      *                        will be inserted into the sort.  This number must
1:dbed020:      *                        be &gt;= 0.
1:eac0369:      *
1:eac0369:      * @param estimatedExportRows   The number of rows that the caller estimates
1:eac0369:      *                        will be exported by the sorter.  For instance if
1:eac0369:      *                        the sort is doing duplicate elimination and all
1:eac0369:      *                        rows are expected to be duplicates then the 
1:eac0369:      *                        estimatedExportRows would be 1.  If no duplicate
1:eac0369:      *                        eliminate is to be done then estimatedExportRows 
1:eac0369:      *                        would be the same as estimatedInputRows.  This 
1:dbed020:      *                        number must be &gt;= 0.
1:eac0369:      *
1:eac0369:      * @param estimatedRowSize The estimated average row size of the rows 
1:eac0369:      *                         being sorted.  This is the client portion of the 
1:eac0369:      *                         rowsize, it should not attempt to calculate 
1:eac0369:      *                         Store's overhead.  -1 indicates that the caller
1:eac0369:      *                         has no idea (and the sorter will use 100 bytes
1:eac0369:      *                         in that case.  Used by the sort to make good 
1:eac0369:      *                         choices about in-memory vs. external sorting, 
1:eac0369:      *                         and to size merge runs.  The client is not
1:eac0369:      *                         expected to estimate the per column/ per row 
1:eac0369:      *                         overhead of raw store, just to make a guess
1:eac0369:      *                         about the storage associated with each row 
1:eac0369:      *                         (ie. reasonable estimates for some 
1:eac0369:      *                         implementations would be 4 for int, 8 for long,
1:eac0369:      *                         102 for char(100), 202 for varchar(200), a
1:eac0369:      *                         number out of hat for user types, ...).
1:eac0369:      * 
1:eac0369:      * @return The cost of the sort.
1:eac0369:      *
1:eac0369:      * @exception  StandardException  Standard exception policy.
1:eac0369:      *
1:eac0369: 	**/
1:eac0369: 
1:eac0369: 	double getSortCost(
1:eac0369:     DataValueDescriptor[]   template,
1:eac0369:     ColumnOrdering          columnOrdering[],
1:eac0369:     boolean                 alreadyInOrder,
1:eac0369:     long                    estimatedInputRows,
1:eac0369:     long                    estimatedExportRows,
1:eac0369:     int                     estimatedRowSize)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      *                        be &gt;= 0.
/////////////////////////////////////////////////////////////////////////
1:      *                        number must be &gt;= 0.
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.SortCostController
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1: 
1: The SortCostController interface provides methods that an access client
1: (most likely the system optimizer) can use to get sorter's estimated cost of
1: various operations on the SortController.
1: <p>
1: @see TransactionController#openSortCost
1: @see TransactionController#createSort
1: @see RowCountable
1: 
1: **/
1: 
1: import java.util.Properties;
1: 
1: public interface SortCostController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**
1:      * Close the controller.
1:      * <p>
1:      * Close the open controller.  This method always succeeds, and never 
1:      * throws any exceptions. Callers must not use the StoreCostController 
1:      * after closing it; they are strongly advised to clear
1:      * out the StoreCostController reference after closing.
1:      * <p>
1:      **/
1:     void close();
1: 
1: 
1: 	/**
1:      * Calculate the cost of a sort.
1:      * <p>
1:      * The cost of a sort includes the time spent in the sorter inserting
1:      * the rows into the sort, and the time spent in the sorter returning the
1:      * rows.  Note that it does not include the cost of scanning the rows from
1:      * the source table, for insert into the sort.
1:      * <p>
1:      * Arguments to getSortCost(), should be the same as those to be passed to
1:      * TransactionController.createSort().
1:      *
1:      * @param template        A row which is prototypical for the sort.  All
1:      *                        rows inserted into the sort controller must have 
1: 	 *                        exactly the same number of columns as the 
1:      *                        template row.  Every column in an inserted row
1:      *                        must have the same type as the corresponding
1:      *                        column in the template.
1:      *
1:      * @param columnOrdering  An array which specifies which columns 
1:      *                        participate in ordering - see interface 
1:      *                        ColumnOrdering for details.  The column
1:      *                        referenced in the 0th columnOrdering object is
1:      *                        compared first, then the 1st, etc.
1:      *
1:      * @param alreadyInOrder  Indicates that the rows inserted into the sort
1:      *                        controller will already be in order.  This is used
1: 	 *                        to perform aggregation only.
1:      * 
1:      * @param estimatedInputRows   The number of rows that the caller estimates
1:      *                        will be inserted into the sort.  This number must
0:      *                        be >= 0.
1:      *
1:      * @param estimatedExportRows   The number of rows that the caller estimates
1:      *                        will be exported by the sorter.  For instance if
1:      *                        the sort is doing duplicate elimination and all
1:      *                        rows are expected to be duplicates then the 
1:      *                        estimatedExportRows would be 1.  If no duplicate
1:      *                        eliminate is to be done then estimatedExportRows 
1:      *                        would be the same as estimatedInputRows.  This 
0:      *                        number must be >= 0.
1:      *
1:      * @param estimatedRowSize The estimated average row size of the rows 
1:      *                         being sorted.  This is the client portion of the 
1:      *                         rowsize, it should not attempt to calculate 
1:      *                         Store's overhead.  -1 indicates that the caller
1:      *                         has no idea (and the sorter will use 100 bytes
1:      *                         in that case.  Used by the sort to make good 
1:      *                         choices about in-memory vs. external sorting, 
1:      *                         and to size merge runs.  The client is not
1:      *                         expected to estimate the per column/ per row 
1:      *                         overhead of raw store, just to make a guess
1:      *                         about the storage associated with each row 
1:      *                         (ie. reasonable estimates for some 
1:      *                         implementations would be 4 for int, 8 for long,
1:      *                         102 for char(100), 202 for varchar(200), a
1:      *                         number out of hat for user types, ...).
1:      * 
1:      * @return The cost of the sort.
1:      *
1:      * @exception  StandardException  Standard exception policy.
1:      *
1: 	**/
1: 
1: 	double getSortCost(
1:     DataValueDescriptor[]   template,
1:     ColumnOrdering          columnOrdering[],
1:     boolean                 alreadyInOrder,
1:     long                    estimatedInputRows,
1:     long                    estimatedExportRows,
1:     int                     estimatedRowSize)
1:         throws StandardException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: /**
0: 
0: The SortCostController interface provides methods that an access client
0: (most likely the system optimizer) can use to get sorter's estimated cost of
0: various operations on the SortController.
0: <p>
0: @see TransactionController#openSortCost
0: @see TransactionController#createSort
0: @see RowCountable
0: 
0: **/
0: 
0: import java.util.Properties;
0: 
0: public interface SortCostController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**
0:      * Close the controller.
0:      * <p>
0:      * Close the open controller.  This method always succeeds, and never 
0:      * throws any exceptions. Callers must not use the StoreCostController 
0:      * after closing it; they are strongly advised to clear
0:      * out the StoreCostController reference after closing.
0:      * <p>
0:      **/
0:     void close();
0: 
0: 
0: 	/**
0:      * Calculate the cost of a sort.
0:      * <p>
0:      * The cost of a sort includes the time spent in the sorter inserting
0:      * the rows into the sort, and the time spent in the sorter returning the
0:      * rows.  Note that it does not include the cost of scanning the rows from
0:      * the source table, for insert into the sort.
0:      * <p>
0:      * Arguments to getSortCost(), should be the same as those to be passed to
0:      * TransactionController.createSort().
0:      *
0:      * @param template        A row which is prototypical for the sort.  All
0:      *                        rows inserted into the sort controller must have 
0: 	 *                        exactly the same number of columns as the 
0:      *                        template row.  Every column in an inserted row
0:      *                        must have the same type as the corresponding
0:      *                        column in the template.
0:      *
0:      * @param columnOrdering  An array which specifies which columns 
0:      *                        participate in ordering - see interface 
0:      *                        ColumnOrdering for details.  The column
0:      *                        referenced in the 0th columnOrdering object is
0:      *                        compared first, then the 1st, etc.
0:      *
0:      * @param alreadyInOrder  Indicates that the rows inserted into the sort
0:      *                        controller will already be in order.  This is used
0: 	 *                        to perform aggregation only.
0:      * 
0:      * @param estimatedInputRows   The number of rows that the caller estimates
0:      *                        will be inserted into the sort.  This number must
0:      *                        be >= 0.
0:      *
0:      * @param estimatedExportRows   The number of rows that the caller estimates
0:      *                        will be exported by the sorter.  For instance if
0:      *                        the sort is doing duplicate elimination and all
0:      *                        rows are expected to be duplicates then the 
0:      *                        estimatedExportRows would be 1.  If no duplicate
0:      *                        eliminate is to be done then estimatedExportRows 
0:      *                        would be the same as estimatedInputRows.  This 
0:      *                        number must be >= 0.
0:      *
0:      * @param estimatedRowSize The estimated average row size of the rows 
0:      *                         being sorted.  This is the client portion of the 
0:      *                         rowsize, it should not attempt to calculate 
0:      *                         Store's overhead.  -1 indicates that the caller
0:      *                         has no idea (and the sorter will use 100 bytes
0:      *                         in that case.  Used by the sort to make good 
0:      *                         choices about in-memory vs. external sorting, 
0:      *                         and to size merge runs.  The client is not
0:      *                         expected to estimate the per column/ per row 
0:      *                         overhead of raw store, just to make a guess
0:      *                         about the storage associated with each row 
0:      *                         (ie. reasonable estimates for some 
0:      *                         implementations would be 4 for int, 8 for long,
0:      *                         102 for char(100), 202 for varchar(200), a
0:      *                         number out of hat for user types, ...).
0:      * 
0:      * @return The cost of the sort.
0:      *
0:      * @exception  StandardException  Standard exception policy.
0:      *
0: 	**/
0: 
0: 	double getSortCost(
0:     DataValueDescriptor[]   template,
0:     ColumnOrdering          columnOrdering[],
0:     boolean                 alreadyInOrder,
0:     long                    estimatedInputRows,
0:     long                    estimatedExportRows,
0:     int                     estimatedRowSize)
0:         throws StandardException;
0: 
0: }
============================================================================