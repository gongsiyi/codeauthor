1:9c14132: /*
2:9c14132:  
1:9c14132:    Derby - Class CallableStatementTestSetup
1:9c14132:  
1:6e3dbab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:    contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:    this work for additional information regarding copyright ownership.
1:6e3dbab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:    (the "License"); you may not use this file except in compliance with
1:6e3dbab:    the License.  You may obtain a copy of the License at
1:9c14132:  
1:9c14132:       http://www.apache.org/licenses/LICENSE-2.0
1:9c14132:  
1:9c14132:    Unless required by applicable law or agreed to in writing, software
1:9c14132:    distributed under the License is distributed on an "AS IS" BASIS,
1:9c14132:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9c14132:    See the License for the specific language governing permissions and
1:9c14132:    limitations under the License.
1:9c14132:  
1:9c14132:  */
1:9c14132: 
1:9c14132: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:9c14132: 
1:9c14132: import junit.framework.Assert;
1:9c14132: import junit.framework.Test;
1:9c14132: import junit.extensions.TestSetup;
1:9c14132: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:13e9e78: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:9c14132: 
1:9c14132: import java.io.UnsupportedEncodingException;
1:9c14132: import java.sql.*;
1:9c14132: 
1:9c14132: /**
1:9c14132:  * Create the necessary tables, function and procedures for running the 
1:9c14132:  * CallableStatement tests under JDK 1.6.
1:9c14132:  * Java methods used as functions and procedures are also implemented here,
1:9c14132:  * along with helper methods that returns CallableStatements for the various
1:9c14132:  * functions and procedures.
1:9c14132:  */
1:9c14132: public class CallableStatementTestSetup
1:13e9e78:     extends BaseJDBCTestSetup {
1:9c14132: 
1:9c14132:     private static final String SOURCECLASS = "org.apache.derbyTesting." +
1:9c14132:         "functionTests.tests.jdbc4.CallableStatementTestSetup.";
1:9c14132:     
1:9c14132:     /** List of tables to drop on tear-down */
1:9c14132:     private static final String[] TABLE_DROPS = new String[] {
1:9c14132:         "CSDATA"};
1:9c14132:     /** List of functions to drop on tear-down. */
1:9c14132:     private static final String[] FUNCTION_DROPS = new String[] {
1:9c14132:         "INT_TO_STRING", "GET_BINARY_DB", "GET_VARCHAR_DB"};
1:9c14132:     /** List of procedures to drop on tear-down. */
1:9c14132:     private static final String[] PROCEDURE_DROPS = new String[] {
1:9c14132:         "GET_BINARY_DIRECT"};
1:9c14132: 
1:9c14132:     /** Id for row with byte representation of a string. */
1:9c14132:     public static final int STRING_BYTES_ID = 1;
1:9c14132:     /** 
1:9c14132:      * String converted to bytes in UTF-16BE representation. 
1:9c14132:      * Note that the charset used matters, and for Derby it must be UTF-16BE.
1:9c14132:      */
1:9c14132:     public static final String STRING_BYTES =
1:9c14132:         "This is a string, converted to bytes and inserted into the database";
1:9c14132: 
1:9c14132:     /** Id for row with SQL NULL values. */
1:9c14132:     public static final int SQL_NULL_ID = 2;
1:9c14132:     
1:9c14132:     /**
1:9c14132:      * Create a new test setup for the CallableStatementTest.
1:9c14132:      *
1:9c14132:      * @param test the test/suite to provide setup for.
1:9c14132:      */
1:9c14132:     public CallableStatementTestSetup(Test test) {
1:9c14132:         super(test);
1:9c14132:     }
1:9c14132: 
1:13e9e78:     protected void setUp()
2:9c14132:         throws SQLException {
1:13e9e78:         Connection con = getConnection();
1:9c14132:         // Create the tables, functions and procedures we need.
1:9c14132:         Statement stmt = con.createStatement();
1:9c14132:         // Create table CSDATA and populate
1:9c14132:         stmt.execute("CREATE TABLE CSDATA (ID INT PRIMARY KEY," +
1:9c14132:                 "BINARYDATA VARCHAR(256) FOR BIT DATA, " +
1:9c14132:                 "CHARDATA VARCHAR(256))");
1:9c14132:         PreparedStatement pStmt = 
1:9c14132:             con.prepareStatement("INSERT INTO CSDATA VALUES (?,?,?)");
1:9c14132:         pStmt.setInt(1, STRING_BYTES_ID);
1:9c14132:         try {
1:9c14132:             pStmt.setBytes(2, STRING_BYTES.getBytes("UTF-16BE"));
1:9c14132:         } catch (UnsupportedEncodingException uee) {
1:9c14132:            SQLException sqle = new SQLException(uee.getMessage());
1:9c14132:            sqle.initCause(uee);
1:9c14132:            throw sqle;
1:9c14132:         }
1:9c14132:         pStmt.setString(3, STRING_BYTES);
1:9c14132:         pStmt.execute();
1:9c14132:         pStmt.setInt(1, SQL_NULL_ID);
1:9c14132:         pStmt.setNull(2, Types.VARBINARY);
1:9c14132:         pStmt.setNull(3, Types.VARCHAR);
1:9c14132:         pStmt.execute();
1:9c14132:         pStmt.close();
1:9c14132: 
1:9c14132:         // Create function INT_TO_STRING
1:9c14132:         stmt.execute("CREATE FUNCTION INT_TO_STRING(INTNUM INT) " +
1:9c14132:                 "RETURNS VARCHAR(10) " +
1:9c14132:                 "PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA " +
1:9c14132:                 "EXTERNAL NAME 'java.lang.Integer.toString'");
1:9c14132:         // Create procedure GET_BINARY_DIRECT
1:9c14132:         stmt.execute("CREATE PROCEDURE GET_BINARY_DIRECT(IN INSTRING " +
1:9c14132:                 "VARCHAR(40), OUT OUTBYTES VARCHAR(160) FOR BIT DATA) " +
1:9c14132:                 "DYNAMIC RESULT SETS 0 " +
1:9c14132:                 "PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA " +
1:9c14132:                 "EXTERNAL NAME '" + SOURCECLASS + "getBinaryDirect'");
1:9c14132:         // Create function GET_BINARY_DB
1:9c14132:         stmt.execute("CREATE FUNCTION GET_BINARY_DB(ID INT) " +
1:9c14132:                 "RETURNS VARCHAR(256) FOR BIT DATA " +
1:9c14132:                 "PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA " +
1:9c14132:                 "EXTERNAL NAME '" + SOURCECLASS + "getBinaryFromDb'");
1:9c14132:         // Create function GET_VARCHAR_DB
1:9c14132:         stmt.execute("CREATE FUNCTION GET_VARCHAR_DB(ID INT) " +
1:9c14132:                 "RETURNS VARCHAR(256) " +
1:9c14132:                 "PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA " +
1:9c14132:                 "EXTERNAL NAME '" + SOURCECLASS + "getVarcharFromDb'");
1:13e9e78:         stmt.close();
1:9c14132:     }
1:9c14132: 
1:13e9e78:     protected void tearDown()
1:13e9e78:         throws Exception {
1:13e9e78:         Connection con = getConnection();
1:9c14132:         Statement stmt = con.createStatement();
1:9c14132:         // Drop functions
1:9c14132:         for (String function : FUNCTION_DROPS) {
1:9c14132:             stmt.execute("DROP FUNCTION "  + function);
1:9c14132:         }
1:9c14132:         // Drop procedures
1:9c14132:         for (String procedure : PROCEDURE_DROPS) {
1:9c14132:             stmt.execute("DROP PROCEDURE "  + procedure);
1:9c14132:         }
1:9c14132:         // Drop tables
1:9c14132:         for (String table : TABLE_DROPS) {
1:9c14132:             stmt.execute("DROP TABLE "  + table);
1:9c14132:         }
1:9c14132:         stmt.close();
1:13e9e78:         super.tearDown();
1:9c14132:     }
1:9c14132: 
1:9c14132:     // Methods for getting CallableStatements
1:9c14132: 
1:9c14132:     /**
1:9c14132:      * Return function converting an integer to a string.
1:9c14132:      * Parameter 1: output - String/VARCHAR
1:9c14132:      * Parameter 2: input  - int/INT
1:9c14132:      */
1:9c14132:     public static CallableStatement getIntToStringFunction(Connection con)
1:9c14132:         throws SQLException {
1:9c14132:         Assert.assertNotNull("Connection cannot be null", con);
1:9c14132:         CallableStatement cStmt = con.prepareCall("?= CALL INT_TO_STRING(?)");
1:9c14132:         cStmt.registerOutParameter(1, Types.VARCHAR);
1:9c14132:         return cStmt;
1:9c14132:     }
1:9c14132:     
1:9c14132:     /**
1:9c14132:      * Return statement for calling procedure that converts a string to a 
1:9c14132:      * byte array (UTF-16BE charset).
1:9c14132:      * Parameter 1: input  - String/VARCHAR(40)
1:9c14132:      * Parameter 2: output - byte[]/VARCHAR(160) FOR BIT DATA
1:9c14132:      */
1:9c14132:     public static CallableStatement getBinaryDirectProcedure(Connection con)
1:9c14132:         throws SQLException {
1:9c14132:         Assert.assertNotNull("Connection cannot be null", con);
1:9c14132:         CallableStatement cStmt = 
1:9c14132:             con.prepareCall("CALL GET_BINARY_DIRECT(?,?)");
1:9c14132:         cStmt.registerOutParameter(2, Types.VARBINARY);
1:9c14132:         return cStmt;
1:9c14132:     }
1:9c14132: 
1:9c14132:     /**
1:9c14132:      * Return statement for calling getBinaryFromDb function.
1:9c14132:      * Parameter 1: return/output - byte[]/VARCHAR FOR BINARY - data from db
1:9c14132:      * Parameter 2: input         - int/INT - id for row to fetch
1:9c14132:      *
1:9c14132:      * @param con database connection.
1:9c14132:      * @return statement for executing getBinaryFromDb function.
1:9c14132:      */
1:9c14132:     public static CallableStatement getBinaryFromDbFunction(Connection con)
1:9c14132:         throws SQLException {
1:9c14132:         Assert.assertNotNull("Connection cannot be null", con);
1:9c14132:         CallableStatement cStmt =
1:9c14132:             con.prepareCall("?= CALL GET_BINARY_DB(?)");
1:9c14132:         cStmt.registerOutParameter(1, Types.VARBINARY);
1:9c14132:         return cStmt;
1:9c14132:     }
1:9c14132: 
1:9c14132:     /**
1:9c14132:      * Return statement for calling getVarcharFromDb function.
1:9c14132:      * Parameter 1: return/output - String/VARCHAR - data from db
1:9c14132:      * Parameter 2: input         - int/INT - id for row to fetch
1:9c14132:      *
1:9c14132:      * @param con database connection.
1:9c14132:      * @return statement for executing getVarcharFromDb function.
1:9c14132:      */
1:9c14132:     public static CallableStatement getVarcharFromDbFunction(Connection con)
1:9c14132:         throws SQLException {
1:9c14132:         Assert.assertNotNull("Connection cannot be null", con);
1:9c14132:         CallableStatement cStmt =
1:9c14132:             con.prepareCall("?= CALL GET_VARCHAR_DB(?)");
1:9c14132:         cStmt.registerOutParameter(1, Types.VARCHAR);
1:9c14132:         return cStmt;
1:9c14132:     }
1:9c14132: 
1:9c14132:     // Methods used as functions and procedures in the db
1:9c14132:     
1:9c14132:     /**
1:9c14132:      * Procedure creating a byte representation of a string.
1:9c14132:      *
1:9c14132:      * @param inputString a string.
1:9c14132:      * @param outputByte string returned as UTF-16BE byte representation.
1:9c14132:      */
1:9c14132:     public static void getBinaryDirect(String inputString, byte[][] outputByte) {
1:9c14132:         try {
1:9c14132:             outputByte[0] = inputString.getBytes("UTF-16BE");
1:9c14132:         } catch (java.io.UnsupportedEncodingException uee) {
1:9c14132:             outputByte[0] = new byte[0];
1:9c14132:         }
1:9c14132:     }
1:9c14132:     
1:9c14132:     /**
1:9c14132:      * Function fetching binary data from the database.
1:9c14132:      *
1:9c14132:      * @param id id of row to fetch.
1:9c14132:      * @return a byte array.
1:9c14132:      */
1:9c14132:     public static byte[] getBinaryFromDb(int id) 
1:9c14132:         throws Exception {
1:9c14132:         Connection con = DriverManager.getConnection("jdbc:default:connection");
1:9c14132:         Statement stmt = con.createStatement();
1:9c14132:         ResultSet rs = stmt.executeQuery("SELECT BINARYDATA FROM CSDATA " +
1:9c14132:                 "WHERE ID = " + id);
1:9c14132:         rs.next();
1:9c14132:         byte[] bytes = rs.getBytes(1);
1:9c14132:         rs.close();
1:9c14132:         stmt.close();
2:9c14132:         con.close();
1:9c14132:         return bytes;
1:9c14132:     }
1:9c14132:     
1:9c14132:     /**
1:9c14132:      * Function fetching character data from the database.
1:9c14132:      * 
1:9c14132:      * @param id id of row to fetch.
1:9c14132:      * @return a string.
1:9c14132:      */
1:9c14132:     public static String getVarcharFromDb(int id) 
1:9c14132:         throws Exception {
1:9c14132:         Connection con = DriverManager.getConnection("jdbc:default:connection");
1:9c14132:         Statement stmt = con.createStatement();
1:9c14132:         ResultSet rs = stmt.executeQuery("SELECT CHARDATA FROM CSDATA " +
1:9c14132:                 "WHERE ID = " + id);
1:9c14132:         rs.next();
1:9c14132:         String chardata = rs.getString(1);
1:9c14132:         rs.close();
1:9c14132:         stmt.close();
1:9c14132:         con.close();
1:9c14132:         return chardata;
1:9c14132:     }
1:9c14132: 
1:9c14132: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     extends BaseJDBCTestSetup {
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp()
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         stmt.close();
1:     protected void tearDown()
1:         throws Exception {
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:9c14132
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class CallableStatementTestSetup
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import junit.framework.Assert;
1: import junit.framework.Test;
1: import junit.extensions.TestSetup;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.sql.*;
1: 
1: /**
1:  * Create the necessary tables, function and procedures for running the 
1:  * CallableStatement tests under JDK 1.6.
1:  * Java methods used as functions and procedures are also implemented here,
1:  * along with helper methods that returns CallableStatements for the various
1:  * functions and procedures.
1:  */
1: public class CallableStatementTestSetup
0:     extends TestSetup {
1: 
1:     private static final String SOURCECLASS = "org.apache.derbyTesting." +
1:         "functionTests.tests.jdbc4.CallableStatementTestSetup.";
1:     
1:     /** List of tables to drop on tear-down */
1:     private static final String[] TABLE_DROPS = new String[] {
1:         "CSDATA"};
1:     /** List of functions to drop on tear-down. */
1:     private static final String[] FUNCTION_DROPS = new String[] {
1:         "INT_TO_STRING", "GET_BINARY_DB", "GET_VARCHAR_DB"};
1:     /** List of procedures to drop on tear-down. */
1:     private static final String[] PROCEDURE_DROPS = new String[] {
1:         "GET_BINARY_DIRECT"};
1: 
1:     /** Id for row with byte representation of a string. */
1:     public static final int STRING_BYTES_ID = 1;
1:     /** 
1:      * String converted to bytes in UTF-16BE representation. 
1:      * Note that the charset used matters, and for Derby it must be UTF-16BE.
1:      */
1:     public static final String STRING_BYTES =
1:         "This is a string, converted to bytes and inserted into the database";
1: 
1:     /** Id for row with SQL NULL values. */
1:     public static final int SQL_NULL_ID = 2;
1:     
1:     /**
1:      * Create a new test setup for the CallableStatementTest.
1:      *
1:      * @param test the test/suite to provide setup for.
1:      */
1:     public CallableStatementTestSetup(Test test) {
1:         super(test);
1:     }
1: 
0:     public void setUp()
1:         throws SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         // Create the tables, functions and procedures we need.
1:         Statement stmt = con.createStatement();
1:         // Create table CSDATA and populate
1:         stmt.execute("CREATE TABLE CSDATA (ID INT PRIMARY KEY," +
1:                 "BINARYDATA VARCHAR(256) FOR BIT DATA, " +
1:                 "CHARDATA VARCHAR(256))");
1:         PreparedStatement pStmt = 
1:             con.prepareStatement("INSERT INTO CSDATA VALUES (?,?,?)");
1:         pStmt.setInt(1, STRING_BYTES_ID);
1:         try {
1:             pStmt.setBytes(2, STRING_BYTES.getBytes("UTF-16BE"));
1:         } catch (UnsupportedEncodingException uee) {
1:            SQLException sqle = new SQLException(uee.getMessage());
1:            sqle.initCause(uee);
1:            throw sqle;
1:         }
1:         pStmt.setString(3, STRING_BYTES);
1:         pStmt.execute();
1:         pStmt.setInt(1, SQL_NULL_ID);
1:         pStmt.setNull(2, Types.VARBINARY);
1:         pStmt.setNull(3, Types.VARCHAR);
1:         pStmt.execute();
1:         pStmt.close();
1: 
1:         // Create function INT_TO_STRING
1:         stmt.execute("CREATE FUNCTION INT_TO_STRING(INTNUM INT) " +
1:                 "RETURNS VARCHAR(10) " +
1:                 "PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA " +
1:                 "EXTERNAL NAME 'java.lang.Integer.toString'");
1:         // Create procedure GET_BINARY_DIRECT
1:         stmt.execute("CREATE PROCEDURE GET_BINARY_DIRECT(IN INSTRING " +
1:                 "VARCHAR(40), OUT OUTBYTES VARCHAR(160) FOR BIT DATA) " +
1:                 "DYNAMIC RESULT SETS 0 " +
1:                 "PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA " +
1:                 "EXTERNAL NAME '" + SOURCECLASS + "getBinaryDirect'");
1:         // Create function GET_BINARY_DB
1:         stmt.execute("CREATE FUNCTION GET_BINARY_DB(ID INT) " +
1:                 "RETURNS VARCHAR(256) FOR BIT DATA " +
1:                 "PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA " +
1:                 "EXTERNAL NAME '" + SOURCECLASS + "getBinaryFromDb'");
1:         // Create function GET_VARCHAR_DB
1:         stmt.execute("CREATE FUNCTION GET_VARCHAR_DB(ID INT) " +
1:                 "RETURNS VARCHAR(256) " +
1:                 "PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA " +
1:                 "EXTERNAL NAME '" + SOURCECLASS + "getVarcharFromDb'");
1:     }
1: 
0:     public void tearDown()
1:         throws SQLException {
0:         Connection con = BaseJDBCTestCase.getConnection();
1:         Statement stmt = con.createStatement();
1:         // Drop functions
1:         for (String function : FUNCTION_DROPS) {
1:             stmt.execute("DROP FUNCTION "  + function);
1:         }
1:         // Drop procedures
1:         for (String procedure : PROCEDURE_DROPS) {
1:             stmt.execute("DROP PROCEDURE "  + procedure);
1:         }
1:         // Drop tables
1:         for (String table : TABLE_DROPS) {
1:             stmt.execute("DROP TABLE "  + table);
1:         }
1:         stmt.close();
1:         con.close();
1:     }
1: 
1:     // Methods for getting CallableStatements
1: 
1:     /**
1:      * Return function converting an integer to a string.
1:      * Parameter 1: output - String/VARCHAR
1:      * Parameter 2: input  - int/INT
1:      */
1:     public static CallableStatement getIntToStringFunction(Connection con)
1:         throws SQLException {
1:         Assert.assertNotNull("Connection cannot be null", con);
1:         CallableStatement cStmt = con.prepareCall("?= CALL INT_TO_STRING(?)");
1:         cStmt.registerOutParameter(1, Types.VARCHAR);
1:         return cStmt;
1:     }
1:     
1:     /**
1:      * Return statement for calling procedure that converts a string to a 
1:      * byte array (UTF-16BE charset).
1:      * Parameter 1: input  - String/VARCHAR(40)
1:      * Parameter 2: output - byte[]/VARCHAR(160) FOR BIT DATA
1:      */
1:     public static CallableStatement getBinaryDirectProcedure(Connection con)
1:         throws SQLException {
1:         Assert.assertNotNull("Connection cannot be null", con);
1:         CallableStatement cStmt = 
1:             con.prepareCall("CALL GET_BINARY_DIRECT(?,?)");
1:         cStmt.registerOutParameter(2, Types.VARBINARY);
1:         return cStmt;
1:     }
1: 
1:     /**
1:      * Return statement for calling getBinaryFromDb function.
1:      * Parameter 1: return/output - byte[]/VARCHAR FOR BINARY - data from db
1:      * Parameter 2: input         - int/INT - id for row to fetch
1:      *
1:      * @param con database connection.
1:      * @return statement for executing getBinaryFromDb function.
1:      */
1:     public static CallableStatement getBinaryFromDbFunction(Connection con)
1:         throws SQLException {
1:         Assert.assertNotNull("Connection cannot be null", con);
1:         CallableStatement cStmt =
1:             con.prepareCall("?= CALL GET_BINARY_DB(?)");
1:         cStmt.registerOutParameter(1, Types.VARBINARY);
1:         return cStmt;
1:     }
1: 
1:     /**
1:      * Return statement for calling getVarcharFromDb function.
1:      * Parameter 1: return/output - String/VARCHAR - data from db
1:      * Parameter 2: input         - int/INT - id for row to fetch
1:      *
1:      * @param con database connection.
1:      * @return statement for executing getVarcharFromDb function.
1:      */
1:     public static CallableStatement getVarcharFromDbFunction(Connection con)
1:         throws SQLException {
1:         Assert.assertNotNull("Connection cannot be null", con);
1:         CallableStatement cStmt =
1:             con.prepareCall("?= CALL GET_VARCHAR_DB(?)");
1:         cStmt.registerOutParameter(1, Types.VARCHAR);
1:         return cStmt;
1:     }
1: 
1:     // Methods used as functions and procedures in the db
1:     
1:     /**
1:      * Procedure creating a byte representation of a string.
1:      *
1:      * @param inputString a string.
1:      * @param outputByte string returned as UTF-16BE byte representation.
1:      */
1:     public static void getBinaryDirect(String inputString, byte[][] outputByte) {
1:         try {
1:             outputByte[0] = inputString.getBytes("UTF-16BE");
1:         } catch (java.io.UnsupportedEncodingException uee) {
1:             outputByte[0] = new byte[0];
1:         }
1:     }
1:     
1:     /**
1:      * Function fetching binary data from the database.
1:      *
1:      * @param id id of row to fetch.
1:      * @return a byte array.
1:      */
1:     public static byte[] getBinaryFromDb(int id) 
1:         throws Exception {
1:         Connection con = DriverManager.getConnection("jdbc:default:connection");
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("SELECT BINARYDATA FROM CSDATA " +
1:                 "WHERE ID = " + id);
1:         rs.next();
1:         byte[] bytes = rs.getBytes(1);
1:         rs.close();
1:         stmt.close();
1:         con.close();
1:         return bytes;
1:     }
1:     
1:     /**
1:      * Function fetching character data from the database.
1:      * 
1:      * @param id id of row to fetch.
1:      * @return a string.
1:      */
1:     public static String getVarcharFromDb(int id) 
1:         throws Exception {
1:         Connection con = DriverManager.getConnection("jdbc:default:connection");
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("SELECT CHARDATA FROM CSDATA " +
1:                 "WHERE ID = " + id);
1:         rs.next();
1:         String chardata = rs.getString(1);
1:         rs.close();
1:         stmt.close();
1:         con.close();
1:         return chardata;
1:     }
1: 
1: }
============================================================================