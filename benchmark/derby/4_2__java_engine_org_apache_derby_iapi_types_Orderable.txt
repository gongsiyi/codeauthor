1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.Orderable
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /** 
1:eac0369: 
1:eac0369:   The Orderable interface represents a value that can
1:eac0369:   be linearly ordered.
1:eac0369:   <P>
1:dbed020:   Currently only supports linear (&lt;, =, &lt;=) operations.
1:eac0369:   Eventually we may want to do other types of orderings,
1:eac0369:   in which case there would probably be a number of interfaces
1:eac0369:   for each "class" of ordering.
1:eac0369:   <P>
1:eac0369:   The implementation must handle the comparison of null
1:eac0369:   values.  This may require some changes to the interface,
1:eac0369:   since (at least in some contexts) comparing a value with
1:eac0369:   null should return unknown instead of true or false.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface Orderable
1:eac0369: {
1:eac0369: 
1:dbed020: 	/**	 Ordering operation constant representing '&lt;' **/
1:eac0369: 	static final int ORDER_OP_LESSTHAN = 1;
1:eac0369: 	/**	 Ordering operation constant representing '=' **/
1:eac0369: 	static final int ORDER_OP_EQUALS = 2;
1:dbed020: 	/**	 Ordering operation constant representing '&lt;=' **/
1:eac0369: 	static final int ORDER_OP_LESSOREQUALS = 3;
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * These 2 ordering operations are used by the language layer
1:eac0369: 	 * when flipping the operation due to type precedence rules.
1:dbed020: 	 * (For example, 1 &lt; 1.1 -&gt; 1.1 &gt; 1)
1:eac0369: 	 */
1:dbed020: 	/**	 Ordering operation constant representing '&gt;' **/
1:eac0369: 	static final int ORDER_OP_GREATERTHAN = 4;
1:dbed020: 	/**	 Ordering operation constant representing '&gt;=' **/
1:eac0369: 	static final int ORDER_OP_GREATEROREQUALS = 5;
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:   Currently only supports linear (&lt;, =, &lt;=) operations.
/////////////////////////////////////////////////////////////////////////
1: 	/**	 Ordering operation constant representing '&lt;' **/
1: 	/**	 Ordering operation constant representing '&lt;=' **/
1: 	 * (For example, 1 &lt; 1.1 -&gt; 1.1 &gt; 1)
1: 	/**	 Ordering operation constant representing '&gt;' **/
1: 	/**	 Ordering operation constant representing '&gt;=' **/
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.Orderable
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /** 
1: 
1:   The Orderable interface represents a value that can
1:   be linearly ordered.
1:   <P>
0:   Currently only supports linear (<, =, <=) operations.
1:   Eventually we may want to do other types of orderings,
1:   in which case there would probably be a number of interfaces
1:   for each "class" of ordering.
1:   <P>
1:   The implementation must handle the comparison of null
1:   values.  This may require some changes to the interface,
1:   since (at least in some contexts) comparing a value with
1:   null should return unknown instead of true or false.
1: 
1: **/
1: 
1: public interface Orderable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
0: 	/**	 Ordering operation constant representing '<' **/
1: 	static final int ORDER_OP_LESSTHAN = 1;
1: 	/**	 Ordering operation constant representing '=' **/
1: 	static final int ORDER_OP_EQUALS = 2;
0: 	/**	 Ordering operation constant representing '<=' **/
1: 	static final int ORDER_OP_LESSOREQUALS = 3;
1: 
1: 	/** 
1: 	 * These 2 ordering operations are used by the language layer
1: 	 * when flipping the operation due to type precedence rules.
0: 	 * (For example, 1 < 1.1 -> 1.1 > 1)
1: 	 */
0: 	/**	 Ordering operation constant representing '>' **/
1: 	static final int ORDER_OP_GREATERTHAN = 4;
0: 	/**	 Ordering operation constant representing '>=' **/
1: 	static final int ORDER_OP_GREATEROREQUALS = 5;
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /** 
0: 
0:   The Orderable interface represents a value that can
0:   be linearly ordered.
0:   <P>
0:   Currently only supports linear (<, =, <=) operations.
0:   Eventually we may want to do other types of orderings,
0:   in which case there would probably be a number of interfaces
0:   for each "class" of ordering.
0:   <P>
0:   The implementation must handle the comparison of null
0:   values.  This may require some changes to the interface,
0:   since (at least in some contexts) comparing a value with
0:   null should return unknown instead of true or false.
0: 
0: **/
0: 
0: public interface Orderable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/**	 Ordering operation constant representing '<' **/
0: 	static final int ORDER_OP_LESSTHAN = 1;
0: 	/**	 Ordering operation constant representing '=' **/
0: 	static final int ORDER_OP_EQUALS = 2;
0: 	/**	 Ordering operation constant representing '<=' **/
0: 	static final int ORDER_OP_LESSOREQUALS = 3;
0: 
0: 	/** 
0: 	 * These 2 ordering operations are used by the language layer
0: 	 * when flipping the operation due to type precedence rules.
0: 	 * (For example, 1 < 1.1 -> 1.1 > 1)
0: 	 */
0: 	/**	 Ordering operation constant representing '>' **/
0: 	static final int ORDER_OP_GREATERTHAN = 4;
0: 	/**	 Ordering operation constant representing '>=' **/
0: 	static final int ORDER_OP_GREATEROREQUALS = 5;
0: 
0: 
0: }
============================================================================