1:c5935ad: /*
1:c5935ad:  
1:c5935ad: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6
1:c5935ad:  
1:c5935ad: Licensed to the Apache Software Foundation (ASF) under one or more
1:c5935ad: contributor license agreements.  See the NOTICE file distributed with
1:c5935ad: this work for additional information regarding copyright ownership.
1:c5935ad: The ASF licenses this file to You under the Apache License, Version 2.0
1:c5935ad: (the "License"); you may not use this file except in compliance with
1:c5935ad: the License.  You may obtain a copy of the License at
1:c5935ad:  
1:c5935ad:    http://www.apache.org/licenses/LICENSE-2.0
1:c5935ad:  
1:c5935ad: Unless required by applicable law or agreed to in writing, software
1:c5935ad: distributed under the License is distributed on an "AS IS" BASIS,
1:c5935ad: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5935ad: See the License for the specific language governing permissions and
1:c5935ad: limitations under the License.
1:c5935ad:  
1:c5935ad:  */
1:c5935ad: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:c5935ad: 
1:c5935ad: import java.sql.Connection;
1:c5935ad: import java.sql.DriverManager;
1:c5935ad: import java.sql.PreparedStatement;
1:c5935ad: import java.sql.ResultSet;
1:c5935ad: import java.sql.SQLException;
1:c5935ad: import java.sql.Statement;
1:c5935ad: import junit.framework.Test;
1:c35e4f0: import org.apache.derby.jdbc.ClientDataSourceInterface;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:c5935ad: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:c5935ad: 
1:c5935ad: 
1:c5935ad: /**
1:c5935ad:  * Run a replication test on localhost
1:c5935ad:  * by using default values for master and slave hosts,
1:c5935ad:  * and master and slave ports.
1:c5935ad:  * Test for DERBY-3896.
1:c5935ad:  * 
1:c5935ad:  */
1:c5935ad: 
1:c5935ad: public class ReplicationRun_Local_3_p6 extends ReplicationRun_Local_3
1:c5935ad: {
1:c5935ad:     
1:c5935ad:     String getDerbyServerPID = null;
1:60e4ae3: 
1:c5935ad:     /**
1:c5935ad:      * Creates a new instance of ReplicationRun_Local
1:c5935ad:      * @param testcaseName Identifying the test.
1:c5935ad:      */
1:c5935ad:     public ReplicationRun_Local_3_p6(String testcaseName)
1:c5935ad:     {
1:c5935ad:         super(testcaseName);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     public static Test suite()
1:c5935ad:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_3_p6 Suite");
1:c5935ad:         
1:c5935ad:         suite.addTestSuite( ReplicationRun_Local_3_p6.class);
1:c5935ad:         
1:c5935ad:         return SecurityManagerSetup.noSecurityManager(suite);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     /* ENABLE WHEN DERBY-3896 IS FIXED! 
1:c5935ad:     public void testReplication_Local_3_p6_DERBY_3896()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         derby_3896(false); // Autocommit off during create table before starting replication
1:c5935ad:     }
1:c5935ad:     */
1:c5935ad:     
1:c5935ad:     /**
1:c5935ad:      * Test the DERBY-3896 scenario but with autocommit on which
1:c5935ad:      * does not fail.
1:c5935ad:      * DERBY-3896: Autocommit off during create table before starting replication 
1:c5935ad:      * causes uncommitted data not being replicated.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Local_3_p6_autocommit_OK()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         derby_3896(true);
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     private void derby_3896(boolean autocommit)
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         // makeReadyForReplication(); expanded for more control:
1:c5935ad:         // BEGIN
1:c5935ad:         cleanAllTestHosts();
1:c5935ad:         
1:c5935ad:         initEnvironment();
1:c5935ad:         
1:c5935ad:         initMaster(masterServerHost,
1:c5935ad:                 replicatedDb);
1:c5935ad:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:c5935ad:                 masterServerHost,
1:c5935ad:                 ALL_INTERFACES,
1:c5935ad:                 masterServerPort,
1:c5935ad:                 masterDbSubPath);
1:c5935ad:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:c5935ad:                 slaveServerHost,
1:c5935ad:                 ALL_INTERFACES,
1:c5935ad:                 slaveServerPort,
1:c5935ad:                 slaveDbSubPath);
1:c5935ad:         
1:c5935ad:         startServerMonitor(slaveServerHost);
1:c5935ad:         
1:c5935ad:         // Must expand bootMasterDatabase() since it also freezes db!
1:c5935ad:         // BEGIN P1
1:c5935ad:         String URL = masterURL(replicatedDb)
1:c5935ad:                 +";create=true"
1:c5935ad:                 +useEncryption(true);
1:c5935ad: 
1:c5935ad:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:c5935ad:         {
1:c5935ad:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:c5935ad:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:c5935ad:             Connection conn = DriverManager.getConnection(URL);
1:c5935ad:             conn.close();
1:c5935ad:         }
1:c5935ad:         else
1:c5935ad:         {
1:c5935ad:             assertTrue("NOT IMPLEMENTED for non-local host!", false);
1:c5935ad:         }
1:c5935ad:         // END P1
1:c5935ad:         
1:c5935ad:         // Create and fill a table to have a NON-empty master db.
1:c5935ad:         
1:c5935ad:         // BEGIN DERBY-3896
1:c5935ad:         Connection mConn = _getConnection(masterDatabasePath, masterDbSubPath, 
1:c5935ad:                 replicatedDb, masterServerHost, masterServerPort);
1:c5935ad:         
1:c5935ad:         if ( ! autocommit ) mConn.setAutoCommit(false); // Autocommit off.
1:c5935ad:         // Autocommit off causes uncommitted data not being replicated - DERBY-3896.
1:c5935ad:         
1:c5935ad:         PreparedStatement ps = mConn.prepareStatement("create table t(i integer)");
1:c5935ad:         ps.execute();
1:c5935ad:         ps = mConn.prepareStatement("insert into t values 0,1,2,3");
1:c5935ad:         int _noTuplesInserted = 4;
1:c5935ad:         ps.execute();
1:c5935ad:         
1:c5935ad:         _verifyTable(mConn, _noTuplesInserted);
1:c5935ad:         // END DERBY-3896
1:c5935ad:         
1:c5935ad:         // BEGIN P2
1:c5935ad:         util.DEBUG("************************** DERBY-???? Preliminary needs to freeze db before copying to slave and setting replication mode.");
1:c5935ad:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:c5935ad:         {
1:c5935ad:            URL = masterURL(replicatedDb);
1:c5935ad:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:c5935ad:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:c5935ad:             Connection conn = DriverManager.getConnection(URL);
1:c5935ad:             Statement s = conn.createStatement();
1:c5935ad:             s.execute("call syscs_util.syscs_freeze_database()");
1:c5935ad:             conn.close();
1:c5935ad:         }
1:c5935ad:         else
1:c5935ad:         {
1:c5935ad:             assertTrue("NOT IMPLEMENTED for non-local host!", false);
1:c5935ad:         }
1:c5935ad:         util.DEBUG("bootMasterDatabase done.");
1:c5935ad:         // END P2
1:c5935ad:         
1:c5935ad:         // Copy master to slave:
1:c5935ad:         initSlave(slaveServerHost,
1:c5935ad:                 jvmVersion,
1:c5935ad:                 replicatedDb);
1:c5935ad:         
1:c5935ad:         startSlave(jvmVersion, replicatedDb,
1:c5935ad:                 slaveServerHost,
1:c5935ad:                 slaveServerPort,
1:c5935ad:                 slaveServerHost,
1:c5935ad:                 slaveReplPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         startMaster(jvmVersion, replicatedDb,
1:c5935ad:                 masterServerHost,
1:c5935ad:                 masterServerPort,
1:c5935ad:                 masterServerHost,
1:c5935ad:                 slaveServerPort,
1:c5935ad:                 slaveServerHost,
1:c5935ad:                 slaveReplPort);
1:c5935ad:         // END        
1:c5935ad:         
1:c5935ad:         mConn.commit(); 
1:c5935ad:         
1:c5935ad:         failOver(jvmVersion,
1:c5935ad:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:c5935ad:                 masterServerHost,  // Where the master db is run.
1:c5935ad:                 masterServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:c5935ad:                 slaveServerHost,slaveServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         // verifySlave(); // Can't be used here because we don't have standard load (tables).
1:c5935ad:         
1:c5935ad:         Connection sConn = _getConnection(slaveDatabasePath, slaveDbSubPath, 
1:c5935ad:                 replicatedDb,slaveServerHost,slaveServerPort);
1:c5935ad:         _verifyTable(sConn, _noTuplesInserted); // Verify the test specific table!
1:c5935ad:         
1:c5935ad:         // We should verify the master as well, at least to see that we still can connect.
1:c5935ad:         // verifyMaster(); // Can't be used here because we don't have standard load (tables).
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 slaveServerHost, slaveServerPort);
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 masterServerHost, masterServerPort);
1:c5935ad:         
1:c5935ad:     }
1:c5935ad:         
1:c5935ad:     private Connection _getConnection(String databasePath, String dbSubPath, 
1:c5935ad:             String dbName, String serverHost, int serverPort)
1:c35e4f0:         throws Exception
1:c5935ad:     {
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
1:c5935ad:         ds.setDatabaseName(databasePath +FS+ dbSubPath +FS+ dbName);
1:c5935ad:         ds.setServerName(serverHost);
1:c5935ad:         ds.setPortNumber(serverPort);
1:c5935ad:         ds.setConnectionAttributes(useEncryption(false));
1:c5935ad:         return ds.getConnection();
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     private void _verifyTable(Connection conn, int noTuplesInserted)
2:c5935ad:         throws SQLException
1:c5935ad:     {
1:c5935ad:         Statement s = conn.createStatement();
1:c5935ad:         ResultSet rs = s.executeQuery("select count(*) from t");
1:c5935ad:         rs.next();
1:c5935ad:         int count = rs.getInt(1);
1:c5935ad:         rs = s.executeQuery("select max(i) from t");
1:c5935ad:         rs.next();
1:c5935ad:         int max = rs.getInt(1);
1:c5935ad:         util.DEBUG("_verify: " + count + "/" + noTuplesInserted + " " + max +
1:c5935ad:                    "/" + (noTuplesInserted - 1));
1:c5935ad:         assertEquals("Expected "+ noTuplesInserted +" tuples, got "+ count +".",
1:c5935ad:                      noTuplesInserted, count);
1:c5935ad:         assertEquals("Expected " +(noTuplesInserted-1) +" max, got " + max +".",
1:c5935ad:                      noTuplesInserted - 1, max);        
1:c5935ad:     }
1:c5935ad:     
1:c5935ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * Test for DERBY-3896.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_3_p6 extends ReplicationRun_Local_3
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     String getDerbyServerPID = null;
1:     public ReplicationRun_Local_3_p6(String testcaseName)
1:     {
1:         super(testcaseName);
1: 
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_3_p6 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_3_p6.class);
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:     
1:     /* ENABLE WHEN DERBY-3896 IS FIXED! 
1:     public void testReplication_Local_3_p6_DERBY_3896()
1:     throws Exception
1:     {
1:         derby_3896(false); // Autocommit off during create table before starting replication
1:     }
1:     */
1:     
1:     /**
1:      * Test the DERBY-3896 scenario but with autocommit on which
1:      * does not fail.
1:      * DERBY-3896: Autocommit off during create table before starting replication 
1:      * causes uncommitted data not being replicated.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Local_3_p6_autocommit_OK()
1:     throws Exception
1:     {
1:         derby_3896(true);
1:     }
1:     
1:     private void derby_3896(boolean autocommit)
1:     throws Exception
1:     {
1:         // makeReadyForReplication(); expanded for more control:
1:         // BEGIN
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES,
1:                 masterServerPort,
1:                 masterDbSubPath);
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES,
1:                 slaveServerPort,
1:                 slaveDbSubPath);
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         // Must expand bootMasterDatabase() since it also freezes db!
1:         // BEGIN P1
1:         String URL = masterURL(replicatedDb)
1:                 +";create=true"
1:                 +useEncryption(true);
1: 
1:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:         {
1:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:             Connection conn = DriverManager.getConnection(URL);
1:             conn.close();
1:         }
1:         else
1:         {
1:             assertTrue("NOT IMPLEMENTED for non-local host!", false);
1:         }
1:         // END P1
1:         
1:         // Create and fill a table to have a NON-empty master db.
1:         
1:         // BEGIN DERBY-3896
1:         Connection mConn = _getConnection(masterDatabasePath, masterDbSubPath, 
1:                 replicatedDb, masterServerHost, masterServerPort);
1:         
1:         if ( ! autocommit ) mConn.setAutoCommit(false); // Autocommit off.
1:         // Autocommit off causes uncommitted data not being replicated - DERBY-3896.
1:         
1:         PreparedStatement ps = mConn.prepareStatement("create table t(i integer)");
1:         ps.execute();
1:         ps = mConn.prepareStatement("insert into t values 0,1,2,3");
1:         int _noTuplesInserted = 4;
1:         ps.execute();
1:         
1:         _verifyTable(mConn, _noTuplesInserted);
1:         // END DERBY-3896
1:         
1:         // BEGIN P2
1:         util.DEBUG("************************** DERBY-???? Preliminary needs to freeze db before copying to slave and setting replication mode.");
1:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:         {
1:            URL = masterURL(replicatedDb);
1:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:             Connection conn = DriverManager.getConnection(URL);
1:             Statement s = conn.createStatement();
1:             s.execute("call syscs_util.syscs_freeze_database()");
1:             conn.close();
1:         }
1:         else
1:         {
1:             assertTrue("NOT IMPLEMENTED for non-local host!", false);
1:         }
1:         util.DEBUG("bootMasterDatabase done.");
1:         // END P2
1:         
1:         // Copy master to slave:
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb);
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost,
1:                 slaveServerPort,
1:                 slaveServerHost,
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost,
1:                 masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort,
1:                 slaveServerHost,
1:                 slaveReplPort);
1:         // END        
1:         
1:         mConn.commit(); 
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         // verifySlave(); // Can't be used here because we don't have standard load (tables).
1:         
1:         Connection sConn = _getConnection(slaveDatabasePath, slaveDbSubPath, 
1:                 replicatedDb,slaveServerHost,slaveServerPort);
1:         _verifyTable(sConn, _noTuplesInserted); // Verify the test specific table!
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         // verifyMaster(); // Can't be used here because we don't have standard load (tables).
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1:         
1:     private Connection _getConnection(String databasePath, String dbSubPath, 
1:             String dbName, String serverHost, int serverPort)
1:         throws SQLException
1:     {
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(databasePath +FS+ dbSubPath +FS+ dbName);
1:         ds.setServerName(serverHost);
1:         ds.setPortNumber(serverPort);
1:         ds.setConnectionAttributes(useEncryption(false));
1:         return ds.getConnection();
1:     }
1:     
1:     private void _verifyTable(Connection conn, int noTuplesInserted)
1:         throws SQLException
1:     {
1:         Statement s = conn.createStatement();
1:         ResultSet rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int count = rs.getInt(1);
1:         rs = s.executeQuery("select max(i) from t");
1:         rs.next();
1:         int max = rs.getInt(1);
1:         util.DEBUG("_verify: " + count + "/" + noTuplesInserted + " " + max +
1:                    "/" + (noTuplesInserted - 1));
1:         assertEquals("Expected "+ noTuplesInserted +" tuples, got "+ count +".",
1:                      noTuplesInserted, count);
1:         assertEquals("Expected " +(noTuplesInserted-1) +" max, got " + max +".",
1:                      noTuplesInserted - 1, max);        
1:     }
1:     
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_3_p6 Suite");
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDataSourceInterface;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
commit:60e4ae3
/////////////////////////////////////////////////////////////////////////
0:     String getDerbyServerPID = null;
1: 
============================================================================