1:33776ff: /*
8:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.ClobWriter
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import java.io.IOException;
1:b13b17c: import java.io.Writer;
1:3d650b1: import org.apache.derby.shared.common.reference.SQLState;
1:3d650b1: 
1:b13b17c: class ClobWriter extends Writer {
1:69e3d06:     private final ClientClob clob_;
1:70f7692:     private long offset_;
1:70f7692: 
1:69e3d06:     ClobWriter(ClientClob clob, long offset) throws SqlException {
1:70f7692:         clob_ = clob;
1:70f7692:         offset_ = offset;
1:70f7692: 
1:2ef245a:         if (offset_ - 1 > clob_.sqlLength()) {
1:3d650b1:             throw new SqlException(clob_.agent_.logWriter_, 
1:66527ec:                 new ClientMessageId(SQLState.BLOB_INVALID_OFFSET), offset);
7:33776ff:         }
1:70f7692:     }
1:2ef245a: 
1:70f7692:     public void write(int c) {
1:70f7692:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:5d11c1f:         sb.append((char)c);
1:2ef245a:         updateClob(sb);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void write(char cbuf[], int off, int len) {
1:70f7692:         if ((off < 0) || (off > cbuf.length) || (len < 0) ||
1:70f7692:                 ((off + len) > cbuf.length) || ((off + len) < 0)) {
1:70f7692:             throw new IndexOutOfBoundsException();
1:70f7692:         } else if (len == 0) {
1:70f7692:             return;
1:70f7692:         }
1:70f7692:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:70f7692:         sb.append(cbuf, off, len);
1:2ef245a:         updateClob(sb);
1:70f7692:     }
1:70f7692: 
1:33776ff: 
1:70f7692:     public void write(String str) {
1:70f7692:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:70f7692:         sb.append(str);
1:2ef245a:         updateClob(sb);
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     public void write(String str, int off, int len) {
1:70f7692:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:70f7692:         sb.append(str.substring(off, off + len));
1:2ef245a:         updateClob(sb);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void flush() {
1:70f7692:     }
1:70f7692: 
1:69e3d06:     public void close() throws IOException {
1:70f7692:     }
1:33776ff:     
1:2ef245a:     private void updateClob(StringBuffer sb) 
1:2ef245a:     {
1:c784df5:         clob_.reInitForNonLocator(sb.toString());
1:2ef245a:         offset_ = clob_.string_.length() + 1;
1:2ef245a:     }
1:33776ff: }
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1:     private final ClientClob clob_;
1:     ClobWriter(ClientClob clob, long offset) throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     public void close() throws IOException {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import java.io.Writer;
1: class ClobWriter extends Writer {
commit:ee33904
/////////////////////////////////////////////////////////////////////////
0: class ClobWriter extends java.io.Writer {
0:     private final Clob clob_;
0:     ClobWriter(Clob clob, long offset) throws SqlException {
commit:2ef245a
/////////////////////////////////////////////////////////////////////////
1:         if (offset_ - 1 > clob_.sqlLength()) {
/////////////////////////////////////////////////////////////////////////
1:         updateClob(sb);
/////////////////////////////////////////////////////////////////////////
1:         updateClob(sb);
1:         updateClob(sb);
1:         updateClob(sb);
/////////////////////////////////////////////////////////////////////////
1:     
1:     private void updateClob(StringBuffer sb) 
1:     {
0:         clob_.string_ = sb.toString();
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ 
0:             = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.setSqlLength(clob_.string_.length());
1:         offset_ = clob_.string_.length() + 1;
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:66527ec
/////////////////////////////////////////////////////////////////////////
1:                 new ClientMessageId(SQLState.BLOB_INVALID_OFFSET), offset);
commit:c784df5
/////////////////////////////////////////////////////////////////////////
1:         clob_.reInitForNonLocator(sb.toString());
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:5d11c1f
/////////////////////////////////////////////////////////////////////////
1:         sb.append((char)c);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0:                 new ClientMessageId(SQLState.BLOB_INVALID_OFFSET),
commit:e6936ea
/////////////////////////////////////////////////////////////////////////
0:                 new MessageId(SQLState.BLOB_INVALID_OFFSET),
commit:3d650b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
/////////////////////////////////////////////////////////////////////////
1:             throw new SqlException(clob_.agent_.logWriter_, 
0:                 new MessageId(SQLState.BLOB_BAD_POSITION),
0:                 new Long(offset));
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class ClobWriter extends java.io.Writer {
0:     private Clob clob_;
1:     private long offset_;
0:     public ClobWriter() {
1: 
0:     public ClobWriter(Clob clob, long offset) throws SqlException {
1:         clob_ = clob;
1:         offset_ = offset;
1: 
0:         if (offset_ - 1 > clob_.sqlLength_) {
0:             throw new SqlException(clob_.agent_.logWriter_, "Invalid position: " + offset);
1:         }
1: 
1:     public void write(int c) {
1:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
0:         sb.append(c);
0:         clob_.string_ = sb.toString();
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:         offset_ = clob_.sqlLength_ + 1;
1:     }
1: 
1:     public void write(char cbuf[], int off, int len) {
1:         if ((off < 0) || (off > cbuf.length) || (len < 0) ||
1:                 ((off + len) > cbuf.length) || ((off + len) < 0)) {
1:             throw new IndexOutOfBoundsException();
1:         } else if (len == 0) {
1:             return;
1:         }
1:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:         sb.append(cbuf, off, len);
0:         clob_.string_ = sb.toString();
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:         offset_ = clob_.sqlLength_ + 1;
1:     }
1:     public void write(String str) {
1:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:         sb.append(str);
0:         clob_.string_ = sb.toString();
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:         offset_ = clob_.sqlLength_ + 1;
1:     }
1:     public void write(String str, int off, int len) {
1:         StringBuffer sb = new StringBuffer(clob_.string_.substring(0, (int) offset_ - 1));
1:         sb.append(str.substring(off, off + len));
0:         clob_.string_ = sb.toString();
0:         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:         clob_.characterStream_ = new java.io.StringReader(clob_.string_);
0:         clob_.sqlLength_ = clob_.string_.length();
0:         offset_ = clob_.sqlLength_ + 1;
1:     }
1:     public void flush() {
1:     }
1: 
0:     public void close() throws java.io.IOException {
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.ClobWriter
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: 
0: public class ClobWriter extends java.io.Writer
0: {
0:   private Clob clob_;
0:   private long offset_;
1: 
0:   public ClobWriter()
0:   {}
1: 
0:   public ClobWriter(Clob clob, long offset) throws SqlException
0:   {
0:     clob_ = clob;
0:     offset_ = offset;
1: 
0:     if (offset_ - 1 > clob_.sqlLength_)
0:       throw new SqlException( clob_.agent_.logWriter_, "Invalid position: " + offset);
1:   }
1: 
0:   public void write (int c)
0:   {
0:     StringBuffer sb = new StringBuffer(clob_.string_.substring(0,(int)offset_-1));
0:     sb.append(c);
0:     clob_.string_ = sb.toString();
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
0:     offset_ = clob_.sqlLength_ + 1;
1:   }
1: 
0:   public void write(char cbuf[], int off, int len)
0:   {
0:     if ((off < 0) || (off > cbuf.length) || (len < 0) ||
0:         ((off + len) > cbuf.length) || ((off + len) < 0)) {
0:         throw new IndexOutOfBoundsException();
1:     }
0:     else if (len == 0) {
0:         return;
1:     }
0:     StringBuffer sb = new StringBuffer(clob_.string_.substring(0,(int)offset_-1));
0:     sb.append(cbuf,off,len);
0:     clob_.string_ = sb.toString();
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
0:     offset_ = clob_.sqlLength_ + 1;
1:   }
1: 
1: 
0:   public void write (String str)
0:   {
0:     StringBuffer sb = new StringBuffer(clob_.string_.substring(0,(int)offset_-1));
0:     sb.append(str);
0:     clob_.string_ = sb.toString();
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
0:     offset_ = clob_.sqlLength_ + 1;
1:   }
1: 
1: 
0:   public void write(String str, int off, int len)
0:   {
0:     StringBuffer sb = new StringBuffer(clob_.string_.substring(0,(int)offset_-1));
0:     sb.append(str.substring(off, off + len));
0:     clob_.string_ = sb.toString();
0:     clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);
0:     clob_. characterStream_ = new java.io.StringReader(clob_.string_);
0:     clob_.sqlLength_ = clob_.string_.length();
0:     offset_ = clob_.sqlLength_ + 1;
1:   }
1: 
0:   public void flush() {}
0:   public void close() throws java.io.IOException {}
1: }
1: 
============================================================================