1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.UserDefinedTypeIdImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:2732872: import org.apache.derby.iapi.util.IdUtil;
1:2732872: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.sql.Types;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:53c606b: /**
1:53c606b:  * <p>
1:53c606b:  * This type id describes a user defined type. There are 2 kinds of user defined
1:53c606b:  * types in Derby:
1:53c606b:  * </p>
1:53c606b:  *
1:53c606b:  * <ul>
1:53c606b:  * <li><b>Old-fashioned</b> - In the original Cloudscape code, it was possible
1:53c606b:  * to declare a column's type to be the name of a Java class. Unlike ANSI
1:53c606b:  * UDTs, these user defined types were not schema objects themselves and they
1:53c606b:  * didn't have schema-qualified names. Some of the system tables have columns
1:53c606b:  * whose datatypes are old-fashioned user defined types. E.g., SYS.SYSALIASES.ALIASINFO.</li>
1:53c606b:  * <li><b>ANSI</b> - As part of the work on
1:53c606b:  * <a href="https://issues.apache.org/jira/browse/DERBY-651">DERBY-651</a>,
1:53c606b:  * we added ANSI UDTs. These are user defined types which are declared via the
1:53c606b:  * CREATE TYPE statement. These have schema-qualified names. The CREATE TYPE
1:53c606b:  * statement basically binds a schema-qualified name to the name of a Java class.</li>
1:53c606b:  * </ul>
1:53c606b:  */
1:eac0369: public class UserDefinedTypeIdImpl extends BaseTypeIdImpl
4:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	protected String className;
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public	UserDefinedTypeIdImpl() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a UserDefinedTypeIdImpl. The SQLTypeName of a UserDefinedType
1:d039ced: 	 * is assumed to be its className for Derby-only UserDefinedTypes. For
1:d039ced: 	 * actual user created UDTs, the SQLTypeName is a schema qualified name.
1:eac0369: 	 *
1:eac0369: 	 * @param className	The SQL name of the type
1:eac0369: 	 */
1:eac0369: 
1:2a5922a: 	public UserDefinedTypeIdImpl(String className) throws StandardException
1:2732872: 	{
1:2a5922a:         //
1:2a5922a:         // If the name begins with a quote, then it is the schema-qualified name
1:2a5922a:         // of a UDT. Parse the name.
1:2a5922a:         //
1:2a5922a:         if ( className.charAt( 0 ) == '"' )
1:2a5922a:         {
1:2a5922a:             String[] nameParts = IdUtil.parseMultiPartSQLIdentifier( className );
1:2732872:             
1:2a5922a:             schemaName = nameParts[ 0 ];
1:2a5922a:             unqualifiedName = nameParts[ 1 ];
1:2a5922a:             className = null;
1:2a5922a:         }
1:2a5922a:         else
1:2a5922a:         {
1:2a5922a:             schemaName = null;
1:2a5922a:             unqualifiedName = className;
1:2a5922a:             this.className = className;
1:2a5922a:         }
1:2a5922a:         
1:2a5922a:         JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1:2732872: 	}
1:2732872: 
1:d039ced: 	/**
1:d039ced: 	 * Constructor for a UDT.
1:d039ced: 	 *
1:d039ced: 	 * @param schemaName	Schema that the UDT lives in.
1:d039ced: 	 * @param unqualifiedName	The name of the type inside that schema.
1:d039ced: 	 * @param className	The Java class  bound to the SQL type.
1:d039ced: 	 */
1:d039ced: 
1:d039ced: 	public UserDefinedTypeIdImpl(String schemaName, String unqualifiedName, String className)
1:2732872: 	{
1:d039ced: 		super( schemaName, unqualifiedName );
1:2732872: 		this.className = className;
1:2732872: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1:2732872: 	}
1:d039ced: 
1:eac0369: 
1:eac0369: 	/** Return the java class name for this type */
1:eac0369: 	public String	getClassName()
1:d039ced: 	{
1:eac0369: 		return className;
1:d039ced: 	}
1:eac0369: 
1:eac0369: 	/** Does this type id represent a user type? */
1:eac0369: 	public boolean userType()
1:eac0369: 	{
1:eac0369: 		return true;
4:eac0369: 	}
1:d039ced:     
1:d039ced: 	/** Has this user type been bound? */
1:d039ced: 	public boolean isBound() { return !(className == null); }
1:d039ced: 
1:eac0369: 	// Formatable interface.
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal( in );
1:eac0369: 		className = in.readUTF();
1:d039ced: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal( out );
1:d039ced: 
1:d039ced:         // If the class name is null, then an internal error has occurred. We
1:d039ced:         // are trying to persist a UDT descriptor which has not been bound yet
1:d039ced:         if ( className == null )
1:d039ced:         {
1:d039ced:             throw new IOException( "Internal error: class name for user defined type has not been determined yet." );
1:d039ced:         }
1:eac0369: 		out.writeUTF( className );
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.USERDEFINED_TYPE_ID_IMPL_V3; }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1: 	public UserDefinedTypeIdImpl(String className) throws StandardException
1:         //
1:         // If the name begins with a quote, then it is the schema-qualified name
1:         // of a UDT. Parse the name.
1:         //
1:         if ( className.charAt( 0 ) == '"' )
1:         {
1:             String[] nameParts = IdUtil.parseMultiPartSQLIdentifier( className );
1:             schemaName = nameParts[ 0 ];
1:             unqualifiedName = nameParts[ 1 ];
1:             className = null;
1:         }
1:         else
1:         {
1:             schemaName = null;
1:             unqualifiedName = className;
1:             this.className = className;
1:         }
1:         
1:         JDBCTypeId = java.sql.Types.JAVA_OBJECT;
commit:2732872
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             //
0:             // If the name begins with a quote, then it is the schema-qualified name
0:             // of a UDT. Parse the name.
0:             //
0:             if ( className.charAt( 0 ) == '"' )
1:             {
0:                 String[] nameParts = IdUtil.parseMultiPartSQLIdentifier( className );
1:                 
0:                 schemaName = nameParts[ 0 ];
0:                 unqualifiedName = nameParts[ 1 ];
0:                 className = null;
1:             }
0:             else
1:             {
0:                 schemaName = null;
0:                 unqualifiedName = className;
1:                 this.className = className;
1:             }
1:             
1:             JDBCTypeId = java.sql.Types.JAVA_OBJECT;
0:         } catch (Exception e) { throw new IllegalArgumentException( e.getMessage() ); }
commit:53c606b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * <p>
1:  * This type id describes a user defined type. There are 2 kinds of user defined
1:  * types in Derby:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li><b>Old-fashioned</b> - In the original Cloudscape code, it was possible
1:  * to declare a column's type to be the name of a Java class. Unlike ANSI
1:  * UDTs, these user defined types were not schema objects themselves and they
1:  * didn't have schema-qualified names. Some of the system tables have columns
1:  * whose datatypes are old-fashioned user defined types. E.g., SYS.SYSALIASES.ALIASINFO.</li>
1:  * <li><b>ANSI</b> - As part of the work on
1:  * <a href="https://issues.apache.org/jira/browse/DERBY-651">DERBY-651</a>,
1:  * we added ANSI UDTs. These are user defined types which are declared via the
1:  * CREATE TYPE statement. These have schema-qualified names. The CREATE TYPE
1:  * statement basically binds a schema-qualified name to the name of a Java class.</li>
1:  * </ul>
1:  */
commit:d039ced
/////////////////////////////////////////////////////////////////////////
1: 	 * is assumed to be its className for Derby-only UserDefinedTypes. For
1: 	 * actual user created UDTs, the SQLTypeName is a schema qualified name.
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Constructor for a UDT.
1: 	 *
1: 	 * @param schemaName	Schema that the UDT lives in.
1: 	 * @param unqualifiedName	The name of the type inside that schema.
1: 	 * @param className	The Java class  bound to the SQL type.
1: 	 */
1: 
1: 	public UserDefinedTypeIdImpl(String schemaName, String unqualifiedName, String className)
1: 	{
1: 		super( schemaName, unqualifiedName );
0: 		this.className = className;
1: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1: 	/** Has this user type been bound? */
1: 	public boolean isBound() { return !(className == null); }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // If the class name is null, then an internal error has occurred. We
1:         // are trying to persist a UDT descriptor which has not been bound yet
1:         if ( className == null )
1:         {
1:             throw new IOException( "Internal error: class name for user defined type has not been determined yet." );
1:         }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6e2e8c0
/////////////////////////////////////////////////////////////////////////
commit:08d6ce2
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.UserDefinedTypeIdImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import java.sql.Types;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: public class UserDefinedTypeIdImpl extends BaseTypeIdImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	protected String className;
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1: 	public	UserDefinedTypeIdImpl() { super(); }
1: 
1: 	/**
1: 	 * Constructor for a UserDefinedTypeIdImpl. The SQLTypeName of a UserDefinedType
0: 	 * is assumed to be its className.
1: 	 *
1: 	 * @param className	The SQL name of the type
1: 	 */
1: 
0: 	public UserDefinedTypeIdImpl(String className)
1: 	{
0: 		super(className);
0: 		this.className = className;
0: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1: 	}
1: 
1: 
1: 	/** Return the java class name for this type */
1: 	public String	getClassName()
1: 	{
1: 		return className;
1: 	}
1: 
0: 	/** Does this type id represent a system built-in type? */
0: 	public boolean systemBuiltIn()
1: 	{
0: 		return false;
1: 	}
1: 
1: 	/** Does this type id represent a user type? */
1: 	public boolean userType()
1: 	{
1: 		return true;
1: 	}
1: 	// Formatable interface.
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal( in );
1: 		className = in.readUTF();
0: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		super.writeExternal( out );
1: 		out.writeUTF( className );
1: 	}
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.USERDEFINED_TYPE_ID_IMPL_V3; }
1: 
1: 	/**
0: 	 * Get the format id for the wrapper type id that corresponds to
0: 	 * this type id.
1: 	 */
0: 	public int wrapperTypeFormatId() { return StoredFormatIds.USERDEFINED_TYPE_ID_V3; }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import java.sql.Types;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: public class UserDefinedTypeIdImpl extends BaseTypeIdImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	protected String className;
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0: 	public	UserDefinedTypeIdImpl() { super(); }
0: 
0: 	/**
0: 	 * Constructor for a UserDefinedTypeIdImpl. The SQLTypeName of a UserDefinedType
0: 	 * is assumed to be its className.
0: 	 *
0: 	 * @param className	The SQL name of the type
0: 	 */
0: 
0: 	public UserDefinedTypeIdImpl(String className)
0: 	{
0: 		super(className);
0: 		this.className = className;
0: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
0: 	}
0: 
0: 
0: 	/** Return the java class name for this type */
0: 	public String	getClassName()
0: 	{
0: 		return className;
0: 	}
0: 
0: 	/** Does this type id represent a system built-in type? */
0: 	public boolean systemBuiltIn()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/** Does this type id represent a user type? */
0: 	public boolean userType()
0: 	{
0: 		return true;
0: 	}
0: 	// Formatable interface.
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal( in );
0: 		className = in.readUTF();
0: 		JDBCTypeId = java.sql.Types.JAVA_OBJECT;
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		super.writeExternal( out );
0: 		out.writeUTF( className );
0: 	}
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.USERDEFINED_TYPE_ID_IMPL_V3; }
0: 
0: 	/**
0: 	 * Get the format id for the wrapper type id that corresponds to
0: 	 * this type id.
0: 	 */
0: 	public int wrapperTypeFormatId() { return StoredFormatIds.USERDEFINED_TYPE_ID_V3; }
0: }
============================================================================