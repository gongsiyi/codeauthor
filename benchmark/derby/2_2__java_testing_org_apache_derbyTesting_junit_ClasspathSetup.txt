1:92a2169: /*
1:92a2169:  *
1:92a2169:  * Derby - Class org.apache.derbyTesting.junit.ClasspathSetup
1:92a2169:  *
1:92a2169:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:92a2169:  * contributor license agreements.  See the NOTICE file distributed with
1:92a2169:  * this work for additional information regarding copyright ownership.
1:92a2169:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:92a2169:  * (the "License"); you may not use this file except in compliance with
1:92a2169:  * the License.  You may obtain a copy of the License at
1:92a2169:  *
1:92a2169:  *    http://www.apache.org/licenses/LICENSE-2.0
1:92a2169:  *
1:92a2169:  * Unless required by applicable law or agreed to in writing, 
1:92a2169:  * software distributed under the License is distributed on an 
1:92a2169:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:92a2169:  * either express or implied. See the License for the specific 
1:92a2169:  * language governing permissions and limitations under the License.
1:92a2169:  */
1:92a2169: package org.apache.derbyTesting.junit;
4:92a2169: 
1:4a08a15: import java.io.Closeable;
1:4a08a15: import java.io.IOException;
1:92a2169: import java.net.URL;
1:92a2169: import java.net.URLClassLoader;
1:92a2169: import java.security.AccessController;
1:2510115: import java.security.PrivilegedAction;
1:4a08a15: import java.security.PrivilegedExceptionAction;
1:92a2169: 
1:92a2169: import junit.extensions.TestSetup;
1:92a2169: import junit.framework.Test;
1:92a2169: 
1:92a2169: /**
1:92a2169:  * <p>
1:92a2169:  * This decorator adds another resource to the classpath, removing
1:92a2169:  * it at tearDown().
1:92a2169:  * </p>
1:92a2169:  */
1:92a2169: public class ClasspathSetup extends TestSetup
1:92a2169: {
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169:     //
1:92a2169:     // CONSTANTS
1:92a2169:     //
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169: 
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169:     //
1:92a2169:     // STATE
1:92a2169:     //
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169: 
1:92a2169:     private URL             _resource;
1:92a2169:     private ClassLoader _originalClassLoader;
1:4a08a15:     private URLClassLoader _newClassLoader;
1:92a2169: 
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169:     //
1:92a2169:     // CONSTRUCTORS
1:92a2169:     //
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169: 
1:92a2169:     /**
1:92a2169:      * <p>
1:92a2169:      * Add the indicated URL to the classpath.
1:92a2169:      * </p>
1:92a2169:      */
1:4a08a15:     public ClasspathSetup(Test test, URL resource)
1:92a2169:     {
1:92a2169:         super( test );
1:92a2169:         
1:92a2169:         _resource = resource;
1:92a2169:     }
1:92a2169: 
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169:     //
1:92a2169:     // JUnit BEHAVIOR
1:92a2169:     //
1:92a2169:     ///////////////////////////////////////////////////////////////////////////////////
1:92a2169: 
1:2510115:     protected void setUp()
1:92a2169:     {
1:92a2169:         AccessController.doPrivileged
1:92a2169:             (
1:2510115:              new PrivilegedAction<Void>()
1:92a2169:              {
1:2510115:                  public Void run()
1:92a2169:                  { 
1:92a2169:                      _originalClassLoader = Thread.currentThread().getContextClassLoader();
1:92a2169: 
1:4a08a15:                      _newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );
1:92a2169: 
1:4a08a15:                      Thread.currentThread().setContextClassLoader( _newClassLoader );
1:92a2169:                      
1:92a2169:                      return null;
1:92a2169:                  }
1:92a2169:              }
1:92a2169:              );
1:92a2169:     }
1:92a2169:     
1:4a08a15:     protected void tearDown() throws Exception
1:92a2169:     {
1:92a2169:         AccessController.doPrivileged
1:92a2169:             (
1:4a08a15:              new PrivilegedExceptionAction<Void>()
1:92a2169:              {
1:4a08a15:                  public Void run() throws IOException
1:92a2169:                  { 
1:92a2169:                      Thread.currentThread().setContextClassLoader( _originalClassLoader );
1:4a08a15: 
1:4a08a15:                      // On Java 7 and higher, URLClassLoader implements the
1:4a08a15:                      // Closable interface and has a close() method. Use that
1:4a08a15:                      // method, if it's available, to free all resources
1:4a08a15:                      // associated with the class loader. DERBY-2162.
1:4a08a15:                      if (_newClassLoader instanceof Closeable) {
1:4a08a15:                         ((Closeable) _newClassLoader).close();
1:4a08a15:                      }
1:4a08a15: 
1:92a2169:                      return null;
1:92a2169:                  }
1:92a2169:              }
1:92a2169:              );
1:4a08a15: 
1:4a08a15:         _originalClassLoader = null;
1:4a08a15:         _newClassLoader = null;
1:4a08a15:         _resource = null;
1:4a08a15:     }
1:4a08a15: 
1:4a08a15:     /**
1:4a08a15:      * Check whether this platform supports closing a {@code URLClassLoader}.
1:4a08a15:      *
1:4a08a15:      * @return {@code true} if {@code URLClassLoader} has a {@code close()}
1:4a08a15:      * method (Java 7 and higher), or {@code false} otherwise
1:4a08a15:      */
1:4a08a15:     public static boolean supportsClose() {
1:4a08a15:         return Closeable.class.isAssignableFrom(URLClassLoader.class);
1:92a2169:     }
1:92a2169: 
1:92a2169: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4a08a15
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:     private URLClassLoader _newClassLoader;
/////////////////////////////////////////////////////////////////////////
1:     public ClasspathSetup(Test test, URL resource)
/////////////////////////////////////////////////////////////////////////
1:                      _newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );
1:                      Thread.currentThread().setContextClassLoader( _newClassLoader );
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception
1:              new PrivilegedExceptionAction<Void>()
1:                  public Void run() throws IOException
1: 
1:                      // On Java 7 and higher, URLClassLoader implements the
1:                      // Closable interface and has a close() method. Use that
1:                      // method, if it's available, to free all resources
1:                      // associated with the class loader. DERBY-2162.
1:                      if (_newClassLoader instanceof Closeable) {
1:                         ((Closeable) _newClassLoader).close();
1:                      }
1: 
1: 
1:         _originalClassLoader = null;
1:         _newClassLoader = null;
1:         _resource = null;
1:     }
1: 
1:     /**
1:      * Check whether this platform supports closing a {@code URLClassLoader}.
1:      *
1:      * @return {@code true} if {@code URLClassLoader} has a {@code close()}
1:      * method (Java 7 and higher), or {@code false} otherwise
1:      */
1:     public static boolean supportsClose() {
1:         return Closeable.class.isAssignableFrom(URLClassLoader.class);
commit:2510115
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp()
1:              new PrivilegedAction<Void>()
1:                  public Void run()
/////////////////////////////////////////////////////////////////////////
0:     protected void tearDown()
0:              new PrivilegedAction<Void>()
0:                  public Void run()
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:92a2169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.ClasspathSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.security.AccessController;
0: import java.security.PrivilegedActionException;
1: 
1: import junit.extensions.TestSetup;
0: import junit.framework.Assert;
1: import junit.framework.Test;
1: 
1: /**
1:  * <p>
1:  * This decorator adds another resource to the classpath, removing
1:  * it at tearDown().
1:  * </p>
1:  */
1: public class ClasspathSetup extends TestSetup
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private URL             _resource;
1:     private ClassLoader _originalClassLoader;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Add the indicated URL to the classpath.
1:      * </p>
1:      */
0:     public  ClasspathSetup( Test test, URL resource )  throws Exception
1:     {
1:         super( test );
1:         
1:         _resource = resource;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     protected void setUp() throws PrivilegedActionException
1:     {
1:         AccessController.doPrivileged
1:             (
0:              new java.security.PrivilegedExceptionAction()
1:              {
0:                  public Object run() throws PrivilegedActionException
1:                  { 
1:                      _originalClassLoader = Thread.currentThread().getContextClassLoader();
1: 
0:                      URLClassLoader newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );
1: 
0:                      Thread.currentThread().setContextClassLoader( newClassLoader );
1:                      
1:                      return null;
1:                  }
1:              }
1:              );
1:     }
1:     
0:     protected void tearDown() throws PrivilegedActionException
1:     {
1:         AccessController.doPrivileged
1:             (
0:              new java.security.PrivilegedExceptionAction()
1:              {
0:                  public Object run() throws PrivilegedActionException
1:                  { 
1:                      Thread.currentThread().setContextClassLoader( _originalClassLoader );
1:                      
1:                      return null;
1:                  }
1:              }
1:              );
1:     }
1: 
1: }
1: 
1: 
============================================================================