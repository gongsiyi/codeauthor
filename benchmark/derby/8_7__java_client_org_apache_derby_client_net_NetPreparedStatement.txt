1:33776ff: /*
10:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetPreparedStatement
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:33776ff: import org.apache.derby.client.am.ColumnMetaData;
1:69e3d06: import org.apache.derby.client.am.ClientPreparedStatement;
1:70f7692: import org.apache.derby.client.am.Section;
1:33776ff: import org.apache.derby.client.am.SqlException;
1:cbd0ff1: import org.apache.derby.jdbc.ClientDriver;
1:407e52d: import org.apache.derby.client.ClientPooledConnection;
1:b13b17c: import org.apache.derby.client.am.MaterialPreparedStatement;
1:33776ff: 
1:33776ff: 
1:0326967: class NetPreparedStatement extends NetStatement
1:b13b17c:         implements MaterialPreparedStatement {
1:33776ff: 
1:70f7692:     // Alias for (NetPreparedStatement) super.statement.
1:70f7692:     /*final*/
1:69e3d06:     ClientPreparedStatement preparedStatement_;
1:33776ff: 
1:33776ff: 
1:70f7692:     // Relay constructor for NetCallableStatement.
1:69e3d06:     NetPreparedStatement(ClientPreparedStatement statement,
1:70f7692:                          NetAgent netAgent,
1:70f7692:                          NetConnection netConnection) {
1:70f7692:         super(statement, netAgent, netConnection);
1:70f7692:         initNetPreparedStatement(statement);
5:70f7692:     }
1:33776ff: 
1:69e3d06:     void resetNetPreparedStatement(ClientPreparedStatement statement,
1:70f7692:                                    NetAgent netAgent,
1:70f7692:                                    NetConnection netConnection) {
1:70f7692:         super.resetNetStatement(statement, netAgent, netConnection);
1:70f7692:         initNetPreparedStatement(statement);
1:70f7692:     }
1:33776ff: 
1:69e3d06:     private void initNetPreparedStatement(ClientPreparedStatement statement) {
1:70f7692:         preparedStatement_ = statement;
1:70f7692:         preparedStatement_.materialPreparedStatement_ = this;
1:70f7692:     }
1:33776ff: 
1:407e52d:     /**
1:407e52d:      *
1:407e52d:      * The constructor for the NetPreparedStatement class. Called by abstract
1:407e52d:      * Connection.prepareStatment().newPreparedStatement()
1:407e52d:      * for jdbc 2 prepared statements with scroll attributes.
1:407e52d:      * It has the ClientPooledConnection as one of its parameters
1:407e52d:      * this is used to raise the Statement Events when the prepared
1:407e52d:      * statement is closed.
1:407e52d:      *
1:9ec13b2:      * @param netAgent The instance of NetAgent associated with this
1:407e52d:      *              CallableStatement object.
1:9ec13b2:      * @param netConnection The connection object associated with this
1:407e52d:      *                      PreparedStatement Object.
1:407e52d:      * @param sql         A String object that is the SQL statement
1:407e52d:      *                    to be sent to the database.
1:407e52d:      * @param type        One of the ResultSet type constants.
1:407e52d:      * @param concurrency One of the ResultSet concurrency constants.
1:407e52d:      * @param holdability One of the ResultSet holdability constants.
1:407e52d:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:407e52d:      *                          keys should be returned.
1:407e52d:      * @param columnNames A String array of column names indicating
1:407e52d:      *                    the columns that should be returned
1:407e52d:      *                    from the inserted row or rows.
1:b52081a:      * @param columnIndexes An int array of column indexes indicating
1:b52081a:      *                    the column that should be returned from 
1:b52081a:      *                    the inserted row.                   
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:407e52d:      *            connection associated with this prepared statement
1:407e52d:      *            it is used to pass the Statement closed and the Statement
1:407e52d:      *            error occurred events that occur back to the
1:407e52d:      *            ClientPooledConnection.
1:407e52d:      * @throws SqlException
1:407e52d:      *
1:407e52d:      */
1:b52081a:     NetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames, 
1:b52081a:             int[] columnIndexes,  ClientPooledConnection cpc) throws SqlException {
1:cbd0ff1:         this(ClientDriver.getFactory().newPreparedStatement(netAgent,
1:cbd0ff1:                 netConnection, sql, type, concurrency, holdability,
1:b52081a:                 autoGeneratedKeys, columnNames, columnIndexes, cpc),
1:70f7692:                 netAgent,
1:407e52d:                 netConnection
1:407e52d:                 );
1:70f7692:     }
1:33776ff: 
1:b52081a:     void resetNetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames, 
1:b52081a:             int[] columnIndexes) throws SqlException {
1:b52081a:         preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, 
1:b52081a:                 columnNames, columnIndexes);
2:70f7692:         resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
1:70f7692:     }
1:33776ff: 
1:407e52d:     /**
1:407e52d:      *
1:407e52d:      * The constructor for the NetPreparedStatement class. For JDBC 3.0 
1:407e52d:      * positioned updates.It has the ClientPooledConnection as one of 
1:407e52d:      * its parameters this is used to raise the Statement Events when the 
1:407e52d:      * prepared statement is closed.
1:407e52d:      *
1:9ec13b2:      * @param netAgent The instance of NetAgent associated with this
1:407e52d:      *              CallableStatement object.
1:9ec13b2:      * @param netConnection The connection object associated with this 
1:407e52d:      *                      PreparedStatement Object. 
1:407e52d:      * @param sql           A String object that is the SQL statement to be 
1:407e52d:      *                      sent to the database.
1:9ec13b2:      * @param section
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical 
1:407e52d:      *            connection associated with this prepared statement 
1:407e52d:      *            it is used to pass the Statement closed and the Statement 
1:407e52d:      *            error occurred events that occur back to the 
1:407e52d:      *            ClientPooledConnection
1:407e52d:      * @throws SqlException
1:407e52d:      *
1:407e52d:      */
1:70f7692:     NetPreparedStatement(NetAgent netAgent,
3:70f7692:                          NetConnection netConnection,
3:70f7692:                          String sql,
1:407e52d:                          Section section,ClientPooledConnection cpc) 
1:407e52d:                          throws SqlException {
1:cbd0ff1:         this(ClientDriver.getFactory().newPreparedStatement(netAgent,
1:407e52d:                 netConnection, sql, section,cpc),
1:70f7692:                 netAgent,
2:70f7692:                 netConnection);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeExecute_(Section section,
1:70f7692:                               ColumnMetaData parameterMetaData,
1:70f7692:                               Object[] inputs,
1:70f7692:                               int numInputColumns,
1:70f7692:                               boolean outputExpected,
1:70f7692:                               // This is a hint to the material layer that more write commands will follow.
1:70f7692:                               // It is ignored by the driver in all cases except when blob data is written,
1:70f7692:                               // in which case this boolean is used to optimize the implementation.
1:70f7692:                               // Otherwise we wouldn't be able to chain after blob data is sent.
1:70f7692:                               // If we could always chain a no-op DDM after every execute that writes blobs
1:70f7692:                               // then we could just always set the chaining flag to on for blob send data
1:70f7692:                               boolean chainedWritesFollowingSetLob) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeExecute(this,
1:70f7692:                 section,
1:70f7692:                 parameterMetaData,
1:70f7692:                 inputs,
1:70f7692:                 numInputColumns,
1:70f7692:                 outputExpected,
1:70f7692:                 chainedWritesFollowingSetLob);
1:70f7692:     }
1:70f7692: 
1:70f7692: 
1:70f7692:     public void readExecute_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readExecute(preparedStatement_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void writeOpenQuery_(Section section,
1:70f7692:                                 int fetchSize,
1:70f7692:                                 int resultSetType,
1:70f7692:                                 int numInputColumns,
1:70f7692:                                 ColumnMetaData parameterMetaData,
1:70f7692:                                 Object[] inputs) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeOpenQuery(this,
1:70f7692:                 section,
1:70f7692:                 fetchSize,
1:70f7692:                 resultSetType,
1:70f7692:                 numInputColumns,
1:70f7692:                 parameterMetaData,
1:70f7692:                 inputs);
1:70f7692:     }
1:70f7692:     // super.readOpenQuery()
1:70f7692: 
1:70f7692:     public void writeDescribeInput_(Section section) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeDescribeInput(this, section);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void readDescribeInput_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readDescribeInput(preparedStatement_);
1:70f7692:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetPreparedStatement extends NetStatement
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientPreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:     ClientPreparedStatement preparedStatement_;
1:     NetPreparedStatement(ClientPreparedStatement statement,
1:     void resetNetPreparedStatement(ClientPreparedStatement statement,
1:     private void initNetPreparedStatement(ClientPreparedStatement statement) {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.MaterialPreparedStatement;
1:         implements MaterialPreparedStatement {
0:     PreparedStatement preparedStatement_;
0:     NetPreparedStatement(PreparedStatement statement,
0:     void resetNetPreparedStatement(PreparedStatement statement,
0:     private void initNetPreparedStatement(PreparedStatement statement) {
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:ca72f66
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c50ba59
/////////////////////////////////////////////////////////////////////////
commit:407e52d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.ClientPooledConnection;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * The constructor for the NetPreparedStatement class. Called by abstract
1:      * Connection.prepareStatment().newPreparedStatement()
1:      * for jdbc 2 prepared statements with scroll attributes.
1:      * It has the ClientPooledConnection as one of its parameters
1:      * this is used to raise the Statement Events when the prepared
1:      * statement is closed.
1:      *
0:      * @param agent The instance of NetAgent associated with this
1:      *              CallableStatement object.
0:      * @param netNonnection The connection object associated with this
1:      *                      PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement
1:      *                    to be sent to the database.
1:      * @param type        One of the ResultSet type constants.
1:      * @param concurrency One of the ResultSet concurrency constants.
1:      * @param holdability One of the ResultSet holdability constants.
1:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:      *                          keys should be returned.
1:      * @param columnNames A String array of column names indicating
1:      *                    the columns that should be returned
1:      *                    from the inserted row or rows.
1:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:      *            connection associated with this prepared statement
1:      *            it is used to pass the Statement closed and the Statement
1:      *            error occurred events that occur back to the
1:      *            ClientPooledConnection.
0:      * @returns a PreparedStatement object
1:      * @throws SqlException
1:      *
1:      */
0:     NetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames, ClientPooledConnection cpc) throws SqlException {
0:                 autoGeneratedKeys, columnNames, cpc),
1:                 netConnection
1:                 );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * The constructor for the NetPreparedStatement class. For JDBC 3.0 
1:      * positioned updates.It has the ClientPooledConnection as one of 
1:      * its parameters this is used to raise the Statement Events when the 
1:      * prepared statement is closed.
1:      *
0:      * @param agent The instance of NetAgent associated with this
1:      *              CallableStatement object.
0:      * @param netNonnection The connection object associated with this 
1:      *                      PreparedStatement Object. 
1:      * @param sql           A String object that is the SQL statement to be 
1:      *                      sent to the database.
0:      * @param section Section
1:      * @param cpc The ClientPooledConnection wraps the underlying physical 
1:      *            connection associated with this prepared statement 
1:      *            it is used to pass the Statement closed and the Statement 
1:      *            error occurred events that occur back to the 
1:      *            ClientPooledConnection
1:      * @throws SqlException
1:      *
1:      */
1:                          Section section,ClientPooledConnection cpc) 
1:                          throws SqlException {
1:                 netConnection, sql, section,cpc),
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b52081a
/////////////////////////////////////////////////////////////////////////
1:      * @param columnIndexes An int array of column indexes indicating
1:      *                    the column that should be returned from 
1:      *                    the inserted row.                   
/////////////////////////////////////////////////////////////////////////
1:     NetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames, 
1:             int[] columnIndexes,  ClientPooledConnection cpc) throws SqlException {
1:                 autoGeneratedKeys, columnNames, columnIndexes, cpc),
1:     void resetNetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames, 
1:             int[] columnIndexes) throws SqlException {
1:         preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, 
1:                 columnNames, columnIndexes);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9ec13b2
/////////////////////////////////////////////////////////////////////////
1:      * @param netAgent The instance of NetAgent associated with this
1:      * @param netConnection The connection object associated with this
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param netAgent The instance of NetAgent associated with this
1:      * @param netConnection The connection object associated with this 
1:      * @param section
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDriver;
0: import org.apache.derby.client.am.ClientJDBCObjectFactory;
/////////////////////////////////////////////////////////////////////////
1:         this(ClientDriver.getFactory().newPreparedStatement(netAgent,
1:                 netConnection, sql, type, concurrency, holdability,
0:                 autoGeneratedKeys, columnNames),
/////////////////////////////////////////////////////////////////////////
1:         this(ClientDriver.getFactory().newPreparedStatement(netAgent,
0:                 netConnection, sql, section),
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Section;
0:         implements org.apache.derby.client.am.MaterialPreparedStatement {
1:     // Alias for (NetPreparedStatement) super.statement.
1:     /*final*/
0:     org.apache.derby.client.am.PreparedStatement preparedStatement_;
1:     // Relay constructor for NetCallableStatement.
0:     NetPreparedStatement(org.apache.derby.client.am.PreparedStatement statement,
1:                          NetAgent netAgent,
1:                          NetConnection netConnection) {
1:         super(statement, netAgent, netConnection);
1:         initNetPreparedStatement(statement);
1:     }
0:     void resetNetPreparedStatement(org.apache.derby.client.am.PreparedStatement statement,
1:                                    NetAgent netAgent,
1:                                    NetConnection netConnection) {
1:         super.resetNetStatement(statement, netAgent, netConnection);
1:         initNetPreparedStatement(statement);
1:     }
0:     private void initNetPreparedStatement(org.apache.derby.client.am.PreparedStatement statement) {
1:         preparedStatement_ = statement;
1:         preparedStatement_.materialPreparedStatement_ = this;
1:     }
0:     // Called by abstract Connection.prepareStatment().newPreparedStatement() for jdbc 2 prepared statements
0:     // with scroll attributes.
0:     NetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames) throws SqlException {
0:         this(new PreparedStatement(netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, columnNames),
1:                 netAgent,
1:                 netConnection);
1:     }
0:     void resetNetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames) throws SqlException {
0:         preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, columnNames);
1:         resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
1:     }
0:     // For JDBC 3.0 positioned updates.
1:     NetPreparedStatement(NetAgent netAgent,
1:                          NetConnection netConnection,
1:                          String sql,
0:                          Section section) throws SqlException {
0:         this(new PreparedStatement(netAgent, netConnection, sql, section),
1:                 netAgent,
1:                 netConnection);
1:     }
0:     void resetNetPreparedStatement(NetAgent netAgent,
1:                                    NetConnection netConnection,
1:                                    String sql,
0:                                    Section section) throws SqlException {
0:         preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, section);
1:         resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
1:     }
0:     void resetNetPreparedStatement(NetAgent netAgent,
1:                                    NetConnection netConnection,
1:                                    String sql,
0:                                    Section section,
1:                                    ColumnMetaData parameterMetaData,
0:                                    ColumnMetaData resultSetMetaData) throws SqlException {
0:         preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, section, parameterMetaData, resultSetMetaData);
0:         this.resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
1:     }
0:     protected void finalize() throws java.lang.Throwable {
0:         super.finalize();
1:     }
1:     public void writeExecute_(Section section,
1:                               Object[] inputs,
1:                               int numInputColumns,
1:                               boolean outputExpected,
1:                               // This is a hint to the material layer that more write commands will follow.
1:                               // It is ignored by the driver in all cases except when blob data is written,
1:                               // in which case this boolean is used to optimize the implementation.
1:                               // Otherwise we wouldn't be able to chain after blob data is sent.
1:                               // If we could always chain a no-op DDM after every execute that writes blobs
1:                               // then we could just always set the chaining flag to on for blob send data
1:                               boolean chainedWritesFollowingSetLob) throws SqlException {
1:         netAgent_.statementRequest_.writeExecute(this,
1:                 section,
1:                 parameterMetaData,
1:                 inputs,
1:                 numInputColumns,
1:                 outputExpected,
1:                 chainedWritesFollowingSetLob);
1:     }
1:     public void readExecute_() throws SqlException {
1:         netAgent_.statementReply_.readExecute(preparedStatement_);
1:     }
1: 
1:     public void writeOpenQuery_(Section section,
1:                                 int fetchSize,
1:                                 int resultSetType,
1:                                 int numInputColumns,
1:                                 ColumnMetaData parameterMetaData,
1:                                 Object[] inputs) throws SqlException {
1:         netAgent_.statementRequest_.writeOpenQuery(this,
1:                 section,
1:                 fetchSize,
1:                 resultSetType,
1:                 numInputColumns,
1:                 parameterMetaData,
1:                 inputs);
1:     }
1:     // super.readOpenQuery()
1: 
1:     public void writeDescribeInput_(Section section) throws SqlException {
1:         netAgent_.statementRequest_.writeDescribeInput(this, section);
1:     }
1: 
1:     public void readDescribeInput_() throws SqlException {
1:         netAgent_.statementReply_.readDescribeInput(preparedStatement_);
1:     }
1: 
0:     public void writeDescribeOutput_(Section section) throws SqlException {
0:         netAgent_.statementRequest_.writeDescribeOutput(this, section);
1:     }
1: 
0:     public void readDescribeOutput_() throws SqlException {
0:         netAgent_.statementReply_.readDescribeOutput(preparedStatement_);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetPreparedStatement
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.ColumnMetaData;
0: import org.apache.derby.client.am.PreparedStatement;
1: import org.apache.derby.client.am.SqlException;
1: 
1: 
0: public class NetPreparedStatement extends NetStatement
0:   implements org.apache.derby.client.am.MaterialPreparedStatement
0: {
1: 
0:   // Alias for (NetPreparedStatement) super.statement.
0:   /*final*/ org.apache.derby.client.am.PreparedStatement preparedStatement_;
1: 
1: 
0:   // Relay constructor for NetCallableStatement.
0:   NetPreparedStatement (org.apache.derby.client.am.PreparedStatement statement,
0:                        NetAgent netAgent,
0:                        NetConnection netConnection)
0:   {
0:     super (statement, netAgent, netConnection);
0:     initNetPreparedStatement (statement);
0:   }
1: 
0:   void resetNetPreparedStatement (org.apache.derby.client.am.PreparedStatement statement,
0:                                  NetAgent netAgent,
0:                                  NetConnection netConnection)
0:   {
0:     super.resetNetStatement(statement, netAgent, netConnection);
0:     initNetPreparedStatement(statement);
0:   }
1: 
0:   private void initNetPreparedStatement (org.apache.derby.client.am.PreparedStatement statement)
0:   {
0:     preparedStatement_ = statement;
0:     preparedStatement_.materialPreparedStatement_ = this;
0:   }
1: 
0:   // Called by abstract Connection.prepareStatment().newPreparedStatement() for jdbc 2 prepared statements
0:   // with scroll attributes.
0:   NetPreparedStatement (NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames) throws SqlException
0:   {
0:     this (new PreparedStatement (netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, columnNames),
0:           netAgent,
0:           netConnection);
0:   }
1: 
0:   void resetNetPreparedStatement (NetAgent netAgent, NetConnection netConnection, String sql, int type, int concurrency, int holdability, int autoGeneratedKeys, String[] columnNames) throws SqlException
0:   {
0:     preparedStatement_.resetPreparedStatement(netAgent, netConnection, sql, type, concurrency, holdability, autoGeneratedKeys, columnNames);
0:     resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
0:   }
1: 
0:   // For JDBC 3.0 positioned updates.
0:   NetPreparedStatement (NetAgent netAgent,
0:                        NetConnection netConnection,
0:                        String sql,
0:                        Section section) throws SqlException
0:   {
0:     this (new PreparedStatement (netAgent, netConnection, sql, section),
0:           netAgent,
0:           netConnection);
0:   }
1: 
0:   void resetNetPreparedStatement (NetAgent netAgent,
0:                                  NetConnection netConnection,
0:                                  String sql,
0:                                  Section section) throws SqlException
0:   {
0:     preparedStatement_.resetPreparedStatement (netAgent, netConnection, sql, section);
0:     resetNetPreparedStatement (preparedStatement_, netAgent, netConnection);
0:   }
1: 
0:   void resetNetPreparedStatement (NetAgent netAgent,
0:                                  NetConnection netConnection,
0:                                  String sql,
0:                                  Section section,
0:                                  ColumnMetaData parameterMetaData,
0:                                  ColumnMetaData resultSetMetaData) throws SqlException
0:   {
0:     preparedStatement_.resetPreparedStatement(netAgent,netConnection,sql,section,parameterMetaData,resultSetMetaData);
0:     this.resetNetPreparedStatement(preparedStatement_, netAgent, netConnection);
0:   }
1: 
0:   protected void finalize () throws java.lang.Throwable
0:   {
0:     super.finalize();
0:   }
1: 
0:   public void writeExecute_ (Section section,
0:                             ColumnMetaData parameterMetaData,
0:                             Object[] inputs,
0:                             int numInputColumns,
0:                             boolean outputExpected,
0:                             // This is a hint to the material layer that more write commands will follow.
0:                             // It is ignored by the driver in all cases except when blob data is written,
0:                             // in which case this boolean is used to optimize the implementation.
0:                             // Otherwise we wouldn't be able to chain after blob data is sent.
0:                             // If we could always chain a no-op DDM after every execute that writes blobs
0:                             // then we could just always set the chaining flag to on for blob send data 
0:                             boolean chainedWritesFollowingSetLob
0:                             ) throws SqlException
0:   {
0:     netAgent_.statementRequest_.writeExecute (
0:       this,
0:       section,
0:       parameterMetaData,
0:       inputs,
0:       numInputColumns,
0:       outputExpected,
0:       chainedWritesFollowingSetLob);
0:   }
1: 
1: 
0:   public void readExecute_ () throws SqlException
0:   { netAgent_.statementReply_.readExecute (preparedStatement_); }
1: 
0:   public void writeOpenQuery_ (Section section,
0:                               int fetchSize,
0:                               int resultSetType,
0:                               int numInputColumns,
0:                               ColumnMetaData parameterMetaData,
0:                               Object[] inputs) throws SqlException
0:   {
0:     netAgent_.statementRequest_.writeOpenQuery (
0:       this,
0:       section,
0:       fetchSize,
0:       resultSetType,
0:       numInputColumns,
0:       parameterMetaData,
0:       inputs);
0:   }
0:   // super.readOpenQuery()
1: 
0:   public void writeDescribeInput_ (Section section) throws SqlException
0:   { netAgent_.statementRequest_.writeDescribeInput (this, section); }
0:   public void readDescribeInput_ () throws SqlException
0:   { netAgent_.statementReply_.readDescribeInput (preparedStatement_); }
1: 
0:   public void writeDescribeOutput_ (Section section) throws SqlException
0:   { netAgent_.statementRequest_.writeDescribeOutput (this, section); }
0:   public void readDescribeOutput_ () throws SqlException
0:   { netAgent_.statementReply_.readDescribeOutput (preparedStatement_); }
0: }
============================================================================