1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.ParameterValueSet
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:fe77ca5: 
6:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: 
1:7736829: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:fe77ca5: import org.apache.derby.iapi.types.DataValueDescriptor;
1:fe77ca5: 
6:fe77ca5: /**
1:fe77ca5:  * A ParameterValueSet is a set of parameter values that can be assembled by a
1:fe77ca5:  * JDBC driver and passed to a PreparedStatement all at once. The fact that
1:fe77ca5:  * they are all passed at once can reduce the communication overhead between
1:fe77ca5:  * client and server.
9:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: public interface ParameterValueSet
1:fe77ca5: {
1:7736829: 	/**
1:7736829: 	 * Initialize the parameter set by allocating DataValueDescriptor
1:7736829: 	 * corresponding to the passed in type for each parameter.
1:7736829: 	 * @param types expected to match the number of parameters.
1:7736829: 	 */
1:dbfbecb: 	void initialize(DataTypeDescriptor[] types) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Set the mode of the parameter, called when setting up static method calls and stored procedures.
1:fe77ca5: 		Otherwise the parameter type will default to an IN parameter.
1:fe77ca5: 	*/
1:fe77ca5:     void setParameterMode(int position, int mode);
1:fe77ca5: 
1:fe77ca5: 	//////////////////////////////////////////////////////////////////
1:fe77ca5: 	//
1:fe77ca5: 	// CALLABLE STATEMENT
1:fe77ca5: 	//
1:fe77ca5: 	//////////////////////////////////////////////////////////////////
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Mark the parameter as an output parameter.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param parameterIndex	The ordinal position of a parameter to set
1:fe77ca5: 	 *			to the given value.
1:fe77ca5: 	 * @param sqlType	A type from java.sql.Types
1:fe77ca5: 	 * @param scale		the scale to use.  -1 means ignore scale
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException on error
1:fe77ca5: 	 */
1:fe77ca5: 	void registerOutParameter(int parameterIndex, int sqlType, int scale)
1:fe77ca5: 		throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	//////////////////////////////////////////////////////////////////
1:fe77ca5: 	//
1:fe77ca5: 	// MISC STATEMENT
1:fe77ca5: 	//
1:fe77ca5: 	//////////////////////////////////////////////////////////////////
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Sets all parameters to an uninitialized state. An exception will be
1:fe77ca5: 	 * thrown if the caller tries to execute a PreparedStatement when one
1:fe77ca5: 	 * or more parameters is uninitialized (i.e. has not had
1:fe77ca5: 	 * setParameterValue() called on it.
1:fe77ca5: 	 */
1:fe77ca5: 	void	clearParameters();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the number of parameters in this set.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The number of parameters in this set.
1:fe77ca5: 	 */
1:fe77ca5: 	public	int	getParameterCount();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the parameter at the given position.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The parameter at the given position.
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:fe77ca5: 	public DataValueDescriptor getParameter( int position ) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the parameter at the given position in order to set it.
1:fe77ca5: 	   Setting via an unknown object type must use setParameterAsObject()
1:fe77ca5: 	   to ensure correct typing.
1:fe77ca5: 
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The parameter at the given position.
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:fe77ca5: 	public DataValueDescriptor getParameterForSet( int position ) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:45075cc: 		Set the value of this user defined parameter to the passed in Object.
1:fe77ca5: 		
1:fe77ca5: 		  @exception StandardException		Thrown on error
1:fe77ca5: 	*/
1:fe77ca5: 	void setParameterAsObject(int parameterIndex, Object value) throws StandardException;
1:fe77ca5: 	
1:698e318: 	/**
1:698e318: 	 * Get the DataValueDescriptor for an INOUT or OUT parameter.
1:698e318: 	 * @param position Zero based index of the parameter.
1:698e318: 	 * @return Parameter's value holder.
1:698e318: 	 * @throws StandardException Position out of range or the parameter is not INOUT or OUT.
1:698e318: 	 */
1:fe77ca5: 	public DataValueDescriptor getParameterForGet( int position ) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Tells whether all the parameters are set and ready for execution.
1:698e318: 	   OUT are not required to be set.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	true if all parameters are set, false if at least one
1:fe77ca5: 	 *			parameter is not set.
1:fe77ca5: 	 */
1:fe77ca5: 	boolean	allAreSet();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Clone the ParameterValueSet and its contents.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return ParameterValueSet	A clone of the ParameterValueSet and its contents.
1:fe77ca5: 	 */
1:9495437: 	ParameterValueSet getClone();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Validate the parameters.  This is done for situations where
1:fe77ca5: 	 * we cannot validate everything in the setXXX() calls.  In
1:fe77ca5: 	 * particular, before we do an execute() on a CallableStatement,
1:fe77ca5: 	 * we need to go through the parameters and make sure that
1:fe77ca5: 	 * all parameters are set up properly.  The motivator for this
1:fe77ca5: 	 * is that setXXX() can be called either before or after 
1:fe77ca5: 	 * registerOutputParamter(), we cannot be sure we have the types
1:fe77ca5: 	 * correct until we get to execute().
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException if the parameters aren't valid
1:fe77ca5: 	 */
1:fe77ca5: 	void validate() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Is there a return output parameter in this pvs.  A return
1:fe77ca5: 	 * parameter is from a CALL statement of the following
1:fe77ca5: 	 * syntax: ? = CALL myMethod().  Note that a return
1:fe77ca5: 	 * output parameter is NOT the same thing as an output
1:fe77ca5: 	 * parameter; it is a special type of output parameter.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return true if it has a return parameter
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:fe77ca5: 	public boolean hasReturnOutputParameter();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Check that there are not output parameters defined
1:fe77ca5: 		by the parameter set. If there are unknown parameter
1:3fd26f3: 		types they are forced to input types. i.e. Derby static method
1:fe77ca5: 		calls with parameters that are array.
1:fe77ca5: 
1:fe77ca5: 		@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
1:fe77ca5: 	*/
1:fe77ca5: 	public boolean checkNoDeclaredOutputParameters();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the parameter values of the pvstarget to equal those 
1:fe77ca5: 	 * set in this PVS.
1:fe77ca5: 	 * Used to transfer saved SPS parameters to the actual
1:fe77ca5: 	 * prepared statement parameters  once associated parameters 
1:fe77ca5: 	 * have been established.  Assumes pvstarget is the same 
1:fe77ca5: 	 * length as this.
1:fe77ca5: 	 * @param pvstarget ParameterValueSet which will recieve the values
1:fe77ca5: 
1:fe77ca5: 		@exception StandardException values not compatible
1:fe77ca5: 	 **/
1:fe77ca5: 	public void transferDataValues(ParameterValueSet pvstarget) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return the mode of the parameter according to JDBC 3.0 ParameterMetaData
1:fe77ca5: 		
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:fe77ca5: 	public short getParameterMode(int parameterIndex);
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5:     /**
1:698e318:      * Get the value of the return parameter in order to set it.
1:fe77ca5:      *
1:fe77ca5:      *
2:fe77ca5:      * @exception StandardException if a database-access error occurs.
1:fe77ca5:      */
1:698e318: 	DataValueDescriptor getReturnValueForSet() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the scale of the given parameter index in this pvs.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return scale
1:fe77ca5: 	 */
1:fe77ca5: 	public int getScale(int parameterIndex);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the precision of the given parameter index in this pvs.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return precision
1:fe77ca5: 	 */
1:fe77ca5: 	public int getPrecision(int parameterIndex);
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: }
1:fe77ca5: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
1: 	ParameterValueSet getClone();
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0: 	ParameterValueSet getClone() throws StandardException;
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:dbfbecb
/////////////////////////////////////////////////////////////////////////
1: 	void initialize(DataTypeDescriptor[] types) throws StandardException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		types they are forced to input types. i.e. Derby static method
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:698e318
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get the DataValueDescriptor for an INOUT or OUT parameter.
1: 	 * @param position Zero based index of the parameter.
1: 	 * @return Parameter's value holder.
1: 	 * @throws StandardException Position out of range or the parameter is not INOUT or OUT.
1: 	 */
1: 	   OUT are not required to be set.
/////////////////////////////////////////////////////////////////////////
1:      * Get the value of the return parameter in order to set it.
1: 	DataValueDescriptor getReturnValueForSet() throws StandardException;
commit:45075cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		Set the value of this user defined parameter to the passed in Object.
commit:7736829
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Initialize the parameter set by allocating DataValueDescriptor
1: 	 * corresponding to the passed in type for each parameter.
1: 	 * @param types expected to match the number of parameters.
1: 	 */
0: 	void initialize(DataTypeDescriptor[] types);
commit:1260b94
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.ParameterValueSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1:  * A ParameterValueSet is a set of parameter values that can be assembled by a
1:  * JDBC driver and passed to a PreparedStatement all at once. The fact that
1:  * they are all passed at once can reduce the communication overhead between
1:  * client and server.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: public interface ParameterValueSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 
1: 	/**
1: 		Set the mode of the parameter, called when setting up static method calls and stored procedures.
1: 		Otherwise the parameter type will default to an IN parameter.
1: 	*/
1:     void setParameterMode(int position, int mode);
1: 
1: 	/**
0: 	 * Set a parameter position to a DataValueDescriptor.
1: 	 *
0: 	 * NOTE: This method assumes the caller will not pass a position that's
0: 	 * out of range.  The implementation may have an assertion that the position
0: 	 * is in range.
1: 	 *
0: 	 * @param sdv		The DataValueDescriptor to set
0: 	 * @param position	The parameter position to set it at
0: 	 * @param jdbcTypeId    The corresponding JDBC types from java.sql.Types
0: 	 * @param className  The declared class name for the type.
1: 	 */
1: 
0: 	void setStorableDataValue(DataValueDescriptor sdv, int position, int jdbcTypeId, String className);
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	// CALLABLE STATEMENT
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Mark the parameter as an output parameter.
1: 	 *
1: 	 * @param parameterIndex	The ordinal position of a parameter to set
1: 	 *			to the given value.
1: 	 * @param sqlType	A type from java.sql.Types
1: 	 * @param scale		the scale to use.  -1 means ignore scale
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void registerOutParameter(int parameterIndex, int sqlType, int scale)
1: 		throws StandardException;
1: 
1: 
1:     /**
0:      * Get the value of a parameter as a Java object.
1:      *
0:      * <p>This method returns a Java object whose type coresponds to the SQL
0:      * type that was registered for this parameter using registerOutParameter.
1:      *
0:      * <p>Note that this method may be used to read
0:      * datatabase-specific, abstract data types. This is done by
0:      * specifying a targetSqlType of java.sql.types.OTHER, which
0:      * allows the driver to return a database-specific Java type.
1:      *
0:      * @param parameterIndex The first parameter is 1, the second is 2, ...
0:      * @return A java.lang.Object holding the OUT parameter value.
1:      * @exception StandardException if a database-access error occurs.
0:      * @see java.sql.Types 
1:      */
0:     Object getObject(int parameterIndex) throws StandardException;
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	// MISC STATEMENT
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Sets all parameters to an uninitialized state. An exception will be
1: 	 * thrown if the caller tries to execute a PreparedStatement when one
1: 	 * or more parameters is uninitialized (i.e. has not had
1: 	 * setParameterValue() called on it.
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 	void	clearParameters();
1: 
1: 	/**
1: 	 * Returns the number of parameters in this set.
1: 	 *
1: 	 * @return	The number of parameters in this set.
1: 	 */
1: 	public	int	getParameterCount();
1: 
1: 	/**
1: 	 * Returns the parameter at the given position.
1: 	 *
1: 	 * @return	The parameter at the given position.
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public DataValueDescriptor getParameter( int position ) throws StandardException;
1: 
1: 
1: 	/**
1: 	 * Returns the parameter at the given position in order to set it.
1: 	   Setting via an unknown object type must use setParameterAsObject()
1: 	   to ensure correct typing.
1: 
1: 	 *
1: 	 * @return	The parameter at the given position.
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public DataValueDescriptor getParameterForSet( int position ) throws StandardException;
1: 
1: 	/**
0: 		Set the value of this parameter to the passed in Object.
1: 		
0: 		  @return	The parameter at the given position.
1: 		  @exception StandardException		Thrown on error
1: 	*/
1: 	void setParameterAsObject(int parameterIndex, Object value) throws StandardException;
1: 	
1: 	
1: 	public DataValueDescriptor getParameterForGet( int position ) throws StandardException;
1: 
1: 	/**
1: 	 * Tells whether all the parameters are set and ready for execution.
0: 	   OUT and Cloudscape static method INOUT parameters are not required to be set.
1: 	 *
1: 	 * @return	true if all parameters are set, false if at least one
1: 	 *			parameter is not set.
1: 	 */
1: 	boolean	allAreSet();
1: 
1: 	/**
1: 	 * Clone the ParameterValueSet and its contents.
1: 	 *
1: 	 * @return ParameterValueSet	A clone of the ParameterValueSet and its contents.
1: 	 */
0: 	ParameterValueSet getClone();
1: 
1: 	/**
1: 	 * Validate the parameters.  This is done for situations where
1: 	 * we cannot validate everything in the setXXX() calls.  In
1: 	 * particular, before we do an execute() on a CallableStatement,
1: 	 * we need to go through the parameters and make sure that
1: 	 * all parameters are set up properly.  The motivator for this
1: 	 * is that setXXX() can be called either before or after 
1: 	 * registerOutputParamter(), we cannot be sure we have the types
1: 	 * correct until we get to execute().
1: 	 *
1: 	 * @exception StandardException if the parameters aren't valid
1: 	 */
1: 	void validate() throws StandardException;
1: 
1: 	/**
1: 	 * Is there a return output parameter in this pvs.  A return
1: 	 * parameter is from a CALL statement of the following
1: 	 * syntax: ? = CALL myMethod().  Note that a return
1: 	 * output parameter is NOT the same thing as an output
1: 	 * parameter; it is a special type of output parameter.
1: 	 *
1: 	 * @return true if it has a return parameter
1: 	 *
1: 	 */
1: 	public boolean hasReturnOutputParameter();
1: 
1: 	/**
1: 		Check that there are not output parameters defined
1: 		by the parameter set. If there are unknown parameter
0: 		types they are forced to input types. i.e. Cloudscape static method
1: 		calls with parameters that are array.
1: 
1: 		@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
1: 	*/
1: 	public boolean checkNoDeclaredOutputParameters();
1: 
1: 
0: 	// bug 4552 - "exec statement using" will return no parameters through parametermetadata
1: 	/**
0: 	 * Is this pvs for using clause.
1: 	 *
0: 	 * @return true if it has a output parameter
1: 	 *
1: 	 */
0: 	public boolean isUsingParameterValueSet();
1: 
0: 	// bug 4552 - "exec statement using" will return no parameters through parametermetadata
1: 	/**
0: 	 * Setthis pvs for using clause.
1: 	 */
0: 	public void setUsingParameterValueSet();
1: 
1: 	/**
1: 	 * Set the parameter values of the pvstarget to equal those 
1: 	 * set in this PVS.
1: 	 * Used to transfer saved SPS parameters to the actual
1: 	 * prepared statement parameters  once associated parameters 
1: 	 * have been established.  Assumes pvstarget is the same 
1: 	 * length as this.
1: 	 * @param pvstarget ParameterValueSet which will recieve the values
1: 
1: 		@exception StandardException values not compatible
1: 	 **/
1: 	public void transferDataValues(ParameterValueSet pvstarget) throws StandardException;
1: 
1: 	/**
1: 		Return the mode of the parameter according to JDBC 3.0 ParameterMetaData
1: 		
1: 	 *
1: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1: 	 *
1: 	 */
1: 	public short getParameterMode(int parameterIndex);
1: 
1: 
1:     /**
0:      * Set the value of the return parameter as a Java object.
1:      *
0:      * @param value the return value
1:      *
1:      * @exception StandardException if a database-access error occurs.
1:      */
0: 	void setReturnValue(Object value) throws StandardException;
1: 
1: 	/**
1: 	 * Return the scale of the given parameter index in this pvs.
1: 	 *
1: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1: 	 *
1: 	 * @return scale
1: 	 */
1: 	public int getScale(int parameterIndex);
1: 
1: 	/**
1: 	 * Return the precision of the given parameter index in this pvs.
1: 	 *
1: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
1: 	 *
1: 	 * @return precision
1: 	 */
1: 	public int getPrecision(int parameterIndex);
1: 
1: 
1: }
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: /**
0:  * A ParameterValueSet is a set of parameter values that can be assembled by a
0:  * JDBC driver and passed to a PreparedStatement all at once. The fact that
0:  * they are all passed at once can reduce the communication overhead between
0:  * client and server.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: public interface ParameterValueSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 
0: 	/**
0: 		Set the mode of the parameter, called when setting up static method calls and stored procedures.
0: 		Otherwise the parameter type will default to an IN parameter.
0: 	*/
0:     void setParameterMode(int position, int mode);
0: 
0: 	/**
0: 	 * Set a parameter position to a DataValueDescriptor.
0: 	 *
0: 	 * NOTE: This method assumes the caller will not pass a position that's
0: 	 * out of range.  The implementation may have an assertion that the position
0: 	 * is in range.
0: 	 *
0: 	 * @param sdv		The DataValueDescriptor to set
0: 	 * @param position	The parameter position to set it at
0: 	 * @param jdbcTypeId    The corresponding JDBC types from java.sql.Types
0: 	 * @param className  The declared class name for the type.
0: 	 */
0: 
0: 	void setStorableDataValue(DataValueDescriptor sdv, int position, int jdbcTypeId, String className);
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	// CALLABLE STATEMENT
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Mark the parameter as an output parameter.
0: 	 *
0: 	 * @param parameterIndex	The ordinal position of a parameter to set
0: 	 *			to the given value.
0: 	 * @param sqlType	A type from java.sql.Types
0: 	 * @param scale		the scale to use.  -1 means ignore scale
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void registerOutParameter(int parameterIndex, int sqlType, int scale)
0: 		throws StandardException;
0: 
0: 
0:     /**
0:      * Get the value of a parameter as a Java object.
0:      *
0:      * <p>This method returns a Java object whose type coresponds to the SQL
0:      * type that was registered for this parameter using registerOutParameter.
0:      *
0:      * <p>Note that this method may be used to read
0:      * datatabase-specific, abstract data types. This is done by
0:      * specifying a targetSqlType of java.sql.types.OTHER, which
0:      * allows the driver to return a database-specific Java type.
0:      *
0:      * @param parameterIndex The first parameter is 1, the second is 2, ...
0:      * @return A java.lang.Object holding the OUT parameter value.
0:      * @exception StandardException if a database-access error occurs.
0:      * @see java.sql.Types 
0:      */
0:     Object getObject(int parameterIndex) throws StandardException;
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	// MISC STATEMENT
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Sets all parameters to an uninitialized state. An exception will be
0: 	 * thrown if the caller tries to execute a PreparedStatement when one
0: 	 * or more parameters is uninitialized (i.e. has not had
0: 	 * setParameterValue() called on it.
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 	void	clearParameters();
0: 
0: 	/**
0: 	 * Returns the number of parameters in this set.
0: 	 *
0: 	 * @return	The number of parameters in this set.
0: 	 */
0: 	public	int	getParameterCount();
0: 
0: 	/**
0: 	 * Returns the parameter at the given position.
0: 	 *
0: 	 * @return	The parameter at the given position.
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataValueDescriptor getParameter( int position ) throws StandardException;
0: 
0: 
0: 	/**
0: 	 * Returns the parameter at the given position in order to set it.
0: 	   Setting via an unknown object type must use setParameterAsObject()
0: 	   to ensure correct typing.
0: 
0: 	 *
0: 	 * @return	The parameter at the given position.
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataValueDescriptor getParameterForSet( int position ) throws StandardException;
0: 
0: 	/**
0: 		Set the value of this parameter to the passed in Object.
0: 		
0: 		  @return	The parameter at the given position.
0: 		  @exception StandardException		Thrown on error
0: 	*/
0: 	void setParameterAsObject(int parameterIndex, Object value) throws StandardException;
0: 	
0: 	
0: 	public DataValueDescriptor getParameterForGet( int position ) throws StandardException;
0: 
0: 	/**
0: 	 * Tells whether all the parameters are set and ready for execution.
0: 	   OUT and Cloudscape static method INOUT parameters are not required to be set.
0: 	 *
0: 	 * @return	true if all parameters are set, false if at least one
0: 	 *			parameter is not set.
0: 	 */
0: 	boolean	allAreSet();
0: 
0: 	/**
0: 	 * Clone the ParameterValueSet and its contents.
0: 	 *
0: 	 * @return ParameterValueSet	A clone of the ParameterValueSet and its contents.
0: 	 */
0: 	ParameterValueSet getClone();
0: 
0: 	/**
0: 	 * Validate the parameters.  This is done for situations where
0: 	 * we cannot validate everything in the setXXX() calls.  In
0: 	 * particular, before we do an execute() on a CallableStatement,
0: 	 * we need to go through the parameters and make sure that
0: 	 * all parameters are set up properly.  The motivator for this
0: 	 * is that setXXX() can be called either before or after 
0: 	 * registerOutputParamter(), we cannot be sure we have the types
0: 	 * correct until we get to execute().
0: 	 *
0: 	 * @exception StandardException if the parameters aren't valid
0: 	 */
0: 	void validate() throws StandardException;
0: 
0: 	/**
0: 	 * Is there a return output parameter in this pvs.  A return
0: 	 * parameter is from a CALL statement of the following
0: 	 * syntax: ? = CALL myMethod().  Note that a return
0: 	 * output parameter is NOT the same thing as an output
0: 	 * parameter; it is a special type of output parameter.
0: 	 *
0: 	 * @return true if it has a return parameter
0: 	 *
0: 	 */
0: 	public boolean hasReturnOutputParameter();
0: 
0: 	/**
0: 		Check that there are not output parameters defined
0: 		by the parameter set. If there are unknown parameter
0: 		types they are forced to input types. i.e. Cloudscape static method
0: 		calls with parameters that are array.
0: 
0: 		@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.
0: 	*/
0: 	public boolean checkNoDeclaredOutputParameters();
0: 
0: 
0: 	// bug 4552 - "exec statement using" will return no parameters through parametermetadata
0: 	/**
0: 	 * Is this pvs for using clause.
0: 	 *
0: 	 * @return true if it has a output parameter
0: 	 *
0: 	 */
0: 	public boolean isUsingParameterValueSet();
0: 
0: 	// bug 4552 - "exec statement using" will return no parameters through parametermetadata
0: 	/**
0: 	 * Setthis pvs for using clause.
0: 	 */
0: 	public void setUsingParameterValueSet();
0: 
0: 	/**
0: 	 * Set the parameter values of the pvstarget to equal those 
0: 	 * set in this PVS.
0: 	 * Used to transfer saved SPS parameters to the actual
0: 	 * prepared statement parameters  once associated parameters 
0: 	 * have been established.  Assumes pvstarget is the same 
0: 	 * length as this.
0: 	 * @param pvstarget ParameterValueSet which will recieve the values
0: 
0: 		@exception StandardException values not compatible
0: 	 **/
0: 	public void transferDataValues(ParameterValueSet pvstarget) throws StandardException;
0: 
0: 	/**
0: 		Return the mode of the parameter according to JDBC 3.0 ParameterMetaData
0: 		
0: 	 *
0: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
0: 	 *
0: 	 */
0: 	public short getParameterMode(int parameterIndex);
0: 
0: 
0:     /**
0:      * Set the value of the return parameter as a Java object.
0:      *
0:      * @param value the return value
0:      *
0:      * @exception StandardException if a database-access error occurs.
0:      */
0: 	void setReturnValue(Object value) throws StandardException;
0: 
0: 	/**
0: 	 * Return the scale of the given parameter index in this pvs.
0: 	 *
0: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
0: 	 *
0: 	 * @return scale
0: 	 */
0: 	public int getScale(int parameterIndex);
0: 
0: 	/**
0: 	 * Return the precision of the given parameter index in this pvs.
0: 	 *
0: 	 * @param parameterIndex the first parameter is 1, the second is 2, ...
0: 	 *
0: 	 * @return precision
0: 	 */
0: 	public int getPrecision(int parameterIndex);
0: 
0: 
0: }
0: 
============================================================================