2:2fb9556: /*
2:2fb9556: 
1:2fb9556:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1:2fb9556: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:2fb9556: 
1:2fb9556:       http://www.apache.org/licenses/LICENSE-2.0
1:2fb9556: 
1:2fb9556:    Unless required by applicable law or agreed to in writing, software
1:2fb9556:    distributed under the License is distributed on an "AS IS" BASIS,
1:2fb9556:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2fb9556:    See the License for the specific language governing permissions and
1:2fb9556:    limitations under the License.
1:2fb9556: 
1:2fb9556:  */
1:2fb9556: 
1:2fb9556: package org.apache.derbyTesting.functionTests.tests.store;
1:2fb9556: 
1:2fb9556: import java.sql.Connection;
1:2fb9556: import java.sql.SQLException;
1:2fb9556: import java.sql.Statement;
1:2fb9556: 
1:2fb9556: import org.apache.derby.tools.ij;
1:2fb9556: 
1:81061c3: /**
1:2fb9556:  * This class will do the setup for testing recovery after backup.
1:2fb9556:  * This test will insert some records into a table, do a backup and
1:2fb9556:  * end without shutting down the database.  The succeeding test,
1:2fb9556:  * RecoveryAfterBackup, will then do recovery of the database.
1:2fb9556:  * 
1:2fb9556:  * @see RecoveryAfterBackup
1:2fb9556:  */
1:2fb9556: 
1:2fb9556: public class RecoveryAfterBackupSetup
1:2fb9556: {
1:2fb9556:     
1:2fb9556:     public static void main(String[] argv) throws Throwable 
1:2fb9556:     {
1:2fb9556:         try {
1:2fb9556:             ij.getPropertyArg(argv); 
1:2fb9556:             Connection conn = ij.startJBMS();
1:2fb9556:             conn.setAutoCommit(true);
1:2fb9556: 
1:2fb9556:             System.out.println("Connection has been opened.");
1:2fb9556:             Statement s = conn.createStatement();
1:2fb9556:             try { // Drop table if it exists
1:2fb9556:                 s.execute("DROP TABLE t1");
1:2fb9556:             } catch (SQLException e) {
1:2fb9556:                 if (e.getSQLState().equals("42Y55")) {
1:2fb9556:                     // IGNORE. Table did not exist. That is our target.
1:2fb9556:                 } else {
1:2fb9556:                     throw e;
1:2fb9556:                 }
1:2fb9556:             }
1:2fb9556: 
1:2fb9556:             System.out.println("Creating table and inserting two records.");
1:2fb9556:             s.execute("CREATE TABLE t1(a INT)");
1:2fb9556:             s.execute("INSERT INTO t1 VALUES(0)");
1:2fb9556:             s.execute("INSERT INTO t1 VALUES(1)");
1:2fb9556: 
1:2fb9556:             System.out.println("Performing backup...");
1:2fb9556:             s.execute("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE('extinout/mybackup', 0)");
1:2fb9556:             System.out.println("Backup completed.  Test finished.");
1:2fb9556:         } catch (SQLException sqle) {
1:2fb9556:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:2fb9556:                                                                     sqle);
1:2fb9556:             sqle.printStackTrace(System.out);
1:2fb9556:         }
1:2fb9556:     }
1:2fb9556: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:81061c3
/////////////////////////////////////////////////////////////////////////
1: /**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:2fb9556
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: /*
1:  * This class will do the setup for testing recovery after backup.
1:  * This test will insert some records into a table, do a backup and
1:  * end without shutting down the database.  The succeeding test,
1:  * RecoveryAfterBackup, will then do recovery of the database.
1:  * 
0:  * @author oystein.grovlen@sun.com
1:  * @see RecoveryAfterBackup
1:  */
1: 
1: public class RecoveryAfterBackupSetup
1: {
1:     
1:     public static void main(String[] argv) throws Throwable 
1:     {
1:         try {
1:             ij.getPropertyArg(argv); 
1:             Connection conn = ij.startJBMS();
1:             conn.setAutoCommit(true);
1: 
1:             System.out.println("Connection has been opened.");
1:             Statement s = conn.createStatement();
1:             try { // Drop table if it exists
1:                 s.execute("DROP TABLE t1");
1:             } catch (SQLException e) {
1:                 if (e.getSQLState().equals("42Y55")) {
1:                     // IGNORE. Table did not exist. That is our target.
1:                 } else {
1:                     throw e;
1:                 }
1:             }
1: 
1:             System.out.println("Creating table and inserting two records.");
1:             s.execute("CREATE TABLE t1(a INT)");
1:             s.execute("INSERT INTO t1 VALUES(0)");
1:             s.execute("INSERT INTO t1 VALUES(1)");
1: 
1:             System.out.println("Performing backup...");
1:             s.execute("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE('extinout/mybackup', 0)");
1:             System.out.println("Backup completed.  Test finished.");
1:         } catch (SQLException sqle) {
1:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:                                                                     sqle);
1:             sqle.printStackTrace(System.out);
1:         }
1:     }
1: }
============================================================================