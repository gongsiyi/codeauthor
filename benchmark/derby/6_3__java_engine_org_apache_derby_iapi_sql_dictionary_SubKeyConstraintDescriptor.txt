1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface is used to get information from a SubKeyConstraintDescriptor.
1:eac0369:  * A SubKeyConstraintDescriptor is used within the DataDictionary to 
1:eac0369:  * get auxiliary constraint information from the system table
1:eac0369:  * that is auxiliary to sysconstraints.
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:eac0369: 
1:eac0369: public class SubKeyConstraintDescriptor extends SubConstraintDescriptor
1:eac0369: {
1:eac0369: 	/** Interface for SubKeyConstraintDescriptor is 
1:eac0369: 		<ol>
1:eac0369: 		<li>public UUID getIndexId();</li>
1:eac0369: 		<li>public UUID getKeyConstraintId();</li>
1:eac0369: 		</ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// Implementation
1:eac0369: 	UUID					indexId;
1:eac0369: 	UUID					keyConstraintId;
1:eac0369: 
1:eac0369: 	int                     raDeleteRule; //referential action rule for a DELETE 
1:eac0369: 	int                     raUpdateRule; //referential action rule for a UPDATE
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a SubConstraintDescriptorImpl
1:eac0369: 	 *
1:6b50965: 	 * @param constraintId		The UUID of the constraint.
1:eac0369: 	 * @param indexId			The UUID of the backing index.
1:eac0369: 	 */
1:eac0369: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId)
1:eac0369: 	{
1:eac0369: 		super(constraintId);
1:eac0369: 		this.indexId = indexId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a SubConstraintDescriptor
1:eac0369: 	 *
1:6b50965: 	 * @param constraintId		The UUID of the constraint.
1:eac0369: 	 * @param indexId			The UUID of the backing index.
1:eac0369: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
1:eac0369: 	 */
1:eac0369: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID keyConstraintId)
1:eac0369: 	{
1:eac0369: 		this(constraintId, indexId);
1:eac0369: 		this.keyConstraintId = keyConstraintId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a SubConstraintDescriptor
1:eac0369: 	 *
1:6b50965: 	 * @param constraintId		The UUID of the constraint.
1:eac0369: 	 * @param indexId			The UUID of the backing index.
1:eac0369: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
1:eac0369: 	 * @param raDeleteRule      The referential action for delete
1:eac0369: 	 * @param raUpdateRule      The referential action for update
1:eac0369: 	 */
1:eac0369: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID
1:eac0369: 									  keyConstraintId, int raDeleteRule, int raUpdateRule)
1:eac0369: 	{
1:eac0369: 		this(constraintId, indexId);
1:eac0369: 		this.keyConstraintId = keyConstraintId;
1:eac0369: 		this.raDeleteRule = raDeleteRule;
1:eac0369: 		this.raUpdateRule = raUpdateRule;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the UUID of the backing index.
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID of the backing index.
1:eac0369: 	 */
1:eac0369: 	public UUID	getIndexId()
1:eac0369: 	{
1:eac0369: 		return indexId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the UUID of the referenced key constraint
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID of the referenced key constraint
1:eac0369: 	 */
1:eac0369: 	public UUID	getKeyConstraintId()
1:eac0369: 	{
1:eac0369: 		return keyConstraintId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint have a backing index?
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1:eac0369: 	 */
1:eac0369: 	public boolean hasBackingIndex()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets a referential action rule on a  DELETE
1:eac0369: 	 * @return referential rule defined by the user during foreign key creattion
1:eac0369: 	 * for a delete (like CASCDE , RESTRICT ..etc)
1:eac0369: 	 */
1:eac0369: 	public int	getRaDeleteRule()
1:eac0369: 	{
1:eac0369: 		return raDeleteRule;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Gets a referential action rule on a UPDATE
1:eac0369: 	 * @return referential rule defined by the user during foreign key creattion
1:eac0369: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
1:eac0369: 	 */
1:eac0369: 	public int	getRaUpdateRule()
1:eac0369: 	{
1:eac0369: 		return raUpdateRule;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert the SubKeyConstraintDescriptor to a String.
1:eac0369: 	 *
1:eac0369: 	 * @return	A String representation of this SubConstraintDescriptor
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "indexId: " + indexId + "\n" +
1:eac0369: 				"keyConstraintId: " + keyConstraintId + "\n" +
1:eac0369: 				"raDeleteRule: " + raDeleteRule + "\n" +
1:eac0369: 				"raUpdateRule: " + raUpdateRule + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param constraintId		The UUID of the constraint.
/////////////////////////////////////////////////////////////////////////
1: 	 * @param constraintId		The UUID of the constraint.
/////////////////////////////////////////////////////////////////////////
1: 	 * @param constraintId		The UUID of the constraint.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: 
1: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This interface is used to get information from a SubKeyConstraintDescriptor.
1:  * A SubKeyConstraintDescriptor is used within the DataDictionary to 
1:  * get auxiliary constraint information from the system table
1:  * that is auxiliary to sysconstraints.
1:  *
1:  * @version 0.1
0:  * @author Jerry Brenner
1:  */
1: 
1: public class SubKeyConstraintDescriptor extends SubConstraintDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/** Interface for SubKeyConstraintDescriptor is 
1: 		<ol>
1: 		<li>public UUID getIndexId();</li>
1: 		<li>public UUID getKeyConstraintId();</li>
1: 		</ol>
1: 	*/
1: 
1: 	// Implementation
1: 	UUID					indexId;
1: 	UUID					keyConstraintId;
1: 
1: 	int                     raDeleteRule; //referential action rule for a DELETE 
1: 	int                     raUpdateRule; //referential action rule for a UPDATE
1: 
1: 
1: 	/**
1: 	 * Constructor for a SubConstraintDescriptorImpl
1: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
1: 	 * @param indexId			The UUID of the backing index.
1: 	 */
1: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId)
1: 	{
1: 		super(constraintId);
1: 		this.indexId = indexId;
1: 	}
1: 
1: 	/**
1: 	 * Constructor for a SubConstraintDescriptor
1: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
1: 	 * @param indexId			The UUID of the backing index.
1: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
1: 	 */
1: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID keyConstraintId)
1: 	{
1: 		this(constraintId, indexId);
1: 		this.keyConstraintId = keyConstraintId;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Constructor for a SubConstraintDescriptor
1: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
1: 	 * @param indexId			The UUID of the backing index.
1: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
1: 	 * @param raDeleteRule      The referential action for delete
1: 	 * @param raUpdateRule      The referential action for update
1: 	 */
1: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID
1: 									  keyConstraintId, int raDeleteRule, int raUpdateRule)
1: 	{
1: 		this(constraintId, indexId);
1: 		this.keyConstraintId = keyConstraintId;
1: 		this.raDeleteRule = raDeleteRule;
1: 		this.raUpdateRule = raUpdateRule;
1: 	}
1: 
1: 
1: 
1: 
1: 
1: 	/**
1: 	 * Gets the UUID of the backing index.
1: 	 *
1: 	 * @return	The UUID of the backing index.
1: 	 */
1: 	public UUID	getIndexId()
1: 	{
1: 		return indexId;
1: 	}
1: 
1: 	/**
1: 	 * Gets the UUID of the referenced key constraint
1: 	 *
1: 	 * @return	The UUID of the referenced key constraint
1: 	 */
1: 	public UUID	getKeyConstraintId()
1: 	{
1: 		return keyConstraintId;
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint have a backing index?
1: 	 *
1: 	 * @return boolean	Whether or not there is a backing index for this constraint.
1: 	 */
1: 	public boolean hasBackingIndex()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Gets a referential action rule on a  DELETE
1: 	 * @return referential rule defined by the user during foreign key creattion
1: 	 * for a delete (like CASCDE , RESTRICT ..etc)
1: 	 */
1: 	public int	getRaDeleteRule()
1: 	{
1: 		return raDeleteRule;
1: 	}
1: 	
1: 	
1: 	/**
1: 	 * Gets a referential action rule on a UPDATE
1: 	 * @return referential rule defined by the user during foreign key creattion
1: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
1: 	 */
1: 	public int	getRaUpdateRule()
1: 	{
1: 		return raUpdateRule;
1: 	}
1: 	
1: 
1: 
1: 	/**
1: 	 * Convert the SubKeyConstraintDescriptor to a String.
1: 	 *
1: 	 * @return	A String representation of this SubConstraintDescriptor
1: 	 */
1: 
1: 	public String	toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "indexId: " + indexId + "\n" +
1: 				"keyConstraintId: " + keyConstraintId + "\n" +
1: 				"raDeleteRule: " + raDeleteRule + "\n" +
1: 				"raUpdateRule: " + raUpdateRule + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * This interface is used to get information from a SubKeyConstraintDescriptor.
0:  * A SubKeyConstraintDescriptor is used within the DataDictionary to 
0:  * get auxiliary constraint information from the system table
0:  * that is auxiliary to sysconstraints.
0:  *
0:  * @version 0.1
0:  * @author Jerry Brenner
0:  */
0: 
0: public class SubKeyConstraintDescriptor extends SubConstraintDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/** Interface for SubKeyConstraintDescriptor is 
0: 		<ol>
0: 		<li>public UUID getIndexId();</li>
0: 		<li>public UUID getKeyConstraintId();</li>
0: 		</ol>
0: 	*/
0: 
0: 	// Implementation
0: 	UUID					indexId;
0: 	UUID					keyConstraintId;
0: 
0: 	int                     raDeleteRule; //referential action rule for a DELETE 
0: 	int                     raUpdateRule; //referential action rule for a UPDATE
0: 
0: 
0: 	/**
0: 	 * Constructor for a SubConstraintDescriptorImpl
0: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
0: 	 * @param indexId			The UUID of the backing index.
0: 	 */
0: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId)
0: 	{
0: 		super(constraintId);
0: 		this.indexId = indexId;
0: 	}
0: 
0: 	/**
0: 	 * Constructor for a SubConstraintDescriptor
0: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
0: 	 * @param indexId			The UUID of the backing index.
0: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
0: 	 */
0: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID keyConstraintId)
0: 	{
0: 		this(constraintId, indexId);
0: 		this.keyConstraintId = keyConstraintId;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Constructor for a SubConstraintDescriptor
0: 	 *
0: 	 * @param constraintID		The UUID of the constraint.
0: 	 * @param indexId			The UUID of the backing index.
0: 	 * @param keyConstraintId	The UUID of the referenced constraint (fks)
0: 	 * @param raDeleteRule      The referential action for delete
0: 	 * @param raUpdateRule      The referential action for update
0: 	 */
0: 	public SubKeyConstraintDescriptor(UUID constraintId, UUID indexId, UUID
0: 									  keyConstraintId, int raDeleteRule, int raUpdateRule)
0: 	{
0: 		this(constraintId, indexId);
0: 		this.keyConstraintId = keyConstraintId;
0: 		this.raDeleteRule = raDeleteRule;
0: 		this.raUpdateRule = raUpdateRule;
0: 	}
0: 
0: 
0: 
0: 
0: 
0: 	/**
0: 	 * Gets the UUID of the backing index.
0: 	 *
0: 	 * @return	The UUID of the backing index.
0: 	 */
0: 	public UUID	getIndexId()
0: 	{
0: 		return indexId;
0: 	}
0: 
0: 	/**
0: 	 * Gets the UUID of the referenced key constraint
0: 	 *
0: 	 * @return	The UUID of the referenced key constraint
0: 	 */
0: 	public UUID	getKeyConstraintId()
0: 	{
0: 		return keyConstraintId;
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint have a backing index?
0: 	 *
0: 	 * @return boolean	Whether or not there is a backing index for this constraint.
0: 	 */
0: 	public boolean hasBackingIndex()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Gets a referential action rule on a  DELETE
0: 	 * @return referential rule defined by the user during foreign key creattion
0: 	 * for a delete (like CASCDE , RESTRICT ..etc)
0: 	 */
0: 	public int	getRaDeleteRule()
0: 	{
0: 		return raDeleteRule;
0: 	}
0: 	
0: 	
0: 	/**
0: 	 * Gets a referential action rule on a UPDATE
0: 	 * @return referential rule defined by the user during foreign key creattion
0: 	 * for an UPDATE (like CASCDE , RESTRICT ..etc)
0: 	 */
0: 	public int	getRaUpdateRule()
0: 	{
0: 		return raUpdateRule;
0: 	}
0: 	
0: 
0: 
0: 	/**
0: 	 * Convert the SubKeyConstraintDescriptor to a String.
0: 	 *
0: 	 * @return	A String representation of this SubConstraintDescriptor
0: 	 */
0: 
0: 	public String	toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "indexId: " + indexId + "\n" +
0: 				"keyConstraintId: " + keyConstraintId + "\n" +
0: 				"raDeleteRule: " + raDeleteRule + "\n" +
0: 				"raUpdateRule: " + raUpdateRule + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: }
============================================================================