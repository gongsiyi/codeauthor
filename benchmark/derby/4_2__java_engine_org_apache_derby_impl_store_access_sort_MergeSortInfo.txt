1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.MergeSortInfo
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.SortInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: 
1:eac0369: import java.util.Vector;
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   This object provides performance information related to a sort.
1:eac0369:   The information is accumulated during operations on a SortController() and
1:eac0369:   then copied into this object and returned by a call to
1:eac0369:   SortController.getSortInfo().
1:eac0369: 
1:eac0369:   @see org.apache.derby.iapi.store.access.SortController#getSortInfo()
1:eac0369: 
1:eac0369: **/
1:eac0369: class MergeSortInfo implements SortInfo
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Performance counters ...
1:eac0369:      */
1:eac0369: 
1:eac0369:     private String  stat_sortType;
1:eac0369:     // private long    stat_estimMemUsed;
1:eac0369:     private int     stat_numRowsInput;
1:eac0369:     private int     stat_numRowsOutput;
1:eac0369:     private int     stat_numMergeRuns;
1:eac0369:     private Vector  stat_mergeRunsSize;
1:eac0369: 
1:eac0369: 
1:eac0369:     /* Constructors for This class: */
1:eac0369:     MergeSortInfo(MergeInserter sort)
1:eac0369:     {
1:eac0369:         // copy perfomance state out of sort, to get a fixed set of stats
1:eac0369:         stat_sortType               = sort.stat_sortType;
1:eac0369:         // stat_estimMemUsed           = sort.estimatedMemoryUsed;
1:eac0369:         stat_numRowsInput           = sort.stat_numRowsInput;
1:eac0369:         stat_numRowsOutput          = sort.stat_numRowsOutput;
1:eac0369:         stat_numMergeRuns           = sort.stat_numMergeRuns;
1:eac0369:         stat_mergeRunsSize          = sort.stat_mergeRunsSize;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return all information gathered about the sort.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a list of properties which contains all information
1:eac0369:      * gathered about the sort.  If a Property is passed in, then that property
1:eac0369:      * list is appended to, otherwise a new property object is created and
1:eac0369:      * returned.
1:eac0369:      * <p>
1:eac0369:      * Not all sorts may support all properties, if the property is not
1:eac0369:      * supported then it will not be returned.  The following is a list of
1:eac0369:      * properties that may be returned:
1:eac0369:      *
1:eac0369:      *     sortType
1:eac0369:      *         - type of the sort being performed:
1:eac0369:      *           internal
1:eac0369:      *           external
1:eac0369:      *     numRowsInput
1:eac0369:      *         - the number of rows input to the sort.  This
1:eac0369:      *           number includes duplicates.
1:eac0369:      *     numRowsOutput
1:eac0369:      *         - the number of rows to be output by the sort.  This number
1:eac0369:      *           may be different from numRowsInput since duplicates may not
1:eac0369:      *           be output.
1:eac0369:      *     numMergeRuns
1:eac0369:      *         - the number of merge runs for the sort.
1:eac0369:      *           Applicable to external sorts only.
1:eac0369:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
1:eac0369:      *           reflect the additional merge run that may be created for
1:eac0369:      *           any data still in the sort buffer.
1:eac0369:      *     mergeRunsSize
1:eac0369:      *         - the size (number of rows) of each merge run for the sort.
1:eac0369:      *           Applicable to external sorts only.
1:eac0369:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
1:eac0369:      *           have 3 rows each, and the last run has 2 rows.
1:eac0369:      *           Note: when a SortController is closed, this vector may get an
1:eac0369:      *           additional element, to reflect the additional merge run that
1:eac0369:      *           may be created for any data still in the sort buffer.
1:eac0369:      *     NOTE - this list will be expanded as more information about the sort
1:eac0369:      *            is gathered and returned.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 
1:eac0369:     public Properties getAllSortInfo(Properties prop)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (prop == null)
1:eac0369:             prop = new Properties();
1:eac0369: 
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT_TYPE),
1:eac0369: 			"external".equals(this.stat_sortType) ?
1:eac0369: 				MessageService.getTextMessage(SQLState.STORE_RTS_EXTERNAL) :
1:eac0369: 				MessageService.getTextMessage(SQLState.STORE_RTS_INTERNAL));
1:eac0369:         // prop.put(
1:eac0369: 		//  MessageService.getTextMessage(SQLState.STORE_RTS_ESTIMATED_MEMORY_USED),
1:eac0369: 		//  Long.toString(stat_estimMemUsed));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_INPUT),
1:eac0369: 			Integer.toString(stat_numRowsInput));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_OUTPUT),
1:eac0369: 			Integer.toString(stat_numRowsOutput));
1:eac0369:         if (this.stat_sortType == "external")
1:eac0369:         {
1:eac0369:             prop.put(
1:eac0369: 			  MessageService.getTextMessage(SQLState.STORE_RTS_NUM_MERGE_RUNS),
1:eac0369: 			  Integer.toString(stat_numMergeRuns));
1:eac0369:             prop.put(
1:eac0369: 			  MessageService.getTextMessage(SQLState.STORE_RTS_MERGE_RUNS_SIZE),
1:eac0369: 			  stat_mergeRunsSize.toString());
1:eac0369:         }
1:eac0369:         return(prop);
1:eac0369:     }
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      *     estimMemUsed IS NOT CURRENTLY SUPPORTED SINCE IT IS UNRELIABLE
1:eac0369:      *     estimMemUsed
1:eac0369:      *         - the estimated memory used by the sort.
1:eac0369:      *
1:eac0369:      *           This is only measured when the system runs out of sort
1:eac0369:      *           buffer space, AND when it tries to avoid doing an external sort.
1:eac0369:      *           It measures this by subtracting the memory usage at initialization
1:eac0369:      *           from the memory usage at the time we are trying to avoid doing an
1:eac0369:      *           external sort.  The result could be negative: this probably indicates
1:eac0369:      *           that there has been some garbage collection in the interim.
1:eac0369:      *           If the attempt at keeping the sort internal succeeds, the buffer grows
1:eac0369:      *           but the increased memory usage is not measured.
1:eac0369:      *
1:eac0369:      *           The system may never measure the memory usage. This happens if
1:eac0369:      *           it never runs out of sort buffer space, or if it is set up not
1:eac0369:      *           to avoid external sorts. In cases that it is not measured, it returns 0.
1:eac0369:      *
1:eac0369:      *           In future, this info may improve with an improved JVM API.
1:eac0369:      */
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.MergeSortInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import org.apache.derby.iapi.store.access.SortInfo;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: import java.util.Vector;
1: import java.util.Properties;
1: 
1: /**
1: 
1:   This object provides performance information related to a sort.
1:   The information is accumulated during operations on a SortController() and
1:   then copied into this object and returned by a call to
1:   SortController.getSortInfo().
1: 
1:   @see org.apache.derby.iapi.store.access.SortController#getSortInfo()
1: 
1: **/
1: class MergeSortInfo implements SortInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**
1:      * Performance counters ...
1:      */
1: 
1:     private String  stat_sortType;
1:     // private long    stat_estimMemUsed;
1:     private int     stat_numRowsInput;
1:     private int     stat_numRowsOutput;
1:     private int     stat_numMergeRuns;
1:     private Vector  stat_mergeRunsSize;
1: 
1: 
1:     /* Constructors for This class: */
1:     MergeSortInfo(MergeInserter sort)
1:     {
1:         // copy perfomance state out of sort, to get a fixed set of stats
1:         stat_sortType               = sort.stat_sortType;
1:         // stat_estimMemUsed           = sort.estimatedMemoryUsed;
1:         stat_numRowsInput           = sort.stat_numRowsInput;
1:         stat_numRowsOutput          = sort.stat_numRowsOutput;
1:         stat_numMergeRuns           = sort.stat_numMergeRuns;
1:         stat_mergeRunsSize          = sort.stat_mergeRunsSize;
1:     }
1: 
1:     /**
1:      * Return all information gathered about the sort.
1:      * <p>
1:      * This routine returns a list of properties which contains all information
1:      * gathered about the sort.  If a Property is passed in, then that property
1:      * list is appended to, otherwise a new property object is created and
1:      * returned.
1:      * <p>
1:      * Not all sorts may support all properties, if the property is not
1:      * supported then it will not be returned.  The following is a list of
1:      * properties that may be returned:
1:      *
1:      *     sortType
1:      *         - type of the sort being performed:
1:      *           internal
1:      *           external
1:      *     numRowsInput
1:      *         - the number of rows input to the sort.  This
1:      *           number includes duplicates.
1:      *     numRowsOutput
1:      *         - the number of rows to be output by the sort.  This number
1:      *           may be different from numRowsInput since duplicates may not
1:      *           be output.
1:      *     numMergeRuns
1:      *         - the number of merge runs for the sort.
1:      *           Applicable to external sorts only.
1:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
1:      *           reflect the additional merge run that may be created for
1:      *           any data still in the sort buffer.
1:      *     mergeRunsSize
1:      *         - the size (number of rows) of each merge run for the sort.
1:      *           Applicable to external sorts only.
1:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
1:      *           have 3 rows each, and the last run has 2 rows.
1:      *           Note: when a SortController is closed, this vector may get an
1:      *           additional element, to reflect the additional merge run that
1:      *           may be created for any data still in the sort buffer.
1:      *     NOTE - this list will be expanded as more information about the sort
1:      *            is gathered and returned.
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 
1:     public Properties getAllSortInfo(Properties prop)
1: 		throws StandardException
1:     {
1:         if (prop == null)
1:             prop = new Properties();
1: 
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT_TYPE),
1: 			"external".equals(this.stat_sortType) ?
1: 				MessageService.getTextMessage(SQLState.STORE_RTS_EXTERNAL) :
1: 				MessageService.getTextMessage(SQLState.STORE_RTS_INTERNAL));
1:         // prop.put(
1: 		//  MessageService.getTextMessage(SQLState.STORE_RTS_ESTIMATED_MEMORY_USED),
1: 		//  Long.toString(stat_estimMemUsed));
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_INPUT),
1: 			Integer.toString(stat_numRowsInput));
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_OUTPUT),
1: 			Integer.toString(stat_numRowsOutput));
1:         if (this.stat_sortType == "external")
1:         {
1:             prop.put(
1: 			  MessageService.getTextMessage(SQLState.STORE_RTS_NUM_MERGE_RUNS),
1: 			  Integer.toString(stat_numMergeRuns));
1:             prop.put(
1: 			  MessageService.getTextMessage(SQLState.STORE_RTS_MERGE_RUNS_SIZE),
1: 			  stat_mergeRunsSize.toString());
1:         }
1:         return(prop);
1:     }
1: }
1: 
1: 
1:     /**
1:      *     estimMemUsed IS NOT CURRENTLY SUPPORTED SINCE IT IS UNRELIABLE
1:      *     estimMemUsed
1:      *         - the estimated memory used by the sort.
1:      *
1:      *           This is only measured when the system runs out of sort
1:      *           buffer space, AND when it tries to avoid doing an external sort.
1:      *           It measures this by subtracting the memory usage at initialization
1:      *           from the memory usage at the time we are trying to avoid doing an
1:      *           external sort.  The result could be negative: this probably indicates
1:      *           that there has been some garbage collection in the interim.
1:      *           If the attempt at keeping the sort internal succeeds, the buffer grows
1:      *           but the increased memory usage is not measured.
1:      *
1:      *           The system may never measure the memory usage. This happens if
1:      *           it never runs out of sort buffer space, or if it is set up not
1:      *           to avoid external sorts. In cases that it is not measured, it returns 0.
1:      *
1:      *           In future, this info may improve with an improved JVM API.
1:      */
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.store.access.SortInfo;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: import java.util.Vector;
0: import java.util.Properties;
0: 
0: /**
0: 
0:   This object provides performance information related to a sort.
0:   The information is accumulated during operations on a SortController() and
0:   then copied into this object and returned by a call to
0:   SortController.getSortInfo().
0: 
0:   @see org.apache.derby.iapi.store.access.SortController#getSortInfo()
0: 
0: **/
0: class MergeSortInfo implements SortInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**
0:      * Performance counters ...
0:      */
0: 
0:     private String  stat_sortType;
0:     // private long    stat_estimMemUsed;
0:     private int     stat_numRowsInput;
0:     private int     stat_numRowsOutput;
0:     private int     stat_numMergeRuns;
0:     private Vector  stat_mergeRunsSize;
0: 
0: 
0:     /* Constructors for This class: */
0:     MergeSortInfo(MergeInserter sort)
0:     {
0:         // copy perfomance state out of sort, to get a fixed set of stats
0:         stat_sortType               = sort.stat_sortType;
0:         // stat_estimMemUsed           = sort.estimatedMemoryUsed;
0:         stat_numRowsInput           = sort.stat_numRowsInput;
0:         stat_numRowsOutput          = sort.stat_numRowsOutput;
0:         stat_numMergeRuns           = sort.stat_numMergeRuns;
0:         stat_mergeRunsSize          = sort.stat_mergeRunsSize;
0:     }
0: 
0:     /**
0:      * Return all information gathered about the sort.
0:      * <p>
0:      * This routine returns a list of properties which contains all information
0:      * gathered about the sort.  If a Property is passed in, then that property
0:      * list is appended to, otherwise a new property object is created and
0:      * returned.
0:      * <p>
0:      * Not all sorts may support all properties, if the property is not
0:      * supported then it will not be returned.  The following is a list of
0:      * properties that may be returned:
0:      *
0:      *     sortType
0:      *         - type of the sort being performed:
0:      *           internal
0:      *           external
0:      *     numRowsInput
0:      *         - the number of rows input to the sort.  This
0:      *           number includes duplicates.
0:      *     numRowsOutput
0:      *         - the number of rows to be output by the sort.  This number
0:      *           may be different from numRowsInput since duplicates may not
0:      *           be output.
0:      *     numMergeRuns
0:      *         - the number of merge runs for the sort.
0:      *           Applicable to external sorts only.
0:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
0:      *           reflect the additional merge run that may be created for
0:      *           any data still in the sort buffer.
0:      *     mergeRunsSize
0:      *         - the size (number of rows) of each merge run for the sort.
0:      *           Applicable to external sorts only.
0:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
0:      *           have 3 rows each, and the last run has 2 rows.
0:      *           Note: when a SortController is closed, this vector may get an
0:      *           additional element, to reflect the additional merge run that
0:      *           may be created for any data still in the sort buffer.
0:      *     NOTE - this list will be expanded as more information about the sort
0:      *            is gathered and returned.
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 
0:     public Properties getAllSortInfo(Properties prop)
0: 		throws StandardException
0:     {
0:         if (prop == null)
0:             prop = new Properties();
0: 
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT_TYPE),
0: 			"external".equals(this.stat_sortType) ?
0: 				MessageService.getTextMessage(SQLState.STORE_RTS_EXTERNAL) :
0: 				MessageService.getTextMessage(SQLState.STORE_RTS_INTERNAL));
0:         // prop.put(
0: 		//  MessageService.getTextMessage(SQLState.STORE_RTS_ESTIMATED_MEMORY_USED),
0: 		//  Long.toString(stat_estimMemUsed));
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_INPUT),
0: 			Integer.toString(stat_numRowsInput));
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_OUTPUT),
0: 			Integer.toString(stat_numRowsOutput));
0:         if (this.stat_sortType == "external")
0:         {
0:             prop.put(
0: 			  MessageService.getTextMessage(SQLState.STORE_RTS_NUM_MERGE_RUNS),
0: 			  Integer.toString(stat_numMergeRuns));
0:             prop.put(
0: 			  MessageService.getTextMessage(SQLState.STORE_RTS_MERGE_RUNS_SIZE),
0: 			  stat_mergeRunsSize.toString());
0:         }
0:         return(prop);
0:     }
0: }
0: 
0: 
0:     /**
0:      *     estimMemUsed IS NOT CURRENTLY SUPPORTED SINCE IT IS UNRELIABLE
0:      *     estimMemUsed
0:      *         - the estimated memory used by the sort.
0:      *
0:      *           This is only measured when the system runs out of sort
0:      *           buffer space, AND when it tries to avoid doing an external sort.
0:      *           It measures this by subtracting the memory usage at initialization
0:      *           from the memory usage at the time we are trying to avoid doing an
0:      *           external sort.  The result could be negative: this probably indicates
0:      *           that there has been some garbage collection in the interim.
0:      *           If the attempt at keeping the sort internal succeeds, the buffer grows
0:      *           but the increased memory usage is not measured.
0:      *
0:      *           The system may never measure the memory usage. This happens if
0:      *           it never runs out of sort buffer space, or if it is set up not
0:      *           to avoid external sorts. In cases that it is not measured, it returns 0.
0:      *
0:      *           In future, this info may improve with an improved JVM API.
0:      */
0: 
============================================================================