1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeRowPosition
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree;
1:eac0369: 
1:eac0369: 
1:86e051f: import org.apache.derby.iapi.error.StandardException;
1:86e051f: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:eac0369: 
1:86e051f: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.conglomerate.RowPosition;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class BTreeRowPosition extends RowPosition
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public    DataValueDescriptor[] current_positionKey;
1:eac0369:     public    LeafControlRow        current_leaf;
1:eac0369:     protected LeafControlRow        next_leaf;
1:eac0369:     public    DataValueDescriptor[] current_lock_template;
1:eac0369:     public    RowLocation           current_lock_row_loc;
1:eac0369: 
1:86e051f:     /** The scan that owns this position object. */
1:86e051f:     private final BTreeScan parent;
1:86e051f: 
1:86e051f:     /**
1:86e051f:      * The version number of the leaf page when this position was saved by
1:86e051f:      * key. Only valid if {@link #current_positionKey} is non-null. This value
1:86e051f:      * is used to decide whether repositioning should be performed by using
1:86e051f:      * the key, or if {@link #current_rh} could be used directly.
1:86e051f:      */
1:86e051f:     long versionWhenSaved;
1:86e051f: 
1:86e051f:     /** Cached template for saving this position by key. */
1:86e051f:     private DataValueDescriptor[] positionKey_template;
1:86e051f: 
1:86e051f:     /**
1:86e051f:      * Cached fetch descriptor that can be used to fetch the key columns that
1:86e051f:      * are not already fetched by the scan. The fetch descriptor is used when
1:86e051f:      * this position is about to be saved by its full key.
1:86e051f:      */
1:86e051f:     private FetchDescriptor savedFetchDescriptor;
1:86e051f: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:86e051f:     public BTreeRowPosition(BTreeScan parent)
1:eac0369:     {
1:86e051f:         this.parent = parent;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public void init()
1:eac0369:     {
1:eac0369:         super.init();
1:eac0369: 
1:eac0369:         current_leaf        = null;
1:eac0369:         current_positionKey = null;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public final void unlatch()
1:eac0369:     {
1:86e051f:         // This method is never called for a BTreeRowPosition. If it is ever
1:86e051f:         // used, make sure that the key is saved first, unless the scan won't
1:86e051f:         // use that page again. DERBY-2991
1:86e051f:         if (SanityManager.DEBUG) {
1:86e051f:             SanityManager.THROWASSERT("Did you really call me?!?");
1:86e051f:         }
1:eac0369:         if (current_leaf != null)
1:eac0369:         {
1:eac0369:             current_leaf.release();
1:eac0369:             current_leaf = null;
1:eac0369:         }
1:eac0369:         current_slot = Page.INVALID_SLOT_NUMBER;
1:eac0369:     }
1:eac0369: 
1:86e051f:     /**
1:86e051f:      * Save this position by key and release the latch on the current leaf.
1:86e051f:      * @throws StandardException if an error occurs while saving the position
1:86e051f:      * @see BTreeScan#savePositionAndReleasePage()
1:86e051f:      */
1:86e051f:     public void saveMeAndReleasePage() throws StandardException {
1:86e051f:         if (SanityManager.DEBUG) {
1:86e051f:             SanityManager.ASSERT(parent.scan_position == this);
1:86e051f:         }
1:86e051f:         parent.savePositionAndReleasePage();
1:86e051f:     }
1:86e051f: 
1:86e051f:     /**
1:86e051f:      * Get a template into which the position key can be copied. The value
1:86e051f:      * is cached, so two calls to this method on the same object will return
1:86e051f:      * the same object.
1:86e051f:      *
1:86e051f:      * @return an array into which the position key can be copied
1:86e051f:      * @throws StandardException if an error occurs while allocating the
1:86e051f:      * template array
1:86e051f:      */
1:86e051f:     DataValueDescriptor[] getKeyTemplate() throws StandardException {
1:86e051f:         if (positionKey_template == null) {
1:86e051f:             positionKey_template = parent.getRuntimeMem().
1:86e051f:                     get_row_for_export(parent.getRawTran());
1:86e051f:         }
1:86e051f:         return positionKey_template;
1:86e051f:     }
1:86e051f: 
1:86e051f:     /**
1:86e051f:      * Get a fetch descriptor that can be used to fetch the missing columns
1:86e051f:      * in a partial key. The fetch descriptor is only created on the first
1:86e051f:      * call to this method. The returned descriptor will be cached, so
1:86e051f:      * subsequent calls will return the same descriptor and the arguments
1:86e051f:      * to this method should be the same between invokations.
1:86e051f:      *
1:86e051f:      * @param vcols an array which tells which columns the partial key contains
1:86e051f:      * (valid columns have non-zero values in the array)
1:86e051f:      * @param fullLength the length of the full key to create a fetch
1:86e051f:      * descriptor for (may be greater than {@code vcols.length})
1:86e051f:      * @return a fetch descriptor
1:86e051f:      */
1:86e051f:     FetchDescriptor getFetchDescriptorForSaveKey(int[] vcols, int fullLength) {
1:86e051f:         if (savedFetchDescriptor == null) {
1:86e051f:             FormatableBitSet columns = new FormatableBitSet(fullLength);
1:86e051f:             for (int i = 0; i < vcols.length; i++) {
1:86e051f:                 if (vcols[i] == 0) {
1:86e051f:                     // partial key does not have a valid value for this
1:86e051f:                     // column, add it to the set of columns to fetch
1:86e051f:                     columns.set(i);
1:86e051f:                 }
1:86e051f:             }
1:86e051f:             // also fetch the columns behind the ones in the partial key
1:86e051f:             for (int i = vcols.length; i < fullLength; i++) {
1:86e051f:                 columns.set(i);
1:86e051f:             }
1:86e051f:             savedFetchDescriptor =
1:86e051f:                     new FetchDescriptor(fullLength, columns, null);
1:86e051f:         }
1:86e051f: 
1:86e051f:         // Verify that the cached fetch descriptor matches the arguments
1:86e051f:         // (will fail if this method is not called with the same parameters
1:86e051f:         // as when the descriptor was created and cached).
1:86e051f:         if (SanityManager.DEBUG) {
1:86e051f:             FormatableBitSet fetchCols = savedFetchDescriptor.getValidColumns();
1:86e051f:             SanityManager.ASSERT(fullLength == fetchCols.size());
1:86e051f:             for (int i = 0; i < vcols.length; i++) {
1:86e051f:                 SanityManager.ASSERT((vcols[i] == 0) == fetchCols.get(i));
1:86e051f:             }
1:86e051f:             for (int i = vcols.length; i < fullLength; i++) {
1:86e051f:                 SanityManager.ASSERT(fetchCols.get(i));
1:86e051f:             }
1:86e051f:         }
1:86e051f: 
1:86e051f:         return savedFetchDescriptor;
1:86e051f:     }
1:86e051f: 
1:eac0369:     public final String toString()
1:eac0369:     {
1:eac0369:         String ret_string = null;
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             ret_string = 
1:eac0369:                 super.toString() + 
1:eac0369:                 "current_positionKey = " + current_positionKey + 
1:eac0369:                 ";key = " + RowUtil.toString(current_positionKey) + 
1:eac0369:                 ";next_leaf" + next_leaf + 
1:eac0369:                 ";current_leaf" + current_leaf;
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_string);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of XXXX class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     /** The scan that owns this position object. */
1:     private final BTreeScan parent;
1: 
1:     /**
1:      * The version number of the leaf page when this position was saved by
1:      * key. Only valid if {@link #current_positionKey} is non-null. This value
1:      * is used to decide whether repositioning should be performed by using
1:      * the key, or if {@link #current_rh} could be used directly.
1:      */
1:     long versionWhenSaved;
1: 
1:     /** Cached template for saving this position by key. */
1:     private DataValueDescriptor[] positionKey_template;
1: 
1:     /**
1:      * Cached fetch descriptor that can be used to fetch the key columns that
1:      * are not already fetched by the scan. The fetch descriptor is used when
1:      * this position is about to be saved by its full key.
1:      */
1:     private FetchDescriptor savedFetchDescriptor;
1: 
1:     public BTreeRowPosition(BTreeScan parent)
1:         this.parent = parent;
/////////////////////////////////////////////////////////////////////////
1:         // This method is never called for a BTreeRowPosition. If it is ever
1:         // used, make sure that the key is saved first, unless the scan won't
1:         // use that page again. DERBY-2991
1:         if (SanityManager.DEBUG) {
1:             SanityManager.THROWASSERT("Did you really call me?!?");
1:         }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Save this position by key and release the latch on the current leaf.
1:      * @throws StandardException if an error occurs while saving the position
1:      * @see BTreeScan#savePositionAndReleasePage()
1:      */
1:     public void saveMeAndReleasePage() throws StandardException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(parent.scan_position == this);
1:         }
1:         parent.savePositionAndReleasePage();
1:     }
1: 
1:     /**
1:      * Get a template into which the position key can be copied. The value
1:      * is cached, so two calls to this method on the same object will return
1:      * the same object.
1:      *
1:      * @return an array into which the position key can be copied
1:      * @throws StandardException if an error occurs while allocating the
1:      * template array
1:      */
1:     DataValueDescriptor[] getKeyTemplate() throws StandardException {
1:         if (positionKey_template == null) {
1:             positionKey_template = parent.getRuntimeMem().
1:                     get_row_for_export(parent.getRawTran());
1:         }
1:         return positionKey_template;
1:     }
1: 
1:     /**
1:      * Get a fetch descriptor that can be used to fetch the missing columns
1:      * in a partial key. The fetch descriptor is only created on the first
1:      * call to this method. The returned descriptor will be cached, so
1:      * subsequent calls will return the same descriptor and the arguments
1:      * to this method should be the same between invokations.
1:      *
1:      * @param vcols an array which tells which columns the partial key contains
1:      * (valid columns have non-zero values in the array)
1:      * @param fullLength the length of the full key to create a fetch
1:      * descriptor for (may be greater than {@code vcols.length})
1:      * @return a fetch descriptor
1:      */
1:     FetchDescriptor getFetchDescriptorForSaveKey(int[] vcols, int fullLength) {
1:         if (savedFetchDescriptor == null) {
1:             FormatableBitSet columns = new FormatableBitSet(fullLength);
1:             for (int i = 0; i < vcols.length; i++) {
1:                 if (vcols[i] == 0) {
1:                     // partial key does not have a valid value for this
1:                     // column, add it to the set of columns to fetch
1:                     columns.set(i);
1:                 }
1:             }
1:             // also fetch the columns behind the ones in the partial key
1:             for (int i = vcols.length; i < fullLength; i++) {
1:                 columns.set(i);
1:             }
1:             savedFetchDescriptor =
1:                     new FetchDescriptor(fullLength, columns, null);
1:         }
1: 
1:         // Verify that the cached fetch descriptor matches the arguments
1:         // (will fail if this method is not called with the same parameters
1:         // as when the descriptor was created and cached).
1:         if (SanityManager.DEBUG) {
1:             FormatableBitSet fetchCols = savedFetchDescriptor.getValidColumns();
1:             SanityManager.ASSERT(fullLength == fetchCols.size());
1:             for (int i = 0; i < vcols.length; i++) {
1:                 SanityManager.ASSERT((vcols[i] == 0) == fetchCols.get(i));
1:             }
1:             for (int i = vcols.length; i < fullLength; i++) {
1:                 SanityManager.ASSERT(fetchCols.get(i));
1:             }
1:         }
1: 
1:         return savedFetchDescriptor;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:bbcc923
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.store.raw.RecordHandle;
/////////////////////////////////////////////////////////////////////////
0:     public    RecordHandle          current_scan_protectionHandle;
/////////////////////////////////////////////////////////////////////////
0:                 ";current_scan_protectionHandle" +
0:                 current_scan_protectionHandle +
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeRowPosition
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree;
1: 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.Page;
1: 
1: import org.apache.derby.iapi.store.access.RowUtil;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.impl.store.access.conglomerate.RowPosition;
1: 
1: /**
1: 
1: **/
1: 
1: public class BTreeRowPosition extends RowPosition
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1:     public    DataValueDescriptor[] current_positionKey;
0:     public    long                  current_scan_pageno;
1:     public    LeafControlRow        current_leaf;
1:     protected LeafControlRow        next_leaf;
1:     public    DataValueDescriptor[] current_lock_template;
1:     public    RowLocation           current_lock_row_loc;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
0:     public BTreeRowPosition()
1:     {
0:         super();
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1:     public void init()
1:     {
1:         super.init();
1: 
1:         current_leaf        = null;
1:         current_positionKey = null;
1:     }
1: 
1:     public final void unlatch()
1:     {
1:         if (current_leaf != null)
1:         {
1:             current_leaf.release();
1:             current_leaf = null;
1:         }
1:         current_slot = Page.INVALID_SLOT_NUMBER;
1:     }
1: 
1:     public final String toString()
1:     {
1:         String ret_string = null;
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             ret_string = 
1:                 super.toString() + 
1:                 "current_positionKey = " + current_positionKey + 
1:                 ";key = " + RowUtil.toString(current_positionKey) + 
0:                 ";current_scan_pageno" + current_scan_pageno + 
1:                 ";next_leaf" + next_leaf + 
1:                 ";current_leaf" + current_leaf;
1:         }
1: 
1:         return(ret_string);
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree;
0: 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: 
0: import org.apache.derby.iapi.store.access.RowUtil;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.impl.store.access.conglomerate.RowPosition;
0: 
0: /**
0: 
0: **/
0: 
0: public class BTreeRowPosition extends RowPosition
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0:     public    DataValueDescriptor[] current_positionKey;
0:     public    long                  current_scan_pageno;
0:     public    LeafControlRow        current_leaf;
0:     protected LeafControlRow        next_leaf;
0:     public    DataValueDescriptor[] current_lock_template;
0:     public    RowLocation           current_lock_row_loc;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     public BTreeRowPosition()
0:     {
0:         super();
0:     }
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0:     public void init()
0:     {
0:         super.init();
0: 
0:         current_leaf        = null;
0:         current_positionKey = null;
0:     }
0: 
0:     public final void unlatch()
0:     {
0:         if (current_leaf != null)
0:         {
0:             current_leaf.release();
0:             current_leaf = null;
0:         }
0:         current_slot = Page.INVALID_SLOT_NUMBER;
0:     }
0: 
0:     public final String toString()
0:     {
0:         String ret_string = null;
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             ret_string = 
0:                 super.toString() + 
0:                 "current_positionKey = " + current_positionKey + 
0:                 ";key = " + RowUtil.toString(current_positionKey) + 
0:                 ";current_scan_pageno" + current_scan_pageno + 
0:                 ";next_leaf" + next_leaf + 
0:                 ";current_leaf" + current_leaf;
0:         }
0: 
0:         return(ret_string);
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods of XXXX class:
0:      **************************************************************************
0:      */
0: }
============================================================================