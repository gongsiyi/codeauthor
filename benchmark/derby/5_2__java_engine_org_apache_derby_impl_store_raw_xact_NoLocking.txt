1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.NoLocking
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A locking policy that implements no locking.
1:eac0369: 
1:eac0369: 	@see LockingPolicy
1:eac0369: */
1:eac0369: class NoLocking implements LockingPolicy {
1:eac0369: 
1:eac0369: 	protected NoLocking() {
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean lockContainer(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container, 
1:eac0369:     boolean         waitForLock,
2:eac0369:     boolean         forUpdate)
1:eac0369: 		throws StandardException {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void unlockContainer(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container)
3:eac0369:     {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean lockRecordForRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container,
2:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         waitForLock,
1:eac0369:     boolean         forUpdate)
3:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean zeroDurationLockRecordForWrite(
1:eac0369:     Transaction     t, 
1:eac0369:     RecordHandle    record,
1:eac0369:     boolean         lockForPreviousKey,
1:eac0369:     boolean         waitForLock)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean lockRecordForWrite(
1:eac0369:     Transaction     t, 
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         lockForInsert,
1:eac0369:     boolean         waitForLock)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void unlockRecordAfterRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container,
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         forUpdate,
1:eac0369:     boolean         row_qualified)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int getMode() {
1:eac0369: 		return LockingPolicy.MODE_NONE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.NoLocking
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements no locking.
1: 
1: 	@see LockingPolicy
1: */
1: class NoLocking implements LockingPolicy {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected NoLocking() {
1: 	}
1: 
1: 	public boolean lockContainer(
1:     Transaction     t, 
1:     ContainerHandle container, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException {
1: 		return true;
1: 	}
1: 
1: 	public void unlockContainer(
1:     Transaction     t, 
1:     ContainerHandle container)
1:     {
1: 	}
1: 
1: 	public boolean lockRecordForRead(
1:     Transaction     t, 
1:     ContainerHandle container,
1:     RecordHandle    record, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
1: 		return true;
1: 	}
1: 
0: 	public void lockRecordForRead(
0:     Latch			latch, 
1:     RecordHandle    record, 
1:     boolean         forUpdate)
1: 		throws StandardException
1: 	{
1: 	}
1: 
1: 	public boolean zeroDurationLockRecordForWrite(
1:     Transaction     t, 
1:     RecordHandle    record,
1:     boolean         lockForPreviousKey,
1:     boolean         waitForLock)
1: 		throws StandardException
1: 	{
1: 		return true;
1: 	}
1: 
1: 	public boolean lockRecordForWrite(
1:     Transaction     t, 
1:     RecordHandle    record, 
1:     boolean         lockForInsert,
1:     boolean         waitForLock)
1: 		throws StandardException
1: 	{
1: 		return true;
1: 	}
1: 
0: 	public void lockRecordForWrite(
0:     Latch			latch, 
0:     RecordHandle    record)
1: 		throws StandardException
1: 	{
1: 	}
1: 
1: 	public void unlockRecordAfterRead(
1:     Transaction     t, 
1:     ContainerHandle container,
1:     RecordHandle    record, 
1:     boolean         forUpdate,
1:     boolean         row_qualified)
1:         throws StandardException
1: 	{
1: 	}
1: 
1: 	public int getMode() {
1: 		return LockingPolicy.MODE_NONE;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements no locking.
0: 
0: 	@see LockingPolicy
0: */
0: class NoLocking implements LockingPolicy {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected NoLocking() {
0: 	}
0: 
0: 	public boolean lockContainer(
0:     Transaction     t, 
0:     ContainerHandle container, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException {
0: 		return true;
0: 	}
0: 
0: 	public void unlockContainer(
0:     Transaction     t, 
0:     ContainerHandle container)
0:     {
0: 	}
0: 
0: 	public boolean lockRecordForRead(
0:     Transaction     t, 
0:     ContainerHandle container,
0:     RecordHandle    record, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0: 		return true;
0: 	}
0: 
0: 	public void lockRecordForRead(
0:     Latch			latch, 
0:     RecordHandle    record, 
0:     boolean         forUpdate)
0: 		throws StandardException
0: 	{
0: 	}
0: 
0: 	public boolean zeroDurationLockRecordForWrite(
0:     Transaction     t, 
0:     RecordHandle    record,
0:     boolean         lockForPreviousKey,
0:     boolean         waitForLock)
0: 		throws StandardException
0: 	{
0: 		return true;
0: 	}
0: 
0: 	public boolean lockRecordForWrite(
0:     Transaction     t, 
0:     RecordHandle    record, 
0:     boolean         lockForInsert,
0:     boolean         waitForLock)
0: 		throws StandardException
0: 	{
0: 		return true;
0: 	}
0: 
0: 	public void lockRecordForWrite(
0:     Latch			latch, 
0:     RecordHandle    record)
0: 		throws StandardException
0: 	{
0: 	}
0: 
0: 	public void unlockRecordAfterRead(
0:     Transaction     t, 
0:     ContainerHandle container,
0:     RecordHandle    record, 
0:     boolean         forUpdate,
0:     boolean         row_qualified)
0:         throws StandardException
0: 	{
0: 	}
0: 
0: 	public int getMode() {
0: 		return LockingPolicy.MODE_NONE;
0: 	}
0: 
0: }
============================================================================