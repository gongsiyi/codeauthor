1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DropSchemaNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:28c633d: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:9f60172: import org.apache.derby.iapi.sql.conn.StatementContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A DropSchemaNode is the root of a QueryTree that represents 
1:eac0369:  * a DROP SCHEMA statement.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class DropSchemaNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private int			dropBehavior;
1:eac0369: 	private String		schemaName;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a DropSchemaNode
1:eac0369: 	 *
1:eac0369: 	 * @param schemaName		The name of the object being dropped
1:eac0369: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
1:3bb140c:      * @param cm                Context Manager
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     DropSchemaNode(String schemaName, int dropBehavior, ContextManager cm)
1:eac0369: 	{
1:3bb140c:         super(null, cm);
1:3bb140c:         this.schemaName = schemaName;
1:3bb140c:         this.dropBehavior = dropBehavior;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		/* 
1:eac0369: 		** Users are not permitted to drop
1:eac0369: 		** the SYS or APP schemas.
1:eac0369: 		*/
1:eac0369:         if (getDataDictionary().isSystemSchemaName(schemaName))
1:eac0369: 		{
1:eac0369: 			throw(StandardException.newException(
1:eac0369:                     SQLState.LANG_CANNOT_DROP_SYSTEM_SCHEMAS, this.schemaName));
1:28c633d: 		}
1:eac0369: 		
1:28c633d:         /* 
1:28c633d:         ** In SQL authorization mode, the current authorization identifier
1:28c633d:         ** must be either the owner of the schema or the database owner 
1:28c633d:         ** in order for the schema object to be dropped.
1:eac0369:         */
1:28c633d:         if (isPrivilegeCollectionRequired())
1:28c633d:         {
1:39244bf:             LanguageConnectionContext lcc = getLanguageConnectionContext();
1:9f60172:             StatementContext stx = lcc.getStatementContext();
1:39244bf:             
1:9f60172:             String currentUser = stx.getSQLSessionContext().getCurrentUser();
1:28c633d:             getCompilerContext().addRequiredSchemaPriv(schemaName, 
1:9f60172:                 currentUser,
1:28c633d:                 Authorizer.DROP_SCHEMA_PRIV);
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "DROP SCHEMA";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// inherit generate() method from DDLStatementNode
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getDropSchemaConstantAction(schemaName);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: class DropSchemaNode extends DDLStatementNode
1:      * Constructor for a DropSchemaNode
1:      * @param cm                Context Manager
1:     DropSchemaNode(String schemaName, int dropBehavior, ContextManager cm)
1:         super(null, cm);
0:         setNodeType(C_NodeTypes.DROP_SCHEMA_NODE);
1:         this.schemaName = schemaName;
1:         this.dropBehavior = dropBehavior;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.StatementContext;
/////////////////////////////////////////////////////////////////////////
1:         StatementContext stx = lcc.getStatementContext();
1:         String currentUser = stx.getSQLSessionContext().getCurrentUser();
/////////////////////////////////////////////////////////////////////////
1:                 currentUser,
author:Lily Wei
-------------------------------------------------------------------------------
commit:39244bf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             LanguageConnectionContext lcc = getLanguageConnectionContext();
0:             StatementContext stx = lcc.getStatementContext();
1:             
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c7a1d17
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             String currentUser = stx.getSQLSessionContext().getCurrentUser();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class DropSchemaNode extends DDLStatementNode
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DropSchemaNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * A DropSchemaNode is the root of a QueryTree that represents 
1:  * a DROP SCHEMA statement.
1:  *
0:  * @author jamie
1:  */
1: 
0: public class DropSchemaNode extends DropStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private int			dropBehavior;
1: 	private String		schemaName;
1: 
1: 	/**
0: 	 * Initializer for a DropSchemaNode
1: 	 *
1: 	 * @param schemaName		The name of the object being dropped
1: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
1: 	 *
1: 	 */
0: 	public void init(Object schemaName, Object dropBehavior)
0: 		throws StandardException
1: 	{
0: 		initAndCheck(null);
0: 		this.schemaName = (String) schemaName;
0: 		this.dropBehavior = ((Integer) dropBehavior).intValue();
1: 	}
1: 
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		
0:         LanguageConnectionContext lcc = getLanguageConnectionContext();
1: 
1: 		/* 
1: 		** Users are not permitted to drop
1: 		** the SYS or APP schemas.
1: 		*/
1:         if (getDataDictionary().isSystemSchemaName(schemaName))
1: 		{
1: 			throw(StandardException.newException(
1:                     SQLState.LANG_CANNOT_DROP_SYSTEM_SCHEMAS, this.schemaName));
1: 		}
1: 		
0: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "DROP SCHEMA";
1: 	}
1: 
1: 	// inherit generate() method from DDLStatementNode
1: 
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return	getGenericConstantActionFactory().getDropSchemaConstantAction(schemaName);
1: 	}
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28c633d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
/////////////////////////////////////////////////////////////////////////
1:         /* 
1:         ** In SQL authorization mode, the current authorization identifier
1:         ** must be either the owner of the schema or the database owner 
1:         ** in order for the schema object to be dropped.
0:         */
1:         if (isPrivilegeCollectionRequired())
1:         {
1:             getCompilerContext().addRequiredSchemaPriv(schemaName, 
0:                 lcc.getAuthorizationId(), 
1:                 Authorizer.DROP_SCHEMA_PRIV);
1:         }
0:         
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  * A DropSchemaNode is the root of a QueryTree that represents 
0:  * a DROP SCHEMA statement.
0:  *
0:  * @author jamie
0:  */
0: 
0: public class DropSchemaNode extends DropStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private int			dropBehavior;
0: 	private String		schemaName;
0: 
0: 	/**
0: 	 * Initializer for a DropSchemaNode
0: 	 *
0: 	 * @param schemaName		The name of the object being dropped
0: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
0: 	 *
0: 	 */
0: 	public void init(Object schemaName, Object dropBehavior)
0: 		throws StandardException
0: 	{
0: 		initAndCheck(null);
0: 		this.schemaName = (String) schemaName;
0: 		this.dropBehavior = ((Integer) dropBehavior).intValue();
0: 	}
0: 
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		
0:         LanguageConnectionContext lcc = getLanguageConnectionContext();
0: 
0: 		/* 
0: 		** Users are not permitted to drop
0: 		** the SYS or APP schemas.
0: 		*/
0:         if (getDataDictionary().isSystemSchemaName(schemaName))
0: 		{
0: 			throw(StandardException.newException(
0:                     SQLState.LANG_CANNOT_DROP_SYSTEM_SCHEMAS, this.schemaName));
0: 		}
0: 		
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "DROP SCHEMA";
0: 	}
0: 
0: 	// inherit generate() method from DDLStatementNode
0: 
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getDropSchemaConstantAction(schemaName);
0: 	}
0: }
============================================================================