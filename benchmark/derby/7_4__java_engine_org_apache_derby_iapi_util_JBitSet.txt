1:eac0369: /*
1:7ecc1f2: 
1:a844e87:    Derby - Class org.apache.derby.iapi.util.JBitSet
1:7ecc1f2: 
1:11ec54f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11ec54f:    contributor license agreements.  See the NOTICE file distributed with
1:11ec54f:    this work for additional information regarding copyright ownership.
1:11ec54f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:11ec54f:    (the "License"); you may not use this file except in compliance with
1:11ec54f:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.util;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.util.BitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * JBitSet is a wrapper class for BitSet.  It is a fixed length implementation
1:eac0369:  * which can be extended via the grow() method.  It provides additional
1:eac0369:  * methods to manipulate BitSets.
1:eac0369:  * NOTE: JBitSet was driven by the (current and perceived) needs of the
1:eac0369:  * optimizer, but placed in the util package since it is not specific to
1:eac0369:  * query trees..
1:eac0369:  * NOTE: java.util.BitSet is final, so we must provide a wrapper class
1:eac0369:  * which includes a BitSet member in order to extend the functionality.
1:eac0369:  * We want to make it look like JBitSet extends BitSet, so we need to
1:eac0369:  * provide wrapper methods for all of BitSet's methods.
3:eac0369:  *
1:eac0369:  */
1:eac0369: public final class JBitSet
1:eac0369: {
1:eac0369: 	/* The BitSet that we'd like to extend */
1:eac0369: 	private final BitSet	bitSet;
1:eac0369: 	/* Cache size() of bitSet, since accessed a lot */
1:eac0369: 	private int		size;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a JBitSet of the specified size.
1:eac0369: 	 *
1:eac0369: 	 * @param size	The number of bits in the JBitSet.
1:eac0369: 	 */
1:eac0369: 	public JBitSet(int size)
1:eac0369: 	{
1:eac0369: 		bitSet = new BitSet(size);
1:eac0369: 		this.size = size;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a JBitSet with the specified bitSet.
1:eac0369: 	 *
1:eac0369: 	 * @param bitSet	The BitSet.
1:eac0369: 	 * @param size		The size of bitSet.
1:eac0369: 	 *					NOTE: We need to specify the size since the size of a
1:eac0369: 	 *					BitSet is not guaranteed to be the same as JBitSet.size().
1:eac0369: 	 */
1:eac0369: 	private JBitSet(BitSet bitSet, int size)
1:eac0369: 	{
1:eac0369: 		this.bitSet = bitSet;
1:eac0369: 		this.size = size;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the BitSet to have the exact same bits set as the parameter's BitSet.
1:eac0369: 	 *
1:eac0369: 	 * @param sourceBitSet	The JBitSet to copy.
1:eac0369: 	 */
1:eac0369: 	public void setTo(JBitSet sourceBitSet)
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(size == sourceBitSet.size(),
1:eac0369: 	    						 "JBitSets are expected to be the same size");
1:eac0369: 	    }
1:eac0369: 		/* High reuse solution */
1:eac0369: 		and(sourceBitSet);
1:eac0369: 		or(sourceBitSet);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Test to see if one JBitSet contains another one of
1:eac0369: 	 * the same size.
1:eac0369: 	 *
1:eac0369: 	 * @param jBitSet	JBitSet that we want to know if it is
1:eac0369: 	 *					a subset of current JBitSet
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not jBitSet is a subset.
1:eac0369: 	 */
1:eac0369: 	public boolean contains(JBitSet jBitSet)
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(size == jBitSet.size(),
1:eac0369: 	    						 "JBitSets are expected to be the same size");
1:eac0369: 	    }
1:eac0369: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1:eac0369: 		{
1:eac0369: 			if (jBitSet.bitSet.get(bitIndex) && ! (bitSet.get(bitIndex)))
1:eac0369: 			{
1:eac0369: 				return false;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * See of a JBitSet has exactly 1 bit set.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not JBitSet has a single bit set.
1:eac0369: 	 */
1:eac0369: 	public boolean hasSingleBitSet()
1:eac0369: 	{
1:eac0369: 		boolean found = false;
1:eac0369: 
1:eac0369: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1:eac0369: 		{
1:eac0369: 			if (bitSet.get(bitIndex))
1:eac0369: 			{
1:eac0369: 				if (found)
1:eac0369: 				{
1:eac0369: 					return false;
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					found = true;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return found;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the first set bit (starting at index 0) from a JBitSet.
1:eac0369: 	 *
1:eac0369: 	 * @return int	Index of first set bit, -1 if none set.
1:eac0369: 	 */
1:eac0369: 	public int getFirstSetBit()
1:eac0369: 	{
1:eac0369: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1:eac0369: 		{
1:eac0369: 			if (bitSet.get(bitIndex))
1:eac0369: 			{
1:eac0369: 				return bitIndex;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return -1;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Grow an existing JBitSet to the specified size.
1:eac0369: 	 *
1:eac0369: 	 * @param newSize	The new size
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void grow(int newSize)
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(newSize > size,
1:eac0369: 	    					"New size is expected to be larger than current size");
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		size = newSize;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clear all of the bits in this JBitSet
1:eac0369: 	 */
1:eac0369: 	public void clearAll()
1:eac0369: 	{
1:eac0369: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1:eac0369: 		{
1:eac0369: 			if (bitSet.get(bitIndex))
1:eac0369: 			{
1:eac0369: 				bitSet.clear(bitIndex);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Wrapper methods for BitSet's methods */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return bitSet.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object obj)
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT((obj instanceof JBitSet),
1:eac0369: 	    						 "obj is expected to be a JBitSet " + obj);
1:eac0369: 	    }
1:eac0369: 		return bitSet.equals(((JBitSet) obj).bitSet);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return bitSet.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object clone()
1:eac0369: 	{
1:eac0369: 		return new JBitSet((BitSet) bitSet.clone(), size);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean get(int bitIndex)
1:eac0369: 	{
1:eac0369: 		return bitSet.get(bitIndex);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void set(int bitIndex)
1:eac0369: 	{
1:eac0369: 		bitSet.set(bitIndex);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void clear(int bitIndex)
1:eac0369: 	{
1:eac0369: 		bitSet.clear(bitIndex);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void and(JBitSet set)
1:eac0369: 	{
1:eac0369: 		bitSet.and(set.bitSet);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void or(JBitSet set)
1:eac0369: 	{
1:eac0369: 		bitSet.or(set.bitSet);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void xor(JBitSet set)
1:eac0369: 	{
1:eac0369: 		bitSet.xor(set.bitSet);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the size of bitSet
1:eac0369: 	 *
1:eac0369: 	 * @return int	Size of bitSet
1:eac0369: 	 */
1:eac0369: 	public int size()
1:eac0369: 	{
1:eac0369: 		return size;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a844e87
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.util.JBitSet
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11ec54f
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class com.ihost.cs.JBitSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package com.ihost.cs
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.util;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.BitSet;
1: 
1: /**
1:  * JBitSet is a wrapper class for BitSet.  It is a fixed length implementation
1:  * which can be extended via the grow() method.  It provides additional
1:  * methods to manipulate BitSets.
1:  * NOTE: JBitSet was driven by the (current and perceived) needs of the
1:  * optimizer, but placed in the util package since it is not specific to
1:  * query trees..
1:  * NOTE: java.util.BitSet is final, so we must provide a wrapper class
1:  * which includes a BitSet member in order to extend the functionality.
1:  * We want to make it look like JBitSet extends BitSet, so we need to
1:  * provide wrapper methods for all of BitSet's methods.
1:  *
0:  * @author Jerry Brenner
1:  */
1: public final class JBitSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/* The BitSet that we'd like to extend */
1: 	private final BitSet	bitSet;
1: 	/* Cache size() of bitSet, since accessed a lot */
1: 	private int		size;
1: 
1: 	/**
1: 	 * Construct a JBitSet of the specified size.
1: 	 *
1: 	 * @param size	The number of bits in the JBitSet.
1: 	 */
1: 	public JBitSet(int size)
1: 	{
1: 		bitSet = new BitSet(size);
1: 		this.size = size;
1: 	}
1: 
1: 	/**
1: 	 * Construct a JBitSet with the specified bitSet.
1: 	 *
1: 	 * @param bitSet	The BitSet.
1: 	 * @param size		The size of bitSet.
1: 	 *					NOTE: We need to specify the size since the size of a
1: 	 *					BitSet is not guaranteed to be the same as JBitSet.size().
1: 	 */
1: 	private JBitSet(BitSet bitSet, int size)
1: 	{
1: 		this.bitSet = bitSet;
1: 		this.size = size;
1: 	}
1: 
1: 	/**
1: 	 * Set the BitSet to have the exact same bits set as the parameter's BitSet.
1: 	 *
1: 	 * @param sourceBitSet	The JBitSet to copy.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setTo(JBitSet sourceBitSet)
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(size == sourceBitSet.size(),
1: 	    						 "JBitSets are expected to be the same size");
1: 	    }
1: 		/* High reuse solution */
1: 		and(sourceBitSet);
1: 		or(sourceBitSet);
1: 	}
1: 
1: 	/**
1: 	 * Test to see if one JBitSet contains another one of
1: 	 * the same size.
1: 	 *
1: 	 * @param jBitSet	JBitSet that we want to know if it is
1: 	 *					a subset of current JBitSet
1: 	 *
1: 	 * @return boolean	Whether or not jBitSet is a subset.
1: 	 */
1: 	public boolean contains(JBitSet jBitSet)
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(size == jBitSet.size(),
1: 	    						 "JBitSets are expected to be the same size");
1: 	    }
1: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1: 		{
1: 			if (jBitSet.bitSet.get(bitIndex) && ! (bitSet.get(bitIndex)))
1: 			{
1: 				return false;
1: 			}
1: 		}
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * See of a JBitSet has exactly 1 bit set.
1: 	 *
1: 	 * @return boolean	Whether or not JBitSet has a single bit set.
1: 	 */
1: 	public boolean hasSingleBitSet()
1: 	{
1: 		boolean found = false;
1: 
1: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1: 		{
1: 			if (bitSet.get(bitIndex))
1: 			{
1: 				if (found)
1: 				{
1: 					return false;
1: 				}
1: 				else
1: 				{
1: 					found = true;
1: 				}
1: 			}
1: 		}
1: 
1: 		return found;
1: 	}
1: 
1: 	/**
1: 	 * Get the first set bit (starting at index 0) from a JBitSet.
1: 	 *
1: 	 * @return int	Index of first set bit, -1 if none set.
1: 	 */
1: 	public int getFirstSetBit()
1: 	{
1: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1: 		{
1: 			if (bitSet.get(bitIndex))
1: 			{
1: 				return bitIndex;
1: 			}
1: 		}
1: 
1: 		return -1;
1: 	}
1: 
1: 	/**
1: 	 * Grow an existing JBitSet to the specified size.
1: 	 *
1: 	 * @param newSize	The new size
1: 	 *
1: 	 */
1: 	public void grow(int newSize)
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(newSize > size,
1: 	    					"New size is expected to be larger than current size");
1: 	    }
1: 
1: 		size = newSize;
1: 
1: 	}
1: 
1: 	/**
1: 	 * Clear all of the bits in this JBitSet
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void clearAll()
1: 	{
1: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
1: 		{
1: 			if (bitSet.get(bitIndex))
1: 			{
1: 				bitSet.clear(bitIndex);
1: 			}
1: 		}
1: 	}
1: 
1: 	/* Wrapper methods for BitSet's methods */
1: 	public String toString()
1: 	{
1: 		return bitSet.toString();
1: 	}
1: 
1: 	public boolean equals(Object obj)
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT((obj instanceof JBitSet),
1: 	    						 "obj is expected to be a JBitSet " + obj);
1: 	    }
1: 		return bitSet.equals(((JBitSet) obj).bitSet);
1: 	}
1: 
1: 	public int hashCode()
1: 	{
1: 		return bitSet.hashCode();
1: 	}
1: 
1: 	public Object clone()
1: 	{
1: 		return new JBitSet((BitSet) bitSet.clone(), size);
1: 	}
1: 
1: 	public boolean get(int bitIndex)
1: 	{
1: 		return bitSet.get(bitIndex);
1: 	}
1: 
1: 	public void set(int bitIndex)
1: 	{
1: 		bitSet.set(bitIndex);
1: 	}
1: 
1: 	public void clear(int bitIndex)
1: 	{
1: 		bitSet.clear(bitIndex);
1: 	}
1: 
1: 	public void and(JBitSet set)
1: 	{
1: 		bitSet.and(set.bitSet);
1: 	}
1: 
1: 	public void or(JBitSet set)
1: 	{
1: 		bitSet.or(set.bitSet);
1: 	}
1: 
1: 	public void xor(JBitSet set)
1: 	{
1: 		bitSet.xor(set.bitSet);
1: 	}
1: 
1: 	/**
1: 	 * Return the size of bitSet
1: 	 *
1: 	 * @return int	Size of bitSet
1: 	 */
1: 	public int size()
1: 	{
1: 		return size;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package com.ihost.cs
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.util;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.BitSet;
0: 
0: /**
0:  * JBitSet is a wrapper class for BitSet.  It is a fixed length implementation
0:  * which can be extended via the grow() method.  It provides additional
0:  * methods to manipulate BitSets.
0:  * NOTE: JBitSet was driven by the (current and perceived) needs of the
0:  * optimizer, but placed in the util package since it is not specific to
0:  * query trees..
0:  * NOTE: java.util.BitSet is final, so we must provide a wrapper class
0:  * which includes a BitSet member in order to extend the functionality.
0:  * We want to make it look like JBitSet extends BitSet, so we need to
0:  * provide wrapper methods for all of BitSet's methods.
0:  *
0:  * @author Jerry Brenner
0:  */
0: public final class JBitSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/* The BitSet that we'd like to extend */
0: 	private final BitSet	bitSet;
0: 	/* Cache size() of bitSet, since accessed a lot */
0: 	private int		size;
0: 
0: 	/**
0: 	 * Construct a JBitSet of the specified size.
0: 	 *
0: 	 * @param size	The number of bits in the JBitSet.
0: 	 */
0: 	public JBitSet(int size)
0: 	{
0: 		bitSet = new BitSet(size);
0: 		this.size = size;
0: 	}
0: 
0: 	/**
0: 	 * Construct a JBitSet with the specified bitSet.
0: 	 *
0: 	 * @param bitSet	The BitSet.
0: 	 * @param size		The size of bitSet.
0: 	 *					NOTE: We need to specify the size since the size of a
0: 	 *					BitSet is not guaranteed to be the same as JBitSet.size().
0: 	 */
0: 	private JBitSet(BitSet bitSet, int size)
0: 	{
0: 		this.bitSet = bitSet;
0: 		this.size = size;
0: 	}
0: 
0: 	/**
0: 	 * Set the BitSet to have the exact same bits set as the parameter's BitSet.
0: 	 *
0: 	 * @param sourceBitSet	The JBitSet to copy.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setTo(JBitSet sourceBitSet)
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(size == sourceBitSet.size(),
0: 	    						 "JBitSets are expected to be the same size");
0: 	    }
0: 		/* High reuse solution */
0: 		and(sourceBitSet);
0: 		or(sourceBitSet);
0: 	}
0: 
0: 	/**
0: 	 * Test to see if one JBitSet contains another one of
0: 	 * the same size.
0: 	 *
0: 	 * @param jBitSet	JBitSet that we want to know if it is
0: 	 *					a subset of current JBitSet
0: 	 *
0: 	 * @return boolean	Whether or not jBitSet is a subset.
0: 	 */
0: 	public boolean contains(JBitSet jBitSet)
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(size == jBitSet.size(),
0: 	    						 "JBitSets are expected to be the same size");
0: 	    }
0: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
0: 		{
0: 			if (jBitSet.bitSet.get(bitIndex) && ! (bitSet.get(bitIndex)))
0: 			{
0: 				return false;
0: 			}
0: 		}
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * See of a JBitSet has exactly 1 bit set.
0: 	 *
0: 	 * @return boolean	Whether or not JBitSet has a single bit set.
0: 	 */
0: 	public boolean hasSingleBitSet()
0: 	{
0: 		boolean found = false;
0: 
0: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
0: 		{
0: 			if (bitSet.get(bitIndex))
0: 			{
0: 				if (found)
0: 				{
0: 					return false;
0: 				}
0: 				else
0: 				{
0: 					found = true;
0: 				}
0: 			}
0: 		}
0: 
0: 		return found;
0: 	}
0: 
0: 	/**
0: 	 * Get the first set bit (starting at index 0) from a JBitSet.
0: 	 *
0: 	 * @return int	Index of first set bit, -1 if none set.
0: 	 */
0: 	public int getFirstSetBit()
0: 	{
0: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
0: 		{
0: 			if (bitSet.get(bitIndex))
0: 			{
0: 				return bitIndex;
0: 			}
0: 		}
0: 
0: 		return -1;
0: 	}
0: 
0: 	/**
0: 	 * Grow an existing JBitSet to the specified size.
0: 	 *
0: 	 * @param newSize	The new size
0: 	 *
0: 	 */
0: 	public void grow(int newSize)
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(newSize > size,
0: 	    					"New size is expected to be larger than current size");
0: 	    }
0: 
0: 		size = newSize;
0: 
0: 	}
0: 
0: 	/**
0: 	 * Clear all of the bits in this JBitSet
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void clearAll()
0: 	{
0: 		for (int bitIndex = 0; bitIndex < size; bitIndex++)
0: 		{
0: 			if (bitSet.get(bitIndex))
0: 			{
0: 				bitSet.clear(bitIndex);
0: 			}
0: 		}
0: 	}
0: 
0: 	/* Wrapper methods for BitSet's methods */
0: 	public String toString()
0: 	{
0: 		return bitSet.toString();
0: 	}
0: 
0: 	public boolean equals(Object obj)
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT((obj instanceof JBitSet),
0: 	    						 "obj is expected to be a JBitSet " + obj);
0: 	    }
0: 		return bitSet.equals(((JBitSet) obj).bitSet);
0: 	}
0: 
0: 	public int hashCode()
0: 	{
0: 		return bitSet.hashCode();
0: 	}
0: 
0: 	public Object clone()
0: 	{
0: 		return new JBitSet((BitSet) bitSet.clone(), size);
0: 	}
0: 
0: 	public boolean get(int bitIndex)
0: 	{
0: 		return bitSet.get(bitIndex);
0: 	}
0: 
0: 	public void set(int bitIndex)
0: 	{
0: 		bitSet.set(bitIndex);
0: 	}
0: 
0: 	public void clear(int bitIndex)
0: 	{
0: 		bitSet.clear(bitIndex);
0: 	}
0: 
0: 	public void and(JBitSet set)
0: 	{
0: 		bitSet.and(set.bitSet);
0: 	}
0: 
0: 	public void or(JBitSet set)
0: 	{
0: 		bitSet.or(set.bitSet);
0: 	}
0: 
0: 	public void xor(JBitSet set)
0: 	{
0: 		bitSet.xor(set.bitSet);
0: 	}
0: 
0: 	/**
0: 	 * Return the size of bitSet
0: 	 *
0: 	 * @return int	Size of bitSet
0: 	 */
0: 	public int size()
0: 	{
0: 		return size;
0: 	}
0: }
0: 
============================================================================