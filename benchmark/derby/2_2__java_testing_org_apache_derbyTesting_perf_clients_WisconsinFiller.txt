1:106ea47: /*
1:106ea47: 
1:106ea47: Derby - Class org.apache.derbyTesting.perf.clients.WisconsinFiller
1:106ea47: 
1:106ea47: Licensed to the Apache Software Foundation (ASF) under one or more
1:106ea47: contributor license agreements.  See the NOTICE file distributed with
1:106ea47: this work for additional information regarding copyright ownership.
1:106ea47: The ASF licenses this file to You under the Apache License, Version 2.0
1:106ea47: (the "License"); you may not use this file except in compliance with
1:106ea47: the License.  You may obtain a copy of the License at
1:106ea47: 
1:106ea47:    http://www.apache.org/licenses/LICENSE-2.0
1:106ea47: 
1:106ea47: Unless required by applicable law or agreed to in writing, software
1:106ea47: distributed under the License is distributed on an "AS IS" BASIS,
1:106ea47: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:106ea47: See the License for the specific language governing permissions and
1:106ea47: limitations under the License.
1:106ea47: 
1:106ea47: */
1:106ea47: 
1:106ea47: package org.apache.derbyTesting.perf.clients;
1:106ea47: 
1:106ea47: import java.sql.Connection;
1:106ea47: import java.sql.SQLException;
1:106ea47: import java.sql.Savepoint;
1:106ea47: import java.sql.Statement;
1:106ea47: import org.apache.derbyTesting.functionTests.tests.lang.wisconsin;
1:106ea47: 
1:106ea47: /**
1:106ea47:  * Class which creates and populates the tables used by
1:106ea47:  * {@code IndexJoinClient}. These are the same tables as the ones used by the
1:106ea47:  * functional Wisconsin test found in the lang suite.
1:106ea47:  */
1:106ea47: public class WisconsinFiller implements DBFiller {
1:106ea47: 
1:130cfe6:     int numRows;
1:130cfe6:     public WisconsinFiller(int nRows)
1:130cfe6:     {
1:130cfe6:         super();
1:130cfe6:         numRows = nRows;
1:130cfe6:     }
1:130cfe6:     public WisconsinFiller()
1:130cfe6:     {
1:130cfe6:         this(10000);
1:130cfe6:     }
1:106ea47:     public void fill(Connection c) throws SQLException {
1:106ea47:         c.setAutoCommit(false);
1:106ea47: 
1:106ea47:         dropTable(c, "TENKTUP1");
1:106ea47:         dropTable(c, "TENKTUP2");
1:106ea47:         dropTable(c, "ONEKTUP");
1:106ea47:         dropTable(c, "BPRIME");
1:106ea47: 
1:130cfe6:         wisconsin.createTables(c, false, numRows);
1:106ea47: 
1:106ea47:         c.commit();
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Helper method which drops a table if it exists. Nothing happens if
1:106ea47:      * the table doesn't exist.
1:106ea47:      *
1:106ea47:      * @param c the connection to use
1:106ea47:      * @param table the table to drop
1:106ea47:      * @throws SQLException if an unexpected database error occurs
1:106ea47:      */
1:106ea47:     static void dropTable(Connection c, String table) throws SQLException {
1:106ea47:         // Create a savepoint that we can roll back to if drop table fails.
1:106ea47:         // This is not needed by Derby, but some databases (e.g., PostgreSQL)
1:106ea47:         // don't allow more operations in a transaction if a statement fails,
1:106ea47:         // and we want to be able to run these tests against other databases
1:106ea47:         // than Derby.
1:106ea47:         Savepoint sp = c.setSavepoint();
1:106ea47:         Statement stmt = c.createStatement();
1:106ea47:         try {
1:106ea47:             stmt.executeUpdate("DROP TABLE " + table);
1:106ea47:         } catch (SQLException e) {
1:106ea47:             // OK to fail if table doesn't exist, roll back to savepoint
1:106ea47:             c.rollback(sp);
1:106ea47:         }
1:106ea47:         stmt.close();
1:106ea47:         c.releaseSavepoint(sp);
1:106ea47:     }
1:106ea47: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:130cfe6
/////////////////////////////////////////////////////////////////////////
1:     int numRows;
1:     public WisconsinFiller(int nRows)
1:     {
1:         super();
1:         numRows = nRows;
1:     }
1:     public WisconsinFiller()
1:     {
1:         this(10000);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         wisconsin.createTables(c, false, numRows);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.WisconsinFiller
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Savepoint;
1: import java.sql.Statement;
1: import org.apache.derbyTesting.functionTests.tests.lang.wisconsin;
1: 
1: /**
1:  * Class which creates and populates the tables used by
1:  * {@code IndexJoinClient}. These are the same tables as the ones used by the
1:  * functional Wisconsin test found in the lang suite.
1:  */
1: public class WisconsinFiller implements DBFiller {
1: 
1:     public void fill(Connection c) throws SQLException {
1:         c.setAutoCommit(false);
1: 
1:         dropTable(c, "TENKTUP1");
1:         dropTable(c, "TENKTUP2");
1:         dropTable(c, "ONEKTUP");
1:         dropTable(c, "BPRIME");
1: 
0:         wisconsin.createTables(c, false);
1: 
1:         c.commit();
1:     }
1: 
1:     /**
1:      * Helper method which drops a table if it exists. Nothing happens if
1:      * the table doesn't exist.
1:      *
1:      * @param c the connection to use
1:      * @param table the table to drop
1:      * @throws SQLException if an unexpected database error occurs
1:      */
1:     static void dropTable(Connection c, String table) throws SQLException {
1:         // Create a savepoint that we can roll back to if drop table fails.
1:         // This is not needed by Derby, but some databases (e.g., PostgreSQL)
1:         // don't allow more operations in a transaction if a statement fails,
1:         // and we want to be able to run these tests against other databases
1:         // than Derby.
1:         Savepoint sp = c.setSavepoint();
1:         Statement stmt = c.createStatement();
1:         try {
1:             stmt.executeUpdate("DROP TABLE " + table);
1:         } catch (SQLException e) {
1:             // OK to fail if table doesn't exist, roll back to savepoint
1:             c.rollback(sp);
1:         }
1:         stmt.close();
1:         c.releaseSavepoint(sp);
1:     }
1: }
============================================================================