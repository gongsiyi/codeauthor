1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.ProductLevel
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:70f7692: public class ProductLevel {
1:0326967:     String databaseProductName_;
1:0326967:     int versionLevel_;
1:0326967:     int releaseLevel_;
1:0326967:     private int modificationLevel_;
1:33776ff: 
1:70f7692:     // The following value is sent in the srvrlslv level
1:0326967:     String databaseProductVersion_;
1:33776ff: 
1:70f7692:     // The productID is set by the constructors.
1:70f7692:     // dabaseProductVersion added by derby to include  srvrlslv
1:70f7692:     public ProductLevel(String productID, String databaseProductName,
1:70f7692:                         String srvrlslv) {
1:70f7692:         // this.productID has the following format
1:70f7692:         //   CSS for Derby
1:70f7692:         // vv = version id
1:70f7692:         // rr = release id
1:70f7692:         // m = modification level
1:70f7692:         versionLevel_ = Integer.parseInt(productID.substring(3, 5));
1:70f7692:         releaseLevel_ = Integer.parseInt(productID.substring(5, 7));
1:70f7692:         modificationLevel_ = Integer.parseInt(productID.substring(7, 8));
1:70f7692:         databaseProductName_ = (databaseProductName == null) ?
1:70f7692:                 "Derby" : databaseProductName; // This is the srvclsnm in PROTOCOL.
1:33776ff: 
1:70f7692:         // databaseProductVersion - extracted from the srvrlslv.
1:70f7692:         // srvrlslv has the format <PRDID>/<ALTERNATE VERSION FORMAT>
1:70f7692:         // for example Derby has a four part verison number so might send
1:70f7692:         // CSS10000/10.0.1.1 beta. If the alternate version format is not
1:70f7692:         // specified,
1:70f7692:         // databaseProductVersion_ will just be set to the srvrlslvl.
1:70f7692:         // final fallback will be the product id.
1:70f7692:         // this is the value returned with the getDatabaseProductVersion()
1:70f7692:         // metadata call
1:70f7692:         int dbVersionOffset = 0;
1:70f7692:         if (srvrlslv != null) {
1:70f7692:             dbVersionOffset = srvrlslv.indexOf('/') + 1;
1:70f7692:             // if there was no '/' dbVersionOffset will just be 0
1:70f7692:             databaseProductVersion_ = srvrlslv.substring(dbVersionOffset);
1:70f7692:         }
1:70f7692:         if (databaseProductVersion_ == null) {
1:70f7692:             databaseProductVersion_ = productID;
1:70f7692:         }
5:33776ff:     }
1:33776ff: 
1:0326967:     boolean greaterThanOrEqualTo(int versionLevel,
1:0326967:                                  int releaseLevel,
1:0326967:                                  int modificationLevel) {
1:70f7692:         if (versionLevel_ > versionLevel) {
1:70f7692:             return true;
1:70f7692:         } else if (versionLevel_ == versionLevel) {
1:70f7692:             if (releaseLevel_ > releaseLevel) {
1:70f7692:                 return true;
1:70f7692:             } else if (releaseLevel_ == releaseLevel) {
1:70f7692:                 if (modificationLevel_ >= modificationLevel) {
1:70f7692:                     return true;
1:70f7692:                 }
1:70f7692:             }
1:70f7692:         }
1:70f7692:         return false;
1:33776ff:     }
1:70f7692: 
1:0326967:     boolean lessThan(int versionLevel,
1:0326967:                      int releaseLevel,
1:0326967:                      int modificationLevel) {
1:70f7692:         if (versionLevel_ < versionLevel) {
1:70f7692:             return true;
1:70f7692:         } else if (versionLevel_ == versionLevel) {
1:70f7692:             if (releaseLevel_ < releaseLevel) {
1:70f7692:                 return true;
1:70f7692:             } else if (releaseLevel_ == releaseLevel) {
1:70f7692:                 if (modificationLevel_ < modificationLevel) {
1:70f7692:                     return true;
1:70f7692:                 }
1:70f7692:             }
1:70f7692:         }
1:70f7692:         return false;
1:70f7692:     }
1:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     String databaseProductName_;
1:     int versionLevel_;
1:     int releaseLevel_;
1:     private int modificationLevel_;
1:     String databaseProductVersion_;
/////////////////////////////////////////////////////////////////////////
1:     boolean greaterThanOrEqualTo(int versionLevel,
1:                                  int releaseLevel,
1:                                  int modificationLevel) {
/////////////////////////////////////////////////////////////////////////
1:     boolean lessThan(int versionLevel,
1:                      int releaseLevel,
1:                      int modificationLevel) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: public class ProductLevel {
0:     public String databaseProductName_;
0:     public int versionLevel_;
0:     public int releaseLevel_;
0:     public int modificationLevel_;
1:     // The following value is sent in the srvrlslv level
0:     public String databaseProductVersion_;
1:     // The productID is set by the constructors.
1:     // dabaseProductVersion added by derby to include  srvrlslv
1:     public ProductLevel(String productID, String databaseProductName,
1:                         String srvrlslv) {
1:         // this.productID has the following format
1:         //   CSS for Derby
1:         // vv = version id
1:         // rr = release id
1:         // m = modification level
1:         versionLevel_ = Integer.parseInt(productID.substring(3, 5));
1:         releaseLevel_ = Integer.parseInt(productID.substring(5, 7));
1:         modificationLevel_ = Integer.parseInt(productID.substring(7, 8));
1:         databaseProductName_ = (databaseProductName == null) ?
1:                 "Derby" : databaseProductName; // This is the srvclsnm in PROTOCOL.
1:         // databaseProductVersion - extracted from the srvrlslv.
1:         // srvrlslv has the format <PRDID>/<ALTERNATE VERSION FORMAT>
1:         // for example Derby has a four part verison number so might send
1:         // CSS10000/10.0.1.1 beta. If the alternate version format is not
1:         // specified,
1:         // databaseProductVersion_ will just be set to the srvrlslvl.
1:         // final fallback will be the product id.
1:         // this is the value returned with the getDatabaseProductVersion()
1:         // metadata call
1:         int dbVersionOffset = 0;
1:         if (srvrlslv != null) {
1:             dbVersionOffset = srvrlslv.indexOf('/') + 1;
1:             // if there was no '/' dbVersionOffset will just be 0
1:             databaseProductVersion_ = srvrlslv.substring(dbVersionOffset);
1:         }
1:         if (databaseProductVersion_ == null) {
1:             databaseProductVersion_ = productID;
1:         }
0:     public boolean greaterThanOrEqualTo(int versionLevel, int releaseLevel, int modificationLevel) {
1:         if (versionLevel_ > versionLevel) {
1:             return true;
1:         } else if (versionLevel_ == versionLevel) {
1:             if (releaseLevel_ > releaseLevel) {
1:                 return true;
1:             } else if (releaseLevel_ == releaseLevel) {
1:                 if (modificationLevel_ >= modificationLevel) {
1:                     return true;
1:                 }
1:             }
1:         }
1:         return false;
1: 
0:     public boolean lessThan(int versionLevel, int releaseLevel, int modificationLevel) {
1:         if (versionLevel_ < versionLevel) {
1:             return true;
1:         } else if (versionLevel_ == versionLevel) {
1:             if (releaseLevel_ < releaseLevel) {
1:                 return true;
1:             } else if (releaseLevel_ == releaseLevel) {
1:                 if (modificationLevel_ < modificationLevel) {
1:                     return true;
1:                 }
1:             }
1:         }
1:         return false;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.ProductLevel
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.am;
1: 
0: public class ProductLevel
0: {
0:   public String databaseProductName_;
0:   public  int versionLevel_;
0:   public  int releaseLevel_;
0:   public  int modificationLevel_;
1: 
0:   // The following value is sent in the srvrlslv level
0:   public  String databaseProductVersion_;
1: 
0:   // The productID is set by the constructors.
0:   // dabaseProductVersion added by derby to include  srvrlslv
0:   public ProductLevel (String productID, String databaseProductName,
0: 					   String srvrlslv)
0:   {
0:     // this.productID has the following format
0:     //   CSS for Derby
0:     // vv = version id
0:     // rr = release id
0:     // m = modification level
0:     versionLevel_ = Integer.parseInt (productID.substring (3, 5));
0:     releaseLevel_ = Integer.parseInt (productID.substring (5, 7));
0:     modificationLevel_ = Integer.parseInt (productID.substring (7, 8));
0:     databaseProductName_ = (databaseProductName == null) ?
0: 		"Derby" : databaseProductName; // This is the srvclsnm in PROTOCOL.
1: 
0: 	// databaseProductVersion - extracted from the srvrlslv.
0: 	// srvrlslv has the format <PRDID>/<ALTERNATE VERSION FORMAT>
0: 	// for example Derby has a four part verison number so might send
0: 	// CSS10000/10.0.1.1 beta. If the alternate version format is not
0: 	// specified,
0: 	// databaseProductVersion_ will just be set to the srvrlslvl.
0: 	// final fallback will be the product id.
0: 	// this is the value returned with the getDatabaseProductVersion()
0: 	// metadata call
0: 	int dbVersionOffset = 0;
0: 	if (srvrlslv != null)
0: 	{
0: 		dbVersionOffset = srvrlslv.indexOf('/') + 1;
0: 		// if there was no '/' dbVersionOffset will just be 0
0: 		databaseProductVersion_ = srvrlslv.substring(dbVersionOffset);
1: 	}
0: 	if (databaseProductVersion_  == null)
0: 		databaseProductVersion_ = productID;
1:   }
1: 
0:   public boolean greaterThanOrEqualTo (int versionLevel, int releaseLevel, int modificationLevel)
0:   {
0:     if (versionLevel_ > versionLevel)
0:       return true;
0:     else if (versionLevel_ == versionLevel) {
0:       if (releaseLevel_ > releaseLevel)
0:         return true;
0:       else if (releaseLevel_ == releaseLevel)
0:         if (modificationLevel_ >= modificationLevel)
0:           return true;
1:     }
0:     return false;
1:   }
1: 
0:   public boolean lessThan (int versionLevel, int releaseLevel, int modificationLevel)
0:   {
0:     if (versionLevel_ < versionLevel)
0:       return true;
0:     else if (versionLevel_ == versionLevel) {
0:       if (releaseLevel_ < releaseLevel)
0:         return true;
0:       else if (releaseLevel_ == releaseLevel)
0:         if (modificationLevel_ < modificationLevel)
0:           return true;
1:     }
0:     return false;
1:   }
1: }
============================================================================