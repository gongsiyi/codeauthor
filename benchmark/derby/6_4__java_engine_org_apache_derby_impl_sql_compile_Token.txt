1:fe77ca5: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.Token
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.sql.compile;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * Describes the input token stream.
1:fe77ca5:  */
1:fe77ca5: 
1:b49cc55: class Token {
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * An integer that describes the kind of this token.  This numbering
1:fe77ca5:    * system is determined by JavaCCParser, and a table of these numbers is
1:fe77ca5:    * stored in the file ...Constants.java.
1:fe77ca5:    */
1:fe77ca5:   public int kind;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * beginLine and beginColumn describe the position of the first character
1:fe77ca5:    * of this token; endLine and endColumn describe the position of the
1:fe77ca5:    * last character of this token.
1:fe77ca5:    */
1:fe77ca5:   public int beginLine, beginColumn, endLine, endColumn;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * beginOffset and endOffset are useful for siphoning substrings out of
1:fe77ca5:    * the Statement so that we can recompile the substrings at upgrade time.
1:fe77ca5:    * For instance, VIEW definitions and the Restrictions on Published Tables
1:fe77ca5:    * need to be recompiled at upgrade time.
1:fe77ca5:    */
1:fe77ca5:   public int beginOffset, endOffset;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * The string image of the token.
1:fe77ca5:    */
1:fe77ca5:   public String image;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * A reference to the next regular (non-special) token from the input
1:fe77ca5:    * stream.  If this is the last token from the input stream, or if the
1:fe77ca5:    * token manager has not read tokens beyond this one, this field is
1:fe77ca5:    * set to null.  This is true only if this token is also a regular
1:fe77ca5:    * token.  Otherwise, see below for a description of the contents of
1:fe77ca5:    * this field.
1:fe77ca5:    */
1:fe77ca5:   public Token next;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * This field is used to access special tokens that occur prior to this
1:fe77ca5:    * token, but after the immediately preceding regular (non-special) token.
1:fe77ca5:    * If there are no such special tokens, this field is set to null.
1:fe77ca5:    * When there are more than one such special token, this field refers
1:fe77ca5:    * to the last of these special tokens, which in turn refers to the next
1:fe77ca5:    * previous special token through its specialToken field, and so on
1:fe77ca5:    * until the first special token (whose specialToken field is null).
1:fe77ca5:    * The next fields of special tokens refer to other special tokens that
1:fe77ca5:    * immediately follow it (without an intervening regular token).  If there
1:fe77ca5:    * is no such token, this field is null.
1:fe77ca5:    */
1:fe77ca5:   public Token specialToken;
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * Returns the image.
1:fe77ca5:    */
1:3bb140c:   @Override
1:fe77ca5:   public String toString()
1:fe77ca5:   {
1:fe77ca5:      return image;
1:fe77ca5:   }
1:fe77ca5: 
1:fe77ca5:   /**
1:fe77ca5:    * Returns a new Token object, by default. However, if you want, you
1:fe77ca5:    * can create and return subclass objects based on the value of ofKind.
1:fe77ca5:    * Simply add the cases to the switch for all those special cases.
1:fe77ca5:    * For example, if you have a subclass of Token called IDToken that
1:fe77ca5:    * you want to create if ofKind is ID, simlpy add something like :
1:fe77ca5:    *
1:fe77ca5:    *    case MyParserConstants.ID : return new IDToken();
1:fe77ca5:    *
1:fe77ca5:    * to the following switch statement. Then you can cast matchedToken
1:fe77ca5:    * variable to the appropriate type and use it in your lexical actions.
1:fe77ca5:    */
1:3bb140c:   public static Token newToken(int ofKind)
1:fe77ca5:   {
1:fe77ca5:      switch(ofKind)
1:fe77ca5:      {
1:fe77ca5:        default : return new Token();
1:fe77ca5:      }
1:fe77ca5:   }
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   public static Token newToken(int ofKind)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b49cc55
/////////////////////////////////////////////////////////////////////////
1: class Token {
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.Token
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: /**
1:  * Describes the input token stream.
1:  */
1: 
0: public class Token {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:   /**
1:    * An integer that describes the kind of this token.  This numbering
1:    * system is determined by JavaCCParser, and a table of these numbers is
1:    * stored in the file ...Constants.java.
1:    */
1:   public int kind;
1: 
1:   /**
1:    * beginLine and beginColumn describe the position of the first character
1:    * of this token; endLine and endColumn describe the position of the
1:    * last character of this token.
1:    */
1:   public int beginLine, beginColumn, endLine, endColumn;
1: 
1:   /**
1:    * beginOffset and endOffset are useful for siphoning substrings out of
1:    * the Statement so that we can recompile the substrings at upgrade time.
1:    * For instance, VIEW definitions and the Restrictions on Published Tables
1:    * need to be recompiled at upgrade time.
1:    */
1:   public int beginOffset, endOffset;
1: 
1:   /**
1:    * The string image of the token.
1:    */
1:   public String image;
1: 
1:   /**
1:    * A reference to the next regular (non-special) token from the input
1:    * stream.  If this is the last token from the input stream, or if the
1:    * token manager has not read tokens beyond this one, this field is
1:    * set to null.  This is true only if this token is also a regular
1:    * token.  Otherwise, see below for a description of the contents of
1:    * this field.
1:    */
1:   public Token next;
1: 
1:   /**
1:    * This field is used to access special tokens that occur prior to this
1:    * token, but after the immediately preceding regular (non-special) token.
1:    * If there are no such special tokens, this field is set to null.
1:    * When there are more than one such special token, this field refers
1:    * to the last of these special tokens, which in turn refers to the next
1:    * previous special token through its specialToken field, and so on
1:    * until the first special token (whose specialToken field is null).
1:    * The next fields of special tokens refer to other special tokens that
1:    * immediately follow it (without an intervening regular token).  If there
1:    * is no such token, this field is null.
1:    */
1:   public Token specialToken;
1: 
1:   /**
1:    * Returns the image.
1:    */
1:   public String toString()
1:   {
1:      return image;
1:   }
1: 
1:   /**
1:    * Returns a new Token object, by default. However, if you want, you
1:    * can create and return subclass objects based on the value of ofKind.
1:    * Simply add the cases to the switch for all those special cases.
1:    * For example, if you have a subclass of Token called IDToken that
1:    * you want to create if ofKind is ID, simlpy add something like :
1:    *
1:    *    case MyParserConstants.ID : return new IDToken();
1:    *
1:    * to the following switch statement. Then you can cast matchedToken
1:    * variable to the appropriate type and use it in your lexical actions.
1:    */
0:   public static final Token newToken(int ofKind)
1:   {
1:      switch(ofKind)
1:      {
1:        default : return new Token();
1:      }
1:   }
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: /**
0:  * Describes the input token stream.
0:  */
0: 
0: public class Token {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:   /**
0:    * An integer that describes the kind of this token.  This numbering
0:    * system is determined by JavaCCParser, and a table of these numbers is
0:    * stored in the file ...Constants.java.
0:    */
0:   public int kind;
0: 
0:   /**
0:    * beginLine and beginColumn describe the position of the first character
0:    * of this token; endLine and endColumn describe the position of the
0:    * last character of this token.
0:    */
0:   public int beginLine, beginColumn, endLine, endColumn;
0: 
0:   /**
0:    * beginOffset and endOffset are useful for siphoning substrings out of
0:    * the Statement so that we can recompile the substrings at upgrade time.
0:    * For instance, VIEW definitions and the Restrictions on Published Tables
0:    * need to be recompiled at upgrade time.
0:    */
0:   public int beginOffset, endOffset;
0: 
0:   /**
0:    * The string image of the token.
0:    */
0:   public String image;
0: 
0:   /**
0:    * A reference to the next regular (non-special) token from the input
0:    * stream.  If this is the last token from the input stream, or if the
0:    * token manager has not read tokens beyond this one, this field is
0:    * set to null.  This is true only if this token is also a regular
0:    * token.  Otherwise, see below for a description of the contents of
0:    * this field.
0:    */
0:   public Token next;
0: 
0:   /**
0:    * This field is used to access special tokens that occur prior to this
0:    * token, but after the immediately preceding regular (non-special) token.
0:    * If there are no such special tokens, this field is set to null.
0:    * When there are more than one such special token, this field refers
0:    * to the last of these special tokens, which in turn refers to the next
0:    * previous special token through its specialToken field, and so on
0:    * until the first special token (whose specialToken field is null).
0:    * The next fields of special tokens refer to other special tokens that
0:    * immediately follow it (without an intervening regular token).  If there
0:    * is no such token, this field is null.
0:    */
0:   public Token specialToken;
0: 
0:   /**
0:    * Returns the image.
0:    */
0:   public String toString()
0:   {
0:      return image;
0:   }
0: 
0:   /**
0:    * Returns a new Token object, by default. However, if you want, you
0:    * can create and return subclass objects based on the value of ofKind.
0:    * Simply add the cases to the switch for all those special cases.
0:    * For example, if you have a subclass of Token called IDToken that
0:    * you want to create if ofKind is ID, simlpy add something like :
0:    *
0:    *    case MyParserConstants.ID : return new IDToken();
0:    *
0:    * to the following switch statement. Then you can cast matchedToken
0:    * variable to the appropriate type and use it in your lexical actions.
0:    */
0:   public static final Token newToken(int ofKind)
0:   {
0:      switch(ofKind)
0:      {
0:        default : return new Token();
0:      }
0:   }
0: 
0: }
============================================================================