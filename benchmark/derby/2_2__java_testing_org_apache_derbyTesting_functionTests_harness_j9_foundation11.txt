1:e45787f: /*
1:e45787f: 
1:e45787f:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9_foundation11
1:e45787f: 
1:e45787f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e45787f:    contributor license agreements.  See the NOTICE file distributed with
1:e45787f:    this work for additional information regarding copyright ownership.
1:e45787f:    The ASF licenses this file to You under the Apache License, Version 2.0
1:e45787f:    (the "License"); you may not use this file except in compliance with
1:e45787f:    the License.  You may obtain a copy of the License at
1:e45787f: 
1:e45787f:       http://www.apache.org/licenses/LICENSE-2.0
1:e45787f: 
1:e45787f:    Unless required by applicable law or agreed to in writing, software
1:e45787f:    distributed under the License is distributed on an "AS IS" BASIS,
1:e45787f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e45787f:    See the License for the specific language governing permissions and
1:e45787f:    limitations under the License.
1:e45787f: 
1:e45787f:  */
1:e45787f: 
1:e45787f: package org.apache.derbyTesting.functionTests.harness;
1:e45787f: import java.util.Vector;
1:e45787f: import java.util.StringTokenizer;
1:e45787f: import java.util.Properties;
1:e45787f: 
1:e45787f: /**
1:c986862:   <p>This class is for IBM's J9 jdk 1.3., foundation class library; v 2.4 (weme6.2)
1:e45787f: 
1:e45787f:  */
1:e45787f: public class j9_foundation11 extends jvm {
1:e45787f: 
1:e45787f:     public String getName(){return "j9_foundation11";}
1:e45787f:     public j9_foundation11(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:e45787f:     long ss, long oss, long ms, long mx, String classpath, String prof,
1:3f5c48a:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:e45787f:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:e45787f: 		verify,noverify,nojit,D);
1:e45787f:     }
1:e45787f:     // more typical use:
1:3f5c48a:     public j9_foundation11(String classpath, Vector<String> D) {
1:e45787f:         super(classpath,D);
1:e45787f:     }
1:e45787f:     // more typical use:
1:3f5c48a:     public j9_foundation11(long ms, long mx, String classpath, Vector<String> D) {
1:e45787f:         super(ms,mx,classpath,D);
1:e45787f:     }
1:e45787f:     // actual use
1:e45787f:     public j9_foundation11() {
1:e45787f: 	Properties sp = System.getProperties();
1:e45787f: 	String srvJvm = sp.getProperty("serverJvm");
1:e45787f: 	if ((srvJvm!=null) && (srvJvm.toUpperCase().startsWith("J9")))
1:e45787f: 	{
1:e45787f: 		String wshome = guessWSHome();
1:e45787f: 		// note, may have to use separator instead of hardcoding the slashes...
1:c986862: 		setJavaCmd(wshome+"/weme6.2/bin/j9");
1:e45787f: 	}
1:e45787f: 	else
1:e45787f: 		setJavaCmd("j9");
1:e45787f:     }
1:e45787f: 
1:e45787f:     // return the command line to invoke this VM.  The caller then adds
1:e45787f:     // the class and program arguments.
1:3f5c48a:     public Vector<String> getCommandLine()
1:e45787f:     {
1:e45787f:         StringBuffer sb = new StringBuffer();
1:3f5c48a:         Vector<String> v = super.getCommandLine();
1:e45787f:         appendOtherFlags(sb);
1:e45787f:         String s = sb.toString();
1:e45787f:         StringTokenizer st = new StringTokenizer(s);
1:e45787f:         while (st.hasMoreTokens())
1:e45787f:         {
1:e45787f:             v.addElement(st.nextToken());
1:e45787f:         }
1:e45787f:         return v;
1:e45787f: 	}
1:e45787f: 
1:e45787f:     public void appendOtherFlags(StringBuffer sb)
1:e45787f:     {
1:e45787f:         Properties sp = System.getProperties();
1:e45787f:         String bootcp = sp.getProperty("bootcp");
1:e45787f:         String srvJvm = sp.getProperty("serverJvm");
1:e45787f:         // if we're coming in to be the server jvm for networkserver testing on j9,
1:e45787f:         // bootcp is null, so we need to try to setup the bootclasspath from scratch
1:c986862:         // for now, assume we're only interested in doing this for weme6.2_foundation, worry about
1:e45787f:         // newer versions, multiple class libraries, or multiple releases later.
1:e45787f:         sb.append(" -jcl:foun11");
1:e45787f: 
1:e45787f:         if ((srvJvm !=null ) && (srvJvm.toUpperCase().startsWith("J9")))
1:e45787f:         {
1:e45787f:             String pathsep = System.getProperty("path.separator");
1:e45787f:             String wshome = guessWSHome();
1:c986862:             // note, assuming jclFoundation classes sit under weme6.2/lib/jclFoundation11
1:c986862:             //       and that jdbc.jar sits under weme6.2/lib
1:e45787f:             // note, may have to switch to sep instead of hardcoding the slashes...
1:c986862:             sb.append(" -Xbootclasspath/a:" + wshome + "/weme6.2/lib/jclFoundation11/classes.zip"
1:c986862:                 + pathsep + wshome + "/weme6.2/lib/jclFoundation11/locale.zip"
1:c986862:                 + pathsep + wshome + "/weme6.2/lib/jdbc.jar");
1:e45787f:         } 
1:e45787f:         else
1:e45787f:             sb.append(" -Xbootclasspath/a:" + bootcp);
1:e45787f:         if (noasyncgc) warn("j9_foundation does not support noasyncgc");
1:e45787f:         if (verbosegc) sb.append(" -verbose:gc");
1:e45787f:         if (noclassgc) warn("j9_foundation does not support noclassgc");
1:e45787f:         if (ss>=0) warn("j9_foundation does not support ss");
1:e45787f:         if (oss>=0) warn("j9_foundation does not support oss");
1:e45787f:         if (ms>=0) {
1:e45787f:           sb.append(" -Xss");
1:e45787f:           sb.append(ms);
1:e45787f: 		  //sb.append("k");
1:e45787f:         }
1:e45787f:         if (mx>=0) {
1:e45787f:           sb.append(" -Xmx");
1:e45787f:           sb.append(mx);
1:e45787f: 		  //sb.append("k");
1:e45787f:         }
1:e45787f:         if (classpath!=null) warn("j9_foundation does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:e45787f:         if (prof!=null) warn("j9_foundation does not support prof");
1:e45787f:         if (verify) sb.append(" -verify");
1:e45787f:         if (noverify) warn("j9_foundation does not support noverify");
1:e45787f:         if (nojit) sb.append(" -Xnojit");
1:e45787f:         if (D != null)
1:e45787f:           for (int i=0; i<D.size();i++) {
1:e45787f: 	        sb.append(" -D");
1:e45787f: 	        sb.append((String)(D.elementAt(i)));
1:e45787f:           }
1:e45787f:     }
1:e45787f: 	public String getDintro() { return "-D"; }
1:e45787f: 
1:e45787f: //	protected void setSecurityProps()
1:e45787f: //	{
1:e45787f: //		System.out.println("Note: J9 (foundation) tests do not run with security manager");		
1:e45787f: //	}
1:e45787f: 
1:e45787f: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:     public j9_foundation11(String classpath, Vector<String> D) {
1:     public j9_foundation11(long ms, long mx, String classpath, Vector<String> D) {
/////////////////////////////////////////////////////////////////////////
1:     public Vector<String> getCommandLine()
1:         Vector<String> v = super.getCommandLine();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:c986862
/////////////////////////////////////////////////////////////////////////
1:   <p>This class is for IBM's J9 jdk 1.3., foundation class library; v 2.4 (weme6.2)
/////////////////////////////////////////////////////////////////////////
1: 		setJavaCmd(wshome+"/weme6.2/bin/j9");
/////////////////////////////////////////////////////////////////////////
1:         // for now, assume we're only interested in doing this for weme6.2_foundation, worry about
/////////////////////////////////////////////////////////////////////////
1:             // note, assuming jclFoundation classes sit under weme6.2/lib/jclFoundation11
1:             //       and that jdbc.jar sits under weme6.2/lib
1:             sb.append(" -Xbootclasspath/a:" + wshome + "/weme6.2/lib/jclFoundation11/classes.zip"
1:                 + pathsep + wshome + "/weme6.2/lib/jclFoundation11/locale.zip"
1:                 + pathsep + wshome + "/weme6.2/lib/jdbc.jar");
commit:e45787f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9_foundation11
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: import java.util.Properties;
1: 
1: /**
0:   <p>This class is for IBM's J9 jdk 1.3., foundation class library; v 2.3 (weme6.1)
1: 
1:  */
1: public class j9_foundation11 extends jvm {
1: 
1:     public String getName(){return "j9_foundation11";}
1:     public j9_foundation11(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
1:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1: 		verify,noverify,nojit,D);
1:     }
1:     // more typical use:
0:     public j9_foundation11(String classpath, Vector D) {
1:         super(classpath,D);
1:     }
1:     // more typical use:
0:     public j9_foundation11(long ms, long mx, String classpath, Vector D) {
1:         super(ms,mx,classpath,D);
1:     }
1:     // actual use
1:     public j9_foundation11() {
1: 	Properties sp = System.getProperties();
1: 	String srvJvm = sp.getProperty("serverJvm");
1: 	if ((srvJvm!=null) && (srvJvm.toUpperCase().startsWith("J9")))
1: 	{
1: 		String wshome = guessWSHome();
1: 		// note, may have to use separator instead of hardcoding the slashes...
0: 		setJavaCmd(wshome+"/weme6.1/bin/j9");
1: 	}
1: 	else
1: 		setJavaCmd("j9");
1:     }
1: 
1:     // return the command line to invoke this VM.  The caller then adds
1:     // the class and program arguments.
0:     public Vector getCommandLine() 
1:     {
1:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1:         appendOtherFlags(sb);
1:         String s = sb.toString();
1:         StringTokenizer st = new StringTokenizer(s);
1:         while (st.hasMoreTokens())
1:         {
1:             v.addElement(st.nextToken());
1:         }
1:         return v;
1: 	}
1: 
1:     public void appendOtherFlags(StringBuffer sb)
1:     {
1:         Properties sp = System.getProperties();
1:         String bootcp = sp.getProperty("bootcp");
1:         String srvJvm = sp.getProperty("serverJvm");
1:         // if we're coming in to be the server jvm for networkserver testing on j9,
1:         // bootcp is null, so we need to try to setup the bootclasspath from scratch
0:         // for now, assume we're only interested in doing this for weme6.1_foundation, worry about
1:         // newer versions, multiple class libraries, or multiple releases later.
1:         sb.append(" -jcl:foun11");
1: 
1:         if ((srvJvm !=null ) && (srvJvm.toUpperCase().startsWith("J9")))
1:         {
1:             String pathsep = System.getProperty("path.separator");
1:             String wshome = guessWSHome();
0:             // note, assuming jclFoundation classes sit under weme6.1/lib/jclFoundation11
0:             //       and that jdbc.jar sits under weme6.1/lib
1:             // note, may have to switch to sep instead of hardcoding the slashes...
0:             sb.append(" -Xbootclasspath/a:" + wshome + "/weme6.1/lib/jclFoundation11/classes.zip"
0:                 + pathsep + wshome + "/weme6.1/lib/jclFoundation11/locale.zip"
0:                 + pathsep + wshome + "/weme6.1/lib/jdbc.jar");
1:         } 
1:         else
1:             sb.append(" -Xbootclasspath/a:" + bootcp);
1:         if (noasyncgc) warn("j9_foundation does not support noasyncgc");
1:         if (verbosegc) sb.append(" -verbose:gc");
1:         if (noclassgc) warn("j9_foundation does not support noclassgc");
1:         if (ss>=0) warn("j9_foundation does not support ss");
1:         if (oss>=0) warn("j9_foundation does not support oss");
1:         if (ms>=0) {
1:           sb.append(" -Xss");
1:           sb.append(ms);
1: 		  //sb.append("k");
1:         }
1:         if (mx>=0) {
1:           sb.append(" -Xmx");
1:           sb.append(mx);
1: 		  //sb.append("k");
1:         }
1:         if (classpath!=null) warn("j9_foundation does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:         if (prof!=null) warn("j9_foundation does not support prof");
1:         if (verify) sb.append(" -verify");
1:         if (noverify) warn("j9_foundation does not support noverify");
1:         if (nojit) sb.append(" -Xnojit");
1:         if (D != null)
1:           for (int i=0; i<D.size();i++) {
1: 	        sb.append(" -D");
1: 	        sb.append((String)(D.elementAt(i)));
1:           }
1:     }
1: 	public String getDintro() { return "-D"; }
1: 
1: //	protected void setSecurityProps()
1: //	{
1: //		System.out.println("Note: J9 (foundation) tests do not run with security manager");		
1: //	}
1: 
1: }
============================================================================