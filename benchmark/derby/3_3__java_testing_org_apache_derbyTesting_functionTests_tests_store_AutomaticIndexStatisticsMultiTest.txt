1:0548478: /*
3:0548478: 
1:0548478:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsMultiTest
1:0548478: 
1:0548478:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0548478:    contributor license agreements.  See the NOTICE file distributed with
1:0548478:    this work for additional information regarding copyright ownership.
1:0548478:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0548478:    (the "License"); you may not use this file except in compliance with
1:0548478:    the License.  You may obtain a copy of the License at
1:0548478: 
1:0548478:       http://www.apache.org/licenses/LICENSE-2.0
1:0548478: 
1:0548478:    Unless required by applicable law or agreed to in writing, software
1:0548478:    distributed under the License is distributed on an "AS IS" BASIS,
1:0548478:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0548478:    See the License for the specific language governing permissions and
1:0548478:    limitations under the License.
1:0548478: 
1:0548478:  */
1:0548478: package org.apache.derbyTesting.functionTests.tests.store;
1:0548478: 
1:8e9474f: import java.io.PrintWriter;
1:8e9474f: import java.io.StringWriter;
1:0548478: import java.sql.Connection;
1:0548478: import java.sql.PreparedStatement;
1:0548478: import java.sql.ResultSet;
1:0548478: import java.sql.SQLException;
1:0548478: import java.sql.Statement;
1:8e9474f: import java.util.ArrayList;
1:8e9474f: import java.util.List;
1:0548478: import java.util.Random;
1:0548478: import junit.framework.Test;
1:0548478: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0548478: import org.apache.derbyTesting.junit.IndexStatsUtil;
1:0548478: import org.apache.derbyTesting.junit.IndexStatsUtil.IdxStats;
1:0548478: 
1:0548478: /**
1:0548478:  * Tests that the update triggering code can handle a high amount of requests,
1:0548478:  * both when the data dictionary is operating in cached mode and in DDL mode.
1:0548478:  */
1:0548478: public class AutomaticIndexStatisticsMultiTest
1:0548478:     extends BaseJDBCTestCase {
1:0548478: 
1:0548478:     private static final String TAB = "MTSEL";
1:0548478:     private static final int _100K = 100000;
1:0548478: 
1:0548478:     public AutomaticIndexStatisticsMultiTest(String name) {
1:0548478:         super(name);
1:0548478:     }
1:0548478: 
1:0548478:     public void testMTSelect()
1:0548478:             throws Exception {
1:0548478:         prepareTable(true);
1:0548478: 
1:0548478:         // Create threads compiling a select query for the table
1:0548478:         int threadCount = 5;
1:0548478:         long runTime = 10000;
1:0548478:         MTCompileThread[] compileThreads = new MTCompileThread[threadCount];
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             compileThreads[i] =
1:0548478:                     new MTCompileThread(openDefaultConnection(), runTime);
1:0548478:         }
1:0548478: 
1:0548478:         // Start the threads and let them run for a while.
1:0548478:         Thread[] threads = new Thread[threadCount];
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             threads[i] = new Thread(compileThreads[i]);
1:0548478:             threads[i].start();
1:0548478:         }
1:0548478: 
1:0548478:         // Wait for the threads to finish.
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             threads[i].join(600*1000); // Time out after 600 seconds.
1:0548478:         }
1:0548478: 
1:0548478:         int total = 0;
1:0548478:         int totalError = 0;
1:3f5c48a:         List<SQLException> errors = new ArrayList<SQLException>();
1:0548478:         for (int i=0; i < threadCount; i++) {
1:8e9474f:             MTCompileThread ct = compileThreads[i];
1:8e9474f:             int count = ct.getCount();
1:8e9474f:             int errorCount = ct.getErrorCount();
1:0548478:             total += count;
1:8e9474f:             totalError += errorCount;
1:8e9474f:             errors.addAll(ct.getErrors());
1:0548478:         }
1:0548478:         println("TOTAL = " + total + " (of which " + totalError + " errors)");
1:8e9474f:         if (totalError > 0) {
1:8e9474f:             // Build an informative failure string.
1:8e9474f:             StringWriter msg = new StringWriter();
1:8e9474f:             PrintWriter out = new PrintWriter(msg);
1:8e9474f:             out.println(totalError + " select/compile errors reported:");
1:3f5c48a:             for (SQLException sqle : errors) {
1:8e9474f:                 out.println("------");
1:8e9474f:                 sqle.printStackTrace(out);
1:8e9474f:             }
1:8e9474f:             out.close();
1:8e9474f:             fail(msg.toString());
1:8e9474f:         }
1:0548478: 
1:0548478:         verifyStatistics();
1:0548478:         // Shutdown database to log daemon stats (if logging is enabled).
1:0548478:         getTestConfiguration().shutdownDatabase();
1:0548478:     }
1:0548478: 
1:0548478:     public void testMTSelectWithDDL()
1:0548478:             throws Exception {
1:0548478:         prepareTable(true);
1:0548478: 
1:0548478:         // Create threads compiling a select query for the table
1:0548478:         int threadCount = 5;
1:0548478:         long runTime = 10000;
1:0548478:         MTCompileThread[] compileThreads = new MTCompileThread[threadCount];
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             compileThreads[i] =
1:0548478:                     new MTCompileThread(openDefaultConnection(), runTime);
1:0548478:         }
1:0548478: 
1:0548478:         // Start the drop/create thread.
1:0548478:         MTCreateDropThread createThread = new MTCreateDropThread(
1:0548478:                 openDefaultConnection(), runTime);
1:0548478:         Thread[] threads = new Thread[threadCount +1];
1:0548478:         threads[0] = new Thread(createThread);
1:0548478:         threads[0].start();
1:0548478: 
1:0548478:         // Start the threads and let them run for a while.
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             threads[i+1] = new Thread(compileThreads[i]);
1:0548478:             threads[i+1].start();
1:0548478:         }
1:0548478: 
1:0548478:         // Wait for the threads to finish.
1:0548478:         for (int i=0; i < threadCount; i++) {
1:0548478:             threads[i].join(600*1000); // Time out after 600 seconds.
1:0548478:         }
1:0548478: 
1:0548478:         int total = 0;
1:0548478:         int totalError = 0;
1:3f5c48a:         List<SQLException> errors = new ArrayList<SQLException>();
1:0548478:         for (int i=0; i < threadCount; i++) {
1:8e9474f:             MTCompileThread ct = compileThreads[i];
1:8e9474f:             int count = ct.getCount();
1:8e9474f:             int errorCount = ct.getErrorCount();
1:0548478:             total += count;
1:8e9474f:             totalError += errorCount;
1:8e9474f:             errors.addAll(ct.getErrors());
1:0548478:         }
1:0548478:         println("TOTAL = " + total + " (of which " + totalError +
1:0548478:                 " errors) CREATES = " + createThread.getCreates());
1:8e9474f:         if (totalError > 0 || createThread.failed()) {
1:8e9474f:             // Build an informative failure string.
1:8e9474f:             StringWriter msg = new StringWriter();
1:8e9474f:             PrintWriter out = new PrintWriter(msg);
1:8e9474f:             out.println("create/drop thread " +
1:8e9474f:                     (createThread.failed() ? "died" : "survived") + ", " +
1:8e9474f:                     totalError + " select/compile errors reported:");
1:8e9474f:             if (createThread.failed()) {
1:8e9474f:                 out.println("create/drop thread error: ");
1:8e9474f:                 createThread.getError().printStackTrace(out);
1:8e9474f:             }
1:8e9474f:             out.println("select/compile errors:");
1:3f5c48a:             for (SQLException sqle : errors) {
1:8e9474f:                 out.println("------");
1:8e9474f:                 sqle.printStackTrace(out);
1:8e9474f:             }
1:8e9474f:             out.close();
1:8e9474f:             fail(msg.toString());
1:8e9474f:         }
1:0548478: 
1:0548478:         verifyStatistics();
1:0548478:         // Shutdown database to log daemon stats (if logging is enabled).
1:0548478:         getTestConfiguration().shutdownDatabase();
1:0548478:     }
1:0548478: 
1:0548478:     private void verifyStatistics()
1:0548478:             throws SQLException {
1:472a1aa:         // DERBY-5097: On machines with a single core/CPU the load generated
1:472a1aa:         // by the test threads may cause the index statistics daemon worker
1:472a1aa:         // thread to be "starved". Add a timeout to give it a chance to do
1:472a1aa:         // what it has been told to do.
1:d92291d:         IndexStatsUtil stats = new IndexStatsUtil(getConnection(), 5000);
1:0548478:         IdxStats[] myStats = stats.getStatsTable(TAB, 2);
1:0548478:         for (int i=0; i < myStats.length; i++) {
1:0548478:             IdxStats s = myStats[i];
1:0548478:             assertEquals(_100K, s.rows);
1:0548478:             switch (s.lcols) {
1:0548478:                 case 1:
1:0548478:                     assertEquals(10, s.card);
1:0548478:                     break;
1:0548478:                 case 2:
1:0548478:                     assertEquals(_100K, s.card);
1:0548478:                     break;
1:0548478:                 default:
1:0548478:                     fail("unexpected number of leading columns: " + s.lcols);
1:0548478:             }
1:0548478:         }
1:0548478:     }
1:0548478: 
1:0548478:     private void prepareTable(boolean dropIfExists)
1:0548478:             throws SQLException {
1:0548478:         Statement stmt = createStatement();
1:0548478:         ResultSet rs = getConnection().getMetaData().getTables(
1:0548478:                 null, null, TAB, null);
1:0548478:         if (rs.next()) {
1:0548478:             assertFalse(rs.next());
1:0548478:             rs.close();
1:0548478:             if (dropIfExists) {
1:0548478:                 println("table " + TAB + " already exists, dropping");
1:0548478:                 stmt.executeUpdate("drop table " + TAB);
1:0548478:             } else {
1:0548478:                 println("table " + TAB + " already exists, reusing");
1:0548478:                 return;
1:0548478:             }
1:0548478:         } else {
1:0548478:             rs.close();
1:0548478:         }
1:0548478: 
1:0548478:         stmt.executeUpdate("create table " + TAB + " (val1 int, val2 int)");
1:0548478:         stmt.executeUpdate("create index " +
1:0548478:                 "mtsel_idx on " + TAB + " (val1, val2)");
1:0548478: 
1:0548478:         setAutoCommit(false);
1:0548478:         PreparedStatement ps = prepareStatement(
1:0548478:                 "insert into " + TAB + " values (?,?)");
1:0548478:         // Insert blocks of 10000 rows.
1:0548478:         int blockCount =    10;
1:0548478:         int blockSize =  10000;
1:0548478:         for (int i=0; i < blockCount; i++) {
1:0548478:             ps.setInt(1, i);
1:0548478:             for (int j=0; j < blockSize; j++) {
1:0548478:                 ps.setInt(2, j);
1:0548478:                 ps.addBatch();
1:0548478:             }
1:0548478:             ps.executeBatch();
1:0548478:             commit();
1:0548478:             println("inserted block " + (i+1) + "/" + blockCount);
1:0548478:         }
1:0548478:         setAutoCommit(true);
1:0548478:     }
1:0548478: 
1:0548478:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(AutomaticIndexStatisticsMultiTest.class);
1:0548478:     }
1:0548478: 
1:0548478:     private static class MTCompileThread
1:0548478:             implements Runnable {
1:0548478: 
1:0548478:         private final Random rand = new Random();
1:0548478:         private final Connection con;
1:0548478:         private final long runTime;
1:3f5c48a:         private final ArrayList<SQLException> errors =
1:3f5c48a:                 new ArrayList<SQLException>();
1:8e9474f:         private volatile int count;
1:0548478: 
1:0548478:         public MTCompileThread(Connection con, long runTime)
1:0548478:                 throws SQLException {
1:0548478:             this.con = con;
1:0548478:             this.runTime = runTime;
1:0548478:         }
1:0548478: 
1:0548478:         public void run() {
1:0548478:             final long started = System.currentTimeMillis();
1:0548478:             int counter = 0;
1:0548478:             while (System.currentTimeMillis() - started < runTime) {
1:0548478:                 try {
1:0548478:                     con.prepareStatement("select * from mtsel where " +
1:0548478:                                 (++counter) + " = " + counter + " AND val2 = " +
1:0548478:                                 (1 + rand.nextInt(10)));
1:0548478:                 } catch (SQLException sqle) {
1:8e9474f:                     synchronized (this) {
1:8e9474f:                         errors.add(sqle);
1:8e9474f:                     }
1:0548478:                 }
1:0548478:                 count++;
1:0548478:             }
1:0548478:         }
1:0548478: 
1:0548478:         public int getCount() {
1:0548478:             return count;
1:0548478:         }
1:0548478: 
1:8e9474f:         public synchronized int getErrorCount() {
1:8e9474f:             return errors.size();
1:8e9474f:         }
1:8e9474f: 
1:3f5c48a:         public synchronized List<SQLException> getErrors() {
1:3f5c48a:             return new ArrayList<SQLException>(errors);
1:0548478:         }
1:0548478:     }
1:0548478: 
1:0548478:     private static class MTCreateDropThread
1:0548478:             implements Runnable {
1:0548478: 
1:0548478:         private final Connection con;
1:0548478:         private final long runTime;
1:8e9474f:         private volatile long creates;
1:8e9474f:         private volatile SQLException error;
1:0548478: 
1:0548478:         public MTCreateDropThread(Connection con, long runTime)
1:0548478:                 throws SQLException {
1:0548478:             this.con = con;
1:0548478:             this.runTime = runTime;
1:0548478:         }
1:0548478: 
1:0548478:         public void run() {
1:0548478:             final long started = System.currentTimeMillis();
1:0548478:             try {
1:0548478:                 ResultSet rs = con.getMetaData().getTables(
1:0548478:                         null, null, "TMPTABLE", null);
1:0548478:                 boolean lastWasCreate = rs.next();
1:0548478:                 rs.close();
1:0548478:                 Statement stmt = con.createStatement();
1:0548478:                 while (System.currentTimeMillis() - started < runTime) {
1:0548478:                     if (lastWasCreate) {
1:0548478:                         // Drop the table
1:0548478:                         stmt.executeUpdate("drop table TMPTABLE");
1:0548478:                     } else {
1:0548478:                         // Create the table
1:0548478:                         stmt.executeUpdate("create table TMPTABLE("
1:0548478:                                 + "i int primary key, v varchar(30), b blob)");
1:0548478:                         creates++;
1:0548478:                     }
1:0548478:                     lastWasCreate = !lastWasCreate;
1:0548478:                 }
1:0548478:             } catch (SQLException sqle) {
1:8e9474f:                 error = sqle;
1:8e9474f:                 println("create/drop thread failed: " + sqle.getMessage());
1:0548478:             }
1:0548478:         }
1:0548478: 
1:0548478:         public long getCreates() {
1:0548478:             return creates;
1:0548478:         }
1:8e9474f: 
1:8e9474f:         public boolean failed() {
1:8e9474f:             return error != null;
1:8e9474f:         }
1:8e9474f: 
1:8e9474f:         public SQLException getError() {
1:8e9474f:             return error;
1:8e9474f:         }
1:0548478:     }
1:0548478: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(AutomaticIndexStatisticsMultiTest.class);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         List<SQLException> errors = new ArrayList<SQLException>();
/////////////////////////////////////////////////////////////////////////
1:             for (SQLException sqle : errors) {
/////////////////////////////////////////////////////////////////////////
1:         List<SQLException> errors = new ArrayList<SQLException>();
/////////////////////////////////////////////////////////////////////////
1:             for (SQLException sqle : errors) {
/////////////////////////////////////////////////////////////////////////
1:         private final ArrayList<SQLException> errors =
1:                 new ArrayList<SQLException>();
/////////////////////////////////////////////////////////////////////////
1:         public synchronized List<SQLException> getErrors() {
1:             return new ArrayList<SQLException>(errors);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8e9474f
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         List errors = new ArrayList();
1:             MTCompileThread ct = compileThreads[i];
1:             int count = ct.getCount();
1:             int errorCount = ct.getErrorCount();
1:             totalError += errorCount;
1:             errors.addAll(ct.getErrors());
1:         if (totalError > 0) {
1:             // Build an informative failure string.
1:             StringWriter msg = new StringWriter();
1:             PrintWriter out = new PrintWriter(msg);
1:             out.println(totalError + " select/compile errors reported:");
0:             for (Iterator ei = errors.iterator(); ei.hasNext(); ) {
1:                 out.println("------");
0:                 SQLException sqle = (SQLException)ei.next();
1:                 sqle.printStackTrace(out);
1:             }
1:             out.close();
1:             fail(msg.toString());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         List errors = new ArrayList();
1:             MTCompileThread ct = compileThreads[i];
1:             int count = ct.getCount();
1:             int errorCount = ct.getErrorCount();
1:             totalError += errorCount;
1:             errors.addAll(ct.getErrors());
1:         if (totalError > 0 || createThread.failed()) {
1:             // Build an informative failure string.
1:             StringWriter msg = new StringWriter();
1:             PrintWriter out = new PrintWriter(msg);
1:             out.println("create/drop thread " +
1:                     (createThread.failed() ? "died" : "survived") + ", " +
1:                     totalError + " select/compile errors reported:");
1:             if (createThread.failed()) {
1:                 out.println("create/drop thread error: ");
1:                 createThread.getError().printStackTrace(out);
1:             }
1:             out.println("select/compile errors:");
0:             for (Iterator ei = errors.iterator(); ei.hasNext(); ) {
1:                 out.println("------");
0:                 SQLException sqle = (SQLException)ei.next();
1:                 sqle.printStackTrace(out);
1:             }
1:             out.close();
1:             fail(msg.toString());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         private final ArrayList errors = new ArrayList();
1:         private volatile int count;
/////////////////////////////////////////////////////////////////////////
1:                     synchronized (this) {
1:                         errors.add(sqle);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:         public synchronized int getErrorCount() {
1:             return errors.size();
1:         }
1: 
0:         public synchronized List getErrors() {
0:             return (List)errors.clone();
/////////////////////////////////////////////////////////////////////////
1:         private volatile long creates;
1:         private volatile SQLException error;
/////////////////////////////////////////////////////////////////////////
1:                 error = sqle;
1:                 println("create/drop thread failed: " + sqle.getMessage());
1: 
1:         public boolean failed() {
1:             return error != null;
1:         }
1: 
1:         public SQLException getError() {
1:             return error;
1:         }
commit:d92291d
/////////////////////////////////////////////////////////////////////////
1:         IndexStatsUtil stats = new IndexStatsUtil(getConnection(), 5000);
commit:472a1aa
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-5097: On machines with a single core/CPU the load generated
1:         // by the test threads may cause the index statistics daemon worker
1:         // thread to be "starved". Add a timeout to give it a chance to do
1:         // what it has been told to do.
0:         IndexStatsUtil stats = new IndexStatsUtil(getConnection(), 2000);
commit:0548478
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsMultiTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Random;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.IndexStatsUtil;
1: import org.apache.derbyTesting.junit.IndexStatsUtil.IdxStats;
1: 
1: /**
1:  * Tests that the update triggering code can handle a high amount of requests,
1:  * both when the data dictionary is operating in cached mode and in DDL mode.
1:  */
1: public class AutomaticIndexStatisticsMultiTest
1:     extends BaseJDBCTestCase {
1: 
1:     private static final String TAB = "MTSEL";
1:     private static final int _100K = 100000;
1: 
1:     public AutomaticIndexStatisticsMultiTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testMTSelect()
1:             throws Exception {
1:         prepareTable(true);
1: 
1:         // Create threads compiling a select query for the table
1:         int threadCount = 5;
1:         long runTime = 10000;
1:         MTCompileThread[] compileThreads = new MTCompileThread[threadCount];
1:         for (int i=0; i < threadCount; i++) {
1:             compileThreads[i] =
1:                     new MTCompileThread(openDefaultConnection(), runTime);
1:         }
1: 
1:         // Start the threads and let them run for a while.
1:         Thread[] threads = new Thread[threadCount];
1:         for (int i=0; i < threadCount; i++) {
1:             threads[i] = new Thread(compileThreads[i]);
1:             threads[i].start();
1:         }
1: 
1:         // Wait for the threads to finish.
1:         for (int i=0; i < threadCount; i++) {
1:             threads[i].join(600*1000); // Time out after 600 seconds.
1:         }
1: 
1:         int total = 0;
1:         int totalError = 0;
1:         for (int i=0; i < threadCount; i++) {
0:             int count = compileThreads[i].getCount();
0:             int errors = compileThreads[i].getErrorCount();
1:             total += count;
0:             totalError += errors;
1:         }
1:         println("TOTAL = " + total + " (of which " + totalError + " errors)");
0:         assertEquals(0, totalError);
1: 
1:         verifyStatistics();
1:         // Shutdown database to log daemon stats (if logging is enabled).
1:         getTestConfiguration().shutdownDatabase();
1:     }
1: 
1:     public void testMTSelectWithDDL()
1:             throws Exception {
1:         prepareTable(true);
1: 
1:         // Create threads compiling a select query for the table
1:         int threadCount = 5;
1:         long runTime = 10000;
1:         MTCompileThread[] compileThreads = new MTCompileThread[threadCount];
1:         for (int i=0; i < threadCount; i++) {
1:             compileThreads[i] =
1:                     new MTCompileThread(openDefaultConnection(), runTime);
1:         }
1: 
1:         // Start the drop/create thread.
1:         MTCreateDropThread createThread = new MTCreateDropThread(
1:                 openDefaultConnection(), runTime);
1:         Thread[] threads = new Thread[threadCount +1];
1:         threads[0] = new Thread(createThread);
1:         threads[0].start();
1: 
1:         // Start the threads and let them run for a while.
1:         for (int i=0; i < threadCount; i++) {
1:             threads[i+1] = new Thread(compileThreads[i]);
1:             threads[i+1].start();
1:         }
1: 
1:         // Wait for the threads to finish.
1:         for (int i=0; i < threadCount; i++) {
1:             threads[i].join(600*1000); // Time out after 600 seconds.
1:         }
1: 
1:         int total = 0;
1:         int totalError = 0;
1:         for (int i=0; i < threadCount; i++) {
0:             int count = compileThreads[i].getCount();
0:             int errors = compileThreads[i].getErrorCount();
1:             total += count;
0:             totalError += errors;
1:         }
1:         println("TOTAL = " + total + " (of which " + totalError +
1:                 " errors) CREATES = " + createThread.getCreates());
0:         assertEquals(0, totalError);
1: 
1:         verifyStatistics();
1:         // Shutdown database to log daemon stats (if logging is enabled).
1:         getTestConfiguration().shutdownDatabase();
1:     }
1: 
1:     private void verifyStatistics()
1:             throws SQLException {
0:         IndexStatsUtil stats = new IndexStatsUtil(getConnection());
1:         IdxStats[] myStats = stats.getStatsTable(TAB, 2);
1:         for (int i=0; i < myStats.length; i++) {
1:             IdxStats s = myStats[i];
1:             assertEquals(_100K, s.rows);
1:             switch (s.lcols) {
1:                 case 1:
1:                     assertEquals(10, s.card);
1:                     break;
1:                 case 2:
1:                     assertEquals(_100K, s.card);
1:                     break;
1:                 default:
1:                     fail("unexpected number of leading columns: " + s.lcols);
1:             }
1:         }
1:     }
1: 
1:     private void prepareTable(boolean dropIfExists)
1:             throws SQLException {
1:         Statement stmt = createStatement();
1:         ResultSet rs = getConnection().getMetaData().getTables(
1:                 null, null, TAB, null);
1:         if (rs.next()) {
1:             assertFalse(rs.next());
1:             rs.close();
1:             if (dropIfExists) {
1:                 println("table " + TAB + " already exists, dropping");
1:                 stmt.executeUpdate("drop table " + TAB);
1:             } else {
1:                 println("table " + TAB + " already exists, reusing");
1:                 return;
1:             }
1:         } else {
1:             rs.close();
1:         }
1: 
1:         stmt.executeUpdate("create table " + TAB + " (val1 int, val2 int)");
1:         stmt.executeUpdate("create index " +
1:                 "mtsel_idx on " + TAB + " (val1, val2)");
1: 
1:         setAutoCommit(false);
1:         PreparedStatement ps = prepareStatement(
1:                 "insert into " + TAB + " values (?,?)");
1:         // Insert blocks of 10000 rows.
1:         int blockCount =    10;
1:         int blockSize =  10000;
1:         for (int i=0; i < blockCount; i++) {
1:             ps.setInt(1, i);
1:             for (int j=0; j < blockSize; j++) {
1:                 ps.setInt(2, j);
1:                 ps.addBatch();
1:             }
1:             ps.executeBatch();
1:             commit();
1:             println("inserted block " + (i+1) + "/" + blockCount);
1:         }
1:         setAutoCommit(true);
1:     }
1: 
1:     public static Test suite() {
0:         return new TestSuite(AutomaticIndexStatisticsMultiTest.class);
1:     }
1: 
1:     private static class MTCompileThread
1:             implements Runnable {
1: 
1:         private final Random rand = new Random();
1:         private final Connection con;
1:         private final long runTime;
0:         private int count;
0:         private int errorCount;
1: 
1:         public MTCompileThread(Connection con, long runTime)
1:                 throws SQLException {
1:             this.con = con;
1:             this.runTime = runTime;
1:         }
1: 
1:         public void run() {
1:             final long started = System.currentTimeMillis();
1:             int counter = 0;
1:             while (System.currentTimeMillis() - started < runTime) {
1:                 try {
1:                     con.prepareStatement("select * from mtsel where " +
1:                                 (++counter) + " = " + counter + " AND val2 = " +
1:                                 (1 + rand.nextInt(10)));
1:                 } catch (SQLException sqle) {
0:                     errorCount++;
1:                 }
1:                 count++;
1:             }
1:         }
1: 
1:         public int getCount() {
1:             return count;
1:         }
1: 
0:         public int getErrorCount() {
0:             return errorCount;
1:         }
1:     }
1: 
1:     private static class MTCreateDropThread
1:             implements Runnable {
1: 
1:         private final Connection con;
1:         private final long runTime;
0:         private long creates;
1: 
1:         public MTCreateDropThread(Connection con, long runTime)
1:                 throws SQLException {
1:             this.con = con;
1:             this.runTime = runTime;
1:         }
1: 
1:         public void run() {
1:             final long started = System.currentTimeMillis();
1:             try {
1:                 ResultSet rs = con.getMetaData().getTables(
1:                         null, null, "TMPTABLE", null);
1:                 boolean lastWasCreate = rs.next();
1:                 rs.close();
1:                 Statement stmt = con.createStatement();
1:                 while (System.currentTimeMillis() - started < runTime) {
1:                     if (lastWasCreate) {
1:                         // Drop the table
1:                         stmt.executeUpdate("drop table TMPTABLE");
1:                     } else {
1:                         // Create the table
1:                         stmt.executeUpdate("create table TMPTABLE("
1:                                 + "i int primary key, v varchar(30), b blob)");
1:                         creates++;
1:                     }
1:                     lastWasCreate = !lastWasCreate;
1:                 }
1:             } catch (SQLException sqle) {
0:                 fail("create drop thread crashed: " + sqle.getMessage());
1:             }
1:         }
1: 
1:         public long getCreates() {
1:             return creates;
1:         }
1:     }
1: }
============================================================================