2:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatableArrayHolder
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
7:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:473d692: import java.util.Arrays;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A formatable holder for an array of formatables.
1:eac0369:  * Used to avoid serializing arrays.
1:eac0369:  */
1:eac0369: public class FormatableArrayHolder implements Formatable
3:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	// the array
1:eac0369: 	private Object[] array;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for formatable
1:eac0369: 	 */
1:eac0369: 	public FormatableArrayHolder() 
1:eac0369: 	{
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a FormatableArrayHolder using the input
1:eac0369: 	 * array.
1:eac0369: 	 *
1:6b50965: 	 * @param array the array to hold
1:eac0369: 	 */
1:eac0369: 	public FormatableArrayHolder(Object[] array)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(array != null, 
1:eac0369: 					"array input to constructor is null, code can't handle this.");
1:eac0369: 		}
1:eac0369: 
1:e4ad0a5: 		setArray( array );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the held array to the input array.
1:eac0369: 	 *
1:6b50965: 	 * @param array the array to hold
1:eac0369: 	 */
1:eac0369: 	public void setArray(Object[] array)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(array != null, 
1:eac0369: 					"array input to setArray() is null, code can't handle this.");
1:eac0369: 		}
1:eac0369: 
1:e4ad0a5: 		this.array = ArrayUtil.copy( array );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the held array of formatables, and return
1:473d692:      * it in an array that is an instance of {@code arrayClass}.
1:eac0369: 	 *
1:473d692:      * @param arrayClass the type of array to return
1:eac0369: 	 *
1:eac0369: 	 * @return an array of formatables
1:eac0369: 	 */
1:473d692:     public <E> E[] getArray(Class<E[]> arrayClass)
1:eac0369: 	{
1:473d692:         return Arrays.copyOf(array, array.length, arrayClass);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this array out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(array != null, "Array is null, which isn't expected");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ArrayUtil.writeArrayLength(out, array);
1:eac0369: 		ArrayUtil.writeArrayItems(out, array);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this array from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
2:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		array = new Object[ArrayUtil.readArrayLength(in)];
2:eac0369: 		ArrayUtil.readArrayItems(in, array);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_ARRAY_HOLDER_V01_ID; }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:473d692
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:      * it in an array that is an instance of {@code arrayClass}.
1:      * @param arrayClass the type of array to return
1:     public <E> E[] getArray(Class<E[]> arrayClass)
1:         return Arrays.copyOf(array, array.length, arrayClass);
commit:5baee93
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e4ad0a5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 		setArray( array );
/////////////////////////////////////////////////////////////////////////
1: 		this.array = ArrayUtil.copy( array );
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param array the array to hold
/////////////////////////////////////////////////////////////////////////
1: 	 * @param array the array to hold
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatableArrayHolder
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
0: import java.lang.reflect.Array;
1: 
1: /**
1:  * A formatable holder for an array of formatables.
1:  * Used to avoid serializing arrays.
1:  */
1: public class FormatableArrayHolder implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	// the array
1: 	private Object[] array;
1: 	
1: 	/**
1: 	 * Niladic constructor for formatable
1: 	 */
1: 	public FormatableArrayHolder() 
1: 	{
1: 	}
1: 
1: 	/**
1: 	 * Construct a FormatableArrayHolder using the input
1: 	 * array.
1: 	 *
0: 	 * @array the array to hold
1: 	 */
1: 	public FormatableArrayHolder(Object[] array)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(array != null, 
1: 					"array input to constructor is null, code can't handle this.");
1: 		}
1: 
0: 		this.array = array;
1: 	}
1: 
1: 	/**
1: 	 * Set the held array to the input array.
1: 	 *
0: 	 * @array the array to hold
1: 	 */
1: 	public void setArray(Object[] array)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(array != null, 
1: 					"array input to setArray() is null, code can't handle this.");
1: 		}
1: 
0: 		this.array = array;
1: 	}
1: 
1: 	/**
1: 	 * Get the held array of formatables, and return
0: 	 * it in an array of type inputClass.
1: 	 *
0: 	 * @param inputClass	the class to use for the returned array
1: 	 *
1: 	 * @return an array of formatables
1: 	 */
0: 	public Object[] getArray(Class inputClass)
1: 	{
0: 		Object[] outArray = (Object[])Array.newInstance(inputClass, array.length);
1: 		
1: 		/*
0: 		** HACK: on as400 the following arraycopy() throws an
0: 		** ArrayStoreException because the output array isn't
0: 		** assignment compatible with the input array.  This
0: 		** is a bug on as400, but to get around it we are
0: 		** going to do an element by element copy.
1: 		*/
0: 		//System.arraycopy(array, 0, outArray, 0, outArray.length);
0: 		for (int i = 0; i < outArray.length; i++)
1: 		{
0: 			outArray[i] = array[i];
1: 		}
1: 
0: 		return outArray;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this array out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(array != null, "Array is null, which isn't expected");
1: 		}
1: 
1: 		ArrayUtil.writeArrayLength(out, array);
1: 		ArrayUtil.writeArrayItems(out, array);
1: 	}
1: 
1: 	/**
1: 	 * Read this array from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		array = new Object[ArrayUtil.readArrayLength(in)];
1: 		ArrayUtil.readArrayItems(in, array);
1: 	}
0: 	public void readExternal(ArrayInputStream in)
1: 		throws IOException, ClassNotFoundException
1: 	{
0: 		array = new Formatable[ArrayUtil.readArrayLength(in)];
1: 		ArrayUtil.readArrayItems(in, array);
1: 	}
1: 	
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_ARRAY_HOLDER_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.lang.reflect.Array;
0: 
0: /**
0:  * A formatable holder for an array of formatables.
0:  * Used to avoid serializing arrays.
0:  */
0: public class FormatableArrayHolder implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	// the array
0: 	private Object[] array;
0: 	
0: 	/**
0: 	 * Niladic constructor for formatable
0: 	 */
0: 	public FormatableArrayHolder() 
0: 	{
0: 	}
0: 
0: 	/**
0: 	 * Construct a FormatableArrayHolder using the input
0: 	 * array.
0: 	 *
0: 	 * @array the array to hold
0: 	 */
0: 	public FormatableArrayHolder(Object[] array)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(array != null, 
0: 					"array input to constructor is null, code can't handle this.");
0: 		}
0: 
0: 		this.array = array;
0: 	}
0: 
0: 	/**
0: 	 * Set the held array to the input array.
0: 	 *
0: 	 * @array the array to hold
0: 	 */
0: 	public void setArray(Object[] array)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(array != null, 
0: 					"array input to setArray() is null, code can't handle this.");
0: 		}
0: 
0: 		this.array = array;
0: 	}
0: 
0: 	/**
0: 	 * Get the held array of formatables, and return
0: 	 * it in an array of type inputClass.
0: 	 *
0: 	 * @param inputClass	the class to use for the returned array
0: 	 *
0: 	 * @return an array of formatables
0: 	 */
0: 	public Object[] getArray(Class inputClass)
0: 	{
0: 		Object[] outArray = (Object[])Array.newInstance(inputClass, array.length);
0: 		
0: 		/*
0: 		** HACK: on as400 the following arraycopy() throws an
0: 		** ArrayStoreException because the output array isn't
0: 		** assignment compatible with the input array.  This
0: 		** is a bug on as400, but to get around it we are
0: 		** going to do an element by element copy.
0: 		*/
0: 		//System.arraycopy(array, 0, outArray, 0, outArray.length);
0: 		for (int i = 0; i < outArray.length; i++)
0: 		{
0: 			outArray[i] = array[i];
0: 		}
0: 
0: 		return outArray;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this array out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(array != null, "Array is null, which isn't expected");
0: 		}
0: 
0: 		ArrayUtil.writeArrayLength(out, array);
0: 		ArrayUtil.writeArrayItems(out, array);
0: 	}
0: 
0: 	/**
0: 	 * Read this array from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		array = new Object[ArrayUtil.readArrayLength(in)];
0: 		ArrayUtil.readArrayItems(in, array);
0: 	}
0: 	public void readExternal(ArrayInputStream in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		array = new Formatable[ArrayUtil.readArrayLength(in)];
0: 		ArrayUtil.readArrayItems(in, array);
0: 	}
0: 	
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_ARRAY_HOLDER_V01_ID; }
0: }
============================================================================