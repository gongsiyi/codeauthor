1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.ScanManager
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.GroupFetchScanController;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:eac0369: 
3:eac0369: /**
1:eac0369: 
1:eac0369: The ScanManager interface contains those methods private to access method
1:eac0369: implementors necessary to implement Scans on Conglomerates.  Client of scans
1:eac0369: use the ScanController to interact with the scan.
1:eac0369: <P>
1:eac0369: @see ScanController
1:eac0369: 
2:eac0369: **/
1:eac0369: 
1:eac0369: public interface ScanManager extends ScanController, GroupFetchScanController
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Close scan as part of terminating a transaction.
3:eac0369:      * <p>
1:eac0369:      * Use this call to close the scan resources as part of committing or
1:eac0369:      * aborting a transaction.  The normal close() routine may do some cleanup
1:eac0369:      * that is either unnecessary, or not correct due to the unknown condition
1:eac0369:      * of the scan following a transaction ending error.  Use this call when
1:eac0369:      * closing all scans as part of an abort of a transaction.
4:eac0369:      *
1:eac0369:      * @param closeHeldScan     If true, means to close scan even if it has been
1:eac0369:      *                          opened to be kept opened across commit.  This is
1:eac0369:      *                          used to close these scans on abort.
1:eac0369:      *
1:eac0369: 	 * @return boolean indicating that the close has resulted in a real close
1:eac0369:      *                 of the scan.  A held scan will return false if called 
1:eac0369:      *                 by closeForEndTransaction(false), otherwise it will 
1:eac0369:      *                 return true.  A non-held scan will always return true.
1:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     boolean closeForEndTransaction(boolean closeHeldScan)
2:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Insert all rows that qualify for the current scan into the input
1:eac0369:      * Hash table.  
1:eac0369:      * <p>
1:eac0369:      * This routine scans executes the entire scan as described in the 
1:eac0369:      * openScan call.  For every qualifying unique row value an entry is
1:eac0369:      * placed into the HashTable. For unique row values the entry in the
1:eac0369:      * Hashtable has a key value of the object stored in 
1:eac0369:      * row[key_column_number], and the value of the data is row.  For row 
1:eac0369:      * values with duplicates, the key value is also row[key_column_number], 
1:eac0369:      * but the value of the data is a Vector of
1:eac0369:      * rows.  The caller will have to call "instanceof" on the data value
1:eac0369:      * object if duplicates are expected, to determine if the data value
1:eac0369:      * of the Hashtable entry is a row or is a Vector of rows.
1:eac0369:      * <p>
1:eac0369:      * Note, that for this routine to work efficiently the caller must 
1:eac0369:      * ensure that the object in row[key_column_number] implements 
1:eac0369:      * the hashCode and equals method as appropriate for it's datatype.
1:eac0369:      * <p>
1:eac0369:      * It is expected that this call will be the first and only call made in
1:eac0369:      * an openscan.  Qualifiers and stop position of the openscan are applied
1:eac0369:      * just as in a normal scan.  This call is logically equivalent to the 
1:eac0369:      * caller performing the following:
1:eac0369:      *
1:eac0369:      * import java.util.Hashtable;
1:eac0369:      *
1:eac0369:      * hash_table = new Hashtable();
1:eac0369:      *
1:eac0369:      * while (next())
1:eac0369:      * {
1:eac0369:      *     row = create_new_row();
1:eac0369:      *     fetch(row);
1:eac0369:      *     if ((duplicate_value = 
1:eac0369:      *         hash_table.put(row[key_column_number], row)) != null)
1:eac0369:      *     {
1:eac0369:      *         Vector row_vec;
1:eac0369:      *
1:eac0369:      *         // inserted a duplicate
1:eac0369:      *         if ((duplicate_value instanceof vector))
1:eac0369:      *         {
1:eac0369:      *             row_vec = (Vector) duplicate_value;
1:eac0369:      *         }
1:eac0369:      *         else
1:eac0369:      *         {
1:eac0369:      *             // allocate vector to hold duplicates
1:eac0369:      *             row_vec = new Vector(2);
1:eac0369:      *
1:eac0369:      *             // insert original row into vector
1:eac0369:      *             row_vec.addElement(duplicate_value);
1:eac0369:      *
1:eac0369:      *             // put the vector as the data rather than the row
1:eac0369:      *             hash_table.put(row[key_column_number], row_vec);
1:eac0369:      *         }
1:eac0369:      *         
1:eac0369:      *         // insert new row into vector
1:eac0369:      *         row_vec.addElement(row);
1:eac0369:      *     }
1:eac0369:      * }
1:eac0369:      * <p>
1:eac0369:      * The columns of the row will be the standard columns returned as
1:eac0369:      * part of a scan, as described by the validColumns - see openScan for
1:eac0369:      * description.
1:eac0369:      * RESOLVE - is this ok?  or should I hard code somehow the row to
1:eac0369:      *           be the first column and the row location?
1:eac0369:      * <p>
1:eac0369:      * No overflow to external storage is provided, so calling this routine
1:eac0369:      * on a 1 gigabyte conglomerate will incur at least 1 gigabyte of memory
1:eac0369:      * (probably failing with a java out of memory condition).  If this
1:eac0369:      * routine gets an out of memory condition, or if "max_rowcnt" is 
1:eac0369:      * exceeded then then the routine will give up, empty the Hashtable, 
1:eac0369:      * and return "false."
1:eac0369:      * <p>
1:eac0369:      * On exit from this routine, whether the fetchSet() succeeded or not
1:eac0369:      * the scan is complete, it is positioned just the same as if the scan
1:eac0369:      * had been drained by calling "next()" until it returns false (ie. 
1:eac0369:      * fetchNext() and next() calls will return false).  
1:eac0369:      * reopenScan() can be called to restart the scan.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * RESOLVE - until we get row counts what should we do for sizing the
1:eac0369:      *           the size, capasity, and load factor of the hash table.
1:eac0369:      *           For now it is up to the caller to create the Hashtable,
1:eac0369:      *           Access does not reset any parameters.
1:eac0369:      * <p>
1:eac0369:      * RESOLVE - I am not sure if access should be in charge of allocating
1:eac0369:      *           the new row objects.  I know that I can do this in the
1:eac0369:      *           case of btree's, but I don't think I can do this in heaps.
1:eac0369:      *           Maybe this is solved by work to be done on the sort 
1:eac0369:      *           interface.
1:eac0369:      *
1:eac0369:      *
1:eac0369:      * @param max_rowcnt        The maximum number of rows to insert into the 
1:eac0369:      *                          Hash table.  Pass in -1 if there is no maximum.
1:eac0369:      * @param key_column_numbers The column numbers of the columns in the
1:eac0369:      *                          scan result row to be the key to the Hashtable.
1:eac0369:      *                          "0" is the first column in the scan result
1:eac0369:      *                          row (which may be different than the first
1:eac0369:      *                          row in the table of the scan).
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     void fetchSet(
1:eac0369:     long                    max_rowcnt,
1:eac0369:     int[]                   key_column_numbers,
1:eac0369:     BackingStoreHashtable   hash_table)
1:eac0369:         throws StandardException;
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:12c6ed9
/////////////////////////////////////////////////////////////////////////
0:      * @param conglom   Conglomerate object of the conglomerate being changed.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.conglomerate.ScanManager
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.store.access.GroupFetchScanController;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: 
1: /**
1: 
1: The ScanManager interface contains those methods private to access method
1: implementors necessary to implement Scans on Conglomerates.  Client of scans
1: use the ScanController to interact with the scan.
1: <P>
1: @see ScanController
1: 
1: **/
1: 
1: public interface ScanManager extends ScanController, GroupFetchScanController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
1:      * Close scan as part of terminating a transaction.
1:      * <p>
1:      * Use this call to close the scan resources as part of committing or
1:      * aborting a transaction.  The normal close() routine may do some cleanup
1:      * that is either unnecessary, or not correct due to the unknown condition
1:      * of the scan following a transaction ending error.  Use this call when
1:      * closing all scans as part of an abort of a transaction.
1:      *
1:      * @param closeHeldScan     If true, means to close scan even if it has been
1:      *                          opened to be kept opened across commit.  This is
1:      *                          used to close these scans on abort.
1:      *
1: 	 * @return boolean indicating that the close has resulted in a real close
1:      *                 of the scan.  A held scan will return false if called 
1:      *                 by closeForEndTransaction(false), otherwise it will 
1:      *                 return true.  A non-held scan will always return true.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     boolean closeForEndTransaction(boolean closeHeldScan)
1: 		throws StandardException;
1: 
1:     /**
1:      * Insert all rows that qualify for the current scan into the input
1:      * Hash table.  
1:      * <p>
1:      * This routine scans executes the entire scan as described in the 
1:      * openScan call.  For every qualifying unique row value an entry is
1:      * placed into the HashTable. For unique row values the entry in the
1:      * Hashtable has a key value of the object stored in 
1:      * row[key_column_number], and the value of the data is row.  For row 
1:      * values with duplicates, the key value is also row[key_column_number], 
1:      * but the value of the data is a Vector of
1:      * rows.  The caller will have to call "instanceof" on the data value
1:      * object if duplicates are expected, to determine if the data value
1:      * of the Hashtable entry is a row or is a Vector of rows.
1:      * <p>
1:      * Note, that for this routine to work efficiently the caller must 
1:      * ensure that the object in row[key_column_number] implements 
1:      * the hashCode and equals method as appropriate for it's datatype.
1:      * <p>
1:      * It is expected that this call will be the first and only call made in
1:      * an openscan.  Qualifiers and stop position of the openscan are applied
1:      * just as in a normal scan.  This call is logically equivalent to the 
1:      * caller performing the following:
1:      *
1:      * import java.util.Hashtable;
1:      *
1:      * hash_table = new Hashtable();
1:      *
1:      * while (next())
1:      * {
1:      *     row = create_new_row();
1:      *     fetch(row);
1:      *     if ((duplicate_value = 
1:      *         hash_table.put(row[key_column_number], row)) != null)
1:      *     {
1:      *         Vector row_vec;
1:      *
1:      *         // inserted a duplicate
1:      *         if ((duplicate_value instanceof vector))
1:      *         {
1:      *             row_vec = (Vector) duplicate_value;
1:      *         }
1:      *         else
1:      *         {
1:      *             // allocate vector to hold duplicates
1:      *             row_vec = new Vector(2);
1:      *
1:      *             // insert original row into vector
1:      *             row_vec.addElement(duplicate_value);
1:      *
1:      *             // put the vector as the data rather than the row
1:      *             hash_table.put(row[key_column_number], row_vec);
1:      *         }
1:      *         
1:      *         // insert new row into vector
1:      *         row_vec.addElement(row);
1:      *     }
1:      * }
1:      * <p>
1:      * The columns of the row will be the standard columns returned as
1:      * part of a scan, as described by the validColumns - see openScan for
1:      * description.
1:      * RESOLVE - is this ok?  or should I hard code somehow the row to
1:      *           be the first column and the row location?
1:      * <p>
1:      * No overflow to external storage is provided, so calling this routine
1:      * on a 1 gigabyte conglomerate will incur at least 1 gigabyte of memory
1:      * (probably failing with a java out of memory condition).  If this
1:      * routine gets an out of memory condition, or if "max_rowcnt" is 
1:      * exceeded then then the routine will give up, empty the Hashtable, 
1:      * and return "false."
1:      * <p>
1:      * On exit from this routine, whether the fetchSet() succeeded or not
1:      * the scan is complete, it is positioned just the same as if the scan
1:      * had been drained by calling "next()" until it returns false (ie. 
1:      * fetchNext() and next() calls will return false).  
1:      * reopenScan() can be called to restart the scan.
1:      * <p>
1:      *
1:      * RESOLVE - until we get row counts what should we do for sizing the
1:      *           the size, capasity, and load factor of the hash table.
1:      *           For now it is up to the caller to create the Hashtable,
1:      *           Access does not reset any parameters.
1:      * <p>
1:      * RESOLVE - I am not sure if access should be in charge of allocating
1:      *           the new row objects.  I know that I can do this in the
1:      *           case of btree's, but I don't think I can do this in heaps.
1:      *           Maybe this is solved by work to be done on the sort 
1:      *           interface.
1:      *
1:      *
0: 	 * @return boolean indicating that the fetch set succeeded.  If it failed
0:      *                 Hashtable.clear() will be called leaving an empty 
0:      *                 table.
1:      *
1:      * @param max_rowcnt        The maximum number of rows to insert into the 
1:      *                          Hash table.  Pass in -1 if there is no maximum.
1:      * @param key_column_numbers The column numbers of the columns in the
1:      *                          scan result row to be the key to the Hashtable.
1:      *                          "0" is the first column in the scan result
1:      *                          row (which may be different than the first
1:      *                          row in the table of the scan).
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     void fetchSet(
1:     long                    max_rowcnt,
1:     int[]                   key_column_numbers,
1:     BackingStoreHashtable   hash_table)
1:         throws StandardException;
1: 
1: 
1:     /**
0:      * Do work necessary to maintain the current position in the scan.
1:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of the scan.
0:      * For some conglomerates this may be a no-op.
1:      * <p>
1:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public void savePosition(Conglomerate conglom, Page page)
1:         throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.store.access.GroupFetchScanController;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
0: 
0: /**
0: 
0: The ScanManager interface contains those methods private to access method
0: implementors necessary to implement Scans on Conglomerates.  Client of scans
0: use the ScanController to interact with the scan.
0: <P>
0: @see ScanController
0: 
0: **/
0: 
0: public interface ScanManager extends ScanController, GroupFetchScanController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * Close scan as part of terminating a transaction.
0:      * <p>
0:      * Use this call to close the scan resources as part of committing or
0:      * aborting a transaction.  The normal close() routine may do some cleanup
0:      * that is either unnecessary, or not correct due to the unknown condition
0:      * of the scan following a transaction ending error.  Use this call when
0:      * closing all scans as part of an abort of a transaction.
0:      *
0:      * @param closeHeldScan     If true, means to close scan even if it has been
0:      *                          opened to be kept opened across commit.  This is
0:      *                          used to close these scans on abort.
0:      *
0: 	 * @return boolean indicating that the close has resulted in a real close
0:      *                 of the scan.  A held scan will return false if called 
0:      *                 by closeForEndTransaction(false), otherwise it will 
0:      *                 return true.  A non-held scan will always return true.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     boolean closeForEndTransaction(boolean closeHeldScan)
0: 		throws StandardException;
0: 
0:     /**
0:      * Insert all rows that qualify for the current scan into the input
0:      * Hash table.  
0:      * <p>
0:      * This routine scans executes the entire scan as described in the 
0:      * openScan call.  For every qualifying unique row value an entry is
0:      * placed into the HashTable. For unique row values the entry in the
0:      * Hashtable has a key value of the object stored in 
0:      * row[key_column_number], and the value of the data is row.  For row 
0:      * values with duplicates, the key value is also row[key_column_number], 
0:      * but the value of the data is a Vector of
0:      * rows.  The caller will have to call "instanceof" on the data value
0:      * object if duplicates are expected, to determine if the data value
0:      * of the Hashtable entry is a row or is a Vector of rows.
0:      * <p>
0:      * Note, that for this routine to work efficiently the caller must 
0:      * ensure that the object in row[key_column_number] implements 
0:      * the hashCode and equals method as appropriate for it's datatype.
0:      * <p>
0:      * It is expected that this call will be the first and only call made in
0:      * an openscan.  Qualifiers and stop position of the openscan are applied
0:      * just as in a normal scan.  This call is logically equivalent to the 
0:      * caller performing the following:
0:      *
0:      * import java.util.Hashtable;
0:      *
0:      * hash_table = new Hashtable();
0:      *
0:      * while (next())
0:      * {
0:      *     row = create_new_row();
0:      *     fetch(row);
0:      *     if ((duplicate_value = 
0:      *         hash_table.put(row[key_column_number], row)) != null)
0:      *     {
0:      *         Vector row_vec;
0:      *
0:      *         // inserted a duplicate
0:      *         if ((duplicate_value instanceof vector))
0:      *         {
0:      *             row_vec = (Vector) duplicate_value;
0:      *         }
0:      *         else
0:      *         {
0:      *             // allocate vector to hold duplicates
0:      *             row_vec = new Vector(2);
0:      *
0:      *             // insert original row into vector
0:      *             row_vec.addElement(duplicate_value);
0:      *
0:      *             // put the vector as the data rather than the row
0:      *             hash_table.put(row[key_column_number], row_vec);
0:      *         }
0:      *         
0:      *         // insert new row into vector
0:      *         row_vec.addElement(row);
0:      *     }
0:      * }
0:      * <p>
0:      * The columns of the row will be the standard columns returned as
0:      * part of a scan, as described by the validColumns - see openScan for
0:      * description.
0:      * RESOLVE - is this ok?  or should I hard code somehow the row to
0:      *           be the first column and the row location?
0:      * <p>
0:      * No overflow to external storage is provided, so calling this routine
0:      * on a 1 gigabyte conglomerate will incur at least 1 gigabyte of memory
0:      * (probably failing with a java out of memory condition).  If this
0:      * routine gets an out of memory condition, or if "max_rowcnt" is 
0:      * exceeded then then the routine will give up, empty the Hashtable, 
0:      * and return "false."
0:      * <p>
0:      * On exit from this routine, whether the fetchSet() succeeded or not
0:      * the scan is complete, it is positioned just the same as if the scan
0:      * had been drained by calling "next()" until it returns false (ie. 
0:      * fetchNext() and next() calls will return false).  
0:      * reopenScan() can be called to restart the scan.
0:      * <p>
0:      *
0:      * RESOLVE - until we get row counts what should we do for sizing the
0:      *           the size, capasity, and load factor of the hash table.
0:      *           For now it is up to the caller to create the Hashtable,
0:      *           Access does not reset any parameters.
0:      * <p>
0:      * RESOLVE - I am not sure if access should be in charge of allocating
0:      *           the new row objects.  I know that I can do this in the
0:      *           case of btree's, but I don't think I can do this in heaps.
0:      *           Maybe this is solved by work to be done on the sort 
0:      *           interface.
0:      *
0:      *
0: 	 * @return boolean indicating that the fetch set succeeded.  If it failed
0:      *                 Hashtable.clear() will be called leaving an empty 
0:      *                 table.
0:      *
0:      * @param max_rowcnt        The maximum number of rows to insert into the 
0:      *                          Hash table.  Pass in -1 if there is no maximum.
0:      * @param key_column_numbers The column numbers of the columns in the
0:      *                          scan result row to be the key to the Hashtable.
0:      *                          "0" is the first column in the scan result
0:      *                          row (which may be different than the first
0:      *                          row in the table of the scan).
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     void fetchSet(
0:     long                    max_rowcnt,
0:     int[]                   key_column_numbers,
0:     BackingStoreHashtable   hash_table)
0:         throws StandardException;
0: 
0: 
0:     /**
0:      * Do work necessary to maintain the current position in the scan.
0:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of the scan.
0:      * For some conglomerates this may be a no-op.
0:      * <p>
0:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void savePosition(Conglomerate conglom, Page page)
0:         throws StandardException;
0: }
============================================================================