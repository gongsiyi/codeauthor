1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ColumnInfo
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:42544c4: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:3c09be7: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.DefaultInfo;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:3c09be7: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableLongHolder;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This is the Column descriptor that is passed from Compilation to Execution
1:eac0369:  *	for CREATE TABLE statements.
1:eac0369:  *
1:eac0369:  *	@version 0.1
1:eac0369:  */
1:eac0369: 
1:eac0369: public class ColumnInfo implements Formatable
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:42544c4:     int                         action;
1:42544c4:     String                      name;
1:42544c4:     DataTypeDescriptor          dataType;
1:42544c4:     DefaultInfo                 defaultInfo;
1:42544c4:     ProviderInfo[]              providers;
1:42544c4:     DataValueDescriptor         defaultValue;
1:42544c4:     UUID                        newDefaultUUID;
1:42544c4:     UUID                        oldDefaultUUID;
1:eac0369: 	// autoinc columns.
1:42544c4:     long                        autoincStart;
1:42544c4:     long                        autoincInc;
1:d055adb:     long                        autoincCycle;
1:6a5edfc: 	//if this is an autoincrement column, then following variable will have CREATE or
1:6a5edfc: 	//MODIFY_COLUMN_DEFAULT_RESTART or MODIFY_COLUMN_DEFAULT_INCREMENT. Otherwise,
1:6a5edfc: 	//this variable will be set to -1.
1:42544c4:     long                        autoinc_create_or_modify_Start_Increment = -1;
1:eac0369: 
1:6a5edfc: 	//This indicates column is for CREATE TABLE
1:eac0369: 	public static final int CREATE					= 0;
1:6a5edfc: 	public static final int DROP					= 1;
1:6a5edfc: 	public static final int MODIFY_COLUMN_TYPE      = 2;
1:6a5edfc: 	public static final int MODIFY_COLUMN_CONSTRAINT = 3;
1:6a5edfc: 	public static final int MODIFY_COLUMN_CONSTRAINT_NOT_NULL = 4;
1:6a5edfc: 	//This indicates column is for ALTER TABLE to change the start value of autoinc column 
1:6a5edfc: 	public static final int MODIFY_COLUMN_DEFAULT_RESTART	= 5;
1:6a5edfc: 	//This indicates column is for ALTER TABLE to change the increment value of autoinc column 
1:6a5edfc: 	public static final int MODIFY_COLUMN_DEFAULT_INCREMENT	= 6;
1:df9bd6e: 	public static final int MODIFY_COLUMN_DEFAULT_VALUE	= 7;
1:5b838fd: 	//This change the generation property of autoinc columns
1:5b838fd: 	public static final int MODIFY_COLUMN_GENERATED_ALWAYS	= 8;
1:5b838fd: 	public static final int MODIFY_COLUMN_GENERATED_BY_DEFAULT	= 9;
1:5b838fd: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	ColumnInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make one of these puppies.
1:eac0369: 	 *
1:eac0369: 	 *  @param name			Column name.
1:eac0369: 	 *  @param dataType		Column type.
1:eac0369: 	 *  @param defaultValue	Column default value.
1:eac0369: 	 *  @param defaultInfo	Column default info.
1:3c09be7: 	 *  @param providers   Array of providers that this column depends on.
1:eac0369: 	 *  @param newDefaultUUID	New UUID for default.
1:eac0369: 	 *  @param oldDefaultUUID	Old UUID for default.
1:eac0369: 	 *	@param action		Action (create, modify default, etc.)
1:eac0369: 	 * 	@param autoincStart Start of autoincrement values.
1:eac0369: 	 *  @param autoincInc	Increment of autoincrement values-- if parameter
1:eac0369: 	 *						is 0, it implies that this is not an autoincrement
1:eac0369: 	 *						value.
1:eac0369: 	 */
1:eac0369: 	public	ColumnInfo(
1:eac0369: 		               String						name,
1:eac0369: 					   DataTypeDescriptor			dataType,
1:eac0369: 					   DataValueDescriptor			defaultValue,
1:eac0369: 					   DefaultInfo					defaultInfo,
1:3c09be7: 					   ProviderInfo[]					providers,
1:eac0369: 					   UUID							newDefaultUUID,
1:eac0369: 					   UUID							oldDefaultUUID,
1:eac0369: 					   int							action,
1:eac0369: 					   long							autoincStart,
1:6a5edfc: 					   long							autoincInc,
1:d055adb: 					   long                                                 autoincCycle,
1:6a5edfc: 					   long							autoinc_create_or_modify_Start_Increment)
1:eac0369: 	{
1:eac0369: 		this.name = name;
1:eac0369: 		this.dataType = dataType;
1:eac0369: 		this.defaultValue = defaultValue;
1:eac0369: 		this.defaultInfo = defaultInfo;
1:3f7581c:         this.providers = ArrayUtil.copy(providers);
1:eac0369: 		this.newDefaultUUID = newDefaultUUID;
1:eac0369: 		this.oldDefaultUUID = oldDefaultUUID;
1:eac0369: 		this.action = action;
1:eac0369: 		this.autoincStart = autoincStart;
1:eac0369: 		this.autoincInc = autoincInc;
1:d055adb:                this.autoincCycle = autoincCycle;
1:6a5edfc: 		this.autoinc_create_or_modify_Start_Increment = autoinc_create_or_modify_Start_Increment;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		FormatableLongHolder flh;
1:eac0369: 
1:eac0369: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1:eac0369: 		name = (String)fh.get("name");
1:eac0369: 		dataType = (DataTypeDescriptor) fh.get("dataType");
1:eac0369: 		defaultValue = (DataValueDescriptor)fh.get("defaultValue");
1:eac0369: 		defaultInfo = (DefaultInfo)fh.get("defaultInfo");
1:eac0369: 		newDefaultUUID = (UUID)fh.get("newDefaultUUID");
1:eac0369: 		oldDefaultUUID = (UUID)fh.get("oldDefaultUUID");
1:eac0369: 		action = fh.getInt("action");
1:eac0369: 		
1:eac0369: 		if (fh.get("autoincStart") != null)
1:eac0369: 		{
1:eac0369: 			autoincStart = fh.getLong("autoincStart");
1:eac0369: 			autoincInc = fh.getLong("autoincInc");
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			autoincInc = autoincStart = 0;
1:eac0369: 		}
1:3c09be7: 
1:3c09be7:         FormatableArrayHolder   fah = (FormatableArrayHolder) fh.get( "providers" );
1:3c09be7:         if ( fah != null )
1:3c09be7:         {
1:473d692:             providers = fah.getArray(ProviderInfo[].class);
1:3c09be7:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = new FormatableHashtable();
1:eac0369: 		fh.put("name", name);
1:eac0369: 		fh.put("dataType", dataType);
1:eac0369: 		fh.put("defaultValue", defaultValue);
1:eac0369: 		fh.put("defaultInfo", defaultInfo);
1:eac0369: 		fh.put("newDefaultUUID", newDefaultUUID);
1:eac0369: 		fh.put("oldDefaultUUID", oldDefaultUUID );
1:eac0369: 		fh.putInt("action", action);
1:eac0369: 		
1:eac0369: 		if (autoincInc != 0)
1:eac0369: 		{
1:eac0369: 			// only write out autoinc values if its an autoinc column.
1:eac0369: 			fh.putLong("autoincStart", autoincStart);
1:eac0369: 			fh.putLong("autoincInc", autoincInc);
1:eac0369: 		}
1:3c09be7: 
1:3c09be7:         if ( providers != null )
1:3c09be7:         {
1:3c09be7:             FormatableArrayHolder   fah = new FormatableArrayHolder( providers );
1:3c09be7:             fh.put( "providers", fah );
1:3c09be7:         }
1:3c09be7:         
1:eac0369: 		out.writeObject(fh);
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.COLUMN_INFO_V02_ID; }
1:eac0369: 
1:42544c4:     // Accessors
1:42544c4: 
1:42544c4:     public DataTypeDescriptor getDataType() {
1:42544c4:         return dataType;
1:42544c4:     }
1:42544c4: 
1:eac0369: 	/*
1:eac0369: 	  Object methods.
1:eac0369: 	  */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String	traceName;
1:eac0369: 			String  traceDataType;
1:eac0369: 			String  traceDefaultValue;
1:eac0369: 			String  traceDefaultInfo;
1:eac0369: 			String  traceNewDefaultUUID;
1:eac0369: 			String  traceOldDefaultUUID;
1:eac0369: 			String  traceAction;
1:eac0369: 			String  traceAI;
1:eac0369: 			if (name == null)
1:eac0369: 			{
1:eac0369: 				traceName = "name: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceName = "name: "+name+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (dataType == null)
1:eac0369: 			{
1:eac0369: 				traceDataType = "dataType: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceDataType = "dataType: "+dataType+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (defaultValue == null)
1:eac0369: 			{
1:eac0369: 				traceDefaultValue = "defaultValue: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceDefaultValue = "defaultValue: "+defaultValue+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (defaultInfo == null)
1:eac0369: 			{
1:eac0369: 				traceDefaultInfo = "defaultInfo: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceDefaultInfo = "defaultInfo: "+defaultInfo+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (newDefaultUUID == null)
1:eac0369: 			{
1:eac0369: 				traceNewDefaultUUID = "newDefaultUUID: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceNewDefaultUUID = "newDefaultUUID: "+newDefaultUUID+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (oldDefaultUUID == null)
1:eac0369: 			{
1:eac0369: 				traceOldDefaultUUID = "oldDefaultUUID: null ";
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceOldDefaultUUID = "oldDefaultUUID: "+oldDefaultUUID+" ";
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			traceAction = "action: "+action+" ";
1:eac0369: 
1:eac0369: 			if (autoincInc != 0)
1:eac0369: 			{
1:eac0369: 				traceAI = "autoincrement, start: " + autoincStart +
1:eac0369: 					" increment:" + autoincInc;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				traceAI = "NOT autoincrement";
1:eac0369: 			}
1:eac0369: 			return "ColumnInfo: ("+traceName+traceDataType+traceDefaultValue+
1:eac0369: 							   traceDefaultInfo+traceNewDefaultUUID+traceOldDefaultUUID+traceAction+traceAI+")";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:d055adb
/////////////////////////////////////////////////////////////////////////
1:     long                        autoincCycle;
/////////////////////////////////////////////////////////////////////////
1: 					   long                                                 autoincCycle,
/////////////////////////////////////////////////////////////////////////
1:                this.autoincCycle = autoincCycle;
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:df9bd6e
/////////////////////////////////////////////////////////////////////////
1: 	public static final int MODIFY_COLUMN_DEFAULT_VALUE	= 7;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5b838fd
/////////////////////////////////////////////////////////////////////////
1: 	//This change the generation property of autoinc columns
1: 	public static final int MODIFY_COLUMN_GENERATED_ALWAYS	= 8;
1: 	public static final int MODIFY_COLUMN_GENERATED_BY_DEFAULT	= 9;
1: 
commit:3c09be7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
/////////////////////////////////////////////////////////////////////////
0:     public    ProviderInfo[]            providers;
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param providers   Array of providers that this column depends on.
/////////////////////////////////////////////////////////////////////////
1: 					   ProviderInfo[]					providers,
/////////////////////////////////////////////////////////////////////////
0:         this.providers = providers;
/////////////////////////////////////////////////////////////////////////
1: 
1:         FormatableArrayHolder   fah = (FormatableArrayHolder) fh.get( "providers" );
1:         if ( fah != null )
1:         {
0:             providers = (ProviderInfo[]) fah.getArray( ProviderInfo.class );
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         if ( providers != null )
1:         {
1:             FormatableArrayHolder   fah = new FormatableArrayHolder( providers );
1:             fh.put( "providers", fah );
1:         }
1:         
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:473d692
/////////////////////////////////////////////////////////////////////////
1:             providers = fah.getArray(ProviderInfo[].class);
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         this.providers = ArrayUtil.copy(providers);
commit:42544c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int                         action;
1:     String                      name;
1:     DataTypeDescriptor          dataType;
1:     DefaultInfo                 defaultInfo;
1:     ProviderInfo[]              providers;
1:     DataValueDescriptor         defaultValue;
1:     UUID                        newDefaultUUID;
1:     UUID                        oldDefaultUUID;
1:     long                        autoincStart;
1:     long                        autoincInc;
1:     long                        autoinc_create_or_modify_Start_Increment = -1;
/////////////////////////////////////////////////////////////////////////
0:         this.providers = (ProviderInfo[]) ArrayUtil.copy(providers);
/////////////////////////////////////////////////////////////////////////
1:     // Accessors
1: 
1:     public DataTypeDescriptor getDataType() {
1:         return dataType;
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:6a5edfc
/////////////////////////////////////////////////////////////////////////
1: 	//if this is an autoincrement column, then following variable will have CREATE or
1: 	//MODIFY_COLUMN_DEFAULT_RESTART or MODIFY_COLUMN_DEFAULT_INCREMENT. Otherwise,
1: 	//this variable will be set to -1.
0: 	public long 						autoinc_create_or_modify_Start_Increment = -1;
1: 	//This indicates column is for CREATE TABLE
1: 	public static final int DROP					= 1;
1: 	public static final int MODIFY_COLUMN_TYPE      = 2;
1: 	public static final int MODIFY_COLUMN_CONSTRAINT = 3;
1: 	public static final int MODIFY_COLUMN_CONSTRAINT_NOT_NULL = 4;
1: 	//This indicates column is for ALTER TABLE to change the start value of autoinc column 
1: 	public static final int MODIFY_COLUMN_DEFAULT_RESTART	= 5;
1: 	//This indicates column is for ALTER TABLE to change the increment value of autoinc column 
1: 	public static final int MODIFY_COLUMN_DEFAULT_INCREMENT	= 6;
/////////////////////////////////////////////////////////////////////////
1: 					   long							autoincInc,
1: 					   long							autoinc_create_or_modify_Start_Increment)
/////////////////////////////////////////////////////////////////////////
1: 		this.autoinc_create_or_modify_Start_Increment = autoinc_create_or_modify_Start_Increment;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ColumnInfo
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.DefaultInfo;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableIntHolder;
1: import org.apache.derby.iapi.services.io.FormatableLongHolder;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  *	This is the Column descriptor that is passed from Compilation to Execution
1:  *	for CREATE TABLE statements.
1:  *
1:  *	@version 0.1
0:  *	@author Rick Hillegas
1:  */
1: 
1: public class ColumnInfo implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
0: 	public  int							action;
0: 	public	String						name;
0: 	public	DataTypeDescriptor			dataType;
0: 	public	DefaultInfo					defaultInfo;
0: 	public	DataValueDescriptor			defaultValue;
0: 	public	UUID						newDefaultUUID;
0: 	public	UUID						oldDefaultUUID;
1: 	// autoinc columns.
0: 	public long 						autoincStart;
0: 	public long 						autoincInc;
1: 
1: 	public static final int CREATE					= 0;
0: 	public static final int MODIFY_COLUMN_DEFAULT	= 1;
0: 	public static final int DROP					= 2;
0: 	public static final int MODIFY_COLUMN_TYPE      = 3;
0: 	public static final int MODIFY_COLUMN_CONSTRAINT = 4;
0: 	public static final int MODIFY_COLUMN_CONSTRAINT_NOT_NULL = 5;
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1:     public	ColumnInfo() {}
1: 
1: 	/**
1: 	 *	Make one of these puppies.
1: 	 *
1: 	 *  @param name			Column name.
1: 	 *  @param dataType		Column type.
1: 	 *  @param defaultValue	Column default value.
1: 	 *  @param defaultInfo	Column default info.
1: 	 *  @param newDefaultUUID	New UUID for default.
1: 	 *  @param oldDefaultUUID	Old UUID for default.
1: 	 *	@param action		Action (create, modify default, etc.)
1: 	 * 	@param autoincStart Start of autoincrement values.
1: 	 *  @param autoincInc	Increment of autoincrement values-- if parameter
1: 	 *						is 0, it implies that this is not an autoincrement
1: 	 *						value.
1: 	 */
1: 	public	ColumnInfo(
1: 		               String						name,
1: 					   DataTypeDescriptor			dataType,
1: 					   DataValueDescriptor			defaultValue,
1: 					   DefaultInfo					defaultInfo,
1: 					   UUID							newDefaultUUID,
1: 					   UUID							oldDefaultUUID,
1: 					   int							action,
1: 					   long							autoincStart,
0: 					   long							autoincInc)
1: 	{
1: 		this.name = name;
1: 		this.dataType = dataType;
1: 		this.defaultValue = defaultValue;
1: 		this.defaultInfo = defaultInfo;
1: 		this.newDefaultUUID = newDefaultUUID;
1: 		this.oldDefaultUUID = oldDefaultUUID;
1: 		this.action = action;
1: 		this.autoincStart = autoincStart;
1: 		this.autoincInc = autoincInc;
1: 	}
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 
1: 		FormatableLongHolder flh;
1: 
1: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1: 		name = (String)fh.get("name");
1: 		dataType = (DataTypeDescriptor) fh.get("dataType");
1: 		defaultValue = (DataValueDescriptor)fh.get("defaultValue");
1: 		defaultInfo = (DefaultInfo)fh.get("defaultInfo");
1: 		newDefaultUUID = (UUID)fh.get("newDefaultUUID");
1: 		oldDefaultUUID = (UUID)fh.get("oldDefaultUUID");
1: 		action = fh.getInt("action");
1: 		
1: 		if (fh.get("autoincStart") != null)
1: 		{
1: 			autoincStart = fh.getLong("autoincStart");
1: 			autoincInc = fh.getLong("autoincInc");
1: 		}
1: 		else
1: 		{
1: 			autoincInc = autoincStart = 0;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		FormatableHashtable fh = new FormatableHashtable();
1: 		fh.put("name", name);
1: 		fh.put("dataType", dataType);
1: 		fh.put("defaultValue", defaultValue);
1: 		fh.put("defaultInfo", defaultInfo);
1: 		fh.put("newDefaultUUID", newDefaultUUID);
1: 		fh.put("oldDefaultUUID", oldDefaultUUID );
1: 		fh.putInt("action", action);
1: 		
1: 		if (autoincInc != 0)
1: 		{
1: 			// only write out autoinc values if its an autoinc column.
1: 			fh.putLong("autoincStart", autoincStart);
1: 			fh.putLong("autoincInc", autoincInc);
1: 		}
1: 		out.writeObject(fh);
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.COLUMN_INFO_V02_ID; }
1: 
1: 	/*
1: 	  Object methods.
1: 	  */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String	traceName;
1: 			String  traceDataType;
1: 			String  traceDefaultValue;
1: 			String  traceDefaultInfo;
1: 			String  traceNewDefaultUUID;
1: 			String  traceOldDefaultUUID;
1: 			String  traceAction;
1: 			String  traceAI;
1: 			if (name == null)
1: 			{
1: 				traceName = "name: null ";
1: 			}
1: 			else
1: 			{
1: 				traceName = "name: "+name+" ";
1: 			}
1: 
1: 			if (dataType == null)
1: 			{
1: 				traceDataType = "dataType: null ";
1: 			}
1: 			else
1: 			{
1: 				traceDataType = "dataType: "+dataType+" ";
1: 			}
1: 
1: 			if (defaultValue == null)
1: 			{
1: 				traceDefaultValue = "defaultValue: null ";
1: 			}
1: 			else
1: 			{
1: 				traceDefaultValue = "defaultValue: "+defaultValue+" ";
1: 			}
1: 
1: 			if (defaultInfo == null)
1: 			{
1: 				traceDefaultInfo = "defaultInfo: null ";
1: 			}
1: 			else
1: 			{
1: 				traceDefaultInfo = "defaultInfo: "+defaultInfo+" ";
1: 			}
1: 
1: 			if (newDefaultUUID == null)
1: 			{
1: 				traceNewDefaultUUID = "newDefaultUUID: null ";
1: 			}
1: 			else
1: 			{
1: 				traceNewDefaultUUID = "newDefaultUUID: "+newDefaultUUID+" ";
1: 			}
1: 
1: 			if (oldDefaultUUID == null)
1: 			{
1: 				traceOldDefaultUUID = "oldDefaultUUID: null ";
1: 			}
1: 			else
1: 			{
1: 				traceOldDefaultUUID = "oldDefaultUUID: "+oldDefaultUUID+" ";
1: 			}
1: 
1: 			traceAction = "action: "+action+" ";
1: 
1: 			if (autoincInc != 0)
1: 			{
1: 				traceAI = "autoincrement, start: " + autoincStart +
1: 					" increment:" + autoincInc;
1: 			}
1: 			else
1: 			{
1: 				traceAI = "NOT autoincrement";
1: 			}
1: 			return "ColumnInfo: ("+traceName+traceDataType+traceDefaultValue+
1: 							   traceDefaultInfo+traceNewDefaultUUID+traceOldDefaultUUID+traceAction+traceAI+")";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.DefaultInfo;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableIntHolder;
0: import org.apache.derby.iapi.services.io.FormatableLongHolder;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  *	This is the Column descriptor that is passed from Compilation to Execution
0:  *	for CREATE TABLE statements.
0:  *
0:  *	@version 0.1
0:  *	@author Rick Hillegas
0:  */
0: 
0: public class ColumnInfo implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	public  int							action;
0: 	public	String						name;
0: 	public	DataTypeDescriptor			dataType;
0: 	public	DefaultInfo					defaultInfo;
0: 	public	DataValueDescriptor			defaultValue;
0: 	public	UUID						newDefaultUUID;
0: 	public	UUID						oldDefaultUUID;
0: 	// autoinc columns.
0: 	public long 						autoincStart;
0: 	public long 						autoincInc;
0: 
0: 	public static final int CREATE					= 0;
0: 	public static final int MODIFY_COLUMN_DEFAULT	= 1;
0: 	public static final int DROP					= 2;
0: 	public static final int MODIFY_COLUMN_TYPE      = 3;
0: 	public static final int MODIFY_COLUMN_CONSTRAINT = 4;
0: 	public static final int MODIFY_COLUMN_CONSTRAINT_NOT_NULL = 5;
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	ColumnInfo() {}
0: 
0: 	/**
0: 	 *	Make one of these puppies.
0: 	 *
0: 	 *  @param name			Column name.
0: 	 *  @param dataType		Column type.
0: 	 *  @param defaultValue	Column default value.
0: 	 *  @param defaultInfo	Column default info.
0: 	 *  @param newDefaultUUID	New UUID for default.
0: 	 *  @param oldDefaultUUID	Old UUID for default.
0: 	 *	@param action		Action (create, modify default, etc.)
0: 	 * 	@param autoincStart Start of autoincrement values.
0: 	 *  @param autoincInc	Increment of autoincrement values-- if parameter
0: 	 *						is 0, it implies that this is not an autoincrement
0: 	 *						value.
0: 	 */
0: 	public	ColumnInfo(
0: 		               String						name,
0: 					   DataTypeDescriptor			dataType,
0: 					   DataValueDescriptor			defaultValue,
0: 					   DefaultInfo					defaultInfo,
0: 					   UUID							newDefaultUUID,
0: 					   UUID							oldDefaultUUID,
0: 					   int							action,
0: 					   long							autoincStart,
0: 					   long							autoincInc)
0: 	{
0: 		this.name = name;
0: 		this.dataType = dataType;
0: 		this.defaultValue = defaultValue;
0: 		this.defaultInfo = defaultInfo;
0: 		this.newDefaultUUID = newDefaultUUID;
0: 		this.oldDefaultUUID = oldDefaultUUID;
0: 		this.action = action;
0: 		this.autoincStart = autoincStart;
0: 		this.autoincInc = autoincInc;
0: 	}
0: 
0: 	// Formatable methods
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 
0: 		FormatableLongHolder flh;
0: 
0: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
0: 		name = (String)fh.get("name");
0: 		dataType = (DataTypeDescriptor) fh.get("dataType");
0: 		defaultValue = (DataValueDescriptor)fh.get("defaultValue");
0: 		defaultInfo = (DefaultInfo)fh.get("defaultInfo");
0: 		newDefaultUUID = (UUID)fh.get("newDefaultUUID");
0: 		oldDefaultUUID = (UUID)fh.get("oldDefaultUUID");
0: 		action = fh.getInt("action");
0: 		
0: 		if (fh.get("autoincStart") != null)
0: 		{
0: 			autoincStart = fh.getLong("autoincStart");
0: 			autoincInc = fh.getLong("autoincInc");
0: 		}
0: 		else
0: 		{
0: 			autoincInc = autoincStart = 0;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		FormatableHashtable fh = new FormatableHashtable();
0: 		fh.put("name", name);
0: 		fh.put("dataType", dataType);
0: 		fh.put("defaultValue", defaultValue);
0: 		fh.put("defaultInfo", defaultInfo);
0: 		fh.put("newDefaultUUID", newDefaultUUID);
0: 		fh.put("oldDefaultUUID", oldDefaultUUID );
0: 		fh.putInt("action", action);
0: 		
0: 		if (autoincInc != 0)
0: 		{
0: 			// only write out autoinc values if its an autoinc column.
0: 			fh.putLong("autoincStart", autoincStart);
0: 			fh.putLong("autoincInc", autoincInc);
0: 		}
0: 		out.writeObject(fh);
0: 	}
0:  
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.COLUMN_INFO_V02_ID; }
0: 
0: 	/*
0: 	  Object methods.
0: 	  */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String	traceName;
0: 			String  traceDataType;
0: 			String  traceDefaultValue;
0: 			String  traceDefaultInfo;
0: 			String  traceNewDefaultUUID;
0: 			String  traceOldDefaultUUID;
0: 			String  traceAction;
0: 			String  traceAI;
0: 			if (name == null)
0: 			{
0: 				traceName = "name: null ";
0: 			}
0: 			else
0: 			{
0: 				traceName = "name: "+name+" ";
0: 			}
0: 
0: 			if (dataType == null)
0: 			{
0: 				traceDataType = "dataType: null ";
0: 			}
0: 			else
0: 			{
0: 				traceDataType = "dataType: "+dataType+" ";
0: 			}
0: 
0: 			if (defaultValue == null)
0: 			{
0: 				traceDefaultValue = "defaultValue: null ";
0: 			}
0: 			else
0: 			{
0: 				traceDefaultValue = "defaultValue: "+defaultValue+" ";
0: 			}
0: 
0: 			if (defaultInfo == null)
0: 			{
0: 				traceDefaultInfo = "defaultInfo: null ";
0: 			}
0: 			else
0: 			{
0: 				traceDefaultInfo = "defaultInfo: "+defaultInfo+" ";
0: 			}
0: 
0: 			if (newDefaultUUID == null)
0: 			{
0: 				traceNewDefaultUUID = "newDefaultUUID: null ";
0: 			}
0: 			else
0: 			{
0: 				traceNewDefaultUUID = "newDefaultUUID: "+newDefaultUUID+" ";
0: 			}
0: 
0: 			if (oldDefaultUUID == null)
0: 			{
0: 				traceOldDefaultUUID = "oldDefaultUUID: null ";
0: 			}
0: 			else
0: 			{
0: 				traceOldDefaultUUID = "oldDefaultUUID: "+oldDefaultUUID+" ";
0: 			}
0: 
0: 			traceAction = "action: "+action+" ";
0: 
0: 			if (autoincInc != 0)
0: 			{
0: 				traceAI = "autoincrement, start: " + autoincStart +
0: 					" increment:" + autoincInc;
0: 			}
0: 			else
0: 			{
0: 				traceAI = "NOT autoincrement";
0: 			}
0: 			return "ColumnInfo: ("+traceName+traceDataType+traceDefaultValue+
0: 							   traceDefaultInfo+traceNewDefaultUUID+traceOldDefaultUUID+traceAction+traceAI+")";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================