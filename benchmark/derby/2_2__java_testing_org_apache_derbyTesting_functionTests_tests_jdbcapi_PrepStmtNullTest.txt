1:1302ca5: /*
3:1302ca5:  
1:1302ca5: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest
1:1302ca5:  
1:1302ca5: Licensed to the Apache Software Foundation (ASF) under one or more
1:1302ca5: contributor license agreements.  See the NOTICE file distributed with
1:1302ca5: this work for additional information regarding copyright ownership.
1:1302ca5: The ASF licenses this file to You under the Apache License, Version 2.0
1:1302ca5: (the "License"); you may not use this file except in compliance with
1:1302ca5: the License.  You may obtain a copy of the License at
1:1302ca5:  
1:1302ca5:    http://www.apache.org/licenses/LICENSE-2.0
1:1302ca5:  
1:1302ca5: Unless required by applicable law or agreed to in writing, software
1:1302ca5: distributed under the License is distributed on an "AS IS" BASIS,
1:1302ca5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1302ca5: See the License for the specific language governing permissions and
1:1302ca5: limitations under the License.
1:1302ca5:  
1:1302ca5:  */
1:1302ca5: 
1:1302ca5: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:1302ca5: 
1:1302ca5: import java.sql.Connection;
1:1302ca5: import java.sql.PreparedStatement;
1:1302ca5: import java.sql.ResultSet;
1:1302ca5: import java.sql.SQLException;
1:1302ca5: import java.sql.Statement;
1:1302ca5: import java.sql.Types;
1:1302ca5: import junit.framework.Test;
1:1302ca5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1302ca5: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1302ca5: import org.apache.derbyTesting.junit.JDBC;
1:1302ca5: import org.apache.derbyTesting.junit.TestConfiguration;
1:1302ca5: 
1:1302ca5: /**
1:1302ca5:  * Tests setting parameters to SQL NULL
1:1302ca5:  * This test converts the old jdbcapi/prepStmtNull.java
1:1302ca5:  * test to JUnit.
1:1302ca5:  */
1:1302ca5: 
1:1302ca5: public class PrepStmtNullTest extends BaseJDBCTestCase {
1:1302ca5:     
1:1302ca5:     /**
1:1302ca5:      * Create a test with the given name.
1:1302ca5:      *
1:1302ca5:      * @param name name of the test.
1:1302ca5:      */
1:1302ca5:     
1:1302ca5:     public PrepStmtNullTest(String name) {
1:1302ca5:         super(name);
1:1302ca5:     }
1:1302ca5:     
1:1302ca5:     /**
1:1302ca5:      * Create suite containing client and embedded tests and to run
1:1302ca5:      * all tests in this class
1:1302ca5:      */
1:1302ca5:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("PrepStmtNullTest");
1:1302ca5:         suite.addTest(baseSuite("PrepStmtNullTest:embedded"));
1:1302ca5:         suite.addTest(
1:1302ca5:                 TestConfiguration.clientServerDecorator(
1:1302ca5:                 baseSuite("PrepStmtNullTest:client")));
1:1302ca5:         return suite;
1:1302ca5:     }
1:1302ca5:     
1:1302ca5:     private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:1302ca5:         
1:1302ca5:         suite.addTestSuite(PrepStmtNullTest.class);
1:1302ca5:         
1:1302ca5:         return new CleanDatabaseTestSetup(suite) {
1:1302ca5:             /**
1:1302ca5:              * Creates the tables used in the test
1:1302ca5:              * cases.
1:1302ca5:              *
1:1302ca5:              * @exception SQLException if a database error occurs
1:1302ca5:              */
1:1302ca5:             protected void decorateSQL(Statement stmt) throws SQLException {
1:1302ca5:                 
1:1302ca5:                 /**
1:1302ca5:                  * Creates the table used in the test cases.
1:1302ca5:                  *
1:1302ca5:                  */
1:1302ca5:                 stmt.execute("create table nullTS(name varchar(10), ts timestamp)");
1:1302ca5:                 stmt.executeUpdate("create table nullBlob(name varchar(10), bval blob(16K))");
1:1302ca5:                 stmt.executeUpdate("create table ClobBlob(cval clob, bval blob(16K))");
1:1302ca5:             }
1:1302ca5:         };
1:1302ca5:     }
1:1302ca5:     
1:1302ca5:     /**
1:1302ca5:      * Testing a Null Timestamp
1:1302ca5:      *
1:1302ca5:      * @exception SQLException if error occurs
1:1302ca5:      */
1:1302ca5:     public void testNullTimeStamp() throws SQLException {
1:1302ca5:         
1:1302ca5:         Connection conn = getConnection();
1:1302ca5:         
1:1302ca5:         conn.setAutoCommit(false);
1:1302ca5:         
1:1302ca5:         PreparedStatement pStmt = prepareStatement("insert into nullTS values (?,?)");
1:1302ca5:         
1:1302ca5:         pStmt.setString(1,"work");
1:1302ca5:         pStmt.setNull(2,java.sql.Types.TIMESTAMP);
1:1302ca5:         pStmt.addBatch();
1:1302ca5:         pStmt.setString(1,"work1");
1:1302ca5:         pStmt.setNull(2,java.sql.Types.TIMESTAMP,"");
1:1302ca5:         pStmt.addBatch();
1:1302ca5:         
1:1302ca5:         pStmt.executeBatch();
1:1302ca5:         pStmt.close();
1:1302ca5:         commit();
1:1302ca5:         
1:1302ca5:         Statement stmt1 = createStatement();
1:1302ca5:         ResultSet rs = stmt1.executeQuery("select * from nullTS");
1:1302ca5:         String [][]  expectedRows = new String[][] { { "work", null },
1:1302ca5:         { "work1", null } };
1:1302ca5:         JDBC.assertFullResultSet(rs, expectedRows);
1:1302ca5:         commit();
1:1302ca5:         conn.close();
1:1302ca5:     }
1:1302ca5:     /**
1:1302ca5:      * Testing a Null Blob
1:1302ca5:      *
1:1302ca5:      * @exception SQLException if error occurs
1:1302ca5:      */
1:1302ca5:     public void testNullBlob() throws SQLException {
1:1302ca5:         
1:1302ca5:         Connection con = getConnection();
1:1302ca5:         
1:1302ca5:         con.setAutoCommit(false);
1:1302ca5:         
1:1302ca5:         PreparedStatement pStmt = con.prepareStatement("insert into nullBlob values (?,?)");
1:1302ca5:         
1:1302ca5:         pStmt.setString(1,"blob");
1:1302ca5:         pStmt.setNull(2,java.sql.Types.BLOB);
1:1302ca5:         pStmt.addBatch();
1:1302ca5:         pStmt.setString(1,"blob1");
1:1302ca5:         pStmt.setNull(2,java.sql.Types.BLOB,"");
1:1302ca5:         pStmt.addBatch();
1:1302ca5:         
1:1302ca5:         pStmt.executeBatch();
1:1302ca5:         pStmt.close();
1:1302ca5:         commit();
1:1302ca5:         
1:1302ca5:         Statement stmt1 = con.createStatement();
1:1302ca5:         ResultSet rs = stmt1.executeQuery("select * from nullBlob");
1:1302ca5:         String [][]  expectedRows = new String[][] { { "blob", null },
1:1302ca5:         { "blob1", null } };
1:1302ca5:         JDBC.assertFullResultSet(rs, expectedRows);
1:1302ca5:         stmt1.close();
1:1302ca5:         commit();
1:1302ca5:         con.close();
1:1302ca5:     }
1:1302ca5:     /**
1:1302ca5:      * Test setNull() on Clob/Blob using Varchar/binary types
1:1302ca5:      *
1:1302ca5:      * @exception SQLException if error occurs
1:1302ca5:      */
1:1302ca5:     public void testNullClobBlob() throws SQLException {
1:1302ca5:         
1:1302ca5:         byte[] b2 = new byte[1];
1:1302ca5:         b2[0] = (byte)64;
1:1302ca5:         
1:1302ca5:         PreparedStatement pStmt = prepareStatement("insert into ClobBlob values (?,?)");
1:1302ca5:         
1:1302ca5:         pStmt.setNull(1, Types.VARCHAR);
1:1302ca5:         pStmt.setBytes(2, b2);
1:1302ca5:         pStmt.execute();
1:1302ca5:         pStmt.setNull(1, Types.VARCHAR,"");
1:1302ca5:         pStmt.setBytes(2, b2);
1:1302ca5:         pStmt.execute();
1:1302ca5:         pStmt.close();
1:1302ca5:         
1:1302ca5:         Statement stmt1 = createStatement();
1:1302ca5:         ResultSet rs = stmt1.executeQuery("select * from ClobBlob");
1:1302ca5:         String [][]  expectedRows = new String[][] { { null, bytesToString(b2) },
1:1302ca5:         { null, bytesToString(b2) } };
1:1302ca5:         JDBC.assertFullResultSet(rs, expectedRows);
1:1302ca5:         rs.close();
1:1302ca5:         
1:1302ca5:         stmt1.close();
1:1302ca5:     }
1:1302ca5:     /**
1:1302ca5:      * Helper method to convert byte array to String
1:1302ca5:      *
1:1302ca5:      */
1:1302ca5:     private String bytesToString(byte[] ba) {
1:1302ca5:         if (ba == null) return null;
1:1302ca5:         StringBuffer s = new StringBuffer();
1:1302ca5:         for (int i = 0; i < ba.length; ++i) {
1:1302ca5:             s.append(Integer.toHexString(ba[i] & 0x00ff));
1:1302ca5:         }
1:1302ca5:         return s.toString();
1:1302ca5:     }
1:1302ca5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("PrepStmtNullTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1302ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Types;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests setting parameters to SQL NULL
1:  * This test converts the old jdbcapi/prepStmtNull.java
1:  * test to JUnit.
1:  */
1: 
1: public class PrepStmtNullTest extends BaseJDBCTestCase {
1:     
1:     /**
1:      * Create a test with the given name.
1:      *
1:      * @param name name of the test.
1:      */
1:     
1:     public PrepStmtNullTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Create suite containing client and embedded tests and to run
1:      * all tests in this class
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("PrepStmtNullTest");
1:         suite.addTest(baseSuite("PrepStmtNullTest:embedded"));
1:         suite.addTest(
1:                 TestConfiguration.clientServerDecorator(
1:                 baseSuite("PrepStmtNullTest:client")));
1:         return suite;
1:     }
1:     
1:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         
1:         suite.addTestSuite(PrepStmtNullTest.class);
1:         
1:         return new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Creates the tables used in the test
1:              * cases.
1:              *
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 
1:                 /**
1:                  * Creates the table used in the test cases.
1:                  *
1:                  */
1:                 stmt.execute("create table nullTS(name varchar(10), ts timestamp)");
1:                 stmt.executeUpdate("create table nullBlob(name varchar(10), bval blob(16K))");
1:                 stmt.executeUpdate("create table ClobBlob(cval clob, bval blob(16K))");
1:             }
1:         };
1:     }
1:     
1:     /**
1:      * Testing a Null Timestamp
1:      *
1:      * @exception SQLException if error occurs
1:      */
1:     public void testNullTimeStamp() throws SQLException {
1:         
1:         Connection conn = getConnection();
1:         
1:         conn.setAutoCommit(false);
1:         
1:         PreparedStatement pStmt = prepareStatement("insert into nullTS values (?,?)");
1:         
1:         pStmt.setString(1,"work");
1:         pStmt.setNull(2,java.sql.Types.TIMESTAMP);
1:         pStmt.addBatch();
1:         pStmt.setString(1,"work1");
1:         pStmt.setNull(2,java.sql.Types.TIMESTAMP,"");
1:         pStmt.addBatch();
1:         
1:         pStmt.executeBatch();
1:         pStmt.close();
1:         commit();
1:         
1:         Statement stmt1 = createStatement();
1:         ResultSet rs = stmt1.executeQuery("select * from nullTS");
1:         String [][]  expectedRows = new String[][] { { "work", null },
1:         { "work1", null } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         commit();
1:         conn.close();
1:     }
1:     /**
1:      * Testing a Null Blob
1:      *
1:      * @exception SQLException if error occurs
1:      */
1:     public void testNullBlob() throws SQLException {
1:         
1:         Connection con = getConnection();
1:         
1:         con.setAutoCommit(false);
1:         
1:         PreparedStatement pStmt = con.prepareStatement("insert into nullBlob values (?,?)");
1:         
1:         pStmt.setString(1,"blob");
1:         pStmt.setNull(2,java.sql.Types.BLOB);
1:         pStmt.addBatch();
1:         pStmt.setString(1,"blob1");
1:         pStmt.setNull(2,java.sql.Types.BLOB,"");
1:         pStmt.addBatch();
1:         
1:         pStmt.executeBatch();
1:         pStmt.close();
1:         commit();
1:         
1:         Statement stmt1 = con.createStatement();
1:         ResultSet rs = stmt1.executeQuery("select * from nullBlob");
1:         String [][]  expectedRows = new String[][] { { "blob", null },
1:         { "blob1", null } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         stmt1.close();
1:         commit();
1:         con.close();
1:     }
1:     /**
1:      * Test setNull() on Clob/Blob using Varchar/binary types
1:      *
1:      * @exception SQLException if error occurs
1:      */
1:     public void testNullClobBlob() throws SQLException {
1:         
1:         byte[] b2 = new byte[1];
1:         b2[0] = (byte)64;
1:         
1:         PreparedStatement pStmt = prepareStatement("insert into ClobBlob values (?,?)");
1:         
1:         pStmt.setNull(1, Types.VARCHAR);
1:         pStmt.setBytes(2, b2);
1:         pStmt.execute();
1:         pStmt.setNull(1, Types.VARCHAR,"");
1:         pStmt.setBytes(2, b2);
1:         pStmt.execute();
1:         pStmt.close();
1:         
1:         Statement stmt1 = createStatement();
1:         ResultSet rs = stmt1.executeQuery("select * from ClobBlob");
1:         String [][]  expectedRows = new String[][] { { null, bytesToString(b2) },
1:         { null, bytesToString(b2) } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         rs.close();
1:         
1:         stmt1.close();
1:     }
1:     /**
1:      * Helper method to convert byte array to String
1:      *
1:      */
1:     private String bytesToString(byte[] ba) {
1:         if (ba == null) return null;
1:         StringBuffer s = new StringBuffer();
1:         for (int i = 0; i < ba.length; ++i) {
1:             s.append(Integer.toHexString(ba[i] & 0x00ff));
1:         }
1:         return s.toString();
1:     }
1: }
============================================================================