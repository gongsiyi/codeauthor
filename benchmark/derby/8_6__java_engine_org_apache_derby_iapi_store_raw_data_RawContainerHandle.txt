1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.data.RawContainerHandle
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
2:eac0369: /**
1:eac0369: 		RawContainerHandle is the form of ContainerHandle that is used within
1:eac0369: 		the raw store.  This allows the raw store to have a handle on dropped
1:eac0369: 		container without exposing this to the external interface, which is not
1:eac0369: 		allowed to get back a handle on a dropped container
1:eac0369: */
1:eac0369: 
1:eac0369: public interface RawContainerHandle extends ContainerHandle {
1:eac0369: 
1:eac0369: 	/** A container can be in 4 states:
1:eac0369: 		non_existent - this is represented by a null ContainerHandle
1:eac0369: 
1:eac0369: 		NORMAL - this is the normal case, container has been created and is not dropped.
1:eac0369: 		DROPPED - container has been dropped, but is not known whether the drop
1:eac0369: 						has been committed or not
1:eac0369: 		COMMITTED_DROP - container has been dropped and has committed.  To
1:eac0369: 						everyone else except recovery, this state is equivalent
1:eac0369: 						to NON_EXISTENT
1:eac0369: 	*/
1:eac0369: 	public static final int NORMAL = 1;
1:eac0369: 	public static final int DROPPED = 2;
1:eac0369: 	public static final int COMMITTED_DROP = 4;
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 		Return the status of the container - one of NORMAL, DROPPED, COMMITTED_DROP.
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public int getContainerStatus() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Remove the container.
1:eac0369: 
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public void removeContainer(LogInstant instant) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If drop is true, drop the container.  if drop is false, un-drop the
1:eac0369: 		container
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public void dropContainer(LogInstant instant, boolean drop) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the logged container version
1:3fd26f3: 		@exception StandardException  Standard Derby exception policy
1:eac0369: 	*/
1:eac0369: 	public long getContainerVersion() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return a Page that represents any page - alloc page, valid page, free page, 
1:eac0369: 		dealloced page etc.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public Page getAnyPage(long pageNumber) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** Backup restore support */
1:eac0369: 
1:eac0369: 	/**
1:f57b07d: 		ReCreate a page for redo recovery.
1:f57b07d: 
1:f57b07d:         Used during redo recovery while trying to apply log records which
1:f57b07d:         are creating the page.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:f57b07d: 	public Page reCreatePageForRedoRecovery(
1:f57b07d:     int     pageFormat, 
1:f57b07d:     long    pageNumber, 
1:f57b07d:     long    pageOffset)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Log all information necessary to recreate the container during a load
1:eac0369: 		tran.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public ByteArray logCreateContainerInfo() throws StandardException;
1:eac0369: 
1:eac0369: 	 /**
1:eac0369: 	   The container is about to be modified.
1:eac0369: 	   Loggable actions use this to make sure the container gets cleaned if a
1:eac0369: 	   checkpoint is taken after any log record is sent to the log stream but
1:eac0369: 	   before the container is actually dirtied.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public void preDirty(boolean preDirtyOn) throws StandardException;
1:ae71c74: 
1:ae71c74: 
1:ae71c74:     /**
1:89a6625:      * Creates an encrypted or decrypted version of the container.
1:89a6625:      *
1:89a6625:      * @param newFilePath file to store the new  version of the container
1:89a6625:      * @param doEncrypt tells whether to encrypt or decrypt
1:89a6625:      * @exception StandardException	Standard Derby error policy
1:ae71c74:      */
1:89a6625:     public void encryptOrDecryptContainer(String newFilePath, boolean doEncrypt)
1:89a6625:             throws StandardException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:89a6625
/////////////////////////////////////////////////////////////////////////
1:      * Creates an encrypted or decrypted version of the container.
1:      *
1:      * @param newFilePath file to store the new  version of the container
1:      * @param doEncrypt tells whether to encrypt or decrypt
1:      * @exception StandardException	Standard Derby error policy
1:     public void encryptOrDecryptContainer(String newFilePath, boolean doEncrypt)
1:             throws StandardException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException  Standard Derby exception policy
1: 		@exception StandardException  Standard Derby exception policy
1: 		@exception StandardException  Standard Derby exception policy
1: 		@exception StandardException  Standard Derby exception policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
0: 	 * @exception StandardException	Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Create encrypted version of the container with the 
0:      * user specified encryption properties.  
0:      * @param newFilePath file to store the new encrypted version of the container
0: 	 * @exception StandardException	Standard Cloudscape error policy
1:      */
0: 	public void encryptContainer(String newFilePath) throws StandardException;
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1: 		ReCreate a page for redo recovery.
1: 
1:         Used during redo recovery while trying to apply log records which
1:         are creating the page.
1: 	public Page reCreatePageForRedoRecovery(
1:     int     pageFormat, 
1:     long    pageNumber, 
1:     long    pageOffset)
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.data.RawContainerHandle
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: /**
1: 		RawContainerHandle is the form of ContainerHandle that is used within
1: 		the raw store.  This allows the raw store to have a handle on dropped
1: 		container without exposing this to the external interface, which is not
1: 		allowed to get back a handle on a dropped container
1: */
1: 
1: public interface RawContainerHandle extends ContainerHandle {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/** A container can be in 4 states:
1: 		non_existent - this is represented by a null ContainerHandle
1: 
1: 		NORMAL - this is the normal case, container has been created and is not dropped.
1: 		DROPPED - container has been dropped, but is not known whether the drop
1: 						has been committed or not
1: 		COMMITTED_DROP - container has been dropped and has committed.  To
1: 						everyone else except recovery, this state is equivalent
1: 						to NON_EXISTENT
1: 	*/
1: 	public static final int NORMAL = 1;
1: 	public static final int DROPPED = 2;
1: 	public static final int COMMITTED_DROP = 4;
1: 
1: 	/** 
1: 		Return the status of the container - one of NORMAL, DROPPED, COMMITTED_DROP.
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public int getContainerStatus() throws StandardException;
1: 
1: 	/**
1: 		Remove the container.
1: 
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public void removeContainer(LogInstant instant) throws StandardException;
1: 
1: 	/**
1: 		If drop is true, drop the container.  if drop is false, un-drop the
1: 		container
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public void dropContainer(LogInstant instant, boolean drop) throws StandardException;
1: 
1: 	/**
1: 		Get the logged container version
0: 		@exception StandardException  Standard cloudscape exception policy
1: 	*/
1: 	public long getContainerVersion() throws StandardException;
1: 
1: 	/**
1: 		Return a Page that represents any page - alloc page, valid page, free page, 
1: 		dealloced page etc.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public Page getAnyPage(long pageNumber) throws StandardException;
1: 
1: 
1: 	/** Backup restore support */
1: 
1: 	/**
0: 		ReCreate a page for load tran - called by recovery redo ONLY
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	 */
0: 	public Page reCreatePageForLoadTran(int pageFormat, 
0: 										long pageNumber, 
0: 										long pageOffset)
1: 		 throws StandardException;
1: 
1: 	/**
1: 		Log all information necessary to recreate the container during a load
1: 		tran.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public ByteArray logCreateContainerInfo() throws StandardException;
1: 
1: 	 /**
1: 	   The container is about to be modified.
1: 	   Loggable actions use this to make sure the container gets cleaned if a
1: 	   checkpoint is taken after any log record is sent to the log stream but
1: 	   before the container is actually dirtied.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	 */
1: 	public void preDirty(boolean preDirtyOn) throws StandardException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: /**
0: 		RawContainerHandle is the form of ContainerHandle that is used within
0: 		the raw store.  This allows the raw store to have a handle on dropped
0: 		container without exposing this to the external interface, which is not
0: 		allowed to get back a handle on a dropped container
0: */
0: 
0: public interface RawContainerHandle extends ContainerHandle {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/** A container can be in 4 states:
0: 		non_existent - this is represented by a null ContainerHandle
0: 
0: 		NORMAL - this is the normal case, container has been created and is not dropped.
0: 		DROPPED - container has been dropped, but is not known whether the drop
0: 						has been committed or not
0: 		COMMITTED_DROP - container has been dropped and has committed.  To
0: 						everyone else except recovery, this state is equivalent
0: 						to NON_EXISTENT
0: 	*/
0: 	public static final int NORMAL = 1;
0: 	public static final int DROPPED = 2;
0: 	public static final int COMMITTED_DROP = 4;
0: 
0: 	/** 
0: 		Return the status of the container - one of NORMAL, DROPPED, COMMITTED_DROP.
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public int getContainerStatus() throws StandardException;
0: 
0: 	/**
0: 		Remove the container.
0: 
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public void removeContainer(LogInstant instant) throws StandardException;
0: 
0: 	/**
0: 		If drop is true, drop the container.  if drop is false, un-drop the
0: 		container
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public void dropContainer(LogInstant instant, boolean drop) throws StandardException;
0: 
0: 	/**
0: 		Get the logged container version
0: 		@exception StandardException  Standard cloudscape exception policy
0: 	*/
0: 	public long getContainerVersion() throws StandardException;
0: 
0: 	/**
0: 		Return a Page that represents any page - alloc page, valid page, free page, 
0: 		dealloced page etc.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public Page getAnyPage(long pageNumber) throws StandardException;
0: 
0: 
0: 	/** Backup restore support */
0: 
0: 	/**
0: 		ReCreate a page for load tran - called by recovery redo ONLY
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public Page reCreatePageForLoadTran(int pageFormat, 
0: 										long pageNumber, 
0: 										long pageOffset)
0: 		 throws StandardException;
0: 
0: 	/**
0: 		Log all information necessary to recreate the container during a load
0: 		tran.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public ByteArray logCreateContainerInfo() throws StandardException;
0: 
0: 	 /**
0: 	   The container is about to be modified.
0: 	   Loggable actions use this to make sure the container gets cleaned if a
0: 	   checkpoint is taken after any log record is sent to the log stream but
0: 	   before the container is actually dirtied.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	 */
0: 	public void preDirty(boolean preDirtyOn) throws StandardException;
0: 
0: }
============================================================================