1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
1:aaea357: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.tests.store;
1:aaea357: import java.sql.Connection;
1:aaea357: import java.sql.Statement;
1:aaea357: import java.sql.PreparedStatement;
1:aaea357: import java.sql.ResultSet;
1:aaea357: import java.sql.SQLException;
1:aaea357: import org.apache.derby.tools.ij;
1:aaea357: 
1:aaea357: /*
1:aaea357:  * This class tests log writes to the transaction log files with large log file
1:aaea357:  * id's and does a setup to test recovery with large log file id's in 
1:aaea357:  * MaxLogNumberRecovery.java test. Large log file id's are simulated using 
1:aaea357:  * a debug flag 'testMaxLogFileNumber' in the log factory, this is enabled
1:aaea357:  * by setting derby.debug.true=testMaxLogFileNumber in the properties file.
1:aaea357:  * In Non debug mode, this tests just acts as a plain log recovery test.
1:aaea357:  *
1:aaea357:  * @version 1.0
1:aaea357:  */
1:aaea357: 
1:aaea357: public class MaxLogNumber{
1:aaea357: 
1:aaea357: 	MaxLogNumber() {
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 
1:aaea357: 	private void runTest(Connection conn) throws SQLException {
1:aaea357: 		logMessage("Begin MaxLogNumber Test");
1:aaea357: 		// perform a checkpoint otherwise recovery test will look at log1 
1:aaea357: 		// instead of the log number that gets by the testMaxLogFileNumber 
1:aaea357: 		// debug flags.
1:aaea357: 		performCheckPoint(conn);
1:aaea357: 		createTable(conn);
1:aaea357: 		insert(conn, 100, COMMIT, 10);
1:aaea357: 		insert(conn, 100, ROLLBACK, 10);
1:aaea357: 		update(conn, 50, COMMIT, 10);
1:aaea357: 		update(conn, 50, ROLLBACK, 10);
1:aaea357: 		verifyData(conn, 100);
1:aaea357: 		//do some inserts that will be rolled back by recovey
1:aaea357: 		insert(conn, 2000, NOACTION, 2000);
1:aaea357: 		logMessage("End MaxLogNumber Test");
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	void performCheckPoint(Connection conn) throws SQLException
1:aaea357: 	{
1:aaea357: 		Statement stmt = conn.createStatement();
1:aaea357: 		//wait to make sure that checkpoint thread finished it's work
1:aaea357: 		stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
1:aaea357: 		stmt.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 		
1:aaea357: 	/**
1:aaea357: 	 * Insert some rows into the table.
1:aaea357: 	 */
1:aaea357: 	void insert(Connection conn, int rowCount, 
1:aaea357: 				int txStatus, int commitCount) throws SQLException {
1:aaea357: 
1:aaea357: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1:aaea357: 													 "emp" + 
1:aaea357: 													 " VALUES(?,?,?)");
1:aaea357: 		for (int i = 0; i < rowCount; i++) {
1:aaea357: 			
1:aaea357: 			ps.setInt(1, i); // ID
1:aaea357: 			ps.setString(2 , "skywalker" + i);
1:aaea357: 			ps.setFloat(3, (float)(i * 2000)); 
1:aaea357: 			ps.executeUpdate();
1:aaea357: 			if ((i % commitCount) == 0)
1:aaea357: 			{
1:aaea357: 				endTransaction(conn, txStatus);
1:aaea357: 			}
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		endTransaction(conn, txStatus);
1:aaea357: 		ps.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	static final int COMMIT = 1;
1:aaea357:     static final int ROLLBACK = 2;
1:aaea357: 	static final int NOACTION = 3;
1:aaea357: 
1:aaea357: 	void endTransaction(Connection conn, int txStatus) throws SQLException
1:aaea357: 	{
1:aaea357: 		switch(txStatus){
1:aaea357: 		case COMMIT: 
1:aaea357: 			conn.commit();
1:aaea357: 			break;
1:aaea357: 		case ROLLBACK:
1:aaea357: 			conn.rollback();
1:aaea357: 			break;
1:aaea357: 		case NOACTION:
1:aaea357: 			//do nothing
1:aaea357: 			break;
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 		
1:aaea357: 	/**
1:aaea357: 	 * update some rows in the table.
1:aaea357: 	 */
1:aaea357: 
1:aaea357: 	void update(Connection conn, int rowCount, 
1:aaea357: 				int txStatus, int commitCount) throws SQLException
1:aaea357: 	{
1:aaea357: 
1:aaea357: 		PreparedStatement ps = conn.prepareStatement("update " + "emp" + 
1:aaea357: 													 " SET salary=? where id=?");
1:aaea357: 		
1:aaea357: 		for (int i = 0; i < rowCount; i++) {
1:aaea357: 
1:aaea357: 			ps.setFloat(1, (float)(i * 2000 * 0.08));
1:aaea357: 			ps.setInt(2, i); // ID
1:aaea357: 			ps.executeUpdate();
1:aaea357: 			if ((i % commitCount) == 0)
1:aaea357: 			{
1:aaea357: 				endTransaction(conn, txStatus);
1:aaea357: 			}
1:aaea357: 		}
1:aaea357: 		endTransaction(conn, txStatus);
1:aaea357: 		ps.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * verify the rows in the table. 
1:aaea357: 	 */
1:aaea357: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
1:aaea357: 		
1:aaea357: 		Statement s = conn.createStatement();
1:aaea357: 		ResultSet rs = s.executeQuery("SELECT ID, name from emp order by id" );
1:aaea357: 		int count = 0;
1:aaea357: 		int id = 0;
1:aaea357: 		while(rs.next())
1:aaea357: 		{
1:aaea357: 			int tid = rs.getInt(1);
1:aaea357: 			String name = rs.getString(2);
1:aaea357: 			if(name.equals("skywalker" + id) && tid!= id)
1:aaea357: 			{
1:aaea357: 				
1:aaea357: 				logMessage("DATA IN THE TABLE IS NOT AS EXPECTED");
1:aaea357: 				logMessage("Got :ID=" +  tid + " Name=:" + name);
1:aaea357: 				logMessage("Expected: ID=" + id + "Name=" + "skywalker" + id );
1:aaea357: 			}
1:aaea357: 
1:aaea357: 			id++;
1:aaea357: 			count++;
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		if(count != expectedRowCount)
1:aaea357: 		{
1:aaea357: 			logMessage("Expected Number Of Rows (" + 
1:aaea357: 					   expectedRowCount + ")" +  "!="  + 
1:aaea357: 					   "No Of rows in the Table(" + 
1:aaea357: 					   count + ")");
1:aaea357: 		}
1:aaea357: 		s.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/* 
1:aaea357: 	 * create the tables that are used by this test.
1:aaea357: 	 */
1:aaea357: 	void createTable(Connection conn) throws SQLException {
1:aaea357: 
1:aaea357: 		Statement s = conn.createStatement();
1:aaea357: 		s.executeUpdate("CREATE TABLE " + "emp" + 
1:aaea357: 						"(id INT," +
1:aaea357: 						"name CHAR(200),"+ 
1:aaea357: 						"salary float)");
1:aaea357: 		s.executeUpdate("create index emp_idx on emp(id) ");
1:aaea357: 		conn.commit();
1:aaea357: 		s.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	void logMessage(String   str)
1:aaea357:     {
1:aaea357:         System.out.println(str);
1:aaea357:     }
1:aaea357: 	
1:aaea357: 	
1:aaea357: 	public static void main(String[] argv) throws Throwable {
1:aaea357: 		
1:aaea357:         MaxLogNumber test = new MaxLogNumber();
1:aaea357:    		ij.getPropertyArg(argv); 
1:aaea357:         Connection conn = ij.startJBMS();
1:aaea357:         conn.setAutoCommit(false);
1:aaea357: 
1:aaea357:         try {
1:aaea357:             test.runTest(conn);
1:aaea357:         }
1:aaea357:         catch (SQLException sqle) {
1:aaea357: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:aaea357:                 System.out, sqle);
1:aaea357: 			sqle.printStackTrace(System.out);
1:aaea357: 		}
1:aaea357:     }
1:aaea357: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derby.tools.ij;
1: 
1: /*
1:  * This class tests log writes to the transaction log files with large log file
1:  * id's and does a setup to test recovery with large log file id's in 
1:  * MaxLogNumberRecovery.java test. Large log file id's are simulated using 
1:  * a debug flag 'testMaxLogFileNumber' in the log factory, this is enabled
1:  * by setting derby.debug.true=testMaxLogFileNumber in the properties file.
1:  * In Non debug mode, this tests just acts as a plain log recovery test.
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  */
1: 
1: public class MaxLogNumber{
1: 
1: 	MaxLogNumber() {
1: 	}
1: 	
1: 
1: 	private void runTest(Connection conn) throws SQLException {
1: 		logMessage("Begin MaxLogNumber Test");
1: 		// perform a checkpoint otherwise recovery test will look at log1 
1: 		// instead of the log number that gets by the testMaxLogFileNumber 
1: 		// debug flags.
1: 		performCheckPoint(conn);
1: 		createTable(conn);
1: 		insert(conn, 100, COMMIT, 10);
1: 		insert(conn, 100, ROLLBACK, 10);
1: 		update(conn, 50, COMMIT, 10);
1: 		update(conn, 50, ROLLBACK, 10);
1: 		verifyData(conn, 100);
1: 		//do some inserts that will be rolled back by recovey
1: 		insert(conn, 2000, NOACTION, 2000);
1: 		logMessage("End MaxLogNumber Test");
1: 	}
1: 
1: 	void performCheckPoint(Connection conn) throws SQLException
1: 	{
1: 		Statement stmt = conn.createStatement();
1: 		//wait to make sure that checkpoint thread finished it's work
1: 		stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
1: 		stmt.close();
1: 	}
1: 
1: 		
1: 	/**
1: 	 * Insert some rows into the table.
1: 	 */
1: 	void insert(Connection conn, int rowCount, 
1: 				int txStatus, int commitCount) throws SQLException {
1: 
1: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1: 													 "emp" + 
1: 													 " VALUES(?,?,?)");
1: 		for (int i = 0; i < rowCount; i++) {
1: 			
1: 			ps.setInt(1, i); // ID
1: 			ps.setString(2 , "skywalker" + i);
1: 			ps.setFloat(3, (float)(i * 2000)); 
1: 			ps.executeUpdate();
1: 			if ((i % commitCount) == 0)
1: 			{
1: 				endTransaction(conn, txStatus);
1: 			}
1: 		}
1: 
1: 		endTransaction(conn, txStatus);
1: 		ps.close();
1: 	}
1: 
1: 
1: 	static final int COMMIT = 1;
1:     static final int ROLLBACK = 2;
1: 	static final int NOACTION = 3;
1: 
1: 	void endTransaction(Connection conn, int txStatus) throws SQLException
1: 	{
1: 		switch(txStatus){
1: 		case COMMIT: 
1: 			conn.commit();
1: 			break;
1: 		case ROLLBACK:
1: 			conn.rollback();
1: 			break;
1: 		case NOACTION:
1: 			//do nothing
1: 			break;
1: 		}
1: 	}
1: 		
1: 	/**
1: 	 * update some rows in the table.
1: 	 */
1: 
1: 	void update(Connection conn, int rowCount, 
1: 				int txStatus, int commitCount) throws SQLException
1: 	{
1: 
1: 		PreparedStatement ps = conn.prepareStatement("update " + "emp" + 
1: 													 " SET salary=? where id=?");
1: 		
1: 		for (int i = 0; i < rowCount; i++) {
1: 
1: 			ps.setFloat(1, (float)(i * 2000 * 0.08));
1: 			ps.setInt(2, i); // ID
1: 			ps.executeUpdate();
1: 			if ((i % commitCount) == 0)
1: 			{
1: 				endTransaction(conn, txStatus);
1: 			}
1: 		}
1: 		endTransaction(conn, txStatus);
1: 		ps.close();
1: 	}
1: 
1: 
1: 	/*
1: 	 * verify the rows in the table. 
1: 	 */
1: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
1: 		
1: 		Statement s = conn.createStatement();
1: 		ResultSet rs = s.executeQuery("SELECT ID, name from emp order by id" );
1: 		int count = 0;
1: 		int id = 0;
1: 		while(rs.next())
1: 		{
1: 			int tid = rs.getInt(1);
1: 			String name = rs.getString(2);
1: 			if(name.equals("skywalker" + id) && tid!= id)
1: 			{
1: 				
1: 				logMessage("DATA IN THE TABLE IS NOT AS EXPECTED");
1: 				logMessage("Got :ID=" +  tid + " Name=:" + name);
1: 				logMessage("Expected: ID=" + id + "Name=" + "skywalker" + id );
1: 			}
1: 
1: 			id++;
1: 			count++;
1: 		}
1: 
1: 		if(count != expectedRowCount)
1: 		{
1: 			logMessage("Expected Number Of Rows (" + 
1: 					   expectedRowCount + ")" +  "!="  + 
1: 					   "No Of rows in the Table(" + 
1: 					   count + ")");
1: 		}
1: 		s.close();
1: 	}
1: 
1: 	/* 
1: 	 * create the tables that are used by this test.
1: 	 */
1: 	void createTable(Connection conn) throws SQLException {
1: 
1: 		Statement s = conn.createStatement();
1: 		s.executeUpdate("CREATE TABLE " + "emp" + 
1: 						"(id INT," +
1: 						"name CHAR(200),"+ 
1: 						"salary float)");
1: 		s.executeUpdate("create index emp_idx on emp(id) ");
1: 		conn.commit();
1: 		s.close();
1: 	}
1: 
1: 	void logMessage(String   str)
1:     {
1:         System.out.println(str);
1:     }
1: 	
1: 	
1: 	public static void main(String[] argv) throws Throwable {
1: 		
1:         MaxLogNumber test = new MaxLogNumber();
1:    		ij.getPropertyArg(argv); 
1:         Connection conn = ij.startJBMS();
1:         conn.setAutoCommit(false);
1: 
1:         try {
1:             test.runTest(conn);
1:         }
1:         catch (SQLException sqle) {
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:                 System.out, sqle);
1: 			sqle.printStackTrace(System.out);
1: 		}
1:     }
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:8fbfcc4
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import org.apache.derby.tools.ij;
0: 
0: /*
0:  * This class tests log writes to the transaction log files with large log file
0:  * id's and does a setup to test recovery with large log file id's in 
0:  * MaxLogNumberRecovery.java test. Large log file id's are simulated using 
0:  * a debug flag 'testMaxLogFileNumber' in the log factory, this is enabled
0:  * by setting derby.debug.true=testMaxLogFileNumber in the properties file.
0:  * In Non debug mode, this tests just acts as a plain log recovery test.
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  */
0: 
0: public class MaxLogNumber{
0: 
0: 	MaxLogNumber() {
0: 	}
0: 	
0: 
0: 	private void runTest(Connection conn) throws SQLException {
0: 		logMessage("Begin MaxLogNumber Test");
0: 		// perform a checkpoint otherwise recovery test will look at log1 
0: 		// instead of the log number that gets by the testMaxLogFileNumber 
0: 		// debug flags.
0: 		performCheckPoint(conn);
0: 		createTable(conn);
0: 		insert(conn, 100, COMMIT, 10);
0: 		insert(conn, 100, ROLLBACK, 10);
0: 		update(conn, 50, COMMIT, 10);
0: 		update(conn, 50, ROLLBACK, 10);
0: 		verifyData(conn, 100);
0: 		//do some inserts that will be rolled back by recovey
0: 		insert(conn, 2000, NOACTION, 2000);
0: 		logMessage("End MaxLogNumber Test");
0: 	}
0: 
0: 	void performCheckPoint(Connection conn) throws SQLException
0: 	{
0: 		Statement stmt = conn.createStatement();
0: 		//wait to make sure that checkpoint thread finished it's work
0: 		stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()");
0: 		stmt.close();
0: 	}
0: 
0: 		
0: 	/**
0: 	 * Insert some rows into the table.
0: 	 */
0: 	void insert(Connection conn, int rowCount, 
0: 				int txStatus, int commitCount) throws SQLException {
0: 
0: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
0: 													 "emp" + 
0: 													 " VALUES(?,?,?)");
0: 		for (int i = 0; i < rowCount; i++) {
0: 			
0: 			ps.setInt(1, i); // ID
0: 			ps.setString(2 , "skywalker" + i);
0: 			ps.setFloat(3, (float)(i * 2000)); 
0: 			ps.executeUpdate();
0: 			if ((i % commitCount) == 0)
0: 			{
0: 				endTransaction(conn, txStatus);
0: 			}
0: 		}
0: 
0: 		endTransaction(conn, txStatus);
0: 		ps.close();
0: 	}
0: 
0: 
0: 	static final int COMMIT = 1;
0:     static final int ROLLBACK = 2;
0: 	static final int NOACTION = 3;
0: 
0: 	void endTransaction(Connection conn, int txStatus) throws SQLException
0: 	{
0: 		switch(txStatus){
0: 		case COMMIT: 
0: 			conn.commit();
0: 			break;
0: 		case ROLLBACK:
0: 			conn.rollback();
0: 			break;
0: 		case NOACTION:
0: 			//do nothing
0: 			break;
0: 		}
0: 	}
0: 		
0: 	/**
0: 	 * update some rows in the table.
0: 	 */
0: 
0: 	void update(Connection conn, int rowCount, 
0: 				int txStatus, int commitCount) throws SQLException
0: 	{
0: 
0: 		PreparedStatement ps = conn.prepareStatement("update " + "emp" + 
0: 													 " SET salary=? where id=?");
0: 		
0: 		for (int i = 0; i < rowCount; i++) {
0: 
0: 			ps.setFloat(1, (float)(i * 2000 * 0.08));
0: 			ps.setInt(2, i); // ID
0: 			ps.executeUpdate();
0: 			if ((i % commitCount) == 0)
0: 			{
0: 				endTransaction(conn, txStatus);
0: 			}
0: 		}
0: 		endTransaction(conn, txStatus);
0: 		ps.close();
0: 	}
0: 
0: 
0: 	/*
0: 	 * verify the rows in the table. 
0: 	 */
0: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
0: 		
0: 		Statement s = conn.createStatement();
0: 		ResultSet rs = s.executeQuery("SELECT ID, name from emp order by id" );
0: 		int count = 0;
0: 		int id = 0;
0: 		while(rs.next())
0: 		{
0: 			int tid = rs.getInt(1);
0: 			String name = rs.getString(2);
0: 			if(name.equals("skywalker" + id) && tid!= id)
0: 			{
0: 				
0: 				logMessage("DATA IN THE TABLE IS NOT AS EXPECTED");
0: 				logMessage("Got :ID=" +  tid + " Name=:" + name);
0: 				logMessage("Expected: ID=" + id + "Name=" + "skywalker" + id );
0: 			}
0: 
0: 			id++;
0: 			count++;
0: 		}
0: 
0: 		if(count != expectedRowCount)
0: 		{
0: 			logMessage("Expected Number Of Rows (" + 
0: 					   expectedRowCount + ")" +  "!="  + 
0: 					   "No Of rows in the Table(" + 
0: 					   count + ")");
0: 		}
0: 		s.close();
0: 	}
0: 
0: 	/* 
0: 	 * create the tables that are used by this test.
0: 	 */
0: 	void createTable(Connection conn) throws SQLException {
0: 
0: 		Statement s = conn.createStatement();
0: 		s.executeUpdate("CREATE TABLE " + "emp" + 
0: 						"(id INT," +
0: 						"name CHAR(200),"+ 
0: 						"salary float)");
0: 		s.executeUpdate("create index emp_idx on emp(id) ");
0: 		conn.commit();
0: 		s.close();
0: 	}
0: 
0: 	void logMessage(String   str)
0:     {
0:         System.out.println(str);
0:     }
0: 	
0: 	
0: 	public static void main(String[] argv) throws Throwable {
0: 		
0:         MaxLogNumber test = new MaxLogNumber();
0:    		ij.getPropertyArg(argv); 
0:         Connection conn = ij.startJBMS();
0:         conn.setAutoCommit(false);
0: 
0:         try {
0:             test.runTest(conn);
0:         }
0:         catch (SQLException sqle) {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:     }
0: }
============================================================================