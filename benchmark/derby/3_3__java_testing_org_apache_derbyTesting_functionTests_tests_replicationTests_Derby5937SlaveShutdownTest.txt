1:3f01c97: /*
1:cfd0e57: 
1:3f01c97: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest
4:3f01c97: 
1:3f01c97: Licensed to the Apache Software Foundation (ASF) under one or more
1:3f01c97: contributor license agreements.  See the NOTICE file distributed with
1:3f01c97: this work for additional information regarding copyright ownership.
1:3f01c97: The ASF licenses this file to You under the Apache License, Version 2.0
1:3f01c97: (the "License"); you may not use this file except in compliance with
1:3f01c97: the License.  You may obtain a copy of the License at
1:3f01c97: 
1:3f01c97:    http://www.apache.org/licenses/LICENSE-2.0
1:3f01c97: 
1:3f01c97: Unless required by applicable law or agreed to in writing, software
1:3f01c97: distributed under the License is distributed on an "AS IS" BASIS,
1:3f01c97: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f01c97: See the License for the specific language governing permissions and
1:3f01c97: limitations under the License.
1:3f01c97: 
1:3f01c97: */
1:3f01c97: 
1:3f01c97: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:3f01c97: 
1:3f01c97: import java.io.File;
1:3f01c97: import java.sql.Connection;
1:3f01c97: import java.sql.SQLException;
1:f978b1f: import javax.sql.DataSource;
1:3f01c97: import junit.framework.Test;
1:3f01c97: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:3f01c97: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:cfd0e57: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f978b1f: import org.apache.derbyTesting.junit.JDBCDataSource;
1:3f01c97: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:3f01c97: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:3f01c97: import org.apache.derbyTesting.junit.TestConfiguration;
1:3f01c97: 
1:3f01c97: /**
1:3f01c97:  * <p>
1:3f01c97:  * Regression test case for DERBY-5937. After fail-over, the slave database
1:3f01c97:  * will leak a file handle for the active log file.
1:3f01c97:  * </p>
1:3f01c97:  *
1:3f01c97:  * <p>
1:3f01c97:  * The test case will set up replication between a master database and a
1:3f01c97:  * slave database, perform fail-over to the slave, and then shut down the
1:3f01c97:  * slave database. Finally, it attempts to delete the slave database. On
1:3f01c97:  * Windows, this fails if DERBY-5937 is not fixed, because one of the log
1:3f01c97:  * files is still held open, and Windows doesn't allow deletion of open
1:3f01c97:  * files.
1:3f01c97:  * </p>
1:3f01c97:  */
1:3f01c97: public class Derby5937SlaveShutdownTest extends BaseJDBCTestCase {
1:3f01c97: 
1:3f01c97:     private static final String MASTER_DB = "d5937-master-db";
1:3f01c97:     private static final String SLAVE_DB = "d5937-slave-db";
1:3f01c97: 
1:3f01c97:     private static final String FAILOVER_SUCCESS = "XRE20";
1:3f01c97:     private static final String DB_SHUTDOWN_SUCCESS = "08006";
1:3f01c97: 
1:3f01c97:     private static final long RETRY_INTERVAL = 50L;
1:3f01c97: 
1:3f01c97:     public Derby5937SlaveShutdownTest(String name) {
1:3f01c97:         super(name);
2:3f01c97:     }
1:3f01c97: 
1:3f01c97:     public static Test suite() {
1:cfd0e57:         //DERBY-5975 test fails intermittently with weme causing a hang.
1:cfd0e57:         // Likely a jvm issue, so don't run on that OS...
1:cfd0e57:         if (BaseTestCase.isJ9Platform())
1:cfd0e57:         {
1:1ae02c9:             Test test = new BaseTestSuite("Derby5937SlaveShutdownTest");
1:cfd0e57:             return test;
1:cfd0e57:         }
1:f978b1f:         Class klass = Derby5937SlaveShutdownTest.class;
1:f978b1f:         // The default security policy doesn't allow derby.jar to do
1:f978b1f:         // networking, which is needed for replication, so install a custom
1:f978b1f:         // policy for this test.
1:f978b1f:         return new SecurityManagerSetup(
1:f978b1f:             TestConfiguration.singleUseDatabaseDecorator(
1:f978b1f:                 TestConfiguration.embeddedSuite(klass), MASTER_DB),
1:f978b1f:             klass.getName().replace('.', '/') + ".policy", true);
1:3f01c97:     }
1:3f01c97: 
1:3f01c97:     public void testSlaveFailoverLeak() throws Exception {
1:3f01c97:         // First establish a connection so that the database is created.
1:3f01c97:         getConnection().close();
1:3f01c97: 
1:3f01c97:         // Then shut down the database cleanly so that it can be used
1:3f01c97:         // to seed the replication slave.
1:3f01c97:         final TestConfiguration config = TestConfiguration.getCurrent();
1:3f01c97:         config.shutdownDatabase();
1:3f01c97: 
1:3f01c97:         // Copy the database to the slave.
1:3f01c97:         final String masterDb = config.getDatabasePath(MASTER_DB);
1:3f01c97:         final String slaveDb = config.getDatabasePath(SLAVE_DB);
1:3f01c97:         PrivilegedFileOpsForTests.copy(new File(masterDb), new File(slaveDb));
1:3f01c97: 
1:3f01c97:         // And start the slave.
1:f978b1f:         DataSource startSlaveDS = JDBCDataSource.getDataSource(SLAVE_DB);
1:f978b1f:         JDBCDataSource.setBeanProperty(startSlaveDS, "connectionAttributes",
1:f978b1f:                 "startSlave=true;slaveHost=" + config.getHostName() +
1:f978b1f:                 ";slavePort=" + config.getPort());
1:f978b1f:         SlaveThread slave = new SlaveThread(startSlaveDS);
1:3f01c97:         slave.start();
1:3f01c97: 
1:3f01c97:         // Start the master. This will fail until the slave is up, so do
1:3f01c97:         // it in a loop until successful or time runs out.
1:f978b1f:         DataSource startMasterDS = JDBCDataSource.getDataSource();
1:f978b1f:         JDBCDataSource.setBeanProperty(startMasterDS, "connectionAttributes",
1:f978b1f:                 "startMaster=true;slaveHost=" + config.getHostName() +
1:f978b1f:                 ";slavePort=" + config.getPort());
1:3f01c97:         long giveUp =
1:3f01c97:             System.currentTimeMillis() + NetworkServerTestSetup.getWaitTime();
1:3f01c97:         Connection c = null;
1:3f01c97:         while (c == null) {
1:3f01c97:             try {
1:f978b1f:                 c = startMasterDS.getConnection();
1:3f01c97:             } catch (SQLException sqle) {
1:3f01c97:                 slave.checkError(); // Exit early if the slave has failed
1:3f01c97:                 if (System.currentTimeMillis() > giveUp) {
1:3f01c97:                     fail("Master won't start", sqle);
2:3f01c97:                 } else {
1:3f01c97:                     println("Retrying after startMaster failed with: " + sqle);
1:3f01c97:                     Thread.sleep(RETRY_INTERVAL);
1:3f01c97:                 }
1:3f01c97:             }
1:3f01c97:         }
1:3f01c97:         c.close();
1:3f01c97: 
1:3f01c97:         // Wait for the slave thread to complete, which it will do once
1:3f01c97:         // it's connected to the master.
1:3f01c97:         slave.join();
1:3f01c97:         slave.checkError();
1:3f01c97: 
1:3f01c97:         // Perform fail-over.
1:f978b1f:         DataSource failoverDS = JDBCDataSource.getDataSource();
1:f978b1f:         JDBCDataSource.setBeanProperty(
1:f978b1f:                 failoverDS, "connectionAttributes", "failover=true");
1:3f01c97:         try {
1:f978b1f:             failoverDS.getConnection();
1:3f01c97:             fail("failover should receive exception");
1:3f01c97:         } catch (SQLException sqle) {
1:3f01c97:             assertSQLState(FAILOVER_SUCCESS, sqle);
1:3f01c97:         }
1:3f01c97: 
1:3f01c97:         // Shut down the slave database. This will fail until failover is
1:3f01c97:         // complete, so do it in a loop until successful or time runs out.
1:3f01c97:         giveUp =
1:3f01c97:             System.currentTimeMillis() + NetworkServerTestSetup.getWaitTime();
1:f978b1f:         DataSource slaveShutdownDS = JDBCDataSource.getDataSource(SLAVE_DB);
1:f978b1f:         JDBCDataSource.setBeanProperty(
1:f978b1f:                 slaveShutdownDS, "shutdownDatabase", "shutdown");
1:3f01c97:         while (true) {
1:3f01c97:             try {
1:f978b1f:                 slaveShutdownDS.getConnection();
1:3f01c97:                 fail("Shutdown of slave database didn't throw an exception");
1:3f01c97:             } catch (SQLException sqle) {
1:3f01c97:                 if (DB_SHUTDOWN_SUCCESS.equals(sqle.getSQLState())) {
1:3f01c97:                     // The expected shutdown exception was thrown. Break out
1:3f01c97:                     // of the loop.
1:3f01c97:                     break;
1:3f01c97:                 } else if (System.currentTimeMillis() > giveUp) {
1:3f01c97:                     fail("Could not shut down slave database", sqle);
1:3f01c97:                 } else {
1:3f01c97:                     println("Retrying after failover failed with: " + sqle);
1:3f01c97:                     Thread.sleep(RETRY_INTERVAL);
1:3f01c97:                 }
1:3f01c97:             }
1:3f01c97:         }
1:3f01c97: 
1:3f01c97:         // This call used to fail on Windows because one of the log files
1:3f01c97:         // was still open.
1:3f01c97:         assertDirectoryDeleted(new File(slaveDb));
1:3f01c97:     }
1:3f01c97: 
1:3f01c97:     /**
1:3f01c97:      * Helper thread which starts a replication slave and blocks until the
1:3f01c97:      * slave is connected to a master database.
1:3f01c97:      */
1:3f01c97:     private class SlaveThread extends Thread {
1:3f01c97: 
1:f978b1f:         private final DataSource ds;
1:3f01c97:         private volatile Throwable error;
1:3f01c97: 
1:f978b1f:         SlaveThread(DataSource ds) {
1:f978b1f:             this.ds = ds;
1:3f01c97:         }
1:3f01c97: 
1:3f01c97:         public void run() {
1:3f01c97:             try {
1:3f01c97:                 run_();
1:3f01c97:             } catch (Throwable t) {
1:3f01c97:                 error = t;
1:3f01c97:             }
1:3f01c97:         }
1:3f01c97: 
1:3f01c97:         private void run_() throws Exception {
1:3f01c97:             println("Slave thread started.");
1:3f01c97: 
1:3f01c97:             try {
1:f978b1f:                 ds.getConnection();
1:3f01c97:                 fail("startSlave should throw exception");
1:3f01c97:             } catch (SQLException sqle) {
1:3f01c97:                 assertSQLState("XRE08", sqle);
1:3f01c97:             }
1:3f01c97:         }
1:3f01c97: 
1:3f01c97:         void checkError() {
1:3f01c97:             if (error != null) {
1:3f01c97:                 fail("Slave thread failed", error);
1:3f01c97:             }
1:3f01c97:         }
1:3f01c97:     }
1:3f01c97: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             Test test = new BaseTestSuite("Derby5937SlaveShutdownTest");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b77b23c
/////////////////////////////////////////////////////////////////////////
commit:cfd0e57
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.functionTests.tests.store.BootLockTest;
1: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
1:         //DERBY-5975 test fails intermittently with weme causing a hang.
1:         // Likely a jvm issue, so don't run on that OS...
1:         if (BaseTestCase.isJ9Platform())
1:         {
0:             Test test = new TestSuite("Derby5937SlaveShutdownTest");
1:             return test;
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f978b1f
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:         Class klass = Derby5937SlaveShutdownTest.class;
1:         // The default security policy doesn't allow derby.jar to do
1:         // networking, which is needed for replication, so install a custom
1:         // policy for this test.
1:         return new SecurityManagerSetup(
1:             TestConfiguration.singleUseDatabaseDecorator(
1:                 TestConfiguration.embeddedSuite(klass), MASTER_DB),
1:             klass.getName().replace('.', '/') + ".policy", true);
/////////////////////////////////////////////////////////////////////////
1:         DataSource startSlaveDS = JDBCDataSource.getDataSource(SLAVE_DB);
1:         JDBCDataSource.setBeanProperty(startSlaveDS, "connectionAttributes",
1:                 "startSlave=true;slaveHost=" + config.getHostName() +
1:                 ";slavePort=" + config.getPort());
1:         SlaveThread slave = new SlaveThread(startSlaveDS);
1:         DataSource startMasterDS = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(startMasterDS, "connectionAttributes",
1:                 "startMaster=true;slaveHost=" + config.getHostName() +
1:                 ";slavePort=" + config.getPort());
1:                 c = startMasterDS.getConnection();
/////////////////////////////////////////////////////////////////////////
1:         DataSource failoverDS = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(
1:                 failoverDS, "connectionAttributes", "failover=true");
1:             failoverDS.getConnection();
/////////////////////////////////////////////////////////////////////////
1:         DataSource slaveShutdownDS = JDBCDataSource.getDataSource(SLAVE_DB);
1:         JDBCDataSource.setBeanProperty(
1:                 slaveShutdownDS, "shutdownDatabase", "shutdown");
1:                 slaveShutdownDS.getConnection();
/////////////////////////////////////////////////////////////////////////
1:         private final DataSource ds;
1:         SlaveThread(DataSource ds) {
1:             this.ds = ds;
/////////////////////////////////////////////////////////////////////////
1:                 ds.getConnection();
commit:3f01c97
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.SQLException;
0: import java.util.Properties;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * <p>
1:  * Regression test case for DERBY-5937. After fail-over, the slave database
1:  * will leak a file handle for the active log file.
1:  * </p>
1:  *
1:  * <p>
1:  * The test case will set up replication between a master database and a
1:  * slave database, perform fail-over to the slave, and then shut down the
1:  * slave database. Finally, it attempts to delete the slave database. On
1:  * Windows, this fails if DERBY-5937 is not fixed, because one of the log
1:  * files is still held open, and Windows doesn't allow deletion of open
1:  * files.
1:  * </p>
1:  */
1: public class Derby5937SlaveShutdownTest extends BaseJDBCTestCase {
1: 
1:     private static final String MASTER_DB = "d5937-master-db";
1:     private static final String SLAVE_DB = "d5937-slave-db";
1: 
1:     private static final String FAILOVER_SUCCESS = "XRE20";
1:     private static final String DB_SHUTDOWN_SUCCESS = "08006";
1: 
1:     private static final long RETRY_INTERVAL = 50L;
1: 
1:     public Derby5937SlaveShutdownTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         if (JDBC.vmSupportsJDBC3()) {
0:             Class klass = Derby5937SlaveShutdownTest.class;
0:             // The default security policy doesn't allow derby.jar to do
0:             // networking, which is needed for replication, so install a custom
0:             // policy for this test.
0:             return new SecurityManagerSetup(
0:                 TestConfiguration.singleUseDatabaseDecorator(
0:                     TestConfiguration.embeddedSuite(klass), MASTER_DB),
0:                 klass.getName().replace('.', '/') + ".policy", true);
1:         } else {
0:             // The test doesn't run on J2ME.
0:             return new TestSuite("Derby5937SlaveShutdownTest - skipped");
1:         }
1:     }
1: 
1:     public void testSlaveFailoverLeak() throws Exception {
1:         // First establish a connection so that the database is created.
1:         getConnection().close();
1: 
1:         // Then shut down the database cleanly so that it can be used
1:         // to seed the replication slave.
1:         final TestConfiguration config = TestConfiguration.getCurrent();
1:         config.shutdownDatabase();
1: 
1:         // Copy the database to the slave.
1:         final String masterDb = config.getDatabasePath(MASTER_DB);
1:         final String slaveDb = config.getDatabasePath(SLAVE_DB);
1:         PrivilegedFileOpsForTests.copy(new File(masterDb), new File(slaveDb));
1: 
1:         // And start the slave.
0:         SlaveThread slave = new SlaveThread(config);
1:         slave.start();
1: 
0:         Properties p = new Properties();
0:         p.setProperty("startMaster", "true");
0:         p.setProperty("slaveHost", config.getHostName());
0:         p.setProperty("slavePort", String.valueOf(config.getPort()));
1: 
1:         // Start the master. This will fail until the slave is up, so do
1:         // it in a loop until successful or time runs out.
1:         long giveUp =
1:             System.currentTimeMillis() + NetworkServerTestSetup.getWaitTime();
1:         Connection c = null;
1:         while (c == null) {
1:             try {
0:                 c = config.openPhysicalConnection(masterDb,
0:                         config.getUserName(), config.getUserPassword(), p);
1:             } catch (SQLException sqle) {
1:                 slave.checkError(); // Exit early if the slave has failed
1:                 if (System.currentTimeMillis() > giveUp) {
1:                     fail("Master won't start", sqle);
1:                 } else {
1:                     println("Retrying after startMaster failed with: " + sqle);
1:                     Thread.sleep(RETRY_INTERVAL);
1:                 }
1:             }
1:         }
1:         c.close();
1: 
1:         // Wait for the slave thread to complete, which it will do once
1:         // it's connected to the master.
1:         slave.join();
1:         slave.checkError();
1: 
1:         // Perform fail-over.
0:         p.clear();
0:         p.setProperty("failover", "true");
1:         try {
0:             config.openPhysicalConnection(masterDb,
0:                     config.getUserName(), config.getUserPassword(), p);
1:             fail("failover should receive exception");
1:         } catch (SQLException sqle) {
1:             assertSQLState(FAILOVER_SUCCESS, sqle);
1:         }
1: 
1:         // Shut down the slave database. This will fail until failover is
1:         // complete, so do it in a loop until successful or time runs out.
1:         giveUp =
1:             System.currentTimeMillis() + NetworkServerTestSetup.getWaitTime();
0:         p.clear();
0:         p.setProperty("shutdown", "true");
1:         while (true) {
1:             try {
0:                 config.openPhysicalConnection(slaveDb,
0:                         config.getUserName(), config.getUserPassword(), p);
1:                 fail("Shutdown of slave database didn't throw an exception");
1:             } catch (SQLException sqle) {
1:                 if (DB_SHUTDOWN_SUCCESS.equals(sqle.getSQLState())) {
1:                     // The expected shutdown exception was thrown. Break out
1:                     // of the loop.
1:                     break;
1:                 } else if (System.currentTimeMillis() > giveUp) {
1:                     fail("Could not shut down slave database", sqle);
1:                 } else {
1:                     println("Retrying after failover failed with: " + sqle);
1:                     Thread.sleep(RETRY_INTERVAL);
1:                 }
1:             }
1:         }
1: 
1:         // This call used to fail on Windows because one of the log files
1:         // was still open.
1:         assertDirectoryDeleted(new File(slaveDb));
1:     }
1: 
1:     /**
1:      * Helper thread which starts a replication slave and blocks until the
1:      * slave is connected to a master database.
1:      */
1:     private class SlaveThread extends Thread {
1: 
0:         private final TestConfiguration config;
1:         private volatile Throwable error;
1: 
0:         SlaveThread(TestConfiguration config) {
0:             this.config = config;
1:         }
1: 
1:         public void run() {
1:             try {
1:                 run_();
1:             } catch (Throwable t) {
1:                 error = t;
1:             }
1:         }
1: 
1:         private void run_() throws Exception {
1:             println("Slave thread started.");
1: 
0:             Properties p = new Properties();
0:             p.setProperty("startSlave", "true");
0:             p.setProperty("slaveHost", config.getHostName());
0:             p.setProperty("slavePort", String.valueOf(config.getPort()));
1: 
1:             try {
0:                 config.openPhysicalConnection(config.getDatabasePath(SLAVE_DB),
0:                         config.getUserName(), config.getUserPassword(), p);
1:                 fail("startSlave should throw exception");
1:             } catch (SQLException sqle) {
1:                 assertSQLState("XRE08", sqle);
1:             }
1:         }
1: 
1:         void checkError() {
1:             if (error != null) {
1:                 fail("Slave thread failed", error);
1:             }
1:         }
1:     }
1: }
============================================================================