1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
19:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:f68f62f: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.io.*;
1:67614ad: import java.sql.Timestamp;
1:67614ad: 
1:67614ad: public class BackgroundStreamDrainer implements Runnable
1:67614ad: {
1:67614ad: 
1:67614ad: 	protected ByteArrayOutputStream data;
1:67614ad: 	protected InputStream in;
1:67614ad: 	protected boolean finished;
1:67614ad: 	protected IOException ioe;
1:67614ad: 	protected long startTime;
1:67614ad: 	protected Thread myThread;
1:67614ad: 	protected int timeout;
1:67614ad: 
1:67614ad: 	public BackgroundStreamDrainer(InputStream in, String timemin)
1:67614ad: 	{
1:67614ad: 		data = new ByteArrayOutputStream();
1:67614ad: 		this.in = in;
1:67614ad:         this.startTime = System.currentTimeMillis();;
1:67614ad:         if (timemin != null)
1:67614ad:         {
1:39b3237:             Integer i = Integer.valueOf(timemin);
1:67614ad:             timeout = i.intValue();
1:67614ad:         }
1:67614ad:         else
1:67614ad:             timeout = 0;
1:67614ad:         //System.out.println("timeout set to: " + timeout);
1:67614ad: 
1:67614ad: 		myThread = new Thread(this, getClass().getName());
1:67614ad: 		myThread.setPriority(Thread.MIN_PRIORITY);
1:67614ad: 		myThread.start();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public void run()
1:67614ad: 	{
1:67614ad:         if ( in == null )
1:67614ad:         {
1:67614ad:             System.out.println("The inputstream is null");
1:67614ad:             System.exit(1);
1:67614ad:         }
1:67614ad: 
1:67614ad: 		try
1:67614ad: 		{
1:67614ad: 			byte[] ca = new byte[1024];
1:67614ad: 			int valid;
1:67614ad: 			while ((valid = in.read(ca, 0, ca.length)) != -1)
1:67614ad: 			{
1:67614ad:                 if (timeout > 0)
1:67614ad: 			    {
1:67614ad: 					long millis = System.currentTimeMillis();
1:67614ad: 
1:67614ad: 					long diff = millis - startTime;
1:67614ad: 
1:67614ad: 					int mins = (int) (diff / (1000 * 60));
1:67614ad: 
1:67614ad: 					if (mins > timeout) {
1:67614ad: 
1:67614ad: 						System.out.println("kill stderr thread...");
1:67614ad: 						synchronized (this)
1:67614ad: 						{
1:67614ad: 							finished = true;
1:67614ad: 							break;
1:67614ad: 						}
1:67614ad: 					}
1:67614ad: 			    }
1:67614ad: 			    //System.out.println("Bytes read to write data: " + valid);
1:67614ad: 				data.write(ca, 0, valid);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		catch (IOException ioe)
1:67614ad: 		{
1:67614ad: 			this.ioe = ioe;
1:67614ad: 			System.out.println(ioe.getMessage());
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		synchronized (this)
1:67614ad: 		{
1:67614ad: 			finished = true;
1:67614ad: 			notifyAll();
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public InputStream getData() throws IOException
1:67614ad: 	{
1:67614ad: 	    // FIXME: On Netware, the last read throws an IOException,
1:67614ad: 	    // which prevents the test output from getting written
1:67614ad: 		//if (ioe != null)
1:67614ad: 		//{
1:67614ad: 			//throw ioe;
1:67614ad:         //}
1:67614ad: 
1:67614ad: 		synchronized (this)
1:67614ad: 		{
1:67614ad: 			try
1:67614ad: 			{
1:67614ad: 				while (!finished)
1:67614ad: 				{
1:67614ad: 					wait();
1:67614ad: 				}
1:67614ad: 			} catch (InterruptedException ie)
1:67614ad: 			{
1:67614ad: 			    System.out.println("IOException: " + ie);
1:67614ad: 				throw new IOException(ie.toString());
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 		return new ByteArrayInputStream(data.toByteArray());
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             Integer i = Integer.valueOf(timemin);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.*;
1: import java.sql.Timestamp;
1: 
1: public class BackgroundStreamDrainer implements Runnable
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	protected ByteArrayOutputStream data;
1: 	protected InputStream in;
1: 	protected boolean finished;
1: 	protected IOException ioe;
1: 	protected long startTime;
1: 	protected Thread myThread;
1: 	protected int timeout;
1: 
1: 	public BackgroundStreamDrainer(InputStream in, String timemin)
1: 	{
1: 		data = new ByteArrayOutputStream();
1: 		this.in = in;
1:         this.startTime = System.currentTimeMillis();;
1:         if (timemin != null)
1:         {
0:             Integer i = new Integer(timemin);
1:             timeout = i.intValue();
1:         }
1:         else
1:             timeout = 0;
1:         //System.out.println("timeout set to: " + timeout);
1: 
1: 		myThread = new Thread(this, getClass().getName());
1: 		myThread.setPriority(Thread.MIN_PRIORITY);
1: 		myThread.start();
1: 	}
1: 
1: 	public void run()
1: 	{
1:         if ( in == null )
1:         {
1:             System.out.println("The inputstream is null");
1:             System.exit(1);
1:         }
1: 
1: 		try
1: 		{
1: 			byte[] ca = new byte[1024];
1: 			int valid;
1: 			while ((valid = in.read(ca, 0, ca.length)) != -1)
1: 			{
1:                 if (timeout > 0)
1: 			    {
1: 					long millis = System.currentTimeMillis();
1: 
1: 					long diff = millis - startTime;
1: 
1: 					int mins = (int) (diff / (1000 * 60));
1: 
1: 					if (mins > timeout) {
1: 
1: 						System.out.println("kill stderr thread...");
1: 						synchronized (this)
1: 						{
1: 							finished = true;
1: 							break;
1: 						}
1: 					}
1: 			    }
1: 			    //System.out.println("Bytes read to write data: " + valid);
1: 				data.write(ca, 0, valid);
1: 			}
1: 		}
1: 		catch (IOException ioe)
1: 		{
1: 			this.ioe = ioe;
1: 			System.out.println(ioe.getMessage());
1: 		}
1: 
1: 		synchronized (this)
1: 		{
1: 			finished = true;
1: 			notifyAll();
1: 		}
1: 	}
1: 
1: 	public InputStream getData() throws IOException
1: 	{
1: 	    // FIXME: On Netware, the last read throws an IOException,
1: 	    // which prevents the test output from getting written
1: 		//if (ioe != null)
1: 		//{
1: 			//throw ioe;
1:         //}
1: 
1: 		synchronized (this)
1: 		{
1: 			try
1: 			{
1: 				while (!finished)
1: 				{
1: 					wait();
1: 				}
1: 			} catch (InterruptedException ie)
1: 			{
1: 			    System.out.println("IOException: " + ie);
1: 				throw new IOException(ie.toString());
1: 			}
1: 		}
1: 		return new ByteArrayInputStream(data.toByteArray());
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.io.*;
0: import java.sql.Timestamp;
1: 
0: public class BackgroundStreamDrainer implements Runnable
0: {
1: 
0: 	protected ByteArrayOutputStream data;
0: 	protected InputStream in;
0: 	protected boolean finished;
0: 	protected IOException ioe;
0: 	protected long startTime;
0: 	protected Thread myThread;
0: 	protected int timeout;
1: 
0: 	public BackgroundStreamDrainer(InputStream in, String timemin)
0: 	{
0: 		data = new ByteArrayOutputStream();
0: 		this.in = in;
0:         this.startTime = System.currentTimeMillis();;
0:         if (timemin != null)
0:         {
0:             Integer i = new Integer(timemin);
0:             timeout = i.intValue();
0:         }
0:         else
0:             timeout = 0;
0:         //System.out.println("timeout set to: " + timeout);
1: 
0: 		myThread = new Thread(this, getClass().getName());
0: 		myThread.setPriority(Thread.MIN_PRIORITY);
0: 		myThread.start();
0: 	}
1: 
0: 	public void run()
0: 	{
0:         if ( in == null )
0:         {
0:             System.out.println("The inputstream is null");
0:             System.exit(1);
0:         }
1: 
0: 		try
0: 		{
0: 			byte[] ca = new byte[1024];
0: 			int valid;
0: 			while ((valid = in.read(ca, 0, ca.length)) != -1)
0: 			{
0:                 if (timeout > 0)
0: 			    {
0: 					long millis = System.currentTimeMillis();
1: 
0: 					long diff = millis - startTime;
1: 
0: 					int mins = (int) (diff / (1000 * 60));
1: 
0: 					if (mins > timeout) {
1: 
0: 						System.out.println("kill stderr thread...");
0: 						synchronized (this)
0: 						{
0: 							finished = true;
0: 							break;
0: 						}
0: 					}
0: 			    }
0: 			    //System.out.println("Bytes read to write data: " + valid);
0: 				data.write(ca, 0, valid);
0: 			}
0: 		}
0: 		catch (IOException ioe)
0: 		{
0: 			this.ioe = ioe;
0: 			System.out.println(ioe.getMessage());
0: 		}
1: 
0: 		synchronized (this)
0: 		{
0: 			finished = true;
0: 			notifyAll();
0: 		}
0: 	}
1: 
0: 	public InputStream getData() throws IOException
0: 	{
0: 	    // FIXME: On Netware, the last read throws an IOException,
0: 	    // which prevents the test output from getting written
0: 		//if (ioe != null)
0: 		//{
0: 			//throw ioe;
0:         //}
1: 
0: 		synchronized (this)
0: 		{
0: 			try
0: 			{
0: 				while (!finished)
0: 				{
0: 					wait();
0: 				}
0: 			} catch (InterruptedException ie)
0: 			{
0: 			    System.out.println("IOException: " + ie);
0: 				throw new IOException(ie.toString());
0: 			}
0: 		}
0: 		return new ByteArrayInputStream(data.toByteArray());
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer
0: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================