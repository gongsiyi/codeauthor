1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.property.PropertyValidation
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.property;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Attribute;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:eac0369: import org.apache.derby.iapi.services.property.PropertySetCallback;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: import java.io.Serializable;
1:eac0369: import java.util.Dictionary;
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Vector;
1:eac0369: 
1:eac0369: public class PropertyValidation implements PropertyFactory
1:eac0369: {
1:996ca72: 	private Vector<PropertySetCallback>  notifyOnSet;
1:eac0369: 
1:eac0369:     /* Constructors for This class: */
1:eac0369: 	public PropertyValidation()
1:eac0369: 	{
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Serializable doValidateApplyAndMap(TransactionController tc,
1:eac0369: 											 String key, Serializable value,
1:eac0369: 											 Dictionary d, boolean dbOnlyProperty)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		Serializable mappedValue = null;
1:eac0369:  		if (notifyOnSet != null) {
1:eac0369: 			synchronized (this) {
1:eac0369: 
1:eac0369: 				for (int i = 0; i < notifyOnSet.size() ; i++) {
1:996ca72: 					PropertySetCallback psc = notifyOnSet.get(i);
1:eac0369: 					if (!psc.validate(key, value, d))
1:eac0369: 						continue;
1:eac0369: 
1:006b542: 					if (mappedValue == null)
1:006b542:  						mappedValue = psc.map(key, value, d);
1:006b542: 
1:eac0369: 					// if this property should not be used then
1:eac0369: 					// don't call apply. This depends on where
1:eac0369: 					// the old value comes from
1:eac0369: 					// SET_IN_JVM - property will not be used
1:eac0369: 					// SET_IN_DATABASE - propery will be used
1:eac0369: 					// SET_IN_APPLICATION - will become SET_IN_DATABASE
1:eac0369: 					// NOT_SET - will become SET_IN_DATABASE
1:eac0369: 
1:eac0369: 					if (!dbOnlyProperty && key.startsWith("derby.")) {
1:eac0369: 						if (PropertyUtil.whereSet(key, d) == PropertyUtil.SET_IN_JVM)
1:eac0369: 							continue;
1:eac0369: 					}
1:eac0369: 
1:eac0369: 					Serviceable s;
1:eac0369: 					if ((s = psc.apply(key,value,d)) != null)
1:eac0369: 						((TransactionManager) tc).addPostCommitWork(s);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return mappedValue;
1:eac0369: 	}
2:eac0369: 	/**
1:eac0369: 	  Call the property set callbacks to map a proposed property value
1:eac0369: 	  to a value to save.
1:eac0369: 	  <P>
1:eac0369: 	  The caller must run this in a block synchronized on this
1:eac0369: 	  to serialize validations with changes to the set of
1:eac0369: 	  property callbacks
1:eac0369: 	  */
1:eac0369: 	public Serializable doMap(String key,
1:eac0369: 							 Serializable value,
1:eac0369: 							 Dictionary set)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		Serializable mappedValue = null;
1:eac0369:  		if (notifyOnSet != null) {
1:eac0369: 			for (int i = 0; i < notifyOnSet.size() && mappedValue == null; i++) {
1:996ca72: 				PropertySetCallback psc = notifyOnSet.get(i);
1:eac0369: 				mappedValue = psc.map(key, value, set);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
2:eac0369: 		if (mappedValue == null)
1:eac0369: 			return value;
1:eac0369: 		else
1:eac0369: 			return mappedValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void validateSingleProperty(String key,
1:eac0369: 						  Serializable value,
1:eac0369: 						  Dictionary set)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		// RESOLVE: log device cannot be changed on the fly right now
1:eac0369: 		if (key.equals(Attribute.LOG_DEVICE))
1:eac0369:         {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.RAWSTORE_CANNOT_CHANGE_LOGDEVICE);
1:eac0369:         }
1:eac0369: 
1:eac0369:  		if (notifyOnSet != null) {
1:eac0369: 			for (int i = 0; i < notifyOnSet.size(); i++) {
1:996ca72: 				PropertySetCallback psc = notifyOnSet.get(i);
1:eac0369: 				psc.validate(key, value, set);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public synchronized void addPropertySetNotification(PropertySetCallback who){
1:eac0369: 
1:eac0369: 		if (notifyOnSet == null)
1:996ca72: 			notifyOnSet = new Vector<PropertySetCallback>(1,1);
1:a32eb9f: 		notifyOnSet.add(who);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public synchronized void verifyPropertySet(Properties p,Properties ignore)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		for (Enumeration e = p.propertyNames(); e.hasMoreElements();)
1:eac0369: 		{
1:eac0369: 			String pn = (String)e.nextElement();
1:eac0369: 			//
1:eac0369: 			//Ignore the ones we are told to ignore.
1:eac0369: 			if (ignore.getProperty(pn) != null) continue;
1:eac0369: 			Serializable pv = p.getProperty(pn);
1:eac0369: 			validateSingleProperty(pn,pv,p);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: 	private Vector<PropertySetCallback>  notifyOnSet;
/////////////////////////////////////////////////////////////////////////
1: 					PropertySetCallback psc = notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
1: 				PropertySetCallback psc = notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
1: 				PropertySetCallback psc = notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
1: 			notifyOnSet = new Vector<PropertySetCallback>(1,1);
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:006b542
/////////////////////////////////////////////////////////////////////////
1: 					if (mappedValue == null)
1:  						mappedValue = psc.map(key, value, d);
1: 
/////////////////////////////////////////////////////////////////////////
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
0: 					PropertySetCallback psc = (PropertySetCallback) notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.get(i);
/////////////////////////////////////////////////////////////////////////
1: 		notifyOnSet.add(who);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.property.PropertyValidation
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.property;
1: 
1: import org.apache.derby.iapi.reference.Attribute;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
1: import org.apache.derby.iapi.services.property.PropertySetCallback;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.util.Vector;
1: 
1: public class PropertyValidation implements PropertyFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private Vector  notifyOnSet;
1: 
1:     /* Constructors for This class: */
1: 	public PropertyValidation()
1: 	{
1: 
1: 	}
1: 
1: 	public Serializable doValidateApplyAndMap(TransactionController tc,
1: 											 String key, Serializable value,
1: 											 Dictionary d, boolean dbOnlyProperty)
1: 		 throws StandardException
1: 	{
1: 		Serializable mappedValue = null;
1:  		if (notifyOnSet != null) {
1: 			synchronized (this) {
1: 
1: 				for (int i = 0; i < notifyOnSet.size() ; i++) {
0: 					PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
1: 					if (!psc.validate(key, value, d))
1: 						continue;
1: 
1: 					// if this property should not be used then
1: 					// don't call apply. This depends on where
1: 					// the old value comes from
1: 					// SET_IN_JVM - property will not be used
1: 					// SET_IN_DATABASE - propery will be used
1: 					// SET_IN_APPLICATION - will become SET_IN_DATABASE
1: 					// NOT_SET - will become SET_IN_DATABASE
1: 
1: 					if (!dbOnlyProperty && key.startsWith("derby.")) {
1: 						if (PropertyUtil.whereSet(key, d) == PropertyUtil.SET_IN_JVM)
1: 							continue;
1: 					}
1: 
1: 					Serviceable s;
1: 					if ((s = psc.apply(key,value,d)) != null)
1: 						((TransactionManager) tc).addPostCommitWork(s);
1: 					if (mappedValue == null)
0:  						mappedValue = psc.map(key, value, d);
1: 				}
1: 			}
1: 		}
1: 		return mappedValue;
1: 	}
1: 	/**
1: 	  Call the property set callbacks to map a proposed property value
1: 	  to a value to save.
1: 	  <P>
1: 	  The caller must run this in a block synchronized on this
1: 	  to serialize validations with changes to the set of
1: 	  property callbacks
1: 	  */
1: 	public Serializable doMap(String key,
1: 							 Serializable value,
1: 							 Dictionary set)
1: 		 throws StandardException
1: 	{
1: 		Serializable mappedValue = null;
1:  		if (notifyOnSet != null) {
1: 			for (int i = 0; i < notifyOnSet.size() && mappedValue == null; i++) {
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
1: 				mappedValue = psc.map(key, value, set);
1: 			}
1: 		}
1: 
1: 		if (mappedValue == null)
1: 			return value;
1: 		else
1: 			return mappedValue;
1: 	}
1: 
1: 	public void validateSingleProperty(String key,
1: 						  Serializable value,
1: 						  Dictionary set)
1: 		 throws StandardException
1: 	{
1: 		// RESOLVE: log device cannot be changed on the fly right now
1: 		if (key.equals(Attribute.LOG_DEVICE))
1:         {
1: 			throw StandardException.newException(
1:                     SQLState.RAWSTORE_CANNOT_CHANGE_LOGDEVICE);
1:         }
1: 
1:  		if (notifyOnSet != null) {
1: 			for (int i = 0; i < notifyOnSet.size(); i++) {
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
1: 				psc.validate(key, value, set);
1: 			}
1: 		}
1: 	}
1: 
1: 	public synchronized void addPropertySetNotification(PropertySetCallback who){
1: 
1: 		if (notifyOnSet == null)
0: 			notifyOnSet = new Vector(1,1);
0: 		notifyOnSet.addElement(who);
1: 
1: 	}
1: 
1: 	public synchronized void verifyPropertySet(Properties p,Properties ignore)
1: 		 throws StandardException
1: 	{
1: 		for (Enumeration e = p.propertyNames(); e.hasMoreElements();)
1: 		{
1: 			String pn = (String)e.nextElement();
1: 			//
1: 			//Ignore the ones we are told to ignore.
1: 			if (ignore.getProperty(pn) != null) continue;
1: 			Serializable pv = p.getProperty(pn);
1: 			validateSingleProperty(pn,pv,p);
1: 		}
1: 	}
1: }
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.property;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.property.PropertySetCallback;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import java.io.Serializable;
0: import java.util.Dictionary;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
0: 
0: public class PropertyValidation implements PropertyFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private Vector  notifyOnSet;
0: 
0:     /* Constructors for This class: */
0: 	public PropertyValidation()
0: 	{
0: 
0: 	}
0: 
0: 	public Serializable doValidateApplyAndMap(TransactionController tc,
0: 											 String key, Serializable value,
0: 											 Dictionary d, boolean dbOnlyProperty)
0: 		 throws StandardException
0: 	{
0: 		Serializable mappedValue = null;
0:  		if (notifyOnSet != null) {
0: 			synchronized (this) {
0: 
0: 				for (int i = 0; i < notifyOnSet.size() ; i++) {
0: 					PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
0: 					if (!psc.validate(key, value, d))
0: 						continue;
0: 
0: 					// if this property should not be used then
0: 					// don't call apply. This depends on where
0: 					// the old value comes from
0: 					// SET_IN_JVM - property will not be used
0: 					// SET_IN_DATABASE - propery will be used
0: 					// SET_IN_APPLICATION - will become SET_IN_DATABASE
0: 					// NOT_SET - will become SET_IN_DATABASE
0: 
0: 					if (!dbOnlyProperty && key.startsWith("derby.")) {
0: 						if (PropertyUtil.whereSet(key, d) == PropertyUtil.SET_IN_JVM)
0: 							continue;
0: 					}
0: 
0: 					Serviceable s;
0: 					if ((s = psc.apply(key,value,d)) != null)
0: 						((TransactionManager) tc).addPostCommitWork(s);
0: 					if (mappedValue == null)
0:  						mappedValue = psc.map(key, value, d);
0: 				}
0: 			}
0: 		}
0: 		return mappedValue;
0: 	}
0: 	/**
0: 	  Call the property set callbacks to map a proposed property value
0: 	  to a value to save.
0: 	  <P>
0: 	  The caller must run this in a block synchronized on this
0: 	  to serialize validations with changes to the set of
0: 	  property callbacks
0: 	  */
0: 	public Serializable doMap(String key,
0: 							 Serializable value,
0: 							 Dictionary set)
0: 		 throws StandardException
0: 	{
0: 		Serializable mappedValue = null;
0:  		if (notifyOnSet != null) {
0: 			for (int i = 0; i < notifyOnSet.size() && mappedValue == null; i++) {
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
0: 				mappedValue = psc.map(key, value, set);
0: 			}
0: 		}
0: 
0: 		if (mappedValue == null)
0: 			return value;
0: 		else
0: 			return mappedValue;
0: 	}
0: 
0: 	public void validateSingleProperty(String key,
0: 						  Serializable value,
0: 						  Dictionary set)
0: 		 throws StandardException
0: 	{
0: 		// RESOLVE: log device cannot be changed on the fly right now
0: 		if (key.equals(Attribute.LOG_DEVICE))
0:         {
0: 			throw StandardException.newException(
0:                     SQLState.RAWSTORE_CANNOT_CHANGE_LOGDEVICE);
0:         }
0: 
0:  		if (notifyOnSet != null) {
0: 			for (int i = 0; i < notifyOnSet.size(); i++) {
0: 				PropertySetCallback psc = (PropertySetCallback) notifyOnSet.elementAt(i);
0: 				psc.validate(key, value, set);
0: 			}
0: 		}
0: 	}
0: 
0: 	public synchronized void addPropertySetNotification(PropertySetCallback who){
0: 
0: 		if (notifyOnSet == null)
0: 			notifyOnSet = new Vector(1,1);
0: 		notifyOnSet.addElement(who);
0: 
0: 	}
0: 
0: 	public synchronized void verifyPropertySet(Properties p,Properties ignore)
0: 		 throws StandardException
0: 	{
0: 		for (Enumeration e = p.propertyNames(); e.hasMoreElements();)
0: 		{
0: 			String pn = (String)e.nextElement();
0: 			//
0: 			//Ignore the ones we are told to ignore.
0: 			if (ignore.getProperty(pn) != null) continue;
0: 			Serializable pv = p.getProperty(pn);
0: 			validateSingleProperty(pn,pv,p);
0: 		}
0: 	}
0: }
0: 
0: 
0: 
============================================================================