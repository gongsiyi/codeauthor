1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLRef
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.ClassSize;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: 
1:eac0369: public class SQLRef extends DataType implements RefDataValue
5:eac0369: {
1:eac0369: 	protected RowLocation	value;
1:eac0369: 
1:eac0369:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLRef.class);
1:eac0369: 
1:eac0369:     public int estimateMemoryUsage()
1:eac0369:     {
1:eac0369:         int sz = BASE_MEMORY_USAGE;
1:eac0369:         if( null != value)
1:eac0369:             sz += value.estimateMemoryUsage();
1:eac0369:         return sz;
1:eac0369:     } // end of estimateMemoryUsage
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** DataValueDescriptor interface
1:eac0369: 	** (mostly implemented in DataType)
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public String getString()
1:eac0369: 	{
1:eac0369: 		if (value != null)
1:eac0369: 		{
1:eac0369: 			return value.toString();
5:eac0369: 		}
2:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:efa1efa: 
1:eac0369: 	public Object getObject()
1:eac0369: 	{
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1:eac0369: 
1:806114c: 		if (theValue.isNull())
1:806114c: 			setToNull();
1:806114c: 		else
1:806114c: 			value = (RowLocation) theValue.getObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int getLength()
1:eac0369: 	{
1:eac0369: 		return TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* this is for DataType's error generator */
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:eac0369: 		return TypeId.REF_NAME;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:efa1efa: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.SQL_REF_ID;
1:eac0369: 	}  
1:eac0369: 
1:eac0369: 	public boolean isNull()
1:eac0369: 	{
1:eac0369: 		return (value == null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(value != null, "writeExternal() is not supposed to be called for null values.");
1:eac0369: 
1:eac0369: 		out.writeObject(value);
1:eac0369: 	}
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 	 * @see java.io.Externalizable#readExternal
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException	Thrown on error reading the object
1:eac0369: 	 * @exception ClassNotFoundException	Thrown if the class of the object
1:eac0369: 	 *										read from the stream can't be found
1:eac0369: 	 *										(not likely, since it's supposed to
1:eac0369: 	 *										be SQLRef).
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:eac0369: 	{
2:eac0369: 		value = (RowLocation) in.readObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.io.Storable#restoreToNull
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void restoreToNull()
1:eac0369: 	{
1:eac0369: 		value = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Orderable interface
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** @exception StandardException	Thrown on error */
1:eac0369: 	public boolean compare(int op,
1:eac0369: 						   DataValueDescriptor other,
1:eac0369: 						   boolean orderedNulls,
1:eac0369: 						   boolean unknownRV)
1:92268ac: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		return value.compare(op,
1:eac0369: 							((SQLRef) other).value,
1:eac0369: 							orderedNulls,
1:eac0369: 							unknownRV);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @exception StandardException	Thrown on error */
1:eac0369: 	public int compare(DataValueDescriptor other) throws StandardException
1:eac0369: 	{
1:eac0369: 		return value.compare(((SQLRef) other).value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:854dd10:     /** @see DataValueDescriptor#cloneValue */
1:854dd10:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369: 	{
1:eac0369: 		/* In order to avoid a throws clause nightmare, we only call
1:eac0369: 		 * the constructors which do not have a throws clause.
1:eac0369: 		 *
1:eac0369: 		 * Clone the underlying RowLocation, if possible, so that we
1:eac0369: 		 * don't clobber the value in the clone.
1:eac0369: 		 */
1:eac0369: 		if (value == null)
1:eac0369: 			return new SQLRef();
1:eac0369: 		else
1:854dd10:            return new SQLRef((RowLocation) value.cloneValue(false));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLRef();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#setValueFromResultSet 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1:eac0369: 									  boolean isNullable)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 				"setValueFromResultSet() is not supposed to be called for SQLRef.");
1:eac0369: 	}
1:eac0369: 	public void setInto(PreparedStatement ps, int position)  {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 				"setValueInto(PreparedStatement) is not supposed to be called for SQLRef.");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Class interface
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructors
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public SQLRef()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLRef(RowLocation rowLocation)
1:eac0369: 	{
1:eac0369: 		value = rowLocation;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setValue(RowLocation rowLocation)
1:eac0369: 	{
1:eac0369: 		value = rowLocation;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** String display of value
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (value == null)
1:eac0369: 			return "NULL";
1:eac0369: 		else
1:eac0369: 			return value.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:efa1efa:      * Adding this overload makes it possible to use SQLRefs as keys in HashMaps.
1:efa1efa:      */
1:efa1efa:     public  int hashCode()
1:efa1efa:     {
1:efa1efa:         if ( value == null ) { return 0; }
1:efa1efa:         else { return value.hashCode(); }
1:efa1efa:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:efa1efa
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Adding this overload makes it possible to use SQLRefs as keys in HashMaps.
1:      */
1:     public  int hashCode()
1:     {
1:         if ( value == null ) { return 0; }
1:         else { return value.hashCode(); }
1:     }
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4ecfb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:     /** @see DataValueDescriptor#cloneValue */
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
/////////////////////////////////////////////////////////////////////////
1:            return new SQLRef((RowLocation) value.cloneValue(false));
commit:a8bc217
/////////////////////////////////////////////////////////////////////////
0:            return new SQLRef((RowLocation) value.getClone());
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:806114c
/////////////////////////////////////////////////////////////////////////
1: 		if (theValue.isNull())
1: 			setToNull();
1: 		else
1: 			value = (RowLocation) theValue.getObject();
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLRef
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.types.Orderable;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataType;
0: import org.apache.derby.iapi.types.RefDataValue;
1: import org.apache.derby.iapi.services.cache.ClassSize;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.sql.ResultSet;
1: import java.sql.PreparedStatement;
1: 
1: public class SQLRef extends DataType implements RefDataValue
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	protected RowLocation	value;
1: 
1:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLRef.class);
1: 
1:     public int estimateMemoryUsage()
1:     {
1:         int sz = BASE_MEMORY_USAGE;
1:         if( null != value)
1:             sz += value.estimateMemoryUsage();
1:         return sz;
1:     } // end of estimateMemoryUsage
1: 
1: 	/*
1: 	** DataValueDescriptor interface
1: 	** (mostly implemented in DataType)
1: 	*/
1: 
1: 	public String getString()
1: 	{
1: 		if (value != null)
1: 		{
1: 			return value.toString();
1: 		}
1: 		else
1: 		{
1: 			return null;
1: 		}
1: 	}
1: 
1: 	public Object getObject()
1: 	{
1: 		return value;
1: 	}
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#setValue
1: 	 */
0: 	public void setValue(Object theValue)
0: 		throws StandardException
1: 	{
0: 		if ((theValue instanceof RowLocation) ||
0: 			(theValue == null))
1: 		{
0: 			this.setValue((RowLocation)theValue);
1: 		}
1: 		else
1: 		{
0: 			throwLangSetMismatch(theValue);
1: 		}
1: 	}
1: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1: 
0: 		setValue(theValue.getObject());
1: 	}
1: 
1: 	public int getLength()
1: 	{
1: 		return TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN;
1: 	}
1: 
1: 	/* this is for DataType's error generator */
1: 	public String getTypeName()
1: 	{
1: 		return TypeId.REF_NAME;
1: 	}
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.SQL_REF_ID;
1: 	}  
1: 
1: 	public boolean isNull()
1: 	{
1: 		return (value == null);
1: 	}
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException {
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(value != null, "writeExternal() is not supposed to be called for null values.");
1: 
1: 		out.writeObject(value);
1: 	}
1: 
1: 	/**
1: 	 * @see java.io.Externalizable#readExternal
1: 	 *
1: 	 * @exception IOException	Thrown on error reading the object
1: 	 * @exception ClassNotFoundException	Thrown if the class of the object
1: 	 *										read from the stream can't be found
1: 	 *										(not likely, since it's supposed to
1: 	 *										be SQLRef).
1: 	 */
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		value = (RowLocation) in.readObject();
1: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException, ClassNotFoundException
1: 	{
1: 		value = (RowLocation) in.readObject();
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.io.Storable#restoreToNull
1: 	 */
1: 
1: 	public void restoreToNull()
1: 	{
1: 		value = null;
1: 	}
1: 
1: 	/*
1: 	** Orderable interface
1: 	*/
1: 
1: 	/** @exception StandardException	Thrown on error */
1: 	public boolean compare(int op,
1: 						   DataValueDescriptor other,
1: 						   boolean orderedNulls,
1: 						   boolean unknownRV)
0: 					throws StandardException
1: 	{
1: 		return value.compare(op,
1: 							((SQLRef) other).value,
1: 							orderedNulls,
1: 							unknownRV);
1: 	}
1: 
1: 	/** @exception StandardException	Thrown on error */
1: 	public int compare(DataValueDescriptor other) throws StandardException
1: 	{
1: 		return value.compare(((SQLRef) other).value);
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		/* In order to avoid a throws clause nightmare, we only call
1: 		 * the constructors which do not have a throws clause.
1: 		 *
1: 		 * Clone the underlying RowLocation, if possible, so that we
1: 		 * don't clobber the value in the clone.
1: 		 */
1: 		if (value == null)
1: 			return new SQLRef();
1: 		else
0: 			return new SQLRef((RowLocation) value.cloneObject());
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLRef();
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#setValueFromResultSet 
1: 	 *
1: 	 */
1: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1: 									  boolean isNullable)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT(
1: 				"setValueFromResultSet() is not supposed to be called for SQLRef.");
1: 	}
1: 	public void setInto(PreparedStatement ps, int position)  {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT(
1: 				"setValueInto(PreparedStatement) is not supposed to be called for SQLRef.");
1: 	}
1: 
1: 	/*
1: 	** Class interface
1: 	*/
1: 
1: 	/*
1: 	** Constructors
1: 	*/
1: 
1: 	public SQLRef()
1: 	{
1: 	}
1: 
1: 	public SQLRef(RowLocation rowLocation)
1: 	{
1: 		value = rowLocation;
1: 	}
1: 
1: 	public void setValue(RowLocation rowLocation)
1: 	{
1: 		value = rowLocation;
1: 	}
1: 
1: 	/*
1: 	** String display of value
1: 	*/
1: 
1: 	public String toString()
1: 	{
1: 		if (value == null)
1: 			return "NULL";
1: 		else
1: 			return value.toString();
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataType;
0: import org.apache.derby.iapi.types.RefDataValue;
0: import org.apache.derby.iapi.services.cache.ClassSize;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.sql.ResultSet;
0: import java.sql.PreparedStatement;
0: 
0: public class SQLRef extends DataType implements RefDataValue
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected RowLocation	value;
0: 
0:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLRef.class);
0: 
0:     public int estimateMemoryUsage()
0:     {
0:         int sz = BASE_MEMORY_USAGE;
0:         if( null != value)
0:             sz += value.estimateMemoryUsage();
0:         return sz;
0:     } // end of estimateMemoryUsage
0: 
0: 	/*
0: 	** DataValueDescriptor interface
0: 	** (mostly implemented in DataType)
0: 	*/
0: 
0: 	public String getString()
0: 	{
0: 		if (value != null)
0: 		{
0: 			return value.toString();
0: 		}
0: 		else
0: 		{
0: 			return null;
0: 		}
0: 	}
0: 
0: 	public Object getObject()
0: 	{
0: 		return value;
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#setValue
0: 	 */
0: 	public void setValue(Object theValue)
0: 		throws StandardException
0: 	{
0: 		if ((theValue instanceof RowLocation) ||
0: 			(theValue == null))
0: 		{
0: 			this.setValue((RowLocation)theValue);
0: 		}
0: 		else
0: 		{
0: 			throwLangSetMismatch(theValue);
0: 		}
0: 	}
0: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
0: 
0: 		setValue(theValue.getObject());
0: 	}
0: 
0: 	public int getLength()
0: 	{
0: 		return TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN;
0: 	}
0: 
0: 	/* this is for DataType's error generator */
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.REF_NAME;
0: 	}
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.SQL_REF_ID;
0: 	}  
0: 
0: 	public boolean isNull()
0: 	{
0: 		return (value == null);
0: 	}
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException {
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(value != null, "writeExternal() is not supposed to be called for null values.");
0: 
0: 		out.writeObject(value);
0: 	}
0: 
0: 	/**
0: 	 * @see java.io.Externalizable#readExternal
0: 	 *
0: 	 * @exception IOException	Thrown on error reading the object
0: 	 * @exception ClassNotFoundException	Thrown if the class of the object
0: 	 *										read from the stream can't be found
0: 	 *										(not likely, since it's supposed to
0: 	 *										be SQLRef).
0: 	 */
0: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
0: 	{
0: 		value = (RowLocation) in.readObject();
0: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException, ClassNotFoundException
0: 	{
0: 		value = (RowLocation) in.readObject();
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.io.Storable#restoreToNull
0: 	 */
0: 
0: 	public void restoreToNull()
0: 	{
0: 		value = null;
0: 	}
0: 
0: 	/*
0: 	** Orderable interface
0: 	*/
0: 
0: 	/** @exception StandardException	Thrown on error */
0: 	public boolean compare(int op,
0: 						   DataValueDescriptor other,
0: 						   boolean orderedNulls,
0: 						   boolean unknownRV)
0: 					throws StandardException
0: 	{
0: 		return value.compare(op,
0: 							((SQLRef) other).value,
0: 							orderedNulls,
0: 							unknownRV);
0: 	}
0: 
0: 	/** @exception StandardException	Thrown on error */
0: 	public int compare(DataValueDescriptor other) throws StandardException
0: 	{
0: 		return value.compare(((SQLRef) other).value);
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
0: 	{
0: 		/* In order to avoid a throws clause nightmare, we only call
0: 		 * the constructors which do not have a throws clause.
0: 		 *
0: 		 * Clone the underlying RowLocation, if possible, so that we
0: 		 * don't clobber the value in the clone.
0: 		 */
0: 		if (value == null)
0: 			return new SQLRef();
0: 		else
0: 			return new SQLRef((RowLocation) value.cloneObject());
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLRef();
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
0: 	 *
0: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT(
0: 				"setValueFromResultSet() is not supposed to be called for SQLRef.");
0: 	}
0: 	public void setInto(PreparedStatement ps, int position)  {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT(
0: 				"setValueInto(PreparedStatement) is not supposed to be called for SQLRef.");
0: 	}
0: 
0: 	/*
0: 	** Class interface
0: 	*/
0: 
0: 	/*
0: 	** Constructors
0: 	*/
0: 
0: 	public SQLRef()
0: 	{
0: 	}
0: 
0: 	public SQLRef(RowLocation rowLocation)
0: 	{
0: 		value = rowLocation;
0: 	}
0: 
0: 	public void setValue(RowLocation rowLocation)
0: 	{
0: 		value = rowLocation;
0: 	}
0: 
0: 	/*
0: 	** String display of value
0: 	*/
0: 
0: 	public String toString()
0: 	{
0: 		if (value == null)
0: 			return "NULL";
0: 		else
0: 			return value.toString();
0: 	}
0: }
============================================================================