1:1c5f9b3: /*
1:1c5f9b3:  *
1:1c5f9b3:  * Derby - Class org.apache.derbyTesting.functionTests.store.MadhareTest
1:1c5f9b3:  *
1:1c5f9b3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1c5f9b3:  * contributor license agreements.  See the NOTICE file distributed with
1:1c5f9b3:  * this work for additional information regarding copyright ownership.
1:1c5f9b3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1c5f9b3:  * (the "License"); you may not use this file except in compliance with
1:1c5f9b3:  * the License.  You may obtain a copy of the License at
1:1c5f9b3:  *
1:1c5f9b3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1c5f9b3:  *
1:1c5f9b3:  * Unless required by applicable law or agreed to in writing,
1:1c5f9b3:  * software distributed under the License is distributed on an
1:1c5f9b3:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:1c5f9b3:  * either express or implied. See the License for the specific
1:1c5f9b3:  * language governing permissions and limitations under the License.
1:1c5f9b3:  */
10:1c5f9b3: 
1:1c5f9b3:  package org.apache.derbyTesting.functionTests.tests.store;
1:1c5f9b3: 
1:1c5f9b3: import java.sql.PreparedStatement;
1:1c5f9b3: import java.sql.ResultSet;
1:1c5f9b3: import java.sql.SQLException;
1:1c5f9b3: import java.sql.Statement;
1:1c5f9b3: import junit.framework.Test;
1:1c5f9b3: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1c5f9b3: import org.apache.derbyTesting.junit.JDBC;
1:1c5f9b3: import org.apache.derbyTesting.junit.TestConfiguration;
1:1c5f9b3: 
1:1c5f9b3: /**
1:1c5f9b3:  * This test shows basic functionality of creating and executing 
1:1c5f9b3:  * simple SQL statements
1:1c5f9b3:  */
1:1c5f9b3: public final class MadhareTest extends BaseJDBCTestCase {
1:1c5f9b3: 
1:1c5f9b3:     /**
1:1c5f9b3:       * public constructor required for running test as a standalone JUnit
1:1c5f9b3:       */
1:1c5f9b3:       public MadhareTest( String name )
1:1c5f9b3:       {
1:1c5f9b3:         super(name);
3:1c5f9b3:       }
1:96e5e04: 
1:1c5f9b3:       public static Test suite()
1:1c5f9b3:       {
1:1c5f9b3:         //Add the test case into the test suite
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("MadhareTest Test");
1:1c5f9b3:         return TestConfiguration.defaultSuite(MadhareTest.class);
1:1c5f9b3:       }
1:96e5e04: 
1:1c5f9b3:       public void testBasicMadhare() throws SQLException
1:1c5f9b3:       {
1:1c5f9b3:         setAutoCommit(false);
1:96e5e04: 
1:1c5f9b3:         Statement st = createStatement();
1:96e5e04:         st.executeUpdate("create table t( i int )");
1:1c5f9b3: 
1:96e5e04:         st.executeUpdate("insert into t(i) values (1956)");
1:1c5f9b3: 
1:96e5e04:         ResultSet rs = st.executeQuery("select i from t");
1:1c5f9b3: 
1:96e5e04:         JDBC.assertFullResultSet(rs, new String[][] {{"1956"}});
1:96e5e04: 
1:96e5e04:         // multiple columns
1:96e5e04:         st.executeUpdate("create table s (i int, n int, t int, e int, g int, r int)");
1:1c5f9b3: 
1:1c5f9b3:         // reorder columns on insert
1:96e5e04:         st.executeUpdate("insert into s (i,r,t,n,g,e) values (1,6,3,2,5,4)");
1:1c5f9b3: 
1:1c5f9b3:         // do not list the columns
1:96e5e04:         st.executeUpdate("insert into s values (10,11,12,13,14,15)");
1:1c5f9b3: 
1:1c5f9b3:         // select some of the columns
1:96e5e04:         rs = st.executeQuery("select i from s");
1:96e5e04: 
1:96e5e04:         String[][] expectedResultSet = {{"1"},{"10"}};
1:96e5e04:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:96e5e04: 
1:1c5f9b3:         // select in random orders
1:96e5e04:         rs = st.executeQuery("select n,e,r,i,t,g from s");
1:96e5e04: 
1:96e5e04:         expectedResultSet = new String[][] {{"2","4","6","1","3","5"},
1:96e5e04:                                                {"11","13","15","10","12","14"}};
1:96e5e04:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:1c5f9b3: 
1:1c5f9b3:         // select with constants
1:96e5e04:         rs = st.executeQuery("select 20,n,22,e,24,r from s");
1:96e5e04: 
1:96e5e04:         expectedResultSet = new String[][] {{"20","2","22","4","24","6"}, 
1:96e5e04:                                                {"20","11","22","13","24","15"}};
1:96e5e04:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:1c5f9b3: 
1:1c5f9b3:         // prepare statement and execute support
1:96e5e04:         PreparedStatement pst = prepareStatement("select i,n,t,e,g,r from s");
1:1c5f9b3: 
1:96e5e04:         rs = pst.executeQuery();
1:96e5e04: 
1:96e5e04:         expectedResultSet = new String[][] {{"1","2","3","4","5","6"},
1:96e5e04:                                                {"10","11","12","13","14","15"}};
1:96e5e04:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:96e5e04: 
1:1c5f9b3:         //execute can be done multiple times
1:96e5e04:         rs = pst.executeQuery();
1:96e5e04:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:1c5f9b3:         pst.close();
1:1c5f9b3: 
1:96e5e04:         // with smallint
1:96e5e04:         st.executeUpdate("create table r(s smallint, i int)");
1:96e5e04: 
1:96e5e04:         st.executeUpdate("insert into r values (23,2)");
1:96e5e04: 
1:96e5e04:         rs = st.executeQuery("select s,i from r");
1:96e5e04: 
1:96e5e04:         JDBC.assertFullResultSet(rs, new String[][] {{"23","2"}});
1:96e5e04: 
1:1c5f9b3:         //cleanup
1:96e5e04:         st.executeUpdate("drop table r");
1:96e5e04:         st.executeUpdate("drop table s");
1:96e5e04:         st.executeUpdate("drop table t");
1:96e5e04:         st.close(); 
1:96e5e04:       }
1:96e5e04:  }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("MadhareTest Test");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:96e5e04
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         st.executeUpdate("create table t( i int )");
1:         st.executeUpdate("insert into t(i) values (1956)");
1:         ResultSet rs = st.executeQuery("select i from t");
1:         JDBC.assertFullResultSet(rs, new String[][] {{"1956"}});
1: 
1:         // multiple columns
1:         st.executeUpdate("create table s (i int, n int, t int, e int, g int, r int)");
1:         st.executeUpdate("insert into s (i,r,t,n,g,e) values (1,6,3,2,5,4)");
1:         st.executeUpdate("insert into s values (10,11,12,13,14,15)");
1:         rs = st.executeQuery("select i from s");
1: 
1:         String[][] expectedResultSet = {{"1"},{"10"}};
1:         JDBC.assertFullResultSet(rs, expectedResultSet);
1: 
1:         rs = st.executeQuery("select n,e,r,i,t,g from s");
1: 
1:         expectedResultSet = new String[][] {{"2","4","6","1","3","5"},
1:                                                {"11","13","15","10","12","14"}};
1:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:         rs = st.executeQuery("select 20,n,22,e,24,r from s");
1: 
1:         expectedResultSet = new String[][] {{"20","2","22","4","24","6"}, 
1:                                                {"20","11","22","13","24","15"}};
1:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:         PreparedStatement pst = prepareStatement("select i,n,t,e,g,r from s");
1:         rs = pst.executeQuery();
1: 
1:         expectedResultSet = new String[][] {{"1","2","3","4","5","6"},
1:                                                {"10","11","12","13","14","15"}};
1:         JDBC.assertFullResultSet(rs, expectedResultSet);
1: 
1:         rs = pst.executeQuery();
1:         JDBC.assertFullResultSet(rs, expectedResultSet);
1:         // with smallint
1:         st.executeUpdate("create table r(s smallint, i int)");
1: 
1:         st.executeUpdate("insert into r values (23,2)");
1: 
1:         rs = st.executeQuery("select s,i from r");
1: 
1:         JDBC.assertFullResultSet(rs, new String[][] {{"23","2"}});
1: 
1:         st.executeUpdate("drop table r");
1:         st.executeUpdate("drop table s");
1:         st.executeUpdate("drop table t");
1:         st.close(); 
1:       }
1:  }
commit:1c5f9b3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.store.MadhareTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1:  package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This test shows basic functionality of creating and executing 
1:  * simple SQL statements
1:  */
1: public final class MadhareTest extends BaseJDBCTestCase {
1: 
1:     /**
1:       * public constructor required for running test as a standalone JUnit
1:       */
1:       public MadhareTest( String name )
1:       {
1:         super(name);
1:       }
1:       
1:       public static Test suite()
1:       {
1:         //Add the test case into the test suite
0:         TestSuite suite = new TestSuite("MadhareTest Test");
1:         return TestConfiguration.defaultSuite(MadhareTest.class);
1:       }
1:       
1:       public void testBasicMadhare() throws SQLException
1:       {
1:         setAutoCommit(false);
1:         
1:         Statement st = createStatement();
0:         st.executeUpdate(
0:                     "create table t( i int )");
1: 
0:         st.executeUpdate(
0:                     "insert into t(i) values (1956)");
1: 
0:         st.executeQuery(
0:                     "select i from t");
1: 
0:         // multiple columns            
0:         st.executeUpdate(
0:                     "create table s (i int, n int, t int, e int, g int, r int)");
1: 
1:         // reorder columns on insert
0:         st.executeUpdate(
0:                     "insert into s (i,r,t,n,g,e) values (1,6,3,2,5,4)");
1: 
1:         // do not list the columns
0:         st.executeUpdate(
0:                     "insert into s values (10,11,12,13,14,15)");
1: 
1:         // select some of the columns
0:         st.executeQuery(
0:                     "select i from s");
1:         // select in random orders
0:         st.executeQuery(
0:                     "select n,e,r,i,t,g from s");
1: 
1:         // select with constants
0:         st.executeQuery(
0:                     "select 20,n,22,e,24,r from s");
1: 
1:         // prepare statement and execute support
0:         PreparedStatement pst = prepareStatement(
0:                                             "select i,n,t,e,g,r from s");
1: 
0:         pst.executeQuery();
1:         //execute can be done multiple times
0:         pst.executeQuery();
1: 
0:         // with smallint
0:         st.executeUpdate(
0:                     "create table r(s smallint, i int)");
1: 
0:         st.executeUpdate(
0:                     "insert into r values (23,2)");
1: 
0:         st.executeQuery(
0:                     "select s,i from r");
1: 
1:         pst.close();
1: 
1:         //cleanup
0:         st.executeUpdate(
0:                     "drop table r");
0:         st.executeUpdate(
0:                     "drop table s");
0:         st.executeUpdate(
0:                     "drop table t");
0:         st.close();
1:         }
1:     }
============================================================================