1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.Qualifier
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
19:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:e38e660:   <p>
1:eac0369:   A structure which is used to "qualify" a column.  Specifies
1:eac0369:   that the column value in a given column identified by column
1:eac0369:   id is to be compared via a specific operator to a particular
1:eac0369:   DataValueDescriptor value.
1:eac0369:   <p>
1:eac0369:   The implementation of this interface is provided by the client; 
1:eac0369:   the methods of Qualifier are the methods the access code uses to use it.
1:eac0369:   <p>
1:eac0369:   Arrays of qualifiers are provided to restrict the rows 
1:eac0369:   returned by scans.  A row is returned from a scan if all qualifications
1:eac0369:   in the array return true.  
1:eac0369:   <p>
1:eac0369:   A qualification returns true if in the following pseudo-code compare_result
1:eac0369:   is true.
1:eac0369:   <p>
4:eac0369:   <blockquote><pre>
1:eac0369:   if (qualifier.negateCompareResult())
1:eac0369:   {
1:eac0369:       compare_result = 
1:eac0369:       row[(qualifier.getColumnId())].compare(
1:eac0369:         qualifier.getOperator(), 
1:eac0369:         qualifier.getOrderable(),
1:eac0369:         qualifier.getOrderedNulls(), 
1:eac0369:         qualifier.getUnknownRV()) 
1:eac0369:       if (qualifier.negateCompareResult())
1:eac0369:       {
1:eac0369:           compare_result = !(compare_result);
1:eac0369:       }
1:eac0369:   }
4:eac0369:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   Qualifiers are often passed through interfaces as a set of Qualifiers,
1:eac0369:   rather than one at a time, for example see the qualifier argument in 
1:e38e660:   TransactionController.openScan(). 
1:e38e660:   <p>
1:eac0369:   To make this consistent the following protocols are to be used when passing
1:eac0369:   around sets of Qualifiers.
1:e38e660:   <p>
1:eac0369:   A single dimensional array is to be used to pass around a set of AND'd 
1:eac0369:   qualifiers.  Thus qualifier[] argument is to be treated as:
1:e38e660:   <blockquote><pre>
1:eac0369:       qualifier[0] AND qualifer[1] ... AND qualifier[qualifer.length - 1]
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   A two dimensional array is to be used to pass around a AND's and OR's in
1:eac0369:   conjunctive normal form.  The top slot of the 2 dimensional array is optimized
1:eac0369:   for the more frequent where no OR's are present.  The first array slot is 
1:eac0369:   always a list of AND's to be treated as described above for single dimensional
1:eac0369:   AND qualifier arrays.  The subsequent slots are to be treated as AND'd arrays
1:eac0369:   of OR's.  Thus the 2 dimensional array qual[][] argument is to be treated as 
1:eac0369:   the following, note if qual.length = 1 then only the first array is valid and
1:eac0369:   it is and an array of AND clauses:
1:e38e660:   <blockquote><pre>
1:e38e660:   (qual[0][0] AND qual[0][0] ... AND qual[0][qual[0].length - 1])
2:eac0369:   AND
1:e38e660:   (qual[1][0] OR  qual[1][1] ... OR  qual[1][qual[1].length - 1])
1:eac0369:   AND
1:e38e660:   (qual[2][0] OR  qual[2][1] ... OR  qual[2][qual[2].length - 1])
1:eac0369:   ...
1:e38e660:   AND (qual[qual.length - 1][0] OR  qual[1][1] ... OR  qual[1][2])
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   If any of the array's qual[0].length ... qual[qual.length -1] are 0 length
1:eac0369:   they will be evaluated as TRUE; but they must be not NULL.  See Example 4 for
1:eac0369:   encoding of (a or b) that takes advantage of this.
1:e38e660:   <p>
1:eac0369:   Note that any of the arrays qual[0].length ... qual[qual.length -1] may also
1:eac0369:   be of length 1, thus no guarantee is made the presence of OR
1:dbed020:   predicates if qual.length &lt; 1. See example 1a.
1:e38e660:   <p>
1:eac0369:   The following give pseudo-code examples of building Qualifier arrays:
1:e38e660:   <p>
1:eac0369:   Example 1: "a AND b AND c"
1:e38e660:   <blockquote><pre>
1:eac0369:     qualifier = new Qualifier[1][3]; // 3 AND clauses
1:eac0369: 
2:eac0369:     qualifier[0][0] = a
1:eac0369:     qualifier[0][1] = b
1:eac0369:     qualifier[0][2] = c
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   Example 1a "a AND b AND c" - less efficient than example 1 but legal
1:e38e660:   <blockquote><pre>
1:eac0369:     qualifier = new Qualifier[3]; // 3 AND clauses
1:e38e660:     qualifier[0] = new Qualifier[1];
1:e38e660:     qualifier[1] = new Qualifier[1];
1:e38e660:     qualifier[2] = new Qualifier[1];
1:eac0369: 	
1:e38e660:     qualifier[0][0] = a
1:e38e660:     qualifier[1][0] = b
1:e38e660:     qualifier[2][0] = c
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   Example 2: "(f) AND (a OR b) AND (c OR d OR e)"
1:eac0369:     Would be represented by an array that looks like the following:
1:e38e660:   <blockquote><pre>
1:eac0369:     qualifier = new Qualifier[3]; // 3 and clauses
1:eac0369:     qualifier[0] = new Qualifier[1]; // to be intitialized to f
1:eac0369:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1:eac0369:     qualifier[2] = new Qualifier[3]; // to be initialized to (c OR d OR e)
1:eac0369: 
1:eac0369:     qualifier[0][0] = f
1:eac0369:     qualifier[1][0] = a
1:eac0369:     qualifier[1][1] = b
2:eac0369:     qualifier[2][0] = c
1:eac0369:     qualifier[2][1] = d
1:eac0369:     qualifier[2][2] = e
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   Example 3: "(a OR b) AND (c OR d) AND (e OR f)" 
1:e38e660:   <blockquote><pre>
1:e38e660:     qualifier = new Qualifier[3]; // 3 and clauses
1:eac0369:     qualifier = new Qualifier[4]; // 4 and clauses
1:eac0369:     qualifier[0] = new Qualifier[1]; // to be intitialized to TRUE
1:eac0369:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1:eac0369:     qualifier[2] = new Qualifier[2]; // to be initialized to (c OR d)
1:eac0369:     qualifier[3] = new Qualifier[2]; // to be initialized to (e OR f)
1:eac0369: 
1:eac0369:     qualifier[0][0] = TRUE
1:eac0369:     qualifier[1][0] = a
1:eac0369:     qualifier[1][1] = b
1:eac0369:     qualifier[2][0] = c
1:eac0369:     qualifier[2][1] = d
1:eac0369:     qualifier[3][0] = e
1:eac0369:     qualifier[3][1] = f
1:e38e660:   </blockquote></pre>
1:e38e660:   <p>
1:eac0369:   Example 4: "(a OR b)" 
1:e38e660:   <blockquote><pre>
1:eac0369:     qualifier = new Qualifier[2]; // 2 and clauses
1:eac0369:     qualifier[0] = new Qualifier[0]; // 0 length array is TRUE
1:eac0369:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1:eac0369: 
1:eac0369:     qualifier[1][0] = a
1:eac0369:     qualifier[1][1] = b
1:eac0369:   </blockquote></pre>
1:eac0369: 
1:eac0369:   @see ScanController
1:e38e660:   @see TransactionController#openScan 
1:eac0369:   @see DataValueDescriptor#compare
1:eac0369: **/
1:eac0369: 
1:eac0369: 
1:eac0369: public interface Qualifier
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 	 * The DataValueDescriptor can be 1 of 4 types:<ul>
1:eac0369: 	 *		<li> VARIANT		- cannot be cached as its value can vary 
1:eac0369: 	 *							  within a scan</li>
1:eac0369: 	 *		<li> SCAN_INVARIANT - can be cached within a scan as its value 
1:eac0369: 	 *							  will not change within a scan </li>
1:eac0369: 	 *		<li> QUERY_INVARIANT- can be cached across the life of the query
1:eac0369: 	 *								as its value will never change </li>
1:eac0369: 	 *		<li> CONSTANT 		- can be cached across executions. </li></ul>
1:eac0369: 	 * <p>
1:eac0369: 	 * <b>NOTE</b>: the following is guaranteed: <i> 
1:dbed020: 	 *		VARIANT &lt; SCAN_INVARIANT &lt; QUERY_INVARIANT &lt; CONSTANT
1:eac0369: 	 */
1:eac0369: 	public static final int VARIANT = 0;
1:eac0369: 	public static final int SCAN_INVARIANT = 1;
1:eac0369: 	public static final int QUERY_INVARIANT = 2;
1:eac0369: 	public static final int CONSTANT = 3;
1:eac0369: 
1:eac0369: 	/** 
1:eac0369:      * Get the (zero based) id of the column to be qualified.
1:eac0369:      * <p>
1:eac0369:      * This id is the column number of the column in the table, no matter 
1:eac0369:      * whether a partial column set is being retrieved by the actual fetch.
1:eac0369:      * Note that the column being specified in the qualifier must appear in
1:eac0369:      * the column list being fetched.
1:eac0369:      **/
1:eac0369: 	int getColumnId();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the value that the column is to be compared to.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	DataValueDescriptor getOrderable() throws StandardException;
1:eac0369: 
1:eac0369: 	/** Get the operator to use in the comparison. 
1:eac0369:      *
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369: 	int getOperator();
1:eac0369: 
1:f2ee915: 	/** Determine if the result from the compare operation should be negated.  
1:f2ee915:      *  If true then only rows which fail the compare operation will qualify.
1:eac0369:      *
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369: 	boolean negateCompareResult();
1:eac0369: 
1:eac0369: 	/** Get the getOrderedNulls argument to use in the comparison. 
1:eac0369:      *  
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369:     boolean getOrderedNulls();
1:eac0369: 
1:eac0369: 	/** Get the getOrderedNulls argument to use in the comparison.
1:eac0369:      *  
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369:     boolean getUnknownRV();
1:eac0369: 
1:eac0369: 	/** Clear the DataValueDescriptor cache, if one exists.
1:eac0369: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1:eac0369: 	 *		o  VARIANT		  - cannot be cached as its value can 
1:eac0369: 	 *							vary within a scan
1:eac0369: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1:eac0369: 	 *							value will not change within a scan
1:eac0369: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1:eac0369: 	 *							as its value will never change
1:eac0369: 	 */
1:eac0369: 	void clearOrderableCache();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * This method reinitializes all the state of
1:eac0369: 	 * the Qualifier.  It is used to distinguish between
1:eac0369: 	 * resetting something that is query invariant
1:eac0369: 	 * and something that is constant over every
1:eac0369: 	 * execution of a query.  Basically, clearOrderableCache()
1:eac0369: 	 * will only clear out its cache if it is a VARIANT
1:eac0369: 	 * or SCAN_INVARIANT value.  However, each time a
1:eac0369: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1:eac0369: 	 * to be reset.
1:eac0369: 	 */
1:eac0369: 	void reinitialize();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:   predicates if qual.length &lt; 1. See example 1a.
/////////////////////////////////////////////////////////////////////////
1: 	 *		VARIANT &lt; SCAN_INVARIANT &lt; QUERY_INVARIANT &lt; CONSTANT
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:e38e660
/////////////////////////////////////////////////////////////////////////
1:   <p>
/////////////////////////////////////////////////////////////////////////
1:   <p>
1:   TransactionController.openScan(). 
1:   <p>
1:   <p>
1:   <blockquote><pre>
1:   </blockquote></pre>
1:   <p>
/////////////////////////////////////////////////////////////////////////
1:   <blockquote><pre>
1:   (qual[0][0] AND qual[0][0] ... AND qual[0][qual[0].length - 1])
1:   (qual[1][0] OR  qual[1][1] ... OR  qual[1][qual[1].length - 1])
1:   (qual[2][0] OR  qual[2][1] ... OR  qual[2][qual[2].length - 1])
1:   AND (qual[qual.length - 1][0] OR  qual[1][1] ... OR  qual[1][2])
1:   </blockquote></pre>
1:   <p>
1:   <p>
1:   <p>
1:   <p>
1:   <blockquote><pre>
1:   </blockquote></pre>
1:   <p>
1:   <blockquote><pre>
1:     qualifier[0] = new Qualifier[1];
1:     qualifier[1] = new Qualifier[1];
1:     qualifier[2] = new Qualifier[1];
1:     qualifier[0][0] = a
1:     qualifier[1][0] = b
1:     qualifier[2][0] = c
1:   </blockquote></pre>
1:   <p>
1:   <blockquote><pre>
/////////////////////////////////////////////////////////////////////////
1:   </blockquote></pre>
1:   <p>
1:   <blockquote><pre>
1:     qualifier = new Qualifier[3]; // 3 and clauses
/////////////////////////////////////////////////////////////////////////
1:   </blockquote></pre>
1:   <p>
1:   <blockquote><pre>
1:   @see TransactionController#openScan 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f2ee915
/////////////////////////////////////////////////////////////////////////
1: 	/** Determine if the result from the compare operation should be negated.  
1:      *  If true then only rows which fail the compare operation will qualify.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.Qualifier
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 
1:   A structure which is used to "qualify" a column.  Specifies
1:   that the column value in a given column identified by column
1:   id is to be compared via a specific operator to a particular
1:   DataValueDescriptor value.
1:   <p>
1:   The implementation of this interface is provided by the client; 
1:   the methods of Qualifier are the methods the access code uses to use it.
1:   <p>
1:   Arrays of qualifiers are provided to restrict the rows 
1:   returned by scans.  A row is returned from a scan if all qualifications
1:   in the array return true.  
1:   <p>
1:   A qualification returns true if in the following pseudo-code compare_result
1:   is true.
1:   <p>
1:   <blockquote><pre>
1:   if (qualifier.negateCompareResult())
1:   {
1:       <blockquote><pre>
1:       compare_result = 
1:       row[(qualifier.getColumnId())].compare(
1:       <blockquote><pre>
1:         qualifier.getOperator(), 
1:         qualifier.getOrderable(),
1:         qualifier.getOrderedNulls(), 
1:         qualifier.getUnknownRV()) 
1:       </blockquote></pre>
1:       if (qualifier.negateCompareResult())
1:       {
1:           <blockquote><pre>
1:           compare_result = !(compare_result);
1:           </blockquote></pre>
1:       }
1:       </blockquote></pre>
1:   }
1:   </blockquote></pre>
1: 
1:   Qualifiers are often passed through interfaces as a set of Qualifiers,
1:   rather than one at a time, for example see the qualifier argument in 
0:   @see TransactionController#openScan 
1: 
1:   To make this consistent the following protocols are to be used when passing
1:   around sets of Qualifiers.
1: 
1:   A single dimensional array is to be used to pass around a set of AND'd 
1:   qualifiers.  Thus qualifier[] argument is to be treated as:
1:       qualifier[0] AND qualifer[1] ... AND qualifier[qualifer.length - 1]
1: 
1:   A two dimensional array is to be used to pass around a AND's and OR's in
1:   conjunctive normal form.  The top slot of the 2 dimensional array is optimized
1:   for the more frequent where no OR's are present.  The first array slot is 
1:   always a list of AND's to be treated as described above for single dimensional
1:   AND qualifier arrays.  The subsequent slots are to be treated as AND'd arrays
1:   of OR's.  Thus the 2 dimensional array qual[][] argument is to be treated as 
1:   the following, note if qual.length = 1 then only the first array is valid and
1:   it is and an array of AND clauses:
1: 
0:   (qual[0][0]               AND qual[0][0] ... AND qual[0][qual[0].length - 1])
1:   AND
0:   (qual[1][0]               OR  qual[1][1] ... OR  qual[1][qual[1].length - 1])
1:   AND
0:   (qual[2][0]               OR  qual[2][1] ... OR  qual[2][qual[2].length - 1])
1:   ...
1:   AND
0:   (qual[qual.length - 1][0] OR  qual[1][1] ... OR  qual[1][2])
1: 
1:   If any of the array's qual[0].length ... qual[qual.length -1] are 0 length
1:   they will be evaluated as TRUE; but they must be not NULL.  See Example 4 for
1:   encoding of (a or b) that takes advantage of this.
1: 
1:   Note that any of the arrays qual[0].length ... qual[qual.length -1] may also
1:   be of length 1, thus no guarantee is made the presence of OR
0:   predicates if qual.length > 1. See example 1a.
1: 
1:   The following give pseudo-code examples of building Qualifier arrays:
1: 
0:   </blockquote><pre>
1:   Example 1: "a AND b AND c"
1:     qualifier = new Qualifier[1][3]; // 3 AND clauses
1: 
1:     qualifier[0][0] = a
1:     qualifier[0][1] = b
1:     qualifier[0][2] = c
1: 
1:   Example 1a "a AND b AND c" - less efficient than example 1 but legal
1:     qualifier = new Qualifier[3]; // 3 AND clauses
0: 	qualifier[0] = new Qualifier[1];
0: 	qualifier[1] = new Qualifier[1];
0: 	qualifier[2] = new Qualifier[1];
1: 	
1: 	qualifier[0][0] = a
0: 	qualifier[1][0] = b
1: 	qualifier[2][0] = c
1: 
1: 
1:   Example 2: "(f) AND (a OR b) AND (c OR d OR e)"
1: 
1:     Would be represented by an array that looks like the following:
1:     qualifier = new Qualifier[3]; // 3 and clauses
1:     qualifier[0] = new Qualifier[1]; // to be intitialized to f
1:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1:     qualifier[2] = new Qualifier[3]; // to be initialized to (c OR d OR e)
1: 
1:     qualifier[0][0] = f
1:     qualifier[1][0] = a
1:     qualifier[1][1] = b
1:     qualifier[2][0] = c
1:     qualifier[2][1] = d
1:     qualifier[2][2] = e
1: 
1:   Example 3: "(a OR b) AND (c OR d) AND (e OR f)" 
1:     qualifier = new Qualifier[4]; // 4 and clauses
1:     qualifier[0] = new Qualifier[1]; // to be intitialized to TRUE
1:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1:     qualifier[2] = new Qualifier[2]; // to be initialized to (c OR d)
1:     qualifier[3] = new Qualifier[2]; // to be initialized to (e OR f)
1: 
1:     qualifier[0][0] = TRUE
1:     qualifier[1][0] = a
1:     qualifier[1][1] = b
1:     qualifier[2][0] = c
1:     qualifier[2][1] = d
1:     qualifier[3][0] = e
1:     qualifier[3][1] = f
1: 
1:   Example 4: "(a OR b)" 
1:     qualifier = new Qualifier[2]; // 2 and clauses
1:     qualifier[0] = new Qualifier[0]; // 0 length array is TRUE
1:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
1: 
1:     qualifier[1][0] = a
1:     qualifier[1][1] = b
1: 
1:   </blockquote></pre>
1: 
1:   @see ScanController
1:   @see DataValueDescriptor#compare
1: **/
1: 
1: 
1: public interface Qualifier
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**	
1: 	 * The DataValueDescriptor can be 1 of 4 types:<ul>
1: 	 *		<li> VARIANT		- cannot be cached as its value can vary 
1: 	 *							  within a scan</li>
1: 	 *		<li> SCAN_INVARIANT - can be cached within a scan as its value 
1: 	 *							  will not change within a scan </li>
1: 	 *		<li> QUERY_INVARIANT- can be cached across the life of the query
1: 	 *								as its value will never change </li>
1: 	 *		<li> CONSTANT 		- can be cached across executions. </li></ul>
1: 	 * <p>
1: 	 * <b>NOTE</b>: the following is guaranteed: <i> 
0: 	 *		VARIANT < SCAN_INVARIANT < QUERY_INVARIANT < CONSTANT
1: 	 */
1: 	public static final int VARIANT = 0;
1: 	public static final int SCAN_INVARIANT = 1;
1: 	public static final int QUERY_INVARIANT = 2;
1: 	public static final int CONSTANT = 3;
1: 
1: 	/** 
1:      * Get the (zero based) id of the column to be qualified.
1:      * <p>
1:      * This id is the column number of the column in the table, no matter 
1:      * whether a partial column set is being retrieved by the actual fetch.
1:      * Note that the column being specified in the qualifier must appear in
1:      * the column list being fetched.
1:      **/
1: 	int getColumnId();
1: 
1: 	/**
1: 	 * Get the value that the column is to be compared to.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	DataValueDescriptor getOrderable() throws StandardException;
1: 
1: 	/** Get the operator to use in the comparison. 
1:      *
1:      *  @see DataValueDescriptor#compare
1:      **/
1: 	int getOperator();
1: 
0: 	/** Should the result from the compare operation be negated?  If true
0:      *  then only rows which fail the compare operation will qualify.
1:      *
1:      *  @see DataValueDescriptor#compare
1:      **/
1: 	boolean negateCompareResult();
1: 
1: 	/** Get the getOrderedNulls argument to use in the comparison. 
1:      *  
1:      *  @see DataValueDescriptor#compare
1:      **/
1:     boolean getOrderedNulls();
1: 
1: 	/** Get the getOrderedNulls argument to use in the comparison.
1:      *  
1:      *  @see DataValueDescriptor#compare
1:      **/
1:     boolean getUnknownRV();
1: 
1: 	/** Clear the DataValueDescriptor cache, if one exists.
1: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1: 	 *		o  VARIANT		  - cannot be cached as its value can 
1: 	 *							vary within a scan
1: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1: 	 *							value will not change within a scan
1: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1: 	 *							as its value will never change
1: 	 */
1: 	void clearOrderableCache();
1: 
1: 
1: 	/** 
1: 	 * This method reinitializes all the state of
1: 	 * the Qualifier.  It is used to distinguish between
1: 	 * resetting something that is query invariant
1: 	 * and something that is constant over every
1: 	 * execution of a query.  Basically, clearOrderableCache()
1: 	 * will only clear out its cache if it is a VARIANT
1: 	 * or SCAN_INVARIANT value.  However, each time a
1: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1: 	 * to be reset.
1: 	 */
1: 	void reinitialize();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 
0:   A structure which is used to "qualify" a column.  Specifies
0:   that the column value in a given column identified by column
0:   id is to be compared via a specific operator to a particular
0:   DataValueDescriptor value.
0:   <p>
0:   The implementation of this interface is provided by the client; 
0:   the methods of Qualifier are the methods the access code uses to use it.
0:   <p>
0:   Arrays of qualifiers are provided to restrict the rows 
0:   returned by scans.  A row is returned from a scan if all qualifications
0:   in the array return true.  
0:   <p>
0:   A qualification returns true if in the following pseudo-code compare_result
0:   is true.
0:   <p>
0:   <blockquote><pre>
0:   if (qualifier.negateCompareResult())
0:   {
0:       <blockquote><pre>
0:       compare_result = 
0:       row[(qualifier.getColumnId())].compare(
0:       <blockquote><pre>
0:         qualifier.getOperator(), 
0:         qualifier.getOrderable(),
0:         qualifier.getOrderedNulls(), 
0:         qualifier.getUnknownRV()) 
0:       </blockquote></pre>
0:       if (qualifier.negateCompareResult())
0:       {
0:           <blockquote><pre>
0:           compare_result = !(compare_result);
0:           </blockquote></pre>
0:       }
0:       </blockquote></pre>
0:   }
0:   </blockquote></pre>
0: 
0:   Qualifiers are often passed through interfaces as a set of Qualifiers,
0:   rather than one at a time, for example see the qualifier argument in 
0:   @see TransactionController#openScan 
0: 
0:   To make this consistent the following protocols are to be used when passing
0:   around sets of Qualifiers.
0: 
0:   A single dimensional array is to be used to pass around a set of AND'd 
0:   qualifiers.  Thus qualifier[] argument is to be treated as:
0:       qualifier[0] AND qualifer[1] ... AND qualifier[qualifer.length - 1]
0: 
0:   A two dimensional array is to be used to pass around a AND's and OR's in
0:   conjunctive normal form.  The top slot of the 2 dimensional array is optimized
0:   for the more frequent where no OR's are present.  The first array slot is 
0:   always a list of AND's to be treated as described above for single dimensional
0:   AND qualifier arrays.  The subsequent slots are to be treated as AND'd arrays
0:   of OR's.  Thus the 2 dimensional array qual[][] argument is to be treated as 
0:   the following, note if qual.length = 1 then only the first array is valid and
0:   it is and an array of AND clauses:
0: 
0:   (qual[0][0]               AND qual[0][0] ... AND qual[0][qual[0].length - 1])
0:   AND
0:   (qual[1][0]               OR  qual[1][1] ... OR  qual[1][qual[1].length - 1])
0:   AND
0:   (qual[2][0]               OR  qual[2][1] ... OR  qual[2][qual[2].length - 1])
0:   ...
0:   AND
0:   (qual[qual.length - 1][0] OR  qual[1][1] ... OR  qual[1][2])
0: 
0:   If any of the array's qual[0].length ... qual[qual.length -1] are 0 length
0:   they will be evaluated as TRUE; but they must be not NULL.  See Example 4 for
0:   encoding of (a or b) that takes advantage of this.
0: 
0:   Note that any of the arrays qual[0].length ... qual[qual.length -1] may also
0:   be of length 1, thus no guarantee is made the presence of OR
0:   predicates if qual.length > 1. See example 1a.
0: 
0:   The following give pseudo-code examples of building Qualifier arrays:
0: 
0:   </blockquote><pre>
0:   Example 1: "a AND b AND c"
0:     qualifier = new Qualifier[1][3]; // 3 AND clauses
0: 
0:     qualifier[0][0] = a
0:     qualifier[0][1] = b
0:     qualifier[0][2] = c
0: 
0:   Example 1a "a AND b AND c" - less efficient than example 1 but legal
0:     qualifier = new Qualifier[3]; // 3 AND clauses
0: 	qualifier[0] = new Qualifier[1];
0: 	qualifier[1] = new Qualifier[1];
0: 	qualifier[2] = new Qualifier[1];
0: 	
0: 	qualifier[0][0] = a
0: 	qualifier[1][0] = b
0: 	qualifier[2][0] = c
0: 
0: 
0:   Example 2: "(f) AND (a OR b) AND (c OR d OR e)"
0: 
0:     Would be represented by an array that looks like the following:
0:     qualifier = new Qualifier[3]; // 3 and clauses
0:     qualifier[0] = new Qualifier[1]; // to be intitialized to f
0:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
0:     qualifier[2] = new Qualifier[3]; // to be initialized to (c OR d OR e)
0: 
0:     qualifier[0][0] = f
0:     qualifier[1][0] = a
0:     qualifier[1][1] = b
0:     qualifier[2][0] = c
0:     qualifier[2][1] = d
0:     qualifier[2][2] = e
0: 
0:   Example 3: "(a OR b) AND (c OR d) AND (e OR f)" 
0:     qualifier = new Qualifier[4]; // 4 and clauses
0:     qualifier[0] = new Qualifier[1]; // to be intitialized to TRUE
0:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
0:     qualifier[2] = new Qualifier[2]; // to be initialized to (c OR d)
0:     qualifier[3] = new Qualifier[2]; // to be initialized to (e OR f)
0: 
0:     qualifier[0][0] = TRUE
0:     qualifier[1][0] = a
0:     qualifier[1][1] = b
0:     qualifier[2][0] = c
0:     qualifier[2][1] = d
0:     qualifier[3][0] = e
0:     qualifier[3][1] = f
0: 
0:   Example 4: "(a OR b)" 
0:     qualifier = new Qualifier[2]; // 2 and clauses
0:     qualifier[0] = new Qualifier[0]; // 0 length array is TRUE
0:     qualifier[1] = new Qualifier[2]; // to be initialized to (a OR b)
0: 
0:     qualifier[1][0] = a
0:     qualifier[1][1] = b
0: 
0:   </blockquote></pre>
0: 
0:   @see ScanController
0:   @see DataValueDescriptor#compare
0: **/
0: 
0: 
0: public interface Qualifier
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**	
0: 	 * The DataValueDescriptor can be 1 of 4 types:<ul>
0: 	 *		<li> VARIANT		- cannot be cached as its value can vary 
0: 	 *							  within a scan</li>
0: 	 *		<li> SCAN_INVARIANT - can be cached within a scan as its value 
0: 	 *							  will not change within a scan </li>
0: 	 *		<li> QUERY_INVARIANT- can be cached across the life of the query
0: 	 *								as its value will never change </li>
0: 	 *		<li> CONSTANT 		- can be cached across executions. </li></ul>
0: 	 * <p>
0: 	 * <b>NOTE</b>: the following is guaranteed: <i> 
0: 	 *		VARIANT < SCAN_INVARIANT < QUERY_INVARIANT < CONSTANT
0: 	 */
0: 	public static final int VARIANT = 0;
0: 	public static final int SCAN_INVARIANT = 1;
0: 	public static final int QUERY_INVARIANT = 2;
0: 	public static final int CONSTANT = 3;
0: 
0: 	/** 
0:      * Get the (zero based) id of the column to be qualified.
0:      * <p>
0:      * This id is the column number of the column in the table, no matter 
0:      * whether a partial column set is being retrieved by the actual fetch.
0:      * Note that the column being specified in the qualifier must appear in
0:      * the column list being fetched.
0:      **/
0: 	int getColumnId();
0: 
0: 	/**
0: 	 * Get the value that the column is to be compared to.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	DataValueDescriptor getOrderable() throws StandardException;
0: 
0: 	/** Get the operator to use in the comparison. 
0:      *
0:      *  @see DataValueDescriptor#compare
0:      **/
0: 	int getOperator();
0: 
0: 	/** Should the result from the compare operation be negated?  If true
0:      *  then only rows which fail the compare operation will qualify.
0:      *
0:      *  @see DataValueDescriptor#compare
0:      **/
0: 	boolean negateCompareResult();
0: 
0: 	/** Get the getOrderedNulls argument to use in the comparison. 
0:      *  
0:      *  @see DataValueDescriptor#compare
0:      **/
0:     boolean getOrderedNulls();
0: 
0: 	/** Get the getOrderedNulls argument to use in the comparison.
0:      *  
0:      *  @see DataValueDescriptor#compare
0:      **/
0:     boolean getUnknownRV();
0: 
0: 	/** Clear the DataValueDescriptor cache, if one exists.
0: 	 *  (The DataValueDescriptor can be 1 of 3 types:
0: 	 *		o  VARIANT		  - cannot be cached as its value can 
0: 	 *							vary within a scan
0: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
0: 	 *							value will not change within a scan
0: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
0: 	 *							as its value will never change
0: 	 */
0: 	void clearOrderableCache();
0: 
0: 
0: 	/** 
0: 	 * This method reinitializes all the state of
0: 	 * the Qualifier.  It is used to distinguish between
0: 	 * resetting something that is query invariant
0: 	 * and something that is constant over every
0: 	 * execution of a query.  Basically, clearOrderableCache()
0: 	 * will only clear out its cache if it is a VARIANT
0: 	 * or SCAN_INVARIANT value.  However, each time a
0: 	 * query is executed, the QUERY_INVARIANT qualifiers need
0: 	 * to be reset.
0: 	 */
0: 	void reinitialize();
0: }
============================================================================