1:6e8ab1f: /*
1:6e8ab1f:  *
1:6e8ab1f:  * Derby - Class OERandom
1:6e8ab1f:  *
1:6e8ab1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e8ab1f:  * contributor license agreements.  See the NOTICE file distributed with
1:6e8ab1f:  * this work for additional information regarding copyright ownership.
1:6e8ab1f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e8ab1f:  * (the "License"); you may not use this file except in compliance with
1:6e8ab1f:  * the License.  You may obtain a copy of the License at
1:6e8ab1f:  *
1:6e8ab1f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6e8ab1f:  *
1:6e8ab1f:  * Unless required by applicable law or agreed to in writing, 
1:6e8ab1f:  * software distributed under the License is distributed on an 
1:6e8ab1f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:6e8ab1f:  * either express or implied. See the License for the specific 
1:6e8ab1f:  * language governing permissions and limitations under the License.
1:6e8ab1f:  */
1:6e8ab1f: package org.apache.derbyTesting.system.oe.util;
1:6e8ab1f: 
1:6e8ab1f: import java.math.BigDecimal;
1:6e8ab1f: import java.math.BigInteger;
1:6e8ab1f: import java.util.Random;
1:6e8ab1f: 
1:6e8ab1f: import org.apache.derbyTesting.system.oe.client.Load;
1:6e8ab1f: 
1:6e8ab1f: /**
1:6e8ab1f:  * Methods to implement the random database population types
1:6e8ab1f:  * for the Order Entry Benchmark. The rules for generating 
1:6e8ab1f:  * the random data is per the TPC-C specification.
1:6e8ab1f:  */
1:6e8ab1f: public class OERandom {
1:6e8ab1f: 
1:6e8ab1f:     final Random rand;
1:6e8ab1f: 
1:6e8ab1f:     protected final int Clast;
1:6e8ab1f: 
1:6e8ab1f:     protected final int Cid;
1:6e8ab1f: 
1:6e8ab1f:     protected final int Citem;
1:76c452e:     
1:76c452e:     /**
1:76c452e:      * Create a matching OERandom, for use in multi-threaded
1:76c452e:      * runs where all the submitters need to share the same
1:76c452e:      * Clast, Cid and Citem values.
1:76c452e:      * @param oer
1:76c452e:      */
1:76c452e:     public OERandom(OERandom oer) {
1:93d16ad:         // Since these objects may be created at the same time,
1:93d16ad:         // within the resolution of currentTimeMillis(), then
1:93d16ad:         // ensure they have different seeds.
1:93d16ad:         rand = new Random(System.currentTimeMillis() + oer.rand.nextLong());
1:76c452e:         Clast = oer.Clast;
1:76c452e:         Cid = oer.Cid;
1:76c452e:         Citem = oer.Citem;
1:76c452e:     }
1:6e8ab1f: 
1:76c452e:     public OERandom(int last, long seed) {
1:6e8ab1f: 
1:6e8ab1f:         rand = new Random(seed);
1:76c452e:         Clast = last;
1:76c452e:         Cid = this.randomInt(0, 255);
1:76c452e:         Citem = this.randomInt(0, 255);
1:76c452e:         
1:6e8ab1f:         initAStrings();
1:6e8ab1f:     }
1:6e8ab1f: 
1:76c452e:     public OERandom(int last) {
1:76c452e:         this(last, System.currentTimeMillis());
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     private static int[] RESCALE = { 0, 10, 100, 1000, 10000, 100000, 1000000 };
1:6e8ab1f: 
1:6e8ab1f:     private StringBuffer decimalString = new StringBuffer(12);
1:6e8ab1f: 
1:6e8ab1f:     public String randomDecimalString(int start, int end, int scale) {
1:6e8ab1f: 
1:6e8ab1f:         int val = randomInt(start, end);
1:6e8ab1f: 
1:6e8ab1f:         int whole = val / RESCALE[scale];
1:6e8ab1f: 
1:6e8ab1f:         int part = val % RESCALE[scale];
1:6e8ab1f: 
1:6e8ab1f:         decimalString.setLength(0);
1:6e8ab1f:         decimalString.append(whole);
1:6e8ab1f:         decimalString.append('.');
1:6e8ab1f: 
1:6e8ab1f:         int pos = decimalString.length();
1:6e8ab1f: 
1:6e8ab1f:         decimalString.append(part);
1:6e8ab1f: 
1:6e8ab1f:         int tempScale = decimalString.length() - pos;
1:6e8ab1f:         if (tempScale < scale) {
1:6e8ab1f:             for (int i = 0; i < (scale - tempScale); i++)
1:6e8ab1f:                 decimalString.insert(pos, '0');
1:6e8ab1f:         }
1:6e8ab1f: 
1:6e8ab1f:         return decimalString.toString();
1:6e8ab1f:     }
1:8404f5d:     
1:8404f5d:     /**
1:8404f5d:      * Payment amount between 1.00 and 5,000.00
1:8404f5d:      * @return Payment amount between 1.00 and 5,000.00
1:8404f5d:      */
1:8404f5d:     public BigDecimal payment()
1:8404f5d:     {
1:8404f5d:         return randomDecimal(1, 500000, 2);
1:8404f5d:     }
1:6e8ab1f: 
1:6e8ab1f:     public BigDecimal randomDecimal(int start, int end, int scale) {
1:6e8ab1f:         BigInteger bi = BigInteger.valueOf(randomInt(start, end));
1:6e8ab1f:         return new BigDecimal(bi, scale);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * tpcc 4.3.2.5 Implements random within [x .. y ] for int
1:6e8ab1f:      */
1:6e8ab1f:     public int randomInt(int start, int end) {
1:6e8ab1f:         double drand = rand.nextDouble();
1:6e8ab1f: 
1:6e8ab1f:         double rrand = (drand * (end - start)) + 0.5;
1:6e8ab1f: 
1:6e8ab1f:         return ((int) rrand) + start;
1:6e8ab1f:     }
1:9f7e882:     
1:9f7e882:     /**
1:9f7e882:      * Return a random district [1..10]
1:9f7e882:      */
1:9f7e882:     public short district()
1:9f7e882:     {
1:9f7e882:         return (short) randomInt(1, 10);
1:9f7e882:     }
1:24e8abd:     
1:24e8abd:     /**
1:24e8abd:      * Return a random carrier [1..10]
1:24e8abd:      */
1:24e8abd:     public short carrier()
1:24e8abd:     {
1:24e8abd:         return (short) randomInt(1, 10);
1:24e8abd:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:9f7e882:      * Return a random threshold for the stock level [10..20]
1:9f7e882:      */
1:9f7e882:     public int threshold()
1:9f7e882:     {
1:9f7e882:         return randomInt(10, 20);
1:9f7e882:     }
1:9f7e882:     
1:9f7e882:     /**
1:6e8ab1f:      * tpcc 4.3.2.2 (random a string)
1:6e8ab1f:      */
1:6e8ab1f:     public String randomAString(int min, int max) {
1:6e8ab1f:         int len = randomInt(min, max);
1:6e8ab1f:         char[] c = new char[len];
1:6e8ab1f:         for (int i = 0; i < len; i++) {
1:6e8ab1f: 
1:6e8ab1f:             double drand = rand.nextDouble();
1:6e8ab1f: 
1:6e8ab1f:             if (i == 0) {
1:6e8ab1f:                 if (drand < 2.0)
1:6e8ab1f:                     c[0] = (char) randomInt((int) 'A', (int) 'Z');
1:6e8ab1f:                 else {
1:6e8ab1f:                     switch (randomInt(1, 10)) {
1:6e8ab1f:                     case 1:
1:6e8ab1f:                         c[0] = '\u00c0';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 2:
1:6e8ab1f:                         c[0] = '\u00c1';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 3:
1:6e8ab1f:                         c[0] = '\u00c2';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 4:
1:6e8ab1f:                         c[0] = '\u00ca';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 5:
1:6e8ab1f:                         c[0] = '\u00cb';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 6:
1:6e8ab1f:                         c[0] = '\u00d4';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 7:
1:6e8ab1f:                         c[0] = '\u00d8';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 8:
1:6e8ab1f:                         c[0] = '\u00d1';
1:6e8ab1f:                         break;
1:6e8ab1f:                     case 9:
1:6e8ab1f:                         c[0] = '\u00cd';
1:6e8ab1f:                         break;
1:6e8ab1f:                     default:
1:6e8ab1f:                         c[0] = '\u00dc';
1:6e8ab1f:                         break;
1:6e8ab1f:                     }
1:6e8ab1f:                 }
1:6e8ab1f: 
1:6e8ab1f:                 continue;
1:6e8ab1f:             }
1:6e8ab1f: 
1:6e8ab1f:             if (drand < 2.0)
1:6e8ab1f:                 c[i] = (char) randomInt((int) 'a', (int) 'z');
1:6e8ab1f:             else {
1:6e8ab1f:                 switch (randomInt(1, 10)) {
1:6e8ab1f:                 case 1:
1:6e8ab1f:                     c[i] = '\u00e2';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 2:
1:6e8ab1f:                     c[i] = '\u00e4';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 3:
1:6e8ab1f:                     c[i] = '\u00e7';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 4:
1:6e8ab1f:                     c[i] = '\u00e8';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 5:
1:6e8ab1f:                     c[i] = '\u00ec';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 6:
1:6e8ab1f:                     c[i] = '\u00ef';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 7:
1:6e8ab1f:                     c[i] = '\u00f6';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 8:
1:6e8ab1f:                     c[i] = '\u00f9';
1:6e8ab1f:                     break;
1:6e8ab1f:                 case 9:
1:6e8ab1f:                     c[i] = '\u00fc';
1:6e8ab1f:                     break;
1:6e8ab1f:                 default:
1:6e8ab1f:                     c[i] = '\u00e5';
1:6e8ab1f:                     break;
1:6e8ab1f:                 }
1:6e8ab1f:             }
1:6e8ab1f:         }
1:6e8ab1f: 
1:6e8ab1f:         return new String(c);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * tpcc 4.3.2.2 (random n string)
1:6e8ab1f:      */
1:6e8ab1f:     public String randomNString(int min, int max) {
1:6e8ab1f:         int len = randomInt(min, max);
1:6e8ab1f:         char[] c = new char[len];
1:6e8ab1f:         for (int i = 0; i < len; i++) {
1:6e8ab1f:             c[i] = (char) randomInt((int) '0', (int) '9');
1:6e8ab1f:         }
1:6e8ab1f: 
1:6e8ab1f:         return new String(c);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * tpcc 4.3.2.3
1:6e8ab1f:      */
1:6e8ab1f:     private final String[] SYLLABLES = { "BAR", "OUGHT", "ABLE", "PRI", "PRES",
1:6e8ab1f:             "ESE", "ANTI", "CALLY", "ATION", "EING" };
1:6e8ab1f: 
1:6e8ab1f:     protected String randomCLast(int n) {
1:6e8ab1f: 
1:6e8ab1f:         return SYLLABLES[n / 100] + SYLLABLES[(n / 10) % 10]
1:6e8ab1f:                 + SYLLABLES[n % 10];
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Generate the zipcode value
1:6e8ab1f:      * return zipcode value according to the requirements specified in 
1:6e8ab1f:      * Clause 4.3.2.7 of TPC-C spec
1:6e8ab1f:      */
1:6e8ab1f:     public String randomZIP() {
1:6e8ab1f:         return randomNString(4, 4) + "11111";
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Section 2.1.6 of TPC-C specification, for OL_I_ID NURand(A, x, y) =
1:6e8ab1f:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x C is a run-time
1:6e8ab1f:      * constant randomly chosen within [0 .. A] NURand(8191, 1,100000)
1:6e8ab1f:      * 
1:6e8ab1f:      * @return nonuniform random number
1:6e8ab1f:      */
1:6e8ab1f:     public int NURand8191() {
1:6e8ab1f:         int l = randomInt(0, 8191);
1:6e8ab1f:         int r = randomInt(1, Load.ITEM_COUNT);
1:6e8ab1f:         int C = randomInt(0, 8191);
1:6e8ab1f:         return ((l | r) + C) % (Load.ITEM_COUNT - 1 + 1) + 1;
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Section 2.1.6 of TPC-C specification for CID NURand(A, x, y) =
1:6e8ab1f:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x NURand(1023,
1:6e8ab1f:      * 1,3000)
1:6e8ab1f:      * 
1:6e8ab1f:      * @return nonuniform random number
1:6e8ab1f:      */
1:6e8ab1f:     public int NURand1023() {
1:6e8ab1f:         int l = randomInt(0, 1023);
1:6e8ab1f:         int r = randomInt(1, (Load.CUSTOMER_COUNT_W / Load.DISTRICT_COUNT_W));
1:6e8ab1f:         int C = randomInt(0, 1023);
1:6e8ab1f:         return ((l | r) + C)
1:6e8ab1f:                 % ((Load.CUSTOMER_COUNT_W / Load.DISTRICT_COUNT_W) - 1 + 1) + 1;
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Section 2.1.6 of TPC-C specification, for C_LAST NURand(A, x, y) =
1:6e8ab1f:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x NURand(255,0,999)
1:6e8ab1f:      * 
1:6e8ab1f:      * @return nonuniform random number
1:6e8ab1f:      */
1:6e8ab1f:     public int NURand255() {
1:6e8ab1f:         int l = randomInt(0, 255);
1:6e8ab1f:         int r = randomInt(0, 999);
1:6e8ab1f:         int C = randomInt(0, 255);
1:6e8ab1f:         return ((l | r) + C) % (999 - 0 + 1) + 0;
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomState() {
1:6e8ab1f:         StringBuffer s = new StringBuffer(2);
1:6e8ab1f:         for (int i = 0; i < 2; i++) {
1:6e8ab1f:             s.append((char) randomInt((int) 'A', (int) 'Z'));
1:6e8ab1f:         }
1:6e8ab1f: 
1:6e8ab1f:         return s.toString();
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Clause 4.3.2.3 of the TPC-C specification
1:6e8ab1f:      * @param cid - customer id.
1:6e8ab1f:      * @return the generated Customer's last name per the requirements
1:6e8ab1f:      * in the TPC-C spec. 
1:6e8ab1f:      */
1:6e8ab1f:     public String randomCLastPopulate(int cid) {
1:8404f5d:         
1:8404f5d:         // First thousand customers (C_ID is one based)
1:8404f5d:         // have a fixed last name based upon the contiguous
1:8404f5d:         // values from 0-999, section 4.3.3.1
1:8404f5d:         if (cid <= 1000)
1:8404f5d:             return randomCLast(cid-1); // range 0 - 999
1:6e8ab1f: 
1:6e8ab1f:         return randomCLast(NURand255());
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomCLast() {
1:6e8ab1f:         return randomCLast(NURand255());
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Clause 4.3.3.1 of TPC-C spec. random a-string [26 .. 50]. For 10%
1:6e8ab1f:      * of the rows, selected at random, the string "ORIGINAL" must be held by 8
1:6e8ab1f:      * consecutive characters starting at a random position within the string
1:6e8ab1f:      * 
1:6e8ab1f:      * @return string data per the TPC-C requirements
1:6e8ab1f:      */
1:6e8ab1f:     public String randomData() {
1:6e8ab1f:         String s = randomAString26_50();
1:6e8ab1f:         if (rand.nextDouble() < 0.9)
1:6e8ab1f:             return s;
1:6e8ab1f: 
1:6e8ab1f:         int pos = randomInt(0, s.length() - 9);
1:6e8ab1f: 
1:6e8ab1f:         if (pos == 0)
1:6e8ab1f:             return "ORIGINAL" + s.substring(8);
1:6e8ab1f: 
1:6e8ab1f:         if (pos == (s.length() - 9))
1:6e8ab1f:             return s.substring(0, s.length() - 9) + "ORIGINAL";
1:6e8ab1f: 
1:6e8ab1f:         return s.substring(0, pos) + "ORIGINAL"
1:6e8ab1f:                 + s.substring(pos + 8, s.length());
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public int[] randomIntPerm(int count) {
1:6e8ab1f:         int[] data = new int[count];
1:6e8ab1f: 
1:6e8ab1f:         for (int i = 0; i < count; i++) {
1:6e8ab1f:             data[i] = i + 1;
1:6e8ab1f:         }
1:6e8ab1f: 
1:6e8ab1f:         for (int j = 0; j < (count * 4); j++) {
1:6e8ab1f: 
1:6e8ab1f:             int a = randomInt(0, count - 1);
1:6e8ab1f:             int b = randomInt(0, count - 1);
1:6e8ab1f: 
1:6e8ab1f:             int val = data[a];
1:6e8ab1f:             data[a] = data[b];
1:6e8ab1f:             data[b] = val;
1:6e8ab1f:         }
1:6e8ab1f:         return data;
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left24 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left300 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] right200 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left10 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] right10 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left14 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left26 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] right24 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] left8 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private final static String[] right8 = new String[10];
1:6e8ab1f: 
1:6e8ab1f:     private static boolean doneInit;
1:6e8ab1f: 
1:6e8ab1f:     private void initAStrings() {
1:6e8ab1f: 
1:6e8ab1f:         synchronized (left24) {
1:6e8ab1f:             if (doneInit)
1:6e8ab1f:                 return;
1:6e8ab1f: 
1:6e8ab1f:             for (int i = 0; i < 10; i++) {
1:6e8ab1f:                 // 24..24
1:6e8ab1f:                 left24[i] = randomAString(24, 24);
1:6e8ab1f: 
1:6e8ab1f:                 // 300...500
1:6e8ab1f:                 left300[i] = randomAString(300, 300);
1:6e8ab1f:                 right200[i] = randomAString(0, 200);
1:6e8ab1f: 
1:6e8ab1f:                 // 10...20
1:6e8ab1f:                 left10[i] = randomAString(10, 10);
1:6e8ab1f:                 right10[i] = randomAString(0, 10);
1:6e8ab1f: 
1:6e8ab1f:                 // 14 .. 24
1:6e8ab1f:                 left14[i] = randomAString(10, 10);
1:6e8ab1f: 
1:6e8ab1f:                 // 26 .. 50
1:6e8ab1f:                 left26[i] = randomAString(26, 26);
1:6e8ab1f:                 right24[i] = randomAString(0, 24);
1:6e8ab1f: 
1:6e8ab1f:                 // 8 .. 16
1:6e8ab1f:                 left8[i] = randomAString(8, 8);
1:6e8ab1f:                 right8[i] = randomAString(0, 8);
1:6e8ab1f: 
1:6e8ab1f:             }
1:6e8ab1f:             doneInit = true;
1:6e8ab1f:         }
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomAString24() {
1:6e8ab1f:         return left24[randomInt(0, 9)];
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Section 4.3.2.2(and comments 1 and 2).
1:6e8ab1f:      * The notation random a-string [x .. y] (respectively,
1:6e8ab1f:      * n-string [x ..y]) represents a string of random alphanumeric (respectively, 
1:6e8ab1f:      * numeric)characters of a random length of minimum x, maximum y, and mean (y+x)/2.
1:6e8ab1f:      * 
1:6e8ab1f:      * @return string value.
1:6e8ab1f:      */
1:6e8ab1f:     public String randomAString300_500() {
1:6e8ab1f:         String l = left300[randomInt(0, 9)];
1:6e8ab1f:         String r = right200[randomInt(0, 9)];
1:6e8ab1f: 
1:6e8ab1f:         return l.concat(r);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomAString10_20() {
1:6e8ab1f:         String l = left10[randomInt(0, 9)];
1:6e8ab1f:         String r = right10[randomInt(0, 9)];
1:6e8ab1f: 
1:6e8ab1f:         return l.concat(r);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomAString14_24() {
1:6e8ab1f:         String l = left14[randomInt(0, 9)];
1:6e8ab1f:         String r = right10[randomInt(0, 9)];
1:6e8ab1f: 
1:6e8ab1f:         return l.concat(r);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomAString26_50() {
1:6e8ab1f:         String l = left26[randomInt(0, 9)];
1:6e8ab1f:         String r = right24[randomInt(0, 9)];
1:6e8ab1f: 
1:6e8ab1f:         return l.concat(r);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     public String randomAString8_16() {
1:6e8ab1f:         String l = left8[randomInt(0, 9)];
1:6e8ab1f:         String r = right8[randomInt(0, 9)];
1:6e8ab1f: 
1:6e8ab1f:         return l.concat(r);
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:93d16ad
/////////////////////////////////////////////////////////////////////////
1:         // Since these objects may be created at the same time,
1:         // within the resolution of currentTimeMillis(), then
1:         // ensure they have different seeds.
1:         rand = new Random(System.currentTimeMillis() + oer.rand.nextLong());
commit:76c452e
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Create a matching OERandom, for use in multi-threaded
1:      * runs where all the submitters need to share the same
1:      * Clast, Cid and Citem values.
1:      * @param oer
1:      */
1:     public OERandom(OERandom oer) {
0:         rand = new Random(System.currentTimeMillis());
1:         Clast = oer.Clast;
1:         Cid = oer.Cid;
1:         Citem = oer.Citem;
1:     }
1:     public OERandom(int last, long seed) {
1:         Clast = last;
1:         Cid = this.randomInt(0, 255);
1:         Citem = this.randomInt(0, 255);
1:         
1:     public OERandom(int last) {
1:         this(last, System.currentTimeMillis());
commit:24e8abd
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Return a random carrier [1..10]
0:      * @return
1:      */
1:     public short carrier()
1:     {
1:         return (short) randomInt(1, 10);
1:     }
commit:8404f5d
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Payment amount between 1.00 and 5,000.00
1:      * @return Payment amount between 1.00 and 5,000.00
1:      */
1:     public BigDecimal payment()
1:     {
1:         return randomDecimal(1, 500000, 2);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         
1:         // First thousand customers (C_ID is one based)
1:         // have a fixed last name based upon the contiguous
1:         // values from 0-999, section 4.3.3.1
1:         if (cid <= 1000)
1:             return randomCLast(cid-1); // range 0 - 999
commit:9f7e882
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Return a random district [1..10]
0:      * @return
1:      */
1:     public short district()
1:     {
1:         return (short) randomInt(1, 10);
1:     }
1:      * Return a random threshold for the stock level [10..20]
0:      * @return
1:      */
1:     public int threshold()
1:     {
1:         return randomInt(10, 20);
1:     }
1:     
1:     /**
commit:6e8ab1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class OERandom
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.util;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.Random;
1: 
1: import org.apache.derbyTesting.system.oe.client.Load;
1: 
1: /**
1:  * Methods to implement the random database population types
1:  * for the Order Entry Benchmark. The rules for generating 
1:  * the random data is per the TPC-C specification.
1:  */
1: public class OERandom {
1: 
1:     final Random rand;
1: 
1:     protected final int Clast;
1: 
1:     protected final int Cid;
1: 
1:     protected final int Citem;
1: 
0:     public OERandom(int last, int id, int item, long seed) {
1: 
0:         Clast = last;
0:         Cid = id;
0:         Citem = item;
1:         rand = new Random(seed);
1:         initAStrings();
1:     }
1: 
0:     public OERandom(int last, int id, int item) {
0:         this(last, id, item, System.currentTimeMillis());
1:     }
1: 
1:     private static int[] RESCALE = { 0, 10, 100, 1000, 10000, 100000, 1000000 };
1: 
1:     private StringBuffer decimalString = new StringBuffer(12);
1: 
1:     public String randomDecimalString(int start, int end, int scale) {
1: 
1:         int val = randomInt(start, end);
1: 
1:         int whole = val / RESCALE[scale];
1: 
1:         int part = val % RESCALE[scale];
1: 
1:         decimalString.setLength(0);
1:         decimalString.append(whole);
1:         decimalString.append('.');
1: 
1:         int pos = decimalString.length();
1: 
1:         decimalString.append(part);
1: 
1:         int tempScale = decimalString.length() - pos;
1:         if (tempScale < scale) {
1:             for (int i = 0; i < (scale - tempScale); i++)
1:                 decimalString.insert(pos, '0');
1:         }
1: 
1:         return decimalString.toString();
1:     }
1: 
1:     public BigDecimal randomDecimal(int start, int end, int scale) {
1:         BigInteger bi = BigInteger.valueOf(randomInt(start, end));
1:         return new BigDecimal(bi, scale);
1:     }
1: 
1:     /**
1:      * tpcc 4.3.2.5 Implements random within [x .. y ] for int
1:      */
1:     public int randomInt(int start, int end) {
1:         double drand = rand.nextDouble();
1: 
1:         double rrand = (drand * (end - start)) + 0.5;
1: 
1:         return ((int) rrand) + start;
1:     }
1: 
1:     /**
1:      * tpcc 4.3.2.2 (random a string)
1:      */
1:     public String randomAString(int min, int max) {
1:         int len = randomInt(min, max);
1:         char[] c = new char[len];
1:         for (int i = 0; i < len; i++) {
1: 
1:             double drand = rand.nextDouble();
1: 
1:             if (i == 0) {
1:                 if (drand < 2.0)
1:                     c[0] = (char) randomInt((int) 'A', (int) 'Z');
1:                 else {
1:                     switch (randomInt(1, 10)) {
1:                     case 1:
1:                         c[0] = '\u00c0';
1:                         break;
1:                     case 2:
1:                         c[0] = '\u00c1';
1:                         break;
1:                     case 3:
1:                         c[0] = '\u00c2';
1:                         break;
1:                     case 4:
1:                         c[0] = '\u00ca';
1:                         break;
1:                     case 5:
1:                         c[0] = '\u00cb';
1:                         break;
1:                     case 6:
1:                         c[0] = '\u00d4';
1:                         break;
1:                     case 7:
1:                         c[0] = '\u00d8';
1:                         break;
1:                     case 8:
1:                         c[0] = '\u00d1';
1:                         break;
1:                     case 9:
1:                         c[0] = '\u00cd';
1:                         break;
1:                     default:
1:                         c[0] = '\u00dc';
1:                         break;
1:                     }
1:                 }
1: 
1:                 continue;
1:             }
1: 
1:             if (drand < 2.0)
1:                 c[i] = (char) randomInt((int) 'a', (int) 'z');
1:             else {
1:                 switch (randomInt(1, 10)) {
1:                 case 1:
1:                     c[i] = '\u00e2';
1:                     break;
1:                 case 2:
1:                     c[i] = '\u00e4';
1:                     break;
1:                 case 3:
1:                     c[i] = '\u00e7';
1:                     break;
1:                 case 4:
1:                     c[i] = '\u00e8';
1:                     break;
1:                 case 5:
1:                     c[i] = '\u00ec';
1:                     break;
1:                 case 6:
1:                     c[i] = '\u00ef';
1:                     break;
1:                 case 7:
1:                     c[i] = '\u00f6';
1:                     break;
1:                 case 8:
1:                     c[i] = '\u00f9';
1:                     break;
1:                 case 9:
1:                     c[i] = '\u00fc';
1:                     break;
1:                 default:
1:                     c[i] = '\u00e5';
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         return new String(c);
1:     }
1: 
1:     /**
1:      * tpcc 4.3.2.2 (random n string)
1:      */
1:     public String randomNString(int min, int max) {
1:         int len = randomInt(min, max);
1:         char[] c = new char[len];
1:         for (int i = 0; i < len; i++) {
1:             c[i] = (char) randomInt((int) '0', (int) '9');
1:         }
1: 
1:         return new String(c);
1:     }
1: 
1:     /**
1:      * tpcc 4.3.2.3
1:      */
1:     private final String[] SYLLABLES = { "BAR", "OUGHT", "ABLE", "PRI", "PRES",
1:             "ESE", "ANTI", "CALLY", "ATION", "EING" };
1: 
1:     protected String randomCLast(int n) {
1: 
1:         return SYLLABLES[n / 100] + SYLLABLES[(n / 10) % 10]
1:                 + SYLLABLES[n % 10];
1:     }
1: 
1:     /**
1:      * Generate the zipcode value
1:      * return zipcode value according to the requirements specified in 
1:      * Clause 4.3.2.7 of TPC-C spec
1:      */
1:     public String randomZIP() {
1:         return randomNString(4, 4) + "11111";
1:     }
1: 
1:     /**
1:      * Section 2.1.6 of TPC-C specification, for OL_I_ID NURand(A, x, y) =
1:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x C is a run-time
1:      * constant randomly chosen within [0 .. A] NURand(8191, 1,100000)
1:      * 
1:      * @return nonuniform random number
1:      */
1:     public int NURand8191() {
1:         int l = randomInt(0, 8191);
1:         int r = randomInt(1, Load.ITEM_COUNT);
1:         int C = randomInt(0, 8191);
1:         return ((l | r) + C) % (Load.ITEM_COUNT - 1 + 1) + 1;
1:     }
1: 
1:     /**
1:      * Section 2.1.6 of TPC-C specification for CID NURand(A, x, y) =
1:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x NURand(1023,
1:      * 1,3000)
1:      * 
1:      * @return nonuniform random number
1:      */
1:     public int NURand1023() {
1:         int l = randomInt(0, 1023);
1:         int r = randomInt(1, (Load.CUSTOMER_COUNT_W / Load.DISTRICT_COUNT_W));
1:         int C = randomInt(0, 1023);
1:         return ((l | r) + C)
1:                 % ((Load.CUSTOMER_COUNT_W / Load.DISTRICT_COUNT_W) - 1 + 1) + 1;
1:     }
1: 
1:     /**
1:      * Section 2.1.6 of TPC-C specification, for C_LAST NURand(A, x, y) =
1:      * (((random(0, A) | random(x, y)) + C) % (y - x + 1)) + x NURand(255,0,999)
1:      * 
1:      * @return nonuniform random number
1:      */
1:     public int NURand255() {
1:         int l = randomInt(0, 255);
1:         int r = randomInt(0, 999);
1:         int C = randomInt(0, 255);
1:         return ((l | r) + C) % (999 - 0 + 1) + 0;
1:     }
1: 
1:     public String randomState() {
1:         StringBuffer s = new StringBuffer(2);
1:         for (int i = 0; i < 2; i++) {
1:             s.append((char) randomInt((int) 'A', (int) 'Z'));
1:         }
1: 
1:         return s.toString();
1:     }
1: 
1:     /**
1:      * Clause 4.3.2.3 of the TPC-C specification
1:      * @param cid - customer id.
1:      * @return the generated Customer's last name per the requirements
1:      * in the TPC-C spec. 
1:      */
1:     public String randomCLastPopulate(int cid) {
0:         if (cid < 1000)
0:             return randomCLast(cid); // range 0 - 999
1: 
1:         return randomCLast(NURand255());
1:     }
1: 
1:     public String randomCLast() {
1:         return randomCLast(NURand255());
1:     }
1: 
1:     /**
1:      * Clause 4.3.3.1 of TPC-C spec. random a-string [26 .. 50]. For 10%
1:      * of the rows, selected at random, the string "ORIGINAL" must be held by 8
1:      * consecutive characters starting at a random position within the string
1:      * 
1:      * @return string data per the TPC-C requirements
1:      */
1:     public String randomData() {
1:         String s = randomAString26_50();
1:         if (rand.nextDouble() < 0.9)
1:             return s;
1: 
1:         int pos = randomInt(0, s.length() - 9);
1: 
1:         if (pos == 0)
1:             return "ORIGINAL" + s.substring(8);
1: 
1:         if (pos == (s.length() - 9))
1:             return s.substring(0, s.length() - 9) + "ORIGINAL";
1: 
1:         return s.substring(0, pos) + "ORIGINAL"
1:                 + s.substring(pos + 8, s.length());
1:     }
1: 
1:     public int[] randomIntPerm(int count) {
1:         int[] data = new int[count];
1: 
1:         for (int i = 0; i < count; i++) {
1:             data[i] = i + 1;
1:         }
1: 
1:         for (int j = 0; j < (count * 4); j++) {
1: 
1:             int a = randomInt(0, count - 1);
1:             int b = randomInt(0, count - 1);
1: 
1:             int val = data[a];
1:             data[a] = data[b];
1:             data[b] = val;
1:         }
1:         return data;
1:     }
1: 
1:     private final static String[] left24 = new String[10];
1: 
1:     private final static String[] left300 = new String[10];
1: 
1:     private final static String[] right200 = new String[10];
1: 
1:     private final static String[] left10 = new String[10];
1: 
1:     private final static String[] right10 = new String[10];
1: 
1:     private final static String[] left14 = new String[10];
1: 
1:     private final static String[] left26 = new String[10];
1: 
1:     private final static String[] right24 = new String[10];
1: 
1:     private final static String[] left8 = new String[10];
1: 
1:     private final static String[] right8 = new String[10];
1: 
1:     private static boolean doneInit;
1: 
1:     private void initAStrings() {
1: 
1:         synchronized (left24) {
1:             if (doneInit)
1:                 return;
1: 
1:             for (int i = 0; i < 10; i++) {
1:                 // 24..24
1:                 left24[i] = randomAString(24, 24);
1: 
1:                 // 300...500
1:                 left300[i] = randomAString(300, 300);
1:                 right200[i] = randomAString(0, 200);
1: 
1:                 // 10...20
1:                 left10[i] = randomAString(10, 10);
1:                 right10[i] = randomAString(0, 10);
1: 
1:                 // 14 .. 24
1:                 left14[i] = randomAString(10, 10);
1: 
1:                 // 26 .. 50
1:                 left26[i] = randomAString(26, 26);
1:                 right24[i] = randomAString(0, 24);
1: 
1:                 // 8 .. 16
1:                 left8[i] = randomAString(8, 8);
1:                 right8[i] = randomAString(0, 8);
1: 
1:             }
1:             doneInit = true;
1:         }
1:     }
1: 
1:     public String randomAString24() {
1:         return left24[randomInt(0, 9)];
1:     }
1: 
1:     /**
1:      * Section 4.3.2.2(and comments 1 and 2).
1:      * The notation random a-string [x .. y] (respectively,
1:      * n-string [x ..y]) represents a string of random alphanumeric (respectively, 
1:      * numeric)characters of a random length of minimum x, maximum y, and mean (y+x)/2.
1:      * 
1:      * @return string value.
1:      */
1:     public String randomAString300_500() {
1:         String l = left300[randomInt(0, 9)];
1:         String r = right200[randomInt(0, 9)];
1: 
1:         return l.concat(r);
1:     }
1: 
1:     public String randomAString10_20() {
1:         String l = left10[randomInt(0, 9)];
1:         String r = right10[randomInt(0, 9)];
1: 
1:         return l.concat(r);
1:     }
1: 
1:     public String randomAString14_24() {
1:         String l = left14[randomInt(0, 9)];
1:         String r = right10[randomInt(0, 9)];
1: 
1:         return l.concat(r);
1:     }
1: 
1:     public String randomAString26_50() {
1:         String l = left26[randomInt(0, 9)];
1:         String r = right24[randomInt(0, 9)];
1: 
1:         return l.concat(r);
1:     }
1: 
1:     public String randomAString8_16() {
1:         String l = left8[randomInt(0, 9)];
1:         String r = right8[randomInt(0, 9)];
1: 
1:         return l.concat(r);
1:     }
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================