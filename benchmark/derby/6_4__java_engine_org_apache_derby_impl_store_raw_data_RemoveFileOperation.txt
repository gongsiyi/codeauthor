1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.RemoveFileOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.store.access.FileResource;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /** 
1:eac0369: */
1:eac0369: 
1:eac0369: public class RemoveFileOperation implements Undoable
1:eac0369: {
1:eac0369: 	private String name;
1:eac0369: 	private long generationId;
1:eac0369: 	private boolean removeAtOnce;
1:eac0369: 
1:eac0369: 	transient private StorageFile fileToGo;
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable
1:eac0369: 	public RemoveFileOperation()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	RemoveFileOperation(String name, long generationId, boolean removeAtOnce)
1:eac0369: 	{
1:eac0369: 		this.name = name;
1:eac0369: 		this.generationId = generationId;
1:eac0369: 		this.removeAtOnce = removeAtOnce;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeUTF(name);
1:eac0369: 		out.writeLong(generationId);
1:eac0369: 		out.writeBoolean(removeAtOnce);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException 
1:eac0369: 	{
1:eac0369: 		name = in.readUTF();
1:eac0369: 		generationId = in.readLong();
1:eac0369: 		removeAtOnce = in.readBoolean();
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_REMOVE_FILE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the default for prepared log is always null for all the operations
1:eac0369: 		that don't have optionalData.  If an operation has optional data,
1:eac0369: 		the operation need to prepare the optional data for this method.
1:eac0369: 
1:eac0369: 		Space Operation has no optional data to write out
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void releaseResource(Transaction tran)
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A space operation is a RAWSTORE log record
1:eac0369: 	*/
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return Loggable.FILE_RESOURCE | Loggable.RAWSTORE ;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, 
1:eac0369: 						   LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (fileToGo == null)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		BaseDataFileFactory bdff = 
1:eac0369: 			(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
1:eac0369: 		
1:eac0369: 		bdff.fileToRemove(fileToGo, true);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public boolean needsRedo(Transaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (!removeAtOnce)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		FileResource fr = ((RawTransaction) xact).getDataFactory().getFileHandler();
1:eac0369: 
1:eac0369: 		fileToGo = fr.getAsFile(name, generationId);
1:eac0369: 
1:eac0369: 		if (fileToGo == null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369:         return fileToGo.exists();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1:eac0369: 		throws StandardException, IOException {
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (fileToGo != null) {
1:eac0369: 			BaseDataFileFactory bdff = 
1:eac0369: 				(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
1:eac0369: 		
1:eac0369: 			bdff.fileToRemove(fileToGo, false);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.RemoveFileOperation
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.store.access.FileResource;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.io.StorageFile;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /** 
1: */
1: 
1: public class RemoveFileOperation implements Undoable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private String name;
1: 	private long generationId;
1: 	private boolean removeAtOnce;
1: 
1: 	transient private StorageFile fileToGo;
1: 
1: 	// no-arg constructor, required by Formatable
1: 	public RemoveFileOperation()
1: 	{
1: 	}
1: 
1: 	RemoveFileOperation(String name, long generationId, boolean removeAtOnce)
1: 	{
1: 		this.name = name;
1: 		this.generationId = generationId;
1: 		this.removeAtOnce = removeAtOnce;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeUTF(name);
1: 		out.writeLong(generationId);
1: 		out.writeBoolean(removeAtOnce);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException 
1: 	{
1: 		name = in.readUTF();
1: 		generationId = in.readLong();
1: 		removeAtOnce = in.readBoolean();
1: 	}
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_REMOVE_FILE;
1: 	}
1: 
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/**
1: 		the default for prepared log is always null for all the operations
1: 		that don't have optionalData.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		Space Operation has no optional data to write out
1: 	*/
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return null;
1: 	}
1: 
1: 	public void releaseResource(Transaction tran)
1: 	{
1: 	}
1: 
1: 	/**
1: 		A space operation is a RAWSTORE log record
1: 	*/
1: 	public int group()
1: 	{
1: 		return Loggable.FILE_RESOURCE | Loggable.RAWSTORE ;
1: 	}
1: 
1: 	public void doMe(Transaction xact, LogInstant instant, 
1: 						   LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 		if (fileToGo == null)
1: 			return;
1: 
1: 		BaseDataFileFactory bdff = 
1: 			(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
1: 		
1: 		bdff.fileToRemove(fileToGo, true);
1: 	}
1: 
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 		 throws StandardException
1: 	{
1: 		if (!removeAtOnce)
1: 			return false;
1: 
1: 		FileResource fr = ((RawTransaction) xact).getDataFactory().getFileHandler();
1: 
1: 		fileToGo = fr.getAsFile(name, generationId);
1: 
1: 		if (fileToGo == null)
1: 			return false;
1: 
1:         return fileToGo.exists();
1: 	}
1: 
1: 
1: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1: 		throws StandardException, IOException {
1: 
1: 
1: 		if (fileToGo != null) {
1: 			BaseDataFileFactory bdff = 
1: 				(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
1: 		
1: 			bdff.fileToRemove(fileToGo, false);
1: 		}
1: 
1: 		return null;
1: 	}
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.store.access.FileResource;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.io.StorageFile;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /** 
0: */
0: 
0: public class RemoveFileOperation implements Undoable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private String name;
0: 	private long generationId;
0: 	private boolean removeAtOnce;
0: 
0: 	transient private StorageFile fileToGo;
0: 
0: 	// no-arg constructor, required by Formatable
0: 	public RemoveFileOperation()
0: 	{
0: 	}
0: 
0: 	RemoveFileOperation(String name, long generationId, boolean removeAtOnce)
0: 	{
0: 		this.name = name;
0: 		this.generationId = generationId;
0: 		this.removeAtOnce = removeAtOnce;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeUTF(name);
0: 		out.writeLong(generationId);
0: 		out.writeBoolean(removeAtOnce);
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException 
0: 	{
0: 		name = in.readUTF();
0: 		generationId = in.readLong();
0: 		removeAtOnce = in.readBoolean();
0: 	}
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_REMOVE_FILE;
0: 	}
0: 
0: 
0: 	/**
0: 		Loggable methods
0: 	*/
0: 
0: 	/**
0: 		the default for prepared log is always null for all the operations
0: 		that don't have optionalData.  If an operation has optional data,
0: 		the operation need to prepare the optional data for this method.
0: 
0: 		Space Operation has no optional data to write out
0: 	*/
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	public void releaseResource(Transaction tran)
0: 	{
0: 	}
0: 
0: 	/**
0: 		A space operation is a RAWSTORE log record
0: 	*/
0: 	public int group()
0: 	{
0: 		return Loggable.FILE_RESOURCE | Loggable.RAWSTORE ;
0: 	}
0: 
0: 	public void doMe(Transaction xact, LogInstant instant, 
0: 						   LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 		if (fileToGo == null)
0: 			return;
0: 
0: 		BaseDataFileFactory bdff = 
0: 			(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
0: 		
0: 		bdff.fileToRemove(fileToGo, true);
0: 	}
0: 
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public boolean needsRedo(Transaction xact)
0: 		 throws StandardException
0: 	{
0: 		if (!removeAtOnce)
0: 			return false;
0: 
0: 		FileResource fr = ((RawTransaction) xact).getDataFactory().getFileHandler();
0: 
0: 		fileToGo = fr.getAsFile(name, generationId);
0: 
0: 		if (fileToGo == null)
0: 			return false;
0: 
0:         return fileToGo.exists();
0: 	}
0: 
0: 
0: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
0: 		throws StandardException, IOException {
0: 
0: 
0: 		if (fileToGo != null) {
0: 			BaseDataFileFactory bdff = 
0: 				(BaseDataFileFactory) ((RawTransaction) xact).getDataFactory();
0: 		
0: 			bdff.fileToRemove(fileToGo, false);
0: 		}
0: 
0: 		return null;
0: 	}
0: }
0: 
0: 
============================================================================