1:d893170: /*
5:d893170: 
1:d893170: Derby - Class org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest
1:d893170: 
1:d893170: Licensed to the Apache Software Foundation (ASF) under one or more
1:d893170: contributor license agreements.  See the NOTICE file distributed with
1:d893170: this work for additional information regarding copyright ownership.
1:d893170: The ASF licenses this file to You under the Apache License, Version 2.0
1:d893170: (the "License"); you may not use this file except in compliance with
1:d893170: the License.  You may obtain a copy of the License at
1:d893170: 
1:d893170:    http://www.apache.org/licenses/LICENSE-2.0
1:d893170: 
1:d893170: Unless required by applicable law or agreed to in writing, software
1:d893170: distributed under the License is distributed on an "AS IS" BASIS,
1:d893170: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d893170: See the License for the specific language governing permissions and
1:d893170: limitations under the License.
1:d893170: 
1:d893170: */
1:d893170: 
1:d893170: package org.apache.derbyTesting.functionTests.tests.memory;
1:d893170: 
1:c5a7100: import java.io.File;
1:d893170: import java.sql.Connection;
1:d893170: import java.sql.PreparedStatement;
1:d893170: import java.sql.ResultSet;
1:c5a7100: import java.sql.SQLException;
1:d893170: import java.sql.Statement;
1:d893170: 
1:c5a7100: import javax.sql.DataSource;
1:d893170: import junit.framework.Test;
1:d893170: 
1:c5a7100: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:d893170: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:028d92e: import org.apache.derbyTesting.junit.JDBC;
1:c5a7100: import org.apache.derbyTesting.junit.JDBCDataSource;
1:d893170: import org.apache.derbyTesting.junit.TestConfiguration;
1:d893170: 
1:d893170: /**
1:d893170:  * MemoryLeakFixesTest should be run with -Xmx16M or run 
1:d893170:  * as part of the ant junit-lowmem target. The test is
1:d893170:  * generally successful if it does not run out of memory.
1:d893170:  * Results are not typically checked.
1:d893170:  *
1:d893170:  */
1:d893170: 
1:d893170: public class MemoryLeakFixesTest extends BaseJDBCTestCase {
1:d893170: 
1:d893170:     public MemoryLeakFixesTest(String name) {
1:d893170:         super(name);
2:d893170:     }
1:d893170:     private static long HALFMB = 500*1024;
1:c5a7100:     
1:d893170:     private static int numRows = 100;
1:d893170:     private static int numPreparedStmts = 2000;
1:d893170: 
1:d893170: 
1:d893170:     // Tests prepared statements are not leaked if not explicitly closed by
1:d893170:     // user (DERBY-210)
1:d893170:     public void testPrepStmtD210() throws Exception
1:d893170:     {
1:d893170:         Connection conn = getConnection();
1:d893170:         PreparedStatement ps = null;
1:d893170:         ResultSet rs = null;
1:d893170:         conn.setAutoCommit(false);
1:d893170: 
1:d893170:         Statement stmt = createStatement();
1:d893170: 
1:d893170:         stmt.execute("create table t1 (lvc  LONG VARCHAR)");
1:d893170:         stmt.close();
1:d893170: 
1:d893170:         String insertTabSql = "insert into t1 values(?)";
1:d893170:         ps = conn.prepareStatement(insertTabSql);
1:d893170:         for (int i = 0; i < numRows; i++)
1:d893170:         {
1:d893170:             ps.setString(1,"Hello" + i);
1:d893170:             ps.executeUpdate();
1:d893170:         }
1:d893170:         ps.close();
1:d893170: 
1:d893170: 
1:d893170: 
1:d893170:         String selTabSql = "select * from t1";
1:d893170: 
1:d893170:         for (int i = 0 ; i  < numPreparedStmts; i++)
1:d893170:         {
1:d893170:             ps = conn.prepareStatement(selTabSql);
1:d893170:             rs = ps.executeQuery();
1:d893170: 
1:d893170:             while (rs.next())
1:d893170:             {
1:d893170:                 rs.getString(1);
1:d893170:             }
1:d893170: 
1:d893170:             rs.close();
1:d893170: 
1:d893170:             // Do not close the prepared statement
1:d893170:             // because we want to check that it is
1:d893170:             // garbage collected
1:d893170:             //ps.close();
1:d893170:             if ((i % 100) == 0)
1:d893170:                 runFinalizerIfNeeded();
1:d893170:         }
1:d893170:         conn.commit();
1:d893170:     }
1:d893170: 
1:d893170:     // Tests re-execution of a statement without closing the result
1:d893170:     // set (DERBY-557).
1:d893170:     public void testReExecuteD557() throws Exception {
1:d893170:         println("DERBY-557: reExecuteStatementTest() ");
1:d893170:         Connection conn = getConnection();
1:d893170:         Statement stmt = conn.createStatement();
1:d893170:         for (int i = 0; i < 50000; i++) {
1:d893170:             if ((i % 1000) == 0)
1:d893170:                 runFinalizerIfNeeded();
1:d893170:             ResultSet rs = stmt.executeQuery("values(1)");
1:d893170:             // How silly! I forgot to close the result set.
1:d893170:         }
1:d893170:         conn.commit();
1:d893170:         stmt.close();
1:d893170:         conn.close();
1:d893170:     }
1:d893170: 
1:d893170:     /**
1:d893170:      * Test fix for leak if ResultSets are not closed.
1:d893170:      * @throws Exception
1:d893170:      */
1:d893170:     public void testResultSetgcD3316() throws Exception {
1:d893170:           println("DERBY-3316: Multiple statement executions ");
1:d893170:                 
1:d893170:           Connection conn = getConnection();
1:d893170:           Statement s = createStatement();
1:d893170:           s.executeUpdate("CREATE TABLE TAB (col1 varchar(32672))");
1:d893170:           PreparedStatement ps = conn.prepareStatement("INSERT INTO TAB VALUES(?)");
1:d893170:           ps.setString(1,"hello");
1:d893170:           ps.executeUpdate();
1:d893170:           ps.setString(1,"hello");
1:d893170:           ps.executeUpdate();
1:d893170:           ps.close();
1:d893170:           for (int i = 0; i < 2000; i++)
1:d893170:           {
1:d893170:                   s = conn.createStatement();
1:d893170:                   ResultSet rs = s.executeQuery("SELECT * from tab");
1:d893170:                   // drain the resultset
1:d893170:                   while (rs.next());
1:d893170:                   // With DERBY-3316, If I don't explicitly close the resultset or 
1:d893170:                   // statement, we get a leak.
1:d893170:                   //rs.close();
1:d893170:                   //s.close();
1:d893170:                   if ((i % 100) == 0) 
1:d893170:                        runFinalizerIfNeeded();
1:d893170:                   
1:d893170:           }    
1:d893170:           // close the connection to free up all the result sets that our sloppy 
1:d893170:           // user didn't close.
1:d893170:           conn.close();
1:d893170:           conn = getConnection();
1:d893170:           s = conn.createStatement();
1:d893170:           s.executeUpdate("DROP TABLE TAB");
1:d893170:           s.close();
1:d893170:           conn.close();
1:d893170:        }
1:d893170: 
1:d893170:     /**
1:c5a7100:      * Tests that the memory usage dosen't increase for each database that is
1:c5a7100:      * created.
1:c5a7100:      * <p>
1:c5a7100:      * The tests is primarily written to ensure that the automatic index
1:c5a7100:      * statistics daemon doesn't cause memory leakage. One one database is
1:c5a7100:      * active/booted at a time.
1:c5a7100:      * <p>
1:c5a7100:      * See DERBY-5336.
1:c5a7100:      *
1:c5a7100:      * @throws SQLException if something goes wrong
1:c5a7100:      */
1:c5a7100:     public void testRepeatedDatabaseCreationWithAutoStats()
1:c5a7100:             throws SQLException {
1:c5a7100:         final String DB_NAME = "derby-memory-test";
1:c5a7100:         final File DB_DIR = new File("system", DB_NAME);
1:c5a7100:         DataSource ds = JDBCDataSource.getDataSource(DB_NAME);
1:c5a7100:     
1:c5a7100:         // using -Xmx32M typically causes the out of memory error to appear
1:c5a7100:         // within 20 iterations;  this program was run on Windows 7 64-bit using
1:c5a7100:         // jdk1.6.0_26
1:c5a7100:         int iter = 0;
1:028d92e:         while (iter < 20) {
1:c5a7100:             
1:b3afe2d:             println("-- " + iter++);
1:c5a7100:             
1:c5a7100:             // remove database directory so we can start fresh each time;
1:c5a7100:             // the memory leak also manifests when a different directory is
1:c5a7100:             // used each time through, i.e. it is not required that the
1:c5a7100:             // database be created in the same location over and over
1:c5a7100:             if (PrivilegedFileOpsForTests.exists(DB_DIR)) {
1:c5a7100:                 assertDirectoryDeleted(DB_DIR);
1:c5a7100:             }
1:c5a7100:             
1:c5a7100:             // create the database
1:c5a7100:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:c5a7100:             Connection conn = ds.getConnection();
1:c5a7100:             JDBCDataSource.clearStringBeanProperty(ds, "createDatabase");
1:028d92e: 
1:028d92e:             // Disable auto-commit to speed up insert statements.
1:028d92e:             conn.setAutoCommit(false);
1:c5a7100:             
1:c5a7100:             // we'll use this one statement the whole time this db is open
1:c5a7100:             Statement s = conn.createStatement();
1:c5a7100:             
1:c5a7100:             // create a simple schema; the presence of the index is important
1:c5a7100:             // somehow as the memory leak does not appear without it
1:c5a7100:             s.executeUpdate("CREATE TABLE TEST (CINT INT)");
1:c5a7100:             s.executeUpdate("CREATE INDEX NDX ON TEST (CINT)");
1:028d92e: 
1:028d92e:             // Insert enough data into the table to make a select from the
1:028d92e:             // table trigger the daemon that updates index cardinality
1:028d92e:             // statistics. derby.storage.indexStats.debug.createThreshold is
1:028d92e:             // currently 100.
1:028d92e:             PreparedStatement ins =
1:028d92e:                     conn.prepareStatement("INSERT INTO TEST VALUES ?");
1:028d92e:             for (int i = 0; i < 200; i++) {
1:028d92e:                 ins.setInt(1, i);
1:028d92e:                 ins.executeUpdate();
1:c5a7100:             }
1:028d92e:             ins.close();
1:028d92e: 
1:028d92e:             conn.commit();
1:028d92e: 
1:028d92e:             // Execute a query against the table. This will make the index
1:028d92e:             // statistics daemon do its work.
1:028d92e:             JDBC.assertDrainResults(
1:028d92e:                     s.executeQuery("SELECT * FROM TEST WHERE CINT=42"));
1:028d92e: 
1:c5a7100:             // done with statement and connection
1:c5a7100:             s.close();
1:028d92e:             conn.rollback();
1:c5a7100:             conn.close();
1:c5a7100:             
1:c5a7100:             // shutdown this database, but not entire derby engine
1:c5a7100:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:c5a7100:             try {
1:c5a7100:                 ds.getConnection();
1:dc5f56a:                 fail("Expected shutdown exception");
1:c5a7100:             } catch (SQLException e) {
1:c5a7100:                 assertSQLState("08006", e);
1:c5a7100:             } finally {
1:c5a7100:                 JDBCDataSource.clearStringBeanProperty(ds, "shutdownDatabase");
1:dc5f56a:             }
1:dc5f56a: 
1:c5a7100:         }
1:c5a7100: 
1:c5a7100:         // extra sanity check making sure that the database was created in the
1:c5a7100:         // location we assumed
1:c5a7100:         assertTrue(PrivilegedFileOpsForTests.exists(DB_DIR));
1:c5a7100:     }
1:c5a7100: 
1:c5a7100:     /**
1:d893170:      * runFinalizerIfNeeded is called periodically for DERBY-4200. With the IBM
1:d893170:      * JVM in some modes, like soft real time or in a single threaded
1:d893170:      * environment on vmware. The finalizer may lag behind the program so much
1:d893170:      * we get an OOM. If we get low on memory, force the finalizer to catch up.
1:d893170:      * 
1:d893170:      */
1:d893170:     private static void runFinalizerIfNeeded() {
1:c5a7100:         
1:d893170:         Runtime rt = Runtime.getRuntime();
1:d893170:         if (rt.freeMemory() < HALFMB){
1:d893170:             println("Waiting for finalizer ");
1:d893170:             rt.runFinalization();
1:c5a7100:             
1:c5a7100: 
1:c5a7100:         }
1:d893170: 
1:d893170:     }
1:d893170:     
1:d893170:     public static Test suite() {
1:d893170:         Test suite = TestConfiguration.defaultSuite(MemoryLeakFixesTest.class);
1:d893170:         return suite;
1:d893170:     }
1:d893170: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a07b078
/////////////////////////////////////////////////////////////////////////
commit:028d92e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         while (iter < 20) {
/////////////////////////////////////////////////////////////////////////
1: 
1:             // Disable auto-commit to speed up insert statements.
1:             conn.setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:             // Insert enough data into the table to make a select from the
1:             // table trigger the daemon that updates index cardinality
1:             // statistics. derby.storage.indexStats.debug.createThreshold is
1:             // currently 100.
1:             PreparedStatement ins =
1:                     conn.prepareStatement("INSERT INTO TEST VALUES ?");
1:             for (int i = 0; i < 200; i++) {
1:                 ins.setInt(1, i);
1:                 ins.executeUpdate();
1:             ins.close();
1: 
1:             conn.commit();
1: 
1:             // Execute a query against the table. This will make the index
1:             // statistics daemon do its work.
1:             JDBC.assertDrainResults(
1:                     s.executeQuery("SELECT * FROM TEST WHERE CINT=42"));
1: 
1:             conn.rollback();
commit:dc5f56a
/////////////////////////////////////////////////////////////////////////
1:                 fail("Expected shutdown exception");
1: 
0:             if (isPhoneME()) {
0:                 // DERBY-5412: phoneME fails after some iterations because the
0:                 // number of class names exceeds a VM limit. If we invoke
0:                 // garbage collection manually, it seems to be able to reclaim
0:                 // the classes that are no longer in use, and complete the test.
0:                 Runtime.getRuntime().gc();
1:             }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b3afe2d
/////////////////////////////////////////////////////////////////////////
1:             println("-- " + iter++);
commit:c5a7100
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.sql.SQLException;
1: import javax.sql.DataSource;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:      * Tests that the memory usage dosen't increase for each database that is
1:      * created.
1:      * <p>
1:      * The tests is primarily written to ensure that the automatic index
1:      * statistics daemon doesn't cause memory leakage. One one database is
1:      * active/booted at a time.
1:      * <p>
1:      * See DERBY-5336.
1:      *
1:      * @throws SQLException if something goes wrong
1:      */
1:     public void testRepeatedDatabaseCreationWithAutoStats()
1:             throws SQLException {
1:         final String DB_NAME = "derby-memory-test";
1:         final File DB_DIR = new File("system", DB_NAME);
1:         DataSource ds = JDBCDataSource.getDataSource(DB_NAME);
1:     
1:         // using -Xmx32M typically causes the out of memory error to appear
1:         // within 20 iterations;  this program was run on Windows 7 64-bit using
1:         // jdk1.6.0_26
1:         int iter = 0;
0:         while (iter < 50) {
1:             
0:             traceit("-- " + iter++);
1:             
1:             // remove database directory so we can start fresh each time;
1:             // the memory leak also manifests when a different directory is
1:             // used each time through, i.e. it is not required that the
1:             // database be created in the same location over and over
1:             if (PrivilegedFileOpsForTests.exists(DB_DIR)) {
1:                 assertDirectoryDeleted(DB_DIR);
1:             }
1:             
1:             // create the database
1:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:             Connection conn = ds.getConnection();
1:             JDBCDataSource.clearStringBeanProperty(ds, "createDatabase");
1:             
1:             // we'll use this one statement the whole time this db is open
1:             Statement s = conn.createStatement();
1:             
1:             // create a simple schema; the presence of the index is important
1:             // somehow as the memory leak does not appear without it
1:             s.executeUpdate("CREATE TABLE TEST (CINT INT)");
1:             s.executeUpdate("CREATE INDEX NDX ON TEST (CINT)");
1:             
0:             // perform some updates and queries; it seems that the number of
0:             // iterations here is important and that there is a threshold that
0:             // must be crossed; e.g. in my tests the memory leak would not
0:             // manifest with 105 iterations but it would with 106 iterations
0:             for (int i = 0; i < 500; i++) {
1:                 
0:                 // both update and query are important; removing either one
0:                 // causes the memory leak not to appear;  the order in which
0:                 // they are executed, however, does not seem to be important
0:                 s.executeUpdate("INSERT INTO TEST VALUES(" + i + ")");
0:                 s.executeQuery("SELECT * FROM TEST WHERE CINT=" + i).close();
1:                 
1:             }
1:             
1:             // done with statement and connection
1:             s.close();
1:             conn.close();
1:             
1:             // shutdown this database, but not entire derby engine
1:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:             try {
1:                 ds.getConnection();
1:             } catch (SQLException e) {
1:                 assertSQLState("08006", e);
1:             } finally {
1:                 JDBCDataSource.clearStringBeanProperty(ds, "shutdownDatabase");
1:             }
1:         }
1: 
1:         // extra sanity check making sure that the database was created in the
1:         // location we assumed
1:         assertTrue(PrivilegedFileOpsForTests.exists(DB_DIR));
1:     }
1: 
1:     /**
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d893170
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * MemoryLeakFixesTest should be run with -Xmx16M or run 
1:  * as part of the ant junit-lowmem target. The test is
1:  * generally successful if it does not run out of memory.
1:  * Results are not typically checked.
1:  *
1:  */
1: 
1: public class MemoryLeakFixesTest extends BaseJDBCTestCase {
1: 
1:     public MemoryLeakFixesTest(String name) {
1:         super(name);
1:     }
1:     private static long HALFMB = 500*1024;
1:     
1:     private static int numRows = 100;
1:     private static int numPreparedStmts = 2000;
1: 
1: 
1:     // Tests prepared statements are not leaked if not explicitly closed by
1:     // user (DERBY-210)
1:     public void testPrepStmtD210() throws Exception
1:     {
1:         Connection conn = getConnection();
1:         PreparedStatement ps = null;
1:         ResultSet rs = null;
1:         conn.setAutoCommit(false);
1: 
1:         Statement stmt = createStatement();
1: 
1:         stmt.execute("create table t1 (lvc  LONG VARCHAR)");
1:         stmt.close();
1: 
1:         String insertTabSql = "insert into t1 values(?)";
1:         ps = conn.prepareStatement(insertTabSql);
1:         for (int i = 0; i < numRows; i++)
1:         {
1:             ps.setString(1,"Hello" + i);
1:             ps.executeUpdate();
1:         }
1:         ps.close();
1: 
1: 
1: 
1:         String selTabSql = "select * from t1";
1: 
1:         for (int i = 0 ; i  < numPreparedStmts; i++)
1:         {
1:             ps = conn.prepareStatement(selTabSql);
1:             rs = ps.executeQuery();
1: 
1:             while (rs.next())
1:             {
1:                 rs.getString(1);
1:             }
1: 
1:             rs.close();
1: 
1:             // Do not close the prepared statement
1:             // because we want to check that it is
1:             // garbage collected
1:             //ps.close();
1:             if ((i % 100) == 0)
1:                 runFinalizerIfNeeded();
1:         }
1:         conn.commit();
1:     }
1: 
1:     // Tests re-execution of a statement without closing the result
1:     // set (DERBY-557).
1:     public void testReExecuteD557() throws Exception {
1:         println("DERBY-557: reExecuteStatementTest() ");
1:         Connection conn = getConnection();
1:         Statement stmt = conn.createStatement();
1:         for (int i = 0; i < 50000; i++) {
1:             if ((i % 1000) == 0)
1:                 runFinalizerIfNeeded();
1:             ResultSet rs = stmt.executeQuery("values(1)");
1:             // How silly! I forgot to close the result set.
1:         }
1:         conn.commit();
1:         stmt.close();
1:         conn.close();
1:     }
1: 
1:     /**
1:      * Test fix for leak if ResultSets are not closed.
1:      * @throws Exception
1:      */
1:     public void testResultSetgcD3316() throws Exception {
1:           println("DERBY-3316: Multiple statement executions ");
1:                 
1:           Connection conn = getConnection();
1:           Statement s = createStatement();
1:           s.executeUpdate("CREATE TABLE TAB (col1 varchar(32672))");
1:           PreparedStatement ps = conn.prepareStatement("INSERT INTO TAB VALUES(?)");
1:           ps.setString(1,"hello");
1:           ps.executeUpdate();
1:           ps.setString(1,"hello");
1:           ps.executeUpdate();
1:           ps.close();
1:           for (int i = 0; i < 2000; i++)
1:           {
1:                   s = conn.createStatement();
1:                   ResultSet rs = s.executeQuery("SELECT * from tab");
1:                   // drain the resultset
1:                   while (rs.next());
1:                   // With DERBY-3316, If I don't explicitly close the resultset or 
1:                   // statement, we get a leak.
1:                   //rs.close();
1:                   //s.close();
1:                   if ((i % 100) == 0) 
1:                        runFinalizerIfNeeded();
1:                   
1:           }    
1:           // close the connection to free up all the result sets that our sloppy 
1:           // user didn't close.
1:           conn.close();
1:           conn = getConnection();
1:           s = conn.createStatement();
1:           s.executeUpdate("DROP TABLE TAB");
1:           s.close();
1:           conn.close();
1:        }
1: 
1:     /**
1:      * runFinalizerIfNeeded is called periodically for DERBY-4200. With the IBM
1:      * JVM in some modes, like soft real time or in a single threaded
1:      * environment on vmware. The finalizer may lag behind the program so much
1:      * we get an OOM. If we get low on memory, force the finalizer to catch up.
1:      * 
1:      */
1:     private static void runFinalizerIfNeeded() {
1:         
1:         Runtime rt = Runtime.getRuntime();
1:         if (rt.freeMemory() < HALFMB){
1:             println("Waiting for finalizer ");
1:             rt.runFinalization();
1:             
1: 
1:         }
1: 
1:     }
1:     
1:     public static Test suite() {
1:         Test suite = TestConfiguration.defaultSuite(MemoryLeakFixesTest.class);
1:         return suite;
1:     }
1: }
============================================================================