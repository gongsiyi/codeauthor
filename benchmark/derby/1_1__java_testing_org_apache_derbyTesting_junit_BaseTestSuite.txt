1:1ae02c9: /*
1:1ae02c9: 
1:1ae02c9:    Derby - Class org.apache.derbyTesting.junit.BaseTestSuite
1:1ae02c9: 
1:1ae02c9:    Licensed to the Apache Software Foundation (ASF) under one
1:1ae02c9:    or more contributor license agreements.  See the NOTICE file
1:1ae02c9:    distributed with this work for additional information
1:1ae02c9:    regarding copyright ownership.  The ASF licenses this file
1:1ae02c9:    to you under the Apache License, Version 2.0 (the
1:1ae02c9:    "License"); you may not use this file except in compliance
1:1ae02c9:    with the License.  You may obtain a copy of the License at
1:1ae02c9: 
1:1ae02c9:      http://www.apache.org/licenses/LICENSE-2.0
1:1ae02c9: 
1:1ae02c9:    Unless required by applicable law or agreed to in writing,
1:1ae02c9:    software distributed under the License is distributed on an
1:1ae02c9:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1ae02c9:    KIND, either express or implied.  See the License for the
1:1ae02c9:    specific language governing permissions and limitations
1:1ae02c9:    under the License.
1:1ae02c9: 
1:1ae02c9:  */
1:1ae02c9: package org.apache.derbyTesting.junit;
1:1ae02c9: 
1:1ae02c9: import java.util.ArrayList;
1:1ae02c9: import java.util.Collections;
1:1ae02c9: import java.util.Comparator;
1:1ae02c9: import java.util.Enumeration;
1:1ae02c9: import junit.framework.TestCase;
1:1ae02c9: import junit.framework.TestSuite;
1:1ae02c9: 
1:1ae02c9: /**
1:844595b:  * Derby replacement for {@code junit.framework.TestSuite}. This version, when
1:844595b:  * provided with a {@code Class} argument in a constructor or method,
1:844595b:  * constructs a {@code TestSuite} with a lexicographically sorted set of
1:844595b:  * fixtures (i.e. test cases) to avoid random fixture ordering (after Java
1:844595b:  * 6). Its usage is similar to the original JUnit {@code TestSuite} class.
1:1ae02c9:  */
1:1ae02c9: public class BaseTestSuite extends TestSuite {
1:1ae02c9: 
1:1ae02c9:     public BaseTestSuite() {
1:1ae02c9:         super();
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     public BaseTestSuite(String name) {
1:1ae02c9:         super(name);
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     public BaseTestSuite(Class cls, String name) {
1:1ae02c9:         super(name);
1:1ae02c9:         orderedSuite(cls);
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     public BaseTestSuite(Class cls) {
1:1ae02c9:         super(TestConfiguration.suiteName(cls));
1:1ae02c9:         orderedSuite(cls);
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     @Override
1:1ae02c9:     public void addTestSuite(Class cls) {
1:1ae02c9:         orderedSuite(cls);
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     private void orderedSuite(Class<?> cls) {
1:1ae02c9:         // Extract all tests from the test class and order them.
1:1ae02c9:         ArrayList<TestCase> tests = new ArrayList<TestCase>();
1:1ae02c9: 
1:1ae02c9:         Enumeration<?> e = new TestSuite(cls).tests();
1:1ae02c9: 
1:1ae02c9:         while (e.hasMoreElements()) {
1:1ae02c9:             tests.add((TestCase) e.nextElement());
1:1ae02c9:         }
1:1ae02c9: 
1:1ae02c9:         Collections.sort(tests, TEST_ORDERER);
1:1ae02c9: 
1:1ae02c9:         for (TestCase t : tests) {
1:1ae02c9:             addTest(t);
1:1ae02c9:         }
1:1ae02c9:     }
1:1ae02c9: 
1:1ae02c9:     /**
1:1ae02c9:      * A comparator that orders {@code TestCase}s lexicographically by
1:1ae02c9:      * their names.
1:1ae02c9:      */
1:1ae02c9:     private static final Comparator<TestCase> TEST_ORDERER =
1:1ae02c9:             new Comparator<TestCase>() {
1:1ae02c9:         @Override
1:1ae02c9:         public int compare(TestCase t1, TestCase t2) {
1:1ae02c9:             return t1.getName().compareTo(t2.getName());
1:1ae02c9:         }
1:1ae02c9:     };
1:1ae02c9: 
1:1ae02c9: 
1:1ae02c9: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:844595b
/////////////////////////////////////////////////////////////////////////
1:  * Derby replacement for {@code junit.framework.TestSuite}. This version, when
1:  * provided with a {@code Class} argument in a constructor or method,
1:  * constructs a {@code TestSuite} with a lexicographically sorted set of
1:  * fixtures (i.e. test cases) to avoid random fixture ordering (after Java
1:  * 6). Its usage is similar to the original JUnit {@code TestSuite} class.
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.BaseTestSuite
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Enumeration;
1: import junit.framework.TestCase;
1: import junit.framework.TestSuite;
1: 
1: /**
0:  * Derby replacement for TestSuite. This version, when provided with a
0:  * {@code Class} argument in a constructor or method, constructs a
0:  * {@code TestSuite} with a lexicographically sorted set of fixtures (i.e. test
0:  * cases) to avoid random fixture ordering (after Java 6). Its usage is similar
0:  * to the original JUnit TestSuite class.
1:  */
1: public class BaseTestSuite extends TestSuite {
1: 
1:     public BaseTestSuite() {
1:         super();
1:     }
1: 
1:     public BaseTestSuite(String name) {
1:         super(name);
1:     }
1: 
1:     public BaseTestSuite(Class cls, String name) {
1:         super(name);
1:         orderedSuite(cls);
1:     }
1: 
1:     public BaseTestSuite(Class cls) {
1:         super(TestConfiguration.suiteName(cls));
1:         orderedSuite(cls);
1:     }
1: 
1:     @Override
1:     public void addTestSuite(Class cls) {
1:         orderedSuite(cls);
1:     }
1: 
1:     private void orderedSuite(Class<?> cls) {
1:         // Extract all tests from the test class and order them.
1:         ArrayList<TestCase> tests = new ArrayList<TestCase>();
1: 
1:         Enumeration<?> e = new TestSuite(cls).tests();
1: 
1:         while (e.hasMoreElements()) {
1:             tests.add((TestCase) e.nextElement());
1:         }
1: 
1:         Collections.sort(tests, TEST_ORDERER);
1: 
1:         for (TestCase t : tests) {
1:             addTest(t);
1:         }
1:     }
1: 
1:     /**
1:      * A comparator that orders {@code TestCase}s lexicographically by
1:      * their names.
1:      */
1:     private static final Comparator<TestCase> TEST_ORDERER =
1:             new Comparator<TestCase>() {
1:         @Override
1:         public int compare(TestCase t1, TestCase t2) {
1:             return t1.getName().compareTo(t2.getName());
1:         }
1:     };
1: 
1: 
1: }
============================================================================