1:1643c9c: /*
1:1643c9c: 
1:1643c9c:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.LockTableVtiTest
1:1643c9c: 
1:1643c9c:  Licensed to the Apache Software Foundation (ASF) under one or more
1:1643c9c:  contributor license agreements.  See the NOTICE file distributed with
1:1643c9c:  this work for additional information regarding copyright ownership.
1:1643c9c:  The ASF licenses this file to You under the Apache License, Version 2.0
1:1643c9c:  (the "License"); you may not use this file except in compliance with
1:1643c9c:  the License.  You may obtain a copy of the License at
1:1643c9c: 
1:1643c9c:  http://www.apache.org/licenses/LICENSE-2.0
1:1643c9c: 
1:1643c9c:  Unless required by applicable law or agreed to in writing, software
1:1643c9c:  distributed under the License is distributed on an "AS IS" BASIS,
1:1643c9c:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1643c9c:  See the License for the specific language governing permissions and
1:1643c9c:  limitations under the License.
1:1643c9c: 
2:1643c9c:  */
1:1643c9c: // Note: This test could be refined by modifying the BaseJDBCTestCase
1:1643c9c: //       method assertStatementError(new String[],Statement,String)
1:1643c9c: //       and all methods down that chain to search for the variable
1:1643c9c: //       values in the SQL error messages as well, in this case, in this
1:1643c9c: //       case, to check for 'exclusive' or 'share' in error X0202.
1:1643c9c: 
1:1643c9c: package org.apache.derbyTesting.functionTests.tests.store;
1:1643c9c: 
1:1643c9c: import java.sql.ResultSet;
1:1643c9c: import java.sql.SQLException;
1:1643c9c: import java.sql.Statement;
1:1643c9c: import java.sql.Connection;
1:1643c9c: import java.util.ArrayList;
1:1643c9c: import java.util.List;
1:1643c9c: import java.util.Properties;
1:1643c9c: 
1:1643c9c: import junit.framework.Test;
1:1643c9c: 
1:1643c9c: import org.apache.derbyTesting.functionTests.util.Barrier;
1:1643c9c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1643c9c: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1643c9c: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1643c9c: import org.apache.derbyTesting.junit.JDBC;
1:1643c9c: import org.apache.derbyTesting.junit.TestConfiguration;
1:1643c9c: 
2:1643c9c: /**
1:a5a0133:  * Tests the printing of the WAIT state in the LOCK TABLE.
1:1643c9c:  */
1:1643c9c: public class LockTableVtiTest extends BaseJDBCTestCase {
1:1643c9c: 
1:1643c9c:     /**
1:1643c9c:      * List of threads (AsyncThread objects) to wait for after running the test.
1:1643c9c:      */
1:1643c9c:     private List<AsyncThread> threads = new ArrayList<AsyncThread>();
1:1643c9c:     
1:1643c9c:     public LockTableVtiTest(String name) {
1:1643c9c:         super(name);
2:1643c9c:     }
1:1643c9c: 
1:1643c9c:     /**
1:1643c9c:      * Construct top level suite in this JUnit test
1:a5a0133:      * The suite is wrapped in a DatabasePropertyTestSetup to set
1:1643c9c:      * the lock wait timeout.
2:1643c9c:      *
1:1643c9c:      * @return A suite containing embedded fixtures
1:1643c9c:      */
1:1643c9c:     public static Test suite() {
1:1643c9c:         Properties properties = new Properties();
1:1643c9c:         // setting to 60, which is the default, for starters
1:1643c9c:         properties.setProperty("derby.locks.waitTimeout", "60");
1:1643c9c: 
1:67225cd:         Test suite = TestConfiguration.defaultSuite (LockTableVtiTest.class);
1:1643c9c:         suite = new DatabasePropertyTestSetup(suite, properties, true);
1:67225cd:         return new CleanDatabaseTestSetup(suite) ;
1:1643c9c:     }
1:1643c9c: 
1:1643c9c:     protected void setUp() throws Exception {
1:1643c9c:         super.setUp();
1:67225cd:         Connection conn = getConnection();
1:67225cd:         conn.setAutoCommit(false);
1:67225cd:         Statement s = createStatement();
1:67225cd:         s.executeUpdate("create table account " +
1:67225cd:              "(a int primary key not null, b int)");
1:67225cd:         s.executeUpdate("insert into account values (0,1)");
1:67225cd:         s.executeUpdate("insert into account values (1,1)");
1:67225cd:         s.executeUpdate("insert into account values (2,1)");
1:67225cd:         s.close();
1:67225cd:         conn.commit();
1:1643c9c:     }
1:1643c9c: 
1:1643c9c:     /**
1:1643c9c:      * Tear-down the fixture by removing the tables and schemas
1:1643c9c:      * @throws Exception
1:1643c9c:      */
1:1643c9c:     protected void tearDown() throws Exception {
1:1643c9c:         // Rollback all uncommitted operations so that we don't hold any
1:1643c9c:         // locks that may block the other threads.
1:1643c9c:         rollback();
1:1643c9c:         for (AsyncThread thread : threads) {
1:1643c9c:             thread.waitFor();
1:1643c9c:         }
1:1643c9c:         threads = null;
1:1643c9c: 
1:1643c9c:         // All the other threads have finished. Now, remove everything from
1:1643c9c:         // the APP schema so that we don't leave anything around for subsequent
1:1643c9c:         // tests.
1:1643c9c:         setAutoCommit(false); // required by JDBC.dropSchema()
1:1643c9c:         try {
1:1643c9c:             Statement s = createStatement();
1:1643c9c:             s.executeUpdate("drop table account");
1:1643c9c:             JDBC.dropSchema(getConnection().getMetaData(), "APP");
1:1643c9c:         } catch(SQLException sqe) {
1:1643c9c:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05")
1:1643c9c:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:1643c9c:             {
1:1643c9c:                 fail("oops in teardown, encountered some other error than " +
1:1643c9c:                     "'object does not exist' or " +
1:1643c9c:                     "'cannot drop object because it doesn't exist'");
1:1643c9c:                 sqe.printStackTrace();
1:1643c9c:                 sqe.getMessage();
1:1643c9c:             }
1:1643c9c:         }
1:1643c9c:         super.tearDown();
1:1643c9c:     }
1:1643c9c: 
1:1643c9c:     /**
1:1643c9c:      * Tests to make sure that WAIT state is displayed in lock
1:1643c9c:      * table output
1:1643c9c:      * 
1:a5a0133:      * @exception Exception
1:1643c9c:      */
1:a5a0133:     public void testDisplayWaitState() throws Exception {
1:1643c9c:         Statement s = createStatement();
1:1643c9c:         setAutoCommit(false);
1:1643c9c:         // setting to -1 (wait for ever) to improve timing control
1:1643c9c:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:1643c9c:             "('derby.locks.waitTimeout','-1')");
1:1643c9c:         
1:1643c9c:         BaseJDBCTestCase.assertUpdateCount(
1:1643c9c:                 s, 3, "update account set b = b + 11");
1:1643c9c:         
1:1643c9c:         // Object used for synchronization between the main thread and the
1:1643c9c:         // helper thread. The main thread uses it to tell the helper thread
1:1643c9c:         // that it has started the scan. The helper thread uses it
1:1643c9c:         // to tell the main thread that it is ready.
1:1643c9c:         // Both threads should wait until the other thread
1:1643c9c:         // has reached the barrier before continuing.
1:1643c9c:         final Barrier barrier = new Barrier(2);
1:1643c9c:         
1:1643c9c:         // start the second thread and make it do the same update
1:1643c9c:         new AsyncThread(new AsyncTask() {
1:1643c9c:             public void doWork(Connection conn) throws Exception {
2:1643c9c:                 conn.setAutoCommit(false);
1:1643c9c:                 Statement s = conn.createStatement();
1:1643c9c:                 // note: asserts in this inner class do not make the test fail
1:1643c9c:                 // so, just executing it here
1:1643c9c:                 s.executeUpdate("update account set b = b + 11");
1:1643c9c:                 s.close();
1:1643c9c:                 
1:1643c9c:                 // Tell the main thread that we've locked the row
1:1643c9c:                 barrier.await();
1:1643c9c:                 
1:1643c9c:                 // The main thread now can continue - give it a
1:1643c9c:                 // second to do its stuff
1:1643c9c:                 //Thread.sleep(1000L);
1:1643c9c:                 // we check that the 'wait' state is gone at the main thread,
1:1643c9c:                 // it would not cause the test to fail if we checked it here.
1:1643c9c:             }
1:1643c9c:         });
1:1643c9c:         
1:1643c9c:         // now select from syscs_diag.lock_table, don't wait more than minute.
1:1643c9c:         int totalWait = 0;
1:1643c9c:         boolean found=false;
1:1643c9c:         do {
1:1643c9c:             totalWait += 500;
1:1643c9c:             Thread.sleep(500);
1:1643c9c:             // we want to look for 'WAIT' state. There will also
1:1643c9c:             // be one of more 'GRANT' state locks, likely background threads,
1:1643c9c:             // but we're not interested in those here.
1:1643c9c:             found=getWaitState();
1:1643c9c:         } while (!found && totalWait < 6000);
1:1643c9c:         // defer the assert until we've alerted the async thread
1:1643c9c:         // commit will release the lock
1:1643c9c:         commit();
1:1643c9c:         
1:1643c9c:         // set the timeout back so things can timeout.
1:1643c9c:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:1643c9c:                 "('derby.locks.waitTimeout','5')");
1:1643c9c:         commit();
1:1643c9c:         
1:1643c9c:         // Now that we've found the wait state, tell the helper thread we
1:1643c9c:         // are done
1:1643c9c:         barrier.await();
1:1643c9c:         
1:1643c9c:         // now that we've released the helper thread, we can safely let
1:1643c9c:         // the test fail if the results of the earlier check were bad
1:1643c9c:         assertTrue("expected to find a 'WAIT' state, but did not", found);
1:1643c9c:         
1:1643c9c:         // confirm that there is no 'wait' state now
1:1643c9c:         assertFalse("expected to not find a 'WAIT' state, but did", 
1:1643c9c:                 getWaitState());
1:1643c9c:     }
1:1643c9c:     
1:1643c9c:     /**
1:a5a0133:      * See if there is a 'WAIT' lock
1:a5a0133:      * @return true if there was a WAIT lock, false if not
2:1643c9c:      * @throws SQLException
1:1643c9c:      */
1:a5a0133:     private boolean getWaitState() throws SQLException {
1:1643c9c:         Statement s = createStatement();
1:1643c9c:         ResultSet rs = s.executeQuery(
1:1643c9c:                 "SELECT state from syscs_diag.lock_table " +
1:1643c9c:                 "where state like 'WAIT' order by state");
1:1643c9c:         String result="";
1:1643c9c:         
1:1643c9c:         try {
1:1643c9c:             rs.next();
1:1643c9c:             result = rs.getString(1);
1:1643c9c:         } catch (Exception e) {
1:1643c9c:             // assume the exception is because there is no 'wait' state...
1:1643c9c:             //e.printStackTrace();
1:1643c9c:         }
1:1643c9c:         rs.close();
1:1643c9c:         if (result != null && result.length() > 0)
1:1643c9c:             return true;
1:1643c9c:         else
1:1643c9c:             return false;
1:1643c9c:     }
1:1643c9c:     
1:1643c9c:     /**
1:1643c9c:      * Interface that should be implemented by classes that define a
1:1643c9c:      * database task that is to be executed asynchronously in a separate
1:1643c9c:      * transaction.
1:1643c9c:      */
1:1643c9c:     private static interface AsyncTask {
1:1643c9c:         void doWork(Connection conn) throws Exception;
1:1643c9c:     }
1:1643c9c: 
1:1643c9c:     /**
1:1643c9c:      * Class that executes an {@code AsyncTask} object.
1:1643c9c:      */
1:1643c9c:     private class AsyncThread implements Runnable {
1:1643c9c: 
1:1643c9c:         private final Thread thread = new Thread(this);
1:1643c9c:         private final AsyncTask task;
1:1643c9c:         private Exception error;
1:1643c9c: 
1:1643c9c:         /**
1:1643c9c:          * Create an {@code AsyncThread} object and starts a thread executing
1:1643c9c:          * the task. Also put the {@code AsyncThread} object in the list of
1:1643c9c:          * threads in the parent object to make sure the thread is waited for
1:1643c9c:          * and its errors detected in the {@code tearDown()} method.
1:1643c9c:          *
1:1643c9c:          * @param task the task to perform
1:1643c9c:          */
1:1643c9c:         public AsyncThread(AsyncTask task) {
1:1643c9c:             this.task = task;
1:1643c9c:             thread.start();
1:1643c9c:             threads.add(this);
1:1643c9c:         }
1:1643c9c: 
1:1643c9c:         /**
1:1643c9c:          * Open a database connection and perform the task. Roll back the
1:1643c9c:          * transaction when finished. Any exception thrown will be caught and
1:1643c9c:          * rethrown when the {@code waitFor()} method is called.
1:1643c9c:          */
1:1643c9c:         public void run() {
1:1643c9c:             try {
1:1643c9c:                 Connection conn = openDefaultConnection();
1:1643c9c:                 try {
1:1643c9c:                     task.doWork(conn);
1:1643c9c:                 } finally {
1:1643c9c:                     JDBC.cleanup(conn);
1:1643c9c:                 }
1:1643c9c:             } catch (Exception e) {
1:1643c9c:                 error = e;
1:1643c9c:             }
1:1643c9c:         }
1:1643c9c: 
1:1643c9c:         /**
1:1643c9c:          * Wait for the thread to complete. If an error was thrown during
1:1643c9c:          * execution, rethrow the execption here.
1:1643c9c:          * @throws Exception if an error happened while performing the task
1:1643c9c:          */
1:1643c9c:         void waitFor() throws Exception {
1:1643c9c:             thread.join();
1:1643c9c:             if (error != null) {
1:1643c9c:                 throw error;
1:1643c9c:             }
1:1643c9c:         }
1:1643c9c:     }
1:1643c9c: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:67225cd
/////////////////////////////////////////////////////////////////////////
1:         Test suite = TestConfiguration.defaultSuite (LockTableVtiTest.class);
1:         return new CleanDatabaseTestSetup(suite) ;
1:         Connection conn = getConnection();
1:         conn.setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.executeUpdate("create table account " +
1:              "(a int primary key not null, b int)");
1:         s.executeUpdate("insert into account values (0,1)");
1:         s.executeUpdate("insert into account values (1,1)");
1:         s.executeUpdate("insert into account values (2,1)");
1:         s.close();
1:         conn.commit();
commit:a5a0133
/////////////////////////////////////////////////////////////////////////
1:  * Tests the printing of the WAIT state in the LOCK TABLE.
/////////////////////////////////////////////////////////////////////////
1:      * The suite is wrapped in a DatabasePropertyTestSetup to set
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception
1:     public void testDisplayWaitState() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:      * See if there is a 'WAIT' lock
1:      * @return true if there was a WAIT lock, false if not
1:     private boolean getWaitState() throws SQLException {
commit:1643c9c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.LockTableVtiTest
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: // Note: This test could be refined by modifying the BaseJDBCTestCase
1: //       method assertStatementError(new String[],Statement,String)
1: //       and all methods down that chain to search for the variable
1: //       values in the SQL error messages as well, in this case, in this
1: //       case, to check for 'exclusive' or 'share' in error X0202.
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Connection;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.functionTests.util.Barrier;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Tests the LOCK TABLE in various modes.
1:  */
1: public class LockTableVtiTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * List of threads (AsyncThread objects) to wait for after running the test.
1:      */
1:     private List<AsyncThread> threads = new ArrayList<AsyncThread>();
1:     
1:     public LockTableVtiTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
0:      * The suite is wrapped in a DatabasePropertyTestSetup set
1:      * the lock wait timeout.
1:      *
1:      * @return A suite containing embedded fixtures
1:      */
1:     public static Test suite() {
1:         Properties properties = new Properties();
1:         // setting to 60, which is the default, for starters
1:         properties.setProperty("derby.locks.waitTimeout", "60");
1: 
0:         Test suite = TestConfiguration.embeddedSuite (LockTableVtiTest.class);
1:         suite = new DatabasePropertyTestSetup(suite, properties, true);
0:         return new CleanDatabaseTestSetup(suite) {
1:             /**
0:              * Creates the schemas and table used in the test cases.
1:              *
1:              * @throws SQLException
1:              */
0:             protected void decorateSQL(Statement s) throws SQLException {
0:                 Connection conn = getConnection();
1:                 conn.setAutoCommit(false);
0:                 s.executeUpdate("create table account " +
0:                      "(a int primary key not null, b int)");
0:                 s.executeUpdate("insert into account values (0,1)");
0:                 s.executeUpdate("insert into account values (1,1)");
0:                 s.executeUpdate("insert into account values (2,1)");
0:                 conn.commit();
1:             }
0:         };
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * Tear-down the fixture by removing the tables and schemas
1:      * @throws Exception
1:      */
1:     protected void tearDown() throws Exception {
1:         // Rollback all uncommitted operations so that we don't hold any
1:         // locks that may block the other threads.
1:         rollback();
1:         for (AsyncThread thread : threads) {
1:             thread.waitFor();
1:         }
1:         threads = null;
1: 
1:         // All the other threads have finished. Now, remove everything from
1:         // the APP schema so that we don't leave anything around for subsequent
1:         // tests.
1:         setAutoCommit(false); // required by JDBC.dropSchema()
1:         try {
1:             Statement s = createStatement();
1:             s.executeUpdate("drop table account");
1:             JDBC.dropSchema(getConnection().getMetaData(), "APP");
1:         } catch(SQLException sqe) {
1:             if (!(sqe.getSQLState().equalsIgnoreCase("42X05")
1:                     || sqe.getSQLState().equalsIgnoreCase("42Y55")))
1:             {
1:                 fail("oops in teardown, encountered some other error than " +
1:                     "'object does not exist' or " +
1:                     "'cannot drop object because it doesn't exist'");
1:                 sqe.printStackTrace();
1:                 sqe.getMessage();
1:             }
1:         }
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Tests to make sure that WAIT state is displayed in lock
1:      * table output
1:      * 
0:      * @exception SQLException
1:      */
0:     public void testDisplayWaitState() throws Throwable {
1:         Statement s = createStatement();
1:         setAutoCommit(false);
1:         // setting to -1 (wait for ever) to improve timing control
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:             "('derby.locks.waitTimeout','-1')");
1:         
1:         BaseJDBCTestCase.assertUpdateCount(
1:                 s, 3, "update account set b = b + 11");
1:         
1:         // Object used for synchronization between the main thread and the
1:         // helper thread. The main thread uses it to tell the helper thread
1:         // that it has started the scan. The helper thread uses it
1:         // to tell the main thread that it is ready.
1:         // Both threads should wait until the other thread
1:         // has reached the barrier before continuing.
1:         final Barrier barrier = new Barrier(2);
1:         
1:         // start the second thread and make it do the same update
1:         new AsyncThread(new AsyncTask() {
1:             public void doWork(Connection conn) throws Exception {
1:                 conn.setAutoCommit(false);
1:                 Statement s = conn.createStatement();
1:                 // note: asserts in this inner class do not make the test fail
1:                 // so, just executing it here
1:                 s.executeUpdate("update account set b = b + 11");
1:                 s.close();
1:                 
1:                 // Tell the main thread that we've locked the row
1:                 barrier.await();
1:                 
1:                 // The main thread now can continue - give it a
1:                 // second to do its stuff
1:                 //Thread.sleep(1000L);
1:                 // we check that the 'wait' state is gone at the main thread,
1:                 // it would not cause the test to fail if we checked it here.
1:             }
1:         });
1:         
1:         // now select from syscs_diag.lock_table, don't wait more than minute.
1:         int totalWait = 0;
1:         boolean found=false;
1:         do {
1:             totalWait += 500;
1:             Thread.sleep(500);
1:             // we want to look for 'WAIT' state. There will also
1:             // be one of more 'GRANT' state locks, likely background threads,
1:             // but we're not interested in those here.
1:             found=getWaitState();
1:         } while (!found && totalWait < 6000);
1:         // defer the assert until we've alerted the async thread
1:         // commit will release the lock
1:         commit();
1:         
1:         // set the timeout back so things can timeout.
1:         s.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:                 "('derby.locks.waitTimeout','5')");
1:         commit();
1:         
1:         // Now that we've found the wait state, tell the helper thread we
1:         // are done
1:         barrier.await();
1:         
1:         // now that we've released the helper thread, we can safely let
1:         // the test fail if the results of the earlier check were bad
1:         assertTrue("expected to find a 'WAIT' state, but did not", found);
1:         
1:         // confirm that there is no 'wait' state now
1:         assertFalse("expected to not find a 'WAIT' state, but did", 
1:                 getWaitState());
1:     }
1:     
1:     /**
0:      * Get the number of locks in the lock table
0:      * @return number of locks
1:      * @throws SQLException
1:      */
0:     private boolean getWaitState() throws Exception {
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery(
1:                 "SELECT state from syscs_diag.lock_table " +
1:                 "where state like 'WAIT' order by state");
1:         String result="";
1:         
1:         try {
1:             rs.next();
1:             result = rs.getString(1);
1:         } catch (Exception e) {
1:             // assume the exception is because there is no 'wait' state...
1:             //e.printStackTrace();
1:         }
1:         rs.close();
1:         if (result != null && result.length() > 0)
1:             return true;
1:         else
1:             return false;
1:     }
1:     
1:     /**
1:      * Interface that should be implemented by classes that define a
1:      * database task that is to be executed asynchronously in a separate
1:      * transaction.
1:      */
1:     private static interface AsyncTask {
1:         void doWork(Connection conn) throws Exception;
1:     }
1: 
1:     /**
1:      * Class that executes an {@code AsyncTask} object.
1:      */
1:     private class AsyncThread implements Runnable {
1: 
1:         private final Thread thread = new Thread(this);
1:         private final AsyncTask task;
1:         private Exception error;
1: 
1:         /**
1:          * Create an {@code AsyncThread} object and starts a thread executing
1:          * the task. Also put the {@code AsyncThread} object in the list of
1:          * threads in the parent object to make sure the thread is waited for
1:          * and its errors detected in the {@code tearDown()} method.
1:          *
1:          * @param task the task to perform
1:          */
1:         public AsyncThread(AsyncTask task) {
1:             this.task = task;
1:             thread.start();
1:             threads.add(this);
1:         }
1: 
1:         /**
1:          * Open a database connection and perform the task. Roll back the
1:          * transaction when finished. Any exception thrown will be caught and
1:          * rethrown when the {@code waitFor()} method is called.
1:          */
1:         public void run() {
1:             try {
1:                 Connection conn = openDefaultConnection();
1:                 try {
1:                     task.doWork(conn);
1:                 } finally {
1:                     JDBC.cleanup(conn);
1:                 }
1:             } catch (Exception e) {
1:                 error = e;
1:             }
1:         }
1: 
1:         /**
1:          * Wait for the thread to complete. If an error was thrown during
1:          * execution, rethrow the execption here.
1:          * @throws Exception if an error happened while performing the task
1:          */
1:         void waitFor() throws Exception {
1:             thread.join();
1:             if (error != null) {
1:                 throw error;
1:             }
1:         }
1:     }
1: }
============================================================================