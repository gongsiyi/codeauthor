1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_DaemonService
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.raw.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:2bc809f: import org.apache.derby.iapi.services.io.Formatable;
1:2bc809f: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:2bc809f: import org.apache.derby.iapi.util.ByteArray;
1:2bc809f: import java.io.IOException;
1:2bc809f: import java.io.OutputStream;
1:2bc809f: import java.io.ObjectInput;
1:2bc809f: import java.io.ObjectOutput;
1:2bc809f: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:2bc809f: 
1:2bc809f: public class T_Compensation
1:2bc809f: implements Compensation
1:2bc809f: {
1:2bc809f: 	// no-arg constructor, required by Formatable 
1:2bc809f: 	public T_Compensation() { super(); }
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Loggable methods
1:2bc809f: 	  */
1:2bc809f: 	public void doMe(Transaction xact, LogInstant instant,
1:2bc809f: 					 LimitObjectInput in)
1:2bc809f: 	{
1:2bc809f: 		//System.out.println("Loggable.doMe("+toString()+")");
1:2bc809f: 		return;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 		methods to support prepared log
1:2bc809f: 		the following two methods should not be called during recover
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public ByteArray getPreparedLog()
1:2bc809f: 	{ return (ByteArray) null; }
1:2bc809f: 
1:2bc809f: 	public boolean needsRedo(Transaction xact) {return false;}
1:2bc809f: 	public void releaseResource(Transaction xact) {return;}
1:2bc809f: 	public int group() { return Loggable.COMPENSATION | Loggable.RAWSTORE; }
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Compensation methods.
1:2bc809f: 	  */
1:2bc809f: 	public void setUndoOp(Undoable op) {return;}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Formatable methods
1:2bc809f: 	  */
1:2bc809f: 	public void writeExternal(ObjectOutput out)
1:2bc809f: 	throws IOException
1:2bc809f: 	{return;}
1:2bc809f: 
1:2bc809f: 	public void readExternal(ObjectInput in) 
1:2bc809f: 	throws IOException,ClassNotFoundException
1:2bc809f: 	{return;}
1:2bc809f: 
1:2bc809f: 	public int getTypeFormatId()
1:2bc809f: 	{
1:2bc809f: 		return StoredFormatIds.SERIALIZABLE_FORMAT_ID;
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_DaemonService
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.iapi.store.raw.*;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.util.ByteArray;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: public class T_Compensation
1: implements Compensation
1: {
1: 	// no-arg constructor, required by Formatable 
1: 	public T_Compensation() { super(); }
1: 
1: 
1: 	/*
1: 	  Loggable methods
1: 	  */
1: 	public void doMe(Transaction xact, LogInstant instant,
1: 					 LimitObjectInput in)
1: 	{
1: 		//System.out.println("Loggable.doMe("+toString()+")");
1: 		return;
1: 	}
1: 
1: 	/*
1: 		methods to support prepared log
1: 		the following two methods should not be called during recover
1: 	*/
1: 
1: 	public ByteArray getPreparedLog()
1: 	{ return (ByteArray) null; }
1: 
1: 	public boolean needsRedo(Transaction xact) {return false;}
1: 	public void releaseResource(Transaction xact) {return;}
1: 	public int group() { return Loggable.COMPENSATION | Loggable.RAWSTORE; }
1: 
1: 	/*
1: 	  Compensation methods.
1: 	  */
1: 	public void setUndoOp(Undoable op) {return;}
1: 
1: 	/*
1: 	  Formatable methods
1: 	  */
1: 	public void writeExternal(ObjectOutput out)
1: 	throws IOException
1: 	{return;}
1: 
1: 	public void readExternal(ObjectInput in) 
1: 	throws IOException,ClassNotFoundException
1: 	{return;}
1: 
1: 	public int getTypeFormatId()
1: 	{
1: 		return StoredFormatIds.SERIALIZABLE_FORMAT_ID;
1: 	}
1: }
============================================================================