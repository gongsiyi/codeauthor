1:f061ecd: /*
1:f061ecd:  *
1:f061ecd:  * Derby - Class org.apache.derbyTesting.functionTests.util.CleanDatabase
1:f061ecd:  *
1:f061ecd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f061ecd:  * contributor license agreements.  See the NOTICE file distributed with
1:f061ecd:  * this work for additional information regarding copyright ownership.
1:f061ecd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f061ecd:  * (the "License"); you may not use this file except in compliance with
1:f061ecd:  * the License.  You may obtain a copy of the License at
1:f061ecd:  *
1:f061ecd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f061ecd:  *
1:f061ecd:  * Unless required by applicable law or agreed to in writing, 
1:f061ecd:  * software distributed under the License is distributed on an 
1:f061ecd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:f061ecd:  * either express or implied. See the License for the specific 
1:f061ecd:  * language governing permissions and limitations under the License.
1:f061ecd:  */
1:3bd1dd8: package org.apache.derbyTesting.junit;
9:f061ecd: 
1:f061ecd: import java.sql.*;
1:f061ecd: import java.util.ArrayList;
1:f061ecd: import java.util.List;
1:a30fb43: 
1:f061ecd: import junit.framework.Test;
1:3bd1dd8: 
1:f061ecd: /**
1:f061ecd:  * Test decorator that cleans a database on setUp and
1:f061ecd:  * tearDown to provide a test with a consistent empty
1:6e8d910:  * database as a starting point. The obejcts are cleaned
1:6e8d910:  * (dropped) on tearDown to ensure any filures dropping
1:6e8d910:  * the objects can easily be associated with the test
1:6e8d910:  * fixtures that created them.
1:a30fb43:  * <P>
1:a30fb43:  * Tests can extend to provide a decorator that defines
1:a30fb43:  * some schema items and then have CleanDatabaseTestSetup
1:a30fb43:  * automatically clean them up by implementing the decorateSQL method.. 
1:a30fb43:  * As an example:
1:a30fb43:  * <code>
1:a30fb43:         return new CleanDatabaseTestSetup(suite) {
1:a30fb43:             protected void decorateSQL(Statement s) throws SQLException {
1:a30fb43: 
1:a30fb43:                 s.execute("CREATE TABLE T (I INT)");
1:a30fb43:                 s.execute("CREATE INDEX TI ON T(I)")
1:a30fb43: 
1:a30fb43:             }
1:a30fb43:         };
1:a30fb43:  * </code>
1:f061ecd:  * 
1:f061ecd:  */
1:f061ecd: public class CleanDatabaseTestSetup extends BaseJDBCTestSetup {
1:a40888d: 
1:f061ecd:     /**
1:f061ecd:      * Decorator this test with the cleaner
1:f061ecd:      */
1:f061ecd:     public CleanDatabaseTestSetup(Test test) {
1:f061ecd:         super(test);
2:f061ecd:     }
1:b843fce:     /**
1:b843fce:      * Constructor to use when running in a client / server 
1:b843fce:      * with the server already started on a given host
1:b843fce:      * and port.
1:b843fce:      */
1:b843fce:     /*
1:b843fce:      * Currently only used in o.a.dT.ft.tests.replicationTests.StandardTests
1:b843fce:      * for running existing JUnit tests on a client server configuration.
1:b843fce:      * To avoid duplicating the code inside decorateSQL() methods
1:b843fce:      * public static decorate() methods have been factored out
1:b843fce:      * for reuse in test methods in StandardTests: e.g. as AnsiTrimTest.decorate(s);
1:b843fce:      */
1:b843fce:     public CleanDatabaseTestSetup(Test test, 
1:b843fce:             boolean useNetworkClient,
1:b843fce:             String hostName,
1:b843fce:             int portNo) {
1:b843fce:         super(test);
1:b843fce:         if ( useNetworkClient )
1:b843fce:         {
1:b843fce:             this.jdbcClient = JDBCClient.DERBYNETCLIENT;
1:b843fce:         }
1:b843fce:         this.hostName = hostName;
1:b843fce:         this.portNo = portNo;
1:b843fce:     }
1:b843fce:     private JDBCClient jdbcClient = null;
1:b843fce:     private String hostName = null;
1:b843fce:     private int portNo = -1;
1:a30fb43: 
1:f061ecd:     /**
1:a30fb43:      * Clean the default database using the default connection
1:a30fb43:      * and calls the decorateSQL to allow sub-classes to
1:a30fb43:      * initialize their schema requirments.
1:f061ecd:      */
1:f061ecd:     protected void setUp() throws Exception {
1:b843fce:         if (jdbcClient != null )
1:b843fce:         { // We have network client (useNetworkClient) on a given host and port.
1:b843fce:             TestConfiguration current = TestConfiguration.getCurrent();
1:b843fce:             TestConfiguration modified = new TestConfiguration(current, 
1:b843fce:                     jdbcClient,
1:b843fce:                     hostName, 
1:b843fce:                     portNo);
1:b843fce:             TestConfiguration.setCurrent(modified);
1:b843fce:         }
1:f061ecd:         Connection conn = getConnection();
1:f061ecd:         conn.setAutoCommit(false);
1:6e8d910:         
1:6e8d910:         // compress as well to allow the fixtures wrapped in
1:6e8d910:         // this decorator to start with a clean database.
1:6e8d910:         CleanDatabaseTestSetup.cleanDatabase(conn, true);  
1:a30fb43:         
1:a30fb43:         Statement s = conn.createStatement();
1:73ff7eb:         try {
1:73ff7eb:             decorateSQL(s);
1:73ff7eb:             s.close();
1:73ff7eb:             conn.commit();
1:73ff7eb:         } finally {
1:73ff7eb:             // Make sure we release any locks held by the connection at this
1:73ff7eb:             // point. Not doing so may cause subsequent tests to fail.
1:73ff7eb:             try {
1:73ff7eb:                 clearConnection();
1:73ff7eb:             } catch (SQLException sqle) {
1:73ff7eb:                 // Ignore, but print details in debug mode.
1:73ff7eb:                 if (getTestConfiguration().isVerbose()) {
1:73ff7eb:                     println("clearing connection failed: " + sqle.getMessage());
1:73ff7eb:                     sqle.printStackTrace(System.err);
1:73ff7eb:                 }
1:73ff7eb:             }
1:73ff7eb:         }
1:f061ecd:     }
1:a30fb43:     
1:a30fb43:     /**
1:a30fb43:      * Sub-classes can override this method to execute
1:a30fb43:      * SQL statements executed at setUp time once the
1:a30fb43:      * database has been cleaned.
1:a30fb43:      * Once this method returns the statement will be closed,
1:a30fb43:      * commit called and the connection closed. The connection
1:a30fb43:      * returned by s.getConnection() is the default connection
1:a30fb43:      * and is in auto-commit false mode.
1:a30fb43:      * <BR>
1:a30fb43:      * This implementation does nothing. Sub-classes need not call it.
1:a30fb43:      * @throws SQLException
1:a30fb43:      */
1:a30fb43:     protected void decorateSQL(Statement s) throws SQLException
1:a30fb43:     {
1:a30fb43:         // nothing in the default case.
1:a30fb43:     }
1:f061ecd: 
1:f061ecd:     /**
2:f061ecd:      * Clean the default database using the default connection.
1:f061ecd:      */
1:f061ecd:     protected void tearDown() throws Exception {
1:a30fb43:         Connection conn = getConnection();
1:15097dd:         // See DERBY-5686 - perhaps there's a test that leaves a 
1:15097dd:         // connection in read-only state - let's check here and 
1:15097dd:         // if there's a conn that's read-only, unset it, and make
1:15097dd:         // the test fail so we find it.
1:a30fb43:         conn.setAutoCommit(false);
1:15097dd:         boolean ok=true;
1:15097dd:         if (conn.isReadOnly())
1:15097dd:         {
1:15097dd:             conn.setReadOnly(false);
1:15097dd:             ok=false;
1:15097dd:         }
1:6e8d910:         
1:6e8d910:         // Clean the database, ensures that any failure dropping
1:6e8d910:         // objects can easily be linked to test fixtures that
1:6e8d910:         // created them
1:6e8d910:         //
1:6e8d910:         // No need to compress, any test requiring such a clean
1:6e8d910:         // setup should not assume it is following another test
1:6e8d910:         // with this decorator, it should wrap itself in a CleanDatabaseTestSetup.
1:6e8d910:         // Compress is a somewhat expensive operation so avoid it if possible.
1:6e8d910:         CleanDatabaseTestSetup.cleanDatabase(conn, false);       
1:f061ecd:         super.tearDown();
1:15097dd:         if (!ok)
1:15097dd:             fail("the test that was just run left the conn read-only");
1:f061ecd:     }
1:f061ecd: 
1:f061ecd:     /**
1:f061ecd:      * Clean a complete database
1:f061ecd:      * @param conn Connection to be used, must not be in auto-commit mode.
1:6e8d910:      * @param compress True if selected system tables are to be compressed
1:6e8d910:      * to avoid potential ordering differences in test output.
1:f061ecd:      * @throws SQLException database error
1:f061ecd:      */
1:6e8d910:      public static void cleanDatabase(Connection conn, boolean compress) throws SQLException {
1:a40888d:          clearProperties(conn);
1:a40888d:          removeObjects(conn);
1:6e8d910:          if (compress)
1:6e8d910:              compressObjects(conn);
1:f900ff2:          removeRoles(conn);
1:92268ac:          removeUsers( conn );
1:a40888d:      }
1:a40888d:      
1:a40888d:      /**
1:a40888d:       * Set of database properties that will be set to NULL (unset)
1:a40888d:       * as part of cleaning a database.
1:a40888d:       */
1:a40888d:      private static final String[] CLEAR_DB_PROPERTIES =
1:a40888d:      {
1:a40888d:          "derby.database.classpath",
1:a40888d:      };
1:a40888d:      
1:a40888d:      /**
1:a40888d:       * Clear all database properties.
1:a40888d:       */
1:a40888d:      private static void clearProperties(Connection conn) throws SQLException {
1:a40888d: 
1:a40888d:          PreparedStatement ps = conn.prepareCall(
1:a40888d:            "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, NULL)");
1:a40888d:          
1:a40888d:          for (int i = 0; i < CLEAR_DB_PROPERTIES.length; i++)
1:a40888d:          {
1:a40888d:              ps.setString(1, CLEAR_DB_PROPERTIES[i]);
1:92268ac:              ps.executeUpdate();
1:a40888d:          }
1:a40888d:          ps.close();
1:a40888d:          conn.commit();
1:a40888d:      }
1:a40888d:      
1:a40888d:      
1:a40888d:      /**
1:a40888d:       * Remove all objects in all schemas from the database.
1:a40888d:       */
1:a40888d:      private static void removeObjects(Connection conn) throws SQLException {
1:a40888d:    
1:f061ecd:         DatabaseMetaData dmd = conn.getMetaData();
1:f061ecd: 
1:8919a15:         SQLException sqle = null;
1:8919a15:         // Loop a number of arbitary times to catch cases
1:8919a15:         // where objects are dependent on objects in
1:8919a15:         // different schemas.
1:8919a15:         for (int count = 0; count < 5; count++) {
1:8919a15:             // Fetch all the user schemas into a list
1:2510115:             List<String> schemas = new ArrayList<String>();
1:8919a15:             ResultSet rs = dmd.getSchemas();
1:8919a15:             while (rs.next()) {
1:8919a15:     
1:8919a15:                 String schema = rs.getString("TABLE_SCHEM");
1:8919a15:                 if (schema.startsWith("SYS"))
1:8919a15:                     continue;
1:8919a15:                 if (schema.equals("SQLJ"))
1:8919a15:                     continue;
1:8919a15:                 if (schema.equals("NULLID"))
1:8919a15:                     continue;
1:8919a15:     
1:8919a15:                 schemas.add(schema);
1:8919a15:             }
1:8919a15:             rs.close();
1:8919a15:     
1:8919a15:             // DROP all the user schemas.
2:8919a15:             sqle = null;
1:2510115:             for (String schema : schemas) {
1:8919a15:                 try {
1:8919a15:                     JDBC.dropSchema(dmd, schema);
1:8919a15:                 } catch (SQLException e) {
1:4c80863:                     sqle = e;
1:8919a15:                 }
1:8919a15:             }
1:8919a15:             // No errors means all the schemas we wanted to
1:8919a15:             // drop were dropped, so nothing more to do.
1:8919a15:             if (sqle == null)
1:8919a15:                 return;
1:f061ecd:         }
1:8919a15:         throw sqle;
1:f061ecd:     }
1:f061ecd: 
1:f900ff2:     private static void removeRoles(Connection conn) throws SQLException {
1:f900ff2:         // No metadata for roles, so do a query against SYSROLES
1:f900ff2:         Statement stm = conn.createStatement();
1:f900ff2:         Statement dropStm = conn.createStatement();
1:f900ff2: 
1:f900ff2:         // cast to overcome territory differences in some cases:
1:f900ff2:         ResultSet rs = stm.executeQuery(
1:f900ff2:             "select roleid from sys.sysroles where " +
1:f900ff2:             "cast(isdef as char(1)) = 'Y'");
1:f900ff2: 
1:f900ff2:         while (rs.next()) {
1:d02fa84:             dropStm.executeUpdate("DROP ROLE " + JDBC.escape(rs.getString(1)));
1:f900ff2:         }
1:f900ff2: 
1:f900ff2:         stm.close();
1:f900ff2:         dropStm.close();
1:f900ff2:         conn.commit();
1:f900ff2:     }
1:f900ff2: 
1:92268ac:     /** Drop all credentials stored in SYSUSERS */
1:92268ac:     private static void removeUsers(Connection conn) throws SQLException
1:92268ac:     {
1:92268ac:         // Get the users
1:92268ac:         Statement stm = conn.createStatement();
1:92268ac:         ResultSet rs = stm.executeQuery( "select username from sys.sysusers" );
1:2510115:         ArrayList<String> users = new ArrayList<String>();
1:92268ac:         
1:92268ac:         while ( rs.next() ) { users.add( rs.getString( 1 ) ); }
1:92268ac:         rs.close();
1:92268ac:         stm.close();
1:92268ac: 
1:92268ac:         // Now delete them
1:92268ac:         PreparedStatement   ps = conn.prepareStatement( "call syscs_util.syscs_drop_user( ? )" );
1:92268ac: 
1:92268ac:         for ( int i = 0; i < users.size(); i++ )
1:92268ac:         {
1:92268ac:             ps.setString( 1, (String) users.get( i ) );
1:04cfd28: 
1:04cfd28:             // you can't drop the DBO's credentials. sorry.
1:04cfd28:             try {
1:04cfd28:                 ps.executeUpdate();
1:04cfd28:             }
1:04cfd28:             catch (SQLException se)
1:04cfd28:             {
1:04cfd28:                 if ( "4251F".equals( se.getSQLState() ) ) { continue; }
1:04cfd28:                 else { throw se; }
1:04cfd28:             }
1:92268ac:         }
1:92268ac: 
1:92268ac:         ps.close();
1:92268ac:         conn.commit();
1:92268ac:     }
1:92268ac: 
1:25dd7cd:      /**
1:25dd7cd:       * Set of objects that will be compressed as part of cleaning a database.
1:25dd7cd:       */
1:25dd7cd:      private static final String[] COMPRESS_DB_OBJECTS =
1:25dd7cd:      {
1:25dd7cd:          "SYS.SYSDEPENDS",
1:25dd7cd:      };
1:25dd7cd:      
1:25dd7cd:      /**
1:25dd7cd:       * Compress the objects in the database.
1:25dd7cd:       * 
1:25dd7cd:       * @param conn the db connection
1:25dd7cd:       * @throws SQLException database error
1:25dd7cd:       */
1:25dd7cd:      private static void compressObjects(Connection conn) throws SQLException {
1:25dd7cd:     	 
1:25dd7cd:     	 CallableStatement cs = conn.prepareCall
1:25dd7cd:     	     ("CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
1:25dd7cd:     	 
1:25dd7cd:     	 for (int i = 0; i < COMPRESS_DB_OBJECTS.length; i++)
1:25dd7cd:     	 {
1:25dd7cd:     		 int delim = COMPRESS_DB_OBJECTS[i].indexOf(".");
1:25dd7cd:              cs.setString(1, COMPRESS_DB_OBJECTS[i].substring(0, delim) );
1:25dd7cd:              cs.setString(2, COMPRESS_DB_OBJECTS[i].substring(delim+1) );
1:25dd7cd:              cs.execute();
1:25dd7cd:     	 }
1:25dd7cd:     	 
1:25dd7cd:     	 cs.close();
1:25dd7cd:     	 conn.commit();
1:25dd7cd:      }
1:25dd7cd:     	   
1:f061ecd: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             List<String> schemas = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:             for (String schema : schemas) {
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> users = new ArrayList<String>();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:15097dd
/////////////////////////////////////////////////////////////////////////
1:         // See DERBY-5686 - perhaps there's a test that leaves a 
1:         // connection in read-only state - let's check here and 
1:         // if there's a conn that's read-only, unset it, and make
1:         // the test fail so we find it.
1:         boolean ok=true;
1:         if (conn.isReadOnly())
1:         {
1:             conn.setReadOnly(false);
1:             ok=false;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (!ok)
1:             fail("the test that was just run left the conn read-only");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:73ff7eb
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             decorateSQL(s);
1:             s.close();
1:             conn.commit();
1:         } finally {
1:             // Make sure we release any locks held by the connection at this
1:             // point. Not doing so may cause subsequent tests to fail.
1:             try {
1:                 clearConnection();
1:             } catch (SQLException sqle) {
1:                 // Ignore, but print details in debug mode.
1:                 if (getTestConfiguration().isVerbose()) {
1:                     println("clearing connection failed: " + sqle.getMessage());
1:                     sqle.printStackTrace(System.err);
1:                 }
1:             }
1:         }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:04cfd28
/////////////////////////////////////////////////////////////////////////
1: 
1:             // you can't drop the DBO's credentials. sorry.
1:             try {
1:                 ps.executeUpdate();
1:             }
1:             catch (SQLException se)
1:             {
1:                 if ( "4251F".equals( se.getSQLState() ) ) { continue; }
1:                 else { throw se; }
1:             }
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:          removeUsers( conn );
/////////////////////////////////////////////////////////////////////////
1:     /** Drop all credentials stored in SYSUSERS */
1:     private static void removeUsers(Connection conn) throws SQLException
1:     {
1:         // Get the users
1:         Statement stm = conn.createStatement();
1:         ResultSet rs = stm.executeQuery( "select username from sys.sysusers" );
0:         ArrayList   users = new ArrayList();
1:         
1:         while ( rs.next() ) { users.add( rs.getString( 1 ) ); }
1:         rs.close();
1:         stm.close();
1: 
1:         // Now delete them
1:         PreparedStatement   ps = conn.prepareStatement( "call syscs_util.syscs_drop_user( ? )" );
1: 
1:         for ( int i = 0; i < users.size(); i++ )
1:         {
1:             ps.setString( 1, (String) users.get( i ) );
1:             ps.executeUpdate();
1:         }
1: 
1:         ps.close();
1:         conn.commit();
1:     }
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:d02fa84
/////////////////////////////////////////////////////////////////////////
1:             dropStm.executeUpdate("DROP ROLE " + JDBC.escape(rs.getString(1)));
commit:f900ff2
/////////////////////////////////////////////////////////////////////////
1:          removeRoles(conn);
/////////////////////////////////////////////////////////////////////////
1:     private static void removeRoles(Connection conn) throws SQLException {
1:         // No metadata for roles, so do a query against SYSROLES
1:         Statement stm = conn.createStatement();
1:         Statement dropStm = conn.createStatement();
1: 
1:         // cast to overcome territory differences in some cases:
1:         ResultSet rs = stm.executeQuery(
1:             "select roleid from sys.sysroles where " +
1:             "cast(isdef as char(1)) = 'Y'");
1: 
1:         while (rs.next()) {
0:             dropStm.executeUpdate("DROP ROLE " + rs.getString(1));
1:         }
1: 
1:         stm.close();
1:         dropStm.close();
1:         conn.commit();
1:     }
1: 
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:b843fce
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Constructor to use when running in a client / server 
1:      * with the server already started on a given host
1:      * and port.
1:      */
1:     /*
1:      * Currently only used in o.a.dT.ft.tests.replicationTests.StandardTests
1:      * for running existing JUnit tests on a client server configuration.
1:      * To avoid duplicating the code inside decorateSQL() methods
1:      * public static decorate() methods have been factored out
1:      * for reuse in test methods in StandardTests: e.g. as AnsiTrimTest.decorate(s);
1:      */
1:     public CleanDatabaseTestSetup(Test test, 
1:             boolean useNetworkClient,
1:             String hostName,
1:             int portNo) {
1:         super(test);
1:         if ( useNetworkClient )
1:         {
1:             this.jdbcClient = JDBCClient.DERBYNETCLIENT;
1:         }
1:         this.hostName = hostName;
1:         this.portNo = portNo;
1:     }
1:     private JDBCClient jdbcClient = null;
1:     private String hostName = null;
1:     private int portNo = -1;
/////////////////////////////////////////////////////////////////////////
1:         if (jdbcClient != null )
1:         { // We have network client (useNetworkClient) on a given host and port.
1:             TestConfiguration current = TestConfiguration.getCurrent();
1:             TestConfiguration modified = new TestConfiguration(current, 
1:                     jdbcClient,
1:                     hostName, 
1:                     portNo);
1:             TestConfiguration.setCurrent(modified);
1:         }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6e8d910
/////////////////////////////////////////////////////////////////////////
1:  * database as a starting point. The obejcts are cleaned
1:  * (dropped) on tearDown to ensure any filures dropping
1:  * the objects can easily be associated with the test
1:  * fixtures that created them.
/////////////////////////////////////////////////////////////////////////
1:         
1:         // compress as well to allow the fixtures wrapped in
1:         // this decorator to start with a clean database.
1:         CleanDatabaseTestSetup.cleanDatabase(conn, true);  
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Clean the database, ensures that any failure dropping
1:         // objects can easily be linked to test fixtures that
1:         // created them
1:         //
1:         // No need to compress, any test requiring such a clean
1:         // setup should not assume it is following another test
1:         // with this decorator, it should wrap itself in a CleanDatabaseTestSetup.
1:         // Compress is a somewhat expensive operation so avoid it if possible.
1:         CleanDatabaseTestSetup.cleanDatabase(conn, false);       
1:      * @param compress True if selected system tables are to be compressed
1:      * to avoid potential ordering differences in test output.
1:      public static void cleanDatabase(Connection conn, boolean compress) throws SQLException {
1:          if (compress)
1:              compressObjects(conn);
commit:4c80863
/////////////////////////////////////////////////////////////////////////
1:                     sqle = e;
commit:25dd7cd
/////////////////////////////////////////////////////////////////////////
0:          compressObjects(conn);
/////////////////////////////////////////////////////////////////////////
1:      /**
1:       * Set of objects that will be compressed as part of cleaning a database.
1:       */
1:      private static final String[] COMPRESS_DB_OBJECTS =
1:      {
1:          "SYS.SYSDEPENDS",
1:      };
1:      
1:      /**
1:       * Compress the objects in the database.
1:       * 
1:       * @param conn the db connection
1:       * @throws SQLException database error
1:       */
1:      private static void compressObjects(Connection conn) throws SQLException {
1:     	 
1:     	 CallableStatement cs = conn.prepareCall
1:     	     ("CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
1:     	 
1:     	 for (int i = 0; i < COMPRESS_DB_OBJECTS.length; i++)
1:     	 {
1:     		 int delim = COMPRESS_DB_OBJECTS[i].indexOf(".");
1:              cs.setString(1, COMPRESS_DB_OBJECTS[i].substring(0, delim) );
1:              cs.setString(2, COMPRESS_DB_OBJECTS[i].substring(delim+1) );
1:              cs.execute();
1:     	 }
1:     	 
1:     	 cs.close();
1:     	 conn.commit();
1:      }
1:     	   
commit:a40888d
/////////////////////////////////////////////////////////////////////////
1:          clearProperties(conn);
1:          removeObjects(conn);
1: 
1:      }
1:      
1:      /**
1:       * Set of database properties that will be set to NULL (unset)
1:       * as part of cleaning a database.
1:       */
1:      private static final String[] CLEAR_DB_PROPERTIES =
1:      {
1:          "derby.database.classpath",
1:      };
1:      
1:      /**
1:       * Clear all database properties.
1:       */
1:      private static void clearProperties(Connection conn) throws SQLException {
1: 
1:          PreparedStatement ps = conn.prepareCall(
1:            "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, NULL)");
1:          
1:          for (int i = 0; i < CLEAR_DB_PROPERTIES.length; i++)
1:          {
1:              ps.setString(1, CLEAR_DB_PROPERTIES[i]);
0:              ps.executeUpdate();
1:          }
1:          ps.close();
1:          conn.commit();
1:      }
1:      
1:      
1:      /**
1:       * Remove all objects in all schemas from the database.
1:       */
1:      private static void removeObjects(Connection conn) throws SQLException {
1:    
commit:8919a15
/////////////////////////////////////////////////////////////////////////
1:         SQLException sqle = null;
1:         // Loop a number of arbitary times to catch cases
1:         // where objects are dependent on objects in
1:         // different schemas.
1:         for (int count = 0; count < 5; count++) {
1:             // Fetch all the user schemas into a list
0:             List schemas = new ArrayList();
1:             ResultSet rs = dmd.getSchemas();
1:             while (rs.next()) {
1:     
1:                 String schema = rs.getString("TABLE_SCHEM");
1:                 if (schema.startsWith("SYS"))
1:                     continue;
1:                 if (schema.equals("SQLJ"))
1:                     continue;
1:                 if (schema.equals("NULLID"))
1:                     continue;
1:     
1:                 schemas.add(schema);
1:             }
1:             rs.close();
1:     
1:             // DROP all the user schemas.
1:             sqle = null;
0:             for (Iterator i = schemas.iterator(); i.hasNext();) {
0:                 String schema = (String) i.next();
1:                 try {
1:                     JDBC.dropSchema(dmd, schema);
1:                 } catch (SQLException e) {
1:                     sqle = null;
1:                 }
1:             }
1:             // No errors means all the schemas we wanted to
1:             // drop were dropped, so nothing more to do.
1:             if (sqle == null)
1:                 return;
1:         throw sqle;
commit:f106df7
/////////////////////////////////////////////////////////////////////////
commit:a30fb43
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * <P>
1:  * Tests can extend to provide a decorator that defines
1:  * some schema items and then have CleanDatabaseTestSetup
1:  * automatically clean them up by implementing the decorateSQL method.. 
1:  * As an example:
1:  * <code>
1:         return new CleanDatabaseTestSetup(suite) {
1:             protected void decorateSQL(Statement s) throws SQLException {
1: 
1:                 s.execute("CREATE TABLE T (I INT)");
1:                 s.execute("CREATE INDEX TI ON T(I)")
1: 
1:             }
1:         };
1:  * </code>
/////////////////////////////////////////////////////////////////////////
1:      * Clean the default database using the default connection
1:      * and calls the decorateSQL to allow sub-classes to
1:      * initialize their schema requirments.
0:         CleanDatabaseTestSetup.cleanDatabase(conn);  
1:         
1:         Statement s = conn.createStatement();
0:         decorateSQL(s);
1: 
0:         s.close();
0:         conn.commit();
1:     
1:     /**
1:      * Sub-classes can override this method to execute
1:      * SQL statements executed at setUp time once the
1:      * database has been cleaned.
1:      * Once this method returns the statement will be closed,
1:      * commit called and the connection closed. The connection
1:      * returned by s.getConnection() is the default connection
1:      * and is in auto-commit false mode.
1:      * <BR>
1:      * This implementation does nothing. Sub-classes need not call it.
1:      * @throws SQLException
1:      */
1:     protected void decorateSQL(Statement s) throws SQLException
1:     {
1:         // nothing in the default case.
1:     }
1:         Connection conn = getConnection();
1:         conn.setAutoCommit(false);
0:         CleanDatabaseTestSetup.cleanDatabase(conn);       
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.junit;
1: 
commit:f061ecd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.CleanDatabase
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
0: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.sql.*;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: import junit.framework.Test;
1: 
1: /**
1:  * Test decorator that cleans a database on setUp and
1:  * tearDown to provide a test with a consistent empty
0:  * database as a starting point.
1:  * 
1:  */
1: public class CleanDatabaseTestSetup extends BaseJDBCTestSetup {
1: 
1:     /**
1:      * Decorator this test with the cleaner
1:      */
1:     public CleanDatabaseTestSetup(Test test) {
1:         super(test);
1:     }
1: 
1:     /**
1:      * Clean the default database using the default connection.
1:      */
1:     protected void setUp() throws Exception {
1:         Connection conn = getConnection();
1:         conn.setAutoCommit(false);
0:         CleanDatabaseTestSetup.cleanDatabase(conn);
0:         conn.close();
1:     }
1: 
1:     /**
1:      * Clean the default database using the default connection.
1:      */
1:     protected void tearDown() throws Exception {
0:         setUp();
1:         super.tearDown();
1:     }
1: 
1: 
1:     /**
1:      * Clean a complete database
1:      * @param conn Connection to be used, must not be in auto-commit mode.
1:      * @throws SQLException database error
1:      */
0:      public static void cleanDatabase(Connection conn) throws SQLException {
1:         DatabaseMetaData dmd = conn.getMetaData();
1: 
0:         // Fetch all the user schemas into a list
0:         List schemas = new ArrayList();
0:         ResultSet rs = dmd.getSchemas();
0:         while (rs.next()) {
1: 
0:             String schema = rs.getString("TABLE_SCHEM");
0:             if (schema.startsWith("SYS"))
0:                 continue;
0:             if (schema.equals("SQLJ"))
0:                 continue;
0:             if (schema.equals("NULLID"))
0:                 continue;
1: 
0:             schemas.add(schema);
1:         }
0:         rs.close();
1: 
0:         // DROP all the user schemas.
0:         for (Iterator i = schemas.iterator(); i.hasNext();) {
0:             String schema = (String) i.next();
0:             JDBC.dropSchema(dmd, schema);
1:         }
1:     }
1: 
1: }
============================================================================