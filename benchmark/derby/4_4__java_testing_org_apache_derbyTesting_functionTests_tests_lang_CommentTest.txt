1:a4d3e58: /*
1:a4d3e58: 
1:449a1eb:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CommentTest
1:a4d3e58: 
1:a4d3e58:        Licensed to the Apache Software Foundation (ASF) under one
1:a4d3e58:        or more contributor license agreements.  See the NOTICE file
1:a4d3e58:        distributed with this work for additional information
1:a4d3e58:        regarding copyright ownership.  The ASF licenses this file
1:a4d3e58:        to you under the Apache License, Version 2.0 (the
1:a4d3e58:        "License"); you may not use this file except in compliance
1:a4d3e58:        with the License.  You may obtain a copy of the License at
1:a4d3e58: 
1:a4d3e58:          http://www.apache.org/licenses/LICENSE-2.0
1:a4d3e58: 
1:a4d3e58:        Unless required by applicable law or agreed to in writing,
1:a4d3e58:        software distributed under the License is distributed on an
1:a4d3e58:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a4d3e58:        KIND, either express or implied.  See the License for the
1:a4d3e58:        specific language governing permissions and limitations
1:a4d3e58:        under the License
2:a4d3e58: */
1:a4d3e58: package org.apache.derbyTesting.functionTests.tests.lang;
1:a4d3e58: 
1:a4d3e58: import java.sql.Connection;
1:a4d3e58: import java.sql.SQLException;
1:a4d3e58: import java.sql.Statement;
1:3392df8: import java.sql.PreparedStatement;
1:3392df8: import java.sql.Types;
1:a4d3e58: 
1:a4d3e58: import junit.framework.Assert;
1:a4d3e58: import junit.framework.Test;
1:a4d3e58: 
1:a4d3e58: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:a4d3e58: import org.apache.derbyTesting.junit.JDBC;
1:a4d3e58: import org.apache.derbyTesting.junit.TestConfiguration;
1:a4d3e58: 
2:a4d3e58: /**
1:7b374f9:  * Test for comments, and a few tests related to parsing non-comment SQL.
1:a4d3e58:  */
1:a4d3e58: public final class CommentTest extends BaseJDBCTestCase {
1:a4d3e58: 
1:a4d3e58:     /**
1:a4d3e58:      * Public constructor required for running test as standalone JUnit.
1:a4d3e58:      */
1:a4d3e58:     public CommentTest(String name)
3:a4d3e58:     {
1:a4d3e58:         super(name);
2:a4d3e58:     }
1:a4d3e58: 
1:a4d3e58:     /**
1:a4d3e58:      * Create a suite of tests.
1:a4d3e58:     */
1:a4d3e58:     public static Test suite()
1:a4d3e58:     {
1:3392df8:         return TestConfiguration.defaultSuite(CommentTest.class);
1:a4d3e58:     }
1:a4d3e58: 
1:a4d3e58:     /**
1:a4d3e58:      * Some simple tests of bracketed comments.
1:a4d3e58:      */
1:a4d3e58:     public void testBracketedComments() throws Exception
1:a4d3e58:     {
1:89a3e2b:         Statement stmt = createStatement();
1:89a3e2b:         
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("/* a comment */ VALUES 1"), 
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:3392df8:             stmt.executeQuery("-- eof comment\nVALUES 1"),
1:3392df8:             new String [][] {{"1"}});
1:3392df8: 
1:3392df8:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES 1 /* a comment */"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment \n with newline */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* SELECT * from FOO */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment /* nested comment */ */ 1"), 
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery(
1:a4d3e58:                 "VALUES /*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         // mix with eol-comments
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery(
1:a4d3e58:                 "VALUES 1 --/*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery(
1:a4d3e58:                 "VALUES 1 --/*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1--/*"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment --\n with newline */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment -- */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES /* a comment \n-- */ 1"),
1:a4d3e58:             new String [][] {{"1"}});
1:a4d3e58: 
1:a4d3e58:         // mix with string quotes
1:a4d3e58:         JDBC.assertFullResultSet(
1:a4d3e58:             stmt.executeQuery("VALUES '/* a comment \n-- */'"),
1:a4d3e58:             new String [][] {{"/* a comment \n-- */"}});
1:a4d3e58: 
1:ad72a2b:         // unterminated comments generate lexical errors
1:89a3e2b:         assertCompileError("42X02", "VALUES 1 /*");
1:89a3e2b:         assertCompileError("42X02", "VALUES 1 /* comment");
1:89a3e2b:         assertCompileError("42X02", "VALUES 1 /* comment /*");
1:89a3e2b:         assertCompileError("42X02", "VALUES 1 /* comment /* nested */");
1:a4d3e58: 
1:ad72a2b:         // just comments generates syntax error
1:ad72a2b:         assertCompileError("42X01", "/* this is a comment */");
1:3392df8:         assertCompileError("42X01", "/* this is a comment */ /* /* foo */ */");
1:3392df8:         assertCompileError(
1:3392df8:             "42X01",
1:3392df8:             "\n\r\r\n/* Weird newlines in front of a comment */" +
1:3392df8:                 " /* /* foo */ */");
1:ad72a2b:         assertCompileError("42X01", "-- this is a comment \n");
1:3392df8: 
1:3392df8:         // sole comment error
1:3392df8:         assertCompileError("42X02", "/* this is not quite a comment");
1:a4d3e58:     }
1:3392df8: 
1:3392df8: 
1:3392df8:     /**
1:3392df8:      * Test that an initial bracketed comment doesn't affect the checks for
1:3392df8:      * executeQuery(executeUpdate
1:3392df8:      */
1:3392df8:     public void testInitialComment_derby4338() throws Exception
1:3392df8:     {
1:3392df8:         Statement s = createStatement();
1:3392df8: 
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("/* comment */ select * from sys.systables"));
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("/* */\nSELECT * from sys.systables"));
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("/* --*/\n\rSELECT * from sys.systables"));
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("--\nselect * from sys.systables"));
1:3392df8: 
1:3392df8:         s.executeUpdate("/* /* foo*/ */ create table t (i int)");
1:3392df8:         s.executeUpdate("--\n drop table t");
1:3392df8: 
1:3392df8:         PreparedStatement ps = prepareStatement(
1:3392df8:             "{call syscs_util." +
1:3392df8:             "syscs_set_database_property('foo', ?)}");
1:3392df8:         ps.setString(1, "bar");
1:3392df8:         ps.execute();
1:3392df8: 
1:3392df8:         if (usingEmbedded()) {
1:3392df8:             Assert.assertTrue(ps.getUpdateCount() == 0);
1:3392df8:         } else {
1:3392df8:             // Change to 0 when DERBY-211 is fixed.
1:3392df8:             Assert.assertTrue(ps.getUpdateCount() == -1);
1:3392df8:         }
1:3392df8: 
1:3392df8:         // The escape after the comment below was not handled correctly prior
1:3392df8:         // to DERBY-4338, i.e. the statement was not classified as a "call"
1:3392df8:         // statement.
1:3392df8:         ps = prepareStatement(
1:3392df8:             "--\n{call syscs_util." +
1:3392df8:             "syscs_set_database_property('foo', ?)}");
1:3392df8:         ps.setString(1, "bar");
1:3392df8:         ps.execute();
1:3392df8: 
1:3392df8:         // The assert blows up for the client prior to fix of DERBY-4338.
1:3392df8:         if (usingEmbedded()) {
1:3392df8:             Assert.assertEquals(0, ps.getUpdateCount());
1:3392df8:         } else {
1:3392df8:             // Change to 0 when DERBY-211 is fixed.
1:3392df8:             Assert.assertEquals(-1, ps.getUpdateCount());
1:3392df8:         }
1:3392df8: 
1:3392df8:         ps.setNull(1, Types.VARCHAR); // clean up setting
1:3392df8:         ps.execute();
1:3392df8:     }
1:3392df8: 
1:3392df8:     /**
1:3392df8:      * Test that an statement classifier in client doesn't get confused over
1:3392df8:      * keywords that end in *, ' and ". This is not strictly a comment test,
1:3392df8:      * but was fixed as part of DERBY-4338.
1:3392df8:      */
1:3392df8:     public void testWrongKeywordLexing_derby4338() throws Exception
1:3392df8:     {
1:3392df8:         Statement s = createStatement();
1:3392df8: 
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("select* from sys.systables"));
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("select'a' from sys.systables"));
1:3392df8:         JDBC.assertDrainResults(
1:3392df8:             s.executeQuery("select\"TABLEID\" from sys.systables"));
1:7b374f9: 
1:7b374f9:         // Added for DERBY-4748.
1:7b374f9:         assertCompileError("42X01", "commit");
1:7b374f9:         assertCompileError("42X01", "commit;");
1:3392df8:     }
1:3392df8: 
1:a4d3e58:     /**
1:89a3e2b:      * Default connections to auto-commit false.
1:a4d3e58:      */
1:89a3e2b:     protected void initializeConnection(Connection conn) throws SQLException
1:3392df8:     {
1:89a3e2b:         conn.setAutoCommit(false);
1:a4d3e58:     }
1:a4d3e58: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:7b374f9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * Test for comments, and a few tests related to parsing non-comment SQL.
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Added for DERBY-4748.
1:         assertCompileError("42X01", "commit");
1:         assertCompileError("42X01", "commit;");
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3392df8
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(CommentTest.class);
/////////////////////////////////////////////////////////////////////////
1:             stmt.executeQuery("-- eof comment\nVALUES 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
/////////////////////////////////////////////////////////////////////////
1:         assertCompileError("42X01", "/* this is a comment */ /* /* foo */ */");
1:         assertCompileError(
1:             "42X01",
1:             "\n\r\r\n/* Weird newlines in front of a comment */" +
1:                 " /* /* foo */ */");
1: 
1:         // sole comment error
1:         assertCompileError("42X02", "/* this is not quite a comment");
1: 
1: 
1:     /**
1:      * Test that an initial bracketed comment doesn't affect the checks for
1:      * executeQuery(executeUpdate
1:      */
1:     public void testInitialComment_derby4338() throws Exception
1:     {
1:         Statement s = createStatement();
1: 
1:         JDBC.assertDrainResults(
1:             s.executeQuery("/* comment */ select * from sys.systables"));
1:         JDBC.assertDrainResults(
1:             s.executeQuery("/* */\nSELECT * from sys.systables"));
1:         JDBC.assertDrainResults(
1:             s.executeQuery("/* --*/\n\rSELECT * from sys.systables"));
1:         JDBC.assertDrainResults(
1:             s.executeQuery("--\nselect * from sys.systables"));
1: 
1:         s.executeUpdate("/* /* foo*/ */ create table t (i int)");
1:         s.executeUpdate("--\n drop table t");
1: 
1:         PreparedStatement ps = prepareStatement(
1:             "{call syscs_util." +
1:             "syscs_set_database_property('foo', ?)}");
1:         ps.setString(1, "bar");
1:         ps.execute();
1: 
1:         if (usingEmbedded()) {
1:             Assert.assertTrue(ps.getUpdateCount() == 0);
1:         } else {
1:             // Change to 0 when DERBY-211 is fixed.
1:             Assert.assertTrue(ps.getUpdateCount() == -1);
1:         }
1: 
1:         // The escape after the comment below was not handled correctly prior
1:         // to DERBY-4338, i.e. the statement was not classified as a "call"
1:         // statement.
1:         ps = prepareStatement(
1:             "--\n{call syscs_util." +
1:             "syscs_set_database_property('foo', ?)}");
1:         ps.setString(1, "bar");
1:         ps.execute();
1: 
1:         // The assert blows up for the client prior to fix of DERBY-4338.
1:         if (usingEmbedded()) {
1:             Assert.assertEquals(0, ps.getUpdateCount());
1:         } else {
1:             // Change to 0 when DERBY-211 is fixed.
1:             Assert.assertEquals(-1, ps.getUpdateCount());
1:         }
1: 
1:         ps.setNull(1, Types.VARCHAR); // clean up setting
1:         ps.execute();
1:     }
1: 
1:     /**
1:      * Test that an statement classifier in client doesn't get confused over
1:      * keywords that end in *, ' and ". This is not strictly a comment test,
1:      * but was fixed as part of DERBY-4338.
1:      */
1:     public void testWrongKeywordLexing_derby4338() throws Exception
1:     {
1:         Statement s = createStatement();
1: 
1:         JDBC.assertDrainResults(
1:             s.executeQuery("select* from sys.systables"));
1:         JDBC.assertDrainResults(
1:             s.executeQuery("select'a' from sys.systables"));
1:         JDBC.assertDrainResults(
1:             s.executeQuery("select\"TABLEID\" from sys.systables"));
1:     }
1: 
1:     {
commit:449a1eb
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CommentTest
commit:a4d3e58
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:        or more contributor license agreements.  See the NOTICE file
1:        distributed with this work for additional information
1:        regarding copyright ownership.  The ASF licenses this file
1:        to you under the Apache License, Version 2.0 (the
1:        "License"); you may not use this file except in compliance
1:        with the License.  You may obtain a copy of the License at
1: 
1:          http://www.apache.org/licenses/LICENSE-2.0
1: 
1:        Unless required by applicable law or agreed to in writing,
1:        software distributed under the License is distributed on an
1:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:        KIND, either express or implied.  See the License for the
1:        specific language governing permissions and limitations
1:        under the License
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
0: import java.sql.DatabaseMetaData;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Assert;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Test for comments.
1:  */
1: public final class CommentTest extends BaseJDBCTestCase {
0:     private Statement stmt;
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public CommentTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:     */
1:     public static Test suite()
1:     {
0:         return TestConfiguration.embeddedSuite(CommentTest.class);
1:     }
1: 
1:     /**
1:      * Some simple tests of bracketed comments.
1:      */
1:     public void testBracketedComments() throws Exception
1:     {
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("/* a comment */ VALUES 1"), 
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES 1 /* a comment */"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment \n with newline */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* SELECT * from FOO */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment /* nested comment */ */ 1"), 
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery(
1:                 "VALUES /*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1"),
1:             new String [][] {{"1"}});
1: 
1:         // mix with eol-comments
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery(
1:                 "VALUES 1 --/*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery(
1:                 "VALUES 1 --/*/* XXX /*/*/* deeply nested comment */*/*/YYY*/*/ 1--/*"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment --\n with newline */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment -- */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES /* a comment \n-- */ 1"),
1:             new String [][] {{"1"}});
1: 
1:         // mix with string quotes
1:         JDBC.assertFullResultSet(
1:             stmt.executeQuery("VALUES '/* a comment \n-- */'"),
1:             new String [][] {{"/* a comment \n-- */"}});
1:     }
1:     
1:     /**
0:      * Set the fixture up.
1:      */
0:     protected void setUp() throws SQLException
1:     {    
0:         getConnection().setAutoCommit(false);
0:         stmt = createStatement();
1:     }
1:     
1:     /**
0:      * Tear-down the fixture.
1:      */
0:     protected void tearDown() throws Exception
1:     {
0:         stmt.close();
0:         super.tearDown();
1:     }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:89a3e2b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = createStatement();
1:         
/////////////////////////////////////////////////////////////////////////
1:         assertCompileError("42X02", "VALUES 1 /*");
1:         assertCompileError("42X02", "VALUES 1 /* comment");
1:         assertCompileError("42X02", "VALUES 1 /* comment /*");
1:         assertCompileError("42X02", "VALUES 1 /* comment /* nested */");
/////////////////////////////////////////////////////////////////////////
1:      * Default connections to auto-commit false.
1:     protected void initializeConnection(Connection conn) throws SQLException
1:         conn.setAutoCommit(false);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ad72a2b
/////////////////////////////////////////////////////////////////////////
1:         // unterminated comments generate lexical errors
0: 
1:         // just comments generates syntax error
1:         assertCompileError("42X01", "/* this is a comment */");
1:         assertCompileError("42X01", "-- this is a comment \n");
commit:f73162d
/////////////////////////////////////////////////////////////////////////
0: 
0:         // unterminated comments
0:         assertCallError("42X03", getConnection(), "VALUES 1 /*");
0:         assertCallError("42X03", getConnection(), "VALUES 1 /* comment");
0:         assertCallError("42X03", getConnection(), "VALUES 1 /* comment /*");
0:         assertCallError("42X03", getConnection(), "VALUES 1 /* comment /* nested */");
============================================================================