1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.GenericRIChecker
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:4cc0287: import java.util.Enumeration;
1:4cc0287: import java.util.Hashtable;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:4cc0287: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:4cc0287: import org.apache.derby.iapi.sql.Activation;
1:4cc0287: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:4cc0287: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:4cc0287: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Generic implementation of a Referential Integrity
1:eac0369:  * checker.  Abstract.
1:eac0369:  */
1:eac0369: public abstract class GenericRIChecker
2:eac0369: {
1:eac0369: 	protected FKInfo					fkInfo;
1:eac0369: 	protected DynamicCompiledOpenConglomInfo[] fkDcocis;
1:eac0369: 	protected StaticCompiledOpenConglomInfo[] fkScocis;
1:eac0369: 	protected DynamicCompiledOpenConglomInfo refDcoci;
1:eac0369: 	protected StaticCompiledOpenConglomInfo refScoci;
1:eac0369: 	protected TransactionController		tc;
1:4cc0287:     protected LanguageConnectionContext lcc;
1:eac0369: 
1:4cc0287:     /**
1:4cc0287:      * Cached value (for efficiency) of the intermediate table of violations
1:4cc0287:      * we use in the presence of deferred FK constraints.
1:4cc0287:      */
1:4cc0287:     protected BackingStoreHashtable deferredRowsHashTable;
1:4cc0287: 
1:4cc0287:     private final Hashtable<Long,ScanController> scanControllers;
1:9179199:     protected final int numColumns;
1:18a6fb2:     protected int[] identityMap;
1:18a6fb2: 
1:4cc0287:     final IndexRow indexQualifierRow;
1:eac0369: 
1:eac0369: 	/**
1:4cc0287:      * @param lcc       the language connection context
1:eac0369: 	 * @param tc		the xact controller
1:6b50965: 	 * @param fkinfo	the foreign key information 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:4cc0287:     GenericRIChecker(LanguageConnectionContext lcc,
1:4cc0287:                      TransactionController tc,
1:4cc0287:                      FKInfo fkinfo) throws StandardException
1:eac0369: 	{
1:4cc0287:         this.lcc = lcc;
1:eac0369: 		this.fkInfo = fkinfo;
1:eac0369: 		this.tc = tc;
1:71c8e86: 		scanControllers = new Hashtable<Long,ScanController>();
1:eac0369: 		numColumns = fkInfo.colArray.length;
1:eac0369: 		indexQualifierRow = new IndexRow(numColumns);
1:eac0369: 
1:eac0369: 		fkDcocis = new DynamicCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
1:eac0369: 		fkScocis = new StaticCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
1:eac0369: 		for (int index = 0; index < fkInfo.fkConglomNumbers.length; index++)
1:eac0369: 		{
1:eac0369: 			fkDcocis[index] = tc.getDynamicCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
1:eac0369: 			fkScocis[index] = tc.getStaticCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
2:eac0369: 		}
1:eac0369: 		refDcoci = tc.getDynamicCompiledConglomInfo(fkInfo.refConglomNumber);
1:eac0369: 		refScoci = tc.getStaticCompiledConglomInfo(fkInfo.refConglomNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Check the validity of this row
1:eac0369: 	 *
1:18a6fb2:      * @param a     The activation
1:18a6fb2:      * @param row   The row to check
1:18a6fb2:      * @param restrictCheckOnly
1:18a6fb2:      *              {@code true} if the check is relevant only for RESTRICTED
1:18a6fb2:      *              referential action.
1:18a6fb2:      * @param deferredRowReq
1:18a6fb2:      *              For referenced keys: The required number of duplicates that
1:18a6fb2:      *              need to be present. Only used if {@code postCheck==false}.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:4cc0287:     abstract void doCheck(Activation a,
1:4cc0287:                           ExecRow row,
1:18a6fb2:                           boolean restrictCheckOnly,
1:18a6fb2:                           int deferredRowReq) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a scan controller positioned using searchRow as
1:eac0369: 	 * the start/stop position.  The assumption is that searchRow
1:eac0369: 	 * is of the same format as the index being opened. 
1:eac0369: 	 * The scan is set up to return no columns.
1:eac0369: 	 * NOTE: We only need an instantaneous lock on the
1:eac0369: 	 * table that we are probing as we are just checking
1:0c5bc3a:      * for the existence of a row.  All updaters, whether
1:eac0369: 	 * to the primary or foreign key tables, will hold an
1:eac0369: 	 * X lock on the table that they are updating and will
1:eac0369: 	 * be probing the other table, so instantaneous locks
1:eac0369: 	 * will not change the semantics.
1:eac0369: 	 *
1:eac0369: 	 * RESOLVE:  Due to the current RI implementation 
1:eac0369: 	 * we cannot always get instantaneous locks.  We
1:eac0369: 	 * will call a method to find out what kind of
1:eac0369: 	 * locking to do until the implementation changes.
1:eac0369: 	 *
1:eac0369: 	 * @param conglomNumber		the particular conglomerate we 
1:eac0369: 	 *							are interested in
1:0c5bc3a:      * @param scoci
1:0c5bc3a:      * @param dcoci
1:eac0369: 	 * @param searchRow			the row to match
1:0c5bc3a:      * @return                  scan controller
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	protected ScanController getScanController(long conglomNumber,
1:eac0369: 											   StaticCompiledOpenConglomInfo scoci,
1:eac0369: 											   DynamicCompiledOpenConglomInfo dcoci, ExecRow searchRow)
2:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int				isoLevel = getRICheckIsolationLevel();
1:eac0369: 		ScanController 	scan;
1:4cc0287:         Long            hashKey = Long.valueOf(conglomNumber);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we haven't already opened this scan controller,
1:eac0369: 		** we'll open it now and stick it in the hash table.
1:eac0369: 		*/
1:71c8e86: 		if ((scan = scanControllers.get(hashKey)) == null)
1:eac0369: 		{
1:eac0369: 			setupQualifierRow(searchRow);
1:eac0369: 			scan = 
1:eac0369:                 tc.openCompiledScan(
1:eac0369:                       false,                       				// hold 
1:eac0369:                       0, 										// read only
1:eac0369:                       TransactionController.MODE_RECORD,		// row locking
1:eac0369: 					  isoLevel,
1:eac0369:                       (FormatableBitSet)null, 							// retrieve all fields
1:eac0369:                       indexQualifierRow.getRowArray(),    		// startKeyValue
1:eac0369:                       ScanController.GE,            			// startSearchOp
1:eac0369:                       null,                         			// qualifier
1:eac0369:                       indexQualifierRow.getRowArray(),    		// stopKeyValue
1:eac0369:                       ScanController.GT,             			// stopSearchOp 
1:eac0369: 					  scoci,
1:eac0369: 					  dcoci
1:eac0369:                       );
1:eac0369: 			scanControllers.put(hashKey, scan);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** If the base row is the same row as the previous	
1:eac0369: 			** row, this call to setupQualfierRow is redundant,
1:eac0369: 			** but it is safer this way so we'll take the
1:eac0369: 			** marginal performance hit (marginal relative
1:eac0369: 			** to the index scans that we are making).
1:eac0369: 			*/
1:eac0369: 			setupQualifierRow(searchRow);
1:eac0369: 			scan.reopenScan(
1:eac0369:                       indexQualifierRow.getRowArray(),    	// startKeyValue
1:eac0369:                       ScanController.GE,            		// startSearchOp
1:eac0369:                       null,                         		// qualifier
1:eac0369:                       indexQualifierRow.getRowArray(), 		// stopKeyValue
1:eac0369:                       ScanController.GT             		// stopSearchOp 
1:eac0369:                       );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return scan;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Do reference copy for the qualifier row.  No cloning.
1:eac0369: 	** So we cannot get another row until we are done with
1:eac0369: 	** this one.
1:eac0369: 	*/
1:eac0369: 	private void setupQualifierRow(ExecRow baseRow)
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] indexColArray = indexQualifierRow.getRowArray();
1:eac0369: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
1:eac0369: 
1:eac0369: 		for (int i = 0; i < numColumns; i++)
1:eac0369: 		{
1:eac0369: 			indexColArray[i] = baseColArray[fkInfo.colArray[i] - 1];
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Are any of the fields null in the row passed
1:eac0369: 	 * in.  The only fields that are checked are those
1:eac0369: 	 * corresponding to the colArray in fkInfo.
1:18a6fb2:      *
1:18a6fb2:      * @param baseRow the row to check for null fields
1:18a6fb2:      * @return {@code true} if any are null
1:eac0369: 	 */
1:eac0369: 	boolean isAnyFieldNull(ExecRow baseRow)
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
1:eac0369: 
1:eac0369: 		for (int i = 0; i < numColumns; i++)
1:eac0369: 		{
1:eac0369: 			DataValueDescriptor storable = baseColArray[fkInfo.colArray[i] - 1];
1:eac0369: 			if (storable.isNull())
1:eac0369: 			{
1:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 			
1:eac0369: 	/**
1:eac0369: 	 * Clean up all scan controllers
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void close()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:71c8e86: 		Enumeration<ScanController> e = scanControllers.elements();
1:eac0369: 		while (e.hasMoreElements())
1:eac0369: 		{
1:71c8e86: 			ScanController scan = e.nextElement();
1:eac0369: 			scan.close();
1:eac0369: 		}
1:eac0369: 		scanControllers.clear();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the isolation level for the scan for
1:eac0369: 	 * the RI check.
1:eac0369: 	 *
1:eac0369: 	 * NOTE: The level will eventually be instantaneous
1:0c5bc3a:      * locking once the implementation changes.
1:eac0369: 	 *
1:eac0369: 	 * @return The isolation level for the scan for
1:eac0369: 	 * the RI check.
1:eac0369: 	 */
1:eac0369: 	int getRICheckIsolationLevel()
1:eac0369: 	{
1:eac0369: 		return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:45da2f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:18a6fb2
/////////////////////////////////////////////////////////////////////////
1:     protected int[] identityMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param a     The activation
1:      * @param row   The row to check
1:      * @param restrictCheckOnly
1:      *              {@code true} if the check is relevant only for RESTRICTED
1:      *              referential action.
0:      * @param postCheck
0:      *              For referenced keys: if {@code true}, rows are not yet
0:      *              deleted, so do the check in the case of deferred PK later
1:      * @param deferredRowReq
1:      *              For referenced keys: The required number of duplicates that
1:      *              need to be present. Only used if {@code postCheck==false}.
1:                           boolean restrictCheckOnly,
0:                           boolean postCheck,
1:                           int deferredRowReq) throws StandardException;
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param baseRow the row to check for null fields
1:      * @return {@code true} if any are null
commit:9179199
/////////////////////////////////////////////////////////////////////////
1:     protected final int numColumns;
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     protected LanguageConnectionContext lcc;
1:     /**
1:      * Cached value (for efficiency) of the intermediate table of violations
1:      * we use in the presence of deferred FK constraints.
1:      */
1:     protected BackingStoreHashtable deferredRowsHashTable;
1: 
1:     private final Hashtable<Long,ScanController> scanControllers;
0:     private final int numColumns;
1:     final IndexRow indexQualifierRow;
1:      * @param lcc       the language connection context
1:     GenericRIChecker(LanguageConnectionContext lcc,
1:                      TransactionController tc,
1:                      FKInfo fkinfo) throws StandardException
1:         this.lcc = lcc;
/////////////////////////////////////////////////////////////////////////
0:      * @param a     the activation
0:      * @param restrictCheckOnly If {@code true}, only perform check if the
0:      *              constraint action is RESTRICT.
1:     abstract void doCheck(Activation a,
1:                           ExecRow row,
0:                           boolean restrictCheckOnly) throws StandardException;
0:     public void doCheck(Activation a, ExecRow row) throws StandardException
0:         doCheck(a, row, false); //Check all the referential Actions
/////////////////////////////////////////////////////////////////////////
1:         Long            hashKey = Long.valueOf(conglomNumber);
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * for the existence of a row.  All updaters, whether
/////////////////////////////////////////////////////////////////////////
1:      * @param scoci
1:      * @param dcoci
1:      * @return                  scan controller
/////////////////////////////////////////////////////////////////////////
1:      * locking once the implementation changes.
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0: 	private Hashtable<Long,ScanController> 		scanControllers;
/////////////////////////////////////////////////////////////////////////
1: 		scanControllers = new Hashtable<Long,ScanController>();
/////////////////////////////////////////////////////////////////////////
1: 		if ((scan = scanControllers.get(hashKey)) == null)
/////////////////////////////////////////////////////////////////////////
1: 		Enumeration<ScanController> e = scanControllers.elements();
1: 			ScanController scan = e.nextElement();
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param fkinfo	the foreign key information 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericRIChecker
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import java.util.Enumeration;
0: import java.util.Hashtable;
1: 
1: /**
1:  * Generic implementation of a Referential Integrity
1:  * checker.  Abstract.
1:  */
1: public abstract class GenericRIChecker
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	protected FKInfo					fkInfo;
1: 	protected DynamicCompiledOpenConglomInfo[] fkDcocis;
1: 	protected StaticCompiledOpenConglomInfo[] fkScocis;
1: 	protected DynamicCompiledOpenConglomInfo refDcoci;
1: 	protected StaticCompiledOpenConglomInfo refScoci;
1: 	protected TransactionController		tc;
1: 
0: 	private Hashtable 		scanControllers;
0: 	private int				numColumns;
0: 	private	IndexRow		indexQualifierRow;
1: 
1: 	/**
1: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	GenericRIChecker(TransactionController tc, FKInfo fkinfo)
1: 		throws StandardException
1: 	{
1: 		this.fkInfo = fkinfo;
1: 		this.tc = tc;
0: 		scanControllers = new Hashtable();
1: 		numColumns = fkInfo.colArray.length;
1: 		indexQualifierRow = new IndexRow(numColumns);
1: 
1: 		fkDcocis = new DynamicCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
1: 		fkScocis = new StaticCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
1: 		for (int index = 0; index < fkInfo.fkConglomNumbers.length; index++)
1: 		{
1: 			fkDcocis[index] = tc.getDynamicCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
1: 			fkScocis[index] = tc.getStaticCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
1: 		}
1: 		refDcoci = tc.getDynamicCompiledConglomInfo(fkInfo.refConglomNumber);
1: 		refScoci = tc.getStaticCompiledConglomInfo(fkInfo.refConglomNumber);
1: 	}
1: 
1: 	/**
1: 	 * Check the validity of this row
1: 	 *
0: 	 * @param row	the row to check
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	abstract void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException;
1: 
0: 	public void doCheck(ExecRow row) throws StandardException
1: 	{
0: 		doCheck(row, false); //Check all the referential Actions
1: 	}
1: 
1: 	/**
1: 	 * Get a scan controller positioned using searchRow as
1: 	 * the start/stop position.  The assumption is that searchRow
1: 	 * is of the same format as the index being opened. 
1: 	 * The scan is set up to return no columns.
1: 	 * NOTE: We only need an instantaneous lock on the
1: 	 * table that we are probing as we are just checking
0: 	 * for the existance of a row.  All updaters, whether
1: 	 * to the primary or foreign key tables, will hold an
1: 	 * X lock on the table that they are updating and will
1: 	 * be probing the other table, so instantaneous locks
1: 	 * will not change the semantics.
1: 	 *
1: 	 * RESOLVE:  Due to the current RI implementation 
1: 	 * we cannot always get instantaneous locks.  We
1: 	 * will call a method to find out what kind of
1: 	 * locking to do until the implementation changes.
1: 	 *
1: 	 * @param conglomNumber		the particular conglomerate we 
1: 	 *							are interested in
1: 	 * @param searchRow			the row to match
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	protected ScanController getScanController(long conglomNumber,
1: 											   StaticCompiledOpenConglomInfo scoci,
1: 											   DynamicCompiledOpenConglomInfo dcoci, ExecRow searchRow)
1: 		throws StandardException
1: 	{
1: 		int				isoLevel = getRICheckIsolationLevel();
1: 		ScanController 	scan;
0: 		Long			hashKey = new Long(conglomNumber);
1: 
1: 		/*
1: 		** If we haven't already opened this scan controller,
1: 		** we'll open it now and stick it in the hash table.
1: 		*/
0: 		if ((scan = (ScanController)scanControllers.get(hashKey)) == null)
1: 		{
1: 			setupQualifierRow(searchRow);
1: 			scan = 
1:                 tc.openCompiledScan(
1:                       false,                       				// hold 
1:                       0, 										// read only
1:                       TransactionController.MODE_RECORD,		// row locking
1: 					  isoLevel,
1:                       (FormatableBitSet)null, 							// retrieve all fields
1:                       indexQualifierRow.getRowArray(),    		// startKeyValue
1:                       ScanController.GE,            			// startSearchOp
1:                       null,                         			// qualifier
1:                       indexQualifierRow.getRowArray(),    		// stopKeyValue
1:                       ScanController.GT,             			// stopSearchOp 
1: 					  scoci,
1: 					  dcoci
1:                       );
1: 			scanControllers.put(hashKey, scan);
1: 		}
1: 		else
1: 		{
1: 			/*
1: 			** If the base row is the same row as the previous	
1: 			** row, this call to setupQualfierRow is redundant,
1: 			** but it is safer this way so we'll take the
1: 			** marginal performance hit (marginal relative
1: 			** to the index scans that we are making).
1: 			*/
1: 			setupQualifierRow(searchRow);
1: 			scan.reopenScan(
1:                       indexQualifierRow.getRowArray(),    	// startKeyValue
1:                       ScanController.GE,            		// startSearchOp
1:                       null,                         		// qualifier
1:                       indexQualifierRow.getRowArray(), 		// stopKeyValue
1:                       ScanController.GT             		// stopSearchOp 
1:                       );
1: 		}
1: 
1: 		return scan;
1: 	}
1: 
1: 	/*
1: 	** Do reference copy for the qualifier row.  No cloning.
1: 	** So we cannot get another row until we are done with
1: 	** this one.
1: 	*/
1: 	private void setupQualifierRow(ExecRow baseRow)
1: 	{
1: 		DataValueDescriptor[] indexColArray = indexQualifierRow.getRowArray();
1: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
1: 
1: 		for (int i = 0; i < numColumns; i++)
1: 		{
1: 			indexColArray[i] = baseColArray[fkInfo.colArray[i] - 1];
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Are any of the fields null in the row passed
1: 	 * in.  The only fields that are checked are those
1: 	 * corresponding to the colArray in fkInfo.
1: 	 */
1: 	boolean isAnyFieldNull(ExecRow baseRow)
1: 	{
1: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
1: 
1: 		for (int i = 0; i < numColumns; i++)
1: 		{
1: 			DataValueDescriptor storable = baseColArray[fkInfo.colArray[i] - 1];
1: 			if (storable.isNull())
1: 			{
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 		
1: 			
1: 	/**
1: 	 * Clean up all scan controllers
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void close()
1: 		throws StandardException
1: 	{
0: 		Enumeration e = scanControllers.elements();
1: 		while (e.hasMoreElements())
1: 		{
0: 			ScanController scan = (ScanController)e.nextElement();
1: 			scan.close();
1: 		}
1: 		scanControllers.clear();
1: 	}
1: 
1: 	/**
1: 	 * Get the isolation level for the scan for
1: 	 * the RI check.
1: 	 *
1: 	 * NOTE: The level will eventually be instantaneous
0: 	 * locking once the implemenation changes.
1: 	 *
1: 	 * @return The isolation level for the scan for
1: 	 * the RI check.
1: 	 */
1: 	int getRICheckIsolationLevel()
1: 	{
1: 		return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import java.util.Enumeration;
0: import java.util.Hashtable;
0: 
0: /**
0:  * Generic implementation of a Referential Integrity
0:  * checker.  Abstract.
0:  */
0: public abstract class GenericRIChecker
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected FKInfo					fkInfo;
0: 	protected DynamicCompiledOpenConglomInfo[] fkDcocis;
0: 	protected StaticCompiledOpenConglomInfo[] fkScocis;
0: 	protected DynamicCompiledOpenConglomInfo refDcoci;
0: 	protected StaticCompiledOpenConglomInfo refScoci;
0: 	protected TransactionController		tc;
0: 
0: 	private Hashtable 		scanControllers;
0: 	private int				numColumns;
0: 	private	IndexRow		indexQualifierRow;
0: 
0: 	/**
0: 	 * @param tc		the xact controller
0: 	 * @param fkInfo	the foreign key information 
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	GenericRIChecker(TransactionController tc, FKInfo fkinfo)
0: 		throws StandardException
0: 	{
0: 		this.fkInfo = fkinfo;
0: 		this.tc = tc;
0: 		scanControllers = new Hashtable();
0: 		numColumns = fkInfo.colArray.length;
0: 		indexQualifierRow = new IndexRow(numColumns);
0: 
0: 		fkDcocis = new DynamicCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
0: 		fkScocis = new StaticCompiledOpenConglomInfo[fkInfo.fkConglomNumbers.length];
0: 		for (int index = 0; index < fkInfo.fkConglomNumbers.length; index++)
0: 		{
0: 			fkDcocis[index] = tc.getDynamicCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
0: 			fkScocis[index] = tc.getStaticCompiledConglomInfo(fkInfo.fkConglomNumbers[index]);
0: 		}
0: 		refDcoci = tc.getDynamicCompiledConglomInfo(fkInfo.refConglomNumber);
0: 		refScoci = tc.getStaticCompiledConglomInfo(fkInfo.refConglomNumber);
0: 	}
0: 
0: 	/**
0: 	 * Check the validity of this row
0: 	 *
0: 	 * @param row	the row to check
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	abstract void doCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException;
0: 
0: 	public void doCheck(ExecRow row) throws StandardException
0: 	{
0: 		doCheck(row, false); //Check all the referential Actions
0: 	}
0: 
0: 	/**
0: 	 * Get a scan controller positioned using searchRow as
0: 	 * the start/stop position.  The assumption is that searchRow
0: 	 * is of the same format as the index being opened. 
0: 	 * The scan is set up to return no columns.
0: 	 * NOTE: We only need an instantaneous lock on the
0: 	 * table that we are probing as we are just checking
0: 	 * for the existance of a row.  All updaters, whether
0: 	 * to the primary or foreign key tables, will hold an
0: 	 * X lock on the table that they are updating and will
0: 	 * be probing the other table, so instantaneous locks
0: 	 * will not change the semantics.
0: 	 *
0: 	 * RESOLVE:  Due to the current RI implementation 
0: 	 * we cannot always get instantaneous locks.  We
0: 	 * will call a method to find out what kind of
0: 	 * locking to do until the implementation changes.
0: 	 *
0: 	 * @param conglomNumber		the particular conglomerate we 
0: 	 *							are interested in
0: 	 * @param searchRow			the row to match
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	protected ScanController getScanController(long conglomNumber,
0: 											   StaticCompiledOpenConglomInfo scoci,
0: 											   DynamicCompiledOpenConglomInfo dcoci, ExecRow searchRow)
0: 		throws StandardException
0: 	{
0: 		int				isoLevel = getRICheckIsolationLevel();
0: 		ScanController 	scan;
0: 		Long			hashKey = new Long(conglomNumber);
0: 
0: 		/*
0: 		** If we haven't already opened this scan controller,
0: 		** we'll open it now and stick it in the hash table.
0: 		*/
0: 		if ((scan = (ScanController)scanControllers.get(hashKey)) == null)
0: 		{
0: 			setupQualifierRow(searchRow);
0: 			scan = 
0:                 tc.openCompiledScan(
0:                       false,                       				// hold 
0:                       0, 										// read only
0:                       TransactionController.MODE_RECORD,		// row locking
0: 					  isoLevel,
0:                       (FormatableBitSet)null, 							// retrieve all fields
0:                       indexQualifierRow.getRowArray(),    		// startKeyValue
0:                       ScanController.GE,            			// startSearchOp
0:                       null,                         			// qualifier
0:                       indexQualifierRow.getRowArray(),    		// stopKeyValue
0:                       ScanController.GT,             			// stopSearchOp 
0: 					  scoci,
0: 					  dcoci
0:                       );
0: 			scanControllers.put(hashKey, scan);
0: 		}
0: 		else
0: 		{
0: 			/*
0: 			** If the base row is the same row as the previous	
0: 			** row, this call to setupQualfierRow is redundant,
0: 			** but it is safer this way so we'll take the
0: 			** marginal performance hit (marginal relative
0: 			** to the index scans that we are making).
0: 			*/
0: 			setupQualifierRow(searchRow);
0: 			scan.reopenScan(
0:                       indexQualifierRow.getRowArray(),    	// startKeyValue
0:                       ScanController.GE,            		// startSearchOp
0:                       null,                         		// qualifier
0:                       indexQualifierRow.getRowArray(), 		// stopKeyValue
0:                       ScanController.GT             		// stopSearchOp 
0:                       );
0: 		}
0: 
0: 		return scan;
0: 	}
0: 
0: 	/*
0: 	** Do reference copy for the qualifier row.  No cloning.
0: 	** So we cannot get another row until we are done with
0: 	** this one.
0: 	*/
0: 	private void setupQualifierRow(ExecRow baseRow)
0: 	{
0: 		DataValueDescriptor[] indexColArray = indexQualifierRow.getRowArray();
0: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
0: 
0: 		for (int i = 0; i < numColumns; i++)
0: 		{
0: 			indexColArray[i] = baseColArray[fkInfo.colArray[i] - 1];
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Are any of the fields null in the row passed
0: 	 * in.  The only fields that are checked are those
0: 	 * corresponding to the colArray in fkInfo.
0: 	 */
0: 	boolean isAnyFieldNull(ExecRow baseRow)
0: 	{
0: 		DataValueDescriptor[] baseColArray = baseRow.getRowArray();
0: 
0: 		for (int i = 0; i < numColumns; i++)
0: 		{
0: 			DataValueDescriptor storable = baseColArray[fkInfo.colArray[i] - 1];
0: 			if (storable.isNull())
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 		return false;
0: 	}
0: 		
0: 			
0: 	/**
0: 	 * Clean up all scan controllers
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void close()
0: 		throws StandardException
0: 	{
0: 		Enumeration e = scanControllers.elements();
0: 		while (e.hasMoreElements())
0: 		{
0: 			ScanController scan = (ScanController)e.nextElement();
0: 			scan.close();
0: 		}
0: 		scanControllers.clear();
0: 	}
0: 
0: 	/**
0: 	 * Get the isolation level for the scan for
0: 	 * the RI check.
0: 	 *
0: 	 * NOTE: The level will eventually be instantaneous
0: 	 * locking once the implemenation changes.
0: 	 *
0: 	 * @return The isolation level for the scan for
0: 	 * the RI check.
0: 	 */
0: 	int getRICheckIsolationLevel()
0: 	{
0: 		return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
0: 	}
0: }
============================================================================