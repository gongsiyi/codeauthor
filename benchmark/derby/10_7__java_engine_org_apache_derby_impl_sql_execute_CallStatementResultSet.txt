1:eac0369: /*
11:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CallStatementResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:5b2b352: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:5b2b352: import java.sql.ResultSet;
1:5b2b352: import java.sql.SQLException;
1:5b2b352: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:5b2b352: import org.apache.derby.iapi.jdbc.ConnectionContext;
1:b31849d: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:99d7d8b: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
2:eac0369: /**
1:5b2b352:  * Call a Java procedure. This calls a generated method in the
1:5b2b352:  * activation which sets up the parameters and then calls the
1:5b2b352:  * Java method that the procedure resolved to.
1:5b2b352:  * <P>
1:5b2b352:  * Valid dynamic results returned by the procedure will be closed
1:5b2b352:  * as inaccessible when this is closed (e.g. a CALL within a trigger).
1:5b2b352:  * 
1:5b2b352:  * <BR>
1:5b2b352:  * Any code that requires the dynamic results to be accessible
1:5b2b352:  * (such as the JDBC Statement object executing the CALL) must
1:5b2b352:  * obtain the dynamic results from Activation.getDynamicResults()
1:5b2b352:  * and remove each ResultSet it will be handling by clearing the
1:5b2b352:  * reference in the object returned.
1:5b2b352:  * 
1:5b2b352:  * @see Activation#getDynamicResults()
1:eac0369:  */
1:eac0369: class CallStatementResultSet extends NoRowsResultSetImpl
1:eac0369: {
1:99d7d8b: 
1:eac0369: 	private final GeneratedMethod methodCall;
1:99d7d8b: 
1:eac0369:     /*
1:eac0369:      * class interface
2:eac0369:      *
1:eac0369:      */
1:eac0369:     CallStatementResultSet(
1:eac0369: 				GeneratedMethod methodCall,
1:eac0369: 				Activation a) 
1:eac0369:     {
1:eac0369: 		super(a);
1:eac0369: 		this.methodCall = methodCall;
1:5b2b352: 	}
1:99d7d8b: 
1:eac0369: 	/**
1:5b2b352:      * Just invoke the method.
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void open() throws StandardException
1:eac0369: 	{
1:6369b54: 		setup();
1:99d7d8b: 
1:6950a39:         methodCall.invoke(activation);
1:99d7d8b:     }
1:99d7d8b: 
1:5b2b352:     /**
1:5b2b352:      * Need to explicitly close any dynamic result sets.
1:5b2b352:      * <BR>
1:5b2b352:      * If the dynamic results are not accessible then they
1:5b2b352:      * need to be destroyed (ie. closed) according the the
1:5b2b352:      * SQL Standard.
1:5b2b352:      * <BR>
1:5b2b352:      * An execution of a CALL statement through JDBC makes the
1:5b2b352:      * dynamic results accessible, in this case the closing
1:5b2b352:      * of the dynamic result sets is handled by the JDBC
1:5b2b352:      * statement object (EmbedStatement) that executed the CALL.
1:5b2b352:      * We cannot unify the closing of dynamic result sets to
1:5b2b352:      * this close, as in accessible case it is called during
1:5b2b352:      * the Statement.execute call, thus it would close the
1:5b2b352:      * dynamic results before the application has a change
1:5b2b352:      * to use them.
1:5b2b352:      * 
1:5b2b352:      * <BR>
1:5b2b352:      * With an execution of a CALL
1:5b2b352:      * statement as a trigger's action statement the dynamic
1:5b2b352:      * result sets are not accessible. In this case this close
1:5b2b352:      * method is called after the execution of the trigger's
1:5b2b352:      * action statement.
1:5b2b352:      * <BR>
1:5b2b352:      * <BR>
1:5b2b352:      * Section 4.27.5 of the TECHNICAL CORRIGENDUM 1 to the SQL 2003
1:5b2b352:      * Standard details what happens to dynamic result sets in detail,
1:5b2b352:      * the SQL 2003 foundation document is missing these details.
1:5b2b352:      */
1:5b2b352:     public void close() throws StandardException
1:5b2b352:     {
1:01632c2:         close( false );
1:5b2b352:         
1:5b2b352:         
1:5b2b352:         
1:5b2b352:         ResultSet[][] dynamicResults = getActivation().getDynamicResults();
1:5b2b352:         if (dynamicResults != null)
1:5b2b352:         {
1:5b2b352:             // Need to ensure all the result sets opened by this
1:5b2b352:             // CALL statement for this connection are closed.
1:5b2b352:             // If any close() results in an exception we need to keep going,
1:5b2b352:             // save any exceptions and then throw them once we are complete.
1:5b2b352:             StandardException errorOnClose = null;
1:5b2b352:             
1:5b2b352:             ConnectionContext jdbcContext = null;
1:5b2b352:             
1:5b2b352:             for (int i = 0; i < dynamicResults.length; i++)
1:5b2b352:             {
1:5b2b352:                 ResultSet[] param = dynamicResults[i];
1:5b2b352:                 ResultSet drs = param[0];
1:5b2b352:                 
1:5b2b352:                 // Can be null if the procedure never set this parameter
1:5b2b352:                 // or if the dynamic results were processed by JDBC (EmbedStatement).
1:5b2b352:                 if (drs == null)
1:5b2b352:                     continue;
1:5b2b352:                 
1:5b2b352:                 if (jdbcContext == null)
1:5b2b352:                     jdbcContext = (ConnectionContext)
1:5b2b352:                    lcc.getContextManager().getContext(ConnectionContext.CONTEXT_ID);
1:5b2b352:                
1:99d7d8b:                 try {
1:5b2b352:                     
1:5b2b352:                     // Is this a valid, open dynamic result set for this connection?
1:5b2b352:                     if (!jdbcContext.processInaccessibleDynamicResult(drs))
1:5b2b352:                     {
1:5b2b352:                         // If not just ignore it, not Derby's problem.
1:5b2b352:                         continue;
1:5b2b352:                     }
1:5b2b352:                     
1:5b2b352:                     drs.close();
1:5b2b352:                     
1:5b2b352:                 } catch (SQLException e) {
1:5b2b352:                     
1:5b2b352:                     // Just report the first error
1:5b2b352:                     if (errorOnClose == null)
1:5b2b352:                     {
1:5b2b352:                         StandardException se = StandardException.plainWrapException(e);
1:5b2b352:                         errorOnClose = se;
1:5b2b352:                     }
1:5b2b352:                 }
1:99d7d8b:                 finally {
1:5b2b352:                     // Remove any reference to the ResultSet to allow
1:5b2b352:                     // it and any associated resources to be garbage collected.
1:5b2b352:                     param[0] = null;
1:99d7d8b:                 }
1:5b2b352:             }
1:5b2b352:             
1:5b2b352:             if (errorOnClose != null)
1:5b2b352:                 throw errorOnClose;
1:5b2b352:         }       
1:5b2b352:     }
1:eac0369: 
1:eac0369: 	/**
1:6424aac: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
1:eac0369: 	 */
1:9f9a13a: 	public void	cleanUp() throws StandardException
1:eac0369: 	{
1:9f9a13a: 			close();
3:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:         close( false );
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:300bbeb
/////////////////////////////////////////////////////////////////////////
commit:6424aac
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
commit:6369b54
/////////////////////////////////////////////////////////////////////////
1: 		setup();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:6950a39
/////////////////////////////////////////////////////////////////////////
1:         methodCall.invoke(activation);
commit:99d7d8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 
0:         LanguageConnectionContext lcc =
0:             activation.getLanguageConnectionContext();
1: 
0:         // Push the "authorization stack" of SQL 2003, vol 2, section
0:         // 4.34.1.1 and 4.27.3.
0:         lcc.pushCaller(activation);
1: 
0:         // Copy the current role into top cell of stack. Activations
0:         // inside nested connections look to this activation for
0:         // keeping its current role rather than rely on what's in lcc
0:         // (top level only).
0:         activation.setNestedCurrentRole(lcc.getCurrentRoleId(activation));
1: 
1:         try {
0:             methodCall.invoke(activation);
1:         }
1:         finally {
0:             activation.getLanguageConnectionContext().popCaller();
1:         }
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:9f9a13a
/////////////////////////////////////////////////////////////////////////
1: 	public void	cleanUp() throws StandardException
1: 			close();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:5b2b352
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.jdbc.ConnectionContext;
1:  * Call a Java procedure. This calls a generated method in the
1:  * activation which sets up the parameters and then calls the
1:  * Java method that the procedure resolved to.
1:  * <P>
1:  * Valid dynamic results returned by the procedure will be closed
1:  * as inaccessible when this is closed (e.g. a CALL within a trigger).
1:  * 
1:  * <BR>
1:  * Any code that requires the dynamic results to be accessible
1:  * (such as the JDBC Statement object executing the CALL) must
1:  * obtain the dynamic results from Activation.getDynamicResults()
1:  * and remove each ResultSet it will be handling by clearing the
1:  * reference in the object returned.
1:  * 
1:  * @see Activation#getDynamicResults()
/////////////////////////////////////////////////////////////////////////
1:      * Just invoke the method.
1:     }
1:     
1:     /**
1:      * Need to explicitly close any dynamic result sets.
1:      * <BR>
1:      * If the dynamic results are not accessible then they
1:      * need to be destroyed (ie. closed) according the the
1:      * SQL Standard.
1:      * <BR>
1:      * An execution of a CALL statement through JDBC makes the
1:      * dynamic results accessible, in this case the closing
1:      * of the dynamic result sets is handled by the JDBC
1:      * statement object (EmbedStatement) that executed the CALL.
1:      * We cannot unify the closing of dynamic result sets to
1:      * this close, as in accessible case it is called during
1:      * the Statement.execute call, thus it would close the
1:      * dynamic results before the application has a change
1:      * to use them.
1:      * 
1:      * <BR>
1:      * With an execution of a CALL
1:      * statement as a trigger's action statement the dynamic
1:      * result sets are not accessible. In this case this close
1:      * method is called after the execution of the trigger's
1:      * action statement.
1:      * <BR>
1:      * <BR>
1:      * Section 4.27.5 of the TECHNICAL CORRIGENDUM 1 to the SQL 2003
1:      * Standard details what happens to dynamic result sets in detail,
1:      * the SQL 2003 foundation document is missing these details.
1:      */
1:     public void close() throws StandardException
1:     {
0:         super.close();
1:         
1:         
1:         
1:         ResultSet[][] dynamicResults = getActivation().getDynamicResults();
1:         if (dynamicResults != null)
1:         {
1:             // Need to ensure all the result sets opened by this
1:             // CALL statement for this connection are closed.
1:             // If any close() results in an exception we need to keep going,
1:             // save any exceptions and then throw them once we are complete.
1:             StandardException errorOnClose = null;
1:             
1:             ConnectionContext jdbcContext = null;
1:             
1:             for (int i = 0; i < dynamicResults.length; i++)
1:             {
1:                 ResultSet[] param = dynamicResults[i];
1:                 ResultSet drs = param[0];
1:                 
1:                 // Can be null if the procedure never set this parameter
1:                 // or if the dynamic results were processed by JDBC (EmbedStatement).
1:                 if (drs == null)
1:                     continue;
1:                 
1:                 if (jdbcContext == null)
1:                     jdbcContext = (ConnectionContext)
1:                    lcc.getContextManager().getContext(ConnectionContext.CONTEXT_ID);
1:                
0:                 try {
1:                     
1:                     // Is this a valid, open dynamic result set for this connection?
1:                     if (!jdbcContext.processInaccessibleDynamicResult(drs))
1:                     {
1:                         // If not just ignore it, not Derby's problem.
1:                         continue;
1:                     }
1:                     
1:                     drs.close();
1:                     
1:                 } catch (SQLException e) {
1:                     
1:                     // Just report the first error
1:                     if (errorOnClose == null)
1:                     {
1:                         StandardException se = StandardException.plainWrapException(e);
1:                         errorOnClose = se;
1:                     }
1:                 }
0:                 finally {
1:                     // Remove any reference to the ResultSet to allow
1:                     // it and any associated resources to be garbage collected.
1:                     param[0] = null;
1:                 }
1:             }
1:             
1:             if (errorOnClose != null)
1:                 throw errorOnClose;
1:         }       
commit:b31849d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CallStatementResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
0:  * Call the specified expression, ignoring the return, if any.
1:  *
0:  * @author jerry
1:  */
1: class CallStatementResultSet extends NoRowsResultSetImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private final GeneratedMethod methodCall;
1: 
1:     /*
1:      * class interface
1:      *
1:      */
1:     CallStatementResultSet(
1: 				GeneratedMethod methodCall,
1: 				Activation a) 
0: 			throws StandardException
1:     {
1: 		super(a);
1: 		this.methodCall = methodCall;
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void open() throws StandardException
1: 	{
0: 		methodCall.invoke(activation);
0: 		close();
1:     }
1: 
1: 	/**
0: 	 * @see ResultSet#cleanUp
1: 	 */
0: 	public void	cleanUp() 
1: 	{
0: 		/* Nothing to do */
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * Call the specified expression, ignoring the return, if any.
0:  *
0:  * @author jerry
0:  */
0: class CallStatementResultSet extends NoRowsResultSetImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private final GeneratedMethod methodCall;
0: 
0:     /*
0:      * class interface
0:      *
0:      */
0:     CallStatementResultSet(
0: 				GeneratedMethod methodCall,
0: 				Activation a) 
0: 			throws StandardException
0:     {
0: 		super(a);
0: 		this.methodCall = methodCall;
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void open() throws StandardException
0: 	{
0: 		methodCall.invoke(activation);
0: 		close();
0:     }
0: 
0: 	/**
0: 	 * @see ResultSet#cleanUp
0: 	 */
0: 	public void	cleanUp() 
0: 	{
0: 		/* Nothing to do */
0: 	}
0: }
============================================================================