1:fc2589d: /*
7:fc2589d: 
1:fc2589d:    Derby - Class org.apache.derbyTesting.functionTests.util.HarnessJavaTest
1:fc2589d: 
1:fc2589d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fc2589d:    contributor license agreements.  See the NOTICE file distributed with
1:fc2589d:    this work for additional information regarding copyright ownership.
1:fc2589d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:fc2589d:    (the "License"); you may not use this file except in compliance with
1:fc2589d:    the License.  You may obtain a copy of the License at
1:fc2589d: 
1:fc2589d:       http://www.apache.org/licenses/LICENSE-2.0
1:fc2589d: 
1:fc2589d:    Unless required by applicable law or agreed to in writing, software
1:fc2589d:    distributed under the License is distributed on an "AS IS" BASIS,
1:fc2589d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc2589d:    See the License for the specific language governing permissions and
1:fc2589d:    limitations under the License.
1:fc2589d: 
2:fc2589d:  */
1:fc2589d: package org.apache.derbyTesting.functionTests.util;
1:fc2589d: 
1:fc2589d: import java.io.PrintStream;
1:fc2589d: import java.lang.reflect.Method;
1:fc2589d: import java.util.Properties;
1:fc2589d: 
1:fc2589d: import junit.framework.Test;
1:fc2589d: 
1:fc2589d: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:fc2589d: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:87f37d6: import org.apache.derbyTesting.junit.JDBC;
1:fc2589d: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:fc2589d: import org.apache.derbyTesting.junit.TestConfiguration;
1:fc2589d: 
2:fc2589d: /**
1:fc2589d:  * Run a '.java' test from the old harness in the Junit infrastructure.
1:fc2589d:  * The test's output is compared to a master file using the facilities
1:fc2589d:  * of the super class CanonTestCase.
1:fc2589d:  * <BR>
1:fc2589d:  * This allows a faster switch to running all tests under a single
1:fc2589d:  * JUnit infrastructure. Running a test using this class does not
1:fc2589d:  * preclude it from being converted to a real JUnit assert based test.
1:fc2589d:  *
1:fc2589d:  */
1:fc2589d: public abstract class HarnessJavaTest extends CanonTestCase {
1:fc2589d: 
1:fc2589d:     private static final Object[] MAIN_ARG = new Object[] {new String[0]};
1:fc2589d:     private static final Class[] MAIN_ARG_TYPE = new Class[] {MAIN_ARG[0].getClass()};
1:fc2589d: 
1:fc2589d:     /**
1:fc2589d:      * Create a test, the name corresonds to the class name
1:fc2589d:      * of the test (without any package information).
1:fc2589d:      * @param name
1:fc2589d:      */
1:fc2589d:     protected HarnessJavaTest(String name) {
1:fc2589d:         super(name);
5:fc2589d:     }
1:fc2589d:     
1:fc2589d:     /**
1:fc2589d:      * Return the folder of the test, such as 'jdbcapi' or 'lang'.
1:fc2589d:      */
1:fc2589d:     protected abstract String getArea();
1:fc2589d:     
1:fc2589d:     public void runTest() throws Throwable
3:fc2589d:     {
1:fc2589d:         
1:fc2589d:         String testClassName =
1:fc2589d:             "org.apache.derbyTesting.functionTests.tests."
1:fc2589d:             + getArea() + "." + getName();
1:fc2589d: 
1:fc2589d:         
1:fc2589d:         String canon =
1:fc2589d:             "org/apache/derbyTesting/functionTests/master/"
1:fc2589d:             + getName() + ".out";
1:fc2589d: 
1:fc2589d:         
1:fc2589d:         PrintStream out = System.out;
1:702674b:         PrintStream testOut = new PrintStream(getOutputStream(),
1:702674b:                 false, outputEncoding);
1:fc2589d:         setSystemOut(testOut);
1:fc2589d:                 
1:3f5c48a:         Class<?> test = Class.forName(testClassName);
1:fc2589d:         
1:fc2589d:         Method main = test.getDeclaredMethod("main", MAIN_ARG_TYPE);
1:fc2589d:         
1:fc2589d:         main.invoke(null, MAIN_ARG);
1:fc2589d:         
1:fc2589d:         setSystemOut(out);
1:fc2589d:           
1:fc2589d:         compareCanon(canon);
1:fc2589d:     }
1:fc2589d:     
1:fc2589d:     /**
1:fc2589d:      * Decorate a HarnessJavaTest test. Any sub-class must
1:fc2589d:      * call this decorator when adding a test to a suite.
1:fc2589d:      * This sets up the ij system properties to setup
1:fc2589d:      * the default connection to be to the default database.
1:fc2589d:      * The lock timeouts are also shortened and the test
1:fc2589d:      * will start in a clean database.
1:fc2589d:      */
1:fc2589d:     protected static Test decorate(HarnessJavaTest test)
1:fc2589d:     {
1:fc2589d:        Test dtest = new SystemPropertyTestSetup(test, new Properties())
1:fc2589d:         {
1:fc2589d:             protected void setUp() throws java.lang.Exception
1:87f37d6:             {
1:87f37d6:                 TestConfiguration config = TestConfiguration.getCurrent();
1:87f37d6:                 
1:87f37d6:                 // With JDBC 3 connect using a JDBC URL
1:87f37d6:                 if (JDBC.vmSupportsJDBC3())
1:87f37d6:                 {
3:87f37d6:                    newValues.setProperty(
1:fc2589d:                         "ij.database", 
1:87f37d6:                         config.getJDBCUrl());
1:87f37d6:                 }
1:fc2589d:                 super.setUp();
1:87f37d6:             }
1:fc2589d:         };
1:87f37d6:         
1:fc2589d:         dtest = DatabasePropertyTestSetup.setLockTimeouts(dtest, 4, 6);
1:fc2589d:         dtest = new CleanDatabaseTestSetup(dtest);
1:87f37d6:         
1:fc2589d:         return dtest;
1:fc2589d:     }
1:fc2589d: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2e4b1b1
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         Class<?> test = Class.forName(testClassName);
commit:c393694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:702674b
/////////////////////////////////////////////////////////////////////////
1:         PrintStream testOut = new PrintStream(getOutputStream(),
1:                 false, outputEncoding);
commit:87f37d6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:                 TestConfiguration config = TestConfiguration.getCurrent();
1:                 
1:                 // With JDBC 3 connect using a JDBC URL
1:                 if (JDBC.vmSupportsJDBC3())
1:                 {
1:                    newValues.setProperty(
1:                         config.getJDBCUrl());
1:                 }
0:                 else if (JDBC.vmSupportsJSR169())
1:                 {
0:                     // Use a data source and set its database name.
0:                     // The database will be created by the CleanDatabaseTestSetup
0:                     // used for each individual fixture/test.
1:                     
1:                     newValues.setProperty(
0:                         "ij.dataSource", 
0:                         "org.apache.derby.jdbc.EmbeddedSimpleDataSource");
1:                     
1:                     newValues.setProperty(
0:                         "ij.dataSource.databaseName",
0:                         config.getDefaultDatabaseName());
1:                 }
commit:fc2589d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.HarnessJavaTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.PrintStream;
1: import java.lang.reflect.Method;
0: import java.security.AccessController;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Run a '.java' test from the old harness in the Junit infrastructure.
1:  * The test's output is compared to a master file using the facilities
1:  * of the super class CanonTestCase.
1:  * <BR>
1:  * This allows a faster switch to running all tests under a single
1:  * JUnit infrastructure. Running a test using this class does not
1:  * preclude it from being converted to a real JUnit assert based test.
1:  *
1:  */
1: public abstract class HarnessJavaTest extends CanonTestCase {
1: 
1:     private static final Object[] MAIN_ARG = new Object[] {new String[0]};
1:     private static final Class[] MAIN_ARG_TYPE = new Class[] {MAIN_ARG[0].getClass()};
1: 
1:     /**
1:      * Create a test, the name corresonds to the class name
1:      * of the test (without any package information).
1:      * @param name
1:      */
1:     protected HarnessJavaTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Return the folder of the test, such as 'jdbcapi' or 'lang'.
0:      * @return
1:      */
1:     protected abstract String getArea();
1:     
1:     public void runTest() throws Throwable
1:     {
1:         
1:         String testClassName =
1:             "org.apache.derbyTesting.functionTests.tests."
1:             + getArea() + "." + getName();
1: 
1:         
1:         String canon =
1:             "org/apache/derbyTesting/functionTests/master/"
1:             + getName() + ".out";
1: 
1:         
1:         PrintStream out = System.out;
0:         PrintStream testOut = new PrintStream(getOutputStream());
1:         setSystemOut(testOut);
1:                 
0:         Class test = Class.forName(testClassName);
1:         
1:         Method main = test.getDeclaredMethod("main", MAIN_ARG_TYPE);
1:         
1:         main.invoke(null, MAIN_ARG);
1:         
1:         setSystemOut(out);
1:           
1:         compareCanon(canon);
1:     }
1:     
1:     /**
1:      * Decorate a HarnessJavaTest test. Any sub-class must
1:      * call this decorator when adding a test to a suite.
1:      * This sets up the ij system properties to setup
1:      * the default connection to be to the default database.
1:      * The lock timeouts are also shortened and the test
1:      * will start in a clean database.
1:      */
1:     protected static Test decorate(HarnessJavaTest test)
1:     {
1:        Test dtest = new SystemPropertyTestSetup(test, new Properties())
1:         {
1:             protected void setUp() throws java.lang.Exception
1:             {
0:                 newValues.setProperty(
1:                         "ij.database", 
0:                         TestConfiguration.getCurrent().getJDBCUrl());
1:                 super.setUp();
1:             }
1:         };
1:         
1:         dtest = DatabasePropertyTestSetup.setLockTimeouts(dtest, 4, 6);
1:         dtest = new CleanDatabaseTestSetup(dtest);
1:         
1:         return dtest;
1:     }
1:     
1:     /**
0:      * Need to capture System.out so that we can compare it.
0:      * @param out
1:      */
0:     private void setSystemOut(final PrintStream out)
1:     {
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run(){
0:             System.setOut(out);
0:             return null;
1:             
1:             }
1:             
1:         }
0:          );       
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
============================================================================