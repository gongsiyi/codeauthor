1:92f9877: /*
1:b44bd28: 
1:92f9877:    Derby - Class org.apache.derbyTesting.functionTests.suites.AllPackages
1:d61068d: 
1:92f9877:    Licensed to the Apache Software Foundation (ASF) under one or more
1:92f9877:    contributor license agreements.  See the NOTICE file distributed with
1:92f9877:    this work for additional information regarding copyright ownership.
1:92f9877:    The ASF licenses this file to you under the Apache License, Version 2.0
1:92f9877:    (the "License"); you may not use this file except in compliance with
1:92f9877:    the License.  You may obtain a copy of the License at
10:92f9877: 
1:92f9877:       http://www.apache.org/licenses/LICENSE-2.0
1:92f9877: 
1:92f9877:    Unless required by applicable law or agreed to in writing, software
1:92f9877:    distributed under the License is distributed on an "AS IS" BASIS,
1:92f9877:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92f9877:    See the License for the specific language governing permissions and
1:92f9877:    limitations under the License.
1:92f9877: 
1:92f9877:  */
1:92f9877: package org.apache.derbyTesting.functionTests.suites;
1:14fceff: 
1:5ea0740: import java.lang.reflect.InvocationTargetException;
1:6c73d74: import java.util.ArrayList;
1:6c73d74: import java.util.Iterator;
1:6c73d74: import java.util.List;
1:92f9877: import junit.framework.Test;
1:6c73d74: import org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite;
1:92f9877: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:92f9877: 
1:92f9877: /**
1:92f9877:  * All package suites for the function tests.
1:92f9877:  * 
1:92f9877:  * Suites added:
1:92f9877:  * <UL>
1:92f9877:  * <LI> tests.lang
1:92f9877:  * <LI> tests.jdbcapi
1:92f9877:  * <LI> tests.tools
1:92f9877:  * <LI> tests.jdbc4 (Java SE 6  only)
1:92f9877:  * </UL>
1:92f9877:  */
1:92f9877: public class AllPackages extends BaseTestCase {
1:92f9877:     /**
1:92f9877:      * Use suite method instead.
1:92f9877:      */
1:92f9877:     private AllPackages(String name) {
1:92f9877:         super(name);
2:92f9877:     }
1:92f9877: 
1:92f9877:     public static Test suite() throws Exception {
1:a5235f6: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("AllPackages");
1:92f9877: 
1:6c73d74:         for (Iterator it = getTestClasses().iterator(); it.hasNext(); ) {
1:6c73d74:             Object testClass = it.next();
1:6c73d74:             if (testClass instanceof String) {
1:6c73d74:                 suite.addTest(addSuiteByReflection((String) testClass));
1:6c73d74:             } else {
1:6c73d74:                 suite.addTest(invokeSuite((Class) testClass));
1:6c73d74:             }
1:6c73d74:         }
1:6c73d74: 
1:6c73d74:         return suite;
1:6c73d74:     }
1:6c73d74: 
1:6c73d74:     /**
1:6c73d74:      * <p>
1:6c73d74:      * Get a list of test classes to add. The classes that have been compiled
1:6c73d74:      * with target level equal to the lowest supported level are included as
1:6c73d74:      * {@code java.lang.Class} objects. Classes compiled with higher target
1:6c73d74:      * levels are included as {@code java.lang.String}s with the class names
1:6c73d74:      * so that this method does not fail with class not found errors on some
1:6c73d74:      * platforms.
1:6c73d74:      * </p>
1:6c73d74:      *
1:6c73d74:      * <p>
1:6c73d74:      * To construct a test suite from these classes, the classes' static
1:6c73d74:      * {@code suite()} methods have to be called.
1:6c73d74:      * </p>
1:6c73d74:      *
1:6c73d74:      * @return list of test classes
1:6c73d74:      */
1:6c73d74:     private static List getTestClasses() {
1:3f5c48a:         ArrayList<Object> classes = new ArrayList<Object>();
1:6c73d74: 
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.derbynet._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.lang._Suite.class); 
1:dfb7573:         // DERBY-1903
1:dfb7573:         // For the largedata test, just run the lite version of the test as
1:dfb7573:         // the full test is too big.
1:dfb7573:         classes.add(
1:dfb7573:              org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsLiteTest.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.store._Suite.class);
1:43bb9d4:         classes.add(org.apache.derbyTesting.functionTests.tests.storetests._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.tools._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.engine._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.demo._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.memory._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.memorydb._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.i18n._Suite.class);
1:6c73d74:         classes.add(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.class);
1:92f9877: 
1:92f9877:         // Suites that are compiled using Java SE 6 target need to
1:92f9877:         // be added this way, otherwise creating the suite
1:92f9877:         // will throw an invalid class version error
1:6c73d74:         classes.add("org.apache.derbyTesting.functionTests.tests.jdbc4._Suite");
1:14fceff:         
1:14fceff:         // JMX management tests are compiled and require JDK 1.5
1:6c73d74:         classes.add("org.apache.derbyTesting.functionTests.tests.management._Suite");
1:92f9877: 
1:a517b4e:         // Adding JUnit unit tests here to avoid creating a new JUnit
1:a517b4e:         // harness above the functionTests and unitTests
1:a517b4e:         // directories(packages)
1:6c73d74:         classes.add(org.apache.derbyTesting.unitTests.junit._Suite.class);
1:23201b8:         
1:ed75fdd:         // Add the upgrade tests,See upgradeTests._Suite
1:ed75fdd:         // for more information on how the old jars are
1:ed75fdd:         // located. If the system property derbyTesting.oldReleasePath
1:ed75fdd:         // is not set then the jars will be loaded from the Apache SVN repo.
1:6c73d74:         classes.add(
1:6c73d74:            org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite.class);
1:23201b8: 
1:6c73d74:         // Encrypted tests
1:6c73d74:         // J2ME (JSR169) does not support encryption.
1:6c73d74:         classes.add(EncryptionSuite.class);
1:6c73d74: 
1:6c73d74:         // Replication tests. Implementation require DataSource.
1:6c73d74:         // Not supp. by JSR169
1:6c73d74:         classes.add(ReplicationSuite.class);
1:6c73d74: 
1:de41eb3:         // Compatibility tests (MATS)
1:de41eb3:         classes.add("org.apache.derbyTesting.functionTests.tests.compatibility._Suite");
1:de41eb3: 
1:6c73d74:         return classes;
1:92f9877:     }
1:92f9877:     
1:6c73d74:     /**
1:92f9877:      * Get a class's set of tests from its suite method through reflection.
1:6c73d74:      * Ignore errors caused by the class version of the test class being
1:6c73d74:      * higher than what's supported on this platform.
1:92f9877:      */
1:92f9877:     private static Test addSuiteByReflection(String className) throws Exception
2:92f9877:     {
1:14fceff:         try {
1:6c73d74:             return invokeSuite(Class.forName(className));
1:14fceff:         } catch (LinkageError  e) {
1:1ae02c9:             return new BaseTestSuite("SKIPPED: " + className + " - " +
1:14fceff:                     e.getMessage());
1:5ea0740:         } catch (InvocationTargetException ite) {
1:5ea0740:             Throwable cause = ite.getCause();
1:5ea0740:             if (cause instanceof LinkageError) {
1:1ae02c9:                return new BaseTestSuite("SKIPPED: " + className + " - " +
1:5ea0740:                        cause.getMessage());
1:5ea0740:             } else {
1:d1a4768:                 System.err.println("FAILED to invoke " + className);
1:d1a4768:                 ite.printStackTrace();
1:5ea0740:                throw ite;
1:5ea0740:             }
1:48c2afc:         } catch (ClassNotFoundException ce) { // Do not add a suite not built.
1:1ae02c9:             return new BaseTestSuite("SKIPPED: Class not found: " + className +
1:48c2afc:                     " - " + ce.getMessage());
1:14fceff:         }
1:92f9877:     }
1:14fceff: 
1:92f9877:     /**
1:6c73d74:      * Invoke the static {@code suite()} method on a test class.
1:6c73d74:      *
1:6c73d74:      * @param klass the test class
1:6c73d74:      * @return the test suite returned by {@code suite()}
1:6c73d74:      * @throws Exception if the suite() method cannot be called or fails
1:6c73d74:      */
1:3f5c48a:     private static Test invokeSuite(Class<?> klass) throws Exception {
1:d1a4768:         try {
1:3f5c48a:             return (Test) klass.getMethod("suite").invoke(null);
1:d1a4768:         } catch (Exception e) {
1:d1a4768:             System.err.println("Failed to invoke class " + klass.getName());
1:d1a4768:             e.printStackTrace();
1:d1a4768:             throw e;
1:6c73d74:         }
1:d1a4768:     }
1:6c73d74: 
1:6c73d74:     /**
1:6c73d74:      * Get the class names of all the top-level JUnit test suites that are
1:6c73d74:      * included in {@code suites.All}.
1:6c73d74:      *
1:6c73d74:      * @return an array containing the class names of all the top-level
1:6c73d74:      * test suites
1:6c73d74:      */
1:6c73d74:     public static String[] getTopLevelSuiteNames() {
1:6c73d74:         List testClasses = getTestClasses();
1:6c73d74:         String[] names = new String[testClasses.size()];
1:6c73d74: 
1:6c73d74:         for (int i = 0; i < testClasses.size(); i++) {
1:6c73d74:             Object testClass = testClasses.get(i);
1:6c73d74:             if (testClass instanceof String) {
1:6c73d74:                 names[i] = (String) testClass;
1:6c73d74:             } else {
1:6c73d74:                 names[i] = ((Class) testClass).getName();
1:6c73d74:             }
1:6c73d74:         }
1:6c73d74: 
1:6c73d74:         return names;
1:6c73d74:     }
1:6c73d74: 
1:6c73d74:     /**
1:6c73d74:      * Print the class names of all the test suites included in
1:6c73d74:      * {@code suites.All}.
1:6c73d74:      *
1:6c73d74:      * @param args command line arguments (ignored)
1:6c73d74:      */
1:6c73d74:     public static void main(String[] args) {
1:6c73d74:         String[] names = getTopLevelSuiteNames();
1:6c73d74:         for (int i = 0; i < names.length; i++) {
1:6c73d74:             System.out.println(names[i]);
1:6c73d74:         }
1:6c73d74:     }
1:92f9877: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:43bb9d4
/////////////////////////////////////////////////////////////////////////
1:         classes.add(org.apache.derbyTesting.functionTests.tests.storetests._Suite.class);
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Object> classes = new ArrayList<Object>();
/////////////////////////////////////////////////////////////////////////
1:     private static Test invokeSuite(Class<?> klass) throws Exception {
1:             return (Test) klass.getMethod("suite").invoke(null);
commit:6c73d74
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite;
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator it = getTestClasses().iterator(); it.hasNext(); ) {
1:             Object testClass = it.next();
1:             if (testClass instanceof String) {
1:                 suite.addTest(addSuiteByReflection((String) testClass));
1:             } else {
1:                 suite.addTest(invokeSuite((Class) testClass));
1:             }
1:         }
1: 
1:         return suite;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get a list of test classes to add. The classes that have been compiled
1:      * with target level equal to the lowest supported level are included as
1:      * {@code java.lang.Class} objects. Classes compiled with higher target
1:      * levels are included as {@code java.lang.String}s with the class names
1:      * so that this method does not fail with class not found errors on some
1:      * platforms.
1:      * </p>
1:      *
1:      * <p>
1:      * To construct a test suite from these classes, the classes' static
1:      * {@code suite()} methods have to be called.
1:      * </p>
1:      *
1:      * @return list of test classes
1:      */
1:     private static List getTestClasses() {
0:         ArrayList classes = new ArrayList();
1: 
1:         classes.add(org.apache.derbyTesting.functionTests.tests.derbynet._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.lang._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.store._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.tools._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.engine._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.demo._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.memory._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.memorydb._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.i18n._Suite.class);
1:         classes.add(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.class);
1:         classes.add("org.apache.derbyTesting.functionTests.tests.jdbc4._Suite");
1:         classes.add("org.apache.derbyTesting.functionTests.tests.management._Suite");
1:         classes.add(org.apache.derbyTesting.unitTests.junit._Suite.class);
1:         classes.add(
1:            org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite.class);
1:         // Encrypted tests
1:         // J2ME (JSR169) does not support encryption.
1:         classes.add(EncryptionSuite.class);
1: 
1:         // Replication tests. Implementation require DataSource.
1:         // Not supp. by JSR169
1:         classes.add(ReplicationSuite.class);
1: 
1:         return classes;
1:      * Ignore errors caused by the class version of the test class being
1:      * higher than what's supported on this platform.
1:             return invokeSuite(Class.forName(className));
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Invoke the static {@code suite()} method on a test class.
1:      *
1:      * @param klass the test class
1:      * @return the test suite returned by {@code suite()}
1:      * @throws Exception if the suite() method cannot be called or fails
1:      */
0:     private static Test invokeSuite(Class klass) throws Exception {
0:         Method suite = klass.getMethod("suite", null);
0:         return (Test) suite.invoke(null, null);
1:     }
1: 
1:     /**
1:      * Get the class names of all the top-level JUnit test suites that are
1:      * included in {@code suites.All}.
1:      *
1:      * @return an array containing the class names of all the top-level
1:      * test suites
1:      */
1:     public static String[] getTopLevelSuiteNames() {
1:         List testClasses = getTestClasses();
1:         String[] names = new String[testClasses.size()];
1: 
1:         for (int i = 0; i < testClasses.size(); i++) {
1:             Object testClass = testClasses.get(i);
1:             if (testClass instanceof String) {
1:                 names[i] = (String) testClass;
1:             } else {
1:                 names[i] = ((Class) testClass).getName();
1:             }
1:         }
1: 
1:         return names;
1:     }
1: 
1:     /**
1:      * Print the class names of all the test suites included in
1:      * {@code suites.All}.
1:      *
1:      * @param args command line arguments (ignored)
1:      */
1:     public static void main(String[] args) {
1:         String[] names = getTopLevelSuiteNames();
1:         for (int i = 0; i < names.length; i++) {
1:             System.out.println(names[i]);
1:         }
1:     }
commit:5ea0740
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
/////////////////////////////////////////////////////////////////////////
1:         } catch (InvocationTargetException ite) {
1:             Throwable cause = ite.getCause();
1:             if (cause instanceof LinkageError) {
0:                return new TestSuite("SKIPPED: " + className + " - " +
1:                        cause.getMessage());
1:             } else {
1:                throw ite;
1:             }
commit:ecd42d9
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.engine._Suite.suite());
commit:a517b4e
/////////////////////////////////////////////////////////////////////////
1:         // Adding JUnit unit tests here to avoid creating a new JUnit
1:         // harness above the functionTests and unitTests
1:         // directories(packages)
0:         suite.addTest(org.apache.derbyTesting.unitTests.junit._Suite.suite());
commit:433b42c
/////////////////////////////////////////////////////////////////////////
commit:34a7cbe
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite());
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("AllPackages");
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("SKIPPED: " + className + " - " +
1:                return new BaseTestSuite("SKIPPED: " + className + " - " +
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("SKIPPED: Class not found: " + className +
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:de41eb3
/////////////////////////////////////////////////////////////////////////
1:         // Compatibility tests (MATS)
1:         classes.add("org.apache.derbyTesting.functionTests.tests.compatibility._Suite");
1: 
commit:aa298db
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.memorydb._Suite.suite());
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:dfb7573
/////////////////////////////////////////////////////////////////////////
0:         classes.add(org.apache.derbyTesting.functionTests.tests.lang._Suite.class); 
1:         // DERBY-1903
1:         // For the largedata test, just run the lite version of the test as
1:         // the full test is too big.
1:         classes.add(
1:              org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsLiteTest.class);
commit:d1a4768
/////////////////////////////////////////////////////////////////////////
1:                 System.err.println("FAILED to invoke " + className);
1:                 ite.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             Method suite = klass.getMethod("suite", null);
0:             return (Test) suite.invoke(null, null);
1:         } catch (Exception e) {
1:             System.err.println("Failed to invoke class " + klass.getName());
1:             e.printStackTrace();
1:             throw e;
1:         }
commit:0433f1a
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.suite());
commit:b44bd28
/////////////////////////////////////////////////////////////////////////
1: 
commit:d61068d
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.suite());
1:         
commit:146fd5c
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.memory._Suite.suite());
commit:5c2b1a2
/////////////////////////////////////////////////////////////////////////
0: 	 suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
commit:a5235f6
/////////////////////////////////////////////////////////////////////////
1: 
0: 	suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
author:Ole Solberg
-------------------------------------------------------------------------------
commit:f910400
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:678868b
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.i18n._Suite.suite());
commit:9f04bd3
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.demo._Suite.suite());
author:John Herman Embretsen
-------------------------------------------------------------------------------
commit:48c2afc
/////////////////////////////////////////////////////////////////////////
1:         } catch (ClassNotFoundException ce) { // Do not add a suite not built.
0:             return new TestSuite("SKIPPED: Class not found: " + className + 
1:                     " - " + ce.getMessage());
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:14fceff
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(
1:         
1:         // JMX management tests are compiled and require JDK 1.5
0:         suite.addTest(
0:                 addSuiteByReflection(
0:                         "org.apache.derbyTesting.functionTests.tests.management._Suite"));
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             Class clz = Class.forName(className);
1:             
0:             Method sm = clz.getMethod("suite", null);
1:                   
0:             return (Test) sm.invoke(null, null);
1:         } catch (LinkageError  e) {
0:             return new TestSuite("SKIPPED: " + className + " - " +
1:                     e.getMessage());
1:         }
commit:ed75fdd
/////////////////////////////////////////////////////////////////////////
1:         // Add the upgrade tests,See upgradeTests._Suite
1:         // for more information on how the old jars are
1:         // located. If the system property derbyTesting.oldReleasePath
1:         // is not set then the jars will be loaded from the Apache SVN repo.
commit:23201b8
/////////////////////////////////////////////////////////////////////////
1:         
0:         // Add the upgrade tests, though will only run tests if the
0:         // System property derbyTesting.oldReleasePath is set
0:         // to point at old releases. See upgradeTests._Suite
0:         // for more information.
0:         suite.addTest(
0:            org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite.suite());
1: 
commit:b1c5200
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.store._Suite.suite());
commit:0c9f73e
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite());
commit:92f9877
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.suites.AllPackages
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.suites;
1: 
0: import java.lang.reflect.Method;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * All package suites for the function tests.
1:  * 
1:  * Suites added:
1:  * <UL>
1:  * <LI> tests.lang
1:  * <LI> tests.jdbcapi
1:  * <LI> tests.tools
1:  * <LI> tests.jdbc4 (Java SE 6  only)
1:  * </UL>
1:  */
1: public class AllPackages extends BaseTestCase {
1:     /**
1:      * Use suite method instead.
1:      */
1:     private AllPackages(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() throws Exception {
1: 
0:         TestSuite suite = new TestSuite("AllPackages");
1:         
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.lang._Suite.suite());
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.suite());
0:         suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
1: 
1:         // Suites that are compiled using Java SE 6 target need to
1:         // be added this way, otherwise creating the suite
1:         // will throw an invalid class version error
0:         if (JDBC.vmSupportsJDBC4())
1:         {
0:             suite.addTest(
0:                     addSuiteByReflection(
0:                             "org.apache.derbyTesting.functionTests.tests.jdbc4._Suite"));
1:         }
1: 
0:         return suite;
1:     }
1:     
1:     /**
1:      * Get a class's set of tests from its suite method through reflection.
1:      */
1:     private static Test addSuiteByReflection(String className) throws Exception
1:     {
0:         Class clz = Class.forName(className);
1:         
0:         Method sm = clz.getMethod("suite", null);
1:               
0:         return (Test) sm.invoke(null, null);
1:     }
1: 
1: }
============================================================================