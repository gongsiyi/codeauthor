1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.loader.ClassFactoryContext
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.loader;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextImpl;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:eac0369: import org.apache.derby.iapi.services.property.PersistentSet;
1:913815a: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:913815a: /**
1:913815a:  * Context that provides the correct ClassFactory for the
1:913815a:  * current service. Allows stateless code to obtain the
1:913815a:  * correct class loading scheme.
1:913815a: */
1:eac0369: public abstract class ClassFactoryContext extends ContextImpl {
1:eac0369: 
1:eac0369: 	public static final String CONTEXT_ID = "ClassFactoryContext";
1:eac0369: 
1:eac0369: 	private final ClassFactory cf;
1:eac0369: 
1:913815a: 	protected ClassFactoryContext(ContextManager cm, ClassFactory cf) {
1:eac0369: 
1:eac0369: 		super(cm, CONTEXT_ID);
1:eac0369: 
1:eac0369: 		this.cf = cf;
1:eac0369: 	}
1:eac0369: 
1:913815a: 	public final ClassFactory getClassFactory() {
1:eac0369: 		return cf;
1:eac0369: 	}
1:eac0369: 
1:913815a:     /**
1:913815a:      * Get the lock compatibility space to use for the
1:913815a:      * transactional nature of the class loading lock.
1:913815a:      * Used when the classpath changes or a database
1:913815a:      * jar file is installed, removed or replaced.
1:913815a:      */
1:3c1f634:     public abstract CompatibilitySpace getLockSpace() throws StandardException;
1:eac0369: 
1:913815a:     /**
1:913815a:      * Get the set of properties stored with this service.
1:913815a:     */
1:eac0369: 	public abstract PersistentSet getPersistentSet() throws StandardException;
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 		Get the mechanism to rad jar files. The ClassFactory
1:eac0369: 		may keep the JarReader reference from the first class load.
1:eac0369: 	*/
1:eac0369: 	public abstract JarReader getJarReader();
1:eac0369: 
1:913815a:     /**
1:913815a:      * Handle any errors. Only work here is to pop myself
1:913815a:      * on a session or greater severity error.
1:913815a:      */
1:913815a: 	public final void cleanupOnError(Throwable error) {
1:913815a:         if (error instanceof StandardException) {
1:913815a: 
1:913815a:             StandardException se = (StandardException) error;
1:913815a:             
1:913815a:             if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1:913815a:                 popMe();
1:913815a:         }
1:913815a:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1:     public abstract CompatibilitySpace getLockSpace() throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:913815a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: /**
1:  * Context that provides the correct ClassFactory for the
1:  * current service. Allows stateless code to obtain the
1:  * correct class loading scheme.
1: */
1: 	protected ClassFactoryContext(ContextManager cm, ClassFactory cf) {
1: 	public final ClassFactory getClassFactory() {
1:     /**
1:      * Get the lock compatibility space to use for the
1:      * transactional nature of the class loading lock.
1:      * Used when the classpath changes or a database
1:      * jar file is installed, removed or replaced.
1:      */
1:     /**
1:      * Get the set of properties stored with this service.
1:     */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Handle any errors. Only work here is to pop myself
1:      * on a session or greater severity error.
1:      */
1: 	public final void cleanupOnError(Throwable error) {
1:         if (error instanceof StandardException) {
1: 
1:             StandardException se = (StandardException) error;
1:             
1:             if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1:                 popMe();
1:         }
1:     }
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.loader.ClassFactoryContext
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.loader
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.loader;
1: 
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.property.PersistentSet;
1: import org.apache.derby.iapi.error.StandardException;
1: /**
1: */
1: 
1: public abstract class ClassFactoryContext extends ContextImpl {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	public static final String CONTEXT_ID = "ClassFactoryContext";
1: 
1: 	private final ClassFactory cf;
1: 
0: 	public ClassFactoryContext(ContextManager cm, ClassFactory cf) {
1: 
1: 		super(cm, CONTEXT_ID);
1: 
1: 		this.cf = cf;
1: 	}
1: 
0: 	public ClassFactory getClassFactory() {
1: 		return cf;
1: 	}
1: 
0: 	public abstract Object getLockSpace() throws StandardException;
1: 
1: 	public abstract PersistentSet getPersistentSet() throws StandardException;
1: 
1: 	/**
1: 		Get the mechanism to rad jar files. The ClassFactory
1: 		may keep the JarReader reference from the first class load.
1: 	*/
1: 	public abstract JarReader getJarReader();
1: 
0: 	public void cleanupOnError(Throwable error) {}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.loader
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.loader;
0: 
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.property.PersistentSet;
0: import org.apache.derby.iapi.error.StandardException;
0: /**
0: */
0: 
0: public abstract class ClassFactoryContext extends ContextImpl {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	public static final String CONTEXT_ID = "ClassFactoryContext";
0: 
0: 	private final ClassFactory cf;
0: 
0: 	public ClassFactoryContext(ContextManager cm, ClassFactory cf) {
0: 
0: 		super(cm, CONTEXT_ID);
0: 
0: 		this.cf = cf;
0: 	}
0: 
0: 	public ClassFactory getClassFactory() {
0: 		return cf;
0: 	}
0: 
0: 	public abstract Object getLockSpace() throws StandardException;
0: 
0: 	public abstract PersistentSet getPersistentSet() throws StandardException;
0: 
0: 	/**
0: 		Get the mechanism to rad jar files. The ClassFactory
0: 		may keep the JarReader reference from the first class load.
0: 	*/
0: 	public abstract JarReader getJarReader();
0: 
0: 	public void cleanupOnError(Throwable error) {}
0: }
============================================================================