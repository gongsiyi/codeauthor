1:86226a2: /*
1:86226a2:   Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5158Test
3:86226a2: 
1:86226a2:   Licensed to the Apache Software Foundation (ASF) under one or more
1:86226a2:   contributor license agreements.  See the NOTICE file distributed with
1:86226a2:   this work for additional information regarding copyright ownership.
1:86226a2:   The ASF licenses this file to you under the Apache License, Version 2.0
1:86226a2:   (the "License"); you may not use this file except in compliance with
1:86226a2:   the License.  You may obtain a copy of the License at
1:86226a2: 
1:86226a2:   http://www.apache.org/licenses/LICENSE-2.0
1:86226a2: 
1:86226a2:   Unless required by applicable law or agreed to in writing, software
1:86226a2:   distributed under the License is distributed on an "AS IS" BASIS,
1:86226a2:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86226a2:   See the License for the specific language governing permissions and
1:86226a2:   limitations under the License.
1:86226a2: 
1:86226a2: */
1:86226a2: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:86226a2: 
1:86226a2: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:86226a2: 
1:86226a2: 
1:86226a2: public class Derby5158Test extends BaseJDBCTestCase
1:86226a2: {
1:86226a2: 
1:86226a2:     public Derby5158Test(String name)
1:86226a2:     {
1:86226a2:         super(name);
1:86226a2:     }
1:86226a2: 
1:86226a2:     protected static Test makeSuite(String name)
1:86226a2:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:86226a2: 
1:86226a2:         Test cst = TestConfiguration.defaultSuite(Derby5158Test.class);
1:86226a2: 
1:86226a2:         suite.addTest(cst);
1:86226a2: 
1:86226a2:         return suite;
1:86226a2:     }
1:86226a2: 
1:86226a2:     public static Test suite()
1:86226a2:     {
1:86226a2:         String testName = "Derby5158Repro";
1:86226a2: 
1:86226a2:         return makeSuite(testName);
1:86226a2:     }
1:86226a2: 
1:86226a2:     protected void setUp()
1:86226a2:             throws java.lang.Exception {
1:86226a2:         super.setUp();
1:86226a2:         setAutoCommit(false);
1:86226a2:     }
1:86226a2: 
1:86226a2: 
1:86226a2:     /**
1:86226a2:      * DERBY-5158
1:86226a2:      */
1:86226a2:     public void testCommitRollbackAfterShutdown() throws SQLException {
1:86226a2: 
1:86226a2:         Statement s = createStatement();
1:86226a2:         ResultSet rs = s.executeQuery("select 1 from sys.systables");
1:86226a2:         rs.close();
1:86226a2:         s.close(); // just so we have a transaction, otherwise the commit is
1:86226a2:                    // short-circuited in the client.
1:86226a2: 
1:86226a2:         TestConfiguration.getCurrent().shutdownDatabase();
1:86226a2: 
1:86226a2:         try {
1:86226a2:             commit();
1:86226a2:         } catch (SQLException e) {
1:86226a2:             if (usingEmbedded()) {
1:86226a2:                 assertSQLState("08003", e);
1:86226a2:             } else {
1:86226a2:                 // Before DERBY-5158, we saw "58009" instead with c/s.
1:86226a2:                 assertSQLState("08006", e);
1:86226a2:             }
1:86226a2:         }
1:86226a2: 
1:86226a2: 
1:86226a2:         // bring db back up and start a transaction
1:86226a2:         s = createStatement();
1:86226a2:         rs = s.executeQuery("select 1 from sys.systables");
1:86226a2:         rs.close();
1:86226a2:         s.close(); 
1:86226a2: 
1:86226a2:         TestConfiguration.getCurrent().shutdownDatabase();
1:86226a2: 
1:86226a2:         try {
1:86226a2:             rollback();
1:86226a2:         } catch (SQLException e) {
1:86226a2:             if (usingEmbedded()) {
1:86226a2:                 assertSQLState("08003", e);
1:86226a2:             } else {
1:86226a2:                 // Before DERBY-5158, we saw "58009" instead with c/s.
1:86226a2:                 assertSQLState("08006", e);
1:86226a2:             }
1:86226a2:         }
1:86226a2:     }
1:86226a2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
commit:86226a2
/////////////////////////////////////////////////////////////////////////
1: /*
1:   Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5158Test
1: 
1:   Licensed to the Apache Software Foundation (ASF) under one or more
1:   contributor license agreements.  See the NOTICE file distributed with
1:   this work for additional information regarding copyright ownership.
1:   The ASF licenses this file to you under the Apache License, Version 2.0
1:   (the "License"); you may not use this file except in compliance with
1:   the License.  You may obtain a copy of the License at
1: 
1:   http://www.apache.org/licenses/LICENSE-2.0
1: 
1:   Unless required by applicable law or agreed to in writing, software
1:   distributed under the License is distributed on an "AS IS" BASIS,
1:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:   See the License for the specific language governing permissions and
1:   limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import java.sql.Statement;
0: import java.sql.SQLException;
1: import java.sql.ResultSet;
1: 
1: 
1: public class Derby5158Test extends BaseJDBCTestCase
1: {
1: 
1:     public Derby5158Test(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     protected static Test makeSuite(String name)
1:     {
0:         TestSuite suite = new TestSuite(name);
1: 
1:         Test cst = TestConfiguration.defaultSuite(Derby5158Test.class);
1: 
1:         suite.addTest(cst);
1: 
1:         return suite;
1:     }
1: 
1:     public static Test suite()
1:     {
1:         String testName = "Derby5158Repro";
1: 
1:         return makeSuite(testName);
1:     }
1: 
1:     protected void setUp()
1:             throws java.lang.Exception {
1:         super.setUp();
1:         setAutoCommit(false);
1:     }
1: 
1: 
1:     /**
1:      * DERBY-5158
1:      */
1:     public void testCommitRollbackAfterShutdown() throws SQLException {
1: 
1:         Statement s = createStatement();
1:         ResultSet rs = s.executeQuery("select 1 from sys.systables");
1:         rs.close();
1:         s.close(); // just so we have a transaction, otherwise the commit is
1:                    // short-circuited in the client.
1: 
1:         TestConfiguration.getCurrent().shutdownDatabase();
1: 
1:         try {
1:             commit();
1:         } catch (SQLException e) {
1:             if (usingEmbedded()) {
1:                 assertSQLState("08003", e);
1:             } else {
1:                 // Before DERBY-5158, we saw "58009" instead with c/s.
1:                 assertSQLState("08006", e);
1:             }
1:         }
1: 
1: 
1:         // bring db back up and start a transaction
1:         s = createStatement();
1:         rs = s.executeQuery("select 1 from sys.systables");
1:         rs.close();
1:         s.close(); 
1: 
1:         TestConfiguration.getCurrent().shutdownDatabase();
1: 
1:         try {
1:             rollback();
1:         } catch (SQLException e) {
1:             if (usingEmbedded()) {
1:                 assertSQLState("08003", e);
1:             } else {
1:                 // Before DERBY-5158, we saw "58009" instead with c/s.
1:                 assertSQLState("08006", e);
1:             }
1:         }
1:     }
1: }
============================================================================