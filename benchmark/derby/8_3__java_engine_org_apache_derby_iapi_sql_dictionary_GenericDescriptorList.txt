1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.GenericDescriptorList
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
2:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.ArrayList;
1:eac0369: 
1:801cf0d: public class GenericDescriptorList<E extends UniqueTupleDescriptor>
1:801cf0d:        extends ArrayList<E>
1:eac0369: {
1:eac0369: 	private boolean scanned;
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Mark whether or not the underlying system table has
1:eac0369: 	 * been scanned.  (If a table does not have any
1:eac0369: 	 * constraints then the size of its CDL will always
1:eac0369: 	 * be 0.  We used these get/set methods to determine
1:eac0369: 	 * when we need to scan the table.
2:eac0369: 	 *
1:eac0369: 	 * @param scanned	Whether or not the underlying system table has been scanned.
1:eac0369: 	 */
1:eac0369: 	public void setScanned(boolean scanned)
1:eac0369: 	{
1:eac0369: 		this.scanned = scanned;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not the underlying system table has been scanned.
1:eac0369: 	 *
1:eac0369: 	 * @return		Where or not the underlying system table has been scanned.
1:eac0369: 	 */
1:eac0369: 	public boolean getScanned()
1:eac0369: 	{
1:eac0369: 		return scanned;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UniqueTupleDescriptor that matches the 
1:eac0369: 	 * input uuid.
1:eac0369: 	 *
1:eac0369: 	 * @param uuid		The UUID for the object
1:eac0369: 	 *
1:eac0369: 	 * @return The matching UniqueTupleDescriptor.
1:eac0369: 	 */
1:801cf0d:     public E getUniqueTupleDescriptor(UUID uuid)
1:eac0369: 	{
1:801cf0d:         for (E ud : this)
1:eac0369: 		{
1:eac0369: 			if (ud.getUUID().equals(uuid))
1:eac0369: 			{
1:eac0369: 				return ud;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: public class GenericDescriptorList<E extends UniqueTupleDescriptor>
1:        extends ArrayList<E>
/////////////////////////////////////////////////////////////////////////
1:     public E getUniqueTupleDescriptor(UUID uuid)
1:         for (E ud : this)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:89f21fb
/////////////////////////////////////////////////////////////////////////
0: public class GenericDescriptorList extends ArrayList<UniqueTupleDescriptor>
/////////////////////////////////////////////////////////////////////////
0:         for (UniqueTupleDescriptor ud : this)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
0: public class GenericDescriptorList extends ArrayList<TupleDescriptor>
/////////////////////////////////////////////////////////////////////////
0: 		for (Iterator<TupleDescriptor> iterator = iterator(); iterator.hasNext(); )
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:c44e39a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.GenericDescriptorList
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.UniqueTupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
0: public class GenericDescriptorList extends ArrayList
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private boolean scanned;
1: 
1: 	/**
1: 	 * Mark whether or not the underlying system table has
1: 	 * been scanned.  (If a table does not have any
1: 	 * constraints then the size of its CDL will always
1: 	 * be 0.  We used these get/set methods to determine
1: 	 * when we need to scan the table.
1: 	 *
1: 	 * @param scanned	Whether or not the underlying system table has been scanned.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setScanned(boolean scanned)
1: 	{
1: 		this.scanned = scanned;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not the underlying system table has been scanned.
1: 	 *
1: 	 * @return		Where or not the underlying system table has been scanned.
1: 	 */
1: 	public boolean getScanned()
1: 	{
1: 		return scanned;
1: 	}
1: 
1: 	/**
1: 	 * Get the UniqueTupleDescriptor that matches the 
1: 	 * input uuid.
1: 	 *
1: 	 * @param uuid		The UUID for the object
1: 	 *
1: 	 * @return The matching UniqueTupleDescriptor.
1: 	 */
0: 	public UniqueTupleDescriptor getUniqueTupleDescriptor(UUID uuid)
1: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
1: 		{
0: 			UniqueTupleDescriptor ud = (UniqueTupleDescriptor) iterator.next();
1: 			if (ud.getUUID().equals(uuid))
1: 			{
1: 				return ud;
1: 			}
1: 		}
1: 		return null;
1: 	}
1: 
0: 	public java.util.Enumeration elements() {
0: 		return java.util.Collections.enumeration(this);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.UniqueTupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: public class GenericDescriptorList extends ArrayList
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private boolean scanned;
0: 
0: 	/**
0: 	 * Mark whether or not the underlying system table has
0: 	 * been scanned.  (If a table does not have any
0: 	 * constraints then the size of its CDL will always
0: 	 * be 0.  We used these get/set methods to determine
0: 	 * when we need to scan the table.
0: 	 *
0: 	 * @param scanned	Whether or not the underlying system table has been scanned.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setScanned(boolean scanned)
0: 	{
0: 		this.scanned = scanned;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not the underlying system table has been scanned.
0: 	 *
0: 	 * @return		Where or not the underlying system table has been scanned.
0: 	 */
0: 	public boolean getScanned()
0: 	{
0: 		return scanned;
0: 	}
0: 
0: 	/**
0: 	 * Get the UniqueTupleDescriptor that matches the 
0: 	 * input uuid.
0: 	 *
0: 	 * @param uuid		The UUID for the object
0: 	 *
0: 	 * @return The matching UniqueTupleDescriptor.
0: 	 */
0: 	public UniqueTupleDescriptor getUniqueTupleDescriptor(UUID uuid)
0: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
0: 		{
0: 			UniqueTupleDescriptor ud = (UniqueTupleDescriptor) iterator.next();
0: 			if (ud.getUUID().equals(uuid))
0: 			{
0: 				return ud;
0: 			}
0: 		}
0: 		return null;
0: 	}
0: 
0: 	public java.util.Enumeration elements() {
0: 		return java.util.Collections.enumeration(this);
0: 	}
0: }
============================================================================