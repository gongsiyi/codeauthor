1:44900c5: /*
1:47ae0cd:    Derby - Class org.apache.derbyTesting.unitTests.junit.AssertFailureTest
14:44900c5: 
1:44900c5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44900c5:    contributor license agreements.  See the NOTICE file distributed with
1:44900c5:    this work for additional information regarding copyright ownership.
1:44900c5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:44900c5:    (the "License"); you may not use this file except in compliance with
1:44900c5:    the License.  You may obtain a copy of the License at
1:47ae0cd: 
1:44900c5:       http://www.apache.org/licenses/LICENSE-2.0
1:44900c5: 
1:44900c5:    Unless required by applicable law or agreed to in writing, software
1:44900c5:    distributed under the License is distributed on an "AS IS" BASIS,
1:44900c5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44900c5:    See the License for the specific language governing permissions and
1:44900c5:    limitations under the License.
1:44900c5: 
1:44900c5:  */
1:47ae0cd: 
1:44900c5: package org.apache.derbyTesting.unitTests.junit;
1:44900c5: 
1:44900c5: import junit.framework.Test;
1:44900c5: import org.apache.derby.shared.common.sanity.AssertFailure;
1:44900c5: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:44900c5: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:44900c5: 
1:44900c5: /**
1:44900c5:  * Testcase that test that AssertFailure's message string is correct when we
1:44900c5:  * have permisssion to do thread dumps and when we don't. Depends on the
1:44900c5:  * policyfiles AssertFailureTest.policy and AssertFailureTest1.policy where only
1:44900c5:  * the former grants this permission.
1:44900c5:  */
1:44900c5: public class AssertFailureTest extends BaseTestCase {
1:44900c5: 
1:44900c5:     /**
1:44900c5:      * Security policy file that allows thread dumps.
1:44900c5:      */
1:44900c5:     private static String POLICY_FILENAME =
1:44900c5:         "org/apache/derbyTesting/unitTests/junit/AssertFailureTest.policy";
1:44900c5: 
1:44900c5:     /**
1:44900c5:      * Security policy file that DOESN'T allow thread dumps.
1:44900c5:      */
1:44900c5:     private static String NO_DUMP_POLICY_FILENAME =
1:44900c5:         "org/apache/derbyTesting/unitTests/junit/AssertFailureTest1.policy";
1:44900c5: 
1:44900c5:     public AssertFailureTest(String name) {
1:44900c5:         super(name);
3:44900c5:     }
1:44900c5: 
1:44900c5:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("AssertFailureTest");
1:44900c5: 
1:47ae0cd:         try {
1:47ae0cd:             //Only add the tests if this is a sane build.
1:47ae0cd:             Class.forName("org.apache.derby.shared.common.sanity." +
1:47ae0cd:             		"AssertFailure");
1:44900c5: 
1:47ae0cd:             // Run with thread dump permissions
1:47ae0cd:             suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
1:47ae0cd:                 "testAssertFailureThreadDump"), POLICY_FILENAME));
1:44900c5: 
1:47ae0cd:             // Run WITHOUT thread dump permissions
1:47ae0cd:             suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
1:47ae0cd:                 "testAssertFailureNoThreadDump"), NO_DUMP_POLICY_FILENAME));
1:47ae0cd: 
1:47ae0cd:         } catch (ClassNotFoundException e) {
1:47ae0cd:             //Ignore. Just return an empty suite.
1:47ae0cd:         }
1:44900c5:         return suite;
1:44900c5:     }
1:44900c5: 
1:44900c5:     /**
1:44900c5:      * Test that AssertFailure's message string is correct when we have
1:923a60f:      * permission to do thread dumps. Must be run with correct permissions, ie.
1:44900c5:      * with java.lang.RuntimePermission "getStackTrace" and
1:44900c5:      * java.lang.RuntimePermission "modifyThreadGroup".
1:44900c5:      */
1:44900c5:     public void testAssertFailureThreadDump() {
1:44900c5: 
1:44900c5:         String s = new AssertFailure("AssertFailureTest").getThreadDump();
1:44900c5:         //System.out.println(s);    //Debug failures
1:47ae0cd: 
1:44900c5:         // Assert that the string is correct, by checking that
1:44900c5:         // it starts the right way.
1:923a60f:         String expected = "---------------\n" +
1:44900c5:             		"Stack traces for all live threads:\nThread name=";
1:47ae0cd: 
1:923a60f:         assertTrue("String not correct. Expected to start with:\n<"
1:47ae0cd:                 + expected + ">...\nWas:\n<" + s + ">.\n" ,
1:44900c5:                 s.startsWith(expected));
1:44900c5:     }
1:47ae0cd: 
1:44900c5:     /**
1:44900c5:      * Test that AssertFailure's log entry is correct when we DON'T have
1:923a60f:      * permission to to thread dumps. Must be run with correct permissions, ie.
1:44900c5:      * WITHOUT java.lang.RuntimePermission "getStackTrace" and
1:44900c5:      * java.lang.RuntimePermission "modifyThreadGroup";
1:44900c5:      */
1:44900c5:     public void testAssertFailureNoThreadDump() {
1:47ae0cd: 
1:44900c5:         String s = new AssertFailure("AssertFailureTest").getThreadDump();
1:44900c5:         //System.out.println(s);    //Debug failures.
1:47ae0cd: 
1:47ae0cd:         // Assert that the string is correct, by checking that is starts
1:44900c5:         // the right way.
1:923a60f:         String expected = "(Skipping thread dump because of insufficient " +
1:47ae0cd:             		"permissions:\njava.security.AccessControlException:";
1:47ae0cd: 
1:923a60f:         assertTrue("String not correct. Expected: <" + expected +
1:44900c5:                 ">\nWas:\n<" + s + ">", s.startsWith(expected));
1:44900c5:     }
1:44900c5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("AssertFailureTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:923a60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * permission to do thread dumps. Must be run with correct permissions, ie.
/////////////////////////////////////////////////////////////////////////
1:         String expected = "---------------\n" +
1:         assertTrue("String not correct. Expected to start with:\n<"
1:      * permission to to thread dumps. Must be run with correct permissions, ie.
/////////////////////////////////////////////////////////////////////////
1:         String expected = "(Skipping thread dump because of insufficient " +
1:         assertTrue("String not correct. Expected: <" + expected +
commit:47ae0cd
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.AssertFailureTest
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             //Only add the tests if this is a sane build.
1:             Class.forName("org.apache.derby.shared.common.sanity." +
1:             		"AssertFailure");
1:             // Run with thread dump permissions
1:             suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
1:                 "testAssertFailureThreadDump"), POLICY_FILENAME));
1:             // Run WITHOUT thread dump permissions
1:             suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
1:                 "testAssertFailureNoThreadDump"), NO_DUMP_POLICY_FILENAME));
1: 
1:         } catch (ClassNotFoundException e) {
1:             //Ignore. Just return an empty suite.
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (JVMInfo.JDK_ID >= JVMInfo.J2SE_15) {
0:             String expected = "---------------\n" +
1: 
0:             assertTrue("String not correct. Expected to start with:\n<"
1:                 + expected + ">...\nWas:\n<" + s + ">.\n" ,
1: 
0:             		"supported on JVM 1.4)\n";
1: 
0:             assertEquals("String not correct.", expected, s);
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Assert that the string is correct, by checking that is starts
0:         if (JVMInfo.JDK_ID >= JVMInfo.J2SE_15) {
1:             		"permissions:\njava.security.AccessControlException:";
1: 
0:             assertTrue("String not correct. Expected: <" + expected +
1: 
0:                 "supported on JVM 1.4)\n";
1: 
0:             assertEquals("String not correct.", expected, s);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:2eab557
/////////////////////////////////////////////////////////////////////////
0:             		"supported on JVM 1.4)";
0:             assertEquals("String not correct.", expected, s.trim());
/////////////////////////////////////////////////////////////////////////
0:                 "supported on JVM 1.4)";
0:             assertEquals("String not correct.", expected, s.trim());
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:44900c5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class
0:    org.apache.derbyTesting.unitTests.junit.AssertFailureTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
1: import org.apache.derby.shared.common.sanity.AssertFailure;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: /**
1:  * Testcase that test that AssertFailure's message string is correct when we
1:  * have permisssion to do thread dumps and when we don't. Depends on the
1:  * policyfiles AssertFailureTest.policy and AssertFailureTest1.policy where only
1:  * the former grants this permission.
1:  */
1: public class AssertFailureTest extends BaseTestCase {
1: 
1:     /**
1:      * Security policy file that allows thread dumps.
1:      */
1:     private static String POLICY_FILENAME =
1:         "org/apache/derbyTesting/unitTests/junit/AssertFailureTest.policy";
1: 
1:     /**
1:      * Security policy file that DOESN'T allow thread dumps.
1:      */
1:     private static String NO_DUMP_POLICY_FILENAME =
1:         "org/apache/derbyTesting/unitTests/junit/AssertFailureTest1.policy";
1: 
1:     public AssertFailureTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("AssertFailureTest");
1: 
0:         // Run with thread dump permissions
0:         suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
0:             "testAssertFailureThreadDump"), POLICY_FILENAME));
1: 
0:         // Run WITHOUT thread dump permissions
0:         suite.addTest(new SecurityManagerSetup(new AssertFailureTest(
0:             "testAssertFailureNoThreadDump"), NO_DUMP_POLICY_FILENAME));
1: 
1:         return suite;
1:     }
1: 
1:     /**
1:      * Test that AssertFailure's message string is correct when we have
0:      * permisssion to do thread dumps. Must be run with correct permissions, ie.
1:      * with java.lang.RuntimePermission "getStackTrace" and
1:      * java.lang.RuntimePermission "modifyThreadGroup".
1:      */
1:     public void testAssertFailureThreadDump() {
1: 
1:         String s = new AssertFailure("AssertFailureTest").getThreadDump();
1:         //System.out.println(s);    //Debug failures
1: 
1:         // Assert that the string is correct, by checking that
1:         // it starts the right way.
0:         if (JVMInfo.JDK_ID >= 6) {
0:             String expected = "---------------\n" + 
1:             		"Stack traces for all live threads:\nThread name=";
1:             
0:             assertTrue("String not correct. Expected to start with:\n<" 
0:                 + expected + ">...\nWas:\n<" + s + ">.\n" , 
1:                 s.startsWith(expected));
1:             
0:         } else {
0:             String expected = "(Skipping thread dump because it is not " +
0:             		"supported on JVM 1.4)";
1:                         
0:             assertTrue("String not correct.", s.startsWith(expected));
1:         }
1:     }
1: 
1:     /**
1:      * Test that AssertFailure's log entry is correct when we DON'T have
0:      * permisssion to to thread dumps. Must be run with correct permissions, ie.
1:      * WITHOUT java.lang.RuntimePermission "getStackTrace" and
1:      * java.lang.RuntimePermission "modifyThreadGroup";
1:      */
1:     public void testAssertFailureNoThreadDump() {
1: 
1:         String s = new AssertFailure("AssertFailureTest").getThreadDump();
1:         //System.out.println(s);    //Debug failures.
1:         
0:         // Assert that the string is correct, by checking that is starts 
1:         // the right way.
0:         if (JVMInfo.JDK_ID >= 6) {
0:             String expected = "(Skipping thread dump because of insufficient " +
0:             		"permissions:";
1:         
0:             assertTrue("String not correct. Expected: <" + expected + 
1:                 ">\nWas:\n<" + s + ">", s.startsWith(expected));
1:             
0:         } else {
0:             String expected = "(Skipping thread dump because it is not " +
0:                 "supported on JVM 1.4)";
1:             
0:             assertTrue("String not correct.", s.startsWith(expected));
1:         }
1:     }
1: }
============================================================================