1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleContext.java,v 1.22 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.io.File;
1:a8b6921: import java.io.InputStream;
1:a8b6921: import java.util.Dictionary;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A bundle's execution context within the Framework. The context is used to
1:a8b6921:  * grant access to other methods so that this bundle can interact with the
1:a8b6921:  * Framework.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>BundleContext</code> methods allow a bundle to:
1:a8b6921:  * <ul>
1:a8b6921:  * <li>Subscribe to events published by the Framework.
1:a8b6921:  * <li>Register service objects with the Framework service registry.
1:a8b6921:  * <li>Retrieve <code>ServiceReferences</code> from the Framework service
1:a8b6921:  * registry.
1:a8b6921:  * <li>Get and release service objects for a referenced service.
1:a8b6921:  * <li>Install new bundles in the Framework.
1:a8b6921:  * <li>Get the list of bundles installed in the Framework.
1:a8b6921:  * <li>Get the {@link Bundle} object for a bundle.
1:a8b6921:  * <li>Create <code>File</code> objects for files in a persistent storage
1:a8b6921:  * area provided for the bundle by the Framework.
1:a8b6921:  * </ul>
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * A <code>BundleContext</code> object will be created and provided to the
1:a8b6921:  * bundle associated with this context when it is started using the
1:a8b6921:  * {@link BundleActivator#start} method. The same <code>BundleContext</code>
1:a8b6921:  * object will be passed to the bundle associated with this context when it is
1:a8b6921:  * stopped using the {@link BundleActivator#stop} method. A
1:a8b6921:  * <code>BundleContext</code> object is generally for the private use of its
1:a8b6921:  * associated bundle and is not meant to be shared with other bundles in the
1:a8b6921:  * OSGi environment.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The <code>Bundle</code> object associated with a <code>BundleContext</code>
1:a8b6921:  * object is called the <em>context bundle</em>.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The <code>BundleContext</code> object is only valid during the execution of
1:a8b6921:  * its context bundle; that is, during the period from when the context bundle
1:a8b6921:  * is in the <code>STARTING</code>, <code>STOPPING</code>, and
1:a8b6921:  * <code>ACTIVE</code> bundle states. If the <code>BundleContext</code>
1:a8b6921:  * object is used subsequently, an <code>IllegalStateException</code> must be
1:a8b6921:  * thrown. The <code>BundleContext</code> object must never be reused after
1:a8b6921:  * its context bundle is stopped.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * The Framework is the only entity that can create <code>BundleContext</code>
1:a8b6921:  * objects and they are only valid within the Framework that created them.
1:a8b6921:  * 
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.22 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface BundleContext {
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the value of the specified property. If the key is not found in
1:a8b6921: 	 * the Framework properties, the system properties are then searched. The
1:a8b6921: 	 * method returns <code>null</code> if the property is not found.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The Framework defines the following standard property keys:
1:a8b6921: 	 * </p>
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_VERSION} - The OSGi Framework version.
1:a8b6921: 	 * </li>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_VENDOR} - The Framework implementation
1:a8b6921: 	 * vendor.</li>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_LANGUAGE} - The language being used. See
1:a8b6921: 	 * ISO 639 for possible values.</li>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_OS_NAME} - The host computer operating
1:a8b6921: 	 * system.</li>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_OS_VERSION} - The host computer
1:a8b6921: 	 * operating system version number.</li>
1:a8b6921: 	 * <li>{@link Constants#FRAMEWORK_PROCESSOR} - The host computer processor
1:a8b6921: 	 * name.</li>
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * <p>
1:a8b6921: 	 * All bundles must have permission to read these properties.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Note: The last four standard properties are used by the
1:a8b6921: 	 * {@link Constants#BUNDLE_NATIVECODE} <code>Manifest</code> header's
1:a8b6921: 	 * matching algorithm for selecting native language code.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param key The name of the requested property.
1:a8b6921: 	 * @return The value of the requested property, or <code>null</code> if
1:a8b6921: 	 *         the property is undefined.
1:a8b6921: 	 * @throws java.lang.SecurityException If the caller does not have the
1:a8b6921: 	 *         appropriate <code>PropertyPermission</code> to read the
1:a8b6921: 	 *         property, and the Java Runtime Environment supports permissions.
1:a8b6921: 	 */
1:a8b6921: 	public String getProperty(String key);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the <code>Bundle</code> object associated with this
1:a8b6921: 	 * <code>BundleContext</code>. This bundle is called the context bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The <code>Bundle</code> object associated with this
1:a8b6921: 	 *         <code>BundleContext</code>.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle getBundle();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Installs a bundle from the specified location string. A bundle is
1:a8b6921: 	 * obtained from <code>location</code> as interpreted by the Framework in
1:a8b6921: 	 * an implementation dependent manner.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Every installed bundle is uniquely identified by its location string,
1:a8b6921: 	 * typically in the form of a URL.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to install a bundle:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If a bundle containing the same location string is already
1:a8b6921: 	 * installed, the <code>Bundle</code> object for that bundle is returned.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>The bundle's content is read from the location string. If this
1:a8b6921: 	 * fails, a {@link BundleException} is thrown.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>The bundle's <code>Bundle-NativeCode</code> dependencies are
1:a8b6921: 	 * resolved. If this fails, a <code>BundleException</code> is thrown.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>The bundle's associated resources are allocated. The associated
1:a8b6921: 	 * resources minimally consist of a unique identifier and a persistent
1:a8b6921: 	 * storage area if the platform has file system support. If this step fails,
1:a8b6921: 	 * a <code>BundleException</code> is thrown.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>If the bundle has declared an Bundle-RequiredExecutionEnvironment
1:a8b6921: 	 * header, then the listed execution environments must be verified against
1:a8b6921: 	 * the installed execution environments. If none of the listed execution 
1:a8b6921: 	 * environments match an installed execution environment, a
1:a8b6921: 	 * <code>BundleException</code> must be thrown.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>The bundle's state is set to <code>INSTALLED</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>A bundle event of type {@link BundleEvent#INSTALLED} is fired.
1:a8b6921: 	 * 
1:a8b6921: 	 * <li>The <code>Bundle</code> object for the newly or previously
1:a8b6921: 	 * installed bundle is returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * <b>Postconditions, no exceptions thrown </b>
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li><code>getState()</code> in {<code>INSTALLED</code>,<code>RESOLVED</code>}.
1:a8b6921: 	 * <li>Bundle has a unique ID.
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * <b>Postconditions, when an exception is thrown </b>
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>Bundle is not installed and no trace of the bundle exists.
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param location The location identifier of the bundle to install.
1:a8b6921: 	 * @return The <code>Bundle</code> object of the installed bundle.
1:a8b6921: 	 * @throws BundleException If the installation failed.
1:a8b6921: 	 * @throws java.lang.SecurityException If the caller does not have the
1:a8b6921: 	 *         appropriate <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the
1:a8b6921: 	 *         Java Runtime Environment supports permissions.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle installBundle(String location)
1:a8b6921: 			throws BundleException;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Installs a bundle from the specified <code>InputStream</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method performs all of the steps listed in
1:a8b6921: 	 * <code>BundleContext.installBundle(String location)</code>, except that
1:a8b6921: 	 * the bundle's content will be read from the <code>InputStream</code>
1:a8b6921: 	 * object. The location identifier string specified will be used as the
1:a8b6921: 	 * identity of the bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method must always close the <code>InputStream</code> object, even
1:a8b6921: 	 * if an exception is thrown.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param location The location identifier of the bundle to install.
1:a8b6921: 	 * @param input The <code>InputStream</code> object from which this bundle
1:a8b6921: 	 *        will be read.
1:a8b6921: 	 * @return The <code>Bundle</code> object of the installed bundle.
1:a8b6921: 	 * @throws BundleException If the provided stream cannot be read or the
1:a8b6921: 	 *         installation failed.
1:a8b6921: 	 * @throws java.lang.SecurityException If the caller does not have the
1:a8b6921: 	 *         appropriate <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the
1:a8b6921: 	 *         Java Runtime Environment supports permissions.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @see #installBundle(java.lang.String)
1:a8b6921: 	 */
1:a8b6921: 	public Bundle installBundle(String location, InputStream input)
1:a8b6921: 			throws BundleException;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the bundle with the specified identifier.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param id The identifier of the bundle to retrieve.
1:a8b6921: 	 * @return A <code>Bundle</code> object or <code>null</code> if the
1:a8b6921: 	 *         identifier does not match any installed bundle.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle getBundle(long id);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a list of all installed bundles.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method returns a list of all bundles installed in the OSGi
1:a8b6921: 	 * environment at the time of the call to this method. However, since the
1:a8b6921: 	 * Framework is a very dynamic environment, bundles can be installed or
1:a8b6921: 	 * uninstalled at anytime.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return An array of <code>Bundle</code> objects, one object per
1:a8b6921: 	 *         installed bundle.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle[] getBundles();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds the specified <code>ServiceListener</code> object with the
1:a8b6921: 	 * specified <code>filter</code> to the context bundle's list of
1:a8b6921: 	 * listeners. See {@link Filter} for a description of the filter syntax.
1:a8b6921: 	 * <code>ServiceListener</code> objects are notified when a service has a
1:a8b6921: 	 * lifecycle state change.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the context bundle's list of listeners already contains a listener
1:a8b6921: 	 * <code>l</code> such that <code>(l==listener)</code>, then this
1:a8b6921: 	 * method replaces that listener's filter (which may be <code>null</code>)
1:a8b6921: 	 * with the specified one (which may be <code>null</code>).
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The listener is called if the filter criteria is met. To filter based
1:a8b6921: 	 * upon the class of the service, the filter should reference the
1:a8b6921: 	 * {@link Constants#OBJECTCLASS} property. If <code>filter</code> is
1:a8b6921: 	 * <code>null</code>, all services are considered to match the filter.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * When using a <code>filter</code>, it is possible that the
1:a8b6921: 	 * <code>ServiceEvent</code>s for the complete lifecycle of a service
1:a8b6921: 	 * will not be delivered to the listener. For example, if the
1:a8b6921: 	 * <code>filter</code> only matches when the property <code>x</code> has
1:a8b6921: 	 * the value <code>1</code>, the listener will not be called if the
1:a8b6921: 	 * service is registered with the property <code>x</code> not set to the
1:a8b6921: 	 * value <code>1</code>. Subsequently, when the service is modified
1:a8b6921: 	 * setting property <code>x</code> to the value <code>1</code>, the
1:a8b6921: 	 * filter will match and the listener will be called with a
1:a8b6921: 	 * <code>ServiceEvent</code> of type <code>MODIFIED</code>. Thus, the
1:a8b6921: 	 * listener will not be called with a <code>ServiceEvent</code> of type
1:a8b6921: 	 * <code>REGISTERED</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the Java Runtime Environment supports permissions, the
1:a8b6921: 	 * <code>ServiceListener</code> object will be notified of a service event
1:a8b6921: 	 * only if the bundle that is registering it has the
1:a8b6921: 	 * <code>ServicePermission</code> to get the service using at least one of
1:a8b6921: 	 * the named classes the service was registered under.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>ServiceListener</code> object to be added.
1:a8b6921: 	 * @param filter The filter criteria.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1:a8b6921: 	 *         invalid filter string that cannot be parsed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see ServiceEvent
1:a8b6921: 	 * @see ServiceListener
1:a8b6921: 	 * @see ServicePermission
1:a8b6921: 	 */
1:a8b6921: 	public void addServiceListener(ServiceListener listener,
1:a8b6921: 			String filter) throws InvalidSyntaxException;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds the specified <code>ServiceListener</code> object to the context
1:a8b6921: 	 * bundle's list of listeners.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method is the same as calling
1:a8b6921: 	 * <code>BundleContext.addServiceListener(ServiceListener listener,
1:a8b6921: 	 * String filter)</code>
1:a8b6921: 	 * with <code>filter</code> set to <code>null</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>ServiceListener</code> object to be added.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see #addServiceListener(ServiceListener, String)
1:a8b6921: 	 */
1:a8b6921: 	public void addServiceListener(ServiceListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Removes the specified <code>ServiceListener</code> object from the
1:a8b6921: 	 * context bundle's list of listeners.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If <code>listener</code> is not contained in this context bundle's list
1:a8b6921: 	 * of listeners, this method does nothing.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>ServiceListener</code> to be removed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public void removeServiceListener(ServiceListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds the specified <code>BundleListener</code> object to the context
1:a8b6921: 	 * bundle's list of listeners if not already present. BundleListener objects
1:a8b6921: 	 * are notified when a bundle has a lifecycle state change.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the context bundle's list of listeners already contains a listener
1:a8b6921: 	 * <code>l</code> such that <code>(l==listener)</code>, this method
1:a8b6921: 	 * does nothing.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>BundleListener</code> to be added.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @throws java.lang.SecurityException If listener is a
1:a8b6921: 	 *         <code>SynchronousBundleListener</code> and the caller does not
1:a8b6921: 	 *         have the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
1:a8b6921: 	 *         and the Java Runtime Environment supports permissions.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see BundleEvent
1:a8b6921: 	 * @see BundleListener
1:a8b6921: 	 */
1:a8b6921: 	public void addBundleListener(BundleListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Removes the specified <code>BundleListener</code> object from the
1:a8b6921: 	 * context bundle's list of listeners.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If <code>listener</code> is not contained in the context bundle's list
1:a8b6921: 	 * of listeners, this method does nothing.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>BundleListener</code> object to be removed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @throws java.lang.SecurityException If listener is a
1:a8b6921: 	 *         <code>SynchronousBundleListener</code> and the caller does not
1:a8b6921: 	 *         have the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
1:a8b6921: 	 *         and the Java Runtime Environment supports permissions.
1:a8b6921: 	 */
1:a8b6921: 	public void removeBundleListener(BundleListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds the specified <code>FrameworkListener</code> object to the context
1:a8b6921: 	 * bundle's list of listeners if not already present. FrameworkListeners are
1:a8b6921: 	 * notified of general Framework events.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the context bundle's list of listeners already contains a listener
1:a8b6921: 	 * <code>l</code> such that <code>(l==listener)</code>, this method
1:a8b6921: 	 * does nothing.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>FrameworkListener</code> object to be added.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see FrameworkEvent
1:a8b6921: 	 * @see FrameworkListener
1:a8b6921: 	 */
1:a8b6921: 	public void addFrameworkListener(FrameworkListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Removes the specified <code>FrameworkListener</code> object from the
1:a8b6921: 	 * context bundle's list of listeners.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If <code>listener</code> is not contained in the context bundle's list
1:a8b6921: 	 * of listeners, this method does nothing.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param listener The <code>FrameworkListener</code> object to be
1:a8b6921: 	 *        removed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public void removeFrameworkListener(FrameworkListener listener);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Registers the specified service object with the specified properties
1:a8b6921: 	 * under the specified class names into the Framework. A
1:a8b6921: 	 * <code>ServiceRegistration</code> object is returned. The
1:a8b6921: 	 * <code>ServiceRegistration</code> object is for the private use of the
1:a8b6921: 	 * bundle registering the service and should not be shared with other
1:a8b6921: 	 * bundles. The registering bundle is defined to be the context bundle.
1:a8b6921: 	 * Other bundles can locate the service by using either the
1:a8b6921: 	 * {@link #getServiceReferences} or {@link #getServiceReference} method.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A bundle can register a service object that implements the
1:a8b6921: 	 * {@link ServiceFactory} interface to have more flexibility in providing
1:a8b6921: 	 * service objects to other bundles.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to register a service:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If <code>service</code> is not a <code>ServiceFactory</code>,
1:a8b6921: 	 * an <code>IllegalArgumentException</code> is thrown if
1:a8b6921: 	 * <code>service</code> is not an <code>instanceof</code> all the
1:a8b6921: 	 * classes named.
1:a8b6921: 	 * <li>The Framework adds these service properties to the specified
1:a8b6921: 	 * <code>Dictionary</code> (which may be <code>null</code>): a property
1:a8b6921: 	 * named {@link Constants#SERVICE_ID} identifying the registration number of
1:a8b6921: 	 * the service and a property named {@link Constants#OBJECTCLASS} containing
1:a8b6921: 	 * all the specified classes. If any of these properties have already been
1:a8b6921: 	 * specified by the registering bundle, their values will be overwritten by
1:a8b6921: 	 * the Framework.
1:a8b6921: 	 * <li>The service is added to the Framework service registry and may now
1:a8b6921: 	 * be used by other bundles.
1:a8b6921: 	 * <li>A service event of type {@link ServiceEvent#REGISTERED} is
1:a8b6921: 	 * fired.
1:a8b6921: 	 * <li>A <code>ServiceRegistration</code> object for this registration is
1:a8b6921: 	 * returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param clazzes The class names under which the service can be located.
1:a8b6921: 	 *        The class names in this array will be stored in the service's
1:a8b6921: 	 *        properties under the key {@link Constants#OBJECTCLASS}.
1:a8b6921: 	 * @param service The service object or a <code>ServiceFactory</code>
1:a8b6921: 	 *        object.
1:a8b6921: 	 * @param properties The properties for this service. The keys in the
1:a8b6921: 	 *        properties object must all be <code>String</code> objects. See
1:a8b6921: 	 *        {@link Constants} for a list of standard service property keys.
1:a8b6921: 	 *        Changes should not be made to this object after calling this
1:a8b6921: 	 *        method. To update the service's properties the
1:a8b6921: 	 *        {@link ServiceRegistration#setProperties} method must be called.
1:a8b6921: 	 *        The set of properties may be <code>null</code> if the service
1:a8b6921: 	 *        has no properties.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return A <code>ServiceRegistration</code> object for use by the bundle
1:a8b6921: 	 *         registering the service to update the service's properties or to
1:a8b6921: 	 *         unregister the service.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws java.lang.IllegalArgumentException If one of the following is
1:a8b6921: 	 *         true:
1:a8b6921: 	 *         <ul>
1:a8b6921: 	 *         <li><code>service</code> is <code>null</code>.
1:a8b6921: 	 *         <li><code>service</code> is not a <code>ServiceFactory</code>
1:a8b6921: 	 *         object and is not an instance of all the named classes in
1:a8b6921: 	 *         <code>clazzes</code>.
1:a8b6921: 	 *         <li><code>properties</code> contains case variants of the same
1:a8b6921: 	 *         key name.
1:a8b6921: 	 *         </ul>
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws java.lang.SecurityException If the caller does not have the
1:a8b6921: 	 *         <code>ServicePermission</code> to register the service for all
1:a8b6921: 	 *         the named classes and the Java Runtime Environment supports
1:a8b6921: 	 *         permissions.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see ServiceRegistration
1:a8b6921: 	 * @see ServiceFactory
1:a8b6921: 	 */
1:a8b6921: 	public ServiceRegistration registerService(String[] clazzes,
1:a8b6921: 			Object service, Dictionary properties);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Registers the specified service object with the specified properties
1:a8b6921: 	 * under the specified class name with the Framework.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method is otherwise identical to
1:a8b6921: 	 * {@link #registerService(java.lang.String[], java.lang.Object,
1:a8b6921: 	 * java.util.Dictionary)} and is provided as a convenience when
1:a8b6921: 	 * <code>service</code> will only be registered under a single class name.
1:a8b6921: 	 * Note that even in this case the value of the service's
1:a8b6921: 	 * {@link Constants#OBJECTCLASS} property will be an array of strings,
1:a8b6921: 	 * rather than just a single string.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param clazz The class name under which the service can be located.
1:a8b6921: 	 * @param service The service object or a <code>ServiceFactory</code>
1:a8b6921: 	 *        object.
1:a8b6921: 	 * @param properties The properties for this service. 
1:a8b6921: 	 * 
1:a8b6921: 	 * @return A <code>ServiceRegistration</code> object for use by the bundle
1:a8b6921: 	 *         registering the service to update the service's properties or to
1:a8b6921: 	 *         unregister the service.
1:a8b6921: 	 *         
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @see #registerService(java.lang.String[], java.lang.Object,
1:a8b6921: 	 *      java.util.Dictionary)
1:a8b6921: 	 */
1:a8b6921: 	public ServiceRegistration registerService(String clazz,
1:a8b6921: 			Object service, Dictionary properties);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns an array of <code>ServiceReference</code> objects. The returned
1:a8b6921: 	 * array of <code>ServiceReference</code> objects contains services that
1:a8b6921: 	 * were registered under the specified class, match the specified filter
1:a8b6921: 	 * criteria, and the packages for the class names under which the services
1:a8b6921: 	 * were registered match the context bundle's packages as defined in
1:a8b6921: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)}.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The list is valid at the time of the call to this method, however since
1:a8b6921: 	 * the Framework is a very dynamic environment, services can be modified or
1:a8b6921: 	 * unregistered at anytime.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * <code>filter</code> is used to select the registered service whose
1:a8b6921: 	 * properties objects contain keys and values which satisfy the filter. See
1:a8b6921: 	 * {@link Filter} for a description of the filter string syntax.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If <code>filter</code> is <code>null</code>, all registered services
1:a8b6921: 	 * are considered to match the filter. If <code>filter</code> cannot be
1:a8b6921: 	 * parsed, an {@link InvalidSyntaxException} will be thrown with a human
1:a8b6921: 	 * readable message where the filter became unparsable.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to select a set of
1:a8b6921: 	 * <code>ServiceReference</code> objects:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If the filter string is not <code>null</code>, the filter string
1:a8b6921: 	 * is parsed and the set <code>ServiceReference</code> objects of
1:a8b6921: 	 * registered services that satisfy the filter is produced. If the filter
1:a8b6921: 	 * string is <code>null</code>, then all registered services are
1:a8b6921: 	 * considered to satisfy the filter.
1:a8b6921: 	 * <li>If the Java Runtime Environment supports permissions, the set of
1:a8b6921: 	 * <code>ServiceReference</code> objects produced by the previous step is
1:a8b6921: 	 * reduced by checking that the caller has the
1:a8b6921: 	 * <code>ServicePermission</code> to get at least one of the class names
1:a8b6921: 	 * under which the service was registered. If the caller does not have the
1:a8b6921: 	 * correct permission for a particular <code>ServiceReference</code>
1:a8b6921: 	 * object, then it is removed from the set.
1:a8b6921: 	 * <li>If <code>clazz</code> is not <code>null</code>, the set is
1:a8b6921: 	 * further reduced to those services that are an <code>instanceof</code>
1:a8b6921: 	 * and were registered under the specified class. The complete list of
1:a8b6921: 	 * classes of which a service is an instance and which were specified when
1:a8b6921: 	 * the service was registered is available from the service's
1:a8b6921: 	 * {@link Constants#OBJECTCLASS} property.
1:a8b6921: 	 * <li>The set is reduced one final time by cycling through each
1:a8b6921: 	 * <code>ServiceReference</code> object and calling
1:a8b6921: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)} with the context
1:a8b6921: 	 * bundle and each class name under which the <code>ServiceReference</code>
1:a8b6921: 	 * object was registered. For any given <code>ServiceReference</code>
1:a8b6921: 	 * object, if any call to
1:a8b6921: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)} returns
1:a8b6921: 	 * <code>false</code>, then it is removed from the set of
1:a8b6921: 	 * <code>ServiceReference</code> objects.
1:a8b6921: 	 * <li>An array of the remaining <code>ServiceReference</code> objects is
1:a8b6921: 	 * returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param clazz The class name with which the service was registered or
1:a8b6921: 	 *        <code>null</code> for all services.
1:a8b6921: 	 * @param filter The filter criteria.
1:a8b6921: 	 * @return An array of <code>ServiceReference</code> objects or
1:a8b6921: 	 *         <code>null</code> if no services are registered which satisfy
1:a8b6921: 	 *         the search.
1:a8b6921: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1:a8b6921: 	 *         invalid filter string that cannot be parsed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public ServiceReference[] getServiceReferences(String clazz,
1:a8b6921: 			String filter) throws InvalidSyntaxException;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns an array of <code>ServiceReference</code> objects. The returned
1:a8b6921: 	 * array of <code>ServiceReference</code> objects contains services that
1:a8b6921: 	 * were registered under the specified class and match the specified filter
1:a8b6921: 	 * criteria.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The list is valid at the time of the call to this method, however since
1:a8b6921: 	 * the Framework is a very dynamic environment, services can be modified or
1:a8b6921: 	 * unregistered at anytime.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * <code>filter</code> is used to select the registered service whose
1:a8b6921: 	 * properties objects contain keys and values which satisfy the filter. See
1:a8b6921: 	 * {@link Filter} for a description of the filter string syntax.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If <code>filter</code> is <code>null</code>, all registered services
1:a8b6921: 	 * are considered to match the filter. If <code>filter</code> cannot be
1:a8b6921: 	 * parsed, an {@link InvalidSyntaxException} will be thrown with a human
1:a8b6921: 	 * readable message where the filter became unparsable.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to select a set of
1:a8b6921: 	 * <code>ServiceReference</code> objects:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If the filter string is not <code>null</code>, the filter string
1:a8b6921: 	 * is parsed and the set <code>ServiceReference</code> objects of
1:a8b6921: 	 * registered services that satisfy the filter is produced. If the filter
1:a8b6921: 	 * string is <code>null</code>, then all registered services are
1:a8b6921: 	 * considered to satisfy the filter.
1:a8b6921: 	 * <li>If the Java Runtime Environment supports permissions, the set of
1:a8b6921: 	 * <code>ServiceReference</code> objects produced by the previous step is
1:a8b6921: 	 * reduced by checking that the caller has the
1:a8b6921: 	 * <code>ServicePermission</code> to get at least one of the class names
1:a8b6921: 	 * under which the service was registered. If the caller does not have the
1:a8b6921: 	 * correct permission for a particular <code>ServiceReference</code>
1:a8b6921: 	 * object, then it is removed from the set.
1:a8b6921: 	 * <li>If <code>clazz</code> is not <code>null</code>, the set is
1:a8b6921: 	 * further reduced to those services that are an <code>instanceof</code>
1:a8b6921: 	 * and were registered under the specified class. The complete list of
1:a8b6921: 	 * classes of which a service is an instance and which were specified when
1:a8b6921: 	 * the service was registered is available from the service's
1:a8b6921: 	 * {@link Constants#OBJECTCLASS} property.
1:a8b6921: 	 * <li>An array of the remaining <code>ServiceReference</code> objects is
1:a8b6921: 	 * returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param clazz The class name with which the service was registered or
1:a8b6921: 	 *        <code>null</code> for all services.
1:a8b6921: 	 * @param filter The filter criteria.
1:a8b6921: 	 * @return An array of <code>ServiceReference</code> objects or
1:a8b6921: 	 *         <code>null</code> if no services are registered which satisfy
1:a8b6921: 	 *         the search.
1:a8b6921: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1:a8b6921: 	 *         invalid filter string that cannot be parsed.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public ServiceReference[] getAllServiceReferences(String clazz,
1:a8b6921: 			String filter) throws InvalidSyntaxException;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a <code>ServiceReference</code> object for a service that
1:a8b6921: 	 * implements and was registered under the specified class.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This <code>ServiceReference</code> object is valid at the time of the
1:a8b6921: 	 * call to this method, however as the Framework is a very dynamic
1:a8b6921: 	 * environment, services can be modified or unregistered at anytime.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method is the same as calling
1:a8b6921: 	 * {@link BundleContext#getServiceReferences(String, String)} with a
1:a8b6921: 	 * <code>null</code> filter string. It is provided as a convenience for
1:a8b6921: 	 * when the caller is interested in any service that implements the
1:a8b6921: 	 * specified class.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If multiple such services exist, the service with the highest ranking (as
1:a8b6921: 	 * specified in its {@link Constants#SERVICE_RANKING} property) is returned.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If there is a tie in ranking, the service with the lowest service ID (as
1:a8b6921: 	 * specified in its {@link Constants#SERVICE_ID} property); that is, the
1:a8b6921: 	 * service that was registered first is returned.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param clazz The class name with which the service was registered.
1:a8b6921: 	 * @return A <code>ServiceReference</code> object, or <code>null</code>
1:a8b6921: 	 *         if no services are registered which implement the named class.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @see #getServiceReferences(String, String)
1:a8b6921: 	 */
1:a8b6921: 	public ServiceReference getServiceReference(String clazz);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the specified service object for a service.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A bundle's use of a service is tracked by the bundle's use count of that
1:a8b6921: 	 * service. Each time a service's service object is returned by
1:a8b6921: 	 * {@link #getService(ServiceReference)} the context bundle's use count for
1:a8b6921: 	 * that service is incremented by one. Each time the service is released by
1:a8b6921: 	 * {@link #ungetService(ServiceReference)} the context bundle's use count
1:a8b6921: 	 * for that service is decremented by one.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * When a bundle's use count for a service drops to zero, the bundle should
1:a8b6921: 	 * no longer use that service.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method will always return <code>null</code> when the service
1:a8b6921: 	 * associated with this <code>reference</code> has been unregistered.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to get the service object:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If the service has been unregistered, <code>null</code> is
1:a8b6921: 	 * returned.
1:a8b6921: 	 * <li>The context bundle's use count for this service is incremented by
1:a8b6921: 	 * one.
1:a8b6921: 	 * <li>If the context bundle's use count for the service is currently one
1:a8b6921: 	 * and the service was registered with an object implementing the
1:a8b6921: 	 * <code>ServiceFactory</code> interface, the
1:a8b6921: 	 * {@link ServiceFactory#getService(Bundle, ServiceRegistration)} method is
1:a8b6921: 	 * called to create a service object for the context bundle. This service
1:a8b6921: 	 * object is cached by the Framework. While the context bundle's use count
1:a8b6921: 	 * for the service is greater than zero, subsequent calls to get the
1:a8b6921: 	 * services's service object for the context bundle will return the cached
1:a8b6921: 	 * service object. <br>
1:a8b6921: 	 * If the service object returned by the <code>ServiceFactory</code>
1:a8b6921: 	 * object is not an <code>instanceof</code> all the classes named when the
1:a8b6921: 	 * service was registered or the <code>ServiceFactory</code> object throws
1:a8b6921: 	 * an exception, <code>null</code> is returned and a Framework event of
1:a8b6921: 	 * type {@link FrameworkEvent#ERROR} is fired.
1:a8b6921: 	 * <li>The service object for the service is returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param reference A reference to the service.
1:a8b6921: 	 * @return A service object for the service associated with
1:a8b6921: 	 *         <code>reference</code> or <code>null</code> if the service is
1:a8b6921: 	 *         not registered or does not implement the classes under which it
1:a8b6921: 	 *         was registered in the case of a <code>ServiceFactory</code>.
1:a8b6921: 	 * @throws java.lang.SecurityException If the caller does not have the
1:a8b6921: 	 *         <code>ServicePermission</code> to get the service using at
1:a8b6921: 	 *         least one of the named classes the service was registered under
1:a8b6921: 	 *         and the Java Runtime Environment supports permissions.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @see #ungetService(ServiceReference)
1:a8b6921: 	 * @see ServiceFactory
1:a8b6921: 	 */
1:a8b6921: 	public Object getService(ServiceReference reference);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Releases the service object referenced by the specified
1:a8b6921: 	 * <code>ServiceReference</code> object. If the context bundle's use count
1:a8b6921: 	 * for the service is zero, this method returns <code>false</code>.
1:a8b6921: 	 * Otherwise, the context bundle's use count for the service is decremented
1:a8b6921: 	 * by one.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The service's service object should no longer be used and all references
1:a8b6921: 	 * to it should be destroyed when a bundle's use count for the service drops
1:a8b6921: 	 * to zero.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The following steps are required to unget the service object:
1:a8b6921: 	 * <ol>
1:a8b6921: 	 * <li>If the context bundle's use count for the service is zero or the
1:a8b6921: 	 * service has been unregistered, <code>false</code> is returned.
1:a8b6921: 	 * <li>The context bundle's use count for this service is decremented by
1:a8b6921: 	 * one.
1:a8b6921: 	 * <li>If the context bundle's use count for the service is currently zero
1:a8b6921: 	 * and the service was registered with a <code>ServiceFactory</code>
1:a8b6921: 	 * object, the
1:a8b6921: 	 * {@link ServiceFactory#ungetService(Bundle, ServiceRegistration, Object)}
1:a8b6921: 	 * method is called to release the service object for the context bundle.
1:a8b6921: 	 * <li><code>true</code> is returned.
1:a8b6921: 	 * </ol>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param reference A reference to the service to be released.
1:a8b6921: 	 * @return <code>false</code> if the context bundle's use count for the
1:a8b6921: 	 *         service is zero or if the service has been unregistered;
1:a8b6921: 	 *         <code>true</code> otherwise.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * @see #getService
1:a8b6921: 	 * @see ServiceFactory
1:a8b6921: 	 */
1:a8b6921: 	public boolean ungetService(ServiceReference reference);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a <code>File</code> object for a file in the persistent storage
1:a8b6921: 	 * area provided for the bundle by the Framework. This method will return
1:a8b6921: 	 * <code>null</code> if the platform does not have file system support.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * A <code>File</code> object for the base directory of the persistent
1:a8b6921: 	 * storage area provided for the context bundle by the Framework can be
1:a8b6921: 	 * obtained by calling this method with an empty string as
1:a8b6921: 	 * <code>filename</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the Java Runtime Environment supports permissions, the Framework will
1:a8b6921: 	 * ensure that the bundle has the <code>java.io.FilePermission</code> with
1:a8b6921: 	 * actions <code>read</code>,<code>write</code>,<code>delete</code>
1:a8b6921: 	 * for all files (recursively) in the persistent storage area provided for
1:a8b6921: 	 * the context bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param filename A relative name to the file to be accessed.
1:a8b6921: 	 * @return A <code>File</code> object that represents the requested file
1:a8b6921: 	 *         or <code>null</code> if the platform does not have file system
1:a8b6921: 	 *         support.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 */
1:a8b6921: 	public File getDataFile(String filename);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a <code>Filter</code> object. This <code>Filter</code> object
1:a8b6921: 	 * may be used to match a <code>ServiceReference</code> object or a
1:a8b6921: 	 * <code>Dictionary</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the filter cannot be parsed, an {@link InvalidSyntaxException} will be
1:a8b6921: 	 * thrown with a human readable message where the filter became unparsable.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param filter The filter string.
1:a8b6921: 	 * @return A <code>Filter</code> object encapsulating the filter string.
1:a8b6921: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1:a8b6921: 	 *         invalid filter string that cannot be parsed.
1:a8b6921: 	 * @throws NullPointerException If <code>filter</code> is null.
1:a8b6921: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1:a8b6921: 	 *         longer valid.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.1
1:a8b6921: 	 * @see "Framework specification for a description of the filter string syntax."
1:a8b6921: 	 * @see FrameworkUtil#createFilter(String)
1:a8b6921: 	 */
1:a8b6921: 	public Filter createFilter(String filter)
1:a8b6921: 			throws InvalidSyntaxException;
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/BundleContext.java,v 1.22 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.io.File;
1: import java.io.InputStream;
1: import java.util.Dictionary;
1: 
1: /**
1:  * A bundle's execution context within the Framework. The context is used to
1:  * grant access to other methods so that this bundle can interact with the
1:  * Framework.
1:  * 
1:  * <p>
1:  * <code>BundleContext</code> methods allow a bundle to:
1:  * <ul>
1:  * <li>Subscribe to events published by the Framework.
1:  * <li>Register service objects with the Framework service registry.
1:  * <li>Retrieve <code>ServiceReferences</code> from the Framework service
1:  * registry.
1:  * <li>Get and release service objects for a referenced service.
1:  * <li>Install new bundles in the Framework.
1:  * <li>Get the list of bundles installed in the Framework.
1:  * <li>Get the {@link Bundle} object for a bundle.
1:  * <li>Create <code>File</code> objects for files in a persistent storage
1:  * area provided for the bundle by the Framework.
1:  * </ul>
1:  * 
1:  * <p>
1:  * A <code>BundleContext</code> object will be created and provided to the
1:  * bundle associated with this context when it is started using the
1:  * {@link BundleActivator#start} method. The same <code>BundleContext</code>
1:  * object will be passed to the bundle associated with this context when it is
1:  * stopped using the {@link BundleActivator#stop} method. A
1:  * <code>BundleContext</code> object is generally for the private use of its
1:  * associated bundle and is not meant to be shared with other bundles in the
1:  * OSGi environment.
1:  * 
1:  * <p>
1:  * The <code>Bundle</code> object associated with a <code>BundleContext</code>
1:  * object is called the <em>context bundle</em>.
1:  * 
1:  * <p>
1:  * The <code>BundleContext</code> object is only valid during the execution of
1:  * its context bundle; that is, during the period from when the context bundle
1:  * is in the <code>STARTING</code>, <code>STOPPING</code>, and
1:  * <code>ACTIVE</code> bundle states. If the <code>BundleContext</code>
1:  * object is used subsequently, an <code>IllegalStateException</code> must be
1:  * thrown. The <code>BundleContext</code> object must never be reused after
1:  * its context bundle is stopped.
1:  * 
1:  * <p>
1:  * The Framework is the only entity that can create <code>BundleContext</code>
1:  * objects and they are only valid within the Framework that created them.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision: 1.22 $
1:  */
1: 
1: public interface BundleContext {
1: 	/**
1: 	 * Returns the value of the specified property. If the key is not found in
1: 	 * the Framework properties, the system properties are then searched. The
1: 	 * method returns <code>null</code> if the property is not found.
1: 	 * 
1: 	 * <p>
1: 	 * The Framework defines the following standard property keys:
1: 	 * </p>
1: 	 * <ul>
1: 	 * <li>{@link Constants#FRAMEWORK_VERSION} - The OSGi Framework version.
1: 	 * </li>
1: 	 * <li>{@link Constants#FRAMEWORK_VENDOR} - The Framework implementation
1: 	 * vendor.</li>
1: 	 * <li>{@link Constants#FRAMEWORK_LANGUAGE} - The language being used. See
1: 	 * ISO 639 for possible values.</li>
1: 	 * <li>{@link Constants#FRAMEWORK_OS_NAME} - The host computer operating
1: 	 * system.</li>
1: 	 * <li>{@link Constants#FRAMEWORK_OS_VERSION} - The host computer
1: 	 * operating system version number.</li>
1: 	 * <li>{@link Constants#FRAMEWORK_PROCESSOR} - The host computer processor
1: 	 * name.</li>
1: 	 * </ul>
1: 	 * <p>
1: 	 * All bundles must have permission to read these properties.
1: 	 * 
1: 	 * <p>
1: 	 * Note: The last four standard properties are used by the
1: 	 * {@link Constants#BUNDLE_NATIVECODE} <code>Manifest</code> header's
1: 	 * matching algorithm for selecting native language code.
1: 	 * 
1: 	 * @param key The name of the requested property.
1: 	 * @return The value of the requested property, or <code>null</code> if
1: 	 *         the property is undefined.
1: 	 * @throws java.lang.SecurityException If the caller does not have the
1: 	 *         appropriate <code>PropertyPermission</code> to read the
1: 	 *         property, and the Java Runtime Environment supports permissions.
1: 	 */
1: 	public String getProperty(String key);
1: 
1: 	/**
1: 	 * Returns the <code>Bundle</code> object associated with this
1: 	 * <code>BundleContext</code>. This bundle is called the context bundle.
1: 	 * 
1: 	 * @return The <code>Bundle</code> object associated with this
1: 	 *         <code>BundleContext</code>.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public Bundle getBundle();
1: 
1: 	/**
1: 	 * Installs a bundle from the specified location string. A bundle is
1: 	 * obtained from <code>location</code> as interpreted by the Framework in
1: 	 * an implementation dependent manner.
1: 	 * <p>
1: 	 * Every installed bundle is uniquely identified by its location string,
1: 	 * typically in the form of a URL.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to install a bundle:
1: 	 * <ol>
1: 	 * <li>If a bundle containing the same location string is already
1: 	 * installed, the <code>Bundle</code> object for that bundle is returned.
1: 	 * 
1: 	 * <li>The bundle's content is read from the location string. If this
1: 	 * fails, a {@link BundleException} is thrown.
1: 	 * 
1: 	 * <li>The bundle's <code>Bundle-NativeCode</code> dependencies are
1: 	 * resolved. If this fails, a <code>BundleException</code> is thrown.
1: 	 * 
1: 	 * <li>The bundle's associated resources are allocated. The associated
1: 	 * resources minimally consist of a unique identifier and a persistent
1: 	 * storage area if the platform has file system support. If this step fails,
1: 	 * a <code>BundleException</code> is thrown.
1: 	 * 
1: 	 * <li>If the bundle has declared an Bundle-RequiredExecutionEnvironment
1: 	 * header, then the listed execution environments must be verified against
1: 	 * the installed execution environments. If none of the listed execution 
1: 	 * environments match an installed execution environment, a
1: 	 * <code>BundleException</code> must be thrown.
1: 	 * 
1: 	 * <li>The bundle's state is set to <code>INSTALLED</code>.
1: 	 * 
1: 	 * <li>A bundle event of type {@link BundleEvent#INSTALLED} is fired.
1: 	 * 
1: 	 * <li>The <code>Bundle</code> object for the newly or previously
1: 	 * installed bundle is returned.
1: 	 * </ol>
1: 	 * 
1: 	 * <b>Postconditions, no exceptions thrown </b>
1: 	 * <ul>
1: 	 * <li><code>getState()</code> in {<code>INSTALLED</code>,<code>RESOLVED</code>}.
1: 	 * <li>Bundle has a unique ID.
1: 	 * </ul>
1: 	 * <b>Postconditions, when an exception is thrown </b>
1: 	 * <ul>
1: 	 * <li>Bundle is not installed and no trace of the bundle exists.
1: 	 * </ul>
1: 	 * 
1: 	 * @param location The location identifier of the bundle to install.
1: 	 * @return The <code>Bundle</code> object of the installed bundle.
1: 	 * @throws BundleException If the installation failed.
1: 	 * @throws java.lang.SecurityException If the caller does not have the
1: 	 *         appropriate <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the
1: 	 *         Java Runtime Environment supports permissions.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public Bundle installBundle(String location)
1: 			throws BundleException;
1: 
1: 	/**
1: 	 * Installs a bundle from the specified <code>InputStream</code> object.
1: 	 * 
1: 	 * <p>
1: 	 * This method performs all of the steps listed in
1: 	 * <code>BundleContext.installBundle(String location)</code>, except that
1: 	 * the bundle's content will be read from the <code>InputStream</code>
1: 	 * object. The location identifier string specified will be used as the
1: 	 * identity of the bundle.
1: 	 * 
1: 	 * <p>
1: 	 * This method must always close the <code>InputStream</code> object, even
1: 	 * if an exception is thrown.
1: 	 * 
1: 	 * @param location The location identifier of the bundle to install.
1: 	 * @param input The <code>InputStream</code> object from which this bundle
1: 	 *        will be read.
1: 	 * @return The <code>Bundle</code> object of the installed bundle.
1: 	 * @throws BundleException If the provided stream cannot be read or the
1: 	 *         installation failed.
1: 	 * @throws java.lang.SecurityException If the caller does not have the
1: 	 *         appropriate <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the
1: 	 *         Java Runtime Environment supports permissions.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @see #installBundle(java.lang.String)
1: 	 */
1: 	public Bundle installBundle(String location, InputStream input)
1: 			throws BundleException;
1: 
1: 	/**
1: 	 * Returns the bundle with the specified identifier.
1: 	 * 
1: 	 * @param id The identifier of the bundle to retrieve.
1: 	 * @return A <code>Bundle</code> object or <code>null</code> if the
1: 	 *         identifier does not match any installed bundle.
1: 	 */
1: 	public Bundle getBundle(long id);
1: 
1: 	/**
1: 	 * Returns a list of all installed bundles.
1: 	 * <p>
1: 	 * This method returns a list of all bundles installed in the OSGi
1: 	 * environment at the time of the call to this method. However, since the
1: 	 * Framework is a very dynamic environment, bundles can be installed or
1: 	 * uninstalled at anytime.
1: 	 * 
1: 	 * @return An array of <code>Bundle</code> objects, one object per
1: 	 *         installed bundle.
1: 	 */
1: 	public Bundle[] getBundles();
1: 
1: 	/**
1: 	 * Adds the specified <code>ServiceListener</code> object with the
1: 	 * specified <code>filter</code> to the context bundle's list of
1: 	 * listeners. See {@link Filter} for a description of the filter syntax.
1: 	 * <code>ServiceListener</code> objects are notified when a service has a
1: 	 * lifecycle state change.
1: 	 * 
1: 	 * <p>
1: 	 * If the context bundle's list of listeners already contains a listener
1: 	 * <code>l</code> such that <code>(l==listener)</code>, then this
1: 	 * method replaces that listener's filter (which may be <code>null</code>)
1: 	 * with the specified one (which may be <code>null</code>).
1: 	 * 
1: 	 * <p>
1: 	 * The listener is called if the filter criteria is met. To filter based
1: 	 * upon the class of the service, the filter should reference the
1: 	 * {@link Constants#OBJECTCLASS} property. If <code>filter</code> is
1: 	 * <code>null</code>, all services are considered to match the filter.
1: 	 * 
1: 	 * <p>
1: 	 * When using a <code>filter</code>, it is possible that the
1: 	 * <code>ServiceEvent</code>s for the complete lifecycle of a service
1: 	 * will not be delivered to the listener. For example, if the
1: 	 * <code>filter</code> only matches when the property <code>x</code> has
1: 	 * the value <code>1</code>, the listener will not be called if the
1: 	 * service is registered with the property <code>x</code> not set to the
1: 	 * value <code>1</code>. Subsequently, when the service is modified
1: 	 * setting property <code>x</code> to the value <code>1</code>, the
1: 	 * filter will match and the listener will be called with a
1: 	 * <code>ServiceEvent</code> of type <code>MODIFIED</code>. Thus, the
1: 	 * listener will not be called with a <code>ServiceEvent</code> of type
1: 	 * <code>REGISTERED</code>.
1: 	 * 
1: 	 * <p>
1: 	 * If the Java Runtime Environment supports permissions, the
1: 	 * <code>ServiceListener</code> object will be notified of a service event
1: 	 * only if the bundle that is registering it has the
1: 	 * <code>ServicePermission</code> to get the service using at least one of
1: 	 * the named classes the service was registered under.
1: 	 * 
1: 	 * @param listener The <code>ServiceListener</code> object to be added.
1: 	 * @param filter The filter criteria.
1: 	 * 
1: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1: 	 *         invalid filter string that cannot be parsed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * 
1: 	 * @see ServiceEvent
1: 	 * @see ServiceListener
1: 	 * @see ServicePermission
1: 	 */
1: 	public void addServiceListener(ServiceListener listener,
1: 			String filter) throws InvalidSyntaxException;
1: 
1: 	/**
1: 	 * Adds the specified <code>ServiceListener</code> object to the context
1: 	 * bundle's list of listeners.
1: 	 * 
1: 	 * <p>
1: 	 * This method is the same as calling
1: 	 * <code>BundleContext.addServiceListener(ServiceListener listener,
1: 	 * String filter)</code>
1: 	 * with <code>filter</code> set to <code>null</code>.
1: 	 * 
1: 	 * @param listener The <code>ServiceListener</code> object to be added.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * 
1: 	 * @see #addServiceListener(ServiceListener, String)
1: 	 */
1: 	public void addServiceListener(ServiceListener listener);
1: 
1: 	/**
1: 	 * Removes the specified <code>ServiceListener</code> object from the
1: 	 * context bundle's list of listeners.
1: 	 * 
1: 	 * <p>
1: 	 * If <code>listener</code> is not contained in this context bundle's list
1: 	 * of listeners, this method does nothing.
1: 	 * 
1: 	 * @param listener The <code>ServiceListener</code> to be removed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public void removeServiceListener(ServiceListener listener);
1: 
1: 	/**
1: 	 * Adds the specified <code>BundleListener</code> object to the context
1: 	 * bundle's list of listeners if not already present. BundleListener objects
1: 	 * are notified when a bundle has a lifecycle state change.
1: 	 * 
1: 	 * <p>
1: 	 * If the context bundle's list of listeners already contains a listener
1: 	 * <code>l</code> such that <code>(l==listener)</code>, this method
1: 	 * does nothing.
1: 	 * 
1: 	 * @param listener The <code>BundleListener</code> to be added.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @throws java.lang.SecurityException If listener is a
1: 	 *         <code>SynchronousBundleListener</code> and the caller does not
1: 	 *         have the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
1: 	 *         and the Java Runtime Environment supports permissions.
1: 	 * 
1: 	 * @see BundleEvent
1: 	 * @see BundleListener
1: 	 */
1: 	public void addBundleListener(BundleListener listener);
1: 
1: 	/**
1: 	 * Removes the specified <code>BundleListener</code> object from the
1: 	 * context bundle's list of listeners.
1: 	 * 
1: 	 * <p>
1: 	 * If <code>listener</code> is not contained in the context bundle's list
1: 	 * of listeners, this method does nothing.
1: 	 * 
1: 	 * @param listener The <code>BundleListener</code> object to be removed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @throws java.lang.SecurityException If listener is a
1: 	 *         <code>SynchronousBundleListener</code> and the caller does not
1: 	 *         have the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
1: 	 *         and the Java Runtime Environment supports permissions.
1: 	 */
1: 	public void removeBundleListener(BundleListener listener);
1: 
1: 	/**
1: 	 * Adds the specified <code>FrameworkListener</code> object to the context
1: 	 * bundle's list of listeners if not already present. FrameworkListeners are
1: 	 * notified of general Framework events.
1: 	 * 
1: 	 * <p>
1: 	 * If the context bundle's list of listeners already contains a listener
1: 	 * <code>l</code> such that <code>(l==listener)</code>, this method
1: 	 * does nothing.
1: 	 * 
1: 	 * @param listener The <code>FrameworkListener</code> object to be added.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * 
1: 	 * @see FrameworkEvent
1: 	 * @see FrameworkListener
1: 	 */
1: 	public void addFrameworkListener(FrameworkListener listener);
1: 
1: 	/**
1: 	 * Removes the specified <code>FrameworkListener</code> object from the
1: 	 * context bundle's list of listeners.
1: 	 * 
1: 	 * <p>
1: 	 * If <code>listener</code> is not contained in the context bundle's list
1: 	 * of listeners, this method does nothing.
1: 	 * 
1: 	 * @param listener The <code>FrameworkListener</code> object to be
1: 	 *        removed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public void removeFrameworkListener(FrameworkListener listener);
1: 
1: 	/**
1: 	 * Registers the specified service object with the specified properties
1: 	 * under the specified class names into the Framework. A
1: 	 * <code>ServiceRegistration</code> object is returned. The
1: 	 * <code>ServiceRegistration</code> object is for the private use of the
1: 	 * bundle registering the service and should not be shared with other
1: 	 * bundles. The registering bundle is defined to be the context bundle.
1: 	 * Other bundles can locate the service by using either the
1: 	 * {@link #getServiceReferences} or {@link #getServiceReference} method.
1: 	 * 
1: 	 * <p>
1: 	 * A bundle can register a service object that implements the
1: 	 * {@link ServiceFactory} interface to have more flexibility in providing
1: 	 * service objects to other bundles.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to register a service:
1: 	 * <ol>
1: 	 * <li>If <code>service</code> is not a <code>ServiceFactory</code>,
1: 	 * an <code>IllegalArgumentException</code> is thrown if
1: 	 * <code>service</code> is not an <code>instanceof</code> all the
1: 	 * classes named.
1: 	 * <li>The Framework adds these service properties to the specified
1: 	 * <code>Dictionary</code> (which may be <code>null</code>): a property
1: 	 * named {@link Constants#SERVICE_ID} identifying the registration number of
1: 	 * the service and a property named {@link Constants#OBJECTCLASS} containing
1: 	 * all the specified classes. If any of these properties have already been
1: 	 * specified by the registering bundle, their values will be overwritten by
1: 	 * the Framework.
1: 	 * <li>The service is added to the Framework service registry and may now
1: 	 * be used by other bundles.
1: 	 * <li>A service event of type {@link ServiceEvent#REGISTERED} is
1: 	 * fired.
1: 	 * <li>A <code>ServiceRegistration</code> object for this registration is
1: 	 * returned.
1: 	 * </ol>
1: 	 * 
1: 	 * @param clazzes The class names under which the service can be located.
1: 	 *        The class names in this array will be stored in the service's
1: 	 *        properties under the key {@link Constants#OBJECTCLASS}.
1: 	 * @param service The service object or a <code>ServiceFactory</code>
1: 	 *        object.
1: 	 * @param properties The properties for this service. The keys in the
1: 	 *        properties object must all be <code>String</code> objects. See
1: 	 *        {@link Constants} for a list of standard service property keys.
1: 	 *        Changes should not be made to this object after calling this
1: 	 *        method. To update the service's properties the
1: 	 *        {@link ServiceRegistration#setProperties} method must be called.
1: 	 *        The set of properties may be <code>null</code> if the service
1: 	 *        has no properties.
1: 	 * 
1: 	 * @return A <code>ServiceRegistration</code> object for use by the bundle
1: 	 *         registering the service to update the service's properties or to
1: 	 *         unregister the service.
1: 	 * 
1: 	 * @throws java.lang.IllegalArgumentException If one of the following is
1: 	 *         true:
1: 	 *         <ul>
1: 	 *         <li><code>service</code> is <code>null</code>.
1: 	 *         <li><code>service</code> is not a <code>ServiceFactory</code>
1: 	 *         object and is not an instance of all the named classes in
1: 	 *         <code>clazzes</code>.
1: 	 *         <li><code>properties</code> contains case variants of the same
1: 	 *         key name.
1: 	 *         </ul>
1: 	 * 
1: 	 * @throws java.lang.SecurityException If the caller does not have the
1: 	 *         <code>ServicePermission</code> to register the service for all
1: 	 *         the named classes and the Java Runtime Environment supports
1: 	 *         permissions.
1: 	 * 
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * 
1: 	 * @see ServiceRegistration
1: 	 * @see ServiceFactory
1: 	 */
1: 	public ServiceRegistration registerService(String[] clazzes,
1: 			Object service, Dictionary properties);
1: 
1: 	/**
1: 	 * Registers the specified service object with the specified properties
1: 	 * under the specified class name with the Framework.
1: 	 * 
1: 	 * <p>
1: 	 * This method is otherwise identical to
1: 	 * {@link #registerService(java.lang.String[], java.lang.Object,
1: 	 * java.util.Dictionary)} and is provided as a convenience when
1: 	 * <code>service</code> will only be registered under a single class name.
1: 	 * Note that even in this case the value of the service's
1: 	 * {@link Constants#OBJECTCLASS} property will be an array of strings,
1: 	 * rather than just a single string.
1: 	 * 
1: 	 * @param clazz The class name under which the service can be located.
1: 	 * @param service The service object or a <code>ServiceFactory</code>
1: 	 *        object.
1: 	 * @param properties The properties for this service. 
1: 	 * 
1: 	 * @return A <code>ServiceRegistration</code> object for use by the bundle
1: 	 *         registering the service to update the service's properties or to
1: 	 *         unregister the service.
1: 	 *         
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @see #registerService(java.lang.String[], java.lang.Object,
1: 	 *      java.util.Dictionary)
1: 	 */
1: 	public ServiceRegistration registerService(String clazz,
1: 			Object service, Dictionary properties);
1: 
1: 	/**
1: 	 * Returns an array of <code>ServiceReference</code> objects. The returned
1: 	 * array of <code>ServiceReference</code> objects contains services that
1: 	 * were registered under the specified class, match the specified filter
1: 	 * criteria, and the packages for the class names under which the services
1: 	 * were registered match the context bundle's packages as defined in
1: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)}.
1: 	 * 
1: 	 * <p>
1: 	 * The list is valid at the time of the call to this method, however since
1: 	 * the Framework is a very dynamic environment, services can be modified or
1: 	 * unregistered at anytime.
1: 	 * 
1: 	 * <p>
1: 	 * <code>filter</code> is used to select the registered service whose
1: 	 * properties objects contain keys and values which satisfy the filter. See
1: 	 * {@link Filter} for a description of the filter string syntax.
1: 	 * 
1: 	 * <p>
1: 	 * If <code>filter</code> is <code>null</code>, all registered services
1: 	 * are considered to match the filter. If <code>filter</code> cannot be
1: 	 * parsed, an {@link InvalidSyntaxException} will be thrown with a human
1: 	 * readable message where the filter became unparsable.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to select a set of
1: 	 * <code>ServiceReference</code> objects:
1: 	 * <ol>
1: 	 * <li>If the filter string is not <code>null</code>, the filter string
1: 	 * is parsed and the set <code>ServiceReference</code> objects of
1: 	 * registered services that satisfy the filter is produced. If the filter
1: 	 * string is <code>null</code>, then all registered services are
1: 	 * considered to satisfy the filter.
1: 	 * <li>If the Java Runtime Environment supports permissions, the set of
1: 	 * <code>ServiceReference</code> objects produced by the previous step is
1: 	 * reduced by checking that the caller has the
1: 	 * <code>ServicePermission</code> to get at least one of the class names
1: 	 * under which the service was registered. If the caller does not have the
1: 	 * correct permission for a particular <code>ServiceReference</code>
1: 	 * object, then it is removed from the set.
1: 	 * <li>If <code>clazz</code> is not <code>null</code>, the set is
1: 	 * further reduced to those services that are an <code>instanceof</code>
1: 	 * and were registered under the specified class. The complete list of
1: 	 * classes of which a service is an instance and which were specified when
1: 	 * the service was registered is available from the service's
1: 	 * {@link Constants#OBJECTCLASS} property.
1: 	 * <li>The set is reduced one final time by cycling through each
1: 	 * <code>ServiceReference</code> object and calling
1: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)} with the context
1: 	 * bundle and each class name under which the <code>ServiceReference</code>
1: 	 * object was registered. For any given <code>ServiceReference</code>
1: 	 * object, if any call to
1: 	 * {@link ServiceReference#isAssignableTo(Bundle, String)} returns
1: 	 * <code>false</code>, then it is removed from the set of
1: 	 * <code>ServiceReference</code> objects.
1: 	 * <li>An array of the remaining <code>ServiceReference</code> objects is
1: 	 * returned.
1: 	 * </ol>
1: 	 * 
1: 	 * @param clazz The class name with which the service was registered or
1: 	 *        <code>null</code> for all services.
1: 	 * @param filter The filter criteria.
1: 	 * @return An array of <code>ServiceReference</code> objects or
1: 	 *         <code>null</code> if no services are registered which satisfy
1: 	 *         the search.
1: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1: 	 *         invalid filter string that cannot be parsed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public ServiceReference[] getServiceReferences(String clazz,
1: 			String filter) throws InvalidSyntaxException;
1: 
1: 	/**
1: 	 * Returns an array of <code>ServiceReference</code> objects. The returned
1: 	 * array of <code>ServiceReference</code> objects contains services that
1: 	 * were registered under the specified class and match the specified filter
1: 	 * criteria.
1: 	 * 
1: 	 * <p>
1: 	 * The list is valid at the time of the call to this method, however since
1: 	 * the Framework is a very dynamic environment, services can be modified or
1: 	 * unregistered at anytime.
1: 	 * 
1: 	 * <p>
1: 	 * <code>filter</code> is used to select the registered service whose
1: 	 * properties objects contain keys and values which satisfy the filter. See
1: 	 * {@link Filter} for a description of the filter string syntax.
1: 	 * 
1: 	 * <p>
1: 	 * If <code>filter</code> is <code>null</code>, all registered services
1: 	 * are considered to match the filter. If <code>filter</code> cannot be
1: 	 * parsed, an {@link InvalidSyntaxException} will be thrown with a human
1: 	 * readable message where the filter became unparsable.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to select a set of
1: 	 * <code>ServiceReference</code> objects:
1: 	 * <ol>
1: 	 * <li>If the filter string is not <code>null</code>, the filter string
1: 	 * is parsed and the set <code>ServiceReference</code> objects of
1: 	 * registered services that satisfy the filter is produced. If the filter
1: 	 * string is <code>null</code>, then all registered services are
1: 	 * considered to satisfy the filter.
1: 	 * <li>If the Java Runtime Environment supports permissions, the set of
1: 	 * <code>ServiceReference</code> objects produced by the previous step is
1: 	 * reduced by checking that the caller has the
1: 	 * <code>ServicePermission</code> to get at least one of the class names
1: 	 * under which the service was registered. If the caller does not have the
1: 	 * correct permission for a particular <code>ServiceReference</code>
1: 	 * object, then it is removed from the set.
1: 	 * <li>If <code>clazz</code> is not <code>null</code>, the set is
1: 	 * further reduced to those services that are an <code>instanceof</code>
1: 	 * and were registered under the specified class. The complete list of
1: 	 * classes of which a service is an instance and which were specified when
1: 	 * the service was registered is available from the service's
1: 	 * {@link Constants#OBJECTCLASS} property.
1: 	 * <li>An array of the remaining <code>ServiceReference</code> objects is
1: 	 * returned.
1: 	 * </ol>
1: 	 * 
1: 	 * @param clazz The class name with which the service was registered or
1: 	 *        <code>null</code> for all services.
1: 	 * @param filter The filter criteria.
1: 	 * @return An array of <code>ServiceReference</code> objects or
1: 	 *         <code>null</code> if no services are registered which satisfy
1: 	 *         the search.
1: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1: 	 *         invalid filter string that cannot be parsed.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @since 1.3
1: 	 */
1: 	public ServiceReference[] getAllServiceReferences(String clazz,
1: 			String filter) throws InvalidSyntaxException;
1: 
1: 	/**
1: 	 * Returns a <code>ServiceReference</code> object for a service that
1: 	 * implements and was registered under the specified class.
1: 	 * 
1: 	 * <p>
1: 	 * This <code>ServiceReference</code> object is valid at the time of the
1: 	 * call to this method, however as the Framework is a very dynamic
1: 	 * environment, services can be modified or unregistered at anytime.
1: 	 * 
1: 	 * <p>
1: 	 * This method is the same as calling
1: 	 * {@link BundleContext#getServiceReferences(String, String)} with a
1: 	 * <code>null</code> filter string. It is provided as a convenience for
1: 	 * when the caller is interested in any service that implements the
1: 	 * specified class.
1: 	 * <p>
1: 	 * If multiple such services exist, the service with the highest ranking (as
1: 	 * specified in its {@link Constants#SERVICE_RANKING} property) is returned.
1: 	 * <p>
1: 	 * If there is a tie in ranking, the service with the lowest service ID (as
1: 	 * specified in its {@link Constants#SERVICE_ID} property); that is, the
1: 	 * service that was registered first is returned.
1: 	 * 
1: 	 * @param clazz The class name with which the service was registered.
1: 	 * @return A <code>ServiceReference</code> object, or <code>null</code>
1: 	 *         if no services are registered which implement the named class.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @see #getServiceReferences(String, String)
1: 	 */
1: 	public ServiceReference getServiceReference(String clazz);
1: 
1: 	/**
1: 	 * Returns the specified service object for a service.
1: 	 * <p>
1: 	 * A bundle's use of a service is tracked by the bundle's use count of that
1: 	 * service. Each time a service's service object is returned by
1: 	 * {@link #getService(ServiceReference)} the context bundle's use count for
1: 	 * that service is incremented by one. Each time the service is released by
1: 	 * {@link #ungetService(ServiceReference)} the context bundle's use count
1: 	 * for that service is decremented by one.
1: 	 * <p>
1: 	 * When a bundle's use count for a service drops to zero, the bundle should
1: 	 * no longer use that service.
1: 	 * 
1: 	 * <p>
1: 	 * This method will always return <code>null</code> when the service
1: 	 * associated with this <code>reference</code> has been unregistered.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to get the service object:
1: 	 * <ol>
1: 	 * <li>If the service has been unregistered, <code>null</code> is
1: 	 * returned.
1: 	 * <li>The context bundle's use count for this service is incremented by
1: 	 * one.
1: 	 * <li>If the context bundle's use count for the service is currently one
1: 	 * and the service was registered with an object implementing the
1: 	 * <code>ServiceFactory</code> interface, the
1: 	 * {@link ServiceFactory#getService(Bundle, ServiceRegistration)} method is
1: 	 * called to create a service object for the context bundle. This service
1: 	 * object is cached by the Framework. While the context bundle's use count
1: 	 * for the service is greater than zero, subsequent calls to get the
1: 	 * services's service object for the context bundle will return the cached
1: 	 * service object. <br>
1: 	 * If the service object returned by the <code>ServiceFactory</code>
1: 	 * object is not an <code>instanceof</code> all the classes named when the
1: 	 * service was registered or the <code>ServiceFactory</code> object throws
1: 	 * an exception, <code>null</code> is returned and a Framework event of
1: 	 * type {@link FrameworkEvent#ERROR} is fired.
1: 	 * <li>The service object for the service is returned.
1: 	 * </ol>
1: 	 * 
1: 	 * @param reference A reference to the service.
1: 	 * @return A service object for the service associated with
1: 	 *         <code>reference</code> or <code>null</code> if the service is
1: 	 *         not registered or does not implement the classes under which it
1: 	 *         was registered in the case of a <code>ServiceFactory</code>.
1: 	 * @throws java.lang.SecurityException If the caller does not have the
1: 	 *         <code>ServicePermission</code> to get the service using at
1: 	 *         least one of the named classes the service was registered under
1: 	 *         and the Java Runtime Environment supports permissions.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @see #ungetService(ServiceReference)
1: 	 * @see ServiceFactory
1: 	 */
1: 	public Object getService(ServiceReference reference);
1: 
1: 	/**
1: 	 * Releases the service object referenced by the specified
1: 	 * <code>ServiceReference</code> object. If the context bundle's use count
1: 	 * for the service is zero, this method returns <code>false</code>.
1: 	 * Otherwise, the context bundle's use count for the service is decremented
1: 	 * by one.
1: 	 * 
1: 	 * <p>
1: 	 * The service's service object should no longer be used and all references
1: 	 * to it should be destroyed when a bundle's use count for the service drops
1: 	 * to zero.
1: 	 * 
1: 	 * <p>
1: 	 * The following steps are required to unget the service object:
1: 	 * <ol>
1: 	 * <li>If the context bundle's use count for the service is zero or the
1: 	 * service has been unregistered, <code>false</code> is returned.
1: 	 * <li>The context bundle's use count for this service is decremented by
1: 	 * one.
1: 	 * <li>If the context bundle's use count for the service is currently zero
1: 	 * and the service was registered with a <code>ServiceFactory</code>
1: 	 * object, the
1: 	 * {@link ServiceFactory#ungetService(Bundle, ServiceRegistration, Object)}
1: 	 * method is called to release the service object for the context bundle.
1: 	 * <li><code>true</code> is returned.
1: 	 * </ol>
1: 	 * 
1: 	 * @param reference A reference to the service to be released.
1: 	 * @return <code>false</code> if the context bundle's use count for the
1: 	 *         service is zero or if the service has been unregistered;
1: 	 *         <code>true</code> otherwise.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * @see #getService
1: 	 * @see ServiceFactory
1: 	 */
1: 	public boolean ungetService(ServiceReference reference);
1: 
1: 	/**
1: 	 * Creates a <code>File</code> object for a file in the persistent storage
1: 	 * area provided for the bundle by the Framework. This method will return
1: 	 * <code>null</code> if the platform does not have file system support.
1: 	 * 
1: 	 * <p>
1: 	 * A <code>File</code> object for the base directory of the persistent
1: 	 * storage area provided for the context bundle by the Framework can be
1: 	 * obtained by calling this method with an empty string as
1: 	 * <code>filename</code>.
1: 	 * 
1: 	 * <p>
1: 	 * If the Java Runtime Environment supports permissions, the Framework will
1: 	 * ensure that the bundle has the <code>java.io.FilePermission</code> with
1: 	 * actions <code>read</code>,<code>write</code>,<code>delete</code>
1: 	 * for all files (recursively) in the persistent storage area provided for
1: 	 * the context bundle.
1: 	 * 
1: 	 * @param filename A relative name to the file to be accessed.
1: 	 * @return A <code>File</code> object that represents the requested file
1: 	 *         or <code>null</code> if the platform does not have file system
1: 	 *         support.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 */
1: 	public File getDataFile(String filename);
1: 
1: 	/**
1: 	 * Creates a <code>Filter</code> object. This <code>Filter</code> object
1: 	 * may be used to match a <code>ServiceReference</code> object or a
1: 	 * <code>Dictionary</code> object.
1: 	 * 
1: 	 * <p>
1: 	 * If the filter cannot be parsed, an {@link InvalidSyntaxException} will be
1: 	 * thrown with a human readable message where the filter became unparsable.
1: 	 * 
1: 	 * @param filter The filter string.
1: 	 * @return A <code>Filter</code> object encapsulating the filter string.
1: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1: 	 *         invalid filter string that cannot be parsed.
1: 	 * @throws NullPointerException If <code>filter</code> is null.
1: 	 * @throws java.lang.IllegalStateException If this BundleContext is no
1: 	 *         longer valid.
1: 	 * 
1: 	 * @since 1.1
1: 	 * @see "Framework specification for a description of the filter string syntax."
1: 	 * @see FrameworkUtil#createFilter(String)
1: 	 */
1: 	public Filter createFilter(String filter)
1: 			throws InvalidSyntaxException;
1: }
============================================================================