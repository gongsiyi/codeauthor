1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.DependencyDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.DependableFinder;
1:cacb73f: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.sql.depend.Dependent;
1:eac0369: import org.apache.derby.iapi.sql.depend.Provider;
1:eac0369: 
2:eac0369: /**
1:cacb73f:  * DependencyDescriptor represents a persistent dependency between
1:cacb73f:  * SQL objects, such as a TRIGGER being dependent on a TABLE.
1:cacb73f:  * 
1:cacb73f:  * A DependencyDescriptor is stored in SYSDEPENDS as four
1:cacb73f:  * separate columms corresponding to the getters of this class. 
1:cacb73f:  * 
1:cacb73f:  * 
1:eac0369:  */
1:f2fad75: public class DependencyDescriptor extends UniqueTupleDescriptor 
1:eac0369: {
1:eac0369: 	/** public interface for this class is:
1:eac0369: 		<ol>
1:eac0369: 		<li>public DependableFinder getDependentFinder();</li>
1:eac0369: 		<li>public UUID getProviderID();</li>
1:eac0369: 		<li>public DependableFinder getProviderFinder();</li>
1:eac0369: 		</ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// implementation
1:4eece41: 	private final UUID					dependentID;
1:4eece41: 	private final DependableFinder		dependentBloodhound;
1:4eece41: 	private final UUID					providerID;
1:4eece41: 	private final DependableFinder		providerBloodhound;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a DependencyDescriptor
2:eac0369: 	 *
1:eac0369: 	 * @param dependent			The Dependent
1:eac0369: 	 * @param provider			The Provider
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public DependencyDescriptor(
1:eac0369: 			Dependent dependent,
1:eac0369: 			Provider provider
1:eac0369: 			)
1:eac0369: 	{
1:eac0369: 		dependentID = dependent.getObjectID();
1:eac0369: 		dependentBloodhound = dependent.getDependableFinder();
1:eac0369: 		providerID = provider.getObjectID();
1:eac0369: 		providerBloodhound = provider.getDependableFinder();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a DependencyDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @param dependentID			The Dependent ID
1:eac0369: 	 * @param dependentBloodhound	The bloodhound for finding the Dependent
1:eac0369: 	 * @param providerID			The Provider ID
1:eac0369: 	 * @param providerBloodhound	The bloodhound for finding the Provider
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public DependencyDescriptor(
1:eac0369: 			UUID dependentID, DependableFinder dependentBloodhound,
1:eac0369: 			UUID providerID, DependableFinder providerBloodhound
1:eac0369: 			)
1:eac0369: 	{
1:eac0369: 		this.dependentID = dependentID;
1:eac0369: 		this.dependentBloodhound = dependentBloodhound;
1:eac0369: 		this.providerID = providerID;
1:eac0369: 		this.providerBloodhound = providerBloodhound;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// DependencyDescriptor interface
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the dependent's ID for the dependency.
1:eac0369: 	 *
1:eac0369: 	 * @return 	The dependent's ID.
1:eac0369: 	 */
1:eac0369: 	public UUID getUUID()
1:eac0369: 	{
1:eac0369: 		return dependentID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the dependent's type for the dependency.
1:eac0369: 	 *
1:eac0369: 	 * @return The dependent's type.
1:eac0369: 	 */
1:eac0369: 	public DependableFinder getDependentFinder()
1:eac0369: 	{
1:eac0369: 		return dependentBloodhound;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's ID for the dependency.
1:eac0369: 	 *
1:eac0369: 	 * @return 	The provider's ID.
1:eac0369: 	 */
1:eac0369: 	public UUID getProviderID()
1:eac0369: 	{
1:eac0369: 		return providerID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's type for the dependency.
1:eac0369: 	 *
1:eac0369: 	 * @return The provider's type.
1:eac0369: 	 */
1:eac0369: 	public DependableFinder getProviderFinder()
1:eac0369: 	{
1:eac0369: 		return providerBloodhound;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public class DependencyDescriptor extends UniqueTupleDescriptor 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cacb73f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1:  * DependencyDescriptor represents a persistent dependency between
1:  * SQL objects, such as a TRIGGER being dependent on a TABLE.
1:  * 
1:  * A DependencyDescriptor is stored in SYSDEPENDS as four
1:  * separate columms corresponding to the getters of this class. 
1:  * 
1:  * 
commit:4eece41
/////////////////////////////////////////////////////////////////////////
1: 	private final UUID					dependentID;
1: 	private final DependableFinder		dependentBloodhound;
1: 	private final UUID					providerID;
1: 	private final DependableFinder		providerBloodhound;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.DependencyDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
1: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: 
1: /**
0:  * This interface is used to get information from a DependencyDescriptor.
1:  *
0:  * @version 0.1
0:  * @author Jerry Brenner
1:  */
1: 
0: public class DependencyDescriptor extends TupleDescriptor 
0: 	implements UniqueTupleDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/** public interface for this class is:
1: 		<ol>
1: 		<li>public DependableFinder getDependentFinder();</li>
1: 		<li>public UUID getProviderID();</li>
1: 		<li>public DependableFinder getProviderFinder();</li>
1: 		</ol>
1: 	*/
1: 
1: 	// implementation
0: 	private UUID					dependentID;
0: 	private DependableFinder		dependentBloodhound;
0: 	private UUID					providerID;
0: 	private DependableFinder		providerBloodhound;
1: 
1: 	/**
1: 	 * Constructor for a DependencyDescriptor
1: 	 *
1: 	 * @param dependent			The Dependent
1: 	 * @param provider			The Provider
1: 	 */
1: 
1: 	public DependencyDescriptor(
1: 			Dependent dependent,
1: 			Provider provider
1: 			)
1: 	{
1: 		dependentID = dependent.getObjectID();
1: 		dependentBloodhound = dependent.getDependableFinder();
1: 		providerID = provider.getObjectID();
1: 		providerBloodhound = provider.getDependableFinder();
1: 	}
1: 
1: 	/**
1: 	 * Constructor for a DependencyDescriptor
1: 	 *
1: 	 * @param dependentID			The Dependent ID
1: 	 * @param dependentBloodhound	The bloodhound for finding the Dependent
1: 	 * @param providerID			The Provider ID
1: 	 * @param providerBloodhound	The bloodhound for finding the Provider
1: 	 */
1: 
1: 	public DependencyDescriptor(
1: 			UUID dependentID, DependableFinder dependentBloodhound,
1: 			UUID providerID, DependableFinder providerBloodhound
1: 			)
1: 	{
1: 		this.dependentID = dependentID;
1: 		this.dependentBloodhound = dependentBloodhound;
1: 		this.providerID = providerID;
1: 		this.providerBloodhound = providerBloodhound;
1: 	}
1: 
1: 	// DependencyDescriptor interface
1: 
1: 	/**
1: 	 * Get the dependent's ID for the dependency.
1: 	 *
1: 	 * @return 	The dependent's ID.
1: 	 */
1: 	public UUID getUUID()
1: 	{
1: 		return dependentID;
1: 	}
1: 
1: 	/**
1: 	 * Get the dependent's type for the dependency.
1: 	 *
1: 	 * @return The dependent's type.
1: 	 */
1: 	public DependableFinder getDependentFinder()
1: 	{
1: 		return dependentBloodhound;
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's ID for the dependency.
1: 	 *
1: 	 * @return 	The provider's ID.
1: 	 */
1: 	public UUID getProviderID()
1: 	{
1: 		return providerID;
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's type for the dependency.
1: 	 *
1: 	 * @return The provider's type.
1: 	 */
1: 	public DependableFinder getProviderFinder()
1: 	{
1: 		return providerBloodhound;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: 
0: /**
0:  * This interface is used to get information from a DependencyDescriptor.
0:  *
0:  * @version 0.1
0:  * @author Jerry Brenner
0:  */
0: 
0: public class DependencyDescriptor extends TupleDescriptor 
0: 	implements UniqueTupleDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/** public interface for this class is:
0: 		<ol>
0: 		<li>public DependableFinder getDependentFinder();</li>
0: 		<li>public UUID getProviderID();</li>
0: 		<li>public DependableFinder getProviderFinder();</li>
0: 		</ol>
0: 	*/
0: 
0: 	// implementation
0: 	private UUID					dependentID;
0: 	private DependableFinder		dependentBloodhound;
0: 	private UUID					providerID;
0: 	private DependableFinder		providerBloodhound;
0: 
0: 	/**
0: 	 * Constructor for a DependencyDescriptor
0: 	 *
0: 	 * @param dependent			The Dependent
0: 	 * @param provider			The Provider
0: 	 */
0: 
0: 	public DependencyDescriptor(
0: 			Dependent dependent,
0: 			Provider provider
0: 			)
0: 	{
0: 		dependentID = dependent.getObjectID();
0: 		dependentBloodhound = dependent.getDependableFinder();
0: 		providerID = provider.getObjectID();
0: 		providerBloodhound = provider.getDependableFinder();
0: 	}
0: 
0: 	/**
0: 	 * Constructor for a DependencyDescriptor
0: 	 *
0: 	 * @param dependentID			The Dependent ID
0: 	 * @param dependentBloodhound	The bloodhound for finding the Dependent
0: 	 * @param providerID			The Provider ID
0: 	 * @param providerBloodhound	The bloodhound for finding the Provider
0: 	 */
0: 
0: 	public DependencyDescriptor(
0: 			UUID dependentID, DependableFinder dependentBloodhound,
0: 			UUID providerID, DependableFinder providerBloodhound
0: 			)
0: 	{
0: 		this.dependentID = dependentID;
0: 		this.dependentBloodhound = dependentBloodhound;
0: 		this.providerID = providerID;
0: 		this.providerBloodhound = providerBloodhound;
0: 	}
0: 
0: 	// DependencyDescriptor interface
0: 
0: 	/**
0: 	 * Get the dependent's ID for the dependency.
0: 	 *
0: 	 * @return 	The dependent's ID.
0: 	 */
0: 	public UUID getUUID()
0: 	{
0: 		return dependentID;
0: 	}
0: 
0: 	/**
0: 	 * Get the dependent's type for the dependency.
0: 	 *
0: 	 * @return The dependent's type.
0: 	 */
0: 	public DependableFinder getDependentFinder()
0: 	{
0: 		return dependentBloodhound;
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's ID for the dependency.
0: 	 *
0: 	 * @return 	The provider's ID.
0: 	 */
0: 	public UUID getProviderID()
0: 	{
0: 		return providerID;
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's type for the dependency.
0: 	 *
0: 	 * @return The provider's type.
0: 	 */
0: 	public DependableFinder getProviderFinder()
0: 	{
0: 		return providerBloodhound;
0: 	}
0: }
============================================================================