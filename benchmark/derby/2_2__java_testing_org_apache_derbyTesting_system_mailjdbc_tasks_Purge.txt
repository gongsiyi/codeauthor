1:9bbe2e4: /*
1:9bbe2e4:  * 
1:9bbe2e4:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.tasks.Purge
1:9bbe2e4:  * 
1:9bbe2e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bbe2e4:  * contributor license agreements. See the NOTICE file distributed with this
1:9bbe2e4:  * work for additional information regarding copyright ownership. The ASF
1:9bbe2e4:  * licenses this file to You under the Apache License, Version 2.0 (the
1:9bbe2e4:  * "License"); you may not use this file except in compliance with the License.
1:9bbe2e4:  * You may obtain a copy of the License at
1:9bbe2e4:  * 
1:9bbe2e4:  * http://www.apache.org/licenses/LICENSE-2.0
1:9bbe2e4:  * 
1:9bbe2e4:  * Unless required by applicable law or agreed to in writing, software
1:9bbe2e4:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:9bbe2e4:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:9bbe2e4:  * License for the specific language governing permissions and limitations under
1:9bbe2e4:  * the License.
1:9bbe2e4:  *  
1:9bbe2e4:  */
1:9bbe2e4: package org.apache.derbyTesting.system.mailjdbc.tasks;
1:9bbe2e4: /**
1:9bbe2e4:  * This class is used to delete and mails which are older than a day
1:9bbe2e4:  */
2:9bbe2e4: 
1:9bbe2e4: import java.sql.Connection;
1:9bbe2e4: 
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.utils.DbTasks;
1:9bbe2e4: import org.apache.derbyTesting.system.mailjdbc.utils.LogFile;
1:9bbe2e4: 
1:9bbe2e4: public class Purge extends Thread {
1:9bbe2e4: 	//This thread behaves as a backend service which will mionitor the expiry
1:9bbe2e4: 	// date and size of the database
1:9bbe2e4: 	//and deletes them.
1:9bbe2e4: 	private DbTasks dbtasks = new DbTasks();
1:9bbe2e4: 
1:58a99b7: 	private Connection conn = null;
1:58a99b7: 	public Purge(String name) throws Exception{
1:9bbe2e4: 		//Sets the thread name
1:9bbe2e4: 		setName(name);
1:58a99b7: 		conn = DbTasks.getConnection("PURGE", "Purge");
1:9bbe2e4: 	}
1:9bbe2e4: 
1:9bbe2e4: 	public void run() {
1:9bbe2e4: 		try {
1:9bbe2e4: 			while (true) {
1:9bbe2e4: 				//Wait for some activity to happen before deleting the mails,
1:9bbe2e4: 				// so sleep for sometime
1:a216dfd: 				Thread.sleep(250000);
1:9bbe2e4: 				//Deleting mails
1:9bbe2e4: 				purgeFromInbox(conn);
1:9bbe2e4: 				//Gets the size of the database
1:9bbe2e4: 				DoDbSizeCheck();
1:a216dfd: 				//Try to avoid deadlock with Refresh thread delete statement
1:a216dfd: 				int sleep_time = (int) 200000;
1:9bbe2e4: 				Thread.sleep(sleep_time);
1:9bbe2e4: 			}
1:9bbe2e4: 		} catch (Exception e) {
1:9bbe2e4: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1:9bbe2e4: 					+ "Error while sleeping the thread in Purge: "
1:9bbe2e4: 					+ e.getMessage());
1:9bbe2e4: 			e.printStackTrace();
1:9bbe2e4: 		}
1:9bbe2e4: 	}
1:9bbe2e4: 
1:58a99b7: 	public void purgeFromInbox(Connection conn) throws Exception{
1:9bbe2e4: 		dbtasks.deleteMailByExp(conn, this.getName());
1:9bbe2e4: 	}
1:9bbe2e4: 
1:58a99b7: 	public void DoDbSizeCheck() throws Exception{
1:9bbe2e4: 		dbtasks.checkDbSize(conn, this.getName());
1:9bbe2e4: 	}
1:9bbe2e4: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a216dfd
/////////////////////////////////////////////////////////////////////////
1: 				Thread.sleep(250000);
1: 				//Try to avoid deadlock with Refresh thread delete statement
1: 				int sleep_time = (int) 200000;
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:58a99b7
/////////////////////////////////////////////////////////////////////////
1: 	private Connection conn = null;
1: 	public Purge(String name) throws Exception{
1: 		conn = DbTasks.getConnection("PURGE", "Purge");
/////////////////////////////////////////////////////////////////////////
1: 	public void purgeFromInbox(Connection conn) throws Exception{
1: 	public void DoDbSizeCheck() throws Exception{
commit:9bbe2e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.system.mailjdbc.tasks.Purge
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  *  
1:  */
1: package org.apache.derbyTesting.system.mailjdbc.tasks;
1: /**
1:  * This class is used to delete and mails which are older than a day
1:  */
1: 
1: import java.sql.Connection;
1: 
1: import org.apache.derbyTesting.system.mailjdbc.MailJdbc;
1: import org.apache.derbyTesting.system.mailjdbc.utils.DbTasks;
1: import org.apache.derbyTesting.system.mailjdbc.utils.LogFile;
1: 
1: public class Purge extends Thread {
1: 	//This thread behaves as a backend service which will mionitor the expiry
1: 	// date and size of the database
1: 	//and deletes them.
1: 	private DbTasks dbtasks = new DbTasks();
1: 
0: 	private Connection conn = DbTasks.getConnection("PURGE", "Purge");
1: 
0: 	public Purge(String name) {
1: 		//Sets the thread name
1: 		setName(name);
1: 	}
1: 
1: 	public void run() {
1: 		try {
1: 			while (true) {
1: 				//Wait for some activity to happen before deleting the mails,
1: 				// so sleep for sometime
0: 				Thread.sleep(120000);
1: 				//Deleting mails
1: 				purgeFromInbox(conn);
1: 				//Gets the size of the database
1: 				DoDbSizeCheck();
0: 				int sleep_time = (int) (Math.random() * 15000);
1: 				Thread.sleep(sleep_time);
1: 			}
1: 		} catch (Exception e) {
1: 			MailJdbc.logAct.logMsg(LogFile.ERROR
1: 					+ "Error while sleeping the thread in Purge: "
1: 					+ e.getMessage());
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 
0: 	public void purgeFromInbox(Connection conn) {
1: 		dbtasks.deleteMailByExp(conn, this.getName());
1: 	}
1: 
0: 	public void DoDbSizeCheck() {
1: 		dbtasks.checkDbSize(conn, this.getName());
1: 	}
1: }
============================================================================