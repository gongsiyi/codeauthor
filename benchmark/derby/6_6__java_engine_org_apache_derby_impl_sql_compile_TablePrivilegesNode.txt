1:b7730e4: /*
8:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.compile.TablePrivilegesNode
1:b7730e4: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package	org.apache.derby.impl.sql.compile;
1:b7730e4: 
1:3bb140c: import java.util.ArrayList;
1:3bb140c: import java.util.List;
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7e13a9: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:b7730e4: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:3bb140c: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:17f7626: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:17f7626: import org.apache.derby.iapi.sql.depend.Provider;
1:17f7626: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1:3bb140c: import org.apache.derby.impl.sql.execute.PrivilegeInfo;
1:3bb140c: import org.apache.derby.impl.sql.execute.TablePrivilegeInfo;
1:17f7626: 
1:b7730e4: /**
1:b7730e4:  * This class represents a set of privileges on one table.
1:b7730e4:  */
1:3bb140c: class TablePrivilegesNode extends QueryTreeNode
4:b7730e4: {
1:b7730e4: 	private boolean[] actionAllowed = new boolean[ TablePrivilegeInfo.ACTION_COUNT];
1:b7730e4: 	private ResultColumnList[] columnLists = new ResultColumnList[ TablePrivilegeInfo.ACTION_COUNT];
1:b7730e4: 	private FormatableBitSet[] columnBitSets = new FormatableBitSet[ TablePrivilegeInfo.ACTION_COUNT];
1:17f7626: 	private TableDescriptor td;  
1:274c5ba: 	private List<Provider> descriptorList; 
1:3bb140c: 
1:3bb140c:     TablePrivilegesNode(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:3bb140c: 
1:b7730e4: 	/**
1:b7730e4: 	 * Add all actions
1:b7730e4: 	 */
1:3bb140c:     void addAll()
1:b7730e4: 	{
1:b7730e4: 		for( int i = 0; i < TablePrivilegeInfo.ACTION_COUNT; i++)
1:b7730e4: 		{
1:b7730e4: 			actionAllowed[i] = true;
1:b7730e4: 			columnLists[i] = null;
5:b7730e4: 		}
1:b7730e4: 	} // end of addAll
1:17f7626: 
1:b7730e4: 	/**
1:b7730e4: 	 * Add one action to the privileges for this table
1:b7730e4: 	 *
1:b7730e4: 	 * @param action The action type
1:b7730e4: 	 * @param privilegeColumnList The set of privilege columns. Null for all columns
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException standard error policy.
1:b7730e4: 	 */
1:3bb140c:     void addAction( int action, ResultColumnList privilegeColumnList)
1:17f7626: 	{
1:b7730e4: 		actionAllowed[ action] = true;
1:b7730e4: 		if( privilegeColumnList == null)
1:b7730e4: 			columnLists[ action] = null;
1:b7730e4: 		else if( columnLists[ action] == null)
1:b7730e4: 			columnLists[ action] = privilegeColumnList;
1:b7730e4: 		else
1:b7730e4: 			columnLists[ action].appendResultColumns( privilegeColumnList, false);
1:b7730e4: 	} // end of addAction
1:17f7626: 
1:b7730e4: 	/**
1:b7730e4: 	 * Bind.
1:b7730e4: 	 *
1:b7730e4: 	 * @param td The table descriptor
1:17f7626: 	 * @param isGrant grant if true; revoke if false
1:b7730e4: 	 */
1:3bb140c:     void bind( TableDescriptor td, boolean isGrant) throws StandardException
1:17f7626: 	{
1:b7730e4: 		this.td = td;
1:17f7626: 			
1:b7730e4: 		for( int action = 0; action < TablePrivilegeInfo.ACTION_COUNT; action++)
1:17f7626: 		{
1:b7730e4: 			if( columnLists[ action] != null)
1:b7730e4: 				columnBitSets[action] = columnLists[ action].bindResultColumnsByName( td, (DMLStatementNode) null);
1:b7e13a9: 
1:b7e13a9: 			// Prevent granting non-SELECT privileges to views
1:b7e13a9: 			if (td.getTableType() == TableDescriptor.VIEW_TYPE && action != TablePrivilegeInfo.SELECT_ACTION)
1:b7e13a9: 				if (actionAllowed[action])
1:b7e13a9: 					throw StandardException.newException(SQLState.AUTH_GRANT_REVOKE_NOT_ALLOWED,
1:b7e13a9: 									td.getQualifiedName());
1:17f7626: 		}
1:17f7626: 		
1:17f7626: 		if (isGrant && td.getTableType() == TableDescriptor.VIEW_TYPE)
1:17f7626: 		{
1:17f7626: 			bindPrivilegesForView(td);
1:17f7626: 		}
1:17f7626: 	}
1:b7730e4: 	
1:b7730e4: 	/**
1:b7730e4: 	 * @return PrivilegeInfo for this node
1:b7730e4: 	 */
1:42544c4:     PrivilegeInfo makePrivilegeInfo()
1:b7730e4: 	{
1:17f7626: 		return new TablePrivilegeInfo( td, actionAllowed, columnBitSets, 
1:17f7626: 				descriptorList);
1:17f7626: 	}
1:17f7626: 	
1:17f7626: 	/**
1:17f7626: 	 *  Retrieve all the underlying stored dependencies such as table(s), 
1:17f7626: 	 *  view(s) and routine(s) descriptors which the view depends on.
1:17f7626: 	 *  This information is then passed to the runtime to determine if
1:17f7626: 	 *  the privilege is grantable to the grantees by this grantor at
1:17f7626: 	 *  execution time.
1:17f7626: 	 *  
1:17f7626: 	 *  Go through the providers regardless who the grantor is since 
1:17f7626: 	 *  the statement cache may be in effect.
1:17f7626: 	 *  
1:17f7626: 	 * @param td the TableDescriptor to check
1:17f7626: 	 *
1:17f7626: 	 * @exception StandardException standard error policy.
1:17f7626: 	 */
1:17f7626: 	private void bindPrivilegesForView ( TableDescriptor td) 
1:17f7626: 		throws StandardException
1:17f7626: 	{
1:17f7626: 		LanguageConnectionContext lcc = getLanguageConnectionContext();
1:17f7626: 		DataDictionary dd = lcc.getDataDictionary();
1:17f7626: 		ViewDescriptor vd = dd.getViewDescriptor(td);
1:17f7626: 		DependencyManager dm = dd.getDependencyManager();
1:17f7626: 		ProviderInfo[] pis = dm.getPersistentProviderInfos(vd);
1:274c5ba: 		this.descriptorList = new ArrayList<Provider>();
1:17f7626: 					
1:17f7626: 		int siz = pis.length;
1:17f7626: 		for (int i=0; i < siz; i++) 
1:17f7626: 		{
1:2bb479f: 				Provider provider = (Provider) pis[i].getDependableFinder().getDependable(dd, pis[i].getObjectId());
1:17f7626: 							
1:17f7626: 				if (provider instanceof TableDescriptor || 
1:17f7626: 					provider instanceof ViewDescriptor ||
1:17f7626: 					provider instanceof AliasDescriptor)
1:17f7626: 				{
1:17f7626: 					descriptorList.add(provider);
1:2bb479f: 				}	   
1:17f7626: 		}
1:17f7626: 	}
1:17f7626: 	
1:17f7626: }
1:17f7626: 	
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.impl.sql.execute.PrivilegeInfo;
1: import org.apache.derby.impl.sql.execute.TablePrivilegeInfo;
1: class TablePrivilegesNode extends QueryTreeNode
1: 
1:     TablePrivilegesNode(ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.TABLE_PRIVILEGES_NODE);
1:     }
1: 
1:     void addAll()
/////////////////////////////////////////////////////////////////////////
1:     void addAction( int action, ResultColumnList privilegeColumnList)
/////////////////////////////////////////////////////////////////////////
1:     void bind( TableDescriptor td, boolean isGrant) throws StandardException
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:274c5ba
/////////////////////////////////////////////////////////////////////////
1: 	private List<Provider> descriptorList; 
/////////////////////////////////////////////////////////////////////////
1: 		this.descriptorList = new ArrayList<Provider>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:42544c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     PrivilegeInfo makePrivilegeInfo()
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2bb479f
/////////////////////////////////////////////////////////////////////////
1: 				Provider provider = (Provider) pis[i].getDependableFinder().getDependable(dd, pis[i].getObjectId());
1: 				}	   
commit:17f7626
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.iapi.sql.depend.ProviderInfo;
0: import org.apache.derby.iapi.sql.depend.ProviderList;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private TableDescriptor td;  
0: 	private List descriptorList; 
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	 * @param isGrant grant if true; revoke if false
0: 	public void bind( TableDescriptor td, boolean isGrant) throws StandardException
1: 			
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		if (isGrant && td.getTableType() == TableDescriptor.VIEW_TYPE)
1: 		{
1: 			bindPrivilegesForView(td);
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		return new TablePrivilegeInfo( td, actionAllowed, columnBitSets, 
1: 				descriptorList);
1: 	
1: 	/**
1: 	 *  Retrieve all the underlying stored dependencies such as table(s), 
1: 	 *  view(s) and routine(s) descriptors which the view depends on.
1: 	 *  This information is then passed to the runtime to determine if
1: 	 *  the privilege is grantable to the grantees by this grantor at
1: 	 *  execution time.
1: 	 *  
1: 	 *  Go through the providers regardless who the grantor is since 
1: 	 *  the statement cache may be in effect.
1: 	 *  
1: 	 * @param td the TableDescriptor to check
1: 	 *
1: 	 * @exception StandardException standard error policy.
1: 	 */
1: 	private void bindPrivilegesForView ( TableDescriptor td) 
1: 		throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc = getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		ViewDescriptor vd = dd.getViewDescriptor(td);
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		ProviderInfo[] pis = dm.getPersistentProviderInfos(vd);
0: 		this.descriptorList = new ArrayList();
1: 					
1: 		int siz = pis.length;
1: 		for (int i=0; i < siz; i++) 
1: 		{
0: 			try 
1: 			{
0: 				Provider provider = (Provider) pis[i].getDependableFinder().getDependable(pis[i].getObjectId());
0: 				if (provider == null)  
1: 				{
0: 					throw StandardException.newException(
0: 							SQLState.LANG_OBJECT_NOT_FOUND, 
0: 							"OBJECT", 
0: 							pis[i].getObjectId());
1: 				}
1: 							
1: 				if (provider instanceof TableDescriptor || 
1: 					provider instanceof ViewDescriptor ||
1: 					provider instanceof AliasDescriptor)
1: 				{
1: 					descriptorList.add(provider);
1: 				}
1: 			}
0: 			catch(java.sql.SQLException ex)
1: 			{
0: 				throw StandardException.plainWrapException(ex);
1: 			}		   
1: 		}
1: 	}
1: 	
1: 	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7e13a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: 
1: 			// Prevent granting non-SELECT privileges to views
1: 			if (td.getTableType() == TableDescriptor.VIEW_TYPE && action != TablePrivilegeInfo.SELECT_ACTION)
1: 				if (actionAllowed[action])
1: 					throw StandardException.newException(SQLState.AUTH_GRANT_REVOKE_NOT_ALLOWED,
1: 									td.getQualifiedName());
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.TablePrivilegesNode
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.execute.PrivilegeInfo;
0: import org.apache.derby.impl.sql.execute.TablePrivilegeInfo;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: /**
1:  * This class represents a set of privileges on one table.
1:  */
0: public class TablePrivilegesNode extends QueryTreeNode
1: {
1: 	private boolean[] actionAllowed = new boolean[ TablePrivilegeInfo.ACTION_COUNT];
1: 	private ResultColumnList[] columnLists = new ResultColumnList[ TablePrivilegeInfo.ACTION_COUNT];
1: 	private FormatableBitSet[] columnBitSets = new FormatableBitSet[ TablePrivilegeInfo.ACTION_COUNT];
0: 	private TableDescriptor td;
1: 
1: 	/**
1: 	 * Add all actions
1: 	 */
0: 	public void addAll()
1: 	{
1: 		for( int i = 0; i < TablePrivilegeInfo.ACTION_COUNT; i++)
1: 		{
1: 			actionAllowed[i] = true;
1: 			columnLists[i] = null;
1: 		}
1: 	} // end of addAll
1: 
1: 	/**
1: 	 * Add one action to the privileges for this table
1: 	 *
1: 	 * @param action The action type
1: 	 * @param privilegeColumnList The set of privilege columns. Null for all columns
1: 	 *
1: 	 * @exception StandardException standard error policy.
1: 	 */
0: 	public void addAction( int action, ResultColumnList privilegeColumnList)
1: 	{
1: 		actionAllowed[ action] = true;
1: 		if( privilegeColumnList == null)
1: 			columnLists[ action] = null;
1: 		else if( columnLists[ action] == null)
1: 			columnLists[ action] = privilegeColumnList;
1: 		else
1: 			columnLists[ action].appendResultColumns( privilegeColumnList, false);
1: 	} // end of addAction
1: 
1: 	/**
1: 	 * Bind.
1: 	 *
1: 	 * @param td The table descriptor
1: 	 */
0: 	public void bind( TableDescriptor td) throws StandardException
1: 	{
1: 		this.td = td;
1: 		
1: 		for( int action = 0; action < TablePrivilegeInfo.ACTION_COUNT; action++)
1: 		{
1: 			if( columnLists[ action] != null)
1: 				columnBitSets[action] = columnLists[ action].bindResultColumnsByName( td, (DMLStatementNode) null);
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * @return PrivilegeInfo for this node
1: 	 */
0: 	public PrivilegeInfo makePrivilegeInfo()
1: 	{
0: 		return new TablePrivilegeInfo( td, actionAllowed, columnBitSets);
1: 	}
1: }
============================================================================