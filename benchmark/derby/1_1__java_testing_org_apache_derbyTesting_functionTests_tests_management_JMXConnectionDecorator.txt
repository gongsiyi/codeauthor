1:498f26e: /*
1:498f26e: 
1:498f26e:  Derby - Class org.apache.derbyTesting.functionTests.tests.management.JMXConnectionGetter
1:498f26e: 
1:498f26e:  Licensed to the Apache Software Foundation (ASF) under one or more
1:498f26e:  contributor license agreements.  See the NOTICE file distributed with
1:498f26e:  this work for additional information regarding copyright ownership.
1:498f26e:  The ASF licenses this file to you under the Apache License, Version 2.0
1:498f26e:  (the "License"); you may not use this file except in compliance with
1:498f26e:  the License.  You may obtain a copy of the License at
1:498f26e: 
1:498f26e:  http://www.apache.org/licenses/LICENSE-2.0
1:498f26e: 
1:498f26e:  Unless required by applicable law or agreed to in writing, software
1:498f26e:  distributed under the License is distributed on an "AS IS" BASIS,
1:498f26e:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:498f26e:  See the License for the specific language governing permissions and
1:498f26e:  limitations under the License.
1:498f26e: 
1:498f26e:  */
1:498f26e: 
1:498f26e: package org.apache.derbyTesting.functionTests.tests.management;
1:498f26e: 
1:498f26e: import java.net.MalformedURLException;
1:498f26e: 
1:498f26e: import javax.management.remote.JMXServiceURL;
1:498f26e: 
1:498f26e: import junit.framework.Test;
1:498f26e: 
1:498f26e: import org.apache.derbyTesting.junit.BaseTestSetup;
1:498f26e: import org.apache.derbyTesting.junit.TestConfiguration;
1:498f26e: 
1:498f26e: /**
1:498f26e:  * Interface for MBeanTest to get a MBeanServerConnection connection
1:498f26e:  * from. A decorator will setup mbeanServerConnector to point to
1:498f26e:  * an implementation of this class to obtain JMX connections.
1:498f26e:  */
1:498f26e: class JMXConnectionDecorator extends BaseTestSetup {
1:498f26e:     
1:498f26e:     /**
1:498f26e:      * Decorate a test so to use JMX connections from the passed in url. 
1:498f26e:      */
1:498f26e:     static Test remoteNoSecurity(Test test)
1:498f26e:     {
1:498f26e:         return new JMXConnectionDecorator(test, true);
1:498f26e:     }
1:498f26e:     
1:ffd9cf9:     /**
1:ffd9cf9:      * Decorate a test to use JMX connections directly from the platform
1:ffd9cf9:      * MBean Server.
1:ffd9cf9:      */
1:ffd9cf9:     static Test platformMBeanServer(Test test)
1:ffd9cf9:     {
1:ffd9cf9:         return new JMXConnectionDecorator(test, false);
1:ffd9cf9:     }
1:ffd9cf9:     
1:498f26e:     // ignored for now
1:498f26e:     private final boolean remote;
1:498f26e:     private JMXConnectionGetter oldGetter;
1:498f26e: 
1:498f26e:     private JMXConnectionDecorator(Test test, boolean remote) {
1:498f26e:         super(test);
1:498f26e:         this.remote = remote;
1:498f26e:     }
1:498f26e:     
1:498f26e:     @Override
1:498f26e:     protected void setUp() throws Exception {
1:498f26e:         super.setUp();
1:498f26e:         oldGetter =
1:498f26e:             JMXConnectionGetter.mbeanServerConnector.get();
1:ffd9cf9:         
1:ffd9cf9:         JMXConnectionGetter getter = remote ?
1:ffd9cf9:                 new RemoteConnectionGetter(getJmxUrl()) :
1:ffd9cf9:                 new PlatformConnectionGetter();
1:ffd9cf9:                 
1:ffd9cf9:         JMXConnectionGetter.mbeanServerConnector.set(getter);
1:498f26e:     }
1:498f26e:     
1:498f26e:     @Override
1:498f26e:     protected void tearDown() throws Exception {
1:498f26e:         super.tearDown();
1:498f26e:         JMXConnectionGetter.mbeanServerConnector.set(oldGetter);
1:498f26e:         oldGetter = null;
1:498f26e:     }
1:498f26e:     
1:498f26e:     /**
1:498f26e:      * Creates a URL for connecting to the platform MBean server on the host
1:498f26e:      * specified by the network server hostname of this test configuration.
1:498f26e:      * The JMX port number used is also retreived from the test configuration.
1:498f26e:      * @return a service URL for connecting to the platform MBean server
1:498f26e:      * @throws MalformedURLException if the URL is malformed
1:498f26e:      */
1:498f26e:     private JMXServiceURL getJmxUrl() throws MalformedURLException {
1:498f26e:         
1:498f26e:         // NOTE: This hostname is only valid in a client/server configuration
1:498f26e:         String hostname = TestConfiguration.getCurrent().getHostName();
1:498f26e:         //String hostname = TestConfiguration.DEFAULT_HOSTNAME; // for embedded?
1:498f26e:         int jmxPort = TestConfiguration.getCurrent().getJmxPort();
1:498f26e:                 
1:498f26e:         /* "jmxrmi" is the name of the RMI server connector of the platform
1:498f26e:          * MBean server, which is used by Derby */
1:498f26e:         JMXServiceURL url = new JMXServiceURL(
1:498f26e:                 "service:jmx:rmi:///jndi/rmi://" 
1:498f26e:                     + hostname
1:498f26e:                     + ":" + jmxPort + "/jmxrmi");
1:498f26e:         
1:498f26e:         return url;
1:498f26e:     }
1:498f26e: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ffd9cf9
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Decorate a test to use JMX connections directly from the platform
1:      * MBean Server.
1:      */
1:     static Test platformMBeanServer(Test test)
1:     {
1:         return new JMXConnectionDecorator(test, false);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         
1:         JMXConnectionGetter getter = remote ?
1:                 new RemoteConnectionGetter(getJmxUrl()) :
1:                 new PlatformConnectionGetter();
1:                 
1:         JMXConnectionGetter.mbeanServerConnector.set(getter);
commit:498f26e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.management.JMXConnectionGetter
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to you under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
1: import java.net.MalformedURLException;
1: 
1: import javax.management.remote.JMXServiceURL;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Interface for MBeanTest to get a MBeanServerConnection connection
1:  * from. A decorator will setup mbeanServerConnector to point to
1:  * an implementation of this class to obtain JMX connections.
1:  */
1: class JMXConnectionDecorator extends BaseTestSetup {
1:     
1:     /**
1:      * Decorate a test so to use JMX connections from the passed in url. 
1:      */
1:     static Test remoteNoSecurity(Test test)
1:     {
1:         return new JMXConnectionDecorator(test, true);
1:     }
1:     
1:     // ignored for now
1:     private final boolean remote;
1:     private JMXConnectionGetter oldGetter;
1: 
1:     private JMXConnectionDecorator(Test test, boolean remote) {
1:         super(test);
1:         this.remote = remote;
1:     }
1:     
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         oldGetter =
1:             JMXConnectionGetter.mbeanServerConnector.get();
0:         JMXConnectionGetter.mbeanServerConnector.set(
0:                 new RemoteConnectionGetter( getJmxUrl()));
1:     }
1:     
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         JMXConnectionGetter.mbeanServerConnector.set(oldGetter);
1:         oldGetter = null;
1:     }
1:     
1:     /**
1:      * Creates a URL for connecting to the platform MBean server on the host
1:      * specified by the network server hostname of this test configuration.
1:      * The JMX port number used is also retreived from the test configuration.
1:      * @return a service URL for connecting to the platform MBean server
1:      * @throws MalformedURLException if the URL is malformed
1:      */
1:     private JMXServiceURL getJmxUrl() throws MalformedURLException {
1:         
1:         // NOTE: This hostname is only valid in a client/server configuration
1:         String hostname = TestConfiguration.getCurrent().getHostName();
1:         //String hostname = TestConfiguration.DEFAULT_HOSTNAME; // for embedded?
1:         int jmxPort = TestConfiguration.getCurrent().getJmxPort();
1:                 
1:         /* "jmxrmi" is the name of the RMI server connector of the platform
1:          * MBean server, which is used by Derby */
1:         JMXServiceURL url = new JMXServiceURL(
1:                 "service:jmx:rmi:///jndi/rmi://" 
1:                     + hostname
1:                     + ":" + jmxPort + "/jmxrmi");
1:         
1:         return url;
1:     }
1: }
============================================================================