1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.daemon.DaemonFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.daemon;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Daemon Factory can create new DaemonService, which runs on seperate
1:eac0369: 	background threads.  One can use these DaemonService to handle background
1:eac0369: 	clean up task by implementing Serviceable and subscribing to a DaemonService.
1:eac0369: 
1:eac0369: 	A DaemonService is a background worker thread which does asynchronous I/O and
1:eac0369: 	general clean up.  It should not be used as a general worker thread for
1:eac0369: 	parallel execution.  A DaemonService can be subscribe to by many Serviceable
1:eac0369: 	objects and a daemon will call that object's performWork from time to
1:eac0369: 	time.  These performWork method should be well behaved - in other words,
1:eac0369: 	it should not take too long or hog too many resources or deadlock with 
1:eac0369: 	anyone else.  And it cannot (should not) error out.
1:eac0369: 
1:eac0369: 	The best way to use a daemon is to have an existing DaemonService and subscribe to it.
1:eac0369: 	If you can't find an existing one, then make one thusly:
1:eac0369: 
1:eac0369: 	DaemonService daemon = DaemonFactory.createNewDaemon();
1:eac0369: 
1:eac0369: 	After you have a daemon, you can subscribe to it by
1:eac0369: 	int myClientNumber = daemon.subscribe(serviceableObject);
1:eac0369: 
1:eac0369: 	and ask it to run performWork for you ASAP by
1:eac0369: 	daemon.serviceNow(myClientNumber);
1:eac0369: 
1:eac0369: 	Or, for one time service, you can enqueue a Serviceable Object by
1:eac0369: 	daemon.enqueue(serviceableObject, true);  - urgent service
1:eac0369: 	daemon.enqueue(serviceableObject, false); - non-urgent service
1:eac0369: 
1:eac0369: 	@see DaemonService
1:eac0369: 	@see Serviceable
1:eac0369: */
1:eac0369: public interface DaemonFactory 
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 		Create a new DaemonService with the default daemon timer delay.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:eac0369: 	public DaemonService createNewDaemon(String name) throws StandardException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.daemon.DaemonFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.daemon;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	Daemon Factory can create new DaemonService, which runs on seperate
1: 	background threads.  One can use these DaemonService to handle background
1: 	clean up task by implementing Serviceable and subscribing to a DaemonService.
1: 
1: 	A DaemonService is a background worker thread which does asynchronous I/O and
1: 	general clean up.  It should not be used as a general worker thread for
1: 	parallel execution.  A DaemonService can be subscribe to by many Serviceable
1: 	objects and a daemon will call that object's performWork from time to
1: 	time.  These performWork method should be well behaved - in other words,
1: 	it should not take too long or hog too many resources or deadlock with 
1: 	anyone else.  And it cannot (should not) error out.
1: 
1: 	The best way to use a daemon is to have an existing DaemonService and subscribe to it.
1: 	If you can't find an existing one, then make one thusly:
1: 
1: 	DaemonService daemon = DaemonFactory.createNewDaemon();
1: 
1: 	After you have a daemon, you can subscribe to it by
1: 	int myClientNumber = daemon.subscribe(serviceableObject);
1: 
1: 	and ask it to run performWork for you ASAP by
1: 	daemon.serviceNow(myClientNumber);
1: 
1: 	Or, for one time service, you can enqueue a Serviceable Object by
1: 	daemon.enqueue(serviceableObject, true);  - urgent service
1: 	daemon.enqueue(serviceableObject, false); - non-urgent service
1: 
1: 	@see DaemonService
1: 	@see Serviceable
1: */
1: public interface DaemonFactory 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 		Create a new DaemonService with the default daemon timer delay.
1: 
0: 		@exception StandardException Standard cloudscape error policy
1: 	 */
1: 	public DaemonService createNewDaemon(String name) throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.daemon;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	Daemon Factory can create new DaemonService, which runs on seperate
0: 	background threads.  One can use these DaemonService to handle background
0: 	clean up task by implementing Serviceable and subscribing to a DaemonService.
0: 
0: 	A DaemonService is a background worker thread which does asynchronous I/O and
0: 	general clean up.  It should not be used as a general worker thread for
0: 	parallel execution.  A DaemonService can be subscribe to by many Serviceable
0: 	objects and a daemon will call that object's performWork from time to
0: 	time.  These performWork method should be well behaved - in other words,
0: 	it should not take too long or hog too many resources or deadlock with 
0: 	anyone else.  And it cannot (should not) error out.
0: 
0: 	The best way to use a daemon is to have an existing DaemonService and subscribe to it.
0: 	If you can't find an existing one, then make one thusly:
0: 
0: 	DaemonService daemon = DaemonFactory.createNewDaemon();
0: 
0: 	After you have a daemon, you can subscribe to it by
0: 	int myClientNumber = daemon.subscribe(serviceableObject);
0: 
0: 	and ask it to run performWork for you ASAP by
0: 	daemon.serviceNow(myClientNumber);
0: 
0: 	Or, for one time service, you can enqueue a Serviceable Object by
0: 	daemon.enqueue(serviceableObject, true);  - urgent service
0: 	daemon.enqueue(serviceableObject, false); - non-urgent service
0: 
0: 	@see DaemonService
0: 	@see Serviceable
0: */
0: public interface DaemonFactory 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 		Create a new DaemonService with the default daemon timer delay.
0: 
0: 		@exception StandardException Standard cloudscape error policy
0: 	 */
0: 	public DaemonService createNewDaemon(String name) throws StandardException;
0: }
============================================================================