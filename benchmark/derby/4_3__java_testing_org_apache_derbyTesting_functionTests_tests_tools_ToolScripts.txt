1:4af38b4: /*
1:4af38b4:  *
1:4af38b4:  * Derby - Class org.apache.derbyTesting.functionTests.tests.tools.ToolScripts
1:4af38b4:  *
1:4af38b4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4af38b4:  * contributor license agreements.  See the NOTICE file distributed with
1:4af38b4:  * this work for additional information regarding copyright ownership.
1:4af38b4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4af38b4:  * (the "License"); you may not use this file except in compliance with
1:4af38b4:  * the License.  You may obtain a copy of the License at
1:4af38b4:  *
1:4af38b4:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4af38b4:  *
1:4af38b4:  * Unless required by applicable law or agreed to in writing, 
1:4af38b4:  * software distributed under the License is distributed on an 
1:4af38b4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:4af38b4:  * either express or implied. See the License for the specific 
1:4af38b4:  * language governing permissions and limitations under the License.
1:4af38b4:  */
1:4af38b4: package org.apache.derbyTesting.functionTests.tests.tools;
4:4af38b4: 
1:7cbf021: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:4af38b4: import junit.framework.Test;
1:4af38b4: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:4af38b4: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:d02fa84: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:4af38b4: import org.apache.derbyTesting.junit.JDBC;
1:4af38b4: import org.apache.derbyTesting.junit.TestConfiguration;
1:7cbf021: 
1:4af38b4: /**
1:4af38b4:  * ToolScripts runs ij tool scripts (.sql files) in the tool package
1:4af38b4:  * and compares the output to a canon file in the
1:4af38b4:  * standard master package.
1:4af38b4:  * <BR>
1:4af38b4:  * Its suite() method returns a set of tests where each test is an instance of
1:4af38b4:  * this class for an individual script wrapped in a clean database decorator.
1:4af38b4:  * <BR>
1:4af38b4:  * It can also be used as a command line program to run one or more
1:4af38b4:  * tool based ij scripts as tests.
1:4af38b4:  *
1:4af38b4:  */
1:4af38b4: public final class ToolScripts extends ScriptTestCase {
1:4af38b4: 
1:4af38b4:     /**
1:4af38b4:      * Tool scripts (.sql files) that run under Derby's client
1:4af38b4:      * and emebedded configurations. Tool tests are put in this category
1:4af38b4:      * if they are likely to have some testing of the protocol,
1:4af38b4:      * typically tests related to data types.
1:4af38b4:      *
1:4af38b4:      */
1:4af38b4:     private static final String[] CLIENT_AND_EMBEDDED_TESTS = {
1:f8d3a60:         "ij4", "ij6", "ij7", "setholdij",
1:4af38b4:     };
1:4af38b4: 
1:4af38b4:     /**
1:4af38b4:      * Tool scripts (.sql files) that only run in embedded.
1:4af38b4:      */
1:4af38b4:     private static final String[] EMBEDDED_TESTS = {
1:4af38b4:         "showindex_embed",
1:4af38b4:     };
1:4af38b4: 
1:4af38b4:     /**
1:4af38b4:      * Tool scripts (.sql files) that only run in client.
1:4af38b4:      */
1:4af38b4:     private static final String[] CLIENT_TESTS = {
1:4af38b4:         "showindex_client",
1:4af38b4:     };
1:4af38b4: 
1:4af38b4:     /**
1:4af38b4:      * Tests that run in embedded and require JDBC3_TESTS
1:4af38b4:      * (ie. can not run on JSR169).
1:4af38b4:      */
1:4af38b4:     private static final String[] JDBC3_TESTS = {
1:b8c4379:     	"qualifiedIdentifiers", "URLCheck",
1:4af38b4:     };
1:d02fa84: 
1:4af38b4: 
1:d02fa84:     /**
1:d02fa84:      * Tests that run with authentication and SQL authorization on.
1:d02fa84:      */
1:7cbf021:     private static final String[][][] SQLAUTHORIZATION_TESTS = {
1:7cbf021:         {{"ij_show_roles_dbo"}, {"test_dbo", "donald"}, {"test_dbo"}},
1:7cbf021:         {{"ij_show_roles_usr"}, {"test_dbo", "donald"}, {"donald"}}
1:d02fa84:     };
1:d02fa84: 
1:4af38b4:     /**
1:4af38b4:      * Run a set of tool scripts (.sql files) passed in on the
1:4af38b4:      * command line. Note the .sql suffix must not be provided as
1:4af38b4:      * part of the script name.
1:4af38b4:      * <code>
1:4af38b4:      * example
1:4af38b4:      * java org.apache.derbyTesting.functionTests.tests.tool.ToolScripts case union
1:4af38b4:      * </code>
1:4af38b4:      */
1:4af38b4:     public static void main(String[] args)
1:4af38b4:         {
1:4af38b4:             junit.textui.TestRunner.run(getSuite(args));
1:4af38b4:         }
1:4af38b4: 
1:4af38b4:     /**
1:4af38b4:      * Return the suite that runs all the tool scripts.
1:4af38b4:      */
1:4af38b4:     public static Test suite() {
1:4af38b4: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ToolScripts");
1:4af38b4:         suite.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:4af38b4:         suite.addTest(getSuite(EMBEDDED_TESTS));
1:4af38b4:         if (JDBC.vmSupportsJDBC3())
1:4af38b4:             suite.addTest(getSuite(JDBC3_TESTS));
1:d02fa84:         suite.addTest(getAuthorizationSuite(SQLAUTHORIZATION_TESTS));
1:4af38b4: 
1:4af38b4:         // Set up the scripts run with the network client
1:1ae02c9:         BaseTestSuite clientTests = new BaseTestSuite("ToolScripts:client");
1:4af38b4:         clientTests.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:d02fa84:         clientTests.addTest(getAuthorizationSuite(SQLAUTHORIZATION_TESTS));
1:4af38b4:         clientTests.addTest(getSuite(CLIENT_TESTS));
1:4af38b4:         Test client = TestConfiguration.clientServerDecorator(clientTests);
1:4af38b4: 
1:4af38b4:         // add those client tests into the top-level suite.
1:4af38b4:         suite.addTest(client);
1:4af38b4: 
1:4af38b4:         return suite;
1:4af38b4:     }
1:4af38b4: 
1:4af38b4:     /*
1:4af38b4:      * A single JUnit test that runs a single tool script.
1:4af38b4:      */
1:4af38b4:     private ToolScripts(String toolTest){
1:4af38b4:         super(toolTest);
1:4af38b4:     }
1:4af38b4: 
1:7cbf021:     private ToolScripts(String toolTest, String user){
1:617d53c:         super(toolTest,
1:617d53c:               null /* default input encoding */,
1:617d53c:               null /* default output encoding */,
1:617d53c:               user);
1:7cbf021:     }
1:7cbf021: 
1:4af38b4:     /**
1:4af38b4:      * Return a suite of tool tests from the list of
1:4af38b4:      * script names. Each test is surrounded in a decorator
1:4af38b4:      * that cleans the database.
1:4af38b4:      */
1:4af38b4:     private static Test getSuite(String[] list) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Tool scripts");
1:4af38b4:         for (int i = 0; i < list.length; i++)
1:4af38b4:             suite.addTest(
1:4af38b4:                 new CleanDatabaseTestSetup(
1:4af38b4:                     new ToolScripts(list[i])));
1:d02fa84: 
1:4af38b4:         return getIJConfig(suite);
1:4af38b4:     }
1:d02fa84: 
1:d02fa84:     /**
1:d02fa84:      * Return a suite of tool tests from the list of script names. Each test is
1:d02fa84:      * surrounded in a decorator that cleans the database, and adds
1:7cbf021:      * authentication and authorization for each script.
1:7cbf021:      * @param list <ul><li>list[i][0][0]: script name,
1:7cbf021:      *                 <li>list[i][1]: users,
1:7cbf021:      *                 <li>list[i][2][0]: run-as-user
1:7cbf021:      *             </ul>
1:d02fa84:      */
1:7cbf021:     private static Test getAuthorizationSuite(String[][][] list) {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("Tool scripts w/authorization");
1:1ae02c9: 
1:d02fa84:         final String PWSUFFIX = "pwSuffix";
1:d02fa84: 
1:d02fa84:         for (int i = 0; i < list.length; i++) {
1:7cbf021:             Test clean;
1:7cbf021: 
1:7cbf021:             if (list[i][0][0].startsWith("ij_show_roles")) {
1:7cbf021:                 clean = new CleanDatabaseTestSetup(
1:7cbf021:                     new ToolScripts(list[i][0][0], list[i][2][0])) {
1:7cbf021:                         protected void decorateSQL(Statement s)
1:7cbf021:                                 throws SQLException {
1:7cbf021:                             s.execute("create role a");
1:7cbf021:                             s.execute("create role b");
1:7cbf021:                             s.execute("create role \"\"\"eve\"\"\"");
1:7cbf021:                             s.execute("create role publicrole");
1:7cbf021:                             s.execute("grant a to b");
1:7cbf021:                             s.execute("grant publicrole to public");
1:7cbf021:                             s.execute("grant b to donald");
1:7cbf021:                         }
1:7cbf021:                     };
1:7cbf021:             } else {
1:7cbf021:                 clean = new CleanDatabaseTestSetup(
1:7cbf021:                     new ToolScripts(list[i][0][0], list[i][2][0]));
1:7cbf021:             }
1:7cbf021: 
1:d02fa84:             suite.addTest(
1:d02fa84:                 TestConfiguration.sqlAuthorizationDecorator(
1:d02fa84:                     DatabasePropertyTestSetup.builtinAuthentication(
1:7cbf021:                         clean, list[i][1], PWSUFFIX)));
1:d02fa84:         }
1:d02fa84: 
1:d02fa84:         return getIJConfig(suite);
1:d02fa84:     }
1:4af38b4: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Statement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ToolScripts");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite clientTests = new BaseTestSuite("ToolScripts:client");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Tool scripts");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("Tool scripts w/authorization");
1: 
commit:7cbf021
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final String[][][] SQLAUTHORIZATION_TESTS = {
1:         {{"ij_show_roles_dbo"}, {"test_dbo", "donald"}, {"test_dbo"}},
1:         {{"ij_show_roles_usr"}, {"test_dbo", "donald"}, {"donald"}}
/////////////////////////////////////////////////////////////////////////
1:     private ToolScripts(String toolTest, String user){
0:         super(toolTest, null /* default encoding */, user);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * authentication and authorization for each script.
1:      * @param list <ul><li>list[i][0][0]: script name,
1:      *                 <li>list[i][1]: users,
1:      *                 <li>list[i][2][0]: run-as-user
1:      *             </ul>
1:     private static Test getAuthorizationSuite(String[][][] list) {
1:             Test clean;
1: 
1:             if (list[i][0][0].startsWith("ij_show_roles")) {
1:                 clean = new CleanDatabaseTestSetup(
1:                     new ToolScripts(list[i][0][0], list[i][2][0])) {
1:                         protected void decorateSQL(Statement s)
1:                                 throws SQLException {
1:                             s.execute("create role a");
1:                             s.execute("create role b");
1:                             s.execute("create role \"\"\"eve\"\"\"");
1:                             s.execute("create role publicrole");
1:                             s.execute("grant a to b");
1:                             s.execute("grant publicrole to public");
1:                             s.execute("grant b to donald");
1:                         }
1:                     };
1:             } else {
1:                 clean = new CleanDatabaseTestSetup(
1:                     new ToolScripts(list[i][0][0], list[i][2][0]));
1:             }
1: 
1:                         clean, list[i][1], PWSUFFIX)));
commit:d02fa84
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tests that run with authentication and SQL authorization on.
1:      */
0:     private static final String[][] SQLAUTHORIZATION_TESTS = {
0:         {"ij_show_roles", "test_dbo"}
1:     };
1: 
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(getAuthorizationSuite(SQLAUTHORIZATION_TESTS));
1:         clientTests.addTest(getAuthorizationSuite(SQLAUTHORIZATION_TESTS));
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return a suite of tool tests from the list of script names. Each test is
1:      * surrounded in a decorator that cleans the database, and adds
0:      * authentication and authorization given the user for each script.
1:      */
0:     private static Test getAuthorizationSuite(String[][] list) {
0:         TestSuite suite = new TestSuite("Tool scripts w/authorization");
1:         final String PWSUFFIX = "pwSuffix";
1: 
1:         for (int i = 0; i < list.length; i++) {
0:             Test clean = new CleanDatabaseTestSetup(
0:                 new ToolScripts(list[i][0]));
1:             suite.addTest(
1:                 TestConfiguration.sqlAuthorizationDecorator(
1:                     DatabasePropertyTestSetup.builtinAuthentication(
0:                         clean, new String[]{list[i][1]}, PWSUFFIX)));
1:         }
1: 
1:         return getIJConfig(suite);
1:     }
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f8d3a60
/////////////////////////////////////////////////////////////////////////
1:         "ij4", "ij6", "ij7", "setholdij",
commit:4af38b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.tools.ToolScripts
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * ToolScripts runs ij tool scripts (.sql files) in the tool package
1:  * and compares the output to a canon file in the
1:  * standard master package.
1:  * <BR>
1:  * Its suite() method returns a set of tests where each test is an instance of
1:  * this class for an individual script wrapped in a clean database decorator.
1:  * <BR>
1:  * It can also be used as a command line program to run one or more
1:  * tool based ij scripts as tests.
1:  *
1:  */
1: public final class ToolScripts extends ScriptTestCase {
1: 
1:     /**
1:      * Tool scripts (.sql files) that run under Derby's client
1:      * and emebedded configurations. Tool tests are put in this category
1:      * if they are likely to have some testing of the protocol,
1:      * typically tests related to data types.
1:      *
1:      */
1:     private static final String[] CLIENT_AND_EMBEDDED_TESTS = {
0:         "ij7",
1:     };
1: 
1:     /**
1:      * Tool scripts (.sql files) that only run in embedded.
1:      */
1:     private static final String[] EMBEDDED_TESTS = {
1:         "showindex_embed",
1:     };
1: 
1:     /**
1:      * Tool scripts (.sql files) that only run in client.
1:      */
1:     private static final String[] CLIENT_TESTS = {
1:         "showindex_client",
1:     };
1: 
1:     /**
1:      * Tests that run in embedded and require JDBC3_TESTS
1:      * (ie. can not run on JSR169).
1:      */
1:     private static final String[] JDBC3_TESTS = {
1:     };
1: 
1:     /**
1:      * Run a set of tool scripts (.sql files) passed in on the
1:      * command line. Note the .sql suffix must not be provided as
1:      * part of the script name.
1:      * <code>
1:      * example
1:      * java org.apache.derbyTesting.functionTests.tests.tool.ToolScripts case union
1:      * </code>
1:      */
1:     public static void main(String[] args)
1:         {
1:             junit.textui.TestRunner.run(getSuite(args));
1:         }
1: 
1:     /**
1:      * Return the suite that runs all the tool scripts.
1:      */
1:     public static Test suite() {
1: 
0:         TestSuite suite = new TestSuite("ToolScripts");
1:         suite.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:         suite.addTest(getSuite(EMBEDDED_TESTS));
1:         if (JDBC.vmSupportsJDBC3())
1:             suite.addTest(getSuite(JDBC3_TESTS));
1: 
1:         // Set up the scripts run with the network client
0:         TestSuite clientTests = new TestSuite("ToolScripts:client");
1:         clientTests.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:         clientTests.addTest(getSuite(CLIENT_TESTS));
1:         Test client = TestConfiguration.clientServerDecorator(clientTests);
1: 
1:         // add those client tests into the top-level suite.
1:         suite.addTest(client);
1: 
1:         return suite;
1:     }
1: 
1:     /*
1:      * A single JUnit test that runs a single tool script.
1:      */
1:     private ToolScripts(String toolTest){
1:         super(toolTest);
1:     }
1: 
1:     /**
1:      * Return a suite of tool tests from the list of
1:      * script names. Each test is surrounded in a decorator
1:      * that cleans the database.
1:      */
1:     private static Test getSuite(String[] list) {
0:         TestSuite suite = new TestSuite("Tool scripts");
1:         for (int i = 0; i < list.length; i++)
1:             suite.addTest(
1:                 new CleanDatabaseTestSetup(
1:                     new ToolScripts(list[i])));
1: 
1:         return getIJConfig(suite);
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b8c4379
/////////////////////////////////////////////////////////////////////////
0:         "ij4", "ij6", "ij7",
/////////////////////////////////////////////////////////////////////////
1:     	"qualifiedIdentifiers", "URLCheck",
commit:53a9990
/////////////////////////////////////////////////////////////////////////
0:     	"qualifiedIdentifiers"
commit:617d53c
/////////////////////////////////////////////////////////////////////////
1:         super(toolTest,
1:               null /* default input encoding */,
1:               null /* default output encoding */,
1:               user);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:72f9ec3
/////////////////////////////////////////////////////////////////////////
0:         "ij4", "ij6", "ij7", "URLCheck"
commit:0b1a784
/////////////////////////////////////////////////////////////////////////
0:         "ij4", "ij7", "URLCheck"
commit:2f43f16
/////////////////////////////////////////////////////////////////////////
0:         "ij4", "ij7",
============================================================================