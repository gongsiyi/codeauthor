1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IController
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeController;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: 
2:eac0369: /**
1:d7e478a:  * Controller used to insert rows into a secondary index.
1:d7e478a:  *
1:6081510:  * Implements the ConglomerateController interface for the B-Tree index
1:d7e478a:  * access method.  
1:d7e478a:  *
1:d7e478a:  * Note most work of this class is inherited from the generic btree 
1:d7e478a:  * implementation.  This class initializes the top level object and deals with
1:d7e478a:  * locking information specific to a secondary index implementation of a btree.
1:6081510:  */
1:eac0369: public class B2IController extends BTreeController
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields of B2IController.
1:eac0369: 	*/
1:eac0369:     private ConglomerateController  base_cc_for_locking;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of B2IController.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	B2IController()
1:eac0369: 	{
1:eac0369: 		// Perform the generic b-tree construction.
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	void init(
1:eac0369:     TransactionManager              xact_manager,
1:eac0369:     Transaction                     rawtran, 
1:44e4f27:     boolean                         hold,
1:eac0369:     int                             open_mode,
1:eac0369:     int                             lock_level,
1:eac0369:     LockingPolicy                   locking_policy,
1:eac0369:     boolean                         get_locks,
1:eac0369:     B2I                             conglomerate,
1:eac0369:     B2IUndo                         undo,
1:eac0369:     B2IStaticCompiledInfo           static_info,
1:eac0369:     DynamicCompiledOpenConglomInfo  dynamic_info)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         // open and lock the base table.
1:eac0369: 
1:eac0369:         int base_open_mode = 
1:eac0369:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
1:eac0369: 
1:eac0369:         // open the base conglomerate - just to get the lock.  Since btree
1:eac0369:         // controllers only support update operations we just hard code 
1:eac0369:         // the TransactionController.ISOLATION_REPEATABLE_READ, which is only
1:eac0369:         // used for geting the IX intent lock on the table.
1:eac0369:         if (static_info != null)
1:eac0369:         {
1:eac0369:             base_cc_for_locking  = 
1:eac0369:                 xact_manager.openCompiledConglomerate(
1:eac0369:                     false,
1:eac0369:                     base_open_mode, lock_level,
1:eac0369:                     TransactionController.ISOLATION_REPEATABLE_READ,
1:eac0369:                     static_info.base_table_static_info, 
1:eac0369:                     /* TODO - maintain a dynamic info for this */
1:eac0369:                     ((Conglomerate) static_info.getConglom()).
1:57a0040:                         getDynamicCompiledConglomInfo());
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             base_cc_for_locking  = 
1:eac0369:                 xact_manager.openConglomerate(
1:eac0369:                     conglomerate.baseConglomerateId,
1:eac0369:                     false,
1:eac0369:                     base_open_mode, lock_level,
1:eac0369:                     TransactionController.ISOLATION_REPEATABLE_READ);
1:eac0369:         }
1:eac0369:         
1:eac0369:         BTreeLockingPolicy b2i_locking_policy;
1:eac0369:         if (lock_level == TransactionController.MODE_TABLE)
1:eac0369:         {
1:eac0369:             b2i_locking_policy = 
1:eac0369:                 new B2ITableLocking3(
1:eac0369:                     rawtran, lock_level, locking_policy, 
1:eac0369:                     base_cc_for_locking, this);
1:eac0369:         }
1:eac0369:         else if (lock_level == TransactionController.MODE_RECORD)
1:eac0369:         {
1:eac0369:             b2i_locking_policy = 
1:eac0369:                 new B2IRowLocking3(
1:eac0369:                     rawtran, lock_level, locking_policy, 
1:eac0369:                     base_cc_for_locking, this);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             if (SanityManager.DEBUG)
1:eac0369:             {
1:eac0369:                 SanityManager.THROWASSERT("Bad lock level: " + lock_level);
1:eac0369:             }
1:eac0369:             b2i_locking_policy = null;
1:eac0369:         }
1:eac0369: 
1:eac0369: 		// Do generic b-tree initialization.
1:eac0369: 		super.init(
1:eac0369:             xact_manager, 
1:44e4f27:             hold,
1:eac0369:             (ContainerHandle) null, 
1:eac0369:             rawtran, 
1:eac0369:             open_mode,
1:eac0369:             lock_level,
1:eac0369:             b2i_locking_policy,
1:eac0369:             conglomerate, 
1:eac0369:             undo,
1:eac0369:             static_info,
1:eac0369:             dynamic_info);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(conglomerate != null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of ConglomerateController.
1:eac0369: 	*/
1:eac0369: 
1:eac0369:     /**
1:06dbbcf:     Close the conglomerate controller.
1:eac0369: 	<p>
1:eac0369: 	Any changes to this method will probably have to be reflected in close as 
1:eac0369:     well.
1:eac0369: 	<p>
1:eac0369: 	Currently delegates to OpenBTree.  If the btree controller ends up not 
1:eac0369:     having any state of its own, we can remove this method (the VM will 
1:eac0369:     dispatch to OpenBTree), gaining some small efficiency.  For now, this 
1:eac0369:     method remains for clarity.  
1:eac0369: 
1:eac0369: 	@see ConglomerateController#close
2:eac0369:     **/
1:eac0369:     public void close()
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 		super.close();
1:eac0369: 
1:eac0369:         if (base_cc_for_locking != null)
1:eac0369:         {
1:eac0369:             base_cc_for_locking.close();
1:eac0369:             base_cc_for_locking = null;
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     Insert a row into the conglomerate.
1:eac0369: 	@see ConglomerateController#insert
1:eac0369: 
1:eac0369:     @exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369:     public int insert(DataValueDescriptor[] row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             if (this.container != null)
1:eac0369:             {
1:eac0369:                 SanityManager.ASSERT(this.getConglomerate() instanceof B2I);
1:eac0369: 
1:eac0369:                 RowLocation rowloc = (RowLocation)
1:eac0369:                     row[((B2I)(this.getConglomerate())).rowLocationColumn];
1:eac0369: 
1:eac0369:                 SanityManager.ASSERT(
1:eac0369:                     !rowloc.isNull(), "RowLocation value is null");
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(super.insert(row));
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:57a0040
/////////////////////////////////////////////////////////////////////////
1:                         getDynamicCompiledConglomInfo());
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:44e4f27
/////////////////////////////////////////////////////////////////////////
1:     boolean                         hold,
/////////////////////////////////////////////////////////////////////////
1:             hold,
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d7e478a
/////////////////////////////////////////////////////////////////////////
1:  * Controller used to insert rows into a secondary index.
1:  *
1:  * access method.  
1:  *
1:  * Note most work of this class is inherited from the generic btree 
1:  * implementation.  This class initializes the top level object and deals with
1:  * locking information specific to a secondary index implementation of a btree.
commit:6081510
/////////////////////////////////////////////////////////////////////////
1:  * Implements the ConglomerateController interface for the B-Tree index
0:  * access method.  The primary use of this interface is to insert rows
0:  * into the tree.
0:  * <p>
0:  * A B2I controller object corresponds to an open B-Tree secondary index.
1:  */
commit:06dbbcf
/////////////////////////////////////////////////////////////////////////
1:     Close the conglomerate controller.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IController
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import java.io.IOException;
0: import java.util.Properties;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.impl.store.access.btree.BTreeController;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: 
0: import org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 
0:   A B2I controller object is the concrete class which corresponds to an open
0:   b-tree secondary index.
1: 
1: **/
1: 
1: public class B2IController extends BTreeController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*
1: 	** Fields of B2IController.
1: 	*/
1:     private ConglomerateController  base_cc_for_locking;
1: 
1: 	/*
1: 	** Methods of B2IController.
1: 	*/
1: 
1: 	B2IController()
1: 	{
1: 		// Perform the generic b-tree construction.
1: 		super();
1: 	}
1: 
1: 	void init(
1:     TransactionManager              xact_manager,
1:     Transaction                     rawtran, 
1:     int                             open_mode,
1:     int                             lock_level,
1:     LockingPolicy                   locking_policy,
1:     boolean                         get_locks,
1:     B2I                             conglomerate,
1:     B2IUndo                         undo,
1:     B2IStaticCompiledInfo           static_info,
1:     DynamicCompiledOpenConglomInfo  dynamic_info)
1: 		throws StandardException
1: 	{
1:         // open and lock the base table.
1: 
1:         int base_open_mode = 
1:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
1: 
1:         // open the base conglomerate - just to get the lock.  Since btree
1:         // controllers only support update operations we just hard code 
1:         // the TransactionController.ISOLATION_REPEATABLE_READ, which is only
1:         // used for geting the IX intent lock on the table.
1:         if (static_info != null)
1:         {
1:             base_cc_for_locking  = 
1:                 xact_manager.openCompiledConglomerate(
1:                     false,
1:                     base_open_mode, lock_level,
1:                     TransactionController.ISOLATION_REPEATABLE_READ,
1:                     static_info.base_table_static_info, 
1:                     /* TODO - maintain a dynamic info for this */
1:                     ((Conglomerate) static_info.getConglom()).
0:                         getDynamicCompiledConglomInfo(
0:                             conglomerate.baseConglomerateId));
1:         }
1:         else
1:         {
1:             base_cc_for_locking  = 
1:                 xact_manager.openConglomerate(
1:                     conglomerate.baseConglomerateId,
1:                     false,
1:                     base_open_mode, lock_level,
1:                     TransactionController.ISOLATION_REPEATABLE_READ);
1:         }
1:         
1:         BTreeLockingPolicy b2i_locking_policy;
1:         if (lock_level == TransactionController.MODE_TABLE)
1:         {
1:             b2i_locking_policy = 
1:                 new B2ITableLocking3(
1:                     rawtran, lock_level, locking_policy, 
1:                     base_cc_for_locking, this);
1:         }
1:         else if (lock_level == TransactionController.MODE_RECORD)
1:         {
1:             b2i_locking_policy = 
1:                 new B2IRowLocking3(
1:                     rawtran, lock_level, locking_policy, 
1:                     base_cc_for_locking, this);
1:         }
1:         else
1:         {
1:             if (SanityManager.DEBUG)
1:             {
1:                 SanityManager.THROWASSERT("Bad lock level: " + lock_level);
1:             }
1:             b2i_locking_policy = null;
1:         }
1: 
1: 		// Do generic b-tree initialization.
1: 		super.init(
1:             xact_manager, 
1:             (ContainerHandle) null, 
1:             rawtran, 
1:             open_mode,
1:             lock_level,
1:             b2i_locking_policy,
1:             conglomerate, 
1:             undo,
1:             static_info,
1:             dynamic_info);
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(conglomerate != null);
1: 	}
1: 
1: 	/*
1: 	** Methods of ConglomerateController.
1: 	*/
1: 
1:     /**
0:     Close the conglomerate controller
1: 	<p>
1: 	Any changes to this method will probably have to be reflected in close as 
1:     well.
1: 	<p>
1: 	Currently delegates to OpenBTree.  If the btree controller ends up not 
1:     having any state of its own, we can remove this method (the VM will 
1:     dispatch to OpenBTree), gaining some small efficiency.  For now, this 
1:     method remains for clarity.  
1: 
1: 	@see ConglomerateController#close
1:     **/
1:     public void close()
1:         throws StandardException
1: 	{
1: 		super.close();
1: 
1:         if (base_cc_for_locking != null)
1:         {
1:             base_cc_for_locking.close();
1:             base_cc_for_locking = null;
1:         }
1: 	}
1: 
1: 
1: 	/**
1:     Insert a row into the conglomerate.
1: 	@see ConglomerateController#insert
1: 
1:     @exception StandardException Standard exception policy.
1:     **/
1:     public int insert(DataValueDescriptor[] row)
1: 		throws StandardException
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:             if (this.container != null)
1:             {
1:                 SanityManager.ASSERT(this.getConglomerate() instanceof B2I);
1: 
1:                 RowLocation rowloc = (RowLocation)
1:                     row[((B2I)(this.getConglomerate())).rowLocationColumn];
1: 
1:                 SanityManager.ASSERT(
1:                     !rowloc.isNull(), "RowLocation value is null");
1:             }
1:         }
1: 
1:         return(super.insert(row));
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import java.io.IOException;
0: import java.util.Properties;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.impl.store.access.btree.BTreeController;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: 
0: import org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 
0:   A B2I controller object is the concrete class which corresponds to an open
0:   b-tree secondary index.
0: 
0: **/
0: 
0: public class B2IController extends BTreeController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*
0: 	** Fields of B2IController.
0: 	*/
0:     private ConglomerateController  base_cc_for_locking;
0: 
0: 	/*
0: 	** Methods of B2IController.
0: 	*/
0: 
0: 	B2IController()
0: 	{
0: 		// Perform the generic b-tree construction.
0: 		super();
0: 	}
0: 
0: 	void init(
0:     TransactionManager              xact_manager,
0:     Transaction                     rawtran, 
0:     int                             open_mode,
0:     int                             lock_level,
0:     LockingPolicy                   locking_policy,
0:     boolean                         get_locks,
0:     B2I                             conglomerate,
0:     B2IUndo                         undo,
0:     B2IStaticCompiledInfo           static_info,
0:     DynamicCompiledOpenConglomInfo  dynamic_info)
0: 		throws StandardException
0: 	{
0:         // open and lock the base table.
0: 
0:         int base_open_mode = 
0:             open_mode | TransactionController.OPENMODE_FOR_LOCK_ONLY;
0: 
0:         // open the base conglomerate - just to get the lock.  Since btree
0:         // controllers only support update operations we just hard code 
0:         // the TransactionController.ISOLATION_REPEATABLE_READ, which is only
0:         // used for geting the IX intent lock on the table.
0:         if (static_info != null)
0:         {
0:             base_cc_for_locking  = 
0:                 xact_manager.openCompiledConglomerate(
0:                     false,
0:                     base_open_mode, lock_level,
0:                     TransactionController.ISOLATION_REPEATABLE_READ,
0:                     static_info.base_table_static_info, 
0:                     /* TODO - maintain a dynamic info for this */
0:                     ((Conglomerate) static_info.getConglom()).
0:                         getDynamicCompiledConglomInfo(
0:                             conglomerate.baseConglomerateId));
0:         }
0:         else
0:         {
0:             base_cc_for_locking  = 
0:                 xact_manager.openConglomerate(
0:                     conglomerate.baseConglomerateId,
0:                     false,
0:                     base_open_mode, lock_level,
0:                     TransactionController.ISOLATION_REPEATABLE_READ);
0:         }
0:         
0:         BTreeLockingPolicy b2i_locking_policy;
0:         if (lock_level == TransactionController.MODE_TABLE)
0:         {
0:             b2i_locking_policy = 
0:                 new B2ITableLocking3(
0:                     rawtran, lock_level, locking_policy, 
0:                     base_cc_for_locking, this);
0:         }
0:         else if (lock_level == TransactionController.MODE_RECORD)
0:         {
0:             b2i_locking_policy = 
0:                 new B2IRowLocking3(
0:                     rawtran, lock_level, locking_policy, 
0:                     base_cc_for_locking, this);
0:         }
0:         else
0:         {
0:             if (SanityManager.DEBUG)
0:             {
0:                 SanityManager.THROWASSERT("Bad lock level: " + lock_level);
0:             }
0:             b2i_locking_policy = null;
0:         }
0: 
0: 		// Do generic b-tree initialization.
0: 		super.init(
0:             xact_manager, 
0:             (ContainerHandle) null, 
0:             rawtran, 
0:             open_mode,
0:             lock_level,
0:             b2i_locking_policy,
0:             conglomerate, 
0:             undo,
0:             static_info,
0:             dynamic_info);
0: 
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(conglomerate != null);
0: 	}
0: 
0: 	/*
0: 	** Methods of ConglomerateController.
0: 	*/
0: 
0:     /**
0:     Close the conglomerate controller
0: 	<p>
0: 	Any changes to this method will probably have to be reflected in close as 
0:     well.
0: 	<p>
0: 	Currently delegates to OpenBTree.  If the btree controller ends up not 
0:     having any state of its own, we can remove this method (the VM will 
0:     dispatch to OpenBTree), gaining some small efficiency.  For now, this 
0:     method remains for clarity.  
0: 
0: 	@see ConglomerateController#close
0:     **/
0:     public void close()
0:         throws StandardException
0: 	{
0: 		super.close();
0: 
0:         if (base_cc_for_locking != null)
0:         {
0:             base_cc_for_locking.close();
0:             base_cc_for_locking = null;
0:         }
0: 	}
0: 
0: 
0: 	/**
0:     Insert a row into the conglomerate.
0: 	@see ConglomerateController#insert
0: 
0:     @exception StandardException Standard exception policy.
0:     **/
0:     public int insert(DataValueDescriptor[] row)
0: 		throws StandardException
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:             if (this.container != null)
0:             {
0:                 SanityManager.ASSERT(this.getConglomerate() instanceof B2I);
0: 
0:                 RowLocation rowloc = (RowLocation)
0:                     row[((B2I)(this.getConglomerate())).rowLocationColumn];
0: 
0:                 SanityManager.ASSERT(
0:                     !rowloc.isNull(), "RowLocation value is null");
0:             }
0:         }
0: 
0:         return(super.insert(row));
0: 	}
0: }
============================================================================