1:c5935ad: /*
1:c5935ad:  
1:c5935ad: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing
1:c5935ad:  
1:c5935ad: Licensed to the Apache Software Foundation (ASF) under one or more
1:c5935ad: contributor license agreements.  See the NOTICE file distributed with
1:c5935ad: this work for additional information regarding copyright ownership.
1:c5935ad: The ASF licenses this file to You under the Apache License, Version 2.0
1:c5935ad: (the "License"); you may not use this file except in compliance with
1:c5935ad: the License.  You may obtain a copy of the License at
1:c5935ad:  
1:c5935ad:    http://www.apache.org/licenses/LICENSE-2.0
1:c5935ad:  
1:c5935ad: Unless required by applicable law or agreed to in writing, software
1:c5935ad: distributed under the License is distributed on an "AS IS" BASIS,
1:c5935ad: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5935ad: See the License for the specific language governing permissions and
1:c5935ad: limitations under the License.
1:c5935ad:  
1:c5935ad:  */
1:c5935ad: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:c5935ad: 
1:c5935ad: import java.sql.Connection;
1:c5935ad: import java.sql.PreparedStatement;
1:c5935ad: import java.sql.SQLException;
1:c5935ad: import junit.framework.Test;
1:c35e4f0: import org.apache.derby.jdbc.ClientDataSourceInterface;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:c5935ad: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:c5935ad: 
1:c5935ad: 
1:c5935ad: /**
1:c5935ad:  * Run a replication test on localhost
1:c5935ad:  * by using default values for master and slave hosts,
1:c5935ad:  * and master and slave ports.
1:c5935ad:  * Verify that indexes are replicated.
1:c5935ad:  */
1:c5935ad: 
1:c5935ad: public class ReplicationRun_Local_1Indexing extends ReplicationRun
1:c5935ad: {
1:c5935ad:     
1:c5935ad:     /**
1:c5935ad:      * Creates a new instance of ReplicationRun_Local
1:c5935ad:      * @param testcaseName Identifying the test.
1:c5935ad:      */
1:c5935ad:     public ReplicationRun_Local_1Indexing(String testcaseName)
1:c5935ad:     {
1:c5935ad:         super(testcaseName);
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     public static Test suite()
1:c5935ad:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_1Indexing Suite");
1:c5935ad:         
1:c5935ad:         suite.addTestSuite( ReplicationRun_Local_1Indexing.class    );
1:c5935ad:         
1:c5935ad:         return SecurityManagerSetup.noSecurityManager(suite);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     /**
1:c5935ad:      * Verify that indexes created on master before failover
1:c5935ad:      * are available in slave database after failover.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Local_1_Indexing()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         makeReadyForReplication();
1:c5935ad:         
1:c5935ad:         // Replication "load"
1:c5935ad:         String masterDbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:c5935ad:                 replicatedDb;
1:c5935ad:         
1:c5935ad:         int tuplesToInsert = 10000;
1:c5935ad:         executeOnMaster("create table t(i integer primary key, s varchar(64), ii integer)");
1:c5935ad:         
1:c5935ad:         executeOnMaster("create index index1ii on t(ii)");
1:c5935ad:         executeOnMaster("create index index1s on t(s)");
1:c5935ad:         int tuplesInserted = 0;
1:c5935ad:         
1:c5935ad:         _fillTableOnServer(masterServerHost, masterServerPort, 
1:c5935ad:                 masterDbPath, tuplesInserted, tuplesToInsert);
1:c5935ad:         tuplesInserted = tuplesInserted + tuplesToInsert;
1:c5935ad:         
1:c5935ad:         executeOnMaster("drop index index1ii");
1:c5935ad:         executeOnMaster("drop index index1s");
1:c5935ad:         
1:c5935ad:         executeOnMaster("create index index2ii on t(ii)");
1:c5935ad:         executeOnMaster("create index index2s on t(s)");
1:c5935ad:         
1:c5935ad:         _fillTableOnServer(masterServerHost, masterServerPort, 
1:c5935ad:                 masterDbPath, tuplesToInsert, tuplesToInsert);
1:c5935ad:         tuplesInserted = tuplesInserted + tuplesToInsert;
1:c5935ad:         
1:c5935ad:         failOver(jvmVersion,
1:c5935ad:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:c5935ad:                 masterServerHost, masterServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:c5935ad:                 slaveServerHost,slaveServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         // verifySlave();
1:c5935ad:         String slaveDbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:c5935ad:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:c5935ad:             slaveDbPath, tuplesInserted);
1:c5935ad:         _verifyIndexOnSlave("index2ii");
1:c5935ad:         _verifyIndexOnSlave("index2s");
1:c5935ad:         
1:c5935ad:         // We should verify the master as well, 
1:c5935ad:         // at least to see that we still can connect.
1:c5935ad:         // verifyMaster();
1:c5935ad:         masterDbPath = masterDatabasePath +FS+ masterDbSubPath +FS+ replicatedDb;
1:c5935ad:         _verifyDatabase(masterServerHost, masterServerPort,
1:c5935ad:             masterDbPath, tuplesInserted);
1:c5935ad:     }
1:c5935ad:     void _fillTableOnServer(String serverHost, 
1:c5935ad:             int serverPort,
1:c5935ad:             String dbPath,
1:c5935ad:             int startVal,
1:c5935ad:             int _noTuplesToInsert)
1:c35e4f0:         throws Exception
1:c5935ad:     {
1:c35e4f0:         ClientDataSourceInterface ds;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:4469400:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:c35e4f0: 
1:c5935ad:         ds.setDatabaseName(dbPath);
1:c5935ad:         ds.setServerName(serverHost);
1:c5935ad:         ds.setPortNumber(serverPort);
1:c5935ad:         ds.setConnectionAttributes(useEncryption(false));
1:c5935ad:         Connection conn = ds.getConnection();
1:c5935ad:         
1:c5935ad:         PreparedStatement ps = conn.prepareStatement("insert into t values (?,?,?)");
1:c5935ad:         for (int i = 0; i< _noTuplesToInsert; i++)
1:c5935ad:         {
1:c5935ad:             ps.setInt(1,(i+startVal));
1:c5935ad:             ps.setString(2,"dilldall"+(i+startVal));
1:c5935ad:             ps.setInt(3,(i+startVal) % (_noTuplesToInsert/10) );
1:c5935ad:             ps.execute();
1:c5935ad:             if ( (i % 10000) == 0 ) conn.commit();
1:c5935ad:         }
1:c5935ad:         
1:c5935ad:         _verify(conn, startVal + _noTuplesToInsert);
1:c5935ad:         
1:c5935ad:         conn.close();
1:c5935ad:     }
1:c5935ad: 
1:c5935ad:     private void _verifyIndexOnSlave(String indexName) 
2:c5935ad:         throws SQLException
1:c5935ad:     {
1:c5935ad:         
1:c5935ad:         // Verify we may drop the index.
1:c5935ad:         executeOnSlave("drop index " + indexName);  // Will fail if index does no exist
1:c5935ad:     }
1:c5935ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientDataSource");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientDataSource40");
1:             ds = (ClientDataSourceInterface) clazz.getConstructor().newInstance();
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.jdbc.ClientDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * Verify that indexes are replicated.
1:  */
1: 
1: public class ReplicationRun_Local_1Indexing extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_1Indexing(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_1Indexing Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_1Indexing.class    );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:     
1:     /**
1:      * Verify that indexes created on master before failover
1:      * are available in slave database after failover.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Local_1_Indexing()
1:     throws Exception
1:     {
1:         makeReadyForReplication();
1:         
1:         // Replication "load"
1:         String masterDbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:                 replicatedDb;
1:         
1:         int tuplesToInsert = 10000;
1:         executeOnMaster("create table t(i integer primary key, s varchar(64), ii integer)");
1:         
1:         executeOnMaster("create index index1ii on t(ii)");
1:         executeOnMaster("create index index1s on t(s)");
1:         int tuplesInserted = 0;
1:         
1:         _fillTableOnServer(masterServerHost, masterServerPort, 
1:                 masterDbPath, tuplesInserted, tuplesToInsert);
1:         tuplesInserted = tuplesInserted + tuplesToInsert;
1:         
1:         executeOnMaster("drop index index1ii");
1:         executeOnMaster("drop index index1s");
1:         
1:         executeOnMaster("create index index2ii on t(ii)");
1:         executeOnMaster("create index index2s on t(s)");
1:         
1:         _fillTableOnServer(masterServerHost, masterServerPort, 
1:                 masterDbPath, tuplesToInsert, tuplesToInsert);
1:         tuplesInserted = tuplesInserted + tuplesToInsert;
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         // verifySlave();
1:         String slaveDbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:             slaveDbPath, tuplesInserted);
1:         _verifyIndexOnSlave("index2ii");
1:         _verifyIndexOnSlave("index2s");
1:         
1:         // We should verify the master as well, 
1:         // at least to see that we still can connect.
1:         // verifyMaster();
1:         masterDbPath = masterDatabasePath +FS+ masterDbSubPath +FS+ replicatedDb;
1:         _verifyDatabase(masterServerHost, masterServerPort,
1:             masterDbPath, tuplesInserted);
1:     }
1:     void _fillTableOnServer(String serverHost, 
1:             int serverPort,
1:             String dbPath,
1:             int startVal,
1:             int _noTuplesToInsert)
1:         throws SQLException
1:     {
0:         ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
1:         ds.setDatabaseName(dbPath);
1:         ds.setServerName(serverHost);
1:         ds.setPortNumber(serverPort);
1:         ds.setConnectionAttributes(useEncryption(false));
1:         Connection conn = ds.getConnection();
1:         
1:         PreparedStatement ps = conn.prepareStatement("insert into t values (?,?,?)");
1:         for (int i = 0; i< _noTuplesToInsert; i++)
1:         {
1:             ps.setInt(1,(i+startVal));
1:             ps.setString(2,"dilldall"+(i+startVal));
1:             ps.setInt(3,(i+startVal) % (_noTuplesToInsert/10) );
1:             ps.execute();
1:             if ( (i % 10000) == 0 ) conn.commit();
1:         }
1:         
1:         _verify(conn, startVal + _noTuplesToInsert);
1:         
1:         conn.close();
1:     }
1: 
1:     private void _verifyIndexOnSlave(String indexName) 
1:         throws SQLException
1:     {
1:         
1:         // Verify we may drop the index.
1:         executeOnSlave("drop index " + indexName);  // Will fail if index does no exist
1:     }
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_1Indexing Suite");
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                "org.apache.derby.jdbc.BasicClientDataSource40").newInstance();
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDataSourceInterface;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         throws Exception
1:         ClientDataSourceInterface ds;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.ClientDataSource").newInstance();
1:         } else {
0:             ds = (ClientDataSourceInterface)Class.forName(
0:                "org.apache.derby.jdbc.NonJNDIClientDataSource40").newInstance();
1:         }
1: 
============================================================================