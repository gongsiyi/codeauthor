1:f55d30a: /*
1:f55d30a: 
1:f55d30a:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest
1:f55d30a: 
1:f55d30a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f55d30a:    contributor license agreements.  See the NOTICE file distributed with
1:f55d30a:    this work for additional information regarding copyright ownership.
1:f55d30a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:f55d30a:    (the "License"); you may not use this file except in compliance with
1:f55d30a:    the License.  You may obtain a copy of the License at
1:f55d30a: 
1:f55d30a:       http://www.apache.org/licenses/LICENSE-2.0
1:f55d30a: 
1:f55d30a:    Unless required by applicable law or agreed to in writing, software
1:f55d30a:    distributed under the License is distributed on an "AS IS" BASIS,
1:f55d30a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f55d30a:    See the License for the specific language governing permissions and
1:f55d30a:    limitations under the License.
1:f55d30a: 
1:f55d30a: */
1:f55d30a: 
1:f55d30a: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:f55d30a: 
1:f55d30a: import java.io.UnsupportedEncodingException;
1:f55d30a: import java.sql.Blob;
1:f55d30a: import java.sql.Clob;
1:f55d30a: import java.sql.Connection;
1:f55d30a: import java.sql.PreparedStatement;
1:f55d30a: import java.sql.ResultSet;
1:f55d30a: import java.sql.SQLException;
1:f55d30a: import java.sql.Statement;
1:f55d30a: import java.sql.Types;
1:f55d30a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:f55d30a: 
1:f55d30a: import junit.framework.Test;
1:f55d30a: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:f55d30a: import org.apache.derbyTesting.junit.TestConfiguration;
1:f55d30a: 
1:f55d30a: /**
1:f55d30a:  * Tests of accessing large objects (LOBs) with locators.
1:f55d30a:  */
1:f55d30a: public class LOBLocatorReleaseTest
1:f55d30a:         extends BaseJDBCTestCase {
1:f55d30a: 
1:f55d30a:     public LOBLocatorReleaseTest(String name) {
1:f55d30a:         super(name);
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests that the code path for LOB locator release works fine for result
1:f55d30a:      * sets without LOBs.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if the test fails for some reason
1:f55d30a:      */
1:f55d30a:     public void testNoLOBs()
1:f55d30a:             throws SQLException {
1:f55d30a:         // Test a forward only result set, with autocommit.
1:f55d30a:         Statement stmt = createStatement();
1:f55d30a:         ResultSet rs = stmt.executeQuery("select * from sys.systables");
1:f55d30a:         while (rs.next()) {
1:f55d30a:             // Do nothing, just iterate through.
1:f55d30a:         }
1:f55d30a:         rs.close();
1:f55d30a: 
1:f55d30a:         // Basic test checking that the scrollable result code path works.
1:f55d30a:         stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                ResultSet.CONCUR_READ_ONLY);
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         rs = stmt.executeQuery("select * from sys.systables");
1:f55d30a:         rs.absolute(3);
1:f55d30a:         while (rs.next()) {
1:f55d30a:             // Do nothing, just iterate through.
1:f55d30a:         }
1:f55d30a:         // Just navigate randomly.
1:f55d30a:         rs.previous();
1:f55d30a:         rs.absolute(2);
1:f55d30a:         rs.relative(2);
1:f55d30a:         rs.afterLast();
1:f55d30a:         rs.first();
1:f55d30a:         rs.next();
1:f55d30a:         rs.last();
1:f55d30a:         rs.beforeFirst();
1:f55d30a:         // Close the statement instead of the result set first.
1:f55d30a:         stmt.close();
1:f55d30a:         rs.close();
1:f55d30a:         rollback();
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Test basic operations on forward only result sets.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if something causes the test to fail
1:f55d30a:      */
1:f55d30a:     public void testForwardOnlyWithNoNulls()
1:f55d30a:             throws SQLException {
1:f55d30a:         forwardOnlyTest("LOBLOC_NO_NULLS");
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Test basic operations on forward only result sets containing NULL LOBs.
1:f55d30a:      * <p>
1:f55d30a:      * This requires some special care because NUL LOBs don't have a locator.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if something causes the test to fail
1:f55d30a:      */
1:f55d30a:     public void testForwardOnlyWithNulls()
1:f55d30a:             throws SQLException {
1:f55d30a:         forwardOnlyTest("LOBLOC_WITH_NULLS");
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     private void forwardOnlyTest(String table)
1:f55d30a:             throws SQLException {
1:f55d30a:         final String sql = "select dBlob, dClob from " + table;
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         // Just loop through.
1:f55d30a:         Statement stmt = createStatement();
1:f55d30a:         ResultSet rs = stmt.executeQuery(sql);
1:f55d30a:         while (rs.next()) {
1:f55d30a:             // Just iterate through.
1:f55d30a:         }
1:f55d30a:         rs.close();
1:f55d30a: 
1:f55d30a:         // Loop through and get references to some of the LOBs.
1:f55d30a:         // When you get a LOB reference, the locator shuold only be freed on
1:f55d30a:         // explicit calls to free (requires Java SE 6) or commit/rollback.
1:f55d30a:         rs = stmt.executeQuery(sql);
1:f55d30a:         int index = 0;
1:f55d30a:         while (rs.next()) {
1:f55d30a:             if (index % 2 == 0) {
1:f55d30a:                 Blob b = rs.getBlob(1);
1:f55d30a:                 if (!rs.wasNull()) {
1:f55d30a:                     b.length();
1:f55d30a:                 }
1:f55d30a:             }
1:f55d30a:             if (index % 3 == 0) {
1:f55d30a:                 Clob c = rs.getClob(2);
1:f55d30a:                 if (!rs.wasNull()) {
1:f55d30a:                     c.length();
1:f55d30a:                 }
1:f55d30a:             }
1:f55d30a:             // Clear all LOB mappings after 10 rows.
1:f55d30a:             if (index == 9) {
1:f55d30a:                 commit();
1:f55d30a:             }
1:f55d30a:             index++;
1:f55d30a:         }
1:f55d30a:         rs.close();
1:f55d30a:         stmt.close();
1:f55d30a: 
1:f55d30a:         // Close the statement after a few rows.
1:f55d30a:         stmt = createStatement();
1:f55d30a:         rs = stmt.executeQuery(sql);
1:f55d30a:         rs.next();
1:f55d30a:         rs.next();
1:f55d30a:         stmt.close();
1:f55d30a:         // The LOB mapping is cleared on a commit.
1:f55d30a:         commit();
1:f55d30a: 
1:f55d30a:         // Close the result set after a few rows and a rollback.
1:f55d30a:         stmt = createStatement();
1:f55d30a:         rs = stmt.executeQuery(sql);
1:f55d30a:         rs.next();
1:f55d30a:         rs.next();
1:f55d30a:         rollback();
1:f55d30a:         rs.close();
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests that the LOB objects are not closed when closing the result set.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if something causes the test to fail
1:f55d30a:      */
1:f55d30a:     public void testBlobClobStateForwardOnlyWithNoNulls()
1:f55d30a:             throws SQLException {
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement();
1:f55d30a:         ResultSet rs = stmt.executeQuery(
1:f55d30a:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:f55d30a:         rs.next();
1:f55d30a:         Blob b = rs.getBlob(1);
1:f55d30a:         final long blobLength = b.length();
1:f55d30a:         rs.next();
1:f55d30a:         Clob c = rs.getClob(2);
1:f55d30a:         final long clobLength = c.length();
1:f55d30a:         rs.next();
1:f55d30a:         rs.close();
1:f55d30a:         // The LOB objects should still be usable.
1:f55d30a:         assertEquals(blobLength, b.length());
1:f55d30a:         assertEquals(clobLength, c.length());
1:f55d30a:         commit();
1:f55d30a:         try {
1:f55d30a:             // This should fail because the locator has been released.
1:f55d30a:             c.getSubString(1, 9);
1:f55d30a:             fail("Locator should have been released, causing the call to fail");
1:f55d30a:         } catch (SQLException sqle) {
1:f55d30a:             assertSQLState("XJ215", sqle);
1:f55d30a:         }
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests that the LOB objects are not closed when closing the result set.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if something causes the test to fail
1:f55d30a:      */
1:f55d30a:     public void testBlobClobStateAfterCloseOnScrollable()
1:f55d30a:             throws SQLException {
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                          ResultSet.CONCUR_READ_ONLY);
1:f55d30a:         ResultSet rs = stmt.executeQuery(
1:f55d30a:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:f55d30a:         rs.next();
1:f55d30a:         rs.relative(5);
1:f55d30a:         Blob b = rs.getBlob(1);
1:f55d30a:         final long blobLength = b.length();
1:f55d30a:         rs.next();
1:f55d30a:         Clob c = rs.getClob(2);
1:f55d30a:         final long clobLength = c.length();
1:f55d30a:         rs.first();
1:f55d30a:         rs.close();
1:f55d30a:         // The LOB objects should still be usable.
1:f55d30a:         assertEquals(blobLength, b.length());
1:f55d30a:         assertEquals(clobLength, c.length());
1:f55d30a:         commit();
1:f55d30a:         try {
1:f55d30a:             // This should fail because the locator has been released.
1:f55d30a:             c.getSubString(1, 9);
1:f55d30a:             fail("Locator should have been released, causing the call to fail");
1:f55d30a:         } catch (SQLException sqle) {
1:f55d30a:             assertSQLState("XJ215", sqle);
1:f55d30a:         }
1:f55d30a:     }
1:f55d30a:     /**
1:f55d30a:      * Test navigation on a scrollable result set with LOB columns.
1:f55d30a:      */
1:f55d30a:     public void testScrollableWithNoNulls()
1:f55d30a:             throws SQLException {
1:f55d30a:         scrollableTest("LOBLOC_NO_NULLS", ResultSet.CONCUR_READ_ONLY);
1:f55d30a:         scrollableTest("LOBLOC_NO_NULLS", ResultSet.CONCUR_UPDATABLE);
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Test navigation on a scrollable result set with LOB columns containing
1:f55d30a:      * some NULL values.
1:f55d30a:      */
1:f55d30a:     public void testScrollableWithNulls()
1:f55d30a:             throws SQLException {
1:f55d30a:         scrollableTest("LOBLOC_WITH_NULLS", ResultSet.CONCUR_READ_ONLY);
1:f55d30a:         scrollableTest("LOBLOC_WITH_NULLS", ResultSet.CONCUR_UPDATABLE);
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests a sequence of operations on a scrollable result set.
1:f55d30a:      *
1:f55d30a:      * @param table the table to query
1:f55d30a:      * @param rsConcurrency the result set concurrency
1:f55d30a:      */
1:f55d30a:     private void scrollableTest(String table, int rsConcurrency)
1:f55d30a:             throws SQLException {
1:f55d30a:         final String sql = "select dBlob, dClob from " + table;
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                          rsConcurrency);
1:f55d30a:         ResultSet rs = stmt.executeQuery(sql);
1:f55d30a:         // Just iterate through and close.
1:f55d30a:         while (rs.next()) {}
1:f55d30a:         rs.close();
1:f55d30a: 
1:f55d30a:         // Do some random navigation.
1:f55d30a:         rs = stmt.executeQuery(sql);
1:f55d30a:         rs.next();
1:f55d30a:         rs.beforeFirst();
1:f55d30a:         rs.first();
1:f55d30a:         rs.relative(3);
1:f55d30a:         rs.previous();
1:f55d30a:         rs.last();
1:f55d30a:         rs.absolute(5);
1:f55d30a:         rs.afterLast();
1:f55d30a:         rs.next();
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests that the cursor can be positioned on the current row multiple
1:f55d30a:      * times on a scrollable resultset.
1:f55d30a:      * <p>
1:f55d30a:      * The motivation for the test is that the locators assoicated with the
1:f55d30a:      * current row must not be released multiple times.
1:f55d30a:      */
1:f55d30a:     public void testScrollableMoveToCurrentRow()
1:f55d30a:             throws SQLException {
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                          ResultSet.CONCUR_UPDATABLE);
1:f55d30a:         ResultSet rs = stmt.executeQuery(
1:f55d30a:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:f55d30a:         rs.next();
1:f55d30a:         rs.moveToCurrentRow();
1:f55d30a:         rs.moveToCurrentRow();
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests that absolute positioning can be called for the same row multiple
1:f55d30a:      * times on a scrollable resultset.
1:f55d30a:      */
1:f55d30a:     public void testScrollableAbsoluteRow()
1:f55d30a:             throws SQLException {
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                          ResultSet.CONCUR_UPDATABLE);
1:f55d30a:         ResultSet rs = stmt.executeQuery(
1:f55d30a:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:f55d30a:         rs.next();
1:f55d30a:         rs.absolute(4);
1:f55d30a:         rs.absolute(4);
1:f55d30a:         rs.absolute(4);
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Tests a sequence of operations on a scrollable, updatable resultset.
1:f55d30a:      *
1:f55d30a:      * @throws SQLException if the test fails
1:f55d30a:      */
1:f55d30a:     public void testScrollableUpdateWithLocators()
1:f55d30a:             throws SQLException {
1:f55d30a:         getConnection().setAutoCommit(false);
1:f55d30a:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f55d30a:                                          ResultSet.CONCUR_UPDATABLE);
1:f55d30a:         ResultSet rs = stmt.executeQuery(
1:f55d30a:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:f55d30a:         rs.absolute(3);
1:f55d30a:         Clob c1 = rs.getClob(2);
1:f55d30a:         final int origLength = (int)c1.length();
1:f55d30a:         final String origContent = c1.getSubString(1, origLength);
1:f55d30a:         // Do a change
1:f55d30a:         c1.setString(origLength, "FIRSTPASS");
1:f55d30a:         rs.absolute(7);
1:f55d30a:         rs.next();
1:f55d30a:         // Move back to row 3
1:f55d30a:         rs.absolute(3);
1:f55d30a:         Clob c2 = rs.getClob(2);
1:f55d30a:         assertEquals(origContent, c2.getSubString(1, (int)c2.length()));
1:f55d30a:         rs.updateRow(); // Should be a no-op
1:f55d30a:         rs.absolute(3);
1:f55d30a:         // Expect this to fail if the restriction that LOB columns cannot be
1:f55d30a:         // accessed more than once is enforced.
1:f55d30a:         Clob c3 = rs.getClob(2);
1:f55d30a:         assertEquals(origContent, c3.getSubString(1, (int)c3.length()));
1:f55d30a:         rs.previous();
1:f55d30a:         rs.next();
1:f55d30a:         Clob c4 = rs.getClob(2);
1:f55d30a:         final String newContent = "THIS IS THE NEW VALUE!";
1:f55d30a:         c4.setString(1, newContent);
1:f55d30a:         rs.updateClob(2, c4);
1:f55d30a:         rs.updateRow();
1:f55d30a:         c4.setString(1, "THIS IS NOT NOT NOT THE NEW VALUE!");
1:f55d30a:         rs.updateRow();
1:f55d30a:         rs.next();
1:f55d30a:         rs.absolute(3);
1:f55d30a:         Clob c5 = rs.getClob(2);
1:f55d30a:         assertEquals(newContent, c5.getSubString(1, (int)c5.length()));
1:f55d30a:         rollback();
1:f55d30a:         assertInvalid(c1);
1:f55d30a:         assertInvalid(c2);
1:f55d30a:         assertInvalid(c3);
1:f55d30a:         assertInvalid(c4);
1:f55d30a:         assertInvalid(c5);
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Asserts that the Clob is invalid by invoking a method on it (that is
1:f55d30a:      * supposed to fail) and catching the exception. Fails if no exception is
1:f55d30a:      * thrown, or the wrong exception is thrown.
1:f55d30a:      *
1:f55d30a:      * @param clob the Clob to check
1:f55d30a:      */
1:f55d30a:     private void assertInvalid(Clob clob) {
1:f55d30a:         try {
1:f55d30a:             clob.getSubString(1, (int)clob.length());
1:f55d30a:             fail("Clob should have been invalidated");
1:f55d30a:         } catch (SQLException sqle) {
1:f55d30a:             assertSQLState("XJ215", sqle);
1:f55d30a:         }
1:f55d30a:     }
1:f55d30a: 
1:f55d30a:     /**
1:f55d30a:      * Returns a default suite running in a client-server environment.
1:f55d30a:      * <p>
1:f55d30a:      * The tests in this class is only meant to be run with client-server.
1:f55d30a:      *
1:f55d30a:      * @return A test suite.
1:f55d30a:      */
1:f55d30a:     public static Test suite() {
1:f55d30a:         return new CleanDatabaseTestSetup(
1:f55d30a:                 TestConfiguration.clientServerSuite(
1:f55d30a:                                                 LOBLocatorReleaseTest.class)) {
1:f55d30a:             /**
1:f55d30a:              * Populates two tables with LOB data.
1:f55d30a:              */
1:f55d30a:             protected void decorateSQL(Statement s) throws SQLException {
1:f55d30a:                 s.executeUpdate("create table LOBLOC_NO_NULLS " +
1:f55d30a:                         "(dBlob BLOB not null, dClob CLOB not null)");
1:f55d30a:                 Connection con = s.getConnection();
1:f55d30a:                 PreparedStatement ps = con.prepareStatement(
1:f55d30a:                         "insert into LOBLOC_NO_NULLS values (?,?)");
1:f55d30a:                 String cContent = "A little test Clob";
1:f55d30a:                 byte[] bContent;
1:f55d30a:                 try {
1:f55d30a:                     bContent = cContent.getBytes("US-ASCII");
1:f55d30a:                 } catch (UnsupportedEncodingException uee) {
1:f55d30a:                     SQLException sqle = new SQLException();
1:f55d30a:                     sqle.initCause(uee);
1:f55d30a:                     throw sqle;
1:f55d30a:                 }
1:f55d30a:                 for (int i=0; i < 25; i++) {
1:f55d30a:                     ps.setBytes(1, bContent);
1:f55d30a:                     ps.setString(2, cContent);
1:f55d30a:                     ps.executeUpdate();
1:f55d30a:                 }
1:f55d30a:                 ps.close();
1:f55d30a:                 s.executeUpdate("create table LOBLOC_WITH_NULLS " +
1:f55d30a:                         "(dBlob BLOB, dClob CLOB)");
1:f55d30a:                 ps = con.prepareStatement(
1:f55d30a:                         "insert into LOBLOC_WITH_NULLS values (?,?)");
1:f55d30a:                 for (int i=0; i < 25; i++) {
1:f55d30a:                     if (i % 3 == 0) {
1:f55d30a:                         ps.setNull(1, Types.BLOB);
1:f55d30a:                     } else {
1:f55d30a:                         ps.setBytes(1, bContent);
1:f55d30a:                     }
1:f55d30a:                     if (i % 4 == 0) {
1:f55d30a:                         ps.setNull(2, Types.CLOB);
1:f55d30a:                     } else {
1:f55d30a:                         ps.setString(2, cContent);
1:f55d30a:                     }
1:f55d30a:                     ps.executeUpdate();
1:f55d30a:                 }
1:f55d30a:                 ps.close();
1:f55d30a:                 con.commit();
1:f55d30a:             }
1:f55d30a:         };
1:f55d30a:     }
1:f55d30a: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:f55d30a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Types;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests of accessing large objects (LOBs) with locators.
1:  */
1: public class LOBLocatorReleaseTest
1:         extends BaseJDBCTestCase {
1: 
1:     public LOBLocatorReleaseTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Tests that the code path for LOB locator release works fine for result
1:      * sets without LOBs.
1:      *
1:      * @throws SQLException if the test fails for some reason
1:      */
1:     public void testNoLOBs()
1:             throws SQLException {
1:         // Test a forward only result set, with autocommit.
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery("select * from sys.systables");
1:         while (rs.next()) {
1:             // Do nothing, just iterate through.
1:         }
1:         rs.close();
1: 
1:         // Basic test checking that the scrollable result code path works.
1:         stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                ResultSet.CONCUR_READ_ONLY);
1:         getConnection().setAutoCommit(false);
1:         rs = stmt.executeQuery("select * from sys.systables");
1:         rs.absolute(3);
1:         while (rs.next()) {
1:             // Do nothing, just iterate through.
1:         }
1:         // Just navigate randomly.
1:         rs.previous();
1:         rs.absolute(2);
1:         rs.relative(2);
1:         rs.afterLast();
1:         rs.first();
1:         rs.next();
1:         rs.last();
1:         rs.beforeFirst();
1:         // Close the statement instead of the result set first.
1:         stmt.close();
1:         rs.close();
1:         rollback();
1:     }
1: 
1:     /**
1:      * Test basic operations on forward only result sets.
1:      *
1:      * @throws SQLException if something causes the test to fail
1:      */
1:     public void testForwardOnlyWithNoNulls()
1:             throws SQLException {
1:         forwardOnlyTest("LOBLOC_NO_NULLS");
1:     }
1: 
1:     /**
1:      * Test basic operations on forward only result sets containing NULL LOBs.
1:      * <p>
1:      * This requires some special care because NUL LOBs don't have a locator.
1:      *
1:      * @throws SQLException if something causes the test to fail
1:      */
1:     public void testForwardOnlyWithNulls()
1:             throws SQLException {
1:         forwardOnlyTest("LOBLOC_WITH_NULLS");
1:     }
1: 
1:     private void forwardOnlyTest(String table)
1:             throws SQLException {
1:         final String sql = "select dBlob, dClob from " + table;
1:         getConnection().setAutoCommit(false);
1:         // Just loop through.
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(sql);
1:         while (rs.next()) {
1:             // Just iterate through.
1:         }
1:         rs.close();
1: 
1:         // Loop through and get references to some of the LOBs.
1:         // When you get a LOB reference, the locator shuold only be freed on
1:         // explicit calls to free (requires Java SE 6) or commit/rollback.
1:         rs = stmt.executeQuery(sql);
1:         int index = 0;
1:         while (rs.next()) {
1:             if (index % 2 == 0) {
1:                 Blob b = rs.getBlob(1);
1:                 if (!rs.wasNull()) {
1:                     b.length();
1:                 }
1:             }
1:             if (index % 3 == 0) {
1:                 Clob c = rs.getClob(2);
1:                 if (!rs.wasNull()) {
1:                     c.length();
1:                 }
1:             }
1:             // Clear all LOB mappings after 10 rows.
1:             if (index == 9) {
1:                 commit();
1:             }
1:             index++;
1:         }
1:         rs.close();
1:         stmt.close();
1: 
1:         // Close the statement after a few rows.
1:         stmt = createStatement();
1:         rs = stmt.executeQuery(sql);
1:         rs.next();
1:         rs.next();
1:         stmt.close();
1:         // The LOB mapping is cleared on a commit.
1:         commit();
1: 
1:         // Close the result set after a few rows and a rollback.
1:         stmt = createStatement();
1:         rs = stmt.executeQuery(sql);
1:         rs.next();
1:         rs.next();
1:         rollback();
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Tests that the LOB objects are not closed when closing the result set.
1:      *
1:      * @throws SQLException if something causes the test to fail
1:      */
1:     public void testBlobClobStateForwardOnlyWithNoNulls()
1:             throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:         rs.next();
1:         Blob b = rs.getBlob(1);
1:         final long blobLength = b.length();
1:         rs.next();
1:         Clob c = rs.getClob(2);
1:         final long clobLength = c.length();
1:         rs.next();
1:         rs.close();
1:         // The LOB objects should still be usable.
1:         assertEquals(blobLength, b.length());
1:         assertEquals(clobLength, c.length());
1:         commit();
1:         try {
1:             // This should fail because the locator has been released.
1:             c.getSubString(1, 9);
1:             fail("Locator should have been released, causing the call to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ215", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Tests that the LOB objects are not closed when closing the result set.
1:      *
1:      * @throws SQLException if something causes the test to fail
1:      */
1:     public void testBlobClobStateAfterCloseOnScrollable()
1:             throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                          ResultSet.CONCUR_READ_ONLY);
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:         rs.next();
1:         rs.relative(5);
1:         Blob b = rs.getBlob(1);
1:         final long blobLength = b.length();
1:         rs.next();
1:         Clob c = rs.getClob(2);
1:         final long clobLength = c.length();
1:         rs.first();
1:         rs.close();
1:         // The LOB objects should still be usable.
1:         assertEquals(blobLength, b.length());
1:         assertEquals(clobLength, c.length());
1:         commit();
1:         try {
1:             // This should fail because the locator has been released.
1:             c.getSubString(1, 9);
1:             fail("Locator should have been released, causing the call to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ215", sqle);
1:         }
1:     }
1:     /**
1:      * Test navigation on a scrollable result set with LOB columns.
1:      */
1:     public void testScrollableWithNoNulls()
1:             throws SQLException {
1:         scrollableTest("LOBLOC_NO_NULLS", ResultSet.CONCUR_READ_ONLY);
1:         scrollableTest("LOBLOC_NO_NULLS", ResultSet.CONCUR_UPDATABLE);
1:     }
1: 
1:     /**
1:      * Test navigation on a scrollable result set with LOB columns containing
1:      * some NULL values.
1:      */
1:     public void testScrollableWithNulls()
1:             throws SQLException {
1:         scrollableTest("LOBLOC_WITH_NULLS", ResultSet.CONCUR_READ_ONLY);
1:         scrollableTest("LOBLOC_WITH_NULLS", ResultSet.CONCUR_UPDATABLE);
1:     }
1: 
1:     /**
1:      * Tests a sequence of operations on a scrollable result set.
1:      *
1:      * @param table the table to query
1:      * @param rsConcurrency the result set concurrency
1:      */
1:     private void scrollableTest(String table, int rsConcurrency)
1:             throws SQLException {
1:         final String sql = "select dBlob, dClob from " + table;
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                          rsConcurrency);
1:         ResultSet rs = stmt.executeQuery(sql);
1:         // Just iterate through and close.
1:         while (rs.next()) {}
1:         rs.close();
1: 
1:         // Do some random navigation.
1:         rs = stmt.executeQuery(sql);
1:         rs.next();
1:         rs.beforeFirst();
1:         rs.first();
1:         rs.relative(3);
1:         rs.previous();
1:         rs.last();
1:         rs.absolute(5);
1:         rs.afterLast();
1:         rs.next();
1:     }
1: 
1:     /**
1:      * Tests that the cursor can be positioned on the current row multiple
1:      * times on a scrollable resultset.
1:      * <p>
1:      * The motivation for the test is that the locators assoicated with the
1:      * current row must not be released multiple times.
1:      */
1:     public void testScrollableMoveToCurrentRow()
1:             throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                          ResultSet.CONCUR_UPDATABLE);
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:         rs.next();
1:         rs.moveToCurrentRow();
1:         rs.moveToCurrentRow();
1:     }
1: 
1:     /**
1:      * Tests that absolute positioning can be called for the same row multiple
1:      * times on a scrollable resultset.
1:      */
1:     public void testScrollableAbsoluteRow()
1:             throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                          ResultSet.CONCUR_UPDATABLE);
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:         rs.next();
1:         rs.absolute(4);
1:         rs.absolute(4);
1:         rs.absolute(4);
1:     }
1: 
1:     /**
1:      * Tests a sequence of operations on a scrollable, updatable resultset.
1:      *
1:      * @throws SQLException if the test fails
1:      */
1:     public void testScrollableUpdateWithLocators()
1:             throws SQLException {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                          ResultSet.CONCUR_UPDATABLE);
1:         ResultSet rs = stmt.executeQuery(
1:                 "select dBlob, dClob from LOBLOC_NO_NULLS");
1:         rs.absolute(3);
1:         Clob c1 = rs.getClob(2);
1:         final int origLength = (int)c1.length();
1:         final String origContent = c1.getSubString(1, origLength);
1:         // Do a change
1:         c1.setString(origLength, "FIRSTPASS");
1:         rs.absolute(7);
1:         rs.next();
1:         // Move back to row 3
1:         rs.absolute(3);
1:         Clob c2 = rs.getClob(2);
1:         assertEquals(origContent, c2.getSubString(1, (int)c2.length()));
1:         rs.updateRow(); // Should be a no-op
1:         rs.absolute(3);
1:         // Expect this to fail if the restriction that LOB columns cannot be
1:         // accessed more than once is enforced.
1:         Clob c3 = rs.getClob(2);
1:         assertEquals(origContent, c3.getSubString(1, (int)c3.length()));
1:         rs.previous();
1:         rs.next();
1:         Clob c4 = rs.getClob(2);
1:         final String newContent = "THIS IS THE NEW VALUE!";
1:         c4.setString(1, newContent);
1:         rs.updateClob(2, c4);
1:         rs.updateRow();
1:         c4.setString(1, "THIS IS NOT NOT NOT THE NEW VALUE!");
1:         rs.updateRow();
1:         rs.next();
1:         rs.absolute(3);
1:         Clob c5 = rs.getClob(2);
1:         assertEquals(newContent, c5.getSubString(1, (int)c5.length()));
1:         rollback();
1:         assertInvalid(c1);
1:         assertInvalid(c2);
1:         assertInvalid(c3);
1:         assertInvalid(c4);
1:         assertInvalid(c5);
1:     }
1: 
1:     /**
1:      * Asserts that the Clob is invalid by invoking a method on it (that is
1:      * supposed to fail) and catching the exception. Fails if no exception is
1:      * thrown, or the wrong exception is thrown.
1:      *
1:      * @param clob the Clob to check
1:      */
1:     private void assertInvalid(Clob clob) {
1:         try {
1:             clob.getSubString(1, (int)clob.length());
1:             fail("Clob should have been invalidated");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ215", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Returns a default suite running in a client-server environment.
1:      * <p>
1:      * The tests in this class is only meant to be run with client-server.
1:      *
1:      * @return A test suite.
1:      */
1:     public static Test suite() {
1:         return new CleanDatabaseTestSetup(
1:                 TestConfiguration.clientServerSuite(
1:                                                 LOBLocatorReleaseTest.class)) {
1:             /**
1:              * Populates two tables with LOB data.
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 s.executeUpdate("create table LOBLOC_NO_NULLS " +
1:                         "(dBlob BLOB not null, dClob CLOB not null)");
1:                 Connection con = s.getConnection();
1:                 PreparedStatement ps = con.prepareStatement(
1:                         "insert into LOBLOC_NO_NULLS values (?,?)");
1:                 String cContent = "A little test Clob";
1:                 byte[] bContent;
1:                 try {
1:                     bContent = cContent.getBytes("US-ASCII");
1:                 } catch (UnsupportedEncodingException uee) {
1:                     SQLException sqle = new SQLException();
1:                     sqle.initCause(uee);
1:                     throw sqle;
1:                 }
1:                 for (int i=0; i < 25; i++) {
1:                     ps.setBytes(1, bContent);
1:                     ps.setString(2, cContent);
1:                     ps.executeUpdate();
1:                 }
1:                 ps.close();
1:                 s.executeUpdate("create table LOBLOC_WITH_NULLS " +
1:                         "(dBlob BLOB, dClob CLOB)");
1:                 ps = con.prepareStatement(
1:                         "insert into LOBLOC_WITH_NULLS values (?,?)");
1:                 for (int i=0; i < 25; i++) {
1:                     if (i % 3 == 0) {
1:                         ps.setNull(1, Types.BLOB);
1:                     } else {
1:                         ps.setBytes(1, bContent);
1:                     }
1:                     if (i % 4 == 0) {
1:                         ps.setNull(2, Types.CLOB);
1:                     } else {
1:                         ps.setString(2, cContent);
1:                     }
1:                     ps.executeUpdate();
1:                 }
1:                 ps.close();
1:                 con.commit();
1:             }
1:         };
1:     }
1: }
============================================================================