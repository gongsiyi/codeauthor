1:e11756a: /**
1:e11756a:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConstantExpressionTest
1:e11756a:  * 
1:e11756a:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:e11756a:  * agreements. See the NOTICE file distributed with this work for additional information
1:e11756a:  * regarding copyright ownership. The ASF licenses this file to you under the Apache
1:e11756a:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:e11756a:  * with the License. You may obtain a copy of the License at
1:e11756a:  * 
1:e11756a:  * http://www.apache.org/licenses/LICENSE-2.0
1:e11756a:  * 
1:e11756a:  * Unless required by applicable law or agreed to in writing, software distributed under
1:e11756a:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e11756a:  * KIND, either express or implied. See the License for the specific language governing
1:e11756a:  * permissions and limitations under the License.
1:e11756a:  */
1:e11756a: package org.apache.derbyTesting.functionTests.tests.lang;
1:e11756a: 
1:e11756a: import java.sql.PreparedStatement;
1:e11756a: import java.sql.ResultSet;
1:e11756a: import java.sql.SQLException;
1:e11756a: import java.sql.Statement;
1:e11756a: 
1:e11756a: import junit.framework.Test;
1:e11756a: 
1:e11756a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:e11756a: import org.apache.derbyTesting.junit.JDBC;
1:e11756a: import org.apache.derbyTesting.junit.TestConfiguration;
1:e11756a: 
1:e11756a: /**
1:e11756a:  * Test case for constantExpression.sql, which provides tests
1:e11756a:  * for constant expression evaluation.
1:e11756a:  */
1:e11756a: public class ConstantExpressionTest extends BaseJDBCTestCase {
1:e11756a: 
1:e11756a:     /**
1:e11756a:      * Constructor. 
1:e11756a:      */
1:e11756a:     public ConstantExpressionTest(String name) throws SQLException {
1:e11756a:         super(name);
1:e11756a:     }
1:e11756a: 
1:e11756a:     public static Test suite(){    
1:e11756a:         return TestConfiguration.defaultSuite(
1:e11756a:                 ConstantExpressionTest.class);
1:e11756a:     }
1:e11756a: 
1:e11756a:     /**
1:e11756a:      * Create the table t1 with 3 rows, and two procedures.
1:e11756a:      * @throws SQLException 
1:e11756a:      *      if SQLException is thrown.
1:e11756a:      * @see junit.framework.TestCase#setUp()
1:e11756a:      */
1:e11756a:     public void setUp() throws SQLException{
1:e11756a:         String sql = "create table t1(c1 int)";
1:e11756a:         Statement st = createStatement();
1:e11756a:         st.executeUpdate(sql);
1:e11756a: 
1:e11756a:         sql = "insert into t1 values 1, 2, 3";
1:e11756a:         assertEquals("Fail to insert into table", 3, st.executeUpdate(sql));
1:e11756a: 
1:e11756a:         st.close();
1:e11756a:     }
1:e11756a: 
1:e11756a:     /** 
1:e11756a:      * Drop table t1 and close two procedures.
1:e11756a:      * @throws Exception 
1:e11756a:      *      if Exception is thrown.
1:e11756a:      * @see org.apache.derbyTesting.junit.BaseJDBCTestCase#tearDown()
1:e11756a:      */
1:e11756a:     public void tearDown() throws Exception {
1:e11756a:         dropTable("t1");
1:e11756a:         super.tearDown();
1:e11756a:     }
1:e11756a: 
1:e11756a:     /**
1:e11756a:      * Test false constant expressions.
1:e11756a:      * @throws SQLException
1:e11756a:      *      if SQLException is thrown.
1:e11756a:      */
1:e11756a:     public void testFalseConstantExpressions() throws SQLException{
1:e11756a:         String[] falseCases = {
1:e11756a:                 "1 <> 1", "1 = 1 and 1 = 0", "1 = (2 + 3 - 2)",
1:e11756a:                 "(case when 1 = 1 then 0 else 1 end) = 1",
1:e11756a:                 "1 in (2, 3, 4)", "1 between 2 and 3",
1:e11756a:         };
1:e11756a: 
1:e11756a:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:e11756a:                 ResultSet.CONCUR_READ_ONLY);
1:e11756a:         ResultSet rs;
1:e11756a:         String sql;
1:e11756a:         for(int i = 0; i < falseCases.length; i++){
1:e11756a:             sql = "select * from t1 where " + falseCases[i];
1:e11756a:             rs = st.executeQuery(sql);
1:e11756a:             JDBC.assertEmpty(rs);
1:e11756a:         }
1:e11756a: 
1:e11756a:         st.close();
1:e11756a: 
1:e11756a:         sql = "select * from t1 where ? = 1";
1:e11756a:         PreparedStatement ps1 = prepareStatement(sql);
1:e11756a:         ps1.setInt(1, 0);
1:e11756a:         rs = ps1.executeQuery();
1:e11756a:         JDBC.assertEmpty(rs);
1:e11756a:         ps1.close();
1:e11756a: 
1:e11756a:         sql = "select * from t1 where cast(? as int) = 1";
1:e11756a:         PreparedStatement ps2 = prepareStatement(sql);
1:e11756a:         ps2.setInt(1, 0);
1:e11756a:         rs = ps2.executeQuery();
1:e11756a:         JDBC.assertEmpty(rs);
1:e11756a:         ps2.close();
1:e11756a:     }
1:e11756a: 
1:e11756a:     /**
1:e11756a:      * Test true constant expressions.
1:e11756a:      * @throws SQLException
1:e11756a:      */
1:e11756a:     public void testTrueConstantExpressions() throws SQLException{
1:e11756a:         String[] trueCases = {
1:e11756a:                 "1 = 1", "1 = 0 or 1 = 1", "1 + 2 = (2 + 3 - 2)",
1:e11756a:                 "(case when 1 = 1 then 1 else 0 end) = 1",
1:e11756a:                 "1 in (2, 3, 4, 4, 3, 2, 1)", "1 + 1 between 0 and 3",
1:e11756a:         };
1:e11756a:         String[][] content = {
1:e11756a:                 { "1", }, { "2", }, { "3", }, 
1:e11756a:         };
1:e11756a: 
1:e11756a:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:e11756a:                 ResultSet.CONCUR_READ_ONLY);
1:e11756a:         ResultSet rs;
1:e11756a:         String sql;
1:e11756a:         for(int i = 0; i < trueCases.length; i++){
1:e11756a:             sql = "select * from t1 where " + trueCases[i];
1:e11756a:             rs = st.executeQuery(sql);
1:e11756a:             JDBC.assertFullResultSet(rs, content);
1:e11756a:         }
1:e11756a: 
1:e11756a:         st.close();
1:e11756a: 
1:e11756a:         sql = "select * from t1 where ? = 1";
1:e11756a:         PreparedStatement ps1 = prepareStatement(sql);
1:e11756a:         ps1.setInt(1, 1);
1:e11756a:         rs = ps1.executeQuery();
1:e11756a:         JDBC.assertFullResultSet(rs, content);
1:e11756a:         ps1.close();
1:e11756a: 
1:e11756a:         sql = "select * from t1 where cast(? as int) = 1";
1:e11756a:         PreparedStatement ps2 = prepareStatement(sql);
1:e11756a:         ps2.setInt(1, 1);
1:e11756a:         rs = ps2.executeQuery();
1:e11756a:         JDBC.assertFullResultSet(rs, content);
1:e11756a:         ps2.close();
1:e11756a:     }
1:e11756a: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e11756a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ConstantExpressionTest
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:  * agreements. See the NOTICE file distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file to you under the Apache
1:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software distributed under
1:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for constantExpression.sql, which provides tests
1:  * for constant expression evaluation.
1:  */
1: public class ConstantExpressionTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Constructor. 
1:      */
1:     public ConstantExpressionTest(String name) throws SQLException {
1:         super(name);
1:     }
1: 
1:     public static Test suite(){    
1:         return TestConfiguration.defaultSuite(
1:                 ConstantExpressionTest.class);
1:     }
1: 
1:     /**
1:      * Create the table t1 with 3 rows, and two procedures.
1:      * @throws SQLException 
1:      *      if SQLException is thrown.
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     public void setUp() throws SQLException{
1:         String sql = "create table t1(c1 int)";
1:         Statement st = createStatement();
1:         st.executeUpdate(sql);
1: 
1:         sql = "insert into t1 values 1, 2, 3";
1:         assertEquals("Fail to insert into table", 3, st.executeUpdate(sql));
1: 
1:         st.close();
1:     }
1: 
1:     /** 
1:      * Drop table t1 and close two procedures.
1:      * @throws Exception 
1:      *      if Exception is thrown.
1:      * @see org.apache.derbyTesting.junit.BaseJDBCTestCase#tearDown()
1:      */
1:     public void tearDown() throws Exception {
1:         dropTable("t1");
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Test false constant expressions.
1:      * @throws SQLException
1:      *      if SQLException is thrown.
1:      */
1:     public void testFalseConstantExpressions() throws SQLException{
1:         String[] falseCases = {
1:                 "1 <> 1", "1 = 1 and 1 = 0", "1 = (2 + 3 - 2)",
1:                 "(case when 1 = 1 then 0 else 1 end) = 1",
1:                 "1 in (2, 3, 4)", "1 between 2 and 3",
1:         };
1: 
1:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                 ResultSet.CONCUR_READ_ONLY);
1:         ResultSet rs;
1:         String sql;
1:         for(int i = 0; i < falseCases.length; i++){
1:             sql = "select * from t1 where " + falseCases[i];
1:             rs = st.executeQuery(sql);
1:             JDBC.assertEmpty(rs);
1:         }
1: 
1:         st.close();
1: 
1:         sql = "select * from t1 where ? = 1";
1:         PreparedStatement ps1 = prepareStatement(sql);
1:         ps1.setInt(1, 0);
1:         rs = ps1.executeQuery();
1:         JDBC.assertEmpty(rs);
1:         ps1.close();
1: 
1:         sql = "select * from t1 where cast(? as int) = 1";
1:         PreparedStatement ps2 = prepareStatement(sql);
1:         ps2.setInt(1, 0);
1:         rs = ps2.executeQuery();
1:         JDBC.assertEmpty(rs);
1:         ps2.close();
1:     }
1: 
1:     /**
1:      * Test true constant expressions.
1:      * @throws SQLException
1:      */
1:     public void testTrueConstantExpressions() throws SQLException{
1:         String[] trueCases = {
1:                 "1 = 1", "1 = 0 or 1 = 1", "1 + 2 = (2 + 3 - 2)",
1:                 "(case when 1 = 1 then 1 else 0 end) = 1",
1:                 "1 in (2, 3, 4, 4, 3, 2, 1)", "1 + 1 between 0 and 3",
1:         };
1:         String[][] content = {
1:                 { "1", }, { "2", }, { "3", }, 
1:         };
1: 
1:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                 ResultSet.CONCUR_READ_ONLY);
1:         ResultSet rs;
1:         String sql;
1:         for(int i = 0; i < trueCases.length; i++){
1:             sql = "select * from t1 where " + trueCases[i];
1:             rs = st.executeQuery(sql);
1:             JDBC.assertFullResultSet(rs, content);
1:         }
1: 
1:         st.close();
1: 
1:         sql = "select * from t1 where ? = 1";
1:         PreparedStatement ps1 = prepareStatement(sql);
1:         ps1.setInt(1, 1);
1:         rs = ps1.executeQuery();
1:         JDBC.assertFullResultSet(rs, content);
1:         ps1.close();
1: 
1:         sql = "select * from t1 where cast(? as int) = 1";
1:         PreparedStatement ps2 = prepareStatement(sql);
1:         ps2.setInt(1, 1);
1:         rs = ps2.executeQuery();
1:         JDBC.assertFullResultSet(rs, content);
1:         ps2.close();
1:     }
1: }
============================================================================