1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.load.ImportResultSetMetaData
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:2732872: import java.util.HashMap;
1:eac0369: import org.apache.derby.vti.VTIMetaDataTemplate;
1:eac0369: 
1:b1f84c1: import org.apache.derby.iapi.reference.Limits;
1:eac0369: 
1:eac0369: class ImportResultSetMetaData extends VTIMetaDataTemplate {
1:eac0369: 
1:eac0369:   private final int numberOfColumns;
1:eac0369:   private final String[] columnNames;
1:eac0369:   private final int[] columnWidths;
1:84e347a:   // types of the table columns that the data is imported. 
1:2732872:   private final int[] tableColumnTypes ;
1:2732872:   private final String[] columnTypeNames;
1:2732872:   private final HashMap udtClasses;
1:eac0369: 
1:84e347a:   public ImportResultSetMetaData(int numberOfColumns, 
1:84e347a:                                  String[] columnNames,
1:84e347a:                                  int[] columnWidths, 
1:2732872:                                  int[] tableColumnTypes,
1:2732872:                                  String[] columnTypeNames,
1:2732872:                                  HashMap udtClasses ) {
1:eac0369:     this.numberOfColumns = numberOfColumns;
1:eac0369:     this.columnNames = columnNames;
1:eac0369:     this.columnWidths = columnWidths;
1:84e347a:     this.tableColumnTypes = tableColumnTypes;
1:2732872:     this.columnTypeNames = columnTypeNames;
1:2732872:     this.udtClasses = udtClasses;
2:eac0369:   }
1:eac0369: 
1:eac0369: 	public int getColumnCount() {
1:eac0369:     return numberOfColumns;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	public String getColumnName(int column) {
1:84e347a:         return columnNames[column-1];
1:eac0369:   }
1:eac0369: 
1:eac0369: 	public int getColumnType(int column) {
1:84e347a: 
1:ea980d3:         /* By default all the data in the import file is assumed
1:ea980d3:          * to be in varchar format. Appropriate casting is applied 
1:ea980d3:          * while executing the select on the import VTI. Using this 
1:ea980d3:          * approach import vti does not have to do the data conversion, 
1:ea980d3:          * casting will do that. 
1:ea980d3:          *
1:ea980d3:          * But for some types like binary types there is no casting 
1:ea980d3:          * support from varchar or the data in the file is hex format, 
1:ea980d3:          * so data  needs to be converted to binary format first. And 
1:ea980d3:          * incase of blobs/clobs stored in an exteranl file memory usage 
1:ea980d3:          * will  be less if data is supplied as stream, instead of 
1:ea980d3:          * materializing the column data as one string. For these
1:ea980d3:          * types import vti result set will return resultset column
1:ea980d3:          * type is same as the column type of the import table. Data 
1:ea980d3:          * for the blob, clob or binary type columns is returned by 
1:ea980d3:          * the getXXX() calls used by the VTI Resultset to read the 
1:ea980d3:          * data for that particular type. For example, Blob data 
1:ea980d3:          * is read using getBlob() method, which will return a 
1:ea980d3:          * Blob object that contains the data in the import file 
1:ea980d3:          * for a column. 
1:ea980d3:          */
1:84e347a: 
1:ea980d3:         int colType;
1:ea980d3:         switch (tableColumnTypes[column -1])
1:ea980d3:         {
1:ea980d3:         case java.sql.Types.BLOB: 
1:ea980d3:             // blob 
1:ea980d3:             colType = java.sql.Types.BLOB;
1:ea980d3:             break;
1:ea980d3:         case java.sql.Types.CLOB: 
1:ea980d3:             // clob 
1:ea980d3:             colType = java.sql.Types.CLOB;
1:ea980d3:             break;
1:ea980d3:         case java.sql.Types.LONGVARBINARY: 
1:ea980d3:             // LONG VARCHAR FOR BIT DATA
1:ea980d3:             colType = java.sql.Types.LONGVARBINARY; 
1:ea980d3:             break;
1:ea980d3:         case java.sql.Types.VARBINARY: 
1:ea980d3:             // VARCHAR FOR BIT DATA
1:ea980d3:             colType = java.sql.Types.VARBINARY;
1:ea980d3:             break;
1:ea980d3:         case java.sql.Types.BINARY: 
1:ea980d3:             // CHAR FOR BIT DATA 
1:ea980d3:             colType = java.sql.Types.BINARY;
1:ea980d3:             break;
1:2732872:         case java.sql.Types.JAVA_OBJECT: 
1:2732872:             // User-defined type
1:2732872:             colType = java.sql.Types.JAVA_OBJECT;
1:2732872:             break;
1:ea980d3:         default: 
1:ea980d3:             // all other data in the import file is 
1:ea980d3:             // assumed to be in varchar format.
1:ea980d3:             colType = java.sql.Types.VARCHAR;
1:ea980d3:         }
1:ea980d3: 
1:ea980d3:         return colType;
1:84e347a:     }
1:eac0369: 
1:eac0369: 	public int isNullable(int column) {
1:eac0369:     return columnNullableUnknown;
1:eac0369:   }
1:eac0369: 	public int getColumnDisplaySize(int column) {
1:eac0369:     if (columnWidths == null)
1:b1f84c1:        return Limits.DB2_VARCHAR_MAXWIDTH;
2:84e347a:     else
1:eac0369:        return columnWidths[column-1];
1:eac0369:   }
1:84e347a: 
1:2732872: 	public  String getColumnTypeName(int column) throws SQLException
1:2732872:     {
1:2732872: 		return columnTypeNames[ column - 1 ];
1:2732872: 	}
1:2732872: 
1:2732872:     /**
1:2732872:      * Get the class bound to a UDT column.
1:2732872:      */
1:de00d25:     Class getUDTClass( int column ) throws SQLException
1:2732872:     {
1:2732872:         String columnName = getColumnName( column );
1:2732872:         
1:2732872:         return (Class) udtClasses.get( getColumnName( column ) );
1:2732872:     }
1:2732872:     
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:de00d25
/////////////////////////////////////////////////////////////////////////
1:     Class getUDTClass( int column ) throws SQLException
commit:2732872
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:   private final int[] tableColumnTypes ;
1:   private final String[] columnTypeNames;
1:   private final HashMap udtClasses;
1:                                  int[] tableColumnTypes,
1:                                  String[] columnTypeNames,
1:                                  HashMap udtClasses ) {
1:     this.columnTypeNames = columnTypeNames;
1:     this.udtClasses = udtClasses;
/////////////////////////////////////////////////////////////////////////
1:         case java.sql.Types.JAVA_OBJECT: 
1:             // User-defined type
1:             colType = java.sql.Types.JAVA_OBJECT;
1:             break;
/////////////////////////////////////////////////////////////////////////
1: 	public  String getColumnTypeName(int column) throws SQLException
1:     {
1: 		return columnTypeNames[ column - 1 ];
1: 	}
1: 
1:     /**
1:      * Get the class bound to a UDT column.
1:      */
0:     public Class getUDTClass( int column ) throws SQLException
1:     {
1:         String columnName = getColumnName( column );
1:         
1:         return (Class) udtClasses.get( getColumnName( column ) );
1:     }
1:     
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:ea980d3
/////////////////////////////////////////////////////////////////////////
1:         /* By default all the data in the import file is assumed
1:          * to be in varchar format. Appropriate casting is applied 
1:          * while executing the select on the import VTI. Using this 
1:          * approach import vti does not have to do the data conversion, 
1:          * casting will do that. 
1:          *
1:          * But for some types like binary types there is no casting 
1:          * support from varchar or the data in the file is hex format, 
1:          * so data  needs to be converted to binary format first. And 
1:          * incase of blobs/clobs stored in an exteranl file memory usage 
1:          * will  be less if data is supplied as stream, instead of 
1:          * materializing the column data as one string. For these
1:          * types import vti result set will return resultset column
1:          * type is same as the column type of the import table. Data 
1:          * for the blob, clob or binary type columns is returned by 
1:          * the getXXX() calls used by the VTI Resultset to read the 
1:          * data for that particular type. For example, Blob data 
1:          * is read using getBlob() method, which will return a 
1:          * Blob object that contains the data in the import file 
1:          * for a column. 
1:          */
1:         int colType;
1:         switch (tableColumnTypes[column -1])
1:         {
1:         case java.sql.Types.BLOB: 
1:             // blob 
1:             colType = java.sql.Types.BLOB;
1:             break;
1:         case java.sql.Types.CLOB: 
1:             // clob 
1:             colType = java.sql.Types.CLOB;
1:             break;
1:         case java.sql.Types.LONGVARBINARY: 
1:             // LONG VARCHAR FOR BIT DATA
1:             colType = java.sql.Types.LONGVARBINARY; 
1:             break;
1:         case java.sql.Types.VARBINARY: 
1:             // VARCHAR FOR BIT DATA
1:             colType = java.sql.Types.VARBINARY;
1:             break;
1:         case java.sql.Types.BINARY: 
1:             // CHAR FOR BIT DATA 
1:             colType = java.sql.Types.BINARY;
1:             break;
1:         default: 
1:             // all other data in the import file is 
1:             // assumed to be in varchar format.
1:             colType = java.sql.Types.VARCHAR;
1:         }
1: 
1:         return colType;
commit:84e347a
/////////////////////////////////////////////////////////////////////////
1:   // types of the table columns that the data is imported. 
0:   private final int[] tableColumnTypes ; 
1:   public ImportResultSetMetaData(int numberOfColumns, 
1:                                  String[] columnNames,
1:                                  int[] columnWidths, 
0:                                  int[] tableColumnTypes) {
1:     this.tableColumnTypes = tableColumnTypes;
/////////////////////////////////////////////////////////////////////////
1:         return columnNames[column-1];
1: 
0:         // if the table column type is BLOB/CLOB , then the 
0:         // data in the import files will converted to 
0:         // BLOB/CLOB type objects. So the vti result column 
0:         // type for blob/clob is same as  table column type. 
0:         // Data for Other types is considered is of VARCHAR type, 
0:         // and they are casted to table column type, if needed 
0:         // while doing the select from the VTI. 
1: 
0: 		if (tableColumnTypes[column -1] ==  java.sql.Types.BLOB)
0: 			return java.sql.Types.BLOB;
1: 		else
0:             if (tableColumnTypes[column -1] ==  java.sql.Types.CLOB)
0:                 return java.sql.Types.CLOB;
1:             else
0:                 return java.sql.Types.VARCHAR;
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1:        return Limits.DB2_VARCHAR_MAXWIDTH;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.ImportResultSetMetaData
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: import java.sql.SQLException;
1: import org.apache.derby.vti.VTIMetaDataTemplate;
1: 
0: import org.apache.derby.iapi.reference.DB2Limit;
1: 
1: class ImportResultSetMetaData extends VTIMetaDataTemplate {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:   private final int numberOfColumns;
1:   private final String[] columnNames;
1:   private final int[] columnWidths;
1: 
0:   public ImportResultSetMetaData(int numberOfColumns, String[] columnNames,
0:   int[] columnWidths) {
1:     this.numberOfColumns = numberOfColumns;
1:     this.columnNames = columnNames;
1:     this.columnWidths = columnWidths;
1:   }
1: 
1: 	public int getColumnCount() {
1:     return numberOfColumns;
1:   }
1: 
1: 	public String getColumnName(int column) {
0:     return columnNames[column-1];
1:   }
1: 
1: 	public int getColumnType(int column) {
0:     return java.sql.Types.VARCHAR;
1:   }
1: 
1: 	public int isNullable(int column) {
1:     return columnNullableUnknown;
1:   }
1: 	public int getColumnDisplaySize(int column) {
1:     if (columnWidths == null)
0:        return DB2Limit.DB2_VARCHAR_MAXWIDTH;
0:     else
1:        return columnWidths[column-1];
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: import java.sql.SQLException;
0: import org.apache.derby.vti.VTIMetaDataTemplate;
0: 
0: import org.apache.derby.iapi.reference.DB2Limit;
0: 
0: class ImportResultSetMetaData extends VTIMetaDataTemplate {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:   private final int numberOfColumns;
0:   private final String[] columnNames;
0:   private final int[] columnWidths;
0: 
0:   public ImportResultSetMetaData(int numberOfColumns, String[] columnNames,
0:   int[] columnWidths) {
0:     this.numberOfColumns = numberOfColumns;
0:     this.columnNames = columnNames;
0:     this.columnWidths = columnWidths;
0:   }
0: 
0: 	public int getColumnCount() {
0:     return numberOfColumns;
0:   }
0: 
0: 	public String getColumnName(int column) {
0:     return columnNames[column-1];
0:   }
0: 
0: 	public int getColumnType(int column) {
0:     return java.sql.Types.VARCHAR;
0:   }
0: 
0: 	public int isNullable(int column) {
0:     return columnNullableUnknown;
0:   }
0: 	public int getColumnDisplaySize(int column) {
0:     if (columnWidths == null)
0:        return DB2Limit.DB2_VARCHAR_MAXWIDTH;
0:     else
0:        return columnWidths[column-1];
0:   }
0: }
============================================================================