1:5314923: package org.apache.derbyTesting.functionTests.tests.store;
4:5314923: 
1:5314923: import java.sql.CallableStatement;
1:5314923: import java.sql.Connection;
1:5314923: import java.sql.PreparedStatement;
1:5314923: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Assert;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:5314923: 
1:5314923: 
1:5314923: /*
1:5314923: Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
1:5314923: 
1:5314923: Licensed to the Apache Software Foundation (ASF) under one or more
1:5314923: contributor license agreements.  See the NOTICE file distributed with
1:5314923: this work for additional information regarding copyright ownership.
1:5314923: The ASF licenses this file to you under the Apache License, Version 2.0
1:5314923: (the "License"); you may not use this file except in compliance with
1:5314923: the License.  You may obtain a copy of the License at
1:5314923: 
1:5314923:    http://www.apache.org/licenses/LICENSE-2.0
1:5314923: 
1:5314923: Unless required by applicable law or agreed to in writing, software
1:5314923: distributed under the License is distributed on an "AS IS" BASIS,
1:5314923: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5314923: See the License for the specific language governing permissions and
1:5314923: limitations under the License.
1:5314923: 
1:5314923: */
1:5314923: 
1:5314923: 
1:5314923: /**
1:5314923: 
1:5314923: Test to reproduce DERBY-3625, failure in inline compress, in some 
1:5314923: circumstances depending on exact size of data and state of pages during
1:5314923: the defragment phase.  
1:5314923: 
1:5314923: Would throw following error:
1:5314923: 
1:5314923: ERROR XSDA3: Limitation: Record cannot be updated or inserted due to lack of 
1:5314923: space on the page. Use the parameters derby.storage.pageSize and/or 
1:5314923: derby.storage.pageReservedSpace to work around this limitation.^M
1:5314923: 
1:5314923: **/
1:5314923: 
1:5314923: public class Derby3625Test extends StoreBaseTest
1:5314923: {
1:5314923:     /**************************************************************************
1:5314923:      * Fields of the class
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Constructors for This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Private/Protected methods of This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Public Methods of This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Public Methods of XXXX class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     public Derby3625Test(String name) 
1:5314923:     {
1:5314923:         super(name);
1:5314923:     }
1:5314923:     
1:5314923:     /**
1:5314923:      * DERBY-3625 test case
1:5314923:      * <p>
1:5314923:      * Derby 3625 is caused by a bug where compress calculates the space
1:5314923:      * needed to fit a moved row from page A to B, and assumes that the space
1:5314923:      * required on page B is the same on page A.  The problem is that in 
1:5314923:      * some cases due to the stored format of the changing record id the space
1:5314923:      * required on B may be more than A.  In the case where there is exactly
1:5314923:      * enough space by the initial calculation the move fails because one or
1:5314923:      * 3 more bytes may be necessary to make the move and the compress fails.
1:5314923:      * <p>
1:5314923:      * To test:
1:5314923:      *   fill page 1 with dummy rows, page 1 has a special control row on it
1:5314923:      *       so it can't ever be empty so use page 2 instead.
1:5314923:      *   fill page 2 with dummy rows such and empty it such that the 
1:5314923:      *       next row id on it is greater that 64 which takes 2 bytes to store 
1:5314923:      *       vs. 1 for rowid's less * that 64.
1:5314923:      *   fill page 3 and 4 with some dummy rows which will be deleted to give
1:5314923:      *       compress table room to work during defragment.
1:5314923:      *   fill page 4 with 2 rows which fit on page 2 with 1 byte stored record
1:5314923:      *        id's but will not fit with 2 byte stored record id's.  
1:5314923:      *        These will not be deleted and the bug is exercised as 
1:5314923:      *        defragment tries to move these rows to page 2 after it has 
1:5314923:      *        been reclaimed as a free page.
1:5314923:      **/
1:5314923:     public void testTwoToOneByteCase()
1:5314923:         throws SQLException
1:5314923:     {
1:5314923:         PreparedStatement insert_stmt = 
1:5314923:             prepareStatement("INSERT INTO testCompress VALUES(?, ?, ?)");
1:5314923: 
1:5314923:         // page 0 - container info/bit map, does not affect test
1:5314923: 
1:5314923:         // page 1 - fill it up and leave rows on it.  page 1 has a special
1:5314923:         // row on it that can never be deleted so this page never can be
1:5314923:         // made free.
1:5314923: 
1:5314923:         // insert one blob padded row that will fill page 1
1:5314923:         byte[] pad_blob = new byte[32630];
1:5314923:         insert_stmt.setInt(     1, 1);
1:5314923:         insert_stmt.setBytes(   2, pad_blob);
1:5314923:         insert_stmt.setString(  3, "page 1");
1:5314923:         insert_stmt.executeUpdate();
1:5314923: 
1:5314923:         // page 2 - fill it completely with enough rows such that future
1:5314923:         // rows will force a 2 byte row id, ie. more than 64 rows.  Later
1:5314923:         // in this test all the rows will be deleted from this page so that
1:5314923:         // the page is on the free list for compress defragment to use it.
1:5314923: 
1:5314923:         pad_blob = new byte[302];
1:5314923:         insert_stmt.setInt(     1, 2);
1:5314923:         insert_stmt.setBytes(   2, pad_blob);
1:5314923:         insert_stmt.setString(  3, "page 2");
1:5314923:         for (int i = 0; i < 98; i++)
1:5314923:         {
1:5314923:             insert_stmt.executeUpdate();
1:5314923:         }
1:5314923: 
1:5314923:         // page 3 - fill it for another free page.
1:5314923:         insert_stmt.setInt(     1, 3);
1:5314923:         insert_stmt.setBytes(   2, pad_blob);
1:5314923:         insert_stmt.setString(  3, "page 3");
1:5314923:         for (int i = 0; i < 98; i++)
1:5314923:         {
1:5314923:             insert_stmt.executeUpdate();
1:5314923:         }
1:5314923: 
1:5314923:         // page 4 -  2 rows, with one byte free.  When these are moved to 
1:5314923:         // a free page with bigger rowid's they will take 2 more bytes and
1:5314923:         // will not both fit on the page.
1:5314923:         //
1:5314923:         // I didn't track it down, but for some reason I could not fill a page
1:5314923:         // completely if there was only one row on the page, it kept turning
1:5314923:         // the blob column into a long row.  I was just picking magic numbers
1:5314923:         // for the blob column to make it fit.
1:5314923:         //
1:5314923:         // With 2 rows I was able to fill the page up to one empty byte.  
1:5314923:         // Then with the bug the first row would move to page 2 which is
1:5314923:         // now free but take one more byte than it did on this page.  And
1:5314923:         // finally when the second row was moved it would think it would fit
1:5314923:         // but throw an exception when the rowid compressed version would
1:5314923:         // cause it to be one byte bigger than the original row.
1:5314923:         pad_blob = new byte[100];
1:5314923:         insert_stmt.setInt(     1, 4);
1:5314923:         insert_stmt.setBytes(   2, pad_blob);
1:5314923:         insert_stmt.setString(  3, "page 4");
1:5314923:         insert_stmt.executeUpdate();
1:5314923:         pad_blob = new byte[32534];
1:5314923:         insert_stmt.setInt(     1, 4);
1:5314923:         insert_stmt.setBytes(   2, pad_blob);
1:5314923:         insert_stmt.setString(  3, "page 4");
1:5314923:         insert_stmt.executeUpdate();
1:5314923: 
1:5314923:         commit();
1:5314923: 
1:5314923:         int space_info[] = getSpaceInfo("APP", "TESTCOMPRESS", true);
1:5314923: 
1:5314923:         // space after initial insert setup should be 4 pages
1:5314923:         // 0 - container info - not reflected in allocated page count, 
1:5314923:         // 1 - dummy data left on the page, 
1:5314923:         // 2 - bunch of short records to be deleted to make free page
1:5314923:         // 3 - bunch of short records to be deleted to make free page
1:5314923:         // 4 - short and long record to exercise bug.
1:5314923:         Assert.assertEquals(
1:5314923:             "wrong allocated page count in test setup", 
1:5314923:             4, space_info[SPACE_INFO_NUM_ALLOC]);
1:5314923: 
1:5314923:         Statement stmt = createStatement();
1:5314923: 
1:5314923:         // Delete rows on page 2 and 3 to allow defragment to try and move
1:5314923:         // the page 4 row up.
1:5314923:         stmt.executeUpdate("DELETE FROM testCompress where id = 2 or id = 3");
1:5314923:         commit();
1:5314923: 
1:5314923:         // Before fixing the bug, this compress call would throw the 
1:5314923:         // following exception:
1:5314923:         //
1:5314923:         // ERROR XSDA3: Limitation: Record cannot be updated or inserted due 
1:5314923:         // to lack of space on the page. Use the parameters 
1:5314923:         // derby.storage.pageSize and/or derby.storage.pageReservedSpace to 
1:5314923:         // work around this limitation.
1:5314923: 
1:5314923:         CallableStatement call_compress = 
1:5314923:             prepareCall(
1:5314923:                 "CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
1:5314923: 
1:5314923:         call_compress.setString(1, "APP");
1:5314923:         call_compress.setString(2, "TESTCOMPRESS");
1:5314923:         call_compress.executeUpdate();
1:5314923: 
1:5314923:         commit();
1:5314923: 
1:5314923:         space_info = getSpaceInfo("APP", "TESTCOMPRESS", true);
1:5314923: 
1:5314923:         // space after the test should be 3 pages: 
1:5314923:         // 0 - container info - not reflected in allocated page count, 
1:5314923:         // 1 - dummy data left on the page, 
1:5314923:         // 2 - one short record, but long record did not fit
1:5314923:         // 3 - long record on an empty page.
1:5314923:         Assert.assertEquals(
1:5314923:             "wrong allocated page count", 3, space_info[SPACE_INFO_NUM_ALLOC]);
1:5314923: 
1:5314923:         insert_stmt.close();
1:5314923:     }
1:5314923:     
1:5314923:     protected static Test baseSuite(String name) 
1:5314923:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:5314923:         suite.addTestSuite(Derby3625Test.class);
1:5314923:         return new CleanDatabaseTestSetup(
1:5314923:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
1:5314923:         {
1:5314923:             /**
1:5314923:              * Creates the tables used in the test cases.
1:5314923:              * @exception SQLException if a database error occurs
1:5314923:              */
1:5314923:             protected void decorateSQL(Statement stmt) throws SQLException
1:5314923:             {
1:5314923:                 Connection conn = stmt.getConnection();
1:5314923: 
1:5314923:                 CallableStatement set_dbprop =  conn.prepareCall(
1:5314923:                     "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:5314923:                 set_dbprop.setString(1,"derby.storage.pageReservedSpace");
1:5314923:                 set_dbprop.setString(2,"0");
1:5314923:                 set_dbprop.executeUpdate();
1:5314923:                 
1:5314923:                 // create a table, with blob it will be 32k page size
1:5314923:                 stmt.executeUpdate(
1:5314923:                     "CREATE TABLE testCompress " +
1:5314923:                         "(id int, padcol blob(1M), c varchar(200))");
1:5314923: 
1:5314923:                 set_dbprop.setString(2, null);
1:5314923:                 set_dbprop.executeUpdate();
1:5314923: 
1:5314923:                 set_dbprop.close();
1:5314923: 
1:5314923:                 conn.setAutoCommit(false);
1:5314923:             }
1:5314923:         };
1:5314923:     }
1:5314923: 
1:5314923:     public static Test suite() 
1:5314923:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Derby3625Test");
1:5314923:         suite.addTest(baseSuite("Derby36625Test:embedded"));
1:5314923:         return suite;
1:5314923:     }
1:5314923: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Statement;
1: import junit.framework.Assert;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Derby3625Test");
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5314923
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
1: 
1: /*
1: Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: 
1: /**
1: 
1: Test to reproduce DERBY-3625, failure in inline compress, in some 
1: circumstances depending on exact size of data and state of pages during
1: the defragment phase.  
1: 
1: Would throw following error:
1: 
1: ERROR XSDA3: Limitation: Record cannot be updated or inserted due to lack of 
1: space on the page. Use the parameters derby.storage.pageSize and/or 
1: derby.storage.pageReservedSpace to work around this limitation.^M
1: 
1: **/
1: 
1: public class Derby3625Test extends StoreBaseTest
1: {
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: 
1:     public Derby3625Test(String name) 
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * DERBY-3625 test case
1:      * <p>
1:      * Derby 3625 is caused by a bug where compress calculates the space
1:      * needed to fit a moved row from page A to B, and assumes that the space
1:      * required on page B is the same on page A.  The problem is that in 
1:      * some cases due to the stored format of the changing record id the space
1:      * required on B may be more than A.  In the case where there is exactly
1:      * enough space by the initial calculation the move fails because one or
1:      * 3 more bytes may be necessary to make the move and the compress fails.
1:      * <p>
1:      * To test:
1:      *   fill page 1 with dummy rows, page 1 has a special control row on it
1:      *       so it can't ever be empty so use page 2 instead.
1:      *   fill page 2 with dummy rows such and empty it such that the 
1:      *       next row id on it is greater that 64 which takes 2 bytes to store 
1:      *       vs. 1 for rowid's less * that 64.
1:      *   fill page 3 and 4 with some dummy rows which will be deleted to give
1:      *       compress table room to work during defragment.
1:      *   fill page 4 with 2 rows which fit on page 2 with 1 byte stored record
1:      *        id's but will not fit with 2 byte stored record id's.  
1:      *        These will not be deleted and the bug is exercised as 
1:      *        defragment tries to move these rows to page 2 after it has 
1:      *        been reclaimed as a free page.
1:      **/
1:     public void testTwoToOneByteCase()
1:         throws SQLException
1:     {
1:         PreparedStatement insert_stmt = 
1:             prepareStatement("INSERT INTO testCompress VALUES(?, ?, ?)");
1: 
1:         // page 0 - container info/bit map, does not affect test
1: 
1:         // page 1 - fill it up and leave rows on it.  page 1 has a special
1:         // row on it that can never be deleted so this page never can be
1:         // made free.
1: 
1:         // insert one blob padded row that will fill page 1
1:         byte[] pad_blob = new byte[32630];
1:         insert_stmt.setInt(     1, 1);
1:         insert_stmt.setBytes(   2, pad_blob);
1:         insert_stmt.setString(  3, "page 1");
1:         insert_stmt.executeUpdate();
1: 
1:         // page 2 - fill it completely with enough rows such that future
1:         // rows will force a 2 byte row id, ie. more than 64 rows.  Later
1:         // in this test all the rows will be deleted from this page so that
1:         // the page is on the free list for compress defragment to use it.
1: 
1:         pad_blob = new byte[302];
1:         insert_stmt.setInt(     1, 2);
1:         insert_stmt.setBytes(   2, pad_blob);
1:         insert_stmt.setString(  3, "page 2");
1:         for (int i = 0; i < 98; i++)
1:         {
1:             insert_stmt.executeUpdate();
1:         }
1: 
1:         // page 3 - fill it for another free page.
1:         insert_stmt.setInt(     1, 3);
1:         insert_stmt.setBytes(   2, pad_blob);
1:         insert_stmt.setString(  3, "page 3");
1:         for (int i = 0; i < 98; i++)
1:         {
1:             insert_stmt.executeUpdate();
1:         }
1: 
1:         // page 4 -  2 rows, with one byte free.  When these are moved to 
1:         // a free page with bigger rowid's they will take 2 more bytes and
1:         // will not both fit on the page.
1:         //
1:         // I didn't track it down, but for some reason I could not fill a page
1:         // completely if there was only one row on the page, it kept turning
1:         // the blob column into a long row.  I was just picking magic numbers
1:         // for the blob column to make it fit.
1:         //
1:         // With 2 rows I was able to fill the page up to one empty byte.  
1:         // Then with the bug the first row would move to page 2 which is
1:         // now free but take one more byte than it did on this page.  And
1:         // finally when the second row was moved it would think it would fit
1:         // but throw an exception when the rowid compressed version would
1:         // cause it to be one byte bigger than the original row.
1:         pad_blob = new byte[100];
1:         insert_stmt.setInt(     1, 4);
1:         insert_stmt.setBytes(   2, pad_blob);
1:         insert_stmt.setString(  3, "page 4");
1:         insert_stmt.executeUpdate();
1:         pad_blob = new byte[32534];
1:         insert_stmt.setInt(     1, 4);
1:         insert_stmt.setBytes(   2, pad_blob);
1:         insert_stmt.setString(  3, "page 4");
1:         insert_stmt.executeUpdate();
1: 
1:         commit();
1: 
1:         int space_info[] = getSpaceInfo("APP", "TESTCOMPRESS", true);
1: 
1:         // space after initial insert setup should be 4 pages
1:         // 0 - container info - not reflected in allocated page count, 
1:         // 1 - dummy data left on the page, 
1:         // 2 - bunch of short records to be deleted to make free page
1:         // 3 - bunch of short records to be deleted to make free page
1:         // 4 - short and long record to exercise bug.
1:         Assert.assertEquals(
1:             "wrong allocated page count in test setup", 
1:             4, space_info[SPACE_INFO_NUM_ALLOC]);
1: 
1:         Statement stmt = createStatement();
1: 
1:         // Delete rows on page 2 and 3 to allow defragment to try and move
1:         // the page 4 row up.
1:         stmt.executeUpdate("DELETE FROM testCompress where id = 2 or id = 3");
1:         commit();
1: 
1:         // Before fixing the bug, this compress call would throw the 
1:         // following exception:
1:         //
1:         // ERROR XSDA3: Limitation: Record cannot be updated or inserted due 
1:         // to lack of space on the page. Use the parameters 
1:         // derby.storage.pageSize and/or derby.storage.pageReservedSpace to 
1:         // work around this limitation.
1: 
1:         CallableStatement call_compress = 
1:             prepareCall(
1:                 "CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
1: 
1:         call_compress.setString(1, "APP");
1:         call_compress.setString(2, "TESTCOMPRESS");
1:         call_compress.executeUpdate();
1: 
1:         commit();
1: 
1:         space_info = getSpaceInfo("APP", "TESTCOMPRESS", true);
1: 
1:         // space after the test should be 3 pages: 
1:         // 0 - container info - not reflected in allocated page count, 
1:         // 1 - dummy data left on the page, 
1:         // 2 - one short record, but long record did not fit
1:         // 3 - long record on an empty page.
1:         Assert.assertEquals(
1:             "wrong allocated page count", 3, space_info[SPACE_INFO_NUM_ALLOC]);
1: 
1:         insert_stmt.close();
1:     }
1:     
1:     protected static Test baseSuite(String name) 
1:     {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(Derby3625Test.class);
1:         return new CleanDatabaseTestSetup(
1:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
1:         {
1:             /**
1:              * Creates the tables used in the test cases.
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 Connection conn = stmt.getConnection();
1: 
1:                 CallableStatement set_dbprop =  conn.prepareCall(
1:                     "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:                 set_dbprop.setString(1,"derby.storage.pageReservedSpace");
1:                 set_dbprop.setString(2,"0");
1:                 set_dbprop.executeUpdate();
1:                 
1:                 // create a table, with blob it will be 32k page size
1:                 stmt.executeUpdate(
1:                     "CREATE TABLE testCompress " +
1:                         "(id int, padcol blob(1M), c varchar(200))");
1: 
1:                 set_dbprop.setString(2, null);
1:                 set_dbprop.executeUpdate();
1: 
1:                 set_dbprop.close();
1: 
1:                 conn.setAutoCommit(false);
1:             }
1:         };
1:     }
1: 
1:     public static Test suite() 
1:     {
0:         TestSuite suite = new TestSuite("Derby3625Test");
1:         suite.addTest(baseSuite("Derby36625Test:embedded"));
1:         return suite;
1:     }
1: }
============================================================================