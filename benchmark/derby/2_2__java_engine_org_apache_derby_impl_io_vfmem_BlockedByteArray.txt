1:33467a5: /*
2:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.vfmem.BlockedByteArray
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io.vfmem;
1:33467a5: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7a7a1a3: 
1:33467a5: /**
1:33467a5:  * Stores data in blocks, and supports reading/writing data from/into these
1:33467a5:  * blocks.
2:33467a5:  * <p>
1:33467a5:  * The blocked array is expanded and shrunk as required.
1:33467a5:  */
1:33467a5: public class BlockedByteArray {
1:33467a5: 
1:33467a5:     /** Constant for 4 KB. */
1:33467a5:     private static final int _4K = 4*1024;
1:33467a5:     /** Constant for 8 KB. */
1:33467a5:     private static final int _8K = 8*1024;
1:33467a5:     /** Constant for 16 KB. */
1:33467a5:     private static final int _16K = 16*1024;
1:33467a5:     /** Constant for 32 KB. */
1:33467a5:     private static final int _32K = 32*1024;
1:33467a5:     /** The default block size. */
1:33467a5:     private static final int DEFAULT_BLOCKSIZE = _4K;
1:33467a5: 
1:33467a5:     /** The default number of slots for holding a block of data. */
1:7a7a1a3:     private static final int INITIAL_BLOCK_HOLDER_SIZE = 1024;
1:7a7a1a3:     /**
1:7a7a1a3:      * Minimum number of holder slots to grow with when the block holder array
1:7a7a1a3:      * has to grow to be able to reference all the data arrays.
1:7a7a1a3:      */
1:7a7a1a3:     private static final int MIN_HOLDER_GROWTH = 1024;
1:33467a5: 
1:33467a5:     /** References to blocks of data. */
1:33467a5:     private byte[][] blocks;
1:33467a5:     /** The size of a block of data (the allocation unit). */
1:33467a5:     private int blockSize;
1:33467a5:     /** The number of allocated blocks. */
1:33467a5:     private int allocatedBlocks;
1:33467a5:     /** The number of bytes stored in the blocked byte array. */
1:33467a5:     private long length;
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a new blocked byte array with the default number of slots to
1:33467a5:      * hold byte arrays (blocks).
1:33467a5:      * <p>
1:33467a5:      * No blocks are pre-allocated.
1:33467a5:      *
1:33467a5:      * @see #INITIAL_BLOCK_HOLDER_SIZE
1:33467a5:      */
1:33467a5:     public BlockedByteArray() {
1:33467a5:         blocks = new byte[INITIAL_BLOCK_HOLDER_SIZE][];
3:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the byte at the given position.
1:33467a5:      *
1:33467a5:      * @param pos position to read from
1:33467a5:      * @return A single byte.
1:33467a5:      */
1:33467a5:     public synchronized int read(long pos) {
1:33467a5:         if (pos < length) {
1:33467a5:             int block = (int)(pos / blockSize);
1:33467a5:             int index = (int)(pos % blockSize);
1:33467a5:             return (blocks[block][index] & 0xFF);
1:33467a5:         }
1:33467a5:         return -1;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:7a7a1a3:      * Reads up to {@code len} bytes.
1:33467a5:      *
1:33467a5:      * @param pos the position to start reading at
1:33467a5:      * @param buf the destination buffer
1:33467a5:      * @param offset offset into the destination buffer
1:33467a5:      * @param len the number of bytes to read
1:33467a5:      * @return The number of bytes read.
1:33467a5:      */
1:33467a5:      public synchronized int read(long pos, byte[] buf, int offset, int len) {
1:33467a5:         // Due to the loop condition below, we have to check the length here.
1:33467a5:         // The check is only required because calling code expects an exception.
1:33467a5:         if (len < 0) {
1:33467a5:             throw new ArrayIndexOutOfBoundsException(len);
1:33467a5:         }
1:33467a5:         // Check for EOF.
1:33467a5:         if (pos >= length) {
1:33467a5:             return -1;
1:33467a5:         }
1:33467a5:         // Adjust the length if required.
1:33467a5:         len = (int)Math.min(len, length - pos);
1:33467a5:         int block = (int)(pos / blockSize);
1:33467a5:         int index = (int)(pos % blockSize);
1:33467a5:         int read = 0;
1:33467a5:         while (read < len) {
1:33467a5:             int toRead = Math.min(len - read, blockSize - index);
1:33467a5:             System.arraycopy(blocks[block], index, buf, offset + read, toRead);
1:33467a5:             read += toRead;
1:33467a5:             block++;
1:33467a5:             index = 0;
1:33467a5:         }
1:33467a5:         return read;
1:33467a5:      }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the number of bytes allocated.
1:33467a5:      *
1:33467a5:      * @return Bytes allocated.
1:33467a5:      */
1:33467a5:     public synchronized long length() {
1:33467a5:         return length;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Changes the allocated length of the data.
1:33467a5:      * <p>
1:33467a5:      * If the new length is larger than the current length, the blocked byte
1:33467a5:      * array will be extended with new blocks. If the new length is smaller,
1:33467a5:      * existing (allocated) blocks will be removed if possible.
1:33467a5:      *
1:33467a5:      * @param newLength the new length of the allocated data in bytes
1:33467a5:      */
1:33467a5:     public synchronized void setLength(final long newLength) {
1:7a7a1a3:         // If capacity is requested before any writes has taken place.
1:7a7a1a3:         if (blockSize == 0) {
1:7a7a1a3:             checkBlockSize((int)Math.min(Integer.MAX_VALUE, newLength));
1:7a7a1a3:         }
1:edf4fc7:         final long currentCapacity = (long)allocatedBlocks * blockSize;
1:33467a5:         if (newLength > currentCapacity) {
1:33467a5:             // Allocate more blocks.
1:33467a5:             increaseCapacity(newLength);
1:33467a5:         } else if (newLength < currentCapacity) {
1:33467a5:             if (newLength <= 0L) {
1:33467a5:                 // Just clear everything.
1:33467a5:                 allocatedBlocks = 0;
1:33467a5:                 blocks = new byte[INITIAL_BLOCK_HOLDER_SIZE][];
1:33467a5:             } else {
1:33467a5:                 // Nullify the surplus data.
1:33467a5:                 int blocksToKeep = (int)(newLength / blockSize) +1;
1:33467a5:                 for (int i=blocksToKeep; i <= allocatedBlocks; i++) {
1:33467a5:                     blocks[i] = null;
1:33467a5:                 }
1:33467a5:                 allocatedBlocks = Math.min(allocatedBlocks, blocksToKeep);
1:7a7a1a3:                 // We keep the holder slots around, since the overhead for
1:7a7a1a3:                 // doing so is pretty small.
1:33467a5:             }
1:33467a5:         }
1:33467a5:         length = Math.max(0L, newLength);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Writes the given bytes into the blocked byte array.
1:33467a5:      *
1:33467a5:      * @param pos the position to start writing at
1:33467a5:      * @param buf the source buffer
1:33467a5:      * @param offset the offset into the source buffer
1:33467a5:      * @param len the number of bytes to write
1:33467a5:      * @return The number of bytes written.
1:33467a5:      */
1:33467a5:     public synchronized int writeBytes(final long pos, final byte[] buf,
1:33467a5:                                        int offset, final int len) {
1:33467a5:         // Optimize block size if possible on first write.
1:33467a5:         if (blockSize == 0) {
1:33467a5:             checkBlockSize(len);
1:33467a5:         }
1:33467a5:         // Due to the loop condition below, we have to check the length here.
1:33467a5:         // The check is only required because calling code expects an exception.
1:33467a5:         if (len < 0) {
1:33467a5:             throw new ArrayIndexOutOfBoundsException(len);
1:33467a5:         }
1:33467a5:         // Increase the capacity if required.
1:9747b7f:         increaseCapacity(pos + len);
1:33467a5:         // Calculate the block number and the index within this block.
1:33467a5:         int block = (int)(pos / blockSize);
1:33467a5:         int index = (int)(pos % blockSize);
1:33467a5: 
1:33467a5:         int written = 0;
1:33467a5:         while (written < len) {
1:33467a5:             int toWrite = Math.min(len - written, blockSize - index);
1:33467a5:             System.arraycopy(buf, offset, blocks[block], index, toWrite);
1:33467a5:             written += toWrite;
1:33467a5:             offset += toWrite;
1:33467a5:             if (written < len) {
1:33467a5:                 block++;
1:33467a5:                 index = 0;
1:33467a5:             } else {
1:33467a5:                 index += toWrite;
1:33467a5:             }
1:33467a5:         }
1:33467a5: 
1:33467a5:         // Update the length if we wrote past the previous length.
1:33467a5:         length = Math.max(length, pos + len);
1:33467a5:         return written;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Writes the given byte into the blocked byte array.
1:33467a5:      *
1:33467a5:      * @param pos the position to write the byte at
1:33467a5:      * @param b the byte to write
1:33467a5:      * @return {@code 1}, which is the number of bytes written.
1:33467a5:      */
1:33467a5:     public synchronized int writeByte(long pos, byte b) {
1:33467a5:         // Optimize block size if possible on first write.
1:33467a5:         if (blockSize == 0) {
1:33467a5:             checkBlockSize(0);
1:33467a5:         }
1:33467a5:         // Increase the capacity if required.
1:9747b7f:         increaseCapacity(pos);
1:33467a5:         // Calculate the block number and the index within this block.
1:33467a5:         int block = (int)(pos / blockSize);
1:33467a5:         int index = (int)(pos % blockSize);
1:33467a5:         blocks[block][index] = b;
1:33467a5:         // Update the length if we wrote past the previous length.
1:33467a5:         length = Math.max(length, pos +1);
1:33467a5:         return 1; // The number of bytes written, always one.
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns an input stream serving the data in the blocked byte array.
1:33467a5:      *
1:33467a5:      * @return An {@code InputStream}-object.
1:33467a5:      */
1:33467a5:     synchronized BlockedByteArrayInputStream getInputStream() {
1:33467a5:         return new BlockedByteArrayInputStream(this, 0L);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns an output stream writing data into the blocked byte array.
1:33467a5:      *
1:33467a5:      * @param pos initial position of the output stream
1:33467a5:      * @return An {@code OutputStream}-object.
1:33467a5:      */
1:33467a5:     synchronized BlockedByteArrayOutputStream getOutputStream(long pos) {
1:33467a5:         if (pos < 0) {
1:33467a5:             throw new IllegalArgumentException(
1:33467a5:                                         "Position cannot be negative: " + pos);
1:33467a5:         }
1:33467a5:         return new BlockedByteArrayOutputStream(this, pos);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Releases this array.
1:33467a5:      */
1:33467a5:     synchronized void release() {
1:33467a5:         blocks = null;
1:33467a5:         length = allocatedBlocks = -1;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Tries to optimize the block size by setting it equal to the the page
1:33467a5:      * size used by the database.
1:33467a5:      * <p>
1:33467a5:      * Since we don't have a way of knowing which page size will be used, wait
1:33467a5:      * to set the block size until the first write request and see how many
1:33467a5:      * bytes are written then.
1:33467a5:      *
1:33467a5:      * @param len the requested number of bytes to be written
1:33467a5:      */
1:33467a5:     private void checkBlockSize(int len) {
1:33467a5:         // Optimize on the block size (if possible).
1:33467a5:         if (len == _4K || len == _8K || len == _16K || len == _32K) {
1:33467a5:             blockSize = len;
1:33467a5:         } else {
1:33467a5:             blockSize = DEFAULT_BLOCKSIZE;
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Increases the capacity of this blocked byte array by allocating more
1:33467a5:      * blocks.
1:33467a5:      *
1:33467a5:      * @param lastIndex the index that must fit into the array
1:33467a5:      */
1:33467a5:     //@GuardedBy("this")
1:33467a5:     private void increaseCapacity(long lastIndex) {
1:7a7a1a3:         if (SanityManager.DEBUG) {
1:7a7a1a3:             SanityManager.ASSERT(blockSize > 0, "Invalid/unset block size");
1:7a7a1a3:         }
1:33467a5:         // Safe-guard to avoid overwriting existing data.
1:edf4fc7:         if (lastIndex < (long)allocatedBlocks * blockSize) {
1:33467a5:             return;
1:33467a5:         }
1:33467a5:         // Calculate required number of blocks, and create those lacking.
1:33467a5:         // We may allocate one more array than required.
1:33467a5:         final int blocksRequired = (int)((lastIndex) / blockSize) +1;
1:33467a5:         if (blocksRequired > blocks.length) {
1:7a7a1a3:             // Grow the block holder array.
1:7a7a1a3:             // Make sure we have enough slots. Note that we only grow the block
1:7a7a1a3:             // holder array, we don't fill it with data blocks before needed.
1:7a7a1a3:             int growTo = Math.max(
1:7a7a1a3:                     // Grow at least ~33%.
1:7a7a1a3:                     blocks.length + (blocks.length / 3),
1:7a7a1a3:                     // For cases where we need to grow more than 33%.
1:7a7a1a3:                     blocksRequired + MIN_HOLDER_GROWTH);
1:7a7a1a3:             byte[][] tmpBlocks = blocks;
1:7a7a1a3:             blocks = new byte[growTo][];
1:7a7a1a3:             // Copy the data array references.
1:7a7a1a3:             System.arraycopy(tmpBlocks, 0, blocks, 0, allocatedBlocks);
1:33467a5:         }
1:7a7a1a3:         // Allocate new data arrays to accomodate lastIndex bytes.
1:33467a5:         for (int i=allocatedBlocks; i < blocksRequired; i++) {
1:33467a5:             blocks[i] = new byte[blockSize];
1:33467a5:         }
1:33467a5:         allocatedBlocks = blocksRequired;
1:33467a5:     }
1:33467a5: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8b6fe4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
commit:9747b7f
/////////////////////////////////////////////////////////////////////////
1:         increaseCapacity(pos + len);
/////////////////////////////////////////////////////////////////////////
1:         increaseCapacity(pos);
commit:edf4fc7
/////////////////////////////////////////////////////////////////////////
1:         final long currentCapacity = (long)allocatedBlocks * blockSize;
/////////////////////////////////////////////////////////////////////////
0:         if (pos + len >= (long)allocatedBlocks * blockSize) {
/////////////////////////////////////////////////////////////////////////
0:         if (pos >= (long)allocatedBlocks * blockSize) {
/////////////////////////////////////////////////////////////////////////
1:         if (lastIndex < (long)allocatedBlocks * blockSize) {
commit:7a7a1a3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final int INITIAL_BLOCK_HOLDER_SIZE = 1024;
1:     /**
1:      * Minimum number of holder slots to grow with when the block holder array
1:      * has to grow to be able to reference all the data arrays.
1:      */
1:     private static final int MIN_HOLDER_GROWTH = 1024;
/////////////////////////////////////////////////////////////////////////
1:      * Reads up to {@code len} bytes.
/////////////////////////////////////////////////////////////////////////
1:         // If capacity is requested before any writes has taken place.
1:         if (blockSize == 0) {
1:             checkBlockSize((int)Math.min(Integer.MAX_VALUE, newLength));
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 // We keep the holder slots around, since the overhead for
1:                 // doing so is pretty small.
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(blockSize > 0, "Invalid/unset block size");
1:         }
/////////////////////////////////////////////////////////////////////////
1:             // Grow the block holder array.
1:             // Make sure we have enough slots. Note that we only grow the block
1:             // holder array, we don't fill it with data blocks before needed.
1:             int growTo = Math.max(
1:                     // Grow at least ~33%.
1:                     blocks.length + (blocks.length / 3),
1:                     // For cases where we need to grow more than 33%.
1:                     blocksRequired + MIN_HOLDER_GROWTH);
1:             byte[][] tmpBlocks = blocks;
1:             blocks = new byte[growTo][];
1:             // Copy the data array references.
1:             System.arraycopy(tmpBlocks, 0, blocks, 0, allocatedBlocks);
1:         // Allocate new data arrays to accomodate lastIndex bytes.
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.vfmem.BlockedByteArray
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.io.vfmem;
1: 
1: /**
1:  * Stores data in blocks, and supports reading/writing data from/into these
1:  * blocks.
1:  * <p>
1:  * The blocked array is expanded and shrunk as required.
1:  * <p>
0:  * The current implementation has a size limit of
0:  * {@code INITIAL_BLOCK_HOLDER_SIZE * blockSize}. For the default values, this
0:  * gives:
0:  * <ul> <li>4 KB blocks: 256 MB
0:  *      <li>8 KB blocks: 512 MB
0:  *      <li>16 KB blocks: 1024 MB
0:  *      <li>32 KB blocks: 2048 MB
0:  * </ul>
1:  */
1: public class BlockedByteArray {
1: 
1:     /** Constant for 4 KB. */
1:     private static final int _4K = 4*1024;
1:     /** Constant for 8 KB. */
1:     private static final int _8K = 8*1024;
1:     /** Constant for 16 KB. */
1:     private static final int _16K = 16*1024;
1:     /** Constant for 32 KB. */
1:     private static final int _32K = 32*1024;
1:     /** The default block size. */
1:     private static final int DEFAULT_BLOCKSIZE = _4K;
1: 
1:     /** The default number of slots for holding a block of data. */
0:     private static final int INITIAL_BLOCK_HOLDER_SIZE = 64*1024;
1: 
1:     /** References to blocks of data. */
1:     private byte[][] blocks;
1:     /** The size of a block of data (the allocation unit). */
1:     private int blockSize;
1:     /** The number of allocated blocks. */
1:     private int allocatedBlocks;
1:     /** The number of bytes stored in the blocked byte array. */
1:     private long length;
1: 
1:     /**
1:      * Creates a new blocked byte array with the default number of slots to
1:      * hold byte arrays (blocks).
1:      * <p>
1:      * No blocks are pre-allocated.
1:      *
1:      * @see #INITIAL_BLOCK_HOLDER_SIZE
1:      */
1:     public BlockedByteArray() {
1:         blocks = new byte[INITIAL_BLOCK_HOLDER_SIZE][];
1:     }
1: 
1:     /**
1:      * Returns the byte at the given position.
1:      *
1:      * @param pos position to read from
1:      * @return A single byte.
1:      */
1:     public synchronized int read(long pos) {
1:         if (pos < length) {
1:             int block = (int)(pos / blockSize);
1:             int index = (int)(pos % blockSize);
1:             return (blocks[block][index] & 0xFF);
1:         }
1:         return -1;
1:     }
1: 
1:     /**
0:      * Reads the up to {@code len} bytes.
1:      *
1:      * @param pos the position to start reading at
1:      * @param buf the destination buffer
1:      * @param offset offset into the destination buffer
1:      * @param len the number of bytes to read
1:      * @return The number of bytes read.
1:      */
1:      public synchronized int read(long pos, byte[] buf, int offset, int len) {
1:         // Due to the loop condition below, we have to check the length here.
1:         // The check is only required because calling code expects an exception.
1:         if (len < 0) {
1:             throw new ArrayIndexOutOfBoundsException(len);
1:         }
1:         // Check for EOF.
1:         if (pos >= length) {
1:             return -1;
1:         }
1:         // Adjust the length if required.
1:         len = (int)Math.min(len, length - pos);
1:         int block = (int)(pos / blockSize);
1:         int index = (int)(pos % blockSize);
1:         int read = 0;
1:         while (read < len) {
1:             int toRead = Math.min(len - read, blockSize - index);
1:             System.arraycopy(blocks[block], index, buf, offset + read, toRead);
1:             read += toRead;
1:             block++;
1:             index = 0;
1:         }
1:         return read;
1:      }
1: 
1:     /**
1:      * Returns the number of bytes allocated.
1:      *
1:      * @return Bytes allocated.
1:      */
1:     public synchronized long length() {
1:         return length;
1:     }
1: 
1:     /**
1:      * Changes the allocated length of the data.
1:      * <p>
1:      * If the new length is larger than the current length, the blocked byte
1:      * array will be extended with new blocks. If the new length is smaller,
1:      * existing (allocated) blocks will be removed if possible.
1:      *
1:      * @param newLength the new length of the allocated data in bytes
1:      */
1:     public synchronized void setLength(final long newLength) {
0:         final long currentCapacity = allocatedBlocks * blockSize;
1:         if (newLength > currentCapacity) {
1:             // Allocate more blocks.
1:             increaseCapacity(newLength);
1:         } else if (newLength < currentCapacity) {
1:             if (newLength <= 0L) {
1:                 // Just clear everything.
1:                 allocatedBlocks = 0;
1:                 blocks = new byte[INITIAL_BLOCK_HOLDER_SIZE][];
1:             } else {
1:                 // Nullify the surplus data.
1:                 int blocksToKeep = (int)(newLength / blockSize) +1;
1:                 for (int i=blocksToKeep; i <= allocatedBlocks; i++) {
1:                     blocks[i] = null;
1:                 }
1:                 allocatedBlocks = Math.min(allocatedBlocks, blocksToKeep);
1:             }
1:         }
1:         length = Math.max(0L, newLength);
1:     }
1: 
1:     /**
1:      * Writes the given bytes into the blocked byte array.
1:      *
1:      * @param pos the position to start writing at
1:      * @param buf the source buffer
1:      * @param offset the offset into the source buffer
1:      * @param len the number of bytes to write
1:      * @return The number of bytes written.
1:      */
1:     public synchronized int writeBytes(final long pos, final byte[] buf,
1:                                        int offset, final int len) {
1:         // Optimize block size if possible on first write.
1:         if (blockSize == 0) {
1:             checkBlockSize(len);
1:         }
1:         // Due to the loop condition below, we have to check the length here.
1:         // The check is only required because calling code expects an exception.
1:         if (len < 0) {
1:             throw new ArrayIndexOutOfBoundsException(len);
1:         }
1:         // Increase the capacity if required.
0:         if (pos + len >= allocatedBlocks * blockSize) {
0:             increaseCapacity(pos + len);
1:         }
1:         // Calculate the block number and the index within this block.
1:         int block = (int)(pos / blockSize);
1:         int index = (int)(pos % blockSize);
1: 
1:         int written = 0;
1:         while (written < len) {
1:             int toWrite = Math.min(len - written, blockSize - index);
1:             System.arraycopy(buf, offset, blocks[block], index, toWrite);
1:             written += toWrite;
1:             offset += toWrite;
1:             if (written < len) {
1:                 block++;
1:                 index = 0;
1:             } else {
1:                 index += toWrite;
1:             }
1:         }
1: 
1:         // Update the length if we wrote past the previous length.
1:         length = Math.max(length, pos + len);
1:         return written;
1:     }
1: 
1:     /**
1:      * Writes the given byte into the blocked byte array.
1:      *
1:      * @param pos the position to write the byte at
1:      * @param b the byte to write
1:      * @return {@code 1}, which is the number of bytes written.
1:      */
1:     public synchronized int writeByte(long pos, byte b) {
1:         // Optimize block size if possible on first write.
1:         if (blockSize == 0) {
1:             checkBlockSize(0);
1:         }
1:         // Increase the capacity if required.
0:         if (pos >= allocatedBlocks * blockSize) {
0:             increaseCapacity(pos);
1:         }
1: 
1:         // Calculate the block number and the index within this block.
1:         int block = (int)(pos / blockSize);
1:         int index = (int)(pos % blockSize);
1:         blocks[block][index] = b;
1:         // Update the length if we wrote past the previous length.
1:         length = Math.max(length, pos +1);
1:         return 1; // The number of bytes written, always one.
1:     }
1: 
1:     /**
1:      * Returns an input stream serving the data in the blocked byte array.
1:      *
1:      * @return An {@code InputStream}-object.
1:      */
1:     synchronized BlockedByteArrayInputStream getInputStream() {
1:         return new BlockedByteArrayInputStream(this, 0L);
1:     }
1: 
1:     /**
1:      * Returns an output stream writing data into the blocked byte array.
1:      *
1:      * @param pos initial position of the output stream
1:      * @return An {@code OutputStream}-object.
1:      */
1:     synchronized BlockedByteArrayOutputStream getOutputStream(long pos) {
1:         if (pos < 0) {
1:             throw new IllegalArgumentException(
1:                                         "Position cannot be negative: " + pos);
1:         }
1:         return new BlockedByteArrayOutputStream(this, pos);
1:     }
1: 
1:     /**
1:      * Releases this array.
1:      */
1:     synchronized void release() {
1:         blocks = null;
1:         length = allocatedBlocks = -1;
1:     }
1: 
1:     /**
1:      * Tries to optimize the block size by setting it equal to the the page
1:      * size used by the database.
1:      * <p>
1:      * Since we don't have a way of knowing which page size will be used, wait
1:      * to set the block size until the first write request and see how many
1:      * bytes are written then.
1:      *
1:      * @param len the requested number of bytes to be written
1:      */
1:     private void checkBlockSize(int len) {
1:         // Optimize on the block size (if possible).
1:         if (len == _4K || len == _8K || len == _16K || len == _32K) {
1:             blockSize = len;
1:         } else {
1:             blockSize = DEFAULT_BLOCKSIZE;
1:         }
1:     }
1: 
1:     /**
1:      * Increases the capacity of this blocked byte array by allocating more
1:      * blocks.
1:      *
1:      * @param lastIndex the index that must fit into the array
1:      */
1:     //@GuardedBy("this")
1:     private void increaseCapacity(long lastIndex) {
1:         // Safe-guard to avoid overwriting existing data.
0:         if (lastIndex < allocatedBlocks * blockSize) {
1:             return;
1:         }
1:         // Calculate required number of blocks, and create those lacking.
1:         // We may allocate one more array than required.
1:         final int blocksRequired = (int)((lastIndex) / blockSize) +1;
1:         if (blocksRequired > blocks.length) {
0:             // TODO: Thrown an OOME or do something else here?
0:             //       If we let the array grow unbounded, the JVM would throw
0:             //       the OOME when get into the situation that all the
0:             //       available memory is exhausted.
0:             throw new IllegalStateException("Too big: ~" +
0:                     ((lastIndex) / 1024 / 1024) + " MB");
1:         }
1:         for (int i=allocatedBlocks; i < blocksRequired; i++) {
1:             blocks[i] = new byte[blockSize];
1:         }
1:         allocatedBlocks = blocksRequired;
1:     }
1: }
============================================================================