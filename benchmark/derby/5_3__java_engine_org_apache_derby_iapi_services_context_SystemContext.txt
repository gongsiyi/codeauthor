1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.context.SystemContext
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.context;
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:4b58cc0: import org.apache.derby.shared.common.error.ShutdownException;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
2:eac0369: /**
1:eac0369: 	A context that shuts the system down if it gets an StandardException
1:eac0369: 	with a severity greater than or equal to ExceptionSeverity.SYSTEM_SEVERITY
1:eac0369: 	or an exception that is not a StandardException.
1:eac0369: */
1:eac0369: final class SystemContext extends ContextImpl
1:eac0369: {
1:eac0369: 	SystemContext(ContextManager cm) {
1:eac0369: 		super(cm, "SystemContext");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void cleanupOnError(Throwable t) {
1:eac0369: 
1:eac0369: 		boolean doShutdown = false;
1:eac0369: 		if (t instanceof StandardException) {
1:eac0369: 			StandardException se = (StandardException) t;
1:eac0369: 			int severity = se.getSeverity();
1:eac0369: 			if (severity < ExceptionSeverity.SESSION_SEVERITY)
1:eac0369: 				return;
1:913815a:             
1:913815a:             popMe();
1:eac0369: 
1:eac0369: 			if (severity >= ExceptionSeverity.SYSTEM_SEVERITY)
1:eac0369: 				doShutdown = true;
1:eac0369: 		} else if (t instanceof ShutdownException) {
1:eac0369: 			// system is already shutting down ...
1:eac0369: 		} else if (t instanceof ThreadDeath) {
1:eac0369: 			// ignore this too, it means we explicitly told thread to
1:eac0369: 			// stop.  one way this can happen is after monitor
1:eac0369: 			// shutdown, so we don't need to shut down again
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		if (!doShutdown) {
1:eac0369: 			//ContextManager cm = getContextManager();
1:eac0369: 			// need to remove me from the list of all contexts.
1:eac0369: 			getContextManager().owningCsf.removeContext(getContextManager());
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			// try to print out that the shutdown is occurring.
1:eac0369: 			// REVISIT: does this need to be a localizable message?
1:eac0369: 			System.err.println("Shutting down due to severe error.");
1:eac0369: 			Monitor.getStream().printlnWithHeader("Shutting down due to severe error." + t.getMessage());
1:eac0369: 
1:eac0369: 		} finally {
1:eac0369: 			// we need this to happen even if we fail to print out a notice
1:56c1dc2: 			getMonitor().shutdown();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:4b58cc0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.ShutdownException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 			getMonitor().shutdown();
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7132626
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.ShutdownException;
commit:913815a
/////////////////////////////////////////////////////////////////////////
1:             
1:             popMe();
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.context.SystemContext
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.context;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: /**
1: 	A context that shuts the system down if it gets an StandardException
1: 	with a severity greater than or equal to ExceptionSeverity.SYSTEM_SEVERITY
1: 	or an exception that is not a StandardException.
1: */
1: final class SystemContext extends ContextImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	SystemContext(ContextManager cm) {
1: 		super(cm, "SystemContext");
1: 	}
1: 
1: 	public void cleanupOnError(Throwable t) {
1: 
1: 		boolean doShutdown = false;
1: 		if (t instanceof StandardException) {
1: 			StandardException se = (StandardException) t;
1: 			int severity = se.getSeverity();
1: 			if (severity < ExceptionSeverity.SESSION_SEVERITY)
1: 				return;
1: 
1: 			if (severity >= ExceptionSeverity.SYSTEM_SEVERITY)
1: 				doShutdown = true;
1: 		} else if (t instanceof ShutdownException) {
1: 			// system is already shutting down ...
1: 		} else if (t instanceof ThreadDeath) {
1: 			// ignore this too, it means we explicitly told thread to
1: 			// stop.  one way this can happen is after monitor
1: 			// shutdown, so we don't need to shut down again
1: 		}
1: 		
1: 		if (!doShutdown) {
1: 			//ContextManager cm = getContextManager();
1: 			// need to remove me from the list of all contexts.
1: 			getContextManager().owningCsf.removeContext(getContextManager());
1: 			return;
1: 		}
1: 
1: 
1: 		try {
1: 			// try to print out that the shutdown is occurring.
1: 			// REVISIT: does this need to be a localizable message?
1: 			System.err.println("Shutting down due to severe error.");
1: 			Monitor.getStream().printlnWithHeader("Shutting down due to severe error." + t.getMessage());
1: 
1: 		} finally {
1: 			// we need this to happen even if we fail to print out a notice
0: 			Monitor.getMonitor().shutdown();
1: 		}
1: 
1: 	}
1: 
1: }
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.context;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: /**
0: 	A context that shuts the system down if it gets an StandardException
0: 	with a severity greater than or equal to ExceptionSeverity.SYSTEM_SEVERITY
0: 	or an exception that is not a StandardException.
0: */
0: final class SystemContext extends ContextImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	SystemContext(ContextManager cm) {
0: 		super(cm, "SystemContext");
0: 	}
0: 
0: 	public void cleanupOnError(Throwable t) {
0: 
0: 		boolean doShutdown = false;
0: 		if (t instanceof StandardException) {
0: 			StandardException se = (StandardException) t;
0: 			int severity = se.getSeverity();
0: 			if (severity < ExceptionSeverity.SESSION_SEVERITY)
0: 				return;
0: 
0: 			if (severity >= ExceptionSeverity.SYSTEM_SEVERITY)
0: 				doShutdown = true;
0: 		} else if (t instanceof ShutdownException) {
0: 			// system is already shutting down ...
0: 		} else if (t instanceof ThreadDeath) {
0: 			// ignore this too, it means we explicitly told thread to
0: 			// stop.  one way this can happen is after monitor
0: 			// shutdown, so we don't need to shut down again
0: 		}
0: 		
0: 		if (!doShutdown) {
0: 			//ContextManager cm = getContextManager();
0: 			// need to remove me from the list of all contexts.
0: 			getContextManager().owningCsf.removeContext(getContextManager());
0: 			return;
0: 		}
0: 
0: 
0: 		try {
0: 			// try to print out that the shutdown is occurring.
0: 			// REVISIT: does this need to be a localizable message?
0: 			System.err.println("Shutting down due to severe error.");
0: 			Monitor.getStream().printlnWithHeader("Shutting down due to severe error." + t.getMessage());
0: 
0: 		} finally {
0: 			// we need this to happen even if we fail to print out a notice
0: 			Monitor.getMonitor().shutdown();
0: 		}
0: 
0: 	}
0: 
0: }
0: 
============================================================================