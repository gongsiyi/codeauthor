1:965a258: /*
7:965a258:  *
1:965a258:  * Derby - Class org.apache.derbyTesting.system.oe.client.Operations
1:965a258:  *
1:965a258:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:965a258:  * contributor license agreements.  See the NOTICE file distributed with
1:965a258:  * this work for additional information regarding copyright ownership.
1:965a258:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:965a258:  * (the "License"); you may not use this file except in compliance with
1:965a258:  * the License.  You may obtain a copy of the License at
1:965a258:  *
1:965a258:  *    http://www.apache.org/licenses/LICENSE-2.0
1:965a258:  *
1:965a258:  * Unless required by applicable law or agreed to in writing, 
1:965a258:  * software distributed under the License is distributed on an 
1:965a258:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:965a258:  * either express or implied. See the License for the specific 
1:965a258:  * language governing permissions and limitations under the License.
7:965a258:  */
1:965a258: package org.apache.derbyTesting.system.oe.client;
7:965a258: 
7:965a258: /**
1:965a258:  * Interface for a client to execute the logical operations. Various
1:965a258:  * implementations can be provided, e.g. client side SQL, procedure, etc.
2:965a258:  * <P>
1:965a258:  * Typical model is that each client has its own instance of an object that
1:965a258:  * implements Operations. For example the implementation in a client side SQL
1:965a258:  * implementation would have a reference to its own JDBC connection and prepared
1:965a258:  * statements.
1:965a258:  * <P>
1:965a258:  * Implementations of the execution methods must perform the following:
1:965a258:  * <OL>
1:965a258:  * <LI>Execute business transaction
1:965a258:  * <LI>Populate POJO objects required by display method
1:965a258:  * <LI>Commit the database transaction(s)
1:965a258:  * <LI>Call the appropriate display method from Display
1:965a258:  * </UL>
1:965a258:  * 
1:965a258:  * <P>
1:965a258:  * DECIMAL values are represented as String objects to allow Order Entry to be
1:965a258:  * run on J2ME/CDC/Foundation which does not support BigDecimal.
1:965a258:  */
1:965a258: 
1:965a258: public interface Operations {
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute stock level. Stock level is described in clause 2.8.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Warehouse for transaction
1:965a258:      * @param d
1:965a258:      *            District for transaction
1:965a258:      * @param threshold
1:965a258:      *            Threshold for transaction.
1:965a258:      * @see Display#displayStockLevel(Object, short, short, int, int)
1:965a258:      */
1:965a258:     public void stockLevel(Display display, Object displayData, short w,
1:965a258:             short d, int threshold) throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute order status by last name. Order status is described in clause
1:965a258:      * 2.6.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Warehouse identifier
1:965a258:      * @param d
1:965a258:      *            District identifier
1:965a258:      * @param customerLast
1:965a258:      *            Customer's last name.
1:965a258:      */
1:965a258:     public void orderStatus(Display display, Object displayData, short w,
1:965a258:             short d, String customerLast) throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute order status by customer identifer. Order status is described in
1:965a258:      * clause 2.6.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Warehouse identifier
1:965a258:      * @param d
1:965a258:      *            District identifier
2:965a258:      * @param c
2:965a258:      *            Customer identifer.
1:965a258:      */
1:965a258:     public void orderStatus(Display display, Object displayData, short w,
1:965a258:             short d, int c) throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute payment by last name. Payment is described in clause 2.5.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Home warehouse identifier
1:965a258:      * @param d
1:965a258:      *            Home district identifier
1:965a258:      * @param cw
1:965a258:      *            Customer warehouse identifier
1:965a258:      * @param cd
1:965a258:      *            Customer district identifier
1:965a258:      * @param customerLast
1:965a258:      *            Customer's last name.
1:965a258:      * @param amount
1:965a258:      *            Payment amount
1:965a258:      */
1:965a258:     public void payment(Display display, Object displayData, short w, short d,
1:965a258:             short cw, short cd, String customerLast, String amount)
1:965a258:             throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute payment by customer identifer. Payment is described in clause
1:965a258:      * 2.5.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Home warehouse identifier
1:965a258:      * @param d
1:965a258:      *            Home district identifier
1:965a258:      * @param cw
1:965a258:      *            Customer warehouse identifier
1:965a258:      * @param cd
1:965a258:      *            Customer district identifier
1:965a258:      * @param c
1:965a258:      *            Customer identifer.
1:965a258:      * @param amount
1:965a258:      *            Payment amount
1:965a258:      */
1:965a258:     public void payment(Display display, Object displayData, short w, short d,
1:965a258:             short cw, short cd, int c, String amount) throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute new order. New order is described in clause 2.4.
1:965a258:      * <P>
1:965a258:      * Assumption is that items.length == quanties.length == supplyW.length.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Warehouse identifier
1:965a258:      * @param d
1:965a258:      *            District identifier
1:965a258:      * @param c
1:965a258:      *            Customer identifier
1:965a258:      * @param items
1:965a258:      *            array of item numbers
1:965a258:      * @param quantities
1:965a258:      *            quanties for each item
1:965a258:      * @param supplyW
1:965a258:      *            Supply warehouse for each item.
8:965a258:      * @throws Exception
1:965a258:      */
1:965a258:     public void newOrder(Display display, Object displayData, short w, short d,
1:965a258:             int c, int[] items, short[] quantities, short[] supplyW)
1:965a258:             throws Exception;
1:9f7e882: 
1:9f7e882:     /**
1:965a258:      * Queue a delivery request. Queuing of delivery requests is described in
1:965a258:      * clause 2.7.2.
1:965a258:      * <P>
1:965a258:      * The implementation of Operations is responsible for managing the FIFO
1:965a258:      * queue of requests, which could be in a flat file, the database or
1:965a258:      * memory etc.
1:965a258:      * 
1:965a258:      * @param display
1:965a258:      *            Where to display the results, if null results are not
1:965a258:      *            displayed.
1:965a258:      * @param displayData
1:965a258:      *            Any client specific display information, such as servlet
1:965a258:      *            context.
1:965a258:      * @param w
1:965a258:      *            Warehouse identifier
1:965a258:      * @param carrier
1:965a258:      *            Carrier identifier
1:965a258:      * @throws Exception
1:965a258:      */
1:965a258:     public void scheduleDelivery(Display display, Object displayData, short w,
1:965a258:             short carrier) throws Exception;
1:965a258: 
1:965a258:     /**
1:965a258:      * Execute a single delivery from the FIFO queue. Processing a delivery
1:965a258:      * request is described in clause 2.7.4.
1:965a258:      * 
1:24e8abd:       * @throws Exception
1:965a258:      */
1:24e8abd:     public void delivery() throws Exception;
1:965a258:     
1:965a258:     /**
1:9f7e882:      * Release any resources.
1:9f7e882:      * 
1:9f7e882:      */
1:9f7e882:     public void close() throws Exception;
1:965a258: 
1:965a258: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d5376da
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:85fc221
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:24e8abd
/////////////////////////////////////////////////////////////////////////
1:       * @throws Exception
1:     public void delivery() throws Exception;
commit:9f7e882
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Release any resources.
1:      * 
1:      */
1:     public void close() throws Exception;
commit:965a258
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.client.Operations
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.client;
1: 
1: /**
1:  * Interface for a client to execute the logical operations. Various
1:  * implementations can be provided, e.g. client side SQL, procedure, etc.
1:  * <P>
1:  * Typical model is that each client has its own instance of an object that
1:  * implements Operations. For example the implementation in a client side SQL
1:  * implementation would have a reference to its own JDBC connection and prepared
1:  * statements.
1:  * <P>
0:  * Setup methods are provided for each operation to allow testing with a single
0:  * transaction or mixing of Operations implementations from a single client.
1:  * <P>
1:  * Implementations of the execution methods must perform the following:
1:  * <OL>
1:  * <LI>Execute business transaction
1:  * <LI>Populate POJO objects required by display method
1:  * <LI>Commit the database transaction(s)
1:  * <LI>Call the appropriate display method from Display
1:  * </UL>
1:  * 
1:  * <P>
1:  * DECIMAL values are represented as String objects to allow Order Entry to be
1:  * run on J2ME/CDC/Foundation which does not support BigDecimal.
1:  */
1: 
1: public interface Operations {
1: 
1:     /**
0:      * Perform any setup required to call stockLevel().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
0:      * @see #stockLevel(Display, Object, short, short, int)
1:      */
0:     public void setupStockLevel() throws Exception;
1: 
1:     /**
0:      * Perform any setup required to call either orderStatus().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
0:      * @see #orderStatus
1:      */
0:     public void setupOrderStatus() throws Exception;
1: 
1:     /**
0:      * Perform any setup required to call either payment().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
0:      * @see #payment
1:      */
0:     public void setupPayment() throws Exception;
1: 
1:     /**
0:      * Perform any setup required to call newOrder().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
0:      * @see #newOrder(Display, Object, short, short, int, int[], short[], short[])
1:      */
0:     public void setupNewOrder() throws Exception;
1: 
1:     /**
0:      * Perform any setup required to call scheduleDelivery().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
1:      */
0:     public void setupScheduleDelivery() throws Exception;
1: 
1:     /**
0:      * Perform any setup required to call delivery().
1:      * 
1:      * @throws Exception
0:      *             Error performing the setup.
1:      */
0:     public void setupDelivery() throws Exception;
1: 
1:     /**
1:      * Execute stock level. Stock level is described in clause 2.8.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Warehouse for transaction
1:      * @param d
1:      *            District for transaction
1:      * @param threshold
1:      *            Threshold for transaction.
0:      * @see #setupStockLevel()
1:      * @see Display#displayStockLevel(Object, short, short, int, int)
1:      */
1:     public void stockLevel(Display display, Object displayData, short w,
1:             short d, int threshold) throws Exception;
1: 
1:     /**
1:      * Execute order status by last name. Order status is described in clause
1:      * 2.6.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Warehouse identifier
1:      * @param d
1:      *            District identifier
1:      * @param customerLast
1:      *            Customer's last name.
1:      */
1:     public void orderStatus(Display display, Object displayData, short w,
1:             short d, String customerLast) throws Exception;
1: 
1:     /**
1:      * Execute order status by customer identifer. Order status is described in
1:      * clause 2.6.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Warehouse identifier
1:      * @param d
1:      *            District identifier
1:      * @param c
1:      *            Customer identifer.
1:      */
1:     public void orderStatus(Display display, Object displayData, short w,
1:             short d, int c) throws Exception;
1: 
1:     /**
1:      * Execute payment by last name. Payment is described in clause 2.5.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Home warehouse identifier
1:      * @param d
1:      *            Home district identifier
1:      * @param cw
1:      *            Customer warehouse identifier
1:      * @param cd
1:      *            Customer district identifier
1:      * @param c
1:      *            Customer identifer.
1:      * @param customerLast
1:      *            Customer's last name.
1:      * @param amount
1:      *            Payment amount
1:      */
1:     public void payment(Display display, Object displayData, short w, short d,
1:             short cw, short cd, String customerLast, String amount)
1:             throws Exception;
1: 
1:     /**
1:      * Execute payment by customer identifer. Payment is described in clause
1:      * 2.5.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Home warehouse identifier
1:      * @param d
1:      *            Home district identifier
1:      * @param cw
1:      *            Customer warehouse identifier
1:      * @param cd
1:      *            Customer district identifier
1:      * @param c
1:      *            Customer identifer.
1:      * @param amount
1:      *            Payment amount
1:      */
1:     public void payment(Display display, Object displayData, short w, short d,
1:             short cw, short cd, int c, String amount) throws Exception;
1: 
1:     /**
1:      * Execute new order. New order is described in clause 2.4.
1:      * <P>
1:      * Assumption is that items.length == quanties.length == supplyW.length.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Warehouse identifier
1:      * @param d
1:      *            District identifier
1:      * @param c
1:      *            Customer identifier
1:      * @param items
1:      *            array of item numbers
1:      * @param quantities
1:      *            quanties for each item
1:      * @param supplyW
1:      *            Supply warehouse for each item.
1:      * @throws Exception
1:      */
1:     public void newOrder(Display display, Object displayData, short w, short d,
1:             int c, int[] items, short[] quantities, short[] supplyW)
1:             throws Exception;
1: 
1:     /**
1:      * Queue a delivery request. Queuing of delivery requests is described in
1:      * clause 2.7.2.
1:      * <P>
1:      * The implementation of Operations is responsible for managing the FIFO
1:      * queue of requests, which could be in a flat file, the database or
1:      * memory etc.
1:      * 
1:      * @param display
1:      *            Where to display the results, if null results are not
1:      *            displayed.
1:      * @param displayData
1:      *            Any client specific display information, such as servlet
1:      *            context.
1:      * @param w
1:      *            Warehouse identifier
1:      * @param carrier
1:      *            Carrier identifier
1:      * @throws Exception
1:      */
1:     public void scheduleDelivery(Display display, Object displayData, short w,
1:             short carrier) throws Exception;
1: 
1:     /**
1:      * Execute a single delivery from the FIFO queue. Processing a delivery
1:      * request is described in clause 2.7.4.
1:      * 
0:      * @return Number of seconds the delivery request was queued for. If no
0:      *         request was queued then -1 is returned.
1:      * @throws Exception
1:      */
0:     public int delivery() throws Exception;
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
============================================================================