1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.InsertConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
4:eac0369: /**
1:eac0369:  *	This class  describes compiled constants that are passed into
1:eac0369:  *	InsertResultSets.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class InsertConstantAction extends WriteCursorConstantAction
3:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. But it is NOT used
1:eac0369:  	**	across either major or minor releases.  It is only
1:eac0369: 	** 	written persistently in stored prepared statements, 
1:eac0369: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1:eac0369: 	**	ITS read/writeExternal.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	/* Which (0-based) columns are indexed */
1:eac0369: 	boolean[]	indexedCols;
1:eac0369: 
1:eac0369: 	/* These variables are needed to support Autoincrement-- after an insert
1:eac0369: 	 * we need to remember the last autoincrement value inserted into the 
1:eac0369: 	 * table and the user could do a search based on schema,table,columnname
1:eac0369: 	 */
1:eac0369: 	private String schemaName;
1:eac0369: 	private String tableName;
1:eac0369: 	private String columnNames[];
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * An array of row location objects (0 based), one for each
1:eac0369: 	 * column in the table. If the column is an 
1:eac0369: 	 * autoincrement table then the array points to
1:eac0369: 	 * the row location of the column in SYSCOLUMNS.
1:eac0369: 	 * if not, then it contains null.
1:eac0369: 	 */
1:42544c4:     RowLocation[] autoincRowLocation;
1:eac0369: 	private long[] autoincIncrement;
1:01632c2: 
1:01632c2:     /** Position of autogenerated column */
1:01632c2:     private transient   int firstAutoGenColumn = -1;
1:af1c18c:     final public boolean hasDeferrableChecks;
1:af1c18c: 
1:a180287:     String  identitySequenceUUIDString;
1:a180287: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 *
1:eac0369: 	 */
1:af1c18c:     public  InsertConstantAction() {
1:af1c18c:         super();
1:af1c18c:         hasDeferrableChecks = false;
1:af1c18c:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for an INSERT statement.
1:eac0369: 	 *
1:af1c18c:      *  @param tableDescriptor
1:eac0369: 	 *  @param conglomId	Conglomerate ID.
1:eac0369: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
1:eac0369: 	 *  @param irgs			Index descriptors
1:eac0369: 	 *  @param indexCIDS	Conglomerate IDs of indices
1:eac0369: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
1:eac0369: 	 *  @param indexNames   Names of indices on this table for error reporting.
1:eac0369: 	 *  @param deferred		True means process as a deferred insert.
1:af1c18c:      *  @param hasDeferrableChecks
1:af1c18c:      *                      The target table has deferrable CHECK constraints
1:eac0369: 	 *  @param targetProperties	Properties on the target table.
1:eac0369: 	 *	@param targetUUID	UUID of target table
1:eac0369: 	 *	@param lockMode		The lockMode to use on the target table
1:eac0369: 	 *	@param fkInfo		Array of structures containing foreign key info, 
1:eac0369: 	 *						if any (may be null)
1:eac0369: 	 *	@param triggerInfo	Array of structures containing trigger info, 
1:eac0369: 	 *						if any (may be null)
1:eac0369:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
1:eac0369: 	 *  @param indexedCols	boolean[] of which (0-based) columns are indexed.
1:eac0369: 	 *  @param singleRowSource		Whether or not source is a single row source
1:eac0369: 	 *  @param autoincRowLocation Array of rowlocations of autoincrement values
1:eac0369: 	 * 							  in SYSCOLUMNS for each ai column.
1:01632c2: 	 *  @param underMerge   True if this is an action of a MERGE statement.
1:a180287: 	 *  @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
1:eac0369: 	 */
1:ca6ed17:     InsertConstantAction(TableDescriptor tableDescriptor,
1:eac0369: 								long				conglomId,
1:eac0369: 								StaticCompiledOpenConglomInfo heapSCOCI,
1:eac0369: 								IndexRowGenerator[]	irgs,
1:eac0369: 								long[]				indexCIDS,
1:eac0369: 								StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:eac0369: 								String[]			indexNames,
1:eac0369: 								boolean				deferred,
1:af1c18c:                                 boolean             hasDeferrableChecks,
1:eac0369: 								Properties			targetProperties,
1:eac0369: 								UUID				targetUUID,
1:eac0369: 								int 				lockMode,
1:eac0369: 								FKInfo[]			fkInfo,
1:eac0369: 								TriggerInfo			triggerInfo,
1:eac0369: 								int[]               streamStorableHeapColIds,
1:eac0369: 								boolean[]			indexedCols,
1:eac0369: 								boolean				singleRowSource,
1:01632c2:                                 RowLocation[]		autoincRowLocation,
1:a180287: 								boolean		underMerge,
1:a180287: 								String		identitySequenceUUIDString)
1:eac0369: 	{
1:eac0369: 		super(conglomId, 
1:eac0369: 			  heapSCOCI,
1:eac0369: 			  irgs, 
1:eac0369: 			  indexCIDS, 
1:eac0369: 			  indexSCOCIs,
1:eac0369: 			  indexNames,
1:eac0369: 			  deferred, 
1:eac0369: 			  targetProperties,
1:eac0369: 			  targetUUID,
1:eac0369: 			  lockMode,
1:eac0369: 			  fkInfo,	
1:eac0369: 			  triggerInfo,
1:eac0369: 			  null,
1:eac0369: 			  null,
1:eac0369: 			  streamStorableHeapColIds,
1:01632c2: 			  singleRowSource,
1:01632c2: 			  underMerge
1:eac0369: 			  );
1:eac0369: 		this.indexedCols = indexedCols;
1:eac0369: 		this.autoincRowLocation = autoincRowLocation;
1:eac0369: 		this.schemaName = tableDescriptor.getSchemaName();
1:eac0369: 		this.tableName  = tableDescriptor.getName();
1:eac0369: 		this.columnNames = tableDescriptor.getColumnNamesArray();
1:eac0369: 		this.autoincIncrement = tableDescriptor.getAutoincIncrementArray();
1:eac0369: 		this.indexNames = indexNames;
1:af1c18c:         this.hasDeferrableChecks = hasDeferrableChecks;
1:a180287:         this.identitySequenceUUIDString = identitySequenceUUIDString;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 	public void readExternal (ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		Object[] objectArray = null;
1:eac0369: 		super.readExternal(in);
1:eac0369: 		indexedCols = ArrayUtil.readBooleanArray(in);
1:eac0369: 
1:eac0369: 		// RESOLVEAUTOINCREMENT: this is the new stuff-- probably version!!
1:eac0369: 		objectArray = ArrayUtil.readObjectArray(in);
1:eac0369: 		
1:eac0369: 		if (objectArray != null)
1:eac0369: 		{
1:eac0369: 			// is there a better way to do cast the whole array?
1:eac0369: 			autoincRowLocation = new RowLocation[objectArray.length];
1:eac0369: 			for (int i = 0; i < objectArray.length; i++)
1:eac0369: 				autoincRowLocation[i] = (RowLocation)objectArray[i];
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		schemaName = (String)in.readObject();
1:eac0369: 		tableName  = (String)in.readObject();
1:eac0369: 		objectArray = ArrayUtil.readObjectArray(in);
1:eac0369: 		if (objectArray != null)
1:eac0369: 		{
1:eac0369: 			// is there a better way to do cast the whole array?
1:eac0369: 			columnNames = new String[objectArray.length];
1:eac0369: 			for (int i = 0; i < objectArray.length; i++)
1:eac0369: 				columnNames[i] = (String)objectArray[i];
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		autoincIncrement = ArrayUtil.readLongArray(in);
1:a180287:         identitySequenceUUIDString = (String) in.readObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		ArrayUtil.writeBooleanArray(out, indexedCols);
1:eac0369: 		ArrayUtil.writeArray(out, autoincRowLocation);
1:eac0369: 		out.writeObject(schemaName);
1:eac0369: 		out.writeObject(tableName);
1:eac0369: 		ArrayUtil.writeArray(out, columnNames);
1:eac0369: 		ArrayUtil.writeLongArray(out, autoincIncrement);
1:a180287:         out.writeObject( identitySequenceUUIDString );
1:eac0369: 	}
1:eac0369: 
1:01632c2:     /** Get the 0-based position of the autogenerated column */
1:01632c2:     public  int     getAutoGenColumn()
1:01632c2:     {
1:01632c2:         if ( !hasAutoincrement() ) { return -1; }
1:01632c2:         if ( firstAutoGenColumn < 0 )
1:01632c2:         {
1:01632c2:             for ( int i = 0; i < autoincIncrement.length; i++ )
1:01632c2:             {
1:01632c2:                 if ( autoincIncrement[ i ] > 0 )
1:01632c2:                 {
1:01632c2:                     firstAutoGenColumn = i;
1:01632c2:                     break;
1:01632c2:                 }
1:01632c2:             }
1:01632c2:         }
1:01632c2: 
1:01632c2:         return firstAutoGenColumn;
1:01632c2:     }
1:01632c2: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets the name of the schema that the table is in
1:eac0369: 	  *
1:eac0369: 	  *	@return	schema name
1:eac0369: 	  */
1:eac0369: 	public String getSchemaName() { return schemaName; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets the name of the table being inserted into
1:eac0369: 	  *
1:eac0369: 	  *	@return	name of table being inserted into
1:eac0369: 	  */
1:eac0369: 	public String getTableName() { return tableName; }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * gets the name of the desired column in the taget table.
1:eac0369: 	 * 
1:eac0369: 	 * @param 	i	the column number
1:eac0369: 	 */
1:eac0369: 	public String getColumnName(int i) { return columnNames[i]; }
1:a826375: 	
1:a826375: 	/**
1:a826375: 	 * get the array of column names in the target table.
1:a826375: 	 */
1:5afd169:     String[] getColumnNames() { return columnNames; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * gets the increment value for a column.
1:eac0369: 	 *
1:eac0369: 	 * @param 	i 	the column number
1:eac0369: 	 */
1:eac0369: 	public long   getAutoincIncrement(int i) { return autoincIncrement[i]; }
1:eac0369: 
1:eac0369: 	/**
1:bb4cfe9: 	 * Does the target table has autoincrement columns.
1:bb4cfe9: 	 *
1:bb4cfe9: 	 * @return 	True if the table has ai columns
1:bb4cfe9: 	 */
1:bb4cfe9: 	public boolean hasAutoincrement()
1:bb4cfe9: 	{
1:bb4cfe9: 		return (autoincRowLocation != null);
1:bb4cfe9: 	}
1:bb4cfe9: 
1:bb4cfe9: 	/**
1:bb4cfe9: 	 * gets the row location 
1:bb4cfe9: 	 */
1:42544c4:     RowLocation[] getAutoincRowLocation()
1:bb4cfe9: 	{
1:bb4cfe9: 		return autoincRowLocation;
1:bb4cfe9: 	}
1:bb4cfe9: 	
1:bb4cfe9: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INSERT_CONSTANT_ACTION_V01_ID; }
1:eac0369: 
1:eac0369: 	// CLASS METHODS
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5afd169
/////////////////////////////////////////////////////////////////////////
1:     String[] getColumnNames() { return columnNames; }
commit:42544c4
/////////////////////////////////////////////////////////////////////////
1:     RowLocation[] autoincRowLocation;
/////////////////////////////////////////////////////////////////////////
1:     RowLocation[] getAutoincRowLocation()
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1:     InsertConstantAction(TableDescriptor tableDescriptor,
commit:959fef2
/////////////////////////////////////////////////////////////////////////
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a826375
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * get the array of column names in the target table.
1: 	 */
0: 	public String[] getColumnNames() { return columnNames; }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a180287
/////////////////////////////////////////////////////////////////////////
1:     String  identitySequenceUUIDString;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
/////////////////////////////////////////////////////////////////////////
1: 								boolean		underMerge,
1: 								String		identitySequenceUUIDString)
/////////////////////////////////////////////////////////////////////////
1:         this.identitySequenceUUIDString = identitySequenceUUIDString;
/////////////////////////////////////////////////////////////////////////
1:         identitySequenceUUIDString = (String) in.readObject();
/////////////////////////////////////////////////////////////////////////
1:         out.writeObject( identitySequenceUUIDString );
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Position of autogenerated column */
1:     private transient   int firstAutoGenColumn = -1;
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param underMerge   True if this is an action of a MERGE statement.
/////////////////////////////////////////////////////////////////////////
1:                                 RowLocation[]		autoincRowLocation,
0: 								boolean		underMerge)
/////////////////////////////////////////////////////////////////////////
1: 			  singleRowSource,
1: 			  underMerge
/////////////////////////////////////////////////////////////////////////
1:     /** Get the 0-based position of the autogenerated column */
1:     public  int     getAutoGenColumn()
1:     {
1:         if ( !hasAutoincrement() ) { return -1; }
1:         if ( firstAutoGenColumn < 0 )
1:         {
1:             for ( int i = 0; i < autoincIncrement.length; i++ )
1:             {
1:                 if ( autoincIncrement[ i ] > 0 )
1:                 {
1:                     firstAutoGenColumn = i;
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         return firstAutoGenColumn;
1:     }
1: 
commit:bb4cfe9
/////////////////////////////////////////////////////////////////////////
1: 	 * Does the target table has autoincrement columns.
1: 	 *
1: 	 * @return 	True if the table has ai columns
1: 	 */
1: 	public boolean hasAutoincrement()
1: 	{
1: 		return (autoincRowLocation != null);
1: 	}
1: 
1: 	/**
1: 	 * gets the row location 
1: 	 */
0: 	public RowLocation[] getAutoincRowLocation()
1: 	{
1: 		return autoincRowLocation;
1: 	}
1: 	
1: 	/**
commit:729be57
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     final public boolean hasDeferrableChecks;
1: 
1:     public  InsertConstantAction() {
1:         super();
1:         hasDeferrableChecks = false;
1:     }
1:      *  @param tableDescriptor
/////////////////////////////////////////////////////////////////////////
1:      *  @param hasDeferrableChecks
1:      *                      The target table has deferrable CHECK constraints
/////////////////////////////////////////////////////////////////////////
1:                                 boolean             hasDeferrableChecks,
/////////////////////////////////////////////////////////////////////////
1:         this.hasDeferrableChecks = hasDeferrableChecks;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.InsertConstantAction
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: 
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  *	This class  describes compiled constants that are passed into
1:  *	InsertResultSets.
1:  *
0:  *	@author Rick Hillegas
1:  */
1: 
1: public class InsertConstantAction extends WriteCursorConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. But it is NOT used
1:  	**	across either major or minor releases.  It is only
1: 	** 	written persistently in stored prepared statements, 
1: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
1: 	**	ITS read/writeExternal.
1: 	**
1: 	********************************************************/
1: 
1: 	/* Which (0-based) columns are indexed */
1: 	boolean[]	indexedCols;
1: 
1: 	/* These variables are needed to support Autoincrement-- after an insert
1: 	 * we need to remember the last autoincrement value inserted into the 
1: 	 * table and the user could do a search based on schema,table,columnname
1: 	 */
1: 	private String schemaName;
1: 	private String tableName;
1: 	private String columnNames[];
1: 
1: 	/**
1: 	 * An array of row location objects (0 based), one for each
1: 	 * column in the table. If the column is an 
1: 	 * autoincrement table then the array points to
1: 	 * the row location of the column in SYSCOLUMNS.
1: 	 * if not, then it contains null.
1: 	 */
0: 	protected RowLocation[] autoincRowLocation;
1: 	private long[] autoincIncrement;
1: 	
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
0:     public	InsertConstantAction() { super(); }
1: 
1: 	/**
1: 	 *	Make the ConstantAction for an INSERT statement.
1: 	 *
1: 	 *  @param conglomId	Conglomerate ID.
1: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
1: 	 *  @param irgs			Index descriptors
1: 	 *  @param indexCIDS	Conglomerate IDs of indices
1: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
1: 	 *  @param indexNames   Names of indices on this table for error reporting.
1: 	 *  @param deferred		True means process as a deferred insert.
1: 	 *  @param targetProperties	Properties on the target table.
1: 	 *	@param targetUUID	UUID of target table
1: 	 *	@param lockMode		The lockMode to use on the target table
1: 	 *	@param fkInfo		Array of structures containing foreign key info, 
1: 	 *						if any (may be null)
1: 	 *	@param triggerInfo	Array of structures containing trigger info, 
1: 	 *						if any (may be null)
1:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
1: 	 *  @param indexedCols	boolean[] of which (0-based) columns are indexed.
1: 	 *  @param singleRowSource		Whether or not source is a single row source
1: 	 *  @param autoincRowLocation Array of rowlocations of autoincrement values
1: 	 * 							  in SYSCOLUMNS for each ai column.
0: 	 *  @param schemaName	schema of target table.
0: 	 *  @param tableName    name of target table.
0: 	 *  @param columnNames  array of columnnames of the target table.
0: 	 *  @param autoincIncrement array of increment values for ai columns.
1: 	 */
0: 	public	InsertConstantAction(TableDescriptor tableDescriptor,
1: 								long				conglomId,
1: 								StaticCompiledOpenConglomInfo heapSCOCI,
1: 								IndexRowGenerator[]	irgs,
1: 								long[]				indexCIDS,
1: 								StaticCompiledOpenConglomInfo[] indexSCOCIs,
1: 								String[]			indexNames,
1: 								boolean				deferred,
1: 								Properties			targetProperties,
1: 								UUID				targetUUID,
1: 								int 				lockMode,
1: 								FKInfo[]			fkInfo,
1: 								TriggerInfo			triggerInfo,
1: 								int[]               streamStorableHeapColIds,
1: 								boolean[]			indexedCols,
1: 								boolean				singleRowSource,
0: 								RowLocation[]		autoincRowLocation)
1: 	{
1: 		super(conglomId, 
1: 			  heapSCOCI,
1: 			  irgs, 
1: 			  indexCIDS, 
1: 			  indexSCOCIs,
1: 			  indexNames,
1: 			  deferred, 
1: 			  targetProperties,
1: 			  targetUUID,
1: 			  lockMode,
1: 			  fkInfo,	
1: 			  triggerInfo,
0: 			  (ExecRow)null, // never need to pass in a heap row
1: 			  null,
1: 			  null,
1: 			  streamStorableHeapColIds,
0: 			  singleRowSource
1: 			  );
1: 		this.indexedCols = indexedCols;
1: 		this.autoincRowLocation = autoincRowLocation;
1: 		this.schemaName = tableDescriptor.getSchemaName();
1: 		this.tableName  = tableDescriptor.getName();
1: 		this.columnNames = tableDescriptor.getColumnNamesArray();
1: 		this.autoincIncrement = tableDescriptor.getAutoincIncrementArray();
1: 		this.indexNames = indexNames;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 	// Formatable methods
1: 	public void readExternal (ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		Object[] objectArray = null;
1: 		super.readExternal(in);
1: 		indexedCols = ArrayUtil.readBooleanArray(in);
1: 
1: 		// RESOLVEAUTOINCREMENT: this is the new stuff-- probably version!!
1: 		objectArray = ArrayUtil.readObjectArray(in);
1: 		
1: 		if (objectArray != null)
1: 		{
1: 			// is there a better way to do cast the whole array?
1: 			autoincRowLocation = new RowLocation[objectArray.length];
1: 			for (int i = 0; i < objectArray.length; i++)
1: 				autoincRowLocation[i] = (RowLocation)objectArray[i];
1: 		}
1: 		
1: 		schemaName = (String)in.readObject();
1: 		tableName  = (String)in.readObject();
1: 		objectArray = ArrayUtil.readObjectArray(in);
1: 		if (objectArray != null)
1: 		{
1: 			// is there a better way to do cast the whole array?
1: 			columnNames = new String[objectArray.length];
1: 			for (int i = 0; i < objectArray.length; i++)
1: 				columnNames[i] = (String)objectArray[i];
1: 		}
1: 		
1: 		autoincIncrement = ArrayUtil.readLongArray(in);
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		ArrayUtil.writeBooleanArray(out, indexedCols);
1: 		ArrayUtil.writeArray(out, autoincRowLocation);
1: 		out.writeObject(schemaName);
1: 		out.writeObject(tableName);
1: 		ArrayUtil.writeArray(out, columnNames);
1: 		ArrayUtil.writeLongArray(out, autoincIncrement);
1: 	}
1: 
1: 	/**
1: 	  *	Gets the name of the schema that the table is in
1: 	  *
1: 	  *	@return	schema name
1: 	  */
1: 	public String getSchemaName() { return schemaName; }
1: 
1: 	/**
1: 	  *	Gets the name of the table being inserted into
1: 	  *
1: 	  *	@return	name of table being inserted into
1: 	  */
1: 	public String getTableName() { return tableName; }
1: 
1: 
1: 	/**
1: 	 * gets the name of the desired column in the taget table.
1: 	 * 
1: 	 * @param 	i	the column number
1: 	 */
1: 	public String getColumnName(int i) { return columnNames[i]; }
1: 
1: 	/**
1: 	 * gets the increment value for a column.
1: 	 *
1: 	 * @param 	i 	the column number
1: 	 */
1: 	public long   getAutoincIncrement(int i) { return autoincIncrement[i]; }
1: 
1: 	/**
0: 	 * Does the target table has autoincrement columns.
1: 	 *
0: 	 * @return 	True if the table has ai columns
1: 	 */
0: 	public boolean hasAutoincrement()
1: 	{
0: 		return (autoincRowLocation != null);
1: 	}
1: 
1: 	/**
0: 	 * gets the row location 
1: 	 */
0: 	public RowLocation[] getAutoincRowLocation()
1: 	{
0: 		return autoincRowLocation;
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INSERT_CONSTANT_ACTION_V01_ID; }
1: 
1: 	// CLASS METHODS
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: 
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  *	This class  describes compiled constants that are passed into
0:  *	InsertResultSets.
0:  *
0:  *	@author Rick Hillegas
0:  */
0: 
0: public class InsertConstantAction extends WriteCursorConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. But it is NOT used
0:  	**	across either major or minor releases.  It is only
0: 	** 	written persistently in stored prepared statements, 
0: 	**	not in the replication stage.  SO, IT IS OK TO CHANGE
0: 	**	ITS read/writeExternal.
0: 	**
0: 	********************************************************/
0: 
0: 	/* Which (0-based) columns are indexed */
0: 	boolean[]	indexedCols;
0: 
0: 	/* These variables are needed to support Autoincrement-- after an insert
0: 	 * we need to remember the last autoincrement value inserted into the 
0: 	 * table and the user could do a search based on schema,table,columnname
0: 	 */
0: 	private String schemaName;
0: 	private String tableName;
0: 	private String columnNames[];
0: 
0: 	/**
0: 	 * An array of row location objects (0 based), one for each
0: 	 * column in the table. If the column is an 
0: 	 * autoincrement table then the array points to
0: 	 * the row location of the column in SYSCOLUMNS.
0: 	 * if not, then it contains null.
0: 	 */
0: 	protected RowLocation[] autoincRowLocation;
0: 	private long[] autoincIncrement;
0: 	
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	InsertConstantAction() { super(); }
0: 
0: 	/**
0: 	 *	Make the ConstantAction for an INSERT statement.
0: 	 *
0: 	 *  @param conglomId	Conglomerate ID.
0: 	 *	@param heapSCOCI	StaticCompiledOpenConglomInfo for heap.
0: 	 *  @param irgs			Index descriptors
0: 	 *  @param indexCIDS	Conglomerate IDs of indices
0: 	 *	@param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
0: 	 *  @param indexNames   Names of indices on this table for error reporting.
0: 	 *  @param deferred		True means process as a deferred insert.
0: 	 *  @param targetProperties	Properties on the target table.
0: 	 *	@param targetUUID	UUID of target table
0: 	 *	@param lockMode		The lockMode to use on the target table
0: 	 *	@param fkInfo		Array of structures containing foreign key info, 
0: 	 *						if any (may be null)
0: 	 *	@param triggerInfo	Array of structures containing trigger info, 
0: 	 *						if any (may be null)
0:      *  @param streamStorableHeapColIds Null for non rep. (0 based)
0: 	 *  @param indexedCols	boolean[] of which (0-based) columns are indexed.
0: 	 *  @param singleRowSource		Whether or not source is a single row source
0: 	 *  @param autoincRowLocation Array of rowlocations of autoincrement values
0: 	 * 							  in SYSCOLUMNS for each ai column.
0: 	 *  @param schemaName	schema of target table.
0: 	 *  @param tableName    name of target table.
0: 	 *  @param columnNames  array of columnnames of the target table.
0: 	 *  @param autoincIncrement array of increment values for ai columns.
0: 	 */
0: 	public	InsertConstantAction(TableDescriptor tableDescriptor,
0: 								long				conglomId,
0: 								StaticCompiledOpenConglomInfo heapSCOCI,
0: 								IndexRowGenerator[]	irgs,
0: 								long[]				indexCIDS,
0: 								StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 								String[]			indexNames,
0: 								boolean				deferred,
0: 								Properties			targetProperties,
0: 								UUID				targetUUID,
0: 								int 				lockMode,
0: 								FKInfo[]			fkInfo,
0: 								TriggerInfo			triggerInfo,
0: 								int[]               streamStorableHeapColIds,
0: 								boolean[]			indexedCols,
0: 								boolean				singleRowSource,
0: 								RowLocation[]		autoincRowLocation)
0: 	{
0: 		super(conglomId, 
0: 			  heapSCOCI,
0: 			  irgs, 
0: 			  indexCIDS, 
0: 			  indexSCOCIs,
0: 			  indexNames,
0: 			  deferred, 
0: 			  targetProperties,
0: 			  targetUUID,
0: 			  lockMode,
0: 			  fkInfo,	
0: 			  triggerInfo,
0: 			  (ExecRow)null, // never need to pass in a heap row
0: 			  null,
0: 			  null,
0: 			  streamStorableHeapColIds,
0: 			  singleRowSource
0: 			  );
0: 		this.indexedCols = indexedCols;
0: 		this.autoincRowLocation = autoincRowLocation;
0: 		this.schemaName = tableDescriptor.getSchemaName();
0: 		this.tableName  = tableDescriptor.getName();
0: 		this.columnNames = tableDescriptor.getColumnNamesArray();
0: 		this.autoincIncrement = tableDescriptor.getAutoincIncrementArray();
0: 		this.indexNames = indexNames;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 	// Formatable methods
0: 	public void readExternal (ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		Object[] objectArray = null;
0: 		super.readExternal(in);
0: 		indexedCols = ArrayUtil.readBooleanArray(in);
0: 
0: 		// RESOLVEAUTOINCREMENT: this is the new stuff-- probably version!!
0: 		objectArray = ArrayUtil.readObjectArray(in);
0: 		
0: 		if (objectArray != null)
0: 		{
0: 			// is there a better way to do cast the whole array?
0: 			autoincRowLocation = new RowLocation[objectArray.length];
0: 			for (int i = 0; i < objectArray.length; i++)
0: 				autoincRowLocation[i] = (RowLocation)objectArray[i];
0: 		}
0: 		
0: 		schemaName = (String)in.readObject();
0: 		tableName  = (String)in.readObject();
0: 		objectArray = ArrayUtil.readObjectArray(in);
0: 		if (objectArray != null)
0: 		{
0: 			// is there a better way to do cast the whole array?
0: 			columnNames = new String[objectArray.length];
0: 			for (int i = 0; i < objectArray.length; i++)
0: 				columnNames[i] = (String)objectArray[i];
0: 		}
0: 		
0: 		autoincIncrement = ArrayUtil.readLongArray(in);
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		ArrayUtil.writeBooleanArray(out, indexedCols);
0: 		ArrayUtil.writeArray(out, autoincRowLocation);
0: 		out.writeObject(schemaName);
0: 		out.writeObject(tableName);
0: 		ArrayUtil.writeArray(out, columnNames);
0: 		ArrayUtil.writeLongArray(out, autoincIncrement);
0: 	}
0: 
0: 	/**
0: 	  *	Gets the name of the schema that the table is in
0: 	  *
0: 	  *	@return	schema name
0: 	  */
0: 	public String getSchemaName() { return schemaName; }
0: 
0: 	/**
0: 	  *	Gets the name of the table being inserted into
0: 	  *
0: 	  *	@return	name of table being inserted into
0: 	  */
0: 	public String getTableName() { return tableName; }
0: 
0: 
0: 	/**
0: 	 * gets the name of the desired column in the taget table.
0: 	 * 
0: 	 * @param 	i	the column number
0: 	 */
0: 	public String getColumnName(int i) { return columnNames[i]; }
0: 
0: 	/**
0: 	 * gets the increment value for a column.
0: 	 *
0: 	 * @param 	i 	the column number
0: 	 */
0: 	public long   getAutoincIncrement(int i) { return autoincIncrement[i]; }
0: 
0: 	/**
0: 	 * Does the target table has autoincrement columns.
0: 	 *
0: 	 * @return 	True if the table has ai columns
0: 	 */
0: 	public boolean hasAutoincrement()
0: 	{
0: 		return (autoincRowLocation != null);
0: 	}
0: 
0: 	/**
0: 	 * gets the row location 
0: 	 */
0: 	public RowLocation[] getAutoincRowLocation()
0: 	{
0: 		return autoincRowLocation;
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INSERT_CONSTANT_ACTION_V01_ID; }
0: 
0: 	// CLASS METHODS
0: 
0: }
============================================================================