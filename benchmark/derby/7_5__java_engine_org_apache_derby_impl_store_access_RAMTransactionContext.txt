1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.RAMTransactionContext
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:fa09146: import org.apache.derby.iapi.error.StandardException;
1:fa09146: 
1:fa09146: import org.apache.derby.iapi.services.context.ContextManager;
1:fa09146: import org.apache.derby.iapi.services.context.ContextImpl;
1:fa09146: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:fa09146: 
1:824ca0b: final class RAMTransactionContext extends ContextImpl
1:eac0369: {
2:eac0369: 	/**
1:eac0369: 	The transaction this context is managing.
1:eac0369: 	**/
1:18176ce: 	private RAMTransaction transaction;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   true if any exception causes this transaction to be destroyed
1:eac0369: 	**/
1:18176ce: 	private final boolean abortAll;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Context methods (most are implemented by super-class).
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Handle cleanup processing for this context. The resources
1:eac0369: 	associated with a transaction are the open controllers.
1:eac0369: 	Cleanup involves closing them at the appropriate time.
1:eac0369: 	Rollback of the underlying transaction is handled by the
1:eac0369: 	raw store.
1:eac0369: 	**/
1:eac0369: 	public void cleanupOnError(Throwable error)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(getContextManager() != null);
1:eac0369: 
1:eac0369: 		boolean destroy = false;
1:eac0369: 
1:eac0369: 		if (abortAll == false && (error instanceof StandardException))
1:eac0369: 		{
1:eac0369: 			StandardException se = (StandardException) error;
1:eac0369: 
1:eac0369: 			// If the severity is lower than a transaction error then do nothing.
1:eac0369: 			if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:eac0369: 				return;
1:eac0369: 
1:eac0369: 			// If the session is going to disappear then we want to destroy this
1:eac0369: 			// transaction, not just abort it.
1:eac0369: 			if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1:eac0369: 				destroy = true;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			// abortAll is true or some java* error, throw away the
1:eac0369: 			// transaction. 
1:eac0369: 			destroy = true;
1:eac0369: 		}
1:eac0369: 
1:eac0369:         if (transaction != null)
1:eac0369:         {
1:eac0369:             try
1:eac0369:             {
1:eac0369:                 transaction.invalidateConglomerateCache();
1:eac0369:             }
1:eac0369:             catch (StandardException se)
1:eac0369:             {
1:eac0369:                 // RESOLVE - what to do in error case.
1:eac0369:                 if (SanityManager.DEBUG)
1:eac0369:                     SanityManager.THROWASSERT(
1:e7d2a42:                         "got error while invalidating cache.", se);
1:eac0369:             }
1:eac0369: 
1:eac0369:             transaction.closeControllers(true /* close held controllers */ );
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (destroy)
1:eac0369:         {
1:eac0369:             transaction = null;
1:eac0369:             popMe();
1:eac0369:         }
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of RAMTransactionContext
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// this constructor is called with the transaction
1:eac0369: 	// controller to be saved when the context
1:eac0369: 	// is created (when the first statement comes in, likely).
1:824ca0b: 	RAMTransactionContext(
1:eac0369:     ContextManager  cm,
1:eac0369:     String          context_id,
1:eac0369:     RAMTransaction  theTransaction, 
1:eac0369:     boolean         abortAll)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		super(cm, context_id);
1:eac0369: 
1:eac0369: 		this.abortAll = abortAll;
1:eac0369: 		transaction = theTransaction;
1:eac0369: 		transaction.setContext(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* package */ RAMTransaction getTransaction()
1:eac0369: 	{
1:eac0369: 		return transaction;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* package */ void setTransaction(
1:eac0369:     RAMTransaction  transaction)
1:eac0369: 	{
1:eac0369: 		this.transaction = transaction;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1:                         "got error while invalidating cache.", se);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18176ce
/////////////////////////////////////////////////////////////////////////
1: 	private RAMTransaction transaction;
1: 	private final boolean abortAll;
commit:fa09146
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:824ca0b
/////////////////////////////////////////////////////////////////////////
1: final class RAMTransactionContext extends ContextImpl
/////////////////////////////////////////////////////////////////////////
1: 	RAMTransactionContext(
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.RAMTransactionContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
0: public class RAMTransactionContext extends ContextImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	The transaction this context is managing.
1: 	**/
0: 	protected RAMTransaction transaction;
1: 
1: 	/**
1: 	   true if any exception causes this transaction to be destroyed
1: 	**/
0: 	private boolean abortAll;
1: 
1: 	/*
1: 	** Context methods (most are implemented by super-class).
1: 	*/
1: 
1: 	/**
1: 	Handle cleanup processing for this context. The resources
1: 	associated with a transaction are the open controllers.
1: 	Cleanup involves closing them at the appropriate time.
1: 	Rollback of the underlying transaction is handled by the
1: 	raw store.
1: 	**/
1: 	public void cleanupOnError(Throwable error)
1:         throws StandardException
1: 	{
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(getContextManager() != null);
1: 
1: 		boolean destroy = false;
1: 
1: 		if (abortAll == false && (error instanceof StandardException))
1: 		{
1: 			StandardException se = (StandardException) error;
1: 
1: 			// If the severity is lower than a transaction error then do nothing.
1: 			if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1: 				return;
1: 
1: 			// If the session is going to disappear then we want to destroy this
1: 			// transaction, not just abort it.
1: 			if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1: 				destroy = true;
1: 		}
1: 		else
1: 		{
1: 			// abortAll is true or some java* error, throw away the
1: 			// transaction. 
1: 			destroy = true;
1: 		}
1: 
1:         if (transaction != null)
1:         {
1:             try
1:             {
1:                 transaction.invalidateConglomerateCache();
1:             }
1:             catch (StandardException se)
1:             {
1:                 // RESOLVE - what to do in error case.
1:                 if (SanityManager.DEBUG)
1:                     SanityManager.THROWASSERT(
0:                         "got error while invalidating cache.");
1:             }
1: 
1:             transaction.closeControllers(true /* close held controllers */ );
1:         }
1: 
1:         if (destroy)
1:         {
1:             transaction = null;
1:             popMe();
1:         }
1: 
1: 	}
1: 
1: 	/*
1: 	** Methods of RAMTransactionContext
1: 	*/
1: 
1: 	// this constructor is called with the transaction
1: 	// controller to be saved when the context
1: 	// is created (when the first statement comes in, likely).
0: 	public RAMTransactionContext(
1:     ContextManager  cm,
1:     String          context_id,
1:     RAMTransaction  theTransaction, 
1:     boolean         abortAll)
1: 		throws StandardException
1: 	{
1: 		super(cm, context_id);
1: 
1: 		this.abortAll = abortAll;
1: 		transaction = theTransaction;
1: 		transaction.setContext(this);
1: 	}
1: 
1: 	/* package */ RAMTransaction getTransaction()
1: 	{
1: 		return transaction;
1: 	}
1: 
1: 	/* package */ void setTransaction(
1:     RAMTransaction  transaction)
1: 	{
1: 		this.transaction = transaction;
1: 	}
1: }
1: 
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: public class RAMTransactionContext extends ContextImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	The transaction this context is managing.
0: 	**/
0: 	protected RAMTransaction transaction;
0: 
0: 	/**
0: 	   true if any exception causes this transaction to be destroyed
0: 	**/
0: 	private boolean abortAll;
0: 
0: 	/*
0: 	** Context methods (most are implemented by super-class).
0: 	*/
0: 
0: 	/**
0: 	Handle cleanup processing for this context. The resources
0: 	associated with a transaction are the open controllers.
0: 	Cleanup involves closing them at the appropriate time.
0: 	Rollback of the underlying transaction is handled by the
0: 	raw store.
0: 	**/
0: 	public void cleanupOnError(Throwable error)
0:         throws StandardException
0: 	{
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(getContextManager() != null);
0: 
0: 		boolean destroy = false;
0: 
0: 		if (abortAll == false && (error instanceof StandardException))
0: 		{
0: 			StandardException se = (StandardException) error;
0: 
0: 			// If the severity is lower than a transaction error then do nothing.
0: 			if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
0: 				return;
0: 
0: 			// If the session is going to disappear then we want to destroy this
0: 			// transaction, not just abort it.
0: 			if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
0: 				destroy = true;
0: 		}
0: 		else
0: 		{
0: 			// abortAll is true or some java* error, throw away the
0: 			// transaction. 
0: 			destroy = true;
0: 		}
0: 
0:         if (transaction != null)
0:         {
0:             try
0:             {
0:                 transaction.invalidateConglomerateCache();
0:             }
0:             catch (StandardException se)
0:             {
0:                 // RESOLVE - what to do in error case.
0:                 if (SanityManager.DEBUG)
0:                     SanityManager.THROWASSERT(
0:                         "got error while invalidating cache.");
0:             }
0: 
0:             transaction.closeControllers(true /* close held controllers */ );
0:         }
0: 
0:         if (destroy)
0:         {
0:             transaction = null;
0:             popMe();
0:         }
0: 
0: 	}
0: 
0: 	/*
0: 	** Methods of RAMTransactionContext
0: 	*/
0: 
0: 	// this constructor is called with the transaction
0: 	// controller to be saved when the context
0: 	// is created (when the first statement comes in, likely).
0: 	public RAMTransactionContext(
0:     ContextManager  cm,
0:     String          context_id,
0:     RAMTransaction  theTransaction, 
0:     boolean         abortAll)
0: 		throws StandardException
0: 	{
0: 		super(cm, context_id);
0: 
0: 		this.abortAll = abortAll;
0: 		transaction = theTransaction;
0: 		transaction.setContext(this);
0: 	}
0: 
0: 	/* package */ RAMTransaction getTransaction()
0: 	{
0: 		return transaction;
0: 	}
0: 
0: 	/* package */ void setTransaction(
0:     RAMTransaction  transaction)
0: 	{
0: 		this.transaction = transaction;
0: 	}
0: }
0: 
0: 
============================================================================