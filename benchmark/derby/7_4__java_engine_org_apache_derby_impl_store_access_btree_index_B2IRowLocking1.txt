1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking1
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTree;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
1:eac0369: import org.apache.derby.impl.store.access.btree.OpenBTree;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The btree locking policy which implements read uncommitted isolation level.
1:eac0369: 
1:eac0369: It inherits all functionality from B2IRowLocking2 except that it does not
1:eac0369: get any read row locks (and thus does not release them).  Note that table
1:eac0369: level and table level intent locking remains the same as B2IRowLocking2 as
1:eac0369: this is currently the way we prevent concurrent ddl from happening while a
1:eac0369: read uncommitted scanner is operating in the btree.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: class B2IRowLocking1 extends B2IRowLocking2 implements BTreeLockingPolicy
1:eac0369: { 
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     B2IRowLocking1(
1:eac0369:     Transaction             rawtran,
1:eac0369:     int                     lock_level,
1:eac0369:     LockingPolicy           locking_policy,
1:eac0369:     ConglomerateController  base_cc,
1:eac0369:     OpenBTree               open_btree)
1:eac0369:     {
1:eac0369:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockScan*() locking methods of BTree:
1:86e051f:      *     lockScanRow              - lock row, only if row is forUpdate and
1:86e051f:      *                                not a previous key lock.
1:eac0369:      *     unlockScanRecordAfterRead- unlock the scan record if we locked it in
1:eac0369:      *                                lockScanRow.
1:eac0369:      *                                 
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a row as part of doing the scan.
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot (or the previous row if slot is 0).
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
1:eac0369:      * @param open_btree        The open_btree to associate latches with - 
1:eac0369:      *                          used if routine has to scan backward.
1:965be70:      * @param pos               The position of the row to lock.
1:965be70:      * @param lock_template     A scratch area to use to read in rows.
1:eac0369:      * @param previous_key_lock Is this a previous key lock call?
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean lockScanRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     boolean                 previous_key_lock,
1:eac0369:     boolean                 forUpdate,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         // only get the row lock if it is not a previous key lock and iff
1:eac0369:         // it is an update lock.
1:eac0369:         return(
1:eac0369:             _lockScanRow(
1:eac0369:                  open_btree,
1:eac0369:                  pos,
1:eac0369:                  (forUpdate && !previous_key_lock), // only get update row lock
1:eac0369:                  lock_fetch_desc, lock_template, lock_row_loc,
1:eac0369:                  previous_key_lock,
1:eac0369:                  forUpdate,
1:eac0369:                  lock_operation));
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Release read lock on a row.
1:eac0369:      *
1:eac0369:      * Because this is read uncommitted no S row locks will have been requested,
1:eac0369:      * thus none need be released.  The only locks that need to be released
1:eac0369:      * are U locks requested if the scan was opened for update.
1:eac0369:      *
1:eac0369:      * @param pos               The position of the row to unlock.
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public void unlockScanRecordAfterRead(
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 forUpdate)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (forUpdate)
1:eac0369:         {
1:eac0369:             super.unlockScanRecordAfterRead(pos, forUpdate);
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:eac0369:      *
1:eac0369:      *     lockNonScanPreviousRow   - lock the row previous to the current
2:eac0369:      *                                (inherit from B2IRowLocking2, we still 
1:eac0369:      *                                 get page control locks) - only called
1:eac0369:      *                                 by insert.
1:eac0369:      *     lockNonScanRow           - lock the input row
1:eac0369:      *                                (inherit from B2IRowLocking2, we still
1:eac0369:      *                                 get page control locks) - only called
1:eac0369:      *                                 by insert.
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6fea40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:86e051f
/////////////////////////////////////////////////////////////////////////
1:      *     lockScanRow              - lock row, only if row is forUpdate and
1:      *                                not a previous key lock.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:965be70
/////////////////////////////////////////////////////////////////////////
1:      * @param pos               The position of the row to lock.
1:      * @param lock_template     A scratch area to use to read in rows.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking1
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.impl.store.access.btree.BTree;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.WaitError;
1: 
1: /**
1: 
1: The btree locking policy which implements read uncommitted isolation level.
1: 
1: It inherits all functionality from B2IRowLocking2 except that it does not
1: get any read row locks (and thus does not release them).  Note that table
1: level and table level intent locking remains the same as B2IRowLocking2 as
1: this is currently the way we prevent concurrent ddl from happening while a
1: read uncommitted scanner is operating in the btree.
1: 
1: **/
1: 
1: class B2IRowLocking1 extends B2IRowLocking2 implements BTreeLockingPolicy
1: { 
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
1: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     B2IRowLocking1(
1:     Transaction             rawtran,
1:     int                     lock_level,
1:     LockingPolicy           locking_policy,
1:     ConglomerateController  base_cc,
1:     OpenBTree               open_btree)
1:     {
1:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
1:      *                                (inherit from B2IRowLocking2, we still
0:      *                                 get page control locks).
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *                                (inherit from B2IRowLocking2, should never
0:      *                                 be called while in read uncommitted).
0:      *     lockScanRow              - lock row and possibly the scan page, only
0:      *                                if row is forUpdate and not a previous key
0:      *                                lock.
0:      *     unlockScan               - unlock the scan page
0:      *                                (inherit from B2IRowLocking2, should never
0:      *                                 be called while in read uncommitted).
1:      *     unlockScanRecordAfterRead- unlock the scan record if we locked it in
1:      *                                lockScanRow.
1:      *                                 
1:      **************************************************************************
1:      */
1: 
1: 
1: 
1:     /**
1:      * Lock a row as part of doing the scan.
1:      * <p>
1:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
0:      * (p>
0:      * As a side effect stores the value of the record handle of the current
0:      * scan lock.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
1:      * @param previous_key_lock Is this a previous key lock call?
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean lockScanRow(
1:     OpenBTree               open_btree,
0:     BTree                   btree,
1:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     boolean                 previous_key_lock,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException
1:     {
0:         // request the scan lock if necessary.
1:         // only get the row lock if it is not a previous key lock and iff
1:         // it is an update lock.
1:         return(
1:             _lockScanRow(
1:                  open_btree,
0:                  btree,
1:                  pos,
1:                  (forUpdate && !previous_key_lock), // only get update row lock
0:                  request_scan_lock,
1:                  lock_fetch_desc, lock_template, lock_row_loc,
1:                  previous_key_lock,
1:                  forUpdate,
1:                  lock_operation));
1:     }
1: 
1:     /**
1:      * Release read lock on a row.
1:      *
1:      * Because this is read uncommitted no S row locks will have been requested,
1:      * thus none need be released.  The only locks that need to be released
1:      * are U locks requested if the scan was opened for update.
1:      *
1:      * @param pos               The position of the row to unlock.
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1:      **/
1:     public void unlockScanRecordAfterRead(
1:     BTreeRowPosition        pos,
1:     boolean                 forUpdate)
1: 		throws StandardException
1:     {
1:         if (forUpdate)
1:         {
1:             super.unlockScanRecordAfterRead(pos, forUpdate);
1:         }
1:     }
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:      *
1:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:      *                                (inherit from B2IRowLocking2, we still 
1:      *                                 get page control locks) - only called
1:      *                                 by insert.
1:      *     lockNonScanRow           - lock the input row
1:      *                                (inherit from B2IRowLocking2, we still
1:      *                                 get page control locks) - only called
1:      *                                 by insert.
1:      **************************************************************************
1:      */
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.impl.store.access.btree.BTree;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
0: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.WaitError;
0: 
0: /**
0: 
0: The btree locking policy which implements read uncommitted isolation level.
0: 
0: It inherits all functionality from B2IRowLocking2 except that it does not
0: get any read row locks (and thus does not release them).  Note that table
0: level and table level intent locking remains the same as B2IRowLocking2 as
0: this is currently the way we prevent concurrent ddl from happening while a
0: read uncommitted scanner is operating in the btree.
0: 
0: **/
0: 
0: class B2IRowLocking1 extends B2IRowLocking2 implements BTreeLockingPolicy
0: { 
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     B2IRowLocking1(
0:     Transaction             rawtran,
0:     int                     lock_level,
0:     LockingPolicy           locking_policy,
0:     ConglomerateController  base_cc,
0:     OpenBTree               open_btree)
0:     {
0:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *                                (inherit from B2IRowLocking2, we still
0:      *                                 get page control locks).
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *                                (inherit from B2IRowLocking2, should never
0:      *                                 be called while in read uncommitted).
0:      *     lockScanRow              - lock row and possibly the scan page, only
0:      *                                if row is forUpdate and not a previous key
0:      *                                lock.
0:      *     unlockScan               - unlock the scan page
0:      *                                (inherit from B2IRowLocking2, should never
0:      *                                 be called while in read uncommitted).
0:      *     unlockScanRecordAfterRead- unlock the scan record if we locked it in
0:      *                                lockScanRow.
0:      *                                 
0:      **************************************************************************
0:      */
0: 
0: 
0: 
0:     /**
0:      * Lock a row as part of doing the scan.
0:      * <p>
0:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      * (p>
0:      * As a side effect stores the value of the record handle of the current
0:      * scan lock.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param previous_key_lock Is this a previous key lock call?
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean lockScanRow(
0:     OpenBTree               open_btree,
0:     BTree                   btree,
0:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     boolean                 previous_key_lock,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException
0:     {
0:         // request the scan lock if necessary.
0:         // only get the row lock if it is not a previous key lock and iff
0:         // it is an update lock.
0:         return(
0:             _lockScanRow(
0:                  open_btree,
0:                  btree,
0:                  pos,
0:                  (forUpdate && !previous_key_lock), // only get update row lock
0:                  request_scan_lock,
0:                  lock_fetch_desc, lock_template, lock_row_loc,
0:                  previous_key_lock,
0:                  forUpdate,
0:                  lock_operation));
0:     }
0: 
0:     /**
0:      * Release read lock on a row.
0:      *
0:      * Because this is read uncommitted no S row locks will have been requested,
0:      * thus none need be released.  The only locks that need to be released
0:      * are U locks requested if the scan was opened for update.
0:      *
0:      * @param pos               The position of the row to unlock.
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0:      **/
0:     public void unlockScanRecordAfterRead(
0:     BTreeRowPosition        pos,
0:     boolean                 forUpdate)
0: 		throws StandardException
0:     {
0:         if (forUpdate)
0:         {
0:             super.unlockScanRecordAfterRead(pos, forUpdate);
0:         }
0:     }
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockNonScan*() locking methods of BTree:
0:      *
0:      *     lockNonScanPreviousRow   - lock the row previous to the current
0:      *                                (inherit from B2IRowLocking2, we still 
0:      *                                 get page control locks) - only called
0:      *                                 by insert.
0:      *     lockNonScanRow           - lock the input row
0:      *                                (inherit from B2IRowLocking2, we still
0:      *                                 get page control locks) - only called
0:      *                                 by insert.
0:      **************************************************************************
0:      */
0: 
0: }
============================================================================