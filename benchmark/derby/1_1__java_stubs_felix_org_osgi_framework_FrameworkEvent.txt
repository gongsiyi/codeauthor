1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/FrameworkEvent.java,v 1.15 2007/02/20 00:14:12 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2004, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.EventObject;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A general event from the Framework.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>FrameworkEvent</code> objects are delivered to
1:a8b6921:  * <code>FrameworkListener</code>s when a general event occurs within the
1:a8b6921:  * OSGi environment. A type code is used to identify the event type for future
1:a8b6921:  * extendability.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * OSGi Alliance reserves the right to extend the set of event types.
1:a8b6921:  * 
1:a8b6921:  * @Immutable
1:a8b6921:  * @see FrameworkListener
1:a8b6921:  * @version $Revision: 1.15 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public class FrameworkEvent extends EventObject {
1:a8b6921: 	static final long		serialVersionUID	= 207051004521261705L;
1:a8b6921: 	/**
1:a8b6921: 	 * Bundle related to the event.
1:a8b6921: 	 */
1:a8b6921: 	private final Bundle	bundle;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Exception related to the event.
1:a8b6921: 	 */
1:a8b6921: 	private final Throwable	throwable;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Type of event.
1:a8b6921: 	 */
1:a8b6921: 	private final int		type;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The Framework has started.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is fired when the Framework has started after all installed
1:a8b6921: 	 * bundles that are marked to be started have been started and the Framework
1:a8b6921: 	 * has reached the intitial start level.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STARTED</code> is 0x00000001.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see "<code>StartLevel</code>"
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STARTED				= 0x00000001;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * An error has occurred.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * There was an error associated with a bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>ERROR</code> is 0x00000002.
1:a8b6921: 	 */
1:a8b6921: 	public final static int	ERROR				= 0x00000002;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * A PackageAdmin.refreshPackage operation has completed.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is fired when the Framework has completed the refresh packages
1:a8b6921: 	 * operation initiated by a call to the PackageAdmin.refreshPackages method.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>PACKAGES_REFRESHED</code> is 0x00000004.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.2
1:a8b6921: 	 * @see "<code>PackageAdmin.refreshPackages</code>"
1:a8b6921: 	 */
1:a8b6921: 	public final static int	PACKAGES_REFRESHED	= 0x00000004;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * A StartLevel.setStartLevel operation has completed.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This event is fired when the Framework has completed changing the active
1:a8b6921: 	 * start level initiated by a call to the StartLevel.setStartLevel method.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>STARTLEVEL_CHANGED</code> is 0x00000008.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.2
1:a8b6921: 	 * @see "<code>StartLevel</code>"
1:a8b6921: 	 */
1:a8b6921: 	public final static int	STARTLEVEL_CHANGED	= 0x00000008;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * A warning has occurred.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * There was a warning associated with a bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>WARNING</code> is 0x00000010.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	WARNING				= 0x00000010;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * An informational event has occurred.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * There was an informational event associated with a bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The value of <code>INFO</code> is 0x00000020.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public final static int	INFO				= 0x00000020;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a Framework event.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param type The event type.
1:a8b6921: 	 * @param source The event source object. This may not be <code>null</code>.
1:a8b6921: 	 * @deprecated As of 1.2. This constructor is deprecated in favor of using
1:a8b6921: 	 *             the other constructor with the System Bundle as the event
1:a8b6921: 	 *             source.
1:a8b6921: 	 */
1:a8b6921: 	public FrameworkEvent(int type, Object source) {
1:a8b6921: 		super(source);
1:a8b6921: 		this.type = type;
1:a8b6921: 		this.bundle = null;
1:a8b6921: 		this.throwable = null;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a Framework event regarding the specified bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param type The event type.
1:a8b6921: 	 * @param bundle The event source.
1:a8b6921: 	 * @param throwable The related exception. This argument may be
1:a8b6921: 	 *        <code>null</code> if there is no related exception.
1:a8b6921: 	 */
1:a8b6921: 	public FrameworkEvent(int type, Bundle bundle, Throwable throwable) {
1:a8b6921: 		super(bundle);
1:a8b6921: 		this.type = type;
1:a8b6921: 		this.bundle = bundle;
1:a8b6921: 		this.throwable = throwable;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the exception related to this event.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The related exception or <code>null</code> if none.
1:a8b6921: 	 */
1:a8b6921: 	public Throwable getThrowable() {
1:a8b6921: 		return throwable;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the bundle associated with the event. This bundle is also the
1:a8b6921: 	 * source of the event.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The bundle associated with the event.
1:a8b6921: 	 */
1:a8b6921: 	public Bundle getBundle() {
1:a8b6921: 		return bundle;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the type of framework event.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The type values are:
1:a8b6921: 	 * <ul>
1:a8b6921: 	 * <li>{@link #STARTED}
1:a8b6921: 	 * <li>{@link #ERROR}
1:a8b6921: 	 * <li>{@link #WARNING}
1:a8b6921: 	 * <li>{@link #INFO}
1:a8b6921: 	 * <li>{@link #PACKAGES_REFRESHED}
1:a8b6921: 	 * <li>{@link #STARTLEVEL_CHANGED}
1:a8b6921: 	 * </ul>
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The type of state change.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public int getType() {
1:a8b6921: 		return type;
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/FrameworkEvent.java,v 1.15 2007/02/20 00:14:12 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2004, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.util.EventObject;
1: 
1: /**
1:  * A general event from the Framework.
1:  * 
1:  * <p>
1:  * <code>FrameworkEvent</code> objects are delivered to
1:  * <code>FrameworkListener</code>s when a general event occurs within the
1:  * OSGi environment. A type code is used to identify the event type for future
1:  * extendability.
1:  * 
1:  * <p>
1:  * OSGi Alliance reserves the right to extend the set of event types.
1:  * 
1:  * @Immutable
1:  * @see FrameworkListener
1:  * @version $Revision: 1.15 $
1:  */
1: 
1: public class FrameworkEvent extends EventObject {
1: 	static final long		serialVersionUID	= 207051004521261705L;
1: 	/**
1: 	 * Bundle related to the event.
1: 	 */
1: 	private final Bundle	bundle;
1: 
1: 	/**
1: 	 * Exception related to the event.
1: 	 */
1: 	private final Throwable	throwable;
1: 
1: 	/**
1: 	 * Type of event.
1: 	 */
1: 	private final int		type;
1: 
1: 	/**
1: 	 * The Framework has started.
1: 	 * 
1: 	 * <p>
1: 	 * This event is fired when the Framework has started after all installed
1: 	 * bundles that are marked to be started have been started and the Framework
1: 	 * has reached the intitial start level.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>STARTED</code> is 0x00000001.
1: 	 * 
1: 	 * @see "<code>StartLevel</code>"
1: 	 */
1: 	public final static int	STARTED				= 0x00000001;
1: 
1: 	/**
1: 	 * An error has occurred.
1: 	 * 
1: 	 * <p>
1: 	 * There was an error associated with a bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>ERROR</code> is 0x00000002.
1: 	 */
1: 	public final static int	ERROR				= 0x00000002;
1: 
1: 	/**
1: 	 * A PackageAdmin.refreshPackage operation has completed.
1: 	 * 
1: 	 * <p>
1: 	 * This event is fired when the Framework has completed the refresh packages
1: 	 * operation initiated by a call to the PackageAdmin.refreshPackages method.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>PACKAGES_REFRESHED</code> is 0x00000004.
1: 	 * 
1: 	 * @since 1.2
1: 	 * @see "<code>PackageAdmin.refreshPackages</code>"
1: 	 */
1: 	public final static int	PACKAGES_REFRESHED	= 0x00000004;
1: 
1: 	/**
1: 	 * A StartLevel.setStartLevel operation has completed.
1: 	 * 
1: 	 * <p>
1: 	 * This event is fired when the Framework has completed changing the active
1: 	 * start level initiated by a call to the StartLevel.setStartLevel method.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>STARTLEVEL_CHANGED</code> is 0x00000008.
1: 	 * 
1: 	 * @since 1.2
1: 	 * @see "<code>StartLevel</code>"
1: 	 */
1: 	public final static int	STARTLEVEL_CHANGED	= 0x00000008;
1: 
1: 	/**
1: 	 * A warning has occurred.
1: 	 * 
1: 	 * <p>
1: 	 * There was a warning associated with a bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>WARNING</code> is 0x00000010.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	WARNING				= 0x00000010;
1: 
1: 	/**
1: 	 * An informational event has occurred.
1: 	 * 
1: 	 * <p>
1: 	 * There was an informational event associated with a bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The value of <code>INFO</code> is 0x00000020.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public final static int	INFO				= 0x00000020;
1: 
1: 	/**
1: 	 * Creates a Framework event.
1: 	 * 
1: 	 * @param type The event type.
1: 	 * @param source The event source object. This may not be <code>null</code>.
1: 	 * @deprecated As of 1.2. This constructor is deprecated in favor of using
1: 	 *             the other constructor with the System Bundle as the event
1: 	 *             source.
1: 	 */
1: 	public FrameworkEvent(int type, Object source) {
1: 		super(source);
1: 		this.type = type;
1: 		this.bundle = null;
1: 		this.throwable = null;
1: 	}
1: 
1: 	/**
1: 	 * Creates a Framework event regarding the specified bundle.
1: 	 * 
1: 	 * @param type The event type.
1: 	 * @param bundle The event source.
1: 	 * @param throwable The related exception. This argument may be
1: 	 *        <code>null</code> if there is no related exception.
1: 	 */
1: 	public FrameworkEvent(int type, Bundle bundle, Throwable throwable) {
1: 		super(bundle);
1: 		this.type = type;
1: 		this.bundle = bundle;
1: 		this.throwable = throwable;
1: 	}
1: 
1: 	/**
1: 	 * Returns the exception related to this event.
1: 	 * 
1: 	 * @return The related exception or <code>null</code> if none.
1: 	 */
1: 	public Throwable getThrowable() {
1: 		return throwable;
1: 	}
1: 
1: 	/**
1: 	 * Returns the bundle associated with the event. This bundle is also the
1: 	 * source of the event.
1: 	 * 
1: 	 * @return The bundle associated with the event.
1: 	 */
1: 	public Bundle getBundle() {
1: 		return bundle;
1: 	}
1: 
1: 	/**
1: 	 * Returns the type of framework event.
1: 	 * <p>
1: 	 * The type values are:
1: 	 * <ul>
1: 	 * <li>{@link #STARTED}
1: 	 * <li>{@link #ERROR}
1: 	 * <li>{@link #WARNING}
1: 	 * <li>{@link #INFO}
1: 	 * <li>{@link #PACKAGES_REFRESHED}
1: 	 * <li>{@link #STARTLEVEL_CHANGED}
1: 	 * </ul>
1: 	 * 
1: 	 * @return The type of state change.
1: 	 */
1: 
1: 	public int getType() {
1: 		return type;
1: 	}
1: }
============================================================================