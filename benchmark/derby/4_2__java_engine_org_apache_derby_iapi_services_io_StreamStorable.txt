1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.StreamStorable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import java.io.InputStream;
1:eac0369: 
2:eac0369: /**
1:40bcd6b:  * Streaming interface for a data value. The format of
1:40bcd6b:  * the stream is data type dependent and represents the
1:40bcd6b:  * on-disk format of the value. That is it is different
1:40bcd6b:  * to the value an application will see through JDBC
1:40bcd6b:  * with methods like getBinaryStream and getAsciiStream.
1:40bcd6b:  * 
1:40bcd6b:  * <BR>
1:40bcd6b:  * If the value is NULL (DataValueDescriptor.isNull returns
1:40bcd6b:  * true then these methods should not be used to get the value.
1:eac0369: 
1:eac0369:   @see Formatable
1:eac0369:  */
1:eac0369: public interface StreamStorable
1:eac0369: {
1:eac0369: 	/**
1:40bcd6b: 	  Return the on-disk stream state of the object.
1:eac0369: 	  
1:eac0369: 	**/
1:eac0369: 	public InputStream returnStream();
1:eac0369: 
1:eac0369: 	/**
1:40bcd6b: 	  sets the on-disk stream state for the object.
1:eac0369: 	**/
1:eac0369: 	public void setStream(InputStream newStream);
1:eac0369: 
1:eac0369: 	/**
1:40bcd6b:      * Set the value by reading the stream and
1:40bcd6b:      * converting it to an object form.
1:40bcd6b:      * 
1:eac0369: 		@exception StandardException on error
1:eac0369: 	**/
1:eac0369: 	public void loadStream() throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:40bcd6b
/////////////////////////////////////////////////////////////////////////
1:  * Streaming interface for a data value. The format of
1:  * the stream is data type dependent and represents the
1:  * on-disk format of the value. That is it is different
1:  * to the value an application will see through JDBC
1:  * with methods like getBinaryStream and getAsciiStream.
1:  * 
1:  * <BR>
1:  * If the value is NULL (DataValueDescriptor.isNull returns
1:  * true then these methods should not be used to get the value.
1: 	  Return the on-disk stream state of the object.
1: 	  sets the on-disk stream state for the object.
1:      * Set the value by reading the stream and
1:      * converting it to an object form.
1:      * 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.StreamStorable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: import org.apache.derby.iapi.error.StandardException;
1: import java.io.InputStream;
1: 
1: /**
0:   Formatable for holding SQL data (which may be null).
0:   It supports streaming columns.
1: 
1:   @see Formatable
1:  */
1: public interface StreamStorable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
0: 	  Return the stream state of the object.
1: 	  
1: 	**/
1: 	public InputStream returnStream();
1: 
1: 	/**
0: 	  sets the stream state for the object.
1: 	**/
1: 	public void setStream(InputStream newStream);
1: 
1: 	/**
0: 	  sets the stream state for the object.
1: 	
1: 		@exception StandardException on error
1: 	**/
1: 	public void loadStream() throws StandardException;
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: import org.apache.derby.iapi.error.StandardException;
0: import java.io.InputStream;
0: 
0: /**
0:   Formatable for holding SQL data (which may be null).
0:   It supports streaming columns.
0: 
0:   @see Formatable
0:  */
0: public interface StreamStorable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	  Return the stream state of the object.
0: 	  
0: 	**/
0: 	public InputStream returnStream();
0: 
0: 	/**
0: 	  sets the stream state for the object.
0: 	**/
0: 	public void setStream(InputStream newStream);
0: 
0: 	/**
0: 	  sets the stream state for the object.
0: 	
0: 		@exception StandardException on error
0: 	**/
0: 	public void loadStream() throws StandardException;
0: }
============================================================================