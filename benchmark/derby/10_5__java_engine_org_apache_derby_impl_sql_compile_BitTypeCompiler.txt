1:eac0369: /*
14:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BitTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class implements TypeCompiler for the SQL BIT datatype.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:4469400: public class BitTypeCompiler extends BaseTypeCompiler
2:eac0369: {
1:eac0369:         /**
1:eac0369:          * Tell whether this type (bit) can be converted to the given type.
1:eac0369:          *
1:eac0369:          * @see TypeCompiler#convertible
1:eac0369:          */
1:eac0369:         public boolean convertible(TypeId otherType, 
1:eac0369: 								   boolean forDataTypeFunction)
1:eac0369:         {
1:30fa79b:             if ( otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
1:eac0369: 
1:eac0369: 
2:eac0369: 			return (otherType.isBitTypeId() ||
1:eac0369: 					otherType.isBlobTypeId() ||
1:eac0369: 					otherType.userType());
2:eac0369: 		}
1:eac0369: 
1:eac0369: 	
1:eac0369:         /**
1:eac0369:          * Tell whether this type (bit) is compatible with the given type.
1:eac0369:          *
2:eac0369:          * @param otherType     The TypeId of the other type.
1:eac0369:          */
1:eac0369:         public boolean compatible(TypeId otherType)
1:eac0369:         {
1:eac0369:         if (otherType.isBlobTypeId())
2:eac0369:           return false;
1:eac0369:         return (otherType.isBitTypeId());
1:eac0369:         }
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * Tell whether this type (bit) can be stored into from the given type.
1:eac0369:          *
1:eac0369:          * @param otherType     The TypeId of the other type.
1:eac0369:          * @param cf            A ClassFactory
1:eac0369:          */
1:eac0369: 
1:eac0369:         public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369:         {
1:eac0369:         if (otherType.isBlobTypeId())
1:eac0369:           return false;
1:eac0369: 				if (otherType.isBitTypeId())
1:eac0369: 				{
1:eac0369: 						return true;
1:eac0369: 				}
1:eac0369: 
1:eac0369:                 /*
1:eac0369:                 ** If the other type is user-defined, use the java types to determine
1:eac0369:                 ** assignability.
1:eac0369:                 */
1:eac0369:                 return userTypeStorable(this.getTypeId(), otherType, cf);
1:eac0369:         }
1:eac0369: 
1:eac0369:         /** @see TypeCompiler#interfaceName */
1:eac0369:         public String interfaceName()
1:eac0369:         {
1:eac0369:                 // may need to return different for Blob
1:eac0369:                 // however, since it the nullMethodName()
1:eac0369:                 // does not operate on a BitTypeCompiler object?
1:eac0369:                 // it should?
1:eac0369:                 return ClassName.BitDataValue;
1:eac0369:         }
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:eac0369:          */
1:eac0369: 
1:eac0369:         public String getCorrespondingPrimitiveTypeName()
1:eac0369:         {
1:eac0369:             return "byte[]";
1:eac0369:         }
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * @see TypeCompiler#getCastToCharWidth
1:eac0369:          */
1:eac0369:         public int getCastToCharWidth(DataTypeDescriptor dts)
1:eac0369:         {
1:eac0369:                 return dts.getMaximumWidth();
1:eac0369:         }
1:eac0369: 
1:44fad02:         String nullMethodName()
1:eac0369:         {
1:eac0369:                 int formatId = getStoredFormatIdFromTypeId();
1:eac0369:                 switch (formatId)
1:eac0369:                 {
1:eac0369:                         case StoredFormatIds.BIT_TYPE_ID:
1:eac0369:                                 return "getNullBit";
1:eac0369: 
1:eac0369:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
1:eac0369:                                 return "getNullLongVarbit";
1:eac0369: 
1:eac0369:                         case StoredFormatIds.VARBIT_TYPE_ID:
1:eac0369:                                 return "getNullVarbit";
1:eac0369: 
1:eac0369:                         default:
1:eac0369:                                 if (SanityManager.DEBUG)
1:eac0369:                                 {
1:eac0369:                                         SanityManager.THROWASSERT(
1:eac0369:                                                 "unexpected formatId in nullMethodName() - " + formatId);
1:eac0369:                                 }
1:eac0369:                                 return null;
1:eac0369:                 }
1:eac0369:         }
1:eac0369: 
1:3bb140c:         @Override
1:44fad02:         String dataValueMethodName()
1:eac0369:         {
1:eac0369:                 int formatId = getStoredFormatIdFromTypeId();
1:eac0369:                 switch (formatId)
1:eac0369:                 {
1:eac0369:                         case StoredFormatIds.BIT_TYPE_ID:
1:eac0369:                                 return "getBitDataValue";
1:eac0369: 
1:eac0369:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
1:eac0369:                                 return "getLongVarbitDataValue";
1:eac0369: 
1:eac0369:                         case StoredFormatIds.VARBIT_TYPE_ID:
1:eac0369:                                 return "getVarbitDataValue";
1:eac0369: 
1:eac0369:                         default:
1:eac0369:                                 if (SanityManager.DEBUG)
1:eac0369:                                 {
1:eac0369:                                         SanityManager.THROWASSERT(
1:eac0369:                                                 "unexpected formatId in dataValueMethodName() - " + formatId);
1:eac0369:                                 }
1:eac0369:                                 return null;
1:eac0369:                 }
1:eac0369:         }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class BitTypeCompiler extends BaseTypeCompiler
commit:30fa79b
/////////////////////////////////////////////////////////////////////////
1:             if ( otherType.getBaseTypeId().isAnsiUDT() ) { return false; }
commit:07d1108
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class BitTypeCompiler extends BaseTypeCompiler
/////////////////////////////////////////////////////////////////////////
1:         @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c5c4f19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1:         String nullMethodName()
/////////////////////////////////////////////////////////////////////////
1:         String dataValueMethodName()
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
0: 			if (getTypeId().isLongConcatableTypeId() ||
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BitTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
1: /**
1:  * This class implements TypeCompiler for the SQL BIT datatype.
1:  *
0:  * @author Jamie
1:  */
1: 
0: public class BitTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:         /**
0:          * Tell whether this type (bit) can be compared to the given type. // 
1:          *
0: 		 * Bit Types can only be compared to Bit Types.
0: 		 * Long Bit Types can not be compared
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
1: 		{
1: 
0: 			if (correspondingTypeId.isLongConcatableTypeId() ||
0: 				otherType.isLongConcatableTypeId())
1: 				return false;
1: 
0: 			TypeCompiler otherTC = getTypeCompiler(otherType);
1: 			return (otherType.isBitTypeId() || 
0: 					(otherType.userType() &&
0: 					 otherTC.comparable(getTypeId(), forEquals, cf)));
1:         }
1: 	
1:         /**
1:          * Tell whether this type (bit) can be converted to the given type.
1:          *
1:          * @see TypeCompiler#convertible
1:          */
1:         public boolean convertible(TypeId otherType, 
1: 								   boolean forDataTypeFunction)
1:         {
1: 
1: 
1: 			return (otherType.isBitTypeId() ||
1: 					otherType.isBlobTypeId() ||
0: 					otherType.isBooleanTypeId() ||
1: 					otherType.userType());
1: 		}
1: 
1: 	
1:         /**
1:          * Tell whether this type (bit) is compatible with the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1:         public boolean compatible(TypeId otherType)
1:         {
1:         if (otherType.isBlobTypeId())
1:           return false;
1:         return (otherType.isBitTypeId());
1:         }
1: 
1:         /**
1:          * Tell whether this type (bit) can be stored into from the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          * @param cf            A ClassFactory
1:          */
1: 
1:         public boolean storable(TypeId otherType, ClassFactory cf)
1:         {
1:         if (otherType.isBlobTypeId())
1:           return false;
1: 				if (otherType.isBitTypeId())
1: 				{
1: 						return true;
1: 				}
1: 
1:                 /*
1:                 ** If the other type is user-defined, use the java types to determine
1:                 ** assignability.
1:                 */
1:                 return userTypeStorable(this.getTypeId(), otherType, cf);
1:         }
1: 
1:         /** @see TypeCompiler#interfaceName */
1:         public String interfaceName()
1:         {
1:                 // may need to return different for Blob
1:                 // however, since it the nullMethodName()
1:                 // does not operate on a BitTypeCompiler object?
1:                 // it should?
1:                 return ClassName.BitDataValue;
1:         }
1: 
1:         /**
1:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:          */
1: 
1:         public String getCorrespondingPrimitiveTypeName()
1:         {
1:             return "byte[]";
1:         }
1: 
1:         /**
1:          * @see TypeCompiler#getCastToCharWidth
1:          */
1:         public int getCastToCharWidth(DataTypeDescriptor dts)
1:         {
1:                 return dts.getMaximumWidth();
1:         }
1: 
0:         protected String nullMethodName()
1:         {
1:                 int formatId = getStoredFormatIdFromTypeId();
1:                 switch (formatId)
1:                 {
1:                         case StoredFormatIds.BIT_TYPE_ID:
1:                                 return "getNullBit";
1: 
1:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
1:                                 return "getNullLongVarbit";
1: 
1:                         case StoredFormatIds.VARBIT_TYPE_ID:
1:                                 return "getNullVarbit";
1: 
1:                         default:
1:                                 if (SanityManager.DEBUG)
1:                                 {
1:                                         SanityManager.THROWASSERT(
1:                                                 "unexpected formatId in nullMethodName() - " + formatId);
1:                                 }
1:                                 return null;
1:                 }
1:         }
1: 
0:         protected String dataValueMethodName()
1:         {
1:                 int formatId = getStoredFormatIdFromTypeId();
1:                 switch (formatId)
1:                 {
1:                         case StoredFormatIds.BIT_TYPE_ID:
1:                                 return "getBitDataValue";
1: 
1:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
1:                                 return "getLongVarbitDataValue";
1: 
1:                         case StoredFormatIds.VARBIT_TYPE_ID:
1:                                 return "getVarbitDataValue";
1: 
1:                         default:
1:                                 if (SanityManager.DEBUG)
1:                                 {
1:                                         SanityManager.THROWASSERT(
1:                                                 "unexpected formatId in dataValueMethodName() - " + formatId);
1:                                 }
1:                                 return null;
1:                 }
1:         }
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: import org.apache.derby.iapi.reference.JDBC20Translation;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL BIT datatype.
0:  *
0:  * @author Jamie
0:  */
0: 
0: public class BitTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:         /**
0:          * Tell whether this type (bit) can be compared to the given type. // 
0:          *
0: 		 * Bit Types can only be compared to Bit Types.
0: 		 * Long Bit Types can not be compared
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 
0:         public boolean comparable(TypeId otherType,
0:                                   boolean forEquals,
0:                                   ClassFactory cf)
0: 		{
0: 
0: 			if (correspondingTypeId.isLongConcatableTypeId() ||
0: 				otherType.isLongConcatableTypeId())
0: 				return false;
0: 
0: 			TypeCompiler otherTC = getTypeCompiler(otherType);
0: 			return (otherType.isBitTypeId() || 
0: 					(otherType.userType() &&
0: 					 otherTC.comparable(getTypeId(), forEquals, cf)));
0:         }
0: 	
0:         /**
0:          * Tell whether this type (bit) can be converted to the given type.
0:          *
0:          * @see TypeCompiler#convertible
0:          */
0:         public boolean convertible(TypeId otherType, 
0: 								   boolean forDataTypeFunction)
0:         {
0: 
0: 
0: 			return (otherType.isBitTypeId() ||
0: 					otherType.isBlobTypeId() ||
0: 					otherType.isBooleanTypeId() ||
0: 					otherType.userType());
0: 		}
0: 
0: 	
0:         /**
0:          * Tell whether this type (bit) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0:         public boolean compatible(TypeId otherType)
0:         {
0:         if (otherType.isBlobTypeId())
0:           return false;
0:         return (otherType.isBitTypeId());
0:         }
0: 
0:         /**
0:          * Tell whether this type (bit) can be stored into from the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          * @param cf            A ClassFactory
0:          */
0: 
0:         public boolean storable(TypeId otherType, ClassFactory cf)
0:         {
0:         if (otherType.isBlobTypeId())
0:           return false;
0: 				if (otherType.isBitTypeId())
0: 				{
0: 						return true;
0: 				}
0: 
0:                 /*
0:                 ** If the other type is user-defined, use the java types to determine
0:                 ** assignability.
0:                 */
0:                 return userTypeStorable(this.getTypeId(), otherType, cf);
0:         }
0: 
0:         /** @see TypeCompiler#interfaceName */
0:         public String interfaceName()
0:         {
0:                 // may need to return different for Blob
0:                 // however, since it the nullMethodName()
0:                 // does not operate on a BitTypeCompiler object?
0:                 // it should?
0:                 return ClassName.BitDataValue;
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0:          */
0: 
0:         public String getCorrespondingPrimitiveTypeName()
0:         {
0:             return "byte[]";
0:         }
0: 
0:         /**
0:          * @see TypeCompiler#getCastToCharWidth
0:          */
0:         public int getCastToCharWidth(DataTypeDescriptor dts)
0:         {
0:                 return dts.getMaximumWidth();
0:         }
0: 
0:         protected String nullMethodName()
0:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
0:                 {
0:                         case StoredFormatIds.BIT_TYPE_ID:
0:                                 return "getNullBit";
0: 
0:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
0:                                 return "getNullLongVarbit";
0: 
0:                         case StoredFormatIds.VARBIT_TYPE_ID:
0:                                 return "getNullVarbit";
0: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
0:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in nullMethodName() - " + formatId);
0:                                 }
0:                                 return null;
0:                 }
0:         }
0: 
0:         protected String dataValueMethodName()
0:         {
0:                 int formatId = getStoredFormatIdFromTypeId();
0:                 switch (formatId)
0:                 {
0:                         case StoredFormatIds.BIT_TYPE_ID:
0:                                 return "getBitDataValue";
0: 
0:                         case StoredFormatIds.LONGVARBIT_TYPE_ID:
0:                                 return "getLongVarbitDataValue";
0: 
0:                         case StoredFormatIds.VARBIT_TYPE_ID:
0:                                 return "getVarbitDataValue";
0: 
0:                         default:
0:                                 if (SanityManager.DEBUG)
0:                                 {
0:                                         SanityManager.THROWASSERT(
0:                                                 "unexpected formatId in dataValueMethodName() - " + formatId);
0:                                 }
0:                                 return null;
0:                 }
0:         }
0: }
============================================================================