1:1111652: /*
1:1111652: 
1:1111652:    Derby - Class org.apache.derbyTesting.functionTests.util.ProtocolTestGrammar
1:1111652: 
1:1111652:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1111652:    contributor license agreements.  See the NOTICE file distributed with
1:1111652:    this work for additional information regarding copyright ownership.
1:1111652:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1111652:    (the "License"); you may not use this file except in compliance with
1:1111652:    the License.  You may obtain a copy of the License at
1:1111652: 
1:1111652:       http://www.apache.org/licenses/LICENSE-2.0
1:1111652: 
1:1111652:    Unless required by applicable law or agreed to in writing, software
1:1111652:    distributed under the License is distributed on an "AS IS" BASIS,
1:1111652:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1111652:    See the License for the specific language governing permissions and
1:1111652:    limitations under the License.
1:1111652: 
1:1111652:  */
1:1111652: package org.apache.derbyTesting.functionTests.util;
1:1111652: 
1:1111652: import java.util.HashMap;
1:1111652: import java.util.Locale;
1:1111652: 
1:1111652: /**
1:1111652:  * Describes the grammer / language for testing the DRDA protocol implementation
1:1111652:  * used by Derby.
1:1111652:  * <p>
1:1111652:  * Each command has a corresponding string, that can be used to specify a
1:1111652:  * command sequence with text (for instance in a file).
1:1111652:  */
1:1111652: public enum ProtocolTestGrammar {
1:1111652: 
1:1111652:     // Commands
1:1111652:     CREATE_DSS_REQUEST,
1:1111652:     CREATE_DSS_OBJECT,
1:1111652:     END_DSS,
1:1111652:     END_DDM_AND_DSS,
1:1111652:     START_DDM,
1:1111652:     END_DDM,
1:1111652:     WRITE_BYTE,
1:1111652:     WRITE_NETWORK_SHORT,
1:1111652:     WRITE_NETWORK_INT,
1:1111652:     WRITE_BYTES,
1:1111652:     WRITE_CODEPOINT_4BYTES,
1:1111652:     WRITE_SCALAR_1BYTE,
1:1111652:     WRITE_SCALAR_2BYTES,
1:1111652:     WRITE_SCALAR_BYTES,
1:1111652:     WRITE_SCALAR_HEADER,
1:1111652:     WRITE_SCALAR_STRING,
1:1111652:     WRITE_SCALAR_PADDED_STRING,
1:1111652:     WRITE_SCALAR_PADDED_BYTES,
1:1111652:     WRITE_SHORT,
1:1111652:     WRITE_INT,
1:1111652:     WRITE_LONG,
1:1111652:     WRITE_FLOAT,
1:1111652:     WRITE_DOUBLE,
1:1111652:     READ_REPLY_DSS,
1:1111652:     READ_LENGTH_AND_CODEPOINT,
1:1111652:     READ_CODEPOINT,
1:1111652:     MARK_COLLECTION,
1:1111652:     GET_CODEPOINT,
1:1111652:     READ_BYTE,
1:1111652:     READ_NETWORK_SHORT,
1:1111652:     READ_SHORT,
1:1111652:     READ_NETWORK_INT,
1:1111652:     READ_INT,
1:1111652:     READ_LONG,
1:1111652:     READ_BOOLEAN,
1:1111652:     READ_STRING,
1:1111652:     READ_BYTES,
1:1111652:     FLUSH,
1:1111652:     DISPLAY,
1:1111652:     CHECKERROR,
1:1111652:     CREATE_DSS_REPLY,
1:1111652:     SKIP_DSS,
1:1111652:     READ_SCALAR_2BYTES,
1:1111652:     READ_SCALAR_1BYTE,
1:1111652:     END_TEST,
1:1111652:     SKIP_DDM,
1:1111652:     INCLUDE,
1:1111652:     SKIP_BYTES,
1:1111652:     WRITE_PADDED_STRING,
1:1111652:     WRITE_STRING,
1:1111652:     WRITE_ENCODED_STRING,
1:1111652:     WRITE_ENCODED_LDSTRING,
1:1111652:     CHECK_SQLCARD,
1:1111652:     MORE_DATA,
1:816270f:     READ_SECMEC_AND_SECCHKCD,
1:816270f:     SWITCH_TO_UTF8_CCSID_MANAGER,
1:816270f:     DELETE_DATABASE;
1:1111652: 
1:1111652:     /** String associated with the command. */
1:1111652:     private final String cmdString;
1:1111652: 
1:1111652:     /**
1:1111652:      * Creates a new command and the corresponding string.
1:1111652:      * <p>
1:1111652:      * The string is created by removing all underscore characters and then
1:1111652:      * converting the command name to lower case.
1:1111652:      */
1:1111652:     ProtocolTestGrammar() {
1:1111652:         this.cmdString =
1:1111652:                 this.toString().replaceAll("_", "").toLowerCase(Locale.ENGLISH);
1:1111652:     }
1:1111652: 
1:1111652:     /**
1:1111652:      * Returns the associated string used to identify the command.
1:1111652:      *
1:1111652:      * @return A string representing this command.
1:1111652:      */
1:1111652:     public String toCmdString() {
1:1111652:         return this.cmdString;
1:1111652:     }
1:1111652: 
1:1111652:     /** Mapping from strings to commands. */
1:1111652:     private static final HashMap<String,ProtocolTestGrammar> CMD_STRINGS =
1:1111652:             new HashMap<String,ProtocolTestGrammar>();
1:1111652: 
1:1111652:     static {
1:1111652:         // Create a mapping from strings to commands.
1:1111652:         for (ProtocolTestGrammar cmd : ProtocolTestGrammar.values()) {
1:1111652:             CMD_STRINGS.put(cmd.toCmdString(), cmd);
1:1111652:         }
1:1111652:     }
1:1111652: 
1:1111652:     /**
1:1111652:      * Returns the command corresponding to the specified string.
1:1111652:      *
1:1111652:      * @param cmdStr string representing a command
1:1111652:      * @return The corresponding command if any, {@code null} if there is no
1:1111652:      *      matching command.
1:1111652:      */
1:1111652:     public static ProtocolTestGrammar cmdFromString(String cmdStr) {
1:1111652:         return CMD_STRINGS.get(cmdStr);
1:1111652:     }
1:1111652: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:816270f
/////////////////////////////////////////////////////////////////////////
1:     READ_SECMEC_AND_SECCHKCD,
1:     SWITCH_TO_UTF8_CCSID_MANAGER,
1:     DELETE_DATABASE;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:1111652
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.ProtocolTestGrammar
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.util.HashMap;
1: import java.util.Locale;
1: 
1: /**
1:  * Describes the grammer / language for testing the DRDA protocol implementation
1:  * used by Derby.
1:  * <p>
1:  * Each command has a corresponding string, that can be used to specify a
1:  * command sequence with text (for instance in a file).
1:  */
1: public enum ProtocolTestGrammar {
1: 
1:     // Commands
1:     CREATE_DSS_REQUEST,
1:     CREATE_DSS_OBJECT,
1:     END_DSS,
1:     END_DDM_AND_DSS,
1:     START_DDM,
1:     END_DDM,
1:     WRITE_BYTE,
1:     WRITE_NETWORK_SHORT,
1:     WRITE_NETWORK_INT,
1:     WRITE_BYTES,
1:     WRITE_CODEPOINT_4BYTES,
1:     WRITE_SCALAR_1BYTE,
1:     WRITE_SCALAR_2BYTES,
1:     WRITE_SCALAR_BYTES,
1:     WRITE_SCALAR_HEADER,
1:     WRITE_SCALAR_STRING,
1:     WRITE_SCALAR_PADDED_STRING,
1:     WRITE_SCALAR_PADDED_BYTES,
1:     WRITE_SHORT,
1:     WRITE_INT,
1:     WRITE_LONG,
1:     WRITE_FLOAT,
1:     WRITE_DOUBLE,
1:     READ_REPLY_DSS,
1:     READ_LENGTH_AND_CODEPOINT,
1:     READ_CODEPOINT,
1:     MARK_COLLECTION,
1:     GET_CODEPOINT,
1:     READ_BYTE,
1:     READ_NETWORK_SHORT,
1:     READ_SHORT,
1:     READ_NETWORK_INT,
1:     READ_INT,
1:     READ_LONG,
1:     READ_BOOLEAN,
1:     READ_STRING,
1:     READ_BYTES,
1:     FLUSH,
1:     DISPLAY,
1:     CHECKERROR,
1:     CREATE_DSS_REPLY,
1:     SKIP_DSS,
1:     READ_SCALAR_2BYTES,
1:     READ_SCALAR_1BYTE,
1:     END_TEST,
1:     SKIP_DDM,
1:     INCLUDE,
1:     SKIP_BYTES,
1:     WRITE_PADDED_STRING,
1:     WRITE_STRING,
1:     WRITE_ENCODED_STRING,
1:     WRITE_ENCODED_LDSTRING,
1:     CHECK_SQLCARD,
1:     MORE_DATA,
0:     READ_SECMEC_AND_SECCHKCD;
1: 
1:     /** String associated with the command. */
1:     private final String cmdString;
1: 
1:     /**
1:      * Creates a new command and the corresponding string.
1:      * <p>
1:      * The string is created by removing all underscore characters and then
1:      * converting the command name to lower case.
1:      */
1:     ProtocolTestGrammar() {
1:         this.cmdString =
1:                 this.toString().replaceAll("_", "").toLowerCase(Locale.ENGLISH);
1:     }
1: 
1:     /**
1:      * Returns the associated string used to identify the command.
1:      *
1:      * @return A string representing this command.
1:      */
1:     public String toCmdString() {
1:         return this.cmdString;
1:     }
1: 
1:     /** Mapping from strings to commands. */
1:     private static final HashMap<String,ProtocolTestGrammar> CMD_STRINGS =
1:             new HashMap<String,ProtocolTestGrammar>();
1: 
1:     static {
1:         // Create a mapping from strings to commands.
1:         for (ProtocolTestGrammar cmd : ProtocolTestGrammar.values()) {
1:             CMD_STRINGS.put(cmd.toCmdString(), cmd);
1:         }
1:     }
1: 
1:     /**
1:      * Returns the command corresponding to the specified string.
1:      *
1:      * @param cmdStr string representing a command
1:      * @return The corresponding command if any, {@code null} if there is no
1:      *      matching command.
1:      */
1:     public static ProtocolTestGrammar cmdFromString(String cmdStr) {
1:         return CMD_STRINGS.get(cmdStr);
1:     }
1: }
============================================================================