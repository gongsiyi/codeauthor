1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.RecordId
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: import org.apache.derby.iapi.store.raw.PageKey;
1:eac0369: import org.apache.derby.iapi.services.locks.Latch;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RowLock;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import java.util.Hashtable;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Implementation of RecordHandle.
1:eac0369: 
1:eac0369: 	<BR>
1:eac0369: 	MT - Mutable - Immutable identity : Thread Aware -
1:eac0369: 	<BR>The methods of RecordHandle only access the identity
1:eac0369: 	    of the object and so the object appears immutable to them, as required.
1:eac0369: 	<BR>The methods of Lockable  are single thread required.
1:eac0369: 
1:eac0369: */
1:eac0369: public final class RecordId implements RecordHandle {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Page the record lives in.
1:eac0369: 		MT - Immutable
1:eac0369: 	*/
1:eac0369: 	private final PageKey pageId;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The actual record id.
1:eac0369: 		MT - Immutable
1:eac0369: 	*/
1:eac0369: 	private final int recordId;
1:eac0369: 
1:eac0369:     /**
1:eac0369:         Last slot number this record id was at.
1:eac0369:     */
1:eac0369:     transient private int slotNumberHint;
1:eac0369: 
1:eac0369: 	public RecordId(ContainerKey container, long pageNumber, int recordId) {
1:eac0369: 		this.pageId = new PageKey(container, pageNumber);
1:eac0369: 		this.recordId = recordId;
1:eac0369: 
1:eac0369: 		// FIRST_SLOT_NUMBER guaranteed to be zero
1:eac0369:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public RecordId(PageKey pageId, int recordId) {
1:eac0369: 		this.pageId = pageId;
1:eac0369: 		this.recordId = recordId;
1:eac0369: 
1:eac0369: 		// FIRST_SLOT_NUMBER guaranteed to be zero
1:eac0369:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public RecordId(PageKey pageId, int recordId, int current_slot) {
1:eac0369: 		this.pageId = pageId;
1:eac0369: 		this.recordId = recordId;
1:eac0369:         this.slotNumberHint = current_slot;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Methods of RecordHandle
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get my record id.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - thread safe
1:eac0369: 
1:eac0369: 		@see RecordHandle#getId
1:eac0369: 	*/
1:eac0369: 	public int	getId() {
1:eac0369: 		return recordId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get my page number.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - thread safe
1:eac0369: 
1:eac0369: 		@see RecordHandle#getPageNumber
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public long getPageNumber() {
1:eac0369: 		return pageId.getPageNumber();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object getPageId() {
1:eac0369: 		return pageId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ContainerKey getContainerId() {
1:eac0369: 		return pageId.getContainerId();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What slot number might the record be at?
1:eac0369:      * <p>
1:eac0369:      * The raw store guarantees that the record handle of a record will not
1:eac0369:      * change, but its slot number may.  When a RecordId is constructed the
1:eac0369:      * caller could have provided a slot number, if so return that slot number
1:eac0369:      * hint here.  If a hint was not provided then the default 
1:eac0369:      * Page.FIRST_SLOT_NUMBER will be returned.
1:eac0369:      *
1:eac0369: 	 * @return The slot number the record handle may be at.
1:eac0369:      **/
1:eac0369:     public int getSlotNumberHint()
1:eac0369:     {
1:eac0369:         return(slotNumberHint);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Lockable (from RecordHandle)
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Lock me.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - Single thread required (methods of Lockable)
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.locks.Lockable#lockEvent
1:eac0369: 	*/
1:eac0369: 	public void lockEvent(Latch lockInfo) {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:20bc69f: 		Determine if this request can be granted.
1:86ba910:         <p>
1:20bc69f:         Implements the grant/wait lock logic for row locks.  See the
1:20bc69f:         table in RowLock for more information.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - Single thread required (methods of Lockable)
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.locks.Lockable#requestCompatible
1:eac0369: 	*/	 
1:eac0369: 	public boolean requestCompatible(
1:eac0369:     Object requestedQualifier, 
1:eac0369:     Object grantedQualifier)
1:eac0369:     {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369:             SanityManager.ASSERT((requestedQualifier == RowLock.RS2) ||
1:eac0369:                                  (requestedQualifier == RowLock.RS3) ||
1:eac0369:                                  (requestedQualifier == RowLock.RU2) ||
1:eac0369:                                  (requestedQualifier == RowLock.RU3) ||
1:eac0369:                                  (requestedQualifier == RowLock.RIP) ||
1:eac0369:                                  (requestedQualifier == RowLock.RI)  ||
1:eac0369:                                  (requestedQualifier == RowLock.RX2) ||
1:eac0369:                                  (requestedQualifier == RowLock.RX3));
1:eac0369:             SanityManager.ASSERT((grantedQualifier == RowLock.RS2) ||
1:eac0369:                                  (grantedQualifier == RowLock.RS3) ||
1:eac0369:                                  (grantedQualifier == RowLock.RU2) ||
1:eac0369:                                  (grantedQualifier == RowLock.RU3) ||
1:eac0369:                                  (grantedQualifier == RowLock.RIP) ||
1:eac0369:                                  (grantedQualifier == RowLock.RI)  ||
1:eac0369:                                  (grantedQualifier == RowLock.RX2) ||
1:eac0369:                                  (grantedQualifier == RowLock.RX3));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		RowLock rlRequested = (RowLock) requestedQualifier;
1:eac0369: 		RowLock rlGranted  = (RowLock) grantedQualifier;
1:eac0369: 
1:eac0369: 		return(rlRequested.isCompatible(rlGranted));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is a caller that holds a lock compatible with themselves?
1:20bc69f:         <p>
1:20bc69f:         Row locks held in the same transaction are always compatible with
1:20bc69f:         themselves.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - Single thread required (methods of Lockable)
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.locks.Lockable#lockerAlwaysCompatible
1:eac0369: 	*/	 
1:eac0369: 	public boolean lockerAlwaysCompatible() {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Unlock me.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		MT - Single thread required (methods of Lockable)
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.locks.Lockable#unlockEvent
1:eac0369: 	*/	 
1:eac0369: 	public void unlockEvent(Latch lockInfo) {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**		Methods of Object
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Implement value equality.
1:eac0369: 		<BR>
1:eac0369: 		MT - Thread safe
1:eac0369: 	*/
1:eac0369: 	public boolean equals(Object ref) {
1:eac0369: 
1:eac0369: 		if (!(ref instanceof RecordId))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		RecordId other = (RecordId) ref;
1:eac0369: 
1:eac0369: 		return ((recordId == other.recordId)
1:eac0369: 			&& pageId.equals(other.pageId));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return a hashcode based on value.
1:eac0369: 		<BR>
1:eac0369: 		MT - thread safe
1:eac0369: 	*/
1:eac0369: 	public int hashCode() {
1:b4d1d9c:         int hash = 7;
1:b4d1d9c:         hash = 89 * hash + pageId.hashCode();
1:b4d1d9c:         hash = 89 * hash + recordId;
1:b4d1d9c:         return hash;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public String toString()
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             return "Record id=" + recordId + " " + pageId.toString(); 
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(null);
1:eac0369:         }
1:eac0369: 
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This lockable wants to participate in the Virtual Lock table.
1:eac0369: 	 */
1:eec86ed: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(attributes != null, 
1:eac0369: 				"cannot call lockProperties with null attribute list");
1:eac0369: 			SanityManager.ASSERT(pageId != null,
1:eac0369: 				"RecordId PageId is null");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		attributes.put(VirtualLockTable.CONTAINERID, 
1:ce40a31: 					   pageId.getContainerId().getContainerId());
1:eac0369: 
1:eac0369: 		attributes.put(VirtualLockTable.LOCKNAME,
1:eac0369: 					   "(" + pageId.getPageNumber() + "," + recordId + ")");
1:eac0369: 
1:eac0369: 		attributes.put(VirtualLockTable.LOCKTYPE, "ROW");
1:eac0369: 
1:eac0369: 		// don't new unnecessary things for now
1:eac0369: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(pageId.getContainerId().getSegmentId()));
1:eac0369: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
1:eac0369: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
1:eac0369: 		// attributes.put(VirtualLockTable.RECID, new Integer(getId()));
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 					   pageId.getContainerId().getContainerId());
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes)
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b4d1d9c
/////////////////////////////////////////////////////////////////////////
1:         int hash = 7;
1:         hash = 89 * hash + pageId.hashCode();
1:         hash = 89 * hash + recordId;
1:         return hash;
commit:86ba910
/////////////////////////////////////////////////////////////////////////
1:         <p>
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1: 		Determine if this request can be granted.
0:         <p)
1:         Implements the grant/wait lock logic for row locks.  See the
1:         table in RowLock for more information.
/////////////////////////////////////////////////////////////////////////
1:         <p>
1:         Row locks held in the same transaction are always compatible with
1:         themselves.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.RecordId
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.PageKey;
1: import org.apache.derby.iapi.services.locks.Latch;
1: 
1: import org.apache.derby.iapi.store.raw.RowLock;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.locks.VirtualLockTable;
1: 
1: import org.apache.derby.catalog.UUID;
1: import java.util.Hashtable;
1: 
1: /**
1: 	Implementation of RecordHandle.
1: 
1: 	<BR>
1: 	MT - Mutable - Immutable identity : Thread Aware -
1: 	<BR>The methods of RecordHandle only access the identity
1: 	    of the object and so the object appears immutable to them, as required.
1: 	<BR>The methods of Lockable  are single thread required.
1: 
1: */
1: public final class RecordId implements RecordHandle {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Page the record lives in.
1: 		MT - Immutable
1: 	*/
1: 	private final PageKey pageId;
1: 
1: 	/**
1: 		The actual record id.
1: 		MT - Immutable
1: 	*/
1: 	private final int recordId;
1: 
1:     /**
1:         Last slot number this record id was at.
1:     */
1:     transient private int slotNumberHint;
1: 
1: 	public RecordId(ContainerKey container, long pageNumber, int recordId) {
1: 		this.pageId = new PageKey(container, pageNumber);
1: 		this.recordId = recordId;
1: 
1: 		// FIRST_SLOT_NUMBER guaranteed to be zero
1:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
1: 	}
1: 
1: 	public RecordId(PageKey pageId, int recordId) {
1: 		this.pageId = pageId;
1: 		this.recordId = recordId;
1: 
1: 		// FIRST_SLOT_NUMBER guaranteed to be zero
1:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
1: 	}
1: 
1: 	public RecordId(PageKey pageId, int recordId, int current_slot) {
1: 		this.pageId = pageId;
1: 		this.recordId = recordId;
1:         this.slotNumberHint = current_slot;
1: 	}
1: 
1: 	/*
1: 	**	Methods of RecordHandle
1: 	*/
1: 
1: 	/**
1: 		Get my record id.
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@see RecordHandle#getId
1: 	*/
1: 	public int	getId() {
1: 		return recordId;
1: 	}
1: 
1: 	/**
1: 		Get my page number.
1: 
1: 		<BR>
1: 		MT - thread safe
1: 
1: 		@see RecordHandle#getPageNumber
1: 	*/
1: 
1: 	public long getPageNumber() {
1: 		return pageId.getPageNumber();
1: 	}
1: 
1: 	public Object getPageId() {
1: 		return pageId;
1: 	}
1: 
1: 	public ContainerKey getContainerId() {
1: 		return pageId.getContainerId();
1: 	}
1: 
1: 
1:     /**
1:      * What slot number might the record be at?
1:      * <p>
1:      * The raw store guarantees that the record handle of a record will not
1:      * change, but its slot number may.  When a RecordId is constructed the
1:      * caller could have provided a slot number, if so return that slot number
1:      * hint here.  If a hint was not provided then the default 
1:      * Page.FIRST_SLOT_NUMBER will be returned.
1:      *
1: 	 * @return The slot number the record handle may be at.
1:      **/
1:     public int getSlotNumberHint()
1:     {
1:         return(slotNumberHint);
1:     }
1: 
1: 	/*
1: 	** Methods of Lockable (from RecordHandle)
1: 	*/
1: 
1: 	/**
1: 		Lock me.
1: 
1: 		<BR>
1: 		MT - Single thread required (methods of Lockable)
1: 
1: 		@see org.apache.derby.iapi.services.locks.Lockable#lockEvent
1: 	*/
1: 	public void lockEvent(Latch lockInfo) {
1: 	}
1: 
1: 
1: 	/**
0: 		Can this request be granted?
1: 
1: 		<BR>
1: 		MT - Single thread required (methods of Lockable)
1: 
1: 		@see org.apache.derby.iapi.services.locks.Lockable#requestCompatible
1: 	*/	 
1: 	public boolean requestCompatible(
1:     Object requestedQualifier, 
1:     Object grantedQualifier)
1:     {
1: 
1: 		if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT((requestedQualifier == RowLock.RS2) ||
1:                                  (requestedQualifier == RowLock.RS3) ||
1:                                  (requestedQualifier == RowLock.RU2) ||
1:                                  (requestedQualifier == RowLock.RU3) ||
1:                                  (requestedQualifier == RowLock.RIP) ||
1:                                  (requestedQualifier == RowLock.RI)  ||
1:                                  (requestedQualifier == RowLock.RX2) ||
1:                                  (requestedQualifier == RowLock.RX3));
1:             SanityManager.ASSERT((grantedQualifier == RowLock.RS2) ||
1:                                  (grantedQualifier == RowLock.RS3) ||
1:                                  (grantedQualifier == RowLock.RU2) ||
1:                                  (grantedQualifier == RowLock.RU3) ||
1:                                  (grantedQualifier == RowLock.RIP) ||
1:                                  (grantedQualifier == RowLock.RI)  ||
1:                                  (grantedQualifier == RowLock.RX2) ||
1:                                  (grantedQualifier == RowLock.RX3));
1: 		}
1: 
1: 		RowLock rlRequested = (RowLock) requestedQualifier;
1: 		RowLock rlGranted  = (RowLock) grantedQualifier;
1: 
1: 		return(rlRequested.isCompatible(rlGranted));
1: 	}
1: 
1: 	/**
1: 		Is a caller that holds a lock compatible with themselves?
1: 
1: 		<BR>
1: 		MT - Single thread required (methods of Lockable)
1: 
1: 		@see org.apache.derby.iapi.services.locks.Lockable#lockerAlwaysCompatible
1: 	*/	 
1: 	public boolean lockerAlwaysCompatible() {
1: 		return true;
1: 	}
1: 
1: 	/**
1: 		Unlock me.
1: 
1: 		<BR>
1: 		MT - Single thread required (methods of Lockable)
1: 
1: 		@see org.apache.derby.iapi.services.locks.Lockable#unlockEvent
1: 	*/	 
1: 	public void unlockEvent(Latch lockInfo) {
1: 	}
1: 
1: 	/*
1: 	**		Methods of Object
1: 	*/
1: 
1: 	/**
1: 		Implement value equality.
1: 		<BR>
1: 		MT - Thread safe
1: 	*/
1: 	public boolean equals(Object ref) {
1: 
1: 		if (!(ref instanceof RecordId))
1: 			return false;
1: 
1: 		RecordId other = (RecordId) ref;
1: 
1: 		return ((recordId == other.recordId)
1: 			&& pageId.equals(other.pageId));
1: 	}
1: 
1: 	/**
1: 		Return a hashcode based on value.
1: 		<BR>
1: 		MT - thread safe
1: 	*/
1: 	public int hashCode() {
1: 
0: 		return (int) recordId ^ pageId.hashCode();
1: 	}
1: 
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             return "Record id=" + recordId + " " + pageId.toString(); 
1:         }
1:         else
1:         {
1:             return(null);
1:         }
1: 
1:     }
1: 
1: 	/**
1: 		This lockable wants to participate in the Virtual Lock table.
1: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
1: 	{
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(attributes != null, 
1: 				"cannot call lockProperties with null attribute list");
1: 			SanityManager.ASSERT(pageId != null,
1: 				"RecordId PageId is null");
1: 		}
1: 
1: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
1: 			return false;
1: 
1: 		attributes.put(VirtualLockTable.CONTAINERID, 
0: 					   new Long(pageId.getContainerId().getContainerId()));
1: 
1: 		attributes.put(VirtualLockTable.LOCKNAME,
1: 					   "(" + pageId.getPageNumber() + "," + recordId + ")");
1: 
1: 		attributes.put(VirtualLockTable.LOCKTYPE, "ROW");
1: 
1: 		// don't new unnecessary things for now
1: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(pageId.getContainerId().getSegmentId()));
1: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
1: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
1: 		// attributes.put(VirtualLockTable.RECID, new Integer(getId()));
1: 
1: 		return true;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: import org.apache.derby.iapi.store.raw.PageKey;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.store.raw.RowLock;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.locks.VirtualLockTable;
0: 
0: import org.apache.derby.catalog.UUID;
0: import java.util.Hashtable;
0: 
0: /**
0: 	Implementation of RecordHandle.
0: 
0: 	<BR>
0: 	MT - Mutable - Immutable identity : Thread Aware -
0: 	<BR>The methods of RecordHandle only access the identity
0: 	    of the object and so the object appears immutable to them, as required.
0: 	<BR>The methods of Lockable  are single thread required.
0: 
0: */
0: public final class RecordId implements RecordHandle {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Page the record lives in.
0: 		MT - Immutable
0: 	*/
0: 	private final PageKey pageId;
0: 
0: 	/**
0: 		The actual record id.
0: 		MT - Immutable
0: 	*/
0: 	private final int recordId;
0: 
0:     /**
0:         Last slot number this record id was at.
0:     */
0:     transient private int slotNumberHint;
0: 
0: 	public RecordId(ContainerKey container, long pageNumber, int recordId) {
0: 		this.pageId = new PageKey(container, pageNumber);
0: 		this.recordId = recordId;
0: 
0: 		// FIRST_SLOT_NUMBER guaranteed to be zero
0:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
0: 	}
0: 
0: 	public RecordId(PageKey pageId, int recordId) {
0: 		this.pageId = pageId;
0: 		this.recordId = recordId;
0: 
0: 		// FIRST_SLOT_NUMBER guaranteed to be zero
0:         // this.slotNumberHint = Page.FIRST_SLOT_NUMBER;
0: 	}
0: 
0: 	public RecordId(PageKey pageId, int recordId, int current_slot) {
0: 		this.pageId = pageId;
0: 		this.recordId = recordId;
0:         this.slotNumberHint = current_slot;
0: 	}
0: 
0: 	/*
0: 	**	Methods of RecordHandle
0: 	*/
0: 
0: 	/**
0: 		Get my record id.
0: 
0: 		<BR>
0: 		MT - thread safe
0: 
0: 		@see RecordHandle#getId
0: 	*/
0: 	public int	getId() {
0: 		return recordId;
0: 	}
0: 
0: 	/**
0: 		Get my page number.
0: 
0: 		<BR>
0: 		MT - thread safe
0: 
0: 		@see RecordHandle#getPageNumber
0: 	*/
0: 
0: 	public long getPageNumber() {
0: 		return pageId.getPageNumber();
0: 	}
0: 
0: 	public Object getPageId() {
0: 		return pageId;
0: 	}
0: 
0: 	public ContainerKey getContainerId() {
0: 		return pageId.getContainerId();
0: 	}
0: 
0: 
0:     /**
0:      * What slot number might the record be at?
0:      * <p>
0:      * The raw store guarantees that the record handle of a record will not
0:      * change, but its slot number may.  When a RecordId is constructed the
0:      * caller could have provided a slot number, if so return that slot number
0:      * hint here.  If a hint was not provided then the default 
0:      * Page.FIRST_SLOT_NUMBER will be returned.
0:      *
0: 	 * @return The slot number the record handle may be at.
0:      **/
0:     public int getSlotNumberHint()
0:     {
0:         return(slotNumberHint);
0:     }
0: 
0: 	/*
0: 	** Methods of Lockable (from RecordHandle)
0: 	*/
0: 
0: 	/**
0: 		Lock me.
0: 
0: 		<BR>
0: 		MT - Single thread required (methods of Lockable)
0: 
0: 		@see org.apache.derby.iapi.services.locks.Lockable#lockEvent
0: 	*/
0: 	public void lockEvent(Latch lockInfo) {
0: 	}
0: 
0: 
0: 	/**
0: 		Can this request be granted?
0: 
0: 		<BR>
0: 		MT - Single thread required (methods of Lockable)
0: 
0: 		@see org.apache.derby.iapi.services.locks.Lockable#requestCompatible
0: 	*/	 
0: 	public boolean requestCompatible(
0:     Object requestedQualifier, 
0:     Object grantedQualifier)
0:     {
0: 
0: 		if (SanityManager.DEBUG) {
0:             SanityManager.ASSERT((requestedQualifier == RowLock.RS2) ||
0:                                  (requestedQualifier == RowLock.RS3) ||
0:                                  (requestedQualifier == RowLock.RU2) ||
0:                                  (requestedQualifier == RowLock.RU3) ||
0:                                  (requestedQualifier == RowLock.RIP) ||
0:                                  (requestedQualifier == RowLock.RI)  ||
0:                                  (requestedQualifier == RowLock.RX2) ||
0:                                  (requestedQualifier == RowLock.RX3));
0:             SanityManager.ASSERT((grantedQualifier == RowLock.RS2) ||
0:                                  (grantedQualifier == RowLock.RS3) ||
0:                                  (grantedQualifier == RowLock.RU2) ||
0:                                  (grantedQualifier == RowLock.RU3) ||
0:                                  (grantedQualifier == RowLock.RIP) ||
0:                                  (grantedQualifier == RowLock.RI)  ||
0:                                  (grantedQualifier == RowLock.RX2) ||
0:                                  (grantedQualifier == RowLock.RX3));
0: 		}
0: 
0: 		RowLock rlRequested = (RowLock) requestedQualifier;
0: 		RowLock rlGranted  = (RowLock) grantedQualifier;
0: 
0: 		return(rlRequested.isCompatible(rlGranted));
0: 	}
0: 
0: 	/**
0: 		Is a caller that holds a lock compatible with themselves?
0: 
0: 		<BR>
0: 		MT - Single thread required (methods of Lockable)
0: 
0: 		@see org.apache.derby.iapi.services.locks.Lockable#lockerAlwaysCompatible
0: 	*/	 
0: 	public boolean lockerAlwaysCompatible() {
0: 		return true;
0: 	}
0: 
0: 	/**
0: 		Unlock me.
0: 
0: 		<BR>
0: 		MT - Single thread required (methods of Lockable)
0: 
0: 		@see org.apache.derby.iapi.services.locks.Lockable#unlockEvent
0: 	*/	 
0: 	public void unlockEvent(Latch lockInfo) {
0: 	}
0: 
0: 	/*
0: 	**		Methods of Object
0: 	*/
0: 
0: 	/**
0: 		Implement value equality.
0: 		<BR>
0: 		MT - Thread safe
0: 	*/
0: 	public boolean equals(Object ref) {
0: 
0: 		if (!(ref instanceof RecordId))
0: 			return false;
0: 
0: 		RecordId other = (RecordId) ref;
0: 
0: 		return ((recordId == other.recordId)
0: 			&& pageId.equals(other.pageId));
0: 	}
0: 
0: 	/**
0: 		Return a hashcode based on value.
0: 		<BR>
0: 		MT - thread safe
0: 	*/
0: 	public int hashCode() {
0: 
0: 		return (int) recordId ^ pageId.hashCode();
0: 	}
0: 
0:     public String toString()
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             return "Record id=" + recordId + " " + pageId.toString(); 
0:         }
0:         else
0:         {
0:             return(null);
0:         }
0: 
0:     }
0: 
0: 	/**
0: 		This lockable wants to participate in the Virtual Lock table.
0: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes)
0: 	{
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(attributes != null, 
0: 				"cannot call lockProperties with null attribute list");
0: 			SanityManager.ASSERT(pageId != null,
0: 				"RecordId PageId is null");
0: 		}
0: 
0: 		if ((flag & VirtualLockTable.TABLE_AND_ROWLOCK) == 0)
0: 			return false;
0: 
0: 		attributes.put(VirtualLockTable.CONTAINERID, 
0: 					   new Long(pageId.getContainerId().getContainerId()));
0: 
0: 		attributes.put(VirtualLockTable.LOCKNAME,
0: 					   "(" + pageId.getPageNumber() + "," + recordId + ")");
0: 
0: 		attributes.put(VirtualLockTable.LOCKTYPE, "ROW");
0: 
0: 		// don't new unnecessary things for now
0: 		// attributes.put(VirtualLockTable.SEGMENTID, new Long(pageId.getContainerId().getSegmentId()));
0: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
0: 		// attributes.put(VirtualLockTable.PAGENUM, new Long(pageId.getPageNumber()));
0: 		// attributes.put(VirtualLockTable.RECID, new Integer(getId()));
0: 
0: 		return true;
0: 	}
0: 
0: }
============================================================================