1:67614ad: /* 
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.PropertyUtil
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
24:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.util.Properties;
1:67614ad: import java.util.Enumeration;
1:67614ad: 
1:67614ad: public class PropertyUtil {  
1:67614ad: 
1:67614ad: 
1:67614ad: 	//////////////////////////////////////////////////////////////////////////////
1:67614ad: 	//
1:67614ad: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
1:67614ad: 	//
1:67614ad: 	/////////////////////////////////////////////////////////////////////////////
1:67614ad: 
2:67614ad: 	/**
1:67614ad: 	  *	Sorts a property list and turns the sorted list into a string.
2:67614ad: 	  *
1:67614ad: 	  *	@param	list	property list to sort
1:67614ad: 	  *
1:67614ad: 	  *	@return	a string version of the sorted list
1:67614ad: 	  */
1:67614ad: 	public	static	String	sortProperties( Properties list )
1:67614ad: 	{
1:67614ad: 		// stringify them with no indentation
1:67614ad: 		return sortProperties(list, null);
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	/**
1:67614ad: 	 * Sorts property list and print out each key=value pair prepended with 
1:67614ad: 	 * specific indentation.  If indent is null, do not prepend with
1:67614ad: 	 * indentation. 
1:67614ad: 	 *
1:67614ad: 	 * The output string shows up in two styles, style 1 looks like
1:67614ad: 	 * { key1=value1, key2=value2, key3=value3 }
1:67614ad: 	 *
1:67614ad: 	 * style 2 looks like
1:67614ad: 	 *		key1=value1
1:67614ad: 	 *		key2=value2
1:67614ad: 	 *		key3=value3
1:67614ad: 	 * where indent goes between the new line and the keys
1:67614ad: 	 *
1:67614ad: 	 * To get style 1, pass in a null indent
1:67614ad: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
1:67614ad: 	 * the key value)
1:67614ad: 	 */
1:67614ad: 	public	static	String	sortProperties( Properties list, char[] indent )
1:67614ad: 	{
1:67614ad: 		int				size = list == null ? 0 : list.size();
1:67614ad: 		int				count = 0;
1:67614ad: 		String[]		array = new String[size];
1:67614ad: 		String			key;
1:67614ad: 		String			value;
1:67614ad: 		StringBuffer	buffer;
1:67614ad: 
1:67614ad: 		// Calculate the number of properties in the property list and
1:67614ad: 		// build an array of all the property names.
1:67614ad: 		// We need to go thru the enumeration because Properties has a
1:67614ad: 		// recursive list of defaults.
1:67614ad: 		if (list != null)
1:67614ad: 		{
1:67614ad: 			for (Enumeration propertyNames = list.propertyNames();
1:67614ad: 				 propertyNames.hasMoreElements(); )
1:67614ad: 			{
1:67614ad: 				if (count == size)
1:67614ad: 				{
1:67614ad: 					// need to expand the array
1:67614ad: 					size = size*2;
1:67614ad: 					String[] expandedArray = new String[size];
1:67614ad: 					System.arraycopy(array, 0, expandedArray, 0, count);
1:67614ad: 					array = expandedArray;
1:67614ad: 				}
1:67614ad: 				key = (String) propertyNames.nextElement();
1:67614ad: 				array[ count++ ] = key;
1:67614ad: 			}
1:67614ad: 			// now sort the array
1:67614ad: 			java.util.Arrays.sort( array, 0, count );
1:67614ad: 		}
1:67614ad: 
1:67614ad: 
1:67614ad: 		// now stringify the array
1:67614ad: 		buffer = new StringBuffer();
1:67614ad: 		if (indent == null)
1:67614ad: 			buffer.append( "{ " );
1:67614ad: 
1:67614ad: 		for ( int ictr = 0; ictr < count; ictr++ )
1:67614ad: 		{
1:67614ad: 			if ( ictr > 0 && indent == null)
1:67614ad: 				buffer.append( ", " );
1:67614ad: 
1:67614ad: 			key = array[ ictr ];
1:67614ad: 
1:67614ad: 			if (indent != null)
1:67614ad: 				buffer.append( indent );
1:67614ad: 
1:67614ad: 			buffer.append( key ); buffer.append( "=" );
1:67614ad: 
1:67614ad: 			value = list.getProperty( key, "MISSING_VALUE" );
1:67614ad: 			buffer.append( value );
1:67614ad: 
1:67614ad: 			if (indent != null)
1:67614ad: 				buffer.append( "\n" );
1:67614ad: 
1:67614ad: 		}
1:67614ad: 		if (indent == null)
1:67614ad: 			buffer.append( " }" );
1:67614ad: 
1:67614ad: 		return	buffer.toString();
1:67614ad: 	}
1:67614ad: 
1:67614ad:     /**
1:67614ad:      * Copy a set of properties from one Property to another.
1:67614ad:      * <p>
1:67614ad:      *
1:67614ad:      * @param src_prop  Source set of properties to copy from.
1:67614ad:      * @param dest_prop Dest Properties to copy into.
1:67614ad:      *
1:67614ad:      **/
1:67614ad:     public static void copyProperties(Properties src_prop, Properties dest_prop)
1:67614ad:     {
1:67614ad:         for (Enumeration propertyNames = src_prop.propertyNames();
1:67614ad:              propertyNames.hasMoreElements(); )
1:67614ad:         {
1:67614ad:             String key = (String) propertyNames.nextElement();
1:67614ad:             dest_prop.put(key, src_prop.getProperty(key));
1:67614ad:         }
1:67614ad:     }
1:67614ad: }
1:67614ad: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /* 
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Properties;
1: import java.util.Enumeration;
1: 
1: public class PropertyUtil { 
1:  	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;  
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Sorts a property list and turns the sorted list into a string.
1: 	  *
1: 	  *	@param	list	property list to sort
1: 	  *
1: 	  *	@return	a string version of the sorted list
1: 	  */
1: 	public	static	String	sortProperties( Properties list )
1: 	{
1: 		// stringify them with no indentation
1: 		return sortProperties(list, null);
1: 	}
1: 
1: 	/**
1: 	 * Sorts property list and print out each key=value pair prepended with 
1: 	 * specific indentation.  If indent is null, do not prepend with
1: 	 * indentation. 
1: 	 *
1: 	 * The output string shows up in two styles, style 1 looks like
1: 	 * { key1=value1, key2=value2, key3=value3 }
1: 	 *
1: 	 * style 2 looks like
1: 	 *		key1=value1
1: 	 *		key2=value2
1: 	 *		key3=value3
1: 	 * where indent goes between the new line and the keys
1: 	 *
1: 	 * To get style 1, pass in a null indent
1: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
1: 	 * the key value)
1: 	 */
1: 	public	static	String	sortProperties( Properties list, char[] indent )
1: 	{
1: 		int				size = list == null ? 0 : list.size();
1: 		int				count = 0;
1: 		String[]		array = new String[size];
1: 		String			key;
1: 		String			value;
1: 		StringBuffer	buffer;
1: 
1: 		// Calculate the number of properties in the property list and
1: 		// build an array of all the property names.
1: 		// We need to go thru the enumeration because Properties has a
1: 		// recursive list of defaults.
1: 		if (list != null)
1: 		{
1: 			for (Enumeration propertyNames = list.propertyNames();
1: 				 propertyNames.hasMoreElements(); )
1: 			{
1: 				if (count == size)
1: 				{
1: 					// need to expand the array
1: 					size = size*2;
1: 					String[] expandedArray = new String[size];
1: 					System.arraycopy(array, 0, expandedArray, 0, count);
1: 					array = expandedArray;
1: 				}
1: 				key = (String) propertyNames.nextElement();
1: 				array[ count++ ] = key;
1: 			}
1: 			// now sort the array
1: 			java.util.Arrays.sort( array, 0, count );
1: 		}
1: 
1: 
1: 		// now stringify the array
1: 		buffer = new StringBuffer();
1: 		if (indent == null)
1: 			buffer.append( "{ " );
1: 
1: 		for ( int ictr = 0; ictr < count; ictr++ )
1: 		{
1: 			if ( ictr > 0 && indent == null)
1: 				buffer.append( ", " );
1: 
1: 			key = array[ ictr ];
1: 
1: 			if (indent != null)
1: 				buffer.append( indent );
1: 
1: 			buffer.append( key ); buffer.append( "=" );
1: 
1: 			value = list.getProperty( key, "MISSING_VALUE" );
1: 			buffer.append( value );
1: 
1: 			if (indent != null)
1: 				buffer.append( "\n" );
1: 
1: 		}
1: 		if (indent == null)
1: 			buffer.append( " }" );
1: 
1: 		return	buffer.toString();
1: 	}
1: 
1:     /**
1:      * Copy a set of properties from one Property to another.
1:      * <p>
1:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1:      * @param src_prop  Source set of properties to copy from.
1:      * @param dest_prop Dest Properties to copy into.
1:      *
1:      **/
1:     public static void copyProperties(Properties src_prop, Properties dest_prop)
1:     {
1:         for (Enumeration propertyNames = src_prop.propertyNames();
1:              propertyNames.hasMoreElements(); )
1:         {
1:             String key = (String) propertyNames.nextElement();
1:             dest_prop.put(key, src_prop.getProperty(key));
1:         }
1:     }
1: }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /* 
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.PropertyUtil
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.util.Properties;
0: import java.util.Enumeration;
1: 
0: public class PropertyUtil {  
1: 
1: 
0: 	//////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	SORTS A PROPERTY LIST AND STRINGIFIES THE SORTED PROPERTIES
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
1: 
0: 	/**
0: 	  *	Sorts a property list and turns the sorted list into a string.
0: 	  *
0: 	  *	@param	list	property list to sort
0: 	  *
0: 	  *	@return	a string version of the sorted list
0: 	  */
0: 	public	static	String	sortProperties( Properties list )
0: 	{
0: 		// stringify them with no indentation
0: 		return sortProperties(list, null);
0: 	}
1: 
0: 	/**
0: 	 * Sorts property list and print out each key=value pair prepended with 
0: 	 * specific indentation.  If indent is null, do not prepend with
0: 	 * indentation. 
0: 	 *
0: 	 * The output string shows up in two styles, style 1 looks like
0: 	 * { key1=value1, key2=value2, key3=value3 }
0: 	 *
0: 	 * style 2 looks like
0: 	 *		key1=value1
0: 	 *		key2=value2
0: 	 *		key3=value3
0: 	 * where indent goes between the new line and the keys
0: 	 *
0: 	 * To get style 1, pass in a null indent
0: 	 * To get sytle 2, pass in non-null indent (whatever you want to go before
0: 	 * the key value)
0: 	 */
0: 	public	static	String	sortProperties( Properties list, char[] indent )
0: 	{
0: 		int				size = list == null ? 0 : list.size();
0: 		int				count = 0;
0: 		String[]		array = new String[size];
0: 		String			key;
0: 		String			value;
0: 		StringBuffer	buffer;
1: 
0: 		// Calculate the number of properties in the property list and
0: 		// build an array of all the property names.
0: 		// We need to go thru the enumeration because Properties has a
0: 		// recursive list of defaults.
0: 		if (list != null)
0: 		{
0: 			for (Enumeration propertyNames = list.propertyNames();
0: 				 propertyNames.hasMoreElements(); )
0: 			{
0: 				if (count == size)
0: 				{
0: 					// need to expand the array
0: 					size = size*2;
0: 					String[] expandedArray = new String[size];
0: 					System.arraycopy(array, 0, expandedArray, 0, count);
0: 					array = expandedArray;
0: 				}
0: 				key = (String) propertyNames.nextElement();
0: 				array[ count++ ] = key;
0: 			}
0: 			// now sort the array
0: 			java.util.Arrays.sort( array, 0, count );
0: 		}
1: 
1: 
0: 		// now stringify the array
0: 		buffer = new StringBuffer();
0: 		if (indent == null)
0: 			buffer.append( "{ " );
1: 
0: 		for ( int ictr = 0; ictr < count; ictr++ )
0: 		{
0: 			if ( ictr > 0 && indent == null)
0: 				buffer.append( ", " );
1: 
0: 			key = array[ ictr ];
1: 
0: 			if (indent != null)
0: 				buffer.append( indent );
1: 
0: 			buffer.append( key ); buffer.append( "=" );
1: 
0: 			value = list.getProperty( key, "MISSING_VALUE" );
0: 			buffer.append( value );
1: 
0: 			if (indent != null)
0: 				buffer.append( "\n" );
1: 
0: 		}
0: 		if (indent == null)
0: 			buffer.append( " }" );
1: 
0: 		return	buffer.toString();
0: 	}
1: 
0:     /**
0:      * Copy a set of properties from one Property to another.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param src_prop  Source set of properties to copy from.
0:      * @param dest_prop Dest Properties to copy into.
0:      *
0:      **/
0:     public static void copyProperties(Properties src_prop, Properties dest_prop)
0:     {
0:         for (Enumeration propertyNames = src_prop.propertyNames();
0:              propertyNames.hasMoreElements(); )
0:         {
0:             String key = (String) propertyNames.nextElement();
0:             dest_prop.put(key, src_prop.getProperty(key));
0:         }
0:     }
0: }
1: 
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.PropertyUtil
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: public class PropertyUtil {  
============================================================================