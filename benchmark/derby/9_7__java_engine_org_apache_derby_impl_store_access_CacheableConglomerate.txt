1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.CacheableConglomerate
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1:fa87f1c: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
2:eac0369: /**
1:eac0369: The CacheableConglomerate implements a single item in the cache used by
1:eac0369: the Conglomerate directory to cache Conglomerates.  It is simply a wrapper
1:eac0369: object for the conglomid and Conglomerate object that is read from the
1:eac0369: Conglomerate Conglomerate.   It is a wrapper rather than extending 
1:eac0369: the conglomerate implementations because we want to cache all conglomerate
1:38d1329: implementations: (ie. Heap, B2I, ...).
1:eac0369: 
1:eac0369: References to the Conglomerate objects cached by this wrapper will be handed
1:eac0369: out to callers.  When this this object goes out of cache callers may still
1:eac0369: have references to the Conglomerate objects, which we are counting on java
1:eac0369: to garbage collect.  The Conglomerate Objects never change after they are
1:eac0369: created.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: class CacheableConglomerate implements Cacheable
1:eac0369: {
1:fa87f1c:     private final RAMAccessManager accessManager;
1:eac0369:     private Long            conglomid;
1:eac0369:     private Conglomerate    conglom;
1:eac0369: 
1:eac0369:     /* Constructor */
1:fa87f1c:     CacheableConglomerate(RAMAccessManager parent)
1:eac0369:     {
1:fa87f1c:         this.accessManager = parent;
2:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** protected Methods of CacheableConglomerate:
1:eac0369: 	*/
1:eac0369:     protected Conglomerate getConglom()
1:eac0369:     {
1:eac0369:         return(this.conglom);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of Cacheable:
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the identity of the object to represent an item that already exists,
1:eac0369: 		e.g. an existing container.
1:eac0369: 		The object will be in the No Identity state,
1:eac0369: 		ie. it will have just been created or clearIdentity() was just called. 
1:eac0369: 		<BR>
1:38d1329: 		The object must copy the information out of key, not just store a 
1:38d1329:         reference to key.
1:38d1329: 		After this call the expression getIdentity().equals(key) must return 
1:38d1329:         true.
1:eac0369: 		<BR>
1:38d1329: 		If the class of the object needs to change (e.g. to support a different
1:38d1329:         format) then the object should create a new object, call its 
1:38d1329:         initParameter() with the parameters the original object was called with,
1:38d1329:         set its identity and return a reference to it. The cache
1:eac0369: 		manager will discard the reference to the old object. 
1:eac0369: 		<BR>
1:38d1329: 		If an exception is thrown the object must be left in the no-identity 
1:38d1329:         state.
1:eac0369: 
1:38d1329: 		<BR> MT - single thread required - Method must only be called by cache 
1:38d1329:         manager and the cache manager will guarantee only one thread can be 
1:38d1329:         calling it.
1:eac0369: 
1:38d1329: 		@return an object reference if the object can take on the identity, 
1:38d1329:                 null otherwise.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby Policy
1:eac0369: 
1:fa09146: 		@see org.apache.derby.iapi.services.cache.CacheManager#find
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Cacheable setIdentity(Object key) throws StandardException
1:eac0369:     {
1:fa87f1c:         conglomid = (Long) key;
1:eac0369: 
1:fa87f1c:         long id = conglomid.longValue();
1:fa87f1c: 
1:fa87f1c:         conglom = accessManager.getFactoryFromConglomId(id).readConglomerate(
1:fa87f1c:                 accessManager.getCurrentTransactionContext().getTransaction(),
1:fa87f1c:                 new ContainerKey(0, id));
1:fa87f1c: 
1:fa87f1c:         return this;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Create a new item and set the identity of the object to represent it.
1:eac0369: 	 * The object will be in the No Identity state,
1:eac0369: 	 * ie. it will have just been created or clearIdentity() was just called. 
1:eac0369: 	 * <BR>
1:eac0369: 	 * The object must copy the information out of key, not just store a 
1:eac0369:      * reference to key.  After this call the expression 
1:eac0369:      * getIdentity().equals(key) must return true.
1:eac0369: 	 * <BR>
1:eac0369: 	 * If the class of the object needs to change (e.g. to support a different 
1:eac0369:      * format) then the object should create a new object, call its 
1:eac0369:      * initParameter() with the parameters the original object was called with,
1:eac0369:      * set its identity and return a reference to it. The cache manager will 
1:eac0369:      * discard the reference to the old object. 
1:eac0369: 	 * <BR>
1:eac0369: 	 * If an exception is thrown the object must be left in the no-identity 
1:eac0369:      * state.
1:eac0369: 	 * <BR> MT - single thread required - Method must only be called be cache 
1:eac0369:      * manager and the cache manager will guarantee only one thread can be 
1:eac0369:      * calling it.
1:eac0369:      *
1:eac0369: 	 * @return an object reference if the object can take on the identity, 
1:eac0369:      * null otherwise.
1:eac0369:      *
1:eac0369: 	 * @exception StandardException If forCreate is true and the object cannot 
1:eac0369:      * be created.
1:eac0369:      *
1:fa09146: 	 * @see org.apache.derby.iapi.services.cache.CacheManager#create
1:eac0369: 	 **/
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter) 
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 key instanceof Long, "key is not instanceof Long");
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 createParameter instanceof Conglomerate, 
1:eac0369:                 "createParameter is not instanceof Conglomerate");
1:eac0369:         }
1:eac0369: 
1:eac0369:         this.conglomid = (Long) key;
1:eac0369:         this.conglom   = ((Conglomerate) createParameter);
1:eac0369: 
1:eac0369:         return(this);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Put the object into the No Identity state. 
1:eac0369: 
1:38d1329: 		<BR> MT - single thread required - Method must only be called be cache 
1:38d1329:         manager and the cache manager will guarantee only one thread can be 
1:38d1329:         calling it.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void clearIdentity()
1:eac0369:     {
1:eac0369:         this.conglomid = null;
1:eac0369:         this.conglom   = null;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the identity of this object.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Object getIdentity()
1:eac0369:     {
1:eac0369:         return(this.conglomid);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:38d1329: 		Returns true if the object is dirty. 
1:38d1329:         Will only be called when the object is unkept.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe 
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public boolean isDirty()
1:eac0369:     {
1:eac0369:         return(false);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clean the object.
1:eac0369: 		It is up to the object to ensure synchronization of the isDirty()
1:eac0369: 		and clean() method calls.
1:eac0369: 		<BR>
1:eac0369: 		If forRemove is true then the 
1:38d1329: 		object is being removed due to an explicit remove request, in this case
1:eac0369: 		the cache manager will have called this method regardless of the
1:eac0369: 		state of the isDirty() 
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		If an exception is thrown the object must be left in the clean state.
1:eac0369: 
1:38d1329: 		<BR> MT - thread safe - Can be called at any time by the cache manager, 
1:38d1329:         it is the responsibility of the object implementing Cacheable to ensure
1:38d1329:         any users of the object do not conflict with the clean call.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void clean(boolean forRemove) throws StandardException
1:eac0369:     {
1:eac0369:     }
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:38d1329
/////////////////////////////////////////////////////////////////////////
1: implementations: (ie. Heap, B2I, ...).
/////////////////////////////////////////////////////////////////////////
1: 		The object must copy the information out of key, not just store a 
1:         reference to key.
1: 		After this call the expression getIdentity().equals(key) must return 
1:         true.
1: 		If the class of the object needs to change (e.g. to support a different
1:         format) then the object should create a new object, call its 
1:         initParameter() with the parameters the original object was called with,
1:         set its identity and return a reference to it. The cache
1: 		If an exception is thrown the object must be left in the no-identity 
1:         state.
1: 		<BR> MT - single thread required - Method must only be called by cache 
1:         manager and the cache manager will guarantee only one thread can be 
1:         calling it.
1: 		@return an object reference if the object can take on the identity, 
1:                 null otherwise.
/////////////////////////////////////////////////////////////////////////
1: 		<BR> MT - single thread required - Method must only be called be cache 
1:         manager and the cache manager will guarantee only one thread can be 
1:         calling it.
/////////////////////////////////////////////////////////////////////////
1: 		Returns true if the object is dirty. 
1:         Will only be called when the object is unkept.
/////////////////////////////////////////////////////////////////////////
1: 		object is being removed due to an explicit remove request, in this case
1: 		<BR> MT - thread safe - Can be called at any time by the cache manager, 
1:         it is the responsibility of the object implementing Cacheable to ensure
1:         any users of the object do not conflict with the clean call.
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:fa87f1c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.ContainerKey;
/////////////////////////////////////////////////////////////////////////
1:     private final RAMAccessManager accessManager;
1:     CacheableConglomerate(RAMAccessManager parent)
1:         this.accessManager = parent;
/////////////////////////////////////////////////////////////////////////
1:         conglomid = (Long) key;
1:         long id = conglomid.longValue();
1: 
1:         conglom = accessManager.getFactoryFromConglomId(id).readConglomerate(
1:                 accessManager.getCurrentTransactionContext().getTransaction(),
1:                 new ContainerKey(0, id));
1: 
1:         return this;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		@see org.apache.derby.iapi.services.cache.CacheManager#find
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.iapi.services.cache.CacheManager#create
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.CacheableConglomerate
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
0: import java.util.Properties;
1: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: 
1: /**
1: The CacheableConglomerate implements a single item in the cache used by
1: the Conglomerate directory to cache Conglomerates.  It is simply a wrapper
1: object for the conglomid and Conglomerate object that is read from the
1: Conglomerate Conglomerate.   It is a wrapper rather than extending 
1: the conglomerate implementations because we want to cache all conglomerate
0: implementatations: (ie. Heap, B2I, ...).
1: 
1: References to the Conglomerate objects cached by this wrapper will be handed
1: out to callers.  When this this object goes out of cache callers may still
1: have references to the Conglomerate objects, which we are counting on java
1: to garbage collect.  The Conglomerate Objects never change after they are
1: created.
1: 
1: **/
1: 
1: class CacheableConglomerate implements Cacheable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1:     private Long            conglomid;
1:     private Conglomerate    conglom;
1: 
1:     /* Constructor */
0:     CacheableConglomerate()
1:     {
1:     }
1: 
1: 	/*
1: 	** protected Methods of CacheableConglomerate:
1: 	*/
1:     protected Conglomerate getConglom()
1:     {
1:         return(this.conglom);
1:     }
1: 
1: 	/*
1: 	** Methods of Cacheable:
1: 	*/
1: 
1: 	/**
1: 		Set the identity of the object to represent an item that already exists,
1: 		e.g. an existing container.
1: 		The object will be in the No Identity state,
1: 		ie. it will have just been created or clearIdentity() was just called. 
1: 		<BR>
0: 		The object must copy the information out of key, not just store a reference to key.
0: 		After this call the expression getIdentity().equals(key) must return true.
1: 		<BR>
0: 		If the class of the object needs to change (e.g. to support a different format)
0: 		then the object should create a new object, call its initParameter() with the parameters
0: 		the original object was called with, set its identity and return a reference to it. The cache
1: 		manager will discard the reference to the old object. 
1: 		<BR>
0: 		If an exception is thrown the object must be left in the no-identity state.
1: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
1: 
0: 		@return an object reference if the object can take on the identity, null otherwise.
1: 
0: 		@exception StandardException Standard Cloudscape Policy
1: 
0: 		@see CacheManager#find
1: 
1: 	*/
1: 	public Cacheable setIdentity(Object key) throws StandardException
1:     {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.THROWASSERT("not supported.");
1: 		}
1: 
0:         return(null);
1:     }
1: 
1: 	/**
1:      * Create a new item and set the identity of the object to represent it.
1: 	 * The object will be in the No Identity state,
1: 	 * ie. it will have just been created or clearIdentity() was just called. 
1: 	 * <BR>
1: 	 * The object must copy the information out of key, not just store a 
1:      * reference to key.  After this call the expression 
1:      * getIdentity().equals(key) must return true.
1: 	 * <BR>
1: 	 * If the class of the object needs to change (e.g. to support a different 
1:      * format) then the object should create a new object, call its 
1:      * initParameter() with the parameters the original object was called with,
1:      * set its identity and return a reference to it. The cache manager will 
1:      * discard the reference to the old object. 
1: 	 * <BR>
1: 	 * If an exception is thrown the object must be left in the no-identity 
1:      * state.
1: 	 * <BR> MT - single thread required - Method must only be called be cache 
1:      * manager and the cache manager will guarantee only one thread can be 
1:      * calling it.
1:      *
1: 	 * @return an object reference if the object can take on the identity, 
1:      * null otherwise.
1:      *
1: 	 * @exception StandardException If forCreate is true and the object cannot 
1:      * be created.
1:      *
0: 	 * @see CacheManager#create
1: 	 **/
1: 	public Cacheable createIdentity(Object key, Object createParameter) 
1:         throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(
1:                 key instanceof Long, "key is not instanceof Long");
1:             SanityManager.ASSERT(
1:                 createParameter instanceof Conglomerate, 
1:                 "createParameter is not instanceof Conglomerate");
1:         }
1: 
1:         this.conglomid = (Long) key;
1:         this.conglom   = ((Conglomerate) createParameter);
1: 
1:         return(this);
1:     }
1: 
1: 	/**
1: 		Put the object into the No Identity state. 
1: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
1: 
1: 	*/
1: 	public void clearIdentity()
1:     {
1:         this.conglomid = null;
1:         this.conglom   = null;
1:     }
1: 
1: 	/**
1: 		Get the identity of this object.
1: 
1: 		<BR> MT - thread safe.
1: 
1: 	*/
1: 	public Object getIdentity()
1:     {
1:         return(this.conglomid);
1:     }
1: 
1: 
1: 	/**
0: 		Returns true of the object is dirty. Will only be called when the object is unkept.
1: 
1: 		<BR> MT - thread safe 
1: 
1: 	*/
1: 	public boolean isDirty()
1:     {
1:         return(false);
1:     }
1: 
1: 	/**
1: 		Clean the object.
1: 		It is up to the object to ensure synchronization of the isDirty()
1: 		and clean() method calls.
1: 		<BR>
1: 		If forRemove is true then the 
0: 		object is being removed due to an explict remove request, in this case
1: 		the cache manager will have called this method regardless of the
1: 		state of the isDirty() 
1: 
1: 		<BR>
1: 		If an exception is thrown the object must be left in the clean state.
1: 
0: 		<BR> MT - thread safe - Can be called at any time by the cache manager, it is the
0: 		responsibility of the object implementing Cacheable to ensure any users of the
0: 		object do not conflict with the clean call.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
1: 	public void clean(boolean forRemove) throws StandardException
1:     {
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import java.util.Properties;
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: 
0: /**
0: The CacheableConglomerate implements a single item in the cache used by
0: the Conglomerate directory to cache Conglomerates.  It is simply a wrapper
0: object for the conglomid and Conglomerate object that is read from the
0: Conglomerate Conglomerate.   It is a wrapper rather than extending 
0: the conglomerate implementations because we want to cache all conglomerate
0: implementatations: (ie. Heap, B2I, ...).
0: 
0: References to the Conglomerate objects cached by this wrapper will be handed
0: out to callers.  When this this object goes out of cache callers may still
0: have references to the Conglomerate objects, which we are counting on java
0: to garbage collect.  The Conglomerate Objects never change after they are
0: created.
0: 
0: **/
0: 
0: class CacheableConglomerate implements Cacheable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0:     private Long            conglomid;
0:     private Conglomerate    conglom;
0: 
0:     /* Constructor */
0:     CacheableConglomerate()
0:     {
0:     }
0: 
0: 	/*
0: 	** protected Methods of CacheableConglomerate:
0: 	*/
0:     protected Conglomerate getConglom()
0:     {
0:         return(this.conglom);
0:     }
0: 
0: 	/*
0: 	** Methods of Cacheable:
0: 	*/
0: 
0: 	/**
0: 		Set the identity of the object to represent an item that already exists,
0: 		e.g. an existing container.
0: 		The object will be in the No Identity state,
0: 		ie. it will have just been created or clearIdentity() was just called. 
0: 		<BR>
0: 		The object must copy the information out of key, not just store a reference to key.
0: 		After this call the expression getIdentity().equals(key) must return true.
0: 		<BR>
0: 		If the class of the object needs to change (e.g. to support a different format)
0: 		then the object should create a new object, call its initParameter() with the parameters
0: 		the original object was called with, set its identity and return a reference to it. The cache
0: 		manager will discard the reference to the old object. 
0: 		<BR>
0: 		If an exception is thrown the object must be left in the no-identity state.
0: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
0: 
0: 		@return an object reference if the object can take on the identity, null otherwise.
0: 
0: 		@exception StandardException Standard Cloudscape Policy
0: 
0: 		@see CacheManager#find
0: 
0: 	*/
0: 	public Cacheable setIdentity(Object key) throws StandardException
0:     {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.THROWASSERT("not supported.");
0: 		}
0: 
0:         return(null);
0:     }
0: 
0: 	/**
0:      * Create a new item and set the identity of the object to represent it.
0: 	 * The object will be in the No Identity state,
0: 	 * ie. it will have just been created or clearIdentity() was just called. 
0: 	 * <BR>
0: 	 * The object must copy the information out of key, not just store a 
0:      * reference to key.  After this call the expression 
0:      * getIdentity().equals(key) must return true.
0: 	 * <BR>
0: 	 * If the class of the object needs to change (e.g. to support a different 
0:      * format) then the object should create a new object, call its 
0:      * initParameter() with the parameters the original object was called with,
0:      * set its identity and return a reference to it. The cache manager will 
0:      * discard the reference to the old object. 
0: 	 * <BR>
0: 	 * If an exception is thrown the object must be left in the no-identity 
0:      * state.
0: 	 * <BR> MT - single thread required - Method must only be called be cache 
0:      * manager and the cache manager will guarantee only one thread can be 
0:      * calling it.
0:      *
0: 	 * @return an object reference if the object can take on the identity, 
0:      * null otherwise.
0:      *
0: 	 * @exception StandardException If forCreate is true and the object cannot 
0:      * be created.
0:      *
0: 	 * @see CacheManager#create
0: 	 **/
0: 	public Cacheable createIdentity(Object key, Object createParameter) 
0:         throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(
0:                 key instanceof Long, "key is not instanceof Long");
0:             SanityManager.ASSERT(
0:                 createParameter instanceof Conglomerate, 
0:                 "createParameter is not instanceof Conglomerate");
0:         }
0: 
0:         this.conglomid = (Long) key;
0:         this.conglom   = ((Conglomerate) createParameter);
0: 
0:         return(this);
0:     }
0: 
0: 	/**
0: 		Put the object into the No Identity state. 
0: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
0: 
0: 	*/
0: 	public void clearIdentity()
0:     {
0:         this.conglomid = null;
0:         this.conglom   = null;
0:     }
0: 
0: 	/**
0: 		Get the identity of this object.
0: 
0: 		<BR> MT - thread safe.
0: 
0: 	*/
0: 	public Object getIdentity()
0:     {
0:         return(this.conglomid);
0:     }
0: 
0: 
0: 	/**
0: 		Returns true of the object is dirty. Will only be called when the object is unkept.
0: 
0: 		<BR> MT - thread safe 
0: 
0: 	*/
0: 	public boolean isDirty()
0:     {
0:         return(false);
0:     }
0: 
0: 	/**
0: 		Clean the object.
0: 		It is up to the object to ensure synchronization of the isDirty()
0: 		and clean() method calls.
0: 		<BR>
0: 		If forRemove is true then the 
0: 		object is being removed due to an explict remove request, in this case
0: 		the cache manager will have called this method regardless of the
0: 		state of the isDirty() 
0: 
0: 		<BR>
0: 		If an exception is thrown the object must be left in the clean state.
0: 
0: 		<BR> MT - thread safe - Can be called at any time by the cache manager, it is the
0: 		responsibility of the object implementing Cacheable to ensure any users of the
0: 		object do not conflict with the clean call.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public void clean(boolean forRemove) throws StandardException
0:     {
0:     }
0: }
============================================================================