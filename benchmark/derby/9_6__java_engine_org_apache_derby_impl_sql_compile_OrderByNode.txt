2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.OrderByNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.util.Properties;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:8bae7cf: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * An OrderByNode represents a result set for a sort operation
1:eac0369:  * for an order by list.  It is expected to only be generated at 
1:eac0369:  * the end of optimization, once we have determined that a sort
1:eac0369:  * is required.
2:eac0369:  *
1:eac0369:  */
1:3bb140c: class OrderByNode extends SingleChildResultSetNode
3:eac0369: {
1:eac0369: 
1:eac0369: 	OrderByList		orderByList;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a OrderByNode.
1:eac0369: 	 *
1:3bb140c:      * @param childRes      The child ResultSetNode
1:eac0369: 	 * @param orderByList	The order by list.
1:eac0369:  	 * @param tableProperties	Properties list associated with the table
1:3bb140c:      * @param cm            The context manager
1:3bb140c:      *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     OrderByNode(ResultSetNode childRes,
1:3bb140c:                 OrderByList orderByList,
1:3bb140c:                 Properties tableProperties,
1:3bb140c:                 ContextManager cm) throws StandardException {
1:3bb140c:         super(childRes, tableProperties, cm);
1:eac0369: 
1:3bb140c:         this.orderByList = orderByList;
1:eac0369: 
1:3bb140c:         // We want our own resultColumns, which are virtual columns pointing to
1:3bb140c:         // the child result's columns.
1:3bb140c:         //
1:3bb140c:         // We have to have the original object in the distinct node, and give
1:3bb140c:         // the underlying project the copy.
1:3bb140c:         //
1:3bb140c:         // We get a shallow copy of the ResultColumnList and its ResultColumns.
1:3bb140c:         // (Copy maintains ResultColumn.expression for now.)
1:3bb140c:         final ResultColumnList prRCList =
1:3bb140c:             childRes.getResultColumns().copyListAndObjects();
1:11f7ee3:         setResultColumns( childRes.getResultColumns() );
1:3bb140c:         childRes.setResultColumns(prRCList);
1:eac0369: 
1:eac0369: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
1:eac0369: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
1:eac0369: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
1:eac0369: 		 */
1:11f7ee3:         getResultColumns().genVirtualColumnNodes(this, prRCList);
2:eac0369: 	}
1:c9a1206: 
1:eac0369: 
1:eac0369: 	/**
1:c9a1206: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:c9a1206: 	 * how tree printing is supposed to work.
1:eac0369: 	 *
1:c9a1206: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:c9a1206: 			super.printSubNodes(depth);
1:c9a1206: 
1:c9a1206: 			if (orderByList != null)
1:c9a1206: 			{
1:c9a1206: 				printLabel(depth, "orderByList: ");
1:c9a1206: 				orderByList.treePrint(depth + 1);
1:c9a1206: 			}
1:eac0369: 		}
1:eac0369: 	}
1:c9a1206: 
1:3bb140c:     @Override
1:6c000e8: 	ResultColumnDescriptor[] makeResultDescriptors()
1:eac0369: 	{
1:6c000e8: 	    return childResult.makeResultDescriptors();
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * generate the distinct result set operating over the source
1:3bb140c:      * result set.
1:eac0369:      *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      */
1:3bb140c:     @Override
1:8fe3166:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
2:eac0369: 							throws StandardException
1:eac0369: 	{
1:eac0369: 		// Get the cost estimate for the child
1:11f7ee3: 		if (getCostEstimate() == null)
1:eac0369: 		{
1:11f7ee3: 			setCostEstimate( childResult.getFinalCostEstimate() );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	    orderByList.generate(acb, mb, childResult);
1:2060c4a: 
1:2060c4a: 		// We need to take note of result set number if ORDER BY is used in a
1:2060c4a: 		// subquery for the case where a PRN is inserted in top of the select's
1:2060c4a: 		// PRN to project away a sort column that is not part of the select
1:2060c4a: 		// list, e.g.
1:2060c4a: 		//
1:2060c4a: 		//     select * from (select i from t order by j desc) s
1:2060c4a: 		//
1:2060c4a: 		// If the resultSetNumber is not correctly set in our resultColumns,
1:2060c4a: 		// code generation for the PRN above us will fail when calling
1:2060c4a: 		// resultColumns.generateCore -> VCN.generateExpression, cf. the Sanity
1:2060c4a: 		// assert in VCN.generateExpression on sourceResultSetNumber >= 0.
1:11f7ee3: 		setResultSetNumber( orderByList.getResultSetNumber() );
1:11f7ee3: 		getResultColumns().setResultSetNumber(getResultSetNumber());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:11f7ee3
/////////////////////////////////////////////////////////////////////////
1:         setResultColumns( childRes.getResultColumns() );
1:         getResultColumns().genVirtualColumnNodes(this, prRCList);
/////////////////////////////////////////////////////////////////////////
1: 		if (getCostEstimate() == null)
1: 			setCostEstimate( childResult.getFinalCostEstimate() );
/////////////////////////////////////////////////////////////////////////
1: 		setResultSetNumber( orderByList.getResultSetNumber() );
1: 		getResultColumns().setResultSetNumber(getResultSetNumber());
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class OrderByNode extends SingleChildResultSetNode
1:      * Constructor for a OrderByNode.
1:      * @param childRes      The child ResultSetNode
1:      * @param cm            The context manager
1:      *
1:     OrderByNode(ResultSetNode childRes,
1:                 OrderByList orderByList,
1:                 Properties tableProperties,
1:                 ContextManager cm) throws StandardException {
1:         super(childRes, tableProperties, cm);
0:         setNodeType(C_NodeTypes.ORDER_BY_NODE);
1:         this.orderByList = orderByList;
1:         // We want our own resultColumns, which are virtual columns pointing to
1:         // the child result's columns.
1:         //
1:         // We have to have the original object in the distinct node, and give
1:         // the underlying project the copy.
1:         //
1:         // We get a shallow copy of the ResultColumnList and its ResultColumns.
1:         // (Copy maintains ResultColumn.expression for now.)
1:         final ResultColumnList prRCList =
1:             childRes.getResultColumns().copyListAndObjects();
0:         this.resultColumns = childRes.getResultColumns();
1:         childRes.setResultColumns(prRCList);
0:         this.resultColumns.genVirtualColumnNodes(this, prRCList);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * result set.
1:     @Override
commit:2060c4a
/////////////////////////////////////////////////////////////////////////
1: 
1: 		// We need to take note of result set number if ORDER BY is used in a
1: 		// subquery for the case where a PRN is inserted in top of the select's
1: 		// PRN to project away a sort column that is not part of the select
1: 		// list, e.g.
1: 		//
1: 		//     select * from (select i from t order by j desc) s
1: 		//
1: 		// If the resultSetNumber is not correctly set in our resultColumns,
1: 		// code generation for the PRN above us will fail when calling
1: 		// resultColumns.generateCore -> VCN.generateExpression, cf. the Sanity
1: 		// assert in VCN.generateExpression on sourceResultSetNumber >= 0.
0: 		resultSetNumber = orderByList.getResultSetNumber();
0: 		resultColumns.setResultSetNumber(resultSetNumber);
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 * @param depth		The depth of this node in the tree
0: 	public void printSubNodes(int depth)
1: 			super.printSubNodes(depth);
1: 
1: 			if (orderByList != null)
1: 			{
1: 				printLabel(depth, "orderByList: ");
1: 				orderByList.treePrint(depth + 1);
1: 			}
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8bae7cf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
commit:6c000e8
/////////////////////////////////////////////////////////////////////////
1: 	ResultColumnDescriptor[] makeResultDescriptors()
1: 	    return childResult.makeResultDescriptors();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OrderByNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: import org.apache.derby.iapi.sql.compile.OptimizableList;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
0: import org.apache.derby.iapi.sql.compile.Optimizer;
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  * An OrderByNode represents a result set for a sort operation
1:  * for an order by list.  It is expected to only be generated at 
1:  * the end of optimization, once we have determined that a sort
1:  * is required.
1:  *
0:  * @author jerry
1:  */
0: public class OrderByNode extends SingleChildResultSetNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	OrderByList		orderByList;
1: 
1: 	/**
0: 	 * Initializer for a OrderByNode.
1: 	 *
0: 	 * @param childResult	The child ResultSetNode
1: 	 * @param orderByList	The order by list.
1:  	 * @param tableProperties	Properties list associated with the table
1:     *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void init(
0: 						Object childResult,
0: 						Object orderByList,
0: 						Object tableProperties)
1: 		throws StandardException
1: 	{
0: 		ResultSetNode child = (ResultSetNode) childResult;
1: 
0: 		super.init(childResult, tableProperties);
1: 
0: 		this.orderByList = (OrderByList) orderByList;
1: 
0: 		ResultColumnList prRCList;
1: 
1: 		/*
0: 			We want our own resultColumns, which are virtual columns
0: 			pointing to the child result's columns.
1: 
0: 			We have to have the original object in the distinct node,
0: 			and give the underlying project the copy.
1: 		 */
1: 
0: 		/* We get a shallow copy of the ResultColumnList and its 
0: 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
1: 		 */
0: 		prRCList = child.getResultColumns().copyListAndObjects();
0: 		resultColumns = child.getResultColumns();
0: 		child.setResultColumns(prRCList);
1: 
1: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
1: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
1: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
1: 		 */
0: 		resultColumns.genVirtualColumnNodes(this, prRCList);
1: 	}
1: 
1: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
1: 	 *
0: 	 * @return	This object as a String
1: 	 */
1: 
0: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return childResult.toString() + "\n" + 
0: 				"orderByList: " + 
0: 				(orderByList != null ? orderByList.toString() : "null") + "\n" +
0: 				super.toString();
1: 		}
0: 		else
1: 		{
0: 			return "";
1: 		}
1: 	}
1: 
0: 	ResultColumnDescriptor[] makeResultDescriptors(ExecutionContext ec)
1: 	{
0: 	    return childResult.makeResultDescriptors(ec);
1: 	}
1: 
1:     /**
1:      * generate the distinct result set operating over the source
0: 	 * resultset.
1:      *
1: 	 * @exception StandardException		Thrown on error
1:      */
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
1: 							throws StandardException
1: 	{
1: 		// Get the cost estimate for the child
0: 		if (costEstimate == null)
1: 		{
0: 			costEstimate = childResult.getFinalCostEstimate();
1: 		}
1: 
1: 	    orderByList.generate(acb, mb, childResult);
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: import org.apache.derby.iapi.sql.compile.OptimizableList;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
0: import org.apache.derby.iapi.sql.compile.Optimizer;
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * An OrderByNode represents a result set for a sort operation
0:  * for an order by list.  It is expected to only be generated at 
0:  * the end of optimization, once we have determined that a sort
0:  * is required.
0:  *
0:  * @author jerry
0:  */
0: public class OrderByNode extends SingleChildResultSetNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	OrderByList		orderByList;
0: 
0: 	/**
0: 	 * Initializer for a OrderByNode.
0: 	 *
0: 	 * @param childResult	The child ResultSetNode
0: 	 * @param orderByList	The order by list.
0:  	 * @param tableProperties	Properties list associated with the table
0:     *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void init(
0: 						Object childResult,
0: 						Object orderByList,
0: 						Object tableProperties)
0: 		throws StandardException
0: 	{
0: 		ResultSetNode child = (ResultSetNode) childResult;
0: 
0: 		super.init(childResult, tableProperties);
0: 
0: 		this.orderByList = (OrderByList) orderByList;
0: 
0: 		ResultColumnList prRCList;
0: 
0: 		/*
0: 			We want our own resultColumns, which are virtual columns
0: 			pointing to the child result's columns.
0: 
0: 			We have to have the original object in the distinct node,
0: 			and give the underlying project the copy.
0: 		 */
0: 
0: 		/* We get a shallow copy of the ResultColumnList and its 
0: 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
0: 		 */
0: 		prRCList = child.getResultColumns().copyListAndObjects();
0: 		resultColumns = child.getResultColumns();
0: 		child.setResultColumns(prRCList);
0: 
0: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
0: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
0: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
0: 		 */
0: 		resultColumns.genVirtualColumnNodes(this, prRCList);
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return childResult.toString() + "\n" + 
0: 				"orderByList: " + 
0: 				(orderByList != null ? orderByList.toString() : "null") + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	ResultColumnDescriptor[] makeResultDescriptors(ExecutionContext ec)
0: 	{
0: 	    return childResult.makeResultDescriptors(ec);
0: 	}
0: 
0:     /**
0:      * generate the distinct result set operating over the source
0: 	 * resultset.
0:      *
0: 	 * @exception StandardException		Thrown on error
0:      */
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
0: 							throws StandardException
0: 	{
0: 		// Get the cost estimate for the child
0: 		if (costEstimate == null)
0: 		{
0: 			costEstimate = childResult.getFinalCostEstimate();
0: 		}
0: 
0: 	    orderByList.generate(acb, mb, childResult);
0: 	}
0: }
============================================================================