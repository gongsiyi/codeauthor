1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.GenericParameter
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:854dd10: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:854dd10: import org.apache.derby.iapi.types.DataValueDescriptor;
1:854dd10: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:e33b8d8: import java.sql.ParameterMetaData;
1:eac0369: import java.sql.Types;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * A parameter.  Originally lifted from ParameterValueSet.
3:eac0369:  *
1:eac0369:  */
1:eac0369: final class GenericParameter
2:eac0369: {
1:eac0369: 
1:eac0369: 	// These defaults match the Network Server/ JCC max precision and
1:eac0369: 	// The JCC "guessed" scale. They are used as the defaults for 
1:eac0369: 	// Decimal out params.
1:eac0369: 	private static int DECIMAL_PARAMETER_DEFAULT_PRECISION = 31;
1:eac0369: 	private static int DECIMAL_PARAMETER_DEFAULT_SCALE = 15;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** The parameter set we are part of
1:eac0369: 	*/
1:eac0369: 	private final GenericParameterValueSet		pvs;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Our value
1:eac0369: 	*/
1:eac0369: 	private DataValueDescriptor				value;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Compile time JDBC type identifier.
1:eac0369: 	*/
1:eac0369: 	int								jdbcTypeId;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Compile time Java class name.
1:eac0369: 	*/
1:eac0369: 	String							declaredClassName;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Mode of the parameter, from ParameterMetaData
1:eac0369: 	*/
1:eac0369: 	short							parameterMode;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** If we are set
1:eac0369: 	*/
1:eac0369: 	boolean							isSet;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Output parameter values
1:eac0369:  	*/
1:eac0369: 	private final boolean					isReturnOutputParameter;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Type that has been registered.
1:eac0369: 	*/
1:eac0369: 	int	registerOutType = Types.NULL;
1:eac0369: 	/**
1:eac0369: 		Scale that has been registered.
1:eac0369: 	*/
1:eac0369: 	int registerOutScale = -1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * When a decimal output parameter is registered we give it a 
1:eac0369: 	 * precision
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	int registerOutPrecision = -1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a Parameter
1:eac0369: 	 *
1:eac0369: 	 * @param pvs the parameter set that this is part of
1:eac0369: 	 * @param isReturnOutputParameter true if this is a return output parameter
1:eac0369: 	 */
1:eac0369: 	GenericParameter
1:eac0369: 	(
1:eac0369: 		GenericParameterValueSet	pvs,
1:eac0369: 		boolean						isReturnOutputParameter
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		this.pvs = pvs;
1:eac0369: 		parameterMode = (this.isReturnOutputParameter = isReturnOutputParameter)
1:e33b8d8:             ? (short) (ParameterMetaData.parameterModeOut) : (short) (ParameterMetaData.parameterModeIn);
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clone myself.  It is a shallow copy for everything but
1:eac0369: 	 * the underlying data wrapper and its value -- e.g. for
1:eac0369: 	 * everything but the underlying SQLInt and its int.
1:eac0369: 	 *
1:eac0369: 	 * @param pvs the parameter value set
1:eac0369: 	 *
1:eac0369: 	 * @return a new generic parameter.
1:eac0369: 	 */
1:eac0369: 	public GenericParameter getClone(GenericParameterValueSet pvs)
1:eac0369: 	{
1:eac0369: 		GenericParameter gpClone = new GenericParameter(pvs, isReturnOutputParameter);
1:854dd10:         gpClone.initialize(this.getValue().cloneValue(false),
1:854dd10:                            jdbcTypeId, declaredClassName);
1:eac0369: 		gpClone.isSet = true;
1:eac0369: 
1:eac0369: 		return gpClone;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:7736829: 	 * Set the DataValueDescriptor and type information for this parameter
1:eac0369: 	 *
1:eac0369: 	 */
1:7736829: 	void initialize(DataValueDescriptor value, int jdbcTypeId, String className)
1:eac0369: 	{
1:eac0369: 		this.value = value;
1:eac0369: 		this.jdbcTypeId = jdbcTypeId;
1:eac0369: 		this.declaredClassName = className;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clear the parameter, unless it is a return
1:eac0369: 	 * output parameter
1:eac0369: 	 */
1:eac0369: 	void clear()
1:eac0369: 	{
1:eac0369: 		isSet = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the parameter value.  Doesn't check to
1:eac0369: 	 * see if it has been initialized or not.
1:eac0369: 	 *
1:eac0369: 	 * @return the parameter value, may return null
1:eac0369: 	 */
1:eac0369: 	DataValueDescriptor getValue()
1:eac0369: 	{
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CALLABLE STATEMENT
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark the parameter as an output parameter.
1:eac0369: 	 *
1:eac0369: 	 * @param sqlType	A type from java.sql.Types
1:eac0369: 	 * @param scale		scale, -1 if no scale arg
1:eac0369: 	 *
2:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void setOutParameter(int sqlType, int scale)
1:92268ac: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		// fast case duplicate registrations.
1:eac0369: 		if (registerOutType == sqlType) {
1:eac0369: 			if (scale == registerOutScale)
1:eac0369: 				return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		switch (parameterMode) {
1:e33b8d8:         case (ParameterMetaData.parameterModeIn):
1:e33b8d8:         case (ParameterMetaData.parameterModeUnknown):
1:eac0369: 		default:
1:eac0369: 			throw StandardException.newException(SQLState.LANG_NOT_OUT_PARAM, getJDBCParameterNumberStr());
1:eac0369: 
1:e33b8d8:         case (ParameterMetaData.parameterModeInOut):
1:e33b8d8:         case (ParameterMetaData.parameterModeOut):
1:eac0369: 			// Declared/Java procedure parameter.
1:eac0369: 			if (!DataTypeDescriptor.isJDBCTypeEquivalent(jdbcTypeId, sqlType))
1:eac0369: 				throw throwInvalidOutParamMap(sqlType);
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		registerOutType = sqlType;
1:eac0369: 		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private StandardException throwInvalidOutParamMap(int sqlType) {
1:eac0369: 
1:eac0369: 		//TypeId typeId = TypeId.getBuiltInTypeId(sqlType);
1:eac0369: 		// String sqlTypeName = typeId == null ? "OTHER" : typeId.getSQLTypeName();
1:eac0369: 
1:eac0369: 
1:eac0369: 		String jdbcTypesName = org.apache.derby.impl.jdbc.Util.typeName(sqlType);
1:eac0369: 
1:eac0369: 		TypeId typeId = TypeId.getBuiltInTypeId(jdbcTypeId);
1:eac0369: 		String thisTypeName = typeId == null ? declaredClassName : typeId.getSQLTypeName();
1:eac0369: 				
1:eac0369: 		StandardException e = StandardException.newException(SQLState.LANG_INVALID_OUT_PARAM_MAP,
1:eac0369: 					getJDBCParameterNumberStr(),
1:eac0369: 					jdbcTypesName, thisTypeName);
1:eac0369: 
1:eac0369: 		return e;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Validate the parameters.  This is done for situations where
1:eac0369: 	 * we cannot validate everything in the setXXX() calls.  In
1:eac0369: 	 * particular, before we do an execute() on a CallableStatement,
1:eac0369: 	 * we need to go through the parameters and make sure that
1:eac0369: 	 * all parameters are set up properly.  The motivator for this
1:eac0369: 	 * is that setXXX() can be called either before or after
1:eac0369: 	 * registerOutputParamter(), we cannot be sure we have the types
1:eac0369: 	 * correct until we get to execute().
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException if the parameters aren't valid
1:eac0369: 	 */
1:eac0369: 	void validate() throws StandardException
1:eac0369: 	{
1:eac0369: 		switch (parameterMode) {
1:e33b8d8:         case (ParameterMetaData.parameterModeUnknown):
1:eac0369: 			break;
1:e33b8d8:         case (ParameterMetaData.parameterModeIn):
1:eac0369: 			break;
1:e33b8d8:         case (ParameterMetaData.parameterModeInOut):
1:e33b8d8:         case (ParameterMetaData.parameterModeOut):
1:eac0369: 			if (registerOutType == Types.NULL) {
1:eac0369: 				throw StandardException.newException(SQLState.NEED_TO_REGISTER_PARAM,
1:eac0369: 					getJDBCParameterNumberStr(),
1:eac0369: 					 org.apache.derby.catalog.types.RoutineAliasInfo.parameterMode(parameterMode));
1:eac0369: 			}
1:eac0369: 			break;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the scale of the parameter.
1:eac0369: 	 *
1:eac0369: 	 * @return scale
1:eac0369: 	 */
1:eac0369: 	int getScale()
1:eac0369: 	{
1:eac0369: 		//when the user doesn't pass any scale, the registerOutScale gets set to -1
1:eac0369: 		return (registerOutScale == -1 ? 0 : registerOutScale);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	int getPrecision()
1:eac0369: 	{
1:eac0369: 		return registerOutPrecision;
1:eac0369: 		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CLASS IMPLEMENTATION
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * get string for param number
1:eac0369: 	 */
1:eac0369: 	String getJDBCParameterNumberStr()
1:eac0369: 	{
1:eac0369: 		return Integer.toString(pvs.getParameterNumber(this));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		/* This method is used for debugging.
1:eac0369: 		 * It is called when derby.language.logStatementText=true,
1:eac0369: 		 * so there is no check of SanityManager.DEBUG.
1:eac0369: 		 * Anyway, we need to call value.getString() instead of
1:eac0369: 		 * value.toString() because the user may have done a
1:eac0369: 		 * a setStream() on the parameter.  (toString() could get
1:eac0369: 		 * an assertion failure in that case as it would be in an
1:eac0369: 		 * unexpected state since this is a very weird codepath.)
1:eac0369: 		 * getString() can throw an exception which we eat and
1:eac0369: 		 * and reflect in the returned string.
1:eac0369: 		 */
1:eac0369: 		if (value == null)
1:eac0369: 		{
1:eac0369: 			return "null";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:f73afdc: 				return value.getTraceString();
1:eac0369: 			}
1:eac0369: 			catch (StandardException se)
1:eac0369: 			{
1:f73afdc: 				return "unexpected exception from getTraceString() - " + se;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ParameterMetaData;
/////////////////////////////////////////////////////////////////////////
1:             ? (short) (ParameterMetaData.parameterModeOut) : (short) (ParameterMetaData.parameterModeIn);
/////////////////////////////////////////////////////////////////////////
1:         case (ParameterMetaData.parameterModeIn):
1:         case (ParameterMetaData.parameterModeUnknown):
1:         case (ParameterMetaData.parameterModeInOut):
1:         case (ParameterMetaData.parameterModeOut):
/////////////////////////////////////////////////////////////////////////
1:         case (ParameterMetaData.parameterModeUnknown):
1:         case (ParameterMetaData.parameterModeIn):
1:         case (ParameterMetaData.parameterModeInOut):
1:         case (ParameterMetaData.parameterModeOut):
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:         gpClone.initialize(this.getValue().cloneValue(false),
1:                            jdbcTypeId, declaredClassName);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
commit:f73afdc
/////////////////////////////////////////////////////////////////////////
1: 				return value.getTraceString();
1: 				return "unexpected exception from getTraceString() - " + se;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:698e318
/////////////////////////////////////////////////////////////////////////
commit:7736829
/////////////////////////////////////////////////////////////////////////
0: 		gpClone.initialize(this.getValue().getClone(), jdbcTypeId, declaredClassName);
1: 	 * Set the DataValueDescriptor and type information for this parameter
1: 	void initialize(DataValueDescriptor value, int jdbcTypeId, String className)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.GenericParameter
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
1: 
0: import org.apache.derby.iapi.sql.ParameterValueSet;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.UserDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.*;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.*;
0: import org.apache.derby.iapi.types.*;
1: 
1: import java.sql.Types;
1: 
0: import java.lang.reflect.Array;
1: 
1: /**
1:  * A parameter.  Originally lifted from ParameterValueSet.
1:  *
0:  * @author jamie 
1:  */
1: final class GenericParameter
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	// These defaults match the Network Server/ JCC max precision and
1: 	// The JCC "guessed" scale. They are used as the defaults for 
1: 	// Decimal out params.
1: 	private static int DECIMAL_PARAMETER_DEFAULT_PRECISION = 31;
1: 	private static int DECIMAL_PARAMETER_DEFAULT_SCALE = 15;
1: 
1: 
1: 	/*
1: 	** The parameter set we are part of
1: 	*/
1: 	private final GenericParameterValueSet		pvs;
1: 
1: 	/**
1: 	** Our value
1: 	*/
1: 	private DataValueDescriptor				value;
1: 
1: 	/**
1: 		Compile time JDBC type identifier.
1: 	*/
1: 	int								jdbcTypeId;
1: 
1: 	/**
1: 		Compile time Java class name.
1: 	*/
1: 	String							declaredClassName;
1: 
1: 	/**
1: 		Mode of the parameter, from ParameterMetaData
1: 	*/
1: 	short							parameterMode;
1: 
1: 	/*
1: 	** If we are set
1: 	*/
1: 	boolean							isSet;
1: 
1: 	/*
1: 	** Output parameter values
1:  	*/
1: 	private final boolean					isReturnOutputParameter;
1: 
1: 	/**
1: 		Type that has been registered.
1: 	*/
1: 	int	registerOutType = Types.NULL;
1: 	/**
1: 		Scale that has been registered.
1: 	*/
1: 	int registerOutScale = -1;
1: 
1: 	/**
1: 	 * When a decimal output parameter is registered we give it a 
1: 	 * precision
1: 	 */
1: 
1: 	int registerOutPrecision = -1;
1: 
1: 	/**
1: 	 * Constructor for a Parameter
1: 	 *
1: 	 * @param pvs the parameter set that this is part of
1: 	 * @param isReturnOutputParameter true if this is a return output parameter
1: 	 */
1: 	GenericParameter
1: 	(
1: 		GenericParameterValueSet	pvs,
1: 		boolean						isReturnOutputParameter
1: 	)
1: 	{
1: 		this.pvs = pvs;
1: 		parameterMode = (this.isReturnOutputParameter = isReturnOutputParameter)
0: 			? (short) JDBC30Translation.PARAMETER_MODE_OUT : (short) JDBC30Translation.PARAMETER_MODE_IN;
1: 	}
1: 
1: 	/**
1: 	 * Clone myself.  It is a shallow copy for everything but
1: 	 * the underlying data wrapper and its value -- e.g. for
1: 	 * everything but the underlying SQLInt and its int.
1: 	 *
1: 	 * @param pvs the parameter value set
1: 	 *
1: 	 * @return a new generic parameter.
1: 	 */
1: 	public GenericParameter getClone(GenericParameterValueSet pvs)
1: 	{
1: 		GenericParameter gpClone = new GenericParameter(pvs, isReturnOutputParameter);
0: 		gpClone.setStorableDataValue(this.getValue().getClone(), jdbcTypeId, declaredClassName);
1: 		gpClone.isSet = true;
1: 
1: 		return gpClone;
1: 	}
1: 
1: 	/**
0: 	 * Set the DataValueDescriptor for this parameter.  If makrAsSet
0: 	 * is set, then we consider this parameter both initialized and
0: 	 * set.  Otherwise, it is just initialized but not yet set.
1: 	 *
0: 	 * @param std the storable data value
0: 	 * @param markAsSet whether we should mark as being set or not.
0: 	 * 		The isSet() method will return this value.
1: 	 */
0: 	void setStorableDataValue(DataValueDescriptor value, int jdbcTypeId, String className)
1: 	{
1: 		this.value = value;
1: 		this.jdbcTypeId = jdbcTypeId;
1: 		this.declaredClassName = className;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Clear the parameter, unless it is a return
1: 	 * output parameter
1: 	 */
1: 	void clear()
1: 	{
1: 		isSet = false;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get the parameter value.  Doesn't check to
1: 	 * see if it has been initialized or not.
1: 	 *
1: 	 * @return the parameter value, may return null
1: 	 */
1: 	DataValueDescriptor getValue()
1: 	{
1: 		return value;
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	// CALLABLE STATEMENT
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Mark the parameter as an output parameter.
1: 	 *
1: 	 * @param sqlType	A type from java.sql.Types
1: 	 * @param scale		scale, -1 if no scale arg
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void setOutParameter(int sqlType, int scale)
0: 		throws StandardException
1: 	{
1: 		// fast case duplicate registrations.
1: 		if (registerOutType == sqlType) {
1: 			if (scale == registerOutScale)
1: 				return;
1: 		}
1: 
1: 		switch (parameterMode) {
0: 		case JDBC30Translation.PARAMETER_MODE_IN:
0: 		case JDBC30Translation.PARAMETER_MODE_UNKNOWN:
1: 		default:
1: 			throw StandardException.newException(SQLState.LANG_NOT_OUT_PARAM, getJDBCParameterNumberStr());
1: 
0: 		case JDBC30Translation.PARAMETER_MODE_IN_OUT:
0: 		case JDBC30Translation.PARAMETER_MODE_OUT:
1: 			// Declared/Java procedure parameter.
1: 			if (!DataTypeDescriptor.isJDBCTypeEquivalent(jdbcTypeId, sqlType))
1: 				throw throwInvalidOutParamMap(sqlType);
1: 			break;
1: 
1: 		}
1: 
1: 		registerOutType = sqlType;
1: 		
1: 	}
1: 
1: 	private StandardException throwInvalidOutParamMap(int sqlType) {
1: 
1: 		//TypeId typeId = TypeId.getBuiltInTypeId(sqlType);
1: 		// String sqlTypeName = typeId == null ? "OTHER" : typeId.getSQLTypeName();
1: 
1: 
1: 		String jdbcTypesName = org.apache.derby.impl.jdbc.Util.typeName(sqlType);
1: 
1: 		TypeId typeId = TypeId.getBuiltInTypeId(jdbcTypeId);
1: 		String thisTypeName = typeId == null ? declaredClassName : typeId.getSQLTypeName();
1: 				
1: 		StandardException e = StandardException.newException(SQLState.LANG_INVALID_OUT_PARAM_MAP,
1: 					getJDBCParameterNumberStr(),
1: 					jdbcTypesName, thisTypeName);
1: 
1: 		return e;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Validate the parameters.  This is done for situations where
1: 	 * we cannot validate everything in the setXXX() calls.  In
1: 	 * particular, before we do an execute() on a CallableStatement,
1: 	 * we need to go through the parameters and make sure that
1: 	 * all parameters are set up properly.  The motivator for this
1: 	 * is that setXXX() can be called either before or after
1: 	 * registerOutputParamter(), we cannot be sure we have the types
1: 	 * correct until we get to execute().
1: 	 *
1: 	 * @exception StandardException if the parameters aren't valid
1: 	 */
1: 	void validate() throws StandardException
1: 	{
1: 		switch (parameterMode) {
0: 		case JDBC30Translation.PARAMETER_MODE_UNKNOWN:
1: 			break;
0: 		case JDBC30Translation.PARAMETER_MODE_IN:
1: 			break;
0: 		case JDBC30Translation.PARAMETER_MODE_IN_OUT:
0: 		case JDBC30Translation.PARAMETER_MODE_OUT:
1: 			if (registerOutType == Types.NULL) {
1: 				throw StandardException.newException(SQLState.NEED_TO_REGISTER_PARAM,
1: 					getJDBCParameterNumberStr(),
1: 					 org.apache.derby.catalog.types.RoutineAliasInfo.parameterMode(parameterMode));
1: 			}
1: 			break;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Return the scale of the parameter.
1: 	 *
1: 	 * @return scale
1: 	 */
1: 	int getScale()
1: 	{
1: 		//when the user doesn't pass any scale, the registerOutScale gets set to -1
1: 		return (registerOutScale == -1 ? 0 : registerOutScale);
1: 	}
1: 
1: 
1: 	int getPrecision()
1: 	{
1: 		return registerOutPrecision;
1: 		
1: 	}
1: 
1: 	////////////////////////////////////////////////////
1: 	//
1: 	// CLASS IMPLEMENTATION
1: 	//
1: 	////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * do a setValue on the particular field.  Doesn't do
0: 	 * checks on what it is being set to or on whether
0: 	 * it is a return parameter or what.  This is only
0: 	 * called internally; it is not expected to be called
0: 	 * directly as a result of some jdbc call (e.g. setObject()).
1: 	 *
0: 	 * @param newValue the value to set
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	void stuffObject(Object newValue) throws StandardException
1: 	{
0: 		value.setValue(newValue);
0: 		isSet = true;
1: 	}
1: 
1: 	/**
1: 	 * get string for param number
1: 	 */
1: 	String getJDBCParameterNumberStr()
1: 	{
1: 		return Integer.toString(pvs.getParameterNumber(this));
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		/* This method is used for debugging.
1: 		 * It is called when derby.language.logStatementText=true,
1: 		 * so there is no check of SanityManager.DEBUG.
1: 		 * Anyway, we need to call value.getString() instead of
1: 		 * value.toString() because the user may have done a
1: 		 * a setStream() on the parameter.  (toString() could get
1: 		 * an assertion failure in that case as it would be in an
1: 		 * unexpected state since this is a very weird codepath.)
1: 		 * getString() can throw an exception which we eat and
1: 		 * and reflect in the returned string.
1: 		 */
1: 		if (value == null)
1: 		{
1: 			return "null";
1: 		}
1: 		else
1: 		{
1: 			try
1: 			{
0: 				return value.getString();
1: 			}
1: 			catch (StandardException se)
1: 			{
0: 				return "unexpected exception from getString() - " + se;
1: 			}
1: 		}
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
0: 
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.BitDataValue;
0: import org.apache.derby.iapi.types.DateTimeDataValue;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.UserDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.*;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.reference.JDBC30Translation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.*;
0: import org.apache.derby.iapi.types.*;
0: 
0: import java.sql.Types;
0: 
0: import java.lang.reflect.Array;
0: 
0: /**
0:  * A parameter.  Originally lifted from ParameterValueSet.
0:  *
0:  * @author jamie 
0:  */
0: final class GenericParameter
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	// These defaults match the Network Server/ JCC max precision and
0: 	// The JCC "guessed" scale. They are used as the defaults for 
0: 	// Decimal out params.
0: 	private static int DECIMAL_PARAMETER_DEFAULT_PRECISION = 31;
0: 	private static int DECIMAL_PARAMETER_DEFAULT_SCALE = 15;
0: 
0: 
0: 	/*
0: 	** The parameter set we are part of
0: 	*/
0: 	private final GenericParameterValueSet		pvs;
0: 
0: 	/**
0: 	** Our value
0: 	*/
0: 	private DataValueDescriptor				value;
0: 
0: 	/**
0: 		Compile time JDBC type identifier.
0: 	*/
0: 	int								jdbcTypeId;
0: 
0: 	/**
0: 		Compile time Java class name.
0: 	*/
0: 	String							declaredClassName;
0: 
0: 	/**
0: 		Mode of the parameter, from ParameterMetaData
0: 	*/
0: 	short							parameterMode;
0: 
0: 	/*
0: 	** If we are set
0: 	*/
0: 	boolean							isSet;
0: 
0: 	/*
0: 	** Output parameter values
0:  	*/
0: 	private final boolean					isReturnOutputParameter;
0: 
0: 	/**
0: 		Type that has been registered.
0: 	*/
0: 	int	registerOutType = Types.NULL;
0: 	/**
0: 		Scale that has been registered.
0: 	*/
0: 	int registerOutScale = -1;
0: 
0: 	/**
0: 	 * When a decimal output parameter is registered we give it a 
0: 	 * precision
0: 	 */
0: 
0: 	int registerOutPrecision = -1;
0: 
0: 	/**
0: 	 * Constructor for a Parameter
0: 	 *
0: 	 * @param pvs the parameter set that this is part of
0: 	 * @param isReturnOutputParameter true if this is a return output parameter
0: 	 */
0: 	GenericParameter
0: 	(
0: 		GenericParameterValueSet	pvs,
0: 		boolean						isReturnOutputParameter
0: 	)
0: 	{
0: 		this.pvs = pvs;
0: 		parameterMode = (this.isReturnOutputParameter = isReturnOutputParameter)
0: 			? (short) JDBC30Translation.PARAMETER_MODE_OUT : (short) JDBC30Translation.PARAMETER_MODE_IN;
0: 	}
0: 
0: 	/**
0: 	 * Clone myself.  It is a shallow copy for everything but
0: 	 * the underlying data wrapper and its value -- e.g. for
0: 	 * everything but the underlying SQLInt and its int.
0: 	 *
0: 	 * @param pvs the parameter value set
0: 	 *
0: 	 * @return a new generic parameter.
0: 	 */
0: 	public GenericParameter getClone(GenericParameterValueSet pvs)
0: 	{
0: 		GenericParameter gpClone = new GenericParameter(pvs, isReturnOutputParameter);
0: 		gpClone.setStorableDataValue(this.getValue().getClone(), jdbcTypeId, declaredClassName);
0: 		gpClone.isSet = true;
0: 
0: 		return gpClone;
0: 	}
0: 
0: 	/**
0: 	 * Set the DataValueDescriptor for this parameter.  If makrAsSet
0: 	 * is set, then we consider this parameter both initialized and
0: 	 * set.  Otherwise, it is just initialized but not yet set.
0: 	 *
0: 	 * @param std the storable data value
0: 	 * @param markAsSet whether we should mark as being set or not.
0: 	 * 		The isSet() method will return this value.
0: 	 */
0: 	void setStorableDataValue(DataValueDescriptor value, int jdbcTypeId, String className)
0: 	{
0: 		this.value = value;
0: 		this.jdbcTypeId = jdbcTypeId;
0: 		this.declaredClassName = className;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Clear the parameter, unless it is a return
0: 	 * output parameter
0: 	 */
0: 	void clear()
0: 	{
0: 		isSet = false;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get the parameter value.  Doesn't check to
0: 	 * see if it has been initialized or not.
0: 	 *
0: 	 * @return the parameter value, may return null
0: 	 */
0: 	DataValueDescriptor getValue()
0: 	{
0: 		return value;
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	// CALLABLE STATEMENT
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Mark the parameter as an output parameter.
0: 	 *
0: 	 * @param sqlType	A type from java.sql.Types
0: 	 * @param scale		scale, -1 if no scale arg
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void setOutParameter(int sqlType, int scale)
0: 		throws StandardException
0: 	{
0: 		// fast case duplicate registrations.
0: 		if (registerOutType == sqlType) {
0: 			if (scale == registerOutScale)
0: 				return;
0: 		}
0: 
0: 		switch (parameterMode) {
0: 		case JDBC30Translation.PARAMETER_MODE_IN:
0: 		case JDBC30Translation.PARAMETER_MODE_UNKNOWN:
0: 		default:
0: 			throw StandardException.newException(SQLState.LANG_NOT_OUT_PARAM, getJDBCParameterNumberStr());
0: 
0: 		case JDBC30Translation.PARAMETER_MODE_IN_OUT:
0: 		case JDBC30Translation.PARAMETER_MODE_OUT:
0: 			// Declared/Java procedure parameter.
0: 			if (!DataTypeDescriptor.isJDBCTypeEquivalent(jdbcTypeId, sqlType))
0: 				throw throwInvalidOutParamMap(sqlType);
0: 			break;
0: 
0: 		}
0: 
0: 		registerOutType = sqlType;
0: 		
0: 	}
0: 
0: 	private StandardException throwInvalidOutParamMap(int sqlType) {
0: 
0: 		//TypeId typeId = TypeId.getBuiltInTypeId(sqlType);
0: 		// String sqlTypeName = typeId == null ? "OTHER" : typeId.getSQLTypeName();
0: 
0: 
0: 		String jdbcTypesName = org.apache.derby.impl.jdbc.Util.typeName(sqlType);
0: 
0: 		TypeId typeId = TypeId.getBuiltInTypeId(jdbcTypeId);
0: 		String thisTypeName = typeId == null ? declaredClassName : typeId.getSQLTypeName();
0: 				
0: 		StandardException e = StandardException.newException(SQLState.LANG_INVALID_OUT_PARAM_MAP,
0: 					getJDBCParameterNumberStr(),
0: 					jdbcTypesName, thisTypeName);
0: 
0: 		return e;
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Validate the parameters.  This is done for situations where
0: 	 * we cannot validate everything in the setXXX() calls.  In
0: 	 * particular, before we do an execute() on a CallableStatement,
0: 	 * we need to go through the parameters and make sure that
0: 	 * all parameters are set up properly.  The motivator for this
0: 	 * is that setXXX() can be called either before or after
0: 	 * registerOutputParamter(), we cannot be sure we have the types
0: 	 * correct until we get to execute().
0: 	 *
0: 	 * @exception StandardException if the parameters aren't valid
0: 	 */
0: 	void validate() throws StandardException
0: 	{
0: 		switch (parameterMode) {
0: 		case JDBC30Translation.PARAMETER_MODE_UNKNOWN:
0: 			break;
0: 		case JDBC30Translation.PARAMETER_MODE_IN:
0: 			break;
0: 		case JDBC30Translation.PARAMETER_MODE_IN_OUT:
0: 		case JDBC30Translation.PARAMETER_MODE_OUT:
0: 			if (registerOutType == Types.NULL) {
0: 				throw StandardException.newException(SQLState.NEED_TO_REGISTER_PARAM,
0: 					getJDBCParameterNumberStr(),
0: 					 org.apache.derby.catalog.types.RoutineAliasInfo.parameterMode(parameterMode));
0: 			}
0: 			break;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return the scale of the parameter.
0: 	 *
0: 	 * @return scale
0: 	 */
0: 	int getScale()
0: 	{
0: 		//when the user doesn't pass any scale, the registerOutScale gets set to -1
0: 		return (registerOutScale == -1 ? 0 : registerOutScale);
0: 	}
0: 
0: 
0: 	int getPrecision()
0: 	{
0: 		return registerOutPrecision;
0: 		
0: 	}
0: 
0: 	////////////////////////////////////////////////////
0: 	//
0: 	// CLASS IMPLEMENTATION
0: 	//
0: 	////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * do a setValue on the particular field.  Doesn't do
0: 	 * checks on what it is being set to or on whether
0: 	 * it is a return parameter or what.  This is only
0: 	 * called internally; it is not expected to be called
0: 	 * directly as a result of some jdbc call (e.g. setObject()).
0: 	 *
0: 	 * @param newValue the value to set
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void stuffObject(Object newValue) throws StandardException
0: 	{
0: 		value.setValue(newValue);
0: 		isSet = true;
0: 	}
0: 
0: 	/**
0: 	 * get string for param number
0: 	 */
0: 	String getJDBCParameterNumberStr()
0: 	{
0: 		return Integer.toString(pvs.getParameterNumber(this));
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		/* This method is used for debugging.
0: 		 * It is called when derby.language.logStatementText=true,
0: 		 * so there is no check of SanityManager.DEBUG.
0: 		 * Anyway, we need to call value.getString() instead of
0: 		 * value.toString() because the user may have done a
0: 		 * a setStream() on the parameter.  (toString() could get
0: 		 * an assertion failure in that case as it would be in an
0: 		 * unexpected state since this is a very weird codepath.)
0: 		 * getString() can throw an exception which we eat and
0: 		 * and reflect in the returned string.
0: 		 */
0: 		if (value == null)
0: 		{
0: 			return "null";
0: 		}
0: 		else
0: 		{
0: 			try
0: 			{
0: 				return value.getString();
0: 			}
0: 			catch (StandardException se)
0: 			{
0: 				return "unexpected exception from getString() - " + se;
0: 			}
0: 		}
0: 	}
0: }
============================================================================