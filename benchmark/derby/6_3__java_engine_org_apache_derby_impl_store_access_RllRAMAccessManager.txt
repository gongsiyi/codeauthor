1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.RllRAMAccessManager
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:fa09146: import org.apache.derby.iapi.services.property.PropertyUtil;
1:fa09146: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: Implements the row level locking accessmanager.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class RllRAMAccessManager extends RAMAccessManager
1:eac0369: {
1:eac0369:     private int system_lock_level = TransactionController.MODE_RECORD;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public RllRAMAccessManager()
1:eac0369:     {
1:eac0369:         super();
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /***************************************************************************
1:eac0369:     ** Concrete methods of RAMAccessManager, interfaces that control locking
1:eac0369:     ** level of the system.
1:eac0369:     ****************************************************************************
1:eac0369:     */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the locking level of the system.
1:eac0369:      * <p>
1:eac0369:      * This routine controls the lowest level of locking enabled for all locks
1:eac0369:      * for all tables accessed through this accessmanager.  The concrete 
1:eac0369:      * implementation may set this value always to table level locking for
1:eac0369:      * a client configuration, or it may set it to row level locking for a
1:eac0369:      * server configuration.
1:eac0369:      * <p>
1:eac0369:      * If TransactionController.MODE_RECORD is returned table may either be
1:eac0369:      * locked at table or row locking depending on the type of access expected
1:eac0369:      * (ie. level 3 will require table locking for heap scans.)
2:eac0369:      *
1:eac0369: 	 * @return TransactionController.MODE_TABLE if only table locking allowed,
1:eac0369:      *         else returns TransactionController.MODE_RECORD.
1:eac0369:      **/
1:eac0369:     protected int getSystemLockLevel()
1:eac0369:     {
1:eac0369:         return(system_lock_level);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Query property system to get the System lock level.
1:eac0369:      * <p>
1:eac0369:      * This routine will be called during boot after access has booted far 
1:eac0369:      * enough, to allow access to the property conglomerate.  This routine
1:eac0369:      * will call the property system and set the value to be returned by
1:eac0369:      * getSystemLockLevel().
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     protected void bootLookupSystemLockLevel(
1:eac0369:     TransactionController tc)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         // The default for this module is TransactionController.MODE_RECORD,
1:eac0369:         // only change it if the setting is different.
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (isReadOnly() || !PropertyUtil.getServiceBoolean(tc, Property.ROW_LOCKING, true)) 
1:eac0369:         {
1:eac0369:             system_lock_level = TransactionController.MODE_TABLE;
1:eac0369: 		}
1:eac0369:     }
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.store.access.TransactionController;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.RllRAMAccessManager
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.AccessFactoryGlobals;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
0: import java.util.Properties;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
1: /**
1: 
1: Implements the row level locking accessmanager.
1: 
1: **/
1: 
1: public class RllRAMAccessManager extends RAMAccessManager
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     private int system_lock_level = TransactionController.MODE_RECORD;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public RllRAMAccessManager()
1:     {
1:         super();
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /***************************************************************************
1:     ** Concrete methods of RAMAccessManager, interfaces that control locking
1:     ** level of the system.
1:     ****************************************************************************
1:     */
1: 
1:     /**
1:      * Return the locking level of the system.
1:      * <p>
1:      * This routine controls the lowest level of locking enabled for all locks
1:      * for all tables accessed through this accessmanager.  The concrete 
1:      * implementation may set this value always to table level locking for
1:      * a client configuration, or it may set it to row level locking for a
1:      * server configuration.
1:      * <p>
1:      * If TransactionController.MODE_RECORD is returned table may either be
1:      * locked at table or row locking depending on the type of access expected
1:      * (ie. level 3 will require table locking for heap scans.)
1:      *
1: 	 * @return TransactionController.MODE_TABLE if only table locking allowed,
1:      *         else returns TransactionController.MODE_RECORD.
1:      **/
1:     protected int getSystemLockLevel()
1:     {
1:         return(system_lock_level);
1:     }
1: 
1:     /**
1:      * Query property system to get the System lock level.
1:      * <p>
1:      * This routine will be called during boot after access has booted far 
1:      * enough, to allow access to the property conglomerate.  This routine
1:      * will call the property system and set the value to be returned by
1:      * getSystemLockLevel().
1:      * <p>
1:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     protected void bootLookupSystemLockLevel(
1:     TransactionController tc)
1: 		throws StandardException
1:     {
1:         // The default for this module is TransactionController.MODE_RECORD,
1:         // only change it if the setting is different.
1: 
1: 
1: 		if (isReadOnly() || !PropertyUtil.getServiceBoolean(tc, Property.ROW_LOCKING, true)) 
1:         {
1:             system_lock_level = TransactionController.MODE_TABLE;
1: 		}
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.AccessFactoryGlobals;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import java.util.Properties;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: 
0: /**
0: 
0: Implements the row level locking accessmanager.
0: 
0: **/
0: 
0: public class RllRAMAccessManager extends RAMAccessManager
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     private int system_lock_level = TransactionController.MODE_RECORD;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     public RllRAMAccessManager()
0:     {
0:         super();
0:     }
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /***************************************************************************
0:     ** Concrete methods of RAMAccessManager, interfaces that control locking
0:     ** level of the system.
0:     ****************************************************************************
0:     */
0: 
0:     /**
0:      * Return the locking level of the system.
0:      * <p>
0:      * This routine controls the lowest level of locking enabled for all locks
0:      * for all tables accessed through this accessmanager.  The concrete 
0:      * implementation may set this value always to table level locking for
0:      * a client configuration, or it may set it to row level locking for a
0:      * server configuration.
0:      * <p>
0:      * If TransactionController.MODE_RECORD is returned table may either be
0:      * locked at table or row locking depending on the type of access expected
0:      * (ie. level 3 will require table locking for heap scans.)
0:      *
0: 	 * @return TransactionController.MODE_TABLE if only table locking allowed,
0:      *         else returns TransactionController.MODE_RECORD.
0:      **/
0:     protected int getSystemLockLevel()
0:     {
0:         return(system_lock_level);
0:     }
0: 
0:     /**
0:      * Query property system to get the System lock level.
0:      * <p>
0:      * This routine will be called during boot after access has booted far 
0:      * enough, to allow access to the property conglomerate.  This routine
0:      * will call the property system and set the value to be returned by
0:      * getSystemLockLevel().
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     protected void bootLookupSystemLockLevel(
0:     TransactionController tc)
0: 		throws StandardException
0:     {
0:         // The default for this module is TransactionController.MODE_RECORD,
0:         // only change it if the setting is different.
0: 
0: 
0: 		if (isReadOnly() || !PropertyUtil.getServiceBoolean(tc, Property.ROW_LOCKING, true)) 
0:         {
0:             system_lock_level = TransactionController.MODE_TABLE;
0: 		}
0:     }
0: }
============================================================================