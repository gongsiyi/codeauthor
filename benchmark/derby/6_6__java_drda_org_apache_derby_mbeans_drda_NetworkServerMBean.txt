1:fbefd25: /*
3:fbefd25:     
1:fbefd25:    Derby - Class org.apache.derby.mbeans.drda.NetworkServerMBean
1:fbefd25: 
1:fbefd25:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fbefd25:    contributor license agreements.  See the NOTICE file distributed with
1:fbefd25:    this work for additional information regarding copyright ownership.
1:fbefd25:    The ASF licenses this file to You under the Apache License, Version 2.0
1:fbefd25:    (the "License"); you may not use this file except in compliance with
1:fbefd25:    the License.  You may obtain a copy of the License at
1:fbefd25: 
1:fbefd25:       http://www.apache.org/licenses/LICENSE-2.0
1:fbefd25: 
1:fbefd25:    Unless required by applicable law or agreed to in writing, software
1:fbefd25:    distributed under the License is distributed on an "AS IS" BASIS,
1:fbefd25:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fbefd25:    See the License for the specific language governing permissions and
1:fbefd25:    limitations under the License.
1:fbefd25: 
1:fbefd25:  */
1:fbefd25: 
1:fbefd25: package org.apache.derby.mbeans.drda;
1:fbefd25: 
2:fbefd25: /**
1:428594e:  * <p>
1:fbefd25:  * This is an MBean defining a JMX management and monitoring interface of 
1:428594e:  * Derby's Network Server.</p>
1:428594e:  * <p>
1:428594e:  * This MBean is created and registered automatically at Network Server startup
1:428594e:  * if all requirements are met (J2SE 5.0 or better).</p>
1:428594e:  * <p>
1:b7c93fa:  * Key properties for the registered MBean:</p>
1:428594e:  * <ul>
1:428594e:  * <li><code>type=NetworkServer</code></li>
1:428594e:  * <li><code>system=</code><em>runtime system identifier</em> (see 
1:428594e:  *     <a href="../package-summary.html#package_description">description of 
1:428594e:  * package org.apache.derby.mbeans</a>)</li>
1:428594e:  * </ul>
1:b7c93fa:  * <p>
1:b7c93fa:  * If a security manager is installed, accessing attributes and operations of
1:b7c93fa:  * this MBean may require a <code>SystemPermission</code>; see individual method
1:b7c93fa:  * documentation for details.</p>
1:428594e:  * <p>
1:428594e:  * For more information on Managed Beans, refer to the JMX specification.</p>
1:356ff6f:  *
1:fbefd25:  * @see org.apache.derby.drda.NetworkServerControl
1:356ff6f:  * @see org.apache.derby.security.SystemPermission
1:428594e:  * @see <a href="../package-summary.html"><code>org.apache.derby.mbeans</code></a>
1:fbefd25:  */
1:fbefd25: public interface NetworkServerMBean {
1:fbefd25:     
1:fbefd25:     // ---
1:fbefd25:     // ----------------- MBean attributes ------------------------------------
1:fbefd25:     // ---
1:fbefd25:     
1:fbefd25:     // Commented setters because:
1:fbefd25:     //   No attribute setting yet due to security concerns, see DERBY-1387.
1:fbefd25:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the network interface address on which the Network Server is 
1:428594e:      * listening. This corresponds to the value of the 
1:428594e:      * <code>derby.drda.host</code> property.</p>
1:428594e:      * <p>
1:428594e:      * For example, the value "<code>localhost</code>" means that the 
1:428594e:      * Network Server is listening on the local loopback interface only.
1:428594e:      * <p>
1:428594e:      * The special value "<code>0.0.0.0</code>" (IPv4 environments only)
1:428594e:      * represents the "unspecified address" - also known as the anylocal or 
1:428594e:      * wildcard address.  In this context this means that the server is 
1:428594e:      * listening on all network interfaces (and may thus be able to see 
1:428594e:      * connections from both the local host as well as remote hosts, depending
1:428594e:      * on which network interfaces are available).</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      * 
1:428594e:      * @return the the network interface address on which the Network Server is 
1:428594e:      *         listening (<code>derby.drda.host</code>)
1:fbefd25:      */
1:fbefd25:     public String getDrdaHost();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:11da618:      * Reports whether or not the Derby Network Server will send keep-alive 
1:428594e:      * probes and attempt to clean up connections for disconnected clients (the 
1:11da618:      * value of the {@code derby.drda.keepAlive} property).</p>
1:428594e:      * <p>
1:11da618:      * If {@code true}, a keep-alive probe is sent to the client if a "long 
1:428594e:      * time" (by default, more than two hours) passes with no other data being 
1:428594e:      * sent or received. This will detect and clean up connections for clients 
1:428594e:      * on powered-off machines or clients that have disconnected unexpectedly.
1:428594e:      * </p>
1:428594e:      * <p>
1:11da618:      * If {@code false}, Derby will not attempt to clean up connections from
1:11da618:      * disconnected clients, and will not send keep-alive probes.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:11da618:      * <p>
1:11da618:      * See also the documentation for the property {@code derby.drda.keepAlive}
1:11da618:      * in the <em>Derby Server and Administration Guide</em>, section
1:11da618:      * <em>Managing the Derby Network Server</em>, subsection <em>Setting
1:11da618:      * Network Server Properties</em>, subsubsection <em>derby.drda.keepAlive
1:11da618:      * property</em>.
1:11da618:      * </p>
1:11da618:      * @return {@code true} if Derby Network Server will send keep-alive 
1:428594e:      *         probes and attempt to clean up connections for disconnected 
1:11da618:      *         clients ({@code derby.drda.keepAlive})
1:fbefd25:      */
1:fbefd25:     public boolean getDrdaKeepAlive();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * Reports the maximum number of client connection threads the Network 
1:428594e:      * Server will allocate at any given time. This corresponds to the 
1:428594e:      * <code>derby.drda.maxThreads</code> property.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      *
1:428594e:      * @return the maximum number of client connection threads the Network 
1:428594e:      *         Server will allocate at any given time 
1:428594e:      *         (<code>derby.drda.maxThreads</code>)
1:fbefd25:      */
1:fbefd25:     public int getDrdaMaxThreads();
1:fbefd25:     //public void setDrdaMaxThreads(int max) throws Exception;
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * Gets the port number on which the Network Server is listening for client 
1:428594e:      * connections. This corresponds to the value of the 
1:428594e:      * <code>derby.drda.portNumber</code> Network Server setting.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      * 
1:fbefd25:      * @return the port number on which the Network Server is listening
1:fbefd25:      *         for client connections.
1:fbefd25:      */
1:fbefd25:     public int getDrdaPortNumber();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * The Derby security mechanism required by the Network Server for all 
1:428594e:      * client connections. This corresponds to the value of the 
1:428594e:      * <code>derby.drda.securityMechanism</code> property on the server.</p>
1:428594e:      * <p>
1:428594e:      * If not set, the empty String will be returned, which means that the 
1:428594e:      * Network Server accepts any connection which uses a valid security 
1:428594e:      * mechanism.</p>
1:428594e:      * <p>
1:428594e:      * For a list of valid security mechanisms, refer to the 
1:428594e:      * documentation for the <code>derby.drda.securityMechanism</code> property
1:428594e:      * in the <i>Derby Server and Administration Guide</i>.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      * 
1:428594e:      * @return the security mechanism required by the Network Server for all 
1:428594e:      *         client connections (<code>derby.drda.securityMechanism</code>)
1:fbefd25:      */
1:fbefd25:     public String getDrdaSecurityMechanism();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * Reports whether client connections must be encrypted using Secure 
1:428594e:      * Sockets Layer (SSL), and whether certificate based peer authentication 
1:428594e:      * is enabled. Refers to the <code>derby.drda.sslMode</code> property.</p>
1:428594e:      * <p>
1:428594e:      * Peer authentication means that the other side of the SSL connection is 
1:428594e:      * authenticated based on a trusted certificate installed locally.</p>
1:428594e:      * <p>
1:428594e:      * The value returned is one of "<code>off</code>" (no SSL encryption), 
1:428594e:      * "<code>basic</code>" (SSL encryption, no peer authentication) and 
1:428594e:      * "<code>peerAuthentication</code>" (SSL encryption and peer
1:428594e:      * authentication). Refer to the <i>Derby Server and Administration 
1:428594e:      * Guide</i> for more details.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      * 
1:428594e:      * @return whether client connections must be encrypted using Secure 
1:428594e:      *         Sockets Layer (SSL), and whether certificate based peer 
1:428594e:      *         authentication is enabled (<code>derby.drda.sslMode</code>)
1:fbefd25:      */
1:fbefd25:     public String getDrdaSslMode();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * The size of the buffer used for streaming BLOB and CLOB from server to 
1:428594e:      * client. Refers to the <code>derby.drda.streamOutBufferSize</code> 
1:428594e:      * property.</p>
1:428594e:      * <p>
1:428594e:      * This setting may improve streaming performance when the default sizes of 
1:428594e:      * packets being sent are significantly smaller than the maximum allowed 
1:428594e:      * packet size in the network.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      * 
1:fbefd25:      * @return the size of the buffer used for streaming blob/clob from server 
1:428594e:      *         to client (<code>derby.drda.streamOutBufferSize</code>)
1:fbefd25:      */
1:b7c93fa:     public int getDrdaStreamOutBufferSize();
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * If the server property <code>derby.drda.maxThreads</code> is set to a 
1:428594e:      * non-zero value, this is the number of milliseconds that each client 
1:428594e:      * connection will actively use in the Network Server before yielding to 
1:428594e:      * another connection. If this value is 0, a waiting connection will become
1:428594e:      * active once a currently active connection is closed.</p>
1:428594e:      * <p>
1:428594e:      * Refers to the <code>derby.drda.timeSlice</code> server property.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      *
1:428594e:      * @return the number of milliseconds that each client connection will 
1:428594e:      *         actively use in the Network Server before yielding to 
1:428594e:      *         another connection (<code>derby.drda.timeSlice</code>)
1:428594e:      * @see #getDrdaMaxThreads()
1:fbefd25:      */
1:fbefd25:     public int getDrdaTimeSlice();
1:fbefd25:     //public void setDrdaTimeSlice(int timeSlice) throws Exception;
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * Whether server-side tracing is enabled for all client connections 
1:428594e:      * (sessions). Refers to the <code>derby.drda.traceAll</code> server 
1:428594e:      * property.</p>
1:428594e:      * <p>
1:428594e:      * Tracing may for example be useful when providing technical support 
1:428594e:      * information. The Network Server also supports tracing for individual
1:428594e:      * connections (sessions), see the <i>Derby Server and Administration 
1:428594e:      * Guide</i> ("Controlling tracing by using the trace facility") for 
1:428594e:      * details.</p>
1:428594e:      * <p>
1:428594e:      * When tracing is enabled, tracing information from each client 
1:428594e:      * connection will be written to a separate trace file.
1:428594e:      * </p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:356ff6f:      *
1:428594e:      * @return whether tracing for all client connections is enabled
1:428594e:      *         (<code>derby.drda.traceAll</code>)
1:428594e:      * @see #getDrdaTraceDirectory()
1:fbefd25:      */
1:fbefd25:     public boolean getDrdaTraceAll();
1:fbefd25:     //public void setDrdaTraceAll(boolean on) throws Exception;
1:fbefd25:     
1:fbefd25:     /**
1:428594e:      * <p>
1:428594e:      * Indicates the location of tracing files on the server host, if server
1:428594e:      * tracing has been enabled.</p>
1:428594e:      * <p>
1:428594e:      * If the server setting <code>derby.drda.traceDirectory</code> is set,
1:428594e:      * its value will be returned. Otherwise, the Network Server's default 
1:428594e:      * values will be taken into account when producing the result.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:428594e:      * manager is installed.</p>
2:356ff6f:      *
1:428594e:      * @return the potential location of tracing files on the server host
1:428594e:      * @see #getDrdaTraceAll()
1:fbefd25:      */
1:fbefd25:     public String getDrdaTraceDirectory();
1:fbefd25:     //public void setDrdaTraceDirectory(String dir) throws Exception;
1:428594e:     
1:e3972b6:     /**
1:428594e:      * <p>
1:428594e:      * Gets the total number of current connections (waiting or active) to the
1:428594e:      * Network Server.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the number of current connections
1:428594e:      * @see #getActiveConnectionCount()
1:428594e:      * @see #getWaitingConnectionCount()
1:e3972b6:      */
1:e3972b6:     public int getConnectionCount();
1:1ab256e: 
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the number of currently active connections. All connections are 
1:428594e:      * active if the DrdaMaxThreads attribute (<code>derby.drda.maxThreads</code> 
1:428594e:      * property) is 0.</p>
1:e3972b6:      * <p>
1:dbed020:      * If DrdaMaxThreads is &gt; 0 and DrdaTimeSlice is 0, connections remain 
1:428594e:      * active until they are closed. If there are more than DrdaMaxThreads 
1:428594e:      * connections, inactive connections will be waiting for some active 
1:428594e:      * connection to close. The connection request will return when the 
1:428594e:      * connection becomes active.</p>
1:428594e:      * <p>
1:dbed020:      * If DrdaMaxThreads is &gt; 0 and DrdaTimeSlice &gt; 0, connections will be 
1:428594e:      * alternating beetween active and waiting according to Derby's time 
1:428594e:      * slicing algorithm.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the number of active connections
1:428594e:      * @see #getDrdaMaxThreads()
1:428594e:      * @see #getDrdaTimeSlice()
1:428594e:      * @see #getWaitingConnectionCount()
1:1ab256e:      */
1:e3972b6:     public int getActiveConnectionCount();
1:1ab256e:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the number of currently waiting connections. This number will always
1:428594e:      * be 0 if DrdaMaxThreads is 0. Otherwise, if the total number of 
1:428594e:      * connections is less than or equal to DrdaMaxThreads, then no connections
1:428594e:      * are waiting.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the number of waiting connections
1:428594e:      * @see #getActiveConnectionCount()
1:428594e:      * @see #getDrdaMaxThreads()
1:428594e:      * @see #getDrdaTimeSlice()
1:1ab256e:      */
1:e3972b6:     public int getWaitingConnectionCount();
1:1ab256e:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Get the size of the connection thread pool. If DrdaMaxThreads 
1:428594e:      * (<code>derby.drda.maxThreads</code>) is set to a non-zero value, the size
1:428594e:      * of the thread pool will not exceed this value.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the size of the Network Server's connection thread pool
1:428594e:      * @see #getDrdaMaxThreads()
1:1ab256e:      */
1:357ad1c:     public int getConnectionThreadPoolSize();
1:1ab256e:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the accumulated number of connections. This includes all active and
1:428594e:      * waiting connections since the Network Server was started. This number
1:428594e:      * will not decrease as long as the Network Server is running.</p>
1:428594e:      * <p>
1:356ff6f:      * Require <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the accumulated number of connections made since server startup
1:1ab256e:      */
1:e3972b6:     public int getAccumulatedConnectionCount();
1:1ab256e:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the total number of bytes read by the server since it was started.
1:428594e:      * </p>
1:428594e:      * <p>
1:356ff6f:      * Require <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the total number of bytes received by the server
1:1ab256e:      */
1:1ab256e:     public long getBytesReceived();
1:1ab256e:     
1:428594e:     /**
1:428594e:      * <p> 
1:428594e:      * Gets the total number of bytes written by the server since it was 
1:428594e:      * started.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the total number of bytes sent by the server
1:1ab256e:      */
1:1ab256e:     public long getBytesSent();
1:1ab256e:     
1:1ab256e:     /**
1:428594e:      * <p>
1:428594e:      * Gets the number of bytes received per second by the Network 
1:428594e:      * Server. This number is calculated by taking into account the number of
1:428594e:      * bytes received since the last calculation (or since MBean startup if
1:428594e:      * it is the first time this attibute is being read).</p>
1:428594e:      * <p>
1:428594e:      * The shortest interval measured is 1 second. This means that a new value
1:428594e:      * will not be calculated unless there has been at least 1 second since the
1:428594e:      * last calculation.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the number of bytes received per second
1:1ab256e:      */
1:1ab256e:     public int getBytesReceivedPerSecond();
1:1ab256e:     
1:1ab256e:      /**
1:428594e:      * <p>
1:428594e:      * Gets the number of bytes sent per second by the Network Server. 
1:428594e:      * This number is calculated by taking into account the number of
1:428594e:      * bytes sent since the last calculation (or since MBean startup if
1:428594e:      * it is the first time this attibute is being read).</p>
1:428594e:      * <p> 
1:428594e:      * The shortest interval measured is 1 second. This means that a new value
1:428594e:      * will not be calculated unless there has been at least 1 second since the
1:428594e:      * last calculation.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the number of bytes sent per millisecond
1:1ab256e:      */
1:1ab256e:     public int getBytesSentPerSecond();
1:1ab256e:     
1:d72e3be:     /**
1:428594e:      * <p>
1:428594e:      * Gets the start time of the network server. The time is reported as
1:428594e:      * the number of milliseconds (ms) since Unix epoch (1970-01-01 00:00:00 
1:428594e:      * UTC), and corresponds to the value of 
1:428594e:      * <code>java.lang.System#currentTimeMillis()</code> at the time the
1:428594e:      * Network Server was started.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the difference, measured in milliseconds, between the time the
1:428594e:      *         Network Server was started and Unix epoch (1970-01-01T00:00:00Z)
1:428594e:      * @see java.lang.System#currentTimeMillis()
1:d72e3be:      */
1:d72e3be:     public long getStartTime();
1:1ab256e:     
1:d72e3be:     /**
1:428594e:      * <p>
1:428594e:      * Gets the time (in milliseconds) the Network Server has been running. In
1:428594e:      * other words, the time passed since the server was started.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:428594e:      * @return the difference, measured in milliseconds, between the current 
1:428594e:      *         time and the time the Network Server was started
1:428594e:      * @see #getStartTime()
1:d72e3be:      */
1:d72e3be:     public long getUptime(); 
1:1ab256e:     
1:d72e3be:     
1:d72e3be:     
1:fbefd25:     // ---
1:fbefd25:     // ----------------- MBean operations ------------------------------------
1:fbefd25:     // ---
1:fbefd25: 
1:fbefd25:     /**
1:e3972b6:      * <p>
1:fbefd25:      * Executes the network server's <code>ping</code> command.
1:428594e:      * Returns without errors if the server was successfully pinged.</p>
1:428594e:      * <p>
1:428594e:      * Note that the <code>ping</code> command itself will be executed from the 
1:428594e:      * network server instance that is actually running the server, and that the 
1:428594e:      * result will be transferred via JMX to the JMX client invoking this
1:428594e:      * operation. 
1:428594e:      * This means that this operation will test network server connectivity 
1:428594e:      * from the same host (machine) as the network server, as opposed to when 
1:428594e:      * the <code>ping</code> command (or method) of 
1:428594e:      * <code>NetworkServerControl</code> is executed from a remote machine.</p>
1:428594e:      * <p>
1:428594e:      * This operation requires the following permission to be granted to
1:428594e:      * the network server code base if a Java security manager is installed
1:428594e:      * in the server JVM:</p>
1:428594e:      * <codeblock>
1:428594e:      *   <code>
1:428594e:      *     permission java.net.SocketPermission "*", "connect,resolve";
1:428594e:      *   </code>
1:428594e:      * </codeblock>
1:428594e:      * <p>The value <code>"*"</code> will allow connections from the network 
1:428594e:      * server to any host and any port, and may be replaced with a more specific
1:428594e:      * value if so desired. The required value will depend on the value of the
1:428594e:      * <code>-h</code> (or <code>derby.drda.host</code>) (host) and 
1:428594e:      * <code>-p</code> (or <code>derby.drda.portNumber</code>) (port) settings
1:80c2e10:      * of the Network Server.</p>
1:428594e:      * <p>
1:428594e:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:428594e:      * manager is installed.</p>
1:428594e:      * 
1:fbefd25:      * @throws java.lang.Exception if the ping attempt fails (an indication that
1:fbefd25:      *         the network server is not running properly)
1:428594e:      * @see org.apache.derby.drda.NetworkServerControl#ping()
1:428594e:      * @see java.net.SocketPermission
1:fbefd25:      */
1:fbefd25:     public void ping() throws Exception;
1:fbefd25:     
1:fbefd25:     // No other management operations yet due to security concerns, see 
1:fbefd25:     // DERBY-1387 for details.
1:fbefd25:     
1:fbefd25: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * If DrdaMaxThreads is &gt; 0 and DrdaTimeSlice is 0, connections remain 
1:      * If DrdaMaxThreads is &gt; 0 and DrdaTimeSlice &gt; 0, connections will be 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:11da618
/////////////////////////////////////////////////////////////////////////
1:      * Reports whether or not the Derby Network Server will send keep-alive 
1:      * value of the {@code derby.drda.keepAlive} property).</p>
1:      * If {@code true}, a keep-alive probe is sent to the client if a "long 
1:      * If {@code false}, Derby will not attempt to clean up connections from
1:      * disconnected clients, and will not send keep-alive probes.</p>
1:      * <p>
1:      * See also the documentation for the property {@code derby.drda.keepAlive}
1:      * in the <em>Derby Server and Administration Guide</em>, section
1:      * <em>Managing the Derby Network Server</em>, subsection <em>Setting
1:      * Network Server Properties</em>, subsubsection <em>derby.drda.keepAlive
1:      * property</em>.
1:      * </p>
1:      * @return {@code true} if Derby Network Server will send keep-alive 
1:      *         clients ({@code derby.drda.keepAlive})
author:John Herman Embretsen
-------------------------------------------------------------------------------
commit:80c2e10
/////////////////////////////////////////////////////////////////////////
1:      * of the Network Server.</p>
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b7c93fa
/////////////////////////////////////////////////////////////////////////
1:  * Key properties for the registered MBean:</p>
1:  * <p>
1:  * If a security manager is installed, accessing attributes and operations of
1:  * this MBean may require a <code>SystemPermission</code>; see individual method
1:  * documentation for details.</p>
/////////////////////////////////////////////////////////////////////////
1:     public int getDrdaStreamOutBufferSize();
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:428594e
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * Derby's Network Server.</p>
1:  * <p>
1:  * This MBean is created and registered automatically at Network Server startup
1:  * if all requirements are met (J2SE 5.0 or better).</p>
1:  * <p>
0:  * Key properties for the registered MBean:
1:  * <ul>
1:  * <li><code>type=NetworkServer</code></li>
1:  * <li><code>system=</code><em>runtime system identifier</em> (see 
1:  *     <a href="../package-summary.html#package_description">description of 
1:  * package org.apache.derby.mbeans</a>)</li>
1:  * </ul>
1:  * <p>
1:  * For more information on Managed Beans, refer to the JMX specification.</p>
1:  * @see <a href="../package-summary.html"><code>org.apache.derby.mbeans</code></a>
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Gets the network interface address on which the Network Server is 
1:      * listening. This corresponds to the value of the 
1:      * <code>derby.drda.host</code> property.</p>
1:      * <p>
1:      * For example, the value "<code>localhost</code>" means that the 
1:      * Network Server is listening on the local loopback interface only.
1:      * <p>
1:      * The special value "<code>0.0.0.0</code>" (IPv4 environments only)
1:      * represents the "unspecified address" - also known as the anylocal or 
1:      * wildcard address.  In this context this means that the server is 
1:      * listening on all network interfaces (and may thus be able to see 
1:      * connections from both the local host as well as remote hosts, depending
1:      * on which network interfaces are available).</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:      * manager is installed.</p>
1:      * @return the the network interface address on which the Network Server is 
1:      *         listening (<code>derby.drda.host</code>)
1:      * <p>
0:      * Reports whether or not the Derby Network Server will send keepalive 
1:      * probes and attempt to clean up connections for disconnected clients (the 
0:      * value of the <code>derby.drda.keepAlive</code> property).</p>
1:      * <p>
0:      * If <code>true</code>, a keepalive probe is sent to the client if a "long 
1:      * time" (by default, more than two hours) passes with no other data being 
1:      * sent or received. This will detect and clean up connections for clients 
1:      * on powered-off machines or clients that have disconnected unexpectedly.
1:      * </p>
1:      * <p>
0:      * If false, Derby will not attempt to clean up connections from
0:      * disconnected clients, and will not send keepalive probes.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
0:      * @return whether or not the Derby Network Server will send keepalive 
1:      *         probes and attempt to clean up connections for disconnected 
0:      *         clients (<code>derby.drda.keepAlive</code>)
1:      * <p>
1:      * Reports the maximum number of client connection threads the Network 
1:      * Server will allocate at any given time. This corresponds to the 
1:      * <code>derby.drda.maxThreads</code> property.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * @return the maximum number of client connection threads the Network 
1:      *         Server will allocate at any given time 
1:      *         (<code>derby.drda.maxThreads</code>)
1:      * <p>
1:      * Gets the port number on which the Network Server is listening for client 
1:      * connections. This corresponds to the value of the 
1:      * <code>derby.drda.portNumber</code> Network Server setting.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:      * manager is installed.</p>
1:      * <p>
1:      * The Derby security mechanism required by the Network Server for all 
1:      * client connections. This corresponds to the value of the 
1:      * <code>derby.drda.securityMechanism</code> property on the server.</p>
1:      * <p>
1:      * If not set, the empty String will be returned, which means that the 
1:      * Network Server accepts any connection which uses a valid security 
1:      * mechanism.</p>
1:      * <p>
1:      * For a list of valid security mechanisms, refer to the 
1:      * documentation for the <code>derby.drda.securityMechanism</code> property
1:      * in the <i>Derby Server and Administration Guide</i>.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:      * manager is installed.</p>
1:      * @return the security mechanism required by the Network Server for all 
1:      *         client connections (<code>derby.drda.securityMechanism</code>)
1:      * <p>
1:      * Reports whether client connections must be encrypted using Secure 
1:      * Sockets Layer (SSL), and whether certificate based peer authentication 
1:      * is enabled. Refers to the <code>derby.drda.sslMode</code> property.</p>
1:      * <p>
1:      * Peer authentication means that the other side of the SSL connection is 
1:      * authenticated based on a trusted certificate installed locally.</p>
1:      * <p>
1:      * The value returned is one of "<code>off</code>" (no SSL encryption), 
1:      * "<code>basic</code>" (SSL encryption, no peer authentication) and 
1:      * "<code>peerAuthentication</code>" (SSL encryption and peer
1:      * authentication). Refer to the <i>Derby Server and Administration 
1:      * Guide</i> for more details.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:      * manager is installed.</p>
1:      * @return whether client connections must be encrypted using Secure 
1:      *         Sockets Layer (SSL), and whether certificate based peer 
1:      *         authentication is enabled (<code>derby.drda.sslMode</code>)
1:      * <p>
1:      * The size of the buffer used for streaming BLOB and CLOB from server to 
1:      * client. Refers to the <code>derby.drda.streamOutBufferSize</code> 
1:      * property.</p>
1:      * <p>
1:      * This setting may improve streaming performance when the default sizes of 
1:      * packets being sent are significantly smaller than the maximum allowed 
1:      * packet size in the network.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      *         to client (<code>derby.drda.streamOutBufferSize</code>)
1:      * <p>
1:      * If the server property <code>derby.drda.maxThreads</code> is set to a 
1:      * non-zero value, this is the number of milliseconds that each client 
1:      * connection will actively use in the Network Server before yielding to 
1:      * another connection. If this value is 0, a waiting connection will become
1:      * active once a currently active connection is closed.</p>
1:      * <p>
1:      * Refers to the <code>derby.drda.timeSlice</code> server property.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * @return the number of milliseconds that each client connection will 
1:      *         actively use in the Network Server before yielding to 
1:      *         another connection (<code>derby.drda.timeSlice</code>)
1:      * @see #getDrdaMaxThreads()
1:      * <p>
1:      * Whether server-side tracing is enabled for all client connections 
1:      * (sessions). Refers to the <code>derby.drda.traceAll</code> server 
1:      * property.</p>
1:      * <p>
1:      * Tracing may for example be useful when providing technical support 
1:      * information. The Network Server also supports tracing for individual
1:      * connections (sessions), see the <i>Derby Server and Administration 
1:      * Guide</i> ("Controlling tracing by using the trace facility") for 
1:      * details.</p>
1:      * <p>
1:      * When tracing is enabled, tracing information from each client 
1:      * connection will be written to a separate trace file.
1:      * </p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * @return whether tracing for all client connections is enabled
1:      *         (<code>derby.drda.traceAll</code>)
1:      * @see #getDrdaTraceDirectory()
1:      * <p>
1:      * Indicates the location of tracing files on the server host, if server
1:      * tracing has been enabled.</p>
1:      * <p>
1:      * If the server setting <code>derby.drda.traceDirectory</code> is set,
1:      * its value will be returned. Otherwise, the Network Server's default 
1:      * values will be taken into account when producing the result.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "control")</code> if a security
1:      * manager is installed.</p>
1:      * @return the potential location of tracing files on the server host
1:      * @see #getDrdaTraceAll()
1:     
1:      * <p>
1:      * Gets the total number of current connections (waiting or active) to the
1:      * Network Server.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the number of current connections
1:      * @see #getActiveConnectionCount()
1:      * @see #getWaitingConnectionCount()
1:      * Gets the number of currently active connections. All connections are 
1:      * active if the DrdaMaxThreads attribute (<code>derby.drda.maxThreads</code> 
1:      * property) is 0.</p>
0:      * If DrdaMaxThreads is > 0 and DrdaTimeSlice is 0, connections remain 
1:      * active until they are closed. If there are more than DrdaMaxThreads 
1:      * connections, inactive connections will be waiting for some active 
1:      * connection to close. The connection request will return when the 
1:      * connection becomes active.</p>
1:      * <p>
0:      * If DrdaMaxThreads is > 0 and DrdaTimeSlice > 0, connections will be 
1:      * alternating beetween active and waiting according to Derby's time 
1:      * slicing algorithm.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the number of active connections
1:      * @see #getDrdaMaxThreads()
1:      * @see #getDrdaTimeSlice()
1:      * @see #getWaitingConnectionCount()
1:      * <p>
1:      * Gets the number of currently waiting connections. This number will always
1:      * be 0 if DrdaMaxThreads is 0. Otherwise, if the total number of 
1:      * connections is less than or equal to DrdaMaxThreads, then no connections
1:      * are waiting.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the number of waiting connections
1:      * @see #getActiveConnectionCount()
1:      * @see #getDrdaMaxThreads()
1:      * @see #getDrdaTimeSlice()
1:      * <p>
1:      * Get the size of the connection thread pool. If DrdaMaxThreads 
1:      * (<code>derby.drda.maxThreads</code>) is set to a non-zero value, the size
1:      * of the thread pool will not exceed this value.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the size of the Network Server's connection thread pool
1:      * @see #getDrdaMaxThreads()
1:      * <p>
1:      * Gets the accumulated number of connections. This includes all active and
1:      * waiting connections since the Network Server was started. This number
1:      * will not decrease as long as the Network Server is running.</p>
1:      * <p>
1:      * manager is installed.</p>
1:      * 
1:      * @return the accumulated number of connections made since server startup
1:      * <p>
1:      * Gets the total number of bytes read by the server since it was started.
1:      * </p>
1:      * <p>
1:      * manager is installed.</p>
1:      * 
1:      * @return the total number of bytes received by the server
1:     /**
1:      * <p> 
1:      * Gets the total number of bytes written by the server since it was 
1:      * started.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the total number of bytes sent by the server
1:      * <p>
1:      * Gets the number of bytes received per second by the Network 
1:      * Server. This number is calculated by taking into account the number of
1:      * bytes received since the last calculation (or since MBean startup if
1:      * it is the first time this attibute is being read).</p>
1:      * <p>
1:      * The shortest interval measured is 1 second. This means that a new value
1:      * will not be calculated unless there has been at least 1 second since the
1:      * last calculation.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the number of bytes received per second
1:      * <p>
1:      * Gets the number of bytes sent per second by the Network Server. 
1:      * This number is calculated by taking into account the number of
1:      * bytes sent since the last calculation (or since MBean startup if
1:      * it is the first time this attibute is being read).</p>
1:      * <p> 
1:      * The shortest interval measured is 1 second. This means that a new value
1:      * will not be calculated unless there has been at least 1 second since the
1:      * last calculation.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the number of bytes sent per millisecond
1:      * <p>
1:      * Gets the start time of the network server. The time is reported as
1:      * the number of milliseconds (ms) since Unix epoch (1970-01-01 00:00:00 
1:      * UTC), and corresponds to the value of 
1:      * <code>java.lang.System#currentTimeMillis()</code> at the time the
1:      * Network Server was started.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the difference, measured in milliseconds, between the time the
1:      *         Network Server was started and Unix epoch (1970-01-01T00:00:00Z)
1:      * @see java.lang.System#currentTimeMillis()
1:      * <p>
1:      * Gets the time (in milliseconds) the Network Server has been running. In
1:      * other words, the time passed since the server was started.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @return the difference, measured in milliseconds, between the current 
1:      *         time and the time the Network Server was started
1:      * @see #getStartTime()
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Returns without errors if the server was successfully pinged.</p>
1:      * <p>
1:      * Note that the <code>ping</code> command itself will be executed from the 
1:      * network server instance that is actually running the server, and that the 
1:      * result will be transferred via JMX to the JMX client invoking this
1:      * operation. 
1:      * This means that this operation will test network server connectivity 
1:      * from the same host (machine) as the network server, as opposed to when 
1:      * the <code>ping</code> command (or method) of 
1:      * <code>NetworkServerControl</code> is executed from a remote machine.</p>
1:      * <p>
1:      * This operation requires the following permission to be granted to
1:      * the network server code base if a Java security manager is installed
1:      * in the server JVM:</p>
1:      * <codeblock>
1:      *   <code>
1:      *     permission java.net.SocketPermission "*", "connect,resolve";
1:      *   </code>
1:      * </codeblock>
1:      * <p>The value <code>"*"</code> will allow connections from the network 
1:      * server to any host and any port, and may be replaced with a more specific
1:      * value if so desired. The required value will depend on the value of the
1:      * <code>-h</code> (or <code>derby.drda.host</code>) (host) and 
1:      * <code>-p</code> (or <code>derby.drda.portNumber</code>) (port) settings
0:      * of the Netowrk Server.</p>
1:      * <p>
1:      * Requires <code>SystemPermission("server", "monitor")</code> if a security
1:      * manager is installed.</p>
1:      * 
1:      * @see org.apache.derby.drda.NetworkServerControl#ping()
1:      * @see java.net.SocketPermission
commit:e3972b6
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Get the number of connections.
0:      * @return number of connections.
1:      */
1:     public int getConnectionCount();
0:      * Get the number of active connections. All connections are active if drdaMaxThreads is 0.
1:      * <p>
0:      * If drdaMaxThreads is > 0 and drdaTimeSlice is 0, connections remain active until they are
0:      * closed. If there are more than drdaMaxThreads connections, connections will be waiting for some 
0:      * connection to close and the call to getConnection will return when the connection becomes active.
1:      * <p>
0:      * If drdaMaxThreads is > 0 and drdaTimeSlice > 0, connections will be alternating beetween active 
0:      * and waiting according to Derby's time slicing algorithm.
0:      * @return number of active connections
1:     public int getActiveConnectionCount();
0:      * get the number of waiting connections. Always 0 if drdaMaxThreads is 0. 
0:      * @return number of waiting connections
0:      * @see NetworkServerMBean#getActiveConnectionCount
1:     public int getWaitingConnectionCount();
/////////////////////////////////////////////////////////////////////////
1:     public int getAccumulatedConnectionCount();
commit:357ad1c
/////////////////////////////////////////////////////////////////////////
0:     public int getActiveConnections();
0:     public int getWaitingConnections();
1:     public int getConnectionThreadPoolSize();
0:     public int getConnectionCounter();
commit:1ab256e
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Get the number of active sessions
0:      * @return number of active sessions
1:      */
0:     public int getActiveSessions();
1:     
1:     /**
0:      * get the number of waiting sessions. Always 0 if drdaMaxThreads is 0.
0:      * @return number of waiting sessions
1:      */
0:     public int getWaitingSessions();
1:     
1:     /**
0:      * Get the size of the thread pool.
0:      * @return size of thread pool
1:      */
0:     public int getConnectionThreads();
1:     
1:     /**
0:      * Get the accumulated number of connections.
0:      * @return number of connections.
1:      */
0:     public int getNumberOfConnections();
1:     
1:     /**
0:      * Get the total number of bytes read
0:      * @return number of bytes
1:      */
1:     public long getBytesReceived();
1:     
1:     /** 
0:      * Get the total number of bytes written.
0:      * @return number of bytes
1:      */
1:     public long getBytesSent();
1:     
1:     /**
0:      * Get the number of bytes received pr second. 
0:      * Shortest interval measured is 1 second.
0:      * @return bytes per millisecond
1:      */
1:     
1:     public int getBytesReceivedPerSecond();
1:     
1:      /**
0:      * Get the number of bytes sent pr second. 
0:      * Shortest interval measured is 1 second.
0:      * @return bytes per millisecond
1:      */
1:     
1:     public int getBytesSentPerSecond();
1:     
1:     
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:356ff6f
/////////////////////////////////////////////////////////////////////////
1:  * @see org.apache.derby.security.SystemPermission
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "control")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
1:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
1:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "control")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "control")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "control")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "control")</code> if a security
0:      * manager is installed.
1:      *
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * <P>
0:      * Require <code>SystemPermission("server", "monitor")</code> if a security
0:      * manager is installed.
0:      *
commit:d72e3be
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Return the start time of the network server.
0:      * @return Time in milli-seconds since the epoch that the network server started.
0:      * @see System#currentTimeMillis()
1:      */
1:     public long getStartTime();
1:     
1:     /**
0:      * Return the time the network server has been running.
0:      * @return Time in milli-seconds the server has been running.
1:      */
1:     public long getUptime(); 
1:     
commit:1507da7
commit:fbefd25
/////////////////////////////////////////////////////////////////////////
1: /*
1:     
1:    Derby - Class org.apache.derby.mbeans.drda.NetworkServerMBean
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.mbeans.drda;
1: 
1: /**
1:  * This is an MBean defining a JMX management and monitoring interface of 
0:  * Derby's Network Server.
0:  * This interface consists of getter and setter methods for attributes that may
0:  * be read and/or modified, and methods representing operations that can be 
0:  * invoked.
0:  * 
0:  * For more information on Managed Beans, refer to the JMX specification.
0:  *
1:  * @see org.apache.derby.drda.NetworkServerControl
0:  *
1:  */
1: public interface NetworkServerMBean {
1:     
1:     // ---
1:     // ----------------- MBean attributes ------------------------------------
1:     // ---
1:     
1:     // Commented setters because:
1:     //   No attribute setting yet due to security concerns, see DERBY-1387.
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.host</code> network server
0:      * setting. In this context, the host defines the network interface on which
0:      * the Network Server is listening for connections. "<code>0.0.0.0</code>" 
0:      * means that the server allows connections from any host on the network.
0:      * 
0:      * @return the value of <code>derby.drda.host</code>
1:      */
1:     public String getDrdaHost();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.keepAlive</code> network server
0:      * setting. 
0:      * 
0:      * @see <a href="http://db.apache.org/derby/docs/dev/adminguide/radmindrdakeepalive.html"><code>derby.drda.keepAlive</code> documentation</a>
0:      * @return the value of <code>derby.drda.keepAlive</code>
1:      */
1:     public boolean getDrdaKeepAlive();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.maxThreads</code> network server 
0:      * setting.
0:      * @return the value of the <code>derby.drda.maxThreads</code> network 
0:      *         server setting
1:      */
1:     public int getDrdaMaxThreads();
1:     //public void setDrdaMaxThreads(int max) throws Exception;
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.portNumber</code> network server
0:      * setting. This is the port number on which the Network Server is listening
0:      * for client connections.
0:      * 
1:      * @return the port number on which the Network Server is listening
1:      *         for client connections.
1:      */
1:     public int getDrdaPortNumber();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.securityMechanism</code> network 
0:      * server setting. 
0:      * 
0:      * @return the value of the <code>derby.drda.securityMechanism</code> 
0:      *         network server setting.
1:      */
1:     public String getDrdaSecurityMechanism();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.sslMode</code> network server 
0:      * setting. 
0:      * 
0:      * @return the value of the <code>derby.drda.sslMode</code> network server 
0:      *         setting.
1:      */
1:     public String getDrdaSslMode();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.streamOutBufferSize</code> network
0:      * server setting.
0:      * This setting is used to configure the size of the buffer used for 
0:      * streaming blob/clob from server to client.
0:      * 
1:      * @return the size of the buffer used for streaming blob/clob from server 
0:      *         to client
1:      */
0:     public String getDrdaStreamOutBufferSize();
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.timeSlice</code> network server 
0:      * setting.
0:      * @return the value of the <code>derby.drda.timeSlice</code> network 
0:      *         server setting
1:      */
1:     public int getDrdaTimeSlice();
1:     //public void setDrdaTimeSlice(int timeSlice) throws Exception;
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.traceAll</code> network server 
0:      * setting.
0:      * @return the value of the <code>derby.drda.traceAll</code> network 
0:      *         server setting
1:      */
1:     public boolean getDrdaTraceAll();
1:     //public void setDrdaTraceAll(boolean on) throws Exception;
1:     
1:     /**
0:      * Gets the value of the <code>derby.drda.traceDirectory</code> network 
0:      * server setting. If this setting has not been explicitly set by the
0:      * network server administrator, the default value is returned.
0:      * @return the value of the <code>derby.drda.timeSlice</code> network 
0:      *         server setting
1:      */
1:     public String getDrdaTraceDirectory();
1:     //public void setDrdaTraceDirectory(String dir) throws Exception;
1: 
1:     
1:     // ---
1:     // ----------------- MBean operations ------------------------------------
1:     // ---
1: 
1:     /**
1:      * Executes the network server's <code>ping</code> command.
0:      * Returns without errors if the server was successfully pinged.
1:      * @throws java.lang.Exception if the ping attempt fails (an indication that
1:      *         the network server is not running properly)
1:      */
1:     public void ping() throws Exception;
1:     
1:     // No other management operations yet due to security concerns, see 
1:     // DERBY-1387 for details.
1:     
1: }
============================================================================