1:fd46794: /*
33:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:7dd08d1: import java.sql.Types;
1:7dd08d1: 
1:6fbf669: import org.apache.derby.catalog.UUID;
1:6fbf669: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:6fbf669: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:6fbf669: import org.apache.derby.iapi.types.DataValueDescriptor;
1:6fbf669: import org.apache.derby.iapi.types.DataValueFactory;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:4309044: import org.apache.derby.iapi.types.SQLInteger;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:09bee7d: import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSCONTRAINTS row.
7:eac0369:  *
4:eac0369:  */
1:345de35: 
1:eac0369: public class SYSCONSTRAINTSRowFactory extends CatalogRowFactory
4:eac0369: {
1:eac0369: 	private static final String		TABLENAME_STRING = "SYSCONSTRAINTS";
1:345de35: 
1:eac0369: 	protected static final int		SYSCONSTRAINTS_COLUMN_COUNT = 7;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTID = 1;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_TABLEID = 2;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTNAME = 3;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_TYPE = 4;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_SCHEMAID = 5;
1:09bee7d:     public static final int     SYSCONSTRAINTS_STATE = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_REFERENCECOUNT = 7;
1:eac0369: 
1:eac0369: 	protected static final int		SYSCONSTRAINTS_INDEX1_ID = 0;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_INDEX2_ID = 1;
1:eac0369: 	protected static final int		SYSCONSTRAINTS_INDEX3_ID = 2;
1:eac0369: 
1:eac0369:     private	static	final	boolean[]	uniqueness = {
1:eac0369: 		                                               true,
1:eac0369: 													   true,
1:eac0369: 													   false
2:eac0369: 	                                                 };
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSCONSTRAINTS_CONSTRAINTID},
1:eac0369: 		{SYSCONSTRAINTS_CONSTRAINTNAME, SYSCONSTRAINTS_SCHEMAID},
1:eac0369: 		{SYSCONSTRAINTS_TABLEID}
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "8000002f-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1:eac0369: 		,"80000036-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1:eac0369: 		,"80000031-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX1
1:eac0369: 		,"80000033-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX2
1:eac0369: 		,"80000035-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX3
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSCONSTRAINTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSCONSTRAINTS_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions, uniqueness, uuids );
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSCONTRAINTS row
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSCONTRAINTS.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 					throws StandardException 
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		ExecRow    				row;
1:eac0369: 		int						constraintIType;
1:eac0369: 		UUID					oid;
1:eac0369: 		String					constraintSType = null;
1:eac0369: 		String					constraintID = null;
1:eac0369: 		String					tableID = null;
1:eac0369: 		String					constraintName = null;
1:eac0369: 		String					schemaID = null;
1:09bee7d: 
1:09bee7d:         boolean                 deferrable =
1:09bee7d:             ConstraintDefinitionNode.DEFERRABLE_DEFAULT;
1:09bee7d:         boolean                 initiallyDeferred =
1:09bee7d:             ConstraintDefinitionNode.INITIALLY_DEFERRED_DEFAULT;
1:09bee7d:         boolean                 enforced =
1:09bee7d:             ConstraintDefinitionNode.ENFORCED_DEFAULT;
1:09bee7d: 
1:eac0369: 		int						referenceCount = 0;
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor constraint = (ConstraintDescriptor)td;
1:eac0369: 			/*
1:eac0369: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1:eac0369: 			** For descriptors replicated from a Source system, we already have an UUID.
1:eac0369: 			*/
1:eac0369: 			oid = constraint.getUUID();
1:eac0369: 			constraintID = oid.toString();
1:eac0369: 
1:eac0369: 			oid = constraint.getTableId();
1:eac0369: 			tableID = oid.toString();
1:eac0369: 
1:eac0369: 			constraintName = constraint.getConstraintName();
1:eac0369: 
1:eac0369: 			constraintIType = constraint.getConstraintType();
1:eac0369: 			switch (constraintIType)
1:eac0369: 			{
1:eac0369: 			    case DataDictionary.PRIMARYKEY_CONSTRAINT:
1:eac0369: 				    constraintSType = "P";
4:eac0369: 					break;
1:eac0369: 
1:eac0369: 			    case DataDictionary.UNIQUE_CONSTRAINT:
1:eac0369: 					constraintSType = "U";
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 			    case DataDictionary.CHECK_CONSTRAINT:
1:eac0369: 					constraintSType = "C";
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 			    case DataDictionary.FOREIGNKEY_CONSTRAINT:
1:eac0369: 					constraintSType = "F";
1:eac0369: 					break;
1:eac0369: 
2:eac0369: 			    default:
2:eac0369: 					if (SanityManager.DEBUG)
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT("invalid constraint type");
1:eac0369: 					}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			schemaID = constraint.getSchemaDescriptor().getUUID().toString();
1:09bee7d: 
1:09bee7d:             // constraint characteristics
1:09bee7d:             deferrable = constraint.deferrable();
1:09bee7d:             initiallyDeferred   = constraint.initiallyDeferred();
1:09bee7d:             enforced   = constraint.enforced();
1:09bee7d: 
1:09bee7d:             referenceCount = constraint.getReferenceCount();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Insert info into sysconstraints */
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about sysconstraints
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert  */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSCONSTRAINTS_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTID, new SQLChar(constraintID));
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSCONSTRAINTS_TABLEID, new SQLChar(tableID));
1:eac0369: 
1:eac0369: 		/* 3rd column is NAME (varchar(128)) */
1:eb47bdb: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTNAME, new SQLVarchar(constraintName));
1:eac0369: 
1:eac0369: 		/* 4th column is TYPE (char(1)) */
1:eb47bdb: 		row.setColumn(SYSCONSTRAINTS_TYPE, new SQLChar(constraintSType));
1:eac0369: 
1:eac0369: 		/* 5th column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSCONSTRAINTS_SCHEMAID, new SQLChar(schemaID));
1:eac0369: 
1:eac0369: 		/* 6th column is STATE (char(1)) */
1:09bee7d:         row.setColumn(SYSCONSTRAINTS_STATE,
1:09bee7d:             new SQLChar(encodeCharacteristics(deferrable, initiallyDeferred, enforced)));
1:eac0369: 
1:eac0369: 		/* 7th column is REFERENCED */
1:4309044: 		row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, new SQLInteger(referenceCount));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:09bee7d:     /*
1:09bee7d:      * Encode the characteristics of the constraints into a single character.
1:09bee7d:      *
1:09bee7d:      * {deferrable, initiallyDeferred, enforced}     -> 'e'
1:09bee7d:      * {deferrable, initiallyDeferred, not enforced} -> 'd'
1:09bee7d:      * {deferrable, immediate, enforced}             -> 'i'
1:09bee7d:      * {deferrable, immediate, not enforced}         -> 'j'
1:09bee7d:      * {not deferrable, immediate, enforced}         -> 'E'
1:09bee7d:      * {not deferrable, immediate, not enforced      -> 'D'
1:09bee7d:      *
1:09bee7d:      * Other combinations are prohibited and not used. Note that the
1:09bee7d:      * value 'E' is only value used prior to version 10.11, and as
1:09bee7d:      * such upward compatibily since by default, constraints are {not
1:09bee7d:      * deferrable, immediate, enforced}.
1:09bee7d:      */
1:09bee7d:     private String encodeCharacteristics(
1:09bee7d:             boolean deferrable, boolean initiallyDeferred, boolean enforced) {
1:09bee7d:         char c;
1:09bee7d: 
1:09bee7d:         if (deferrable) {
1:09bee7d:             if (initiallyDeferred) {
1:09bee7d:                 if (enforced) {
1:09bee7d:                     c = 'e'; // deferrable initially deferred enforced
1:09bee7d:                 } else {
1:09bee7d:                     c = 'd'; // deferrable initially deferred not enforced
1:09bee7d:                 }
1:09bee7d:             } else {
1:09bee7d:                 if (enforced) {
1:09bee7d:                     c = 'i'; // deferrable initially immediate enforced
1:09bee7d:                 } else {
1:09bee7d:                     c = 'j'; // deferrable initially immediate not enforced
1:09bee7d:                 }
1:09bee7d:             }
1:09bee7d:         } else {
1:09bee7d:             if (initiallyDeferred) {
1:09bee7d:                 if (SanityManager.DEBUG) {
1:09bee7d:                     SanityManager.NOTREACHED();
1:09bee7d:                 }
1:09bee7d:                 c = 'E';
1:09bee7d:             } else {
1:09bee7d:                 if (enforced) {
1:09bee7d:                     c = 'E'; // not deferrable initially immediate enforced
1:09bee7d:                 } else {
1:09bee7d:                     c = 'D'; // not deferrable initially immediate not enforced
1:09bee7d:                 }
1:09bee7d:             }
1:09bee7d:         }
1:09bee7d: 
1:09bee7d:         return String.valueOf(c);
1:09bee7d:     }
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a ConstraintDescriptor out of a SYSCONSTRAINTS row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSCONSTRAINTS row
1:eac0369: 	 * @param parentTupleDescriptor	Subconstraint descriptor with auxiliary info.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor constraintDesc = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(
1:eac0369: 				row.nColumns() == SYSCONSTRAINTS_COLUMN_COUNT, 
1:eac0369: 				"Wrong number of columns for a SYSCONSTRAINTS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		ConglomerateDescriptor conglomDesc;
1:eac0369: 		DataDescriptorGenerator ddg;
1:eac0369: 		TableDescriptor		td = null;
1:eac0369: 		int					constraintIType = -1;
1:eac0369: 		int[]				keyColumns = null;
1:eac0369: 		UUID				constraintUUID;
1:eac0369: 		UUID				schemaUUID;
1:eac0369: 		UUID				tableUUID;
1:eac0369: 		UUID				referencedConstraintId = null; 
1:eac0369: 		SchemaDescriptor	schema;
1:eac0369: 		String				tableUUIDString;
1:eac0369: 		String				constraintName;
1:eac0369: 		String				constraintSType;
1:eac0369: 		String				constraintStateStr;
1:09bee7d:         boolean             deferrable =
1:09bee7d:                 ConstraintDefinitionNode.DEFERRABLE_DEFAULT;
1:09bee7d:         boolean             initiallyDeferred =
1:09bee7d:                 ConstraintDefinitionNode.INITIALLY_DEFERRED_DEFAULT;
1:09bee7d:         boolean             enforced =
1:09bee7d:                 ConstraintDefinitionNode.ENFORCED_DEFAULT;
1:eac0369: 		int					referenceCount;
1:eac0369: 		String				constraintUUIDString;
1:eac0369: 		String				schemaUUIDString;
1:eac0369: 		SubConstraintDescriptor scd;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(parentTupleDescriptor instanceof SubConstraintDescriptor))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"parentTupleDescriptor expected to be instanceof " +
1:eac0369: 					"SubConstraintDescriptor, not " +
1:eac0369: 					parentTupleDescriptor.getClass().getName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		scd = (SubConstraintDescriptor) parentTupleDescriptor;
1:eac0369: 
1:eac0369: 		ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
1:eac0369: 		constraintUUIDString = col.getString();
1:eac0369: 		constraintUUID = getUUIDFactory().recreateUUID(constraintUUIDString);
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
1:eac0369: 		tableUUIDString = col.getString();
1:eac0369: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1:eac0369: 
1:eac0369: 		/* Get the TableDescriptor.  
1:eac0369: 		 * It may be cached in the SCD, 
1:eac0369: 		 * otherwise we need to go to the
1:eac0369: 		 * DD.
1:eac0369: 		 */
1:eac0369: 		if (scd != null)
1:eac0369: 		{
1:eac0369: 			td = scd.getTableDescriptor();
1:eac0369: 		}
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			td = dd.getTableDescriptor(tableUUID);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 3rd column is NAME (varchar(128)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
1:eac0369: 		constraintName = col.getString();
1:eac0369: 
1:eac0369: 		/* 4th column is TYPE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
1:eac0369: 		constraintSType = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(constraintSType.length() == 1, 
1:eac0369: 				"Fourth column type incorrect");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		boolean typeSet = false;
1:eac0369: 		switch (constraintSType.charAt(0))
1:eac0369: 		{
1:eac0369: 			case 'P' : 
1:eac0369: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
1:eac0369: 				typeSet = true;
1:eac0369: 				// fall through
1:eac0369: 
1:eac0369: 			case 'U' :
1:eac0369: 				if (! typeSet)
1:eac0369: 				{
1:eac0369: 					constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
1:eac0369: 					typeSet = true;
1:eac0369: 				}
1:eac0369: 				// fall through
1:eac0369: 
1:eac0369: 			case 'F' :
1:eac0369: 				if (! typeSet)
1:eac0369: 					constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					if (!(parentTupleDescriptor instanceof SubKeyConstraintDescriptor))
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT(
1:eac0369: 						"parentTupleDescriptor expected to be instanceof " +
1:eac0369: 						"SubKeyConstraintDescriptor, not " +
1:eac0369: 						parentTupleDescriptor.getClass().getName());
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 				conglomDesc = td.getConglomerateDescriptor( 
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getIndexId());
1:eac0369: 				/* Take care the rare case of conglomDesc being null.  The
1:eac0369: 				 * reason is that our "td" is out of date.  Another thread
1:eac0369: 				 * which was adding a constraint committed between the moment
1:eac0369: 				 * we got the table descriptor (conglomerate list) and the
1:eac0369: 				 * moment we scanned and got the constraint desc list.  Since
1:eac0369: 				 * that thread just added a new row to SYSCONGLOMERATES, 
1:eac0369: 				 * SYSCONSTRAINTS, etc.  We wouldn't have wanted to lock the
1:eac0369: 				 * system tables just to prevent other threads from adding new
1:eac0369: 				 * rows.
1:eac0369: 				 */
1:eac0369: 				if (conglomDesc == null)
1:eac0369: 				{
1:eac0369: 					// we can't be getting td from cache because if we are
1:eac0369: 					// here, we must have been in dd's ddl mode (that's why
1:eac0369: 					// the ddl thread went through), we are not done yet, the
1:eac0369: 					// dd ref count is not 0, hence it couldn't have turned
1:eac0369: 					// into COMPILE_ONLY mode
1:eac0369: 					td = dd.getTableDescriptor(tableUUID);
1:eac0369: 					if (scd != null)
1:eac0369: 						scd.setTableDescriptor(td);
1:eac0369: 					// try again now
1:eac0369: 					conglomDesc = td.getConglomerateDescriptor( 
1:eac0369: 									((SubKeyConstraintDescriptor) 
1:eac0369: 										parentTupleDescriptor).getIndexId());
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.ASSERT(conglomDesc != null,
1:eac0369: 					"conglomDesc is expected to be non-null for backing index");
1:eac0369: 				}
1:eac0369: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
1:eac0369: 				referencedConstraintId = ((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getKeyConstraintId();
1:eac0369: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case 'C' :
1:eac0369: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					if (!(parentTupleDescriptor instanceof SubCheckConstraintDescriptor))
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT("parentTupleDescriptor expected to be instanceof " +
1:eac0369: 						"SubCheckConstraintDescriptor, not " +
1:eac0369: 						parentTupleDescriptor.getClass().getName());
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("Fourth column value invalid");
1:eac0369: 				}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 5th column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
1:eac0369: 		schemaUUIDString = col.getString();
1:eac0369: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1:eac0369: 
1:eac0369: 		schema = dd.getSchemaDescriptor(schemaUUID, null);
1:eac0369: 
1:eac0369: 		/* 6th column is STATE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_STATE);
1:eac0369: 		constraintStateStr = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(constraintStateStr.length() == 1, 
1:eac0369: 				"Sixth column (state) type incorrect");
1:eac0369: 		}
1:eac0369: 
1:09bee7d:         // Cf. the encoding description in javadoc for
1:09bee7d:         // #encodeCharacteristics.
1:3130800:         //
1:3130800:         // This code is cloned by DB_Key.makeDeferredClauses().
1:3130800:         //
1:eac0369: 		switch (constraintStateStr.charAt(0))
1:eac0369: 		{
1:eac0369: 			case 'E': 
1:09bee7d:                 deferrable = false;
1:09bee7d:                 initiallyDeferred = false;
1:09bee7d:                 enforced = true;
1:eac0369: 				break;
1:eac0369: 			case 'D':
1:09bee7d:                 deferrable = false;
1:09bee7d:                 initiallyDeferred = false;
1:09bee7d:                 enforced = false;
1:eac0369: 				break;
1:09bee7d:             case 'e':
1:09bee7d:                 deferrable = true;
1:09bee7d:                 initiallyDeferred = true;
1:09bee7d:                 enforced = true;
1:09bee7d:                 break;
1:09bee7d:             case 'd':
1:09bee7d:                 deferrable = true;
1:09bee7d:                 initiallyDeferred = true;
1:09bee7d:                 enforced = false;
1:09bee7d:                 break;
1:09bee7d:             case 'i':
1:09bee7d:                 deferrable = true;
1:09bee7d:                 initiallyDeferred = false;
1:09bee7d:                 enforced = true;
1:09bee7d:                 break;
1:09bee7d:             case 'j':
1:09bee7d:                 deferrable = true;
1:09bee7d:                 initiallyDeferred = false;
1:09bee7d:                 enforced = false;
1:09bee7d:                 break;
1:eac0369: 			default: 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("Invalidate state value '"
1:eac0369: 							+constraintStateStr+ "' for constraint");
1:eac0369: 				}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 7th column is REFERENCECOUNT, boolean */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_REFERENCECOUNT);
1:eac0369: 		referenceCount = col.getInt();
1:eac0369: 		
1:eac0369: 		/* now build and return the descriptor */
1:eac0369: 
1:eac0369: 		switch (constraintIType)
1:eac0369: 		{
1:eac0369: 			case DataDictionary.PRIMARYKEY_CONSTRAINT : 
1:eac0369: 				constraintDesc = ddg.newPrimaryKeyConstraintDescriptor(
1:eac0369: 										td, 
1:eac0369: 										constraintName, 
1:09bee7d:                                         deferrable,
1:09bee7d:                                         initiallyDeferred,
1:eac0369: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1:eac0369: 										constraintUUID,
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getIndexId(),
1:eac0369: 										schema,
1:09bee7d:                                         enforced,
1:eac0369: 										referenceCount);
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case DataDictionary.UNIQUE_CONSTRAINT :
1:eac0369: 				constraintDesc = ddg.newUniqueConstraintDescriptor(
1:eac0369: 										td, 
1:eac0369: 										constraintName, 
1:09bee7d:                                         deferrable,
1:09bee7d:                                         initiallyDeferred,
1:eac0369: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1:eac0369: 										constraintUUID,
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getIndexId(),
1:eac0369: 										schema,
1:09bee7d:                                         enforced,
1:eac0369: 										referenceCount);
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case DataDictionary.FOREIGNKEY_CONSTRAINT : 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.ASSERT(referenceCount == 0, 
1:eac0369: 						"REFERENCECOUNT column is nonzero for fk constraint");
1:eac0369: 				}
1:eac0369: 					
1:eac0369: 				constraintDesc = ddg.newForeignKeyConstraintDescriptor(
1:eac0369: 										td, 
1:eac0369: 										constraintName, 
1:09bee7d:                                         deferrable,
1:09bee7d:                                         initiallyDeferred,
1:eac0369: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1:eac0369: 										constraintUUID,
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getIndexId(),
1:eac0369: 										schema,
1:eac0369: 										referencedConstraintId,
1:09bee7d:                                         enforced,
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getRaDeleteRule(),
1:eac0369: 										((SubKeyConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getRaUpdateRule()
8:eac0369: 										);
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case DataDictionary.CHECK_CONSTRAINT :
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.ASSERT(referenceCount == 0, 
1:eac0369: 						"REFERENCECOUNT column is nonzero for check constraint");
1:eac0369: 				}
1:eac0369: 					
1:eac0369: 				constraintDesc = ddg.newCheckConstraintDescriptor(
1:eac0369: 										td, 
1:eac0369: 										constraintName, 
1:09bee7d:                                         deferrable,
1:09bee7d:                                         initiallyDeferred,
1:eac0369: 										constraintUUID,
1:eac0369: 										((SubCheckConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getConstraintText(),
1:eac0369: 										((SubCheckConstraintDescriptor) 
1:eac0369: 											parentTupleDescriptor).getReferencedColumnsDescriptor(),
1:eac0369: 										schema,
1:09bee7d:                                         enforced);
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 		return constraintDesc;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the constraint ID of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconstraints
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The constraint id
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getConstraintId(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				constraintUUIDString;
1:eac0369: 
1:eac0369: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
1:eac0369: 		constraintUUIDString = col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(constraintUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the constraint name of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconstraints
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The constraint name
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected String getConstraintName(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				constraintName;
1:eac0369: 
1:eac0369: 		/* 3rd column is CONSTRAINTNAME (char(128)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
1:eac0369: 		constraintName = col.getString();
1:eac0369: 		return constraintName;
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the schema ID of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconstraints
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The schema
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getSchemaId(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				schemaUUIDString;
1:eac0369: 
1:eac0369: 		/* 5th column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
1:eac0369: 		schemaUUIDString =col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the table ID of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconstraints
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The table id
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getTableId(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				tableUUIDString;
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
1:eac0369: 		tableUUIDString = col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(tableUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the constraint type out of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconstraints
1:eac0369: 	 *
1:eac0369: 	 * @return int	The constraint type	as an int
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected int getConstraintType(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		int					constraintIType;
1:eac0369: 		String				constraintSType;
1:eac0369: 
1:eac0369: 		/* 4th column is TYPE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
1:eac0369: 		constraintSType = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(constraintSType.length() == 1, 
1:eac0369: 				"Fourth column type incorrect");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		switch (constraintSType.charAt(0))
1:eac0369: 		{
1:eac0369: 			case 'P' : 
1:eac0369: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case 'U' :
1:eac0369: 				constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case 'C' :
1:eac0369: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case 'F' :
1:eac0369: 				constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("Fourth column value invalid");
1:eac0369: 				}
1:eac0369: 				constraintIType = -1;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return constraintIType;
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[]	buildColumnList()
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("CONSTRAINTID", false),
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:7dd08d1:                SystemColumnImpl.getIdentifierColumn("CONSTRAINTNAME", false),
1:7dd08d1:                SystemColumnImpl.getIndicatorColumn("TYPE"),
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:7dd08d1:                SystemColumnImpl.getIndicatorColumn("STATE"),
1:7dd08d1:                SystemColumnImpl.getColumn("REFERENCECOUNT", Types.INTEGER, false) 
1:7dd08d1:             };
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3130800
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // This code is cloned by DB_Key.makeDeferredClauses().
1:         //
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
/////////////////////////////////////////////////////////////////////////
1:     public static final int     SYSCONSTRAINTS_STATE = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean                 deferrable =
1:             ConstraintDefinitionNode.DEFERRABLE_DEFAULT;
1:         boolean                 initiallyDeferred =
1:             ConstraintDefinitionNode.INITIALLY_DEFERRED_DEFAULT;
1:         boolean                 enforced =
1:             ConstraintDefinitionNode.ENFORCED_DEFAULT;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             // constraint characteristics
1:             deferrable = constraint.deferrable();
1:             initiallyDeferred   = constraint.initiallyDeferred();
1:             enforced   = constraint.enforced();
1: 
1:             referenceCount = constraint.getReferenceCount();
/////////////////////////////////////////////////////////////////////////
1:         row.setColumn(SYSCONSTRAINTS_STATE,
1:             new SQLChar(encodeCharacteristics(deferrable, initiallyDeferred, enforced)));
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Encode the characteristics of the constraints into a single character.
1:      *
1:      * {deferrable, initiallyDeferred, enforced}     -> 'e'
1:      * {deferrable, initiallyDeferred, not enforced} -> 'd'
1:      * {deferrable, immediate, enforced}             -> 'i'
1:      * {deferrable, immediate, not enforced}         -> 'j'
1:      * {not deferrable, immediate, enforced}         -> 'E'
1:      * {not deferrable, immediate, not enforced      -> 'D'
1:      *
1:      * Other combinations are prohibited and not used. Note that the
1:      * value 'E' is only value used prior to version 10.11, and as
1:      * such upward compatibily since by default, constraints are {not
1:      * deferrable, immediate, enforced}.
1:      */
1:     private String encodeCharacteristics(
1:             boolean deferrable, boolean initiallyDeferred, boolean enforced) {
1:         char c;
1: 
1:         if (deferrable) {
1:             if (initiallyDeferred) {
1:                 if (enforced) {
1:                     c = 'e'; // deferrable initially deferred enforced
1:                 } else {
1:                     c = 'd'; // deferrable initially deferred not enforced
1:                 }
1:             } else {
1:                 if (enforced) {
1:                     c = 'i'; // deferrable initially immediate enforced
1:                 } else {
1:                     c = 'j'; // deferrable initially immediate not enforced
1:                 }
1:             }
1:         } else {
1:             if (initiallyDeferred) {
1:                 if (SanityManager.DEBUG) {
1:                     SanityManager.NOTREACHED();
1:                 }
1:                 c = 'E';
1:             } else {
1:                 if (enforced) {
1:                     c = 'E'; // not deferrable initially immediate enforced
1:                 } else {
1:                     c = 'D'; // not deferrable initially immediate not enforced
1:                 }
1:             }
1:         }
1: 
1:         return String.valueOf(c);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         boolean             deferrable =
1:                 ConstraintDefinitionNode.DEFERRABLE_DEFAULT;
1:         boolean             initiallyDeferred =
1:                 ConstraintDefinitionNode.INITIALLY_DEFERRED_DEFAULT;
1:         boolean             enforced =
1:                 ConstraintDefinitionNode.ENFORCED_DEFAULT;
/////////////////////////////////////////////////////////////////////////
1:         // Cf. the encoding description in javadoc for
1:         // #encodeCharacteristics.
1:                 deferrable = false;
1:                 initiallyDeferred = false;
1:                 enforced = true;
1:                 deferrable = false;
1:                 initiallyDeferred = false;
1:                 enforced = false;
1:             case 'e':
1:                 deferrable = true;
1:                 initiallyDeferred = true;
1:                 enforced = true;
1:                 break;
1:             case 'd':
1:                 deferrable = true;
1:                 initiallyDeferred = true;
1:                 enforced = false;
1:                 break;
1:             case 'i':
1:                 deferrable = true;
1:                 initiallyDeferred = false;
1:                 enforced = true;
1:                 break;
1:             case 'j':
1:                 deferrable = true;
1:                 initiallyDeferred = false;
1:                 enforced = false;
1:                 break;
/////////////////////////////////////////////////////////////////////////
1:                                         deferrable,
1:                                         initiallyDeferred,
1:                                         enforced,
/////////////////////////////////////////////////////////////////////////
1:                                         deferrable,
1:                                         initiallyDeferred,
1:                                         enforced,
/////////////////////////////////////////////////////////////////////////
1:                                         deferrable,
1:                                         initiallyDeferred,
1:                                         enforced,
/////////////////////////////////////////////////////////////////////////
1:                                         deferrable,
1:                                         initiallyDeferred,
1:                                         enforced);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLInteger;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, new SQLInteger(referenceCount));
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSCONSTRAINTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new SystemColumn[] {
1:                SystemColumnImpl.getUUIDColumn("CONSTRAINTID", false),
1:                SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:                SystemColumnImpl.getIdentifierColumn("CONSTRAINTNAME", false),
1:                SystemColumnImpl.getIndicatorColumn("TYPE"),
1:                SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:                SystemColumnImpl.getIndicatorColumn("STATE"),
1:                SystemColumnImpl.getColumn("REFERENCECOUNT", Types.INTEGER, false) 
1:             };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTID, new SQLChar(constraintID));
1: 		row.setColumn(SYSCONSTRAINTS_TABLEID, new SQLChar(tableID));
1: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTNAME, new SQLVarchar(constraintName));
1: 		row.setColumn(SYSCONSTRAINTS_TYPE, new SQLChar(constraintSType));
1: 		row.setColumn(SYSCONSTRAINTS_SCHEMAID, new SQLChar(schemaID));
0: 		row.setColumn(SYSCONSTRAINTS_STATE, new SQLChar(isEnabled ? "E" : "D"));
commit:6fbf669
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions, uniqueness, uuids );
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.catalog.IndexDescriptor;
1: 
1: /**
1:  * Factory for creating a SYSCONTRAINTS row.
1:  *
0:  * @author jerry
1:  */
1: 
1: public class SYSCONSTRAINTSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
1: 	private static final String		TABLENAME_STRING = "SYSCONSTRAINTS";
1: 
1: 	protected static final int		SYSCONSTRAINTS_COLUMN_COUNT = 7;
1: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTID = 1;
1: 	protected static final int		SYSCONSTRAINTS_TABLEID = 2;
1: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTNAME = 3;
1: 	protected static final int		SYSCONSTRAINTS_TYPE = 4;
1: 	protected static final int		SYSCONSTRAINTS_SCHEMAID = 5;
0: 	protected static final int		SYSCONSTRAINTS_STATE = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
1: 	protected static final int		SYSCONSTRAINTS_REFERENCECOUNT = 7;
1: 
1: 	protected static final int		SYSCONSTRAINTS_INDEX1_ID = 0;
1: 	protected static final int		SYSCONSTRAINTS_INDEX2_ID = 1;
1: 	protected static final int		SYSCONSTRAINTS_INDEX3_ID = 2;
1: 
1:     private	static	final	boolean[]	uniqueness = {
1: 		                                               true,
1: 													   true,
1: 													   false
1: 	                                                 };
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSCONSTRAINTS_CONSTRAINTID},
1: 		{SYSCONSTRAINTS_CONSTRAINTNAME, SYSCONSTRAINTS_SCHEMAID},
1: 		{SYSCONSTRAINTS_TABLEID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"CONSTRAINTID"},
0: 		{"CONSTRAINTNAME", "SCHEMAID"},
0: 		{"TABLEID"}
1: 	};
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "8000002f-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1: 		,"80000036-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1: 		,"80000031-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX1
1: 		,"80000033-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX2
1: 		,"80000035-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX3
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSCONSTRAINTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSCONSTRAINTS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1: 	 * Make a SYSCONTRAINTS row
1: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param constraint	constraint descriptor
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSCONTRAINTS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 					throws StandardException 
1: 	{
1: 		DataValueDescriptor		col;
1: 		ExecRow    				row;
1: 		int						constraintIType;
1: 		UUID					oid;
1: 		String					constraintSType = null;
1: 		String					constraintID = null;
1: 		String					tableID = null;
1: 		String					constraintName = null;
1: 		String					schemaID = null;
0: 		boolean					isEnabled = true;
1: 		int						referenceCount = 0;
1: 
1: 		if (td != null)
1: 		{
1: 			ConstraintDescriptor constraint = (ConstraintDescriptor)td;
1: 			/*
1: 			** We only allocate a new UUID if the descriptor doesn't already have one.
1: 			** For descriptors replicated from a Source system, we already have an UUID.
1: 			*/
1: 			oid = constraint.getUUID();
1: 			constraintID = oid.toString();
1: 
1: 			oid = constraint.getTableId();
1: 			tableID = oid.toString();
1: 
1: 			constraintName = constraint.getConstraintName();
1: 
1: 			constraintIType = constraint.getConstraintType();
1: 			switch (constraintIType)
1: 			{
1: 			    case DataDictionary.PRIMARYKEY_CONSTRAINT:
1: 				    constraintSType = "P";
1: 					break;
1: 
1: 			    case DataDictionary.UNIQUE_CONSTRAINT:
1: 					constraintSType = "U";
1: 					break;
1: 
1: 			    case DataDictionary.CHECK_CONSTRAINT:
1: 					constraintSType = "C";
1: 					break;
1: 
1: 			    case DataDictionary.FOREIGNKEY_CONSTRAINT:
1: 					constraintSType = "F";
1: 					break;
1: 
1: 			    default:
1: 					if (SanityManager.DEBUG)
1: 					{
1: 						SanityManager.THROWASSERT("invalid constraint type");
1: 					}
1: 			}
1: 
1: 			schemaID = constraint.getSchemaDescriptor().getUUID().toString();
0: 			isEnabled = constraint.isEnabled();
0: 			referenceCount = constraint.getReferenceCount();
1: 		}
1: 
1: 		/* Insert info into sysconstraints */
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about sysconstraints
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert  */
1: 		row = getExecutionFactory().getValueRow(SYSCONSTRAINTS_COLUMN_COUNT);
1: 
1: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTID, dvf.getCharDataValue(constraintID));
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_TABLEID, dvf.getCharDataValue(tableID));
1: 
1: 		/* 3rd column is NAME (varchar(128)) */
0: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTNAME, dvf.getVarcharDataValue(constraintName));
1: 
1: 		/* 4th column is TYPE (char(1)) */
0: 		row.setColumn(SYSCONSTRAINTS_TYPE, dvf.getCharDataValue(constraintSType));
1: 
1: 		/* 5th column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_SCHEMAID, dvf.getCharDataValue(schemaID));
1: 
1: 		/* 6th column is STATE (char(1)) */
0: 		row.setColumn(SYSCONSTRAINTS_STATE, dvf.getCharDataValue(isEnabled ? "E" : "D"));
1: 
1: 		/* 7th column is REFERENCED */
0: 		row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, dvf.getDataValue(referenceCount));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1, rowLocation);
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSCONSTRAINTS_INDEX1_ID:
0: 				/* 1st column is CONSTRAINTID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 				break;
1: 
0: 		    case SYSCONSTRAINTS_INDEX2_ID:
0: 				/* 1st column is CONSTRAINTNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
1: 
0: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				break;
1: 
0: 		    case SYSCONSTRAINTS_INDEX3_ID:
0: 				/* 1st column is TABLEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				break;
1: 
1: 		    default:
1: 
1: 				if (SanityManager.DEBUG)
0: 					SanityManager.NOTREACHED();
0: 				return null;
1: 
1: 
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a ConstraintDescriptor out of a SYSCONSTRAINTS row
1: 	 *
1: 	 * @param row a SYSCONSTRAINTS row
1: 	 * @param parentTupleDescriptor	Subconstraint descriptor with auxiliary info.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		ConstraintDescriptor constraintDesc = null;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(
1: 				row.nColumns() == SYSCONSTRAINTS_COLUMN_COUNT, 
1: 				"Wrong number of columns for a SYSCONSTRAINTS row");
1: 		}
1: 
1: 		DataValueDescriptor	col;
1: 		ConglomerateDescriptor conglomDesc;
1: 		DataDescriptorGenerator ddg;
1: 		TableDescriptor		td = null;
1: 		int					constraintIType = -1;
1: 		int[]				keyColumns = null;
1: 		UUID				constraintUUID;
1: 		UUID				schemaUUID;
1: 		UUID				tableUUID;
1: 		UUID				referencedConstraintId = null; 
1: 		SchemaDescriptor	schema;
1: 		String				tableUUIDString;
1: 		String				constraintName;
1: 		String				constraintSType;
1: 		String				constraintStateStr;
0: 		boolean				constraintEnabled;
1: 		int					referenceCount;
1: 		String				constraintUUIDString;
1: 		String				schemaUUIDString;
1: 		SubConstraintDescriptor scd;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(parentTupleDescriptor instanceof SubConstraintDescriptor))
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"parentTupleDescriptor expected to be instanceof " +
1: 					"SubConstraintDescriptor, not " +
1: 					parentTupleDescriptor.getClass().getName());
1: 			}
1: 		}
1: 
1: 		scd = (SubConstraintDescriptor) parentTupleDescriptor;
1: 
1: 		ddg = dd.getDataDescriptorGenerator();
1: 
1: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
1: 		constraintUUIDString = col.getString();
1: 		constraintUUID = getUUIDFactory().recreateUUID(constraintUUIDString);
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
1: 		tableUUIDString = col.getString();
1: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1: 
1: 		/* Get the TableDescriptor.  
1: 		 * It may be cached in the SCD, 
1: 		 * otherwise we need to go to the
1: 		 * DD.
1: 		 */
1: 		if (scd != null)
1: 		{
1: 			td = scd.getTableDescriptor();
1: 		}
1: 		if (td == null)
1: 		{
1: 			td = dd.getTableDescriptor(tableUUID);
1: 		}
1: 
1: 		/* 3rd column is NAME (varchar(128)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
1: 		constraintName = col.getString();
1: 
1: 		/* 4th column is TYPE (char(1)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
1: 		constraintSType = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(constraintSType.length() == 1, 
1: 				"Fourth column type incorrect");
1: 		}
1: 
1: 		boolean typeSet = false;
1: 		switch (constraintSType.charAt(0))
1: 		{
1: 			case 'P' : 
1: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
1: 				typeSet = true;
1: 				// fall through
1: 
1: 			case 'U' :
1: 				if (! typeSet)
1: 				{
1: 					constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
1: 					typeSet = true;
1: 				}
1: 				// fall through
1: 
1: 			case 'F' :
1: 				if (! typeSet)
1: 					constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					if (!(parentTupleDescriptor instanceof SubKeyConstraintDescriptor))
1: 					{
1: 						SanityManager.THROWASSERT(
1: 						"parentTupleDescriptor expected to be instanceof " +
1: 						"SubKeyConstraintDescriptor, not " +
1: 						parentTupleDescriptor.getClass().getName());
1: 					}
1: 				}
1: 				conglomDesc = td.getConglomerateDescriptor( 
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getIndexId());
1: 				/* Take care the rare case of conglomDesc being null.  The
1: 				 * reason is that our "td" is out of date.  Another thread
1: 				 * which was adding a constraint committed between the moment
1: 				 * we got the table descriptor (conglomerate list) and the
1: 				 * moment we scanned and got the constraint desc list.  Since
1: 				 * that thread just added a new row to SYSCONGLOMERATES, 
1: 				 * SYSCONSTRAINTS, etc.  We wouldn't have wanted to lock the
1: 				 * system tables just to prevent other threads from adding new
1: 				 * rows.
1: 				 */
1: 				if (conglomDesc == null)
1: 				{
1: 					// we can't be getting td from cache because if we are
1: 					// here, we must have been in dd's ddl mode (that's why
1: 					// the ddl thread went through), we are not done yet, the
1: 					// dd ref count is not 0, hence it couldn't have turned
1: 					// into COMPILE_ONLY mode
1: 					td = dd.getTableDescriptor(tableUUID);
1: 					if (scd != null)
1: 						scd.setTableDescriptor(td);
1: 					// try again now
1: 					conglomDesc = td.getConglomerateDescriptor( 
1: 									((SubKeyConstraintDescriptor) 
1: 										parentTupleDescriptor).getIndexId());
1: 				}
1: 
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.ASSERT(conglomDesc != null,
1: 					"conglomDesc is expected to be non-null for backing index");
1: 				}
1: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
1: 				referencedConstraintId = ((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getKeyConstraintId();
1: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
1: 				break;
1: 
1: 			case 'C' :
1: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					if (!(parentTupleDescriptor instanceof SubCheckConstraintDescriptor))
1: 					{
1: 						SanityManager.THROWASSERT("parentTupleDescriptor expected to be instanceof " +
1: 						"SubCheckConstraintDescriptor, not " +
1: 						parentTupleDescriptor.getClass().getName());
1: 					}
1: 				}
1: 				break;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT("Fourth column value invalid");
1: 				}
1: 		}
1: 
1: 		/* 5th column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
1: 		schemaUUIDString = col.getString();
1: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1: 
1: 		schema = dd.getSchemaDescriptor(schemaUUID, null);
1: 
1: 		/* 6th column is STATE (char(1)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_STATE);
1: 		constraintStateStr = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(constraintStateStr.length() == 1, 
1: 				"Sixth column (state) type incorrect");
1: 		}
1: 
1: 		switch (constraintStateStr.charAt(0))
1: 		{
1: 			case 'E': 
0: 				constraintEnabled = true;
1: 				break;
1: 			case 'D':
0: 				constraintEnabled = false;
1: 				break;
1: 			default: 
0: 				constraintEnabled = true;
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT("Invalidate state value '"
1: 							+constraintStateStr+ "' for constraint");
1: 				}
1: 		}
1: 
1: 		/* 7th column is REFERENCECOUNT, boolean */
1: 		col = row.getColumn(SYSCONSTRAINTS_REFERENCECOUNT);
1: 		referenceCount = col.getInt();
1: 		
1: 		/* now build and return the descriptor */
1: 
1: 		switch (constraintIType)
1: 		{
1: 			case DataDictionary.PRIMARYKEY_CONSTRAINT : 
1: 				constraintDesc = ddg.newPrimaryKeyConstraintDescriptor(
1: 										td, 
1: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
1: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1: 										constraintUUID,
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getIndexId(),
1: 										schema,
0: 										constraintEnabled,
1: 										referenceCount);
1: 				break;
1: 
1: 			case DataDictionary.UNIQUE_CONSTRAINT :
1: 				constraintDesc = ddg.newUniqueConstraintDescriptor(
1: 										td, 
1: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
1: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1: 										constraintUUID,
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getIndexId(),
1: 										schema,
0: 										constraintEnabled,
1: 										referenceCount);
1: 				break;
1: 
1: 			case DataDictionary.FOREIGNKEY_CONSTRAINT : 
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.ASSERT(referenceCount == 0, 
1: 						"REFERENCECOUNT column is nonzero for fk constraint");
1: 				}
1: 					
1: 				constraintDesc = ddg.newForeignKeyConstraintDescriptor(
1: 										td, 
1: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
1: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
1: 										constraintUUID,
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getIndexId(),
1: 										schema,
1: 										referencedConstraintId,
0: 										constraintEnabled,
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getRaDeleteRule(),
1: 										((SubKeyConstraintDescriptor) 
1: 											parentTupleDescriptor).getRaUpdateRule()
1: 										);
1: 				break;
1: 
1: 			case DataDictionary.CHECK_CONSTRAINT :
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.ASSERT(referenceCount == 0, 
1: 						"REFERENCECOUNT column is nonzero for check constraint");
1: 				}
1: 					
1: 				constraintDesc = ddg.newCheckConstraintDescriptor(
1: 										td, 
1: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
1: 										constraintUUID,
1: 										((SubCheckConstraintDescriptor) 
1: 											parentTupleDescriptor).getConstraintText(),
1: 										((SubCheckConstraintDescriptor) 
1: 											parentTupleDescriptor).getReferencedColumnsDescriptor(),
1: 										schema,
0: 										constraintEnabled);
1: 				break;
1: 		}
1: 		return constraintDesc;
1: 	}
1: 
1: 	/**
1: 	 * Get the constraint ID of the row.
1: 	 * 
1: 	 * @param row	The row from sysconstraints
1: 	 *
1: 	 * @return UUID	The constraint id
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getConstraintId(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				constraintUUIDString;
1: 
1: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
1: 		constraintUUIDString = col.getString();
1: 		return getUUIDFactory().recreateUUID(constraintUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the constraint name of the row.
1: 	 * 
1: 	 * @param row	The row from sysconstraints
1: 	 *
1: 	 * @return UUID	The constraint name
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected String getConstraintName(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				constraintName;
1: 
1: 		/* 3rd column is CONSTRAINTNAME (char(128)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
1: 		constraintName = col.getString();
1: 		return constraintName;
1: 	 }
1: 
1: 	/**
1: 	 * Get the schema ID of the row.
1: 	 * 
1: 	 * @param row	The row from sysconstraints
1: 	 *
1: 	 * @return UUID	The schema
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getSchemaId(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				schemaUUIDString;
1: 
1: 		/* 5th column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
1: 		schemaUUIDString =col.getString();
1: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the table ID of the row.
1: 	 * 
1: 	 * @param row	The row from sysconstraints
1: 	 *
1: 	 * @return UUID	The table id
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getTableId(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				tableUUIDString;
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
1: 		tableUUIDString = col.getString();
1: 		return getUUIDFactory().recreateUUID(tableUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the constraint type out of the row.
1: 	 * 
1: 	 * @param row	The row from sysconstraints
1: 	 *
1: 	 * @return int	The constraint type	as an int
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected int getConstraintType(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		int					constraintIType;
1: 		String				constraintSType;
1: 
1: 		/* 4th column is TYPE (char(1)) */
1: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
1: 		constraintSType = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(constraintSType.length() == 1, 
1: 				"Fourth column type incorrect");
1: 		}
1: 
1: 		switch (constraintSType.charAt(0))
1: 		{
1: 			case 'P' : 
1: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
1: 				break;
1: 
1: 			case 'U' :
1: 				constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
1: 				break;
1: 
1: 			case 'C' :
1: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
1: 				break;
1: 
1: 			case 'F' :
1: 				constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
1: 				break;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT("Fourth column value invalid");
1: 				}
1: 				constraintIType = -1;
1: 		}
1: 
1: 		return constraintIType;
1: 	 }
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSCONSTRAINTS_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CONSTRAINTID"),			// column name
0: 							SYSCONSTRAINTS_CONSTRAINTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			               );
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// column name
0: 							SYSCONSTRAINTS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			               );
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "CONSTRAINTNAME"),	// column name
0: 							SYSCONSTRAINTS_CONSTRAINTNAME,
0: 							false				// nullability
1: 							);
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TYPE"),			// column name
0: 							SYSCONSTRAINTS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			               );
1: 
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),		// column name
0: 							SYSCONSTRAINTS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			               );
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "STATE"),		// column name
0: 							SYSCONSTRAINTS_STATE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			               );
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "REFERENCECOUNT"),		// column name
0: 							SYSCONSTRAINTS_REFERENCECOUNT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"INTEGER",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			               );
0: 		return	columnList;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.IndexDescriptor;
0: 
0: /**
0:  * Factory for creating a SYSCONTRAINTS row.
0:  *
0:  * @author jerry
0:  */
0: 
0: public class SYSCONSTRAINTSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
0: 	private static final String		TABLENAME_STRING = "SYSCONSTRAINTS";
0: 
0: 	protected static final int		SYSCONSTRAINTS_COLUMN_COUNT = 7;
0: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTID = 1;
0: 	protected static final int		SYSCONSTRAINTS_TABLEID = 2;
0: 	protected static final int		SYSCONSTRAINTS_CONSTRAINTNAME = 3;
0: 	protected static final int		SYSCONSTRAINTS_TYPE = 4;
0: 	protected static final int		SYSCONSTRAINTS_SCHEMAID = 5;
0: 	protected static final int		SYSCONSTRAINTS_STATE = ConstraintDescriptor.SYSCONSTRAINTS_STATE_FIELD;
0: 	protected static final int		SYSCONSTRAINTS_REFERENCECOUNT = 7;
0: 
0: 	protected static final int		SYSCONSTRAINTS_INDEX1_ID = 0;
0: 	protected static final int		SYSCONSTRAINTS_INDEX2_ID = 1;
0: 	protected static final int		SYSCONSTRAINTS_INDEX3_ID = 2;
0: 
0:     private	static	final	boolean[]	uniqueness = {
0: 		                                               true,
0: 													   true,
0: 													   false
0: 	                                                 };
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSCONSTRAINTS_CONSTRAINTID},
0: 		{SYSCONSTRAINTS_CONSTRAINTNAME, SYSCONSTRAINTS_SCHEMAID},
0: 		{SYSCONSTRAINTS_TABLEID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"CONSTRAINTID"},
0: 		{"CONSTRAINTNAME", "SCHEMAID"},
0: 		{"TABLEID"}
0: 	};
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "8000002f-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
0: 		,"80000036-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
0: 		,"80000031-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX1
0: 		,"80000033-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX2
0: 		,"80000035-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONSTRAINTS_INDEX3
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSCONSTRAINTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSCONSTRAINTS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0: 	 * Make a SYSCONTRAINTS row
0: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param constraint	constraint descriptor
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSCONTRAINTS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 					throws StandardException 
0: 	{
0: 		DataValueDescriptor		col;
0: 		ExecRow    				row;
0: 		int						constraintIType;
0: 		UUID					oid;
0: 		String					constraintSType = null;
0: 		String					constraintID = null;
0: 		String					tableID = null;
0: 		String					constraintName = null;
0: 		String					schemaID = null;
0: 		boolean					isEnabled = true;
0: 		int						referenceCount = 0;
0: 
0: 		if (td != null)
0: 		{
0: 			ConstraintDescriptor constraint = (ConstraintDescriptor)td;
0: 			/*
0: 			** We only allocate a new UUID if the descriptor doesn't already have one.
0: 			** For descriptors replicated from a Source system, we already have an UUID.
0: 			*/
0: 			oid = constraint.getUUID();
0: 			constraintID = oid.toString();
0: 
0: 			oid = constraint.getTableId();
0: 			tableID = oid.toString();
0: 
0: 			constraintName = constraint.getConstraintName();
0: 
0: 			constraintIType = constraint.getConstraintType();
0: 			switch (constraintIType)
0: 			{
0: 			    case DataDictionary.PRIMARYKEY_CONSTRAINT:
0: 				    constraintSType = "P";
0: 					break;
0: 
0: 			    case DataDictionary.UNIQUE_CONSTRAINT:
0: 					constraintSType = "U";
0: 					break;
0: 
0: 			    case DataDictionary.CHECK_CONSTRAINT:
0: 					constraintSType = "C";
0: 					break;
0: 
0: 			    case DataDictionary.FOREIGNKEY_CONSTRAINT:
0: 					constraintSType = "F";
0: 					break;
0: 
0: 			    default:
0: 					if (SanityManager.DEBUG)
0: 					{
0: 						SanityManager.THROWASSERT("invalid constraint type");
0: 					}
0: 			}
0: 
0: 			schemaID = constraint.getSchemaDescriptor().getUUID().toString();
0: 			isEnabled = constraint.isEnabled();
0: 			referenceCount = constraint.getReferenceCount();
0: 		}
0: 
0: 		/* Insert info into sysconstraints */
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about sysconstraints
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert  */
0: 		row = getExecutionFactory().getValueRow(SYSCONSTRAINTS_COLUMN_COUNT);
0: 
0: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTID, dvf.getCharDataValue(constraintID));
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_TABLEID, dvf.getCharDataValue(tableID));
0: 
0: 		/* 3rd column is NAME (varchar(128)) */
0: 		row.setColumn(SYSCONSTRAINTS_CONSTRAINTNAME, dvf.getVarcharDataValue(constraintName));
0: 
0: 		/* 4th column is TYPE (char(1)) */
0: 		row.setColumn(SYSCONSTRAINTS_TYPE, dvf.getCharDataValue(constraintSType));
0: 
0: 		/* 5th column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSCONSTRAINTS_SCHEMAID, dvf.getCharDataValue(schemaID));
0: 
0: 		/* 6th column is STATE (char(1)) */
0: 		row.setColumn(SYSCONSTRAINTS_STATE, dvf.getCharDataValue(isEnabled ? "E" : "D"));
0: 
0: 		/* 7th column is REFERENCED */
0: 		row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, dvf.getDataValue(referenceCount));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSCONSTRAINTS_INDEX1_ID:
0: 				/* 1st column is CONSTRAINTID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 
0: 		    case SYSCONSTRAINTS_INDEX2_ID:
0: 				/* 1st column is CONSTRAINTNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSCONSTRAINTS_INDEX3_ID:
0: 				/* 1st column is TABLEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    default:
0: 
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.NOTREACHED();
0: 				return null;
0: 
0: 
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a ConstraintDescriptor out of a SYSCONSTRAINTS row
0: 	 *
0: 	 * @param row a SYSCONSTRAINTS row
0: 	 * @param parentTupleDescriptor	Subconstraint descriptor with auxiliary info.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		ConstraintDescriptor constraintDesc = null;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(
0: 				row.nColumns() == SYSCONSTRAINTS_COLUMN_COUNT, 
0: 				"Wrong number of columns for a SYSCONSTRAINTS row");
0: 		}
0: 
0: 		DataValueDescriptor	col;
0: 		ConglomerateDescriptor conglomDesc;
0: 		DataDescriptorGenerator ddg;
0: 		TableDescriptor		td = null;
0: 		int					constraintIType = -1;
0: 		int[]				keyColumns = null;
0: 		UUID				constraintUUID;
0: 		UUID				schemaUUID;
0: 		UUID				tableUUID;
0: 		UUID				referencedConstraintId = null; 
0: 		SchemaDescriptor	schema;
0: 		String				tableUUIDString;
0: 		String				constraintName;
0: 		String				constraintSType;
0: 		String				constraintStateStr;
0: 		boolean				constraintEnabled;
0: 		int					referenceCount;
0: 		String				constraintUUIDString;
0: 		String				schemaUUIDString;
0: 		SubConstraintDescriptor scd;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(parentTupleDescriptor instanceof SubConstraintDescriptor))
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"parentTupleDescriptor expected to be instanceof " +
0: 					"SubConstraintDescriptor, not " +
0: 					parentTupleDescriptor.getClass().getName());
0: 			}
0: 		}
0: 
0: 		scd = (SubConstraintDescriptor) parentTupleDescriptor;
0: 
0: 		ddg = dd.getDataDescriptorGenerator();
0: 
0: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
0: 		constraintUUIDString = col.getString();
0: 		constraintUUID = getUUIDFactory().recreateUUID(constraintUUIDString);
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
0: 		tableUUIDString = col.getString();
0: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
0: 
0: 		/* Get the TableDescriptor.  
0: 		 * It may be cached in the SCD, 
0: 		 * otherwise we need to go to the
0: 		 * DD.
0: 		 */
0: 		if (scd != null)
0: 		{
0: 			td = scd.getTableDescriptor();
0: 		}
0: 		if (td == null)
0: 		{
0: 			td = dd.getTableDescriptor(tableUUID);
0: 		}
0: 
0: 		/* 3rd column is NAME (varchar(128)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
0: 		constraintName = col.getString();
0: 
0: 		/* 4th column is TYPE (char(1)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
0: 		constraintSType = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(constraintSType.length() == 1, 
0: 				"Fourth column type incorrect");
0: 		}
0: 
0: 		boolean typeSet = false;
0: 		switch (constraintSType.charAt(0))
0: 		{
0: 			case 'P' : 
0: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
0: 				typeSet = true;
0: 				// fall through
0: 
0: 			case 'U' :
0: 				if (! typeSet)
0: 				{
0: 					constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
0: 					typeSet = true;
0: 				}
0: 				// fall through
0: 
0: 			case 'F' :
0: 				if (! typeSet)
0: 					constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					if (!(parentTupleDescriptor instanceof SubKeyConstraintDescriptor))
0: 					{
0: 						SanityManager.THROWASSERT(
0: 						"parentTupleDescriptor expected to be instanceof " +
0: 						"SubKeyConstraintDescriptor, not " +
0: 						parentTupleDescriptor.getClass().getName());
0: 					}
0: 				}
0: 				conglomDesc = td.getConglomerateDescriptor( 
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getIndexId());
0: 				/* Take care the rare case of conglomDesc being null.  The
0: 				 * reason is that our "td" is out of date.  Another thread
0: 				 * which was adding a constraint committed between the moment
0: 				 * we got the table descriptor (conglomerate list) and the
0: 				 * moment we scanned and got the constraint desc list.  Since
0: 				 * that thread just added a new row to SYSCONGLOMERATES, 
0: 				 * SYSCONSTRAINTS, etc.  We wouldn't have wanted to lock the
0: 				 * system tables just to prevent other threads from adding new
0: 				 * rows.
0: 				 */
0: 				if (conglomDesc == null)
0: 				{
0: 					// we can't be getting td from cache because if we are
0: 					// here, we must have been in dd's ddl mode (that's why
0: 					// the ddl thread went through), we are not done yet, the
0: 					// dd ref count is not 0, hence it couldn't have turned
0: 					// into COMPILE_ONLY mode
0: 					td = dd.getTableDescriptor(tableUUID);
0: 					if (scd != null)
0: 						scd.setTableDescriptor(td);
0: 					// try again now
0: 					conglomDesc = td.getConglomerateDescriptor( 
0: 									((SubKeyConstraintDescriptor) 
0: 										parentTupleDescriptor).getIndexId());
0: 				}
0: 
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.ASSERT(conglomDesc != null,
0: 					"conglomDesc is expected to be non-null for backing index");
0: 				}
0: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
0: 				referencedConstraintId = ((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getKeyConstraintId();
0: 				keyColumns = conglomDesc.getIndexDescriptor().baseColumnPositions();
0: 				break;
0: 
0: 			case 'C' :
0: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					if (!(parentTupleDescriptor instanceof SubCheckConstraintDescriptor))
0: 					{
0: 						SanityManager.THROWASSERT("parentTupleDescriptor expected to be instanceof " +
0: 						"SubCheckConstraintDescriptor, not " +
0: 						parentTupleDescriptor.getClass().getName());
0: 					}
0: 				}
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT("Fourth column value invalid");
0: 				}
0: 		}
0: 
0: 		/* 5th column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
0: 		schemaUUIDString = col.getString();
0: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
0: 
0: 		schema = dd.getSchemaDescriptor(schemaUUID, null);
0: 
0: 		/* 6th column is STATE (char(1)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_STATE);
0: 		constraintStateStr = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(constraintStateStr.length() == 1, 
0: 				"Sixth column (state) type incorrect");
0: 		}
0: 
0: 		switch (constraintStateStr.charAt(0))
0: 		{
0: 			case 'E': 
0: 				constraintEnabled = true;
0: 				break;
0: 			case 'D':
0: 				constraintEnabled = false;
0: 				break;
0: 			default: 
0: 				constraintEnabled = true;
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT("Invalidate state value '"
0: 							+constraintStateStr+ "' for constraint");
0: 				}
0: 		}
0: 
0: 		/* 7th column is REFERENCECOUNT, boolean */
0: 		col = row.getColumn(SYSCONSTRAINTS_REFERENCECOUNT);
0: 		referenceCount = col.getInt();
0: 		
0: 		/* now build and return the descriptor */
0: 
0: 		switch (constraintIType)
0: 		{
0: 			case DataDictionary.PRIMARYKEY_CONSTRAINT : 
0: 				constraintDesc = ddg.newPrimaryKeyConstraintDescriptor(
0: 										td, 
0: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
0: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
0: 										constraintUUID,
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getIndexId(),
0: 										schema,
0: 										constraintEnabled,
0: 										referenceCount);
0: 				break;
0: 
0: 			case DataDictionary.UNIQUE_CONSTRAINT :
0: 				constraintDesc = ddg.newUniqueConstraintDescriptor(
0: 										td, 
0: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
0: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
0: 										constraintUUID,
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getIndexId(),
0: 										schema,
0: 										constraintEnabled,
0: 										referenceCount);
0: 				break;
0: 
0: 			case DataDictionary.FOREIGNKEY_CONSTRAINT : 
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.ASSERT(referenceCount == 0, 
0: 						"REFERENCECOUNT column is nonzero for fk constraint");
0: 				}
0: 					
0: 				constraintDesc = ddg.newForeignKeyConstraintDescriptor(
0: 										td, 
0: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
0: 										keyColumns,//genReferencedColumns(dd, td), //int referencedColumns[],
0: 										constraintUUID,
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getIndexId(),
0: 										schema,
0: 										referencedConstraintId,
0: 										constraintEnabled,
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getRaDeleteRule(),
0: 										((SubKeyConstraintDescriptor) 
0: 											parentTupleDescriptor).getRaUpdateRule()
0: 										);
0: 				break;
0: 
0: 			case DataDictionary.CHECK_CONSTRAINT :
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.ASSERT(referenceCount == 0, 
0: 						"REFERENCECOUNT column is nonzero for check constraint");
0: 				}
0: 					
0: 				constraintDesc = ddg.newCheckConstraintDescriptor(
0: 										td, 
0: 										constraintName, 
0: 										false, //deferable,
0: 										false, //initiallyDeferred,
0: 										constraintUUID,
0: 										((SubCheckConstraintDescriptor) 
0: 											parentTupleDescriptor).getConstraintText(),
0: 										((SubCheckConstraintDescriptor) 
0: 											parentTupleDescriptor).getReferencedColumnsDescriptor(),
0: 										schema,
0: 										constraintEnabled);
0: 				break;
0: 		}
0: 		return constraintDesc;
0: 	}
0: 
0: 	/**
0: 	 * Get the constraint ID of the row.
0: 	 * 
0: 	 * @param row	The row from sysconstraints
0: 	 *
0: 	 * @return UUID	The constraint id
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getConstraintId(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				constraintUUIDString;
0: 
0: 		/* 1st column is CONSTRAINTID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTID);
0: 		constraintUUIDString = col.getString();
0: 		return getUUIDFactory().recreateUUID(constraintUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the constraint name of the row.
0: 	 * 
0: 	 * @param row	The row from sysconstraints
0: 	 *
0: 	 * @return UUID	The constraint name
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected String getConstraintName(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				constraintName;
0: 
0: 		/* 3rd column is CONSTRAINTNAME (char(128)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_CONSTRAINTNAME);
0: 		constraintName = col.getString();
0: 		return constraintName;
0: 	 }
0: 
0: 	/**
0: 	 * Get the schema ID of the row.
0: 	 * 
0: 	 * @param row	The row from sysconstraints
0: 	 *
0: 	 * @return UUID	The schema
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getSchemaId(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				schemaUUIDString;
0: 
0: 		/* 5th column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_SCHEMAID);
0: 		schemaUUIDString =col.getString();
0: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the table ID of the row.
0: 	 * 
0: 	 * @param row	The row from sysconstraints
0: 	 *
0: 	 * @return UUID	The table id
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getTableId(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				tableUUIDString;
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_TABLEID);
0: 		tableUUIDString = col.getString();
0: 		return getUUIDFactory().recreateUUID(tableUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the constraint type out of the row.
0: 	 * 
0: 	 * @param row	The row from sysconstraints
0: 	 *
0: 	 * @return int	The constraint type	as an int
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected int getConstraintType(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		int					constraintIType;
0: 		String				constraintSType;
0: 
0: 		/* 4th column is TYPE (char(1)) */
0: 		col = row.getColumn(SYSCONSTRAINTS_TYPE);
0: 		constraintSType = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(constraintSType.length() == 1, 
0: 				"Fourth column type incorrect");
0: 		}
0: 
0: 		switch (constraintSType.charAt(0))
0: 		{
0: 			case 'P' : 
0: 				constraintIType = DataDictionary.PRIMARYKEY_CONSTRAINT;
0: 				break;
0: 
0: 			case 'U' :
0: 				constraintIType = DataDictionary.UNIQUE_CONSTRAINT;
0: 				break;
0: 
0: 			case 'C' :
0: 				constraintIType = DataDictionary.CHECK_CONSTRAINT;
0: 				break;
0: 
0: 			case 'F' :
0: 				constraintIType = DataDictionary.FOREIGNKEY_CONSTRAINT;
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT("Fourth column value invalid");
0: 				}
0: 				constraintIType = -1;
0: 		}
0: 
0: 		return constraintIType;
0: 	 }
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSCONSTRAINTS_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CONSTRAINTID"),			// column name
0: 							SYSCONSTRAINTS_CONSTRAINTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// column name
0: 							SYSCONSTRAINTS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "CONSTRAINTNAME"),	// column name
0: 							SYSCONSTRAINTS_CONSTRAINTNAME,
0: 							false				// nullability
0: 							);
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TYPE"),			// column name
0: 							SYSCONSTRAINTS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			               );
0: 
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),		// column name
0: 							SYSCONSTRAINTS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "STATE"),		// column name
0: 							SYSCONSTRAINTS_STATE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			               );
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "REFERENCECOUNT"),		// column name
0: 							SYSCONSTRAINTS_REFERENCECOUNT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"INTEGER",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			               );
0: 		return	columnList;
0: 	}
0: 
0: }
============================================================================