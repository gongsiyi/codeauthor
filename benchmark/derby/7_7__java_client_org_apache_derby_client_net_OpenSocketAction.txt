1:33776ff: /*
4:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.OpenSocketAction
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:69e3d06: import java.io.IOException;
1:f78eb01: 
1:4772c7e: import java.net.Socket;
1:69e3d06: import java.net.UnknownHostException;
1:69e3d06: import java.security.KeyManagementException;
1:69e3d06: import java.security.KeyStoreException;
1:69e3d06: import java.security.NoSuchAlgorithmException;
1:69e3d06: import java.security.NoSuchProviderException;
1:4772c7e: import java.security.PrivilegedExceptionAction;
1:69e3d06: import java.security.UnrecoverableKeyException;
1:69e3d06: import java.security.cert.CertificateException;
1:6bc2e25: import javax.net.SocketFactory;
1:f78eb01: import javax.net.ssl.SSLSocket;
1:6bc2e25: import javax.net.ssl.SSLSocketFactory;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:6bc2e25: 
1:0326967: class OpenSocketAction implements PrivilegedExceptionAction<Socket> {
1:70f7692:     private String server_;
1:70f7692:     private int port_;
1:37ce91b:     private int clientSSLMode_;
1:70f7692: 
1:0326967:     OpenSocketAction(String server, int port, int clientSSLMode) {
1:70f7692:         server_ = server;
1:70f7692:         port_ = port;
1:37ce91b:         clientSSLMode_ = clientSSLMode;
1:70f7692:     }
1:37ce91b: 
1:4772c7e:     @Override
1:4772c7e:     public Socket run()
1:69e3d06:         throws UnknownHostException,
1:69e3d06:                IOException,
1:69e3d06:                NoSuchAlgorithmException,
1:69e3d06:                KeyManagementException,
1:69e3d06:                NoSuchProviderException,
1:69e3d06:                KeyStoreException,
1:69e3d06:                UnrecoverableKeyException,
1:69e3d06:                CertificateException
1:7ae0ee5:     {
1:6bc2e25:         
1:6bc2e25:         SocketFactory sf;
1:37ce91b:         switch (clientSSLMode_) {
1:7863d83:         case BasicClientDataSource40.SSL_BASIC:
1:37ce91b:             sf = NaiveTrustManager.getSocketFactory();
1:37ce91b:             break;
1:7863d83:         case BasicClientDataSource40.
1:8269b78:                 SSL_PEER_AUTHENTICATION:
1:37ce91b:             sf = (SocketFactory)SSLSocketFactory.getDefault();
1:37ce91b:             break;
1:7863d83:         case BasicClientDataSource40.SSL_OFF:
1:6bc2e25:             sf = SocketFactory.getDefault();
1:37ce91b:             break;
1:37ce91b:         default: 
1:37ce91b:             // Assumes cleartext for undefined values
1:37ce91b:             sf = SocketFactory.getDefault();
1:37ce91b:             break;
1:6bc2e25:         }
1:f78eb01:         if (clientSSLMode_ == BasicClientDataSource40.SSL_BASIC ||
1:f78eb01:             clientSSLMode_ == BasicClientDataSource40.SSL_PEER_AUTHENTICATION){
1:f78eb01:         	//DERBY-6764(analyze impact of poodle security alert on Derby 
1:f78eb01:         	// client - server ssl support)
1:c3c7251:         	//If SSLv3 and/or SSLv2Hello is one of the enabled protocols,  
1:c3c7251:         	// then we want to remove it from the list of enabled protocols  
1:f78eb01:         	// because of poodle security breach
1:f78eb01:         	SSLSocket sSocket = (SSLSocket)sf.createSocket(server_, port_);
1:f78eb01:         	String[] enabledProtocols = sSocket.getEnabledProtocols();
1:f78eb01: 
1:c3c7251:             //If SSLv3 and/or SSLv2Hello is one of the enabled protocols, 
1:c3c7251:             // then remove it from the list of enabled protocols because of 
1:c3c7251:             // its security breach.
1:383bfd5:             String[] supportedProtocols = new String[enabledProtocols.length];
1:383bfd5:             int supportedProtocolsCount  = 0;
1:f78eb01:             for ( int i = 0; i < enabledProtocols.length; i++ )
1:f78eb01:             {
1:383bfd5:                 if (!(enabledProtocols[i].toUpperCase().contains("SSLV3") ||
1:383bfd5:                     enabledProtocols[i].toUpperCase().contains("SSLV2HELLO"))) {
1:383bfd5:                 	supportedProtocols[supportedProtocolsCount] = 
1:f78eb01:                 			enabledProtocols[i];
1:383bfd5:                 	supportedProtocolsCount++;
1:f78eb01:                 }
1:f78eb01:             }
1:383bfd5:             if(supportedProtocolsCount < enabledProtocols.length) {
1:f78eb01:             	String[] newEnabledProtocolsList = null;
1:c3c7251:             	//We found that SSLv3 and or SSLv2Hello is one of the enabled 
1:c3c7251:             	// protocols for this jvm. Following code will remove it from 
1:c3c7251:             	// enabled list.
1:f78eb01:             	newEnabledProtocolsList = 
1:383bfd5:             			new String[supportedProtocolsCount];
1:383bfd5:             	System.arraycopy(supportedProtocols, 0, 
1:f78eb01:             			newEnabledProtocolsList, 0, 
1:383bfd5:             			supportedProtocolsCount);
1:f78eb01:             	sSocket.setEnabledProtocols(newEnabledProtocolsList);
1:f78eb01:             }
1:f78eb01:             return sSocket;
1:f78eb01:         } else
1:f78eb01:             return sf.createSocket(server_, port_);
1:70f7692:     }
1:37ce91b: 
3:33776ff: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:383bfd5
/////////////////////////////////////////////////////////////////////////
1:             String[] supportedProtocols = new String[enabledProtocols.length];
1:             int supportedProtocolsCount  = 0;
1:                 if (!(enabledProtocols[i].toUpperCase().contains("SSLV3") ||
1:                     enabledProtocols[i].toUpperCase().contains("SSLV2HELLO"))) {
1:                 	supportedProtocols[supportedProtocolsCount] = 
1:                 	supportedProtocolsCount++;
1:             if(supportedProtocolsCount < enabledProtocols.length) {
1:             			new String[supportedProtocolsCount];
1:             	System.arraycopy(supportedProtocols, 0, 
1:             			supportedProtocolsCount);
commit:c3c7251
/////////////////////////////////////////////////////////////////////////
1:         	//If SSLv3 and/or SSLv2Hello is one of the enabled protocols,  
1:         	// then we want to remove it from the list of enabled protocols  
1:             //If SSLv3 and/or SSLv2Hello is one of the enabled protocols, 
1:             // then remove it from the list of enabled protocols because of 
1:             // its security breach.
0:                     enabledProtocols[i].toUpperCase().contains("SSLV2HELLO")) {
/////////////////////////////////////////////////////////////////////////
1:             	//We found that SSLv3 and or SSLv2Hello is one of the enabled 
1:             	// protocols for this jvm. Following code will remove it from 
1:             	// enabled list.
0:             			removedProtocolsCount);
commit:f78eb01
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLSocket;
/////////////////////////////////////////////////////////////////////////
1:         if (clientSSLMode_ == BasicClientDataSource40.SSL_BASIC ||
1:             clientSSLMode_ == BasicClientDataSource40.SSL_PEER_AUTHENTICATION){
1:         	//DERBY-6764(analyze impact of poodle security alert on Derby 
1:         	// client - server ssl support)
0:         	//If SSLv3 or SSLv2Hello is one of the enabled protocols, then 
0:         	// we want to remove it from the list of enabled protocols  
1:         	// because of poodle security breach
1:         	SSLSocket sSocket = (SSLSocket)sf.createSocket(server_, port_);
1:         	String[] enabledProtocols = sSocket.getEnabledProtocols();
1: 
0:             //If SSLv3 is one of the enabled protocols, then remove it from the
0:             // list of enabled protocols because of its security breach.
0:             String[] removeTwoProtocols = new String[enabledProtocols.length];
0:             int removedProtocolsCount  = 0;
0:             boolean foundProtocolToRemove=false;
1:             for ( int i = 0; i < enabledProtocols.length; i++ )
1:             {
0:                 if (enabledProtocols[i].toUpperCase().contains("SSLV3") ||
0:                     enabledProtocols[i].toUpperCase().contains("SSLv2Hello")) {
0:                 	foundProtocolToRemove=true;
0:                 } else {
0:                 	removeTwoProtocols[removedProtocolsCount] = 
1:                 			enabledProtocols[i];
0:                 	removedProtocolsCount++;
1:                 }
1:             }
0:             if(foundProtocolToRemove) {
1:             	String[] newEnabledProtocolsList = null;
0:             	//We found that SSLv3 is one of the enabled protocols for this
0:             	// jvm. Following code will remove it from enabled list.
1:             	newEnabledProtocolsList = 
0:             			new String[(removeTwoProtocols.length)-1];
0:             	System.arraycopy(removeTwoProtocols, 0, 
1:             			newEnabledProtocolsList, 0, 
0:             			(removeTwoProtocols.length)-1);
1:             	sSocket.setEnabledProtocols(newEnabledProtocolsList);
1:             }
1:             return sSocket;
1:         } else
1:             return sf.createSocket(server_, port_);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:         case BasicClientDataSource40.SSL_BASIC:
1:         case BasicClientDataSource40.
1:         case BasicClientDataSource40.SSL_OFF:
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class OpenSocketAction implements PrivilegedExceptionAction<Socket> {
1:     OpenSocketAction(String server, int port, int clientSSLMode) {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.UnknownHostException;
1: import java.security.KeyManagementException;
1: import java.security.KeyStoreException;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.NoSuchProviderException;
1: import java.security.UnrecoverableKeyException;
1: import java.security.cert.CertificateException;
/////////////////////////////////////////////////////////////////////////
1:         throws UnknownHostException,
1:                IOException,
1:                NoSuchAlgorithmException,
1:                KeyManagementException,
1:                NoSuchProviderException,
1:                KeyStoreException,
1:                UnrecoverableKeyException,
1:                CertificateException
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
/////////////////////////////////////////////////////////////////////////
0:         case ClientBaseDataSourceRoot.SSL_BASIC:
0:         case ClientBaseDataSourceRoot.
0:         case ClientBaseDataSourceRoot.SSL_OFF:
commit:8269b78
/////////////////////////////////////////////////////////////////////////
0:         case org.apache.derby.jdbc.ClientBaseDataSourceRoot.SSL_BASIC:
0:         case org.apache.derby.jdbc.ClientBaseDataSourceRoot.
1:                 SSL_PEER_AUTHENTICATION:
0:         case org.apache.derby.jdbc.ClientBaseDataSourceRoot.SSL_OFF:
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.security.PrivilegedExceptionAction;
0: public class OpenSocketAction implements PrivilegedExceptionAction<Socket> {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Socket run()
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:7ae0ee5
/////////////////////////////////////////////////////////////////////////
0:                java.security.KeyManagementException,
0:                java.security.NoSuchProviderException,
0:                java.security.KeyStoreException,
0:                java.security.UnrecoverableKeyException,
0:                java.security.cert.CertificateException
1:     {
commit:37ce91b
/////////////////////////////////////////////////////////////////////////
0: import javax.net.ssl.SSLSocket;
1:     private int clientSSLMode_;
0:     public OpenSocketAction(String server, int port, int clientSSLMode) {
1:         clientSSLMode_ = clientSSLMode;
0:                java.io.IOException,
0:                java.security.NoSuchAlgorithmException,
0:                java.security.KeyManagementException {
1:         
1:         switch (clientSSLMode_) {
0:         case org.apache.derby.jdbc.ClientBaseDataSource.SSL_BASIC:
1:             sf = NaiveTrustManager.getSocketFactory();
1:             break;
0:         case org.apache.derby.jdbc.ClientBaseDataSource.SSL_PEER_AUTHENTICATION:
1:             sf = (SocketFactory)SSLSocketFactory.getDefault();
1:             break;
0:         case org.apache.derby.jdbc.ClientBaseDataSource.SSL_OFF:
1:             break;
1:         default: 
1:             // Assumes cleartext for undefined values
1:             sf = SocketFactory.getDefault();
1:             break;
1: 
commit:6bc2e25
/////////////////////////////////////////////////////////////////////////
1: import javax.net.SocketFactory;
0: import javax.net.ServerSocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
0: import javax.net.ssl.SSLServerSocketFactory;
1: 
0:     private boolean useSSL_;
0:     public OpenSocketAction(String server, int port, boolean useSSL) {
0:         useSSL_ = useSSL;
0:     public Object run() 
0:         throws java.net.UnknownHostException, 
0:                java.io.IOException {
1: 
1:         SocketFactory sf;
0:         if (useSSL_) {
0:             sf = SSLSocketFactory.getDefault();
0:         } else {
1:             sf = SocketFactory.getDefault();
1:         }
0:         return sf.createSocket(server_, port_);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class OpenSocketAction implements java.security.PrivilegedExceptionAction {
1:     private String server_;
1:     private int port_;
0:     public OpenSocketAction(String server, int port) {
1:         server_ = server;
1:         port_ = port;
1:     }
1: 
0:     public Object run() throws java.net.UnknownHostException, java.io.IOException {
0:         return new java.net.Socket(server_, port_);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.OpenSocketAction
1: 
0:    Copyright (c) 2002, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: public class OpenSocketAction implements java.security.PrivilegedExceptionAction
0: {
0:   private String server_;
0:   private int port_;
1:   
0:   public OpenSocketAction (String server, int port)
0:   {
0:     server_ = server;
0:     port_ = port;
1:   }
1: 
0:   public Object run () throws java.net.UnknownHostException, java.io.IOException
0:   {
0:     return new java.net.Socket (server_, port_);
1:   }
1: }
============================================================================