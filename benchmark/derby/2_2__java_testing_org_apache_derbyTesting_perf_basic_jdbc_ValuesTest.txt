1:20c6151: /*
1:20c6151:  *
1:20c6151:  * Derby - Class ValuesTest
1:20c6151:  *
1:20c6151:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:20c6151:  * contributor license agreements.  See the NOTICE file distributed with
1:20c6151:  * this work for additional information regarding copyright ownership.
1:20c6151:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:20c6151:  * (the "License"); you may not use this file except in compliance with
1:20c6151:  * the License.  You may obtain a copy of the License at
1:20c6151:  *
1:20c6151:  *    http://www.apache.org/licenses/LICENSE-2.0
1:20c6151:  *
1:20c6151:  * Unless required by applicable law or agreed to in writing, 
1:20c6151:  * software distributed under the License is distributed on an 
1:20c6151:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:20c6151:  * either express or implied. See the License for the specific 
1:20c6151:  * language governing permissions and limitations under the License.
1:20c6151:  */
1:20c6151: package org.apache.derbyTesting.perf.basic.jdbc;
2:20c6151: 
1:1ae02c9: import java.sql.PreparedStatement;
1:20c6151: import java.sql.ResultSet;
1:20c6151: import java.sql.SQLException;
1:20c6151: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:20c6151: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:20c6151: 
1:20c6151: /**
1:20c6151:  * Add performance tests that use VALUES statement 
1:20c6151:  */
1:20c6151: public class ValuesTest extends JDBCPerfTestCase{
1:20c6151:     
1:20c6151:     private PreparedStatement ps;
1:20c6151:     
1:20c6151:     /**
1:20c6151:      * @return Tests that should be run as part of this class.
1:20c6151:      */
1:20c6151:     public static Test suite()
1:20c6151:     {
1:20c6151:         int iterations = 100000;
1:20c6151:         int repeats = 4;
1:20c6151:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("ValuesTest");
1:20c6151:         
1:20c6151:         // To add embed tests.
1:20c6151:         suite.addTest(new ValuesTest("fetchByColumnName",iterations,repeats));
1:20c6151:         suite.addTest(new ValuesTest("fetchByColumnNumber",iterations,repeats));
1:20c6151:         
1:20c6151:         // To add client tests.
1:1ae02c9:         BaseTestSuite client = new BaseTestSuite("Client_ValuesTest");
1:20c6151:         client.addTest(new ValuesTest("fetchByColumnName",iterations,repeats));
1:20c6151:         client.addTest(new ValuesTest("fetchByColumnNumber",iterations,repeats));
1:20c6151:         suite.addTest(TestConfiguration.clientServerDecorator(client));
1:20c6151:         
1:20c6151:         return suite;   
1:20c6151:     }
1:20c6151:     
1:20c6151:     
1:20c6151:     public ValuesTest(String name,int iterations,int repeats) {
1:20c6151:         super(name,iterations,repeats);
1:20c6151:     }
1:20c6151:     
1:20c6151:     public ValuesTest(String name)
1:20c6151:     {
1:20c6151:         super(name);
1:20c6151:     }
1:20c6151:     
1:20c6151:     /**
1:20c6151:      * Setup for the tests that query the simple VALUES statement.
1:20c6151:      * Open a connection to the database, and prepare the query here
1:20c6151:      */
1:20c6151:     public void setUp() throws SQLException
1:20c6151:     {
1:20c6151:         println("Setup()::ValuesTest");
1:20c6151:         ps = openDefaultConnection().prepareStatement(
1:20c6151:                 "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5)) AS"+
1:20c6151:                 " T(\"cOlumN1\", COLUMN2, \"column3\")",
1:20c6151:                 ResultSet.TYPE_FORWARD_ONLY,
1:20c6151:                 ResultSet.CONCUR_READ_ONLY,
1:20c6151:                 ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:20c6151:         
1:20c6151:     }
1:20c6151:     
1:20c6151:     /**
1:20c6151:      * Query is a simple VALUES statement.
1:20c6151:      * <P>
1:20c6151:      * "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4),
1:20c6151:      * (5,5,5)) AS T(\"cOlumN1\", COLUMN2, \"column3\")",
1:20c6151:      * ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, 
1:20c6151:      * ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:20c6151:      * <P>
1:20c6151:      * This test fetches data using column name
1:20c6151:      */
1:20c6151:     public void fetchByColumnName()
1:20c6151:     throws SQLException
1:20c6151:     {
1:20c6151:         ResultSet rs = ps.executeQuery();
1:20c6151:         while (rs.next()) {
1:20c6151:             rs.getInt("column1");
1:20c6151:             rs.getInt("COLUMN2");
1:20c6151:             rs.getInt("column3");
1:20c6151:         }
1:20c6151:         rs.close();    
1:20c6151:     }
1:20c6151:     
1:20c6151:     /**
1:20c6151:      * Query is a simple VALUES statement.
1:20c6151:      * <P>
1:20c6151:      * "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4), 
1:20c6151:      * (5,5,5)) AS T(\"cOlumN1\", COLUMN2, \"column3\")",
1:20c6151:      * ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, 
1:20c6151:      * ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:20c6151:      * <P>
1:20c6151:      * This test fetches data using column number
1:20c6151:      */
1:20c6151:     public void fetchByColumnNumber()
1:20c6151:     throws SQLException
1:20c6151:     {
1:20c6151:         ResultSet rs = ps.executeQuery();
1:20c6151:         while (rs.next()) {
1:20c6151:             rs.getInt(1);
1:20c6151:             rs.getInt(2);
1:20c6151:             rs.getInt(3);
1:20c6151:         }
1:20c6151:         rs.close();    
1:20c6151:     }
1:20c6151:     
1:20c6151:     /**
1:20c6151:      * cleanup resources
1:20c6151:      */
1:20c6151:     public void tearDown() throws Exception
1:20c6151:     {
1:20c6151:         println("ValuesTest::tearDown");
1:20c6151:         ps.close();
1:20c6151:         ps = null;
1:20c6151:         super.tearDown();
1:20c6151:     }
1:20c6151: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("ValuesTest");
1:         BaseTestSuite client = new BaseTestSuite("Client_ValuesTest");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:20c6151
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class ValuesTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.PreparedStatement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Add performance tests that use VALUES statement 
1:  */
1: public class ValuesTest extends JDBCPerfTestCase{
1:     
1:     private PreparedStatement ps;
1:     
1:     /**
1:      * @return Tests that should be run as part of this class.
1:      */
1:     public static Test suite()
1:     {
1:         int iterations = 100000;
1:         int repeats = 4;
1:         
0:         TestSuite suite = new TestSuite("ValuesTest");
1:         
1:         // To add embed tests.
1:         suite.addTest(new ValuesTest("fetchByColumnName",iterations,repeats));
1:         suite.addTest(new ValuesTest("fetchByColumnNumber",iterations,repeats));
1:         
1:         // To add client tests.
0:         TestSuite client = new TestSuite("Client_ValuesTest");
1:         client.addTest(new ValuesTest("fetchByColumnName",iterations,repeats));
1:         client.addTest(new ValuesTest("fetchByColumnNumber",iterations,repeats));
1:         suite.addTest(TestConfiguration.clientServerDecorator(client));
1:         
1:         return suite;   
1:     }
1:     
1:     
1:     public ValuesTest(String name,int iterations,int repeats) {
1:         super(name,iterations,repeats);
1:     }
1:     
1:     public ValuesTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Setup for the tests that query the simple VALUES statement.
1:      * Open a connection to the database, and prepare the query here
1:      */
1:     public void setUp() throws SQLException
1:     {
1:         println("Setup()::ValuesTest");
1:         ps = openDefaultConnection().prepareStatement(
1:                 "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5)) AS"+
1:                 " T(\"cOlumN1\", COLUMN2, \"column3\")",
1:                 ResultSet.TYPE_FORWARD_ONLY,
1:                 ResultSet.CONCUR_READ_ONLY,
1:                 ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         
1:     }
1:     
1:     /**
1:      * Query is a simple VALUES statement.
1:      * <P>
1:      * "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4),
1:      * (5,5,5)) AS T(\"cOlumN1\", COLUMN2, \"column3\")",
1:      * ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, 
1:      * ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:      * <P>
1:      * This test fetches data using column name
1:      */
1:     public void fetchByColumnName()
1:     throws SQLException
1:     {
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             rs.getInt("column1");
1:             rs.getInt("COLUMN2");
1:             rs.getInt("column3");
1:         }
1:         rs.close();    
1:     }
1:     
1:     /**
1:      * Query is a simple VALUES statement.
1:      * <P>
1:      * "SELECT * FROM TABLE(VALUES (1,1,1), (2,2,2), (3,3,3), (4,4,4), 
1:      * (5,5,5)) AS T(\"cOlumN1\", COLUMN2, \"column3\")",
1:      * ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, 
1:      * ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:      * <P>
1:      * This test fetches data using column number
1:      */
1:     public void fetchByColumnNumber()
1:     throws SQLException
1:     {
1:         ResultSet rs = ps.executeQuery();
1:         while (rs.next()) {
1:             rs.getInt(1);
1:             rs.getInt(2);
1:             rs.getInt(3);
1:         }
1:         rs.close();    
1:     }
1:     
1:     /**
1:      * cleanup resources
1:      */
1:     public void tearDown() throws Exception
1:     {
1:         println("ValuesTest::tearDown");
1:         ps.close();
1:         ps = null;
1:         super.tearDown();
1:     }
1: }
============================================================================