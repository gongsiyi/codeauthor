1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.StreamLogScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogScan;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	LogScan provides methods to read a log record and get its LogInstant
1:eac0369: 	in an already defined scan.  A logscan also needs to know how to advance to
1:eac0369: 	the next log record.
1:eac0369: */
1:eac0369: 
1:eac0369: public interface StreamLogScan extends LogScan {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the next record in the scan and place its data in the passed in
1:eac0369: 		array.  The scan is advanced to the next log record.
1:eac0369: 	    If the input array is of insufficient size, getNextRecord must expand
1:eac0369: 		the array to accomodate the log record.  User can optionally pass in a
1:eac0369: 		transaction Id and a group mask.  If provided, only log record that
1:eac0369: 		matches the transaction Id and the group mask is returned.
1:eac0369: 
1:75b112d: 		@param input        the ArrayInputStream to put the log record
1:75b112d: 		@param tranId       if non-null, only log record that equals tranId 
1:75b112d:                             will be returned.  If null, log records are not 
1:75b112d:                             filtered on transaction Id. 
1:75b112d: 		@param groupmask    if non-zero, only log record whose Loggable's group
1:75b112d:                             value is included in the groupmask is returned.  
1:75b112d:                             groupmask can be a bit wise OR of many Loggable 
1:75b112d:                             groups.  If zero, log records are not filtered on 
1:75b112d:                             the Loggable's group.
1:eac0369: 
1:eac0369: 		@return an object that represents the log record, return null if the
1:eac0369: 		scan has completed. 
1:eac0369: 
1:eac0369: 		@exception StandardException Standard Clooudscape error policy
1:eac0369: 		@exception IOException       Some I/O exception raised during reading 
1:eac0369:                                      the log record.
1:eac0369: 	*/
1:eac0369: 	public LogRecord getNextRecord(ArrayInputStream input, 
1:eac0369: 								   TransactionId tranId, 
1:eac0369: 								   int groupmask) 
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the instant of the record just retrieved with getNextRecord(). 
1:eac0369: 		@return INVALID_LOG_INSTANT if no records have been returned yet or
1:eac0369: 		the scan has completed.
1:eac0369: 	*/
1:eac0369: 	public long getInstant();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the log instant that is right after the record just retrieved with
1:eac0369: 		getNextRecord().  Only valid for a forward scan and on a successful
1:eac0369: 		retrieval.
1:eac0369: 
1:eac0369: 		@return INVALID_LOG_INSTANT if this is not a FORWARD scan or, no
1:eac0369: 		record have been returned yet or the scan has completed.
1:eac0369: 	*/
1:eac0369: 	public long getLogRecordEnd();
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	   @return true if  fuzzy log end found during forward scan, this happens
1:eac0369: 	   if there was a partially written log records before the crash.
1:eac0369: 	*/
1:eac0369: 	public boolean isLogEndFuzzy();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	    Get the LogInstant for the record just retrieved with getNextRecord().
1:eac0369: 		@return null if no records have been returned yet or the scan has
1:eac0369: 		completed.
1:eac0369: 		*/
1:eac0369: 	public LogInstant getLogInstant();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Reset the scan to the given LogInstant so that getNextRecord get the
1:eac0369: 		log record AFTER the given LogInstant.
1:eac0369: 
1:eac0369: 		@param instant the log instant to reset to
1:eac0369: 
1:eac0369: 		@exception IOException       Some I/O exception raised when accessing 
1:eac0369:                                      the log file
1:eac0369: 		@exception StandardException reset to illegal position or beyond the
1:eac0369: 		                             limit of the scan.
1:eac0369: 	*/
1:eac0369: 	public void resetPosition(LogInstant instant) 
1:eac0369: 		 throws IOException, StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Close this log scan.
1:eac0369: 	*/
1:eac0369: 	public void close();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:75b112d
/////////////////////////////////////////////////////////////////////////
1: 		@param input        the ArrayInputStream to put the log record
1: 		@param tranId       if non-null, only log record that equals tranId 
1:                             will be returned.  If null, log records are not 
1:                             filtered on transaction Id. 
1: 		@param groupmask    if non-zero, only log record whose Loggable's group
1:                             value is included in the groupmask is returned.  
1:                             groupmask can be a bit wise OR of many Loggable 
1:                             groups.  If zero, log records are not filtered on 
1:                             the Loggable's group.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.StreamLogScan
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.log.LogScan;
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: 
1: /**
1: 	LogScan provides methods to read a log record and get its LogInstant
1: 	in an already defined scan.  A logscan also needs to know how to advance to
1: 	the next log record.
1: */
1: 
1: public interface StreamLogScan extends LogScan {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/**
1: 		Get the next record in the scan and place its data in the passed in
1: 		array.  The scan is advanced to the next log record.
1: 	    If the input array is of insufficient size, getNextRecord must expand
1: 		the array to accomodate the log record.  User can optionally pass in a
1: 		transaction Id and a group mask.  If provided, only log record that
1: 		matches the transaction Id and the group mask is returned.
1: 
0: 		@param input the ArrayInputStream to put the log record
0: 		@param logicalInput the logical input stream that is attached to input
0: 		@param tranId if non-null, only log record that equals tranId will be
0: 		returned.  If null, log records are not filtered on transaction Id. 
0: 		@param groupmask, if non-zero, only log record whose Loggable's group
0: 		value is included in the groupmask is returned.  groupmask can be a bit
0: 		wise OR of many Loggable groups.  If zero, log records are not filtered
0: 		on the Loggable's group.
1: 
1: 		@return an object that represents the log record, return null if the
1: 		scan has completed. 
1: 
1: 		@exception StandardException Standard Clooudscape error policy
1: 		@exception IOException       Some I/O exception raised during reading 
1:                                      the log record.
1: 	*/
1: 	public LogRecord getNextRecord(ArrayInputStream input, 
1: 								   TransactionId tranId, 
1: 								   int groupmask) 
1: 		 throws StandardException, IOException;
1: 
1: 
1: 	/**
1: 		Get the instant of the record just retrieved with getNextRecord(). 
1: 		@return INVALID_LOG_INSTANT if no records have been returned yet or
1: 		the scan has completed.
1: 	*/
1: 	public long getInstant();
1: 
1: 	/**
1: 		Get the log instant that is right after the record just retrieved with
1: 		getNextRecord().  Only valid for a forward scan and on a successful
1: 		retrieval.
1: 
1: 		@return INVALID_LOG_INSTANT if this is not a FORWARD scan or, no
1: 		record have been returned yet or the scan has completed.
1: 	*/
1: 	public long getLogRecordEnd();
1: 	
1: 	/**
1: 	   @return true if  fuzzy log end found during forward scan, this happens
1: 	   if there was a partially written log records before the crash.
1: 	*/
1: 	public boolean isLogEndFuzzy();
1: 
1: 	/**
1: 	    Get the LogInstant for the record just retrieved with getNextRecord().
1: 		@return null if no records have been returned yet or the scan has
1: 		completed.
1: 		*/
1: 	public LogInstant getLogInstant();
1: 
1: 	/**
1: 		Reset the scan to the given LogInstant so that getNextRecord get the
1: 		log record AFTER the given LogInstant.
1: 
1: 		@param instant the log instant to reset to
1: 
1: 		@exception IOException       Some I/O exception raised when accessing 
1:                                      the log file
1: 		@exception StandardException reset to illegal position or beyond the
1: 		                             limit of the scan.
1: 	*/
1: 	public void resetPosition(LogInstant instant) 
1: 		 throws IOException, StandardException;
1: 
1: 	/**
1: 		Close this log scan.
1: 	*/
1: 	public void close();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.log.LogScan;
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: 
0: /**
0: 	LogScan provides methods to read a log record and get its LogInstant
0: 	in an already defined scan.  A logscan also needs to know how to advance to
0: 	the next log record.
0: */
0: 
0: public interface StreamLogScan extends LogScan {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/**
0: 		Get the next record in the scan and place its data in the passed in
0: 		array.  The scan is advanced to the next log record.
0: 	    If the input array is of insufficient size, getNextRecord must expand
0: 		the array to accomodate the log record.  User can optionally pass in a
0: 		transaction Id and a group mask.  If provided, only log record that
0: 		matches the transaction Id and the group mask is returned.
0: 
0: 		@param input the ArrayInputStream to put the log record
0: 		@param logicalInput the logical input stream that is attached to input
0: 		@param tranId if non-null, only log record that equals tranId will be
0: 		returned.  If null, log records are not filtered on transaction Id. 
0: 		@param groupmask, if non-zero, only log record whose Loggable's group
0: 		value is included in the groupmask is returned.  groupmask can be a bit
0: 		wise OR of many Loggable groups.  If zero, log records are not filtered
0: 		on the Loggable's group.
0: 
0: 		@return an object that represents the log record, return null if the
0: 		scan has completed. 
0: 
0: 		@exception StandardException Standard Clooudscape error policy
0: 		@exception IOException       Some I/O exception raised during reading 
0:                                      the log record.
0: 	*/
0: 	public LogRecord getNextRecord(ArrayInputStream input, 
0: 								   TransactionId tranId, 
0: 								   int groupmask) 
0: 		 throws StandardException, IOException;
0: 
0: 
0: 	/**
0: 		Get the instant of the record just retrieved with getNextRecord(). 
0: 		@return INVALID_LOG_INSTANT if no records have been returned yet or
0: 		the scan has completed.
0: 	*/
0: 	public long getInstant();
0: 
0: 	/**
0: 		Get the log instant that is right after the record just retrieved with
0: 		getNextRecord().  Only valid for a forward scan and on a successful
0: 		retrieval.
0: 
0: 		@return INVALID_LOG_INSTANT if this is not a FORWARD scan or, no
0: 		record have been returned yet or the scan has completed.
0: 	*/
0: 	public long getLogRecordEnd();
0: 	
0: 	/**
0: 	   @return true if  fuzzy log end found during forward scan, this happens
0: 	   if there was a partially written log records before the crash.
0: 	*/
0: 	public boolean isLogEndFuzzy();
0: 
0: 	/**
0: 	    Get the LogInstant for the record just retrieved with getNextRecord().
0: 		@return null if no records have been returned yet or the scan has
0: 		completed.
0: 		*/
0: 	public LogInstant getLogInstant();
0: 
0: 	/**
0: 		Reset the scan to the given LogInstant so that getNextRecord get the
0: 		log record AFTER the given LogInstant.
0: 
0: 		@param instant the log instant to reset to
0: 
0: 		@exception IOException       Some I/O exception raised when accessing 
0:                                      the log file
0: 		@exception StandardException reset to illegal position or beyond the
0: 		                             limit of the scan.
0: 	*/
0: 	public void resetPosition(LogInstant instant) 
0: 		 throws IOException, StandardException;
0: 
0: 	/**
0: 		Close this log scan.
0: 	*/
0: 	public void close();
0: }
============================================================================