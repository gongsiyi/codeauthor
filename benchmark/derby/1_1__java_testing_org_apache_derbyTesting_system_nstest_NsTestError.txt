1:c043274: /*
1:c043274: 
1:c043274:  Derby - Class org.apache.derbyTesting.system.nstest.NsTestError
1:c043274: 
1:c043274:  Licensed to the Apache Software Foundation (ASF) under one or more
1:c043274:  contributor license agreements.  See the NOTICE file distributed with
1:c043274:  this work for additional information regarding copyright ownership.
1:c043274:  The ASF licenses this file to You under the Apache License, Version 2.0
1:c043274:  (the "License"); you may not use this file except in compliance with
1:c043274:  the License.  You may obtain a copy of the License at
1:c043274: 
1:c043274:  http://www.apache.org/licenses/LICENSE-2.0
1:c043274: 
1:c043274:  Unless required by applicable law or agreed to in writing, software
1:c043274:  distributed under the License is distributed on an "AS IS" BASIS,
1:c043274:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c043274:  See the License for the specific language governing permissions and
1:c043274:  limitations under the License.
1:c043274: 
1:c043274:  */
1:c043274: package org.apache.derbyTesting.system.nstest;
1:c043274: 
1:c043274: /**
1:c043274:  * <p>
1:c043274:  * An descriptor for an error seen by NsTest. These are placed in a
1:c043274:  * HashMap keyed by the error's stack trace.
1:c043274:  * </p>
1:c043274:  */
1:2c381e0: public  class   NsTestError implements Comparable<NsTestError>
1:c043274: {
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // CONSTANTS
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // STATE
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     private Throwable   _throwable;
1:c043274:     private int             _count;
1:5ccbc16:     private long            _firstOccurrenceTime;
1:5ccbc16:     private long            _lastOccurrenceTime;
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // CONSTRUCTOR
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     /** Construct from a Throwable */
1:c043274:     public  NsTestError( Throwable throwable )
1:c043274:     {
1:c043274:         _throwable = throwable;
1:c043274:         _count = 1;
1:5ccbc16:         _firstOccurrenceTime = System.currentTimeMillis();
1:5ccbc16:         _lastOccurrenceTime = _firstOccurrenceTime;
1:c043274:     }
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // ACCESSORS
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     /** Get the Throwable wrapped by this descriptor */
1:c043274:     public  Throwable   throwable() { return _throwable; }
1:c043274: 
1:c043274:     /** Get the number of times this error was seen */
1:c043274:     public  int count() { return _count; }
1:5ccbc16: 
1:5ccbc16:     /** Get the timestamp of the first occurrence */
1:5ccbc16:     public  long    getFirstOccurrenceTime() { return _firstOccurrenceTime; }
1:5ccbc16: 
1:5ccbc16:     /** Get the timestamp of the last occurrence */
1:5ccbc16:     public  long    getLastOccurrenceTime() { return _lastOccurrenceTime; }
1:c043274:   
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:2c381e0:     // Comparable BEHAVIOR
1:2c381e0:     //
1:2c381e0:     ///////////////////////////////////////////////////////////////////////////////////
1:2c381e0: 
1:2c381e0:     public  int compareTo( NsTestError that )
1:2c381e0:     {
1:2c381e0:         if ( that == null ) { return -1; }
1:2c381e0:         else
1:2c381e0:         {
1:2c381e0:             long    thisVal = this._firstOccurrenceTime;
1:2c381e0:             long    thatVal = that._firstOccurrenceTime;
1:2c381e0: 
1:2c381e0:             if ( thisVal < thatVal ) { return -1; }
1:2c381e0:             else if ( thisVal > thatVal ) { return 1; }
1:2c381e0:             else { return 0; }
1:2c381e0:         }
1:2c381e0:     }
1:2c381e0: 
1:2c381e0:     ///////////////////////////////////////////////////////////////////////////////////
1:2c381e0:     //
1:c043274:     // OTHER BEHAVIOR
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     /** Increment the number of times this error was seen */
1:5ccbc16:     public  void    increment()
1:5ccbc16:     {
1:5ccbc16:         _count++;
1:5ccbc16:         _lastOccurrenceTime = System.currentTimeMillis();
1:5ccbc16:     }
1:c043274:     
1:c043274: }
1:c043274: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2c381e0
/////////////////////////////////////////////////////////////////////////
1: public  class   NsTestError implements Comparable<NsTestError>
/////////////////////////////////////////////////////////////////////////
1:     // Comparable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  int compareTo( NsTestError that )
1:     {
1:         if ( that == null ) { return -1; }
1:         else
1:         {
1:             long    thisVal = this._firstOccurrenceTime;
1:             long    thatVal = that._firstOccurrenceTime;
1: 
1:             if ( thisVal < thatVal ) { return -1; }
1:             else if ( thisVal > thatVal ) { return 1; }
1:             else { return 0; }
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:5ccbc16
/////////////////////////////////////////////////////////////////////////
1:     private long            _firstOccurrenceTime;
1:     private long            _lastOccurrenceTime;
/////////////////////////////////////////////////////////////////////////
1:         _firstOccurrenceTime = System.currentTimeMillis();
1:         _lastOccurrenceTime = _firstOccurrenceTime;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the timestamp of the first occurrence */
1:     public  long    getFirstOccurrenceTime() { return _firstOccurrenceTime; }
1: 
1:     /** Get the timestamp of the last occurrence */
1:     public  long    getLastOccurrenceTime() { return _lastOccurrenceTime; }
/////////////////////////////////////////////////////////////////////////
1:     public  void    increment()
1:     {
1:         _count++;
1:         _lastOccurrenceTime = System.currentTimeMillis();
1:     }
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.NsTestError
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.system.nstest;
1: 
1: /**
1:  * <p>
1:  * An descriptor for an error seen by NsTest. These are placed in a
1:  * HashMap keyed by the error's stack trace.
1:  * </p>
1:  */
0: public  class   NsTestError
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private Throwable   _throwable;
1:     private int             _count;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct from a Throwable */
1:     public  NsTestError( Throwable throwable )
1:     {
1:         _throwable = throwable;
1:         _count = 1;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the Throwable wrapped by this descriptor */
1:     public  Throwable   throwable() { return _throwable; }
1: 
1:     /** Get the number of times this error was seen */
1:     public  int count() { return _count; }
1:   
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Increment the number of times this error was seen */
0:     public  void    increment() { _count++; }
1:     
1: }
1: 
============================================================================