1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.GClass
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.compiler.ClassBuilder;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedClass;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.File;
1:03e89c8: import java.io.FileNotFoundException;
1:eac0369: import java.io.FileOutputStream;
1:eac0369: import java.io.IOException;
1:03e89c8: import java.security.AccessController;
1:03e89c8: import java.security.PrivilegedActionException;
1:03e89c8: import java.security.PrivilegedExceptionAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is a common superclass for the various impls.
1:eac0369:  * Saving class files is a common thing to do.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public abstract class GClass implements ClassBuilder {
1:eac0369: 
1:eac0369: 	protected ByteArray bytecode;
1:eac0369: 	protected final ClassFactory cf;
1:eac0369: 	protected final String qualifiedName;
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	public GClass(ClassFactory cf, String qualifiedName) {
1:eac0369: 		this.cf = cf;
1:eac0369: 		this.qualifiedName = qualifiedName;
1:eac0369: 	}
1:eac0369: 	public String getFullName() {
1:eac0369: 		return qualifiedName;
1:eac0369: 	}
1:eac0369: 	public GeneratedClass getGeneratedClass() throws StandardException {
1:eac0369: 		return cf.loadGeneratedClass(qualifiedName, getClassBytecode());
1:eac0369: 	}
1:eac0369: 
1:a9b4b8d: 	protected void writeClassFile(String dir, boolean logMessage, Throwable t)
1:a9b4b8d: 		throws StandardException {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 		if (bytecode ==  null) getClassBytecode(); // not recursing...
1:eac0369: 
1:eac0369: 		if (dir == null) dir="";
1:eac0369: 
1:eac0369: 		String filename = getName(); // leave off package
1:eac0369: 
1:eac0369: 		filename = filename + ".class";
1:eac0369: 
1:03e89c8: 		final File classFile = new File(dir,filename);
1:eac0369: 
1:03e89c8: 		FileOutputStream fos = null;
1:eac0369: 		try {
1:03e89c8: 			try {
1:a15a470: 				fos =  AccessController.doPrivileged(
1:a15a470: 						new PrivilegedExceptionAction<FileOutputStream>() {
1:a15a470: 							public FileOutputStream run()
1:03e89c8: 							throws FileNotFoundException {
1:03e89c8: 								return new FileOutputStream(classFile);
1:03e89c8: 							}
1:03e89c8: 						});
1:03e89c8: 			} catch (PrivilegedActionException pae) {
1:03e89c8: 				throw (FileNotFoundException)pae.getCause();
1:03e89c8: 			}
1:03e89c8: 			fos.write(bytecode.getArray(),
1:eac0369: 				bytecode.getOffset(), bytecode.getLength());
1:03e89c8: 			fos.flush();
1:eac0369: 			if (logMessage) {
1:39244bf: 		        // find the error stream
1:39244bf: 		        HeaderPrintWriter errorStream = Monitor.getStream();
1:eac0369: 				errorStream.printlnWithHeader("Wrote class "+getFullName()+" to file "+classFile.toString()+". Please provide support with the file and the following exception message: "+t);
1:eac0369: 			}
1:03e89c8: 			fos.close();
1:eac0369: 		} catch (IOException e) {
1:eac0369: 			if (SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Unable to write .class file", e);
1:eac0369: 		}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:c134d32: 	final void validateType(String typeName1)
1:eac0369: 	{
1:eac0369: 	    if (SanityManager.DEBUG)
1:eac0369: 	    {
1:eac0369:             SanityManager.ASSERT(typeName1 != null);
1:eac0369: 
1:eac0369:             String typeName = typeName1.trim();
1:eac0369: 
1:c134d32:             if ("void".equals(typeName)) return;
1:c134d32: 
1:eac0369: 	        // first remove all array-ness
1:eac0369: 	        while (typeName.endsWith("[]")) typeName = typeName.substring(0,typeName.length()-2);
1:eac0369: 
1:eac0369:             SanityManager.ASSERT(typeName.length() > 0);
1:eac0369: 
1:eac0369: 	        // then check for primitive types
1:eac0369: 	        if ("boolean".equals(typeName)) return;
1:eac0369: 	        if ("byte".equals(typeName)) return;
1:eac0369: 	        if ("char".equals(typeName)) return;
1:eac0369: 	        if ("double".equals(typeName)) return;
1:eac0369: 	        if ("float".equals(typeName)) return;
1:eac0369: 	        if ("int".equals(typeName)) return;
1:eac0369: 	        if ("long".equals(typeName)) return;
1:eac0369: 	        if ("short".equals(typeName)) return;
1:eac0369: 
1:eac0369: 	        // then see if it can be found
1:eac0369: 	        // REVISIT: this will fail if ASSERT is on and the
1:eac0369: 	        // implementation at hand is missing the target type.
1:eac0369: 	        // We do plan to generate classes against
1:eac0369: 	        // different implementations from the compiler's implementation
1:eac0369: 	        // at some point...
1:eac0369: 			try {
1:eac0369: 				if (cf == null)
1:eac0369: 					Class.forName(typeName);
1:eac0369: 				else
1:eac0369: 					cf.loadApplicationClass(typeName);
1:eac0369: 			} catch (ClassNotFoundException cnfe) {
1:e7d2a42: 				SanityManager.THROWASSERT("Class "+typeName+" not found", cnfe);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 	        // all the checks succeeded, it must be okay.
1:eac0369: 	        return;
1:eac0369: 	    }
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: 				fos =  AccessController.doPrivileged(
1: 						new PrivilegedExceptionAction<FileOutputStream>() {
1: 							public FileOutputStream run()
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Lily Wei
-------------------------------------------------------------------------------
commit:39244bf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		        // find the error stream
1: 		        HeaderPrintWriter errorStream = Monitor.getStream();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:03e89c8
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 		final File classFile = new File(dir,filename);
1: 		FileOutputStream fos = null;
1: 			try {
0: 				fos =  (FileOutputStream)AccessController.doPrivileged(
0: 						new PrivilegedExceptionAction() {
0: 							public Object run()
1: 							throws FileNotFoundException {
1: 								return new FileOutputStream(classFile);
1: 							}
1: 						});
1: 			} catch (PrivilegedActionException pae) {
1: 				throw (FileNotFoundException)pae.getCause();
1: 			}
1: 			fos.write(bytecode.getArray(),
1: 			fos.flush();
1: 			fos.close();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unable to write .class file", e);
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Class "+typeName+" not found", cnfe);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c134d32
/////////////////////////////////////////////////////////////////////////
1: 	final void validateType(String typeName1)
/////////////////////////////////////////////////////////////////////////
1:             if ("void".equals(typeName)) return;
1: 
/////////////////////////////////////////////////////////////////////////
commit:a9b4b8d
/////////////////////////////////////////////////////////////////////////
1: 	protected void writeClassFile(String dir, boolean logMessage, Throwable t)
1: 		throws StandardException {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.GClass
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import org.apache.derby.iapi.services.compiler.ClassBuilder;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.loader.GeneratedClass;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: 
1: /**
1:  * This is a common superclass for the various impls.
1:  * Saving class files is a common thing to do.
1:  *
0:  * @author ames
1:  */
1: public abstract class GClass implements ClassBuilder {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	protected ByteArray bytecode;
1: 	protected final ClassFactory cf;
1: 	protected final String qualifiedName;
1: 
1: 
1: 
1: 	public GClass(ClassFactory cf, String qualifiedName) {
1: 		this.cf = cf;
1: 		this.qualifiedName = qualifiedName;
1: 	}
1: 	public String getFullName() {
1: 		return qualifiedName;
1: 	}
1: 	public GeneratedClass getGeneratedClass() throws StandardException {
1: 		return cf.loadGeneratedClass(qualifiedName, getClassBytecode());
1: 	}
1: 
0: 	protected void writeClassFile(String dir, boolean logMessage, Throwable t) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 		if (bytecode ==  null) getClassBytecode(); // not recursing...
1: 
1: 		if (dir == null) dir="";
1: 
1: 		String filename = getName(); // leave off package
1: 
1: 		filename = filename + ".class";
1: 
0: 		File classFile = new File(dir,filename);
1: 
0: 		// find the error stream
0: 		HeaderPrintWriter errorStream = Monitor.getStream();
1: 
1: 		try {
0: 			FileOutputStream fis = new FileOutputStream(classFile);
0: 			fis.write(bytecode.getArray(),
1: 				bytecode.getOffset(), bytecode.getLength());
0: 			fis.flush();
1: 			if (logMessage) {
1: 				errorStream.printlnWithHeader("Wrote class "+getFullName()+" to file "+classFile.toString()+". Please provide support with the file and the following exception message: "+t);
1: 			}
0: 			fis.close();
1: 		} catch (IOException e) {
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unable to write .class file");
1: 		}
1: 		}
1: 	}
1: 
0: 	public final void validateType(String typeName1)
1: 	{
1: 	    if (SanityManager.DEBUG)
1: 	    {
1:             SanityManager.ASSERT(typeName1 != null);
1: 
1:             String typeName = typeName1.trim();
1: 
1: 	        // first remove all array-ness
1: 	        while (typeName.endsWith("[]")) typeName = typeName.substring(0,typeName.length()-2);
1: 
1:             SanityManager.ASSERT(typeName.length() > 0);
1: 
1: 	        // then check for primitive types
1: 	        if ("boolean".equals(typeName)) return;
1: 	        if ("byte".equals(typeName)) return;
1: 	        if ("char".equals(typeName)) return;
1: 	        if ("double".equals(typeName)) return;
1: 	        if ("float".equals(typeName)) return;
1: 	        if ("int".equals(typeName)) return;
1: 	        if ("long".equals(typeName)) return;
1: 	        if ("short".equals(typeName)) return;
0: 	        if ("void".equals(typeName)) return;
1: 
1: 	        // then see if it can be found
1: 	        // REVISIT: this will fail if ASSERT is on and the
1: 	        // implementation at hand is missing the target type.
1: 	        // We do plan to generate classes against
1: 	        // different implementations from the compiler's implementation
1: 	        // at some point...
1: 			try {
1: 				if (cf == null)
1: 					Class.forName(typeName);
1: 				else
1: 					cf.loadApplicationClass(typeName);
1: 			} catch (ClassNotFoundException cnfe) {
0: 				SanityManager.THROWASSERT("Class "+typeName+" not found");
1: 			}
1: 
1: 	        // all the checks succeeded, it must be okay.
1: 	        return;
1: 	    }
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.loader.GeneratedClass;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: 
0: /**
0:  * This is a common superclass for the various impls.
0:  * Saving class files is a common thing to do.
0:  *
0:  * @author ames
0:  */
0: public abstract class GClass implements ClassBuilder {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	protected ByteArray bytecode;
0: 	protected final ClassFactory cf;
0: 	protected final String qualifiedName;
0: 
0: 
0: 
0: 	public GClass(ClassFactory cf, String qualifiedName) {
0: 		this.cf = cf;
0: 		this.qualifiedName = qualifiedName;
0: 	}
0: 	public String getFullName() {
0: 		return qualifiedName;
0: 	}
0: 	public GeneratedClass getGeneratedClass() throws StandardException {
0: 		return cf.loadGeneratedClass(qualifiedName, getClassBytecode());
0: 	}
0: 
0: 	protected void writeClassFile(String dir, boolean logMessage, Throwable t) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 		if (bytecode ==  null) getClassBytecode(); // not recursing...
0: 
0: 		if (dir == null) dir="";
0: 
0: 		String filename = getName(); // leave off package
0: 
0: 		filename = filename + ".class";
0: 
0: 		File classFile = new File(dir,filename);
0: 
0: 		// find the error stream
0: 		HeaderPrintWriter errorStream = Monitor.getStream();
0: 
0: 		try {
0: 			FileOutputStream fis = new FileOutputStream(classFile);
0: 			fis.write(bytecode.getArray(),
0: 				bytecode.getOffset(), bytecode.getLength());
0: 			fis.flush();
0: 			if (logMessage) {
0: 				errorStream.printlnWithHeader("Wrote class "+getFullName()+" to file "+classFile.toString()+". Please provide support with the file and the following exception message: "+t);
0: 			}
0: 			fis.close();
0: 		} catch (IOException e) {
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unable to write .class file");
0: 		}
0: 		}
0: 	}
0: 
0: 	public final void validateType(String typeName1)
0: 	{
0: 	    if (SanityManager.DEBUG)
0: 	    {
0:             SanityManager.ASSERT(typeName1 != null);
0: 
0:             String typeName = typeName1.trim();
0: 
0: 	        // first remove all array-ness
0: 	        while (typeName.endsWith("[]")) typeName = typeName.substring(0,typeName.length()-2);
0: 
0:             SanityManager.ASSERT(typeName.length() > 0);
0: 
0: 	        // then check for primitive types
0: 	        if ("boolean".equals(typeName)) return;
0: 	        if ("byte".equals(typeName)) return;
0: 	        if ("char".equals(typeName)) return;
0: 	        if ("double".equals(typeName)) return;
0: 	        if ("float".equals(typeName)) return;
0: 	        if ("int".equals(typeName)) return;
0: 	        if ("long".equals(typeName)) return;
0: 	        if ("short".equals(typeName)) return;
0: 	        if ("void".equals(typeName)) return;
0: 
0: 	        // then see if it can be found
0: 	        // REVISIT: this will fail if ASSERT is on and the
0: 	        // implementation at hand is missing the target type.
0: 	        // We do plan to generate classes against
0: 	        // different implementations from the compiler's implementation
0: 	        // at some point...
0: 			try {
0: 				if (cf == null)
0: 					Class.forName(typeName);
0: 				else
0: 					cf.loadApplicationClass(typeName);
0: 			} catch (ClassNotFoundException cnfe) {
0: 				SanityManager.THROWASSERT("Class "+typeName+" not found");
0: 			}
0: 
0: 	        // all the checks succeeded, it must be okay.
0: 	        return;
0: 	    }
0: 	}
0: }
============================================================================