1:b7730e4: /*
4:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.compile.GrantNode
1:b7730e4: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
2:b7730e4:  */
1:b7730e4: 
1:b7730e4: package	org.apache.derby.impl.sql.compile;
1:b7730e4: 
1:b7730e4: 
1:b7730e4: import java.util.HashMap;
1:b7730e4: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.depend.Provider;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:b7730e4: 
2:b7730e4: /**
1:b7730e4:  * This class represents a GRANT statement.
1:b7730e4:  */
1:3bb140c: class GrantNode extends DDLStatementNode
2:b7730e4: {
1:0061383: 	private PrivilegeNode privileges;
1:3bb140c:     private List<String> grantees;
1:3bb140c: 
1:3bb140c:     /**
1:3bb140c:      * Constructor for a GrantNode.
1:3bb140c:      *
1:3bb140c:      * @param privileges PrivilegesNode
1:3bb140c:      * @param grantees List
1:3bb140c:      * @param cm Context manager
1:3bb140c:      */
1:3bb140c:     GrantNode(PrivilegeNode privileges,
1:3bb140c:               List<String> grantees,
1:3bb140c:               ContextManager cm)
1:3bb140c:     {
1:3bb140c:         super(cm);
1:3bb140c:         this.privileges = privileges;
1:3bb140c:         this.grantees = grantees;
1:3bb140c:     }
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:b7730e4: 	 * for how this should be done for tree printing.
2:b7730e4: 	 *
1:b7730e4: 	 * @return	This object as a String
1:b7730e4: 	 */
1:3bb140c:     @Override
1:b7730e4: 	public String toString()
1:b7730e4: 	{
1:b7730e4: 		if (SanityManager.DEBUG)
1:b7730e4: 		{
1:3bb140c:             StringBuilder sb = new StringBuilder();
1:3bb140c: 
1:3bb140c:             for (String grantee : grantees)
1:b7730e4: 			{
1:b7730e4: 				if( sb.length() > 0)
1:b7730e4: 					sb.append( ",");
1:3bb140c:                 sb.append(grantee);
2:b7730e4: 			}
1:b7730e4: 			return super.toString() +
1:b7730e4: 				   privileges.toString() +
1:b7730e4: 				   "TO: \n" + sb.toString() + "\n";
1:b7730e4: 		}
1:b7730e4: 		else
1:b7730e4: 		{
1:b7730e4: 			return "";
1:b7730e4: 		}
1:b7730e4: 	} // end of toString
1:b7730e4: 
1:3bb140c:     String statementToString()
1:b7730e4: 	{
1:b7730e4: 		return "GRANT";
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	
1:b7730e4: 	/**
1:b7730e4: 	 * Bind this GrantNode. Resolve all table, column, and routine references.
1:b7730e4: 	 *
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException	Standard error policy.
1:b7730e4: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:b7730e4: 	{
1:9d5bd0e: 		privileges = (PrivilegeNode) privileges.bind( new HashMap<Provider,Provider>(), grantees, true);
1:b7730e4: 	} // end of bind
1:b7730e4: 
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 * Create the Constant information that will drive the guts of Execution.
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException	Standard error policy.
1:b7730e4: 	 */
1:3bb140c:     @Override
1:b7730e4: 	public ConstantAction makeConstantAction() throws StandardException
1:b7730e4: 	{
1:b7730e4: 		return getGenericConstantActionFactory().getGrantConstantAction( privileges.makePrivilegeInfo(),
1:b7730e4: 																		 grantees);
1:b7730e4: 	}
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: class GrantNode extends DDLStatementNode
1:     private List<String> grantees;
1: 
1:     /**
1:      * Constructor for a GrantNode.
1:      *
1:      * @param privileges PrivilegesNode
1:      * @param grantees List
1:      * @param cm Context manager
1:      */
1:     GrantNode(PrivilegeNode privileges,
1:               List<String> grantees,
1:               ContextManager cm)
1:     {
1:         super(cm);
0:         setNodeType(C_NodeTypes.GRANT_NODE);
1:         this.privileges = privileges;
1:         this.grantees = grantees;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             StringBuilder sb = new StringBuilder();
1: 
1:             for (String grantee : grantees)
1:                 sb.append(grantee);
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.depend.Provider;
/////////////////////////////////////////////////////////////////////////
1: 		privileges = (PrivilegeNode) privileges.bind( new HashMap<Provider,Provider>(), grantees, true);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
commit:17f7626
/////////////////////////////////////////////////////////////////////////
0: 		privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees, true);
commit:0061383
/////////////////////////////////////////////////////////////////////////
1: 	private PrivilegeNode privileges;
0: 	private List grantees;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:fec62a7
/////////////////////////////////////////////////////////////////////////
0: public class GrantNode extends DDLStatementNode
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:4f5dc7d
/////////////////////////////////////////////////////////////////////////
0: 		privileges = (PrivilegeNode) privileges.bind( new HashMap(), grantees);
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.GrantNode
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.impl.sql.execute.PrivilegeInfo;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.HashMap;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * This class represents a GRANT statement.
1:  */
0: public class GrantNode extends MiscellaneousStatementNode
1: {
0: 	PrivilegeNode privileges;
0: 	List grantees;
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			StringBuffer sb = new StringBuffer();
0: 			for( Iterator it = grantees.iterator(); it.hasNext();)
1: 			{
1: 				if( sb.length() > 0)
1: 					sb.append( ",");
0: 				sb.append( it.next().toString());
1: 			}
1: 			return super.toString() +
1: 				   privileges.toString() +
1: 				   "TO: \n" + sb.toString() + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	} // end of toString
1: 
0: 	public String statementToString()
1: 	{
1: 		return "GRANT";
1: 	}
1: 
1: 	
1: 	/**
0: 	 * Initialize a GrantNode.
1: 	 *
0: 	 * @param privileges PrivilegesNode
0: 	 * @param grantees List
1: 	 */
0: 	public void init( Object privileges,
0: 					  Object grantees)
1: 	{
0: 		this.privileges = (PrivilegeNode) privileges;
0: 		this.grantees = (List) grantees;
1: 	}
1: 
1: 	/**
1: 	 * Bind this GrantNode. Resolve all table, column, and routine references.
1: 	 *
0: 	 * @return the bound GrantNode
1: 	 *
1: 	 * @exception StandardException	Standard error policy.
1: 	 */
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
0: 		privileges = (PrivilegeNode) privileges.bind( new HashMap());
0: 		return this;
1: 	} // end of bind
1: 
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException	Standard error policy.
1: 	 */
1: 	public ConstantAction makeConstantAction() throws StandardException
1: 	{
1: 		return getGenericConstantActionFactory().getGrantConstantAction( privileges.makePrivilegeInfo(),
1: 																		 grantees);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================