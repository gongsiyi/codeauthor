1:678868b: /*
1:678868b:  *
1:678868b:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest
1:678868b:  *
1:678868b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:678868b:  * contributor license agreements.  See the NOTICE file distributed with
1:678868b:  * this work for additional information regarding copyright ownership.
1:678868b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:678868b:  * (the "License"); you may not use this file except in compliance with
1:678868b:  * the License.  You may obtain a copy of the License at
1:678868b:  *
1:678868b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:678868b:  *
1:678868b:  * Unless required by applicable law or agreed to in writing, 
1:678868b:  * software distributed under the License is distributed on an 
1:678868b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:678868b:  * either express or implied. See the License for the specific 
1:678868b:  * language governing permissions and limitations under the License.
2:678868b:  */
2:678868b: 
1:678868b: package org.apache.derbyTesting.functionTests.tests.i18n;
1:678868b: 
1:70bfa37: import java.nio.charset.Charset;
1:678868b: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:678868b: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:678868b: import org.apache.derbyTesting.junit.JDBC;
1:678868b: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:678868b: import org.apache.derbyTesting.junit.TestConfiguration;
1:9698d41: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
1:678868b: 
2:678868b: /**
1:678868b:  * LocalizedDisplayScriptTest runs the ij script LocalizedDisplay.sql
1:678868b:  * and compares the output to a canon file in the standard master package.
1:678868b:  * <BR>
1:678868b:  * Its suite() method returns a set of tests where each test is an instance of
1:678868b:  * this class for an individual script wrapped in a clean database decorator.
1:678868b:  * <BR>
1:678868b:  * It can also be used as a command line program
1:678868b:  *
1:678868b:  */
1:678868b: public final class LocalizedDisplayScriptTest extends ScriptTestCase {
1:678868b: 
1:70bfa37:     /** The character encoding used in the script. */
1:70bfa37:     private static final String ENCODING = "EUC_JP";
1:678868b: 
1:678868b:     /**
1:678868b:      * Run LocalizedDisplay.sql 
1:678868b:      * <code>
1:678868b:      * example
1:678868b:      * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedSuite
1:678868b:      * </code>
1:678868b:      */
1:452c95e:     public static void main(String[] args)
1:678868b:     {
1:678868b:         junit.textui.TestRunner.run(getSuite());
2:678868b:     }
1:678868b: 
1:678868b:     /**
1:678868b:      * Return the suite that runs the Localized script.
1:678868b:      */
1:678868b:     public static Test suite() {
1:678868b:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LocalizedDisplay");
1:678868b: 
1:678868b:         // This test will fail with JSR169, because lack of support for 
1:678868b:         // rs.getBigDecimal() will prevent the localization of numeric and
1:678868b:         // decimal datatypes, and this test includes a decimal datatype
1:678868b:         // (See DERBY-470).
1:678868b:         if (JDBC.vmSupportsJSR169())
1:678868b:             return suite;
1:678868b: 
1:70bfa37:         // DERBY-5678: This test uses EUC_JP encoding. Implementations of the
1:70bfa37:         // Java platform are not required to support that encoding. Skip the
1:70bfa37:         // test if the encoding is not supported.
1:70bfa37:         if (!Charset.isSupported(ENCODING)) {
1:70bfa37:             println("Skip LocalizedDisplayScriptTest because the encoding " +
1:70bfa37:                     ENCODING + " is not supported");
1:678868b:             return suite;
1:678868b:         }
1:678868b: 
1:1ae02c9:         BaseTestSuite localizedEmbeddedTests =
1:1ae02c9:             new BaseTestSuite("LocalizedDisplay:embedded");
1:1ae02c9: 
1:678868b:         localizedEmbeddedTests.addTest(getSuite());
1:678868b:         Test embeddedrun = TestConfiguration.singleUseDatabaseDecorator(localizedEmbeddedTests);
1:678868b:         // add the client test
1:678868b:         suite.addTest(embeddedrun);
1:678868b: 
1:678868b:         // It's not working to have both embedded and client run in the same
1:678868b:         // setting as the database doesn't get deleted until after the suite is done.
1:678868b:         // The second run will go against the already created & encoded database,
1:678868b:         // resulting in localized display by default, and thus a diff with the
1:678868b:         // master.
1:678868b:         // Set up the script's run with the network client
1:1ae02c9:         BaseTestSuite localizedTests =
1:1ae02c9:             new BaseTestSuite("LocalizedDisplay:client");
1:1ae02c9: 
1:678868b:         localizedTests.addTest(getSuite());
1:678868b:         Test client = TestConfiguration.clientServerDecorator(
1:678868b:             TestConfiguration.singleUseDatabaseDecorator(localizedTests));
1:678868b:         // add the client test
1:678868b:         suite.addTest(client);
1:678868b: 
1:678868b:         return suite;
1:678868b:     }
1:678868b: 
1:678868b:     /*
1:678868b:      * A single JUnit test that runs a single Localized script.
1:678868b:      */
1:678868b:     private LocalizedDisplayScriptTest(String localizedTest){
1:70bfa37:         super(localizedTest, ENCODING);
1:678868b:     }
1:678868b: 
1:678868b:     /**
1:678868b:      * Return a localized test based on the script name. 
1:678868b:      * The test is surrounded in a decorator that sets up the
1:678868b:      * desired properties which is wrapped in a decorator
1:9698d41:      * which sets up the timezone wrapped in a decorator
1:678868b:      * that cleans the database.
1:678868b:      */
1:678868b:     private static Test getSuite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("localized Display");
1:678868b:         Properties uiProps = new Properties();
1:678868b:         uiProps.put("derby.ui.locale","es_AR");
1:70bfa37:         uiProps.put("derby.ui.codeset", ENCODING);
1:9698d41:         suite.addTest(new TimeZoneTestSetup(new SystemPropertyTestSetup(
1:9698d41:                 new LocalizedDisplayScriptTest("LocalizedDisplay"), uiProps), 
1:9698d41:                 "America/Los_Angeles"));
1:678868b:         return getIJConfig(suite);
1:678868b:     }
1:678868b:     
1:678868b: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LocalizedDisplay");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite localizedEmbeddedTests =
1:             new BaseTestSuite("LocalizedDisplay:embedded");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite localizedTests =
1:             new BaseTestSuite("LocalizedDisplay:client");
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("localized Display");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9698d41
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * which sets up the timezone wrapped in a decorator
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(new TimeZoneTestSetup(new SystemPropertyTestSetup(
1:                 new LocalizedDisplayScriptTest("LocalizedDisplay"), uiProps), 
1:                 "America/Los_Angeles"));
commit:70c969f
/////////////////////////////////////////////////////////////////////////
0:         super.setUp();
commit:678868b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
1: import java.util.Properties;
0: import java.util.TimeZone;
1: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * LocalizedDisplayScriptTest runs the ij script LocalizedDisplay.sql
1:  * and compares the output to a canon file in the standard master package.
1:  * <BR>
1:  * Its suite() method returns a set of tests where each test is an instance of
1:  * this class for an individual script wrapped in a clean database decorator.
1:  * <BR>
1:  * It can also be used as a command line program
1:  *
1:  */
1: public final class LocalizedDisplayScriptTest extends ScriptTestCase {
1: 
0:     private static TimeZone defaultTimeZone;
1:     
1:     /**
1:      * Run LocalizedDisplay.sql 
1:      * <code>
1:      * example
1:      * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedSuite
1:      * </code>
1:      */
0:     public static void main()
1:     {
1:         junit.textui.TestRunner.run(getSuite());
1:     }
1: 
1:     /**
1:      * Return the suite that runs the Localized script.
1:      */
1:     public static Test suite() {
1:         
0:         TestSuite suite = new TestSuite("LocalizedDisplay");
1: 
0:         // First ensure that we are running in english locale; the output
0:         // master has been created in that locale, and thus, running in any
0:         // other locale will fail.
0:         if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
1:             return suite;
1:         // This test will fail with JSR169, because lack of support for 
1:         // rs.getBigDecimal() will prevent the localization of numeric and
1:         // decimal datatypes, and this test includes a decimal datatype
1:         // (See DERBY-470).
1:         if (JDBC.vmSupportsJSR169())
1:             return suite;
0:         TestSuite localizedEmbeddedTests = new TestSuite("LocalizedDisplay:embedded");
1:         localizedEmbeddedTests.addTest(getSuite());
1:         Test embeddedrun = TestConfiguration.singleUseDatabaseDecorator(localizedEmbeddedTests);
1:         // add the client test
1:         suite.addTest(embeddedrun);
1: 
1:         // It's not working to have both embedded and client run in the same
1:         // setting as the database doesn't get deleted until after the suite is done.
1:         // The second run will go against the already created & encoded database,
1:         // resulting in localized display by default, and thus a diff with the
1:         // master.
1:         // Set up the script's run with the network client
0:         TestSuite localizedTests = new TestSuite("LocalizedDisplay:client");
1:         localizedTests.addTest(getSuite());
1:         Test client = TestConfiguration.clientServerDecorator(
1:             TestConfiguration.singleUseDatabaseDecorator(localizedTests));
1:         // add the client test
1:         suite.addTest(client);
1: 
1:         return suite;
1:     }
1: 
1:     /*
1:      * A single JUnit test that runs a single Localized script.
1:      */
1:     private LocalizedDisplayScriptTest(String localizedTest){
0:         super(localizedTest);
1:     }
1: 
1:     /**
1:      * Return a localized test based on the script name. 
1:      * The test is surrounded in a decorator that sets up the
1:      * desired properties which is wrapped in a decorator
1:      * that cleans the database.
1:      */
1:     private static Test getSuite() {
0:         TestSuite suite = new TestSuite("localized Display");
1:         Properties uiProps = new Properties();
1:         uiProps.put("derby.ui.locale","es_AR");
0:         uiProps.put("derby.ui.codeset","EUC_JP");
0:         suite.addTest(new SystemPropertyTestSetup(
0:                 new LocalizedDisplayScriptTest("LocalizedDisplay"), uiProps));
1:         return getIJConfig(suite);
1:     }
1:     
1:     /**
0:      * Set up the test environment.
1:      */
0:     protected void setUp() {
0:         // the canon contains time columns, which would display localized -
0:         // and so cause errors. Thus, run this with timezone PST.
0:         defaultTimeZone = TimeZone.getDefault(); 
0:         TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles")); 
0:         LocalizedResource.resetLocalizedResourceCache();
1:     }
1:     
0:     public void tearDown() throws Exception {
0:         TimeZone.setDefault(defaultTimeZone); 
0:         LocalizedResource.resetLocalizedResourceCache();
0:         super.tearDown();
1:     }    
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:70bfa37
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /** The character encoding used in the script. */
1:     private static final String ENCODING = "EUC_JP";
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:         // DERBY-5678: This test uses EUC_JP encoding. Implementations of the
1:         // Java platform are not required to support that encoding. Skip the
1:         // test if the encoding is not supported.
1:         if (!Charset.isSupported(ENCODING)) {
1:             println("Skip LocalizedDisplayScriptTest because the encoding " +
1:                     ENCODING + " is not supported");
0:             return suite;
0:         }
0: 
/////////////////////////////////////////////////////////////////////////
1:         super(localizedTest, ENCODING);
/////////////////////////////////////////////////////////////////////////
1:         uiProps.put("derby.ui.codeset", ENCODING);
commit:bdef579
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:452c95e
/////////////////////////////////////////////////////////////////////////
1:     public static void main(String[] args)
commit:617d53c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super(localizedTest, "EUC_JP");
============================================================================