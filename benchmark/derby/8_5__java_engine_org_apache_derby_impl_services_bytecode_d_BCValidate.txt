1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.d_BCValidate
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import java.lang.reflect.*;
1:cd36286: import java.security.AccessController;
1:cd36286: import java.security.PrivilegedAction;
1:eac0369: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import java.util.Hashtable;
1:cd36286: import java.util.Objects;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Validate BC calls.
1:eac0369:  *
1:eac0369:  */
1:eac0369: class d_BCValidate
1:eac0369: {
1:eac0369: 
1:eac0369: 	private static final String[] csPackages = {
1:eac0369: 		"java",
1:eac0369: 		"org.apache.derby.exe.",
1:eac0369: 		"org.apache.derby.iapi.",
1:eac0369: 		"org.apache.derby.jdbc.",
1:eac0369: 		"org.apache.derby.iapi.",
1:eac0369: 		"org.apache.derby.impl.",
1:eac0369: 		"org.apache.derby.authentication.",
1:eac0369: 		"org.apache.derby.catalog.",
1:eac0369: 		"org.apache.derby.iapi.db.",
1:eac0369: 		"org.apache.derby.iapi.types.",
1:eac0369: 		"org.apache.derby.iapi.types.",
1:eac0369: 		"org.apache.derby.catalog.types.",
1:eac0369: 		};
1:eac0369: 
1:eac0369: 
1:eac0369: 	private static final Class[] NO_PARAMS = new Class[0];
1:eac0369: 
1:eac0369: 	static void checkMethod(short opcode, Type dt, String methodName, String[] debugParameterTypes, Type rt) {
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:117d8b5: 			String reason = null;
1:eac0369: 			try {
1:eac0369: 
1:eac0369: 				String declaringClass = dt.javaName();
1:eac0369: 				if (declaringClass.startsWith("org.apache.derby.exe."))
3:eac0369: 					return;
1:eac0369: 
1:94f158a: 				// only validate against Derby engine or Java classes. Not user defined classes
1:eac0369: 				int p;
1:eac0369: 				for (p = 0; p < csPackages.length; p++) {
1:eac0369: 					if (declaringClass.startsWith(csPackages[p]))
1:eac0369: 						break;
1:eac0369: 				}
1:eac0369: 				if (p == csPackages.length)
1:eac0369: 					return;
1:117d8b5: 
1:eac0369: 				Class[] params = NO_PARAMS;
1:117d8b5: 
1:a15a470: 				Class<?> declaring = loadClass(declaringClass);
1:eac0369: 
1:eac0369: 				if (debugParameterTypes != null) {
1:eac0369: 					params = new Class[debugParameterTypes.length];
1:eac0369: 					for (int i = 0; i < debugParameterTypes.length; i++) {
1:eac0369: 						params[i] = loadClass(debugParameterTypes[i]);
1:eac0369: 					}
1:eac0369: 
1:eac0369: 				}
1:eac0369: 				
1:117d8b5: 				// If the class is not in the same class loader then it
1:117d8b5: 				// it must be a non-Derby class. In that case any method etc.
1:117d8b5: 				// being accessed must be public, so don't use the getDeclared
1:117d8b5: 				// methods. Default SecurityManager behaviour is to grant access to public members
1:117d8b5: 				// and members from classes loaded by the same class loader. Thus
1:117d8b5: 				// we try to fall into these categories to avoid having to grant
1:117d8b5: 				// permissions to derby jars for the function tests.
1:cd36286: 
1:117d8b5: 				ClassLoader myLoader = d_BCValidate.class.getClassLoader();
1:cd36286:                 boolean sameClassLoader;
1:cd36286:                 try {
1:cd36286:                     ClassLoader declareLoader = AccessController.doPrivileged(
1:cd36286:                             (PrivilegedAction<ClassLoader>)
1:cd36286:                                     () -> declaring.getClassLoader());
1:cd36286:                     sameClassLoader = Objects.equals(myLoader, declareLoader);
1:cd36286:                 } catch (SecurityException se) {
1:cd36286:                     // getClassLoader is not a mandatory permission for
1:cd36286:                     // derby.jar, so expect that it might fail. If it fails,
1:cd36286:                     // however, we know that it is not the same as myLoader,
1:cd36286:                     // since no permissions are needed for calling
1:cd36286:                     // getClassLoader() on a class that lives in the caller's
1:cd36286:                     // class loader.
1:cd36286:                     sameClassLoader = false;
1:cd36286:                 }
1:117d8b5: 				
1:eac0369: 				String actualReturnType;
1:117d8b5: 
1:eac0369: 				if (methodName.equals("<init>")) {
1:a15a470: 					Constructor<?> c;
1:117d8b5: 					
1:117d8b5: 					if (sameClassLoader)
1:117d8b5: 					{
1:117d8b5: 						c = declaring.getDeclaredConstructor(params);
1:117d8b5: 					}
1:117d8b5: 					else
1:117d8b5: 					{
1:117d8b5: 						c = declaring.getConstructor(params);
1:117d8b5: 						
1:117d8b5: 						// check this construct is declared by this
1:117d8b5: 						// class, has to be, right? But no harm checking.
1:117d8b5: 						if (!c.getDeclaringClass().equals(declaring))
1:117d8b5: 						{
1:117d8b5: 							reason = "constructor " + c.toString() + " declared on " + c.getDeclaringClass() + " expected " + declaring;
1:117d8b5: 						}
1:117d8b5: 					}
1:117d8b5: 					
1:eac0369: 					actualReturnType = "void";
2:eac0369: 				} else {
1:117d8b5: 					Method m;
1:117d8b5: 					
1:117d8b5: 					if (sameClassLoader)
1:117d8b5: 					{
1:117d8b5: 						m = declaring.getDeclaredMethod(methodName, params);
1:117d8b5: 					}
1:117d8b5: 					else
1:117d8b5: 					{
1:117d8b5: 						m = declaring.getMethod(methodName, params);
1:117d8b5: 						
1:117d8b5: 						// check this method is declared by this
1:117d8b5: 						// class? But no harm checking.
1:117d8b5: 						if (!m.getDeclaringClass().equals(declaring))
1:117d8b5: 						{
1:117d8b5: 							reason = "method " + m.toString() + " declared on " + m.getDeclaringClass() + " expected " + declaring;
1:117d8b5: 						}
1:117d8b5: 					}
1:117d8b5: 					
1:eac0369: 					actualReturnType = m.getReturnType().getName();
1:eac0369: 				}
1:117d8b5: 				
1:117d8b5: 				// do we already have a problem?
1:117d8b5: 				if (reason == null)
1:117d8b5: 				{
1:eac0369: 
1:117d8b5: 					Class requestedReturnType = loadClass(rt.javaName());
1:117d8b5: 	
1:117d8b5: 					// check the return type
1:117d8b5: 					if (actualReturnType.equals(requestedReturnType.getName())) {
1:117d8b5: 	
1:117d8b5: 						// check the inteface match
1:117d8b5: 						if (opcode != VMOpcode.INVOKEINTERFACE)
1:117d8b5: 							return;
1:117d8b5: 	
1:117d8b5: 						if (declaring.isInterface())
1:117d8b5: 							return;
1:117d8b5: 	
1:117d8b5: 						reason = "declaring class is not an interface";
1:117d8b5: 	
1:117d8b5: 					} else {
1:117d8b5: 						reason = "return type is " + actualReturnType;
1:117d8b5: 					}
1:eac0369: 				}
1:eac0369: 
1:eac0369: 
1:eac0369: 			} catch (Exception e) {
1:eac0369: 				reason = e.toString();
1:eac0369: 				e.printStackTrace(System.out);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			String sig = dt.javaName() + " >> " + rt.javaName() + " " + methodName + "(";
1:eac0369: 			if (debugParameterTypes != null) {
1:eac0369: 				for (int i = 0; i < debugParameterTypes.length; i++) {
1:eac0369: 					if (i != 0)
1:eac0369: 						sig = sig + ", ";
1:eac0369: 					sig = sig + debugParameterTypes[i];
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			sig = sig + ")";
1:eac0369: 
1:eac0369: 			String msg = "Invalid method " + sig + " because " + reason;
1:eac0369: 
1:eac0369: 			System.out.println(msg);
1:eac0369: 			SanityManager.THROWASSERT(msg);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:a15a470: 	private static Hashtable<String,Class<?>> primitives;
1:eac0369: 
1:eac0369: 	static {
1:eac0369: 		if (SanityManager.DEBUG) {
1:a15a470: 			primitives = new Hashtable<String,Class<?>>();
1:eac0369: 			primitives.put("boolean", Boolean.TYPE);
1:eac0369: 			primitives.put("byte", Byte.TYPE);
1:eac0369: 			primitives.put("char", Character.TYPE);
1:eac0369: 			primitives.put("double", Double.TYPE);
1:eac0369: 			primitives.put("float", Float.TYPE);
1:eac0369: 			primitives.put("int", Integer.TYPE);
1:eac0369: 			primitives.put("long", Long.TYPE);
1:eac0369: 			primitives.put("short", Short.TYPE);
1:eac0369: 			primitives.put("void", Void.TYPE);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 	private static Class loadClass(String name) throws ClassNotFoundException {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			Class c = (Class) primitives.get(name);
1:eac0369: 			if (c != null)
1:eac0369: 				return c;
1:eac0369: 
1:eac0369: 			if (name.endsWith("[]")) {
1:eac0369: 				Class baseClass = loadClass(name.substring(0, name.length() - 2));
1:eac0369: 				return Array.newInstance(baseClass, 0).getClass();
1:eac0369: 			}
1:eac0369: 			
1:eac0369: 			return Class.forName(name);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cd36286
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.util.Objects;
/////////////////////////////////////////////////////////////////////////
1: 
1:                 boolean sameClassLoader;
1:                 try {
1:                     ClassLoader declareLoader = AccessController.doPrivileged(
1:                             (PrivilegedAction<ClassLoader>)
1:                                     () -> declaring.getClassLoader());
1:                     sameClassLoader = Objects.equals(myLoader, declareLoader);
1:                 } catch (SecurityException se) {
1:                     // getClassLoader is not a mandatory permission for
1:                     // derby.jar, so expect that it might fail. If it fails,
1:                     // however, we know that it is not the same as myLoader,
1:                     // since no permissions are needed for calling
1:                     // getClassLoader() on a class that lives in the caller's
1:                     // class loader.
1:                     sameClassLoader = false;
1:                 }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: 				Class<?> declaring = loadClass(declaringClass);
/////////////////////////////////////////////////////////////////////////
1: 					Constructor<?> c;
/////////////////////////////////////////////////////////////////////////
1: 	private static Hashtable<String,Class<?>> primitives;
1: 			primitives = new Hashtable<String,Class<?>>();
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 				// only validate against Derby engine or Java classes. Not user defined classes
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:117d8b5
/////////////////////////////////////////////////////////////////////////
1: 			String reason = null;
/////////////////////////////////////////////////////////////////////////
1: 				
1: 				// If the class is not in the same class loader then it
1: 				// it must be a non-Derby class. In that case any method etc.
1: 				// being accessed must be public, so don't use the getDeclared
1: 				// methods. Default SecurityManager behaviour is to grant access to public members
1: 				// and members from classes loaded by the same class loader. Thus
1: 				// we try to fall into these categories to avoid having to grant
1: 				// permissions to derby jars for the function tests.
1: 				
0: 				ClassLoader declareLoader = declaring.getClassLoader();
1: 				ClassLoader myLoader = d_BCValidate.class.getClassLoader();
1: 				
0: 				boolean sameClassLoader = false;
0: 				if (declareLoader == myLoader)
0: 					sameClassLoader = true;
0: 				else if (declareLoader != null)
0: 					sameClassLoader = declareLoader.equals(myLoader);
1: 				
0: 					Constructor c;
1: 					
1: 					if (sameClassLoader)
1: 					{
1: 						c = declaring.getDeclaredConstructor(params);
1: 					}
1: 					else
1: 					{
1: 						c = declaring.getConstructor(params);
1: 						
1: 						// check this construct is declared by this
1: 						// class, has to be, right? But no harm checking.
1: 						if (!c.getDeclaringClass().equals(declaring))
1: 						{
1: 							reason = "constructor " + c.toString() + " declared on " + c.getDeclaringClass() + " expected " + declaring;
1: 						}
1: 					}
1: 					
1: 					Method m;
1: 					
1: 					if (sameClassLoader)
1: 					{
1: 						m = declaring.getDeclaredMethod(methodName, params);
1: 					}
1: 					else
1: 					{
1: 						m = declaring.getMethod(methodName, params);
1: 						
1: 						// check this method is declared by this
1: 						// class? But no harm checking.
1: 						if (!m.getDeclaringClass().equals(declaring))
1: 						{
1: 							reason = "method " + m.toString() + " declared on " + m.getDeclaringClass() + " expected " + declaring;
1: 						}
1: 					}
1: 					
1: 				
1: 				// do we already have a problem?
1: 				if (reason == null)
1: 				{
1: 					Class requestedReturnType = loadClass(rt.javaName());
1: 	
1: 					// check the return type
1: 					if (actualReturnType.equals(requestedReturnType.getName())) {
1: 	
1: 						// check the inteface match
1: 						if (opcode != VMOpcode.INVOKEINTERFACE)
1: 							return;
1: 	
1: 						if (declaring.isInterface())
1: 							return;
1: 	
1: 						reason = "declaring class is not an interface";
1: 	
1: 					} else {
1: 						reason = "return type is " + actualReturnType;
1: 					}
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.d_BCValidate
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import java.lang.reflect.*;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.util.Hashtable;
0: import org.apache.derby.iapi.services.loader.*;
0: import org.apache.derby.iapi.services.context.*;
1: 
1: /**
1:  * Validate BC calls.
1:  *
0:  * @author jamie
1:  */
1: class d_BCValidate
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private static final String[] csPackages = {
1: 		"java",
1: 		"org.apache.derby.exe.",
1: 		"org.apache.derby.iapi.",
1: 		"org.apache.derby.jdbc.",
1: 		"org.apache.derby.iapi.",
1: 		"org.apache.derby.impl.",
1: 		"org.apache.derby.authentication.",
1: 		"org.apache.derby.catalog.",
1: 		"org.apache.derby.iapi.db.",
1: 		"org.apache.derby.iapi.types.",
1: 		"org.apache.derby.iapi.types.",
1: 		"org.apache.derby.catalog.types.",
1: 		};
1: 
1: 
1: 	private static final Class[] NO_PARAMS = new Class[0];
1: 
1: 	static void checkMethod(short opcode, Type dt, String methodName, String[] debugParameterTypes, Type rt) {
1: 
1: 
1: 		if (SanityManager.DEBUG) {
0: 			String reason;
1: 			try {
1: 
1: 				String declaringClass = dt.javaName();
1: 				if (declaringClass.startsWith("org.apache.derby.exe."))
1: 					return;
1: 
0: 				// only validate against Cloudscape engine or Java classes. Not user defined classes
1: 				int p;
1: 				for (p = 0; p < csPackages.length; p++) {
1: 					if (declaringClass.startsWith(csPackages[p]))
1: 						break;
1: 				}
1: 				if (p == csPackages.length)
1: 					return;
1: 
1: 				Class[] params = NO_PARAMS;
1: 
0: 				Class declaring = loadClass(declaringClass);
1: 
1: 				if (debugParameterTypes != null) {
1: 					params = new Class[debugParameterTypes.length];
1: 					for (int i = 0; i < debugParameterTypes.length; i++) {
1: 						params[i] = loadClass(debugParameterTypes[i]);
1: 					}
1: 
1: 				}
1: 
1: 				String actualReturnType;
1: 
1: 				if (methodName.equals("<init>")) {
0: 					Constructor c = declaring.getDeclaredConstructor(params);
1: 					actualReturnType = "void";
1: 				} else {
0: 					Method m = declaring.getDeclaredMethod(methodName, params);
1: 					actualReturnType = m.getReturnType().getName();
1: 				}
1: 
0: 				Class requestedReturnType = loadClass(rt.javaName());
1: 
0: 				// check the return type
0: 				if (actualReturnType.equals(requestedReturnType.getName())) {
1: 
0: 					// check the inteface match
0: 					if (opcode != VMOpcode.INVOKEINTERFACE)
1: 						return;
1: 
0: 					if (declaring.isInterface())
1: 						return;
1: 
0: 					reason = "declaring class is not an interface";
1: 
1: 				} else {
0: 					reason = "return type is " + actualReturnType;
1: 				}
1: 
1: 
1: 			} catch (Exception e) {
1: 				reason = e.toString();
1: 				e.printStackTrace(System.out);
1: 			}
1: 
1: 			String sig = dt.javaName() + " >> " + rt.javaName() + " " + methodName + "(";
1: 			if (debugParameterTypes != null) {
1: 				for (int i = 0; i < debugParameterTypes.length; i++) {
1: 					if (i != 0)
1: 						sig = sig + ", ";
1: 					sig = sig + debugParameterTypes[i];
1: 				}
1: 			}
1: 			sig = sig + ")";
1: 
1: 			String msg = "Invalid method " + sig + " because " + reason;
1: 
1: 			System.out.println(msg);
1: 			SanityManager.THROWASSERT(msg);
1: 		}
1: 	}
1: 
0: 	private static Hashtable primitives;
1: 
1: 	static {
1: 		if (SanityManager.DEBUG) {
0: 			primitives = new Hashtable();
1: 			primitives.put("boolean", Boolean.TYPE);
1: 			primitives.put("byte", Byte.TYPE);
1: 			primitives.put("char", Character.TYPE);
1: 			primitives.put("double", Double.TYPE);
1: 			primitives.put("float", Float.TYPE);
1: 			primitives.put("int", Integer.TYPE);
1: 			primitives.put("long", Long.TYPE);
1: 			primitives.put("short", Short.TYPE);
1: 			primitives.put("void", Void.TYPE);
1: 		}
1: 
1: 	}
1: 	
1: 
1: 	private static Class loadClass(String name) throws ClassNotFoundException {
1: 
1: 		if (SanityManager.DEBUG) {
1: 
1: 			Class c = (Class) primitives.get(name);
1: 			if (c != null)
1: 				return c;
1: 
1: 			if (name.endsWith("[]")) {
1: 				Class baseClass = loadClass(name.substring(0, name.length() - 2));
1: 				return Array.newInstance(baseClass, 0).getClass();
1: 			}
1: 			
1: 			return Class.forName(name);
1: 		}
1: 
1: 		return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import java.lang.reflect.*;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import java.util.Hashtable;
0: import org.apache.derby.iapi.services.loader.*;
0: import org.apache.derby.iapi.services.context.*;
0: 
0: /**
0:  * Validate BC calls.
0:  *
0:  * @author jamie
0:  */
0: class d_BCValidate
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private static final String[] csPackages = {
0: 		"java",
0: 		"org.apache.derby.exe.",
0: 		"org.apache.derby.iapi.",
0: 		"org.apache.derby.jdbc.",
0: 		"org.apache.derby.iapi.",
0: 		"org.apache.derby.impl.",
0: 		"org.apache.derby.authentication.",
0: 		"org.apache.derby.catalog.",
0: 		"org.apache.derby.iapi.db.",
0: 		"org.apache.derby.iapi.types.",
0: 		"org.apache.derby.iapi.types.",
0: 		"org.apache.derby.catalog.types.",
0: 		};
0: 
0: 
0: 	private static final Class[] NO_PARAMS = new Class[0];
0: 
0: 	static void checkMethod(short opcode, Type dt, String methodName, String[] debugParameterTypes, Type rt) {
0: 
0: 
0: 		if (SanityManager.DEBUG) {
0: 			String reason;
0: 			try {
0: 
0: 				String declaringClass = dt.javaName();
0: 				if (declaringClass.startsWith("org.apache.derby.exe."))
0: 					return;
0: 
0: 				// only validate against Cloudscape engine or Java classes. Not user defined classes
0: 				int p;
0: 				for (p = 0; p < csPackages.length; p++) {
0: 					if (declaringClass.startsWith(csPackages[p]))
0: 						break;
0: 				}
0: 				if (p == csPackages.length)
0: 					return;
0: 
0: 				Class[] params = NO_PARAMS;
0: 
0: 				Class declaring = loadClass(declaringClass);
0: 
0: 				if (debugParameterTypes != null) {
0: 					params = new Class[debugParameterTypes.length];
0: 					for (int i = 0; i < debugParameterTypes.length; i++) {
0: 						params[i] = loadClass(debugParameterTypes[i]);
0: 					}
0: 
0: 				}
0: 
0: 				String actualReturnType;
0: 
0: 				if (methodName.equals("<init>")) {
0: 					Constructor c = declaring.getDeclaredConstructor(params);
0: 					actualReturnType = "void";
0: 				} else {
0: 					Method m = declaring.getDeclaredMethod(methodName, params);
0: 					actualReturnType = m.getReturnType().getName();
0: 				}
0: 
0: 				Class requestedReturnType = loadClass(rt.javaName());
0: 
0: 				// check the return type
0: 				if (actualReturnType.equals(requestedReturnType.getName())) {
0: 
0: 					// check the inteface match
0: 					if (opcode != VMOpcode.INVOKEINTERFACE)
0: 						return;
0: 
0: 					if (declaring.isInterface())
0: 						return;
0: 
0: 					reason = "declaring class is not an interface";
0: 
0: 				} else {
0: 					reason = "return type is " + actualReturnType;
0: 				}
0: 
0: 
0: 			} catch (Exception e) {
0: 				reason = e.toString();
0: 				e.printStackTrace(System.out);
0: 			}
0: 
0: 			String sig = dt.javaName() + " >> " + rt.javaName() + " " + methodName + "(";
0: 			if (debugParameterTypes != null) {
0: 				for (int i = 0; i < debugParameterTypes.length; i++) {
0: 					if (i != 0)
0: 						sig = sig + ", ";
0: 					sig = sig + debugParameterTypes[i];
0: 				}
0: 			}
0: 			sig = sig + ")";
0: 
0: 			String msg = "Invalid method " + sig + " because " + reason;
0: 
0: 			System.out.println(msg);
0: 			SanityManager.THROWASSERT(msg);
0: 		}
0: 	}
0: 
0: 	private static Hashtable primitives;
0: 
0: 	static {
0: 		if (SanityManager.DEBUG) {
0: 			primitives = new Hashtable();
0: 			primitives.put("boolean", Boolean.TYPE);
0: 			primitives.put("byte", Byte.TYPE);
0: 			primitives.put("char", Character.TYPE);
0: 			primitives.put("double", Double.TYPE);
0: 			primitives.put("float", Float.TYPE);
0: 			primitives.put("int", Integer.TYPE);
0: 			primitives.put("long", Long.TYPE);
0: 			primitives.put("short", Short.TYPE);
0: 			primitives.put("void", Void.TYPE);
0: 		}
0: 
0: 	}
0: 	
0: 
0: 	private static Class loadClass(String name) throws ClassNotFoundException {
0: 
0: 		if (SanityManager.DEBUG) {
0: 
0: 			Class c = (Class) primitives.get(name);
0: 			if (c != null)
0: 				return c;
0: 
0: 			if (name.endsWith("[]")) {
0: 				Class baseClass = loadClass(name.substring(0, name.length() - 2));
0: 				return Array.newInstance(baseClass, 0).getClass();
0: 			}
0: 			
0: 			return Class.forName(name);
0: 		}
0: 
0: 		return null;
0: 	}
0: }
============================================================================