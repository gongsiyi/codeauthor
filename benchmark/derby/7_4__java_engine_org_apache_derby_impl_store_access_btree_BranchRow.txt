1:eac0369: /*
5:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.BranchRow
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:722a889: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:722a889: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.SQLLongint;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Implements row which is stored in the branch pages of a btree.  A non-suffix
1:eac0369:  * compressed branch row contains all of the columns of the leaf rows of a btree
1:eac0369:  * and contains an additional field at the end.  The extra field of a branch row
1:eac0369:  * in a branch page at level N, is the child page field pointing the page at 
1:eac0369:  * level N-1 which has keys which follow or equal the branch row entry.
1:eac0369:  *
1:eac0369:  * There are 3 ways to use this class to produce a branch row:
1:eac0369:  *   createEmptyTemplate() 
1:eac0369:  *      creates a empty row template
1:eac0369:  *   createBranchRowFromOldBranchRow() 
1:eac0369:  *      creates a new row with reference to an old branch row.
1:eac0369:  *   createBranchRowFromOldLeafRow()
1:eac0369:  *      creates a new row with reference to an old leaf row.
1:eac0369:  */
1:eac0369: 
1:eac0369: public class BranchRow
1:eac0369: {
1:eac0369:     /* a dummy page number value (should not be compressable) */
1:eac0369:     public static final long DUMMY_PAGE_NUMBER = 0xffffffffffffffffL;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The branch child page pointer.  All keys that Follow or equal the
1:eac0369:      * key in this row can be found by following the child page pointer.
1:eac0369:      * A reference to this object will be placed in the last slot of branchrow,
1:eac0369:      * and this class expects that no-one will replace that reference.
1:eac0369:      */
1:eac0369:     // private SQLLongint      child_page = null;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The array of object to be used as the row.
1:eac0369:      */
1:eac0369:     private DataValueDescriptor[]    branchrow    = null;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructors of BranchRow
1:eac0369: 	*/
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Constuctor for creating an "empty" BranchRow template, suitable for reading
1:eac0369:     in a branchRow from disk.
1:eac0369:     **/
1:eac0369: 	private BranchRow()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:722a889: 	private BranchRow(
1:722a889:     Transaction         rawtran,
1:722a889:     BTree               btree)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         SQLLongint child_page  = 
1:eac0369:             new SQLLongint(ContainerHandle.INVALID_PAGE_NUMBER);
1:eac0369: 
1:722a889:         branchrow   = btree.createBranchTemplate(rawtran, child_page);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 child_page == ((SQLLongint) branchrow[branchrow.length - 1]));
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /*
1:eac0369:     ** The following methods implement the BranchRow Private interface.
1:eac0369:     */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Accessor for the child page field of the branch row.
1:eac0369:      *
1:eac0369: 	 * @return The child page object.
1:eac0369:      **/
1:eac0369:     private SQLLongint getChildPage()
1:eac0369:     {
1:eac0369:         // last column of branch row should be the child page pointer.
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(branchrow != null);
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 branchrow[branchrow.length - 1] instanceof SQLLongint);
1:eac0369:         }
1:eac0369: 
1:eac0369:         return((SQLLongint) branchrow[branchrow.length - 1]);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /*
1:eac0369:     ** The following methods implement the BranchRow Public interface.
1:eac0369:     */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Create an empty branch row template suitable for reading branch rows in
1:eac0369:      * from disk. This routine will create newly allocated "empty" objects for
1:eac0369:      * every column in the template row.
1:eac0369:      *
1:eac0369:      * @exception StandardException Standard exception policy.
1:eac0369:      */
1:722a889:     public static BranchRow createEmptyTemplate(
1:722a889:     Transaction         rawtran,
1:722a889:     BTree               btree)
1:eac0369:         throws StandardException
1:eac0369:     {
1:722a889:         return(new BranchRow(rawtran, btree));
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Create a new branch row, given a old branch row and a new child page.
1:eac0369:      * Used by BranchControlRow to manufacture new branch rows when splitting
1:eac0369:      * or growing the tree.
1:eac0369:      *
1:eac0369:      * There is no way to "copy" values of a template row, so this class just
1:eac0369:      * stores a reference to each of the columns of the Indexable row passed 
1:eac0369:      * in.  This is ok as all
1:eac0369:      * usages of this class when instantiated this way, have an old branch row
1:eac0369:      * from which they are creating a new branch row with the same key values,
1:eac0369:      * and a different child page number.
1:eac0369:      *
1:eac0369:      * WARNING - this branch row is only valid while the old branch row is
1:eac0369:      * valid, as it contains references to the columns of the old branch row.
1:eac0369:      * So use of the row should only provide read-only access to the objects
1:eac0369:      * of the old branch row which are referenced.
1:eac0369:      */
1:eac0369:     public BranchRow createBranchRowFromOldBranchRow(long childpageno)
1:eac0369:     {
1:eac0369:         BranchRow newbranch = new BranchRow();
1:eac0369: 
1:eac0369:         /* create new object array, and shallow copy all object references 
1:eac0369:          * from old branch row to new branch row.
1:eac0369:          */
1:eac0369: 
1:eac0369:         newbranch.branchrow = new DataValueDescriptor[this.branchrow.length]; 
1:eac0369:         System.arraycopy(
1:eac0369:             this.branchrow, 0, newbranch.branchrow, 0, 
1:eac0369:             newbranch.branchrow.length - 1);
1:eac0369: 
1:eac0369:         /* now create a different child page pointer object and place it as
1:eac0369:          * last column in the new branch row.
1:eac0369:          */
1:eac0369:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
1:eac0369:             new SQLLongint(childpageno);
1:eac0369: 
1:eac0369:         return(newbranch);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Create a new branch row, given a old leaf row and a new child page.
1:eac0369:      * Used by LeafControlRow to manufacture new branch rows when splitting
1:eac0369:      * or growing the tree.
1:eac0369:      *
1:eac0369:      * There is no way to "copy" values of a template row, so this class just
1:eac0369:      * stores a referece to the Indexable row passed in.  This is ok as all
1:eac0369:      * usages of this class when instantiated this way, have an old leaf row
1:eac0369:      * from which they are creating a new branch row with the same key values,
1:eac0369:      * and a different child page number.
1:eac0369:      *
1:eac0369:      * WARNING - this branch row is only valid while the old leaf row is
1:eac0369:      * valid, as it contains references to the columns of the old leaf row.
1:eac0369:      * So use of the row should only provide read-only access to the objects
1:eac0369:      * of the old leaf row which are referenced.
1:eac0369:      */
1:eac0369:     public static BranchRow createBranchRowFromOldLeafRow(
1:eac0369:     DataValueDescriptor[]   leafrow, 
1:eac0369:     long                    childpageno)
1:eac0369:     {
1:eac0369:         BranchRow newbranch = new BranchRow();
1:eac0369: 
1:eac0369:         /* create new object array for the row, and copy all object references 
1:eac0369:          * from old leaf row to new branch row.
1:eac0369:          */
1:eac0369:         newbranch.branchrow = new DataValueDescriptor[leafrow.length + 1];
1:eac0369: 
1:eac0369:         System.arraycopy(leafrow, 0, newbranch.branchrow, 0, leafrow.length);
1:eac0369: 
1:eac0369:         /* now create a different child page pointer object and place it as
1:eac0369:          * last column in the new branch row.
1:eac0369:          */
1:eac0369:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
1:eac0369:             new SQLLongint(childpageno);
1:eac0369: 
1:eac0369:         return(newbranch);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the branch row.
1:eac0369:      * <p>
1:eac0369:      * Return the DataValueDescriptor array that represents the branch row, 
1:eac0369:      * for use in raw store calls to fetch, insert, and update.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The branch row object array.
1:eac0369:      **/
1:eac0369:     protected DataValueDescriptor[] getRow()
1:eac0369:     {
1:eac0369:         return(this.branchrow);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Set the page number field of the branch row to a new value.
1:eac0369:      *
1:eac0369:      * @param page_number the new page number.
1:eac0369:      **/
1:eac0369:     protected void setPageNumber(long page_number)
1:eac0369:     {
1:eac0369:         getChildPage().setValue(page_number);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             return(
1:eac0369:                 RowUtil.toString(branchrow) + 
1:eac0369:                 "child page: (" + getChildPage() + ")");
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(null);
1:eac0369:         }
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:722a889
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.types.DataValueFactory;
/////////////////////////////////////////////////////////////////////////
1: 	private BranchRow(
1:     Transaction         rawtran,
1:     BTree               btree)
1:         branchrow   = btree.createBranchTemplate(rawtran, child_page);
/////////////////////////////////////////////////////////////////////////
1:     public static BranchRow createEmptyTemplate(
1:     Transaction         rawtran,
1:     BTree               btree)
1:         return(new BranchRow(rawtran, btree));
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.BranchRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.RowUtil;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.SQLLongint;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: 
1: /**
1:  * Implements row which is stored in the branch pages of a btree.  A non-suffix
1:  * compressed branch row contains all of the columns of the leaf rows of a btree
1:  * and contains an additional field at the end.  The extra field of a branch row
1:  * in a branch page at level N, is the child page field pointing the page at 
1:  * level N-1 which has keys which follow or equal the branch row entry.
1:  *
1:  * There are 3 ways to use this class to produce a branch row:
1:  *   createEmptyTemplate() 
1:  *      creates a empty row template
1:  *   createBranchRowFromOldBranchRow() 
1:  *      creates a new row with reference to an old branch row.
1:  *   createBranchRowFromOldLeafRow()
1:  *      creates a new row with reference to an old leaf row.
1:  */
1: 
1: public class BranchRow
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1:     /* a dummy page number value (should not be compressable) */
1:     public static final long DUMMY_PAGE_NUMBER = 0xffffffffffffffffL;
1: 
1:     /**
1:      * The branch child page pointer.  All keys that Follow or equal the
1:      * key in this row can be found by following the child page pointer.
1:      * A reference to this object will be placed in the last slot of branchrow,
1:      * and this class expects that no-one will replace that reference.
1:      */
1:     // private SQLLongint      child_page = null;
1: 
1:     /**
1:      * The array of object to be used as the row.
1:      */
1:     private DataValueDescriptor[]    branchrow    = null;
1: 
1: 	/*
1: 	** Constructors of BranchRow
1: 	*/
1: 
1:     /**
1:     Constuctor for creating an "empty" BranchRow template, suitable for reading
1:     in a branchRow from disk.
1:     **/
1: 	private BranchRow()
1: 	{
1: 	}
1: 
0: 	private BranchRow(BTree btree)
1:         throws StandardException
1: 	{
1:         SQLLongint child_page  = 
1:             new SQLLongint(ContainerHandle.INVALID_PAGE_NUMBER);
1: 
0:         branchrow   = btree.createBranchTemplate(child_page);
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(
1:                 child_page == ((SQLLongint) branchrow[branchrow.length - 1]));
1:         }
1: 	}
1: 
1:     /*
1:     ** The following methods implement the BranchRow Private interface.
1:     */
1: 
1:     /**
1:      * Accessor for the child page field of the branch row.
1:      *
1: 	 * @return The child page object.
1:      **/
1:     private SQLLongint getChildPage()
1:     {
1:         // last column of branch row should be the child page pointer.
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(branchrow != null);
1:             SanityManager.ASSERT(
1:                 branchrow[branchrow.length - 1] instanceof SQLLongint);
1:         }
1: 
1:         return((SQLLongint) branchrow[branchrow.length - 1]);
1:     }
1: 
1:     /*
1:     ** The following methods implement the BranchRow Public interface.
1:     */
1: 
1:     /**
1:      * Create an empty branch row template suitable for reading branch rows in
1:      * from disk. This routine will create newly allocated "empty" objects for
1:      * every column in the template row.
1:      *
1:      * @exception StandardException Standard exception policy.
1:      */
0:     public static BranchRow createEmptyTemplate(BTree   btree)
1:         throws StandardException
1:     {
0:         BranchRow  newbranch   = new BranchRow(btree);
1: 
0:         return(new BranchRow(btree));
1:     }
1: 
1:     /**
1:      * Create a new branch row, given a old branch row and a new child page.
1:      * Used by BranchControlRow to manufacture new branch rows when splitting
1:      * or growing the tree.
1:      *
1:      * There is no way to "copy" values of a template row, so this class just
1:      * stores a reference to each of the columns of the Indexable row passed 
1:      * in.  This is ok as all
1:      * usages of this class when instantiated this way, have an old branch row
1:      * from which they are creating a new branch row with the same key values,
1:      * and a different child page number.
1:      *
1:      * WARNING - this branch row is only valid while the old branch row is
1:      * valid, as it contains references to the columns of the old branch row.
1:      * So use of the row should only provide read-only access to the objects
1:      * of the old branch row which are referenced.
1:      */
1:     public BranchRow createBranchRowFromOldBranchRow(long childpageno)
1:     {
1:         BranchRow newbranch = new BranchRow();
1: 
1:         /* create new object array, and shallow copy all object references 
1:          * from old branch row to new branch row.
1:          */
1: 
1:         newbranch.branchrow = new DataValueDescriptor[this.branchrow.length]; 
1:         System.arraycopy(
1:             this.branchrow, 0, newbranch.branchrow, 0, 
1:             newbranch.branchrow.length - 1);
1: 
1:         /* now create a different child page pointer object and place it as
1:          * last column in the new branch row.
1:          */
1:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
1:             new SQLLongint(childpageno);
1: 
1:         return(newbranch);
1:     }
1: 
1:     /**
1:      * Create a new branch row, given a old leaf row and a new child page.
1:      * Used by LeafControlRow to manufacture new branch rows when splitting
1:      * or growing the tree.
1:      *
1:      * There is no way to "copy" values of a template row, so this class just
1:      * stores a referece to the Indexable row passed in.  This is ok as all
1:      * usages of this class when instantiated this way, have an old leaf row
1:      * from which they are creating a new branch row with the same key values,
1:      * and a different child page number.
1:      *
1:      * WARNING - this branch row is only valid while the old leaf row is
1:      * valid, as it contains references to the columns of the old leaf row.
1:      * So use of the row should only provide read-only access to the objects
1:      * of the old leaf row which are referenced.
1:      */
1:     public static BranchRow createBranchRowFromOldLeafRow(
1:     DataValueDescriptor[]   leafrow, 
1:     long                    childpageno)
1:     {
1:         BranchRow newbranch = new BranchRow();
1: 
1:         /* create new object array for the row, and copy all object references 
1:          * from old leaf row to new branch row.
1:          */
1:         newbranch.branchrow = new DataValueDescriptor[leafrow.length + 1];
1: 
1:         System.arraycopy(leafrow, 0, newbranch.branchrow, 0, leafrow.length);
1: 
1:         /* now create a different child page pointer object and place it as
1:          * last column in the new branch row.
1:          */
1:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
1:             new SQLLongint(childpageno);
1: 
1:         return(newbranch);
1:     }
1: 
1:     /**
1:      * Return the branch row.
1:      * <p>
1:      * Return the DataValueDescriptor array that represents the branch row, 
1:      * for use in raw store calls to fetch, insert, and update.
1:      * <p>
1:      *
1: 	 * @return The branch row object array.
1:      **/
1:     protected DataValueDescriptor[] getRow()
1:     {
1:         return(this.branchrow);
1:     }
1: 
1:     /**
1:      * Set the page number field of the branch row to a new value.
1:      *
1:      * @param page_number the new page number.
1:      **/
1:     protected void setPageNumber(long page_number)
1:     {
1:         getChildPage().setValue(page_number);
1:     }
1: 
1: 
1: 	public String toString()
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:             return(
1:                 RowUtil.toString(branchrow) + 
1:                 "child page: (" + getChildPage() + ")");
1:         }
1:         else
1:         {
1:             return(null);
1:         }
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.RowUtil;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.SQLLongint;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: 
0: /**
0:  * Implements row which is stored in the branch pages of a btree.  A non-suffix
0:  * compressed branch row contains all of the columns of the leaf rows of a btree
0:  * and contains an additional field at the end.  The extra field of a branch row
0:  * in a branch page at level N, is the child page field pointing the page at 
0:  * level N-1 which has keys which follow or equal the branch row entry.
0:  *
0:  * There are 3 ways to use this class to produce a branch row:
0:  *   createEmptyTemplate() 
0:  *      creates a empty row template
0:  *   createBranchRowFromOldBranchRow() 
0:  *      creates a new row with reference to an old branch row.
0:  *   createBranchRowFromOldLeafRow()
0:  *      creates a new row with reference to an old leaf row.
0:  */
0: 
0: public class BranchRow
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0:     /* a dummy page number value (should not be compressable) */
0:     public static final long DUMMY_PAGE_NUMBER = 0xffffffffffffffffL;
0: 
0:     /**
0:      * The branch child page pointer.  All keys that Follow or equal the
0:      * key in this row can be found by following the child page pointer.
0:      * A reference to this object will be placed in the last slot of branchrow,
0:      * and this class expects that no-one will replace that reference.
0:      */
0:     // private SQLLongint      child_page = null;
0: 
0:     /**
0:      * The array of object to be used as the row.
0:      */
0:     private DataValueDescriptor[]    branchrow    = null;
0: 
0: 	/*
0: 	** Constructors of BranchRow
0: 	*/
0: 
0:     /**
0:     Constuctor for creating an "empty" BranchRow template, suitable for reading
0:     in a branchRow from disk.
0:     **/
0: 	private BranchRow()
0: 	{
0: 	}
0: 
0: 	private BranchRow(BTree btree)
0:         throws StandardException
0: 	{
0:         SQLLongint child_page  = 
0:             new SQLLongint(ContainerHandle.INVALID_PAGE_NUMBER);
0: 
0:         branchrow   = btree.createBranchTemplate(child_page);
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(
0:                 child_page == ((SQLLongint) branchrow[branchrow.length - 1]));
0:         }
0: 	}
0: 
0:     /*
0:     ** The following methods implement the BranchRow Private interface.
0:     */
0: 
0:     /**
0:      * Accessor for the child page field of the branch row.
0:      *
0: 	 * @return The child page object.
0:      **/
0:     private SQLLongint getChildPage()
0:     {
0:         // last column of branch row should be the child page pointer.
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(branchrow != null);
0:             SanityManager.ASSERT(
0:                 branchrow[branchrow.length - 1] instanceof SQLLongint);
0:         }
0: 
0:         return((SQLLongint) branchrow[branchrow.length - 1]);
0:     }
0: 
0:     /*
0:     ** The following methods implement the BranchRow Public interface.
0:     */
0: 
0:     /**
0:      * Create an empty branch row template suitable for reading branch rows in
0:      * from disk. This routine will create newly allocated "empty" objects for
0:      * every column in the template row.
0:      *
0:      * @exception StandardException Standard exception policy.
0:      */
0:     public static BranchRow createEmptyTemplate(BTree   btree)
0:         throws StandardException
0:     {
0:         BranchRow  newbranch   = new BranchRow(btree);
0: 
0:         return(new BranchRow(btree));
0:     }
0: 
0:     /**
0:      * Create a new branch row, given a old branch row and a new child page.
0:      * Used by BranchControlRow to manufacture new branch rows when splitting
0:      * or growing the tree.
0:      *
0:      * There is no way to "copy" values of a template row, so this class just
0:      * stores a reference to each of the columns of the Indexable row passed 
0:      * in.  This is ok as all
0:      * usages of this class when instantiated this way, have an old branch row
0:      * from which they are creating a new branch row with the same key values,
0:      * and a different child page number.
0:      *
0:      * WARNING - this branch row is only valid while the old branch row is
0:      * valid, as it contains references to the columns of the old branch row.
0:      * So use of the row should only provide read-only access to the objects
0:      * of the old branch row which are referenced.
0:      */
0:     public BranchRow createBranchRowFromOldBranchRow(long childpageno)
0:     {
0:         BranchRow newbranch = new BranchRow();
0: 
0:         /* create new object array, and shallow copy all object references 
0:          * from old branch row to new branch row.
0:          */
0: 
0:         newbranch.branchrow = new DataValueDescriptor[this.branchrow.length]; 
0:         System.arraycopy(
0:             this.branchrow, 0, newbranch.branchrow, 0, 
0:             newbranch.branchrow.length - 1);
0: 
0:         /* now create a different child page pointer object and place it as
0:          * last column in the new branch row.
0:          */
0:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
0:             new SQLLongint(childpageno);
0: 
0:         return(newbranch);
0:     }
0: 
0:     /**
0:      * Create a new branch row, given a old leaf row and a new child page.
0:      * Used by LeafControlRow to manufacture new branch rows when splitting
0:      * or growing the tree.
0:      *
0:      * There is no way to "copy" values of a template row, so this class just
0:      * stores a referece to the Indexable row passed in.  This is ok as all
0:      * usages of this class when instantiated this way, have an old leaf row
0:      * from which they are creating a new branch row with the same key values,
0:      * and a different child page number.
0:      *
0:      * WARNING - this branch row is only valid while the old leaf row is
0:      * valid, as it contains references to the columns of the old leaf row.
0:      * So use of the row should only provide read-only access to the objects
0:      * of the old leaf row which are referenced.
0:      */
0:     public static BranchRow createBranchRowFromOldLeafRow(
0:     DataValueDescriptor[]   leafrow, 
0:     long                    childpageno)
0:     {
0:         BranchRow newbranch = new BranchRow();
0: 
0:         /* create new object array for the row, and copy all object references 
0:          * from old leaf row to new branch row.
0:          */
0:         newbranch.branchrow = new DataValueDescriptor[leafrow.length + 1];
0: 
0:         System.arraycopy(leafrow, 0, newbranch.branchrow, 0, leafrow.length);
0: 
0:         /* now create a different child page pointer object and place it as
0:          * last column in the new branch row.
0:          */
0:         newbranch.branchrow[newbranch.branchrow.length - 1] = 
0:             new SQLLongint(childpageno);
0: 
0:         return(newbranch);
0:     }
0: 
0:     /**
0:      * Return the branch row.
0:      * <p>
0:      * Return the DataValueDescriptor array that represents the branch row, 
0:      * for use in raw store calls to fetch, insert, and update.
0:      * <p>
0:      *
0: 	 * @return The branch row object array.
0:      **/
0:     protected DataValueDescriptor[] getRow()
0:     {
0:         return(this.branchrow);
0:     }
0: 
0:     /**
0:      * Set the page number field of the branch row to a new value.
0:      *
0:      * @param page_number the new page number.
0:      **/
0:     protected void setPageNumber(long page_number)
0:     {
0:         getChildPage().setValue(page_number);
0:     }
0: 
0: 
0: 	public String toString()
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:             return(
0:                 RowUtil.toString(branchrow) + 
0:                 "child page: (" + getChildPage() + ")");
0:         }
0:         else
0:         {
0:             return(null);
0:         }
0: 	}
0: }
============================================================================