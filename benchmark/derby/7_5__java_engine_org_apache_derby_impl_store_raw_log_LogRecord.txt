1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.LogRecord
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.RePreparable;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	The log record written out to disk. This log record includes:
1:eac0369: 	<P>
1:eac0369:     The is a holder object that may be setup using the setValue() and re-used
1:eac0369: 	rather than creating a new object for each actual log record.
1:eac0369: 
1:eac0369: 	<P>	<PRE>
1:eac0369: 	The format of a log record is
1:eac0369: 
1:787ceb4: 	@derby.formatId LOG_RECORD
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	The log record described every change to the persistent store
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		loggable group(CompressedInt)	the loggable's group value
1:eac0369: 		xactId(TransactionId)			The Transaction this log belongs to
1:eac0369: 		op(Loggable)					the log operation
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: 
1:eac0369: */
1:eac0369: public class LogRecord implements Formatable {
1:eac0369: 
1:eac0369: 	private TransactionId	xactId;	// the transaction Id
1:eac0369: 	private Loggable		op;		// the loggable
1:eac0369: 	private int				group;	// the loggable's group value
1:eac0369: 
1:eac0369: 	// the objectInput stream that contains the loggable object.  The
1:eac0369: 	// objectification of the transaction Id and the the loggable object is
1:eac0369: 	// delayed from readExternal time to getTransactionId and getLoggable time
1:eac0369: 	// to give the log scan an opportunity to discard the loggable based on
1:eac0369: 	// group value and xactId.
1:eac0369: 	transient ObjectInput input;   
1:eac0369: 
1:eac0369: 	private static final int formatLength = FormatIdUtil.getFormatIdByteLength(StoredFormatIds.LOG_RECORD);
1:eac0369: 
1:eac0369: 	public LogRecord() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		CompressedNumber.writeInt(out, group);
1:eac0369: 		out.writeObject(xactId);
1:eac0369: 		out.writeObject(op);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException corrupted log stream
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		group = CompressedNumber.readInt(in);
1:eac0369: 		input = in;				// tie the input to this logRecord
1:eac0369: 
1:eac0369: 		xactId = null;			// delay reading these until later
1:eac0369: 		op = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOG_RECORD;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class specific methods
1:eac0369: 	 */
1:eac0369: 	public void setValue(TransactionId xactId, Loggable op)
1:eac0369: 	{
1:eac0369: 		this.xactId = xactId;
1:eac0369: 		this.op = op;
1:eac0369: 
1:eac0369: 		this.group = op.group();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static int formatOverhead()
1:eac0369: 	{
1:eac0369: 		return formatLength;
1:eac0369: 	}		
1:eac0369: 
1:eac0369: 	public static int maxGroupStoredSize()
1:eac0369: 	{
1:eac0369: 		return CompressedNumber.MAX_INT_STORED_SIZE;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 	public static int maxTransactionIdStoredSize(TransactionId tranId)
1:eac0369: 	{
1:eac0369: 		return tranId.getMaxStoredSize();
1:eac0369: 	}
1:d609ee3: 
1:eac0369: 	
1:d609ee3: 	public static int getStoredSize(int group, TransactionId xactId)
1:d609ee3: 	{
1:d609ee3: 		
1:d609ee3: 		if (SanityManager.DEBUG)
1:d609ee3: 		{
1:d609ee3: 			SanityManager.ASSERT(xactId == null, 
1:d609ee3: 								 "size calculation are based on xactId being  null"); 
1:d609ee3: 		}
1:d609ee3: 
1:d609ee3: 		return 	formatLength + 	CompressedNumber.sizeInt(group) + 
1:d609ee3: 			FormatIdUtil.getFormatIdByteLength(StoredFormatIds.NULL_FORMAT_ID);
1:d609ee3: 	}
1:d609ee3: 
1:d609ee3: 
1:eac0369: 	public TransactionId getTransactionId() 
1:eac0369: 		 throws IOException, ClassNotFoundException 
1:eac0369: 	{
1:eac0369: 		if (xactId != null)
1:eac0369: 			return xactId;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(input != null, 
1:eac0369: 					 "xactId not objectified but object input is not set"); 
1:eac0369: 
1:eac0369: 		Object obj = input.readObject();
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(obj instanceof TransactionId,
1:eac0369:    						 "log record not getting expected TransactionId");
1:eac0369: 	    }
1:eac0369: 		xactId = (TransactionId)obj;
1:eac0369: 
1:eac0369: 		return xactId;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public Loggable getLoggable() throws IOException, ClassNotFoundException {
1:eac0369: 
1:eac0369: 		if (op != null)			// If log operation is already objectified,
1:eac0369: 			return op;			// then just return it.
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(input != null, 
1:eac0369: 					 "logop not objectified but object input is not set");
1:eac0369: 
1:eac0369: 		if (xactId == null)		// xactId is not read off yet
1:eac0369: 		{
1:eac0369: 			xactId = (TransactionId)input.readObject();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		Object obj = input.readObject();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if ( ! (obj instanceof Loggable))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"log record not getting expected Loggable: got : " +
1:eac0369: 					obj.getClass().getName());
1:eac0369: 		}
1:eac0369: 		op = (Loggable)obj;
1:eac0369: 
1:eac0369: 		input = null;
1:eac0369: 
1:eac0369: 		return op;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public RePreparable getRePreparable() 
1:eac0369:         throws IOException, ClassNotFoundException 
1:eac0369:     {
1:eac0369:         return((RePreparable) getLoggable());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Skip over the loggable.  Set the input stream to point ot after the
1:eac0369: 		loggable as if the entire log record has been sucked in by the log
1:eac0369: 		record
1:eac0369: 
1:eac0369: 		@exception StandardException if the loggable is not found, log is corrupt
1:eac0369: 	*/
1:eac0369: 	public void skipLoggable() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (op != null)		// loggable already read off
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			if (xactId == null)
1:eac0369: 				xactId = (TransactionId)input.readObject();	// get rid of the transactionId
1:eac0369: 
1:eac0369: 			if (op == null)
1:eac0369: 				op = (Loggable)input.readObject();	// get rid of the loggable
1:eac0369: 		}
1:eac0369: 		catch(ClassNotFoundException cnfe)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, cnfe);
1:eac0369: 		}
1:eac0369: 		catch(IOException ioe)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, ioe);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Undoable getUndoable() throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		if (op == null)
1:eac0369: 			getLoggable();		// objectify it
1:eac0369: 
1:eac0369: 		if (op instanceof Undoable)
1:eac0369: 			return (Undoable) op;
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isCLR()	{
1:eac0369: 		return ((group & Loggable.COMPENSATION) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isFirst()	{
1:eac0369: 		return ((group & Loggable.FIRST) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isComplete()	{
1:eac0369: 		return ((group & Loggable.LAST) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isPrepare()	{
1:eac0369: 		return ((group & Loggable.PREPARE) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean requiresPrepareLocks()	{
1:eac0369: 		return ((group & Loggable.XA_NEEDLOCK) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isCommit()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
1:eac0369: 				 "calling isCommit on log record that is not last");
1:eac0369: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
1:eac0369: 				 "calling isCommit on log record before commit status is recorded");
1:eac0369: 		}
1:eac0369: 		return ((group & Loggable.COMMIT) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isAbort()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
1:eac0369: 				 "calling isAbort on log record that is not last");
1:eac0369: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
1:eac0369: 				 "calling isAbort on log record before abort status is recorded");
1:eac0369: 		}
1:eac0369: 		return ((group & Loggable.ABORT) != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return group;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:d609ee3: 	public boolean isChecksum()	{
1:d609ee3: 		return ((group & Loggable.CHECKSUM) != 0);
1:d609ee3: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId LOG_RECORD
1: 	@derby.purpose	The log record described every change to the persistent store
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d609ee3
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public static int getStoredSize(int group, TransactionId xactId)
1: 	{
1: 		
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(xactId == null, 
1: 								 "size calculation are based on xactId being  null"); 
1: 		}
1: 
1: 		return 	formatLength + 	CompressedNumber.sizeInt(group) + 
1: 			FormatIdUtil.getFormatIdByteLength(StoredFormatIds.NULL_FORMAT_ID);
1: 	}
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isChecksum()	{
1: 		return ((group & Loggable.CHECKSUM) != 0);
1: 	}
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.LogRecord
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.RePreparable;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: 
1: /**
1: 	The log record written out to disk. This log record includes:
1: 	<P>
1:     The is a holder object that may be setup using the setValue() and re-used
1: 	rather than creating a new object for each actual log record.
1: 
1: 	<P>	<PRE>
1: 	The format of a log record is
1: 
0: 	@format_id LOG_RECORD
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	The log record described every change to the persistent store
0: 	@upgrade
0: 	@disk_layout
1: 		loggable group(CompressedInt)	the loggable's group value
1: 		xactId(TransactionId)			The Transaction this log belongs to
1: 		op(Loggable)					the log operation
0: 	@end_format
1: 	</PRE>
1: 
1: */
1: public class LogRecord implements Formatable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private TransactionId	xactId;	// the transaction Id
1: 	private Loggable		op;		// the loggable
1: 	private int				group;	// the loggable's group value
1: 
1: 	// the objectInput stream that contains the loggable object.  The
1: 	// objectification of the transaction Id and the the loggable object is
1: 	// delayed from readExternal time to getTransactionId and getLoggable time
1: 	// to give the log scan an opportunity to discard the loggable based on
1: 	// group value and xactId.
1: 	transient ObjectInput input;   
1: 
1: 	private static final int formatLength = FormatIdUtil.getFormatIdByteLength(StoredFormatIds.LOG_RECORD);
1: 
1: 	public LogRecord() {
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		CompressedNumber.writeInt(out, group);
1: 		out.writeObject(xactId);
1: 		out.writeObject(op);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException corrupted log stream
1: 	*/
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		group = CompressedNumber.readInt(in);
1: 		input = in;				// tie the input to this logRecord
1: 
1: 		xactId = null;			// delay reading these until later
1: 		op = null;
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOG_RECORD;
1: 	}
1: 
1: 	/*
1: 	 * class specific methods
1: 	 */
1: 	public void setValue(TransactionId xactId, Loggable op)
1: 	{
1: 		this.xactId = xactId;
1: 		this.op = op;
1: 
1: 		this.group = op.group();
1: 	}
1: 
1: 	public static int formatOverhead()
1: 	{
1: 		return formatLength;
1: 	}		
1: 
1: 	public static int maxGroupStoredSize()
1: 	{
1: 		return CompressedNumber.MAX_INT_STORED_SIZE;
1: 	}	
1: 
1: 	public static int maxTransactionIdStoredSize(TransactionId tranId)
1: 	{
1: 		return tranId.getMaxStoredSize();
1: 	}
1: 
1: 	public TransactionId getTransactionId() 
1: 		 throws IOException, ClassNotFoundException 
1: 	{
1: 		if (xactId != null)
1: 			return xactId;
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(input != null, 
1: 					 "xactId not objectified but object input is not set"); 
1: 
1: 		Object obj = input.readObject();
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(obj instanceof TransactionId,
1:    						 "log record not getting expected TransactionId");
1: 	    }
1: 		xactId = (TransactionId)obj;
1: 
1: 		return xactId;
1: 	}
1: 
1:     public Loggable getLoggable() throws IOException, ClassNotFoundException {
1: 
1: 		if (op != null)			// If log operation is already objectified,
1: 			return op;			// then just return it.
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(input != null, 
1: 					 "logop not objectified but object input is not set");
1: 
1: 		if (xactId == null)		// xactId is not read off yet
1: 		{
1: 			xactId = (TransactionId)input.readObject();
1: 		}
1: 
1: 		Object obj = input.readObject();
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if ( ! (obj instanceof Loggable))
1: 				SanityManager.THROWASSERT(
1: 					"log record not getting expected Loggable: got : " +
1: 					obj.getClass().getName());
1: 		}
1: 		op = (Loggable)obj;
1: 
1: 		input = null;
1: 
1: 		return op;
1: 	}
1: 
1:     public RePreparable getRePreparable() 
1:         throws IOException, ClassNotFoundException 
1:     {
1:         return((RePreparable) getLoggable());
1: 	}
1: 
1: 	/**
1: 		Skip over the loggable.  Set the input stream to point ot after the
1: 		loggable as if the entire log record has been sucked in by the log
1: 		record
1: 
1: 		@exception StandardException if the loggable is not found, log is corrupt
1: 	*/
1: 	public void skipLoggable() throws StandardException
1: 	{
1: 		if (op != null)		// loggable already read off
1: 			return;
1: 
1: 		try
1: 		{
1: 			if (xactId == null)
1: 				xactId = (TransactionId)input.readObject();	// get rid of the transactionId
1: 
1: 			if (op == null)
1: 				op = (Loggable)input.readObject();	// get rid of the loggable
1: 		}
1: 		catch(ClassNotFoundException cnfe)
1: 		{
1: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, cnfe);
1: 		}
1: 		catch(IOException ioe)
1: 		{
1: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, ioe);
1: 		}
1: 	}
1: 
1: 	public Undoable getUndoable() throws IOException, ClassNotFoundException
1: 	{
1: 		if (op == null)
1: 			getLoggable();		// objectify it
1: 
1: 		if (op instanceof Undoable)
1: 			return (Undoable) op;
1: 		else
1: 			return null;
1: 	}
1: 
1: 	public boolean isCLR()	{
1: 		return ((group & Loggable.COMPENSATION) != 0);
1: 	}
1: 
1: 	public boolean isFirst()	{
1: 		return ((group & Loggable.FIRST) != 0);
1: 	}
1: 
1: 	public boolean isComplete()	{
1: 		return ((group & Loggable.LAST) != 0);
1: 	}
1: 
1: 	public boolean isPrepare()	{
1: 		return ((group & Loggable.PREPARE) != 0);
1: 	}
1: 
1: 	public boolean requiresPrepareLocks()	{
1: 		return ((group & Loggable.XA_NEEDLOCK) != 0);
1: 	}
1: 
1: 	public boolean isCommit()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
1: 				 "calling isCommit on log record that is not last");
1: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
1: 				 "calling isCommit on log record before commit status is recorded");
1: 		}
1: 		return ((group & Loggable.COMMIT) != 0);
1: 	}
1: 
1: 	public boolean isAbort()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
1: 				 "calling isAbort on log record that is not last");
1: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
1: 				 "calling isAbort on log record before abort status is recorded");
1: 		}
1: 		return ((group & Loggable.ABORT) != 0);
1: 	}
1: 
1: 	public int group()
1: 	{
1: 		return group;
1: 	}
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.RePreparable;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: 
0: /**
0: 	The log record written out to disk. This log record includes:
0: 	<P>
0:     The is a holder object that may be setup using the setValue() and re-used
0: 	rather than creating a new object for each actual log record.
0: 
0: 	<P>	<PRE>
0: 	The format of a log record is
0: 
0: 	@format_id LOG_RECORD
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	The log record described every change to the persistent store
0: 	@upgrade
0: 	@disk_layout
0: 		loggable group(CompressedInt)	the loggable's group value
0: 		xactId(TransactionId)			The Transaction this log belongs to
0: 		op(Loggable)					the log operation
0: 	@end_format
0: 	</PRE>
0: 
0: */
0: public class LogRecord implements Formatable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private TransactionId	xactId;	// the transaction Id
0: 	private Loggable		op;		// the loggable
0: 	private int				group;	// the loggable's group value
0: 
0: 	// the objectInput stream that contains the loggable object.  The
0: 	// objectification of the transaction Id and the the loggable object is
0: 	// delayed from readExternal time to getTransactionId and getLoggable time
0: 	// to give the log scan an opportunity to discard the loggable based on
0: 	// group value and xactId.
0: 	transient ObjectInput input;   
0: 
0: 	private static final int formatLength = FormatIdUtil.getFormatIdByteLength(StoredFormatIds.LOG_RECORD);
0: 
0: 	public LogRecord() {
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		CompressedNumber.writeInt(out, group);
0: 		out.writeObject(xactId);
0: 		out.writeObject(op);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException corrupted log stream
0: 	*/
0: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
0: 	{
0: 		group = CompressedNumber.readInt(in);
0: 		input = in;				// tie the input to this logRecord
0: 
0: 		xactId = null;			// delay reading these until later
0: 		op = null;
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOG_RECORD;
0: 	}
0: 
0: 	/*
0: 	 * class specific methods
0: 	 */
0: 	public void setValue(TransactionId xactId, Loggable op)
0: 	{
0: 		this.xactId = xactId;
0: 		this.op = op;
0: 
0: 		this.group = op.group();
0: 	}
0: 
0: 	public static int formatOverhead()
0: 	{
0: 		return formatLength;
0: 	}		
0: 
0: 	public static int maxGroupStoredSize()
0: 	{
0: 		return CompressedNumber.MAX_INT_STORED_SIZE;
0: 	}	
0: 
0: 	public static int maxTransactionIdStoredSize(TransactionId tranId)
0: 	{
0: 		return tranId.getMaxStoredSize();
0: 	}
0: 
0: 	public TransactionId getTransactionId() 
0: 		 throws IOException, ClassNotFoundException 
0: 	{
0: 		if (xactId != null)
0: 			return xactId;
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(input != null, 
0: 					 "xactId not objectified but object input is not set"); 
0: 
0: 		Object obj = input.readObject();
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(obj instanceof TransactionId,
0:    						 "log record not getting expected TransactionId");
0: 	    }
0: 		xactId = (TransactionId)obj;
0: 
0: 		return xactId;
0: 	}
0: 
0:     public Loggable getLoggable() throws IOException, ClassNotFoundException {
0: 
0: 		if (op != null)			// If log operation is already objectified,
0: 			return op;			// then just return it.
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(input != null, 
0: 					 "logop not objectified but object input is not set");
0: 
0: 		if (xactId == null)		// xactId is not read off yet
0: 		{
0: 			xactId = (TransactionId)input.readObject();
0: 		}
0: 
0: 		Object obj = input.readObject();
0: 
0: 		if (SanityManager.DEBUG) {
0: 			if ( ! (obj instanceof Loggable))
0: 				SanityManager.THROWASSERT(
0: 					"log record not getting expected Loggable: got : " +
0: 					obj.getClass().getName());
0: 		}
0: 		op = (Loggable)obj;
0: 
0: 		input = null;
0: 
0: 		return op;
0: 	}
0: 
0:     public RePreparable getRePreparable() 
0:         throws IOException, ClassNotFoundException 
0:     {
0:         return((RePreparable) getLoggable());
0: 	}
0: 
0: 	/**
0: 		Skip over the loggable.  Set the input stream to point ot after the
0: 		loggable as if the entire log record has been sucked in by the log
0: 		record
0: 
0: 		@exception StandardException if the loggable is not found, log is corrupt
0: 	*/
0: 	public void skipLoggable() throws StandardException
0: 	{
0: 		if (op != null)		// loggable already read off
0: 			return;
0: 
0: 		try
0: 		{
0: 			if (xactId == null)
0: 				xactId = (TransactionId)input.readObject();	// get rid of the transactionId
0: 
0: 			if (op == null)
0: 				op = (Loggable)input.readObject();	// get rid of the loggable
0: 		}
0: 		catch(ClassNotFoundException cnfe)
0: 		{
0: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, cnfe);
0: 		}
0: 		catch(IOException ioe)
0: 		{
0: 			throw StandardException.newException(SQLState.LOG_CORRUPTED, ioe);
0: 		}
0: 	}
0: 
0: 	public Undoable getUndoable() throws IOException, ClassNotFoundException
0: 	{
0: 		if (op == null)
0: 			getLoggable();		// objectify it
0: 
0: 		if (op instanceof Undoable)
0: 			return (Undoable) op;
0: 		else
0: 			return null;
0: 	}
0: 
0: 	public boolean isCLR()	{
0: 		return ((group & Loggable.COMPENSATION) != 0);
0: 	}
0: 
0: 	public boolean isFirst()	{
0: 		return ((group & Loggable.FIRST) != 0);
0: 	}
0: 
0: 	public boolean isComplete()	{
0: 		return ((group & Loggable.LAST) != 0);
0: 	}
0: 
0: 	public boolean isPrepare()	{
0: 		return ((group & Loggable.PREPARE) != 0);
0: 	}
0: 
0: 	public boolean requiresPrepareLocks()	{
0: 		return ((group & Loggable.XA_NEEDLOCK) != 0);
0: 	}
0: 
0: 	public boolean isCommit()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
0: 				 "calling isCommit on log record that is not last");
0: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
0: 				 "calling isCommit on log record before commit status is recorded");
0: 		}
0: 		return ((group & Loggable.COMMIT) != 0);
0: 	}
0: 
0: 	public boolean isAbort()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT((group & Loggable.LAST) == Loggable.LAST,
0: 				 "calling isAbort on log record that is not last");
0: 			SanityManager.ASSERT((group & (Loggable.COMMIT | Loggable.ABORT)) != 0,
0: 				 "calling isAbort on log record before abort status is recorded");
0: 		}
0: 		return ((group & Loggable.ABORT) != 0);
0: 	}
0: 
0: 	public int group()
0: 	{
0: 		return group;
0: 	}
0: 
0: 
0: }
============================================================================