1:dd58483: /*
1:dd58483:  * Derby - Class org.apache.derbyTesting.perf.basic.jdbc.SelectDistinctTest
1:dd58483:  *
1:dd58483:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd58483:  * contributor license agreements.  See the NOTICE file distributed with
1:dd58483:  * this work for additional information regarding copyright ownership.
1:dd58483:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd58483:  * (the "License"); you may not use this file except in compliance with
1:dd58483:  * the License.  You may obtain a copy of the License at
1:dd58483:  *
1:dd58483:  *    http://www.apache.org/licenses/LICENSE-2.0
1:dd58483:  *
1:dd58483:  * Unless required by applicable law or agreed to in writing,
1:dd58483:  * software distributed under the License is distributed on an
1:dd58483:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:dd58483:  * either express or implied. See the License for the specific
1:dd58483:  * language governing permissions and limitations under the License.
1:dd58483:  */
1:dd58483: 
1:dd58483: package org.apache.derbyTesting.perf.basic.jdbc;
1:dd58483: 
1:dd58483: import java.io.UnsupportedEncodingException;
1:dd58483: import java.sql.PreparedStatement;
1:dd58483: import java.sql.SQLException;
1:dd58483: import java.sql.Statement;
1:dd58483: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:dd58483: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:dd58483: import org.apache.derbyTesting.junit.JDBC;
1:dd58483: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:dd58483: 
1:dd58483: /**
1:dd58483:  * Performance tests for SELECT DISTINCT.
1:dd58483:  */
1:dd58483: public class SelectDistinctTest extends JDBCPerfTestCase {
1:dd58483: 
1:dd58483:     /** The prepared statement to be used in the test body. */
1:dd58483:     private PreparedStatement ps;
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Name of the test case for CHAR(5), and the name of the table used by
1:dd58483:      * that test.
1:dd58483:      */
1:dd58483:     private static final String TEST_CHAR5 = "selectDistinctChar5";
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * The number of distinct rows to be expected in the test for CHAR(5).
1:dd58483:      * Since the table contains all permutations of "ABCDE", there should be
1:dd58483:      * 5! distinct rows.
1:dd58483:      */
1:dd58483:     private static final int EXPECTED_DISTINCT_CHAR5 = 5 * 4 * 3 * 2;
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Name of the test case for CHAR(5) FOR BIT DATA, and the name of the
1:dd58483:      * table used by that test.
1:dd58483:      */
1:dd58483:     private static final String TEST_BINARY5 = "selectDistinctBinary5";
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * The number of distinct rows to be expected in the test for CHAR(5) FOR
1:dd58483:      * BIT DATA. Should be the same as in the test for CHAR(5).
1:dd58483:      */
1:dd58483:     private static final int EXPECTED_DISTINCT_BINARY5 =
1:dd58483:             EXPECTED_DISTINCT_CHAR5;
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Create a test case.
1:dd58483:      *
1:dd58483:      * @param name the name of the test method, and the name of the table used
1:dd58483:      * in the test
1:dd58483:      * @param iterations the number of iterations in each test
1:dd58483:      * @param repeats the number of times each test should be repeated
1:dd58483:      */
1:dd58483:     private SelectDistinctTest(String name, int iterations, int repeats) {
1:dd58483:         super(name, iterations, repeats);
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Create the suite of all test cases in this class.
1:dd58483:      *
1:dd58483:      * @return all test cases in this class
1:dd58483:      */
1:dd58483:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SelectDistinctTest");
1:dd58483:         suite.addTest(new SelectDistinctTest(TEST_CHAR5, 2000, 4));
1:dd58483:         suite.addTest(new SelectDistinctTest(TEST_BINARY5, 2000, 4));
1:dd58483: 
1:dd58483:         return new CleanDatabaseTestSetup(suite) {
1:dd58483:             protected void decorateSQL(Statement s) throws SQLException {
1:dd58483:                 s.execute("CREATE TABLE " + TEST_CHAR5 + "(COL CHAR(5))");
1:dd58483:                 // insert all permutations of 'ABCDE'
1:dd58483:                 s.execute("INSERT INTO " + TEST_CHAR5 +
1:dd58483:                         " SELECT V1.X||V2.X||V3.X||V4.X||V5.X FROM " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V1(X), " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V2(X), " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V3(X), " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V4(X), " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V5(X) " +
1:dd58483:                         "WHERE (SELECT COUNT(*) FROM " +
1:dd58483:                         "(VALUES 'A', 'B', 'C', 'D', 'E') VV(X) " +
1:dd58483:                         "WHERE VV.X NOT IN (V1.X,V2.X,V3.X,V4.X,V5.X)) = 0");
1:dd58483:                 // make some duplicates
1:dd58483:                 for (int i = 0; i < 3; i++) {
1:dd58483:                     s.execute("INSERT INTO " + TEST_CHAR5 + " " +
1:dd58483:                             "SELECT * FROM " + TEST_CHAR5);
1:dd58483:                 }
1:dd58483: 
1:dd58483:                 s.execute("CREATE TABLE " + TEST_BINARY5 +
1:dd58483:                         "(COL CHAR(5) FOR BIT DATA)");
1:dd58483:                 s.execute("CREATE FUNCTION CHAR_TO_BINARY(STR CHAR(5)) " +
1:dd58483:                         "RETURNS CHAR(5) FOR BIT DATA " +
1:dd58483:                         "LANGUAGE JAVA PARAMETER STYLE JAVA " +
1:dd58483:                         "EXTERNAL NAME '" + SelectDistinctTest.class.getName() +
1:dd58483:                         ".charToBinary' NO SQL");
1:dd58483:                 s.execute("INSERT INTO " + TEST_BINARY5 +
1:dd58483:                         " SELECT CHAR_TO_BINARY(COL) FROM " + TEST_CHAR5);
1:dd58483:             }
1:dd58483:         };
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Set up the test environment.
1:dd58483:      */
1:dd58483:     protected void setUp() throws SQLException {
1:dd58483:         ps = prepareStatement("SELECT DISTINCT * FROM " + getName());
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Tear down the test environment.
1:dd58483:      */
1:dd58483:     protected void tearDown() throws Exception {
1:dd58483:         super.tearDown();
1:dd58483:         ps = null; // automatically closed in super.tearDown()
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Stored function that converts an SQL CHAR value to an SQL CHAR FOR BIT
1:dd58483:      * DATA value.
1:dd58483:      *
1:dd58483:      * @param s the string to convert to binary data
1:dd58483:      * @return binary UTF-8 representation of the string
1:dd58483:      */
1:dd58483:     public static byte[] charToBinary(String s)
1:dd58483:             throws UnsupportedEncodingException {
1:dd58483:         return s.getBytes("UTF-8");
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Test case for SELECT DISTINCT on a CHAR(5) column.
1:dd58483:      */
1:dd58483:     public void selectDistinctChar5() throws SQLException {
1:dd58483:         JDBC.assertDrainResults(ps.executeQuery(), EXPECTED_DISTINCT_CHAR5);
1:dd58483:     }
1:dd58483: 
1:dd58483:     /**
1:dd58483:      * Test case for SELECT DISTINCT on a CHAR(5) FOR BIT DATA column.
1:dd58483:      */
1:dd58483:     public void selectDistinctBinary5() throws SQLException {
1:dd58483:         JDBC.assertDrainResults(ps.executeQuery(), EXPECTED_DISTINCT_BINARY5);
1:dd58483:     }
1:dd58483: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SelectDistinctTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd58483
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.perf.basic.jdbc.SelectDistinctTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Performance tests for SELECT DISTINCT.
1:  */
1: public class SelectDistinctTest extends JDBCPerfTestCase {
1: 
1:     /** The prepared statement to be used in the test body. */
1:     private PreparedStatement ps;
1: 
1:     /**
1:      * Name of the test case for CHAR(5), and the name of the table used by
1:      * that test.
1:      */
1:     private static final String TEST_CHAR5 = "selectDistinctChar5";
1: 
1:     /**
1:      * The number of distinct rows to be expected in the test for CHAR(5).
1:      * Since the table contains all permutations of "ABCDE", there should be
1:      * 5! distinct rows.
1:      */
1:     private static final int EXPECTED_DISTINCT_CHAR5 = 5 * 4 * 3 * 2;
1: 
1:     /**
1:      * Name of the test case for CHAR(5) FOR BIT DATA, and the name of the
1:      * table used by that test.
1:      */
1:     private static final String TEST_BINARY5 = "selectDistinctBinary5";
1: 
1:     /**
1:      * The number of distinct rows to be expected in the test for CHAR(5) FOR
1:      * BIT DATA. Should be the same as in the test for CHAR(5).
1:      */
1:     private static final int EXPECTED_DISTINCT_BINARY5 =
1:             EXPECTED_DISTINCT_CHAR5;
1: 
1:     /**
1:      * Create a test case.
1:      *
1:      * @param name the name of the test method, and the name of the table used
1:      * in the test
1:      * @param iterations the number of iterations in each test
1:      * @param repeats the number of times each test should be repeated
1:      */
1:     private SelectDistinctTest(String name, int iterations, int repeats) {
1:         super(name, iterations, repeats);
1:     }
1: 
1:     /**
1:      * Create the suite of all test cases in this class.
1:      *
1:      * @return all test cases in this class
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("SelectDistinctTest");
1:         suite.addTest(new SelectDistinctTest(TEST_CHAR5, 2000, 4));
1:         suite.addTest(new SelectDistinctTest(TEST_BINARY5, 2000, 4));
1: 
1:         return new CleanDatabaseTestSetup(suite) {
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 s.execute("CREATE TABLE " + TEST_CHAR5 + "(COL CHAR(5))");
1:                 // insert all permutations of 'ABCDE'
1:                 s.execute("INSERT INTO " + TEST_CHAR5 +
1:                         " SELECT V1.X||V2.X||V3.X||V4.X||V5.X FROM " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V1(X), " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V2(X), " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V3(X), " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V4(X), " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') V5(X) " +
1:                         "WHERE (SELECT COUNT(*) FROM " +
1:                         "(VALUES 'A', 'B', 'C', 'D', 'E') VV(X) " +
1:                         "WHERE VV.X NOT IN (V1.X,V2.X,V3.X,V4.X,V5.X)) = 0");
1:                 // make some duplicates
1:                 for (int i = 0; i < 3; i++) {
1:                     s.execute("INSERT INTO " + TEST_CHAR5 + " " +
1:                             "SELECT * FROM " + TEST_CHAR5);
1:                 }
1: 
1:                 s.execute("CREATE TABLE " + TEST_BINARY5 +
1:                         "(COL CHAR(5) FOR BIT DATA)");
1:                 s.execute("CREATE FUNCTION CHAR_TO_BINARY(STR CHAR(5)) " +
1:                         "RETURNS CHAR(5) FOR BIT DATA " +
1:                         "LANGUAGE JAVA PARAMETER STYLE JAVA " +
1:                         "EXTERNAL NAME '" + SelectDistinctTest.class.getName() +
1:                         ".charToBinary' NO SQL");
1:                 s.execute("INSERT INTO " + TEST_BINARY5 +
1:                         " SELECT CHAR_TO_BINARY(COL) FROM " + TEST_CHAR5);
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Set up the test environment.
1:      */
1:     protected void setUp() throws SQLException {
1:         ps = prepareStatement("SELECT DISTINCT * FROM " + getName());
1:     }
1: 
1:     /**
1:      * Tear down the test environment.
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         ps = null; // automatically closed in super.tearDown()
1:     }
1: 
1:     /**
1:      * Stored function that converts an SQL CHAR value to an SQL CHAR FOR BIT
1:      * DATA value.
1:      *
1:      * @param s the string to convert to binary data
1:      * @return binary UTF-8 representation of the string
1:      */
1:     public static byte[] charToBinary(String s)
1:             throws UnsupportedEncodingException {
1:         return s.getBytes("UTF-8");
1:     }
1: 
1:     /**
1:      * Test case for SELECT DISTINCT on a CHAR(5) column.
1:      */
1:     public void selectDistinctChar5() throws SQLException {
1:         JDBC.assertDrainResults(ps.executeQuery(), EXPECTED_DISTINCT_CHAR5);
1:     }
1: 
1:     /**
1:      * Test case for SELECT DISTINCT on a CHAR(5) FOR BIT DATA column.
1:      */
1:     public void selectDistinctBinary5() throws SQLException {
1:         JDBC.assertDrainResults(ps.executeQuery(), EXPECTED_DISTINCT_BINARY5);
1:     }
1: }
============================================================================