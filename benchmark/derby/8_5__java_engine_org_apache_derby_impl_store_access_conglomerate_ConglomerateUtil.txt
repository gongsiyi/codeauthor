1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b61f876: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:b61f876: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:b61f876: import org.apache.derby.iapi.types.StringDataValue;
1:eac0369: 
1:eac0369: import java.io.IOException; 
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Static utility routine package for all Conglomerates.
1:eac0369:  * <p>
1:eac0369:  * A collection of static utility routines that are shared by multiple
1:eac0369:  * Conglomerate implementations.
1:eac0369:  * <p>
1:eac0369:  **/
1:eac0369: public final class ConglomerateUtil
1:eac0369: {
1:eac0369: 
1:eac0369:     /* Public Methods of This class: (arranged Alphabetically ) */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Create a list of all the properties that Access wants to export
1:eac0369:      * through the getInternalTablePropertySet() call.
1:eac0369:      * <p>
1:eac0369:      * This utility routine creates a list of properties that are shared by
1:eac0369:      * all conglomerates.  This list contains the following:
3:eac0369:      *
1:eac0369:      *     derby.storage.initialPages
1:eac0369:      *     derby.storage.minimumRecordSize
1:eac0369:      *     derby.storage.pageReservedSpace
1:eac0369:      *     derby.storage.pageSize 
1:eac0369: 	 *     derby.storage.reusableRecordId
1:eac0369:      *     
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The Property set filled in.
1:eac0369:      *
1:eac0369:      * @param prop   If non-null the property set to fill in.
1:eac0369:      **/
1:eac0369:     public static Properties createRawStorePropertySet(
1:eac0369:     Properties  prop)
1:eac0369:     {
1:eac0369:         prop = createUserRawStorePropertySet(prop);
1:eac0369: 
1:eac0369:         prop.put(RawStoreFactory.PAGE_REUSABLE_RECORD_ID,       "");
1:eac0369: 
1:eac0369:         return(prop);
1:eac0369:     }
1:eac0369: 
1:b61f876:     /**
1:eac0369:      * Create a list of all the properties that Access wants to export
1:eac0369:      * through the getInternalTablePropertySet() call.
1:b61f876:      * <p>
1:eac0369:      * This utility routine creates a list of properties that are shared by
1:eac0369:      * all conglomerates.  This list contains the following:
1:b61f876:      *
1:eac0369:      *     derby.storage.initialPages
1:eac0369:      *     derby.storage.minimumRecordSize
1:eac0369:      *     derby.storage.pageReservedSpace
1:eac0369:      *     derby.storage.pageSize 
1:eac0369:      *     
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The Property set filled in.
1:eac0369:      *
1:eac0369:      * @param prop   If non-null the property set to fill in.
1:eac0369:      **/
1:eac0369:     public static Properties createUserRawStorePropertySet(
1:eac0369:     Properties  prop)
1:eac0369:     {
1:eac0369:         if (prop == null)
1:eac0369:             prop = new Properties();
1:eac0369: 
1:eac0369:         prop.put(Property.PAGE_SIZE_PARAMETER,           "");
1:eac0369:         prop.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, "");
1:eac0369:         prop.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, "");
1:eac0369:         prop.put(RawStoreFactory.CONTAINER_INITIAL_PAGES,       "");
1:eac0369: 
1:eac0369:         return(prop);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Given an array of objects, return an array of format id's.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return An array of format id's describing the input array of objects.
1:eac0369:      *
1:b61f876:      * @param template a row.
1:b61f876:      *
1:eac0369:      **/
1:eac0369:     public static int[] createFormatIds(
1:eac0369:     DataValueDescriptor[]    template)
1:eac0369:     {
1:eac0369: 
1:eac0369:         // get format id's from each column in template
1:eac0369:         // conglomerate state.
1:eac0369: 
1:eac0369:         int[] format_ids = new int[template.length];
1:eac0369: 
1:eac0369:         for (int i = 0; i < template.length; i++)
1:eac0369:         {
1:eac0369:             if (SanityManager.DEBUG)
1:eac0369:             {
1:eac0369: 				if (template[i] == null)
1:eac0369: 				{
1:eac0369:                 	SanityManager.THROWASSERT("row template is null for "+
1:eac0369: 							"column["+i+"].");
1:eac0369: 				}
1:eac0369: 				if (!(template[i] instanceof Formatable))
1:eac0369: 				{
1:eac0369:                 	SanityManager.THROWASSERT("row template is not formatable "+
1:eac0369: 							"column["+i+"].  Type is "+template[i].getClass().getName());
1:eac0369: 				}
1:eac0369:             }
1:eac0369: 
1:eac0369:             format_ids[i] = ((Formatable) template[i]).getTypeFormatId();
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(format_ids);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Read a format id array in from a stream.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A new array of format id's.
1:eac0369:      *
1:eac0369:      * @param num         The number of format ids to read.
1:eac0369:      * @param in          The stream to read the array of format id's from.
1:eac0369:      *
1:eac0369: 	 * @exception  IOException  Thown on read error.
1:eac0369:      **/
1:eac0369:     public static int[] readFormatIdArray(
1:eac0369:     int         num,
1:eac0369:     ObjectInput in)
1:eac0369:         throws IOException
1:eac0369:     {
1:eac0369:         // read in the array of format id's
1:eac0369: 
1:eac0369:         int[] format_ids = new int[num];
1:eac0369:         for (int i = 0; i < num; i++)
1:eac0369:         {
1:eac0369:             format_ids[i] = FormatIdUtil.readFormatIdInteger(in);
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(format_ids);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Write a format id array to a stream.
1:eac0369:      * <p>
1:eac0369:      *
1:b61f876:      * @param format_id_array The array of format ids to write.
1:eac0369:      * @param out             The stream to write the array of format id's to.
1:eac0369:      *
1:eac0369: 	 * @exception  IOException  Thown on write error.
1:eac0369:      **/
1:eac0369:     public static void writeFormatIdArray(
1:eac0369:     int[]     format_id_array,
1:eac0369:     ObjectOutput out)
1:eac0369:         throws IOException
1:eac0369:     {
1:eac0369:         for (int i = 0; i < format_id_array.length; i++)
1:eac0369:         {
1:eac0369:             FormatIdUtil.writeFormatIdInteger(out, format_id_array[i]);
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:b61f876:      * Given an array of columnOrderings, return an array of collation ids.
1:eac0369:      * <p>
1:b61f876:      * If input array is null, produce a default collation_id array of all
1:b61f876:      * StringDataValue.COLLATION_TYPE_UCS_BASIC values.
1:b61f876:      *
1:b61f876:      * @return An array of collation id's describing the input array of objects.
1:b61f876:      **/
1:b61f876:     public static int[] createCollationIds(
1:b61f876:     int     sizeof_ids,
1:b61f876:     int[]   collationIds)
1:b61f876:     {
1:b61f876:         int[] collation_ids = new int[sizeof_ids];
1:b61f876:         if (collationIds != null)
1:b61f876:         {
1:b61f876:             if (SanityManager.DEBUG)
1:b61f876:             {
1:b61f876:                 if (sizeof_ids != collationIds.length)
1:b61f876:                 {
1:b61f876:                     SanityManager.THROWASSERT(
1:b61f876:                         "sizeof_ids = " + sizeof_ids +
1:b61f876:                         ";collationIds.length = " + collationIds.length);
1:b61f876:                 }
1:b61f876:             }
1:b61f876:             System.arraycopy(
1:b61f876:                 collationIds, 0, collation_ids, 0, collationIds.length);
1:b61f876:         }
1:b61f876:         else
1:b61f876:         {
1:b61f876:             for (int i = 0; i < collation_ids.length; i++)
1:b61f876:             {
1:b61f876:                 collation_ids[i] = StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:b61f876:             }
1:b61f876:         }
1:b61f876: 
1:b61f876:         return(collation_ids);
1:b61f876:     }
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Write array of collation id's as a sparse array.
1:b61f876:      * <p>
1:b61f876:      * The format only writes out those array entries which are not 
1:b61f876:      * StringDataValue.COLLATION_TYPE_UCS_BASIC.  The sparse array
1:b61f876:      * first writes the number of entries as a compressed int.  And
1:b61f876:      * then for each non-COLLATION_TYPE_UCS_BASIC, it writes out a
1:b61f876:      * pair of compressed ints:
1:b61f876:      *
1:b61f876:      *     (array offset, array entry value)
1:b61f876:      *
1:b61f876:      * @param collation_id_array The array of collation ids to write.
1:b61f876:      * @param out                The stream to write the collation id's to.
1:b61f876:      *
1:b61f876: 	 * @exception  IOException  Thown on write error.
1:b61f876:      **/
1:b61f876:     public static void writeCollationIdArray(
1:b61f876:     int[]           collation_id_array, 
1:b61f876:     ObjectOutput    out)
1:b61f876:         throws IOException
1:b61f876:     {
1:b61f876:         // count non COLLATION_TYPE_UCS_BASIC values.
1:b61f876:         int non_collate_val_count = 0;
1:b61f876:         for (int i = 0; i < collation_id_array.length; i++)
1:b61f876:         {
1:b61f876:             if (collation_id_array[i] != 
1:b61f876:                     StringDataValue.COLLATION_TYPE_UCS_BASIC)
1:b61f876:             {
1:b61f876:                 non_collate_val_count++;
1:b61f876:             }
1:b61f876:         }
1:b61f876: 
1:b61f876:         // write number of sparse entries as compressed int
1:b61f876:         CompressedNumber.writeInt(out, non_collate_val_count);
1:b61f876: 
1:b61f876:         for (int i = 0; i < collation_id_array.length; i++)
1:b61f876:         {
1:b61f876:             if (collation_id_array[i] != 
1:b61f876:                     StringDataValue.COLLATION_TYPE_UCS_BASIC)
1:b61f876:             {
1:b61f876:                 // write array index as compressed number
1:b61f876:                 CompressedNumber.writeInt(out, i);
1:b61f876: 
1:b61f876:                 // write array[i] value as compressed number
1:b61f876:                 CompressedNumber.writeInt(out, collation_id_array[i]);
1:b61f876:             }
1:b61f876:         }
1:b61f876:     }
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Read "sparse" array of collation id's
1:b61f876:      * <p>
1:b61f876:      * The format to be read first has the number of entries as a compressed 
1:b61f876:      * int.  And then for each non-COLLATION_TYPE_UCS_BASIC value there is
1:b61f876:      * pair of compressed ints:
1:b61f876:      *
1:b61f876:      *     (array offset, array entry value)
1:b61f876:      * <p>
1:b61f876:      * reads the sparse array as written by writeCollationIdArray().
1:b61f876:      *
1:b61f876:      * @param collation_id_array update's only those array entries that have
1:b61f876:      *                           been set in the sparse array stream.
1:b61f876:      *                           Those values are set as indicated by reading 
1:b61f876:      *                           the sparse array from the stream.
1:b61f876:      *                           
1:b61f876:      * @param in                 The stream to read the collation info from.
1:9a3cbed:      * @return {@code true} if at least one column has a different collation
1:9a3cbed:      *      than UCS BASIC, {@code false} otherwise.
1:b61f876:      *
1:b61f876:      **/
1:9a3cbed:     public static boolean readCollationIdArray(
1:b61f876:     int[]           collation_id_array,
1:b61f876:     ObjectInput     in)
1:b61f876:         throws IOException
1:b61f876: 	{
1:b61f876: 
1:b61f876:         // A sparse array is stored on disk, only 
1:b61f876:         // non-COLLATION_TYPE_UCS_BASIC values are stored.  
1:b61f876:         // These are stored as pairs of compressed ints:
1:b61f876:         //     (array offset, array entry value)
1:b61f876: 
1:b61f876: 
1:b61f876:         // 1st on disk is number of entries stored as compressed a int
1:b61f876:         int num_compressed_entries = CompressedNumber.readInt(in);
1:b61f876:         for (int i = 0; i < num_compressed_entries; i++)
1:b61f876:         {
1:b61f876:             // values are stored in the stream as pairs: (index, value)
1:b61f876:             int array_index = CompressedNumber.readInt(in);
1:b61f876:             collation_id_array[array_index] = CompressedNumber.readInt(in);
1:b61f876:         }
1:9a3cbed:         return num_compressed_entries > 0;
1:b61f876: 	}
1:b61f876: 
1:eac0369: 	/**
1:eac0369: 	 ** Format a page of data, as access see's it.
1:eac0369: 	 **/
1:eac0369: 
1:eac0369: 	public static String debugPage(
1:eac0369:     Page                    page,
1:eac0369:     int                     start_slot,
1:eac0369:     boolean                 full_rh,
1:eac0369:     DataValueDescriptor[]   template)
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             StringBuffer string = new StringBuffer(4096);
1:eac0369: 
1:eac0369:             string.append("PAGE:(");
1:eac0369:             string.append(page.getPageNumber());
1:eac0369:             string.append(")------------------------------------------:\n");
1:eac0369: 
1:eac0369:             try
1:eac0369:             {
1:eac0369:                 if (page != null)
1:eac0369:                 {
1:eac0369:                     int numrows   = page.recordCount();
1:eac0369: 
1:eac0369:                     for (int slot_no = start_slot; slot_no < numrows; slot_no++)
1:eac0369:                     {
1:eac0369:                         RecordHandle rh = 
1:eac0369:                             page.fetchFromSlot(
1:eac0369:                                (RecordHandle) null, slot_no, template, 
1:eac0369:                                (FetchDescriptor) null,
1:eac0369:                                true);
1:eac0369: 
1:eac0369:                         // pre-pend either "D:" if deleted, or " :" if not.
1:eac0369:                         string.append(
1:eac0369:                             page.isDeletedAtSlot(slot_no) ? "D:" : " :");
1:eac0369: 
1:eac0369:                         // row[slot,id]:
1:eac0369:                         string.append("row[");
1:eac0369:                         string.append(slot_no);
1:eac0369:                         string.append("](id:");
1:eac0369:                         string.append(rh.getId());
1:eac0369:                         string.append("):\t");
1:eac0369: 
1:eac0369:                         // long record handle: 
1:eac0369:                         //   Record id=78 Page(31,Container(0, 919707766934))
1:eac0369:                         if (full_rh)
1:eac0369:                         {
1:eac0369:                             string.append("[");
1:eac0369:                             string.append(rh.toString());
1:eac0369:                             string.append("]:");
1:eac0369:                         }
1:eac0369: 
1:eac0369:                         // row:
1:eac0369:                         string.append(RowUtil.toString(template));
1:eac0369:                         string.append("\n");
1:eac0369:                     }
1:eac0369: 
1:eac0369:                     // string.append(page.toString());
1:eac0369:                 }
1:eac0369:             }
1:eac0369:             catch (Throwable t)
1:eac0369:             {
1:eac0369:                 string.append("Error encountered while building string");
1:eac0369:             }
1:eac0369: 
1:eac0369:             return(string.toString());
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(null);
1:eac0369:         }
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9a3cbed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @return {@code true} if at least one column has a different collation
1:      *      than UCS BASIC, {@code false} otherwise.
1:     public static boolean readCollationIdArray(
/////////////////////////////////////////////////////////////////////////
1:         return num_compressed_entries > 0;
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:032cad8
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
1: 
1: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
1:      * @param format_id_array The array of format ids to write.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Given an array of columnOrderings, return an array of collation ids.
1:      * <p>
1:      * If input array is null, produce a default collation_id array of all
1:      * StringDataValue.COLLATION_TYPE_UCS_BASIC values.
1:      *
1:      * @return An array of collation id's describing the input array of objects.
1:      *
1:      * @param template a row.
1:      *
1:      **/
1:     public static int[] createCollationIds(
1:     int     sizeof_ids,
1:     int[]   collationIds)
1:     {
1:         int[] collation_ids = new int[sizeof_ids];
1:         if (collationIds != null)
1:         {
1:             if (SanityManager.DEBUG)
1:             {
1:                 if (sizeof_ids != collationIds.length)
1:                 {
1:                     SanityManager.THROWASSERT(
1:                         "sizeof_ids = " + sizeof_ids +
1:                         ";collationIds.length = " + collationIds.length);
1:                 }
1:             }
1:             System.arraycopy(
1:                 collationIds, 0, collation_ids, 0, collationIds.length);
1:         }
1:         else
1:         {
1:             for (int i = 0; i < collation_ids.length; i++)
1:             {
1:                 collation_ids[i] = StringDataValue.COLLATION_TYPE_UCS_BASIC;
1:             }
1:         }
1: 
1:         return(collation_ids);
1:     }
1: 
1:     /**
1:      * Write array of collation id's as a sparse array.
1:      * <p>
1:      * The format only writes out those array entries which are not 
1:      * StringDataValue.COLLATION_TYPE_UCS_BASIC.  The sparse array
1:      * first writes the number of entries as a compressed int.  And
1:      * then for each non-COLLATION_TYPE_UCS_BASIC, it writes out a
1:      * pair of compressed ints:
1:      *
1:      *     (array offset, array entry value)
1:      *
1:      * @param collation_id_array The array of collation ids to write.
1:      * @param out                The stream to write the collation id's to.
1:      *
1: 	 * @exception  IOException  Thown on write error.
1:      **/
1:     public static void writeCollationIdArray(
1:     int[]           collation_id_array, 
1:     ObjectOutput    out)
1:         throws IOException
1:     {
1:         // count non COLLATION_TYPE_UCS_BASIC values.
1:         int non_collate_val_count = 0;
1:         for (int i = 0; i < collation_id_array.length; i++)
1:         {
1:             if (collation_id_array[i] != 
1:                     StringDataValue.COLLATION_TYPE_UCS_BASIC)
1:             {
1:                 non_collate_val_count++;
1:             }
1:         }
1: 
1:         // write number of sparse entries as compressed int
1:         CompressedNumber.writeInt(out, non_collate_val_count);
1: 
1:         for (int i = 0; i < collation_id_array.length; i++)
1:         {
1:             if (collation_id_array[i] != 
1:                     StringDataValue.COLLATION_TYPE_UCS_BASIC)
1:             {
1:                 // write array index as compressed number
1:                 CompressedNumber.writeInt(out, i);
1: 
1:                 // write array[i] value as compressed number
1:                 CompressedNumber.writeInt(out, collation_id_array[i]);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Read "sparse" array of collation id's
1:      * <p>
1:      * The format to be read first has the number of entries as a compressed 
1:      * int.  And then for each non-COLLATION_TYPE_UCS_BASIC value there is
1:      * pair of compressed ints:
1:      *
1:      *     (array offset, array entry value)
1:      * <p>
1:      * reads the sparse array as written by writeCollationIdArray().
1:      *
1:      * @param collation_id_array update's only those array entries that have
1:      *                           been set in the sparse array stream.
1:      *                           Those values are set as indicated by reading 
1:      *                           the sparse array from the stream.
1:      *                           
1:      * @param in                 The stream to read the collation info from.
1:      *
1:      **/
0:     public static void readCollationIdArray(
1:     int[]           collation_id_array,
1:     ObjectInput     in)
1:         throws IOException
1: 	{
1: 
1:         // A sparse array is stored on disk, only 
1:         // non-COLLATION_TYPE_UCS_BASIC values are stored.  
1:         // These are stored as pairs of compressed ints:
1:         //     (array offset, array entry value)
1: 
1: 
1:         // 1st on disk is number of entries stored as compressed a int
1:         int num_compressed_entries = CompressedNumber.readInt(in);
1:         for (int i = 0; i < num_compressed_entries; i++)
1:         {
1:             // values are stored in the stream as pairs: (index, value)
1:             int array_index = CompressedNumber.readInt(in);
1:             collation_id_array[array_index] = CompressedNumber.readInt(in);
1:         }
1: 	}
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.io.IOException; 
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
0: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: /**
1:  * Static utility routine package for all Conglomerates.
1:  * <p>
1:  * A collection of static utility routines that are shared by multiple
1:  * Conglomerate implementations.
1:  * <p>
1:  **/
1: public final class ConglomerateUtil
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /* Public Methods of This class: (arranged Alphabetically ) */
1: 
1:     /**
1:      * Create a list of all the properties that Access wants to export
1:      * through the getInternalTablePropertySet() call.
1:      * <p>
1:      * This utility routine creates a list of properties that are shared by
1:      * all conglomerates.  This list contains the following:
1:      *
1:      *     derby.storage.initialPages
1:      *     derby.storage.minimumRecordSize
1:      *     derby.storage.pageReservedSpace
1:      *     derby.storage.pageSize 
1: 	 *     derby.storage.reusableRecordId
1:      *     
1:      * <p>
1:      *
1: 	 * @return The Property set filled in.
1:      *
1:      * @param prop   If non-null the property set to fill in.
1:      **/
1:     public static Properties createRawStorePropertySet(
1:     Properties  prop)
1:     {
1:         prop = createUserRawStorePropertySet(prop);
1: 
1:         prop.put(RawStoreFactory.PAGE_REUSABLE_RECORD_ID,       "");
1: 
1:         return(prop);
1:     }
1: 
1:     /**
1:      * Create a list of all the properties that Access wants to export
1:      * through the getInternalTablePropertySet() call.
1:      * <p>
1:      * This utility routine creates a list of properties that are shared by
1:      * all conglomerates.  This list contains the following:
1:      *
1:      *     derby.storage.initialPages
1:      *     derby.storage.minimumRecordSize
1:      *     derby.storage.pageReservedSpace
1:      *     derby.storage.pageSize 
1:      *     
1:      * <p>
1:      *
1: 	 * @return The Property set filled in.
1:      *
1:      * @param prop   If non-null the property set to fill in.
1:      **/
1:     public static Properties createUserRawStorePropertySet(
1:     Properties  prop)
1:     {
1:         if (prop == null)
1:             prop = new Properties();
1: 
1:         prop.put(Property.PAGE_SIZE_PARAMETER,           "");
1:         prop.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, "");
1:         prop.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, "");
1:         prop.put(RawStoreFactory.CONTAINER_INITIAL_PAGES,       "");
1: 
1:         return(prop);
1:     }
1: 
1: 
1:     /**
1:      * Given an array of objects, return an array of format id's.
1:      * <p>
1:      *
1: 	 * @return An array of format id's describing the input array of objects.
1:      *
0:      * @param template a row.
1:      *
1:      **/
1:     public static int[] createFormatIds(
1:     DataValueDescriptor[]    template)
1:     {
1: 
1:         // get format id's from each column in template
1:         // conglomerate state.
1: 
1:         int[] format_ids = new int[template.length];
1: 
1:         for (int i = 0; i < template.length; i++)
1:         {
1:             if (SanityManager.DEBUG)
1:             {
1: 				if (template[i] == null)
1: 				{
1:                 	SanityManager.THROWASSERT("row template is null for "+
1: 							"column["+i+"].");
1: 				}
1: 				if (!(template[i] instanceof Formatable))
1: 				{
1:                 	SanityManager.THROWASSERT("row template is not formatable "+
1: 							"column["+i+"].  Type is "+template[i].getClass().getName());
1: 				}
1:             }
1: 
1:             format_ids[i] = ((Formatable) template[i]).getTypeFormatId();
1:         }
1: 
1:         return(format_ids);
1:     }
1: 
1:     /**
1:      * Read a format id array in from a stream.
1:      * <p>
1:      *
1: 	 * @return A new array of format id's.
1:      *
1:      * @param num         The number of format ids to read.
1:      * @param in          The stream to read the array of format id's from.
1:      *
1: 	 * @exception  IOException  Thown on read error.
1:      **/
1:     public static int[] readFormatIdArray(
1:     int         num,
1:     ObjectInput in)
1:         throws IOException
1:     {
1:         // read in the array of format id's
1: 
1:         int[] format_ids = new int[num];
1:         for (int i = 0; i < num; i++)
1:         {
1:             format_ids[i] = FormatIdUtil.readFormatIdInteger(in);
1:         }
1: 
1:         return(format_ids);
1:     }
1: 
1:     /**
1:      * Write a format id array to a stream.
1:      * <p>
1:      *
0:      * @param format_id_array The number of format ids to read.
1:      * @param out             The stream to write the array of format id's to.
1:      *
1: 	 * @exception  IOException  Thown on write error.
1:      **/
1:     public static void writeFormatIdArray(
1:     int[]     format_id_array,
1:     ObjectOutput out)
1:         throws IOException
1:     {
1:         for (int i = 0; i < format_id_array.length; i++)
1:         {
1:             FormatIdUtil.writeFormatIdInteger(out, format_id_array[i]);
1:         }
1:     }
1: 
1: 	/**
1: 	 ** Format a page of data, as access see's it.
1: 	 **/
1: 
1: 	public static String debugPage(
1:     Page                    page,
1:     int                     start_slot,
1:     boolean                 full_rh,
1:     DataValueDescriptor[]   template)
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             StringBuffer string = new StringBuffer(4096);
1: 
1:             string.append("PAGE:(");
1:             string.append(page.getPageNumber());
1:             string.append(")------------------------------------------:\n");
1: 
1:             try
1:             {
1:                 if (page != null)
1:                 {
1:                     int numrows   = page.recordCount();
1: 
1:                     for (int slot_no = start_slot; slot_no < numrows; slot_no++)
1:                     {
1:                         RecordHandle rh = 
1:                             page.fetchFromSlot(
1:                                (RecordHandle) null, slot_no, template, 
1:                                (FetchDescriptor) null,
1:                                true);
1: 
1:                         // pre-pend either "D:" if deleted, or " :" if not.
1:                         string.append(
1:                             page.isDeletedAtSlot(slot_no) ? "D:" : " :");
1: 
1:                         // row[slot,id]:
1:                         string.append("row[");
1:                         string.append(slot_no);
1:                         string.append("](id:");
1:                         string.append(rh.getId());
1:                         string.append("):\t");
1: 
1:                         // long record handle: 
1:                         //   Record id=78 Page(31,Container(0, 919707766934))
1:                         if (full_rh)
1:                         {
1:                             string.append("[");
1:                             string.append(rh.toString());
1:                             string.append("]:");
1:                         }
1: 
1:                         // row:
1:                         string.append(RowUtil.toString(template));
1:                         string.append("\n");
1:                     }
1: 
1:                     // string.append(page.toString());
1:                 }
1:             }
1:             catch (Throwable t)
1:             {
1:                 string.append("Error encountered while building string");
1:             }
1: 
1:             return(string.toString());
1:         }
1:         else
1:         {
1:             return(null);
1:         }
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.io.IOException; 
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: 
0: import java.util.Hashtable;
0: import java.util.Properties;
0: 
0: /**
0:  * Static utility routine package for all Conglomerates.
0:  * <p>
0:  * A collection of static utility routines that are shared by multiple
0:  * Conglomerate implementations.
0:  * <p>
0:  **/
0: public final class ConglomerateUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /* Public Methods of This class: (arranged Alphabetically ) */
0: 
0:     /**
0:      * Create a list of all the properties that Access wants to export
0:      * through the getInternalTablePropertySet() call.
0:      * <p>
0:      * This utility routine creates a list of properties that are shared by
0:      * all conglomerates.  This list contains the following:
0:      *
0:      *     derby.storage.initialPages
0:      *     derby.storage.minimumRecordSize
0:      *     derby.storage.pageReservedSpace
0:      *     derby.storage.pageSize 
0: 	 *     derby.storage.reusableRecordId
0:      *     
0:      * <p>
0:      *
0: 	 * @return The Property set filled in.
0:      *
0:      * @param prop   If non-null the property set to fill in.
0:      **/
0:     public static Properties createRawStorePropertySet(
0:     Properties  prop)
0:     {
0:         prop = createUserRawStorePropertySet(prop);
0: 
0:         prop.put(RawStoreFactory.PAGE_REUSABLE_RECORD_ID,       "");
0: 
0:         return(prop);
0:     }
0: 
0:     /**
0:      * Create a list of all the properties that Access wants to export
0:      * through the getInternalTablePropertySet() call.
0:      * <p>
0:      * This utility routine creates a list of properties that are shared by
0:      * all conglomerates.  This list contains the following:
0:      *
0:      *     derby.storage.initialPages
0:      *     derby.storage.minimumRecordSize
0:      *     derby.storage.pageReservedSpace
0:      *     derby.storage.pageSize 
0:      *     
0:      * <p>
0:      *
0: 	 * @return The Property set filled in.
0:      *
0:      * @param prop   If non-null the property set to fill in.
0:      **/
0:     public static Properties createUserRawStorePropertySet(
0:     Properties  prop)
0:     {
0:         if (prop == null)
0:             prop = new Properties();
0: 
0:         prop.put(Property.PAGE_SIZE_PARAMETER,           "");
0:         prop.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER, "");
0:         prop.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER, "");
0:         prop.put(RawStoreFactory.CONTAINER_INITIAL_PAGES,       "");
0: 
0:         return(prop);
0:     }
0: 
0: 
0:     /**
0:      * Given an array of objects, return an array of format id's.
0:      * <p>
0:      *
0: 	 * @return An array of format id's describing the input array of objects.
0:      *
0:      * @param template a row.
0:      *
0:      **/
0:     public static int[] createFormatIds(
0:     DataValueDescriptor[]    template)
0:     {
0: 
0:         // get format id's from each column in template
0:         // conglomerate state.
0: 
0:         int[] format_ids = new int[template.length];
0: 
0:         for (int i = 0; i < template.length; i++)
0:         {
0:             if (SanityManager.DEBUG)
0:             {
0: 				if (template[i] == null)
0: 				{
0:                 	SanityManager.THROWASSERT("row template is null for "+
0: 							"column["+i+"].");
0: 				}
0: 				if (!(template[i] instanceof Formatable))
0: 				{
0:                 	SanityManager.THROWASSERT("row template is not formatable "+
0: 							"column["+i+"].  Type is "+template[i].getClass().getName());
0: 				}
0:             }
0: 
0:             format_ids[i] = ((Formatable) template[i]).getTypeFormatId();
0:         }
0: 
0:         return(format_ids);
0:     }
0: 
0:     /**
0:      * Read a format id array in from a stream.
0:      * <p>
0:      *
0: 	 * @return A new array of format id's.
0:      *
0:      * @param num         The number of format ids to read.
0:      * @param in          The stream to read the array of format id's from.
0:      *
0: 	 * @exception  IOException  Thown on read error.
0:      **/
0:     public static int[] readFormatIdArray(
0:     int         num,
0:     ObjectInput in)
0:         throws IOException
0:     {
0:         // read in the array of format id's
0: 
0:         int[] format_ids = new int[num];
0:         for (int i = 0; i < num; i++)
0:         {
0:             format_ids[i] = FormatIdUtil.readFormatIdInteger(in);
0:         }
0: 
0:         return(format_ids);
0:     }
0: 
0:     /**
0:      * Write a format id array to a stream.
0:      * <p>
0:      *
0:      * @param format_id_array The number of format ids to read.
0:      * @param out             The stream to write the array of format id's to.
0:      *
0: 	 * @exception  IOException  Thown on write error.
0:      **/
0:     public static void writeFormatIdArray(
0:     int[]     format_id_array,
0:     ObjectOutput out)
0:         throws IOException
0:     {
0:         for (int i = 0; i < format_id_array.length; i++)
0:         {
0:             FormatIdUtil.writeFormatIdInteger(out, format_id_array[i]);
0:         }
0:     }
0: 
0: 	/**
0: 	 ** Format a page of data, as access see's it.
0: 	 **/
0: 
0: 	public static String debugPage(
0:     Page                    page,
0:     int                     start_slot,
0:     boolean                 full_rh,
0:     DataValueDescriptor[]   template)
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             StringBuffer string = new StringBuffer(4096);
0: 
0:             string.append("PAGE:(");
0:             string.append(page.getPageNumber());
0:             string.append(")------------------------------------------:\n");
0: 
0:             try
0:             {
0:                 if (page != null)
0:                 {
0:                     int numrows   = page.recordCount();
0: 
0:                     for (int slot_no = start_slot; slot_no < numrows; slot_no++)
0:                     {
0:                         RecordHandle rh = 
0:                             page.fetchFromSlot(
0:                                (RecordHandle) null, slot_no, template, 
0:                                (FetchDescriptor) null,
0:                                true);
0: 
0:                         // pre-pend either "D:" if deleted, or " :" if not.
0:                         string.append(
0:                             page.isDeletedAtSlot(slot_no) ? "D:" : " :");
0: 
0:                         // row[slot,id]:
0:                         string.append("row[");
0:                         string.append(slot_no);
0:                         string.append("](id:");
0:                         string.append(rh.getId());
0:                         string.append("):\t");
0: 
0:                         // long record handle: 
0:                         //   Record id=78 Page(31,Container(0, 919707766934))
0:                         if (full_rh)
0:                         {
0:                             string.append("[");
0:                             string.append(rh.toString());
0:                             string.append("]:");
0:                         }
0: 
0:                         // row:
0:                         string.append(RowUtil.toString(template));
0:                         string.append("\n");
0:                     }
0: 
0:                     // string.append(page.toString());
0:                 }
0:             }
0:             catch (Throwable t)
0:             {
0:                 string.append("Error encountered while building string");
0:             }
0: 
0:             return(string.toString());
0:         }
0:         else
0:         {
0:             return(null);
0:         }
0:     }
0: }
============================================================================