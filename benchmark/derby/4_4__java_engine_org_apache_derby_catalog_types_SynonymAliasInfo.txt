1:582425f: /*
2:582425f: 
1:582425f:    Derby - Class org.apache.derby.catalog.types.SynonymAliasInfo
1:582425f: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:582425f: 
1:582425f:       http://www.apache.org/licenses/LICENSE-2.0
1:582425f: 
1:582425f:    Unless required by applicable law or agreed to in writing, software
1:582425f:    distributed under the License is distributed on an "AS IS" BASIS,
1:582425f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:582425f:    See the License for the specific language governing permissions and
1:582425f:    limitations under the License.
1:582425f: 
1:582425f:  */
1:582425f: 
1:582425f: package org.apache.derby.catalog.types;
1:582425f: 
1:582425f: import org.apache.derby.iapi.services.io.Formatable;
1:582425f: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:98ec83e: import org.apache.derby.iapi.util.IdUtil;
1:582425f: import org.apache.derby.catalog.AliasInfo;
1:582425f: import java.io.IOException;
1:582425f: import java.io.ObjectInput;
1:582425f: import java.io.ObjectOutput;
1:582425f: 
1:582425f: /**
1:582425f:  * Describe an S (Synonym) alias.
1:582425f:  *
1:582425f:  * @see AliasInfo
1:582425f:  */
1:582425f: public class SynonymAliasInfo implements AliasInfo, Formatable
1:582425f: {
1:582425f: 	private String schemaName = null;
1:582425f: 	private String tableName = null;
1:582425f: 
1:582425f: 	public SynonymAliasInfo() {
1:582425f: 	}
1:582425f: 
1:582425f: 	/**
1:582425f: 		Create a SynonymAliasInfo for synonym.
1:582425f: 	*/
1:582425f: 	public SynonymAliasInfo(String schemaName, String tableName)
1:582425f: 	{
1:582425f: 		this.schemaName = schemaName;
1:582425f: 		this.tableName = tableName;
1:582425f: 	}
1:582425f: 
1:582425f: 	public String getSynonymTable() {
1:582425f: 		return tableName;
1:582425f: 	}
1:582425f: 
1:582425f: 	public String getSynonymSchema() {
1:582425f: 		return schemaName;
1:582425f: 	}
1:582425f: 
1:768e56f: 	public boolean isTableFunction() {return false; }
1:768e56f: 
1:582425f: 	// Formatable methods
1:582425f: 
1:582425f: 	/**
1:582425f: 	 * Read this object from a stream of stored objects.
1:582425f: 	 *
1:582425f: 	 * @param in read this.
1:582425f: 	 *
1:582425f: 	 * @exception IOException					thrown on error
1:582425f: 	 * @exception ClassNotFoundException		thrown on error
1:582425f: 	 */
1:582425f: 	public void readExternal( ObjectInput in )
1:582425f: 		 throws IOException, ClassNotFoundException
1:582425f: 	{
1:582425f: 		schemaName = (String) in.readObject();
1:582425f: 		tableName = (String) in.readObject();
1:582425f: 	}
1:582425f: 
1:582425f: 	/**
1:582425f: 	 * Write this object to a stream of stored objects.
1:582425f: 	 *
1:582425f: 	 * @param out write bytes here.
1:582425f: 	 *
1:582425f: 	 * @exception IOException		thrown on error
1:582425f: 	 */
1:582425f: 	public void writeExternal( ObjectOutput out )
1:582425f: 		 throws IOException
1:582425f: 	{
1:582425f: 		out.writeObject(schemaName);
1:582425f: 		out.writeObject(tableName);
1:582425f: 	}
1:582425f:  
1:582425f: 	/**
1:582425f: 	 * Get the formatID which corresponds to this class.
1:582425f: 	 *
1:582425f: 	 *	@return	the formatID of this class
1:582425f: 	 */
1:582425f: 	public	int	getTypeFormatId()	{ return StoredFormatIds.SYNONYM_INFO_V01_ID; }
1:582425f: 
1:582425f: 	public String toString() {
1:98ec83e:         return IdUtil.mkQualifiedName(schemaName, tableName);
1:582425f: 	}
1:582425f: 
1:582425f: 	public String getMethodName()
1:582425f: 	{
1:582425f: 		return null;
1:582425f: 	}
1:582425f: }
1:582425f: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:98ec83e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1:         return IdUtil.mkQualifiedName(schemaName, tableName);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:768e56f
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isTableFunction() {return false; }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.types.SynonymAliasInfo
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.AliasInfo;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * Describe an S (Synonym) alias.
1:  *
1:  * @see AliasInfo
1:  */
1: public class SynonymAliasInfo implements AliasInfo, Formatable
1: {
1: 	private String schemaName = null;
1: 	private String tableName = null;
1: 
1: 	public SynonymAliasInfo() {
1: 	}
1: 
1: 	/**
1: 		Create a SynonymAliasInfo for synonym.
1: 	*/
1: 	public SynonymAliasInfo(String schemaName, String tableName)
1: 	{
1: 		this.schemaName = schemaName;
1: 		this.tableName = tableName;
1: 	}
1: 
1: 	public String getSynonymTable() {
1: 		return tableName;
1: 	}
1: 
1: 	public String getSynonymSchema() {
1: 		return schemaName;
1: 	}
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		schemaName = (String) in.readObject();
1: 		tableName = (String) in.readObject();
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeObject(schemaName);
1: 		out.writeObject(tableName);
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.SYNONYM_INFO_V01_ID; }
1: 
1: 	public String toString() {
0: 		return "\"" + schemaName + "\".\"" + tableName + "\"";
1: 	}
1: 
1: 	public String getMethodName()
1: 	{
1: 		return null;
1: 	}
1: }
1: 
============================================================================