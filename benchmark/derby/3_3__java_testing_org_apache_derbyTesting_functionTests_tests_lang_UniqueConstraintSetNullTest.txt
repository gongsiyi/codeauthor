1:84cfe6f: /**
1:84cfe6f:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest
1:84cfe6f:  *
1:84cfe6f:  * Licensed to the Apache Software Foundation (ASF) under one
1:84cfe6f:  * or more contributor license agreements.  See the NOTICE file
1:84cfe6f:  * distributed with this work for additional information
1:84cfe6f:  * regarding copyright ownership.  The ASF licenses this file
1:84cfe6f:  * to you under the Apache License, Version 2.0 (the
1:84cfe6f:  * "License"); you may not use this file except in compliance
1:84cfe6f:  * with the License.  You may obtain a copy of the License at
1:84cfe6f:  *
1:84cfe6f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:84cfe6f:  *
1:84cfe6f:  * Unless required by applicable law or agreed to in writing,
1:84cfe6f:  * software distributed under the License is distributed on an
1:84cfe6f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:84cfe6f:  * KIND, either express or implied.  See the License for the
1:84cfe6f:  * specific language governing permissions and limitations
1:84cfe6f:  * under the License.
1:84cfe6f:  */
3:84cfe6f: 
1:84cfe6f: package org.apache.derbyTesting.functionTests.tests.lang;
1:84cfe6f: 
1:84cfe6f: import java.sql.PreparedStatement;
1:84cfe6f: import java.sql.SQLException;
1:84cfe6f: import java.sql.Statement;
1:84cfe6f: import java.sql.Types;
1:84cfe6f: import junit.framework.Test;
1:84cfe6f: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:84cfe6f: import org.apache.derbyTesting.junit.TestConfiguration;
1:84cfe6f: 
1:84cfe6f: /**
1:84cfe6f:  * Test unique constraint
1:84cfe6f:  */
1:84cfe6f: public class UniqueConstraintSetNullTest extends BaseJDBCTestCase {
1:84cfe6f:     
1:84cfe6f:     /**
1:84cfe6f:      * Basic constructor.
1:84cfe6f:      */
1:84cfe6f:     public UniqueConstraintSetNullTest(String name) {
1:84cfe6f:         super(name);
1:84cfe6f:     }
1:84cfe6f:     
1:84cfe6f:     /**
1:84cfe6f:      * Returns the implemented tests.
1:84cfe6f:      *
1:84cfe6f:      * @return An instance of <code>Test</code> with the
1:84cfe6f:      *         implemented tests to run.
1:84cfe6f:      */
1:84cfe6f:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("UniqueConstraintSetNullTest");
1:1ae02c9: 
1:84cfe6f:         suite.addTest(TestConfiguration.embeddedSuite(
1:84cfe6f:                 UniqueConstraintSetNullTest.class));
1:84cfe6f:         return suite;
1:84cfe6f:     }
1:84cfe6f:     
1:84cfe6f:     /**
1:84cfe6f:      * Create table for test cases to use.
1:84cfe6f:      */
1:84cfe6f:     protected void setUp() throws Exception {
1:6001ab6:         Statement stmt = createStatement();
1:84cfe6f:         stmt.executeUpdate("create table constraintest (" +
1:84cfe6f:                 "val1 varchar (20) not null, " +
1:84cfe6f:                 "val2 varchar (20))");
1:84cfe6f:     }
1:84cfe6f:     
1:84cfe6f:     protected void tearDown() throws Exception {
1:6001ab6:         dropTable("constraintest");
1:6001ab6:         commit();
1:84cfe6f:         super.tearDown();
1:84cfe6f:     }
1:84cfe6f:     /**
1:84cfe6f:      * Test the behaviour of unique constraint after making
1:84cfe6f:      * column nullable.
1:84cfe6f:      * @throws java.lang.Exception
1:84cfe6f:      */
1:84cfe6f:     public void testUpdateNullablity() throws Exception {
1:84cfe6f:         Statement stmt = createStatement();
1:84cfe6f:         //create constraint
1:84cfe6f:         stmt.executeUpdate("alter table constraintest add constraint " +
1:84cfe6f:                 "u_con unique (val1)");
1:84cfe6f:         //test the constraint without setting it to nullable
1:84cfe6f:         PreparedStatement ps = prepareStatement("insert into " +
1:84cfe6f:                 "constraintest (val1) values (?)");
1:84cfe6f:         ps.setString (1, "name1");
1:84cfe6f:         ps.executeUpdate();
1:84cfe6f:         try {
1:84cfe6f:             ps.setString (1, "name1");
1:84cfe6f:             ps.execute();
1:84cfe6f:             fail ("duplicate key in unique constraint!!!");
1:84cfe6f:         }
1:84cfe6f:         catch (SQLException e){
1:84cfe6f:             assertSQLState ("duplicate key in unique constraint",
1:84cfe6f:                     "23505", e);
1:84cfe6f:         }
1:84cfe6f:         try {
1:84cfe6f:             ps.setNull(1, Types.VARCHAR);
1:84cfe6f:             ps.executeUpdate();
1:84cfe6f:             fail ("null value in not null field!!");
1:84cfe6f:         }
1:84cfe6f:         catch (SQLException e){
1:84cfe6f:             assertSQLState ("null value in non null field",
1:84cfe6f:                     "23502", e);
1:84cfe6f:         }
1:84cfe6f:         stmt.executeUpdate("alter table constraintest alter column val1 null");
1:84cfe6f:         //should work
1:84cfe6f:         ps.setNull(1, Types.VARCHAR);
1:84cfe6f:         ps.executeUpdate();
1:84cfe6f:         //try another null
1:84cfe6f:         ps.setNull(1, Types.VARCHAR);
1:84cfe6f:         ps.executeUpdate();
1:84cfe6f:         //try a duplicate non null should fail
1:84cfe6f:         try {
1:84cfe6f:             ps.setString (1, "name1");
1:84cfe6f:             ps.execute();
1:84cfe6f:             fail ("duplicate key in unique constraint!!!");
1:84cfe6f:         }
1:84cfe6f:         catch (SQLException e){
1:84cfe6f:             assertSQLState ("duplicate key in unique constraint",
1:84cfe6f:                     "23505", e);
1:84cfe6f:         }
1:84cfe6f:         //remove nulls from table and set the column back to non null
1:84cfe6f:         stmt.executeUpdate("delete from constraintest where val1 is null");
1:84cfe6f:         stmt.executeUpdate("alter table constraintest alter column " +
1:84cfe6f:                 "val1 not null");
1:84cfe6f:         //try a duplicate non null key
1:84cfe6f:         try {
1:84cfe6f:             ps.setString (1, "name1");
1:84cfe6f:             ps.execute();
1:84cfe6f:             fail ("duplicate key in unique constraint!!!");
1:84cfe6f:         }
1:84cfe6f:         catch (SQLException e){
1:84cfe6f:             assertSQLState ("duplicate key in unique constraint",
1:84cfe6f:                     "23505", e);
1:84cfe6f:         }
1:84cfe6f:         try {
1:84cfe6f:             ps.setNull(1, Types.VARCHAR);
1:84cfe6f:             ps.executeUpdate();
1:84cfe6f:             fail ("null value in not null field!!");
1:84cfe6f:         }
1:84cfe6f:         catch (SQLException e){
1:84cfe6f:             assertSQLState ("null value in non null field",
1:84cfe6f:                     "23502", e);
1:84cfe6f:         }
1:84cfe6f:     }
1:84cfe6f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("UniqueConstraintSetNullTest");
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6001ab6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = createStatement();
1:         dropTable("constraintest");
1:         commit();
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:84cfe6f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.Savepoint;
1: import java.sql.Statement;
1: import java.sql.Types;
0: import java.util.Enumeration;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestFailure;
0: import junit.framework.TestResult;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test unique constraint
1:  */
1: public class UniqueConstraintSetNullTest extends BaseJDBCTestCase {
1:     
1:     /**
1:      * Basic constructor.
1:      */
1:     public UniqueConstraintSetNullTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Returns the implemented tests.
1:      *
1:      * @return An instance of <code>Test</code> with the
1:      *         implemented tests to run.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("UniqueConstraintSetNullTest");
1:         suite.addTest(TestConfiguration.embeddedSuite(
1:                 UniqueConstraintSetNullTest.class));
1:         return suite;
1:     }
1:     
1:     /**
1:      * Create table for test cases to use.
1:      */
1:     protected void setUp() throws Exception {
0:         Connection con = getConnection();
0:         Statement stmt = con.createStatement();
1:         stmt.executeUpdate("create table constraintest (" +
1:                 "val1 varchar (20) not null, " +
1:                 "val2 varchar (20))");
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
0:         Connection con = getConnection();
0:         Statement stmt = con.createStatement();
0:         stmt.executeUpdate("drop table constraintest");
0:         con.commit();
1:     }
1:     /**
1:      * Test the behaviour of unique constraint after making
1:      * column nullable.
1:      * @throws java.lang.Exception
1:      */
1:     public void testUpdateNullablity() throws Exception {
1:         Statement stmt = createStatement();
1:         //create constraint
1:         stmt.executeUpdate("alter table constraintest add constraint " +
1:                 "u_con unique (val1)");
1:         //test the constraint without setting it to nullable
1:         PreparedStatement ps = prepareStatement("insert into " +
1:                 "constraintest (val1) values (?)");
1:         ps.setString (1, "name1");
1:         ps.executeUpdate();
1:         try {
1:             ps.setString (1, "name1");
1:             ps.execute();
1:             fail ("duplicate key in unique constraint!!!");
1:         }
1:         catch (SQLException e){
1:             assertSQLState ("duplicate key in unique constraint",
1:                     "23505", e);
1:         }
1:         try {
1:             ps.setNull(1, Types.VARCHAR);
1:             ps.executeUpdate();
1:             fail ("null value in not null field!!");
1:         }
1:         catch (SQLException e){
1:             assertSQLState ("null value in non null field",
1:                     "23502", e);
1:         }
1:         stmt.executeUpdate("alter table constraintest alter column val1 null");
1:         //should work
1:         ps.setNull(1, Types.VARCHAR);
1:         ps.executeUpdate();
1:         //try another null
1:         ps.setNull(1, Types.VARCHAR);
1:         ps.executeUpdate();
1:         //try a duplicate non null should fail
1:         try {
1:             ps.setString (1, "name1");
1:             ps.execute();
1:             fail ("duplicate key in unique constraint!!!");
1:         }
1:         catch (SQLException e){
1:             assertSQLState ("duplicate key in unique constraint",
1:                     "23505", e);
1:         }
1:         //remove nulls from table and set the column back to non null
1:         stmt.executeUpdate("delete from constraintest where val1 is null");
1:         stmt.executeUpdate("alter table constraintest alter column " +
1:                 "val1 not null");
1:         //try a duplicate non null key
1:         try {
1:             ps.setString (1, "name1");
1:             ps.execute();
1:             fail ("duplicate key in unique constraint!!!");
1:         }
1:         catch (SQLException e){
1:             assertSQLState ("duplicate key in unique constraint",
1:                     "23505", e);
1:         }
1:         try {
1:             ps.setNull(1, Types.VARCHAR);
1:             ps.executeUpdate();
1:             fail ("null value in not null field!!");
1:         }
1:         catch (SQLException e){
1:             assertSQLState ("null value in non null field",
1:                     "23502", e);
1:         }
1:     }
1: }
============================================================================