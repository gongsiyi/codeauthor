1:33776ff: /*
73:70f7692: 
1:33776ff:    Derby - Class org.apache.derby.client.am.LogWriter
1:2fe796b: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:70f7692: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:70f7692: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:70f7692: 
1:33776ff: */
1:70f7692: 
1:33776ff: package org.apache.derby.client.am;
1:d506170: 
1:69e3d06: import java.io.File;
1:4772c7e: import java.io.PrintWriter;
1:d506170: import java.sql.SQLException;
1:69e3d06: import java.util.Iterator;
1:69e3d06: import java.util.Map;
1:2fe796b: import java.util.Properties;
1:b13b17c: import javax.transaction.xa.XAException;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:2fe796b: import org.apache.derby.shared.common.reference.Attribute;
1:4ac6a1c: import org.apache.derby.shared.common.reference.SQLState;
1:bd2bc2b: import org.apache.derby.shared.common.sanity.SanityManager;
1:1812ea8: 
1:70f7692: public class LogWriter {
1:49be70b:     final protected PrintWriter printWriter_;
1:49be70b:     final private int traceLevel_;
1:49be70b: 
1:70f7692:     private boolean driverConfigurationHasBeenWrittenToJdbc1Stream_ = false;
1:70f7692:     private boolean driverConfigurationHasBeenWrittenToJdbc2Stream_ = false;
1:70f7692: 
1:70f7692:     // It is assumed that this constructor is never called when logWriter is null.
1:69e3d06:     public LogWriter(PrintWriter printWriter, int traceLevel) {
1:70f7692:         printWriter_ = printWriter;
1:70f7692:         traceLevel_ = traceLevel;
150:70f7692:     }
1:ee33904: 
1:70f7692:     final protected boolean loggingEnabled(int traceLevel) {
1:49be70b:         if (SanityManager.DEBUG) {
1:49be70b:             if (printWriter_ == null) {
1:49be70b:                 SanityManager.THROWASSERT(
1:49be70b:                         "Broken invariant: printWriter_ == null");
1:49be70b:             }
1:49be70b:         }
1:49be70b: 
1:49be70b:         return (traceLevel & traceLevel_) != 0;
1:70f7692:     }
1:b5a921a: 
1:70f7692:     // When garbage collector doesn't kick in in time
1:70f7692:     // to close file descriptors, "Too many open files"
1:70f7692:     // exception may occur (currently found on Linux).
1:70f7692:     // To minimize the chance of this problem happening,
1:70f7692:     // the print writer needs to be closed (after this
1:70f7692:     // DNC log writer is closed) when each connection has
1:70f7692:     // its own trace file (i.e. traceDirectory is specified).
1:70f7692:     public boolean printWriterNeedsToBeClosed_;
1:2fe796b: 
1:70f7692:     void close() {
1:70f7692:         if (printWriterNeedsToBeClosed_) {
1:70f7692:             printWriter_.close();
1:70f7692:             printWriterNeedsToBeClosed_ = false;
1:70f7692:         }
1:70f7692:         // printWriter_ = null; // help GC.
1:70f7692:     }
1:2fe796b: 
1:70f7692:     // ---------------------------------------------------------------------------
1:2fe796b: 
1:ee33904:     private void dncprintln(String s) {
2:70f7692:         synchronized (printWriter_) {
1:70f7692:             printWriter_.println("[derby] " + s);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void dncprint(String s) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             printWriter_.print("[derby] " + s);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void dncprintln(String header, String s) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             printWriter_.println("[derby]" + header + " " + s);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void dncprint(String header, String s) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             printWriter_.print("[derby]" + header + " " + s);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // ------------------------ tracepoint api -----------------------------------
1:70f7692: 
4:70f7692:     public void tracepoint(String component, int tracepoint,
1:70f7692:                            String classContext, String methodContext) {
2:70f7692:         String staticContextTracepointRecord =
4:70f7692:                 component +
5:70f7692:                 "[time:" + System.currentTimeMillis() + "]" +
5:70f7692:                 "[thread:" + Thread.currentThread().getName() + "]" +
5:70f7692:                 "[tracepoint:" + tracepoint + "]" +
2:70f7692:                 "[" + classContext + "." + methodContext + "]";
1:70f7692:         dncprintln(staticContextTracepointRecord);
1:70f7692:     }
1:70f7692: 
1:70f7692:     // ------------- API entry and exit trace methods ----------------------------
1:70f7692:     // Entry and exit are be traced separately because input arguments need
1:70f7692:     // to be traced before any potential exception can occur.
1:70f7692:     // Exit tracing is only performed on methods that return values.
1:70f7692:     // Entry tracing is only performed on methods that update state,
1:70f7692:     // so entry tracing is not performed on simple getter methods.
1:70f7692:     // We could decide in the future to restrict entry tracing only to methods with input arguments.
1:70f7692: 
1:70f7692:     private void traceExternalMethod(Object instance, String className, String methodName) {
1:70f7692:         dncprint(buildExternalMethodHeader(instance, className), methodName);
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void traceExternalDeprecatedMethod(Object instance, String className, String methodName) {
1:70f7692:         dncprint(buildExternalMethodHeader(instance, className), "Deprecated " + methodName);
1:70f7692:     }
1:70f7692: 
1:70f7692:     private String buildExternalMethodHeader(Object instance, String className) {
1:70f7692:         return
1:70f7692:                 "[Time:" + System.currentTimeMillis() + "]" +
1:70f7692:                 "[Thread:" + Thread.currentThread().getName() + "]" +
1:70f7692:                 "[" + className + "@" + Integer.toHexString(instance.hashCode()) + "]";
1:70f7692:     }
1:70f7692: 
1:70f7692:     private String getClassNameOfInstanceIfTraced(Object instance) {
1:70f7692:         if (instance == null) // this prevents NPE from instance.getClass() used below
1:70f7692:         {
1:70f7692:             return null;
1:69e3d06:         } else if (instance instanceof ClientConnection && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_CONNECTION_CALLS)) {
1:69e3d06:             return "ClientConnection";
1:69e3d06:         } else if (instance instanceof ClientResultSet && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_RESULT_SET_CALLS)) {
1:69e3d06:             return "ClientResultSet";
1:69e3d06:         } else if (instance instanceof ClientCallableStatement &&
1:69e3d06:                    loggingEnabled(
1:7863d83:                        BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:69e3d06:             return "ClientCallableStatement";
1:69e3d06:         } else if (instance instanceof ClientPreparedStatement &&
1:69e3d06:                    loggingEnabled(
1:7863d83:                        BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:69e3d06:             return "ClientPreparedStatement";
1:69e3d06:         } else if (instance instanceof ClientStatement && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:69e3d06:             return "ClientStatement";
1:70f7692:         }
1:70f7692:         // Not yet externalizing Blob tracing, except for trace_all
1:69e3d06:         else if (instance instanceof ClientBlob && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:8269b78:                                                       // lobs !!
1:70f7692:         {
1:69e3d06:             return "ClientBlob";
1:70f7692:         }
1:69e3d06:         // Not yet externalizing ClientClob tracing, except for trace_all
1:69e3d06:         else if (instance instanceof ClientClob && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:8269b78:                                                       // bobs !!
1:70f7692:         {
1:69e3d06:             return "ClientClob";
1:70f7692:         }
1:70f7692:         // Not yet externalizing dbmd catalog call tracing, except for trace_all
1:69e3d06:         else if (instance instanceof ClientDatabaseMetaData && loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:8269b78:                                                       // dbmd ??
1:70f7692:         {
1:69e3d06:             return "ClientDatabaseMetaData";
1:70f7692:         }
1:70f7692:         // we don't use instanceof javax.transaction.XAResource to avoid dependency on j2ee.jar
1:7863d83:         else if (loggingEnabled(BasicClientDataSource40.TRACE_XA_CALLS) &&
1:70f7692:                 instance.getClass().getName().startsWith("org.apache.derby.client.net.NetXAResource")) {
1:70f7692:             return "NetXAResource";
1:7863d83:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:70f7692:                 instance.getClass().getName().equals("org.apache.derby.client.ClientPooledConnection")) {
1:70f7692:             return "ClientPooledConnection";
1:7863d83:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:70f7692:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientConnectionPoolDataSource")) {
1:70f7692:             return "ClientConnectionPoolDataSource";
1:7863d83:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:70f7692:                 instance.getClass().getName().equals("org.apache.derby.client.ClientXAConnection")) {
1:70f7692:             return "ClientXAConnection";
1:7863d83:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:70f7692:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientDataSource")) {
1:70f7692:             return "ClientDataSource";
1:7863d83:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:70f7692:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientXADataSource")) {
1:70f7692:             return "ClientXADataSource";
1:70f7692:         } else {
1:70f7692:             return instance.getClass().getName();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // --------------------------- method exit tracing --------------------------
1:70f7692: 
1:70f7692:     public void traceExit(Object instance, String methodName, Object returnValue) {
2:70f7692:         String className = getClassNameOfInstanceIfTraced(instance);
2:70f7692:         if (className == null) {
1:d506170:             return;
1:70f7692:         }
1:70f7692:         synchronized (printWriter_) {
2:70f7692:             traceExternalMethod(instance, className, methodName);
1:70f7692:             printWriter_.println(" () returned " + returnValue);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:0326967:     void traceDeprecatedExit(Object instance,
1:0326967:                              String methodName,
1:0326967:                              Object returnValue) {
1:70f7692:         String className = getClassNameOfInstanceIfTraced(instance);
1:70f7692:         if (className == null) {
96:70f7692:             return;
1:70f7692:         }
1:70f7692:         synchronized (printWriter_) {
2:70f7692:             traceExternalDeprecatedMethod(instance, className, methodName);
1:70f7692:             printWriter_.println(" () returned " + returnValue);
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:ee33904: 
1:0326967:     void traceExit(
1:69e3d06:             Object instance,
1:69e3d06:             String methodName,
1:69e3d06:             ClientResultSet resultSet) {
1:69e3d06: 
1:70f7692:         String returnValue = (resultSet == null) ? "ResultSet@null" : "ResultSet@" + Integer.toHexString(resultSet.hashCode());
1:70f7692:         traceExit(instance, methodName, returnValue);
1:70f7692:     }
1:ee33904: 
1:0326967:     void traceExit(
1:69e3d06:             Object instance,
1:69e3d06:             String methodName,
1:69e3d06:             ClientStatement returnValue) {
1:69e3d06: 
1:70f7692:         traceExit(instance, methodName, "Statement@" + Integer.toHexString(returnValue.hashCode()));
1:70f7692:     }
1:ee33904: 
1:69e3d06:     void traceExit(Object instance, String methodName, ClientBlob blob) {
1:70f7692:         String returnValue = (blob == null) ? "Blob@null" : "Blob@" + Integer.toHexString(blob.hashCode());
1:70f7692:         traceExit(instance, methodName, returnValue);
1:70f7692:     }
1:ee33904: 
1:69e3d06:     void traceExit(Object instance, String methodName, ClientClob clob) {
1:70f7692:         String returnValue = (clob == null) ? "Clob@null" : "Clob@" + Integer.toHexString(clob.hashCode());
1:70f7692:         traceExit(instance, methodName, returnValue);
1:70f7692:     }
1:ee33904: 
3:ee33904:     void traceExit(
3:ee33904:             Object instance,
3:ee33904:             String methodName,
1:69e3d06:             ClientDatabaseMetaData returnValue) {
1:ee33904: 
1:70f7692:         traceExit(instance, methodName, "DatabaseMetaData@" + Integer.toHexString(returnValue.hashCode()));
1:70f7692:     }
1:ee33904: 
1:69e3d06:     void traceExit(
1:69e3d06:             Object instance,
1:69e3d06:             String methodName,
1:69e3d06:             ClientConnection returnValue) {
1:69e3d06: 
1:70f7692:         traceExit(instance, methodName, "Connection@" + Integer.toHexString(returnValue.hashCode()));
1:70f7692:     }
1:ee33904: 
1:ee33904:     void traceExit(
1:ee33904:             Object instance,
1:ee33904:             String methodName,
1:ee33904:             ColumnMetaData returnValue) {
1:ee33904: 
1:70f7692:         traceExit(instance, methodName, "MetaData@" + (returnValue != null ? Integer.toHexString(returnValue.hashCode()) : null));
1:70f7692:     }
1:ee33904: 
1:ee33904:     void traceExit(Object instance, String methodName, byte[] returnValue) {
1:70f7692:         traceExit(instance, methodName, Utils.getStringFromBytes(returnValue));
1:70f7692:     }
1:ee33904: 
1:ee33904:     void traceExit(Object instance, String methodName, byte returnValue) {
1:70f7692:         traceExit(instance, methodName, "0x" + Integer.toHexString(returnValue & 0xff));
1:70f7692:     }
1:ee33904: 
1:70f7692:     // --------------------------- method entry tracing --------------------------
1:ee33904: 
1:b5a921a:     public void traceEntry(Object instance, String methodName, Object... args) {
1:b5a921a:         traceEntryAllArgs(instance, methodName, false, args);
1:b5a921a:     }
1:ee33904: 
1:b5a921a:     public void traceDeprecatedEntry(
1:b5a921a:             Object instance, String methodName, Object... args) {
1:b5a921a:         traceEntryAllArgs(instance, methodName, true, args);
1:b5a921a:     }
1:b5a921a: 
1:b5a921a:     private void traceEntryAllArgs(Object instance, String methodName,
1:b5a921a:                                    boolean deprecated, Object[] args) {
1:70f7692:         String className = getClassNameOfInstanceIfTraced(instance);
1:70f7692:         if (className == null) {
1:70f7692:             return;
1:70f7692:         }
1:70f7692:         synchronized (printWriter_) {
1:b5a921a:             if (deprecated) {
1:b5a921a:                 traceExternalDeprecatedMethod(instance, className, methodName);
1:b5a921a:             } else {
1:b5a921a:                 traceExternalMethod(instance, className, methodName);
1:b5a921a:             }
1:b5a921a:             printWriter_.print(" (");
1:b5a921a:             for (int i = 0; i < args.length; i++) {
1:b5a921a:                 if (i > 0) {
1:b5a921a:                     printWriter_.print(", ");
1:b5a921a:                 }
1:b5a921a:                 printWriter_.print(toPrintableString(args[i]));
1:b5a921a:             }
1:b5a921a:             printWriter_.println(") called");
1:70f7692:             printWriter_.flush();
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:b5a921a:     private static String toPrintableString(Object o) {
1:b5a921a:         if (o instanceof byte[]) {
1:b5a921a:             return Utils.getStringFromBytes((byte[]) o);
1:b5a921a:         } else if (o instanceof Byte) {
1:b5a921a:             return "0x" + Integer.toHexString(((Byte) o) & 0xff);
1:70f7692:         }
1:70f7692: 
1:b5a921a:         return String.valueOf(o);
1:70f7692:     }
1:70f7692: 
1:70f7692:     // ---------------------------tracing exceptions and warnings-----------------
1:70f7692: 
1:ee33904:     void traceDiagnosable(SqlException e) {
1:7863d83:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
1:d506170:             return;
1:d506170:         }
1:d506170:         synchronized (printWriter_) {
1:d506170:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:d506170:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]", true); // true means return tokens only
1:d506170:             dncprintln("END TRACE_DIAGNOSTICS");
1:d506170:         }
1:d506170:     }
1:69e3d06:     public void traceDiagnosable(SQLException e) {
1:7863d83:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
1:d506170:             return;
1:d506170:         }
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:70f7692:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]", true); // true means return tokens only
1:70f7692:             dncprintln("END TRACE_DIAGNOSTICS");
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:b13b17c:     void traceDiagnosable(XAException e) {
1:7863d83:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
1:70f7692:             return;
1:70f7692:         }
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:70f7692:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]");
1:70f7692:             dncprintln("END TRACE_DIAGNOSTICS");
1:70f7692:         }
1:70f7692:     }
1:70f7692:     // ------------------------ meta data tracing --------------------------------
1:70f7692: 
1:ee33904:     void traceParameterMetaData(
1:69e3d06:             ClientStatement statement,
1:ee33904:             ColumnMetaData columnMetaData) {
1:ee33904: 
1:8269b78:         if (!loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_PARAMETER_META_DATA) ||
1:8269b78:                 columnMetaData == null) {
1:70f7692:             return;
1:70f7692:         }
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             String header = "[ParameterMetaData@" + Integer.toHexString(columnMetaData.hashCode()) + "]";
1:2fe796b:             try {
1:70f7692:                 dncprintln(header, "BEGIN TRACE_PARAMETER_META_DATA");
1:70f7692:                 dncprintln(header, "Parameter meta data for statement Statement@" + Integer.toHexString(statement.hashCode()));
1:70f7692:                 dncprintln(header, "Number of parameter columns: " + columnMetaData.getColumnCount());
1:70f7692:                 traceColumnMetaData(header, columnMetaData);
1:70f7692:                 dncprintln(header, "END TRACE_PARAMETER_META_DATA");
1:d506170:             } catch (SQLException e) {
1:70f7692:                 dncprintln(header, "Encountered an SQL exception while trying to trace parameter meta data");
1:70f7692:                 dncprintln(header, "END TRACE_PARAMETER_META_DATA");
1:6eb29f6:             }
1:1812ea8:         }
1:d506170:     }
1:2fe796b: 
1:ee33904:     void traceResultSetMetaData(
1:69e3d06:             ClientStatement statement,
1:ee33904:             ColumnMetaData columnMetaData) {
1:ee33904: 
1:8269b78:         if (!loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_RESULT_SET_META_DATA) ||
1:8269b78:                 columnMetaData == null) {
1:d506170:             return;
1:2fe796b:         }
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             String header = "[ResultSetMetaData@" + Integer.toHexString(columnMetaData.hashCode()) + "]";
3:70f7692:             try {
1:70f7692:                 dncprintln(header, "BEGIN TRACE_RESULT_SET_META_DATA");
1:70f7692:                 dncprintln(header, "Result set meta data for statement Statement@" + Integer.toHexString(statement.hashCode()));
1:70f7692:                 dncprintln(header, "Number of result set columns: " + columnMetaData.getColumnCount());
1:70f7692:                 traceColumnMetaData(header, columnMetaData);
1:70f7692:                 dncprintln(header, "END TRACE_RESULT_SET_META_DATA");
1:d506170:             } catch (SQLException e) {
1:70f7692:                 dncprintln(header, "Encountered an SQL exception while trying to trace result set meta data");
1:70f7692:                 dncprintln(header, "END TRACE_RESULT_SET_META_DATA");
1:2fe796b:             }
1:2fe796b:         }
1:70f7692:     }
1:2fe796b: 
1:70f7692:     //-----------------------------transient state--------------------------------
1:2fe796b: 
1:70f7692:     private void traceColumnMetaData(String header, ColumnMetaData columnMetaData) {
1:70f7692:         try {
1:70f7692:             synchronized (printWriter_) {
1:2fe796b: 
1:70f7692:                 for (int column = 1; column <= columnMetaData.getColumnCount(); column++) {
1:70f7692:                     dncprint(header, "Column " + column + ": { ");
1:70f7692:                     printWriter_.print("label=" + columnMetaData.getColumnLabel(column) + ", ");
1:70f7692:                     printWriter_.print("name=" + columnMetaData.getColumnName(column) + ", ");
1:70f7692:                     printWriter_.print("type name=" + columnMetaData.getColumnTypeName(column) + ", ");
1:70f7692:                     printWriter_.print("type=" + columnMetaData.getColumnType(column) + ", ");
1:70f7692:                     printWriter_.print("nullable=" + columnMetaData.isNullable(column) + ", ");
1:70f7692:                     printWriter_.print("precision=" + columnMetaData.getPrecision(column) + ", ");
1:70f7692:                     printWriter_.print("scale=" + columnMetaData.getScale(column) + ", ");
1:70f7692:                     printWriter_.print("schema name=" + columnMetaData.getSchemaName(column) + ", ");
1:70f7692:                     printWriter_.print("table name=" + columnMetaData.getTableName(column) + ", ");
1:70f7692:                     printWriter_.print("writable=" + columnMetaData.isWritable(column) + ", ");
1:70f7692:                     printWriter_.print("sqlPrecision=" + (columnMetaData.sqlPrecision_ == null ? "<null>" : "" + columnMetaData.sqlPrecision_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlScale=" + (columnMetaData.sqlScale_ == null ? "<null>" : "" + columnMetaData.sqlScale_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlLength=" + (columnMetaData.sqlLength_ == null ? "<null>" : "" + columnMetaData.sqlLength_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlType=" + (columnMetaData.sqlType_ == null ? "<null>" : "" + columnMetaData.sqlType_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlCcsid=" + (columnMetaData.sqlCcsid_ == null ? "<null>" : "" + columnMetaData.sqlCcsid_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlName=" + (columnMetaData.sqlName_ == null ? "<null>" : columnMetaData.sqlName_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlLabel=" + (columnMetaData.sqlLabel_ == null ? "<null>" : columnMetaData.sqlLabel_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlUnnamed=" + (columnMetaData.sqlUnnamed_ == null ? "<null>" : "" + columnMetaData.sqlUnnamed_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlComment=" + (columnMetaData.sqlComment_ == null ? "<null>" : columnMetaData.sqlComment_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxKeymem=" + (columnMetaData.sqlxKeymem_ == null ? "<null>" : "" + columnMetaData.sqlxKeymem_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxGenerated=" + (columnMetaData.sqlxGenerated_ == null ? "<null>" : "" + columnMetaData.sqlxGenerated_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxParmmode=" + (columnMetaData.sqlxParmmode_ == null ? "<null>" : "" + columnMetaData.sqlxParmmode_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxCorname=" + (columnMetaData.sqlxCorname_ == null ? "<null>" : columnMetaData.sqlxCorname_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxName=" + (columnMetaData.sqlxName_ == null ? "<null>" : columnMetaData.sqlxName_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxBasename=" + (columnMetaData.sqlxBasename_ == null ? "<null>" : columnMetaData.sqlxBasename_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxUpdatable=" + (columnMetaData.sqlxUpdatable_ == null ? "<null>" : "" + columnMetaData.sqlxUpdatable_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxSchema=" + (columnMetaData.sqlxSchema_ == null ? "<null>" : columnMetaData.sqlxSchema_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("sqlxRdbnam=" + (columnMetaData.sqlxRdbnam_ == null ? "<null>" : columnMetaData.sqlxRdbnam_[column - 1]) + ", ");
1:70f7692:                     printWriter_.print("internal type=" + columnMetaData.types_[column - 1] + ", ");
1:70f7692:                     printWriter_.println(" }");
1:70f7692:                 }
1:70f7692:                 dncprint(header, "{ ");
1:70f7692:                 printWriter_.print("sqldHold=" + columnMetaData.sqldHold_ + ", ");
1:70f7692:                 printWriter_.print("sqldReturn=" + columnMetaData.sqldReturn_ + ", ");
1:70f7692:                 printWriter_.print("sqldScroll=" + columnMetaData.sqldScroll_ + ", ");
1:70f7692:                 printWriter_.print("sqldSensitive=" + columnMetaData.sqldSensitive_ + ", ");
1:70f7692:                 printWriter_.print("sqldFcode=" + columnMetaData.sqldFcode_ + ", ");
1:70f7692:                 printWriter_.print("sqldKeytype=" + columnMetaData.sqldKeytype_ + ", ");
1:70f7692:                 printWriter_.print("sqldRdbnam=" + columnMetaData.sqldRdbnam_ + ", ");
1:70f7692:                 printWriter_.print("sqldSchema=" + columnMetaData.sqldSchema_);
1:70f7692:                 printWriter_.println(" }");
1:70f7692:                 printWriter_.flush();
1:70f7692:             }
1:d506170:         } catch (SQLException e) {
1:70f7692:             dncprintln(header, "Encountered an SQL exception while trying to trace column meta data");
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // ---------------------- 3-way tracing connects -----------------------------
1:70f7692:     // Including protocol manager levels, and driver configuration
1:70f7692: 
1:70f7692:     // Jdbc 2
1:7863d83:     void traceConnectEntry(BasicClientDataSource40 dataSource) {
1:8269b78:         if (loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_DRIVER_CONFIGURATION)) {
1:70f7692:             traceDriverConfigurationJdbc2();
1:70f7692:         }
1:7863d83:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:70f7692:             traceConnectsEntry(dataSource);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // Jdbc 1
1:ee33904:     void traceConnectEntry(String server,
1:70f7692:                                   int port,
1:70f7692:                                   String database,
1:69e3d06:                                   Properties properties) {
1:8269b78:         if (loggingEnabled(
1:7863d83:                 BasicClientDataSource40.TRACE_DRIVER_CONFIGURATION)) {
1:70f7692:             traceDriverConfigurationJdbc1();
1:70f7692:         }
1:7863d83:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:70f7692:             traceConnectsEntry(server, port, database, properties);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:ee33904:     void traceConnectResetEntry(
1:8269b78:             Object instance, LogWriter logWriter,
1:7863d83:             String user, BasicClientDataSource40 ds) {
1:8269b78: 
1:70f7692:         traceEntry(instance, "reset", logWriter, user, "<escaped>", ds);
1:7863d83:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:70f7692:             traceConnectsResetEntry(ds);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:69e3d06:     void traceConnectExit(ClientConnection connection) {
1:7863d83:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:70f7692:             traceConnectsExit(connection);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:69e3d06:     public void traceConnectResetExit(ClientConnection connection) {
1:7863d83:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:70f7692:             traceConnectsResetExit(connection);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692: 
1:70f7692:     // ---------------------- tracing connects -----------------------------------
1:70f7692: 
1:7863d83:     private void traceConnectsResetEntry(BasicClientDataSource40 dataSource) {
1:70f7692:         try {
1:70f7692:             traceConnectsResetEntry(dataSource.getServerName(),
1:70f7692:                     dataSource.getPortNumber(),
1:70f7692:                     dataSource.getDatabaseName(),
1:2fe796b:                     getProperties(dataSource));
1:d506170:         } catch ( SqlException se ) {
1:70f7692:             dncprintln("Encountered an SQL exception while trying to trace connection reset entry");
1:d506170:         }
1:70f7692:     }
1:70f7692: 
1:7863d83:     private void traceConnectsEntry(BasicClientDataSource40 dataSource) {
1:70f7692:         try {
1:70f7692:             traceConnectsEntry(dataSource.getServerName(),
1:70f7692:                     dataSource.getPortNumber(),
1:70f7692:                     dataSource.getDatabaseName(),
1:2fe796b:                     getProperties(dataSource));
1:d506170:         } catch ( SqlException se ) {
1:70f7692:             dncprintln("Encountered an SQL exception while trying to trace connection entry");
1:70f7692:         }
1:d506170:         
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void traceConnectsResetEntry(String server,
1:70f7692:                                          int port,
1:70f7692:                                          String database,
1:69e3d06:                                          Properties properties) {
1:70f7692:         dncprintln("BEGIN TRACE_CONNECT_RESET");
1:70f7692:         dncprintln("Connection reset requested for " + server + ":" + port + "/" + database);
1:70f7692:         dncprint("Using properties: ");
1:70f7692:         writeProperties(properties);
1:70f7692:         dncprintln("END TRACE_CONNECT_RESET");
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void traceConnectsEntry(String server,
1:70f7692:                                     int port,
1:70f7692:                                     String database,
1:69e3d06:                                     Properties properties) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             dncprintln("BEGIN TRACE_CONNECTS");
1:70f7692:             dncprintln("Attempting connection to " + server + ":" + port + "/" + database);
1:70f7692:             dncprint("Using properties: ");
1:70f7692:             writeProperties(properties);
1:70f7692:             dncprintln("END TRACE_CONNECTS");
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     // Specialized by NetLogWriter.traceConnectsExit()
1:69e3d06:     public void traceConnectsExit(ClientConnection c) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             String header = "[Connection@" + Integer.toHexString(c.hashCode()) + "]";
1:70f7692:             try {
1:70f7692:                 dncprintln(header, "BEGIN TRACE_CONNECTS");
1:70f7692:                 dncprintln(header, "Successfully connected to server " + c.databaseMetaData_.getURL());
1:70f7692:                 dncprintln(header, "User: " + c.databaseMetaData_.getUserName());
1:70f7692:                 dncprintln(header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
1:70f7692:                 dncprintln(header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
1:70f7692:                 dncprintln(header, "Driver name: " + c.databaseMetaData_.getDriverName());
1:70f7692:                 dncprintln(header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
1:70f7692:                 dncprintln(header, "END TRACE_CONNECTS");
1:69e3d06:             } catch (SQLException e) {
1:70f7692:                 dncprintln(header, "Encountered an SQL exception while trying to trace connection exit");
1:70f7692:                 dncprintln(header, "END TRACE_CONNECTS");
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:69e3d06:     public void traceConnectsResetExit(ClientConnection c) {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             String header = "[Connection@" + Integer.toHexString(c.hashCode()) + "]";
1:70f7692:             try {
1:70f7692:                 dncprintln(header, "BEGIN TRACE_CONNECT_RESET");
1:70f7692:                 dncprintln(header, "Successfully reset connection to server " + c.databaseMetaData_.getURL());
1:70f7692:                 dncprintln(header, "User: " + c.databaseMetaData_.getUserName());
1:70f7692:                 dncprintln(header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
1:70f7692:                 dncprintln(header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
1:70f7692:                 dncprintln(header, "Driver name: " + c.databaseMetaData_.getDriverName());
1:70f7692:                 dncprintln(header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
1:70f7692:                 dncprintln(header, "END TRACE_CONNECT_RESET");
1:69e3d06:             } catch (SQLException e) {
1:70f7692:                 dncprintln(header, "Encountered an SQL exception while trying to trace connection reset exit");
1:70f7692:                 dncprintln(header, "END TRACE_CONNECT_RESET");
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692: 
1:70f7692:     // properties.toString() will print out passwords,
1:70f7692:     // so this method was written to escape the password property value.
1:70f7692:     // printWriter_ synchronized by caller.
1:69e3d06:     private void writeProperties(Properties properties) {
1:70f7692:         printWriter_.print("{ ");
1:69e3d06:         for (Iterator i = properties.entrySet().iterator(); i.hasNext();) {
1:69e3d06:             Map.Entry e = (Map.Entry) (i.next());
1:70f7692:             if ("password".equals(e.getKey())) {
1:70f7692:                 printWriter_.print("password=" + escapePassword((String) e.getValue()));
1:70f7692:             } else {
1:70f7692:                 printWriter_.print(e.getKey() + "=" + e.getValue());
1:70f7692:             }
1:70f7692:             if (i.hasNext()) {
1:70f7692:                 printWriter_.print(", ");
1:70f7692:             }
1:70f7692:         }
1:70f7692:         printWriter_.println(" }");
1:70f7692:         printWriter_.flush();
1:70f7692:     }
1:70f7692: 
1:70f7692:     private String escapePassword(String pw) {
1:49be70b:         StringBuilder sb = new StringBuilder(pw);
1:70f7692:         for (int j = 0; j < pw.length(); j++) {
1:70f7692:             sb.setCharAt(j, '*');
1:70f7692:         }
1:70f7692:         return sb.toString();
1:70f7692:     }
1:70f7692:     //-------------------------tracing driver configuration-----------------------
1:70f7692: 
1:70f7692:     private void traceDriverConfigurationJdbc2() {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             if (!driverConfigurationHasBeenWrittenToJdbc2Stream_) {
1:70f7692:                 writeDriverConfiguration();
1:70f7692:                 driverConfigurationHasBeenWrittenToJdbc2Stream_ = true;
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692:     private void traceDriverConfigurationJdbc1() {
1:70f7692:         synchronized (printWriter_) {
1:70f7692:             if (!driverConfigurationHasBeenWrittenToJdbc1Stream_) {
1:70f7692:                 writeDriverConfiguration();
1:70f7692:                 driverConfigurationHasBeenWrittenToJdbc1Stream_ = true;
1:70f7692:             }
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:ee33904:     private void writeDriverConfiguration() {
1:ee33904:         Version.writeDriverConfiguration(printWriter_);
1:70f7692:     }
1:69e3d06: 
1:2fe796b:     /**
1:8269b78:      * Obtain a set of Properties for the client data source.
1:2fe796b:      */
1:7863d83:     private Properties getProperties(BasicClientDataSource40 cds)
1:2fe796b:     throws SqlException {
1:2fe796b:         
1:7863d83:         Properties properties = BasicClientDataSource40.getProperties(cds);
1:2fe796b: 
1:8269b78:         if (properties.getProperty(Attribute.PASSWORD_ATTR) != null) {
1:8269b78:             properties.setProperty(Attribute.PASSWORD_ATTR, "********");
1:2fe796b:         }
1:8269b78: 
1:2fe796b:         return properties;
1:70f7692:     }
1:70f7692: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6ac5160
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSource;
/////////////////////////////////////////////////////////////////////////
0:     public void traceConnectEntry(ClientBaseDataSource dataSource) {
/////////////////////////////////////////////////////////////////////////
0:     public void traceConnectResetEntry(Object instance, LogWriter logWriter, 
0:                                         String user, ClientBaseDataSource ds) {
/////////////////////////////////////////////////////////////////////////
0:     private void traceConnectsResetEntry(ClientBaseDataSource dataSource) {
/////////////////////////////////////////////////////////////////////////
0:     private void traceConnectsEntry(ClientBaseDataSource dataSource) {
/////////////////////////////////////////////////////////////////////////
0:      * Obtain a set of Properties for the ClientBaseDataSource
0:     private Properties getProperties(ClientBaseDataSource cds)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:                 BasicClientDataSource40.TRACE_CONNECTION_CALLS)) {
1:                 BasicClientDataSource40.TRACE_RESULT_SET_CALLS)) {
1:                        BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:                        BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:                 BasicClientDataSource40.TRACE_STATEMENT_CALLS)) {
1:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:                 BasicClientDataSource40.TRACE_ALL)) // add a trace level for
1:         else if (loggingEnabled(BasicClientDataSource40.TRACE_XA_CALLS) &&
1:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
1:         } else if (loggingEnabled(BasicClientDataSource40.TRACE_ALL) &&
/////////////////////////////////////////////////////////////////////////
1:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
1:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
1:         if (!loggingEnabled(BasicClientDataSource40.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
1:                 BasicClientDataSource40.TRACE_PARAMETER_META_DATA) ||
/////////////////////////////////////////////////////////////////////////
1:                 BasicClientDataSource40.TRACE_RESULT_SET_META_DATA) ||
/////////////////////////////////////////////////////////////////////////
1:     void traceConnectEntry(BasicClientDataSource40 dataSource) {
1:                 BasicClientDataSource40.TRACE_DRIVER_CONFIGURATION)) {
1:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
1:                 BasicClientDataSource40.TRACE_DRIVER_CONFIGURATION)) {
1:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:             String user, BasicClientDataSource40 ds) {
1:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
1:         if (loggingEnabled(BasicClientDataSource40.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
1:     private void traceConnectsResetEntry(BasicClientDataSource40 dataSource) {
/////////////////////////////////////////////////////////////////////////
1:     private void traceConnectsEntry(BasicClientDataSource40 dataSource) {
/////////////////////////////////////////////////////////////////////////
1:     private Properties getProperties(BasicClientDataSource40 cds)
1:         Properties properties = BasicClientDataSource40.getProperties(cds);
commit:b565f41
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     void traceDeprecatedExit(Object instance,
1:                              String methodName,
1:                              Object returnValue) {
/////////////////////////////////////////////////////////////////////////
1:     void traceExit(
/////////////////////////////////////////////////////////////////////////
1:     void traceExit(
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedOutputStream;
1: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.security.PrivilegedActionException;
1: import java.util.Iterator;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     public LogWriter(PrintWriter printWriter, int traceLevel) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (instance instanceof ClientConnection && loggingEnabled(
1:             return "ClientConnection";
1:         } else if (instance instanceof ClientResultSet && loggingEnabled(
1:             return "ClientResultSet";
1:         } else if (instance instanceof ClientCallableStatement &&
1:                    loggingEnabled(
0:                        ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
1:             return "ClientCallableStatement";
1:         } else if (instance instanceof ClientPreparedStatement &&
1:                    loggingEnabled(
0:                        ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
1:             return "ClientPreparedStatement";
1:         } else if (instance instanceof ClientStatement && loggingEnabled(
1:             return "ClientStatement";
1:         else if (instance instanceof ClientBlob && loggingEnabled(
1:             return "ClientBlob";
1:         // Not yet externalizing ClientClob tracing, except for trace_all
1:         else if (instance instanceof ClientClob && loggingEnabled(
1:             return "ClientClob";
1:         else if (instance instanceof ClientDatabaseMetaData && loggingEnabled(
1:             return "ClientDatabaseMetaData";
/////////////////////////////////////////////////////////////////////////
0:     public void traceExit(
1:             Object instance,
1:             String methodName,
1:             ClientResultSet resultSet) {
1: 
0:     public void traceExit(
0:             ClientCallableStatement returnValue) {
0:     public void traceExit(
0:             ClientPreparedStatement returnValue) {
0:     public void traceExit(
1:             Object instance,
1:             String methodName,
1:             ClientStatement returnValue) {
1: 
1:     void traceExit(Object instance, String methodName, ClientBlob blob) {
1:     void traceExit(Object instance, String methodName, ClientClob clob) {
/////////////////////////////////////////////////////////////////////////
1:             ClientDatabaseMetaData returnValue) {
1:     void traceExit(
1:             Object instance,
1:             String methodName,
1:             ClientConnection returnValue) {
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void traceDiagnosable(SQLException e) {
/////////////////////////////////////////////////////////////////////////
1:             ClientStatement statement,
/////////////////////////////////////////////////////////////////////////
1:             ClientStatement statement,
/////////////////////////////////////////////////////////////////////////
1:                                   Properties properties) {
/////////////////////////////////////////////////////////////////////////
1:     void traceConnectExit(ClientConnection connection) {
1:     public void traceConnectResetExit(ClientConnection connection) {
/////////////////////////////////////////////////////////////////////////
1:                                          Properties properties) {
/////////////////////////////////////////////////////////////////////////
1:                                     Properties properties) {
/////////////////////////////////////////////////////////////////////////
1:     public void traceConnectsExit(ClientConnection c) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (SQLException e) {
1:     public void traceConnectsResetExit(ClientConnection c) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (SQLException e) {
/////////////////////////////////////////////////////////////////////////
1:     private void writeProperties(Properties properties) {
1:         for (Iterator i = properties.entrySet().iterator(); i.hasNext();) {
1:             Map.Entry e = (Map.Entry) (i.next());
/////////////////////////////////////////////////////////////////////////
0:     public static PrintWriter getPrintWriter(
0:             final String fileName,
0:             final boolean fileAppend) throws SqlException {
1: 
0:         PrintWriter printWriter = null;
/////////////////////////////////////////////////////////////////////////
0:                         String fileCanonicalPath =
0:                             new File(fileName).getCanonicalPath();
0:                         return new PrintWriter(
0:                                 new BufferedOutputStream(
0:                                         new FileOutputStream(
0:         } catch (PrivilegedActionException pae) {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAException;
/////////////////////////////////////////////////////////////////////////
1:     void traceDiagnosable(XAException e) {
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1:     private void dncprintln(String s) {
/////////////////////////////////////////////////////////////////////////
0:     void traceExit(Object instance, String methodName, ResultSet resultSet) {
1:     void traceExit(
1:             Object instance,
1:             String methodName,
0:             CallableStatement returnValue) {
1: 
1:     void traceExit(
1:             Object instance,
1:             String methodName,
0:             PreparedStatement returnValue) {
1: 
0:     void traceExit(Object instance, String methodName, Statement returnValue) {
0:     void traceExit(Object instance, String methodName, Blob blob) {
0:     void traceExit(Object instance, String methodName, Clob clob) {
1:     void traceExit(
1:             Object instance,
1:             String methodName,
0:             DatabaseMetaData returnValue) {
1: 
0:     void traceExit(Object instance, String methodName, Connection returnValue) {
1:     void traceExit(
1:             Object instance,
1:             String methodName,
1:             ColumnMetaData returnValue) {
1: 
1:     void traceExit(Object instance, String methodName, byte[] returnValue) {
1:     void traceExit(Object instance, String methodName, byte returnValue) {
/////////////////////////////////////////////////////////////////////////
0:     void traceExit(Object instance, String methodName, long returnValue) {
0:     void traceExit(Object instance, String methodName, float returnValue) {
0:     void traceExit(Object instance, String methodName, double returnValue) {
/////////////////////////////////////////////////////////////////////////
0:     void traceEntry(Object instance, String methodName, boolean argument) {
/////////////////////////////////////////////////////////////////////////
0:     void traceDeprecatedEntry(
0:             Object instance,
0:             String methodName,
0:             int argument) {
1: 
0:     void traceDeprecatedEntry(
0:             Object instance,
0:             String methodName,
0:             Object argument) {
1: 
/////////////////////////////////////////////////////////////////////////
0:     void traceEntry(Object instance, String methodName, int arg1, Object arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, byte[] arg2) {
0:     void traceDeprecatedEntry(
0:             Object instance,
0:             String methodName,
0:             int arg1,
0:             int arg2) {
1: 
0:     void traceDeprecatedEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             int arg2) {
1: 
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             int arg1,
0:             boolean arg2) {
1: 
0:     void traceEntry(Object instance, String methodName, int arg1, byte arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, short arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, int arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, long arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, float arg2) {
0:     void traceEntry(Object instance, String methodName, int arg1, double arg2) {
0:     public void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             boolean arg2) {
1: 
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             byte arg2) {
1: 
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             short arg2) {
1: 
/////////////////////////////////////////////////////////////////////////
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             long arg2) {
1: 
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             float arg2) {
1: 
0:     void traceEntry(
0:             Object instance,
0:             String methodName,
0:             Object arg1,
0:             double arg2) {
1: 
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceDeprecatedEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
/////////////////////////////////////////////////////////////////////////
0:     void traceEntry(Object instance, String methodName,
0:     void traceEntry(Object instance, String methodName,
/////////////////////////////////////////////////////////////////////////
0:     void traceEntry(Object instance, String methodName,
/////////////////////////////////////////////////////////////////////////
1:     void traceDiagnosable(SqlException e) {
/////////////////////////////////////////////////////////////////////////
0:     void traceDiagnosable(javax.transaction.xa.XAException e) {
/////////////////////////////////////////////////////////////////////////
1:     void traceParameterMetaData(
0:             Statement statement,
1:             ColumnMetaData columnMetaData) {
1: 
/////////////////////////////////////////////////////////////////////////
1:     void traceResultSetMetaData(
0:             Statement statement,
1:             ColumnMetaData columnMetaData) {
1: 
/////////////////////////////////////////////////////////////////////////
0:     void traceConnectEntry(ClientBaseDataSourceRoot dataSource) {
/////////////////////////////////////////////////////////////////////////
1:     void traceConnectEntry(String server,
/////////////////////////////////////////////////////////////////////////
1:     void traceConnectResetEntry(
/////////////////////////////////////////////////////////////////////////
0:     void traceConnectExit(Connection connection) {
/////////////////////////////////////////////////////////////////////////
0:     public void traceConnectsResetExit(Connection c) {
/////////////////////////////////////////////////////////////////////////
1:     private void writeDriverConfiguration() {
1:         Version.writeDriverConfiguration(printWriter_);
commit:49be70b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1:     final protected PrintWriter printWriter_;
1:     final private int traceLevel_;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             if (printWriter_ == null) {
1:                 SanityManager.THROWASSERT(
1:                         "Broken invariant: printWriter_ == null");
1:             }
1:         }
1: 
1:         return (traceLevel & traceLevel_) != 0;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder sb = new StringBuilder(pw);
commit:9fd9272
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8269b78
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationTargetException;
0: import java.lang.reflect.Method;
0: import java.lang.reflect.Modifier;
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
0: import org.apache.derby.jdbc.ClientDataSourceInterface;
/////////////////////////////////////////////////////////////////////////
0:         } else if (instance instanceof Connection && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_CONNECTION_CALLS)) {
0:         } else if (instance instanceof ResultSet && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_RESULT_SET_CALLS)) {
0:         } else if (instance instanceof CallableStatement && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
0:         } else if (instance instanceof PreparedStatement && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
0:         } else if (instance instanceof Statement && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
0:         else if (instance instanceof Blob && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
1:                                                       // lobs !!
0:         else if (instance instanceof Clob && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
1:                                                       // bobs !!
0:         else if (instance instanceof DatabaseMetaData && loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
1:                                                       // dbmd ??
0:         else if (loggingEnabled(ClientDataSourceInterface.TRACE_XA_CALLS) &&
0:         } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
0:         } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
0:         } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
0:         } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
0:         } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
/////////////////////////////////////////////////////////////////////////
0:         if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
0:         if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
0:         if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
/////////////////////////////////////////////////////////////////////////
1:         if (!loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_PARAMETER_META_DATA) ||
1:                 columnMetaData == null) {
/////////////////////////////////////////////////////////////////////////
1:         if (!loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_RESULT_SET_META_DATA) ||
1:                 columnMetaData == null) {
/////////////////////////////////////////////////////////////////////////
0:     public void traceConnectEntry(ClientBaseDataSourceRoot dataSource) {
1:         if (loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_DRIVER_CONFIGURATION)) {
0:         if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
1:         if (loggingEnabled(
0:                 ClientDataSourceInterface.TRACE_DRIVER_CONFIGURATION)) {
0:         if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
0:     public void traceConnectResetEntry(
1:             Object instance, LogWriter logWriter,
0:             String user, ClientBaseDataSourceRoot ds) {
1: 
0:         if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
0:         if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
0:         if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
/////////////////////////////////////////////////////////////////////////
0:     private void traceConnectsResetEntry(ClientBaseDataSourceRoot dataSource) {
/////////////////////////////////////////////////////////////////////////
0:     private void traceConnectsEntry(ClientBaseDataSourceRoot dataSource) {
/////////////////////////////////////////////////////////////////////////
1:      * Obtain a set of Properties for the client data source.
0:     private Properties getProperties(ClientBaseDataSourceRoot cds)
0:         Properties properties = ClientBaseDataSourceRoot.getProperties(cds);
1:         if (properties.getProperty(Attribute.PASSWORD_ATTR) != null) {
1:             properties.setProperty(Attribute.PASSWORD_ATTR, "********");
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b5a921a
/////////////////////////////////////////////////////////////////////////
1:     public void traceEntry(Object instance, String methodName, Object... args) {
1:         traceEntryAllArgs(instance, methodName, false, args);
1:     }
1: 
1:     public void traceDeprecatedEntry(
1:             Object instance, String methodName, Object... args) {
1:         traceEntryAllArgs(instance, methodName, true, args);
1:     }
1: 
1:     private void traceEntryAllArgs(Object instance, String methodName,
1:                                    boolean deprecated, Object[] args) {
1:             if (deprecated) {
1:                 traceExternalDeprecatedMethod(instance, className, methodName);
1:             } else {
1:                 traceExternalMethod(instance, className, methodName);
1:             }
1:             printWriter_.print(" (");
1:             for (int i = 0; i < args.length; i++) {
1:                 if (i > 0) {
1:                     printWriter_.print(", ");
1:                 }
1:                 printWriter_.print(toPrintableString(args[i]));
1:             }
1:             printWriter_.println(") called");
1:     private static String toPrintableString(Object o) {
1:         if (o instanceof byte[]) {
1:             return Utils.getStringFromBytes((byte[]) o);
1:         } else if (o instanceof Byte) {
1:             return "0x" + Integer.toHexString(((Byte) o) & 0xff);
1:         return String.valueOf(o);
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import java.io.PrintWriter;
0: import java.security.AccessController;
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
0:             printWriter = AccessController.doPrivileged(
0:                 new PrivilegedExceptionAction<PrintWriter>(){
0:                     public PrintWriter run() throws IOException {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:bd2bc2b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
0:         java.io.PrintWriter printWriter = null;
0:         //Using an anonymous class to deal with the PrintWriter because the  
0:         //method java.security.AccessController.doPrivileged requires an 
0:         //instance of a class(which implements 
0:         //java.security.PrivilegedExceptionAction). Since getPrintWriter method
0:         //is static, we can't simply pass "this" to doPrivileged method and 
0:         //have LogWriter implement PrivilegedExceptionAction.
0:         //To get around the static nature of method getPrintWriter, have an
0:         //anonymous class implement PrivilegedExceptionAction. That class will 
0:         //do the work related to PrintWriter in it's run method and return 
0:         //PrintWriter object.
0:                         String fileCanonicalPath = new java.io.File(fileName).getCanonicalPath();
0:                         return new java.io.PrintWriter(
0:                                 new java.io.BufferedOutputStream(
0:                                         new java.io.FileOutputStream(
0:                                                 fileCanonicalPath, fileAppend), 4096), true);
1:                         }
0:                     });
/////////////////////////////////////////////////////////////////////////
0:                     properties.setProperty(propertyKey, value);
commit:b22383e
/////////////////////////////////////////////////////////////////////////
0:                 if(value != null)
0:                 	properties.setProperty(propertyKey, value);
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:1812ea8
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public static java.io.PrintWriter getPrintWriter(final String fileName, final boolean fileAppend) throws SqlException {
0:     	java.io.PrintWriter printWriter = null;
0:     	//Using an anonymous class to deal with the PrintWriter because the  
0:     	//method java.security.AccessController.doPrivileged requires an 
0:     	//instance of a class(which implements 
0:     	//java.security.PrivilegedExceptionAction). Since getPrintWriter method
0:     	//is static, we can't simply pass "this" to doPrivileged method and 
0:     	//have LogWriter implement PrivilegedExceptionAction.
0:     	//To get around the static nature of method getPrintWriter, have an
0:     	//anonymous class implement PrivilegedExceptionAction. That class will 
0:     	//do the work related to PrintWriter in it's run method and return 
0:     	//PrintWriter object.
0:     	printWriter = (java.io.PrintWriter)AccessController.doPrivileged(
0:     			new java.security.PrivilegedExceptionAction(){
0:     				public Object run()throws java.io.IOException{
0:     			        String fileCanonicalPath = new java.io.File(fileName).getCanonicalPath();
0:     					return new java.io.PrintWriter(
0:     							new java.io.BufferedOutputStream(
0:     									new java.io.FileOutputStream(
0:     											fileCanonicalPath, fileAppend), 4096), true);
1:             			}
0:             		});
0:         } catch (java.security.PrivilegedActionException pae) {
0:                 new Object[] { fileName, pae.getMessage() },
0:                 pae);
0:         return printWriter;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:b2a1747
/////////////////////////////////////////////////////////////////////////
0:             throw new SqlException(this, 
0:                 new ClientMessageId(SQLState.JAVA_EXCEPTION),
0:                 e.getClass().getName(), e.getMessage(), e);
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0:                 new ClientMessageId(SQLState.UNABLE_TO_OPEN_FILE),
commit:4ac6a1c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0:             throw new SqlException(null, 
0:                 new MessageId(SQLState.UNABLE_TO_OPEN_FILE),
0:                 new Object[] { fileName, e.getMessage() },
0:                 e);
commit:d506170
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void traceDiagnosable(SqlException e) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]", true); // true means return tokens only
1:             dncprintln("END TRACE_DIAGNOSTICS");
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:             } catch (SQLException e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (SQLException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (SQLException e) {
/////////////////////////////////////////////////////////////////////////
0:             if (traceSuspended()) {
1:                 return;
1:             }
1:         } catch ( SqlException se ) {
0:             if (traceSuspended()) {
1:                 return;
1:             }
1:         } catch ( SqlException se ) {
1:         
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2fe796b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Enumeration;
1: import java.util.Properties;
1: 
0: import javax.naming.NamingException;
0: import javax.naming.RefAddr;
0: import javax.naming.Reference;
1: import org.apache.derby.shared.common.reference.Attribute;
/////////////////////////////////////////////////////////////////////////
1:                     getProperties(dataSource));
/////////////////////////////////////////////////////////////////////////
1:                     getProperties(dataSource));
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Obtain a set of Properties for the ClientDataSource
1:      */
0:     private Properties getProperties(ClientDataSource cds)
1:     throws SqlException {
1:         
0:         Properties properties = new Properties();
1:         
1:         try {
0:             Reference ref = cds.getReference();
1:             
0:             for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
1: 
0:                 RefAddr attribute = (RefAddr) e.nextElement();
1: 
0:                 String propertyKey = attribute.getType();
0:                 String value = (String) attribute.getContent();
1:                 
0:                 // Don't display the password or even its length
0:                 if (Attribute.PASSWORD_ATTR.equals(propertyKey)) {
0:                     value = "********";
1:                 }
1:                 
0:                 properties.setProperty(propertyKey, value);
1:             }
0:         } catch (NamingException e) {
0:             throw new SqlException(this, e.toString());
1:         }
1:         
1:         return properties;
1:     }
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: public class LogWriter {
0:     protected java.io.PrintWriter printWriter_;
0:     protected int traceLevel_;
1:     private boolean driverConfigurationHasBeenWrittenToJdbc1Stream_ = false;
1:     private boolean driverConfigurationHasBeenWrittenToJdbc2Stream_ = false;
1:     // It is assumed that this constructor is never called when logWriter is null.
0:     public LogWriter(java.io.PrintWriter printWriter, int traceLevel) {
1:         printWriter_ = printWriter;
1:         traceLevel_ = traceLevel;
1:     final protected boolean loggingEnabled(int traceLevel) {
0:         // It is an invariant that the printWriter is never null, so remove the
0:         return printWriter_ != null && (traceLevel & traceLevel_) != 0;
0:     final protected boolean traceSuspended() {
0:         return org.apache.derby.client.am.Configuration.traceSuspended__;
1:     // When garbage collector doesn't kick in in time
1:     // to close file descriptors, "Too many open files"
1:     // exception may occur (currently found on Linux).
1:     // To minimize the chance of this problem happening,
1:     // the print writer needs to be closed (after this
1:     // DNC log writer is closed) when each connection has
1:     // its own trace file (i.e. traceDirectory is specified).
1:     public boolean printWriterNeedsToBeClosed_;
1:     void close() {
1:         if (printWriterNeedsToBeClosed_) {
1:             printWriter_.close();
1:             printWriterNeedsToBeClosed_ = false;
1:         // printWriter_ = null; // help GC.
1:     }
1: 
1:     // ---------------------------------------------------------------------------
1: 
0:     public void dncprintln(String s) {
1:         synchronized (printWriter_) {
1:             printWriter_.println("[derby] " + s);
1:             printWriter_.flush();
1:         }
1:     }
1: 
1:     private void dncprint(String s) {
1:         synchronized (printWriter_) {
1:             printWriter_.print("[derby] " + s);
1:             printWriter_.flush();
1:         }
1:     }
1: 
1:     private void dncprintln(String header, String s) {
1:         synchronized (printWriter_) {
1:             printWriter_.println("[derby]" + header + " " + s);
1:             printWriter_.flush();
1:         }
1:     }
1: 
1:     private void dncprint(String header, String s) {
1:         synchronized (printWriter_) {
1:             printWriter_.print("[derby]" + header + " " + s);
1:             printWriter_.flush();
1:         }
1:     }
1: 
1:     // ------------------------ tracepoint api -----------------------------------
1: 
0:     public void tracepoint(String component, int tracepoint, String message) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         dncprintln(component,
1:                 "[time:" + System.currentTimeMillis() + "]" +
1:                 "[thread:" + Thread.currentThread().getName() + "]" +
1:                 "[tracepoint:" + tracepoint + "]" +
0:                 message);
1:     }
1: 
1:     public void tracepoint(String component, int tracepoint,
1:                            String classContext, String methodContext) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String staticContextTracepointRecord =
1:                 component +
1:                 "[time:" + System.currentTimeMillis() + "]" +
1:                 "[thread:" + Thread.currentThread().getName() + "]" +
1:                 "[tracepoint:" + tracepoint + "]" +
1:                 "[" + classContext + "." + methodContext + "]";
1:         dncprintln(staticContextTracepointRecord);
1:     }
1: 
1:     public void tracepoint(String component, int tracepoint,
0:                            Object instance, String classContext, String methodContext) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         String instanceContextTracepointRecord =
1:                 component +
1:                 "[time:" + System.currentTimeMillis() + "]" +
1:                 "[thread:" + Thread.currentThread().getName() + "]" +
1:                 "[tracepoint:" + tracepoint + "]" +
0:                 "[" + classContext + "@" + Integer.toHexString(instance.hashCode()) + "." + methodContext + "]";
0:         dncprintln(instanceContextTracepointRecord);
1:     }
1: 
1:     public void tracepoint(String component, int tracepoint,
0:                            String classContext, String methodContext,
0:                            java.util.Map memory) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String staticContextTracepointRecord =
1:                 component +
1:                 "[time:" + System.currentTimeMillis() + "]" +
1:                 "[thread:" + Thread.currentThread().getName() + "]" +
1:                 "[tracepoint:" + tracepoint + "]" +
1:                 "[" + classContext + "." + methodContext + "]";
0:         dncprintln(staticContextTracepointRecord + getMemoryMapDisplay(memory));
1:     }
1: 
1:     public void tracepoint(String component, int tracepoint,
0:                            Object instance, String classContext, String methodContext,
0:                            java.util.Map memory) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         String instanceContextTracepointRecord =
1:                 component +
1:                 "[time:" + System.currentTimeMillis() + "]" +
1:                 "[thread:" + Thread.currentThread().getName() + "]" +
1:                 "[tracepoint:" + tracepoint + "]" +
0:                 "[" + classContext + "@" + Integer.toHexString(instance.hashCode()) + "." + methodContext + "]";
0:         dncprintln(instanceContextTracepointRecord + getMemoryMapDisplay(memory));
1:     }
1: 
0:     private String getMemoryMapDisplay(java.util.Map memory) {
0:         return memory.toString(); // need to loop thru all keys in the map and print values
1:     }
1: 
1:     // ------------- API entry and exit trace methods ----------------------------
1:     // Entry and exit are be traced separately because input arguments need
1:     // to be traced before any potential exception can occur.
1:     // Exit tracing is only performed on methods that return values.
1:     // Entry tracing is only performed on methods that update state,
1:     // so entry tracing is not performed on simple getter methods.
1:     // We could decide in the future to restrict entry tracing only to methods with input arguments.
1: 
1:     private void traceExternalMethod(Object instance, String className, String methodName) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         dncprint(buildExternalMethodHeader(instance, className), methodName);
1:     }
1: 
1:     private void traceExternalDeprecatedMethod(Object instance, String className, String methodName) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         dncprint(buildExternalMethodHeader(instance, className), "Deprecated " + methodName);
1:     }
1: 
1:     private String buildExternalMethodHeader(Object instance, String className) {
1:         return
1:                 "[Time:" + System.currentTimeMillis() + "]" +
1:                 "[Thread:" + Thread.currentThread().getName() + "]" +
1:                 "[" + className + "@" + Integer.toHexString(instance.hashCode()) + "]";
1:     }
1: 
1:     private String getClassNameOfInstanceIfTraced(Object instance) {
1:         if (instance == null) // this prevents NPE from instance.getClass() used below
1:         {
1:             return null;
0:         } else if (instance instanceof Connection && loggingEnabled(ClientDataSource.TRACE_CONNECTION_CALLS)) {
0:             return "Connection";
0:         } else if (instance instanceof ResultSet && loggingEnabled(ClientDataSource.TRACE_RESULT_SET_CALLS)) {
0:             return "ResultSet";
0:         } else if (instance instanceof CallableStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
0:             return "CallableStatement";
0:         } else if (instance instanceof PreparedStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
0:             return "PreparedStatement";
0:         } else if (instance instanceof Statement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
0:             return "Statement";
1:         }
1:         // Not yet externalizing Blob tracing, except for trace_all
0:         else if (instance instanceof Blob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
1:         {
0:             return "Blob";
1:         }
0:         // Not yet externalizing Clob tracing, except for trace_all
0:         else if (instance instanceof Clob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
1:         {
0:             return "Clob";
1:         }
1:         // Not yet externalizing dbmd catalog call tracing, except for trace_all
0:         else if (instance instanceof DatabaseMetaData && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
1:         {
0:             return "DatabaseMetaData";
1:         }
1:         // we don't use instanceof javax.transaction.XAResource to avoid dependency on j2ee.jar
0:         else if (loggingEnabled(ClientDataSource.TRACE_XA_CALLS) &&
1:                 instance.getClass().getName().startsWith("org.apache.derby.client.net.NetXAResource")) {
1:             return "NetXAResource";
0:         } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
1:                 instance.getClass().getName().equals("org.apache.derby.client.ClientPooledConnection")) {
1:             return "ClientPooledConnection";
0:         } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
1:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientConnectionPoolDataSource")) {
1:             return "ClientConnectionPoolDataSource";
0:         } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
1:                 instance.getClass().getName().equals("org.apache.derby.client.ClientXAConnection")) {
1:             return "ClientXAConnection";
0:         } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
1:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientDataSource")) {
1:             return "ClientDataSource";
0:         } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
1:                 instance.getClass().getName().equals("org.apache.derby.jdbc.ClientXADataSource")) {
1:             return "ClientXADataSource";
1:         } else {
1:             return instance.getClass().getName();
1:         }
1:     }
1: 
1:     // --------------------------- method exit tracing --------------------------
1: 
1:     public void traceExit(Object instance, String methodName, Object returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String className = getClassNameOfInstanceIfTraced(instance);
1:         if (className == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             traceExternalMethod(instance, className, methodName);
1:             printWriter_.println(" () returned " + returnValue);
1:             printWriter_.flush();
1:         }
1:     }
1: 
0:     public void traceDeprecatedExit(Object instance, String methodName, Object returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String className = getClassNameOfInstanceIfTraced(instance);
1:         if (className == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             traceExternalDeprecatedMethod(instance, className, methodName);
1:             printWriter_.println(" () returned " + returnValue);
1:             printWriter_.flush();
1:         }
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, ResultSet resultSet) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String returnValue = (resultSet == null) ? "ResultSet@null" : "ResultSet@" + Integer.toHexString(resultSet.hashCode());
1:         traceExit(instance, methodName, returnValue);
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, CallableStatement returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, "CallableStatement@" + Integer.toHexString(returnValue.hashCode()));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, PreparedStatement returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, "PreparedStatement@" + Integer.toHexString(returnValue.hashCode()));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, Statement returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, "Statement@" + Integer.toHexString(returnValue.hashCode()));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, Blob blob) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String returnValue = (blob == null) ? "Blob@null" : "Blob@" + Integer.toHexString(blob.hashCode());
1:         traceExit(instance, methodName, returnValue);
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, Clob clob) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String returnValue = (clob == null) ? "Clob@null" : "Clob@" + Integer.toHexString(clob.hashCode());
1:         traceExit(instance, methodName, returnValue);
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, DatabaseMetaData returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, "DatabaseMetaData@" + Integer.toHexString(returnValue.hashCode()));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, Connection returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, "Connection@" + Integer.toHexString(returnValue.hashCode()));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, ColumnMetaData returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, "MetaData@" + (returnValue != null ? Integer.toHexString(returnValue.hashCode()) : null));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, byte[] returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, Utils.getStringFromBytes(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, int[] returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, Utils.getStringFromInts(returnValue));
1:     }
1: 
0:     public void traceDeprecatedExit(Object instance, String methodName, byte[] returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceDeprecatedExit(instance, methodName, Utils.getStringFromBytes(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, byte returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceExit(instance, methodName, "0x" + Integer.toHexString(returnValue & 0xff));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, int returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, String.valueOf(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, boolean returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, String.valueOf(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, long returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, String.valueOf(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, float returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, String.valueOf(returnValue));
1:     }
1: 
0:     public void traceExit(Object instance, String methodName, double returnValue) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceExit(instance, methodName, String.valueOf(returnValue));
1:     }
1: 
1:     // --------------------------- method entry tracing --------------------------
1: 
0:     private void traceEntryAllArgs(Object instance, String methodName, String argList) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String className = getClassNameOfInstanceIfTraced(instance);
1:         if (className == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             traceExternalMethod(instance, className, methodName);
0:             printWriter_.println(" " + argList + " called");
1:             printWriter_.flush();
1:         }
1:     }
1: 
0:     private void traceDeprecatedEntryAllArgs(Object instance, String methodName, String argList) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         String className = getClassNameOfInstanceIfTraced(instance);
1:         if (className == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             traceExternalDeprecatedMethod(instance, className, methodName);
0:             printWriter_.println(" " + argList + " called");
1:             printWriter_.flush();
1:         }
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ no args ------------------
1: 
0:     public void traceEntry(Object instance, String methodName) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName, "()");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 1 arg --------------------
1: 
0:     public void traceEntry(Object instance, String methodName, Object argument) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + argument + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, boolean argument) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + argument + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int argument) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + argument + ")");
1:     }
1: 
0:     public void traceDeprecatedEntry(Object instance, String methodName, int argument) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceDeprecatedEntryAllArgs(instance, methodName,
0:                 "(" + argument + ")");
1:     }
1: 
0:     public void traceDeprecatedEntry(Object instance, String methodName, Object argument) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceDeprecatedEntryAllArgs(instance, methodName,
0:                 "(" + argument + ")");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 2 args -------------------
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, Object arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, Object arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, byte[] arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + Utils.getStringFromBytes(arg2) + ")");
1:     }
1: 
0:     public void traceDeprecatedEntry(Object instance, String methodName, int arg1, int arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceDeprecatedEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceDeprecatedEntry(Object instance, String methodName, Object arg1, int arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceDeprecatedEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, boolean arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, byte arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", 0x" + Integer.toHexString(arg2 & 0xff) + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, short arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, int arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, long arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, float arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, int arg1, double arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, boolean arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, byte arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", 0x" + Integer.toHexString(arg2 & 0xff) + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, short arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, int arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, long arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, float arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName, Object arg1, double arg2) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ")");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 3 args -------------------
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, Object arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, Object arg2, Object arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, Object arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceDeprecatedEntry(Object instance, String methodName,
0:                                      int arg1, Object arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, int arg2, Object arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, int arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, int arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, int arg2, Object arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, boolean arg2, boolean arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, boolean arg2, int arg3) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 4 args -------------------
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, Object arg3, Object arg4) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, Object arg2, Object arg3, Object arg4) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            int arg1, Object arg2, int arg3, int arg4) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, int arg2, int arg3, int arg4) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, int arg3, int arg4) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 5 args -------------------
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, Object arg3, int arg4, boolean arg5) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")");
1:     }
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, Object arg3, boolean arg4, boolean arg5) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")");
1:     }
1: 
0:     // ---------------------- trace entry of methods w/ 6 args -------------------
1: 
0:     public void traceEntry(Object instance, String methodName,
0:                            Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         traceEntryAllArgs(instance, methodName,
0:                 "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ", " + arg6 + ")");
1:     }
1: 
1:     // ---------------------------tracing exceptions and warnings-----------------
1: 
0:     public void traceDiagnosable(java.sql.SQLException e) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]", true); // true means return tokens only
1:             dncprintln("END TRACE_DIAGNOSTICS");
1:         }
1:     }
1: 
0:     public void traceDiagnosable(javax.transaction.xa.XAException e) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             dncprintln("BEGIN TRACE_DIAGNOSTICS");
1:             ExceptionFormatter.printTrace(e, printWriter_, "[derby]");
1:             dncprintln("END TRACE_DIAGNOSTICS");
1:         }
1:     }
1:     // ------------------------ meta data tracing --------------------------------
1: 
0:     public void traceParameterMetaData(Statement statement, ColumnMetaData columnMetaData) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (!loggingEnabled(ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             String header = "[ParameterMetaData@" + Integer.toHexString(columnMetaData.hashCode()) + "]";
1:             try {
1:                 dncprintln(header, "BEGIN TRACE_PARAMETER_META_DATA");
1:                 dncprintln(header, "Parameter meta data for statement Statement@" + Integer.toHexString(statement.hashCode()));
1:                 dncprintln(header, "Number of parameter columns: " + columnMetaData.getColumnCount());
1:                 traceColumnMetaData(header, columnMetaData);
1:                 dncprintln(header, "END TRACE_PARAMETER_META_DATA");
0:             } catch (SqlException e) {
1:                 dncprintln(header, "Encountered an SQL exception while trying to trace parameter meta data");
1:                 dncprintln(header, "END TRACE_PARAMETER_META_DATA");
1:             }
1:         }
1:     }
1: 
0:     public void traceResultSetMetaData(Statement statement, ColumnMetaData columnMetaData) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (!loggingEnabled(ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             String header = "[ResultSetMetaData@" + Integer.toHexString(columnMetaData.hashCode()) + "]";
1:             try {
1:                 dncprintln(header, "BEGIN TRACE_RESULT_SET_META_DATA");
1:                 dncprintln(header, "Result set meta data for statement Statement@" + Integer.toHexString(statement.hashCode()));
1:                 dncprintln(header, "Number of result set columns: " + columnMetaData.getColumnCount());
1:                 traceColumnMetaData(header, columnMetaData);
1:                 dncprintln(header, "END TRACE_RESULT_SET_META_DATA");
0:             } catch (SqlException e) {
1:                 dncprintln(header, "Encountered an SQL exception while trying to trace result set meta data");
1:                 dncprintln(header, "END TRACE_RESULT_SET_META_DATA");
1:             }
1:         }
1:     }
1: 
1:     //-----------------------------transient state--------------------------------
1: 
1:     private void traceColumnMetaData(String header, ColumnMetaData columnMetaData) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         try {
1:             synchronized (printWriter_) {
1: 
1:                 for (int column = 1; column <= columnMetaData.getColumnCount(); column++) {
1:                     dncprint(header, "Column " + column + ": { ");
1:                     printWriter_.print("label=" + columnMetaData.getColumnLabel(column) + ", ");
1:                     printWriter_.print("name=" + columnMetaData.getColumnName(column) + ", ");
1:                     printWriter_.print("type name=" + columnMetaData.getColumnTypeName(column) + ", ");
1:                     printWriter_.print("type=" + columnMetaData.getColumnType(column) + ", ");
1:                     printWriter_.print("nullable=" + columnMetaData.isNullable(column) + ", ");
1:                     printWriter_.print("precision=" + columnMetaData.getPrecision(column) + ", ");
1:                     printWriter_.print("scale=" + columnMetaData.getScale(column) + ", ");
1:                     printWriter_.print("schema name=" + columnMetaData.getSchemaName(column) + ", ");
1:                     printWriter_.print("table name=" + columnMetaData.getTableName(column) + ", ");
1:                     printWriter_.print("writable=" + columnMetaData.isWritable(column) + ", ");
1:                     printWriter_.print("sqlPrecision=" + (columnMetaData.sqlPrecision_ == null ? "<null>" : "" + columnMetaData.sqlPrecision_[column - 1]) + ", ");
1:                     printWriter_.print("sqlScale=" + (columnMetaData.sqlScale_ == null ? "<null>" : "" + columnMetaData.sqlScale_[column - 1]) + ", ");
1:                     printWriter_.print("sqlLength=" + (columnMetaData.sqlLength_ == null ? "<null>" : "" + columnMetaData.sqlLength_[column - 1]) + ", ");
1:                     printWriter_.print("sqlType=" + (columnMetaData.sqlType_ == null ? "<null>" : "" + columnMetaData.sqlType_[column - 1]) + ", ");
1:                     printWriter_.print("sqlCcsid=" + (columnMetaData.sqlCcsid_ == null ? "<null>" : "" + columnMetaData.sqlCcsid_[column - 1]) + ", ");
1:                     printWriter_.print("sqlName=" + (columnMetaData.sqlName_ == null ? "<null>" : columnMetaData.sqlName_[column - 1]) + ", ");
1:                     printWriter_.print("sqlLabel=" + (columnMetaData.sqlLabel_ == null ? "<null>" : columnMetaData.sqlLabel_[column - 1]) + ", ");
1:                     printWriter_.print("sqlUnnamed=" + (columnMetaData.sqlUnnamed_ == null ? "<null>" : "" + columnMetaData.sqlUnnamed_[column - 1]) + ", ");
1:                     printWriter_.print("sqlComment=" + (columnMetaData.sqlComment_ == null ? "<null>" : columnMetaData.sqlComment_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxKeymem=" + (columnMetaData.sqlxKeymem_ == null ? "<null>" : "" + columnMetaData.sqlxKeymem_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxGenerated=" + (columnMetaData.sqlxGenerated_ == null ? "<null>" : "" + columnMetaData.sqlxGenerated_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxParmmode=" + (columnMetaData.sqlxParmmode_ == null ? "<null>" : "" + columnMetaData.sqlxParmmode_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxCorname=" + (columnMetaData.sqlxCorname_ == null ? "<null>" : columnMetaData.sqlxCorname_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxName=" + (columnMetaData.sqlxName_ == null ? "<null>" : columnMetaData.sqlxName_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxBasename=" + (columnMetaData.sqlxBasename_ == null ? "<null>" : columnMetaData.sqlxBasename_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxUpdatable=" + (columnMetaData.sqlxUpdatable_ == null ? "<null>" : "" + columnMetaData.sqlxUpdatable_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxSchema=" + (columnMetaData.sqlxSchema_ == null ? "<null>" : columnMetaData.sqlxSchema_[column - 1]) + ", ");
1:                     printWriter_.print("sqlxRdbnam=" + (columnMetaData.sqlxRdbnam_ == null ? "<null>" : columnMetaData.sqlxRdbnam_[column - 1]) + ", ");
1:                     printWriter_.print("internal type=" + columnMetaData.types_[column - 1] + ", ");
1:                     printWriter_.println(" }");
1:                 }
1:                 dncprint(header, "{ ");
1:                 printWriter_.print("sqldHold=" + columnMetaData.sqldHold_ + ", ");
1:                 printWriter_.print("sqldReturn=" + columnMetaData.sqldReturn_ + ", ");
1:                 printWriter_.print("sqldScroll=" + columnMetaData.sqldScroll_ + ", ");
1:                 printWriter_.print("sqldSensitive=" + columnMetaData.sqldSensitive_ + ", ");
1:                 printWriter_.print("sqldFcode=" + columnMetaData.sqldFcode_ + ", ");
1:                 printWriter_.print("sqldKeytype=" + columnMetaData.sqldKeytype_ + ", ");
1:                 printWriter_.print("sqldRdbnam=" + columnMetaData.sqldRdbnam_ + ", ");
1:                 printWriter_.print("sqldSchema=" + columnMetaData.sqldSchema_);
1:                 printWriter_.println(" }");
1:                 printWriter_.flush();
1:             }
0:         } catch (SqlException e) {
1:             dncprintln(header, "Encountered an SQL exception while trying to trace column meta data");
1:         }
1:     }
1: 
1:     // ---------------------- 3-way tracing connects -----------------------------
1:     // Including protocol manager levels, and driver configuration
1: 
1:     // Jdbc 2
0:     public void traceConnectEntry(ClientDataSource dataSource) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
1:             traceDriverConfigurationJdbc2();
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
1:             traceConnectsEntry(dataSource);
1:         }
1:     }
1: 
1:     // Jdbc 1
0:     public void traceConnectEntry(String server,
1:                                   int port,
1:                                   String database,
0:                                   java.util.Properties properties) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
1:             traceDriverConfigurationJdbc1();
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
1:             traceConnectsEntry(server, port, database, properties);
1:         }
1:     }
1: 
0:     public void traceConnectResetEntry(Object instance, LogWriter logWriter, String user, ClientDataSource ds) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         traceEntry(instance, "reset", logWriter, user, "<escaped>", ds);
0:         if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
1:             traceConnectsResetEntry(ds);
1:         }
1:     }
1: 
0:     public void traceConnectExit(Connection connection) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
1:             traceConnectsExit(connection);
1:         }
1:     }
1: 
0:     public void traceConnectResetExit(Connection connection) {
0:         if (traceSuspended()) {
1:             return;
1:         }
0:         if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
1:             traceConnectsResetExit(connection);
1:         }
1:     }
1: 
1: 
1:     // ---------------------- tracing connects -----------------------------------
1: 
0:     private void traceConnectsResetEntry(ClientDataSource dataSource) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         try {
1:             traceConnectsResetEntry(dataSource.getServerName(),
1:                     dataSource.getPortNumber(),
1:                     dataSource.getDatabaseName(),
0:                     dataSource.getProperties());
0:         } catch (java.sql.SQLException e) {
1:             dncprintln("Encountered an SQL exception while trying to trace connection reset entry");
1:         }
1:     }
1: 
0:     private void traceConnectsEntry(ClientDataSource dataSource) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         try {
1:             traceConnectsEntry(dataSource.getServerName(),
1:                     dataSource.getPortNumber(),
1:                     dataSource.getDatabaseName(),
0:                     dataSource.getProperties());
0:         } catch (java.sql.SQLException e) {
1:             dncprintln("Encountered an SQL exception while trying to trace connection entry");
1:         }
1:     }
1: 
1:     private void traceConnectsResetEntry(String server,
1:                                          int port,
1:                                          String database,
0:                                          java.util.Properties properties) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         dncprintln("BEGIN TRACE_CONNECT_RESET");
1:         dncprintln("Connection reset requested for " + server + ":" + port + "/" + database);
1:         dncprint("Using properties: ");
1:         writeProperties(properties);
1:         dncprintln("END TRACE_CONNECT_RESET");
1:     }
1: 
1:     private void traceConnectsEntry(String server,
1:                                     int port,
1:                                     String database,
0:                                     java.util.Properties properties) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             dncprintln("BEGIN TRACE_CONNECTS");
1:             dncprintln("Attempting connection to " + server + ":" + port + "/" + database);
1:             dncprint("Using properties: ");
1:             writeProperties(properties);
1:             dncprintln("END TRACE_CONNECTS");
1:         }
1:     }
1: 
1:     // Specialized by NetLogWriter.traceConnectsExit()
0:     public void traceConnectsExit(Connection c) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             String header = "[Connection@" + Integer.toHexString(c.hashCode()) + "]";
1:             try {
1:                 dncprintln(header, "BEGIN TRACE_CONNECTS");
1:                 dncprintln(header, "Successfully connected to server " + c.databaseMetaData_.getURL());
1:                 dncprintln(header, "User: " + c.databaseMetaData_.getUserName());
1:                 dncprintln(header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
1:                 dncprintln(header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
1:                 dncprintln(header, "Driver name: " + c.databaseMetaData_.getDriverName());
1:                 dncprintln(header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
1:                 dncprintln(header, "END TRACE_CONNECTS");
0:             } catch (java.sql.SQLException e) {
1:                 dncprintln(header, "Encountered an SQL exception while trying to trace connection exit");
1:                 dncprintln(header, "END TRACE_CONNECTS");
1:             }
1:         }
1:     }
1: 
0:     public void traceConnectsResetExit(org.apache.derby.client.am.Connection c) {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             String header = "[Connection@" + Integer.toHexString(c.hashCode()) + "]";
1:             try {
1:                 dncprintln(header, "BEGIN TRACE_CONNECT_RESET");
1:                 dncprintln(header, "Successfully reset connection to server " + c.databaseMetaData_.getURL());
1:                 dncprintln(header, "User: " + c.databaseMetaData_.getUserName());
1:                 dncprintln(header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
1:                 dncprintln(header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
1:                 dncprintln(header, "Driver name: " + c.databaseMetaData_.getDriverName());
1:                 dncprintln(header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
1:                 dncprintln(header, "END TRACE_CONNECT_RESET");
0:             } catch (java.sql.SQLException e) {
1:                 dncprintln(header, "Encountered an SQL exception while trying to trace connection reset exit");
1:                 dncprintln(header, "END TRACE_CONNECT_RESET");
1:             }
1:         }
1:     }
1: 
1: 
1:     // properties.toString() will print out passwords,
1:     // so this method was written to escape the password property value.
1:     // printWriter_ synchronized by caller.
0:     private void writeProperties(java.util.Properties properties) {
1:         printWriter_.print("{ ");
0:         for (java.util.Iterator i = properties.entrySet().iterator(); i.hasNext();) {
0:             java.util.Map.Entry e = (java.util.Map.Entry) (i.next());
1:             if ("password".equals(e.getKey())) {
1:                 printWriter_.print("password=" + escapePassword((String) e.getValue()));
1:             } else {
1:                 printWriter_.print(e.getKey() + "=" + e.getValue());
1:             }
1:             if (i.hasNext()) {
1:                 printWriter_.print(", ");
1:             }
1:         }
1:         printWriter_.println(" }");
1: 
1:     private String escapePassword(String pw) {
0:         StringBuffer sb = new StringBuffer(pw);
1:         for (int j = 0; j < pw.length(); j++) {
1:             sb.setCharAt(j, '*');
1:         }
1:         return sb.toString();
1:     //-------------------------tracing driver configuration-----------------------
1:     private void traceDriverConfigurationJdbc2() {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             if (!driverConfigurationHasBeenWrittenToJdbc2Stream_) {
1:                 writeDriverConfiguration();
1:                 driverConfigurationHasBeenWrittenToJdbc2Stream_ = true;
1:             }
1:         }
1:     private void traceDriverConfigurationJdbc1() {
0:         if (traceSuspended()) {
1:             return;
1:         }
1:         synchronized (printWriter_) {
1:             if (!driverConfigurationHasBeenWrittenToJdbc1Stream_) {
1:                 writeDriverConfiguration();
1:                 driverConfigurationHasBeenWrittenToJdbc1Stream_ = true;
1:             }
1:         }
0:     public void writeDriverConfiguration() {
0:         org.apache.derby.client.am.Version.writeDriverConfiguration(printWriter_);
0:     public static java.io.PrintWriter getPrintWriter(String fileName, boolean fileAppend) throws SqlException {
1:         try {
0:             java.io.PrintWriter printWriter = null;
0:             String fileCanonicalPath = new java.io.File(fileName).getCanonicalPath();
0:             printWriter =
0:                     new java.io.PrintWriter(new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileCanonicalPath, fileAppend), 4096), true);
0:             return printWriter;
0:         } catch (java.io.IOException e) {
0:             throw new SqlException(null, "Unable to open file " + fileName);
1:         }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derby.client.am.LogWriter
0: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
1: */
0: 
1: package org.apache.derby.client.am;
0: 
0: import org.apache.derby.jdbc.ClientDataSource;
0: 
0: public class LogWriter
0: {
0:   protected java.io.PrintWriter printWriter_;
0:   protected int traceLevel_;
0:   private boolean driverConfigurationHasBeenWrittenToJdbc1Stream_ = false;
0:   private boolean driverConfigurationHasBeenWrittenToJdbc2Stream_ = false;
0: 
0:   // It is assumed that this constructor is never called when logWriter is null.
0:   public LogWriter (java.io.PrintWriter printWriter, int traceLevel)
0:   {
0:     printWriter_ = printWriter;
0:     traceLevel_ = traceLevel;
0:   }
0: 
0:   final protected boolean loggingEnabled (int traceLevel)
0:   {
0:     // It is an invariant that the printWriter is never null, so remove the
0:     return printWriter_ != null && (traceLevel & traceLevel_) != 0;
0:   }
0: 
0:   final protected boolean traceSuspended () { return org.apache.derby.client.am.Configuration.traceSuspended__; }
0: 
0:   // When garbage collector doesn't kick in in time
0:   // to close file descriptors, "Too many open files"
0:   // exception may occur (currently found on Linux).
0:   // To minimize the chance of this problem happening,
0:   // the print writer needs to be closed (after this
0:   // DNC log writer is closed) when each connection has
0:   // its own trace file (i.e. traceDirectory is specified).
0:   public boolean printWriterNeedsToBeClosed_;
0: 
0:   void close()
0:   {
0:     if (printWriterNeedsToBeClosed_) {
0:       printWriter_.close();
0:       printWriterNeedsToBeClosed_ = false;
0:     }
0:     // printWriter_ = null; // help GC.
0:   }
0: 
0:   // ---------------------------------------------------------------------------
0: 
0:   public void dncprintln (String s)
0:   {
0:     synchronized (printWriter_) {
0:       printWriter_.println ("[derby] " + s);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   private void dncprint (String s)
0:   {
0:     synchronized (printWriter_) {
0:       printWriter_.print ("[derby] " + s);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   private void dncprintln (String header, String s)
0:   {
0:     synchronized (printWriter_) {
0:       printWriter_.println ("[derby]" + header + " " + s);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   private void dncprint (String header, String s)
0:   {
0:     synchronized (printWriter_) {
0:       printWriter_.print ("[derby]" + header + " " + s);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   // ------------------------ tracepoint api -----------------------------------
0: 
0:   public void tracepoint (String component, int tracepoint, String message)
0:   {
0:     if (traceSuspended()) return;
0:     dncprintln (component,
0:       "[time:" + System.currentTimeMillis() + "]" +
0:       "[thread:" + Thread.currentThread().getName() + "]" +
0:       "[tracepoint:" + tracepoint + "]" +
0:       message);
0:   }
0: 
0:   public void tracepoint (String component, int tracepoint,
0:                           String classContext, String methodContext)
0:   {
0:     if (traceSuspended()) return;
0:     String staticContextTracepointRecord =
0:       component +
0:       "[time:" + System.currentTimeMillis() + "]" +
0:       "[thread:" + Thread.currentThread().getName() + "]" +
0:       "[tracepoint:" + tracepoint + "]" +
0:       "[" + classContext + "." + methodContext + "]";
0:     dncprintln (staticContextTracepointRecord);
0:   }
0: 
0:   public void tracepoint (String component, int tracepoint,
0:                           Object instance, String classContext, String methodContext)
0:   {
0:     if (traceSuspended()) return;
0:     String instanceContextTracepointRecord =
0:       component +
0:       "[time:" + System.currentTimeMillis() + "]" +
0:       "[thread:" + Thread.currentThread().getName() + "]" +
0:       "[tracepoint:" + tracepoint + "]" +
0:       "[" + classContext + "@" + Integer.toHexString (instance.hashCode()) + "." + methodContext + "]";
0:     dncprintln (instanceContextTracepointRecord);
0:   }
0: 
0:   public void tracepoint (String component, int tracepoint,
0:                           String classContext, String methodContext,
0:                           java.util.Map memory)
0:   {
0:     if (traceSuspended()) return;
0:     String staticContextTracepointRecord =
0:       component +
0:       "[time:" + System.currentTimeMillis() + "]" +
0:       "[thread:" + Thread.currentThread().getName() + "]" +
0:       "[tracepoint:" + tracepoint + "]" +
0:       "[" + classContext + "." + methodContext + "]";
0:     dncprintln (staticContextTracepointRecord + getMemoryMapDisplay (memory));
0:   }
0: 
0:   public void tracepoint (String component, int tracepoint,
0:                           Object instance, String classContext, String methodContext,
0:                           java.util.Map memory)
0:   {
0:     if (traceSuspended()) return;
0:     String instanceContextTracepointRecord =
0:       component +
0:       "[time:" + System.currentTimeMillis() + "]" +
0:       "[thread:" + Thread.currentThread().getName() + "]" +
0:       "[tracepoint:" + tracepoint + "]" +
0:       "[" + classContext + "@" + Integer.toHexString (instance.hashCode()) + "." + methodContext + "]";
0:     dncprintln (instanceContextTracepointRecord + getMemoryMapDisplay (memory));
0:   }
0: 
0:   private String getMemoryMapDisplay (java.util.Map memory)
0:   {
0:     return memory.toString(); // need to loop thru all keys in the map and print values
0:   }
0: 
0:   // ------------- API entry and exit trace methods ----------------------------
0:   // Entry and exit are be traced separately because input arguments need
0:   // to be traced before any potential exception can occur.
0:   // Exit tracing is only performed on methods that return values.
0:   // Entry tracing is only performed on methods that update state,
0:   // so entry tracing is not performed on simple getter methods.
0:   // We could decide in the future to restrict entry tracing only to methods with input arguments.
0: 
0:   private void traceExternalMethod (Object instance, String className, String methodName)
0:   {
0:     if (traceSuspended()) return;
0:     dncprint (buildExternalMethodHeader (instance, className), methodName);
0:   }
0: 
0:   private void traceExternalDeprecatedMethod (Object instance, String className, String methodName)
0:   {
0:     if (traceSuspended()) return;
0:     dncprint (buildExternalMethodHeader (instance, className), "Deprecated " + methodName);
0:   }
0: 
0:   private String buildExternalMethodHeader (Object instance, String className)
0:   {
0:     return
0:       "[Time:" + System.currentTimeMillis() + "]" +
0:       "[Thread:" + Thread.currentThread().getName() + "]" +
0:       "[" + className + "@" + Integer.toHexString (instance.hashCode()) + "]";
0:   }
0: 
0:   private String getClassNameOfInstanceIfTraced (Object instance)
0:   {
0:     if (instance == null) // this prevents NPE from instance.getClass() used below
0:       return null;
0:     else if (instance instanceof Connection && loggingEnabled (ClientDataSource.TRACE_CONNECTION_CALLS))
0:       return "Connection";
0:     else if (instance instanceof ResultSet && loggingEnabled (ClientDataSource.TRACE_RESULT_SET_CALLS))
0:       return "ResultSet";
0:     else if (instance instanceof CallableStatement && loggingEnabled (ClientDataSource.TRACE_STATEMENT_CALLS))
0:       return "CallableStatement";
0:     else if (instance instanceof PreparedStatement && loggingEnabled (ClientDataSource.TRACE_STATEMENT_CALLS))
0:       return "PreparedStatement";
0:     else if (instance instanceof Statement && loggingEnabled (ClientDataSource.TRACE_STATEMENT_CALLS))
0:       return "Statement";
0:     // Not yet externalizing Blob tracing, except for trace_all
0:     else if (instance instanceof Blob && loggingEnabled (ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
0:       return "Blob";
0:     // Not yet externalizing Clob tracing, except for trace_all
0:     else if (instance instanceof Clob && loggingEnabled (ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
0:       return "Clob";
0:     // Not yet externalizing dbmd catalog call tracing, except for trace_all
0:     else if (instance instanceof DatabaseMetaData && loggingEnabled (ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
0:       return "DatabaseMetaData";
0:     // we don't use instanceof javax.transaction.XAResource to avoid dependency on j2ee.jar
0:     else if (loggingEnabled (ClientDataSource.TRACE_XA_CALLS) &&
0:              instance.getClass().getName().startsWith ("org.apache.derby.client.net.NetXAResource"))
0:       return "NetXAResource";
0:     else if (loggingEnabled (ClientDataSource.TRACE_ALL) &&
0:       instance.getClass().getName().equals("org.apache.derby.client.ClientPooledConnection"))
0:       return "ClientPooledConnection";
0:     else if (loggingEnabled (ClientDataSource.TRACE_ALL) &&
0:       instance.getClass().getName().equals("org.apache.derby.jdbc.ClientConnectionPoolDataSource"))
0:       return "ClientConnectionPoolDataSource";
0:     else if (loggingEnabled (ClientDataSource.TRACE_ALL) &&
0:       instance.getClass().getName().equals("org.apache.derby.client.ClientXAConnection"))
0:       return "ClientXAConnection";
0:     else if (loggingEnabled (ClientDataSource.TRACE_ALL) &&
0:       instance.getClass().getName().equals("org.apache.derby.jdbc.ClientDataSource"))
0:       return "ClientDataSource";
0:     else if (loggingEnabled (ClientDataSource.TRACE_ALL) &&
0:       instance.getClass().getName().equals("org.apache.derby.jdbc.ClientXADataSource"))
0:       return "ClientXADataSource";
0:     else
0:       return instance.getClass().getName();
0:   }
0: 
0:   // --------------------------- method exit tracing --------------------------
0: 
0:   public void traceExit (Object instance, String methodName, Object returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     String className = getClassNameOfInstanceIfTraced (instance);
0:     if (className == null) return;
0:     synchronized (printWriter_) {
0:       traceExternalMethod (instance, className, methodName);
0:       printWriter_.println (" () returned " + returnValue);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   public void traceDeprecatedExit (Object instance, String methodName, Object returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     String className = getClassNameOfInstanceIfTraced (instance);
0:     if (className == null) return;
0:     synchronized (printWriter_) {
0:       traceExternalDeprecatedMethod (instance, className, methodName);
0:       printWriter_.println (" () returned " + returnValue);
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, ResultSet resultSet)
0:   {
0:     if (traceSuspended()) return;
0:     String returnValue = (resultSet == null) ? "ResultSet@null" : "ResultSet@" + Integer.toHexString (resultSet.hashCode());
0:     traceExit (instance, methodName, returnValue);
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, CallableStatement returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "CallableStatement@" + Integer.toHexString (returnValue.hashCode()));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, PreparedStatement returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "PreparedStatement@" + Integer.toHexString (returnValue.hashCode()));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, Statement returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "Statement@" + Integer.toHexString (returnValue.hashCode()));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, Blob blob)
0:   {
0:     if (traceSuspended()) return;
0:     String returnValue = (blob == null) ? "Blob@null" : "Blob@" + Integer.toHexString (blob.hashCode());
0:     traceExit (instance, methodName, returnValue);
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, Clob clob)
0:   {
0:     if (traceSuspended()) return;
0:     String returnValue = (clob == null) ? "Clob@null" : "Clob@" + Integer.toHexString (clob.hashCode());
0:     traceExit (instance, methodName, returnValue);
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, DatabaseMetaData returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "DatabaseMetaData@" + Integer.toHexString (returnValue.hashCode()));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, Connection returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "Connection@" + Integer.toHexString (returnValue.hashCode()));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, ColumnMetaData returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "MetaData@" + (returnValue != null ? Integer.toHexString (returnValue.hashCode()) : null));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, byte[] returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, Utils.getStringFromBytes (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, int[] returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, Utils.getStringFromInts (returnValue));
0:   }
0: 
0:   public void traceDeprecatedExit (Object instance, String methodName, byte[] returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceDeprecatedExit (instance, methodName, Utils.getStringFromBytes (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, byte returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, "0x" + Integer.toHexString (returnValue&0xff));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, int returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, String.valueOf (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, boolean returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, String.valueOf (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, long returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, String.valueOf (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, float returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, String.valueOf (returnValue));
0:   }
0: 
0:   public void traceExit (Object instance, String methodName, double returnValue)
0:   {
0:     if (traceSuspended()) return;
0:     traceExit (instance, methodName, String.valueOf (returnValue));
0:   }
0: 
0:   // --------------------------- method entry tracing --------------------------
0: 
0:   private void traceEntryAllArgs (Object instance, String methodName, String argList)
0:   {
0:     if (traceSuspended()) return;
0:     String className = getClassNameOfInstanceIfTraced (instance);
0:     if (className == null) return;
0:     synchronized (printWriter_) {
0:       traceExternalMethod (instance, className, methodName);
0:       printWriter_.println (" " + argList + " called");
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   private void traceDeprecatedEntryAllArgs (Object instance, String methodName, String argList)
0:   {
0:     if (traceSuspended()) return;
0:     String className = getClassNameOfInstanceIfTraced (instance);
0:     if (className == null) return;
0:     synchronized (printWriter_) {
0:       traceExternalDeprecatedMethod (instance, className, methodName);
0:       printWriter_.println (" " + argList + " called");
0:       printWriter_.flush();
0:     }
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ no args ------------------
0: 
0:   public void traceEntry (Object instance, String methodName)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName, "()");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 1 arg --------------------
0: 
0:   public void traceEntry (Object instance, String methodName, Object argument)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + argument + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, boolean argument)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + argument + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int argument)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + argument + ")");
0:   }
0: 
0:   public void traceDeprecatedEntry (Object instance, String methodName, int argument)
0:   {
0:     if (traceSuspended()) return;
0:     traceDeprecatedEntryAllArgs (instance, methodName,
0:       "(" + argument + ")");
0:   }
0: 
0:   public void traceDeprecatedEntry (Object instance, String methodName, Object argument)
0:   {
0:     if (traceSuspended()) return;
0:     traceDeprecatedEntryAllArgs (instance, methodName,
0:       "(" + argument + ")");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 2 args -------------------
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, Object arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, Object arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, byte[] arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + Utils.getStringFromBytes (arg2) + ")");
0:   }
0: 
0:   public void traceDeprecatedEntry (Object instance, String methodName, int arg1, int arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceDeprecatedEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceDeprecatedEntry (Object instance, String methodName, Object arg1, int arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceDeprecatedEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, boolean arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, byte arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", 0x" + Integer.toHexString (arg2&0xff) + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, short arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, int arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, long arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, float arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, int arg1, double arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, boolean arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, byte arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", 0x" + Integer.toHexString (arg2&0xff) + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, short arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, int arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, long arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, float arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName, Object arg1, double arg2)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ")");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 3 args -------------------
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                           Object arg1, Object arg2, Object arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                           int arg1, Object arg2, Object arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      int arg1, Object arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceDeprecatedEntry (Object instance, String methodName,
0:                      int arg1, Object arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      int arg1, int arg2, Object arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      int arg1, int arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, int arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, int arg2, Object arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, boolean arg2, boolean arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, boolean arg2, int arg3)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ")");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 4 args -------------------
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, Object arg3, Object arg4)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      int arg1, Object arg2, Object arg3, Object arg4)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      int arg1, Object arg2, int arg3, int arg4)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, int arg2, int arg3, int arg4)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, int arg3, int arg4)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ")");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 5 args -------------------
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, Object arg3, int arg4, boolean arg5)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")");
0:   }
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, Object arg3, boolean arg4, boolean arg5)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")");
0:   }
0: 
0:   // ---------------------- trace entry of methods w/ 6 args -------------------
0: 
0:   public void traceEntry (Object instance, String methodName,
0:                      Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntryAllArgs (instance, methodName,
0:       "(" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ", " + arg6 + ")");
0:   }
0: 
0:   // ---------------------------tracing exceptions and warnings-----------------
0: 
0:   public void traceDiagnosable (java.sql.SQLException e)
0:   {
0:     if (traceSuspended()) return;
0:     if (!loggingEnabled (ClientDataSource.TRACE_DIAGNOSTICS)) return;
0:     synchronized (printWriter_) {
0:       dncprintln ("BEGIN TRACE_DIAGNOSTICS");
0:       ExceptionFormatter.printTrace (e, printWriter_, "[derby]", true); // true means return tokens only
0:       dncprintln ("END TRACE_DIAGNOSTICS");
0:     }
0:   }
0: 
0:   public void traceDiagnosable (javax.transaction.xa.XAException e)
0:   {
0:     if (traceSuspended()) return;
0:     if (!loggingEnabled (ClientDataSource.TRACE_DIAGNOSTICS)) return;
0:     synchronized (printWriter_) {
0:       dncprintln ("BEGIN TRACE_DIAGNOSTICS");
0:       ExceptionFormatter.printTrace (e, printWriter_, "[derby]");
0:       dncprintln ("END TRACE_DIAGNOSTICS");
0:     }
0:   }
0:   // ------------------------ meta data tracing --------------------------------
0: 
0:   public void traceParameterMetaData (Statement statement, ColumnMetaData columnMetaData)
0:   {
0:     if (traceSuspended()) return;
0:     if (!loggingEnabled (ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) return;
0:     synchronized (printWriter_) {
0:       String header = "[ParameterMetaData@" + Integer.toHexString (columnMetaData.hashCode()) + "]";
0:       try {
0:         dncprintln (header, "BEGIN TRACE_PARAMETER_META_DATA");
0:         dncprintln (header, "Parameter meta data for statement Statement@" + Integer.toHexString (statement.hashCode()));
0:         dncprintln (header, "Number of parameter columns: " + columnMetaData.getColumnCount());
0:         traceColumnMetaData (header, columnMetaData);
0:         dncprintln (header, "END TRACE_PARAMETER_META_DATA");
0:       }
0:       catch (SqlException e) {
0:         dncprintln (header, "Encountered an SQL exception while trying to trace parameter meta data");
0:         dncprintln (header, "END TRACE_PARAMETER_META_DATA");
0:       }
0:     }
0:   }
0: 
0:   public void traceResultSetMetaData (Statement statement, ColumnMetaData columnMetaData)
0:   {
0:     if (traceSuspended()) return;
0:     if (!loggingEnabled (ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) return;
0:     synchronized (printWriter_) {
0:     String header = "[ResultSetMetaData@" + Integer.toHexString (columnMetaData.hashCode()) + "]";
0:       try {
0:         dncprintln (header, "BEGIN TRACE_RESULT_SET_META_DATA");
0:         dncprintln (header, "Result set meta data for statement Statement@" + Integer.toHexString (statement.hashCode()));
0:         dncprintln (header, "Number of result set columns: " + columnMetaData.getColumnCount());
0:         traceColumnMetaData (header, columnMetaData);
0:         dncprintln (header, "END TRACE_RESULT_SET_META_DATA");
0:       }
0:       catch (SqlException e) {
0:         dncprintln (header, "Encountered an SQL exception while trying to trace result set meta data");
0:         dncprintln (header, "END TRACE_RESULT_SET_META_DATA");
0:       }
0:     }
0:   }
0: 
0:   //-----------------------------transient state--------------------------------
0: 
0:   private void traceColumnMetaData (String header, ColumnMetaData columnMetaData)
0:   {
0:     if (traceSuspended()) return;
0:     try {
0:       synchronized (printWriter_) {
0: 
0:         for (int column = 1; column <= columnMetaData.getColumnCount(); column++) {
0:           dncprint (header, "Column " + column + ": { ");
0:           printWriter_.print ("label=" + columnMetaData.getColumnLabel (column) + ", ");
0:           printWriter_.print ("name=" + columnMetaData.getColumnName (column) + ", ");
0:           printWriter_.print ("type name=" + columnMetaData.getColumnTypeName (column) + ", ");
0:           printWriter_.print ("type=" + columnMetaData.getColumnType (column) + ", ");
0:           printWriter_.print ("nullable=" + columnMetaData.isNullable (column) + ", ");
0:           printWriter_.print ("precision=" + columnMetaData.getPrecision (column) + ", ");
0:           printWriter_.print ("scale=" + columnMetaData.getScale (column) + ", ");
0:           printWriter_.print ("schema name=" + columnMetaData.getSchemaName (column) + ", ");
0:           printWriter_.print ("table name=" + columnMetaData.getTableName (column) + ", ");
0:           printWriter_.print ("writable=" + columnMetaData.isWritable (column) + ", ");
0:           printWriter_.print ("sqlPrecision=" + (columnMetaData.sqlPrecision_ == null ? "<null>" : ""+columnMetaData.sqlPrecision_[column-1]) + ", ");
0:           printWriter_.print ("sqlScale=" + (columnMetaData.sqlScale_ == null ? "<null>" : ""+columnMetaData.sqlScale_[column-1]) + ", ");
0:           printWriter_.print ("sqlLength=" + (columnMetaData.sqlLength_ == null ? "<null>" : ""+columnMetaData.sqlLength_[column-1]) + ", ");
0:           printWriter_.print ("sqlType=" + (columnMetaData.sqlType_ == null ? "<null>" : ""+columnMetaData.sqlType_[column-1]) + ", ");
0:           printWriter_.print ("sqlCcsid=" + (columnMetaData.sqlCcsid_ == null ? "<null>" : ""+columnMetaData.sqlCcsid_[column-1]) + ", ");
0:           printWriter_.print ("sqlName=" + (columnMetaData.sqlName_ == null ? "<null>" : columnMetaData.sqlName_[column-1]) + ", ");
0:           printWriter_.print ("sqlLabel=" + (columnMetaData.sqlLabel_ == null ? "<null>" : columnMetaData.sqlLabel_[column-1]) + ", ");
0:           printWriter_.print ("sqlUnnamed=" + (columnMetaData.sqlUnnamed_ == null ? "<null>" : ""+columnMetaData.sqlUnnamed_[column-1]) + ", ");
0:           printWriter_.print ("sqlComment=" + (columnMetaData.sqlComment_ == null ? "<null>" : columnMetaData.sqlComment_[column-1]) + ", ");
0:           printWriter_.print ("sqlxKeymem=" + (columnMetaData.sqlxKeymem_ == null ? "<null>" : ""+columnMetaData.sqlxKeymem_[column-1]) + ", ");
0:           printWriter_.print ("sqlxGenerated=" + (columnMetaData.sqlxGenerated_ == null ? "<null>" : ""+columnMetaData.sqlxGenerated_[column-1]) + ", ");
0:           printWriter_.print ("sqlxParmmode=" + (columnMetaData.sqlxParmmode_ == null ? "<null>" : ""+columnMetaData.sqlxParmmode_[column-1]) + ", ");
0:           printWriter_.print ("sqlxCorname=" + (columnMetaData.sqlxCorname_ == null ? "<null>" : columnMetaData.sqlxCorname_[column-1]) + ", ");
0:           printWriter_.print ("sqlxName=" + (columnMetaData.sqlxName_ == null ? "<null>" : columnMetaData.sqlxName_[column-1]) + ", ");
0:           printWriter_.print ("sqlxBasename=" + (columnMetaData.sqlxBasename_ == null ? "<null>" : columnMetaData.sqlxBasename_[column-1]) + ", ");
0:           printWriter_.print ("sqlxUpdatable=" + (columnMetaData.sqlxUpdatable_ == null ? "<null>" : ""+columnMetaData.sqlxUpdatable_[column-1]) + ", ");
0:           printWriter_.print ("sqlxSchema=" + (columnMetaData.sqlxSchema_ == null ? "<null>" : columnMetaData.sqlxSchema_[column-1]) + ", ");
0:           printWriter_.print ("sqlxRdbnam=" + (columnMetaData.sqlxRdbnam_ == null ? "<null>" : columnMetaData.sqlxRdbnam_[column-1]) + ", ");
0:           printWriter_.print ("internal type=" + columnMetaData.types_[column-1] + ", ");
0:           printWriter_.println (" }");
0:         }
0:         dncprint (header, "{ ");
0:         printWriter_.print ("sqldHold=" + columnMetaData.sqldHold_ + ", ");
0:         printWriter_.print ("sqldReturn=" + columnMetaData.sqldReturn_ + ", ");
0:         printWriter_.print ("sqldScroll=" + columnMetaData.sqldScroll_ + ", ");
0:         printWriter_.print ("sqldSensitive=" + columnMetaData.sqldSensitive_ + ", ");
0:         printWriter_.print ("sqldFcode=" + columnMetaData.sqldFcode_ + ", ");
0:         printWriter_.print ("sqldKeytype=" + columnMetaData.sqldKeytype_ + ", ");
0:         printWriter_.print ("sqldRdbnam=" + columnMetaData.sqldRdbnam_ + ", ");
0:         printWriter_.print ("sqldSchema=" + columnMetaData.sqldSchema_);
0:         printWriter_.println (" }");
0:         printWriter_.flush();
0:       }
0:     }
0:     catch (SqlException e) {
0:       dncprintln (header, "Encountered an SQL exception while trying to trace column meta data");
0:     }
0:   }
0: 
0:   // ---------------------- 3-way tracing connects -----------------------------
0:   // Including protocol manager levels, and driver configuration
0: 
0:   // Jdbc 2
0:   public void traceConnectEntry (ClientDataSource dataSource)
0:   {
0:     if (traceSuspended()) return;
0:     if (loggingEnabled (ClientDataSource.TRACE_DRIVER_CONFIGURATION))
0:       traceDriverConfigurationJdbc2 ();
0:     if (loggingEnabled (ClientDataSource.TRACE_CONNECTS))
0:       traceConnectsEntry (dataSource);
0:   }
0: 
0:   // Jdbc 1
0:   public void traceConnectEntry ( String server,
0:                                    int port,
0:                                    String database,
0:                                    java.util.Properties properties)
0:   {
0:     if (traceSuspended()) return;
0:     if (loggingEnabled (ClientDataSource.TRACE_DRIVER_CONFIGURATION))
0:       traceDriverConfigurationJdbc1 ();
0:     if (loggingEnabled (ClientDataSource.TRACE_CONNECTS))
0:       traceConnectsEntry (server, port, database, properties);
0:   }
0: 
0:   public void traceConnectResetEntry (Object instance, LogWriter logWriter, String user, ClientDataSource ds)
0:   {
0:     if (traceSuspended()) return;
0:     traceEntry (instance, "reset", logWriter, user, "<escaped>", ds);
0:     if (loggingEnabled(ClientDataSource.TRACE_CONNECTS))
0:       traceConnectsResetEntry(ds);
0:   }
0: 
0:   public void traceConnectExit (Connection connection)
0:   {
0:     if (traceSuspended()) return;
0:     if (loggingEnabled (ClientDataSource.TRACE_CONNECTS))
0:       traceConnectsExit (connection);
0:   }
0: 
0:   public void traceConnectResetExit (Connection connection)
0:   {
0:     if (traceSuspended()) return;
0:     if (loggingEnabled (ClientDataSource.TRACE_CONNECTS))
0:       traceConnectsResetExit (connection);
0:   }
0: 
0: 
0:   // ---------------------- tracing connects -----------------------------------
0: 
0:   private void traceConnectsResetEntry (ClientDataSource dataSource)
0:   {
0:     if (traceSuspended()) return;
0:     try {
0:       traceConnectsResetEntry (dataSource.getServerName(),
0:                                dataSource.getPortNumber(),
0:                                dataSource.getDatabaseName(),
0:                                dataSource.getProperties());
0:     }
0:     catch (java.sql.SQLException e) {
0:       dncprintln ("Encountered an SQL exception while trying to trace connection reset entry");
0:     }
0:   }
0: 
0:   private void traceConnectsEntry (ClientDataSource dataSource)
0:   {
0:     if (traceSuspended()) return;
0:     try {
0:       traceConnectsEntry (dataSource.getServerName(),
0:                           dataSource.getPortNumber(),
0:                           dataSource.getDatabaseName(),
0:                           dataSource.getProperties());
0:     }
0:     catch (java.sql.SQLException e) {
0:       dncprintln ("Encountered an SQL exception while trying to trace connection entry");
0:     }
0:   }
0: 
0:   private void traceConnectsResetEntry (String server,
0:                                         int port,
0:                                         String database,
0:                                         java.util.Properties properties)
0:   {
0:     if (traceSuspended()) return;
0:     dncprintln ("BEGIN TRACE_CONNECT_RESET");
0:     dncprintln ("Connection reset requested for " + server + ":" + port + "/" + database);
0:     dncprint ("Using properties: ");
0:     writeProperties (properties);
0:     dncprintln ("END TRACE_CONNECT_RESET");
0:   }
0: 
0:   private void traceConnectsEntry (String server,
0:                                    int port,
0:                                    String database,
0:                                    java.util.Properties properties)
0:   {
0:     if (traceSuspended()) return;
0:     synchronized (printWriter_) {
0:       dncprintln ("BEGIN TRACE_CONNECTS");
0:       dncprintln ("Attempting connection to " + server + ":" + port + "/" + database);
0:       dncprint ("Using properties: ");
0:       writeProperties (properties);
0:       dncprintln ("END TRACE_CONNECTS");
0:     }
0:   }
0: 
0:   // Specialized by NetLogWriter.traceConnectsExit()
0:   public void traceConnectsExit (Connection c)
0:   {
0:     if (traceSuspended()) return;
0:     synchronized (printWriter_) {
0:       String header = "[Connection@" + Integer.toHexString (c.hashCode()) + "]";
0:       try {
0:         dncprintln (header, "BEGIN TRACE_CONNECTS");
0:         dncprintln (header, "Successfully connected to server " + c.databaseMetaData_.getURL());
0:         dncprintln (header, "User: " + c.databaseMetaData_.getUserName());
0:         dncprintln (header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
0:         dncprintln (header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
0:         dncprintln (header, "Driver name: " + c.databaseMetaData_.getDriverName());
0:         dncprintln (header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
0:         dncprintln (header, "END TRACE_CONNECTS");
0:       }
0:       catch (java.sql.SQLException e) {
0:         dncprintln (header, "Encountered an SQL exception while trying to trace connection exit");
0:         dncprintln (header, "END TRACE_CONNECTS");
0:       }
0:     }
0:   }
0: 
0:   public void traceConnectsResetExit (org.apache.derby.client.am.Connection c)
0:   {
0:     if (traceSuspended()) return;
0:     synchronized (printWriter_) {
0:       String header = "[Connection@" + Integer.toHexString (c.hashCode()) + "]";
0:       try {
0:         dncprintln (header, "BEGIN TRACE_CONNECT_RESET");
0:         dncprintln (header, "Successfully reset connection to server " + c.databaseMetaData_.getURL());
0:         dncprintln (header, "User: " + c.databaseMetaData_.getUserName());
0:         dncprintln (header, "Database product name: " + c.databaseMetaData_.getDatabaseProductName());
0:         dncprintln (header, "Database product version: " + c.databaseMetaData_.getDatabaseProductVersion());
0:         dncprintln (header, "Driver name: " + c.databaseMetaData_.getDriverName());
0:         dncprintln (header, "Driver version: " + c.databaseMetaData_.getDriverVersion());
0:         dncprintln (header, "END TRACE_CONNECT_RESET");
0:       }
0:       catch (java.sql.SQLException e) {
0:         dncprintln (header, "Encountered an SQL exception while trying to trace connection reset exit");
0:         dncprintln (header, "END TRACE_CONNECT_RESET");
0:       }
0:     }
0:   }
0: 
0: 
0:   // properties.toString() will print out passwords,
0:   // so this method was written to escape the password property value.
0:   // printWriter_ synchronized by caller.
0:   private void writeProperties (java.util.Properties properties)
0:   {
0:     printWriter_.print ("{ ");
0:     for (java.util.Iterator i = properties.entrySet().iterator(); i.hasNext(); ) {
0:       java.util.Map.Entry e = (java.util.Map.Entry) (i.next());
0:       if ("password".equals(e.getKey())){
0:         printWriter_.print ("password=" + escapePassword((String)e.getValue()));
0:       }
0:       else
0:         printWriter_.print (e.getKey() + "=" + e.getValue());
0:       if (i.hasNext())
0:         printWriter_.print (", ");
0:     }
0:     printWriter_.println (" }");
0:     printWriter_.flush();
0:   }
0: 
0:   private String escapePassword(String pw) {
0:     StringBuffer sb = new StringBuffer (pw);
0:     for (int j = 0; j< pw.length(); j++) {
0:       sb.setCharAt(j,'*');
0:     }
0:     return sb.toString();
0:   }
0:   //-------------------------tracing driver configuration-----------------------
0: 
0:   private void traceDriverConfigurationJdbc2 ()
0:   {
0:     if (traceSuspended()) return;
0:     synchronized (printWriter_) {
0:       if (!driverConfigurationHasBeenWrittenToJdbc2Stream_) {
0:         writeDriverConfiguration();
0:         driverConfigurationHasBeenWrittenToJdbc2Stream_ = true;
0:       }
0:     }
0:   }
0: 
0:   private void traceDriverConfigurationJdbc1 ()
0:   {
0:     if (traceSuspended()) return;
0:     synchronized (printWriter_) {
0:       if (!driverConfigurationHasBeenWrittenToJdbc1Stream_) {
0:         writeDriverConfiguration();
0:         driverConfigurationHasBeenWrittenToJdbc1Stream_ = true;
0:       }
0:     }
0:   }
0: 
0:   public void writeDriverConfiguration()
0:   {
0:     org.apache.derby.client.am.Version.writeDriverConfiguration (printWriter_);
0:   }
0:   public static java.io.PrintWriter getPrintWriter (String fileName, boolean fileAppend) throws SqlException
0:   {
0:     try {
0:       java.io.PrintWriter printWriter = null;
0:       String fileCanonicalPath = new java.io.File (fileName).getCanonicalPath();
0:       printWriter =
0:         new java.io.PrintWriter (
0:           new java.io.BufferedOutputStream (
0:             new java.io.FileOutputStream (fileCanonicalPath, fileAppend), 4096), true);
0:       return printWriter;
0:     }
0:     catch (java.io.IOException e) {
0:       throw new SqlException (null, "Unable to open file " + fileName);
0:     }
0:   }
0: 
0: }
============================================================================