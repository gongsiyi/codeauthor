1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking2
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1:eac0369: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
1:eac0369: import org.apache.derby.impl.store.access.btree.OpenBTree;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:d7e478a: The btree locking policy which implements read committed isolation level.
1:d7e478a: 
1:d7e478a: It inherits all functionality from B2IRowLockingRR (repeatable read) except 
1:d7e478a: that it releases read locks after obtaining them.  It provides a single
1:d7e478a: implementation of unlockScanRecordAfterRead() which releases a read lock
1:d7e478a: after it has been locked and processed.
1:d7e478a: 
1:eac0369: **/
1:eac0369: 
1:eac0369: class B2IRowLocking2 extends B2IRowLockingRR implements BTreeLockingPolicy
1:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     B2IRowLocking2(
1:eac0369:     Transaction             rawtran,
1:eac0369:     int                     lock_level,
1:eac0369:     LockingPolicy           locking_policy,
1:eac0369:     ConglomerateController  base_cc,
1:eac0369:     OpenBTree               open_btree)
1:eac0369:     {
1:eac0369:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Release read lock on a row.
1:eac0369:      *
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public void unlockScanRecordAfterRead(
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 forUpdate)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(open_btree != null, "open_btree is null");
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(
1:eac0369:                 pos.current_lock_row_loc != null , 
1:eac0369:                 "pos.current_lock_row_loc is null");
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(
1:eac0369:                 !pos.current_lock_row_loc.isNull(), 
1:eac0369:                 "pos.current_lock_row_loc isNull()");
1:eac0369: 		}
1:eac0369: 
1:eac0369:         // always unlock in read committed, so pass false for qualified arg.
1:eac0369:         base_cc.unlockRowAfterRead(pos.current_lock_row_loc, forUpdate, false);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d7e478a
/////////////////////////////////////////////////////////////////////////
1: The btree locking policy which implements read committed isolation level.
1: 
1: It inherits all functionality from B2IRowLockingRR (repeatable read) except 
1: that it releases read locks after obtaining them.  It provides a single
1: implementation of unlockScanRecordAfterRead() which releases a read lock
1: after it has been locked and processed.
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IRowLocking2
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.impl.store.access.btree.BTree;
1: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
1: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
1: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.WaitError;
1: 
1: /**
1: 
1: **/
1: 
1: class B2IRowLocking2 extends B2IRowLockingRR implements BTreeLockingPolicy
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     B2IRowLocking2(
1:     Transaction             rawtran,
1:     int                     lock_level,
1:     LockingPolicy           locking_policy,
1:     ConglomerateController  base_cc,
1:     OpenBTree               open_btree)
1:     {
1:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**
1:      * Release read lock on a row.
1:      *
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1:      **/
1:     public void unlockScanRecordAfterRead(
1:     BTreeRowPosition        pos,
1:     boolean                 forUpdate)
1: 		throws StandardException
1:     {
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(open_btree != null, "open_btree is null");
1: 
0: 			SanityManager.ASSERT(pos.current_leaf != null , "leaf is null");
1: 
1: 			SanityManager.ASSERT(
1:                 pos.current_lock_row_loc != null , 
1:                 "pos.current_lock_row_loc is null");
1: 
1: 			SanityManager.ASSERT(
1:                 !pos.current_lock_row_loc.isNull(), 
1:                 "pos.current_lock_row_loc isNull()");
1: 		}
1: 
1:         // always unlock in read committed, so pass false for qualified arg.
1:         base_cc.unlockRowAfterRead(pos.current_lock_row_loc, forUpdate, false);
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.impl.store.access.btree.BTree;
0: import org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;
0: import org.apache.derby.impl.store.access.btree.BTreeRowPosition;
0: import org.apache.derby.impl.store.access.btree.ControlRow;
0: import org.apache.derby.impl.store.access.btree.LeafControlRow;
0: import org.apache.derby.impl.store.access.btree.OpenBTree;
0: import org.apache.derby.impl.store.access.btree.WaitError;
0: 
0: /**
0: 
0: **/
0: 
0: class B2IRowLocking2 extends B2IRowLockingRR implements BTreeLockingPolicy
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     B2IRowLocking2(
0:     Transaction             rawtran,
0:     int                     lock_level,
0:     LockingPolicy           locking_policy,
0:     ConglomerateController  base_cc,
0:     OpenBTree               open_btree)
0:     {
0:         super(rawtran, lock_level, locking_policy, base_cc, open_btree);
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**
0:      * Release read lock on a row.
0:      *
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0:      **/
0:     public void unlockScanRecordAfterRead(
0:     BTreeRowPosition        pos,
0:     boolean                 forUpdate)
0: 		throws StandardException
0:     {
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(open_btree != null, "open_btree is null");
0: 
0: 			SanityManager.ASSERT(pos.current_leaf != null , "leaf is null");
0: 
0: 			SanityManager.ASSERT(
0:                 pos.current_lock_row_loc != null , 
0:                 "pos.current_lock_row_loc is null");
0: 
0: 			SanityManager.ASSERT(
0:                 !pos.current_lock_row_loc.isNull(), 
0:                 "pos.current_lock_row_loc isNull()");
0: 		}
0: 
0:         // always unlock in read committed, so pass false for qualified arg.
0:         base_cc.unlockRowAfterRead(pos.current_lock_row_loc, forUpdate, false);
0:     }
0: }
============================================================================