1:6718a25: /*
5:6718a25: 
1:6718a25:    Derby - Class org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor
1:6718a25: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:6718a25: 
1:6718a25:       http://www.apache.org/licenses/LICENSE-2.0
1:6718a25: 
1:6718a25:    Unless required by applicable law or agreed to in writing, software
1:6718a25:    distributed under the License is distributed on an "AS IS" BASIS,
1:6718a25:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6718a25:    See the License for the specific language governing permissions and
1:6718a25:    limitations under the License.
1:6718a25: 
1:6718a25:  */
1:6718a25: 
1:6718a25: package	org.apache.derby.impl.sql.compile;
1:6718a25: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:6718a25: import org.apache.derby.iapi.sql.compile.Visitable; 
1:6718a25: import org.apache.derby.iapi.sql.compile.Visitor;
1:6718a25: import org.apache.derby.iapi.util.JBitSet;
1:6718a25: 
1:6718a25: /**
1:6718a25:  * Walk through a subtree and build a list of the assigned numbers for
1:6718a25:  * all tables that exist in that subtree.  We do this by looking for any
1:6718a25:  * column references in the subtree and, for each column reference, we
1:6718a25:  * walk down the ColumnReference-ResultColumn chain until we find the
1:6718a25:  * the bottom-most table number, which should correspond to a base
1:6718a25:  * table.
1:6718a25:  */
1:3bb140c: class BaseTableNumbersVisitor implements Visitor
1:6718a25: {
1:6718a25: 	// JBitSet to hold the table numbers that we find.
1:6718a25: 	private JBitSet tableMap;
1:6718a25: 
1:20bd3c0: 	/* Column number of the ColumnReference or ResultColumn
1:20bd3c0: 	 * for which we most recently found a base table number. 
1:20bd3c0: 	 * In cases where this visitor is only expected to find
1:20bd3c0: 	 * a single base table number, this field is useful for
1:20bd3c0: 	 * determining what the column position w.r.t. the found
1:20bd3c0: 	 * base table was.
1:20bd3c0: 	 */
1:20bd3c0: 	private int columnNumber;
1:20bd3c0: 
1:6718a25: 	/**
1:6718a25: 	 * Constructor: takes a JBitSet to use as the holder for any base table
1:6718a25: 	 * numbers found while walking the subtree.
1:6718a25: 	 *
1:6718a25: 	 * @param tableMap JBitSet into which we put the table numbers we find.
1:6718a25: 	 */
1:3bb140c:     BaseTableNumbersVisitor(JBitSet tableMap)
1:6718a25: 	{
1:6718a25: 		this.tableMap = tableMap;
1:20bd3c0: 		columnNumber = -1;
1:6718a25: 	}
1:6718a25: 
1:20bd3c0: 	/**
1:6718a25: 	 * Set a new JBitSet to serve as the holder for base table numbers
1:6718a25: 	 * we find while walking.
1:6718a25: 	 *
1:6718a25: 	 * @param tableMap JBitSet into which we put the table numbers we find.
1:6718a25: 	 */
1:6718a25: 	protected void setTableMap(JBitSet tableMap)
1:6718a25: 	{
1:6718a25: 		this.tableMap = tableMap;
1:6718a25: 	}
1:6718a25: 
1:6718a25: 	/**
1:20bd3c0: 	 * Reset the state of this visitor.
1:20bd3c0: 	 */
1:20bd3c0: 	protected void reset()
1:20bd3c0: 	{
1:20bd3c0: 		tableMap.clearAll();
1:20bd3c0: 		columnNumber = -1;
1:20bd3c0: 	}
1:20bd3c0: 
1:20bd3c0: 	/**
1:20bd3c0: 	 * Retrieve the the position of the ColumnReference or
1:20bd3c0: 	 * ResultColumn for which we most recently found a base
1:20bd3c0: 	 * table number.
1:20bd3c0: 	 */
1:20bd3c0: 	protected int getColumnNumber()
1:20bd3c0: 	{
1:20bd3c0: 		return columnNumber;
1:20bd3c0: 	}
1:20bd3c0: 
1:6718a25: 	////////////////////////////////////////////////
1:6718a25: 	//
1:6718a25: 	// VISITOR INTERFACE
1:6718a25: 	//
1:6718a25: 	////////////////////////////////////////////////
1:6718a25: 
1:6718a25: 	/**
1:6718a25: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#visit
1:6718a25: 	 */
1:6718a25: 	public Visitable visit(Visitable node)
1:6718a25: 		throws StandardException
1:6718a25: 	{
1:6718a25: 		ResultColumn rc = null;
1:6718a25: 		if (node instanceof ColumnReference)
1:6718a25: 		{
1:6718a25: 			// Start by seeing if this column reference is the
1:6718a25: 			// bottom-most one, meaning that there are no column
1:6718a25: 			// references beneath this one.
1:6718a25: 			rc = ((ColumnReference)node).getSource();
1:6718a25: 
1:6718a25: 			if (rc == null) {
1:6718a25: 			// this can happen if column reference is pointing to a column
1:6718a25: 			// that is not from a base table.  For example, if we have a
1:6718a25: 			// VALUES clause like
1:6718a25: 			//
1:6718a25: 			//    (values (1, 2), (3, 4)) V1 (i, j)
1:6718a25: 			//
1:6718a25: 			// and then a column reference to VI.i, the column reference
1:6718a25: 			// won't have a source.
1:6718a25: 				return node;
1:6718a25: 			}
1:6718a25: 		}
1:6718a25: 		else if (node instanceof ResultColumn)
1:20bd3c0: 			rc = (ResultColumn)node;
1:6718a25: 		else if (node instanceof SelectNode)
1:6718a25: 		{
1:6718a25: 			// If the node is a SelectNode we just need to look at its
1:6718a25: 			// FROM list.
1:6718a25: 			((SelectNode)node).getFromList().accept(this);
1:6718a25: 		}
1:6718a25: 		else if (node instanceof FromBaseTable) {
1:6718a25: 		// just grab the FBT's table number.
1:6718a25: 			tableMap.set(((FromBaseTable)node).getTableNumber());
1:6718a25: 		}
1:6718a25: 
1:6718a25: 		if (rc != null)
1:6718a25: 		{
1:6718a25: 			// This next call will walk through the ResultColumn tree
1:6718a25: 			// until it finds another ColumnReference, and then will
1:6718a25: 			// return the table number for that column reference.  We
1:6718a25: 			// can't stop there, though, because the column reference
1:6718a25: 			// that we found might in turn have column references beneath
1:6718a25: 			// it, and we only want the table number of the bottom-most
1:6718a25: 			// column reference.  So once we find the column reference,
1:6718a25: 			// we have to recurse.
1:6718a25: 
1:6718a25: 			int baseTableNumber = rc.getTableNumber();
1:6718a25: 			if (baseTableNumber >= 0) {
1:6718a25: 			// Move down to the column reference that has the table
1:6718a25: 			// number that we just found.  There may be one or more
1:6718a25: 			// VirtualColumnNode-to-ResultColumnNode links between
1:6718a25: 			// the current ResultColumn and the column reference we're
1:6718a25: 			// looking for, so we have to walk past those until we find
1:6718a25: 			// the desired column reference.
1:6718a25: 
1:6718a25: 				ValueNode rcExpr = rc.getExpression();
1:6718a25: 				while (rcExpr instanceof VirtualColumnNode) {
1:6718a25: 					rc = ((VirtualColumnNode)rcExpr).getSourceColumn();
1:6718a25: 					rcExpr = rc.getExpression();
1:6718a25: 				}
1:6718a25: 
1:6718a25: 				if (rcExpr instanceof ColumnReference)
1:6718a25: 				// we found our column reference; recurse using that.
1:e07631a: 					rcExpr.accept(this);
1:e07631a: 				else {
1:6718a25: 				// Else we must have found the table number someplace
1:6718a25: 				// other than within a ColumnReference (ex. we may
1:6718a25: 				// have pulled it from a VirtualColumnNode's source
1:6718a25: 				// table); so just set the number.
1:e07631a: 					tableMap.set(baseTableNumber);
1:20bd3c0: 					columnNumber = rc.getColumnPosition();
1:e07631a: 				}
1:6718a25: 			}
1:6718a25: 			else if (node instanceof ColumnReference) {
1:6718a25: 			// we couldn't find any other table numbers beneath the
1:6718a25: 			// ColumnReference, so just use the table number for
1:6718a25: 			// that reference.
1:20bd3c0: 				ColumnReference cr = (ColumnReference)node;
1:20bd3c0: 				cr.getTablesReferenced(tableMap);
1:20bd3c0: 				columnNumber = cr.getColumnNumber();
1:6718a25: 			}
1:6718a25: 		}
1:6718a25: 
1:6718a25: 		return node;
1:6718a25: 	}
1:6718a25: 
1:6718a25: 	/**
1:6718a25: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#skipChildren
1:6718a25: 	 */
1:6718a25: 	public boolean skipChildren(Visitable node)
1:6718a25: 	{
1:6718a25: 		/* A SelectNode's children can include a where clause in the
1:6718a25: 		 * form of either a PredicateList or an AndNode.  In either
1:6718a25: 		 * case we don't want to descend into the where clause because
1:6718a25: 		 * it's possible that it references a base table that is not
1:6718a25: 		 * in the subtree we're walking.  So we skip the children of
1:6718a25: 		 * a SelectNode.  Similarly, any other PredicateList may contain
1:6718a25: 		 * references to base tables that we don't want to include, so
1:6718a25: 		 * we skip a PredicateList's children as well.  Note, though,
1:6718a25: 		 * that if this visitor is specifically targeted for a particular
1:6718a25: 		 * Predicate or AndNode (i.e. a call is directly made to
1:6718a25: 		 * Predicate.accept() or AndNode.accept()) then we _will_ descend
1:6718a25: 		 * into that predicate's operands and retrieve referenced base
1:6718a25: 		 * table numbers.
1:6718a25: 		 *
1:6718a25: 		 * And finally, if we visit a FromBaseTable we can just grab
1:6718a25: 		 * it's number and that's it--there's no need to go any further.
1:6718a25: 		 */
1:6718a25: 		return (node instanceof FromBaseTable) ||
1:6718a25: 			(node instanceof SelectNode) ||
1:6718a25: 			(node instanceof PredicateList);
1:6718a25: 	}
1:6718a25: 
1:6718a25: 	/**
1:6718a25: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#stopTraversal
1:6718a25: 	 */
1:6718a25: 	public boolean stopTraversal()
1:6718a25: 	{
1:6718a25: 		return false;
1:6718a25: 	}
1:6718a25: 
1:dd2f5a8: 	/**
1:dd2f5a8: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#visitChildrenFirst
1:dd2f5a8: 	 */
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:dd2f5a8: 
1:6718a25: }	
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1: class BaseTableNumbersVisitor implements Visitor
/////////////////////////////////////////////////////////////////////////
1:     BaseTableNumbersVisitor(JBitSet tableMap)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#visitChildrenFirst
1: 	 */
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
1: 
author:Army
-------------------------------------------------------------------------------
commit:20bd3c0
/////////////////////////////////////////////////////////////////////////
1: 	/* Column number of the ColumnReference or ResultColumn
1: 	 * for which we most recently found a base table number. 
1: 	 * In cases where this visitor is only expected to find
1: 	 * a single base table number, this field is useful for
1: 	 * determining what the column position w.r.t. the found
1: 	 * base table was.
1: 	 */
1: 	private int columnNumber;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		columnNumber = -1;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Reset the state of this visitor.
1: 	 */
1: 	protected void reset()
1: 	{
1: 		tableMap.clearAll();
1: 		columnNumber = -1;
1: 	}
1: 
1: 	/**
1: 	 * Retrieve the the position of the ColumnReference or
1: 	 * ResultColumn for which we most recently found a base
1: 	 * table number.
1: 	 */
1: 	protected int getColumnNumber()
1: 	{
1: 		return columnNumber;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 			rc = (ResultColumn)node;
/////////////////////////////////////////////////////////////////////////
1: 					columnNumber = rc.getColumnPosition();
1: 				ColumnReference cr = (ColumnReference)node;
1: 				cr.getTablesReferenced(tableMap);
1: 				columnNumber = cr.getColumnNumber();
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:e07631a
/////////////////////////////////////////////////////////////////////////
1: 					rcExpr.accept(this);
1: 				else {
1: 					tableMap.set(baseTableNumber);
1: 				}
commit:6718a25
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Visitable; 
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * Walk through a subtree and build a list of the assigned numbers for
1:  * all tables that exist in that subtree.  We do this by looking for any
1:  * column references in the subtree and, for each column reference, we
1:  * walk down the ColumnReference-ResultColumn chain until we find the
1:  * the bottom-most table number, which should correspond to a base
1:  * table.
1:  */
0: public class BaseTableNumbersVisitor implements Visitor
1: {
1: 	// JBitSet to hold the table numbers that we find.
1: 	private JBitSet tableMap;
1: 
1: 	/**
1: 	 * Constructor: takes a JBitSet to use as the holder for any base table
1: 	 * numbers found while walking the subtree.
1: 	 *
1: 	 * @param tableMap JBitSet into which we put the table numbers we find.
1: 	 */
0: 	public BaseTableNumbersVisitor(JBitSet tableMap)
1: 	{
1: 		this.tableMap = tableMap;
1: 	}
1: 
1: 	/**
1: 	 * Set a new JBitSet to serve as the holder for base table numbers
1: 	 * we find while walking.
1: 	 *
1: 	 * @param tableMap JBitSet into which we put the table numbers we find.
1: 	 */
1: 	protected void setTableMap(JBitSet tableMap)
1: 	{
1: 		this.tableMap = tableMap;
1: 	}
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#visit
1: 	 */
1: 	public Visitable visit(Visitable node)
1: 		throws StandardException
1: 	{
1: 		ResultColumn rc = null;
1: 		if (node instanceof ColumnReference)
1: 		{
1: 			// Start by seeing if this column reference is the
1: 			// bottom-most one, meaning that there are no column
1: 			// references beneath this one.
1: 			rc = ((ColumnReference)node).getSource();
1: 
1: 			if (rc == null) {
1: 			// this can happen if column reference is pointing to a column
1: 			// that is not from a base table.  For example, if we have a
1: 			// VALUES clause like
1: 			//
1: 			//    (values (1, 2), (3, 4)) V1 (i, j)
1: 			//
1: 			// and then a column reference to VI.i, the column reference
1: 			// won't have a source.
1: 				return node;
1: 			}
1: 		}
1: 		else if (node instanceof ResultColumn)
0: 			rc = (ResultColumn)rc;
1: 		else if (node instanceof SelectNode)
1: 		{
1: 			// If the node is a SelectNode we just need to look at its
1: 			// FROM list.
1: 			((SelectNode)node).getFromList().accept(this);
1: 		}
1: 		else if (node instanceof FromBaseTable) {
1: 		// just grab the FBT's table number.
1: 			tableMap.set(((FromBaseTable)node).getTableNumber());
1: 		}
1: 
1: 		if (rc != null)
1: 		{
1: 			// This next call will walk through the ResultColumn tree
1: 			// until it finds another ColumnReference, and then will
1: 			// return the table number for that column reference.  We
1: 			// can't stop there, though, because the column reference
1: 			// that we found might in turn have column references beneath
1: 			// it, and we only want the table number of the bottom-most
1: 			// column reference.  So once we find the column reference,
1: 			// we have to recurse.
1: 
1: 			int baseTableNumber = rc.getTableNumber();
1: 			if (baseTableNumber >= 0) {
1: 			// Move down to the column reference that has the table
1: 			// number that we just found.  There may be one or more
1: 			// VirtualColumnNode-to-ResultColumnNode links between
1: 			// the current ResultColumn and the column reference we're
1: 			// looking for, so we have to walk past those until we find
1: 			// the desired column reference.
1: 
1: 				ValueNode rcExpr = rc.getExpression();
1: 				while (rcExpr instanceof VirtualColumnNode) {
1: 					rc = ((VirtualColumnNode)rcExpr).getSourceColumn();
1: 					rcExpr = rc.getExpression();
1: 				}
1: 
1: 				if (rcExpr instanceof ColumnReference)
1: 				// we found our column reference; recurse using that.
0: 					return rcExpr.accept(this);
1: 
1: 				// Else we must have found the table number someplace
1: 				// other than within a ColumnReference (ex. we may
1: 				// have pulled it from a VirtualColumnNode's source
1: 				// table); so just set the number.
0: 				tableMap.set(baseTableNumber);
1: 
1: 			}
1: 			else if (node instanceof ColumnReference) {
1: 			// we couldn't find any other table numbers beneath the
1: 			// ColumnReference, so just use the table number for
1: 			// that reference.
0: 				((ColumnReference)node).getTablesReferenced(tableMap);
1: 			}
1: 		}
1: 
1: 		return node;
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#skipChildren
1: 	 */
1: 	public boolean skipChildren(Visitable node)
1: 	{
1: 		/* A SelectNode's children can include a where clause in the
1: 		 * form of either a PredicateList or an AndNode.  In either
1: 		 * case we don't want to descend into the where clause because
1: 		 * it's possible that it references a base table that is not
1: 		 * in the subtree we're walking.  So we skip the children of
1: 		 * a SelectNode.  Similarly, any other PredicateList may contain
1: 		 * references to base tables that we don't want to include, so
1: 		 * we skip a PredicateList's children as well.  Note, though,
1: 		 * that if this visitor is specifically targeted for a particular
1: 		 * Predicate or AndNode (i.e. a call is directly made to
1: 		 * Predicate.accept() or AndNode.accept()) then we _will_ descend
1: 		 * into that predicate's operands and retrieve referenced base
1: 		 * table numbers.
1: 		 *
1: 		 * And finally, if we visit a FromBaseTable we can just grab
1: 		 * it's number and that's it--there's no need to go any further.
1: 		 */
1: 		return (node instanceof FromBaseTable) ||
1: 			(node instanceof SelectNode) ||
1: 			(node instanceof PredicateList);
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.compile.Visitor#stopTraversal
1: 	 */
1: 	public boolean stopTraversal()
1: 	{
1: 		return false;
1: 	}
1: 
1: }	
============================================================================