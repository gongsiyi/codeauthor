1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.BooleanTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class implements TypeCompiler for the SQL BOOLEAN datatype.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:4469400: public class BooleanTypeCompiler extends BaseTypeCompiler
3:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Tell whether this type (boolean) can be converted to the given type.
1:eac0369: 	 *
1:eac0369: 	 * @see TypeCompiler#convertible
1:eac0369: 	 */
1:eac0369: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1:eac0369: 	{
1:07d1108:         return (otherType.isStringTypeId() || otherType.isBooleanTypeId());
3:eac0369: 	}
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * Tell whether this type (boolean) is compatible with the given type.
1:eac0369:          *
1:eac0369:          * @param otherType     The TypeId of the other type.
1:eac0369:          */
1:eac0369: 	public boolean compatible(TypeId otherType)
1:eac0369: 	{
1:eac0369: 		return convertible(otherType,false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#storable */
1:eac0369: 	public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369: 	{
1:1b3f93b: 		/* Are the types the same or is other type a string */
1:1b3f93b: 		if ( otherType.isBooleanTypeId() || otherType.isStringTypeId() )
1:eac0369: 		{
2:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the other type is user-defined, use the java types to determine
1:eac0369: 		** assignability.
1:eac0369: 		*/
1:eac0369: 		return userTypeStorable(getTypeId(), otherType, cf);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#interfaceName */
1:eac0369: 	public String interfaceName()
1:eac0369: 	{
1:eac0369: 		return ClassName.BooleanDataValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String getCorrespondingPrimitiveTypeName()
1:eac0369: 	{
1:eac0369: 		/* Only numerics and booleans get mapped to Java primitives */
1:eac0369: 		return "boolean";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the method name for getting out the corresponding primitive
1:eac0369: 	 * Java type.
1:eac0369: 	 *
1:eac0369: 	 * @return String		The method call name for getting the
1:eac0369: 	 *						corresponding primitive Java type.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String getPrimitiveMethodName()
1:eac0369: 	{
1:eac0369: 		return "getBoolean";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCastToCharWidth
1:eac0369: 	 */
1:eac0369: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1:eac0369: 	{
1:eac0369: 		return TypeCompiler.BOOLEAN_MAXWIDTH_AS_CHAR;
1:eac0369: 	}
1:eac0369: 
1:44fad02: 	String nullMethodName()
1:eac0369: 	{
1:eac0369: 		return "getNullBoolean";
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class BooleanTypeCompiler extends BaseTypeCompiler
commit:1b3f93b
/////////////////////////////////////////////////////////////////////////
1: 		/* Are the types the same or is other type a string */
1: 		if ( otherType.isBooleanTypeId() || otherType.isStringTypeId() )
commit:07d1108
/////////////////////////////////////////////////////////////////////////
1:         return (otherType.isStringTypeId() || otherType.isBooleanTypeId());
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: class BooleanTypeCompiler extends BaseTypeCompiler
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: 	String nullMethodName()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.BooleanTypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
0: import org.apache.derby.catalog.types.BaseTypeIdImpl;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import java.sql.Types;
1: 
1: /**
1:  * This class implements TypeCompiler for the SQL BOOLEAN datatype.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class BooleanTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
0: 	 * Tell whether this type (boolean) can be compared to the given type.
1: 	 *
0: 	 * @param otherType	The TypeId of the other type.
1: 	 */
1: 
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
1: 	{
0: 		TypeId thisTypeId = getTypeId();
0: 		TypeCompiler otherTypeCompiler = getTypeCompiler(otherType);
1: 
0: 		/* Only allow comparison of Boolean with Boolean or string types */
0: 		return otherType.getSQLTypeName().equals(thisTypeId.getSQLTypeName()) ||
0: 				otherType.isStringTypeId() ||
0: 				otherType.isNumericTypeId() ||
0: 				(otherType.userType() &&
0: 					otherTypeCompiler.comparable(thisTypeId, forEquals, cf));
1: 	}
1: 
1: 	/**
1: 	 * Tell whether this type (boolean) can be converted to the given type.
1: 	 *
1: 	 * @see TypeCompiler#convertible
1: 	 */
1: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1: 	{
0: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
1: 
0: 		if ((otherJDBCTypeId == Types.DATE) ||
0: 			(otherJDBCTypeId == Types.TIME) ||
0: 			(otherJDBCTypeId == Types.TIMESTAMP))
1: 		{
0: 			return false;
1: 		}
1: 
1: 		return true;
1: 	}
1: 
1:         /**
1:          * Tell whether this type (boolean) is compatible with the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 	public boolean compatible(TypeId otherType)
1: 	{
1: 		return convertible(otherType,false);
1: 	}
1: 
1: 	/** @see TypeCompiler#storable */
1: 	public boolean storable(TypeId otherType, ClassFactory cf)
1: 	{
0: 		/* Are the types the same or is other type a string or number type? */
0: 		if (otherType.isBooleanTypeId() ||
0: 				otherType.isStringTypeId() ||
0: 				otherType.isNumericTypeId())
1: 		{
1: 			return true;
1: 		}
1: 
1: 		/*
1: 		** If the other type is user-defined, use the java types to determine
1: 		** assignability.
1: 		*/
1: 		return userTypeStorable(getTypeId(), otherType, cf);
1: 	}
1: 
1: 	/** @see TypeCompiler#interfaceName */
1: 	public String interfaceName()
1: 	{
1: 		return ClassName.BooleanDataValue;
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1: 	 */
1: 
1: 	public String getCorrespondingPrimitiveTypeName()
1: 	{
1: 		/* Only numerics and booleans get mapped to Java primitives */
1: 		return "boolean";
1: 	}
1: 
1: 	/**
1: 	 * Get the method name for getting out the corresponding primitive
1: 	 * Java type.
1: 	 *
1: 	 * @return String		The method call name for getting the
1: 	 *						corresponding primitive Java type.
1: 	 */
1: 	public String getPrimitiveMethodName()
1: 	{
1: 		return "getBoolean";
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCastToCharWidth
1: 	 */
1: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1: 	{
1: 		return TypeCompiler.BOOLEAN_MAXWIDTH_AS_CHAR;
1: 	}
1: 
0: 	protected String nullMethodName()
1: 	{
1: 		return "getNullBoolean";
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.catalog.types.BaseTypeIdImpl;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: 
0: /**
0:  * This class implements TypeCompiler for the SQL BOOLEAN datatype.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class BooleanTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * Tell whether this type (boolean) can be compared to the given type.
0: 	 *
0: 	 * @param otherType	The TypeId of the other type.
0: 	 */
0: 
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
0: 	{
0: 		TypeId thisTypeId = getTypeId();
0: 		TypeCompiler otherTypeCompiler = getTypeCompiler(otherType);
0: 
0: 		/* Only allow comparison of Boolean with Boolean or string types */
0: 		return otherType.getSQLTypeName().equals(thisTypeId.getSQLTypeName()) ||
0: 				otherType.isStringTypeId() ||
0: 				otherType.isNumericTypeId() ||
0: 				(otherType.userType() &&
0: 					otherTypeCompiler.comparable(thisTypeId, forEquals, cf));
0: 	}
0: 
0: 	/**
0: 	 * Tell whether this type (boolean) can be converted to the given type.
0: 	 *
0: 	 * @see TypeCompiler#convertible
0: 	 */
0: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
0: 	{
0: 		int otherJDBCTypeId = otherType.getJDBCTypeId();
0: 
0: 		if ((otherJDBCTypeId == Types.DATE) ||
0: 			(otherJDBCTypeId == Types.TIME) ||
0: 			(otherJDBCTypeId == Types.TIMESTAMP))
0: 		{
0: 			return false;
0: 		}
0: 
0: 		return true;
0: 	}
0: 
0:         /**
0:          * Tell whether this type (boolean) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		return convertible(otherType,false);
0: 	}
0: 
0: 	/** @see TypeCompiler#storable */
0: 	public boolean storable(TypeId otherType, ClassFactory cf)
0: 	{
0: 		/* Are the types the same or is other type a string or number type? */
0: 		if (otherType.isBooleanTypeId() ||
0: 				otherType.isStringTypeId() ||
0: 				otherType.isNumericTypeId())
0: 		{
0: 			return true;
0: 		}
0: 
0: 		/*
0: 		** If the other type is user-defined, use the java types to determine
0: 		** assignability.
0: 		*/
0: 		return userTypeStorable(getTypeId(), otherType, cf);
0: 	}
0: 
0: 	/** @see TypeCompiler#interfaceName */
0: 	public String interfaceName()
0: 	{
0: 		return ClassName.BooleanDataValue;
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0: 	 */
0: 
0: 	public String getCorrespondingPrimitiveTypeName()
0: 	{
0: 		/* Only numerics and booleans get mapped to Java primitives */
0: 		return "boolean";
0: 	}
0: 
0: 	/**
0: 	 * Get the method name for getting out the corresponding primitive
0: 	 * Java type.
0: 	 *
0: 	 * @return String		The method call name for getting the
0: 	 *						corresponding primitive Java type.
0: 	 */
0: 	public String getPrimitiveMethodName()
0: 	{
0: 		return "getBoolean";
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCastToCharWidth
0: 	 */
0: 	public int getCastToCharWidth(DataTypeDescriptor dts)
0: 	{
0: 		return TypeCompiler.BOOLEAN_MAXWIDTH_AS_CHAR;
0: 	}
0: 
0: 	protected String nullMethodName()
0: 	{
0: 		return "getNullBoolean";
0: 	}
0: }
============================================================================