1:33776ff: /*
14:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.Types
1:506f4c8: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import java.sql.Types;
1:90731d5: import org.apache.derby.iapi.reference.DRDAConstants;
1:90731d5: 
1:33776ff: // This enumeration of types represents the typing scheme used by our jdbc driver.
1:33776ff: // Once this is finished, we need to review our switches to make sure they are exhaustive
1:33776ff: 
1:69e3d06: public class ClientTypes {
1:70f7692:     // -------------------------------- Driver types -------------------------------------------------
1:33776ff: 
1:0326967:     final static int BIT        =  Types.BIT;          // -7;
1:33776ff: 
2:70f7692:     // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
1:0326967:     //final static int TINYINT   = Types.TINYINT;       // -6;
1:90731d5: 
1:0326967:     final static int BOOLEAN = Types.BOOLEAN;       // 16;
1:33776ff: 
1:0326967:     final static int SMALLINT = Types.SMALLINT;      // 5;
1:33776ff: 
1:0326967:     final static int INTEGER = Types.INTEGER;       // 4;
1:33776ff: 
1:0326967:     final static int BIGINT = Types.BIGINT;        // -5;
1:33776ff: 
1:70f7692:     // We type using DOUBLE
1:0326967:     //final static int FLOAT     = Types.FLOAT;         // 6;
1:33776ff: 
1:0326967:     final static int REAL = Types.REAL;          // 7;
1:33776ff: 
1:0326967:     final static int DOUBLE = Types.DOUBLE;        // 8;
1:33776ff: 
1:70f7692:     // We type using DECIMAL
1:0326967:     //final static int NUMERIC   = Types.NUMERIC;       // 2;
1:70f7692: 
1:0326967:     final static int DECIMAL = Types.DECIMAL;       // 3;
1:70f7692: 
1:69e3d06:     public final static int CHAR = Types.CHAR;          // 1;
1:70f7692: 
1:69e3d06:     public final static int VARCHAR = Types.VARCHAR;       // 12;
1:70f7692: 
1:69e3d06:     public final static int LONGVARCHAR = Types.LONGVARCHAR;   // -1;
1:70f7692: 
1:0326967:     final static int DATE = Types.DATE;          // 91;
1:70f7692: 
1:0326967:     final static int TIME = Types.TIME;          // 92;
1:33776ff: 
1:0326967:     final static int TIMESTAMP = Types.TIMESTAMP;     // 93;
1:33776ff: 
1:69e3d06:     public final static int BINARY = Types.BINARY;        // -2;
1:33776ff: 
1:69e3d06:     public final static int VARBINARY = Types.VARBINARY;     // -3;
1:33776ff: 
1:69e3d06:     public final static int LONGVARBINARY = Types.LONGVARBINARY; // -4;
1:33776ff: 
1:69e3d06:     public final static int BLOB = Types.BLOB;          // 2004;
1:33776ff: 
1:69e3d06:     public final static int CLOB = Types.CLOB;          // 2005;
1:33776ff: 
1:69e3d06:     public final static int JAVA_OBJECT = Types.JAVA_OBJECT;          // 2000;
1:33776ff: 
1:70f7692:     // hide the default constructor
1:69e3d06:     private ClientTypes() {
1:0326967:     }
1:3d650b1:     
1:0326967:     static String getTypeString(int type)
1:3d650b1:     {
1:3d650b1:         switch (type )
1:3d650b1:         {
1:3d650b1:             case BIGINT:        return "BIGINT";
1:3d650b1:             case BINARY:        return "BINARY";
1:3d650b1:             case BLOB:          return "BLOB";
1:a220692:             case BIT:
1:3d650b1:             case BOOLEAN:       return "BOOLEAN";
1:3d650b1:             case CHAR:          return "CHAR";
1:3d650b1:             case CLOB:          return "CLOB";
1:3d650b1:             case DATE:          return "DATE";
1:3d650b1:             case DECIMAL:       return "DECIMAL";
1:3d650b1:             case DOUBLE:        return "DOUBLE";
1:3d650b1:             case INTEGER:       return "INTEGER";
1:3d650b1:             case LONGVARBINARY: return "LONGVARBINARY";
1:3d650b1:             case LONGVARCHAR:   return "LONGVARCHAR";
1:3d650b1:             case REAL:          return "REAL";
1:3d650b1:             case SMALLINT:      return "SMALLINT";
1:3d650b1:             case TIME:          return "TIME";
1:3d650b1:             case TIMESTAMP:     return "TIMESTAMP";
1:3d650b1:             case VARBINARY:     return "VARBINARY";
1:3d650b1:             case VARCHAR:       return "VARCHAR";
1:054fa3a:             // Types we don't support:
1:69e3d06:             case Types.ARRAY: return "ARRAY";
1:69e3d06:             case Types.DATALINK: return "DATALINK";
1:69e3d06:             case Types.REF: return "REF";
1:e33b8d8:             case Types.ROWID: return "ROWID";
1:e33b8d8:             case Types.SQLXML: return "SQLXML";
1:69e3d06:             case Types.STRUCT: return "STRUCT";
1:054fa3a:             // Unknown type:
1:3d650b1:             default:            return "<UNKNOWN>";
1:90731d5:         }
1:3d650b1:     }
1:70f7692: 
1:70f7692:     static public int mapDERBYTypeToDriverType(boolean isDescribed, int sqlType, long length, int ccsid) {
1:70f7692:         switch (Utils.getNonNullableSqlType(sqlType)) { // mask the isNullable bit
1:eff3919:         case DRDAConstants.DB2_SQLTYPE_BOOLEAN:
1:eff3919:             return BOOLEAN;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_SMALL:
1:70f7692:             return SMALLINT;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_INTEGER:
1:70f7692:             return INTEGER;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_BIGINT:
1:70f7692:             return BIGINT;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_FLOAT:
1:70f7692:             if (length == 16)                  // can map to either NUMERIC or DECIMAL
1:70f7692:             {
1:70f7692:                 return DECIMAL;
1:70f7692:             } else if (length == 8)              // can map to either DOUBLE or FLOAT
1:70f7692:             {
1:70f7692:                 return DOUBLE;
1:70f7692:             } else if (length == 4) {
1:70f7692:                 return REAL;
1:70f7692:             } else {
1:70f7692:                 return 0;
1:3d650b1:             }
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_DECIMAL:            // can map to either NUMERIC or DECIMAL
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_NUMERIC:            // can map to either NUMERIC or DECIMAL
1:70f7692:             return DECIMAL;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_CHAR:    // mixed and single byte
1:70f7692:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:70f7692:                 return BINARY;
1:70f7692:             } else {
1:70f7692:                 return CHAR;
1:70f7692:             }
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_CSTR:    // null terminated SBCS/Mixed
1:70f7692:             return CHAR;
1:70f7692:             // use ccsid to distinguish between BINARY and CHAR, VARBINARY and VARCHAR, LONG...
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_VARCHAR:   // variable character SBCS/Mixed
1:70f7692:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:70f7692:                 return VARBINARY;
1:70f7692:             } else {
1:70f7692:                 return VARCHAR;
1:70f7692:             }
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_LONG:      // long varchar SBCS/Mixed
1:70f7692:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:70f7692:                 return LONGVARBINARY;
1:70f7692:             } else {
1:70f7692:                 return LONGVARCHAR;
1:70f7692:             }
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_DATE:
1:70f7692:             return DATE;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_TIME:
1:70f7692:             return TIME;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_TIMESTAMP:
1:70f7692:             return TIMESTAMP;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_CLOB:    // large object character SBCS/Mixed
1:69e3d06:             return ClientTypes.CLOB;
1:90731d5:         case DRDAConstants.DB2_SQLTYPE_BLOB:    // large object bytes
1:69e3d06:             return Types.BLOB;
1:506f4c8:         case DRDAConstants.DB2_SQLTYPE_FAKE_UDT:    // user defined types
1:69e3d06:             return Types.JAVA_OBJECT;
1:70f7692:         default:
1:70f7692:             return 0;
1:70f7692:         }
1:70f7692:     }
1:70f7692: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             case Types.ROWID: return "ROWID";
1:             case Types.SQLXML: return "SQLXML";
commit:7f6e8aa
/////////////////////////////////////////////////////////////////////////
0:     //public final static int TINYINT   = java.sql.Types.TINYINT;       // -6;
/////////////////////////////////////////////////////////////////////////
0:     //public final static int NUMERIC   = java.sql.Types.NUMERIC;       // 2;
commit:a220692
/////////////////////////////////////////////////////////////////////////
0:     public final static int BIT        =  java.sql.Types.BIT;          // -7;
/////////////////////////////////////////////////////////////////////////
1:             case BIT:
commit:054fa3a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC40Translation;
/////////////////////////////////////////////////////////////////////////
1:             // Types we don't support:
0:             case java.sql.Types.ARRAY: return "ARRAY";
0:             case java.sql.Types.DATALINK: return "DATALINK";
0:             case JDBC40Translation.NCHAR: return "NATIONAL CHAR";
0:             case JDBC40Translation.NCLOB: return "NCLOB";
0:             case JDBC40Translation.NVARCHAR: return "NATIONAL CHAR VARYING";
0:             case JDBC40Translation.LONGNVARCHAR: return "LONG NVARCHAR";
0:             case java.sql.Types.REF: return "REF";
0:             case JDBC40Translation.ROWID: return "ROWID";
0:             case JDBC40Translation.SQLXML: return "SQLXML";
0:             case java.sql.Types.STRUCT: return "STRUCT";
1:             // Unknown type:
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     final static int BIT        =  Types.BIT;          // -7;
1:     //final static int TINYINT   = Types.TINYINT;       // -6;
1:     final static int BOOLEAN = Types.BOOLEAN;       // 16;
1:     final static int SMALLINT = Types.SMALLINT;      // 5;
1:     final static int INTEGER = Types.INTEGER;       // 4;
1:     final static int BIGINT = Types.BIGINT;        // -5;
1:     //final static int FLOAT     = Types.FLOAT;         // 6;
1:     final static int REAL = Types.REAL;          // 7;
1:     final static int DOUBLE = Types.DOUBLE;        // 8;
1:     //final static int NUMERIC   = Types.NUMERIC;       // 2;
1:     final static int DECIMAL = Types.DECIMAL;       // 3;
/////////////////////////////////////////////////////////////////////////
1:     final static int DATE = Types.DATE;          // 91;
1:     final static int TIME = Types.TIME;          // 92;
1:     final static int TIMESTAMP = Types.TIMESTAMP;     // 93;
/////////////////////////////////////////////////////////////////////////
1:     }
1:     static String getTypeString(int type)
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: public class ClientTypes {
0:     public final static int BIT        =  Types.BIT;          // -7;
0:     //public final static int TINYINT   = Types.TINYINT;       // -6;
0:     public final static int BOOLEAN = Types.BOOLEAN;       // 16;
0:     public final static int SMALLINT = Types.SMALLINT;      // 5;
0:     public final static int INTEGER = Types.INTEGER;       // 4;
0:     public final static int BIGINT = Types.BIGINT;        // -5;
0:     //public final static int FLOAT     = Types.FLOAT;         // 6;
0:     public final static int REAL = Types.REAL;          // 7;
0:     public final static int DOUBLE = Types.DOUBLE;        // 8;
0:     //public final static int NUMERIC   = Types.NUMERIC;       // 2;
0:     public final static int DECIMAL = Types.DECIMAL;       // 3;
1:     public final static int CHAR = Types.CHAR;          // 1;
1:     public final static int VARCHAR = Types.VARCHAR;       // 12;
1:     public final static int LONGVARCHAR = Types.LONGVARCHAR;   // -1;
0:     public final static int DATE = Types.DATE;          // 91;
0:     public final static int TIME = Types.TIME;          // 92;
0:     public final static int TIMESTAMP = Types.TIMESTAMP;     // 93;
1:     public final static int BINARY = Types.BINARY;        // -2;
1:     public final static int VARBINARY = Types.VARBINARY;     // -3;
1:     public final static int LONGVARBINARY = Types.LONGVARBINARY; // -4;
1:     public final static int BLOB = Types.BLOB;          // 2004;
1:     public final static int CLOB = Types.CLOB;          // 2005;
1:     public final static int JAVA_OBJECT = Types.JAVA_OBJECT;          // 2000;
1:     private ClientTypes() {
/////////////////////////////////////////////////////////////////////////
1:             case Types.ARRAY: return "ARRAY";
1:             case Types.DATALINK: return "DATALINK";
1:             case Types.REF: return "REF";
1:             case Types.STRUCT: return "STRUCT";
/////////////////////////////////////////////////////////////////////////
1:             return ClientTypes.CLOB;
1:             return Types.BLOB;
1:             return Types.JAVA_OBJECT;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
0:     //public final static int TINYINT     = java.sql.Types.TINYINT;       // -6;
/////////////////////////////////////////////////////////////////////////
0:     //public final static int FLOAT     = java.sql.Types.FLOAT;         // 6;
0:     //public final static int NUMERIC     = java.sql.Types.NUMERIC;       // 2;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eff3919
/////////////////////////////////////////////////////////////////////////
1:         case DRDAConstants.DB2_SQLTYPE_BOOLEAN:
1:             return BOOLEAN;
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
0:     public final static int JAVA_OBJECT = java.sql.Types.JAVA_OBJECT;          // 2000;
1: 
/////////////////////////////////////////////////////////////////////////
1:         case DRDAConstants.DB2_SQLTYPE_FAKE_UDT:    // user defined types
0:             return java.sql.Types.JAVA_OBJECT;
commit:93cfc7f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public final static int BOOLEAN = java.sql.Types.BOOLEAN;       // 16;
commit:90731d5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.DRDAConstants;
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public final static int BOOLEAN = JDBC30Translation.BOOLEAN;       // 16;
1: 
/////////////////////////////////////////////////////////////////////////
1:    }
0:         case DRDAConstants.DB2_SQLTYPE_BOOLEAN:
0:             return BOOLEAN;
1:         case DRDAConstants.DB2_SQLTYPE_SMALL:
1:         case DRDAConstants.DB2_SQLTYPE_INTEGER:
1:         case DRDAConstants.DB2_SQLTYPE_BIGINT:
1:         case DRDAConstants.DB2_SQLTYPE_FLOAT:
/////////////////////////////////////////////////////////////////////////
1:         case DRDAConstants.DB2_SQLTYPE_DECIMAL:            // can map to either NUMERIC or DECIMAL
1:         case DRDAConstants.DB2_SQLTYPE_NUMERIC:            // can map to either NUMERIC or DECIMAL
1:         case DRDAConstants.DB2_SQLTYPE_CHAR:    // mixed and single byte
1:         case DRDAConstants.DB2_SQLTYPE_CSTR:    // null terminated SBCS/Mixed
1:         case DRDAConstants.DB2_SQLTYPE_VARCHAR:   // variable character SBCS/Mixed
1:         case DRDAConstants.DB2_SQLTYPE_LONG:      // long varchar SBCS/Mixed
1:         case DRDAConstants.DB2_SQLTYPE_DATE:
1:         case DRDAConstants.DB2_SQLTYPE_TIME:
1:         case DRDAConstants.DB2_SQLTYPE_TIMESTAMP:
1:         case DRDAConstants.DB2_SQLTYPE_CLOB:    // large object character SBCS/Mixed
1:         case DRDAConstants.DB2_SQLTYPE_BLOB:    // large object bytes
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:111785f
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:3d650b1
/////////////////////////////////////////////////////////////////////////
1:     
0:     static public String getTypeString(int type)
1:     {
1:         switch (type )
1:         {
1:             case BIGINT:        return "BIGINT";
1:             case BINARY:        return "BINARY";
1:             case BLOB:          return "BLOB";
1:             case BOOLEAN:       return "BOOLEAN";
1:             case CHAR:          return "CHAR";
1:             case CLOB:          return "CLOB";
1:             case DATE:          return "DATE";
1:             case DECIMAL:       return "DECIMAL";
1:             case DOUBLE:        return "DOUBLE";
1:             case INTEGER:       return "INTEGER";
1:             case LONGVARBINARY: return "LONGVARBINARY";
1:             case LONGVARCHAR:   return "LONGVARCHAR";
1:             case REAL:          return "REAL";
1:             case SMALLINT:      return "SMALLINT";
1:             case TIME:          return "TIME";
1:             case TIMESTAMP:     return "TIMESTAMP";
1:             case VARBINARY:     return "VARBINARY";
1:             case VARCHAR:       return "VARCHAR";
1:             default:            return "<UNKNOWN>";
1:         }
1:     }
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class Types {
1:     // -------------------------------- Driver types -------------------------------------------------
1:     // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
0:     // public final static int BIT        =  java.sql.Types.BIT;          // -7;
1:     // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
0:     //public final static int TINYINT 	= java.sql.Types.TINYINT;       // -6;
0:     public final static int SMALLINT = java.sql.Types.SMALLINT;      // 5;
0:     public final static int INTEGER = java.sql.Types.INTEGER;       // 4;
0:     public final static int BIGINT = java.sql.Types.BIGINT;        // -5;
1:     // We type using DOUBLE
0:     //public final static int FLOAT 	= java.sql.Types.FLOAT;         // 6;
0:     public final static int REAL = java.sql.Types.REAL;          // 7;
0:     public final static int DOUBLE = java.sql.Types.DOUBLE;        // 8;
1:     // We type using DECIMAL
0:     //public final static int NUMERIC 	= java.sql.Types.NUMERIC;       // 2;
0:     public final static int DECIMAL = java.sql.Types.DECIMAL;       // 3;
0:     public final static int CHAR = java.sql.Types.CHAR;          // 1;
0:     public final static int VARCHAR = java.sql.Types.VARCHAR;       // 12;
0:     public final static int LONGVARCHAR = java.sql.Types.LONGVARCHAR;   // -1;
0:     public final static int DATE = java.sql.Types.DATE;          // 91;
0:     public final static int TIME = java.sql.Types.TIME;          // 92;
0:     public final static int TIMESTAMP = java.sql.Types.TIMESTAMP;     // 93;
0:     public final static int BINARY = java.sql.Types.BINARY;        // -2;
0:     public final static int VARBINARY = java.sql.Types.VARBINARY;     // -3;
0:     public final static int LONGVARBINARY = java.sql.Types.LONGVARBINARY; // -4;
0:     public final static int BLOB = java.sql.Types.BLOB;          // 2004;
0:     public final static int CLOB = java.sql.Types.CLOB;          // 2005;
1:     // hide the default constructor
0:     private Types() {
1: 
0:     // -------------------------------- DERBY types ----------------------------------------------------
1: 
0:     public final static int DERBY_SQLTYPE_DATE = 384;        // DATE
0:     public final static int DERBY_SQLTYPE_NDATE = 385;
0:     public final static int DERBY_SQLTYPE_TIME = 388;        // TIME
0:     public final static int DERBY_SQLTYPE_NTIME = 389;
0:     public final static int DERBY_SQLTYPE_TIMESTAMP = 392;   // TIMESTAMP
0:     public final static int DERBY_SQLTYPE_NTIMESTAMP = 393;
1: 
0:     public final static int DERBY_SQLTYPE_BLOB = 404;        // BLOB
0:     public final static int DERBY_SQLTYPE_NBLOB = 405;
0:     public final static int DERBY_SQLTYPE_CLOB = 408;        // CLOB
0:     public final static int DERBY_SQLTYPE_NCLOB = 409;
1: 
0:     public final static int DERBY_SQLTYPE_VARCHAR = 448;     // VARCHAR(i) - varying length string
0:     public final static int DERBY_SQLTYPE_NVARCHAR = 449;
0:     public final static int DERBY_SQLTYPE_CHAR = 452;        // CHAR(i) - fixed length
0:     public final static int DERBY_SQLTYPE_NCHAR = 453;
0:     public final static int DERBY_SQLTYPE_LONG = 456;        // LONG VARCHAR - varying length string
0:     public final static int DERBY_SQLTYPE_NLONG = 457;
0:     public final static int DERBY_SQLTYPE_CSTR = 460;        // SBCS - null terminated
0:     public final static int DERBY_SQLTYPE_NCSTR = 461;
1: 
0:     public final static int DERBY_SQLTYPE_FLOAT = 480;       // FLOAT - 4 or 8 byte floating point
0:     public final static int DERBY_SQLTYPE_NFLOAT = 481;
0:     public final static int DERBY_SQLTYPE_DECIMAL = 484;     // DECIMAL (m,n)
0:     public final static int DERBY_SQLTYPE_NDECIMAL = 485;
0:     public final static int DERBY_SQLTYPE_BIGINT = 492;      // BIGINT - 8-byte signed integer
0:     public final static int DERBY_SQLTYPE_NBIGINT = 493;
0:     public final static int DERBY_SQLTYPE_INTEGER = 496;     // INTEGER
0:     public final static int DERBY_SQLTYPE_NINTEGER = 497;
0:     public final static int DERBY_SQLTYPE_SMALL = 500;       // SMALLINT - 2-byte signed integer                                                                    */
0:     public final static int DERBY_SQLTYPE_NSMALL = 501;
1: 
0:     public final static int DERBY_SQLTYPE_NUMERIC = 504;     // NUMERIC -> DECIMAL (m,n)
0:     public final static int DERBY_SQLTYPE_NNUMERIC = 505;
1: 
1:     static public int mapDERBYTypeToDriverType(boolean isDescribed, int sqlType, long length, int ccsid) {
1:         switch (Utils.getNonNullableSqlType(sqlType)) { // mask the isNullable bit
0:         case DERBY_SQLTYPE_SMALL:
1:             return SMALLINT;
0:         case DERBY_SQLTYPE_INTEGER:
1:             return INTEGER;
0:         case DERBY_SQLTYPE_BIGINT:
1:             return BIGINT;
0:         case DERBY_SQLTYPE_FLOAT:
1:             if (length == 16)                  // can map to either NUMERIC or DECIMAL
1:             {
1:                 return DECIMAL;
1:             } else if (length == 8)              // can map to either DOUBLE or FLOAT
1:             {
1:                 return DOUBLE;
1:             } else if (length == 4) {
1:                 return REAL;
1:             } else {
1:                 return 0;
1:             }
0:         case DERBY_SQLTYPE_DECIMAL:            // can map to either NUMERIC or DECIMAL
0:         case DERBY_SQLTYPE_NUMERIC:            // can map to either NUMERIC or DECIMAL
1:             return DECIMAL;
0:         case DERBY_SQLTYPE_CHAR:    // mixed and single byte
1:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:                 return BINARY;
1:             } else {
1:                 return CHAR;
1:             }
0:         case DERBY_SQLTYPE_CSTR:    // null terminated SBCS/Mixed
1:             return CHAR;
1:             // use ccsid to distinguish between BINARY and CHAR, VARBINARY and VARCHAR, LONG...
0:         case DERBY_SQLTYPE_VARCHAR:   // variable character SBCS/Mixed
1:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:                 return VARBINARY;
1:             } else {
1:                 return VARCHAR;
1:             }
0:         case DERBY_SQLTYPE_LONG:      // long varchar SBCS/Mixed
1:             if (isDescribed && (ccsid == 0xffff || ccsid == 0)) {
1:                 return LONGVARBINARY;
1:             } else {
1:                 return LONGVARCHAR;
1:             }
0:         case DERBY_SQLTYPE_DATE:
1:             return DATE;
0:         case DERBY_SQLTYPE_TIME:
1:             return TIME;
0:         case DERBY_SQLTYPE_TIMESTAMP:
1:             return TIMESTAMP;
0:         case DERBY_SQLTYPE_CLOB:    // large object character SBCS/Mixed
0:             return Types.CLOB;
0:         case DERBY_SQLTYPE_BLOB:    // large object bytes
0:             return java.sql.Types.BLOB;
1:         default:
1:             return 0;
1:         }
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.Types
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.am;
1: 
1: // This enumeration of types represents the typing scheme used by our jdbc driver.
1: // Once this is finished, we need to review our switches to make sure they are exhaustive
0: public class Types
0: {
0:   // -------------------------------- Driver types -------------------------------------------------
1: 
0:   // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
0:   // public final static int BIT        =  java.sql.Types.BIT;          // -7;
1: 
0:   // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
0:   //public final static int TINYINT 	= java.sql.Types.TINYINT;       // -6;
1: 
0:   public final static int SMALLINT	= java.sql.Types.SMALLINT;      // 5;
1: 
0:   public final static int INTEGER 	= java.sql.Types.INTEGER;       // 4;
1: 
0:   public final static int BIGINT 	= java.sql.Types.BIGINT;        // -5;
1: 
0:   // We type using DOUBLE
0:   //public final static int FLOAT 	= java.sql.Types.FLOAT;         // 6;
1: 
0:   public final static int REAL 		= java.sql.Types.REAL;          // 7;
1: 
0:   public final static int DOUBLE 	= java.sql.Types.DOUBLE;        // 8;
1: 
0:   // We type using DECIMAL
0:   //public final static int NUMERIC 	= java.sql.Types.NUMERIC;       // 2;
1: 
0:   public final static int DECIMAL	= java.sql.Types.DECIMAL;       // 3;
1: 
0:   public final static int CHAR		= java.sql.Types.CHAR;          // 1;
1: 
0:   public final static int VARCHAR 	= java.sql.Types.VARCHAR;       // 12;
1: 
0:   public final static int LONGVARCHAR 	= java.sql.Types.LONGVARCHAR;   // -1;
1: 
0:   public final static int DATE 		= java.sql.Types.DATE;          // 91;
1: 
0:   public final static int TIME 		= java.sql.Types.TIME;          // 92;
1: 
0:   public final static int TIMESTAMP 	= java.sql.Types.TIMESTAMP;     // 93;
1: 
0:   public final static int BINARY	= java.sql.Types.BINARY;        // -2;
1: 
0:   public final static int VARBINARY 	= java.sql.Types.VARBINARY;     // -3;
1: 
0:   public final static int LONGVARBINARY = java.sql.Types.LONGVARBINARY; // -4;
1: 
0:   public final static int BLOB          = java.sql.Types.BLOB;          // 2004;
1: 
0:   public final static int CLOB          = java.sql.Types.CLOB;          // 2005;
1: 
0:   // hide the default constructor
0:   private Types() {}
1: 
0:   // -------------------------------- DERBY types ----------------------------------------------------
1: 
0:   public final static int DERBY_SQLTYPE_DATE = 384;        // DATE
0:   public final static int DERBY_SQLTYPE_NDATE = 385;
0:   public final static int DERBY_SQLTYPE_TIME = 388;        // TIME
0:   public final static int DERBY_SQLTYPE_NTIME = 389;
0:   public final static int DERBY_SQLTYPE_TIMESTAMP = 392;   // TIMESTAMP
0:   public final static int DERBY_SQLTYPE_NTIMESTAMP = 393;
1: 
0:   public final static int DERBY_SQLTYPE_BLOB = 404;        // BLOB
0:   public final static int DERBY_SQLTYPE_NBLOB = 405;
0:   public final static int DERBY_SQLTYPE_CLOB = 408;        // CLOB
0:   public final static int DERBY_SQLTYPE_NCLOB = 409;
1: 
0:   public final static int DERBY_SQLTYPE_VARCHAR = 448;     // VARCHAR(i) - varying length string
0:   public final static int DERBY_SQLTYPE_NVARCHAR = 449;
0:   public final static int DERBY_SQLTYPE_CHAR = 452;        // CHAR(i) - fixed length
0:   public final static int DERBY_SQLTYPE_NCHAR = 453;
0:   public final static int DERBY_SQLTYPE_LONG = 456;        // LONG VARCHAR - varying length string
0:   public final static int DERBY_SQLTYPE_NLONG = 457;
0:   public final static int DERBY_SQLTYPE_CSTR = 460;        // SBCS - null terminated
0:   public final static int DERBY_SQLTYPE_NCSTR = 461;
1: 
0:   public final static int DERBY_SQLTYPE_FLOAT = 480;       // FLOAT - 4 or 8 byte floating point
0:   public final static int DERBY_SQLTYPE_NFLOAT = 481;
0:   public final static int DERBY_SQLTYPE_DECIMAL = 484;     // DECIMAL (m,n)
0:   public final static int DERBY_SQLTYPE_NDECIMAL = 485;
0:   public final static int DERBY_SQLTYPE_BIGINT = 492;      // BIGINT - 8-byte signed integer
0:   public final static int DERBY_SQLTYPE_NBIGINT = 493;
0:   public final static int DERBY_SQLTYPE_INTEGER = 496;     // INTEGER
0:   public final static int DERBY_SQLTYPE_NINTEGER = 497;
0:   public final static int DERBY_SQLTYPE_SMALL = 500;       // SMALLINT - 2-byte signed integer                                                                    */
0:   public final static int DERBY_SQLTYPE_NSMALL = 501;
1: 
0:   public final static int DERBY_SQLTYPE_NUMERIC = 504;     // NUMERIC -> DECIMAL (m,n)
0:   public final static int DERBY_SQLTYPE_NNUMERIC = 505;
1: 
0:   static public int mapDERBYTypeToDriverType (boolean isDescribed, int sqlType, long length, int ccsid)
0:   {
0:     switch (Utils.getNonNullableSqlType (sqlType)) { // mask the isNullable bit
0:     case DERBY_SQLTYPE_SMALL:
0:       return SMALLINT;
0:     case DERBY_SQLTYPE_INTEGER:
0:       return INTEGER;
0:     case DERBY_SQLTYPE_BIGINT:
0:       return BIGINT;
0:     case DERBY_SQLTYPE_FLOAT:
0:       if (length == 16)                  // can map to either NUMERIC or DECIMAL
0:         return DECIMAL;
0:       else if (length == 8)              // can map to either DOUBLE or FLOAT
0:         return DOUBLE;
0:       else if (length == 4)
0:         return REAL;
0:       else
0:         return 0;
0:     case DERBY_SQLTYPE_DECIMAL:            // can map to either NUMERIC or DECIMAL
0:     case DERBY_SQLTYPE_NUMERIC:            // can map to either NUMERIC or DECIMAL
0:       return DECIMAL;
0:     case DERBY_SQLTYPE_CHAR:    // mixed and single byte
0:       if (isDescribed && (ccsid == 0xffff || ccsid == 0))
0:         return BINARY;
0:       else
0:         return CHAR;
0:     case DERBY_SQLTYPE_CSTR:    // null terminated SBCS/Mixed
0:       return CHAR;
0:     // use ccsid to distinguish between BINARY and CHAR, VARBINARY and VARCHAR, LONG... 
0:     case DERBY_SQLTYPE_VARCHAR:   // variable character SBCS/Mixed
0:       if (isDescribed && (ccsid == 0xffff || ccsid == 0))
0:         return VARBINARY;
0:       else
0:         return VARCHAR;
0:     case DERBY_SQLTYPE_LONG:      // long varchar SBCS/Mixed
0:       if (isDescribed && (ccsid == 0xffff || ccsid == 0))
0:         return LONGVARBINARY;
0:       else
0:         return LONGVARCHAR;
0:     case DERBY_SQLTYPE_DATE:
0:       return DATE;
0:     case DERBY_SQLTYPE_TIME:
0:       return TIME;
0:     case DERBY_SQLTYPE_TIMESTAMP:
0:       return TIMESTAMP;
0:     case DERBY_SQLTYPE_CLOB:    // large object character SBCS/Mixed
0:       return Types.CLOB;
0:     case DERBY_SQLTYPE_BLOB:    // large object bytes
0:       return java.sql.Types.BLOB;
0:     default:
0:       return 0;
0:     }
0:   }
0: }
============================================================================