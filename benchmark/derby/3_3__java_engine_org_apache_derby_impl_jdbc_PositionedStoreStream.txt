1:f839f5e: /*
1:f839f5e: 
1:f839f5e:    Derby - org.apache.derby.impl.jdbc.PositionedStoreStream
1:f839f5e: 
1:f839f5e:    Licensed to the Apache Software Foundation (ASF) under one
1:f839f5e:    or more contributor license agreements.  See the NOTICE file
1:f839f5e:    distributed with this work for additional information
1:f839f5e:    regarding copyright ownership.  The ASF licenses this file
1:f839f5e:    to you under the Apache License, Version 2.0 (the
1:f839f5e:    "License"); you may not use this file except in compliance
1:f839f5e:    with the License.  You may obtain a copy of the License at
1:f839f5e: 
1:f839f5e:      http://www.apache.org/licenses/LICENSE-2.0
1:f839f5e: 
1:f839f5e:    Unless required by applicable law or agreed to in writing,
1:f839f5e:    software distributed under the License is distributed on an
1:f839f5e:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f839f5e:    KIND, either express or implied.  See the License for the
1:f839f5e:    specific language governing permissions and limitations
1:f839f5e:    under the License.
1:f839f5e: 
2:f839f5e:  */
1:f839f5e: package org.apache.derby.impl.jdbc;
1:f839f5e: 
1:f839f5e: import java.io.EOFException;
1:f839f5e: import java.io.IOException;
1:f839f5e: import java.io.InputStream;
1:f839f5e: 
1:f839f5e: import org.apache.derby.iapi.error.StandardException;
1:a1c1356: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:f719de6: import org.apache.derby.iapi.types.PositionedStream;
1:f839f5e: import org.apache.derby.iapi.types.Resetable;
1:f839f5e: 
2:f839f5e: /**
1:f839f5e:  * A wrapper-stream able to reposition the underlying store stream.
1:f839f5e:  * <p>
1:f839f5e:  * Where a user expects the underlying stream to be at a given position,
1:f839f5e:  * {@link #reposition} must be called with the expected position first. A use
1:f839f5e:  * case for this scenario is the LOB objects, where you can request a stream and
1:f839f5e:  * at the same time (this does not mean concurrently) query the LOB about its
1:f839f5e:  * length or ask to get a part of the LOB returned. Such multiplexed operations
1:f839f5e:  * must result in consistent and valid data, and to achieve this the underlying
1:f839f5e:  * store stream must be able to reposition itself.
2:f839f5e:  *
1:f839f5e:  * <em>Synchronization</em>: Access to instances of this class must be
1:f839f5e:  * externally synchronized on the connection synchronization object. There are
1:f839f5e:  * two reasons for this:
1:f839f5e:  * <ul> <li>Access to store must be single threaded.
1:f839f5e:  *      <li>This class is not thread safe, and calling the various methods from
1:f839f5e:  *          different threads concurrently can result in inconsistent position
1:f839f5e:  *          values. To avoid redundant internal synchronization, this class
1:f839f5e:  *          assumes and <b>requires</b> external synchronization (also called
1:f839f5e:  *          client-side locking).
1:f839f5e:  * </ul>
1:f839f5e:  * @see EmbedConnection#getConnectionSynchronization
1:f839f5e:  */
1:f839f5e: //@NotThreadSafe
1:f839f5e: public class PositionedStoreStream
1:f839f5e:     extends InputStream
1:f719de6:     implements PositionedStream, Resetable {
1:f839f5e: 
1:f839f5e:     /** Underlying store stream serving bytes. */
2:f839f5e:     //@GuardedBy("EmbedConnection.getConnectionSynchronization()")
1:f839f5e:     private final InputStream stream;
1:f839f5e:     /**
1:f839f5e:      * Position of the underlying store stream.
1:f839f5e:      * Note that the position is maintained by this class, not the underlying
1:f839f5e:      * store stream itself.
1:f839f5e:      * <em>Future improvement</em>: Add this functionality to the underlying
1:f839f5e:      * store stream itself to avoid another level in the stream stack.
1:f839f5e:      */
1:f839f5e:     //@GuardedBy("EmbedConnection.getConnectionSynchronization()")
1:f839f5e:     private long pos = 0L;
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Creates a positioned store stream on top of the specified resettable
1:f839f5e:      * stream.
1:dd2650f:      * <p>
1:dd2650f:      * Upon creation, the underlying stream is initiated and reset to make
1:dd2650f:      * sure the states of the streams are in sync with each other.
1:f839f5e:      *
1:f839f5e:      * @param in a {@link Resetable}-stream
1:f839f5e:      */
1:dd2650f:     public PositionedStoreStream(InputStream in)
1:dd2650f:             throws IOException, StandardException {
1:f839f5e:         this.stream = in;
1:dd2650f:         // We need to know the stream is in a consistent state.
1:dd2650f:         ((Resetable)in).initStream();
1:dd2650f:         ((Resetable)in).resetStream();
5:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Reads a number of bytes from the underlying stream and stores them in the
1:f839f5e:      * specified byte array.
1:f839f5e:      *
1:f839f5e:      * @return The actual number of bytes read, or -1 if the end of the stream
1:f839f5e:      *      is reached.
1:f839f5e:      * @throws IOException if an I/O error occurs
1:f839f5e:      */
1:f839f5e:     public int read(byte[] b)
2:f839f5e:             throws IOException {
1:18fca03:         return read(b, 0, b.length);
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Reads a number of bytes from the underlying stream and stores them in the
1:f839f5e:      * specified byte array at the specified offset.
1:f839f5e:      *
1:f839f5e:      * @return The actual number of bytes read, or -1 if the end of the stream
1:f839f5e:      *      is reached.
1:f839f5e:      * @throws IOException if an I/O error occurs
1:f839f5e:      */
1:f839f5e:     public int read(byte[] b, int off, int len)
1:f839f5e:             throws IOException {
1:f839f5e:         int ret = this.stream.read(b, off, len);
1:a8b60da:         if (ret > -1) {
1:18fca03:             this.pos += ret;
1:18fca03:         }
2:f839f5e:         return ret;
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Reads a single byte from the underlying stream.
1:f839f5e:      *
1:f839f5e:      * @return The next byte of data, or -1 if the end of the stream is reached.
1:f839f5e:      * @throws IOException if an I/O error occurs
1:f839f5e:      */
1:f839f5e:     public int read()
1:f839f5e:             throws IOException {
1:f839f5e:         int ret = this.stream.read();
1:a8b60da:         if (ret > -1) {
1:f839f5e:             this.pos++;
1:f839f5e:         }
1:f839f5e:         return ret;
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Skips up to the specified number of bytes from the underlying stream.
1:f839f5e:      *
1:f839f5e:      * @return The actual number of bytes skipped.
1:f839f5e:      * @throws IOException if an I/O error occurs
1:f839f5e:      */
1:f839f5e:     public long skip(long toSkip)
1:f839f5e:             throws IOException {
1:f839f5e:         long ret = this.stream.skip(toSkip);
3:f839f5e:         this.pos += ret;
1:f839f5e:         return ret;
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Resets the resettable stream.
1:f839f5e:      *
1:f839f5e:      * @throws IOException
1:f839f5e:      * @throws StandardException if resetting the stream in store fails
1:f839f5e:      * @see Resetable#resetStream
1:f839f5e:      */
1:f839f5e:     public void resetStream()
1:f839f5e:             throws IOException, StandardException {
1:7cba6d5:         ((Resetable)this.stream).resetStream();
2:f839f5e:         this.pos = 0L;
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Initialize the resettable stream for use.
1:f839f5e:      *
1:f839f5e:      * @throws StandardException if initializing the store in stream fails
1:f839f5e:      * @see Resetable#initStream
1:f839f5e:      */
1:f839f5e:     public void initStream()
1:f839f5e:             throws StandardException {
1:7cba6d5:         ((Resetable)this.stream).initStream();
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Closes the resettable stream.
1:f839f5e:      *
1:f839f5e:      * @see Resetable#closeStream
1:f839f5e:      */
1:f839f5e:     public void closeStream() {
1:7cba6d5:         ((Resetable)this.stream).closeStream();
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Repositions the underlying store stream to the requested position.
1:f839f5e:      * <p>
1:f839f5e:      * Repositioning is required because there can be several uses of the store
1:f839f5e:      * stream, which changes the position of it. If a class is dependent on the
1:f839f5e:      * underlying stream not changing its position, it must call reposition with
1:f839f5e:      * the position it expects before using the stream again.
1:634b64f:      * <p>
1:634b64f:      * If the repositioning fails because the stream is exhausted, most likely
1:634b64f:      * because of an invalid position specified by the user, the stream is
1:634b64f:      * reset to position zero and the {@code EOFException} is rethrown.
1:f839f5e:      *
1:634b64f:      * @throws EOFException if the stream is exhausted before the requested
1:634b64f:      *      position is reached
1:f839f5e:      * @throws IOException if reading from the store stream fails
1:f839f5e:      * @throws StandardException if resetting the store in stream fails, or
1:f839f5e:      *      some other exception happens in store
1:f839f5e:      * @see #getPosition
1:f839f5e:      */
1:634b64f:     public void reposition(final long requestedPos)
1:f839f5e:             throws IOException, StandardException {
1:f719de6:         if (SanityManager.DEBUG) {
1:f719de6:             if (requestedPos < 0) {
1:f719de6:                 SanityManager.THROWASSERT("Negative position: " + requestedPos);
1:f719de6:             }
1:f719de6:         }
1:634b64f:         if (this.pos > requestedPos) {
1:634b64f:             // Reset stream to reposition from start.
1:634b64f:             resetStream();
1:634b64f:         }
1:f839f5e:         if (this.pos < requestedPos) {
1:634b64f:             try {
1:a1c1356:                 InputStreamUtil.skipFully(stream, requestedPos - pos);
1:634b64f:             } catch (EOFException eofe) {
1:634b64f:                 // A position after the end of the stream was requested.
1:634b64f:                 // To recover, and for consistency, reset to position zero.
1:634b64f:                 resetStream();
1:634b64f:                 throw eofe;
1:634b64f:             }
1:634b64f:             // Operation successful, update position.
2:f839f5e:             this.pos = requestedPos;
1:f839f5e:         }
1:f839f5e:     }
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Returns the current position of the underlying store stream.
1:f839f5e:      *
1:f839f5e:      * @return Current byte position of the store stream.
1:f839f5e:      */
1:f839f5e:     public long getPosition() {
1:f839f5e:         return this.pos;
1:f839f5e:     }
1:f839f5e: 
1:f719de6:     public InputStream asInputStream() {
1:f719de6:         return this;
1:f719de6:     }
1:f719de6: 
1:f839f5e: } // End class PositionedStoreStream
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:dd2650f
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Upon creation, the underlying stream is initiated and reset to make
1:      * sure the states of the streams are in sync with each other.
1:     public PositionedStoreStream(InputStream in)
1:             throws IOException, StandardException {
1:         // We need to know the stream is in a consistent state.
1:         ((Resetable)in).initStream();
1:         ((Resetable)in).resetStream();
/////////////////////////////////////////////////////////////////////////
commit:f719de6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.PositionedStream;
/////////////////////////////////////////////////////////////////////////
1:     implements PositionedStream, Resetable {
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             if (requestedPos < 0) {
1:                 SanityManager.THROWASSERT("Negative position: " + requestedPos);
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public InputStream asInputStream() {
1:         return this;
1:     }
1: 
commit:7cba6d5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ((Resetable)this.stream).resetStream();
/////////////////////////////////////////////////////////////////////////
1:         ((Resetable)this.stream).initStream();
/////////////////////////////////////////////////////////////////////////
1:         ((Resetable)this.stream).closeStream();
commit:634b64f
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * If the repositioning fails because the stream is exhausted, most likely
1:      * because of an invalid position specified by the user, the stream is
1:      * reset to position zero and the {@code EOFException} is rethrown.
1:      * @throws EOFException if the stream is exhausted before the requested
1:      *      position is reached
1:     public void reposition(final long requestedPos)
1:         if (this.pos > requestedPos) {
1:             // Reset stream to reposition from start.
1:             resetStream();
1:         }
1:             try {
0:                 skipFully(requestedPos - this.pos);
1:             } catch (EOFException eofe) {
1:                 // A position after the end of the stream was requested.
1:                 // To recover, and for consistency, reset to position zero.
1:                 resetStream();
1:                 throw eofe;
1:             }
1:             // Operation successful, update position.
commit:a8b60da
/////////////////////////////////////////////////////////////////////////
1:         if (ret > -1) {
/////////////////////////////////////////////////////////////////////////
1:         if (ret > -1) {
commit:18fca03
/////////////////////////////////////////////////////////////////////////
1:         return read(b, 0, b.length);
/////////////////////////////////////////////////////////////////////////
0:         if (ret > 0) {
1:             this.pos += ret;
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (ret > 0) {
commit:f839f5e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - org.apache.derby.impl.jdbc.PositionedStoreStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.Resetable;
1: 
1: /**
1:  * A wrapper-stream able to reposition the underlying store stream.
1:  * <p>
1:  * Where a user expects the underlying stream to be at a given position,
1:  * {@link #reposition} must be called with the expected position first. A use
1:  * case for this scenario is the LOB objects, where you can request a stream and
1:  * at the same time (this does not mean concurrently) query the LOB about its
1:  * length or ask to get a part of the LOB returned. Such multiplexed operations
1:  * must result in consistent and valid data, and to achieve this the underlying
1:  * store stream must be able to reposition itself.
1:  *
1:  * <em>Synchronization</em>: Access to instances of this class must be
1:  * externally synchronized on the connection synchronization object. There are
1:  * two reasons for this:
1:  * <ul> <li>Access to store must be single threaded.
1:  *      <li>This class is not thread safe, and calling the various methods from
1:  *          different threads concurrently can result in inconsistent position
1:  *          values. To avoid redundant internal synchronization, this class
1:  *          assumes and <b>requires</b> external synchronization (also called
1:  *          client-side locking).
1:  * </ul>
1:  * @see EmbedConnection#getConnectionSynchronization
1:  */
1: //@NotThreadSafe
1: public class PositionedStoreStream
1:     extends InputStream
0:     implements Resetable {
1: 
1:     /** Underlying store stream serving bytes. */
1:     //@GuardedBy("EmbedConnection.getConnectionSynchronization()")
1:     private final InputStream stream;
0:     /** Convenience reference to the stream as a resettable stream. */
1:     //@GuardedBy("EmbedConnection.getConnectionSynchronization()")
0:     private final Resetable resettable;
1:     /**
1:      * Position of the underlying store stream.
1:      * Note that the position is maintained by this class, not the underlying
1:      * store stream itself.
1:      * <em>Future improvement</em>: Add this functionality to the underlying
1:      * store stream itself to avoid another level in the stream stack.
1:      */
1:     //@GuardedBy("EmbedConnection.getConnectionSynchronization()")
1:     private long pos = 0L;
1: 
1:     /**
1:      * Creates a positioned store stream on top of the specified resettable
1:      * stream.
1:      *
1:      * @param in a {@link Resetable}-stream
0:      * @throws ClassCastException if the inputstream does not implement
0:      *      {@link Resetable}
1:      */
0:     public PositionedStoreStream(InputStream in) {
1:         this.stream = in;
0:         this.resettable = (Resetable)in;
1:     }
1: 
1:     /**
1:      * Reads a number of bytes from the underlying stream and stores them in the
1:      * specified byte array.
1:      *
1:      * @return The actual number of bytes read, or -1 if the end of the stream
1:      *      is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read(byte[] b)
1:             throws IOException {
0:         int ret = this.stream.read(b);
1:         this.pos += ret;
1:         return ret;
1:     }
1: 
1:     /**
1:      * Reads a number of bytes from the underlying stream and stores them in the
1:      * specified byte array at the specified offset.
1:      *
1:      * @return The actual number of bytes read, or -1 if the end of the stream
1:      *      is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read(byte[] b, int off, int len)
1:             throws IOException {
1:         int ret = this.stream.read(b, off, len);
1:         this.pos += ret;
1:         return ret;
1:     }
1: 
1:     /**
1:      * Reads a single byte from the underlying stream.
1:      *
1:      * @return The next byte of data, or -1 if the end of the stream is reached.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public int read()
1:             throws IOException {
1:         int ret = this.stream.read();
0:         if (ret > -1) {
1:             this.pos++;
1:         }
1:         return ret;
1:     }
1: 
1:     /**
1:      * Skips up to the specified number of bytes from the underlying stream.
1:      *
1:      * @return The actual number of bytes skipped.
1:      * @throws IOException if an I/O error occurs
1:      */
1:     public long skip(long toSkip)
1:             throws IOException {
1:         long ret = this.stream.skip(toSkip);
1:         this.pos += ret;
1:         return ret;
1:     }
1: 
1:     /**
1:      * Resets the resettable stream.
1:      *
1:      * @throws IOException
1:      * @throws StandardException if resetting the stream in store fails
1:      * @see Resetable#resetStream
1:      */
1:     public void resetStream()
1:             throws IOException, StandardException {
0:         this.resettable.resetStream();
1:         this.pos = 0L;
1:     }
1: 
1:     /**
1:      * Initialize the resettable stream for use.
1:      *
1:      * @throws StandardException if initializing the store in stream fails
1:      * @see Resetable#initStream
1:      */
1:     public void initStream()
1:             throws StandardException {
0:         this.resettable.initStream();
1:         this.pos = 0L;
1:     }
1: 
1:     /**
1:      * Closes the resettable stream.
1:      *
1:      * @see Resetable#closeStream
1:      */
1:     public void closeStream() {
0:         this.resettable.closeStream();
1:     }
1: 
1:     /**
1:      * Repositions the underlying store stream to the requested position.
1:      * <p>
1:      * Repositioning is required because there can be several uses of the store
1:      * stream, which changes the position of it. If a class is dependent on the
1:      * underlying stream not changing its position, it must call reposition with
1:      * the position it expects before using the stream again.
1:      *
1:      * @throws IOException if reading from the store stream fails
1:      * @throws StandardException if resetting the store in stream fails, or
1:      *      some other exception happens in store
1:      * @see #getPosition
1:      */
0:     public void reposition(long requestedPos)
1:             throws IOException, StandardException {
1:         if (this.pos < requestedPos) {
0:             // Reposition from current position.
0:             skipFully(requestedPos - this.pos);
1:             this.pos = requestedPos;
0:         } else if (this.pos > requestedPos) {
0:             // Reposition from start.
0:             this.resettable.resetStream();
0:             skipFully(requestedPos);
1:             this.pos = requestedPos;
1:         }
1:     }
1: 
1:     /**
1:      * Returns the current position of the underlying store stream.
1:      *
1:      * @return Current byte position of the store stream.
1:      */
1:     public long getPosition() {
1:         return this.pos;
1:     }
1: 
1:     /**
0:      * Skip exactly the requested number of bytes.
1:      *
0:      * @throws EOFException if EOF is reached before all bytes are skipped
0:      * @throws IOException if reading from the stream fails
1:      */
0:     private void skipFully(long toSkip)
1:             throws IOException {
0:         long remaining = toSkip;
0:         while (remaining > 0) {
0:             long skippedNow = this.stream.skip(remaining);
0:             if (skippedNow == 0) {
0:                 if (this.stream.read() == -1) {
0:                     throw new EOFException("Reached end-of-stream prematurely" +
0:                         ", with " + remaining + " byte(s) to go");
0:                 } else {
0:                     skippedNow = 1;
1:                 }
1:             }
0:             remaining -= skippedNow;
1:         }
1:     }
1: } // End class PositionedStoreStream
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a1c1356
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.InputStreamUtil;
/////////////////////////////////////////////////////////////////////////
1:                 InputStreamUtil.skipFully(stream, requestedPos - pos);
/////////////////////////////////////////////////////////////////////////
============================================================================