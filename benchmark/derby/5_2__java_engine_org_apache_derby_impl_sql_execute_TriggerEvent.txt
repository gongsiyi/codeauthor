1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.TriggerEvent
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is a simple class that we use to track
1:eac0369:  * trigger events.  This is not expected to
1:eac0369:  * be used directly, instead there is a static
1:eac0369:  * TriggerEvent in TriggerEvents for each event 
1:eac0369:  * found in this file.
1:eac0369:  * 
1:eac0369:  */
1:eac0369: public class TriggerEvent
1:eac0369: {
1:eac0369: 	static final int BEFORE_INSERT = 0;	
1:eac0369: 	static final int BEFORE_DELETE = 1;	
1:eac0369: 	static final int BEFORE_UPDATE = 2;	
1:eac0369: 	static final int LAST_BEFORE_EVENT = BEFORE_UPDATE;	
1:eac0369: 	static final int AFTER_INSERT = 3;	
1:eac0369: 	static final int AFTER_DELETE = 4;	
1:eac0369: 	static final int AFTER_UPDATE = 5;	
1:eac0369: 	static final int MAX_EVENTS = 6;
1:eac0369: 
1:eac0369: 	private static final String Names[] = {	"BEFORE INSERT",
1:eac0369: 											"BEFORE DELETE", 
1:eac0369: 											"BEFORE UPDATE", 
1:eac0369: 											"AFTER INSERT", 
1:eac0369: 											"AFTER DELETE", 
1:eac0369: 											"AFTER UPDATE"
1:eac0369: 										};
1:eac0369: 
1:eac0369: 	private boolean before;
1:eac0369: 	private int type;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create a trigger event of the given type
1:eac0369: 	 *
1:eac0369:  	 * @param type the type
1:eac0369: 	 */
1:eac0369: 	TriggerEvent(int type)
1:eac0369: 	{
1:eac0369: 		this.type = type;
1:eac0369: 		switch(type)
1:eac0369: 		{
1:eac0369: 			case BEFORE_INSERT:		
1:eac0369: 			case BEFORE_DELETE:		
1:eac0369: 			case BEFORE_UPDATE:		
1:eac0369: 				before = true;
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case AFTER_INSERT:		
1:eac0369: 			case AFTER_DELETE:		
1:eac0369: 			case AFTER_UPDATE:		
1:eac0369: 				before = false;
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the type number of this trigger
1:eac0369:  	 *
1:eac0369:  	 * @return the type number
1:eac0369: 	 */
1:eac0369: 	int getNumber()
1:eac0369: 	{
1:eac0369: 		return type;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the type number of this trigger
1:eac0369:  	 *
1:eac0369:  	 * @return the type number
1:eac0369: 	 */
1:eac0369: 	String getName()
1:eac0369: 	{
1:eac0369: 		return Names[type];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this a before trigger
1:eac0369:  	 *
1:eac0369:  	 * @return true if before
1:eac0369: 	 */
1:eac0369: 	boolean isBefore()
1:eac0369: 	{
1:eac0369: 		return before;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this an after trigger
1:eac0369:  	 *
1:eac0369:  	 * @return true if after
1:eac0369: 	 */
1:eac0369: 	boolean isAfter()
1:eac0369: 	{
1:eac0369: 		return !before;
1:eac0369: 	}
1:eac0369: }	
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.TriggerEvent
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: /**
1:  * This is a simple class that we use to track
1:  * trigger events.  This is not expected to
1:  * be used directly, instead there is a static
1:  * TriggerEvent in TriggerEvents for each event 
1:  * found in this file.
1:  * 
0:  * @author jamie
1:  */
1: public class TriggerEvent
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	static final int BEFORE_INSERT = 0;	
1: 	static final int BEFORE_DELETE = 1;	
1: 	static final int BEFORE_UPDATE = 2;	
1: 	static final int LAST_BEFORE_EVENT = BEFORE_UPDATE;	
1: 	static final int AFTER_INSERT = 3;	
1: 	static final int AFTER_DELETE = 4;	
1: 	static final int AFTER_UPDATE = 5;	
1: 	static final int MAX_EVENTS = 6;
1: 
1: 	private static final String Names[] = {	"BEFORE INSERT",
1: 											"BEFORE DELETE", 
1: 											"BEFORE UPDATE", 
1: 											"AFTER INSERT", 
1: 											"AFTER DELETE", 
1: 											"AFTER UPDATE"
1: 										};
1: 
1: 	private boolean before;
1: 	private int type;
1: 
1: 	/**
1: 	 * Create a trigger event of the given type
1: 	 *
1:  	 * @param type the type
1: 	 */
1: 	TriggerEvent(int type)
1: 	{
1: 		this.type = type;
1: 		switch(type)
1: 		{
1: 			case BEFORE_INSERT:		
1: 			case BEFORE_DELETE:		
1: 			case BEFORE_UPDATE:		
1: 				before = true;
1: 				break;
1: 
1: 			case AFTER_INSERT:		
1: 			case AFTER_DELETE:		
1: 			case AFTER_UPDATE:		
1: 				before = false;
1: 				break;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the type number of this trigger
1:  	 *
1:  	 * @return the type number
1: 	 */
1: 	int getNumber()
1: 	{
1: 		return type;
1: 	}
1: 
1: 	/**
1: 	 * Get the type number of this trigger
1:  	 *
1:  	 * @return the type number
1: 	 */
1: 	String getName()
1: 	{
1: 		return Names[type];
1: 	}
1: 
1: 	/**
1: 	 * Is this a before trigger
1:  	 *
1:  	 * @return true if before
1: 	 */
1: 	boolean isBefore()
1: 	{
1: 		return before;
1: 	}
1: 
1: 	/**
1: 	 * Is this an after trigger
1:  	 *
1:  	 * @return true if after
1: 	 */
1: 	boolean isAfter()
1: 	{
1: 		return !before;
1: 	}
1: }	
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: /**
0:  * This is a simple class that we use to track
0:  * trigger events.  This is not expected to
0:  * be used directly, instead there is a static
0:  * TriggerEvent in TriggerEvents for each event 
0:  * found in this file.
0:  * 
0:  * @author jamie
0:  */
0: public class TriggerEvent
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	static final int BEFORE_INSERT = 0;	
0: 	static final int BEFORE_DELETE = 1;	
0: 	static final int BEFORE_UPDATE = 2;	
0: 	static final int LAST_BEFORE_EVENT = BEFORE_UPDATE;	
0: 	static final int AFTER_INSERT = 3;	
0: 	static final int AFTER_DELETE = 4;	
0: 	static final int AFTER_UPDATE = 5;	
0: 	static final int MAX_EVENTS = 6;
0: 
0: 	private static final String Names[] = {	"BEFORE INSERT",
0: 											"BEFORE DELETE", 
0: 											"BEFORE UPDATE", 
0: 											"AFTER INSERT", 
0: 											"AFTER DELETE", 
0: 											"AFTER UPDATE"
0: 										};
0: 
0: 	private boolean before;
0: 	private int type;
0: 
0: 	/**
0: 	 * Create a trigger event of the given type
0: 	 *
0:  	 * @param type the type
0: 	 */
0: 	TriggerEvent(int type)
0: 	{
0: 		this.type = type;
0: 		switch(type)
0: 		{
0: 			case BEFORE_INSERT:		
0: 			case BEFORE_DELETE:		
0: 			case BEFORE_UPDATE:		
0: 				before = true;
0: 				break;
0: 
0: 			case AFTER_INSERT:		
0: 			case AFTER_DELETE:		
0: 			case AFTER_UPDATE:		
0: 				before = false;
0: 				break;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the type number of this trigger
0:  	 *
0:  	 * @return the type number
0: 	 */
0: 	int getNumber()
0: 	{
0: 		return type;
0: 	}
0: 
0: 	/**
0: 	 * Get the type number of this trigger
0:  	 *
0:  	 * @return the type number
0: 	 */
0: 	String getName()
0: 	{
0: 		return Names[type];
0: 	}
0: 
0: 	/**
0: 	 * Is this a before trigger
0:  	 *
0:  	 * @return true if before
0: 	 */
0: 	boolean isBefore()
0: 	{
0: 		return before;
0: 	}
0: 
0: 	/**
0: 	 * Is this an after trigger
0:  	 *
0:  	 * @return true if after
0: 	 */
0: 	boolean isAfter()
0: 	{
0: 		return !before;
0: 	}
0: }	
============================================================================