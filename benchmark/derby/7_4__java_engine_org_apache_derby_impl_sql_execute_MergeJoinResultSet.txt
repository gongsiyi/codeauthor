1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.MergeJoinResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.stream.InfoStreams;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: /////////////////////////////////////////////
1:eac0369: // WARNING: THIS HAS NOT BEEN TESTED (OR USED)
1:eac0369: // YET, SO USE AT YOUR OWN RISK
1:eac0369: /////////////////////////////////////////////
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Merge two result sets.  The left result set (the outer
1:eac0369:  * result set) MUST be unique for this to work correctly.
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class MergeJoinResultSet extends JoinResultSet
1:eac0369: {
1:eac0369: 	private static final int GREATER_THAN = 1;
1:eac0369: 	private static final int EQUAL = 0;
1:eac0369: 	private static final int LESS_THAN = -1;
1:eac0369: 
1:eac0369: 	private GeneratedMethod leftGreaterThanRight;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Create a MergeJoinResultSet
1:eac0369: 	 * 
1:eac0369: 	 * @param leftResultSet		the left (outer) result set	
1:eac0369: 	 * @param leftNumCols		columns in left row
1:eac0369: 	 * @param rightResultSet	the right (outer) result set	
1:eac0369: 	 * @param rightNumCols		columns in right row
1:eac0369: 	 * @param activation		activation
1:eac0369: 	 * @param leftGreaterThanRight a generated method that is used to
1:eac0369: 	 *			ascertain whether the row from the left result set is
1:eac0369: 	 *			greater than the row from the right result set.  returns
1:eac0369: 	 *			1,0,or -1 to indicate greater than, equal, or less than,
1:eac0369: 	 *			respectively
1:eac0369: 	 * @param  restriction		generated method for additional qualification
1:eac0369: 	 * @param resultSetNumber	the result set number
1:eac0369: 	 * @param oneRowRightSide	ignored
1:eac0369: 	 * @param optimizerEstimatedRowCount	self-explanatory
1:eac0369: 	 * @param optimizerEstimatedCost		self-explanatory
1:eac0369:      */
1:f77f36d:     MergeJoinResultSet(NoPutResultSet leftResultSet,
1:eac0369: 								   int leftNumCols,
1:eac0369: 								   NoPutResultSet rightResultSet,
1:eac0369: 								   int rightNumCols,
1:eac0369: 								   Activation activation,
1:eac0369: 								   GeneratedMethod leftGreaterThanRight,
1:eac0369: 								   GeneratedMethod restriction,
1:eac0369: 								   int resultSetNumber,
1:eac0369: 								   boolean oneRowRightSide,
1:eac0369: 								   boolean notExistsRightSide,
1:eac0369: 								   double optimizerEstimatedRowCount,
1:3dd03e5: 								   double optimizerEstimatedCost)
1:eac0369:     {
1:eac0369: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
1:eac0369: 			  activation, restriction, resultSetNumber, 
1:eac0369: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
1:f77f36d: 			  optimizerEstimatedCost, null);
1:eac0369: 
1:eac0369: 		this.leftGreaterThanRight = leftGreaterThanRight;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369:      * Return the requested values computed
1:eac0369:      * from the next row (if any) for which
1:eac0369:      * the restriction evaluates to true.
1:eac0369:      * <p>
1:eac0369:      * restriction parameters
1:eac0369:      * are evaluated for each row.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
1:eac0369: 	 * @return the next row in the join result
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (! isOpen)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1:eac0369: 
1:eac0369: 		if (!isRightOpen)
1:eac0369: 		{
1:eac0369: 			openRight();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int compareResult;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** For each row in the outer table
1:eac0369: 		*/
1:eac0369: 		while (leftRow != null)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** If outer > inner, then go to the
1:eac0369: 			** next row in the inner table
1:eac0369: 			*/
1:eac0369: 			while ((compareResult = ((Integer)leftGreaterThanRight.invoke(activation)).intValue()) 
1:eac0369: 						== GREATER_THAN)
1:eac0369: 			{
1:eac0369: 				rightRow = rightResultSet.getNextRowCore();
1:eac0369: 				rowsSeenRight++;
1:eac0369: 
1:eac0369: 				/*
1:eac0369: 				** If there are no more rows in the right
1:eac0369: 				** result set, then done.
1:eac0369: 				*/
1:eac0369: 				if (rightRow == null)
1:eac0369: 				{
1:eac0369: 		   			clearCurrentRow();
1:eac0369: 					return (ExecRow)null;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If they match and the restriction passes,
1:eac0369: 			** then return the row.
1:eac0369: 			*/
1:eac0369: 			if ((compareResult == EQUAL) && restrictionIsTrue())
1:eac0369: 			{
1:eac0369: 				ExecRow returnRow = getReturnRow(leftRow, rightRow);
1:eac0369: 
1:eac0369: 				/*
1:eac0369: 				** Move the left scan up one for the next
1:eac0369: 				** getNextRowCore() call.
1:eac0369: 				*/
1:eac0369: 				leftRow = leftResultSet.getNextRowCore();
1:eac0369: 
1:eac0369: 				return returnRow;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** Next row left
1:eac0369: 			*/	
1:eac0369: 			leftRow = leftResultSet.getNextRowCore();
1:eac0369: 			rowsSeenLeft++;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		clearCurrentRow();
1:eac0369: 		return (ExecRow)null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT( isOpen, "MergeJoinResultSet not open");
1:eac0369: 
1:eac0369: 	    if ( isOpen )
1:eac0369: 	    {
1:eac0369: 
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 		   clearCurrentRow();
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1:eac0369: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// SERVILE METHODS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	private ExecRow getReturnRow(ExecRow leftRow, ExecRow rightRow)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int colInCtr;
1:eac0369: 		int colOutCtr;
1:eac0369: 
1:eac0369: 		/* Merge the rows, doing just in time allocation for mergedRow.
1:eac0369: 		 * (By convention, left Row is to left of right Row.)
1:eac0369: 		 */
1:eac0369: 		if (mergedRow == null)
1:eac0369: 		{
1:eac0369: 			mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
1:eac0369: 			 colInCtr++, colOutCtr++)
1:eac0369: 		{
1:93a23a8:             DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
1:93a23a8:             // Clone the value if it is represented by a stream (DERBY-3650).
1:93a23a8:             if (src_col != null && src_col.hasStream()) {
1:93a23a8:                 src_col = src_col.cloneValue(false);
1:93a23a8:             }
1:93a23a8: 
1:93a23a8:             mergedRow.setColumn(colOutCtr, src_col);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (colInCtr = 1; colInCtr <= rightNumCols; 
1:eac0369: 			 colInCtr++, colOutCtr++)
1:eac0369: 		{
1:93a23a8:             DataValueDescriptor src_col = rightRow.getColumn(colInCtr);
1:93a23a8:             // Clone the value if it is represented by a stream (DERBY-3650).
1:93a23a8:             if (src_col != null && src_col.hasStream()) {
1:93a23a8:                 src_col = src_col.cloneValue(false);
1:93a23a8:             }
1:93a23a8: 
1:93a23a8:             mergedRow.setColumn(colOutCtr, src_col);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		setCurrentRow(mergedRow);
1:eac0369: 		rowsReturned++;
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 
1:eac0369: 		return mergedRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private boolean restrictionIsTrue()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (restriction != null)
1:eac0369: 		{
1:eac0369: 	    	DataValueDescriptor restrictBoolean =
1:eac0369: 				(DataValueDescriptor) restriction.invoke(activation);
1:eac0369: 
1:eac0369: 	        /*
1:eac0369: 			** if the result is null, we make it false --
1:eac0369: 			** so the row won't be returned.
1:eac0369: 			*/
1:eac0369: 			if (restrictBoolean.isNull() ||
1:eac0369: 					!restrictBoolean.getBoolean())
1:eac0369: 			{
1:eac0369: 				/* Update the run time statistics */
1:eac0369: 				rowsFiltered++;
1:eac0369: 				return false;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:93a23a8
/////////////////////////////////////////////////////////////////////////
1:             DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
1:             // Clone the value if it is represented by a stream (DERBY-3650).
1:             if (src_col != null && src_col.hasStream()) {
1:                 src_col = src_col.cloneValue(false);
1:             }
1: 
1:             mergedRow.setColumn(colOutCtr, src_col);
1:             DataValueDescriptor src_col = rightRow.getColumn(colInCtr);
1:             // Clone the value if it is represented by a stream (DERBY-3650).
1:             if (src_col != null && src_col.hasStream()) {
1:                 src_col = src_col.cloneValue(false);
1:             }
1: 
1:             mergedRow.setColumn(colOutCtr, src_col);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3dd03e5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 								   double optimizerEstimatedCost)
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class MergeJoinResultSet extends JoinResultSet
/////////////////////////////////////////////////////////////////////////
1:     MergeJoinResultSet(NoPutResultSet leftResultSet,
/////////////////////////////////////////////////////////////////////////
1: 			  optimizerEstimatedCost, null);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.MergeJoinResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: /////////////////////////////////////////////
1: // WARNING: THIS HAS NOT BEEN TESTED (OR USED)
1: // YET, SO USE AT YOUR OWN RISK
1: /////////////////////////////////////////////
1: 
1: /**
1:  * Merge two result sets.  The left result set (the outer
1:  * result set) MUST be unique for this to work correctly.
1:  *
1:  */
0: public class MergeJoinResultSet extends JoinResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private static final int GREATER_THAN = 1;
1: 	private static final int EQUAL = 0;
1: 	private static final int LESS_THAN = -1;
1: 
1: 	private GeneratedMethod leftGreaterThanRight;
1: 
1:     /**
1:      * Create a MergeJoinResultSet
1: 	 * 
1: 	 * @param leftResultSet		the left (outer) result set	
1: 	 * @param leftNumCols		columns in left row
1: 	 * @param rightResultSet	the right (outer) result set	
1: 	 * @param rightNumCols		columns in right row
1: 	 * @param activation		activation
1: 	 * @param leftGreaterThanRight a generated method that is used to
1: 	 *			ascertain whether the row from the left result set is
1: 	 *			greater than the row from the right result set.  returns
1: 	 *			1,0,or -1 to indicate greater than, equal, or less than,
1: 	 *			respectively
1: 	 * @param  restriction		generated method for additional qualification
1: 	 * @param resultSetNumber	the result set number
1: 	 * @param oneRowRightSide	ignored
1: 	 * @param optimizerEstimatedRowCount	self-explanatory
1: 	 * @param optimizerEstimatedCost		self-explanatory
0: 	 * @param closeCleanup					self-explanatory
1:      */
0:     public MergeJoinResultSet(NoPutResultSet leftResultSet,
1: 								   int leftNumCols,
1: 								   NoPutResultSet rightResultSet,
1: 								   int rightNumCols,
1: 								   Activation activation,
1: 								   GeneratedMethod leftGreaterThanRight,
1: 								   GeneratedMethod restriction,
1: 								   int resultSetNumber,
1: 								   boolean oneRowRightSide,
1: 								   boolean notExistsRightSide,
1: 								   double optimizerEstimatedRowCount,
0: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
1:     {
1: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
1: 			  activation, restriction, resultSetNumber, 
1: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
0: 			  optimizerEstimatedCost, closeCleanup);
1: 
1: 		this.leftGreaterThanRight = leftGreaterThanRight;
1:     }
1: 
1: 	//////////////////////////////////////////////////////////////////////
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 	//////////////////////////////////////////////////////////////////////
1: 	/**
1:      * Return the requested values computed
1:      * from the next row (if any) for which
1:      * the restriction evaluates to true.
1:      * <p>
1:      * restriction parameters
1:      * are evaluated for each row.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
1: 	 * @return the next row in the join result
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (! isOpen)
1: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
1: 
1: 		if (!isRightOpen)
1: 		{
1: 			openRight();
1: 		}
1: 
1: 		int compareResult;
1: 
1: 		/*
1: 		** For each row in the outer table
1: 		*/
1: 		while (leftRow != null)
1: 		{
1: 			/*
1: 			** If outer > inner, then go to the
1: 			** next row in the inner table
1: 			*/
1: 			while ((compareResult = ((Integer)leftGreaterThanRight.invoke(activation)).intValue()) 
1: 						== GREATER_THAN)
1: 			{
1: 				rightRow = rightResultSet.getNextRowCore();
1: 				rowsSeenRight++;
1: 
1: 				/*
1: 				** If there are no more rows in the right
1: 				** result set, then done.
1: 				*/
1: 				if (rightRow == null)
1: 				{
1: 		   			clearCurrentRow();
1: 					return (ExecRow)null;
1: 				}
1: 			}
1: 
1: 			/*
1: 			** If they match and the restriction passes,
1: 			** then return the row.
1: 			*/
1: 			if ((compareResult == EQUAL) && restrictionIsTrue())
1: 			{
1: 				ExecRow returnRow = getReturnRow(leftRow, rightRow);
1: 
1: 				/*
1: 				** Move the left scan up one for the next
1: 				** getNextRowCore() call.
1: 				*/
1: 				leftRow = leftResultSet.getNextRowCore();
1: 
1: 				return returnRow;
1: 			}
1: 
1: 			/*
1: 			** Next row left
1: 			*/	
1: 			leftRow = leftResultSet.getNextRowCore();
1: 			rowsSeenLeft++;
1: 		}
1: 
1: 		clearCurrentRow();
1: 		return (ExecRow)null;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT( isOpen, "MergeJoinResultSet not open");
1: 
1: 	    if ( isOpen )
1: 	    {
1: 
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 		   clearCurrentRow();
1: 
1: 			super.close();
1: 	    }
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	// SERVILE METHODS
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 	private ExecRow getReturnRow(ExecRow leftRow, ExecRow rightRow)
1: 		throws StandardException
1: 	{
1: 		int colInCtr;
1: 		int colOutCtr;
1: 
1: 		/* Merge the rows, doing just in time allocation for mergedRow.
1: 		 * (By convention, left Row is to left of right Row.)
1: 		 */
1: 		if (mergedRow == null)
1: 		{
1: 			mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
1: 		}
1: 
1: 		for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
1: 			 colInCtr++, colOutCtr++)
1: 		{
0: 				 mergedRow.setColumn(colOutCtr, 
0: 									 leftRow.getColumn(colInCtr));
1: 		}
1: 
1: 		for (colInCtr = 1; colInCtr <= rightNumCols; 
1: 			 colInCtr++, colOutCtr++)
1: 		{
0: 				 mergedRow.setColumn(colOutCtr, 
0: 									 rightRow.getColumn(colInCtr));
1: 		}
1: 
1: 		setCurrentRow(mergedRow);
1: 		rowsReturned++;
1: 		nextTime += getElapsedMillis(beginTime);
1: 
1: 		return mergedRow;
1: 	}
1: 
1: 	private boolean restrictionIsTrue()
1: 		throws StandardException
1: 	{
1: 		if (restriction != null)
1: 		{
1: 	    	DataValueDescriptor restrictBoolean =
1: 				(DataValueDescriptor) restriction.invoke(activation);
1: 
1: 	        /*
1: 			** if the result is null, we make it false --
1: 			** so the row won't be returned.
1: 			*/
1: 			if (restrictBoolean.isNull() ||
1: 					!restrictBoolean.getBoolean())
1: 			{
1: 				/* Update the run time statistics */
1: 				rowsFiltered++;
1: 				return false;
1: 			}
1: 		}
1: 		return true;
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
0: 			  optimizerEstimatedCost, null, closeCleanup);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: /////////////////////////////////////////////
0: // WARNING: THIS HAS NOT BEEN TESTED (OR USED)
0: // YET, SO USE AT YOUR OWN RISK
0: /////////////////////////////////////////////
0: 
0: /**
0:  * Merge two result sets.  The left result set (the outer
0:  * result set) MUST be unique for this to work correctly.
0:  *
0:  */
0: public class MergeJoinResultSet extends JoinResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private static final int GREATER_THAN = 1;
0: 	private static final int EQUAL = 0;
0: 	private static final int LESS_THAN = -1;
0: 
0: 	private GeneratedMethod leftGreaterThanRight;
0: 
0:     /**
0:      * Create a MergeJoinResultSet
0: 	 * 
0: 	 * @param leftResultSet		the left (outer) result set	
0: 	 * @param leftNumCols		columns in left row
0: 	 * @param rightResultSet	the right (outer) result set	
0: 	 * @param rightNumCols		columns in right row
0: 	 * @param activation		activation
0: 	 * @param leftGreaterThanRight a generated method that is used to
0: 	 *			ascertain whether the row from the left result set is
0: 	 *			greater than the row from the right result set.  returns
0: 	 *			1,0,or -1 to indicate greater than, equal, or less than,
0: 	 *			respectively
0: 	 * @param  restriction		generated method for additional qualification
0: 	 * @param resultSetNumber	the result set number
0: 	 * @param oneRowRightSide	ignored
0: 	 * @param optimizerEstimatedRowCount	self-explanatory
0: 	 * @param optimizerEstimatedCost		self-explanatory
0: 	 * @param closeCleanup					self-explanatory
0:      */
0:     public MergeJoinResultSet(NoPutResultSet leftResultSet,
0: 								   int leftNumCols,
0: 								   NoPutResultSet rightResultSet,
0: 								   int rightNumCols,
0: 								   Activation activation,
0: 								   GeneratedMethod leftGreaterThanRight,
0: 								   GeneratedMethod restriction,
0: 								   int resultSetNumber,
0: 								   boolean oneRowRightSide,
0: 								   boolean notExistsRightSide,
0: 								   double optimizerEstimatedRowCount,
0: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
0:     {
0: 		super(leftResultSet, leftNumCols, rightResultSet, rightNumCols,
0: 			  activation, restriction, resultSetNumber, 
0: 			  oneRowRightSide, notExistsRightSide, optimizerEstimatedRowCount, 
0: 			  optimizerEstimatedCost, closeCleanup);
0: 
0: 		this.leftGreaterThanRight = leftGreaterThanRight;
0:     }
0: 
0: 	//////////////////////////////////////////////////////////////////////
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 	//////////////////////////////////////////////////////////////////////
0: 	/**
0:      * Return the requested values computed
0:      * from the next row (if any) for which
0:      * the restriction evaluates to true.
0:      * <p>
0:      * restriction parameters
0:      * are evaluated for each row.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 * @exception StandardException		ResultSetNotOpen thrown if closed
0: 	 * @return the next row in the join result
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (! isOpen)
0: 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
0: 
0: 		if (!isRightOpen)
0: 		{
0: 			openRight();
0: 		}
0: 
0: 		int compareResult;
0: 
0: 		/*
0: 		** For each row in the outer table
0: 		*/
0: 		while (leftRow != null)
0: 		{
0: 			/*
0: 			** If outer > inner, then go to the
0: 			** next row in the inner table
0: 			*/
0: 			while ((compareResult = ((Integer)leftGreaterThanRight.invoke(activation)).intValue()) 
0: 						== GREATER_THAN)
0: 			{
0: 				rightRow = rightResultSet.getNextRowCore();
0: 				rowsSeenRight++;
0: 
0: 				/*
0: 				** If there are no more rows in the right
0: 				** result set, then done.
0: 				*/
0: 				if (rightRow == null)
0: 				{
0: 		   			clearCurrentRow();
0: 					return (ExecRow)null;
0: 				}
0: 			}
0: 
0: 			/*
0: 			** If they match and the restriction passes,
0: 			** then return the row.
0: 			*/
0: 			if ((compareResult == EQUAL) && restrictionIsTrue())
0: 			{
0: 				ExecRow returnRow = getReturnRow(leftRow, rightRow);
0: 
0: 				/*
0: 				** Move the left scan up one for the next
0: 				** getNextRowCore() call.
0: 				*/
0: 				leftRow = leftResultSet.getNextRowCore();
0: 
0: 				return returnRow;
0: 			}
0: 
0: 			/*
0: 			** Next row left
0: 			*/	
0: 			leftRow = leftResultSet.getNextRowCore();
0: 			rowsSeenLeft++;
0: 		}
0: 
0: 		clearCurrentRow();
0: 		return (ExecRow)null;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT( isOpen, "MergeJoinResultSet not open");
0: 
0: 	    if ( isOpen )
0: 	    {
0: 
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 		   clearCurrentRow();
0: 
0: 			super.close();
0: 	    }
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime - leftResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE) -
0: 							  rightResultSet.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	// SERVILE METHODS
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 	private ExecRow getReturnRow(ExecRow leftRow, ExecRow rightRow)
0: 		throws StandardException
0: 	{
0: 		int colInCtr;
0: 		int colOutCtr;
0: 
0: 		/* Merge the rows, doing just in time allocation for mergedRow.
0: 		 * (By convention, left Row is to left of right Row.)
0: 		 */
0: 		if (mergedRow == null)
0: 		{
0: 			mergedRow = getExecutionFactory().getValueRow(leftNumCols + rightNumCols);
0: 		}
0: 
0: 		for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
0: 			 colInCtr++, colOutCtr++)
0: 		{
0: 				 mergedRow.setColumn(colOutCtr, 
0: 									 leftRow.getColumn(colInCtr));
0: 		}
0: 
0: 		for (colInCtr = 1; colInCtr <= rightNumCols; 
0: 			 colInCtr++, colOutCtr++)
0: 		{
0: 				 mergedRow.setColumn(colOutCtr, 
0: 									 rightRow.getColumn(colInCtr));
0: 		}
0: 
0: 		setCurrentRow(mergedRow);
0: 		rowsReturned++;
0: 		nextTime += getElapsedMillis(beginTime);
0: 
0: 		return mergedRow;
0: 	}
0: 
0: 	private boolean restrictionIsTrue()
0: 		throws StandardException
0: 	{
0: 		if (restriction != null)
0: 		{
0: 	    	DataValueDescriptor restrictBoolean =
0: 				(DataValueDescriptor) restriction.invoke(activation);
0: 
0: 	        /*
0: 			** if the result is null, we make it false --
0: 			** so the row won't be returned.
0: 			*/
0: 			if (restrictBoolean.isNull() ||
0: 					!restrictBoolean.getBoolean())
0: 			{
0: 				/* Update the run time statistics */
0: 				rowsFiltered++;
0: 				return false;
0: 			}
0: 		}
0: 		return true;
0: 	}
0: 
0: }
============================================================================