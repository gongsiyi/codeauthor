1:bb40bcb: /*
2:bb40bcb: 
1:bb40bcb:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSEQUENCESRowFactory
1:bb40bcb: 
1:bb40bcb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bb40bcb:    contributor license agreements.  See the NOTICE file distributed with
1:bb40bcb:    this work for additional information regarding copyright ownership.
1:bb40bcb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bb40bcb:    (the "License"); you may not use this file except in compliance with
1:bb40bcb:    the License.  You may obtain a copy of the License at
1:bb40bcb: 
1:bb40bcb:       http://www.apache.org/licenses/LICENSE-2.0
1:bb40bcb: 
1:bb40bcb:    Unless required by applicable law or agreed to in writing, software
1:bb40bcb:    distributed under the License is distributed on an "AS IS" BASIS,
1:bb40bcb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb40bcb:    See the License for the specific language governing permissions and
1:bb40bcb:    limitations under the License.
1:bb40bcb: 
1:bb40bcb: */
1:bb40bcb: 
1:bb40bcb: package org.apache.derby.impl.sql.catalog;
1:bb40bcb: 
1:bb40bcb: import org.apache.derby.catalog.UUID;
1:bb40bcb: import org.apache.derby.catalog.TypeDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:bb40bcb: import org.apache.derby.iapi.sql.execute.ExecRow;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:bb40bcb: import org.apache.derby.iapi.error.StandardException;
1:bb40bcb: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:bb40bcb: import org.apache.derby.iapi.types.DataValueFactory;
1:bb40bcb: import org.apache.derby.iapi.types.DataValueDescriptor;
1:bb40bcb: import org.apache.derby.iapi.types.SQLChar;
1:bb40bcb: import org.apache.derby.iapi.types.SQLVarchar;
1:bb40bcb: import org.apache.derby.iapi.types.UserType;
1:bb40bcb: import org.apache.derby.iapi.types.SQLLongint;
1:bb40bcb: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:bb40bcb: 
1:bb40bcb: import java.sql.Types;
1:bb40bcb: 
1:bb40bcb: /**
1:139ca85:  * Factory for creating a SYSSEQUENCES row. The contract of this table is this:
1:139ca85:  * if the CURRENTVALUE column is null, then the sequence is exhausted and
1:139ca85:  * no more values can be generated from it.
1:bb40bcb:  */
1:bb40bcb: 
1:139ca85: public class SYSSEQUENCESRowFactory extends CatalogRowFactory
1:139ca85: {
1:139ca85:     public static final String TABLENAME_STRING = "SYSSEQUENCES";
1:bb40bcb: 
1:139ca85:     public static final int SYSSEQUENCES_COLUMN_COUNT = 10;
1:bb40bcb:     /* Column #s for sysinfo (1 based) */
1:139ca85:     public static final int SYSSEQUENCES_SEQUENCEID = 1;
1:139ca85:     public static final int SYSSEQUENCES_SEQUENCENAME = 2;
1:139ca85:     public static final int SYSSEQUENCES_SCHEMAID = 3;
1:139ca85:     public static final int SYSSEQUENCES_SEQUENCEDATATYPE = 4;
1:139ca85:     public static final int SYSSEQUENCES_CURRENT_VALUE = 5;
1:139ca85:     public static final int SYSSEQUENCES_START_VALUE = 6;
1:139ca85:     public static final int SYSSEQUENCES_MINIMUM_VALUE = 7;
1:139ca85:     public static final int SYSSEQUENCES_MAXIMUM_VALUE = 8;
1:139ca85:     public static final int SYSSEQUENCES_INCREMENT = 9;
1:139ca85:     public static final int SYSSEQUENCES_CYCLE_OPTION = 10;
1:bb40bcb: 
1:bb40bcb:     private static final int[][] indexColumnPositions =
1:bb40bcb:             {
1:bb40bcb:                     {SYSSEQUENCES_SEQUENCEID},
1:bb40bcb:                     {SYSSEQUENCES_SCHEMAID, SYSSEQUENCES_SEQUENCENAME}
1:bb40bcb:             };
1:bb40bcb: 
1:bb40bcb:     // (Sequence)_ID
1:bb40bcb:     static final int SYSSEQUENCES_INDEX1_ID = 0;
1:bb40bcb:     // (seqeqnce)_NAME_SCHEMAID
1:bb40bcb:     static final int SYSSEQUENCES_INDEX2_ID = 1;
1:bb40bcb: 
1:bb40bcb:     private static final boolean[] uniqueness = null;
1:bb40bcb: 
1:bb40bcb:     private static final String[] uuids = {
1:bb40bcb:             "9810800c-0121-c5e2-e794-00000043e718", // catalog UUID
1:bb40bcb:             "6ea6ffac-0121-c5e6-29e6-00000043e718", // heap UUID
1:bb40bcb:             "7a92cf84-0121-c5fa-caf1-00000043e718", // INDEX1
1:bb40bcb:             "6b138684-0121-c5e9-9114-00000043e718"  // INDEX2
1:bb40bcb:     };
1:bb40bcb: 
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Constructor
1:bb40bcb:      *
1:bb40bcb:      * @param uuidf UUIDFactory
1:bb40bcb:      * @param ef    ExecutionFactory
1:bb40bcb:      * @param dvf   DataValueFactory
1:bb40bcb:      */
1:bb40bcb:     SYSSEQUENCESRowFactory(UUIDFactory uuidf,
1:bb40bcb:                            ExecutionFactory ef,
1:bb40bcb:                            DataValueFactory dvf) {
1:bb40bcb:         super(uuidf, ef, dvf);
1:bb40bcb:         initInfo(SYSSEQUENCES_COLUMN_COUNT, TABLENAME_STRING,
1:bb40bcb:                 indexColumnPositions, uniqueness, uuids);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Make a SYSSEQUENCES row
1:bb40bcb:      *
1:bb40bcb:      * @param td     a sequence descriptor
1:bb40bcb:      * @param parent unused
1:bb40bcb:      * @return Row suitable for inserting into SYSSEQUENCES.
1:bb40bcb:      * @throws org.apache.derby.iapi.error.StandardException
1:bb40bcb:      *          thrown on failure
1:bb40bcb:      */
1:bb40bcb: 
1:bb40bcb:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:bb40bcb:             throws StandardException {
1:bb40bcb:         ExecRow row;
1:bb40bcb:         String oidString = null;
1:bb40bcb:         String sequenceName = null;
1:bb40bcb:         String schemaIdString = null;
1:bb40bcb:         TypeDescriptor typeDesc = null;
1:139ca85:         Long currentValue = null;
1:bb40bcb:         long startValue = 0;
1:bb40bcb:         long minimumValue = 0;
1:bb40bcb:         long maximumValue = 0;
1:bb40bcb:         long increment = 0;
1:139ca85:         boolean canCycle = false;
1:bb40bcb: 
1:bb40bcb: 
1:bb40bcb:         if (td != null) {
1:bb40bcb:             SequenceDescriptor sd = (SequenceDescriptor) td;
1:bb40bcb: 
1:bb40bcb:             UUID oid = sd.getUUID();
1:bb40bcb:             oidString = oid.toString();
1:bb40bcb:             sequenceName = sd.getSequenceName();
1:bb40bcb: 
1:bb40bcb:             UUID schemaId = sd.getSchemaId();
1:bb40bcb:             schemaIdString = schemaId.toString();
1:bb40bcb: 
1:bb40bcb:             typeDesc = sd.getDataType().getCatalogType();
1:bb40bcb: 
1:bb40bcb:             currentValue = sd.getCurrentValue();
1:bb40bcb:             startValue = sd.getStartValue();
1:bb40bcb:             minimumValue = sd.getMinimumValue();
1:bb40bcb:             maximumValue = sd.getMaximumValue();
1:bb40bcb:             increment = sd.getIncrement();
1:139ca85:             canCycle = sd.canCycle();
1:bb40bcb:         }
1:bb40bcb: 
1:bb40bcb:         /* Build the row to insert */
1:bb40bcb:         row = getExecutionFactory().getValueRow(SYSSEQUENCES_COLUMN_COUNT);
1:bb40bcb: 
1:bb40bcb:         /* 1st column is UUID */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_SEQUENCEID, new SQLChar(oidString));
1:bb40bcb: 
1:bb40bcb:         /* 2nd column is SEQUENCENAME */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_SEQUENCENAME, new SQLVarchar(sequenceName));
1:bb40bcb: 
1:bb40bcb:         /* 3nd column is SCHEMAID */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_SCHEMAID, new SQLChar(schemaIdString));
1:bb40bcb: 
1:bb40bcb:         /* 4th column is SEQUENCEDATATYPE */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_SEQUENCEDATATYPE, new UserType(typeDesc));
1:bb40bcb: 
1:bb40bcb:         /* 5th column is CURRENTVALUE */
1:139ca85:         SQLLongint curVal;
1:139ca85:         if ( currentValue == null ) { curVal = new SQLLongint(); }
1:139ca85:         else { curVal = new SQLLongint( currentValue.longValue() ); }
1:139ca85:         row.setColumn(SYSSEQUENCES_CURRENT_VALUE, curVal );
1:bb40bcb: 
1:bb40bcb:         /* 6th column is STARTVALUE */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_START_VALUE, new SQLLongint(startValue));
1:bb40bcb: 
1:bb40bcb:         /* 7th column is MINIMUMVALUE */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_MINIMUM_VALUE, new SQLLongint(minimumValue));
1:bb40bcb: 
1:bb40bcb:         /* 8th column is MAXIMUMVALUE */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_MAXIMUM_VALUE, new SQLLongint(maximumValue));
1:bb40bcb: 
1:bb40bcb:         /* 9th column is INCREMENT */
1:bb40bcb:         row.setColumn(SYSSEQUENCES_INCREMENT, new SQLLongint(increment));
1:bb40bcb: 
1:bb40bcb:         /* 10th column is CYCLEOPTION */
1:139ca85:         row.setColumn(SYSSEQUENCES_CYCLE_OPTION, new SQLChar(canCycle ? "Y" : "N"));
1:bb40bcb: 
1:bb40bcb:         return row;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Make an  Tuple Descriptor out of a SYSSEQUENCES row
1:bb40bcb:      *
1:bb40bcb:      * @param row                   a SYSSEQUENCES row
1:bb40bcb:      * @param parentTupleDescriptor unused
1:bb40bcb:      * @param dd                    dataDictionary
1:bb40bcb:      * @return a  descriptor equivalent to a SYSSEQUENCES row
1:bb40bcb:      * @throws org.apache.derby.iapi.error.StandardException
1:bb40bcb:      *          thrown on failure
1:bb40bcb:      */
1:bb40bcb:     public TupleDescriptor buildDescriptor
1:bb40bcb:             (ExecRow row,
1:bb40bcb:              TupleDescriptor parentTupleDescriptor,
1:bb40bcb:              DataDictionary dd)
1:bb40bcb:             throws StandardException {
1:bb40bcb: 
1:bb40bcb:         DataValueDescriptor col;
1:bb40bcb:         SequenceDescriptor descriptor;
1:bb40bcb:         UUID ouuid;
1:bb40bcb:         String sequenceName;
1:bb40bcb:         UUID suuid;
1:139ca85:         Long currentValue;
1:bb40bcb:         long startValue;
1:bb40bcb:         long minimumValue;
1:bb40bcb:         long maximumValue;
1:bb40bcb:         long increment;
1:bb40bcb:         String cycleOption;
1:bb40bcb: 
1:bb40bcb:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:bb40bcb: 
1:bb40bcb:         if (SanityManager.DEBUG) {
1:bb40bcb:             SanityManager.ASSERT(row.nColumns() == SYSSEQUENCES_COLUMN_COUNT,
1:bb40bcb:                     "Wrong number of columns for a SYSSEQUENCES row");
1:bb40bcb:         }
1:bb40bcb: 
1:bb40bcb:         // first column is uuid of this sequence descriptor (char(36))
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_SEQUENCEID);
1:bb40bcb:         String oidString = col.getString();
1:bb40bcb:         ouuid = getUUIDFactory().recreateUUID(oidString);
1:bb40bcb: 
1:bb40bcb:         // second column is sequenceName (varchar(128))
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_SEQUENCENAME);
1:bb40bcb:         sequenceName = col.getString();
1:bb40bcb: 
1:bb40bcb:         // third column is uuid of this sequence descriptors schema (char(36))
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_SCHEMAID);
1:bb40bcb:         String schemaIdString = col.getString();
1:bb40bcb:         suuid = getUUIDFactory().recreateUUID(schemaIdString);
1:bb40bcb: 
1:bb40bcb:         // fourth column is the data type of this sequene generator
1:80eb35f:         /*
1:80eb35f:           ** What is stored in the column is a TypeDescriptorImpl, which
1:80eb35f:           ** points to a BaseTypeIdImpl.  These are simple types that are
1:80eb35f:           ** intended to be movable to the client, so they don't have
1:80eb35f:           ** the entire implementation.  We need to wrap them in DataTypeServices
1:80eb35f:           ** and TypeId objects that contain the full implementations for
1:80eb35f:           ** language processing.
1:80eb35f:           */
1:80eb35f:         TypeDescriptor catalogType = (TypeDescriptor) row.getColumn(SYSSEQUENCES_SEQUENCEDATATYPE).
1:bb40bcb:                 getObject();
1:80eb35f:         DataTypeDescriptor dataTypeServices =
1:80eb35f:                 DataTypeDescriptor.getType(catalogType);
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_CURRENT_VALUE);
1:139ca85:         if ( col.isNull() ) { currentValue = null; }
1:ce40a31:         else { currentValue = col.getLong(); }
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_START_VALUE);
1:bb40bcb:         startValue = col.getLong();
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_MINIMUM_VALUE);
1:bb40bcb:         minimumValue = col.getLong();
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_MAXIMUM_VALUE);
1:bb40bcb:         maximumValue = col.getLong();
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_INCREMENT);
1:bb40bcb:         increment = col.getLong();
1:bb40bcb: 
1:bb40bcb:         col = row.getColumn(SYSSEQUENCES_CYCLE_OPTION);
1:bb40bcb:         cycleOption = col.getString();
1:bb40bcb: 
1:bb40bcb:         descriptor = ddg.newSequenceDescriptor
1:bb40bcb:                 (dd.getSchemaDescriptor(suuid, null),
1:bb40bcb:                         ouuid,
1:bb40bcb:                         sequenceName,
1:80eb35f:                         dataTypeServices,
1:bb40bcb:                         currentValue,
1:bb40bcb:                         startValue,
1:bb40bcb:                         minimumValue,
1:bb40bcb:                         maximumValue,
1:bb40bcb:                         increment,
1:bb40bcb:                         cycleOption.equals("Y") ? true : false);
1:bb40bcb: 
1:bb40bcb:         return descriptor;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Builds a list of columns suitable for creating this Catalog.
1:bb40bcb:      *
1:bb40bcb:      * @return array of SystemColumn suitable for making this catalog.
1:bb40bcb:      */
1:2a5922a:     public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:2a5922a:     {
1:bb40bcb:         return new SystemColumn[]{
1:bb40bcb: 
1:bb40bcb:                 SystemColumnImpl.getUUIDColumn("SEQUENCEID", false),
1:bb40bcb:                 SystemColumnImpl.getIdentifierColumn("SEQUENCENAME", false),
1:bb40bcb:                 SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:bb40bcb:                 SystemColumnImpl.getJavaColumn("SEQUENCEDATATYPE",
1:bb40bcb:                         "org.apache.derby.catalog.TypeDescriptor", false),
1:bb40bcb:                 SystemColumnImpl.getColumn("CURRENTVALUE", Types.BIGINT, true),
1:bb40bcb:                 SystemColumnImpl.getColumn("STARTVALUE", Types.BIGINT, false),
1:bb40bcb:                 SystemColumnImpl.getColumn("MINIMUMVALUE", Types.BIGINT, false),
1:bb40bcb:                 SystemColumnImpl.getColumn("MAXIMUMVALUE", Types.BIGINT, false),
1:bb40bcb:                 SystemColumnImpl.getColumn("INCREMENT", Types.BIGINT, false),
1:bb40bcb:                 SystemColumnImpl.getIndicatorColumn("CYCLEOPTION")
1:bb40bcb:         };
1:bb40bcb:     }
1:bb40bcb: }
1:bb40bcb: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:         else { currentValue = col.getLong(); }
commit:139ca85
/////////////////////////////////////////////////////////////////////////
1:  * Factory for creating a SYSSEQUENCES row. The contract of this table is this:
1:  * if the CURRENTVALUE column is null, then the sequence is exhausted and
1:  * no more values can be generated from it.
1: public class SYSSEQUENCESRowFactory extends CatalogRowFactory
1: {
1:     public static final String TABLENAME_STRING = "SYSSEQUENCES";
1:     public static final int SYSSEQUENCES_COLUMN_COUNT = 10;
1:     public static final int SYSSEQUENCES_SEQUENCEID = 1;
1:     public static final int SYSSEQUENCES_SEQUENCENAME = 2;
1:     public static final int SYSSEQUENCES_SCHEMAID = 3;
1:     public static final int SYSSEQUENCES_SEQUENCEDATATYPE = 4;
1:     public static final int SYSSEQUENCES_CURRENT_VALUE = 5;
1:     public static final int SYSSEQUENCES_START_VALUE = 6;
1:     public static final int SYSSEQUENCES_MINIMUM_VALUE = 7;
1:     public static final int SYSSEQUENCES_MAXIMUM_VALUE = 8;
1:     public static final int SYSSEQUENCES_INCREMENT = 9;
1:     public static final int SYSSEQUENCES_CYCLE_OPTION = 10;
/////////////////////////////////////////////////////////////////////////
1:         Long currentValue = null;
1:         boolean canCycle = false;
/////////////////////////////////////////////////////////////////////////
1:             canCycle = sd.canCycle();
/////////////////////////////////////////////////////////////////////////
1:         SQLLongint curVal;
1:         if ( currentValue == null ) { curVal = new SQLLongint(); }
1:         else { curVal = new SQLLongint( currentValue.longValue() ); }
1:         row.setColumn(SYSSEQUENCES_CURRENT_VALUE, curVal );
/////////////////////////////////////////////////////////////////////////
1:         row.setColumn(SYSSEQUENCES_CYCLE_OPTION, new SQLChar(canCycle ? "Y" : "N"));
/////////////////////////////////////////////////////////////////////////
1:         Long currentValue;
/////////////////////////////////////////////////////////////////////////
1:         if ( col.isNull() ) { currentValue = null; }
0:         else { currentValue = new Long( col.getLong() ) ; }
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:     public SystemColumn[] buildColumnList()
1:         throws StandardException
1:     {
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1:         /*
1:           ** What is stored in the column is a TypeDescriptorImpl, which
1:           ** points to a BaseTypeIdImpl.  These are simple types that are
1:           ** intended to be movable to the client, so they don't have
1:           ** the entire implementation.  We need to wrap them in DataTypeServices
1:           ** and TypeId objects that contain the full implementations for
1:           ** language processing.
1:           */
1:         TypeDescriptor catalogType = (TypeDescriptor) row.getColumn(SYSSEQUENCES_SEQUENCEDATATYPE).
1:         DataTypeDescriptor dataTypeServices =
1:                 DataTypeDescriptor.getType(catalogType);
/////////////////////////////////////////////////////////////////////////
1:                         dataTypeServices,
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSEQUENCESRowFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
1: import org.apache.derby.iapi.types.UserType;
1: import org.apache.derby.iapi.types.SQLLongint;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
1: import java.sql.Types;
1: 
1: /**
0:  * Factory for creating a SYSSEQUENCES row.
1:  */
1: 
0: public class SYSSEQUENCESRowFactory extends CatalogRowFactory {
1: 
0:     private static final String TABLENAME_STRING = "SYSSEQUENCES";
1: 
0:     private static final int SYSSEQUENCES_COLUMN_COUNT = 10;
1:     /* Column #s for sysinfo (1 based) */
0:     private static final int SYSSEQUENCES_SEQUENCEID = 1;
0:     private static final int SYSSEQUENCES_SEQUENCENAME = 2;
0:     private static final int SYSSEQUENCES_SCHEMAID = 3;
0:     private static final int SYSSEQUENCES_SEQUENCEDATATYPE = 4;
0:     private static final int SYSSEQUENCES_CURRENT_VALUE = 5;
0:     private static final int SYSSEQUENCES_START_VALUE = 6;
0:     private static final int SYSSEQUENCES_MINIMUM_VALUE = 7;
0:     private static final int SYSSEQUENCES_MAXIMUM_VALUE = 8;
0:     private static final int SYSSEQUENCES_INCREMENT = 9;
0:     private static final int SYSSEQUENCES_CYCLE_OPTION = 10;
1: 
1:     private static final int[][] indexColumnPositions =
1:             {
1:                     {SYSSEQUENCES_SEQUENCEID},
1:                     {SYSSEQUENCES_SCHEMAID, SYSSEQUENCES_SEQUENCENAME}
1:             };
1: 
1:     // (Sequence)_ID
1:     static final int SYSSEQUENCES_INDEX1_ID = 0;
1:     // (seqeqnce)_NAME_SCHEMAID
1:     static final int SYSSEQUENCES_INDEX2_ID = 1;
1: 
1:     private static final boolean[] uniqueness = null;
1: 
1:     private static final String[] uuids = {
1:             "9810800c-0121-c5e2-e794-00000043e718", // catalog UUID
1:             "6ea6ffac-0121-c5e6-29e6-00000043e718", // heap UUID
1:             "7a92cf84-0121-c5fa-caf1-00000043e718", // INDEX1
1:             "6b138684-0121-c5e9-9114-00000043e718"  // INDEX2
1:     };
1: 
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param uuidf UUIDFactory
1:      * @param ef    ExecutionFactory
1:      * @param dvf   DataValueFactory
1:      */
1:     SYSSEQUENCESRowFactory(UUIDFactory uuidf,
1:                            ExecutionFactory ef,
1:                            DataValueFactory dvf) {
1:         super(uuidf, ef, dvf);
1:         initInfo(SYSSEQUENCES_COLUMN_COUNT, TABLENAME_STRING,
1:                 indexColumnPositions, uniqueness, uuids);
1:     }
1: 
1:     /**
1:      * Make a SYSSEQUENCES row
1:      *
1:      * @param td     a sequence descriptor
1:      * @param parent unused
1:      * @return Row suitable for inserting into SYSSEQUENCES.
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          thrown on failure
1:      */
1: 
1:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:             throws StandardException {
1:         ExecRow row;
1:         String oidString = null;
1:         String sequenceName = null;
1:         String schemaIdString = null;
1:         TypeDescriptor typeDesc = null;
0:         long currentValue = 0;
1:         long startValue = 0;
1:         long minimumValue = 0;
1:         long maximumValue = 0;
1:         long increment = 0;
0:         boolean cycle = false;
1: 
1: 
1:         if (td != null) {
1:             SequenceDescriptor sd = (SequenceDescriptor) td;
1: 
1:             UUID oid = sd.getUUID();
1:             oidString = oid.toString();
1:             sequenceName = sd.getSequenceName();
1: 
1:             UUID schemaId = sd.getSchemaId();
1:             schemaIdString = schemaId.toString();
1: 
1:             typeDesc = sd.getDataType().getCatalogType();
1: 
1:             currentValue = sd.getCurrentValue();
1:             startValue = sd.getStartValue();
1:             minimumValue = sd.getMinimumValue();
1:             maximumValue = sd.getMaximumValue();
1:             increment = sd.getIncrement();
0:             cycle = sd.isCycle();
1:         }
1: 
1:         /* Build the row to insert */
1:         row = getExecutionFactory().getValueRow(SYSSEQUENCES_COLUMN_COUNT);
1: 
1:         /* 1st column is UUID */
1:         row.setColumn(SYSSEQUENCES_SEQUENCEID, new SQLChar(oidString));
1: 
1:         /* 2nd column is SEQUENCENAME */
1:         row.setColumn(SYSSEQUENCES_SEQUENCENAME, new SQLVarchar(sequenceName));
1: 
1:         /* 3nd column is SCHEMAID */
1:         row.setColumn(SYSSEQUENCES_SCHEMAID, new SQLChar(schemaIdString));
1: 
1:         /* 4th column is SEQUENCEDATATYPE */
1:         row.setColumn(SYSSEQUENCES_SEQUENCEDATATYPE, new UserType(typeDesc));
1: 
1:         /* 5th column is CURRENTVALUE */
0:         row.setColumn(SYSSEQUENCES_CURRENT_VALUE, new SQLLongint(currentValue));
1: 
1:         /* 6th column is STARTVALUE */
1:         row.setColumn(SYSSEQUENCES_START_VALUE, new SQLLongint(startValue));
1: 
1:         /* 7th column is MINIMUMVALUE */
1:         row.setColumn(SYSSEQUENCES_MINIMUM_VALUE, new SQLLongint(minimumValue));
1: 
1:         /* 8th column is MAXIMUMVALUE */
1:         row.setColumn(SYSSEQUENCES_MAXIMUM_VALUE, new SQLLongint(maximumValue));
1: 
1:         /* 9th column is INCREMENT */
1:         row.setColumn(SYSSEQUENCES_INCREMENT, new SQLLongint(increment));
1: 
1:         /* 10th column is CYCLEOPTION */
0:         row.setColumn(SYSSEQUENCES_CYCLE_OPTION, new SQLChar(cycle ? "Y" : "N"));
1: 
1:         return row;
1:     }
1: 
1:     /**
1:      * Make an  Tuple Descriptor out of a SYSSEQUENCES row
1:      *
1:      * @param row                   a SYSSEQUENCES row
1:      * @param parentTupleDescriptor unused
1:      * @param dd                    dataDictionary
1:      * @return a  descriptor equivalent to a SYSSEQUENCES row
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          thrown on failure
1:      */
1:     public TupleDescriptor buildDescriptor
1:             (ExecRow row,
1:              TupleDescriptor parentTupleDescriptor,
1:              DataDictionary dd)
1:             throws StandardException {
1: 
1:         DataValueDescriptor col;
1:         SequenceDescriptor descriptor;
1:         UUID ouuid;
1:         String sequenceName;
1:         UUID suuid;
0:         long currentValue;
1:         long startValue;
1:         long minimumValue;
1:         long maximumValue;
1:         long increment;
1:         String cycleOption;
1: 
1:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(row.nColumns() == SYSSEQUENCES_COLUMN_COUNT,
1:                     "Wrong number of columns for a SYSSEQUENCES row");
1:         }
1: 
1:         // first column is uuid of this sequence descriptor (char(36))
1:         col = row.getColumn(SYSSEQUENCES_SEQUENCEID);
1:         String oidString = col.getString();
1:         ouuid = getUUIDFactory().recreateUUID(oidString);
1: 
1:         // second column is sequenceName (varchar(128))
1:         col = row.getColumn(SYSSEQUENCES_SEQUENCENAME);
1:         sequenceName = col.getString();
1: 
1:         // third column is uuid of this sequence descriptors schema (char(36))
1:         col = row.getColumn(SYSSEQUENCES_SCHEMAID);
1:         String schemaIdString = col.getString();
1:         suuid = getUUIDFactory().recreateUUID(schemaIdString);
1: 
1:         // fourth column is the data type of this sequene generator
0:         DataTypeDescriptor dataType = (DataTypeDescriptor) row.getColumn(SYSSEQUENCES_SEQUENCEDATATYPE).
1:                 getObject();
1: 
1:         col = row.getColumn(SYSSEQUENCES_CURRENT_VALUE);
0:         currentValue = col.getLong();
1: 
1:         col = row.getColumn(SYSSEQUENCES_START_VALUE);
1:         startValue = col.getLong();
1: 
1:         col = row.getColumn(SYSSEQUENCES_MINIMUM_VALUE);
1:         minimumValue = col.getLong();
1: 
1:         col = row.getColumn(SYSSEQUENCES_MAXIMUM_VALUE);
1:         maximumValue = col.getLong();
1: 
1:         col = row.getColumn(SYSSEQUENCES_INCREMENT);
1:         increment = col.getLong();
1: 
1:         col = row.getColumn(SYSSEQUENCES_CYCLE_OPTION);
1:         cycleOption = col.getString();
1: 
1:         descriptor = ddg.newSequenceDescriptor
1:                 (dd.getSchemaDescriptor(suuid, null),
1:                         ouuid,
1:                         sequenceName,
0:                         dataType,
1:                         currentValue,
1:                         startValue,
1:                         minimumValue,
1:                         maximumValue,
1:                         increment,
1:                         cycleOption.equals("Y") ? true : false);
1: 
1:         return descriptor;
1:     }
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
0:     public SystemColumn[] buildColumnList() {
1:         return new SystemColumn[]{
1: 
1:                 SystemColumnImpl.getUUIDColumn("SEQUENCEID", false),
1:                 SystemColumnImpl.getIdentifierColumn("SEQUENCENAME", false),
1:                 SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:                 SystemColumnImpl.getJavaColumn("SEQUENCEDATATYPE",
1:                         "org.apache.derby.catalog.TypeDescriptor", false),
1:                 SystemColumnImpl.getColumn("CURRENTVALUE", Types.BIGINT, true),
1:                 SystemColumnImpl.getColumn("STARTVALUE", Types.BIGINT, false),
1:                 SystemColumnImpl.getColumn("MINIMUMVALUE", Types.BIGINT, false),
1:                 SystemColumnImpl.getColumn("MAXIMUMVALUE", Types.BIGINT, false),
1:                 SystemColumnImpl.getColumn("INCREMENT", Types.BIGINT, false),
1:                 SystemColumnImpl.getIndicatorColumn("CYCLEOPTION")
1:         };
1:     }
1: }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
============================================================================