1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.ConglomPropertyQueryable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: ConglomPropertyable provides the interfaces to read properties from a 
1:eac0369: conglomerate.
1:eac0369: <p>
1:eac0369: RESOLVE - If language ever wants these interfaces on a ScanController it 
1:eac0369:           should not be too difficult to add them.
1:eac0369: 
1:eac0369: @see ConglomerateController
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface ConglomPropertyQueryable
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Request the system properties associated with a table. 
1:eac0369:      * <p>
1:eac0369:      * Request the value of properties that are associated with a table.  The
1:eac0369:      * following properties can be requested:
1:eac0369:      *     derby.storage.pageSize 
1:eac0369:      *     derby.storage.pageReservedSpace
1:eac0369:      *     derby.storage.minimumRecordSize
1:eac0369:      *     derby.storage.initialPages
1:eac0369:      * <p>
1:eac0369:      * To get the value of a particular property add it to the property list,
1:eac0369:      * and on return the value of the property will be set to it's current 
1:eac0369:      * value.  For example:
1:eac0369:      *
1:eac0369:      * get_prop(ConglomerateController cc)
1:eac0369:      * {
1:eac0369:      *     Properties prop = new Properties();
1:eac0369:      *     prop.put("derby.storage.pageSize", "");
1:eac0369:      *     cc.getTableProperties(prop);
1:eac0369:      *
1:eac0369:      *     System.out.println(
1:eac0369:      *         "table's page size = " + 
1:eac0369:      *         prop.getProperty("derby.storage.pageSize");
1:eac0369:      * }
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     void getTableProperties(Properties prop)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Request set of properties associated with a table. 
1:eac0369:      * <p>
1:eac0369:      * Returns a property object containing all properties that the store
1:eac0369:      * knows about, which are stored persistently by the store.  This set
1:eac0369:      * of properties may vary from implementation to implementation of the
1:eac0369:      * store.
1:eac0369:      * <p>
1:eac0369:      * This call is meant to be used only for internal query of the properties
1:eac0369:      * by jbms, for instance by language during bulk insert so that it can
1:eac0369:      * create a new conglomerate which exactly matches the properties that
1:eac0369:      * the original container was created with.  This call should not be used
1:eac0369:      * by the user interface to present properties to users as it may contain
1:eac0369:      * properties that are meant to be internal to jbms.  Some properties are 
1:eac0369:      * meant only to be specified by jbms code and not by users on the command
1:eac0369:      * line.
1:eac0369:      * <p>
1:eac0369:      * Note that not all properties passed into createConglomerate() are stored
1:eac0369:      * persistently, and that set may vary by store implementation.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to add properties to.  If null, routine will
1:eac0369:      *               create a new Properties object, fill it in and return it.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     Properties getInternalTablePropertySet(Properties prop)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.ConglomPropertyQueryable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1: ConglomPropertyable provides the interfaces to read properties from a 
1: conglomerate.
1: <p>
1: RESOLVE - If language ever wants these interfaces on a ScanController it 
1:           should not be too difficult to add them.
1: 
1: @see ConglomerateController
1: 
1: **/
1: 
1: public interface ConglomPropertyQueryable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**
1:      * Request the system properties associated with a table. 
1:      * <p>
1:      * Request the value of properties that are associated with a table.  The
1:      * following properties can be requested:
1:      *     derby.storage.pageSize 
1:      *     derby.storage.pageReservedSpace
1:      *     derby.storage.minimumRecordSize
1:      *     derby.storage.initialPages
1:      * <p>
1:      * To get the value of a particular property add it to the property list,
1:      * and on return the value of the property will be set to it's current 
1:      * value.  For example:
1:      *
1:      * get_prop(ConglomerateController cc)
1:      * {
1:      *     Properties prop = new Properties();
1:      *     prop.put("derby.storage.pageSize", "");
1:      *     cc.getTableProperties(prop);
1:      *
1:      *     System.out.println(
1:      *         "table's page size = " + 
1:      *         prop.getProperty("derby.storage.pageSize");
1:      * }
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     void getTableProperties(Properties prop)
1: 		throws StandardException;
1: 
1:     /**
1:      * Request set of properties associated with a table. 
1:      * <p>
1:      * Returns a property object containing all properties that the store
1:      * knows about, which are stored persistently by the store.  This set
1:      * of properties may vary from implementation to implementation of the
1:      * store.
1:      * <p>
1:      * This call is meant to be used only for internal query of the properties
1:      * by jbms, for instance by language during bulk insert so that it can
1:      * create a new conglomerate which exactly matches the properties that
1:      * the original container was created with.  This call should not be used
1:      * by the user interface to present properties to users as it may contain
1:      * properties that are meant to be internal to jbms.  Some properties are 
1:      * meant only to be specified by jbms code and not by users on the command
1:      * line.
1:      * <p>
1:      * Note that not all properties passed into createConglomerate() are stored
1:      * persistently, and that set may vary by store implementation.
1:      *
1:      * @param prop   Property list to add properties to.  If null, routine will
1:      *               create a new Properties object, fill it in and return it.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     Properties getInternalTablePropertySet(Properties prop)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0: ConglomPropertyable provides the interfaces to read properties from a 
0: conglomerate.
0: <p>
0: RESOLVE - If language ever wants these interfaces on a ScanController it 
0:           should not be too difficult to add them.
0: 
0: @see ConglomerateController
0: 
0: **/
0: 
0: public interface ConglomPropertyQueryable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**
0:      * Request the system properties associated with a table. 
0:      * <p>
0:      * Request the value of properties that are associated with a table.  The
0:      * following properties can be requested:
0:      *     derby.storage.pageSize 
0:      *     derby.storage.pageReservedSpace
0:      *     derby.storage.minimumRecordSize
0:      *     derby.storage.initialPages
0:      * <p>
0:      * To get the value of a particular property add it to the property list,
0:      * and on return the value of the property will be set to it's current 
0:      * value.  For example:
0:      *
0:      * get_prop(ConglomerateController cc)
0:      * {
0:      *     Properties prop = new Properties();
0:      *     prop.put("derby.storage.pageSize", "");
0:      *     cc.getTableProperties(prop);
0:      *
0:      *     System.out.println(
0:      *         "table's page size = " + 
0:      *         prop.getProperty("derby.storage.pageSize");
0:      * }
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     void getTableProperties(Properties prop)
0: 		throws StandardException;
0: 
0:     /**
0:      * Request set of properties associated with a table. 
0:      * <p>
0:      * Returns a property object containing all properties that the store
0:      * knows about, which are stored persistently by the store.  This set
0:      * of properties may vary from implementation to implementation of the
0:      * store.
0:      * <p>
0:      * This call is meant to be used only for internal query of the properties
0:      * by jbms, for instance by language during bulk insert so that it can
0:      * create a new conglomerate which exactly matches the properties that
0:      * the original container was created with.  This call should not be used
0:      * by the user interface to present properties to users as it may contain
0:      * properties that are meant to be internal to jbms.  Some properties are 
0:      * meant only to be specified by jbms code and not by users on the command
0:      * line.
0:      * <p>
0:      * Note that not all properties passed into createConglomerate() are stored
0:      * persistently, and that set may vary by store implementation.
0:      *
0:      * @param prop   Property list to add properties to.  If null, routine will
0:      *               create a new Properties object, fill it in and return it.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     Properties getInternalTablePropertySet(Properties prop)
0: 		throws StandardException;
0: }
============================================================================