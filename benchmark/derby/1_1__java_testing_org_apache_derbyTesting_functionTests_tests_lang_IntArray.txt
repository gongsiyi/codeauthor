1:7a2d290: /*
1:7a2d290: 
1:7a2d290:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IntArray
1:7a2d290: 
1:7a2d290:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a2d290:    contributor license agreements.  See the NOTICE file distributed with
1:7a2d290:    this work for additional information regarding copyright ownership.
1:7a2d290:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a2d290:    (the "License"); you may not use this file except in compliance with
1:7a2d290:    the License.  You may obtain a copy of the License at
1:7a2d290: 
1:7a2d290:      http://www.apache.org/licenses/LICENSE-2.0
1:7a2d290: 
1:7a2d290:    Unless required by applicable law or agreed to in writing, software
1:7a2d290:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a2d290:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a2d290:    See the License for the specific language governing permissions and
1:7a2d290:    limitations under the License.
1:7a2d290: 
1:7a2d290:  */
1:7a2d290: 
1:7a2d290: /**
1:7a2d290:  * A UDT which contains an array of ints.
1:7a2d290:  */
1:7a2d290: package org.apache.derbyTesting.functionTests.tests.lang;
1:7a2d290: 
1:7a2d290: import java.io.Externalizable;
1:7a2d290: import java.io.IOException;
1:7a2d290: import java.io.ObjectOutput;
1:7a2d290: import java.io.ObjectInput;
1:7a2d290: 
1:7a2d290: public class IntArray implements Externalizable, Comparable
1:7a2d290: {
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // CONSTANTS
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // STATE
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     private int[] _data;
1:7a2d290:     
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // CONSTRUCTOR
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public IntArray() {}
1:7a2d290: 
1:7a2d290:     public IntArray( int[] data )
1:7a2d290:     {
1:7a2d290:         _data = data;
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // FUNCTIONS
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:d3347b5:     public static IntArray makeIntArray( int... values )
1:d3347b5:     {
1:d3347b5:         return new IntArray( values );
1:d3347b5:     }
1:d3347b5: 
1:7a2d290:     public static IntArray makeIntArray( int length )
1:7a2d290:     {
1:7a2d290:         return new IntArray( new int[ length ] );
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public static IntArray setCell( IntArray array, int cellNumber, int cellValue )
1:7a2d290:     {
1:7a2d290:         array._data[ cellNumber ] = cellValue;
1:7a2d290: 
1:7a2d290:         return array;
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public static int getCell( IntArray array, int cellNumber ) { return array._data[ cellNumber ]; }
1:7a2d290:     
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // Externalizable BEHAVIOR
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public void writeExternal( ObjectOutput out ) throws IOException
1:7a2d290:     {
1:7a2d290:         int length = _data.length;
1:7a2d290: 
1:7a2d290:         out.writeInt( length );
1:7a2d290: 
1:7a2d290:         for ( int i = 0; i < length; i++ ) { out.writeInt( _data[ i ] ); }
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public void readExternal( ObjectInput in ) throws IOException
1:7a2d290:     {
1:7a2d290:         int length = in.readInt();
1:7a2d290: 
1:7a2d290:         _data = new int[ length ];
1:7a2d290: 
1:7a2d290:         for ( int i = 0; i < length; i++ ) { _data[ i ] = in.readInt(); }
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // Comparable BEHAVIOR
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public int compareTo( Object other )
1:7a2d290:     {
1:7a2d290:         if ( other == null ) { return -1; }
1:7a2d290:         if ( !( other instanceof IntArray) ) { return -1; }
1:7a2d290: 
1:7a2d290:         IntArray that = (IntArray) other;
1:7a2d290: 
1:7a2d290:         int minLength = (this._data.length <= that._data.length) ? this._data.length : that._data.length;
1:7a2d290: 
1:7a2d290:         int result;
1:7a2d290:         for ( int i = 0; i < minLength; i++ )
1:7a2d290:         {
1:7a2d290:             result = this._data[ i ] - that._data[ i ];
1:7a2d290: 
1:7a2d290:             if ( result != 0 ) { return result; }
1:7a2d290:         }
1:7a2d290: 
1:7a2d290:         result = this._data.length - that._data.length;
1:7a2d290: 
1:7a2d290:         return result;
1:7a2d290:     }
1:7a2d290: 
1:7a2d290:     public boolean equals( Object other ) { return ( compareTo( other ) == 0 ); }
1:7a2d290: 
1:7a2d290:     public int hashCode()
1:7a2d290:     {
1:7a2d290:         int firstValue;
1:7a2d290:         int secondValue;
1:7a2d290: 
1:7a2d290:         if ( _data.length== 0 )
1:7a2d290:         {
1:7a2d290:             firstValue = 1;
1:7a2d290:             secondValue = 1;
1:7a2d290:         }
1:7a2d290:         else
1:7a2d290:         {
1:7a2d290:             firstValue = _data[ 0 ];
1:7a2d290:             secondValue = _data[ _data.length -1 ];
1:7a2d290:         }
1:7a2d290: 
1:7a2d290:         return firstValue^secondValue;
1:7a2d290:     }
1:7a2d290:     
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290:     //
1:7a2d290:     // OTHER Object OVERRIDES
1:7a2d290:     //
1:7a2d290:     ///////////////////////////////////////////////////////////////////////////////////
1:7a2d290: 
1:7a2d290:     public String toString()
1:7a2d290:     {
1:7a2d290:         StringBuffer buffer = new StringBuffer();
1:7a2d290:         int length = _data.length;
1:7a2d290: 
1:7a2d290:         buffer.append( "[ " );
1:7a2d290:         for ( int i = 0; i < length; i++ )
1:7a2d290:         {
1:7a2d290:             if ( i > 0 ) { buffer.append( ", " ); }
1:7a2d290:             buffer.append( _data[ i ] );
1:7a2d290:         }
1:7a2d290:         buffer.append( " ]" );
1:7a2d290: 
1:7a2d290:         return buffer.toString();
1:7a2d290:     }
1:7a2d290: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:d3347b5
/////////////////////////////////////////////////////////////////////////
1:     public static IntArray makeIntArray( int... values )
1:     {
1:         return new IntArray( values );
1:     }
1: 
commit:7a2d290
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.IntArray
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: /**
1:  * A UDT which contains an array of ints.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: 
1: public class IntArray implements Externalizable, Comparable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private int[] _data;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public IntArray() {}
1: 
1:     public IntArray( int[] data )
1:     {
1:         _data = data;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FUNCTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public static IntArray makeIntArray( int length )
1:     {
1:         return new IntArray( new int[ length ] );
1:     }
1: 
1:     public static IntArray setCell( IntArray array, int cellNumber, int cellValue )
1:     {
1:         array._data[ cellNumber ] = cellValue;
1: 
1:         return array;
1:     }
1: 
1:     public static int getCell( IntArray array, int cellNumber ) { return array._data[ cellNumber ]; }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Externalizable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public void writeExternal( ObjectOutput out ) throws IOException
1:     {
1:         int length = _data.length;
1: 
1:         out.writeInt( length );
1: 
1:         for ( int i = 0; i < length; i++ ) { out.writeInt( _data[ i ] ); }
1:     }
1: 
1:     public void readExternal( ObjectInput in ) throws IOException
1:     {
1:         int length = in.readInt();
1: 
1:         _data = new int[ length ];
1: 
1:         for ( int i = 0; i < length; i++ ) { _data[ i ] = in.readInt(); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Comparable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public int compareTo( Object other )
1:     {
1:         if ( other == null ) { return -1; }
1:         if ( !( other instanceof IntArray) ) { return -1; }
1: 
1:         IntArray that = (IntArray) other;
1: 
1:         int minLength = (this._data.length <= that._data.length) ? this._data.length : that._data.length;
1: 
1:         int result;
1:         for ( int i = 0; i < minLength; i++ )
1:         {
1:             result = this._data[ i ] - that._data[ i ];
1: 
1:             if ( result != 0 ) { return result; }
1:         }
1: 
1:         result = this._data.length - that._data.length;
1: 
1:         return result;
1:     }
1: 
1:     public boolean equals( Object other ) { return ( compareTo( other ) == 0 ); }
1: 
1:     public int hashCode()
1:     {
1:         int firstValue;
1:         int secondValue;
1: 
1:         if ( _data.length== 0 )
1:         {
1:             firstValue = 1;
1:             secondValue = 1;
1:         }
1:         else
1:         {
1:             firstValue = _data[ 0 ];
1:             secondValue = _data[ _data.length -1 ];
1:         }
1: 
1:         return firstValue^secondValue;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER Object OVERRIDES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
1:         StringBuffer buffer = new StringBuffer();
1:         int length = _data.length;
1: 
1:         buffer.append( "[ " );
1:         for ( int i = 0; i < length; i++ )
1:         {
1:             if ( i > 0 ) { buffer.append( ", " ); }
1:             buffer.append( _data[ i ] );
1:         }
1:         buffer.append( " ]" );
1: 
1:         return buffer.toString();
1:     }
1: }
============================================================================