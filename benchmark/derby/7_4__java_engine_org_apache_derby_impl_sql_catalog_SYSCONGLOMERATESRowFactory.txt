1:fd46794: /*
27:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:4309044: import org.apache.derby.iapi.types.SQLBoolean;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:4309044: import org.apache.derby.iapi.types.SQLLongint;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.IndexDescriptor;
1:eac0369: 
1:7dd08d1: import java.sql.Types;
1:eac0369: import java.util.Properties;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSCONGLOMERATES row.
7:eac0369:  *
5:eac0369:  */
1:345de35: 
1:eac0369: public class SYSCONGLOMERATESRowFactory extends CatalogRowFactory
4:eac0369: {
1:eac0369: 	private static final String		TABLENAME_STRING = "SYSCONGLOMERATES";
1:345de35: 
1:eac0369: 	protected static final int		SYSCONGLOMERATES_COLUMN_COUNT = 8;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_SCHEMAID = 1;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_TABLEID = 2;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENUMBER = 3;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENAME = 4;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_ISINDEX = 5;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_DESCRIPTOR = 6;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_ISCONSTRAINT = 7;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATEID = 8;
1:eac0369: 
1:eac0369: 	protected static final int		SYSCONGLOMERATES_INDEX1_ID = 0;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_INDEX2_ID = 1;
1:eac0369: 	protected static final int		SYSCONGLOMERATES_INDEX3_ID = 2;
1:eac0369: 
1:eac0369:     private	static	final	boolean[]	uniqueness = {
1:eac0369: 		                                               false,
1:eac0369: 													   true,
1:eac0369: 													   false
2:eac0369: 	                                                 };
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSCONGLOMERATES_CONGLOMERATEID},
1:eac0369: 		{SYSCONGLOMERATES_CONGLOMERATENAME, SYSCONGLOMERATES_SCHEMAID},
1:eac0369: 		{SYSCONGLOMERATES_TABLEID}
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "80000010-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1:eac0369: 		,"80000027-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1:eac0369: 		,"80000012-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX1
1:eac0369: 		,"80000014-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX2
1:eac0369: 		,"80000016-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX3
1:eac0369: 	};
1:eac0369: 
1:6870e87: 	SYSCONGLOMERATESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSCONGLOMERATES_COLUMN_COUNT, 
1:eac0369: 				 TABLENAME_STRING, indexColumnPositions, 
1:c2ff613: 				 uniqueness, uuids );
2:eac0369: 	}
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSCONGLOMERATES row
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSCONGLOMERATES.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecRow    				row;
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		String					tabID =null;
1:eac0369: 		Long					conglomNumber = null;
1:eac0369: 		String					conglomName = null;
1:eac0369: 		Boolean					supportsIndex = null;
1:eac0369: 		IndexRowGenerator		indexRowGenerator = null;
1:eac0369: 		Boolean					supportsConstraint = null;
1:eac0369: 		String					conglomUUIDString = null;
1:eac0369: 		String					schemaID = null;
1:eac0369: 		ConglomerateDescriptor  conglomerate = (ConglomerateDescriptor)td;
1:eac0369: 
1:eac0369: 		/* Insert info into sysconglomerates */
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			/* Sometimes the SchemaDescriptor is non-null and sometimes it
1:eac0369: 			 * is null.  (We can't just rely on getting the schema id from 
1:eac0369: 			 * the ConglomerateDescriptor because it can be null when
1:eac0369: 			 * we are creating a new conglomerate.
1:eac0369: 			 */
1:eac0369: 			if (parent != null)
1:eac0369: 			{
1:eac0369: 				SchemaDescriptor sd = (SchemaDescriptor)parent;
1:eac0369: 				schemaID = sd.getUUID().toString();	
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				schemaID = conglomerate.getSchemaID().toString();	
1:eac0369: 			}
1:eac0369: 			tabID = conglomerate.getTableID().toString();
1:ce40a31: 			conglomNumber = conglomerate.getConglomerateNumber();
1:eac0369: 			conglomName = conglomerate.getConglomerateName();
1:eac0369: 			conglomUUIDString = conglomerate.getUUID().toString();
1:eac0369: 
1:ce40a31: 			supportsIndex = conglomerate.isIndex();
1:eac0369: 			indexRowGenerator = conglomerate.getIndexDescriptor();
1:ce40a31: 			supportsConstraint = conglomerate.isConstraint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about sysconglomerates
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSCONGLOMERATES_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(1, new SQLChar(schemaID));
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(2, new SQLChar(tabID));
1:eac0369: 
1:eac0369: 		/* 3rd column is CONGLOMERATENUMBER (long) */
1:4309044: 		row.setColumn(3, new SQLLongint(conglomNumber));
1:eac0369: 
1:eac0369: 		/* 4th column is CONGLOMERATENAME (varchar(128)) 
1:eac0369: 		** If null, use the tableid so we always
1:eac0369: 		** have a unique column
1:eac0369: 		*/
1:eac0369: 		row.setColumn(4, (conglomName == null) ?
1:eb47bdb:                 new SQLVarchar(tabID): new SQLVarchar(conglomName));
1:eac0369: 
1:eac0369: 		/* 5th  column is ISINDEX (boolean) */
1:4309044: 		row.setColumn(5, new SQLBoolean(supportsIndex));
1:eac0369: 
1:eac0369: 		/* 6th column is DESCRIPTOR
1:eac0369: 		*  (user type org.apache.derby.catalog.IndexDescriptor)
1:eac0369: 		*/
1:eac0369: 		row.setColumn(6,
1:4309044: 			new UserType(
1:eac0369: 						(indexRowGenerator == null ?
1:eac0369: 							(IndexDescriptor) null :
1:eac0369: 							indexRowGenerator.getIndexDescriptor()
1:eac0369: 						)
1:eac0369: 					)
9:eac0369: 				);
1:eac0369: 
1:eac0369: 		/* 7th column is ISCONSTRAINT (boolean) */
1:4309044: 		row.setColumn(7, new SQLBoolean(supportsConstraint));
1:eac0369: 
1:eac0369: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(8, new SQLChar(conglomUUIDString));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ExecRow makeEmptyRow() throws StandardException
1:eac0369: 	{
1:eac0369: 		return makeRow(null, null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the Properties associated with creating the heap.
1:eac0369: 	 *
1:eac0369: 	 * @return The Properties associated with creating the heap.
1:eac0369: 	 */
1:eac0369: 	public Properties getCreateHeapProperties()
1:eac0369: 	{
1:eac0369: 		Properties properties = new Properties();
1:eac0369: 		// keep page size at 4K since its a big table
1:eac0369: 		properties.put("derby.storage.pageSize","4096");
1:eac0369: 		// default properties for system tables:
1:eac0369: 		properties.put("derby.storage.pageReservedSpace","0");
1:eac0369: 		properties.put("derby.storage.minimumRecordSize","1");
1:eac0369: 		return properties;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the Properties associated with creating the specified index.
1:eac0369: 	 *
1:eac0369: 	 * @param indexNumber	The specified index number.
1:eac0369: 	 *
1:eac0369: 	 * @return The Properties associated with creating the specified index.
1:eac0369: 	 */
1:eac0369: 	public Properties getCreateIndexProperties(int indexNumber)
1:eac0369: 	{
1:eac0369: 		Properties properties = new Properties();
1:eac0369: 		// keep page size for all indexes at 4K since its a big table
1:eac0369: 		properties.put("derby.storage.pageSize","4096");
1:eac0369: 		return properties;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSCOLUMNS row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @return	a conglomerate descriptor equivalent to a SYSCONGOMERATES row
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(
1:eac0369: 			row.nColumns() == SYSCONGLOMERATES_COLUMN_COUNT, 
1:eac0369: 			"Wrong number of columns for a SYSCONGLOMERATES row");
1:eac0369: 
1:eac0369: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
1:eac0369: 		long conglomerateNumber;
1:eac0369: 		String	name;
1:eac0369: 		boolean isConstraint;
1:eac0369: 		boolean isIndex;
1:eac0369: 		IndexRowGenerator	indexRowGenerator;
1:eac0369: 		DataValueDescriptor col;
1:eac0369: 		ConglomerateDescriptor conglomerateDesc;
1:eac0369: 		String		conglomUUIDString;
1:eac0369: 		UUID		conglomUUID;
1:eac0369: 		String		schemaUUIDString;
1:eac0369: 		UUID		schemaUUID;
1:eac0369: 		String		tableUUIDString;
1:eac0369: 		UUID		tableUUID;
1:eac0369: 
1:eac0369: 		/* 1st column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(1);
1:eac0369: 		schemaUUIDString = col.getString();
1:eac0369: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(2);
1:eac0369: 		tableUUIDString = col.getString();
1:eac0369: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* 3nd column is CONGLOMERATENUMBER (long) */
1:eac0369: 		col = row.getColumn(3);
1:eac0369: 		conglomerateNumber = col.getLong();
1:eac0369: 
1:eac0369: 		/* 4rd column is CONGLOMERATENAME (varchar(128)) */
1:eac0369: 		col = row.getColumn(4);
1:eac0369: 		name = col.getString();
1:eac0369: 
1:eac0369: 		/* 5th column is ISINDEX (boolean) */
1:eac0369: 		col = row.getColumn(5);
1:eac0369: 		isIndex = col.getBoolean();
1:eac0369: 
1:eac0369: 		/* 6th column is DESCRIPTOR */
1:eac0369: 		col = row.getColumn(6);
1:eac0369: 		indexRowGenerator = new IndexRowGenerator(
1:eac0369: 			(IndexDescriptor) col.getObject());
1:eac0369: 
1:eac0369: 		/* 7th column is ISCONSTRAINT (boolean) */
1:eac0369: 		col = row.getColumn(7);
1:eac0369: 		isConstraint = col.getBoolean();
1:eac0369: 
1:eac0369: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(8);
1:eac0369: 		conglomUUIDString = col.getString();
1:eac0369: 		conglomUUID = getUUIDFactory().recreateUUID(conglomUUIDString);
1:eac0369: 
1:eac0369: 		/* now build and return the descriptor */
1:eac0369: 		conglomerateDesc = ddg.newConglomerateDescriptor(conglomerateNumber,
1:eac0369: 														 name,
1:eac0369: 														 isIndex,
1:eac0369: 														 indexRowGenerator,
1:eac0369: 														 isConstraint,
1:eac0369: 														 conglomUUID,
1:eac0369: 														 tableUUID,
1:eac0369: 														 schemaUUID);
1:eac0369: 		return conglomerateDesc;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the conglomerate's UUID of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconglomerates
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The conglomerates UUID
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getConglomerateUUID(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				conglomerateUUIDString;
1:eac0369: 
1:eac0369: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATEID);
1:eac0369: 		conglomerateUUIDString = col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(conglomerateUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the table's UUID from the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconglomerates
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The table's UUID
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getTableUUID(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				tableUUIDString;
1:eac0369: 
1:eac0369: 		/* 2nd column is TABLEID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONGLOMERATES_TABLEID);
1:eac0369: 		tableUUIDString = col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(tableUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the schema's UUID from the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconglomerates
1:eac0369: 	 *
1:eac0369: 	 * @return UUID	The schema's UUID
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected UUID getSchemaUUID(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				schemaUUIDString;
1:eac0369: 
1:eac0369: 		/* 1st column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSCONGLOMERATES_SCHEMAID);
1:eac0369: 		schemaUUIDString = col.getString();
1:eac0369: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the conglomerate's name of the row.
1:eac0369: 	 * 
1:eac0369: 	 * @param row	The row from sysconglomerates
1:eac0369: 	 *
1:eac0369: 	 * @return String	The conglomerates name
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	 protected String getConglomerateName(ExecRow row)
1:eac0369: 		 throws StandardException
1:eac0369: 	 {
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 
1:eac0369: 		/* 4th column is CONGLOMERATENAME (varchar(128)) */
1:eac0369: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATENAME);
1:eac0369: 		return col.getString();
1:eac0369: 	 }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:7dd08d1:     	        
1:eac0369: 	public SystemColumn[]	buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:7dd08d1:                SystemColumnImpl.getColumn("CONGLOMERATENUMBER", Types.BIGINT, false),
1:7dd08d1:                SystemColumnImpl.getIdentifierColumn("CONGLOMERATENAME", true),
1:7dd08d1:                SystemColumnImpl.getColumn("ISINDEX", Types.BOOLEAN, false),
1:7dd08d1:                SystemColumnImpl.getJavaColumn("DESCRIPTOR",
1:7dd08d1:                        "org.apache.derby.catalog.IndexDescriptor", true),
1:7dd08d1:                SystemColumnImpl.getColumn("ISCONSTRAINT", Types.BOOLEAN, true),
1:7dd08d1:                SystemColumnImpl.getUUIDColumn("CONGLOMERATEID", false)
1:7dd08d1:            };
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 			conglomNumber = conglomerate.getConglomerateNumber();
1: 			supportsIndex = conglomerate.isIndex();
1: 			supportsConstraint = conglomerate.isConstraint();
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLBoolean;
1: import org.apache.derby.iapi.types.SQLLongint;
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(3, new SQLLongint(conglomNumber));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(5, new SQLBoolean(supportsIndex));
1: 			new UserType(
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(7, new SQLBoolean(supportsConstraint));
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1: 	SYSCONGLOMERATESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:     	        
1:             return new SystemColumn[] {
1:                SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:                SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:                SystemColumnImpl.getColumn("CONGLOMERATENUMBER", Types.BIGINT, false),
1:                SystemColumnImpl.getIdentifierColumn("CONGLOMERATENAME", true),
1:                SystemColumnImpl.getColumn("ISINDEX", Types.BOOLEAN, false),
1:                SystemColumnImpl.getJavaColumn("DESCRIPTOR",
1:                        "org.apache.derby.catalog.IndexDescriptor", true),
1:                SystemColumnImpl.getColumn("ISCONSTRAINT", Types.BOOLEAN, true),
1:                SystemColumnImpl.getUUIDColumn("CONGLOMERATEID", false)
1:            };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(1, new SQLChar(schemaID));
1: 		row.setColumn(2, new SQLChar(tabID));
/////////////////////////////////////////////////////////////////////////
1:                 new SQLVarchar(tabID): new SQLVarchar(conglomName));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(8, new SQLChar(conglomUUIDString));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 uniqueness, uuids );
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.DataValueFactory;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.catalog.IndexDescriptor;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * Factory for creating a SYSCONGLOMERATES row.
1:  *
0:  * @author ames
1:  */
1: 
1: public class SYSCONGLOMERATESRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
1: 	private static final String		TABLENAME_STRING = "SYSCONGLOMERATES";
1: 
1: 	protected static final int		SYSCONGLOMERATES_COLUMN_COUNT = 8;
1: 	protected static final int		SYSCONGLOMERATES_SCHEMAID = 1;
1: 	protected static final int		SYSCONGLOMERATES_TABLEID = 2;
1: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENUMBER = 3;
1: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENAME = 4;
1: 	protected static final int		SYSCONGLOMERATES_ISINDEX = 5;
1: 	protected static final int		SYSCONGLOMERATES_DESCRIPTOR = 6;
1: 	protected static final int		SYSCONGLOMERATES_ISCONSTRAINT = 7;
1: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATEID = 8;
1: 
1: 	protected static final int		SYSCONGLOMERATES_INDEX1_ID = 0;
1: 	protected static final int		SYSCONGLOMERATES_INDEX2_ID = 1;
1: 	protected static final int		SYSCONGLOMERATES_INDEX3_ID = 2;
1: 
1:     private	static	final	boolean[]	uniqueness = {
1: 		                                               false,
1: 													   true,
1: 													   false
1: 	                                                 };
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSCONGLOMERATES_CONGLOMERATEID},
1: 		{SYSCONGLOMERATES_CONGLOMERATENAME, SYSCONGLOMERATES_SCHEMAID},
1: 		{SYSCONGLOMERATES_TABLEID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"CONGLOMERATE_ID"},
0: 		{"CONGLOMERATE_NAME", "SCHEMAID"},
0: 		{"TABLEID"}
1: 	};
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "80000010-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1: 		,"80000027-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1: 		,"80000012-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX1
1: 		,"80000014-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX2
1: 		,"80000016-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX3
1: 	};
1: 
0: 	SYSCONGLOMERATESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSCONGLOMERATES_COLUMN_COUNT, 
1: 				 TABLENAME_STRING, indexColumnPositions, 
0: 				 indexColumnNames, uniqueness, uuids );
1: 	}
1: 
1:   /**
1: 	 * Make a SYSCONGLOMERATES row
1: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param sd		Schema Descriptor
0: 	 * @param conglomerate	conglomerate descriptor
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSCONGLOMERATES.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 					throws StandardException
1: 	{
1: 		ExecRow    				row;
1: 		DataValueDescriptor		col;
1: 		String					tabID =null;
1: 		Long					conglomNumber = null;
1: 		String					conglomName = null;
1: 		Boolean					supportsIndex = null;
1: 		IndexRowGenerator		indexRowGenerator = null;
1: 		Boolean					supportsConstraint = null;
1: 		String					conglomUUIDString = null;
1: 		String					schemaID = null;
1: 		ConglomerateDescriptor  conglomerate = (ConglomerateDescriptor)td;
1: 
1: 		/* Insert info into sysconglomerates */
1: 
1: 		if (td != null)
1: 		{
1: 			/* Sometimes the SchemaDescriptor is non-null and sometimes it
1: 			 * is null.  (We can't just rely on getting the schema id from 
1: 			 * the ConglomerateDescriptor because it can be null when
1: 			 * we are creating a new conglomerate.
1: 			 */
1: 			if (parent != null)
1: 			{
1: 				SchemaDescriptor sd = (SchemaDescriptor)parent;
1: 				schemaID = sd.getUUID().toString();	
1: 			}
1: 			else
1: 			{
1: 				schemaID = conglomerate.getSchemaID().toString();	
1: 			}
1: 			tabID = conglomerate.getTableID().toString();
0: 			conglomNumber = new Long( conglomerate.getConglomerateNumber() );
1: 			conglomName = conglomerate.getConglomerateName();
1: 			conglomUUIDString = conglomerate.getUUID().toString();
1: 
0: 			supportsIndex = new Boolean( conglomerate.isIndex() );
1: 			indexRowGenerator = conglomerate.getIndexDescriptor();
0: 			supportsConstraint = new Boolean( conglomerate.isConstraint() );
1: 		}
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about sysconglomerates
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert */
1: 		row = getExecutionFactory().getValueRow(SYSCONGLOMERATES_COLUMN_COUNT);
1: 
1: 		/* 1st column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(1, dvf.getCharDataValue(schemaID));
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(2, dvf.getCharDataValue(tabID));
1: 
1: 		/* 3rd column is CONGLOMERATENUMBER (long) */
0: 		row.setColumn(3, dvf.getDataValue(conglomNumber));
1: 
1: 		/* 4th column is CONGLOMERATENAME (varchar(128)) 
1: 		** If null, use the tableid so we always
1: 		** have a unique column
1: 		*/
1: 		row.setColumn(4, (conglomName == null) ?
0: 				dvf.getVarcharDataValue(tabID):
0: 				dvf.getVarcharDataValue(conglomName));
1: 
1: 		/* 5th  column is ISINDEX (boolean) */
0: 		row.setColumn(5, dvf.getDataValue(supportsIndex));
1: 
1: 		/* 6th column is DESCRIPTOR
1: 		*  (user type org.apache.derby.catalog.IndexDescriptor)
1: 		*/
1: 		row.setColumn(6,
0: 			dvf.getDataValue(
1: 						(indexRowGenerator == null ?
1: 							(IndexDescriptor) null :
1: 							indexRowGenerator.getIndexDescriptor()
1: 						)
1: 					)
1: 				);
1: 
1: 		/* 7th column is ISCONSTRAINT (boolean) */
0: 		row.setColumn(7, dvf.getDataValue(supportsConstraint));
1: 
1: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
0: 		row.setColumn(8, dvf.getCharDataValue(conglomUUIDString));
1: 
1: 		return row;
1: 	}
1: 
1: 	public ExecRow makeEmptyRow() throws StandardException
1: 	{
1: 		return makeRow(null, null);
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row =	getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1, rowLocation);
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSCONGLOMERATES_INDEX1_ID:
1: 				
0: 				/* 1st column is CONGLOMERATEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
1: 
0: 		    case SYSCONGLOMERATES_INDEX2_ID:
1: 				
0: 				/* 1st column is CONGLOMERATENAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
1: 				
0: 				/* 2nd column is SCHEMAID (char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				break;
1: 
0: 		    case SYSCONGLOMERATES_INDEX3_ID:
1: 				
0: 				/* Build the row */
0: 				/* NOTE: this index is not unique, need extra column in template for
0: 				 * drop method in DataDictionary.
1: 				 */
1: 
0: 				/* 1st column is TABLEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				break;
1: 
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	/**
1: 	 * Get the Properties associated with creating the heap.
1: 	 *
1: 	 * @return The Properties associated with creating the heap.
1: 	 */
1: 	public Properties getCreateHeapProperties()
1: 	{
1: 		Properties properties = new Properties();
1: 		// keep page size at 4K since its a big table
1: 		properties.put("derby.storage.pageSize","4096");
1: 		// default properties for system tables:
1: 		properties.put("derby.storage.pageReservedSpace","0");
1: 		properties.put("derby.storage.minimumRecordSize","1");
1: 		return properties;
1: 	}
1: 
1: 	/**
1: 	 * Get the Properties associated with creating the specified index.
1: 	 *
1: 	 * @param indexNumber	The specified index number.
1: 	 *
1: 	 * @return The Properties associated with creating the specified index.
1: 	 */
1: 	public Properties getCreateIndexProperties(int indexNumber)
1: 	{
1: 		Properties properties = new Properties();
1: 		// keep page size for all indexes at 4K since its a big table
1: 		properties.put("derby.storage.pageSize","4096");
1: 		return properties;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 *
1: 	 * @param row a SYSCOLUMNS row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @return	a conglomerate descriptor equivalent to a SYSCONGOMERATES row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(
1: 			row.nColumns() == SYSCONGLOMERATES_COLUMN_COUNT, 
1: 			"Wrong number of columns for a SYSCONGLOMERATES row");
1: 
1: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
1: 		long conglomerateNumber;
1: 		String	name;
1: 		boolean isConstraint;
1: 		boolean isIndex;
1: 		IndexRowGenerator	indexRowGenerator;
1: 		DataValueDescriptor col;
1: 		ConglomerateDescriptor conglomerateDesc;
1: 		String		conglomUUIDString;
1: 		UUID		conglomUUID;
1: 		String		schemaUUIDString;
1: 		UUID		schemaUUID;
1: 		String		tableUUIDString;
1: 		UUID		tableUUID;
1: 
1: 		/* 1st column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(1);
1: 		schemaUUIDString = col.getString();
1: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(2);
1: 		tableUUIDString = col.getString();
1: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1: 
1: 
1: 		/* 3nd column is CONGLOMERATENUMBER (long) */
1: 		col = row.getColumn(3);
1: 		conglomerateNumber = col.getLong();
1: 
1: 		/* 4rd column is CONGLOMERATENAME (varchar(128)) */
1: 		col = row.getColumn(4);
1: 		name = col.getString();
1: 
1: 		/* 5th column is ISINDEX (boolean) */
1: 		col = row.getColumn(5);
1: 		isIndex = col.getBoolean();
1: 
1: 		/* 6th column is DESCRIPTOR */
1: 		col = row.getColumn(6);
1: 		indexRowGenerator = new IndexRowGenerator(
1: 			(IndexDescriptor) col.getObject());
1: 
1: 		/* 7th column is ISCONSTRAINT (boolean) */
1: 		col = row.getColumn(7);
1: 		isConstraint = col.getBoolean();
1: 
1: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
1: 		col = row.getColumn(8);
1: 		conglomUUIDString = col.getString();
1: 		conglomUUID = getUUIDFactory().recreateUUID(conglomUUIDString);
1: 
1: 		/* now build and return the descriptor */
1: 		conglomerateDesc = ddg.newConglomerateDescriptor(conglomerateNumber,
1: 														 name,
1: 														 isIndex,
1: 														 indexRowGenerator,
1: 														 isConstraint,
1: 														 conglomUUID,
1: 														 tableUUID,
1: 														 schemaUUID);
1: 		return conglomerateDesc;
1: 	}
1: 
1: 	/**
1: 	 * Get the conglomerate's UUID of the row.
1: 	 * 
1: 	 * @param row	The row from sysconglomerates
1: 	 *
1: 	 * @return UUID	The conglomerates UUID
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getConglomerateUUID(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				conglomerateUUIDString;
1: 
1: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATEID);
1: 		conglomerateUUIDString = col.getString();
1: 		return getUUIDFactory().recreateUUID(conglomerateUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the table's UUID from the row.
1: 	 * 
1: 	 * @param row	The row from sysconglomerates
1: 	 *
1: 	 * @return UUID	The table's UUID
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getTableUUID(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				tableUUIDString;
1: 
1: 		/* 2nd column is TABLEID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONGLOMERATES_TABLEID);
1: 		tableUUIDString = col.getString();
1: 		return getUUIDFactory().recreateUUID(tableUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the schema's UUID from the row.
1: 	 * 
1: 	 * @param row	The row from sysconglomerates
1: 	 *
1: 	 * @return UUID	The schema's UUID
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected UUID getSchemaUUID(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 		String				schemaUUIDString;
1: 
1: 		/* 1st column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSCONGLOMERATES_SCHEMAID);
1: 		schemaUUIDString = col.getString();
1: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
1: 	 }
1: 
1: 	/**
1: 	 * Get the conglomerate's name of the row.
1: 	 * 
1: 	 * @param row	The row from sysconglomerates
1: 	 *
1: 	 * @return String	The conglomerates name
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	 protected String getConglomerateName(ExecRow row)
1: 		 throws StandardException
1: 	 {
1: 		DataValueDescriptor	col;
1: 
1: 		/* 4th column is CONGLOMERATENAME (varchar(128)) */
1: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATENAME);
1: 		return col.getString();
1: 	 }
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSCONGLOMERATES_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),			// column name
0: 							SYSCONGLOMERATES_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			               );
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// column name
0: 							SYSCONGLOMERATES_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			               );
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CONGLOMERATENUMBER"),		// column name
0: 							SYSCONGLOMERATES_CONGLOMERATENUMBER,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BIGINT",				// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGINT_MAXWIDTH	// maxLength
1: 			               );
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "CONGLOMERATENAME"),				// column name
0: 							SYSCONGLOMERATES_CONGLOMERATENAME,
0: 							true				// nullability
1: 							);
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ISINDEX"),			// column name
0: 							SYSCONGLOMERATES_ISINDEX,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			               );
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "DESCRIPTOR"),				// column name
0: 							SYSCONGLOMERATES_DESCRIPTOR,
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"org.apache.derby.catalog.IndexDescriptor",	// datatype
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN
0: 												// maxLength
1: 							);
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ISCONSTRAINT"),				// column name
0: 							SYSCONGLOMERATES_ISCONSTRAINT,
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",	// datatype
0: 							true,				// built-in type
0: 							1					// maxLength
1: 							);
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "CONGLOMERATEID"),	// column name
0: 							SYSCONGLOMERATES_CONGLOMERATEID,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// datatype
0: 							true,				// built-in type
0: 							36					// maxLength
1: 							);
1: 
0: 		return	columnList;
1: 
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.catalog.IndexDescriptor;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * Factory for creating a SYSCONGLOMERATES row.
0:  *
0:  * @author ames
0:  */
0: 
0: public class SYSCONGLOMERATESRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
0: 	private static final String		TABLENAME_STRING = "SYSCONGLOMERATES";
0: 
0: 	protected static final int		SYSCONGLOMERATES_COLUMN_COUNT = 8;
0: 	protected static final int		SYSCONGLOMERATES_SCHEMAID = 1;
0: 	protected static final int		SYSCONGLOMERATES_TABLEID = 2;
0: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENUMBER = 3;
0: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATENAME = 4;
0: 	protected static final int		SYSCONGLOMERATES_ISINDEX = 5;
0: 	protected static final int		SYSCONGLOMERATES_DESCRIPTOR = 6;
0: 	protected static final int		SYSCONGLOMERATES_ISCONSTRAINT = 7;
0: 	protected static final int		SYSCONGLOMERATES_CONGLOMERATEID = 8;
0: 
0: 	protected static final int		SYSCONGLOMERATES_INDEX1_ID = 0;
0: 	protected static final int		SYSCONGLOMERATES_INDEX2_ID = 1;
0: 	protected static final int		SYSCONGLOMERATES_INDEX3_ID = 2;
0: 
0:     private	static	final	boolean[]	uniqueness = {
0: 		                                               false,
0: 													   true,
0: 													   false
0: 	                                                 };
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSCONGLOMERATES_CONGLOMERATEID},
0: 		{SYSCONGLOMERATES_CONGLOMERATENAME, SYSCONGLOMERATES_SCHEMAID},
0: 		{SYSCONGLOMERATES_TABLEID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"CONGLOMERATE_ID"},
0: 		{"CONGLOMERATE_NAME", "SCHEMAID"},
0: 		{"TABLEID"}
0: 	};
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "80000010-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
0: 		,"80000027-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
0: 		,"80000012-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX1
0: 		,"80000014-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX2
0: 		,"80000016-00d0-fd77-3ed8-000a0a0b1900"	// SYSCONGLOMERATES_INDEX3
0: 	};
0: 
0: 	SYSCONGLOMERATESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSCONGLOMERATES_COLUMN_COUNT, 
0: 				 TABLENAME_STRING, indexColumnPositions, 
0: 				 indexColumnNames, uniqueness, uuids );
0: 	}
0: 
0:   /**
0: 	 * Make a SYSCONGLOMERATES row
0: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param sd		Schema Descriptor
0: 	 * @param conglomerate	conglomerate descriptor
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSCONGLOMERATES.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 					throws StandardException
0: 	{
0: 		ExecRow    				row;
0: 		DataValueDescriptor		col;
0: 		String					tabID =null;
0: 		Long					conglomNumber = null;
0: 		String					conglomName = null;
0: 		Boolean					supportsIndex = null;
0: 		IndexRowGenerator		indexRowGenerator = null;
0: 		Boolean					supportsConstraint = null;
0: 		String					conglomUUIDString = null;
0: 		String					schemaID = null;
0: 		ConglomerateDescriptor  conglomerate = (ConglomerateDescriptor)td;
0: 
0: 		/* Insert info into sysconglomerates */
0: 
0: 		if (td != null)
0: 		{
0: 			/* Sometimes the SchemaDescriptor is non-null and sometimes it
0: 			 * is null.  (We can't just rely on getting the schema id from 
0: 			 * the ConglomerateDescriptor because it can be null when
0: 			 * we are creating a new conglomerate.
0: 			 */
0: 			if (parent != null)
0: 			{
0: 				SchemaDescriptor sd = (SchemaDescriptor)parent;
0: 				schemaID = sd.getUUID().toString();	
0: 			}
0: 			else
0: 			{
0: 				schemaID = conglomerate.getSchemaID().toString();	
0: 			}
0: 			tabID = conglomerate.getTableID().toString();
0: 			conglomNumber = new Long( conglomerate.getConglomerateNumber() );
0: 			conglomName = conglomerate.getConglomerateName();
0: 			conglomUUIDString = conglomerate.getUUID().toString();
0: 
0: 			supportsIndex = new Boolean( conglomerate.isIndex() );
0: 			indexRowGenerator = conglomerate.getIndexDescriptor();
0: 			supportsConstraint = new Boolean( conglomerate.isConstraint() );
0: 		}
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about sysconglomerates
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert */
0: 		row = getExecutionFactory().getValueRow(SYSCONGLOMERATES_COLUMN_COUNT);
0: 
0: 		/* 1st column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(1, dvf.getCharDataValue(schemaID));
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		row.setColumn(2, dvf.getCharDataValue(tabID));
0: 
0: 		/* 3rd column is CONGLOMERATENUMBER (long) */
0: 		row.setColumn(3, dvf.getDataValue(conglomNumber));
0: 
0: 		/* 4th column is CONGLOMERATENAME (varchar(128)) 
0: 		** If null, use the tableid so we always
0: 		** have a unique column
0: 		*/
0: 		row.setColumn(4, (conglomName == null) ?
0: 				dvf.getVarcharDataValue(tabID):
0: 				dvf.getVarcharDataValue(conglomName));
0: 
0: 		/* 5th  column is ISINDEX (boolean) */
0: 		row.setColumn(5, dvf.getDataValue(supportsIndex));
0: 
0: 		/* 6th column is DESCRIPTOR
0: 		*  (user type org.apache.derby.catalog.IndexDescriptor)
0: 		*/
0: 		row.setColumn(6,
0: 			dvf.getDataValue(
0: 						(indexRowGenerator == null ?
0: 							(IndexDescriptor) null :
0: 							indexRowGenerator.getIndexDescriptor()
0: 						)
0: 					)
0: 				);
0: 
0: 		/* 7th column is ISCONSTRAINT (boolean) */
0: 		row.setColumn(7, dvf.getDataValue(supportsConstraint));
0: 
0: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
0: 		row.setColumn(8, dvf.getCharDataValue(conglomUUIDString));
0: 
0: 		return row;
0: 	}
0: 
0: 	public ExecRow makeEmptyRow() throws StandardException
0: 	{
0: 		return makeRow(null, null);
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row =	getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSCONGLOMERATES_INDEX1_ID:
0: 				
0: 				/* 1st column is CONGLOMERATEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 
0: 		    case SYSCONGLOMERATES_INDEX2_ID:
0: 				
0: 				/* 1st column is CONGLOMERATENAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 				
0: 				/* 2nd column is SCHEMAID (char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSCONGLOMERATES_INDEX3_ID:
0: 				
0: 				/* Build the row */
0: 				/* NOTE: this index is not unique, need extra column in template for
0: 				 * drop method in DataDictionary.
0: 				 */
0: 
0: 				/* 1st column is TABLEID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	/**
0: 	 * Get the Properties associated with creating the heap.
0: 	 *
0: 	 * @return The Properties associated with creating the heap.
0: 	 */
0: 	public Properties getCreateHeapProperties()
0: 	{
0: 		Properties properties = new Properties();
0: 		// keep page size at 4K since its a big table
0: 		properties.put("derby.storage.pageSize","4096");
0: 		// default properties for system tables:
0: 		properties.put("derby.storage.pageReservedSpace","0");
0: 		properties.put("derby.storage.minimumRecordSize","1");
0: 		return properties;
0: 	}
0: 
0: 	/**
0: 	 * Get the Properties associated with creating the specified index.
0: 	 *
0: 	 * @param indexNumber	The specified index number.
0: 	 *
0: 	 * @return The Properties associated with creating the specified index.
0: 	 */
0: 	public Properties getCreateIndexProperties(int indexNumber)
0: 	{
0: 		Properties properties = new Properties();
0: 		// keep page size for all indexes at 4K since its a big table
0: 		properties.put("derby.storage.pageSize","4096");
0: 		return properties;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 *
0: 	 * @param row a SYSCOLUMNS row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @return	a conglomerate descriptor equivalent to a SYSCONGOMERATES row
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(
0: 			row.nColumns() == SYSCONGLOMERATES_COLUMN_COUNT, 
0: 			"Wrong number of columns for a SYSCONGLOMERATES row");
0: 
0: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
0: 		long conglomerateNumber;
0: 		String	name;
0: 		boolean isConstraint;
0: 		boolean isIndex;
0: 		IndexRowGenerator	indexRowGenerator;
0: 		DataValueDescriptor col;
0: 		ConglomerateDescriptor conglomerateDesc;
0: 		String		conglomUUIDString;
0: 		UUID		conglomUUID;
0: 		String		schemaUUIDString;
0: 		UUID		schemaUUID;
0: 		String		tableUUIDString;
0: 		UUID		tableUUID;
0: 
0: 		/* 1st column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(1);
0: 		schemaUUIDString = col.getString();
0: 		schemaUUID = getUUIDFactory().recreateUUID(schemaUUIDString);
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(2);
0: 		tableUUIDString = col.getString();
0: 		tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
0: 
0: 
0: 		/* 3nd column is CONGLOMERATENUMBER (long) */
0: 		col = row.getColumn(3);
0: 		conglomerateNumber = col.getLong();
0: 
0: 		/* 4rd column is CONGLOMERATENAME (varchar(128)) */
0: 		col = row.getColumn(4);
0: 		name = col.getString();
0: 
0: 		/* 5th column is ISINDEX (boolean) */
0: 		col = row.getColumn(5);
0: 		isIndex = col.getBoolean();
0: 
0: 		/* 6th column is DESCRIPTOR */
0: 		col = row.getColumn(6);
0: 		indexRowGenerator = new IndexRowGenerator(
0: 			(IndexDescriptor) col.getObject());
0: 
0: 		/* 7th column is ISCONSTRAINT (boolean) */
0: 		col = row.getColumn(7);
0: 		isConstraint = col.getBoolean();
0: 
0: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
0: 		col = row.getColumn(8);
0: 		conglomUUIDString = col.getString();
0: 		conglomUUID = getUUIDFactory().recreateUUID(conglomUUIDString);
0: 
0: 		/* now build and return the descriptor */
0: 		conglomerateDesc = ddg.newConglomerateDescriptor(conglomerateNumber,
0: 														 name,
0: 														 isIndex,
0: 														 indexRowGenerator,
0: 														 isConstraint,
0: 														 conglomUUID,
0: 														 tableUUID,
0: 														 schemaUUID);
0: 		return conglomerateDesc;
0: 	}
0: 
0: 	/**
0: 	 * Get the conglomerate's UUID of the row.
0: 	 * 
0: 	 * @param row	The row from sysconglomerates
0: 	 *
0: 	 * @return UUID	The conglomerates UUID
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getConglomerateUUID(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				conglomerateUUIDString;
0: 
0: 		/* 8th column is CONGLOMERATEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATEID);
0: 		conglomerateUUIDString = col.getString();
0: 		return getUUIDFactory().recreateUUID(conglomerateUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the table's UUID from the row.
0: 	 * 
0: 	 * @param row	The row from sysconglomerates
0: 	 *
0: 	 * @return UUID	The table's UUID
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getTableUUID(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				tableUUIDString;
0: 
0: 		/* 2nd column is TABLEID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONGLOMERATES_TABLEID);
0: 		tableUUIDString = col.getString();
0: 		return getUUIDFactory().recreateUUID(tableUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the schema's UUID from the row.
0: 	 * 
0: 	 * @param row	The row from sysconglomerates
0: 	 *
0: 	 * @return UUID	The schema's UUID
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected UUID getSchemaUUID(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 		String				schemaUUIDString;
0: 
0: 		/* 1st column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSCONGLOMERATES_SCHEMAID);
0: 		schemaUUIDString = col.getString();
0: 		return getUUIDFactory().recreateUUID(schemaUUIDString);
0: 	 }
0: 
0: 	/**
0: 	 * Get the conglomerate's name of the row.
0: 	 * 
0: 	 * @param row	The row from sysconglomerates
0: 	 *
0: 	 * @return String	The conglomerates name
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	 protected String getConglomerateName(ExecRow row)
0: 		 throws StandardException
0: 	 {
0: 		DataValueDescriptor	col;
0: 
0: 		/* 4th column is CONGLOMERATENAME (varchar(128)) */
0: 		col = row.getColumn(SYSCONGLOMERATES_CONGLOMERATENAME);
0: 		return col.getString();
0: 	 }
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSCONGLOMERATES_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),			// column name
0: 							SYSCONGLOMERATES_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// column name
0: 							SYSCONGLOMERATES_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "CONGLOMERATENUMBER"),		// column name
0: 							SYSCONGLOMERATES_CONGLOMERATENUMBER,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BIGINT",				// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGINT_MAXWIDTH	// maxLength
0: 			               );
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "CONGLOMERATENAME"),				// column name
0: 							SYSCONGLOMERATES_CONGLOMERATENAME,
0: 							true				// nullability
0: 							);
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ISINDEX"),			// column name
0: 							SYSCONGLOMERATES_ISINDEX,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			               );
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "DESCRIPTOR"),				// column name
0: 							SYSCONGLOMERATES_DESCRIPTOR,
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"org.apache.derby.catalog.IndexDescriptor",	// datatype
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN
0: 												// maxLength
0: 							);
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ISCONSTRAINT"),				// column name
0: 							SYSCONGLOMERATES_ISCONSTRAINT,
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",	// datatype
0: 							true,				// built-in type
0: 							1					// maxLength
0: 							);
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "CONGLOMERATEID"),	// column name
0: 							SYSCONGLOMERATES_CONGLOMERATEID,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// datatype
0: 							true,				// built-in type
0: 							36					// maxLength
0: 							);
0: 
0: 		return	columnList;
0: 
0: 	}
0: }
============================================================================