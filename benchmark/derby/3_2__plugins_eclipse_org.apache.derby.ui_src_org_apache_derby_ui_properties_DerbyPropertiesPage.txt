1:aaea357: /*
2:aaea357: 
1:aaea357: 	Derby - Class org.apache.derby.ui.properties.DerbyPropertiesPage
1:aaea357: 	
1:23683f1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1:23683f1: 	contributor license agreements.  See the NOTICE file distributed with
1:23683f1: 	this work for additional information regarding copyright ownership.
1:23683f1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1:23683f1: 	(the "License"); you may not use this file except in compliance with
1:23683f1: 	the License.  You may obtain a copy of the License at
1:aaea357: 	
1:aaea357: 	   http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 	
1:aaea357: 	Unless required by applicable law or agreed to in writing, software
1:aaea357: 	distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357: 	See the License for the specific language governing permissions and
1:aaea357: 	limitations under the License.
1:aaea357: 
1:aaea357: */
1:aaea357: 
1:aaea357: package org.apache.derby.ui.properties;
1:aaea357: 
1:aaea357: import org.apache.derby.ui.common.CommonNames;
1:aaea357: import org.apache.derby.ui.common.Messages;
1:aaea357: import org.apache.derby.ui.util.DerbyServerUtils;
1:aaea357: import org.apache.derby.ui.util.Logger;
1:aaea357: import org.apache.derby.ui.util.SelectionUtil;
1:aaea357: import org.eclipse.core.resources.IProject;
1:aaea357: import org.eclipse.core.runtime.CoreException;
1:aaea357: import org.eclipse.core.runtime.IStatus;
1:aaea357: import org.eclipse.jface.dialogs.MessageDialog;
1:aaea357: import org.eclipse.swt.SWT;
1:aaea357: import org.eclipse.swt.graphics.Color;
1:aaea357: import org.eclipse.swt.layout.GridData;
1:aaea357: import org.eclipse.swt.layout.GridLayout;
1:aaea357: import org.eclipse.swt.widgets.Composite;
1:aaea357: import org.eclipse.swt.widgets.Control;
1:aaea357: import org.eclipse.swt.widgets.Label;
1:aaea357: import org.eclipse.swt.widgets.Shell;
1:aaea357: import org.eclipse.swt.widgets.Text;
1:aaea357: import org.eclipse.ui.dialogs.PropertyPage;
1:aaea357: 
1:aaea357: 
1:aaea357: 
1:aaea357: public   class DerbyPropertiesPage extends PropertyPage {
1:aaea357: 	public DerbyPropertiesPage() {
1:aaea357: 		super();
1:aaea357: 	}
1:aaea357: 	protected DerbyProperties dsProps;
1:aaea357: 	protected Text hostText;
1:aaea357: 	protected Text portText;
1:aaea357: 	protected Text systemHomeText;
1:aaea357: 	private boolean isServerRunning;
1:aaea357: 	
1:aaea357: 
1:aaea357: 	protected void addControls(Composite parent) {
1:aaea357: 		Composite composite = createDefaultComposite(parent);
1:aaea357: 		
1:aaea357: 		//Network Server Settings
1:aaea357: 		Label txt=new Label(composite,SWT.NONE);
1:aaea357: 		txt.setBackground(new Color(null,0,0,0));
1:aaea357: 		txt.setForeground(new Color(null,255,255,255));
1:aaea357: 		txt.setText("Network Server Settings:");
1:aaea357: 		
1:aaea357: 		//separator
1:aaea357: 		Label separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
1:aaea357: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
1:aaea357: 	
1:aaea357: 		org.eclipse.swt.widgets.
1:aaea357: 		Label portLabel = new Label(composite, SWT.NONE);
1:aaea357: 		portLabel.setText("&Network Server Port:");
1:aaea357: 		portText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1:aaea357: 		GridData gd = new GridData();
1:aaea357: 		gd.widthHint = convertWidthInCharsToPixels(6);
1:aaea357: 		portText.setLayoutData(gd);
1:aaea357: 	
1:aaea357: 		Label hostLabel = new Label(composite, SWT.NONE);
1:aaea357: 		hostLabel.setText("&Network Server Host:");
1:aaea357: 		hostText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1:aaea357: 		gd = new GridData();
1:aaea357: 		gd.widthHint = convertWidthInCharsToPixels(16);
1:aaea357: 		hostText.setLayoutData(gd);
1:aaea357: 	
1:aaea357: 		//Derby System Properties
1:aaea357: 		separatorLabel=new Label(composite, SWT.NONE);
1:aaea357: 		separatorLabel.setLayoutData(getSeperatorLabelGridData());
1:aaea357: 		separatorLabel.setText("");
1:aaea357: 	
1:aaea357: 		Label txt1=new Label(composite,SWT.NONE);
1:aaea357: 		txt1.setBackground(new Color(null,0,0,0));
1:aaea357: 		txt1.setForeground(new Color(null,255,255,255));
1:aaea357: 		txt1.setText("Derby System Properties:");
1:aaea357: 		
1:aaea357: 		//separator
1:aaea357: 		separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
1:aaea357: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
1:aaea357: 		
1:aaea357: 		Label sytemHomeLabel = new Label(composite, SWT.NONE);
1:aaea357: 		sytemHomeLabel.setText("&derby.system.home=");
1:aaea357: 		systemHomeText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1:aaea357: 		gd = new GridData();
1:aaea357: 		gd.widthHint = convertWidthInCharsToPixels(16);
1:aaea357: 		systemHomeText.setLayoutData(gd);
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected Composite createDefaultComposite(Composite parent) {
1:aaea357: 		Composite composite = new Composite(parent, SWT.NULL);
1:aaea357: 		GridLayout layout = new GridLayout();
1:aaea357: 		layout.numColumns = 2;
1:aaea357: 		composite.setLayout(layout);
1:aaea357: 	
1:aaea357: 		GridData data = new GridData();
1:aaea357: 		data.verticalAlignment = GridData.FILL;
1:aaea357: 		data.horizontalAlignment = GridData.FILL;
1:aaea357: 		composite.setLayoutData(data);
1:aaea357: 	
1:aaea357: 		return composite;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected void fillControls() {
1:aaea357: 		portText.setText(Integer.toString(dsProps.getPort()));
1:aaea357: 		hostText.setText(dsProps.getHost());
1:aaea357: 		systemHomeText.setText(dsProps.getSystemHome());
1:aaea357: 		isServerRunning = checkServer();
1:aaea357: 		// if the server is running do not allow
1:aaea357: 		// editing of the settings
1:aaea357: 		if (isServerRunning) {
1:aaea357: 		    portText.setEditable(false);
1:aaea357: 		    hostText.setEditable(false);
1:aaea357: 		    systemHomeText.setEditable(false);
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	protected boolean checkServer() {
1:aaea357: 	    IProject proj = (IProject)getElement();
1:aaea357: 	    boolean serverRunning = false;
1:aaea357: 	    try {
1:aaea357: 	        serverRunning = DerbyServerUtils.getDefault().getRunning(proj);
1:aaea357: 	    }
1:aaea357: 	    catch (CoreException ce) {
1:aaea357: 	        Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
1:aaea357: 	    }
1:aaea357: 	    return serverRunning;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected void getParams() {
1:aaea357: 		dsProps = new DerbyProperties();		
1:aaea357: 		try {
1:aaea357: 			dsProps.setPort(Integer.parseInt(portText.getText()));
1:aaea357: 		}
1:aaea357: 		catch (NumberFormatException ne) {
1:aaea357: 			// do nothing; use the default port number
1:aaea357: 		}
1:aaea357: 		dsProps.setHost(hostText.getText());
1:aaea357: 		dsProps.setSystemHome(systemHomeText.getText());
1:aaea357: 		
1:aaea357: 		// if the server is running inform the user
1:aaea357: 		// to stop the server before changing the settings
1:aaea357: 		if (isServerRunning) {
1:aaea357: 		    Shell shell = new Shell();
1:aaea357: 			MessageDialog.openInformation(
1:aaea357: 			shell,
1:aaea357: 			CommonNames.PLUGIN_NAME,
1:aaea357: 			Messages.SERVER_RUNNING );
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected GridData getSeperatorLabelGridData() {
1:aaea357: 	
1:aaea357: 	    GridData gridData = new GridData(GridData.BEGINNING |
1:aaea357: 	                            GridData.HORIZONTAL_ALIGN_FILL |
1:aaea357: 	                            GridData.GRAB_VERTICAL |
1:aaea357: 	                            GridData.BEGINNING |
1:aaea357: 	                            GridData.VERTICAL_ALIGN_BEGINNING |
1:aaea357: 	                            GridData.VERTICAL_ALIGN_FILL) ;
1:aaea357: 	    gridData.horizontalSpan = 2;
1:aaea357: 	    gridData.grabExcessVerticalSpace  = false;
1:aaea357: 	    gridData.grabExcessHorizontalSpace = true;
1:aaea357: 	    return gridData;
1:aaea357: 	
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected void performDefaults() {
1:aaea357: 		dsProps = new DerbyProperties();
1:aaea357: 		fillControls();
1:aaea357: 	}
1:aaea357: 	public boolean performOk() {
1:aaea357: 		IProject proj = (IProject)getElement();
1:aaea357: 		getParams();
1:aaea357: 		try {
1:aaea357: 		
1:aaea357: 			dsProps.save(proj.getProject());
1:aaea357: 		}
1:aaea357: 		catch (CoreException ce) {
1:aaea357: 			System.err.println(SelectionUtil.getStatusMessages(ce));
1:aaea357: 			return false;
1:aaea357: 		}
1:aaea357: 		return true;
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	protected Control createContents(Composite parent) {
1:aaea357: 		Composite composite = new Composite(parent, SWT.NONE);
1:aaea357: 		GridLayout layout = new GridLayout();
1:aaea357: 		composite.setLayout(layout);
1:aaea357: 		GridData data = new GridData(GridData.FILL);
1:aaea357: 		data.grabExcessHorizontalSpace = true;
1:aaea357: 		composite.setLayoutData(data);
1:aaea357: 		addControls(composite);
1:aaea357: 		IProject proj = (IProject)getElement();
1:aaea357: 		try {
1:aaea357: 			dsProps = new DerbyProperties(proj);
1:aaea357: 			fillControls();
1:aaea357: 		}
1:aaea357: 		catch (CoreException ce) {
1:aaea357: 			Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
1:aaea357: 		}
1:aaea357: 		return composite;
1:aaea357: 	}	
1:aaea357: 
1:aaea357: }
============================================================================
author:Jean T. Anderson
-------------------------------------------------------------------------------
commit:23683f1
/////////////////////////////////////////////////////////////////////////
1: 	Licensed to the Apache Software Foundation (ASF) under one or more
1: 	contributor license agreements.  See the NOTICE file distributed with
1: 	this work for additional information regarding copyright ownership.
1: 	The ASF licenses this file to you under the Apache License, Version 2.0
1: 	(the "License"); you may not use this file except in compliance with
1: 	the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: 	Derby - Class org.apache.derby.ui.properties.DerbyPropertiesPage
1: 	
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
1: 	
1: 	   http://www.apache.org/licenses/LICENSE-2.0
1: 	
1: 	Unless required by applicable law or agreed to in writing, software
1: 	distributed under the License is distributed on an "AS IS" BASIS,
1: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: 	See the License for the specific language governing permissions and
1: 	limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.ui.properties;
1: 
1: import org.apache.derby.ui.common.CommonNames;
1: import org.apache.derby.ui.common.Messages;
1: import org.apache.derby.ui.util.DerbyServerUtils;
1: import org.apache.derby.ui.util.Logger;
1: import org.apache.derby.ui.util.SelectionUtil;
1: import org.eclipse.core.resources.IProject;
1: import org.eclipse.core.runtime.CoreException;
1: import org.eclipse.core.runtime.IStatus;
1: import org.eclipse.jface.dialogs.MessageDialog;
1: import org.eclipse.swt.SWT;
1: import org.eclipse.swt.graphics.Color;
1: import org.eclipse.swt.layout.GridData;
1: import org.eclipse.swt.layout.GridLayout;
1: import org.eclipse.swt.widgets.Composite;
1: import org.eclipse.swt.widgets.Control;
1: import org.eclipse.swt.widgets.Label;
1: import org.eclipse.swt.widgets.Shell;
1: import org.eclipse.swt.widgets.Text;
1: import org.eclipse.ui.dialogs.PropertyPage;
1: 
1: 
1: 
1: public   class DerbyPropertiesPage extends PropertyPage {
1: 	public DerbyPropertiesPage() {
1: 		super();
1: 	}
1: 	protected DerbyProperties dsProps;
1: 	protected Text hostText;
1: 	protected Text portText;
1: 	protected Text systemHomeText;
1: 	private boolean isServerRunning;
1: 	
1: 
1: 	protected void addControls(Composite parent) {
1: 		Composite composite = createDefaultComposite(parent);
1: 		
1: 		//Network Server Settings
1: 		Label txt=new Label(composite,SWT.NONE);
1: 		txt.setBackground(new Color(null,0,0,0));
1: 		txt.setForeground(new Color(null,255,255,255));
1: 		txt.setText("Network Server Settings:");
1: 		
1: 		//separator
1: 		Label separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
1: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
1: 	
1: 		org.eclipse.swt.widgets.
1: 		Label portLabel = new Label(composite, SWT.NONE);
1: 		portLabel.setText("&Network Server Port:");
1: 		portText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1: 		GridData gd = new GridData();
1: 		gd.widthHint = convertWidthInCharsToPixels(6);
1: 		portText.setLayoutData(gd);
1: 	
1: 		Label hostLabel = new Label(composite, SWT.NONE);
1: 		hostLabel.setText("&Network Server Host:");
1: 		hostText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1: 		gd = new GridData();
1: 		gd.widthHint = convertWidthInCharsToPixels(16);
1: 		hostText.setLayoutData(gd);
1: 	
1: 		//Derby System Properties
1: 		separatorLabel=new Label(composite, SWT.NONE);
1: 		separatorLabel.setLayoutData(getSeperatorLabelGridData());
1: 		separatorLabel.setText("");
1: 	
1: 		Label txt1=new Label(composite,SWT.NONE);
1: 		txt1.setBackground(new Color(null,0,0,0));
1: 		txt1.setForeground(new Color(null,255,255,255));
1: 		txt1.setText("Derby System Properties:");
1: 		
1: 		//separator
1: 		separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
1: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
1: 		
1: 		Label sytemHomeLabel = new Label(composite, SWT.NONE);
1: 		sytemHomeLabel.setText("&derby.system.home=");
1: 		systemHomeText = new Text(composite, SWT.SINGLE | SWT.BORDER);
1: 		gd = new GridData();
1: 		gd.widthHint = convertWidthInCharsToPixels(16);
1: 		systemHomeText.setLayoutData(gd);
1: 	}
1: 
1: 	protected Composite createDefaultComposite(Composite parent) {
1: 		Composite composite = new Composite(parent, SWT.NULL);
1: 		GridLayout layout = new GridLayout();
1: 		layout.numColumns = 2;
1: 		composite.setLayout(layout);
1: 	
1: 		GridData data = new GridData();
1: 		data.verticalAlignment = GridData.FILL;
1: 		data.horizontalAlignment = GridData.FILL;
1: 		composite.setLayoutData(data);
1: 	
1: 		return composite;
1: 	}
1: 
1: 	protected void fillControls() {
1: 		portText.setText(Integer.toString(dsProps.getPort()));
1: 		hostText.setText(dsProps.getHost());
1: 		systemHomeText.setText(dsProps.getSystemHome());
1: 		isServerRunning = checkServer();
1: 		// if the server is running do not allow
1: 		// editing of the settings
1: 		if (isServerRunning) {
1: 		    portText.setEditable(false);
1: 		    hostText.setEditable(false);
1: 		    systemHomeText.setEditable(false);
1: 		}
1: 	}
1: 	
1: 	protected boolean checkServer() {
1: 	    IProject proj = (IProject)getElement();
1: 	    boolean serverRunning = false;
1: 	    try {
1: 	        serverRunning = DerbyServerUtils.getDefault().getRunning(proj);
1: 	    }
1: 	    catch (CoreException ce) {
1: 	        Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
1: 	    }
1: 	    return serverRunning;
1: 	}
1: 
1: 	protected void getParams() {
1: 		dsProps = new DerbyProperties();		
1: 		try {
1: 			dsProps.setPort(Integer.parseInt(portText.getText()));
1: 		}
1: 		catch (NumberFormatException ne) {
1: 			// do nothing; use the default port number
1: 		}
1: 		dsProps.setHost(hostText.getText());
1: 		dsProps.setSystemHome(systemHomeText.getText());
1: 		
1: 		// if the server is running inform the user
1: 		// to stop the server before changing the settings
1: 		if (isServerRunning) {
1: 		    Shell shell = new Shell();
1: 			MessageDialog.openInformation(
1: 			shell,
1: 			CommonNames.PLUGIN_NAME,
1: 			Messages.SERVER_RUNNING );
1: 		}
1: 	}
1: 
1: 	protected GridData getSeperatorLabelGridData() {
1: 	
1: 	    GridData gridData = new GridData(GridData.BEGINNING |
1: 	                            GridData.HORIZONTAL_ALIGN_FILL |
1: 	                            GridData.GRAB_VERTICAL |
1: 	                            GridData.BEGINNING |
1: 	                            GridData.VERTICAL_ALIGN_BEGINNING |
1: 	                            GridData.VERTICAL_ALIGN_FILL) ;
1: 	    gridData.horizontalSpan = 2;
1: 	    gridData.grabExcessVerticalSpace  = false;
1: 	    gridData.grabExcessHorizontalSpace = true;
1: 	    return gridData;
1: 	
1: 	}
1: 
1: 	protected void performDefaults() {
1: 		dsProps = new DerbyProperties();
1: 		fillControls();
1: 	}
1: 	public boolean performOk() {
1: 		IProject proj = (IProject)getElement();
1: 		getParams();
1: 		try {
1: 		
1: 			dsProps.save(proj.getProject());
1: 		}
1: 		catch (CoreException ce) {
1: 			System.err.println(SelectionUtil.getStatusMessages(ce));
1: 			return false;
1: 		}
1: 		return true;
1: 	}
1: 
1: 	protected Control createContents(Composite parent) {
1: 		Composite composite = new Composite(parent, SWT.NONE);
1: 		GridLayout layout = new GridLayout();
1: 		composite.setLayout(layout);
1: 		GridData data = new GridData(GridData.FILL);
1: 		data.grabExcessHorizontalSpace = true;
1: 		composite.setLayoutData(data);
1: 		addControls(composite);
1: 		IProject proj = (IProject)getElement();
1: 		try {
1: 			dsProps = new DerbyProperties(proj);
1: 			fillControls();
1: 		}
1: 		catch (CoreException ce) {
1: 			Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
1: 		}
1: 		return composite;
1: 	}	
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:db07728
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.ui.common.CommonNames;
0: import org.apache.derby.ui.common.Messages;
0: import org.apache.derby.ui.util.DerbyServerUtils;
0: import org.eclipse.jface.dialogs.MessageDialog;
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.swt.widgets.Shell;
/////////////////////////////////////////////////////////////////////////
0: 	private boolean isServerRunning;
/////////////////////////////////////////////////////////////////////////
0: 		isServerRunning = checkServer();
0: 		// if the server is running do not allow
0: 		// editing of the settings
0: 		if (isServerRunning) {
0: 		    portText.setEditable(false);
0: 		    hostText.setEditable(false);
0: 		    systemHomeText.setEditable(false);
0: 		}
0: 	}
0: 	
0: 	protected boolean checkServer() {
0: 	    IProject proj = (IProject)getElement();
0: 	    boolean serverRunning = false;
0: 	    try {
0: 	        serverRunning = DerbyServerUtils.getDefault().getRunning(proj);
0: 	    }
0: 	    catch (CoreException ce) {
0: 	        Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
0: 	    }
0: 	    return serverRunning;
/////////////////////////////////////////////////////////////////////////
0: 		
0: 		// if the server is running inform the user
0: 		// to stop the server before changing the settings
0: 		if (isServerRunning) {
0: 		    Shell shell = new Shell();
0: 			MessageDialog.openInformation(
0: 			shell,
0: 			CommonNames.PLUGIN_NAME,
0: 			Messages.SERVER_RUNNING );
0: 		}
commit:00daaff
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0: 	Derby - Class org.apache.derby.ui.properties.DerbyPropertiesPage
0: 	
0: 	Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 	
0: 	Licensed under the Apache License, Version 2.0 (the "License");
0: 	you may not use this file except in compliance with the License.
0: 	You may obtain a copy of the License at
0: 	
0: 	   http://www.apache.org/licenses/LICENSE-2.0
0: 	
0: 	Unless required by applicable law or agreed to in writing, software
0: 	distributed under the License is distributed on an "AS IS" BASIS,
0: 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: 	See the License for the specific language governing permissions and
0: 	limitations under the License.
0: 
0: */
0: 
0: package org.apache.derby.ui.properties;
0: 
0: import org.apache.derby.ui.util.Logger;
0: import org.apache.derby.ui.util.SelectionUtil;
0: import org.eclipse.core.resources.IProject;
0: import org.eclipse.core.runtime.CoreException;
0: import org.eclipse.core.runtime.IStatus;
0: import org.eclipse.swt.SWT;
0: import org.eclipse.swt.graphics.Color;
0: import org.eclipse.swt.layout.GridData;
0: import org.eclipse.swt.layout.GridLayout;
0: import org.eclipse.swt.widgets.Composite;
0: import org.eclipse.swt.widgets.Control;
0: import org.eclipse.swt.widgets.Label;
0: import org.eclipse.swt.widgets.Text;
0: import org.eclipse.ui.dialogs.PropertyPage;
0: 
0: 
0: 
0: public   class DerbyPropertiesPage extends PropertyPage {
0: 	public DerbyPropertiesPage() {
0: 		super();
0: 	}
0: 	protected DerbyProperties dsProps;
0: 	protected Text hostText;
0: 	protected Text portText;
0: 	protected Text systemHomeText;
0: 	
0: 
0: 	protected void addControls(Composite parent) {
0: 		Composite composite = createDefaultComposite(parent);
0: 		
0: 		//Network Server Settings
0: 		Label txt=new Label(composite,SWT.NONE);
0: 		txt.setBackground(new Color(null,0,0,0));
0: 		txt.setForeground(new Color(null,255,255,255));
0: 		txt.setText("Network Server Settings:");
0: 		
0: 		//separator
0: 		Label separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
0: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
0: 	
0: 		org.eclipse.swt.widgets.
0: 		Label portLabel = new Label(composite, SWT.NONE);
0: 		portLabel.setText("&Network Server Port:");
0: 		portText = new Text(composite, SWT.SINGLE | SWT.BORDER);
0: 		GridData gd = new GridData();
0: 		gd.widthHint = convertWidthInCharsToPixels(6);
0: 		portText.setLayoutData(gd);
0: 	
0: 		Label hostLabel = new Label(composite, SWT.NONE);
0: 		hostLabel.setText("&Network Server Host:");
0: 		hostText = new Text(composite, SWT.SINGLE | SWT.BORDER);
0: 		gd = new GridData();
0: 		gd.widthHint = convertWidthInCharsToPixels(16);
0: 		hostText.setLayoutData(gd);
0: 	
0: 		//Derby System Properties
0: 		separatorLabel=new Label(composite, SWT.NONE);
0: 		separatorLabel.setLayoutData(getSeperatorLabelGridData());
0: 		separatorLabel.setText("");
0: 	
0: 		Label txt1=new Label(composite,SWT.NONE);
0: 		txt1.setBackground(new Color(null,0,0,0));
0: 		txt1.setForeground(new Color(null,255,255,255));
0: 		txt1.setText("Derby System Properties:");
0: 		
0: 		//separator
0: 		separatorLabel=new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
0: 	    separatorLabel.setLayoutData(getSeperatorLabelGridData());
0: 		
0: 		Label sytemHomeLabel = new Label(composite, SWT.NONE);
0: 		sytemHomeLabel.setText("&derby.system.home=");
0: 		systemHomeText = new Text(composite, SWT.SINGLE | SWT.BORDER);
0: 		gd = new GridData();
0: 		gd.widthHint = convertWidthInCharsToPixels(16);
0: 		systemHomeText.setLayoutData(gd);
0: 	}
0: 
0: 	protected Composite createDefaultComposite(Composite parent) {
0: 		Composite composite = new Composite(parent, SWT.NULL);
0: 		GridLayout layout = new GridLayout();
0: 		layout.numColumns = 2;
0: 		composite.setLayout(layout);
0: 	
0: 		GridData data = new GridData();
0: 		data.verticalAlignment = GridData.FILL;
0: 		data.horizontalAlignment = GridData.FILL;
0: 		composite.setLayoutData(data);
0: 	
0: 		return composite;
0: 	}
0: 
0: 	protected void fillControls() {
0: 		portText.setText(Integer.toString(dsProps.getPort()));
0: 		hostText.setText(dsProps.getHost());
0: 		systemHomeText.setText(dsProps.getSystemHome());
0: 	}
0: 
0: 	protected void getParams() {
0: 		dsProps = new DerbyProperties();		
0: 		try {
0: 			dsProps.setPort(Integer.parseInt(portText.getText()));
0: 		}
0: 		catch (NumberFormatException ne) {
0: 			// do nothing; use the default port number
0: 		}
0: 		dsProps.setHost(hostText.getText());
0: 		dsProps.setSystemHome(systemHomeText.getText());
0: 	}
0: 
0: 	protected GridData getSeperatorLabelGridData() {
0: 	
0: 	    GridData gridData = new GridData(GridData.BEGINNING |
0: 	                            GridData.HORIZONTAL_ALIGN_FILL |
0: 	                            GridData.GRAB_VERTICAL |
0: 	                            GridData.BEGINNING |
0: 	                            GridData.VERTICAL_ALIGN_BEGINNING |
0: 	                            GridData.VERTICAL_ALIGN_FILL) ;
0: 	    gridData.horizontalSpan = 2;
0: 	    gridData.grabExcessVerticalSpace  = false;
0: 	    gridData.grabExcessHorizontalSpace = true;
0: 	    return gridData;
0: 	
0: 	}
0: 
0: 	protected void performDefaults() {
0: 		dsProps = new DerbyProperties();
0: 		fillControls();
0: 	}
0: 	public boolean performOk() {
0: 		IProject proj = (IProject)getElement();
0: 		getParams();
0: 		try {
0: 		
0: 			dsProps.save(proj.getProject());
0: 		}
0: 		catch (CoreException ce) {
0: 			System.err.println(SelectionUtil.getStatusMessages(ce));
0: 			return false;
0: 		}
0: 		return true;
0: 	}
0: 
0: 	protected Control createContents(Composite parent) {
0: 		Composite composite = new Composite(parent, SWT.NONE);
0: 		GridLayout layout = new GridLayout();
0: 		composite.setLayout(layout);
0: 		GridData data = new GridData(GridData.FILL);
0: 		data.grabExcessHorizontalSpace = true;
0: 		composite.setLayoutData(data);
0: 		addControls(composite);
0: 		IProject proj = (IProject)getElement();
0: 		try {
0: 			dsProps = new DerbyProperties(proj);
0: 			fillControls();
0: 		}
0: 		catch (CoreException ce) {
0: 			Logger.log(SelectionUtil.getStatusMessages(ce),IStatus.ERROR);
0: 		}
0: 		return composite;
0: 	}	
0: 
0: }
============================================================================