1:8a78aa5: /*
1:8a78aa5: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DropTableTest
10:8a78aa5: 
1:8a78aa5: Licensed to the Apache Software Foundation (ASF) under one or more
1:8a78aa5: contributor license agreements.  See the NOTICE file distributed with
1:8a78aa5: this work for additional information regarding copyright ownership.
1:8a78aa5: The ASF licenses this file to You under the Apache License, Version 2.0
1:8a78aa5: (the "License"); you may not use this file except in compliance with
1:8a78aa5: the License.  You may obtain a copy of the License at
1:8a78aa5: 
1:8a78aa5: http://www.apache.org/licenses/LICENSE-2.0
1:8a78aa5: 
1:8a78aa5: Unless required by applicable law or agreed to in writing, software
1:8a78aa5: distributed under the License is distributed on an "AS IS" BASIS,
1:8a78aa5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a78aa5: See the License for the specific language governing permissions and
1:8a78aa5: limitations under the License.
1:8a78aa5: 
1:8a78aa5:  */
1:8a78aa5: package org.apache.derbyTesting.functionTests.tests.lang;
1:8a78aa5: 
1:8a78aa5: import java.sql.SQLException;
1:8a78aa5: import java.sql.Statement;
1:8a78aa5: import java.sql.PreparedStatement;
1:8a78aa5: import java.sql.ResultSet;
1:8a78aa5: 
1:8a78aa5: import junit.framework.Test;
1:8a78aa5: import org.apache.derbyTesting.junit.JDBC;
1:8a78aa5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:8a78aa5: import org.apache.derbyTesting.junit.TestConfiguration;
1:8a78aa5: 
1:8a78aa5: public final class DropTableTest extends BaseJDBCTestCase {
1:8a78aa5: 
1:8a78aa5:     /**
1:8a78aa5:      * Public constructor required for running test as standalone JUnit.
1:8a78aa5:      */
1:8a78aa5:     public DropTableTest(String name)
1:8a78aa5:     {
1:8a78aa5:         super(name);
1:8a78aa5:     }
1:8a78aa5:     
1:8a78aa5:     public static Test suite()
1:8a78aa5:     {
1:9df9f25:         return TestConfiguration.defaultSuite(DropTableTest.class);
1:8a78aa5:     }
1:8a78aa5: 
1:8a78aa5:     public void testDropTableWithConstraints() throws Exception
1:8a78aa5:     {
1:8a78aa5:         //test table with different constraints
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         // test simple table - all should work
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1 ( a int)");
1:8a78aa5:         st.executeUpdate( " drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // test table with unique constraint - all should work
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1 (a int not null unique)");
1:8a78aa5:         st.executeUpdate( " drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // test table with primary constraint - all should work
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1 ( a int not null primary key)");
1:8a78aa5:         st.executeUpdate( " drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // test table with check constraint - all should work
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1 ( a int check(a > 0))");
1:8a78aa5:         st.executeUpdate( " drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // test table with index - all should work
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1 ( a int)");
1:8a78aa5:         st.executeUpdate( " create index t1index on t1(a)");
1:8a78aa5:         st.executeUpdate( " drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // test table with foreign key references;
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int not null primary key)");
1:8a78aa5:         st.executeUpdate(
1:8a78aa5:                 " create table t2(a int constraint reft1a references t1(a))");
1:8a78aa5:         
1:8a78aa5:         // this should fail with a dependent constraint error
1:8a78aa5:         
1:8a78aa5:         assertStatementError("X0Y25", st, "drop table t1");
1:8a78aa5:         
1:8a78aa5:         // dropping dependent constraint
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "alter table t2 drop constraint reft1a");
1:8a78aa5:         
1:8a78aa5:         // this should work since dependent constraint was dropped
1:8a78aa5:         
2:8a78aa5:         st.executeUpdate( "drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // the following should work since no referential 
1:8a78aa5:         // constraint is left
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "insert into t2 values(1)");
1:8a78aa5:         st.executeUpdate( " drop table t2");
1:8a78aa5:     }
1:9df9f25: 
1:8a78aa5:     public void testDropTableWithView() throws SQLException{
1:8a78aa5:         // test table with view
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int, b int)");
1:8a78aa5:         st.executeUpdate( " create table t2(c int, d int)");
1:8a78aa5:         st.executeUpdate( " create view vt1a as select a from t1");
1:8a78aa5:         st.executeUpdate( " create view vt1b as select b from t1");
1:8a78aa5:         st.executeUpdate( " create view vt1t2 as select * from t1, t2");
1:8a78aa5:         st.executeUpdate( " create view vvt1a as select * from vt1a");
1:8a78aa5:         st.executeUpdate( " create view vvvt1a as select * from vvt1a");
1:8a78aa5:         
1:8a78aa5:         // this should fail with view being a dependent object
1:8a78aa5:         
1:8a78aa5:         assertStatementError("X0Y23", st, "drop table t1");
1:8a78aa5:         
1:8a78aa5:         // dropping dependent views
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "drop view vvvt1a");
1:8a78aa5:         st.executeUpdate( " drop view vvt1a");
1:8a78aa5:         st.executeUpdate( " drop view vt1t2");
1:8a78aa5:         st.executeUpdate( " drop view vt1b");
1:8a78aa5:         st.executeUpdate( " drop view vt1a");
1:8a78aa5:         
1:8a78aa5:         // this should work after dependent views were dropped
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "drop table t1");
1:8a78aa5:         
1:8a78aa5:         // this shouldn't find the view
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from vt1a");
1:8a78aa5:         assertStatementError("42X05", st, " select * from vt1b");
1:8a78aa5:         assertStatementError("42X05", st, " select * from vt1t2");
1:8a78aa5:         assertStatementError("42X05", st, " select * from vvt1a");
1:8a78aa5:         assertStatementError("42X05", st, " select * from vvvt1a");
1:8a78aa5:         st.executeUpdate( " drop table t2");
1:8a78aa5:     }
1:8a78aa5:     public void testDropTableWithPreparedStatement() throws SQLException{
1:8a78aa5:         // test table with prepared statement
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int)");
1:9df9f25:         PreparedStatement pSt = prepareStatement( "select * from t1");
1:8a78aa5:         
1:8a78aa5:         // this should work, statement will be invalidated and 
1:8a78aa5:         // will fail when recompiled
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "drop table t1");
1:8a78aa5:         assertStatementError("42X05", pSt);
1:8a78aa5:     }
1:9df9f25: 
1:8a78aa5:     public void testDropTableWithTriggers() throws SQLException{
1:8a78aa5:         // test table with triggers
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int)");
1:8a78aa5:         st.executeUpdate( " create table t2(a int)");
1:8a78aa5:         st.executeUpdate(
1:8a78aa5:             " create trigger t1trig after insert on t1 for each "
1:8a78aa5:             + "row insert into t2 values(1)");
1:8a78aa5:         
1:8a78aa5:         // this should work - trigger should be deleted
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "drop table t1");
1:8a78aa5:         
1:8a78aa5:         // t1 shouldn't be found
1:8a78aa5:         
1:8a78aa5:         assertStatementError("42X05", st, "select * from t1");
1:8a78aa5:         st.executeUpdate( " drop table t2");
1:8a78aa5:         
1:8a78aa5:         // test table within the body of a trigger on another table
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int)");
1:8a78aa5:         st.executeUpdate( " create table t2(a int)");
1:8a78aa5:         st.executeUpdate(
1:8a78aa5:             " create trigger t2trig after insert on t2 for each "
1:8a78aa5:             + "row insert into t1 values(1)");
1:8a78aa5:         
1:cc67949:         // this should fail because t2trig depends on t1 (used to work
1:cc67949:         // before DERBY-2041)
1:cc67949:         assertStatementError("X0Y25", st, "drop table t1");
1:cc67949: 
1:cc67949:         // trigger should still work
1:cc67949:         st.executeUpdate("insert into t2 values(1)");
1:cc67949:         JDBC.assertSingleValueResultSet(
1:cc67949:                 st.executeQuery("select * from t1"), "1");
1:cc67949:         JDBC.assertSingleValueResultSet(
1:cc67949:                 st.executeQuery("select * from t2"), "1");
1:cc67949: 
1:8a78aa5:         st.executeUpdate( " drop table t2");
1:cc67949:         st.executeUpdate( " drop table t1");
1:8a78aa5:     }
1:8a78aa5:     
1:8a78aa5:     public void testDropTableDropView() throws SQLException{
1:8a78aa5:         // test drop view
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t1(a int)");
1:8a78aa5:         st.executeUpdate( " create view vt1 as select * from t1");
1:8a78aa5:         st.executeUpdate( " create view vvt1 as select * from vt1");
1:8a78aa5:         
1:8a78aa5:         // these should fail
1:8a78aa5:         
1:8a78aa5:         assertStatementError("X0Y23", st, "drop view vt1");
1:8a78aa5:         assertStatementError("42X01", st, " drop view vt1 restrict");
1:8a78aa5:         assertStatementError("42X01", st, " drop view vt1 cascade");
1:8a78aa5:         
1:e737c81:         st.executeUpdate( "drop view vvt1"); // Clean up.
1:e737c81:         st.executeUpdate( "drop view  vt1"); // Clean up.
1:e737c81:         st.executeUpdate( "drop table  t1"); // Clean up.
1:8a78aa5:     }
1:9df9f25: 
1:8a78aa5:     public void testDropTableIndexesDropped() throws SQLException{
1:8a78aa5:         // make sure that indexes are dropped for drop table
1:8a78aa5:         
1:9df9f25:         Statement st = createStatement();
1:9df9f25:         setAutoCommit(false);
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "create table t2(a int not null primary key)");
1:8a78aa5:         st.executeUpdate(
1:8a78aa5:             "create table reft2(a int constraint ref1 references t2)");
1:8a78aa5:         
1:8a78aa5:         // count should be 2
1:8a78aa5:         
1:8a78aa5:         JDBC.assertSingleValueResultSet( st.executeQuery(
1:8a78aa5:             "select count(*) from (sys.sysconglomerates c), (sys.systables t) "
1:8a78aa5:             + "where t.tableid = c.tableid and "
1:8a78aa5:             + "t.tablename = 'REFT2'"), "2");
1:8a78aa5:         
1:8a78aa5:         // drop dependent referential constraint
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "alter table reft2 drop constraint ref1");
1:8a78aa5:         
1:8a78aa5:         // should work since dependent constraint was previously 
1:8a78aa5:         // dropped
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate( "drop table t2");
1:8a78aa5:         
1:8a78aa5:         // count should be 1
1:8a78aa5:         
1:8a78aa5:         JDBC.assertSingleValueResultSet( st.executeQuery(
1:8a78aa5:             "select count(*) "
1:8a78aa5:             + "from (sys.sysconglomerates c), (sys.systables t) "
1:8a78aa5:             + "where t.tableid = c.tableid and "
1:8a78aa5:             + "t.tablename = 'REFT2'"), "1");
1:9df9f25: 
1:9df9f25:         rollback();
1:8a78aa5:         
1:8a78aa5:         // unsuccessful drop table should not affect open cursor 
1:8a78aa5:         // beetle 4393
1:8a78aa5:         
1:8a78aa5:         st.executeUpdate(
1:8a78aa5:             " create table T1 (i int, c varchar(255), d varchar(255))");
1:8a78aa5:         st.executeUpdate( " insert into T1(i) values(1)");
1:8a78aa5:         st.executeUpdate( " insert into T1(i) values(2)");
1:8a78aa5:         
1:9df9f25:         Statement st1 = createStatement();
1:8a78aa5:         st1.setCursorName("X1");
1:8a78aa5:         
1:8a78aa5:         ResultSet rs1 = st1.executeQuery( "select i from t1 for update of c"); 
1:9df9f25:         PreparedStatement pSt =
1:9df9f25:             prepareStatement("update t1 set c = CHAR(i) where current of X1");
1:8a78aa5:         
1:8a78aa5:         assertStatementError("X0X95",st,"drop table T1");
1:8a78aa5:         
1:8a78aa5:         rs1.next();      
1:8a78aa5:         
1:8a78aa5:         pSt.executeUpdate();
1:8a78aa5:         
1:9df9f25:         ResultSet rs = st.executeQuery("select * from T1");
1:9df9f25:         String[] expColNames = new String[]{"I","C","D"};
1:8a78aa5:         JDBC.assertColumnNames(rs, expColNames);
1:8a78aa5:         
1:9df9f25:         String[][] expRS = new String[][]{
1:8a78aa5:             {"1","1",null},
1:8a78aa5:             {"2",null,null}
1:8a78aa5:         };
1:8a78aa5:         JDBC.assertFullResultSet(rs, expRS);
1:8a78aa5:         
1:8a78aa5:         st1.close();
1:e737c81:         st.executeUpdate("drop table T1"); // Clean up
1:9df9f25: 
1:8a78aa5:         //pretend all of the above didn't happen
1:9df9f25:         setAutoCommit(true);
1:8a78aa5:     }
1:8a78aa5: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cc67949
/////////////////////////////////////////////////////////////////////////
1:         // this should fail because t2trig depends on t1 (used to work
1:         // before DERBY-2041)
1:         assertStatementError("X0Y25", st, "drop table t1");
1: 
1:         // trigger should still work
1:         st.executeUpdate("insert into t2 values(1)");
1:         JDBC.assertSingleValueResultSet(
1:                 st.executeQuery("select * from t1"), "1");
1:         JDBC.assertSingleValueResultSet(
1:                 st.executeQuery("select * from t2"), "1");
1: 
1:         st.executeUpdate( " drop table t1");
commit:9df9f25
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(DropTableTest.class);
1:         Statement st = createStatement();
1:         setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Statement st = createStatement();
1:         setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1:         Statement st = createStatement();
1:         setAutoCommit(false);
1:         PreparedStatement pSt = prepareStatement( "select * from t1");
1: 
1:         Statement st = createStatement();
1:         setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1:         Statement st = createStatement();
1:         setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Statement st = createStatement();
1:         setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:         rollback();
/////////////////////////////////////////////////////////////////////////
1:         Statement st1 = createStatement();
1:         PreparedStatement pSt =
1:             prepareStatement("update t1 set c = CHAR(i) where current of X1");
/////////////////////////////////////////////////////////////////////////
1:         ResultSet rs = st.executeQuery("select * from T1");
1:         String[] expColNames = new String[]{"I","C","D"};
1:         String[][] expRS = new String[][]{
/////////////////////////////////////////////////////////////////////////
1: 
1:         setAutoCommit(true);
author:Ole Solberg
-------------------------------------------------------------------------------
commit:e737c81
/////////////////////////////////////////////////////////////////////////
1:         st.executeUpdate( "drop view vvt1"); // Clean up.
1:         st.executeUpdate( "drop view  vt1"); // Clean up.
1:         st.executeUpdate( "drop table  t1"); // Clean up.
/////////////////////////////////////////////////////////////////////////
1:         st.executeUpdate("drop table T1"); // Clean up
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:8a78aa5
/////////////////////////////////////////////////////////////////////////
1: /*
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DropTableTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.SQLWarning;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public final class DropTableTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public DropTableTest(String name)
1:     {
1:         super(name);
1:     }
1:     
0:     ResultSet rs = null;
0:     ResultSetMetaData rsmd;
0:     SQLWarning sqlWarn = null;
0:     PreparedStatement pSt;
0:     CallableStatement cSt;
0:     String [][] expRS;
0:     String [] expColNames;
0:     Statement st;
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("dropTable Test");
0:         suite.addTest(TestConfiguration.defaultSuite(DropTableTest.class));
0:         return suite;
1:     }
1: 
1:     public void testDropTableWithConstraints() throws Exception
1:     {
1:         //test table with different constraints
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         // test simple table - all should work
1:         
1:         st.executeUpdate( "create table t1 ( a int)");
1:         st.executeUpdate( " drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // test table with unique constraint - all should work
1:         
1:         st.executeUpdate( "create table t1 (a int not null unique)");
1:         st.executeUpdate( " drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // test table with primary constraint - all should work
1:         
1:         st.executeUpdate( "create table t1 ( a int not null primary key)");
1:         st.executeUpdate( " drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // test table with check constraint - all should work
1:         
1:         st.executeUpdate( "create table t1 ( a int check(a > 0))");
1:         st.executeUpdate( " drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // test table with index - all should work
1:         
1:         st.executeUpdate( "create table t1 ( a int)");
1:         st.executeUpdate( " create index t1index on t1(a)");
1:         st.executeUpdate( " drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // test table with foreign key references;
1:         
1:         st.executeUpdate( "create table t1(a int not null primary key)");
1:         st.executeUpdate(
1:                 " create table t2(a int constraint reft1a references t1(a))");
1:         
1:         // this should fail with a dependent constraint error
1:         
1:         assertStatementError("X0Y25", st, "drop table t1");
1:         
1:         // dropping dependent constraint
1:         
1:         st.executeUpdate( "alter table t2 drop constraint reft1a");
1:         
1:         // this should work since dependent constraint was dropped
1:         
1:         st.executeUpdate( "drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         
1:         // the following should work since no referential 
1:         // constraint is left
1:         
1:         st.executeUpdate( "insert into t2 values(1)");
1:         st.executeUpdate( " drop table t2");
1:         
0:         st.close();
1:     }
1:     public void testDropTableWithView() throws SQLException{
1:         // test table with view
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         st.executeUpdate( "create table t1(a int, b int)");
1:         st.executeUpdate( " create table t2(c int, d int)");
1:         st.executeUpdate( " create view vt1a as select a from t1");
1:         st.executeUpdate( " create view vt1b as select b from t1");
1:         st.executeUpdate( " create view vt1t2 as select * from t1, t2");
1:         st.executeUpdate( " create view vvt1a as select * from vt1a");
1:         st.executeUpdate( " create view vvvt1a as select * from vvt1a");
1:         
1:         // this should fail with view being a dependent object
1:         
1:         assertStatementError("X0Y23", st, "drop table t1");
1:         
1:         // dropping dependent views
1:         
1:         st.executeUpdate( "drop view vvvt1a");
1:         st.executeUpdate( " drop view vvt1a");
1:         st.executeUpdate( " drop view vt1t2");
1:         st.executeUpdate( " drop view vt1b");
1:         st.executeUpdate( " drop view vt1a");
1:         
1:         // this should work after dependent views were dropped
1:         
1:         st.executeUpdate( "drop table t1");
1:         
1:         // this shouldn't find the view
1:         
1:         assertStatementError("42X05", st, "select * from vt1a");
1:         assertStatementError("42X05", st, " select * from vt1b");
1:         assertStatementError("42X05", st, " select * from vt1t2");
1:         assertStatementError("42X05", st, " select * from vvt1a");
1:         assertStatementError("42X05", st, " select * from vvvt1a");
1:         st.executeUpdate( " drop table t2");
1:         
0:         st.close();
1:     }
1:     public void testDropTableWithPreparedStatement() throws SQLException{
1:         // test table with prepared statement
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         st.executeUpdate( "create table t1(a int)");
0:         pSt = prepareStatement( "select * from t1");
1:         
1:         // this should work, statement will be invalidated and 
1:         // will fail when recompiled
1:         
1:         st.executeUpdate( "drop table t1");
1:         assertStatementError("42X05", pSt);
1:  
0:         st.close();
1:     }
1:     public void testDropTableWithTriggers() throws SQLException{
1:         // test table with triggers
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         st.executeUpdate( "create table t1(a int)");
1:         st.executeUpdate( " create table t2(a int)");
1:         st.executeUpdate(
1:             " create trigger t1trig after insert on t1 for each "
1:             + "row insert into t2 values(1)");
1:         
1:         // this should work - trigger should be deleted
1:         
1:         st.executeUpdate( "drop table t1");
1:         
1:         // t1 shouldn't be found
1:         
1:         assertStatementError("42X05", st, "select * from t1");
1:         st.executeUpdate( " drop table t2");
1:         
1:         // test table within the body of a trigger on another table
1:         
1:         st.executeUpdate( "create table t1(a int)");
1:         st.executeUpdate( " create table t2(a int)");
1:         st.executeUpdate(
1:             " create trigger t2trig after insert on t2 for each "
1:             + "row insert into t1 values(1)");
1:         
0:         // this should work
1:         
1:         st.executeUpdate( "drop table t1");
1:         
0:         // the following should get an error when trying to 
0:         // recompile the trigger action
1:         
0:         assertStatementError("42X05", st, "insert into t2 values(1)");
1:         st.executeUpdate( " drop table t2");
1:         
0:         st.close();
1:     }
1:     
1:     public void testDropTableDropView() throws SQLException{
1:         // test drop view
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         st.executeUpdate( "create table t1(a int)");
1:         st.executeUpdate( " create view vt1 as select * from t1");
1:         st.executeUpdate( " create view vvt1 as select * from vt1");
1:         
1:         // these should fail
1:         
1:         assertStatementError("X0Y23", st, "drop view vt1");
1:         assertStatementError("42X01", st, " drop view vt1 restrict");
1:         assertStatementError("42X01", st, " drop view vt1 cascade");
1:         
0:         st.close();
1:     }
1:     public void testDropTableIndexesDropped() throws SQLException{
1:         // make sure that indexes are dropped for drop table
1:         
0:         st = createStatement();
0:         getConnection().setAutoCommit(false);
1:         
1:         st.executeUpdate( "create table t2(a int not null primary key)");
1:         st.executeUpdate(
1:             "create table reft2(a int constraint ref1 references t2)");
1:         
1:         // count should be 2
1:         
1:         JDBC.assertSingleValueResultSet( st.executeQuery(
1:             "select count(*) from (sys.sysconglomerates c), (sys.systables t) "
1:             + "where t.tableid = c.tableid and "
1:             + "t.tablename = 'REFT2'"), "2");
1:         
1:         // drop dependent referential constraint
1:         
1:         st.executeUpdate( "alter table reft2 drop constraint ref1");
1:         
1:         // should work since dependent constraint was previously 
1:         // dropped
1:         
1:         st.executeUpdate( "drop table t2");
1:         
1:         // count should be 1
1:         
1:         JDBC.assertSingleValueResultSet( st.executeQuery(
1:             "select count(*) "
1:             + "from (sys.sysconglomerates c), (sys.systables t) "
1:             + "where t.tableid = c.tableid and "
1:             + "t.tablename = 'REFT2'"), "1");
1:         
0:          getConnection().rollback();
1:         
1:         // unsuccessful drop table should not affect open cursor 
1:         // beetle 4393
1:         
1:         st.executeUpdate(
1:             " create table T1 (i int, c varchar(255), d varchar(255))");
1:         st.executeUpdate( " insert into T1(i) values(1)");
1:         st.executeUpdate( " insert into T1(i) values(2)");
1:         
0:         Statement st1 = getConnection().createStatement();
1:         st1.setCursorName("X1");
1:         
1:         ResultSet rs1 = st1.executeQuery( "select i from t1 for update of c"); 
0:         pSt = prepareStatement("update t1 set c = CHAR(i) where current of X1");
1:         
1:         assertStatementError("X0X95",st,"drop table T1");
1:         
1:         rs1.next();      
1:         
1:         pSt.executeUpdate();
1:         
0:         rs=st.executeQuery("select * from T1");
0:         expColNames=new String[]{"I","C","D"};
1:         JDBC.assertColumnNames(rs, expColNames);
1:         
0:         expRS=new String[][]{
1:             {"1","1",null},
1:             {"2",null,null}
1:         };
1:         JDBC.assertFullResultSet(rs, expRS);
1:         
1:         st1.close();
0:         st.close();
1:         //pretend all of the above didn't happen
0:         getConnection().setAutoCommit(true);
1:     }
1: }
============================================================================