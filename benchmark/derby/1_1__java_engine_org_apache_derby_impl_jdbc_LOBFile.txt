1:2333262: /*
1:2333262: 
1:2333262:    Derby - Class org.apache.derby.impl.jdbc.LOBFile
1:2333262: 
1:2333262:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2333262:    contributor license agreements.  See the NOTICE file distributed with
1:2333262:    this work for additional information regarding copyright ownership.
1:2333262:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2333262:    (the "License"); you may not use this file except in compliance with
1:2333262:    the License.  You may obtain a copy of the License at
1:2333262: 
1:2333262:       http://www.apache.org/licenses/LICENSE-2.0
1:2333262: 
1:2333262:    Unless required by applicable law or agreed to in writing, software
1:2333262:    distributed under the License is distributed on an "AS IS" BASIS,
1:2333262:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2333262:    See the License for the specific language governing permissions and
1:2333262:    limitations under the License.
1:2333262: 
1:2333262:  */
1:2333262: package org.apache.derby.impl.jdbc;
1:2333262: 
1:2333262: import java.io.FileNotFoundException;
1:2333262: import java.io.IOException;
1:2333262: import org.apache.derby.iapi.error.StandardException;
1:2333262: import org.apache.derby.io.StorageFile;
1:2333262: import org.apache.derby.io.StorageRandomAccessFile;
1:2333262: 
1:2333262: /**
1:2333262:  * LOBFile is a wrapper over StorageRandomAccessFile. The purpose of this class
1:2333262:  * is to let the user of this class access StorageRandomAccessFile in plain and
1:2333262:  * in encrypted for without having to change code.
1:2333262:  */
1:2333262: class LOBFile {
1:2fb5c8d:     /** The temporary file where the contents of the LOB should be stored. */
1:2fb5c8d:     private final StorageFile storageFile;
1:2fb5c8d: 
1:2fb5c8d:     /** An object giving random access to {@link #storageFile}. */
1:2333262:     private final StorageRandomAccessFile randomAccessFile;
1:2fb5c8d: 
1:2333262:     /**
1:2333262:      * Constructs LOBFile.
1:2333262:      *
1:2333262:      * @param lobFile StorageFile object for which the file will be created
1:2333262:      * @throws FileNotFoundException if the file exists but is a directory or
1:2333262:      * cannot be opened
1:2333262:      */
1:2333262:     LOBFile(StorageFile lobFile) throws FileNotFoundException {
1:2fb5c8d:         storageFile = lobFile;
1:2333262:         randomAccessFile = lobFile.getRandomAccessFile("rw");
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2fb5c8d:      * Get the {@code StorageFile} which represents the file where the
1:2fb5c8d:      * contents of the LOB are stored.
1:2fb5c8d:      * @return a {@code StorageFile} instance
1:2fb5c8d:      */
1:2fb5c8d:     StorageFile getStorageFile() {
1:2fb5c8d:         return storageFile;
1:2fb5c8d:     }
1:2fb5c8d: 
1:2fb5c8d:     /**
1:2333262:      * Returns length of the file.
1:2333262:      * @return length of the file
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      */
1:2333262:     long length() throws IOException {
1:2333262:         return randomAccessFile.length();
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Sets the file pointer to a given position.
1:2333262:      * @param pos new position
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      */
1:2333262:     void seek(long pos) throws IOException {
1:2333262:         randomAccessFile.seek (pos);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Writes one bytes into the file.
1:2333262:      * @param b int value of the byte
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     void write(int b) throws IOException, StandardException {
1:2333262:         randomAccessFile.write (b);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Returns the current position of the file pointer.
1:2333262:      * @return file pointer
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      */
1:2333262:     long getFilePointer() throws IOException {
1:2333262:         return randomAccessFile.getFilePointer();
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Writes a segment of bytes into the file.
1:2333262:      * @param b byte array containing bytes to write into the file
1:2333262:      * @param off starting position of segment
1:2333262:      * @param len number of bytes to be written
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     void write(byte[] b, int off, int len)
1:2333262:                                     throws IOException, StandardException {
1:2333262:             randomAccessFile.write (b, off, len);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Reads one byte from file.
1:2333262:      * @return byte
1:2333262:      * @throws IOException if disk operation fails
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     int readByte() throws IOException, StandardException {
1:2333262:         return randomAccessFile.readByte();
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Reads len number of bytes from the file starting from off position
1:2333262:      * in the buffer.
1:2333262:      * @param buff buffer
1:2333262:      * @param off starting position of buffer
1:2333262:      * @param len number of bytes
1:2333262:      * @return number of bytes read
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     int read(byte[] buff, int off, int len)
1:2333262:                                     throws IOException, StandardException {
1:2333262:         return randomAccessFile.read (buff, off, len);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Closes the file.
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     void close() throws IOException {
1:2333262:         randomAccessFile.close();
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Sets the file length to a given size.
1:2333262:      * @param size new size
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     void setLength(long size) throws IOException, StandardException {
1:2333262:         randomAccessFile.setLength (size);
1:2333262:     }
1:2333262: 
1:2333262:     /**
1:2333262:      * Writes a buffer completely into the file.
1:2333262:      * @param buf buffer to write
1:2333262:      * @throws IOException if an I/O error occurs
1:2333262:      * @throws StandardException it won't be thrown, it's in signature to allow
1:2333262:      *              subclasses to throw StandardException
1:2333262:      */
1:2333262:     void write(byte[] buf) throws IOException, StandardException {
1:2333262:         randomAccessFile.write (buf);
1:2333262:     }
1:2333262: 
1:2333262: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2fb5c8d
/////////////////////////////////////////////////////////////////////////
1:     /** The temporary file where the contents of the LOB should be stored. */
1:     private final StorageFile storageFile;
1: 
1:     /** An object giving random access to {@link #storageFile}. */
1: 
/////////////////////////////////////////////////////////////////////////
1:         storageFile = lobFile;
1:      * Get the {@code StorageFile} which represents the file where the
1:      * contents of the LOB are stored.
1:      * @return a {@code StorageFile} instance
1:      */
1:     StorageFile getStorageFile() {
1:         return storageFile;
1:     }
1: 
1:     /**
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.LOBFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.io.StorageRandomAccessFile;
1: 
1: /**
1:  * LOBFile is a wrapper over StorageRandomAccessFile. The purpose of this class
1:  * is to let the user of this class access StorageRandomAccessFile in plain and
1:  * in encrypted for without having to change code.
1:  */
1: class LOBFile {
1:     private final StorageRandomAccessFile randomAccessFile;
1:     /**
1:      * Constructs LOBFile.
1:      *
1:      * @param lobFile StorageFile object for which the file will be created
1:      * @throws FileNotFoundException if the file exists but is a directory or
1:      * cannot be opened
1:      */
1:     LOBFile(StorageFile lobFile) throws FileNotFoundException {
1:         randomAccessFile = lobFile.getRandomAccessFile("rw");
1:     }
1: 
1:     /**
1:      * Returns length of the file.
1:      * @return length of the file
1:      * @throws IOException if an I/O error occurs
1:      */
1:     long length() throws IOException {
1:         return randomAccessFile.length();
1:     }
1: 
1:     /**
1:      * Sets the file pointer to a given position.
1:      * @param pos new position
1:      * @throws IOException if an I/O error occurs
1:      */
1:     void seek(long pos) throws IOException {
1:         randomAccessFile.seek (pos);
1:     }
1: 
1:     /**
1:      * Writes one bytes into the file.
1:      * @param b int value of the byte
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     void write(int b) throws IOException, StandardException {
1:         randomAccessFile.write (b);
1:     }
1: 
1:     /**
1:      * Returns the current position of the file pointer.
1:      * @return file pointer
1:      * @throws IOException if an I/O error occurs
1:      */
1:     long getFilePointer() throws IOException {
1:         return randomAccessFile.getFilePointer();
1:     }
1: 
1:     /**
1:      * Writes a segment of bytes into the file.
1:      * @param b byte array containing bytes to write into the file
1:      * @param off starting position of segment
1:      * @param len number of bytes to be written
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     void write(byte[] b, int off, int len)
1:                                     throws IOException, StandardException {
1:             randomAccessFile.write (b, off, len);
1:     }
1: 
1:     /**
1:      * Reads one byte from file.
1:      * @return byte
1:      * @throws IOException if disk operation fails
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     int readByte() throws IOException, StandardException {
1:         return randomAccessFile.readByte();
1:     }
1: 
1:     /**
1:      * Reads len number of bytes from the file starting from off position
1:      * in the buffer.
1:      * @param buff buffer
1:      * @param off starting position of buffer
1:      * @param len number of bytes
1:      * @return number of bytes read
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     int read(byte[] buff, int off, int len)
1:                                     throws IOException, StandardException {
1:         return randomAccessFile.read (buff, off, len);
1:     }
1: 
1:     /**
1:      * Closes the file.
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     void close() throws IOException {
1:         randomAccessFile.close();
1:     }
1: 
1:     /**
1:      * Sets the file length to a given size.
1:      * @param size new size
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     void setLength(long size) throws IOException, StandardException {
1:         randomAccessFile.setLength (size);
1:     }
1: 
1:     /**
1:      * Writes a buffer completely into the file.
1:      * @param buf buffer to write
1:      * @throws IOException if an I/O error occurs
1:      * @throws StandardException it won't be thrown, it's in signature to allow
1:      *              subclasses to throw StandardException
1:      */
1:     void write(byte[] buf) throws IOException, StandardException {
1:         randomAccessFile.write (buf);
1:     }
1: 
1: }
============================================================================