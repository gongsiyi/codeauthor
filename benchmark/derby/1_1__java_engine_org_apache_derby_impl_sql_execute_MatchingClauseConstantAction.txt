1:508a010: /*
8:508a010: 
1:508a010:    Derby - Class org.apache.derby.impl.sql.execute.MatchingClauseConstantAction
1:508a010: 
1:508a010:    Licensed to the Apache Software Foundation (ASF) under one or more
1:508a010:    contributor license agreements.  See the NOTICE file distributed with
1:508a010:    this work for additional information regarding copyright ownership.
1:508a010:    The ASF licenses this file to you under the Apache License, Version 2.0
1:508a010:    (the "License"); you may not use this file except in compliance with
1:508a010:    the License.  You may obtain a copy of the License at
1:508a010: 
1:508a010:       http://www.apache.org/licenses/LICENSE-2.0
1:508a010: 
1:508a010:    Unless required by applicable law or agreed to in writing, software
1:508a010:    distributed under the License is distributed on an "AS IS" BASIS,
1:508a010:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:508a010:    See the License for the specific language governing permissions and
1:508a010:    limitations under the License.
1:508a010: 
3:508a010:  */
1:508a010: 
1:508a010: package org.apache.derby.impl.sql.execute;
1:508a010: 
1:508a010: import java.io.ObjectOutput;
1:508a010: import java.io.ObjectInput;
1:508a010: import java.io.IOException;
1:508a010: import java.lang.reflect.Field;
1:508a010: import java.lang.reflect.Method;
1:508a010: import java.util.Properties;
1:508a010: import org.apache.derby.iapi.error.StandardException;
1:508a010: import org.apache.derby.iapi.reference.SQLState;
1:508a010: import org.apache.derby.iapi.services.io.ArrayUtil;
1:508a010: import org.apache.derby.iapi.services.io.Formatable;
1:508a010: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:508a010: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:508a010: import org.apache.derby.iapi.sql.ResultDescription;
1:508a010: import org.apache.derby.iapi.sql.ResultSet;
1:508a010: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:508a010: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:508a010: import org.apache.derby.iapi.sql.execute.ExecRow;
1:508a010: import org.apache.derby.iapi.sql.Activation;
1:508a010: import org.apache.derby.iapi.types.SQLBoolean;
1:508a010: import org.apache.derby.shared.common.sanity.SanityManager;
1:508a010: 
3:508a010: /**
1:508a010:  * Describes the execution machinery needed to evaluate a WHEN [ NOT ] MATCHING clause
1:508a010:  * of a MERGE statement.
1:01632c2:  */
1:508a010: public class MatchingClauseConstantAction implements ConstantAction, Formatable
6:508a010: {
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTANTS
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /**
1:508a010:      * Serial version produced by the serialver utility. Needed in order to
1:508a010:      * make serialization work reliably across different compilers.
1:508a010:      */
1:508a010:     private static  final   long    serialVersionUID = -6725483265211088817L;
1:508a010: 
1:508a010:     // for versioning during (de)serialization
1:508a010:     private static final int FIRST_VERSION = 0;
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // STATE
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     // constructor args
1:508a010:     private int _clauseType;
1:508a010:     private String  _matchRefinementName;
1:01632c2:     private ResultDescription   _thenColumnSignature;
1:01632c2:     private String  _rowMakingMethodName;
1:508a010:     private String  _resultSetFieldName;
1:508a010:     private String  _actionMethodName;
1:508a010:     private ConstantAction  _thenAction;
1:508a010: 
1:508a010:     // faulted in or built at run-time
1:508a010:     private transient   GeneratedMethod _matchRefinementMethod;
1:01632c2:     private transient   GeneratedMethod _rowMakingMethod;
1:508a010:     private transient   ResultSet           _actionRS;
1:508a010: 
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // CONSTRUCTOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:bff2571:     /** 0-arg constructor needed by Formatable machinery */
1:bff2571:     public  MatchingClauseConstantAction() {}
1:bff2571: 
1:508a010:     /**
1:508a010:      * Construct from thin air.
1:508a010:      *
1:508a010:      * @param   clauseType  WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE
1:508a010:      * @param   matchRefinementName Name of the method which evaluates the boolean expression in the WHEN clause.
1:01632c2:      * @param   thenColumnSignature The shape of the row which goes into the temporary table.
1:0ae3b6d:      * @param   rowMakingMethodName Name of the method which populates the "then" row with expressions from the driving left join.
1:508a010:      * @param   resultSetFieldName  Name of the field which will be stuffed at runtime with the temporary table of relevant rows.
1:508a010:      * @param   actionMethodName    Name of the method which invokes the INSERT/UPDATE/DELETE action.
1:508a010:      * @param   thenAction  The ConstantAction describing the associated INSERT/UPDATE/DELETE action.
1:508a010:      */
1:508a010:     public  MatchingClauseConstantAction
2:508a010:         (
1:508a010:          int    clauseType,
1:508a010:          String matchRefinementName,
1:01632c2:          ResultDescription  thenColumnSignature,
1:01632c2:          String rowMakingMethodName,
1:508a010:          String resultSetFieldName,
1:508a010:          String actionMethodName,
1:508a010:          ConstantAction thenAction
1:01632c2:          )
1:01632c2:     {
1:508a010:         _clauseType = clauseType;
1:508a010:         _matchRefinementName = matchRefinementName;
1:01632c2:         _thenColumnSignature = thenColumnSignature;
1:01632c2:         _rowMakingMethodName = rowMakingMethodName;
1:508a010:         _resultSetFieldName = resultSetFieldName;
1:508a010:         _actionMethodName = actionMethodName;
1:508a010:         _thenAction = thenAction;
6:508a010:     }
1:01632c2: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // ACCESSORS
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /** Get the clause type: WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE */
1:508a010:     public  int clauseType() { return _clauseType; }
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // ConstantAction BEHAVIOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010: 	public void	executeConstantAction( Activation activation )
2:508a010:         throws StandardException
1:01632c2:     {}
1:01632c2:     
1:01632c2: 	public void	executeConstantAction( Activation activation, TemporaryRowHolderImpl thenRows )
1:01632c2:         throws StandardException
1:508a010:     {
1:508a010:         // nothing to do if no rows qualified
1:01632c2:         if ( thenRows == null ) { return; }
1:508a010: 
1:01632c2:         CursorResultSet sourceRS = thenRows.getResultSet();
1:508a010:         GeneratedMethod actionGM = ((BaseActivation) activation).getMethod( _actionMethodName );
1:508a010: 
1:508a010:         //
1:508a010:         // Push the action-specific ConstantAction rather than the Merge statement's
1:508a010:         // ConstantAction. The INSERT/UPDATE/DELETE expects the default ConstantAction
1:508a010:         // to be appropriate to it.
1:508a010:         //
1:508a010:         try {
1:508a010:             activation.pushConstantAction( _thenAction );
1:508a010: 
1:508a010:             try {
1:508a010:                 //
1:508a010:                 // Poke the temporary table into the variable which will be pushed as
1:508a010:                 // an argument to the INSERT/UPDATE/DELETE action.
1:508a010:                 //
1:508a010:                 Field   resultSetField = activation.getClass().getField( _resultSetFieldName );
1:508a010:                 resultSetField.set( activation, sourceRS );
1:508a010: 
1:01632c2:                 Activation  cursorActivation = sourceRS.getActivation();
1:01632c2: 
1:508a010:                 //
1:508a010:                 // Now execute the generated method which creates an InsertResultSet,
1:508a010:                 // UpdateResultSet, or DeleteResultSet.
1:508a010:                 //
1:508a010:                 Method  actionMethod = activation.getClass().getMethod( _actionMethodName );
1:508a010:                 _actionRS = (ResultSet) actionMethod.invoke( activation, null );
1:508a010:             }
1:508a010:             catch (Exception e) { throw StandardException.plainWrapException( e ); }
1:508a010: 
1:508a010:             // this is where the INSERT/UPDATE/DELETE is processed
1:508a010:             _actionRS.open();
1:508a010:         }
1:508a010:         finally
1:508a010:         {
1:508a010:             activation.popConstantAction();
1:508a010:         }
1:508a010:     }
1:508a010:     
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:757bc0e:     // OTHER PACKAGE VISIBLE BEHAVIOR, CALLED BY MergeResultSet
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010:     /**
3:508a010:      * <p>
1:01632c2:      * Initialize this constant action, nulling out any transient state left over from
1:01632c2:      * a previous use.
1:757bc0e:      * </p>
1:757bc0e:      */
1:01632c2:     void    init()  throws StandardException
1:757bc0e:     {
1:757bc0e:         _actionRS = null;
1:757bc0e:     }
1:757bc0e:     
1:01632c2:     /**
1:01632c2:      * <p>
1:508a010:      * Run the matching refinement clause associated with this WHEN [ NOT ] MATCHED clause.
1:508a010:      * The refinement is a boolean expression. Return the boolean value it resolves to.
1:508a010:      * A boolean NULL is treated as false. If there is no refinement clause, then this method
1:508a010:      * evaluates to true.
1:01632c2:      * </p>
1:508a010:      */
1:508a010:     boolean evaluateRefinementClause( Activation activation )
1:508a010:         throws StandardException
1:757bc0e:     {
1:508a010:         if ( _matchRefinementName == null ) { return true; }
1:508a010:         if ( _matchRefinementMethod == null )
1:01632c2:         {
1:508a010:             _matchRefinementMethod = ((BaseActivation) activation).getMethod( _matchRefinementName );
1:01632c2:         }
1:01632c2: 
1:508a010:         SQLBoolean  result = (SQLBoolean) _matchRefinementMethod.invoke( activation );
1:01632c2: 
1:508a010:         if ( result.isNull() ) { return false; }
1:508a010:         else { return result.getBoolean(); }
1:01632c2:     }
1:01632c2: 
1:01632c2:     /**
1:508a010:      * <p>
1:508a010:      * Construct and buffer a row for the INSERT/UPDATE/DELETE
1:508a010:      * action corresponding to this [ NOT ] MATCHED clause. The buffered row
1:01632c2:      * is built from columns in the passed-in row. The passed-in row is the SELECT list
1:01632c2:      * of the MERGE statement's driving left join.
3:508a010:      * </p>
1:01632c2:      */
1:01632c2:     TemporaryRowHolderImpl  bufferThenRow
1:01632c2:         (
1:01632c2:          Activation activation,
1:01632c2:          TemporaryRowHolderImpl thenRows,
1:01632c2:          ExecRow selectRow
1:508a010:          ) throws StandardException
1:01632c2:     {
1:01632c2:         if ( thenRows == null ) { thenRows = createThenRows( activation ); }
1:01632c2: 
1:0ae3b6d:         ExecRow thenRow = bufferThenRow( activation );
1:01632c2: 
1:01632c2:         thenRows.insert( thenRow );
1:01632c2: 
1:01632c2:         return thenRows;
1:01632c2:     }
1:01632c2:     
1:01632c2:     /**
1:01632c2:      * <p>
1:757bc0e:      * Release resources at the end.
1:01632c2:      * </p>
1:01632c2:      */
1:757bc0e:     void    cleanUp()   throws StandardException
1:01632c2:     {
1:757bc0e:         if ( _actionRS != null )
1:01632c2:         {
1:757bc0e:             _actionRS.close();
1:01632c2:             _actionRS = null;
1:01632c2:         }
1:508a010: 
1:757bc0e:         _matchRefinementMethod = null;
1:757bc0e:         _rowMakingMethod = null;
1:757bc0e:     }
1:757bc0e: 
1:757bc0e:     ///////////////////////////////////////////////////////////////////////////////////
1:757bc0e:     //
1:0ae3b6d:     // CONSTRUCT ROWS TO PUT INTO THE TEMPORARY TABLE
1:757bc0e:     //
1:757bc0e:     ///////////////////////////////////////////////////////////////////////////////////
1:757bc0e: 
1:757bc0e:     /**
1:757bc0e:      * <p>
1:01632c2:      * Construct and buffer a row for the INSERT/UPDATE/DELETE
1:01632c2:      * action corresponding to this [ NOT ] MATCHED clause.
1:01632c2:      * </p>
1:508a010:      */
1:757bc0e:     private ExecRow    bufferThenRow
1:01632c2:         (
1:01632c2:          Activation activation
1:01632c2:          )
1:01632c2:         throws StandardException
1:508a010:     {
1:01632c2:         if ( _rowMakingMethod == null )
1:508a010:         {
1:01632c2:             _rowMakingMethod = ((BaseActivation) activation).getMethod( _rowMakingMethodName );
1:508a010:         }
1:01632c2: 
1:01632c2:         return (ExecRow) _rowMakingMethod.invoke( activation );
1:01632c2:     }
1:01632c2:     
1:508a010:     /**
1:01632c2:      * <p>
1:508a010:      * Create the temporary table for holding the rows which are buffered up
1:508a010:      * for bulk-processing after the driving left join completes.
1:508a010:      * </p>
1:508a010:      */
1:01632c2:     private TemporaryRowHolderImpl  createThenRows( Activation activation )
1:01632c2:         throws StandardException
1:01632c2:     {
1:01632c2:         return new TemporaryRowHolderImpl( activation, new Properties(), _thenColumnSignature );
1:01632c2:     }
1:508a010: 
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010:     //
1:508a010:     // Formatable BEHAVIOR
1:508a010:     //
1:508a010:     ///////////////////////////////////////////////////////////////////////////////////
1:508a010: 
1:508a010: 	/**
1:508a010: 	 * Read this object from a stream of stored objects.
1:508a010: 	 *
1:508a010: 	 * @param in read this.
1:508a010: 	 *
1:508a010: 	 * @exception IOException					thrown on error
1:508a010: 	 * @exception ClassNotFoundException		thrown on error
1:508a010: 	 */
1:508a010: 	public void readExternal( ObjectInput in )
1:508a010: 		 throws IOException, ClassNotFoundException
1:508a010: 	{
1:508a010:         // as the persistent form evolves, switch on this value
1:508a010:         int oldVersion = in.readInt();
1:508a010: 
1:508a010:         _clauseType = in.readInt();
1:bff2571:         _matchRefinementName = (String) in.readObject();
1:01632c2:         _thenColumnSignature = (ResultDescription) in.readObject();
1:01632c2:         _rowMakingMethodName = (String) in.readObject();
1:01632c2:         _resultSetFieldName = (String) in.readObject(); 
1:bff2571:         _actionMethodName = (String) in.readObject();
1:01632c2:        _thenAction = (ConstantAction) in.readObject();
1:508a010: 	}
1:508a010: 
1:508a010: 	/**
1:508a010: 	 * Write this object to a stream of stored objects.
1:508a010: 	 *
1:508a010: 	 * @param out write bytes here.
1:508a010: 	 *
1:508a010: 	 * @exception IOException		thrown on error
1:508a010: 	 */
1:508a010: 	public void writeExternal( ObjectOutput out )
1:508a010: 		 throws IOException
1:508a010: 	{
1:508a010: 		out.writeInt( FIRST_VERSION );
1:508a010: 
1:508a010:         out.writeInt( _clauseType );
1:bff2571:         out.writeObject( _matchRefinementName );
1:01632c2:         out.writeObject( _thenColumnSignature );
1:01632c2:         out.writeObject( _rowMakingMethodName );
1:bff2571:         out.writeObject( _resultSetFieldName );
1:bff2571:         out.writeObject( _actionMethodName );
1:508a010:         out.writeObject( _thenAction );
1:508a010: 	}
1:508a010:  
1:508a010: 	/**
1:508a010: 	 * Get the formatID which corresponds to this class.
1:508a010: 	 *
1:508a010: 	 *	@return	the formatID of this class
1:508a010: 	 */
1:508a010: 	public	int	getTypeFormatId()	{ return StoredFormatIds.MATCHING_CLAUSE_CONSTANT_ACTION_V01_ID; }
1:508a010: 
1:508a010: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0ae3b6d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param   rowMakingMethodName Name of the method which populates the "then" row with expressions from the driving left join.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ExecRow thenRow = bufferThenRow( activation );
/////////////////////////////////////////////////////////////////////////
1:     // CONSTRUCT ROWS TO PUT INTO THE TEMPORARY TABLE
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:757bc0e
/////////////////////////////////////////////////////////////////////////
1:     // OTHER PACKAGE VISIBLE BEHAVIOR, CALLED BY MergeResultSet
/////////////////////////////////////////////////////////////////////////
1:      * Release resources at the end.
1:      * </p>
1:      */
1:     void    cleanUp()   throws StandardException
1:     {
1:         if ( _actionRS != null )
1:         {
1:             _actionRS.close();
1:             _actionRS = null;
1:         }
1: 
1:         _matchRefinementMethod = null;
1:         _rowMakingMethod = null;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
0:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
0:     private ExecRow    bufferThenRowForDelete
/////////////////////////////////////////////////////////////////////////
1:     private ExecRow    bufferThenRow
/////////////////////////////////////////////////////////////////////////
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:     private ResultDescription   _thenColumnSignature;
1:     private String  _rowMakingMethodName;
0:     private int[]   _deleteColumnOffsets;
1:     private transient   GeneratedMethod _rowMakingMethod;
/////////////////////////////////////////////////////////////////////////
1:      * @param   thenColumnSignature The shape of the row which goes into the temporary table.
/////////////////////////////////////////////////////////////////////////
1:          ResultDescription  thenColumnSignature,
1:          String rowMakingMethodName,
/////////////////////////////////////////////////////////////////////////
1:         _thenColumnSignature = thenColumnSignature;
1:         _rowMakingMethodName = rowMakingMethodName;
0:         _deleteColumnOffsets = ArrayUtil.copy( thenColumns );
/////////////////////////////////////////////////////////////////////////
1:     {}
1:     
1: 	public void	executeConstantAction( Activation activation, TemporaryRowHolderImpl thenRows )
1:         throws StandardException
1:         if ( thenRows == null ) { return; }
1:         CursorResultSet sourceRS = thenRows.getResultSet();
/////////////////////////////////////////////////////////////////////////
1:                 Activation  cursorActivation = sourceRS.getActivation();
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Initialize this constant action, nulling out any transient state left over from
1:      * a previous use.
1:      * </p>
1:      */
1:     void    init()  throws StandardException
1:     {
1:         _actionRS = null;
1:     }
1:     
1:     /**
1:      * <p>
/////////////////////////////////////////////////////////////////////////
1:     TemporaryRowHolderImpl  bufferThenRow
1:          TemporaryRowHolderImpl thenRows,
1:         if ( thenRows == null ) { thenRows = createThenRows( activation ); }
1: 
0:         ExecRow thenRow;
1: 
0:         switch( _clauseType )
1:         {
0:         case WHEN_MATCHED_THEN_DELETE:
0:             thenRow = bufferThenRowForDelete( activation, selectRow );
0:             break;
1: 
0:         default:
0:             thenRow = bufferThenRow( activation );
0:             break;
1:         }
1: 
1:         thenRows.insert( thenRow );
1: 
1:         return thenRows;
1:     }
1:     
1:     /**
1:      * <p>
0:      * Construct and buffer a row for the DELETE
0:      * action corresponding to this MATCHED clause. The buffered row
1:      * is built from columns in the passed-in row. The passed-in row is the SELECT list
1:      * of the MERGE statement's driving left join.
1:      * </p>
1:      */
0:     ExecRow    bufferThenRowForDelete
1:         (
1:          Activation activation,
1:          ExecRow selectRow
1:          )
1:         throws StandardException
1:     {
0:         int             thenRowLength = _thenColumnSignature.getColumnCount();
0:             thenRow.setColumn( i + 1, selectRow.getColumn( _deleteColumnOffsets[ i ] ) );
0:         return thenRow;
1:      * Construct and buffer a row for the INSERT/UPDATE/DELETE
1:      * action corresponding to this [ NOT ] MATCHED clause.
1:      * </p>
1:      */
0:     ExecRow    bufferThenRow
1:         (
1:          Activation activation
1:          )
1:         throws StandardException
1:     {
1:         if ( _rowMakingMethod == null )
1:         {
1:             _rowMakingMethod = ((BaseActivation) activation).getMethod( _rowMakingMethodName );
1:         }
1: 
1:         return (ExecRow) _rowMakingMethod.invoke( activation );
1:     }
1:     
1:     /**
1:      * <p>
0:         if ( _actionRS != null )
1:         {
0:             _actionRS.close();
0:             _actionRS = null;
1:         }
1: 
0:         _matchRefinementMethod = null;
0:         _rowMakingMethod = null;
/////////////////////////////////////////////////////////////////////////
1:     private TemporaryRowHolderImpl  createThenRows( Activation activation )
1:         return new TemporaryRowHolderImpl( activation, new Properties(), _thenColumnSignature );
/////////////////////////////////////////////////////////////////////////
1:         _thenColumnSignature = (ResultDescription) in.readObject();
1:         _rowMakingMethodName = (String) in.readObject();
0:         _deleteColumnOffsets = ArrayUtil.readIntArray( in );
1:         _resultSetFieldName = (String) in.readObject(); 
1:        _thenAction = (ConstantAction) in.readObject();
/////////////////////////////////////////////////////////////////////////
1:         out.writeObject( _thenColumnSignature );
1:         out.writeObject( _rowMakingMethodName );
0:         ArrayUtil.writeIntArray( out, _deleteColumnOffsets );
commit:bff2571
/////////////////////////////////////////////////////////////////////////
1:     /** 0-arg constructor needed by Formatable machinery */
1:     public  MatchingClauseConstantAction() {}
1: 
/////////////////////////////////////////////////////////////////////////
1:         _matchRefinementName = (String) in.readObject();
0:         _resultSetFieldName = (String) in.readObject();
1:         _actionMethodName = (String) in.readObject();
/////////////////////////////////////////////////////////////////////////
1:         out.writeObject( _matchRefinementName );
1:         out.writeObject( _resultSetFieldName );
1:         out.writeObject( _actionMethodName );
commit:508a010
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.MatchingClauseConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: import java.util.Properties;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.types.SQLBoolean;
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Describes the execution machinery needed to evaluate a WHEN [ NOT ] MATCHING clause
1:  * of a MERGE statement.
1:  */
1: public class MatchingClauseConstantAction implements ConstantAction, Formatable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Serial version produced by the serialver utility. Needed in order to
1:      * make serialization work reliably across different compilers.
1:      */
1:     private static  final   long    serialVersionUID = -6725483265211088817L;
1: 
1:     // for versioning during (de)serialization
1:     private static final int FIRST_VERSION = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // constructor args
1:     private int _clauseType;
1:     private String  _matchRefinementName;
0:     private int[]   _thenColumnOffsets;
1:     private String  _resultSetFieldName;
1:     private String  _actionMethodName;
1:     private ConstantAction  _thenAction;
1: 
1:     // faulted in or built at run-time
1:     private transient   GeneratedMethod _matchRefinementMethod;
0: 	private transient   TemporaryRowHolderImpl	_thenRows;
1:     private transient   ResultSet           _actionRS;
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct from thin air.
1:      *
1:      * @param   clauseType  WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE
1:      * @param   matchRefinementName Name of the method which evaluates the boolean expression in the WHEN clause.
0:      * @param   thenColumns Column positions (1-based) from the driving left join which are needed to execute the THEN clause.
1:      * @param   resultSetFieldName  Name of the field which will be stuffed at runtime with the temporary table of relevant rows.
1:      * @param   actionMethodName    Name of the method which invokes the INSERT/UPDATE/DELETE action.
1:      * @param   thenAction  The ConstantAction describing the associated INSERT/UPDATE/DELETE action.
1:      */
1:     public  MatchingClauseConstantAction
1:         (
1:          int    clauseType,
1:          String matchRefinementName,
0:          int[]  thenColumns,
1:          String resultSetFieldName,
1:          String actionMethodName,
1:          ConstantAction thenAction
0:          )
1:     {
1:         _clauseType = clauseType;
1:         _matchRefinementName = matchRefinementName;
0:         _thenColumnOffsets = ArrayUtil.copy( thenColumns );
1:         _resultSetFieldName = resultSetFieldName;
1:         _actionMethodName = actionMethodName;
1:         _thenAction = thenAction;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the clause type: WHEN_NOT_MATCHED_THEN_INSERT, WHEN_MATCHED_THEN_UPDATE, WHEN_MATCHED_THEN_DELETE */
1:     public  int clauseType() { return _clauseType; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ConstantAction BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public void	executeConstantAction( Activation activation )
1:         throws StandardException
1:     {
1:         // nothing to do if no rows qualified
0:         if ( _thenRows == null ) { return; }
1: 
0:         CursorResultSet sourceRS = _thenRows.getResultSet();
1:         GeneratedMethod actionGM = ((BaseActivation) activation).getMethod( _actionMethodName );
1: 
1:         //
1:         // Push the action-specific ConstantAction rather than the Merge statement's
1:         // ConstantAction. The INSERT/UPDATE/DELETE expects the default ConstantAction
1:         // to be appropriate to it.
1:         //
1:         try {
1:             activation.pushConstantAction( _thenAction );
1: 
1:             try {
1:                 //
1:                 // Poke the temporary table into the variable which will be pushed as
1:                 // an argument to the INSERT/UPDATE/DELETE action.
1:                 //
1:                 Field   resultSetField = activation.getClass().getField( _resultSetFieldName );
1:                 resultSetField.set( activation, sourceRS );
1: 
1:                 //
1:                 // Now execute the generated method which creates an InsertResultSet,
1:                 // UpdateResultSet, or DeleteResultSet.
1:                 //
1:                 Method  actionMethod = activation.getClass().getMethod( _actionMethodName );
1:                 _actionRS = (ResultSet) actionMethod.invoke( activation, null );
1:             }
1:             catch (Exception e) { throw StandardException.plainWrapException( e ); }
1: 
1:             // this is where the INSERT/UPDATE/DELETE is processed
1:             _actionRS.open();
1:         }
1:         finally
1:         {
1:             activation.popConstantAction();
1:         }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
0:     // OTHER PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Run the matching refinement clause associated with this WHEN [ NOT ] MATCHED clause.
1:      * The refinement is a boolean expression. Return the boolean value it resolves to.
1:      * A boolean NULL is treated as false. If there is no refinement clause, then this method
1:      * evaluates to true.
1:      * </p>
1:      */
1:     boolean evaluateRefinementClause( Activation activation )
1:         throws StandardException
1:     {
1:         if ( _matchRefinementName == null ) { return true; }
1:         if ( _matchRefinementMethod == null )
1:         {
1:             _matchRefinementMethod = ((BaseActivation) activation).getMethod( _matchRefinementName );
1:         }
1: 
1:         SQLBoolean  result = (SQLBoolean) _matchRefinementMethod.invoke( activation );
1: 
1:         if ( result.isNull() ) { return false; }
1:         else { return result.getBoolean(); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Construct and buffer a row for the INSERT/UPDATE/DELETE
1:      * action corresponding to this [ NOT ] MATCHED clause. The buffered row
0:      * is built from columns in the passed-in row. The passed-in row is the SELECT list
0:      * of the MERGE statement's driving left join.
1:      * </p>
1:      */
0:     void    bufferThenRow
1:         (
0:          Activation activation,
0:          ResultDescription selectDescription,
0:          ExecRow selectRow
1:          ) throws StandardException
1:     {
0:         int             thenRowLength = _thenColumnOffsets.length;
0:         ValueRow    thenRow = new ValueRow( thenRowLength );
0:         for ( int i = 0; i < thenRowLength; i++ )
1:         {
0:             thenRow.setColumn( i + 1, selectRow.getColumn( _thenColumnOffsets[ i ] ) );
1:         }
1: 
0:         if ( _thenRows == null ) { createThenRows( activation, selectDescription ); }
0:         _thenRows.insert( thenRow );
1:     }
1: 
1:     /**
1:      * <p>
0:      * Release resources at the end.
1:      * </p>
1:      */
0:     void    cleanUp()   throws StandardException
1:     {
0:         if ( _actionRS != null ) { _actionRS.close(); }
0:         if ( _thenRows != null ) { _thenRows.close(); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Create the temporary table for holding the rows which are buffered up
1:      * for bulk-processing after the driving left join completes.
1:      * </p>
1:      */
0:     private void    createThenRows( Activation activation, ResultDescription selectDescription )
1:         throws StandardException
1:     {
0:         ResultDescription   thenDescription = activation.getLanguageConnectionContext().getLanguageFactory().getResultDescription
0:             ( selectDescription, _thenColumnOffsets );
1: 
0:         _thenRows = new TemporaryRowHolderImpl( activation, new Properties(), thenDescription );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Formatable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1:         // as the persistent form evolves, switch on this value
1:         int oldVersion = in.readInt();
1: 
1:         _clauseType = in.readInt();
0:         _matchRefinementName = in.readUTF();
0:         _thenColumnOffsets = ArrayUtil.readIntArray( in );
0:         _resultSetFieldName = in.readUTF();
0:         _actionMethodName = in.readUTF();
0:         _thenAction = (ConstantAction) in.readObject();
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeInt( FIRST_VERSION );
1: 
1:         out.writeInt( _clauseType );
0:         out.writeUTF( _matchRefinementName );
0:         ArrayUtil.writeIntArray( out, _thenColumnOffsets );
0:         out.writeUTF( _resultSetFieldName );
0:         out.writeUTF( _actionMethodName );
1:         out.writeObject( _thenAction );
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.MATCHING_CLAUSE_CONSTANT_ACTION_V01_ID; }
1: 
1: }
============================================================================