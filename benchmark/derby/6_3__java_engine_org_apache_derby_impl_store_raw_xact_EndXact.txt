1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.EndXact
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This operation indicates the End of a transaction.
1:eac0369: 	@see Loggable
1:eac0369: */
1:eac0369: 
1:eac0369: public class EndXact implements Loggable {
1:eac0369: 
1:eac0369: 	private int transactionStatus;
1:eac0369: 	private GlobalTransactionId xactId;
1:eac0369: 
1:eac0369: 	public EndXact(GlobalTransactionId xid, int s) {
1:eac0369: 		super();
1:eac0369: 
1:eac0369: 		xactId = xid;
1:eac0369: 		transactionStatus = s;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public EndXact() 
1:eac0369: 	{ super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		out.writeObject(xactId);
1:eac0369: 		CompressedNumber.writeInt(out, transactionStatus);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		xactId = (GlobalTransactionId)in.readObject();
1:eac0369: 		transactionStatus = CompressedNumber.readInt(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_END_XACT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 		@see Loggable
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Apply the change indicated by this operation and optional data.
1:eac0369: 
1:eac0369: 		@param xact			the Transaction
1:eac0369: 		@param instant		the log instant of this operation
1:eac0369: 		@param in			optional data
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 	{
1:eac0369: 
1:eac0369:         if ((transactionStatus & Xact.END_PREPARED) == 0)
1:eac0369:         {
1:eac0369:             ((RawTransaction)xact).removeUpdateTransaction();
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             ((RawTransaction)xact).prepareTransaction();
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the default for prepared log is always null for all the operations
1:eac0369: 		that don't have optionalData.  If an operation has optional data,
1:eac0369: 		the operation need to prepare the optional data for this method.
1:eac0369: 
1:eac0369: 		EndXact has no optional data to write out
1:eac0369: 
1:eac0369: 		@see ObjectOutput
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (ByteArray) null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Always redo an EndXact.
1:eac0369: 
1:eac0369: 		@param xact		The transaction trying to redo this operation
1:eac0369: 		@return true if operation needs redoing, false if not.
1:eac0369: 	*/
1:eac0369: 	public boolean needsRedo(Transaction xact)
1:eac0369: 	{
1:eac0369: 		return true;			// always redo this
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		EndXact has no resource to release
1:eac0369: 	*/
1:eac0369: 	public void releaseResource(Transaction xact)
1:eac0369: 	{}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		EndXact is a RAWSTORE log record.
1:eac0369: 	*/
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		int group = Loggable.RAWSTORE;
1:eac0369: 
1:eac0369: 		if ((transactionStatus & Xact.END_COMMITTED) != 0)
1:eac0369: 			group |= (Loggable.COMMIT | Loggable.LAST);
1:eac0369: 		else if ((transactionStatus & Xact.END_ABORTED) != 0)
1:eac0369: 			group |= (Loggable.ABORT | Loggable.LAST);
1:eac0369:         else if ((transactionStatus & Xact.END_PREPARED) != 0)
1:eac0369:             group |= Loggable.PREPARE;
1:eac0369: 
1:eac0369: 		return group;
1:eac0369: 	}
1:eac0369: 		  
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String endStatus;
1:eac0369: 			switch(transactionStatus & 
1:eac0369:                    (Xact.END_ABORTED | Xact.END_PREPARED | Xact.END_COMMITTED))
1:eac0369: 			{
1:eac0369:                 case Xact.END_ABORTED:	
1:eac0369:                     endStatus = " Aborted"; 
1:eac0369:                     break;
1:eac0369:                 case Xact.END_PREPARED:	
1:eac0369:                     endStatus = " Prepared"; 
1:eac0369:                     break;
1:eac0369:                 case Xact.END_COMMITTED:
1:eac0369:                     endStatus = " Committed"; 
1:eac0369:                     break;
1:eac0369:                 default:				
1:eac0369:                     endStatus = "Unknown";
1:eac0369: 			}				
1:eac0369: 				
1:eac0369: 			return(
1:eac0369:                 "EndXact " + xactId + endStatus + 
1:eac0369:                 " : transactionStatus = " + endStatus); 
1:eac0369: 		}
1:eac0369: 		else
1:eac0369:         {
1:eac0369: 			return null;
1:eac0369:         }
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7a4afea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.EndXact
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.OutputStream;
1: import java.io.InputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	This operation indicates the End of a transaction.
1: 	@see Loggable
1: */
1: 
1: public class EndXact implements Loggable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private int transactionStatus;
1: 	private GlobalTransactionId xactId;
1: 
1: 	public EndXact(GlobalTransactionId xid, int s) {
1: 		super();
1: 
1: 		xactId = xid;
1: 		transactionStatus = s;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public EndXact() 
1: 	{ super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		out.writeObject(xactId);
1: 		CompressedNumber.writeInt(out, transactionStatus);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		xactId = (GlobalTransactionId)in.readObject();
1: 		transactionStatus = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_END_XACT;
1: 	}
1: 
1: 	/**
1: 		Loggable methods
1: 		@see Loggable
1: 	*/
1: 
1: 	/**
1: 		Apply the change indicated by this operation and optional data.
1: 
1: 		@param xact			the Transaction
1: 		@param instant		the log instant of this operation
1: 		@param in			optional data
0: 		@param dataLengt	optional data length
1: 
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 	{
1: 
1:         if ((transactionStatus & Xact.END_PREPARED) == 0)
1:         {
1:             ((RawTransaction)xact).removeUpdateTransaction();
1:         }
1:         else
1:         {
1:             ((RawTransaction)xact).prepareTransaction();
1:         }
1: 	}
1: 
1: 	/**
1: 		the default for prepared log is always null for all the operations
1: 		that don't have optionalData.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		EndXact has no optional data to write out
1: 
0: 		@param out Where and how to write to optional data.
1: 		@see ObjectOutput
1: 	*/
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (ByteArray) null;
1: 	}
1: 
1: 	/**
1: 		Always redo an EndXact.
1: 
1: 		@param xact		The transaction trying to redo this operation
1: 		@return true if operation needs redoing, false if not.
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 	{
1: 		return true;			// always redo this
1: 	}
1: 
1: 
1: 	/**
1: 		EndXact has no resource to release
1: 	*/
1: 	public void releaseResource(Transaction xact)
1: 	{}
1: 
1: 
1: 	/**
1: 		EndXact is a RAWSTORE log record.
1: 	*/
1: 	public int group()
1: 	{
1: 		int group = Loggable.RAWSTORE;
1: 
1: 		if ((transactionStatus & Xact.END_COMMITTED) != 0)
1: 			group |= (Loggable.COMMIT | Loggable.LAST);
1: 		else if ((transactionStatus & Xact.END_ABORTED) != 0)
1: 			group |= (Loggable.ABORT | Loggable.LAST);
1:         else if ((transactionStatus & Xact.END_PREPARED) != 0)
1:             group |= Loggable.PREPARE;
1: 
1: 		return group;
1: 	}
1: 		  
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String endStatus;
1: 			switch(transactionStatus & 
1:                    (Xact.END_ABORTED | Xact.END_PREPARED | Xact.END_COMMITTED))
1: 			{
1:                 case Xact.END_ABORTED:	
1:                     endStatus = " Aborted"; 
1:                     break;
1:                 case Xact.END_PREPARED:	
1:                     endStatus = " Prepared"; 
1:                     break;
1:                 case Xact.END_COMMITTED:
1:                     endStatus = " Committed"; 
1:                     break;
1:                 default:				
1:                     endStatus = "Unknown";
1: 			}				
1: 				
1: 			return(
1:                 "EndXact " + xactId + endStatus + 
1:                 " : transactionStatus = " + endStatus); 
1: 		}
1: 		else
1:         {
1: 			return null;
1:         }
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.GlobalTransactionId;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.OutputStream;
0: import java.io.InputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	This operation indicates the End of a transaction.
0: 	@see Loggable
0: */
0: 
0: public class EndXact implements Loggable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private int transactionStatus;
0: 	private GlobalTransactionId xactId;
0: 
0: 	public EndXact(GlobalTransactionId xid, int s) {
0: 		super();
0: 
0: 		xactId = xid;
0: 		transactionStatus = s;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public EndXact() 
0: 	{ super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		out.writeObject(xactId);
0: 		CompressedNumber.writeInt(out, transactionStatus);
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
0: 	{
0: 		xactId = (GlobalTransactionId)in.readObject();
0: 		transactionStatus = CompressedNumber.readInt(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_END_XACT;
0: 	}
0: 
0: 	/**
0: 		Loggable methods
0: 		@see Loggable
0: 	*/
0: 
0: 	/**
0: 		Apply the change indicated by this operation and optional data.
0: 
0: 		@param xact			the Transaction
0: 		@param instant		the log instant of this operation
0: 		@param in			optional data
0: 		@param dataLengt	optional data length
0: 
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 	{
0: 
0:         if ((transactionStatus & Xact.END_PREPARED) == 0)
0:         {
0:             ((RawTransaction)xact).removeUpdateTransaction();
0:         }
0:         else
0:         {
0:             ((RawTransaction)xact).prepareTransaction();
0:         }
0: 	}
0: 
0: 	/**
0: 		the default for prepared log is always null for all the operations
0: 		that don't have optionalData.  If an operation has optional data,
0: 		the operation need to prepare the optional data for this method.
0: 
0: 		EndXact has no optional data to write out
0: 
0: 		@param out Where and how to write to optional data.
0: 		@see ObjectOutput
0: 	*/
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (ByteArray) null;
0: 	}
0: 
0: 	/**
0: 		Always redo an EndXact.
0: 
0: 		@param xact		The transaction trying to redo this operation
0: 		@return true if operation needs redoing, false if not.
0: 	*/
0: 	public boolean needsRedo(Transaction xact)
0: 	{
0: 		return true;			// always redo this
0: 	}
0: 
0: 
0: 	/**
0: 		EndXact has no resource to release
0: 	*/
0: 	public void releaseResource(Transaction xact)
0: 	{}
0: 
0: 
0: 	/**
0: 		EndXact is a RAWSTORE log record.
0: 	*/
0: 	public int group()
0: 	{
0: 		int group = Loggable.RAWSTORE;
0: 
0: 		if ((transactionStatus & Xact.END_COMMITTED) != 0)
0: 			group |= (Loggable.COMMIT | Loggable.LAST);
0: 		else if ((transactionStatus & Xact.END_ABORTED) != 0)
0: 			group |= (Loggable.ABORT | Loggable.LAST);
0:         else if ((transactionStatus & Xact.END_PREPARED) != 0)
0:             group |= Loggable.PREPARE;
0: 
0: 		return group;
0: 	}
0: 		  
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String endStatus;
0: 			switch(transactionStatus & 
0:                    (Xact.END_ABORTED | Xact.END_PREPARED | Xact.END_COMMITTED))
0: 			{
0:                 case Xact.END_ABORTED:	
0:                     endStatus = " Aborted"; 
0:                     break;
0:                 case Xact.END_PREPARED:	
0:                     endStatus = " Prepared"; 
0:                     break;
0:                 case Xact.END_COMMITTED:
0:                     endStatus = " Committed"; 
0:                     break;
0:                 default:				
0:                     endStatus = "Unknown";
0: 			}				
0: 				
0: 			return(
0:                 "EndXact " + xactId + endStatus + 
0:                 " : transactionStatus = " + endStatus); 
0: 		}
0: 		else
0:         {
0: 			return null;
0:         }
0: 	}
0: }
============================================================================