1:9bbe2e4: /*
1:9bbe2e4:  * 
1:9bbe2e4:  * Derby - Class org.apache.derbyTesting.system.sttest.CompressTable
1:9bbe2e4:  * 
1:9bbe2e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bbe2e4:  * contributor license agreements. See the NOTICE file distributed with this
1:9bbe2e4:  * work for additional information regarding copyright ownership. The ASF
1:9bbe2e4:  * licenses this file to You under the Apache License, Version 2.0 (the
1:9bbe2e4:  * "License"); you may not use this file except in compliance with the License.
1:9bbe2e4:  * You may obtain a copy of the License at
1:9bbe2e4:  * 
1:9bbe2e4:  * http://www.apache.org/licenses/LICENSE-2.0
1:9bbe2e4:  * 
1:9bbe2e4:  * Unless required by applicable law or agreed to in writing, software
1:9bbe2e4:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:9bbe2e4:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:9bbe2e4:  * License for the specific language governing permissions and limitations under
1:9bbe2e4:  * the License.
1:9bbe2e4:  *  
1:9bbe2e4:  */
1:9bbe2e4: package org.apache.derbyTesting.system.sttest.utils;
2:9bbe2e4: 
1:9bbe2e4: import java.io.IOException;
1:bbde618: import java.sql.CallableStatement;
1:9bbe2e4: import java.sql.Connection;
1:9bbe2e4: import java.sql.DriverManager;
1:9bbe2e4: import java.sql.SQLException;
1:9bbe2e4: import java.util.Date;
1:9bbe2e4: 
1:9bbe2e4: import org.apache.derby.tools.JDBCDisplayUtil;
1:9bbe2e4: import org.apache.derby.tools.ij;
1:9bbe2e4: import org.apache.derbyTesting.system.sttest.tools.MemCheck;
1:9bbe2e4: 
1:9bbe2e4: /**
1:9bbe2e4:  * This class is used to compress the table to retrieve the space after deletion
1:9bbe2e4:  */
1:9bbe2e4: public class CompressTable {
1:9bbe2e4: 	
1:9bbe2e4: 	static boolean startByIJ = false;
1:9bbe2e4: 	
1:9bbe2e4: 	static String dbURL = "jdbc:derby:testDB";
1:9bbe2e4: 	
1:9bbe2e4: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1:9bbe2e4: 	
1:9bbe2e4: 	public static void main(String[] args) throws SQLException, IOException,
1:9bbe2e4: 	InterruptedException, Exception, Throwable {
1:9bbe2e4: 		Connection conn = null;
1:9bbe2e4: 		Date d = null;
1:4469400: 
1:4469400:         Class<?> clazz = Class.forName(driver);
1:4469400:         clazz.getConstructor().newInstance();
1:9bbe2e4: 		
2:9bbe2e4: 		try {
1:9bbe2e4: 			conn = mystartJBMS();
1:9bbe2e4: 		} catch (Throwable t) {
2:9bbe2e4: 			return;
5:9bbe2e4: 		}
1:9bbe2e4: 		MemCheck mc = new MemCheck(200000);
1:9bbe2e4: 		mc.start();
1:9bbe2e4: 		compress(conn);
1:9bbe2e4: 		System.exit(0);
1:9bbe2e4: 	}
1:9bbe2e4: 	
1:9bbe2e4: 	static public Connection mystartJBMS() throws Throwable {
1:9bbe2e4: 		Connection conn = null;
1:9bbe2e4: 		if (startByIJ == true)
1:9bbe2e4: 			conn = ij.startJBMS();
1:9bbe2e4: 		else
1:9bbe2e4: 			try {
1:9bbe2e4: 				conn = DriverManager.getConnection(dbURL + ";create=false");
1:9bbe2e4: 				conn.setAutoCommit(false);
2:9bbe2e4: 			} catch (SQLException se) {
1:9bbe2e4: 				System.out.println("connect failed  for " + dbURL);
2:9bbe2e4: 				JDBCDisplayUtil.ShowException(System.out, se);
1:9bbe2e4: 			}
1:9bbe2e4: 			return (conn);
1:9bbe2e4: 	}
1:9bbe2e4: 	
1:9bbe2e4: 	static synchronized void compress(Connection conn)
1:9bbe2e4: 	throws java.lang.Exception {
1:9bbe2e4: 		System.out.println("compressing table");
1:9bbe2e4: 		try {
1:bbde618: 			conn.setAutoCommit(true);
1:bbde618: 			CallableStatement cs = conn
1:bbde618: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, ?, ?, ?)");
1:bbde618: 			cs.setString(1, "APP");
1:bbde618: 			cs.setString(2, "DATATYPES");
1:bbde618: 			cs.setShort(3, (short) 1);
1:bbde618: 			cs.setShort(4, (short) 1);
1:bbde618: 			cs.setShort(5, (short) 1);
1:bbde618: 			cs.execute();
1:bbde618: 			cs.close();
1:9bbe2e4: 		} catch (SQLException se) {
1:9bbe2e4: 			System.out.println("compress table: FAIL -- unexpected exception:");
1:9bbe2e4: 			JDBCDisplayUtil.ShowException(System.out, se);
1:bbde618: 		}
1:9bbe2e4: 	}
1:9bbe2e4: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 
1:         Class<?> clazz = Class.forName(driver);
1:         clazz.getConstructor().newInstance();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:bbde618
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
/////////////////////////////////////////////////////////////////////////
1: 			conn.setAutoCommit(true);
1: 			CallableStatement cs = conn
1: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, ?, ?, ?)");
1: 			cs.setString(1, "APP");
1: 			cs.setString(2, "DATATYPES");
1: 			cs.setShort(3, (short) 1);
1: 			cs.setShort(4, (short) 1);
1: 			cs.setShort(5, (short) 1);
1: 			cs.execute();
1: 			cs.close();
1: }
commit:9bbe2e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.system.sttest.CompressTable
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  *  
1:  */
1: package org.apache.derbyTesting.system.sttest.utils;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: import java.util.Date;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: import org.apache.derby.tools.ij;
1: import org.apache.derbyTesting.system.sttest.tools.MemCheck;
1: 
1: /**
1:  * This class is used to compress the table to retrieve the space after deletion
1:  */
1: public class CompressTable {
1: 	
1: 	static boolean startByIJ = false;
1: 	
1: 	static String dbURL = "jdbc:derby:testDB";
1: 	
1: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1: 	
1: 	public static void main(String[] args) throws SQLException, IOException,
1: 	InterruptedException, Exception, Throwable {
1: 		Connection conn = null;
1: 		Date d = null;
1: 		
0: 		Class.forName(driver).newInstance();
1: 		
1: 		try {
1: 			conn = mystartJBMS();
1: 		} catch (Throwable t) {
1: 			return;
1: 		}
1: 		MemCheck mc = new MemCheck(200000);
1: 		mc.start();
1: 		compress(conn);
1: 		System.exit(0);
1: 	}
1: 	
1: 	static public Connection mystartJBMS() throws Throwable {
1: 		Connection conn = null;
1: 		if (startByIJ == true)
1: 			conn = ij.startJBMS();
1: 		else
1: 			try {
1: 				conn = DriverManager.getConnection(dbURL + ";create=false");
1: 				conn.setAutoCommit(false);
1: 			} catch (SQLException se) {
1: 				System.out.println("connect failed  for " + dbURL);
1: 				JDBCDisplayUtil.ShowException(System.out, se);
1: 			}
1: 			return (conn);
1: 	}
1: 	
1: 	static synchronized void compress(Connection conn)
1: 	throws java.lang.Exception {
0: 		Statement s = null;
0: 		int tick = 1;
0: 		boolean locked = false;
0: 		while (locked == false) {
1: 			try {
0: 				s = conn.createStatement();
0: 				s.execute("lock table Datatypes in exclusive mode");
0: 				s.close();
0: 				locked = true;
1: 			} catch (SQLException se) {
0: 				// not now lockable
0: 				if (se.getSQLState().equals("X0X02")) {
0: 					Thread.sleep(20000);
0: 					if (tick++ < 10) {
0: 						System.out
0: 						.println("compress: cannot lock table, retrying "
0: 								+ tick + "\n");
0: 						continue;
0: 					} else {
0: 						System.out.println("compress timed out\n");
1: 						return;
1: 					}
0: 				} else
1: 					JDBCDisplayUtil.ShowException(System.out, se);
1: 			}
1: 		}
1: 		System.out.println("compressing table");
1: 		try {
0: 			s = conn.createStatement();
0: 			s.execute("alter table Datatypes compress");
0: 			System.out.println("table compressed");
1: 		} catch (SQLException se) {
1: 			System.out.println("compress table: FAIL -- unexpected exception:");
1: 			JDBCDisplayUtil.ShowException(System.out, se);
1: 		}
1: 	}
1: }
============================================================================