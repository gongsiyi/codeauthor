1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.SortInfo
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   This object provides performance information related to a sort.
1:eac0369:   The information is accumulated during operations on a SortController() and
1:eac0369:   then copied into this object and returned by a call to
1:eac0369:   SortController.getSortInfo().
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface SortInfo
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Return all information gathered about the sort.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a list of properties which contains all information
1:eac0369:      * gathered about the sort.  If a Property is passed in, then that property
1:eac0369:      * list is appended to, otherwise a new property object is created and
1:eac0369:      * returned.
1:eac0369:      * <p>
1:eac0369:      * Not all sorts may support all properties, if the property is not
1:eac0369:      * supported then it will not be returned.  The following is a list of
1:eac0369:      * properties that may be returned:
1:eac0369:      *
1:eac0369:      *     sortType
1:eac0369:      *         - type of the sort being performed:
1:eac0369:      *           internal
1:eac0369:      *           external
1:eac0369:      *     numRowsInput
1:eac0369:      *         - the number of rows input to the sort.  This
1:eac0369:      *           number includes duplicates.
1:eac0369:      *     numRowsOutput
1:eac0369:      *         - the number of rows to be output by the sort.  This number
1:eac0369:      *           may be different from numRowsInput since duplicates may not
1:eac0369:      *           be output.
1:eac0369:      *     numMergeRuns
1:eac0369:      *         - the number of merge runs for the sort.
1:eac0369:      *           Applicable to external sorts only.
1:eac0369:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
1:eac0369:      *           reflect the additional merge run that may be created for
1:eac0369:      *           any data still in the sort buffer.
1:eac0369:      *     mergeRunsSize
1:eac0369:      *         - the size (number of rows) of each merge run for the sort.
1:eac0369:      *           Applicable to external sorts only.
1:eac0369:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
1:eac0369:      *           have 3 rows each, and the last run has 2 rows.
1:eac0369:      *           Note: when a SortController is closed, this vector may get an
1:eac0369:      *           additional element, to reflect the additional merge run that
1:eac0369:      *           may be created for any data still in the sort buffer.
1:eac0369:      *     NOTE - this list will be expanded as more information about the sort
1:eac0369:      *            is gathered and returned.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     Properties getAllSortInfo(Properties prop)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.SortInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1:   This object provides performance information related to a sort.
1:   The information is accumulated during operations on a SortController() and
1:   then copied into this object and returned by a call to
1:   SortController.getSortInfo().
1: 
1: **/
1: 
1: public interface SortInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**
1:      * Return all information gathered about the sort.
1:      * <p>
1:      * This routine returns a list of properties which contains all information
1:      * gathered about the sort.  If a Property is passed in, then that property
1:      * list is appended to, otherwise a new property object is created and
1:      * returned.
1:      * <p>
1:      * Not all sorts may support all properties, if the property is not
1:      * supported then it will not be returned.  The following is a list of
1:      * properties that may be returned:
1:      *
1:      *     sortType
1:      *         - type of the sort being performed:
1:      *           internal
1:      *           external
1:      *     numRowsInput
1:      *         - the number of rows input to the sort.  This
1:      *           number includes duplicates.
1:      *     numRowsOutput
1:      *         - the number of rows to be output by the sort.  This number
1:      *           may be different from numRowsInput since duplicates may not
1:      *           be output.
1:      *     numMergeRuns
1:      *         - the number of merge runs for the sort.
1:      *           Applicable to external sorts only.
1:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
1:      *           reflect the additional merge run that may be created for
1:      *           any data still in the sort buffer.
1:      *     mergeRunsSize
1:      *         - the size (number of rows) of each merge run for the sort.
1:      *           Applicable to external sorts only.
1:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
1:      *           have 3 rows each, and the last run has 2 rows.
1:      *           Note: when a SortController is closed, this vector may get an
1:      *           additional element, to reflect the additional merge run that
1:      *           may be created for any data still in the sort buffer.
1:      *     NOTE - this list will be expanded as more information about the sort
1:      *            is gathered and returned.
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     Properties getAllSortInfo(Properties prop)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0:   This object provides performance information related to a sort.
0:   The information is accumulated during operations on a SortController() and
0:   then copied into this object and returned by a call to
0:   SortController.getSortInfo().
0: 
0: **/
0: 
0: public interface SortInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**
0:      * Return all information gathered about the sort.
0:      * <p>
0:      * This routine returns a list of properties which contains all information
0:      * gathered about the sort.  If a Property is passed in, then that property
0:      * list is appended to, otherwise a new property object is created and
0:      * returned.
0:      * <p>
0:      * Not all sorts may support all properties, if the property is not
0:      * supported then it will not be returned.  The following is a list of
0:      * properties that may be returned:
0:      *
0:      *     sortType
0:      *         - type of the sort being performed:
0:      *           internal
0:      *           external
0:      *     numRowsInput
0:      *         - the number of rows input to the sort.  This
0:      *           number includes duplicates.
0:      *     numRowsOutput
0:      *         - the number of rows to be output by the sort.  This number
0:      *           may be different from numRowsInput since duplicates may not
0:      *           be output.
0:      *     numMergeRuns
0:      *         - the number of merge runs for the sort.
0:      *           Applicable to external sorts only.
0:      *           Note: when a SortController is closed, numMergeRuns may increase by 1, to
0:      *           reflect the additional merge run that may be created for
0:      *           any data still in the sort buffer.
0:      *     mergeRunsSize
0:      *         - the size (number of rows) of each merge run for the sort.
0:      *           Applicable to external sorts only.
0:      *           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
0:      *           have 3 rows each, and the last run has 2 rows.
0:      *           Note: when a SortController is closed, this vector may get an
0:      *           additional element, to reflect the additional merge run that
0:      *           may be created for any data still in the sort buffer.
0:      *     NOTE - this list will be expanded as more information about the sort
0:      *            is gathered and returned.
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     Properties getAllSortInfo(Properties prop)
0: 		throws StandardException;
0: }
============================================================================