1:fe77ca5: /*
3:fe77ca5: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.ClassFormatOutput
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.classfile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
1:fe77ca5: import java.io.DataOutputStream;
1:fe77ca5: import java.io.IOException;
1:fe77ca5: import java.io.OutputStream;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: /** A wrapper around DataOutputStream to provide input functions in terms
1:3313ce9:     of the types defined on pages 83 of the Java Virtual Machine spec.
1:fe77ca5: 
1:fe77ca5: 	For this types use these methods of DataOutputStream
1:fe77ca5: 	<UL>
1:fe77ca5: 	<LI>float - writeFloat
1:fe77ca5: 	<LI>long - writeLong
1:fe77ca5: 	<LI>double - writeDouble
1:fe77ca5: 	<LI>UTF/String - writeUTF
1:fe77ca5: 	<LI>U1Array - write(byte[])
1:fe77ca5: 	</UL>
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public final class ClassFormatOutput extends DataOutputStream {
1:fe77ca5: 
1:fe77ca5: 	public ClassFormatOutput() {
1:fe77ca5: 		this(512);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public ClassFormatOutput(int size) {
1:3313ce9: 		this(new AccessibleByteArrayOutputStream(size));
1:fe77ca5: 	}
1:3313ce9: 	public ClassFormatOutput(java.io.OutputStream stream) {
1:3313ce9: 		super(stream);
1:3313ce9: 	}
1:fe77ca5: 	public void putU1(int i) throws IOException {
1:a9b4b8d: 		// ensure the format of the class file is not
1:a9b4b8d: 		// corrupted by writing an incorrect, truncated value.
1:a9b4b8d: 		if (i > 255)
1:a9b4b8d: 			ClassFormatOutput.limit("U1", 255, i);
1:fe77ca5: 		write(i);
1:fe77ca5: 	}
1:fe77ca5: 	public void putU2(int i) throws IOException {
1:a9b4b8d: 		putU2("U2", i);
1:a9b4b8d: 
1:a9b4b8d: 	}
1:a9b4b8d: 	public void putU2(String limit, int i) throws IOException {
1:a9b4b8d: 		
1:a9b4b8d: 		// ensure the format of the class file is not
1:a9b4b8d: 		// corrupted by writing an incorrect, truncated value.
1:a9b4b8d: 		if (i > 65535)
1:a9b4b8d: 			ClassFormatOutput.limit(limit, 65535, i);
1:fe77ca5: 		write(i >> 8);
1:fe77ca5: 		write(i);
1:fe77ca5: 	}
1:fe77ca5: 	public void putU4(int i) throws IOException {
1:fe77ca5: 		writeInt(i);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void writeTo(OutputStream outTo) throws IOException {
1:fe77ca5: 		((AccessibleByteArrayOutputStream) out).writeTo(outTo);
1:fe77ca5: 	}
1:fe77ca5: 
2:fe77ca5: 	/**
1:fe77ca5: 		Get a reference to the data array the class data is being built
1:fe77ca5: 		in. No copy is made.
1:fe77ca5: 	*/
1:fe77ca5: 	public byte[] getData() {
1:fe77ca5: 		return ((AccessibleByteArrayOutputStream) out).getInternalByteArray();
1:fe77ca5: 	}
1:a9b4b8d: 
1:a9b4b8d: 	/**
1:a9b4b8d: 	 * Throw an ClassFormatError if a limit of the Java class file format is reached.
1:a9b4b8d: 	 * @param name Terse limit description from JVM spec.
1:a9b4b8d: 	 * @param limit What the limit is.
1:a9b4b8d: 	 * @param value What the value for the current class is
1:a9b4b8d: 	 * @throws IOException Thrown when limit is exceeded.
1:a9b4b8d: 	 */
1:a9b4b8d: 	static void limit(String name, int limit, int value)
1:a9b4b8d: 		throws IOException
1:a9b4b8d: 	{
1:a9b4b8d: 		throw new IOException(name + "(" + value + " > " + limit + ")");
1:a9b4b8d: 	}
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3313ce9
/////////////////////////////////////////////////////////////////////////
1:     of the types defined on pages 83 of the Java Virtual Machine spec.
/////////////////////////////////////////////////////////////////////////
1: 		this(new AccessibleByteArrayOutputStream(size));
1: 	public ClassFormatOutput(java.io.OutputStream stream) {
1: 		super(stream);
1: 	}
commit:a9b4b8d
/////////////////////////////////////////////////////////////////////////
1: 		// ensure the format of the class file is not
1: 		// corrupted by writing an incorrect, truncated value.
1: 		if (i > 255)
1: 			ClassFormatOutput.limit("U1", 255, i);
1: 		putU2("U2", i);
1: 
1: 	}
1: 	public void putU2(String limit, int i) throws IOException {
1: 		
1: 		// ensure the format of the class file is not
1: 		// corrupted by writing an incorrect, truncated value.
1: 		if (i > 65535)
1: 			ClassFormatOutput.limit(limit, 65535, i);
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Throw an ClassFormatError if a limit of the Java class file format is reached.
1: 	 * @param name Terse limit description from JVM spec.
1: 	 * @param limit What the limit is.
1: 	 * @param value What the value for the current class is
1: 	 * @throws IOException Thrown when limit is exceeded.
1: 	 */
1: 	static void limit(String name, int limit, int value)
1: 		throws IOException
1: 	{
1: 		throw new IOException(name + "(" + value + " > " + limit + ")");
1: 	}
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.ClassFormatOutput
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: 
1: 
1: /** A wrapper around DataOutputStream to provide input functions in terms
0:     of the types defined on pages 83.
1: 
1: 	For this types use these methods of DataOutputStream
1: 	<UL>
1: 	<LI>float - writeFloat
1: 	<LI>long - writeLong
1: 	<LI>double - writeDouble
1: 	<LI>UTF/String - writeUTF
1: 	<LI>U1Array - write(byte[])
1: 	</UL>
1:  */
1: 
1: public final class ClassFormatOutput extends DataOutputStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	public ClassFormatOutput() {
1: 		this(512);
1: 	}
1: 
1: 	public ClassFormatOutput(int size) {
0: 		super(new AccessibleByteArrayOutputStream(size));
1: 	}
1: 
1: 	public void putU1(int i) throws IOException {
1: 		write(i);
1: 	}
1: 	public void putU2(int i) throws IOException {
1: 		write(i >> 8);
1: 		write(i);
1: 	}
1: 	public void putU4(int i) throws IOException {
1: 		writeInt(i);
1: 	}
1: 
1: 	public void writeTo(OutputStream outTo) throws IOException {
1: 		((AccessibleByteArrayOutputStream) out).writeTo(outTo);
1: 	}
1: 
1: 	/**
1: 		Get a reference to the data array the class data is being built
1: 		in. No copy is made.
1: 	*/
1: 	public byte[] getData() {
1: 		return ((AccessibleByteArrayOutputStream) out).getInternalByteArray();
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: 
0: 
0: /** A wrapper around DataOutputStream to provide input functions in terms
0:     of the types defined on pages 83.
0: 
0: 	For this types use these methods of DataOutputStream
0: 	<UL>
0: 	<LI>float - writeFloat
0: 	<LI>long - writeLong
0: 	<LI>double - writeDouble
0: 	<LI>UTF/String - writeUTF
0: 	<LI>U1Array - write(byte[])
0: 	</UL>
0:  */
0: 
0: public final class ClassFormatOutput extends DataOutputStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	public ClassFormatOutput() {
0: 		this(512);
0: 	}
0: 
0: 	public ClassFormatOutput(int size) {
0: 		super(new AccessibleByteArrayOutputStream(size));
0: 	}
0: 
0: 	public void putU1(int i) throws IOException {
0: 		write(i);
0: 	}
0: 	public void putU2(int i) throws IOException {
0: 		write(i >> 8);
0: 		write(i);
0: 	}
0: 	public void putU4(int i) throws IOException {
0: 		writeInt(i);
0: 	}
0: 
0: 	public void writeTo(OutputStream outTo) throws IOException {
0: 		((AccessibleByteArrayOutputStream) out).writeTo(outTo);
0: 	}
0: 
0: 	/**
0: 		Get a reference to the data array the class data is being built
0: 		in. No copy is made.
0: 	*/
0: 	public byte[] getData() {
0: 		return ((AccessibleByteArrayOutputStream) out).getInternalByteArray();
0: 	}
0: }
============================================================================