3:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
46:eac0369: 
13:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.OutputStream;
1:eac0369: 
11:eac0369: /**
1:eac0369: 	A DynamicByteArrayOutputStream allows writing to a dynamically resizable
1:eac0369: 	array of bytes.   In addition to dynamic resizing, this extension allows
1:eac0369: 	the user of this class to have more control over the position of the stream
1:eac0369: 	and can get a direct reference of the array.
1:eac0369: */
1:2aa32e8: public class DynamicByteArrayOutputStream extends OutputStream {
1:2aa32e8: 
1:2aa32e8: 	private static int INITIAL_SIZE = 4096;
1:2aa32e8: 
1:2aa32e8: 	private byte[] buf;
1:2aa32e8: 	private int		position;
1:2aa32e8: 	private int		used;		// how many bytes are used
1:2aa32e8: 	private int		beginPosition;
1:2aa32e8: 
1:2aa32e8: 	public DynamicByteArrayOutputStream() {
1:2aa32e8: 		this(INITIAL_SIZE);
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	public DynamicByteArrayOutputStream(int size) {
1:2aa32e8: 		super();
1:2aa32e8: 
1:2aa32e8: 		buf = new byte[size];
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	public DynamicByteArrayOutputStream(byte[] data) {
1:2aa32e8: 		super();
1:2aa32e8: 
1:2aa32e8: 		buf = data;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
1:2aa32e8: 
1:2aa32e8: 		byte[] cbuf = toBeCloned.getByteArray();
1:2aa32e8: 		buf = new byte[cbuf.length];
1:2aa32e8: 
1:2aa32e8: 		write(cbuf, 0, cbuf.length);
1:2aa32e8: 		position = toBeCloned.getPosition();
1:2aa32e8: 		used = toBeCloned.getUsed();
1:2aa32e8: 		beginPosition = toBeCloned.getBeginPosition();
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/*
1:2aa32e8: 	 *	OutputStream methods
1:2aa32e8: 	 */
1:2aa32e8: 	public void write(int b) 
1:2aa32e8: 	{
1:2aa32e8: 		if (position >= buf.length)
1:2aa32e8: 			expandBuffer(INITIAL_SIZE);
1:2aa32e8: 
1:2aa32e8: 		buf[position++] = (byte) b;
1:2aa32e8: 
1:2aa32e8: 		if (position > used)
1:2aa32e8: 			used = position;
1:2aa32e8: 	}
1:2aa32e8: 	
1:2aa32e8: 	public void write(byte[] b, int off, int len) 
1:2aa32e8: 	{
1:2aa32e8: 		if ((position+len) > buf.length)
1:2aa32e8: 			expandBuffer(len);
1:2aa32e8: 
1:2aa32e8: 		System.arraycopy(b, off, buf, position, len);
1:2aa32e8: 		position += len;
1:2aa32e8: 
1:2aa32e8: 		if (position > used)
1:2aa32e8: 			used = position;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	void writeCompleteStream(InputStream dataIn, int len) throws IOException
1:2aa32e8: 	{
1:2aa32e8: 		if ((position+len) > buf.length)
1:2aa32e8: 			expandBuffer(len);
1:2aa32e8: 
1:2aa32e8: 		org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);
1:2aa32e8: 		position += len;
1:2aa32e8: 
1:2aa32e8: 		if (position > used)
1:2aa32e8: 			used = position;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	public void close()
1:2aa32e8: 	{
1:2aa32e8: 		buf = null;
1:2aa32e8: 		reset();
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/*
1:2aa32e8: 	 *	Specific methods
1:2aa32e8: 	 */
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Reset the stream for reuse
1:2aa32e8: 	*/
1:2aa32e8: 	public void reset()
1:2aa32e8: 	{
1:2aa32e8: 		position = 0;
1:2aa32e8: 		beginPosition = 0;
1:2aa32e8: 		used = 0;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Get a reference to the byte array stored in the byte array output
1:2aa32e8: 		stream. Note that the byte array may be longer that getPosition().
1:2aa32e8: 		Bytes beyond and including the current poistion are invalid.
1:2aa32e8: 	*/
1:2aa32e8: 	public byte[] getByteArray()
1:2aa32e8: 	{
1:2aa32e8: 		return buf;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Get the number of bytes that was used.
1:2aa32e8: 	*/
1:2aa32e8: 	public int getUsed()
1:2aa32e8: 	{
1:2aa32e8: 		return used;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Get the current position in the stream
1:2aa32e8: 	*/
1:2aa32e8: 	public int getPosition()
1:2aa32e8: 	{
1:2aa32e8: 		return position;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Get the current position in the stream
1:2aa32e8: 	*/
1:2aa32e8: 	public int getBeginPosition()
1:2aa32e8: 	{
1:2aa32e8: 		return beginPosition;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Set the position of the stream pointer.
1:2aa32e8: 		It is up to the caller to make sure the stream has no gap of garbage in
1:2aa32e8: 		it or useful information is not left out at the end because the stream
1:2aa32e8: 		does not remember anything about the previous position.
1:2aa32e8: 	*/
1:2aa32e8: 	public void setPosition(int newPosition)
1:2aa32e8: 	{
1:2aa32e8: 		if (newPosition > position)
1:2aa32e8: 		{
1:2aa32e8: 			if (newPosition > buf.length)
1:2aa32e8: 				expandBuffer(newPosition - buf.length);
1:2aa32e8: 		}
1:2aa32e8: 
1:2aa32e8: 		position = newPosition;
1:2aa32e8: 
1:2aa32e8: 		if (position > used)
1:2aa32e8: 			used = position;
1:2aa32e8: 
1:2aa32e8: 		return ;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Set the begin position of the stream pointer.
1:2aa32e8: 		If the newBeginPosition is larger than the stream itself,
1:2aa32e8: 		then, the begin position is not set.
1:2aa32e8: 	*/
1:2aa32e8: 	public void setBeginPosition(int newBeginPosition)
1:2aa32e8: 	{
1:2aa32e8: 
1:2aa32e8: 		if (newBeginPosition > buf.length)
1:2aa32e8: 			return;
1:2aa32e8: 
1:2aa32e8: 		beginPosition = newBeginPosition;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Shrink the buffer left by the amount given. Ie.
1:2aa32e8: 		bytes from 0 to amountToShrinkBy are thrown away
1:2aa32e8: 	*/
1:2aa32e8: 	public void discardLeft(int amountToShrinkBy) {
1:2aa32e8: 
1:2aa32e8: 		System.arraycopy(buf, amountToShrinkBy, buf, 0,
1:2aa32e8: 			used - amountToShrinkBy);
1:2aa32e8: 
1:2aa32e8: 		position -= amountToShrinkBy;
1:2aa32e8: 		used -= amountToShrinkBy;
1:2aa32e8: 	}
1:2aa32e8: 
1:2aa32e8: 	/**
1:2aa32e8: 		Expand the buffer by at least the number of bytes requested in minExtension.
1:2aa32e8: 
1:2aa32e8: 		To optimize performance and reduce memory copies and allocation, we have a staged buffer
1:2aa32e8: 		expansion.
1:2aa32e8: 
1:2aa32e8: 		<UL>
1:dbed020: 		<LI> buf.length &lt; 128k - increase by 4k
1:dbed020: 		<LI> buf.length &lt; 1Mb - increase by 128k
1:2aa32e8: 		<LI> otherwise increase by 1Mb.
1:2aa32e8: 		</UL>
1:2aa32e8: 
1:2aa32e8: 		In all cases, if minExpansion is greater than the value about then the buffer will
1:2aa32e8: 		be increased by minExtension.
1:2aa32e8: 	*/
1:2aa32e8: 	private void expandBuffer(int minExtension)
1:2aa32e8: 	{
1:2aa32e8: 		if (buf.length < (128 * 1024)) {
1:2aa32e8: 			if (minExtension < INITIAL_SIZE)
1:2aa32e8: 				minExtension = INITIAL_SIZE;
1:2aa32e8: 		} else if (buf.length < (1024 * 1024)) {
1:2aa32e8: 
1:2aa32e8: 			if (minExtension < (128 * 1024))
1:2aa32e8: 				minExtension = (128 * 1024);
1:2aa32e8: 		} else {
1:2aa32e8: 			if (minExtension < (1024 * 1024))
1:2aa32e8: 				minExtension = 1024 * 1024;
1:2aa32e8: 		}
1:2aa32e8: 
1:2aa32e8: 		int newsize = buf.length + minExtension;
1:2aa32e8: 
1:2aa32e8: 		byte[] newbuf = new byte[newsize];
1:2aa32e8: 		System.arraycopy(buf, 0, newbuf, 0, buf.length);
1:2aa32e8: 		buf = newbuf;
1:2aa32e8: 	}
1:2aa32e8: 
20:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 		<LI> buf.length &lt; 128k - increase by 4k
1: 		<LI> buf.length &lt; 1Mb - increase by 128k
commit:2aa32e8
/////////////////////////////////////////////////////////////////////////
1: public class DynamicByteArrayOutputStream extends OutputStream {
1: 
1: 	private static int INITIAL_SIZE = 4096;
1: 
1: 	private byte[] buf;
1: 	private int		position;
1: 	private int		used;		// how many bytes are used
1: 	private int		beginPosition;
1: 
1: 	public DynamicByteArrayOutputStream() {
1: 		this(INITIAL_SIZE);
1: 	}
1: 
1: 	public DynamicByteArrayOutputStream(int size) {
1: 		super();
1: 
1: 		buf = new byte[size];
1: 	}
1: 
1: 	public DynamicByteArrayOutputStream(byte[] data) {
1: 		super();
1: 
1: 		buf = data;
1: 	}
1: 
1: 	public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
1: 
1: 		byte[] cbuf = toBeCloned.getByteArray();
1: 		buf = new byte[cbuf.length];
1: 
1: 		write(cbuf, 0, cbuf.length);
1: 		position = toBeCloned.getPosition();
1: 		used = toBeCloned.getUsed();
1: 		beginPosition = toBeCloned.getBeginPosition();
1: 	}
1: 
1: 	/*
1: 	 *	OutputStream methods
1: 	 */
1: 	public void write(int b) 
1: 	{
1: 		if (position >= buf.length)
1: 			expandBuffer(INITIAL_SIZE);
1: 
1: 		buf[position++] = (byte) b;
1: 
1: 		if (position > used)
1: 			used = position;
1: 	}
1: 	
1: 	public void write(byte[] b, int off, int len) 
1: 	{
1: 		if ((position+len) > buf.length)
1: 			expandBuffer(len);
1: 
1: 		System.arraycopy(b, off, buf, position, len);
1: 		position += len;
1: 
1: 		if (position > used)
1: 			used = position;
1: 	}
1: 
1: 	void writeCompleteStream(InputStream dataIn, int len) throws IOException
1: 	{
1: 		if ((position+len) > buf.length)
1: 			expandBuffer(len);
1: 
1: 		org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);
1: 		position += len;
1: 
1: 		if (position > used)
1: 			used = position;
1: 	}
1: 
1: 	public void close()
1: 	{
1: 		buf = null;
1: 		reset();
1: 	}
1: 
1: 	/*
1: 	 *	Specific methods
1: 	 */
1: 
1: 	/**
1: 		Reset the stream for reuse
1: 	*/
1: 	public void reset()
1: 	{
1: 		position = 0;
1: 		beginPosition = 0;
1: 		used = 0;
1: 	}
1: 
1: 	/**
1: 		Get a reference to the byte array stored in the byte array output
1: 		stream. Note that the byte array may be longer that getPosition().
1: 		Bytes beyond and including the current poistion are invalid.
1: 	*/
1: 	public byte[] getByteArray()
1: 	{
1: 		return buf;
1: 	}
1: 
1: 	/**
1: 		Get the number of bytes that was used.
1: 	*/
1: 	public int getUsed()
1: 	{
1: 		return used;
1: 	}
1: 
1: 	/**
1: 		Get the current position in the stream
1: 	*/
1: 	public int getPosition()
1: 	{
1: 		return position;
1: 	}
1: 
1: 	/**
1: 		Get the current position in the stream
1: 	*/
1: 	public int getBeginPosition()
1: 	{
1: 		return beginPosition;
1: 	}
1: 
1: 	/**
1: 		Set the position of the stream pointer.
1: 		It is up to the caller to make sure the stream has no gap of garbage in
1: 		it or useful information is not left out at the end because the stream
1: 		does not remember anything about the previous position.
1: 	*/
1: 	public void setPosition(int newPosition)
1: 	{
1: 		if (newPosition > position)
1: 		{
1: 			if (newPosition > buf.length)
1: 				expandBuffer(newPosition - buf.length);
1: 		}
1: 
1: 		position = newPosition;
1: 
1: 		if (position > used)
1: 			used = position;
1: 
1: 		return ;
1: 	}
1: 
1: 	/**
1: 		Set the begin position of the stream pointer.
1: 		If the newBeginPosition is larger than the stream itself,
1: 		then, the begin position is not set.
1: 	*/
1: 	public void setBeginPosition(int newBeginPosition)
1: 	{
1: 
1: 		if (newBeginPosition > buf.length)
1: 			return;
1: 
1: 		beginPosition = newBeginPosition;
1: 	}
1: 
1: 	/**
1: 		Shrink the buffer left by the amount given. Ie.
1: 		bytes from 0 to amountToShrinkBy are thrown away
1: 	*/
1: 	public void discardLeft(int amountToShrinkBy) {
1: 
1: 		System.arraycopy(buf, amountToShrinkBy, buf, 0,
1: 			used - amountToShrinkBy);
1: 
1: 		position -= amountToShrinkBy;
1: 		used -= amountToShrinkBy;
1: 	}
1: 
1: 	/**
1: 		Expand the buffer by at least the number of bytes requested in minExtension.
1: 
1: 		To optimize performance and reduce memory copies and allocation, we have a staged buffer
1: 		expansion.
1: 
1: 		<UL>
0: 		<LI> buf.length < 128k - increase by 4k
0: 		<LI> buf.length < 1Mb - increase by 128k
1: 		<LI> otherwise increase by 1Mb.
1: 		</UL>
1: 
1: 		In all cases, if minExpansion is greater than the value about then the buffer will
1: 		be increased by minExtension.
1: 	*/
1: 	private void expandBuffer(int minExtension)
1: 	{
1: 		if (buf.length < (128 * 1024)) {
1: 			if (minExtension < INITIAL_SIZE)
1: 				minExtension = INITIAL_SIZE;
1: 		} else if (buf.length < (1024 * 1024)) {
1: 
1: 			if (minExtension < (128 * 1024))
1: 				minExtension = (128 * 1024);
1: 		} else {
1: 			if (minExtension < (1024 * 1024))
1: 				minExtension = 1024 * 1024;
1: 		}
1: 
1: 		int newsize = buf.length + minExtension;
1: 
1: 		byte[] newbuf = new byte[newsize];
1: 		System.arraycopy(buf, 0, newbuf, 0, buf.length);
1: 		buf = newbuf;
1: 	}
1: 
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
0: public class DynamicByteArrayOutputStream extends org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
0: {
0: 	public DynamicByteArrayOutputStream() { super(); }
0: 	public DynamicByteArrayOutputStream(int size) { super( size ); }
0: 	public DynamicByteArrayOutputStream(byte[] data) { super( data ); }
0: 	public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) { super( toBeCloned ); }
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: 
1: /**
1: 	A DynamicByteArrayOutputStream allows writing to a dynamically resizable
1: 	array of bytes.   In addition to dynamic resizing, this extension allows
1: 	the user of this class to have more control over the position of the stream
1: 	and can get a direct reference of the array.
1: */
0: public class DynamicByteArrayOutputStream extends OutputStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
0: 	private static int INITIAL_SIZE = 4096;
1: 
0: 	private byte[] buf;
0: 	private int		position;
0: 	private int		used;		// how many bytes are used
0: 	private int		beginPosition;
1: 
0: 	public DynamicByteArrayOutputStream() {
0: 		this(INITIAL_SIZE);
1: 	}
1: 
0: 	public DynamicByteArrayOutputStream(int size) {
0: 		super();
1: 
0: 		buf = new byte[size];
1: 	}
1: 
0: 	public DynamicByteArrayOutputStream(byte[] data) {
0: 		super();
1: 
0: 		buf = data;
1: 	}
1: 
0: 	public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
1: 
0: 		byte[] cbuf = toBeCloned.getByteArray();
0: 		buf = new byte[cbuf.length];
1: 
0: 		write(cbuf, 0, cbuf.length);
0: 		position = toBeCloned.getPosition();
0: 		used = toBeCloned.getUsed();
0: 		beginPosition = toBeCloned.getBeginPosition();
1: 	}
1: 
1: 	/*
0: 	 *	OutputStream methods
1: 	 */
0: 	public void write(int b) 
0: 	{
0: 		if (position >= buf.length)
0: 			expandBuffer(INITIAL_SIZE);
1: 
0: 		buf[position++] = (byte) b;
1: 
0: 		if (position > used)
0: 			used = position;
1: 	}
1: 	
0: 	public void write(byte[] b, int off, int len) 
0: 	{
0: 		if ((position+len) > buf.length)
0: 			expandBuffer(len);
1: 
0: 		System.arraycopy(b, off, buf, position, len);
0: 		position += len;
1: 
0: 		if (position > used)
0: 			used = position;
1: 	}
1: 
0: 	void writeCompleteStream(InputStream dataIn, int len) throws IOException
0: 	{
0: 		if ((position+len) > buf.length)
0: 			expandBuffer(len);
1: 
0: 		org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);
0: 		position += len;
1: 
0: 		if (position > used)
0: 			used = position;
1: 	}
1: 
0: 	public void close()
0: 	{
0: 		buf = null;
0: 		reset();
1: 	}
1: 
1: 	/*
0: 	 *	Specific methods
1: 	 */
1: 
1: 	/**
0: 		Reset the stream for reuse
1: 	*/
0: 	public void reset()
0: 	{
0: 		position = 0;
0: 		beginPosition = 0;
0: 		used = 0;
1: 	}
1: 
1: 	/**
0: 		Get a reference to the byte array stored in the byte array output
0: 		stream. Note that the byte array may be longer that getPosition().
0: 		Bytes beyond and including the current poistion are invalid.
1: 	*/
0: 	public byte[] getByteArray()
0: 	{
0: 		return buf;
1: 	}
1: 
1: 	/**
0: 		Get the number of bytes that was used.
1: 	*/
0: 	public int getUsed()
0: 	{
0: 		return used;
1: 	}
1: 
1: 	/**
0: 		Get the current position in the stream
1: 	*/
0: 	public int getPosition()
0: 	{
0: 		return position;
1: 	}
1: 
1: 	/**
0: 		Get the current position in the stream
1: 	*/
0: 	public int getBeginPosition()
0: 	{
0: 		return beginPosition;
1: 	}
1: 
1: 	/**
0: 		Set the position of the stream pointer.
0: 		It is up to the caller to make sure the stream has no gap of garbage in
0: 		it or useful information is not left out at the end because the stream
0: 		does not remember anything about the previous position.
1: 	*/
0: 	public void setPosition(int newPosition)
0: 	{
0: 		if (newPosition > position)
0: 		{
0: 			if (newPosition > buf.length)
0: 				expandBuffer(newPosition - buf.length);
1: 		}
1: 
0: 		position = newPosition;
1: 
0: 		if (position > used)
0: 			used = position;
1: 
0: 		return ;
1: 	}
1: 
1: 	/**
0: 		Set the begin position of the stream pointer.
0: 		If the newBeginPosition is larger than the stream itself,
0: 		then, the begin position is not set.
1: 	*/
0: 	public void setBeginPosition(int newBeginPosition)
0: 	{
1: 
0: 		if (newBeginPosition > buf.length)
0: 			return;
1: 
0: 		beginPosition = newBeginPosition;
1: 	}
1: 
1: 	/**
0: 		Shrink the buffer left by the amount given. Ie.
0: 		bytes from 0 to amountToShrinkBy are thrown away
1: 	*/
0: 	public void discardLeft(int amountToShrinkBy) {
1: 
0: 		System.arraycopy(buf, amountToShrinkBy, buf, 0,
0: 			used - amountToShrinkBy);
1: 
0: 		position -= amountToShrinkBy;
0: 		used -= amountToShrinkBy;
1: 	}
1: 
1: 	/**
0: 		Expand the buffer by at least the number of bytes requested in minExtension.
1: 
0: 		To optimize performance and reduce memory copies and allocation, we have a staged buffer
0: 		expansion.
1: 
0: 		<UL>
0: 		<LI> buf.length < 128k - increase by 4k
0: 		<LI> buf.length < 1Mb - increase by 128k
0: 		<LI> otherwise increase by 1Mb.
0: 		</UL>
1: 
0: 		In all cases, if minExpansion is greater than the value about then the buffer will
0: 		be increased by minExtension.
1: 	*/
0: 	private void expandBuffer(int minExtension)
0: 	{
0: 		if (buf.length < (128 * 1024)) {
0: 			if (minExtension < INITIAL_SIZE)
0: 				minExtension = INITIAL_SIZE;
0: 		} else if (buf.length < (1024 * 1024)) {
1: 
0: 			if (minExtension < (128 * 1024))
0: 				minExtension = (128 * 1024);
0: 		} else {
0: 			if (minExtension < (1024 * 1024))
0: 				minExtension = 1024 * 1024;
1: 		}
1: 
0: 		int newsize = buf.length + minExtension;
1: 
0: 		byte[] newbuf = new byte[newsize];
0: 		System.arraycopy(buf, 0, newbuf, 0, buf.length);
0: 		buf = newbuf;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: 
0: /**
0: 	A DynamicByteArrayOutputStream allows writing to a dynamically resizable
0: 	array of bytes.   In addition to dynamic resizing, this extension allows
0: 	the user of this class to have more control over the position of the stream
0: 	and can get a direct reference of the array.
0: */
0: public class DynamicByteArrayOutputStream extends OutputStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private static int INITIAL_SIZE = 4096;
0: 
0: 	private byte[] buf;
0: 	private int		position;
0: 	private int		used;		// how many bytes are used
0: 	private int		beginPosition;
0: 
0: 	public DynamicByteArrayOutputStream() {
0: 		this(INITIAL_SIZE);
0: 	}
0: 
0: 	public DynamicByteArrayOutputStream(int size) {
0: 		super();
0: 
0: 		buf = new byte[size];
0: 	}
0: 
0: 	public DynamicByteArrayOutputStream(byte[] data) {
0: 		super();
0: 
0: 		buf = data;
0: 	}
0: 
0: 	public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
0: 
0: 		byte[] cbuf = toBeCloned.getByteArray();
0: 		buf = new byte[cbuf.length];
0: 
0: 		write(cbuf, 0, cbuf.length);
0: 		position = toBeCloned.getPosition();
0: 		used = toBeCloned.getUsed();
0: 		beginPosition = toBeCloned.getBeginPosition();
0: 	}
0: 
0: 	/*
0: 	 *	OutputStream methods
0: 	 */
0: 	public void write(int b) 
0: 	{
0: 		if (position >= buf.length)
0: 			expandBuffer(INITIAL_SIZE);
0: 
0: 		buf[position++] = (byte) b;
0: 
0: 		if (position > used)
0: 			used = position;
0: 	}
0: 	
0: 	public void write(byte[] b, int off, int len) 
0: 	{
0: 		if ((position+len) > buf.length)
0: 			expandBuffer(len);
0: 
0: 		System.arraycopy(b, off, buf, position, len);
0: 		position += len;
0: 
0: 		if (position > used)
0: 			used = position;
0: 	}
0: 
0: 	void writeCompleteStream(InputStream dataIn, int len) throws IOException
0: 	{
0: 		if ((position+len) > buf.length)
0: 			expandBuffer(len);
0: 
0: 		org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);
0: 		position += len;
0: 
0: 		if (position > used)
0: 			used = position;
0: 	}
0: 
0: 	public void close()
0: 	{
0: 		buf = null;
0: 		reset();
0: 	}
0: 
0: 	/*
0: 	 *	Specific methods
0: 	 */
0: 
0: 	/**
0: 		Reset the stream for reuse
0: 	*/
0: 	public void reset()
0: 	{
0: 		position = 0;
0: 		beginPosition = 0;
0: 		used = 0;
0: 	}
0: 
0: 	/**
0: 		Get a reference to the byte array stored in the byte array output
0: 		stream. Note that the byte array may be longer that getPosition().
0: 		Bytes beyond and including the current poistion are invalid.
0: 	*/
0: 	public byte[] getByteArray()
0: 	{
0: 		return buf;
0: 	}
0: 
0: 	/**
0: 		Get the number of bytes that was used.
0: 	*/
0: 	public int getUsed()
0: 	{
0: 		return used;
0: 	}
0: 
0: 	/**
0: 		Get the current position in the stream
0: 	*/
0: 	public int getPosition()
0: 	{
0: 		return position;
0: 	}
0: 
0: 	/**
0: 		Get the current position in the stream
0: 	*/
0: 	public int getBeginPosition()
0: 	{
0: 		return beginPosition;
0: 	}
0: 
0: 	/**
0: 		Set the position of the stream pointer.
0: 		It is up to the caller to make sure the stream has no gap of garbage in
0: 		it or useful information is not left out at the end because the stream
0: 		does not remember anything about the previous position.
0: 	*/
0: 	public void setPosition(int newPosition)
0: 	{
0: 		if (newPosition > position)
0: 		{
0: 			if (newPosition > buf.length)
0: 				expandBuffer(newPosition - buf.length);
0: 		}
0: 
0: 		position = newPosition;
0: 
0: 		if (position > used)
0: 			used = position;
0: 
0: 		return ;
0: 	}
0: 
0: 	/**
0: 		Set the begin position of the stream pointer.
0: 		If the newBeginPosition is larger than the stream itself,
0: 		then, the begin position is not set.
0: 	*/
0: 	public void setBeginPosition(int newBeginPosition)
0: 	{
0: 
0: 		if (newBeginPosition > buf.length)
0: 			return;
0: 
0: 		beginPosition = newBeginPosition;
0: 	}
0: 
0: 	/**
0: 		Shrink the buffer left by the amount given. Ie.
0: 		bytes from 0 to amountToShrinkBy are thrown away
0: 	*/
0: 	public void discardLeft(int amountToShrinkBy) {
0: 
0: 		System.arraycopy(buf, amountToShrinkBy, buf, 0,
0: 			used - amountToShrinkBy);
0: 
0: 		position -= amountToShrinkBy;
0: 		used -= amountToShrinkBy;
0: 	}
0: 
0: 	/**
0: 		Expand the buffer by at least the number of bytes requested in minExtension.
0: 
0: 		To optimize performance and reduce memory copies and allocation, we have a staged buffer
0: 		expansion.
0: 
0: 		<UL>
0: 		<LI> buf.length < 128k - increase by 4k
0: 		<LI> buf.length < 1Mb - increase by 128k
0: 		<LI> otherwise increase by 1Mb.
0: 		</UL>
0: 
0: 		In all cases, if minExpansion is greater than the value about then the buffer will
0: 		be increased by minExtension.
0: 	*/
0: 	private void expandBuffer(int minExtension)
0: 	{
0: 		if (buf.length < (128 * 1024)) {
0: 			if (minExtension < INITIAL_SIZE)
0: 				minExtension = INITIAL_SIZE;
0: 		} else if (buf.length < (1024 * 1024)) {
0: 
0: 			if (minExtension < (128 * 1024))
0: 				minExtension = (128 * 1024);
0: 		} else {
0: 			if (minExtension < (1024 * 1024))
0: 				minExtension = 1024 * 1024;
0: 		}
0: 
0: 		int newsize = buf.length + minExtension;
0: 
0: 		byte[] newbuf = new byte[newsize];
0: 		System.arraycopy(buf, 0, newbuf, 0, buf.length);
0: 		buf = newbuf;
0: 	}
0: 
0: }
============================================================================