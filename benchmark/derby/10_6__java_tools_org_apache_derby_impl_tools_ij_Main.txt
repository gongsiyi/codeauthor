1:fe77ca5: /*
9:fe77ca5: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.Main
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
1:985fc85: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.tools.JDBCDisplayUtil;
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:fe77ca5: 
1:fe77ca5: import java.io.FileInputStream;
1:fe77ca5: import java.io.BufferedInputStream;
1:fe77ca5: import java.io.BufferedReader;
1:fe77ca5: import java.io.FileOutputStream;
1:fe77ca5: import java.io.FileNotFoundException;
1:fe77ca5: import java.io.InputStream;
1:fe77ca5: import java.io.Reader;
1:fe77ca5: import java.io.PrintStream;
1:fe77ca5: import java.io.UnsupportedEncodingException;
1:fe77ca5: import java.io.IOException;
1:fe77ca5: 
1:38520af: import java.security.AccessController;
1:38520af: import java.security.PrivilegedAction;
1:07e72c3: import java.security.PrivilegedActionException;
1:07e72c3: import java.security.PrivilegedExceptionAction;
1:fe77ca5: import java.sql.Connection;
1:fe77ca5: import java.sql.SQLException;
1:fe77ca5: 
1:fe77ca5: import java.util.*;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * This is the controller for ij. It uses two parsers:
1:fe77ca5:  * one to grab the next statement, and another to
1:fe77ca5:  * see if it is an ij command, and if so execute it.
1:fe77ca5:  * If it is not an ij command, it is treated as a JSQL
1:fe77ca5:  * statement and executed against the current connection.
1:fe77ca5:  * ijParser controls the current connection, and so contains
1:fe77ca5:  * all of the state information for executing JSQL statements.
1:fe77ca5:  * <p>
1:fe77ca5:  * This was written to facilitate a test harness for language
1:fe77ca5:  * functionality tests.
1:fe77ca5:  *
1:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: public class Main {
1:2d5faea: 	private utilMain utilInstance;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * ij can be used directly on a shell command line through
1:fe77ca5: 	 * its main program.
1:fe77ca5: 	 * @param args allows 1 file name to be specified, from which
1:fe77ca5: 	 *    input will be read; if not specified, stdin is used.
1:fe77ca5: 	 */
1:fe77ca5: 	public static void main(String[] args)	
1:fe77ca5: 		throws IOException 
3:fe77ca5: 	{
1:fe77ca5: 		mainCore(args, new Main(true));
11:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public static void mainCore(String[] args, Main main)
1:fe77ca5: 		throws IOException 
1:a5a98ce: 	{
1:fe77ca5: 		LocalizedInput in = null;
1:fe77ca5: 		InputStream in1 = null;
1:fe77ca5: 		Main me;
1:fe77ca5: 		String file;
1:fe77ca5: 		String inputResourceName;
1:fe77ca5: 		boolean gotProp;
1:fe77ca5: 
1:4b8ef80: 		LocalizedResource langUtil = LocalizedResource.getInstance();
1:4b8ef80: 		LocalizedOutput out = langUtil.getNewOutput(System.out);
1:4b8ef80: 
1:4b8ef80:                 // Validate arguments, check for --help.
1:4b8ef80: 		if (util.invalidArgs(args)) {
1:4b8ef80: 			util.Usage(out);
1:4b8ef80:       		return;
1:4b8ef80: 		}
1:4b8ef80: 
1:fe77ca5: 		// load the property file if specified
1:fe77ca5: 		gotProp = util.getPropertyArg(args);
1:fe77ca5: 
1:02edb50: 		// readjust output to derby.ui.locale and derby.ui.codeset if 
1:02edb50:                 // they were loaded from a property file.
1:02edb50: 		langUtil.init();
1:02edb50: 		out = langUtil.getNewOutput(System.out);
1:4b8ef80:                 main.initAppUI();
1:fe77ca5: 
1:fe77ca5: 		file = util.getFileArg(args);
1:fe77ca5: 		inputResourceName = util.getInputResourceNameArg(args);
1:4b8ef80: 		if (inputResourceName != null) {
1:fe77ca5: 			in = langUtil.getNewInput(util.getResourceAsStream(inputResourceName));
2:fe77ca5: 			if (in == null) {
1:fe77ca5: 				out.println(langUtil.getTextMessage("IJ_IjErroResoNo",inputResourceName));
3:fe77ca5: 				return;
1:fe77ca5: 			}
1:fe77ca5: 		} else if (file == null) {
1:fe77ca5: 			in = langUtil.getNewInput(System.in);
1:4b8ef80:                         out.flush();
1:4b8ef80:     	        } else {
1:4b8ef80:                     try {
1:07e72c3:                     	final String inFile1 = file;
1:16d3334:                     	in1 = AccessController.doPrivileged(new PrivilegedExceptionAction<FileInputStream>() {
1:16d3334:             				public FileInputStream run() throws FileNotFoundException {
1:07e72c3:         						return new FileInputStream(inFile1);
1:07e72c3:             				}
1:07e72c3:             			});
1:4b8ef80:                         if (in1 != null) {
1:4b8ef80:                             in1 = new BufferedInputStream(in1, utilMain.BUFFEREDFILESIZE);
1:4b8ef80:                             in = langUtil.getNewInput(in1);
1:4b8ef80:                         }
1:07e72c3:                     } catch (PrivilegedActionException e) {
1:4b8ef80:                         if (Boolean.getBoolean("ij.searchClassPath")) {
1:4b8ef80:                             in = langUtil.getNewInput(util.getResourceAsStream(file));
1:4b8ef80:                         }
1:4b8ef80:                         if (in == null) {
1:4b8ef80:                         out.println(langUtil.getTextMessage("IJ_IjErroFileNo",file));
1:4b8ef80:             		  return;
1:4b8ef80:                         }
1:4b8ef80:                     }
1:fe77ca5:                 }
1:fe77ca5: 
1:38520af: 		final String outFile = util.getSystemProperty("ij.outfile");
1:fe77ca5: 		if (outFile != null && outFile.length()>0) {
1:fe77ca5: 			LocalizedOutput oldOut = out;
1:16d3334: 			FileOutputStream fos = AccessController.doPrivileged(new PrivilegedAction<FileOutputStream>() {
1:16d3334: 				public FileOutputStream run() {
1:38520af: 					FileOutputStream out = null;
1:38520af: 					try {
1:38520af: 						out = new FileOutputStream(outFile);
1:38520af: 					} catch (FileNotFoundException e) {
1:38520af: 						out = null;
1:38520af: 					}
1:38520af: 					return out;
1:38520af: 				}
1:38520af: 			});
1:38520af: 			out = langUtil.getNewOutput(fos);
1:38520af: 
1:38520af: 			if (out == null)
1:38520af: 			   oldOut.println(langUtil.getTextMessage("IJ_IjErroUnabTo",outFile));
1:38520af: 	
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		// the old property name is deprecated...
1:fe77ca5: 		String maxDisplayWidth = util.getSystemProperty("maximumDisplayWidth");
1:fe77ca5: 		if (maxDisplayWidth==null) 
1:fe77ca5: 			maxDisplayWidth = util.getSystemProperty("ij.maximumDisplayWidth");
1:fe77ca5: 		if (maxDisplayWidth != null && maxDisplayWidth.length() > 0) {
3:fe77ca5: 			try {
1:fe77ca5: 				int maxWidth = Integer.parseInt(maxDisplayWidth);
1:fe77ca5: 				JDBCDisplayUtil.setMaxDisplayWidth(maxWidth);
1:fe77ca5: 			}
1:fe77ca5: 			catch (NumberFormatException nfe) {
1:fe77ca5: 				out.println(langUtil.getTextMessage("IJ_IjErroMaxiVa", maxDisplayWidth));
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		/* Use the main parameter to get to
1:fe77ca5: 		 * a new Main that we can use.  
1:fe77ca5: 		 * (We can't do the work in Main(out)
1:fe77ca5: 		 * until after we do all of the work above
1:fe77ca5: 		 * us in this method.
1:fe77ca5: 		 */
1:fe77ca5: 		me = main.getMain(out);
1:fe77ca5: 
1:fe77ca5: 		/* Let the processing begin! */
1:1b0debd: 		me.go(in, out);
1:fe77ca5: 		in.close(); out.close();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the right Main (according to 
1:fe77ca5: 	 * the JDBC version.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The right main (according to the JDBC version).
1:fe77ca5: 	 */
1:fe77ca5: 	public Main getMain(LocalizedOutput out)
1:fe77ca5: 	{
1:fe77ca5: 		return new Main(out);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the right utilMain (according to 
1:fe77ca5: 	 * the JDBC version.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The right utilMain (according to the JDBC version).
1:fe77ca5: 	 */
1:fe77ca5: 	public utilMain getutilMain(int numConnections, LocalizedOutput out)
1:fe77ca5: 	{
1:fe77ca5: 		return new utilMain(numConnections, out);
1:fe77ca5: 	}
1:fe77ca5: 
1:a39c84c:     /**
1:a39c84c: 	 * Get the right utilMain (according to
1:a39c84c: 	 * the JDBC version. This overload allows the choice of whether
1:a39c84c:      * the system properties will be used or not.
1:a39c84c: 	 *
1:a39c84c: 	 * @return	The right utilMain (according to the JDBC version).
1:a39c84c: 	 */
1:a39c84c:     public utilMain getutilMain(int numConnections, LocalizedOutput out, boolean loadSystemProperties)
1:a39c84c: 	{
1:a39c84c: 		return new utilMain(numConnections, out, loadSystemProperties);
1:a39c84c: 	}
1:a39c84c: 
1:fe77ca5: 	/**
1:fe77ca5: 		Give a shortcut to go on the utilInstance so
1:fe77ca5: 		we don't expose utilMain.
1:fe77ca5: 	 */
1:1b0debd: 	private void go(LocalizedInput in, LocalizedOutput out )
1:fe77ca5: 	{
1:fe77ca5: 		LocalizedInput[] inA = { in } ;
1:1b0debd: 		utilInstance.go(inA, out);
1:a5a98ce: 	}
1:a5a98ce: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * create an ij tool waiting to be given input and output streams.
1:fe77ca5: 	 */
1:fe77ca5: 	public Main() {
1:fe77ca5: 		this(null);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Main(LocalizedOutput out) {
1:43e6994: 		if (out == null) {
1:43e6994: 	        out = LocalizedResource.getInstance().getNewOutput(System.out);
1:fe77ca5: 		}
1:43e6994: 		utilInstance = getutilMain(1, out);
1:351dad8: 		utilInstance.initFromEnvironment();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * This constructor is only used so that we 
1:fe77ca5: 	 * can get to the right Main based on the
1:fe77ca5: 	 * JDBC version.  We don't do any work in
1:fe77ca5: 	 * this constructor and we only use this
1:fe77ca5: 	 * object to get to the right Main via
1:fe77ca5: 	 * getMain().
1:fe77ca5: 	 */
1:fe77ca5: 	public Main(boolean trash)
1:fe77ca5: 	{
1:fe77ca5: 	}
1:b1153d5:   private void initAppUI(){
1:fe77ca5:     //To fix a problem in the AppUI implementation, a reference to the AppUI class is
1:fe77ca5:     //maintained by this tool.  Without this reference, it is possible for the
1:fe77ca5:     //AppUI class to be garbage collected and the initialization values lost.
1:fe77ca5:     //langUtilClass = LocalizedResource.class;
1:fe77ca5: 
1:4b8ef80: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
1:fe77ca5: 	LocalizedResource.getInstance();	
1:fe77ca5:   }
1:38520af:   
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1:                     	in1 = AccessController.doPrivileged(new PrivilegedExceptionAction<FileInputStream>() {
1:             				public FileInputStream run() throws FileNotFoundException {
/////////////////////////////////////////////////////////////////////////
1: 			FileOutputStream fos = AccessController.doPrivileged(new PrivilegedAction<FileOutputStream>() {
1: 				public FileOutputStream run() {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:07e72c3
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:                     	final String inFile1 = file;
0:                     	in1 = (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
0:             				public Object run() throws FileNotFoundException {
1:         						return new FileInputStream(inFile1);
1:             				}
1:             			});
1:                     } catch (PrivilegedActionException e) {
commit:a39c84c
/////////////////////////////////////////////////////////////////////////
1:     /**
1: 	 * Get the right utilMain (according to
1: 	 * the JDBC version. This overload allows the choice of whether
1:      * the system properties will be used or not.
1: 	 *
1: 	 * @return	The right utilMain (according to the JDBC version).
1: 	 */
1:     public utilMain getutilMain(int numConnections, LocalizedOutput out, boolean loadSystemProperties)
1: 	{
1: 		return new utilMain(numConnections, out, loadSystemProperties);
1: 	}
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:1b0debd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		me.go(in, out);
/////////////////////////////////////////////////////////////////////////
1: 	private void go(LocalizedInput in, LocalizedOutput out )
1: 		utilInstance.go(inA, out);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:38520af
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 		final String outFile = util.getSystemProperty("ij.outfile");
0: 			FileOutputStream fos = (FileOutputStream) AccessController.doPrivileged(new PrivilegedAction() {
0: 				public Object run() {
1: 					FileOutputStream out = null;
1: 					try {
1: 						out = new FileOutputStream(outFile);
1: 					} catch (FileNotFoundException e) {
1: 						out = null;
1: 					}
1: 					return out;
1: 				}
1: 			});
1: 			out = langUtil.getNewOutput(fos);
1: 
1: 			if (out == null)
1: 			   oldOut.println(langUtil.getTextMessage("IJ_IjErroUnabTo",outFile));
1: 	
/////////////////////////////////////////////////////////////////////////
1:   
commit:02edb50
/////////////////////////////////////////////////////////////////////////
1: 		// readjust output to derby.ui.locale and derby.ui.codeset if 
1:                 // they were loaded from a property file.
1: 		langUtil.init();
1: 		out = langUtil.getNewOutput(System.out);
commit:4b8ef80
/////////////////////////////////////////////////////////////////////////
1: 		LocalizedResource langUtil = LocalizedResource.getInstance();
1: 		LocalizedOutput out = langUtil.getNewOutput(System.out);
1: 
1:                 // Validate arguments, check for --help.
1: 		if (util.invalidArgs(args)) {
1: 			util.Usage(out);
1:       		return;
1: 		}
1: 
1: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
1:                 main.initAppUI();
1: 		if (inputResourceName != null) {
/////////////////////////////////////////////////////////////////////////
1:                         out.flush();
1:     	        } else {
1:                     try {
0:                         in1 = new FileInputStream(file);
1:                         if (in1 != null) {
1:                             in1 = new BufferedInputStream(in1, utilMain.BUFFEREDFILESIZE);
1:                             in = langUtil.getNewInput(in1);
1:                         }
0:                     } catch (FileNotFoundException e) {
1:                         if (Boolean.getBoolean("ij.searchClassPath")) {
1:                             in = langUtil.getNewInput(util.getResourceAsStream(file));
1:                         }
1:                         if (in == null) {
1:                         out.println(langUtil.getTextMessage("IJ_IjErroFileNo",file));
1:             		  return;
1:                         }
1:                     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:351dad8
/////////////////////////////////////////////////////////////////////////
1: 		utilInstance.initFromEnvironment();
commit:43e6994
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private void go(LocalizedInput in, LocalizedOutput out , 
/////////////////////////////////////////////////////////////////////////
1: 		if (out == null) {
1: 	        out = LocalizedResource.getInstance().getNewOutput(System.out);
1: 		utilInstance = getutilMain(1, out);
0: 		utilInstance.initConnections();
commit:2b47710
/////////////////////////////////////////////////////////////////////////
commit:b1153d5
/////////////////////////////////////////////////////////////////////////
1:   private void initAppUI(){
commit:a5a98ce
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	public void goScript(Connection conn,
0: 			LocalizedInput in)
1: {
0: 	utilInstance.goScript(conn, in);
1: }	
commit:2d5faea
/////////////////////////////////////////////////////////////////////////
0: 	private LocalizedOutput out;
1: 	private utilMain utilInstance;
/////////////////////////////////////////////////////////////////////////
commit:9fedfda
/////////////////////////////////////////////////////////////////////////
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.Main
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: 
1: import java.io.FileInputStream;
1: import java.io.BufferedInputStream;
1: import java.io.BufferedReader;
1: import java.io.FileOutputStream;
1: import java.io.FileNotFoundException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.io.PrintStream;
1: import java.io.UnsupportedEncodingException;
1: import java.io.IOException;
1: 
1: import java.sql.Connection;
0: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: 
1: import java.util.*;
1: 
1: /**
1:  * This is the controller for ij. It uses two parsers:
1:  * one to grab the next statement, and another to
1:  * see if it is an ij command, and if so execute it.
1:  * If it is not an ij command, it is treated as a JSQL
1:  * statement and executed against the current connection.
1:  * ijParser controls the current connection, and so contains
1:  * all of the state information for executing JSQL statements.
1:  * <p>
1:  * This was written to facilitate a test harness for language
1:  * functionality tests.
1:  *
0:  * @author ames
1:  *
1:  */
1: public class Main {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public LocalizedOutput out;
0: 	public utilMain utilInstance;
0: 	public Class langUtilClass;
1: 
1: 
1: 
1: 	/**
1: 	 * ij can be used directly on a shell command line through
1: 	 * its main program.
1: 	 * @param args allows 1 file name to be specified, from which
1: 	 *    input will be read; if not specified, stdin is used.
1: 	 */
1: 	public static void main(String[] args)	
1: 		throws IOException 
1: 	{
1: 		mainCore(args, new Main(true));
1: 	}
1: 
1: 	public static void mainCore(String[] args, Main main)
1: 		throws IOException 
1: 	{
1: 		LocalizedInput in = null;
1: 		InputStream in1 = null;
1: 		Main me;
1: 		String file;
1: 		String inputResourceName;
1: 		boolean gotProp;
1: 
0: 		String tmpUnicode = null;
0: 		Properties connAttributeDefaults = null;
1: 
1: 		// load the property file if specified
1: 		gotProp = util.getPropertyArg(args);
1: 
0: 		// get the default connection attributes
0: 		connAttributeDefaults = util.getConnAttributeArg(args);
0: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
0:     main.initAppUI();
1: 
0: 		LocalizedResource langUtil = LocalizedResource.getInstance();
1:         
0: 		LocalizedOutput out = langUtil.getNewOutput(System.out);
1: 
1: 		file = util.getFileArg(args);
1: 		inputResourceName = util.getInputResourceNameArg(args);
0: 		if (util.invalidArgs(args, gotProp, file, inputResourceName)) {
0: 			util.Usage(out);
1:       		return;
1: 		}
0: 		else if (inputResourceName != null) {
1: 			in = langUtil.getNewInput(util.getResourceAsStream(inputResourceName));
1: 			if (in == null) {
1: 				out.println(langUtil.getTextMessage("IJ_IjErroResoNo",inputResourceName));
1: 				return;
1: 			}
1: 		} else if (file == null) {
1: 			in = langUtil.getNewInput(System.in);
0:             out.flush();
0:     	} else {
1:       		try {
0: 				in1 = new FileInputStream(file);
0: 				if (in1 != null) {
0:                     in1 = new BufferedInputStream(in1, utilMain.BUFFEREDFILESIZE);
0: 					in = langUtil.getNewInput(in1);
1:                 }
0:       		} catch (FileNotFoundException e) {
0: 				if (Boolean.getBoolean("ij.searchClassPath")) {
0: 					in = langUtil.getNewInput(util.getResourceAsStream(file));
1:                 }
1: 				if (in == null) {
0: 				  out.println(langUtil.getTextMessage("IJ_IjErroFileNo",file));
1:         		  return;
1: 				}
1:       		}
1:     	}
1: 
0: 		// set initial Unicode Escape Mode
0: 		tmpUnicode = util.getSystemProperty("ij.unicodeEscape");
0: 		if ((tmpUnicode != null) && tmpUnicode.toUpperCase(Locale.ENGLISH).equals("ON")) {
0: 			LocalizedResource.setUnicodeEscape(true);
1: 		} 
0: 		String outFile = util.getSystemProperty("ij.outfile");
1: 		if (outFile != null && outFile.length()>0) {
1: 			LocalizedOutput oldOut = out;
1: 			try {
0: 				out = langUtil.getNewOutput(new FileOutputStream(outFile));
1: 			}
0: 			catch (IOException ioe) {
0: 				oldOut.println(langUtil.getTextMessage("IJ_IjErroUnabTo",outFile));
1: 			}
1: 		}
1: 
1: 		// the old property name is deprecated...
1: 		String maxDisplayWidth = util.getSystemProperty("maximumDisplayWidth");
1: 		if (maxDisplayWidth==null) 
1: 			maxDisplayWidth = util.getSystemProperty("ij.maximumDisplayWidth");
1: 		if (maxDisplayWidth != null && maxDisplayWidth.length() > 0) {
1: 			try {
1: 				int maxWidth = Integer.parseInt(maxDisplayWidth);
1: 				JDBCDisplayUtil.setMaxDisplayWidth(maxWidth);
1: 			}
1: 			catch (NumberFormatException nfe) {
1: 				out.println(langUtil.getTextMessage("IJ_IjErroMaxiVa", maxDisplayWidth));
1: 			}
1: 		}
1: 
1: 		/* Use the main parameter to get to
1: 		 * a new Main that we can use.  
1: 		 * (We can't do the work in Main(out)
1: 		 * until after we do all of the work above
1: 		 * us in this method.
1: 		 */
1: 		me = main.getMain(out);
1: 
1: 		/* Let the processing begin! */
0: 		me.go(in, out, connAttributeDefaults);
1: 		in.close(); out.close();
1: 	}
1: 
1: 	/**
1: 	 * Get the right Main (according to 
1: 	 * the JDBC version.
1: 	 *
1: 	 * @return	The right main (according to the JDBC version).
1: 	 */
1: 	public Main getMain(LocalizedOutput out)
1: 	{
1: 		return new Main(out);
1: 	}
1: 
1: 	/**
1: 	 * Get the right utilMain (according to 
1: 	 * the JDBC version.
1: 	 *
1: 	 * @return	The right utilMain (according to the JDBC version).
1: 	 */
1: 	public utilMain getutilMain(int numConnections, LocalizedOutput out)
1: 	{
1: 		return new utilMain(numConnections, out);
1: 	}
1: 
1: 	/**
1: 		Give a shortcut to go on the utilInstance so
1: 		we don't expose utilMain.
1: 	 */
0: 	public void go(LocalizedInput in, LocalizedOutput out , 
0: 				   Properties connAttributeDefaults)
1: 	{
1: 		LocalizedInput[] inA = { in } ;
0: 		utilInstance.go(inA, out,connAttributeDefaults);
1: 	}
1: 
0: 	public void go(InputStream in, PrintStream out, 
0: 				   Properties connAttributeDefaults)
1: 	{
0:     initAppUI();
0:     	LocalizedResource langUtil = LocalizedResource.getInstance();
0: 		go(langUtil.getNewInput(in), langUtil.getNewOutput(out),
0: 			   connAttributeDefaults);
1: 	}
1: 
1: 	/**
1: 	 * create an ij tool waiting to be given input and output streams.
1: 	 */
1: 	public Main() {
1: 		this(null);
1: 	}
1: 
1: 	public Main(LocalizedOutput out) {
0: 		if (out!=null) {
0: 			this.out = out;
0: 		} else {
0: 	        this.out = LocalizedResource.getInstance().getNewOutput(System.out);
1: 		}
0: 		utilInstance = getutilMain(1, this.out);
1: 	}
1: 
1: 	/**
1: 	 * This constructor is only used so that we 
1: 	 * can get to the right Main based on the
1: 	 * JDBC version.  We don't do any work in
1: 	 * this constructor and we only use this
1: 	 * object to get to the right Main via
1: 	 * getMain().
1: 	 */
1: 	public Main(boolean trash)
1: 	{
1: 	}
0:   public void initAppUI(){
1:     //To fix a problem in the AppUI implementation, a reference to the AppUI class is
1:     //maintained by this tool.  Without this reference, it is possible for the
1:     //AppUI class to be garbage collected and the initialization values lost.
1:     //langUtilClass = LocalizedResource.class;
1: 
0: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
1: 	LocalizedResource.getInstance();	
1:   }
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ce814b0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import org.apache.derby.tools.JDBCDisplayUtil;
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.iapi.tools.i18n.LocalizedInput;
0: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
0: 
0: import java.io.FileInputStream;
0: import java.io.BufferedInputStream;
0: import java.io.BufferedReader;
0: import java.io.FileOutputStream;
0: import java.io.FileNotFoundException;
0: import java.io.InputStream;
0: import java.io.Reader;
0: import java.io.PrintStream;
0: import java.io.UnsupportedEncodingException;
0: import java.io.IOException;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: 
0: import java.util.*;
0: 
0: /**
0:  * This is the controller for ij. It uses two parsers:
0:  * one to grab the next statement, and another to
0:  * see if it is an ij command, and if so execute it.
0:  * If it is not an ij command, it is treated as a JSQL
0:  * statement and executed against the current connection.
0:  * ijParser controls the current connection, and so contains
0:  * all of the state information for executing JSQL statements.
0:  * <p>
0:  * This was written to facilitate a test harness for language
0:  * functionality tests.
0:  *
0:  * @author ames
0:  *
0:  */
0: public class Main {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public LocalizedOutput out;
0: 	public utilMain utilInstance;
0: 	public Class langUtilClass;
0: 
0: 
0: 
0: 	/**
0: 	 * ij can be used directly on a shell command line through
0: 	 * its main program.
0: 	 * @param args allows 1 file name to be specified, from which
0: 	 *    input will be read; if not specified, stdin is used.
0: 	 */
0: 	public static void main(String[] args)	
0: 		throws IOException 
0: 	{
0: 		mainCore(args, new Main(true));
0: 	}
0: 
0: 	public static void mainCore(String[] args, Main main)
0: 		throws IOException 
0: 	{
0: 		LocalizedInput in = null;
0: 		InputStream in1 = null;
0: 		Main me;
0: 		String file;
0: 		String inputResourceName;
0: 		boolean gotProp;
0: 
0: 		String tmpUnicode = null;
0: 		Properties connAttributeDefaults = null;
0: 
0: 		// load the property file if specified
0: 		gotProp = util.getPropertyArg(args);
0: 
0: 		// get the default connection attributes
0: 		connAttributeDefaults = util.getConnAttributeArg(args);
0: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
0:     main.initAppUI();
0: 
0: 		LocalizedResource langUtil = LocalizedResource.getInstance();
0:         
0: 		LocalizedOutput out = langUtil.getNewOutput(System.out);
0: 
0: 		file = util.getFileArg(args);
0: 		inputResourceName = util.getInputResourceNameArg(args);
0: 		if (util.invalidArgs(args, gotProp, file, inputResourceName)) {
0: 			util.Usage(out);
0:       		return;
0: 		}
0: 		else if (inputResourceName != null) {
0: 			in = langUtil.getNewInput(util.getResourceAsStream(inputResourceName));
0: 			if (in == null) {
0: 				out.println(langUtil.getTextMessage("IJ_IjErroResoNo",inputResourceName));
0: 				return;
0: 			}
0: 		} else if (file == null) {
0: 			in = langUtil.getNewInput(System.in);
0:             out.flush();
0:     	} else {
0:       		try {
0: 				in1 = new FileInputStream(file);
0: 				if (in1 != null) {
0:                     in1 = new BufferedInputStream(in1, utilMain.BUFFEREDFILESIZE);
0: 					in = langUtil.getNewInput(in1);
0:                 }
0:       		} catch (FileNotFoundException e) {
0: 				if (Boolean.getBoolean("ij.searchClassPath")) {
0: 					in = langUtil.getNewInput(util.getResourceAsStream(file));
0:                 }
0: 				if (in == null) {
0: 				  out.println(langUtil.getTextMessage("IJ_IjErroFileNo",file));
0:         		  return;
0: 				}
0:       		}
0:     	}
0: 
0: 		// set initial Unicode Escape Mode
0: 		tmpUnicode = util.getSystemProperty("ij.unicodeEscape");
0: 		if ((tmpUnicode != null) && tmpUnicode.toUpperCase(Locale.ENGLISH).equals("ON")) {
0: 			LocalizedResource.setUnicodeEscape(true);
0: 		} 
0: 		String outFile = util.getSystemProperty("ij.outfile");
0: 		if (outFile != null && outFile.length()>0) {
0: 			LocalizedOutput oldOut = out;
0: 			try {
0: 				out = langUtil.getNewOutput(new FileOutputStream(outFile));
0: 			}
0: 			catch (IOException ioe) {
0: 				oldOut.println(langUtil.getTextMessage("IJ_IjErroUnabTo",outFile));
0: 			}
0: 		}
0: 
0: 		// the old property name is deprecated...
0: 		String maxDisplayWidth = util.getSystemProperty("maximumDisplayWidth");
0: 		if (maxDisplayWidth==null) 
0: 			maxDisplayWidth = util.getSystemProperty("ij.maximumDisplayWidth");
0: 		if (maxDisplayWidth != null && maxDisplayWidth.length() > 0) {
0: 			try {
0: 				int maxWidth = Integer.parseInt(maxDisplayWidth);
0: 				JDBCDisplayUtil.setMaxDisplayWidth(maxWidth);
0: 			}
0: 			catch (NumberFormatException nfe) {
0: 				out.println(langUtil.getTextMessage("IJ_IjErroMaxiVa", maxDisplayWidth));
0: 			}
0: 		}
0: 
0: 		/* Use the main parameter to get to
0: 		 * a new Main that we can use.  
0: 		 * (We can't do the work in Main(out)
0: 		 * until after we do all of the work above
0: 		 * us in this method.
0: 		 */
0: 		me = main.getMain(out);
0: 
0: 		/* Let the processing begin! */
0: 		me.go(in, out, connAttributeDefaults);
0: 		in.close(); out.close();
0: 	}
0: 
0: 	/**
0: 	 * Get the right Main (according to 
0: 	 * the JDBC version.
0: 	 *
0: 	 * @return	The right main (according to the JDBC version).
0: 	 */
0: 	public Main getMain(LocalizedOutput out)
0: 	{
0: 		return new Main(out);
0: 	}
0: 
0: 	/**
0: 	 * Get the right utilMain (according to 
0: 	 * the JDBC version.
0: 	 *
0: 	 * @return	The right utilMain (according to the JDBC version).
0: 	 */
0: 	public utilMain getutilMain(int numConnections, LocalizedOutput out)
0: 	{
0: 		return new utilMain(numConnections, out);
0: 	}
0: 
0: 	/**
0: 		Give a shortcut to go on the utilInstance so
0: 		we don't expose utilMain.
0: 	 */
0: 	public void go(LocalizedInput in, LocalizedOutput out , 
0: 				   Properties connAttributeDefaults)
0: 	{
0: 		LocalizedInput[] inA = { in } ;
0: 		utilInstance.go(inA, out,connAttributeDefaults);
0: 	}
0: 
0: 	public void go(InputStream in, PrintStream out, 
0: 				   Properties connAttributeDefaults)
0: 	{
0:     initAppUI();
0:     	LocalizedResource langUtil = LocalizedResource.getInstance();
0: 		go(langUtil.getNewInput(in), langUtil.getNewOutput(out),
0: 			   connAttributeDefaults);
0: 	}
0: 
0: 	/**
0: 	 * create an ij tool waiting to be given input and output streams.
0: 	 */
0: 	public Main() {
0: 		this(null);
0: 	}
0: 
0: 	public Main(LocalizedOutput out) {
0: 		if (out!=null) {
0: 			this.out = out;
0: 		} else {
0: 	        this.out = LocalizedResource.getInstance().getNewOutput(System.out);
0: 		}
0: 		utilInstance = getutilMain(1, this.out);
0: 	}
0: 
0: 	/**
0: 	 * This constructor is only used so that we 
0: 	 * can get to the right Main based on the
0: 	 * JDBC version.  We don't do any work in
0: 	 * this constructor and we only use this
0: 	 * object to get to the right Main via
0: 	 * getMain().
0: 	 */
0: 	public Main(boolean trash)
0: 	{
0: 	}
0:   public void initAppUI(){
0:     //To fix a problem in the AppUI implementation, a reference to the AppUI class is
0:     //maintained by this tool.  Without this reference, it is possible for the
0:     //AppUI class to be garbage collected and the initialization values lost.
0:     //langUtilClass = LocalizedResource.class;
0: 
0: 		// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
0: 	LocalizedResource.getInstance();	
0:   }
0: }
============================================================================